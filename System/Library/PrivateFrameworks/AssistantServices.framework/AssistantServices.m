uint64_t sub_100006CC8( mach_port_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unint64_t *a5, void *a6, unsigned int *a7)
{
  mach_port_t reply_port;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  NDR_record_t v22;
  unint64_t v23;
  int v24;
  v18 = 1;
  v19 = a3;
  v20 = 16777472;
  v21 = a4;
  v22 = NDR_record;
  v23 = __PAIR64__(a4, a2);
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }

  v12 = mach_msg(&msg, 3, 0x3Cu, 0x48u, reply_port, 0, 0);
  v13 = v12;
  if ((v12 - 268435458) <= 0xE && ((1 << (v12 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v13;
  }

  if ((_DWORD)v12)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v13;
  }

  if (msg.msgh_id == 71)
  {
    v15 = 4294966988LL;
  }

  else if (msg.msgh_id == 1300)
  {
    if ((msg.msgh_bits & 0x80000000) != 0)
    {
      v15 = 4294966996LL;
      if (v18 == 1 && msg.msgh_size == 64 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
      {
        v16 = v21;
        if (v21 == v24)
        {
          *a5 = v23;
          *a6 = v19;
          *a7 = v16;
          return 0LL;
        }
      }
    }

    else if (msg.msgh_size == 36)
    {
      v15 = 4294966996LL;
      if (HIDWORD(v19))
      {
        if (msg.msgh_remote_port) {
          v15 = 4294966996LL;
        }
        else {
          v15 = HIDWORD(v19);
        }
      }
    }

    else
    {
      v15 = 4294966996LL;
    }
  }

  else
  {
    v15 = 4294966995LL;
  }

  mach_msg_destroy(&msg);
  return v15;
}

uint64_t sub_100006EBC(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  int v11 = 1;
  uint64_t v12 = a4;
  int v13 = 16777472;
  int v14 = a5;
  NDR_record_t v15 = NDR_record;
  int v16 = a2;
  uint64_t v17 = a3;
  int v18 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v7 = mach_msg(&msg, 3, 0x44u, 0x2Cu, reply_port, 0, 0);
  uint64_t v8 = v7;
  if ((v7 - 268435458) <= 0xE && ((1 << (v7 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v8;
  }

  if ((_DWORD)v7)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v8;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v8 = 4294966988LL;
LABEL_17:
    mach_msg_destroy(&msg);
    return v8;
  }

  if (msg.msgh_id != 1301)
  {
    uint64_t v8 = 4294966995LL;
    goto LABEL_17;
  }

  uint64_t v8 = 4294966996LL;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v8 = HIDWORD(v12);
  if (HIDWORD(v12)) {
    goto LABEL_17;
  }
  return v8;
}

uint64_t sub_100007034(mach_port_t a1, int a2, uint64_t a3, uint64_t a4, int a5, void *a6, _DWORD *a7)
{
  int v17 = 1;
  uint64_t v18 = a4;
  int v19 = 16777472;
  int v20 = a5;
  NDR_record_t v21 = NDR_record;
  int v22 = a2;
  uint64_t v23 = a3;
  int v24 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3, 0x44u, 0x40u, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) <= 0xE && ((1 << (v11 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v12;
  }

  if ((_DWORD)v11)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v12;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v14 = 4294966988LL;
  }

  else if (msg.msgh_id == 1302)
  {
    if ((msg.msgh_bits & 0x80000000) != 0)
    {
      uint64_t v14 = 4294966996LL;
      if (v17 == 1 && msg.msgh_size == 56 && !msg.msgh_remote_port && HIBYTE(v19) == 1)
      {
        int v15 = v20;
        if (v20 == v22)
        {
          *a6 = v18;
          *a7 = v15;
          return 0LL;
        }
      }
    }

    else if (msg.msgh_size == 36)
    {
      uint64_t v14 = 4294966996LL;
      if (HIDWORD(v18))
      {
        if (msg.msgh_remote_port) {
          uint64_t v14 = 4294966996LL;
        }
        else {
          uint64_t v14 = HIDWORD(v18);
        }
      }
    }

    else
    {
      uint64_t v14 = 4294966996LL;
    }
  }

  else
  {
    uint64_t v14 = 4294966995LL;
  }

  mach_msg_destroy(&msg);
  return v14;
}

uint64_t sub_100007224(mach_port_t a1, unsigned int a2, uint64_t a3)
{
  NDR_record_t v9 = NDR_record;
  unsigned int v10 = a2;
  uint64_t v11 = a3;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v5 = mach_msg(&msg, 3, 0x2Cu, 0x2Cu, reply_port, 0, 0);
  uint64_t v6 = v5;
  if ((v5 - 268435458) <= 0xE && ((1 << (v5 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v6;
  }

  if ((_DWORD)v5)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v6;
  }

  else
  {
    if (msg.msgh_id == 71)
    {
      uint64_t v6 = 4294966988LL;
    }

    else if (msg.msgh_id == 1303)
    {
      uint64_t v6 = 4294966996LL;
      if ((msg.msgh_bits & 0x80000000) == 0 && msg.msgh_size == 36 && !msg.msgh_remote_port)
      {
        uint64_t v6 = v10;
        if (!v10) {
          return v6;
        }
      }
    }

    else
    {
      uint64_t v6 = 4294966995LL;
    }

    mach_msg_destroy(&msg);
    return v6;
  }
}

void sub_100007374(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_10000742C()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL
                                             * (((((v1 + 121702045) & 0x856FEF6) - 4) * (v2 == 0)) ^ (v0 + v1 + 2)))
                            - 8LL))();
}

uint64_t sub_10000746C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1 + 8LL * (v1 - 3)))(v3);
  *(_DWORD *)(v2 + 24) = 0;
  return result;
}

void sub_1000075E0(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = v2;
  __asm { BR              X9 }

uint64_t sub_100007644()
{
  return 4294923273LL;
}

void sub_100007774(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (646995413 * ((((2 * a1) | 0x8F18737E) - a1 + 947111489) ^ 0x534DB4D5));
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned int *)off_1004E9860[v1 - 36];
  strcpy(v5, "com.apple.absd");
  uint64_t v4 = *(void *)((char *)off_1004E9860[v1 - 46]
                 + 8
                 * ((123
                   * (((unsigned int (*)(uint64_t, char *, uint64_t))off_1004E9860[v1 - 40])(v3, v5, v2) == 0)) ^ v1)
                 - 12)
     - ((v1 + 23) ^ 0x41LL);
  __asm { BR              X9 }

void sub_100007878()
{
  *(_DWORD *)(v0 + 4) = v1;
}

void sub_100007908(uint64_t a1, uint64_t a2, int a3)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v5 = v3 || a3 == 0;
  __asm { BR              X9 }

uint64_t sub_100007974()
{
  return 4294923273LL;
}

void sub_100007A98(uint64_t a1)
{
  __asm { BR              X10 }

uint64_t sub_100007B44()
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t (*)()))(v2 + 8LL * (v0 & 0x40188)))( *(void *)(v2 + 8LL * (v0 & 0x40000402)),  nullsub_12);
  *int v1 = 1410186986;
  return result;
}

void sub_100008B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    BOOL v4 = a4 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  int v5 = !v4;
  __asm { BR              X9 }

uint64_t sub_100008BB8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v14[0] = *(void *)(v6 + 16);
  unsigned int v20 = 1829790799 * (((&v18 | 0xDC543C92) - (&v18 & 0xDC543C92)) ^ 0x1E9D9CD9) + 463207035;
  int v19 = v14;
  uint64_t v11 = *(void (**)(int *))(a6 + 48);
  v11(&v18);
  v14[0] = *(void *)(v6 + 248);
  v14[1] = a1;
  v14[2] = a2;
  int v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  int v19 = v14;
  unsigned int v20 = 1829790799 * (&v18 ^ 0xC2C9A04B) + 463207035;
  v11(&v18);
  return (v18 - 1787617099);
}

uint64_t sub_100008CF8(uint64_t a1)
{
  qword_100571670 = 1681628227 * ((qword_100571670 - (void)&v4 + qword_100571660) ^ 0x68EECD5B1F580389LL);
  qword_100571660 = qword_100571670;
  uint64_t v1 = *(void *)((char *)off_1004E9860[((67 * ((2 * qword_100571670) ^ 0x89)) ^ byte_1003BA110[byte_1003BA010[(67 * ((2 * qword_100571670) ^ 0x89))] ^ 0x34])
                                       - 49]
                 + 140)
     - 4LL;
  unint64_t v2 = 942846689 * ((unint64_t)&v5 ^ 0x2DF4282E8CBBA516LL);
  int v5 = v2 ^ 0xF067FA72;
  uint64_t v6 = a1;
  unint64_t v7 = v1 ^ v2;
  ((void (*)(int *))off_1004E9860[(unk_1003B9ECD ^ 0xDB) - 185])(&v5);
  return v8;
}

uint64_t sub_100008E44(uint64_t a1)
{
  qword_100571668 = 1681628227 * ((qword_100571660 + qword_100571668) ^ (unint64_t)&v4 ^ 0x68EECD5B1F580389LL);
  qword_100571660 = qword_100571668;
  uint64_t v1 = *(void *)((char *)off_1004E9860[((67 * ((2 * qword_100571668) ^ 0x89)) ^ byte_1003B9D10[byte_1003BA210[(67 * ((2 * qword_100571668) ^ 0x89))] ^ 0xD6])
                                       - 8]
                 + 28)
     - 4LL;
  unint64_t v2 = 942846689
     * ((((unint64_t)&v5 | 0xDBD392286209E2F0LL)
  int v5 = v2 ^ 0xF067FA72;
  uint64_t v6 = a1;
  unint64_t v7 = v1 ^ v2;
  ((void (*)(int *))off_1004E9860[(unk_1003BA009 ^ 0xDB) - 226])(&v5);
  return v8;
}

uint64_t sub_100008FC0( mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, void *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v30 = 1;
  uint64_t v31 = a4;
  int v32 = 16777472;
  int v33 = a5;
  NDR_record_t v34 = NDR_record;
  int v17 = *a3;
  int v35 = a2;
  int v36 = v17;
  int v37 = a5;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B000000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  uint64_t v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v20 = 4294966988LL;
      }

      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v20 = 4294966996LL;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            int v21 = v33;
            if (v33 == v47)
            {
              uint64_t v20 = 0LL;
              int v22 = *(_DWORD *)&v34.mig_vers;
              *a3 = v38;
              __int128 v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              __int128 v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              __int128 v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              __int128 v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              int v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v20 = 4294966996LL;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port) {
              uint64_t v20 = 4294966996LL;
            }
            else {
              uint64_t v20 = HIDWORD(v31);
            }
          }
        }

        else
        {
          uint64_t v20 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v20 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v20;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v20;
}

uint64_t sub_100009218(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4 = a3[5];
  __int128 v19 = a3[4];
  __int128 v20 = v4;
  __int128 v5 = a3[7];
  __int128 v21 = a3[6];
  __int128 v22 = v5;
  __int128 v6 = a3[1];
  __int128 v15 = *a3;
  __int128 v16 = v6;
  __int128 v7 = a3[3];
  __int128 v17 = a3[2];
  NDR_record_t v13 = NDR_record;
  unsigned int v14 = a2;
  __int128 v18 = v7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B100000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  uint64_t v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }

  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }

  if (msg.msgh_id == 71)
  {
    uint64_t v10 = 4294966988LL;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }

  if (msg.msgh_id != 1301)
  {
    uint64_t v10 = 4294966995LL;
    goto LABEL_17;
  }

  uint64_t v10 = 4294966996LL;
  if ((msg.msgh_bits & 0x80000000) != 0) {
    goto LABEL_17;
  }
  if (msg.msgh_size != 36) {
    goto LABEL_17;
  }
  if (msg.msgh_remote_port) {
    goto LABEL_17;
  }
  uint64_t v10 = v14;
  if (v14) {
    goto LABEL_17;
  }
  return v10;
}

uint64_t sub_1000093A4( mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, void *a9, _DWORD *a10)
{
  int v18 = 1;
  uint64_t v19 = a6;
  int v20 = 16777472;
  int v21 = a7;
  NDR_record_t v22 = NDR_record;
  *(_DWORD *)__int128 v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  int v24 = a7;
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(void *)&msg.msgh_voucher_port = 0x4B200000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  uint64_t v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }

  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        uint64_t v14 = 4294966988LL;
      }

      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          uint64_t v14 = 4294966996LL;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            int v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              uint64_t v14 = 0LL;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }

        else if (msg.msgh_size == 36)
        {
          uint64_t v14 = 4294966996LL;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port) {
              uint64_t v14 = 4294966996LL;
            }
            else {
              uint64_t v14 = HIDWORD(v19);
            }
          }
        }

        else
        {
          uint64_t v14 = 4294966996LL;
        }
      }

      else
      {
        uint64_t v14 = 4294966995LL;
      }

      mach_msg_destroy(&msg);
      return v14;
    }

    mig_dealloc_reply_port(msg.msgh_local_port);
  }

  return v14;
}

uint64_t sub_100009590(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(void *)&msg.msgh_voucher_port = 0x4B300000000LL;
  if (&_voucher_mach_msg_set)
  {
    voucher_mach_msg_set(&msg);
    mach_port_t reply_port = msg.msgh_local_port;
  }

  uint64_t v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  uint64_t v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }

    if (msg.msgh_id == 71)
    {
      uint64_t v12 = 4294966988LL;
    }

    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            uint64_t v12 = v18;
            if (!v18)
            {
              int v15 = v20;
              *a2 = v19;
              *a3 = v15;
              int v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }

            goto LABEL_23;
          }
        }

        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port) {
            BOOL v13 = 1;
          }
          else {
            BOOL v13 = v18 == 0;
          }
          if (v13) {
            uint64_t v12 = 4294966996LL;
          }
          else {
            uint64_t v12 = v18;
          }
          goto LABEL_23;
        }
      }

      uint64_t v12 = 4294966996LL;
    }

    else
    {
      uint64_t v12 = 4294966995LL;
    }

LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", self->_rttBest));
  [v4 setObject:v12 forKey:@"rtt_best"];

  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_8:
    if ((has & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  PBDataWriterWriteUint32Field(v7, self->_rttBest, 13LL);
  __int128 v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_8:
    if ((has & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  *((_DWORD *)v4 + 22) = self->_rttBest;
  *((_WORD *)v4 + 56) |= 0x200u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_8:
    if ((has & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  v5[6] = self->_txBytes;
  *((_WORD *)v5 + 56) |= 0x20u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_8:
    if ((has & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

  uint64_t v11 = 0LL;
  if ((*(_WORD *)&self->_has & 0x100) != 0)
  {
LABEL_9:
    uint64_t v12 = 2654435761u * self->_txUnacked;
    if ((has & 8) != 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }

  self->_rttBest = *((_DWORD *)v4 + 22);
  *(_WORD *)&self->_has |= 0x200u;
  __int128 v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }

      goto LABEL_24;
    }

    if (AFSupportsMultiUser(isKindOfClass, v10) && [v4 notificationType] == (id)4)
    {
      uint64_t v11 = v4;
      if ([v11 databaseScope] == (id)3)
      {
        int v20 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          __int128 v23 = 136315138;
          int v24 = "-[ADCloudKitManager _handleCloudKitNotification:]";
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Received database notification for shared DB",  (uint8_t *)&v23,  0xCu);
        }

        -[ADCloudKitShareeOperations fetchSharedZones](self->_shareeOperations, "fetchSharedZones");
      }

      goto LABEL_23;
    }
  }

  else
  {
    +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled");
    __int128 v17 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v18 = v17;
      int v19 = (void *)objc_claimAutoreleasedReturnValue([v4 containerIdentifier]);
      __int128 v23 = 136315394;
      int v24 = "-[ADCloudKitManager _handleCloudKitNotification:]";
      __int128 v25 = 2112;
      __int128 v26 = v19;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Ignoring notification for container (%@)",  (uint8_t *)&v23,  0x16u);
    }
  }
            }

            uint64_t v9 = [v28 countByEnumeratingWithState:&v31 objects:v39 count:16];
          }

          while (v9);
        }

        __int128 v5 = v27 + 1;
      }

      while ((id)(v27 + 1) != v26);
      __int128 v26 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
    }

    while (v26);
  }
}

    uint64_t v9 = v6;
    goto LABEL_24;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( -[ADServiceManager serviceForIdentifier:]( self,  "serviceForIdentifier:",  @"com.apple.siri.sync.DisabledSyncDataToBeDeleted"));

  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v20 = 136315650;
    int v21 = "-[ADServiceManager serviceForSyncAnchorKey:]";
    int v22 = 2112;
    __int128 v23 = v9;
    int v24 = 2112;
    __int128 v25 = v7;
    uint64_t v11 = "%s Substituted to service:%@ for anchor:%@";
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v20, 0x20u);
  }

  int v15 = self->_currentFrameCount + 1;
  self->_currentFrameCount = v15;
  int v16 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    currentPausedFrameCount = self->_currentPausedFrameCount;
    currentVoiceFrameCount = self->_currentVoiceFrameCount;
    currentHasAccel = self->_currentHasAccel;
    __int128 v25 = self->_currentHasVAD;
    avbuffer = self->_avbuffer;
    int v27 = v16;
    -[ADOpportuneSpeakingMovingAverageBuffer movingAverage](avbuffer, "movingAverage");
    *(_DWORD *)v29 = 136316674;
    *(void *)&v29[4] = "-[ADOpportuneSpeakingModuleEdgeDetector _handleFrame:]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = v15;
    *(_WORD *)&v29[18] = 1024;
    *(_DWORD *)&v29[20] = currentVoiceFrameCount;
    int v30 = 1024;
    uint64_t v31 = currentPausedFrameCount;
    int v32 = 1024;
    int v33 = currentHasAccel;
    NDR_record_t v34 = 1024;
    int v35 = v25;
    int v36 = 2048;
    int v37 = v28;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%s OPPSPK - frame %d/%d/%d wearer=%d ambient=%d moving=%f",  v29,  0x34u);
  }

  mode = self->_mode;
  if (!mode)
  {
    if (self->_currentVoiceFrameCount < self->_thresholdFrameCount) {
      return;
    }
    unsigned int v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
    int v21 = self->_currentFrameCount;
    *(_DWORD *)v29 = 136315394;
    *(void *)&v29[4] = "-[ADOpportuneSpeakingModuleEdgeDetector _handleFrame:]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = v21;
    int v20 = "%s OPPSPK - SPEECH SEEN frame = %d";
    goto LABEL_33;
  }

  if (mode == 1 && self->_currentPausedFrameCount >= self->_thresholdFrameCount)
  {
    unsigned int v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
LABEL_34:
      -[ADOpportuneSpeakingModuleEdgeDetector _thresholdDetected]( self,  "_thresholdDetected",  *(_OWORD *)v29,  *(void *)&v29[16]);
      return;
    }

    int v19 = self->_currentFrameCount;
    *(_DWORD *)v29 = 136315394;
    *(void *)&v29[4] = "-[ADOpportuneSpeakingModuleEdgeDetector _handleFrame:]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = v19;
    int v20 = "%s OPPSPK - PAUSE SEEN frame = %d";
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v20, v29, 0x12u);
    goto LABEL_34;
  }
}
}
}

      if (-[ADCommandCenter _hasOutstandingRequestId:]( self,  "_hasOutstandingRequestId:",  v24,  *(_OWORD *)v33,  *(void *)&v33[16])
        || -[ADCommandCenter _hasRootExecutionContextForRequestID:](self, "_hasRootExecutionContextForRequestID:", v24))
      {
        goto LABEL_31;
      }

      v29 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
LABEL_30:
        if ((v28 & 1) != 0)
        {
LABEL_31:
          int v21 = 0;
LABEL_32:

          goto LABEL_33;
        }

      v80 = 0LL;
      goto LABEL_24;
    }
  }

  int v21 = v7;
  int v22 = (void *)objc_claimAutoreleasedReturnValue([v7 testRequestOptions]);
  __int128 v23 = [v22 requestPath];

  if (v23 == (id)1)
  {
    [v80 setTextRequest:0];
    -[ADCommandCenter _signalUSTTestRequestWithStartRequest:requestInfo:]( self,  "_signalUSTTestRequestWithStartRequest:requestInfo:",  v6,  v21);
    __int128 v7 = v21;
    goto LABEL_20;
  }

  v79 = v21;
  int v32 = objc_opt_class(&OBJC_CLASS___SAStartDirectActionRequest);
  if ((objc_opt_isKindOfClass(v6, v32) & 1) != 0)
  {
    v75 = objc_claimAutoreleasedReturnValue( -[ADCommandCenter _fetchComputedModeAndUpdateRequestDelegate]( self,  "_fetchComputedModeAndUpdateRequestDelegate"));
    v77 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _createDefaultRequestContextData:]( self,  "_createDefaultRequestContextData:",  v10 == (id)17));
    int v33 = v6;
    v73 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _requestDispatcherService](self, "_requestDispatcherService"));
    NDR_record_t v34 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _requestDispatcherSessionConfiguration]( self,  "_requestDispatcherSessionConfiguration"));
    int v35 = (void *)objc_claimAutoreleasedReturnValue([v33 aceId]);
    int v36 = (void *)objc_claimAutoreleasedReturnValue([v33 origin]);
    int v37 = (void *)objc_claimAutoreleasedReturnValue([v33 utterance]);
    int v38 = (void *)objc_claimAutoreleasedReturnValue([v33 directAction]);
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v33 requestExecutionParameters]);
    [v73 startDirectActionRequestWithConfiguration:v34 requestId:v35 inputOrigin:v36 utterance:v37 directAction:v38 requestExecutionParameters:v39  requestContextData:v77];

    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v33 aceId]);
    -[ADCommandCenter _emitDeviceDynamicContextForRequest:](self, "_emitDeviceDynamicContextForRequest:", v40);

    __int128 v41 = (void *)v75;
LABEL_18:

    goto LABEL_19;
  }

  __int128 v46 = objc_opt_class(&OBJC_CLASS___SASStartCorrectedSpeechRequest);
  if ((objc_opt_isKindOfClass(v6, v46) & 1) != 0)
  {
    v78 = objc_claimAutoreleasedReturnValue( -[ADCommandCenter _fetchComputedModeAndUpdateRequestDelegate]( self,  "_fetchComputedModeAndUpdateRequestDelegate"));
    int v47 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _createDefaultRequestContextData:]( self,  "_createDefaultRequestContextData:",  v10 == (id)17));
    int v48 = v6;
    int v49 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _requestDispatcherService](self, "_requestDispatcherService"));
    int v50 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _requestDispatcherSessionConfiguration]( self,  "_requestDispatcherSessionConfiguration"));
    v51 = (void *)objc_claimAutoreleasedReturnValue([v48 aceId]);
    v52 = (void *)objc_claimAutoreleasedReturnValue([v48 origin]);
    v53 = (void *)objc_claimAutoreleasedReturnValue([v48 utterance]);
    v54 = (void *)objc_claimAutoreleasedReturnValue([v48 previousUtterance]);
    [v49 startCorrectionSpeechRequestWithConfiguration:v50 requestId:v51 inputOrigin:v52 utterance:v53 previousUtterance:v54 requestContextData:v47];

    v55 = (void *)objc_claimAutoreleasedReturnValue([v48 aceId]);
    -[ADCommandCenter _emitDeviceDynamicContextForRequest:](self, "_emitDeviceDynamicContextForRequest:", v55);

    __int128 v41 = (void *)v78;
    goto LABEL_18;
  }

  if ([v6 isMemberOfClass:objc_opt_class(SAStartRequest)])
  {
    v62 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _createDefaultRequestContextData:]( self,  "_createDefaultRequestContextData:",  v10 == (id)17));
    v63 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _requestDispatcherService](self, "_requestDispatcherService"));
    v64 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _requestDispatcherSessionConfiguration]( self,  "_requestDispatcherSessionConfiguration"));
    v65 = (void *)objc_claimAutoreleasedReturnValue([v6 aceId]);
    v66 = (void *)objc_claimAutoreleasedReturnValue([v6 origin]);
    v67 = (void *)objc_claimAutoreleasedReturnValue([v6 utterance]);
    [v63 startTextRequestWithConfiguration:v64 requestId:v65 inputOrigin:v66 utterance:v67 requestContextData:v62];

    v68 = (void *)objc_claimAutoreleasedReturnValue([v6 aceId]);
    -[ADCommandCenter _emitDeviceDynamicContextForRequest:](self, "_emitDeviceDynamicContextForRequest:", v68);

    goto LABEL_19;
  }

  v69 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    v70 = v69;
    v71 = (void *)objc_claimAutoreleasedReturnValue([v6 encodedClassName]);
    *(_DWORD *)buf = 136315394;
    v82 = "-[ADCommandCenter _startServerRequestWithStartRequest:requestInfo:]";
    v83 = 2112;
    v84 = v71;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_INFO,  "%s Request type %@ unsupported on Siri X UOD. Support might come soon",  buf,  0x16u);
  }

  v80 = 0LL;
  __int128 v7 = v21;
LABEL_24:

  return v80;
}

    *(_OWORD *)inPropertyData = xmmword_1003C9F00;
    *(_OWORD *)&inPropertyData[16] = unk_1003C9F10;
    v130 = 16LL;
    memset(&inStreamDesc.mFormatID, 0, 32);
    outExtAudioFile = 0LL;
    inStreamDesc.mSampleRate = 16000.0;
    inStreamDesc.mFormatID = 1869641075;
    inStreamDesc.mFramesPerPacket = 320;
    inStreamDesc.mChannelsPerFrame = 1;
    int v36 = ExtAudioFileOpenURL((CFURLRef)v10, &outExtAudioFile);
    if ((_DWORD)v36)
    {
      int v37 = v36;
      int v38 = objc_alloc(&OBJC_CLASS___NSString);
      __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v10 path]);
      __int128 v40 = -[NSString initWithFormat:]( v38,  "initWithFormat:",  @"ExtAudioFileOpenURL() failed to open input audio file at %@. (status = %d)",  v39,  v37);
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  (int)v37,  0LL));
      __int128 v42 = objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v40,  v41));

      __int128 v43 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_65;
      }
      goto LABEL_28;
    }

    __int128 v44 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, inPropertyData);
    if ((_DWORD)v44)
    {
      __int128 v45 = v44;
      __int128 v46 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"ExtAudioFileSetProperty() failed to set client data format of input audio file. (status = %d)",  v44);
      int v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v45,  0LL));
      __int128 v42 = objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v46,  v47));

      __int128 v43 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_65:
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 2112;
        *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v42;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&buf, 0x16u);
      }

    if (!v10
      || (+[AFFeatureFlags isAWDLFallbackForPersonalRequestsEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isAWDLFallbackForPersonalRequestsEnabled") & (v26 | v30)) != 1)
    {
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472LL;
      v59[2] = sub_100241890;
      v59[3] = &unk_1004F74B8;
      v62 = v10;
      v63 = v30;
      v64 = v26;
      v60 = v50;
      v61 = v48;
      __int128 v39 = objc_retainBlock(v59);
      __int128 v40 = (void (**)(void))v39;
      if (v11)
      {
        if (v52)
        {
          __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( -[ADCompanionService _companionLinkDeviceForUniqueIDSIdentifier:]( self,  "_companionLinkDeviceForUniqueIDSIdentifier:"));
          if (v41)
          {
            __int128 v42 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v81 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]";
              v82 = 2112;
              v83 = v52;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "%s #hal Sending command via proxy: %@",  buf,  0x16u);
            }

            ((void (*)(void *, void *, void))v51[2])(v51, v41, 0LL);
          }

          else
          {
            v40[2](v40);
          }
        }

        else
        {
          int v47 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
          v55[0] = _NSConcreteStackBlock;
          v55[1] = 3221225472LL;
          v55[2] = sub_100241AE0;
          v55[3] = &unk_1004F7508;
          v55[4] = self;
          v56 = v51;
          v58 = 0;
          v57 = v40;
          [v47 getContextCollectorDeviceIdentifiersWithCompletion:v55];
        }
      }

      else
      {
        ((void (*)(void *))v39[2])(v39);
      }

      goto LABEL_47;
    }

    NDR_record_t v34 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v81 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "%s Using AWDL message link for sending message.",  buf,  0xCu);
      if (!v25) {
        goto LABEL_27;
      }
    }

    else if (!v25)
    {
LABEL_27:
      int v35 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v81 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]";
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s We are responding back to a request received over AWDL. Blindly use existing AWDL link with a faux destinationDevice",  buf,  0xCu);
      }

      __int128 v25 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkDevice);
      -[RPCompanionLinkDevice setIdentifier:](v25, "setIdentifier:", self->_clientAWDLTransportLinkDestinationId);
    }

    if (self->_clientAWDLTransportLink
      && (int v36 = self->_clientAWDLTransportLinkDestinationId,
          int v37 = (void *)objc_claimAutoreleasedReturnValue(-[RPCompanionLinkDevice identifier](v25, "identifier")),
          LODWORD(v36) = -[NSString isEqualToString:](v36, "isEqualToString:", v37),
          v37,
          (_DWORD)v36))
    {
      int v38 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v81 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]";
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s _clientAWDLTransportLink already exists, no need for activation. Sending message.",  buf,  0xCu);
      }

      ((void (*)(void *, RPCompanionLinkDevice *, uint64_t))v51[2])(v51, v25, 1LL);
      -[ADCompanionService _scheduleOrExtendAWDLClientLinkTimer](self, "_scheduleOrExtendAWDLClientLinkTimer");
    }

    else
    {
      __int128 v43 = (void *)objc_claimAutoreleasedReturnValue( -[ADCompanionService _setupClientAWDLTransportLinkForDestination:]( self,  "_setupClientAWDLTransportLinkForDestination:",  v25,  v48));
      objc_initWeak((id *)buf, v43);

      WeakRetained = objc_loadWeakRetained((id *)buf);
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 3221225472LL;
      v69[2] = sub_1002415C8;
      v69[3] = &unk_1004F7468;
      objc_copyWeak(&v72, (id *)buf);
      v71 = v51;
      __int128 v45 = v25;
      v70 = v45;
      v73 = 1;
      [WeakRetained setStateUpdateHandler:v69];

      __int128 v46 = objc_loadWeakRetained((id *)buf);
      v65[0] = _NSConcreteStackBlock;
      v65[1] = 3221225472LL;
      v65[2] = sub_100241700;
      v65[3] = &unk_1004F7490;
      v67 = v49;
      v65[4] = self;
      __int128 v25 = v45;
      v66 = v25;
      objc_copyWeak(&v68, (id *)buf);
      -[ADCompanionService _activateAWDLMessageLink:completion:](self, "_activateAWDLMessageLink:completion:", v46, v65);

      objc_destroyWeak(&v68);
      objc_destroyWeak(&v72);
      objc_destroyWeak((id *)buf);
    }

  v28 = AFIsHorseman(v11, v12);
  if ((a5 & 2) != 0)
  {
    if (v28)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue([v9 idsDeviceIdentifier]);
      int v30 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLink localDevice](self->_clientLink, "localDevice"));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 idsPersonalDeviceIdentifier]);
      int v32 = [v29 isEqualToString:v31];

      if (v32)
      {
        int v33 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          NDR_record_t v34 = 136315394;
          int v35 = "-[ADCompanionService rapportLink:didUpdateDevice:changes:]";
          int v36 = 2112;
          int v37 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "%s companion device updated: %@",  (uint8_t *)&v34,  0x16u);
        }

        -[ADCompanionService _updateSharedDataForCompanionDeviceWithRemoteFetchAllowed:]( self,  "_updateSharedDataForCompanionDeviceWithRemoteFetchAllowed:",  1LL);
      }
    }
  }
}

  if (!self->_deviceOwner)
  {
    v28 = (void *)objc_claimAutoreleasedReturnValue(-[ADPreferences deviceOwner](self->_adPreferences, "deviceOwner"));
    v71 = 0u;
    v72 = 0u;
    v73 = 0u;
    v74 = 0u;
    v29 = [v28 countByEnumeratingWithState:&v71 objects:v88 count:16];
    if (v29)
    {
      int v30 = v29;
      uint64_t v31 = *(void *)v72;
      do
      {
        for (j = 0LL; j != v30; j = (char *)j + 1)
        {
          if (*(void *)v72 != v31) {
            objc_enumerationMutation(v28);
          }
          int v33 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            NDR_record_t v34 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)j);
            int v35 = v33;
            int v36 = (void *)objc_claimAutoreleasedReturnValue([v28 valueForKey:v34]);
            *(_DWORD *)buf = 136315651;
            v80 = "-[ADMultiUserService _loadCloudSyncedUsersFromCache]";
            v81 = 2112;
            v82 = (uint64_t)v34;
            v83 = 2113;
            v84 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s deviceOwner key (%@), value (%{private}@)",  buf,  0x20u);
          }
        }

        int v30 = [v28 countByEnumeratingWithState:&v71 objects:v88 count:16];
      }

      while (v30);
    }

    uint64_t v11 = self;
    if (v28)
    {
      int v37 = -[ADCommunalDeviceUser initWithDictionary:attribute:]( objc_alloc(&OBJC_CLASS___ADCommunalDeviceUser),  "initWithDictionary:attribute:",  v28,  0LL);
      deviceOwner = self->_deviceOwner;
      self->_deviceOwner = v37;

      -[ADMultiUserService _saveDeviceOwnerToKeychainCache](self, "_saveDeviceOwnerToKeychainCache");
    }
  }

  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(-[ADPreferences multiUserSharedUsers](v11->_adPreferences, "multiUserSharedUsers"));
  if (v39)
  {
    if (!v11->_sharedUsersBySharedUserID)
    {
      __int128 v40 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      sharedUsersBySharedUserID = v11->_sharedUsersBySharedUserID;
      v11->_sharedUsersBySharedUserID = v40;
    }

    if (!v11->_sharedUsersByHomeUserUUID)
    {
      __int128 v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      sharedUsersByHomeUserUUID = v11->_sharedUsersByHomeUserUUID;
      v11->_sharedUsersByHomeUserUUID = v42;
    }

    if (!v11->_sharedUsersByiCloudAltDSID)
    {
      __int128 v44 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      sharedUsersByiCloudAltDSID = v11->_sharedUsersByiCloudAltDSID;
      v11->_sharedUsersByiCloudAltDSID = v44;
    }

    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v63 = v39;
    v64 = v39;
    __int128 v46 = [v64 countByEnumeratingWithState:&v67 objects:v87 count:16];
    if (v46)
    {
      int v47 = v46;
      int v48 = *(void *)v68;
      do
      {
        for (k = 0LL; k != v47; k = (char *)k + 1)
        {
          if (*(void *)v68 != v48) {
            objc_enumerationMutation(v64);
          }
          int v50 = -[ADCommunalDeviceUser initWithDictionary:attribute:]( objc_alloc(&OBJC_CLASS___ADCommunalDeviceUser),  "initWithDictionary:attribute:",  *(void *)(*((void *)&v67 + 1) + 8LL * (void)k),  1LL);
          v51 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v50, "sharedUserID"));
          v52 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser homeUserUUID](v50, "homeUserUUID"));
          v53 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](v50, "iCloudAltDSID"));
          v54 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315907;
            v80 = "-[ADMultiUserService _loadCloudSyncedUsersFromCache]";
            v81 = 2113;
            v82 = (uint64_t)v51;
            v83 = 2113;
            v84 = v52;
            v85 = 2113;
            v86 = v53;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "%s sharedUser = %{private}@, homeUserUUID = %{private}@, iCloudAltDSID = %{private}@",  buf,  0x2Au);
          }

          v55 = -[ADMultiUserService _updateMappingsForSharedUser:](self, "_updateMappingsForSharedUser:", v50);
          if (AFIsATV(v55, v56))
          {
            v57 = _AFPreferencesSiriRMVSetting(v53);
            v58 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              v80 = "-[ADMultiUserService _loadCloudSyncedUsersFromCache]";
              v81 = 2048;
              v82 = v57;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "%s shared user RMV setting, value (%ld)",  buf,  0x16u);
            }

            if (v57 == 3 || v57 == 0) {
              v60 =  -[SSRVoiceProfileManager discardSiriEnrollmentForProfileId:forLanguageCode:]( self->_voiceProfileManager,  "discardSiriEnrollmentForProfileId:forLanguageCode:",  v51,  0LL);
            }
          }
        }

        int v47 = [v64 countByEnumeratingWithState:&v67 objects:v87 count:16];
      }

      while (v47);
    }

    uint64_t v11 = self;
    __int128 v39 = v63;
  }

  else
  {
    v61 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v80 = "-[ADMultiUserService _loadCloudSyncedUsersFromCache]";
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "%s NO shared users", buf, 0xCu);
    }
  }

  v62 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v80 = "-[ADMultiUserService _loadCloudSyncedUsersFromCache]";
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%s Configured Cloud Synced Users.", buf, 0xCu);
  }

  -[ADMultiUserService _updateSAMultiUserInfo](v11, "_updateSAMultiUserInfo");
}
}

        int v21 = *(void **)(a1 + 32);
        int v22 = 1LL;
      }

      [v21 _changeCurrentStateToState:v22];
      return;
    case 4LL:
      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) speechRequestOptions]);
      int v19 = [v18 activationEvent];

      if (v19 != (id)17) {
        return;
      }
      int v20 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        int v50 = "-[ADExternalNotificationRequestHandler requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Triggerless Reply starting from Barge-In state",  buf,  0xCu);
      }

      goto LABEL_17;
    default:
      return;
  }

uint64_t sub_100009708(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((((2 * a1) | 0x340440B2) - a1 + 1711136679) ^ 0xF7F63850);
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + (v1 ^ 0x5EF))
                              + (((*(void *)a1 == *(void *)(a1 + 8)) * ((51 * (v1 ^ 0x5DA)) ^ 0x630)) ^ v1)
                              - 1)
                            - 8LL))();
}

uint64_t sub_100009790@<X0>(uint64_t a1@<X8>)
{
  int v4 = *(_DWORD *)(v2 - 0xC7F991DE6408E19LL);
  int v5 = v4 - 159353952;
  if (v4 - 159353952 < 0) {
    int v5 = 159353952 - v4;
  }
  *(_DWORD *)(v1 - 0xC7F991DE6408E19LL) = v4;
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * ((93
                                * ((v5 ^ 0xF9CB9BF3) + 1459613664 + ((v5 << (v3 - 44)) & 0xF39737E6) != ((v3 - 104) ^ 0x50CB8E16))) ^ v3)))();
}

uint64_t sub_100009824@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v2 - 0xC7F991DE6408E15LL) + 4LL * (v5 - 1355516884)) = *(_DWORD *)(*(void *)(v3 - 0xC7F991DE6408E15LL)
                                                                                           + 4LL * (v5 - 1355516884));
}

void sub_10000989C()
{
}

void sub_1000098A8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) + 108757529 * (((a1 | 0xFA9FB8B3) - (a1 & 0xFA9FB8B3)) ^ 0x1A03DA98);
  __asm { BR              X9 }

uint64_t sub_100009984@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * (((&a4 | 0xA509F51) - (&a4 & 0xA509F51)) ^ 0xD496228A);
  a7 = &STACK[0x37021DA48139155A];
  a4 = &STACK[0x42E48BBDD224DE3D];
  a5 = v10;
  a8 = v12 ^ 0x64BC49B;
  a6 = (v11 + 172) ^ v12;
  uint64_t v13 = ((uint64_t (*)(unint64_t **))(*(void *)(a1 + 8LL * (v11 - 1)) - 8LL))(&a4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * (((*(_DWORD *)(v10 - 0x27681A84B35EB0EDLL) == v8)
                                                        * (37 * (((v11 + 211) | 0x418) ^ 0x51C) + 1560)) ^ v11))
                                          - 4LL))(v13);
}

uint64_t sub_100009A78( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
}

uint64_t sub_100009AAC()
{
  *int v1 = v0;
  int v4 = v0 - ((2 * v0) & 0x317341DE) + 414818497 + ((2 * (v3 - 11)) ^ 0xA32);
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((602
                                          * ((((3 * ((v3 - 11) ^ 0x52B)) ^ 0x1DFFFFC3) & (2 * v4) ^ 0x1173418C)
                                           + (v4 ^ 0x96465F39)
                                           + 2010721788 != 114896338)) ^ (v3 - 11)))
                            - 8LL))();
}

uint64_t sub_100009B48(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((244
                                          * ((((a1 + 1147) ^ (v2 + v1 + ((a1 + 1212) ^ 0x71000501u) < 8)) & 1) == 0)) ^ a1))
                            - 12LL))();
}

uint64_t sub_100009BA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7 = v4 - v5 - (unint64_t)(6 * (a4 ^ 0x5DCu)) + 1478 > 0x1F;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((4 * v7) | (16 * v7)) ^ a4)) - 8LL))();
}

uint64_t sub_100009BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                                     + 8LL
                                                     * (((((v5 < 0x20) ^ (a5 - 17)) & 1)
                                                       * (((a5 - 1401) | 0x2AA) - 723)) ^ a5))
                                         - 12LL))(0LL);
}

uint64_t sub_100009C3C(uint64_t a1, int a2)
{
  unsigned int v9 = v6 + v5 + v7;
  v10.i64[0] = 0x3232323232323232LL;
  v10.i64[1] = 0x3232323232323232LL;
  uint64_t v11 = v2 + v9;
  uint64_t v12 = v3 + v9;
  int8x16_t v13 = veorq_s8(*(int8x16_t *)(v11 - 31), v10);
  *(int8x16_t *)(v12 - 15) = veorq_s8(*(int8x16_t *)(v11 - 15), v10);
  *(int8x16_t *)(v12 - 31) = v13;
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
}

void sub_100009CAC()
{
}

void sub_100009CB8()
{
  *int v0 = v1;
}

void sub_100009F00(uint64_t a1)
{
  int v1 = 1759421093 * (a1 ^ 0xB37DB054);
  unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0x27681A84B35EB0F9LL) + 503480823;
  unsigned int v4 = *(_DWORD *)a1 + v1 + 380801153;
  int v5 = (v4 < 0x41F83143) ^ (v3 < 0x41F83143);
  BOOL v6 = v3 < v4;
  if (v5) {
    BOOL v6 = v4 < 0x41F83143;
  }
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  __asm { BR              X11 }

uint64_t sub_10000A000()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * (((v0 + 34 + 14 * (v0 ^ 0xD1) - 361) * (v2 == 1236742230)) ^ v0)))();
}

uint64_t sub_10000A038()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
}

uint64_t sub_10000A094@<X0>(int a1@<W8>)
{
  *(_BYTE *)(*(void *)(v3 - 0x27681A84B35EB105LL) + (v5 - 1547459025 + v2)) = *(_BYTE *)(*(void *)(v3 - 0x27681A84B35EB105LL) + v2 - 310717355 + ((v1 + 707075844) & 0xD5DADBF6));
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((189 * (v2 - 1 == a1)) ^ v1)) - 12LL))();
}

void sub_10000A110()
{
}

uint64_t sub_10000A118()
{
  BOOL v3 = ((v0 - 1119) & *(_DWORD *)(v1 - 0x27681A84B35EB0F1LL)) == 0;
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((2 * (((v0 - 71) ^ v3) & 1)) & 0xEF | (16
                                                                                       * (((v0 - 71) ^ v3) & 1)) | v0)))();
}

void sub_10000A158()
{
  *(_DWORD *)(v0 - 0x27681A84B35EB0EDLL) = -1645193683;
}

void sub_10000A668(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1225351577
            * ((-1431559688 - (a1 ^ 0x637B64C4 | 0xAAAC21F8) + (a1 ^ 0x637B64C4 | 0x5553DE07)) ^ 0x15B262D5));
  __asm { BR              X15 }

void sub_10000A794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a4 + v5) = v4;
}

uint64_t sub_10000B698(_DWORD *a1)
{
  unsigned int v1 = 1224239923 * (((a1 | 0x8C9528F6) - (_DWORD)a1 + (a1 & 0x736AD709)) ^ 0x7E26D521);
  unsigned int v2 = a1[4] - v1;
  int v3 = *a1 ^ v1;
  unsigned int v5 = v3 - 1051670498;
  BOOL v4 = v3 - 1051670498 < 0;
  LODWORD(v6) = 1051670498 - v3;
  if (v4) {
    uint64_t v6 = v6;
  }
  else {
    uint64_t v6 = v5;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + (int)(v2 ^ 0xF4))
                              + (int)((484 * (v6 != ((2 * (_DWORD)v6) & 0xD0B90CAE))) ^ v2)
                              - 1)
                            - 4LL))();
}

void sub_10000B750(int a1@<W8>)
{
  **(_DWORD **)(v1 - 0xC7F991DE6408E15LL) = (v2 + 1750894167) ^ 0xD7B70E58;
  *(_DWORD *)(v1 - 0xC7F991DE6408E19LL) = a1 + 1;
}

void sub_10000B7A8(uint64_t a1)
{
  int v1 = (628203409 * ((1303688841 - (a1 | 0x4DB4B689) + (a1 | 0xB24B4976)) ^ 0x30C34545)) ^ *(_DWORD *)(a1 + 16) ^ 0x43C;
  __asm { BR              X7 }

uint64_t sub_10000B960(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7)
{
}

void sub_10000B9C4()
{
}

uint64_t sub_10000B9CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(_DWORD *)(a11 - 0x7542B2AE5773787LL) = 1292221340 - v16;
  int v22 = 1224239923 * (((v21 - 136) & 0x8278F9B6 | ~((v21 - 136) | 0x8278F9B6)) ^ 0x8F34FB9E);
  *(_DWORD *)(v21 - 120) = v22 + v20 - 620;
  *(void *)(v21 - 128) = a15;
  *(_DWORD *)(v21 - 136) = v22 ^ 0x3EAF37E3;
  sub_10000B698((_DWORD *)(v21 - 136));
  int v23 = 1759421093 * ((2 * ((v21 - 136) & 0x4FEBF750) - (v21 - 136) - 1340864343) ^ 0x369B8FD);
  *(_DWORD *)(v21 - 136) = ((v20 ^ 0x1BF9F000) & (v17 << 6))
                         - v23
                         + ((v17 << ((v20 + 53) & 0xB7 ^ 0x32)) ^ 0x8DFCF9B9)
                         + 2069626752;
  *(void *)(v21 - 128) = a15;
  *(_DWORD *)(v21 - 120) = v20 - v23 + 636;
  sub_10002B894(v21 - 136);
  *(_DWORD *)(v21 - 120) = v20 + 1374699841 * ((v21 - 136) ^ 0x6DF41809) + 635;
  *(void *)(v21 - 136) = a16;
  *(void *)(v21 - 128) = &STACK[0xC7F991DE6408E5D];
  sub_100009708(v21 - 136);
  *(_DWORD *)(v21 - 120) = v20
                         + 1178560073
                         * ((((v21 - 136) ^ 0xFBA47593 | 0x3D05B776)
                           - ((v21 - 136) ^ 0xFBA47593)
                           + (((v21 - 136) ^ 0xFBA47593) & 0xC2FA4889)) ^ 0x7C35BA87)
                         + 775;
  *(void *)(v21 - 128) = a16;
  *(void *)(v21 - 112) = a15;
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(v19 + 8LL * (v20 ^ 0x3F7)))(v21 - 136);
}

uint64_t sub_10000BC18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13, int a14)
{
  *(_DWORD *)(v17 - 120) = a14 + 1374699841 * ((v17 - 136) ^ 0x6DF41809) + 142;
  *(void *)(v17 - 136) = v16;
  *(void *)(v17 - 128) = v14;
  uint64_t v18 = sub_100009708(v17 - 136);
  return (*(uint64_t (**)(uint64_t))(v15 + 8LL * ((914 * (a11 < ((a14 + 199) ^ (a14 - 118) ^ 0x13E))) ^ a14)))(v18);
}

uint64_t sub_10000BC94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  *(_DWORD *)(v20 - 120) = v19
                         + 1374699841 * ((2 * ((v20 - 136) & 0xB04ADC0) - (v20 - 136) + 1962627641) ^ 0x190F4A30)
                         - 57;
  *(void *)(v20 - 136) = a16;
  *(void *)(v20 - 128) = a14;
  sub_100009708(v20 - 136);
  int v21 = 1759421093 * (((v20 - 136) & 0x61219070 | ~((v20 - 136) | 0x61219070)) ^ 0x2DA3DFDB);
  *(_DWORD *)(v20 - 120) = v19 - v21 - 56;
  *(void *)(v20 - 128) = v16;
  *(_DWORD *)(v20 - 136) = 156825914 - v21;
  sub_10002B894(v20 - 136);
  *(_DWORD *)(v20 - 120) = v19
                         + 1178560073
                         * ((((v20 - 136) | 0xECCF7CEC) - (v20 - 136) + ((v20 - 136) & 0x13308310)) ^ 0x565B048E)
                         + 83;
  *(void *)(v20 - 112) = v16;
  *(void *)(v20 - 128) = a16;
  uint64_t v22 = v17(v20 - 136);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18
                                                      + 8LL
                                                      * (((*(_DWORD *)(v20 - 136) <= 0xFF9D8B2u) | ((*(_DWORD *)(v20 - 136) <= 0xFF9D8B2u) << 7)) ^ (v19 - 472)))
                                          - (((v19 ^ 0x95u) - 1236) ^ 0x93LL)))(v22);
}

uint64_t sub_10000BE48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return ((uint64_t (*)(void))(*(void *)(v13
                                        + 8LL
                                        * ((27
                                          * (((2 * a13) & 0xB7F5F7DE)
                                           + (a13 ^ 0x5BFAFBEF)
                                           + (((v14 ^ 0x4F4) + 1119) ^ 0xF77FBBFE)
                                           - 1400551921 > 0x7FFFFFFD)) ^ v14))
                            - 4LL))();
}

  ;
}

void sub_10000CA40()
{
  unint64_t v0 = (unint64_t)&v2[qword_100572260 ^ qword_1005722C8];
  qword_1005722C8 = 536075833 * (v0 + 0x793AB71194CDC804LL);
  qword_100572260 = 536075833 * (v0 ^ 0x86C548EE6B3237FCLL);
  *(_DWORD *)*(&off_1004EDED0
  uint64_t v1 = ((uint64_t (*)(uint64_t))*(&off_1004EDED0
                                         + ((57
  *(void *)*(&off_1004EDED0
  __asm { BR              X8 }

void sub_10000CBEC()
{
  *uint64_t v1 = v0;
}

void sub_1000142F8(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 24) - 0xC7F991DE6408E19LL) - 1369292382;
  int v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL) - 1369292382;
  int v4 = (v2 < 937545218) ^ (v3 < 937545218);
  BOOL v5 = v2 > v3;
  if (v4) {
    BOOL v6 = v2 < 937545218;
  }
  else {
    BOOL v6 = v5;
  }
  int v1 = *(_DWORD *)(a1 + 16) - 1178560073 * ((-2 - ((a1 | 0x5930FF1B) + (~(_DWORD)a1 | 0xA6CF00E4))) ^ 0x1C5B7886);
  __asm { BR              X15 }

uint64_t sub_1000143EC()
{
  int v4 = ((147 * (v2 ^ 0x3F2)) ^ 0xA12D6B27) + v3;
  int v5 = v1 - 1590858969 + ((v2 - 1009) | 0xD0) + 375;
  BOOL v6 = v5 < 715979222;
  BOOL v7 = v4 < v5;
  if (v4 < 715979222 != v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((1605 * !v7) ^ v2)) - 4LL))();
}

uint64_t sub_100014474(uint64_t a1)
{
  if (((v3 + 801) ^ 0x76807059) + v2 >= 0) {
    int v2 = 318707904 - v2;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1
                                                                                 + 8LL
                                                                                 * ((1132
                                                                                   * (v2
                                                                                    - 159354951
                                                                                    + ((v3 - 1476574434) & 0x5802BFEF) > (int)((77 * ((v3 + 801) ^ 0x3EC)) ^ 0xFFFFF9AE))) ^ (v3 + 801)))
                                                                     - 4LL))( a1,  1476575215LL,  4135612345LL,  4294965678LL);
}

uint64_t sub_100014558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((31
                                          * ((*(_DWORD *)(*v11 + 4LL * v14) ^ (v13 + a6) & a7 ^ (v9
                                                                                               + ((v13 + a8) & v12)
                                                                                               + 1399)) > (*(_DWORD *)(*v10 + 4LL * v14) ^ v9))) ^ v13))
                            - 4LL))();
}

uint64_t sub_1000145B4()
{
  return (*(uint64_t (**)(void))(v0 + 8LL * ((((((v3 + v1) & v2) + 61) ^ (v3 + 801)) * (v4 < v5)) ^ v3)))();
}

void sub_1000145E0()
{
}

_DWORD *sub_1000145E8(_DWORD *result)
{
  *uint64_t result = ((v2 + 600) ^ 0x1FF3B737) - v1;
  return result;
}

uint64_t sub_100014618(uint64_t a1)
{
  int v1 = 1759421093 * ((~(_DWORD)a1 & 0xA201450D | a1 & 0x5DFEBAF2) ^ 0x117CF559);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  unsigned int v3 = *((_DWORD *)*(&off_1004EDED0 + (v2 ^ 0x769)) + 83);
  unsigned int v4 = (*(_DWORD *)(a1 + 16) ^ v1) - 16856931;
  BOOL v5 = v3 + 402133936 > v4;
  if (v4 < 0x17F813B0 != v3 > 0xE807EC4F) {
    BOOL v5 = v3 > 0xE807EC4F;
  }
}

uint64_t sub_100014700()
{
  unsigned int v4 = v2 + 749603472;
  BOOL v5 = v4 < 0x45A755A3;
  BOOL v6 = v1 + 1168594339 < v4;
  if (v5 != v1 > 0xBA58AA5C) {
    BOOL v7 = v5;
  }
  else {
    BOOL v7 = v6;
  }
  return (*(uint64_t (**)(void))(v0 + 8LL * ((54 * ((((v3 - 1361) ^ v7) & 1) == 0)) ^ v3)))();
}

uint64_t sub_100014770(uint64_t a1)
{
  int v5 = v4 | 0x182;
  unsigned int v6 = *(_DWORD *)(v3 + 336);
  unsigned int v7 = (*(_DWORD *)(a1 + 4) ^ v1) + 354516975;
  if (v6 > 0x73C32EE1 != v7 < (((v5 + 1152) | 0x108) ^ 0x8C3CD610)) {
    BOOL v8 = v6 > 0x73C32EE1;
  }
  else {
    BOOL v8 = v6 - 1942171362 > v7;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1528 * !v8) ^ v5)) - ((v5 + 1152) ^ 0x60ELL)))();
}

uint64_t sub_100014810()
{
  unsigned int v4 = v2 + 80333165;
  BOOL v5 = v4 < 0x7BE51A9C;
  BOOL v6 = v3 + (v1 ^ 0x25B) + 2078610318 < v4;
  if (v5 != v3 > (v1 ^ 0x841AE036)) {
    BOOL v6 = v5;
  }
  return (*(uint64_t (**)(void))(v0 + 8LL * ((944 * !v6) ^ v1)))();
}

uint64_t sub_100014888(_DWORD *a1)
{
  unsigned int v5 = *(_DWORD *)(v3 + 352);
  unsigned int v6 = (*a1 ^ v1) + 237531176;
  BOOL v7 = v5 + 2 * (v4 ^ 0x6D2) - 1915799556 > v6;
  if (v5 > 0x7230C0F5 != v6 < ((184 * (v4 ^ 0x55F)) ^ 0x8DCF383A)) {
    BOOL v7 = v5 > 0x7230C0F5;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((253 * v7) ^ v4 ^ 0x42E)) - 8LL))();
}

uint64_t sub_100014920@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  unsigned int v5 = v2 - 2132719391;
  BOOL v6 = v5 < 0x8817C3;
  BOOL v7 = v3 + 8918979 < v5;
  if (v6 != v3 > v4 - 8920820) {
    BOOL v7 = v6;
  }
  if (v7) {
    int v8 = a2;
  }
  else {
    int v8 = a2 + 1;
  }
  *(_DWORD *)(result + 12) = v8;
  return result;
}

uint64_t sub_100014974(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*(&off_1004E98E0 + ((16 * (*(_DWORD *)(a2 + 4) == 1206753096)) | 0xA5u)))(4294925278LL);
}

uint64_t sub_1000149B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 448LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return (*(uint64_t (**)(void))(v2 + 3096))(0LL);
}

void sub_100014A1C()
{
}

void sub_100014A28(uint64_t a1)
{
  int v1 = 628203409 * (((a1 | 0x89B748DF) - a1 + (a1 & 0x7648B720)) ^ 0xB3F44EC);
  unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 24) - 0xB19902B9219B199LL) + 604313364;
  unsigned int v3 = *(_DWORD *)(a1 + 20) + v1 - 316474524;
  BOOL v4 = v2 < 0x39B10190;
  BOOL v5 = v2 > v3;
  if (v3 < 0x39B10190 != v4) {
    BOOL v5 = v4;
  }
  __asm { BR              X9 }

uint64_t sub_100014B08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((196
                                * (((*(unsigned __int8 *)(*(void *)(a1 + 40) + (v2 - 363588221))
}

uint64_t sub_100014B5C()
{
  int v4 = v3 ^ 0x6FC;
  unsigned int v5 = ((v4 - 77) ^ 0xBB970340) + v0;
  BOOL v6 = v2 - 226943326 > v5;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((8 * !v6) | (!v6 << 10)) ^ v4)) - 8LL))();
}

uint64_t sub_100014BDC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v2
                                                    + 8LL
                                                    * ((1688
                                                      * (((v3 ^ 0x4F ^ (*(char *)(v1 + (v4 + 1)) >= 0)) & 1) == 0)) ^ v3)))( a1,  ((*(unsigned __int8 *)(v1 + (v4 + 1)) << ((v3 - 102) & 0xB6 ^ 3)) & 0x7E)
}

uint64_t sub_100014C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1910
                                          * (((((v6 + 65) & 0x7F ^ 0xFCDBFBFF) + 2 * ((v6 + 65) & 0x7F)) & 0xFCDBFFFC) == ((299 * (a5 ^ 0x1F8)) ^ 0xFCDBFB02))) ^ a5))
                            - ((a5 ^ 0x1F8u)
                             + 1788)
                            + 1786LL))();
}

uint64_t sub_100014CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v11 = v9 + a7 + ((v10 - 1633) | 0x110) - 211221332;
  BOOL v12 = v11 < 0x5F0ECD7;
  BOOL v13 = v11 > v7 - 1184700757;
  return (*(uint64_t (**)(void))(v8 + 8LL * ((156 * !v13) | v10)))();
}

uint64_t sub_100014D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v12 = *(unsigned __int8 *)(v7 + (v10 + v9 + 2));
  return (*(uint64_t (**)(uint64_t, void))(v8 + 8LL * (v11 ^ (958 * (a7 != -52691968)))))( a1,  (v12 ^ 0x47EFBFBB) - 141440 + ((((v11 + 1361) ^ 0x5D9) - 357) & (2 * v12)));
}

uint64_t sub_100014DC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, int a8)
{
  int v12 = *(unsigned __int8 *)(v8 + (a5 + v11 + 1794));
  return (*(uint64_t (**)(uint64_t, void))(v9 + 8LL * ((1557 * (v10 - 1 == a6)) ^ a8)))( a1,  ((v12 | ((((a8 + 807) | 0x100) ^ 0x1268C202) + (a2 << 8))) ^ 0xFFFFD7FB)
         + 1206763328
         + ((2 * (v12 | ((((a8 + 807) | 0x100) ^ 0x1268C202) + (a2 << 8)))) & 0xFFFFAFF6));
}

uint64_t sub_100014E30(uint64_t a1, int a2, int a3)
{
  int v8 = v5 + v6 + v7 + 1599204958;
  uint64_t v9 = (a3 + 1448515837) & 0xA9A961FE;
  int v10 = a3 - 1284;
  unsigned int v11 = a2 + v8 + 121046671;
  unsigned int v12 = v3 + 1953524854;
  int v13 = (v12 < 0xC0FE72A2) ^ (v11 < 0xC0FE72A2);
  BOOL v14 = v11 > v12;
  if (v13) {
    BOOL v14 = v11 < 0xC0FE72A2;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((1247 * !v14) ^ v10)) - v9 + 502))();
}

uint64_t *sub_100014ED0@<X0>(uint64_t *result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v8 = result[6];
  uint64_t v10 = *result;
  uint64_t v9 = result[1];
  *a3 = v5 + 1541701226;
  *(_DWORD *)(v10 - 0x5F8E90DD494572B7LL) = v4;
  *(_DWORD *)(v8 - 0x56530F603BC303ACLL) = a2;
  *(void *)(v9 - 0x4FF3ADA337C70005LL) = v3 + v7 - 1910103002 + ((v6 + 4) | 0x500u);
  *((_DWORD *)result + 8) = 1645153785;
  return result;
}

void sub_100014F58(_DWORD *a1)
{
  unsigned int v1 = 1374699841 * (((_DWORD)a1 - 1542394297 - 2 * (a1 & 0xA410EE47)) ^ 0xC9E4F64E);
  unsigned int v2 = *a1 + v1;
  __asm { BR              X13 }

uint64_t sub_100015010@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = 1755732067 * ((v7 & 0x9095DB2C | ~(v7 | 0x9095DB2C)) ^ 0xB1AC9908);
  uint64_t v8 = v2;
  v7[0] = (v3 - (((v1 + 43) ^ 0xB54A6CA2) & (v4 + 1853089944)) + 299838324) ^ v5;
  v7[1] = (v1 + 7) ^ v5;
  return ((uint64_t (*)(_DWORD *))(*(void *)(a1 + 8LL * (v1 ^ 0x245)) - 8LL))(v7);
}

void sub_100015150(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_1000151C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13)
{
  a13 = 108757529 * (((&a12 | 0x956C4C34) - (&a12 & 0x956C4C34)) ^ 0x75F02E1F) + 1695027452;
  uint64_t v15 = sub_10004CCF0(&a12);
  return (*(uint64_t (**)(uint64_t))(v14 + 8LL * ((275 * (a12 == 1645153785)) ^ v13)))(v15);
}

uint64_t sub_100015238( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, int a13, unsigned int a14)
{
  a12 = &STACK[0x4BD26FD1213425B1];
  a14 = 1307 - 460628867 * ((2 * (&a12 & 0x44AF77C8) - &a12 - 1152350160) ^ 0xF7C60A4D);
  sub_100028A48((uint64_t)&a12);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14
                                                                                + 8LL
                                                                                * ((23
                                                                                  * (((a13 == 1645153785) ^ 0x2F) & 1)) ^ 0x2A6u)))( v15,  v16,  v17,  v18,  v19);
}

uint64_t sub_1000152F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14, int a15)
{
  unsigned int v19 = 1178560073 * ((2 * (&a12 & 0x1E6864C8) - &a12 - 510158029) ^ 0x5B03E351);
  a13 = v19
      + (v15 ^ 0xD57F7D4A ^ (53 * (v17 & 0x9F3 ^ 0x12E)))
      + (((((v17 & 0x9F3) - 2) | 0xC) ^ 0xAAFEFEDA) & (2 * v15))
      + 2063454782;
  a15 = ((v17 & 0x9F3) + 709) ^ v19;
  a14 = a11;
  sub_100038AF4((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18
                                                                                          + 8LL
                                                                                          * ((14 * (a12 != v16 + 689)) ^ v17 & 0x9F3u))
                                                                              - 8LL))( v20,  v21,  v22,  v23,  v24);
}

uint64_t sub_1000153E8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12, uint64_t a13, unsigned int a14, unsigned int a15, unsigned int a16, int a17)
{
  unsigned int v21 = (((&a12 | 0xFB74E5AA) - (&a12 & 0xFB74E5AA)) ^ 0xB7E267D7) * v20;
  a15 = v21 + v19 + 2138963059;
  a16 = 635686783 - v21;
  a12 = &STACK[0x58A7AA08624568E6];
  a13 = a11;
  a14 = v21 - 279984296;
  uint64_t v22 = sub_10004D0C0((uint64_t)&a12);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18
                                                      + 8LL
                                                      * ((1580 * (a17 == ((v19 - 1118674286) & 0x42AD9EF1) + v17)) ^ v19))
                                          - 8LL))(v22);
}

uint64_t sub_1000154B0()
{
  int v5 = 53 * (v4 ^ 0x120);
  unsigned int v13 = &STACK[0x384B062F076094AC];
  uint64_t v14 = v8;
  unsigned int v11 = (v4 + 44) ^ (1374699841 * (&v11 ^ 0x6DF41809));
  ((void (*)(unsigned int *))(*(void *)(v2 + 8LL * (v4 ^ 0x198)) - 8LL))(&v11);
  unsigned int v13 = v8;
  unsigned int v11 = (v4 + 545) ^ (1755732067 * (((&v11 | 0x68EC43F5) - (&v11 & 0x68EC43F5)) ^ 0xB62AFE2E));
  sub_100049128((uint64_t)&v11);
  if ((_DWORD)v14 == v5 + v1) {
    int v6 = v9;
  }
  else {
    int v6 = (int)v14;
  }
  unsigned int v12 = v4 + ((&v11 & 0x85FB557C | ~(&v11 | 0x85FB557C)) ^ 0x70F0A4AC) * v3 + 728;
  unsigned int v13 = v8;
  v0(&v11);
  unsigned int v12 = v5 + ((2 * (&v11 & 0x2037FE78) - &v11 + 1606943108) ^ 0x553C0FAB) * v3 + 340;
  unsigned int v13 = v10;
  v0(&v11);
  return v6 ^ (v1 + 689);
}

void sub_100015658(uint64_t a1)
{
  uint64_t v2 = qword_100572268 - (void)&v3 + qword_100572260;
  qword_100572268 = 536075833 * (v2 + 0x793AB71194CDC804LL);
  qword_100572260 = 536075833 * (v2 ^ 0x86C548EE6B3237FCLL);
  ((void (*)(char *, void (*)()))*(&off_1004EDED0
                                            + ((57
                                                                             * ((qword_100572260 - qword_100572268) ^ 0xFC)) ^ byte_1003C0A80[byte_1003BD220[(57 * ((qword_100572260 - qword_100572268) ^ 0xFC))] ^ 0xF7])
                                            + 47))( (char *)*(&off_1004EDED0 + ((57 * (qword_100572268 ^ 0xFC ^ qword_100572260)) ^ byte_1003C97C0[byte_1003C4AD0[(57 * (qword_100572268 ^ 0xFC ^ qword_100572260))] ^ 0xB6])
            + 19)
  - 4,
    sub_10004D258);
  __asm { BR              X9 }

uint64_t sub_100015774@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8LL * ((41 * (**(void **)(v1 + 1616) != 0LL)) ^ 0x3D1u)))();
}

uint64_t sub_10001579C()
{
  return (*(uint64_t (**)(uint64_t))(v1 + 1608))(v0);
}

  ;
}

uint64_t sub_1000157C4(uint64_t a1)
{
  int v1 = 535753261 * ((a1 - 1922189914 - 2 * (a1 & 0x8D6DB5A6)) ^ 0x8799BB89);
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  int v3 = *(_DWORD *)a1 ^ v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 24) - 0xC7F991DE6408E19LL);
  unsigned int v6 = v4 - 159353952;
  BOOL v5 = v4 - 159353952 < 0;
  unsigned int v7 = 159353952 - v4;
  if (!v5) {
    unsigned int v7 = v6;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + v2 - 386)
                              + ((30 * ((v3 - 843402718) < 4 * (unint64_t)v7)) ^ v2)
                              - 1)
                            - (v2 ^ 0x51Fu)
                            + 1191LL))();
}

uint64_t sub_100015894()
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (v2 ^ (67 * (v0 != 843402718))))
                            - (((v2 + 110787148) & 0xF9658379)
                             - 205)
                            + 424LL))();
}

uint64_t sub_1000158E4()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((1884 * (((v1 - 361) | 0xA2) == 434)) ^ (v1 - 245))) - 4LL))();
}

uint64_t sub_10001595C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, int a5@<W8>)
{
  *(_BYTE *)(*(void *)(a1 + 8) + (a4 + a5)) = (a3 ^ v7) >> v8;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((971 * (((a2 - 863) ^ (a2 - 6)) + a4 != v6)) ^ a2)) - 12LL))();
}

uint64_t sub_1000159A8(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1884 * (v3 + 8 == ((a2 - 162) | 0xA2) - 402)) ^ (a2 - 46))) - 4LL))();
}

uint64_t sub_1000159E4(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v7 = v3 > 0x7CA4B262;
  if (v7 == v6 - 1136057856 < -2091168355) {
    BOOL v7 = v6 - 1136057856 < v5;
  }
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v4 + 8LL * (((a3 + 1107) * v7) ^ a3)) - 4LL))( a1,  (a3 + 46));
}

uint64_t sub_100015A50@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W8>)
{
  return sub_10001595C(a1, a2, *(_DWORD *)(*v4 + 4LL * (v5 - 1192373149)), v3, a3);
}

uint64_t sub_100015A7C(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 32) = a3;
  return result;
}

void sub_100015A84(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 3804331 * ((a1 - 2 * (a1 & 0xF3A65B02) - 207201534) ^ 0x8D737EF4);
  int v2 = (*(_BYTE *)a1 ^ (-85 * ((a1 - 2 * (a1 & 2) + 2) ^ 0xF4)));
  ((void (*)(char *, void (*)()))*(&off_1004EDED0 + v1 - 1289))( (char *)*(&off_1004EDED0 + v1 - 1458) - 4,  sub_10004D63C);
  uint64_t v3 = *(void *)*(&off_1004EDED0 + v1 - 1503);
  unsigned int v5 = v1 + 1755732067 * (((&v4 | 0x1283C73D) - (&v4 & 0x1283C73D)) ^ 0xCC457AE6) - 580;
  uint64_t v4 = v3;
  sub_10004A328((uint64_t)&v4);
  __asm { BR              X9 }

uint64_t sub_100015BD4()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1541
                                          * (**(_DWORD **)(v2 + 8LL * (v0 ^ 0x3C2)) == ((v0 + 725) ^ 0x34B) - 1698)) ^ v0))
                            - 8LL))();
}

uint64_t sub_100015C90@<X0>(int a1@<W8>)
{
  char v8 = *(unsigned int **)(v6 + 8LL * (a1 - 1290));
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(v6 + 8LL * (a1 - 1323));
  unsigned int v11 = *(_BYTE **)(v10 - 4);
  v22[0] = *v11 - 71;
  v22[1] = v11[1] - 71;
  v22[2] = v11[2] - 71;
  v22[3] = v11[3] - 71;
  v22[4] = v11[4] - 71;
  v22[5] = v11[5] - 71;
  v22[6] = v11[6] - 71;
  v22[7] = v11[7] - 71;
  v22[8] = v11[8] - 71;
  v22[9] = v11[9] - 71;
  v22[10] = v11[10] - 71;
  v22[11] = v11[11] - 71;
  v22[12] = v11[12] - 71;
  v22[13] = v11[13] - 71;
  v22[14] = v11[14] - 71;
  v22[15] = v11[15] - 71;
  v22[16] = v11[16] - 71;
  v22[17] = v11[17] - 71;
  v22[18] = v11[18] - 71;
  v22[19] = v11[19] - 71;
  v22[20] = v11[20] - 71;
  v22[21] = v11[21] - 71;
  unsigned int v12 = *(_BYTE **)(v10 - 4);
  v22[22] = v12[22] - 71;
  v22[23] = v12[23] - 71;
  v22[24] = v12[24] - 71;
  v22[25] = v12[25] - 71;
  v22[26] = v12[26] - 71;
  v22[27] = v12[27] - 71;
  v22[28] = v12[28] - 71;
  v22[29] = v12[29] - 71;
  unsigned int v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8LL * (a1 ^ 0x525));
  int v14 = v13(v9, v22, v2);
  unsigned int v15 = ((2 * v14) & 0xBFCFF7EE) + (v14 ^ 0x5FE7FBF7);
  if (v15 != 1609038839)
  {
    if (v15 == 1609039941)
    {
      uint64_t v16 = *v8;
      int v17 = *(_BYTE **)(*(void *)(v6 + 8LL * (v4 - 1349)) - 4LL);
      v23[0] = *v17 - 70;
      v23[1] = v17[1] - 70;
      v23[2] = v17[2] - 70;
      v23[3] = v17[3] - 70;
      v23[4] = v17[4] - 70;
      v23[5] = v17[5] - 70;
      v23[6] = v17[6] - 70;
      v23[7] = v17[7] - 70;
      v23[8] = v17[8] - 70;
      v23[9] = v17[9] - 70;
      v23[10] = v17[10] - 70;
      v23[11] = v17[11] - 70;
      v23[12] = v17[12] - 70;
      v23[13] = v17[13] - 70;
      v23[14] = v17[14] - 70;
      v23[15] = v17[15] - 70;
      v23[16] = v17[16] - 70;
      v23[17] = v17[17] - 70;
      v23[18] = v17[18] - 70;
      v23[19] = v17[19] - 70;
      int v18 = v13(v16, v23, v2);
      unsigned int v19 = (2 * v18) & 0xB1CDF7BE;
      unsigned int v15 = (v18 ^ 0x58E6FBDF) - 2359306;
    }

    else
    {
      unsigned int v19 = -119865378;
    }

    __asm { BR              X8 }
  }

  *(_DWORD *)(v7 + 344) |= (3 * (v4 ^ 0x7DF)) ^ 0x6A8;
  *(_DWORD *)(v7 + 44) = 746457987;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8LL * (v4 - 1406)))( *v2,  v7 + 332,  v7 + 336,  v7 + 340,  v3);
  uint64_t v21 = *(void *)(v1 + 8);
  *(_DWORD *)(*(void *)(v1 + 24) - 0x705CCB0086AF2A86LL) = *v2;
  *(_DWORD *)(v21 - 0x4CAF57822185BF99LL) = *v3;
  *(_DWORD *)(v1 + 20) = 1645153785;
  return result;
}

void sub_1000160B4(uint64_t a1)
{
  int v1 = 1225351577 * (((a1 | 0xD0007703) - a1 + (a1 & 0x2FFF88FC)) ^ 0xF39AAF15);
  __asm { BR              X11 }

uint64_t sub_10001616C@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((*v1 != 0) * (a1 ^ 0x102)) ^ a1)))();
}

uint64_t sub_1000161A0@<X0>(int a1@<W8>)
{
  int v5 = 3 * (a1 ^ 0x91);
  uint64_t v6 = v3(*v4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((205 * (*v1 != 0)) ^ v5)) - 12LL))(v6);
}

uint64_t sub_1000161D8()
{
  uint64_t result = v2(*v3);
  *int v1 = 0;
  *(_DWORD *)uint64_t v0 = 0;
  *(void *)(v0 + 344) = 0LL;
  *(void *)(v0 + 352) = 0LL;
  *(_DWORD *)(v0 + 360) = 521138062;
  *(_DWORD *)(v0 + 56) = 746457987;
  return result;
}

uint64_t sub_100016218@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((205 * (*v1 != 0)) ^ a1 ^ 0x1B1)) - 12LL))();
}

void sub_100016244(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 3804331 * (((a1 | 0x51A664) - (a1 & 0x51A664)) ^ 0x7E848392);
  __asm { BR              X9 }

uint64_t sub_100016310@<X0>( _DWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8)
{
  unsigned int v14 = *(_DWORD *)(v8 - 0x27681A84B35EB0F5LL) + *a1 - v12 + ((v13 + 2132657639) & 0x80E23D37 ^ 0xBD783FD5);
  unsigned int v15 = 1759421093 * (&a5 ^ 0xB37DB054);
  a8 = v13 - v15 + 40;
  a7 = v8;
  a5 = v14 - v15 + 415266632;
  a6 = v15 + 1236742230;
  uint64_t v16 = ((uint64_t (*)(int *))(*(void *)(a2 + 8LL * (v13 - 509)) - 4LL))(&a5);
  return (*(uint64_t (**)(uint64_t))(v11 + 8LL * ((502 * (*v10 == v9)) ^ v13)))(v16);
}

uint64_t sub_1000163E4()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL
                                             * (((*(void *)(v0 + 8) == 0x58C2F3F47EC954F5LL) * (v1 - 1298)) ^ v1))
                            - ((v1 + 202) ^ 0x5F9LL)))();
}

uint64_t sub_10001642C()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((1004 * ((((v0 + 1) ^ (v1 == 1116194070)) & 1) == 0)) ^ v0)))();
}

void sub_100016460()
{
  *int v0 = -1645193696;
}

void sub_100016698(uint64_t a1)
{
  qword_1005721F8 = 536075833 * ((unint64_t)&v2[qword_100572260 - qword_1005721F8] ^ 0x86C548EE6B3237FCLL);
  qword_100572260 = qword_1005721F8;
  pthread_once((pthread_once_t *)&unk_100572248, sub_10004D258);
  __asm { BR              X9 }

uint64_t sub_100016784@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((240 * ((((**(void **)(v1 + 1616) == 0LL) ^ 0xE1F45F16) & 1) == 0)) ^ 0x25Fu))
                            - 8LL))();
}

uint64_t sub_1000167C4()
{
  return (*(uint64_t (**)(uint64_t))(v1 + 1176))(v0);
}

  ;
}

uint64_t sub_1000167EC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  __int16 v2 = *(_DWORD *)result + 26185 * ((2 * (result & 0x1A68) - result - 6761) ^ 0x9DF5);
  *(_DWORD *)(v1 - 0x5C6940C6B1BC6FDALL) = v2 & 0x1FF ^ 0xB31524D1;
  *(void *)(v1 - 0x5C6940C6B1BC6FFALL) = 0x6731FE5437D4814ALL;
  *(_DWORD *)(v1 - 0x5C6940C6B1BC6FDELL) = 369984849;
  int v3 = v2 ^ 0x8E;
  if (v3 == 1)
  {
    int v4 = 369984865;
    goto LABEL_5;
  }

  if (v3 == 2)
  {
    *(_DWORD *)(v1 - 0x5C6940C6B1BC6FE2LL) = -1830205819;
    int v4 = 369984869;
LABEL_5:
    *(void *)(v1 - 0x5C6940C6B1BC6FF2LL) = 0xBEF60CFC367E8474LL;
    *(void *)(v1 - 0x5C6940C6B1BC6FEALL) = 0x4109F303C9817B8BLL;
    *(_DWORD *)(v1 - 0x5C6940C6B1BC6FDELL) = v4;
  }

  *(_DWORD *)(result + 4) = 1284260520;
  return result;
}

uint64_t sub_100016934(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))*(&off_1004E98E8 + ((194 * (*(_DWORD *)(a2 + 4) != 1206753084)) ^ 0x24Au) - 1))();
}

uint64_t sub_100016970()
{
  return 4294925278LL;
}

uint64_t sub_100016978(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 16) = (**(unsigned __int8 **)(a2 + 8) ^ 0x1EEBF92F)
                       - 148926504
                       + ((2 * **(unsigned __int8 **)(a2 + 8)) & 0x5E);
  return 0LL;
}

void sub_1000169B0(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL);
  int v4 = v2 - 159353952;
  BOOL v3 = v2 - 159353952 < 0;
  int v5 = 159353952 - v2;
  if (!v3) {
    int v5 = v4;
  }
  int v1 = (*(_DWORD *)a1 - 235795823 * ((a1 + 1658036232 - 2 * (a1 & 0x62D3A008)) ^ 0xF67EE951) - 345) | 0x109;
  __asm { BR              X10 }

uint64_t sub_100016AE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, int a7, unsigned int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * (((*(_DWORD *)(*v9 + 4LL * a8) != v8) * a6) ^ a7))
                            - ((a7 - 80) ^ a5)
                            + 713LL))();
}

void sub_100016B14()
{
}

uint64_t sub_100016B1C(uint64_t result)
{
  *(_DWORD *)(result + 4) = 313388984;
  return result;
}

void sub_100016BC0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((a1 - 2 * (a1 & 0x7A08EF3) + 127962867) ^ 0xD9663328));
  __asm { BR              X10 }

uint64_t sub_100016C4C@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * (((*(_DWORD *)(v2 - 0x27681A84B35EB0EDLL) == 1645153785) * ((856 * (v1 ^ 0xD8)) ^ 0x7D5)) ^ v1)))();
}

uint64_t sub_100016C9C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = *(_DWORD *)(v1 - 0x27681A84B35EB0F5LL) - 1309758810;
  unsigned int v4 = *(_DWORD *)(v1 - 0x27681A84B35EB0F9LL) - 1602345780;
  BOOL v5 = v3 < ((v2 - 112831669) & 0x6B9A6DEu) - 999042242;
  BOOL v6 = v3 > v4;
  if (v5 == v4 < 0xC473D418) {
    BOOL v5 = v6;
  }
  return (*(uint64_t (**)(void))(a1 + 8LL * ((13 * v5) ^ v2)))();
}

uint64_t sub_100016D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v7 = 11 * (v6 ^ 0x6D5);
  uint64_t v8 = *(void *)(v4 - 0x27681A84B35EB105LL);
  int v9 = *(unsigned __int8 *)(v8 + (v3 - 310716791)) ^ 0x32;
  int v10 = ((*(unsigned __int8 *)(v8 + (v3 - 310716794)) ^ 0x32) << 24) | ((*(unsigned __int8 *)(v8 + (v3 - 310716793)) ^ 0x32) << 16) | ((*(unsigned __int8 *)(v8 + v3 - 310717010 + 2 * ((v7 + 936947223) & 0xC8274FF9 ^ 0x205)) ^ 0x32) << 8) | v9;
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL
                                        * ((203
                                          * (((v2 + v10 - 2 * (v10 & (v2 + 6) ^ v9 & 6) + 0x1000000) & 0xFFFFFF ^ 0xF0DF9)
                                           - (*(_DWORD *)(a1 + 32) ^ v5) != -96652631)) ^ v7))
                            - 8LL))();
}

void sub_100016E38()
{
  *uint64_t v0 = -1645193524;
}

uint64_t sub_100016FE8@<X0>(void *a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(*a1 - 0x42E48BBDD224DE3DLL) = v6 + v5 + 8;
  return (*(uint64_t (**)(void))(a3
                              + 8LL
                              * ((19 * (*v3 != (((a2 - 641) | 0x42) ^ v4 ^ (((a2 - 592) ^ 0xCB) * v7)))) ^ (a2 - 592))))();
}

uint64_t sub_10001705C@<X0>(void *a1@<X0>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(*a1 - 0x42E48BBDD224DE3DLL) = 0LL;
  return (*(uint64_t (**)(void))(a3
                              + 8LL
                              * ((19 * (*v3 != ((((a2 ^ 0x3D0) - 49) | 0x42) ^ v4 ^ (109 * (a2 ^ 0x31B))))) ^ a2 ^ 0x3D0)))();
}

void sub_1000170CC(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 24) - 0x37021DA48139154ELL) = v3;
  *uint64_t v1 = v2;
  JUMPOUT(0x100016FE0LL);
}

void sub_1000170EC()
{
  v0[1] = 108757529 * ((v0 + 70320331 - 2 * (v0 & 0x43100CB)) ^ 0xE4AD62E0) + 1695027452;
  sub_10004CCF0(v0);
  __asm { BR              X8 }

uint64_t sub_1000171C0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, unsigned int a20, unsigned int a21, int a22)
{
  unsigned int v25 = 1759421093 * (&a19 ^ 0xB37DB054);
  HIDWORD(a19) = v25 ^ 0x771B5177;
  a20 = v25 + 1806;
  a22 = v25 ^ 0x18F94B49;
  LODWORD(a19) = v25 ^ 0x7FA6CEE2;
  ((void (*)(unint64_t **))(*(void *)(v24 + 392) - 12LL))(&a19);
  LODWORD(a12) = a21;
  a21 = 1307
      - 460628867
      * (((&a19 | 0x79CC505F) - &a19 + (&a19 & 0x8633AFA0)) ^ 0x355AD222);
  a19 = &STACK[0x4BD26FD1213425D9];
  sub_100028A48((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 8LL * (v22 | ((a20 == 1645153785) << 8))) - 4LL))( v26,  v27,  v28,  v29,  v30,  v31,  v32,  v33,  a9,  a10,  a11,  a12);
}

uint64_t sub_1000172C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, unsigned int a21, uint64_t a22, unsigned int a23, uint64_t a24)
{
  unsigned int v29 = 1178560073
      * (((&a20 | 0x2DEBD9B6) - &a20 + (&a20 & 0xD2142648)) ^ 0x977FA1D4);
  a23 = v29 ^ 0x3E8;
  a22 = a17;
  a21 = ((2 * v26) & 0xBCFBBE7E) + (v26 ^ 0x5E7DDF3F) - 234917126 + v29;
  sub_100038AF4((uint64_t)&a20);
  unsigned int v30 = 1178560073
      * (((&a20 | 0xA44E095A) - &a20 + (&a20 & 0x5BB1F6A0)) ^ 0x1EDA7138);
  a23 = (((2 * v25) & 0xFF9AFFFE) + (v25 ^ 0xFFCD7FFF) + 196320555) ^ v30;
  a21 = v30 + 1289;
  a22 = a17;
  a24 = v24;
  uint64_t v31 = (void (*)(int *))(*(void *)(v28 + 1024) - 8LL);
  v31(&a20);
  unsigned int v32 = 1178560073 * ((&a20 - 791991911 - 2 * (&a20 & 0xD0CB2999)) ^ 0x6A5F51FB);
  a22 = a17;
  a24 = a14;
  a23 = v32 ^ ((a13 ^ 0x3FB7BDBB) - 875995281 + ((2 * a13) & 0x7F6F7B76));
  a21 = v32 + 1289;
  uint64_t v33 = ((uint64_t (*)(int *))v31)(&a20);
  return ((uint64_t (*)(uint64_t))(*(void *)(v27 + 8LL * ((2034 * (a20 == 1645153785)) ^ 0x35Du)) - 12LL))(v33);
}

uint64_t sub_1000174B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t *a19, uint64_t a20, int a21, int a22, int a23, int a24)
{
  if (a12 >= 0x608FEDF6) {
    int v27 = 1010542952;
  }
  else {
    int v27 = 635686783;
  }
  int v28 = 460628867 * ((&a19 + 663701623 - 2 * ((unint64_t)&a19 & 0x278F4877)) ^ 0x6B19CA0A);
  a23 = v27 - v28;
  a21 = v28 - 628183178;
  a22 = v28 + v25 + 2138962536;
  a19 = &STACK[0x58A7AA0862456916];
  a20 = a16;
  uint64_t v29 = sub_10004D0C0((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(void *)(v26
                                                      + 8LL
                                                      * ((101
                                                        * (a24 != v24 + ((v25 + 2122744248) & 0x81797F1F) - 545 - 495)) ^ v25))
                                          - 12LL))(v29);
}

uint64_t sub_1000175AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v13
                                                                        + 8LL
                                                                        * (int)(((v12
                                                                                + 24
                                                                                + ((v12 + 1527559566) & 0xA4F349EE)
                                                                                + 117)
                                                                               * (a12 > 0x608FEDF5)) ^ v12))
                                                            - 4LL))( a1,  a2,  a3);
}

uint64_t sub_10001765C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned int a19, uint64_t a20, uint64_t a21, uint64_t a22, unsigned int a23)
{
  a23 = (v23 - 10) ^ (1225351577
                    * ((2 * (&a19 & 0x486B7D40) - &a19 + 932479672) ^ 0x140E5AAE));
  a20 = a15;
  a21 = v28;
  a22 = v24;
  ((void (*)(unsigned int *))(*(void *)(v27 + 8LL * (v23 - 299)) - 8LL))(&a19);
  a19 = (v23 - 19) ^ (1374699841 * (((&a19 | 0x5275727) + (~&a19 | 0xFAD8A8D8)) ^ 0x68D34F2F));
  a21 = a15;
  a20 = a10;
  v26(&a19);
  a20 = a15;
  a19 = (v23 + 482) ^ (1755732067
                     * (((&a19 | 0xA2C01B31) - &a19 + (&a19 & 0x5D3FE4C8)) ^ 0x7C06A6EA));
  uint64_t v29 = sub_100049128((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(void *)(v25
                                                      + 8LL
                                                      * ((1216 * ((_DWORD)a21 == 123 * (v23 ^ 0x16B) + 1645152924)) ^ v23))
                                          - 8LL))(v29);
}

uint64_t sub_100017834( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
}

uint64_t sub_100017880@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t a7, int a8, int a9)
{
  return (*(uint64_t (**)(void))(v10 + 8LL * ((387 * ((((a9 ^ v9) > a6) ^ (a1 - 115) ^ 0x37) & 1)) ^ a1)))();
}

uint64_t sub_1000178C4()
{
  unsigned int v3 = v0 - ((v0 << (((v1 + 19) & 0xDF) - 92)) & 0x82B34678) - 1051090116;
  BOOL v4 = ((v1 ^ 0xECF2B880) & (2 * v3) ^ 0x80B20068) + (v3 ^ 0x3720FFC9) + 1845473215 == 1685654708;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((2 * v4) | (4 * v4)) ^ v1)) - 8LL))();
}

uint64_t sub_100017968( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v12 = v10 + v9 + 159818507 >= ((31 * (v8 ^ 0x165)) ^ (a8 + 1068)) - 928899231;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((v12 | (4 * v12)) ^ v8 ^ 0x7B9)) - 12LL))();
}

uint64_t sub_1000179D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * ((61 * (v7 - a7 < (unint64_t)(v8 + 486) - 919)) ^ v8))
                            + 928899231LL
                            - ((v8 + 2002648558) & 0xBFFFE0E7)))();
}

uint64_t sub_100017A28( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10 + 8LL * (((v9 >= 3 * (a2 ^ 0x284u) - 889) * ((a2 - v8) ^ (a8 + 888))) ^ a2)))();
}

uint64_t sub_100017A60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v15 = (v12 + v10);
  __int128 v16 = *(_OWORD *)(v9 + v15 - 15);
  __int128 v17 = *(_OWORD *)(v9 + v15 - 31);
  uint64_t v18 = a7 + v15;
  *(_OWORD *)(v18 - 15) = v16;
  *(_OWORD *)(v18 - 31) = v17;
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8LL
                                            * ((303 * (929 * (v13 ^ (a8 + 859)) - 1826 == (v11 & 0xFFFFFFE0))) ^ (v8 + v13 + 309))))(929LL);
}

uint64_t sub_100017AC8(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (a3 | (v3 != v4))) - ((a3 - 997) ^ 0x359LL)))();
}

uint64_t sub_100017AF4( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v10 + 8LL * ((1843 * ((v9 & 0x18) == ((a2 - v8) ^ (a8 + 1524) ^ 0x399))) ^ a2)))();
}

uint64_t sub_100017B2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(a7 - 7 + (v10 + v8 - v11)) = *(void *)(v7 - 7 + (v10 + v8 - v11));
  return (*(uint64_t (**)(void))(v12 + 8LL * ((1414 * ((a1 ^ 0x2F5) + v11 - 356 == (v9 & 0xFFFFFFF8))) ^ a1)))();
}

uint64_t sub_100017B78(int a1, int a2, uint64_t a3, int a4, int a5)
{
  *(void *)(a3 + (a4 - v6)) = *(void *)(v7 + (a4 - v6));
  return (*(uint64_t (**)(void))(v8 + 8LL * (((v5 + v6 - 356 == a2) * a5) ^ a1)))();
}

uint64_t sub_100017BA4(uint64_t a1, int a2)
{
}

uint64_t sub_100017BEC@<X0>(uint64_t a1@<X6>, int a2@<W7>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (v7 ^ (a2 + 1712) ^ (v5 - 821)) + v6) = *(_BYTE *)(v4
  return (*(uint64_t (**)(void))(v8 + 8LL * ((853 * (v6 - 1 == a3)) ^ (v3 + v7 + 465))))();
}

uint64_t sub_100017C30()
{
  unsigned int v8 = v2
     + 535753261
  uint64_t v9 = v5;
  v1(v7);
  uint64_t v9 = v6;
  unsigned int v8 = ((v2 - 744574573) & 0x2C614F1F)
  v1(v7);
  return v3 ^ v0;
}

void sub_100017D38(uint64_t a1)
{
  int v2 = 3804331 * (((a1 | 0xD29CC998) - (a1 | 0x2D633667) + 761476711) ^ 0xAC49EC6E);
  int v3 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)a1 ^ v2;
  unsigned int v5 = 1178560073
     * ((((&v41 | 0x135B03A) ^ 0xFFFFFFFE) - (~&v41 | 0xFECA4FC5)) ^ 0x445E37A7);
  int v6 = *(_DWORD *)(a1 + 8) ^ v2;
  unint64_t v17 = 3804331
      * (((a1 | 0xF8BBF308D29CC998LL) - (a1 | 0x7440CF72D633667LL) + 0x7440CF72D633667LL) ^ 0x3712930CAC49EC6ELL);
  int v7 = v3 + v2;
  unsigned int v41 = 1076023948 - v5;
  int v43 = v4 - v5 + 1172345383;
  uint64_t v25 = &STACK[0x5C6940C6B1BC7126];
  __int128 v42 = &STACK[0x5C6940C6B1BC7126];
  sub_1000167EC((uint64_t)&v41);
  int v8 = v6;
  int v32 = v7 - 1515316656;
  int v16 = v7 + 1773184230;
  int v19 = v7 - 829826358;
  int v18 = v7 - 119409945;
  v13[1] = (char *)&v13[-147572436] + 1;
  uint64_t v20 = 55 * (v4 ^ 0x27u);
  uint64_t v28 = v4 ^ 0x666u;
  uint64_t v29 = &v40;
  int32x4_t v26 = vdupq_n_s32(0xC41E1BF2);
  int32x4_t v27 = vdupq_n_s32(0x620F0DFFu);
  unsigned int v22 = (v4 + 271127083) & 0xEFD6EFF9;
  int v15 = v4 + 1037830021;
  int v14 = v4 - 1343287479;
  uint64_t v34 = (v4 - 1343287479);
  int v30 = 622 * (v4 ^ 0x36);
  int v31 = v4;
  int32x4_t v24 = vdupq_n_s32(0x620F0DF9u);
  uint64_t v21 = a1;
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = (char *)*(&off_1004EDED0 + (v4 ^ 0x1E)) - 8;
  uint64_t v23 = v20 + *(void *)&v10[8 * v4] - 1049;
  unsigned int v11 = v8 - 176919824 + ~(((v8 + 690444800) & 0x4C4D10FF ^ v8 & 0x10) << ((v4 + 64) ^ 0x75));
  char v35 = (HIBYTE(v11) ^ 0x4C) - ((v11 >> 23) & 0x64) + 50;
  char v36 = (BYTE2(v11) ^ 0x4D) - ((v11 >> 15) & 0x64) + 50;
  char v37 = (BYTE1(v11) ^ 0x10) - ((2 * (BYTE1(v11) ^ 0x10)) & 0x64) + 50;
  char v38 = (v8 - 16 + ~((v8 ^ v8 & 0x10) << ((v4 + 64) ^ 0x75))) ^ 0xDD;
  uint64_t v12 = *(void *)&v10[8
                      * ((26 * (((2 * v39) & 0xA ^ 8) + (v39 & 0x3F ^ 0x6F3FFFD1u) - 1866465281 < 0xFFFFFFC0)) ^ (v4 + 58))]
      - 8LL;
  uint64_t v33 = v9;
  __asm { BR              X13 }

uint64_t sub_100018144@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W8>)
{
  *(_BYTE *)(a3 + (a4 + v7)) = *(_BYTE *)(a2 + ((5 * (v4 ^ a1)) ^ (v6 + 1341)) + v5);
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((419 * ((a4 & 0xFFFFFFC0) != v8)) ^ v4)) - 8LL))();
}

uint64_t sub_100018190( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, unint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, int a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, int a47, int a48, int a49, int a50,int a51,int a52,int a53,unsigned int a54,int a55,unsigned __int8 a56)
{
  v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(v58 + 8LL * v56);
  HIDWORD(a12) = v57;
  uint64_t v63 = a56 ^ 0x5Fu;
  if ((_DWORD)v63 == 2)
  {
    BOOL v72 = (unint64_t)&a39 < a30 && v59 < (unint64_t)&a48;
    return ((uint64_t (*)(void, void))(*(void *)(v58
                                                               + 8LL
                                                               * (int)(((((a2 + 972) | 0x112) ^ 0x505) * v72) ^ (a2 + 1233)))
                                                   - (a29 ^ 0x65A)))( a54,  a54);
  }

  else if ((_DWORD)v63 == 1)
  {
    uint64_t v64 = ((_DWORD)a2 + 40) | 0x81u;
    int v65 = a2 + 169;
    BOOL v67 = (unint64_t)&a39 >= a30 || v59 >= (unint64_t)&a48;
    uint64_t v68 = (v64 + 637);
    v69 = (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 + 8LL * (int)((v68 * v67) ^ v65)) - 4LL);
    return v69( v64,  1075421723LL,  v69,  v68,  &a39,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26);
  }

  else
  {
    a50 = v60 + 2 * (a50 ^ v60) - (v61 & (4 * (a50 ^ v60)));
    a51 = 2 * (a51 ^ v60) + v60 - (v61 & (4 * (a51 ^ v60)));
    a52 = 2 * (a52 ^ v60) + v60 - (v61 & (4 * (a52 ^ v60)));
    a53 = 2 * (a53 ^ v60) + v60 - (v61 & (4 * (a53 ^ v60)));
    return v62(v63, a2, 3005633205LL, a4, &a39);
  }

uint64_t sub_10001911C( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, unsigned int a32, uint64_t a33, uint64_t a34, int a35)
{
  unsigned int v36 = a35 + 2117096340 + a7;
  BOOL v37 = v36 < 0xCB0A057B;
  BOOL v38 = v36 > a32;
  if (a32 < 0xCB0A057B != v37) {
    BOOL v39 = v37;
  }
  else {
    BOOL v39 = v38;
  }
  return ((uint64_t (*)(void))(*(void *)(v35 + 8LL * ((634 * !v39) ^ (a2 + 1022))) - 12LL))();
}

uint64_t sub_1000191A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
}

uint64_t sub_1000191FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  *(_BYTE *)(a4 + v9) = *(_BYTE *)(v12 + (v8 + a3))
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((v9 != 63) * v13) ^ v10)) - 12LL))();
}

uint64_t sub_100019250(uint64_t a1, uint64_t a2, int a3, int8x16_t *a4)
{
  *a4 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v7 + (v4 + a3)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v7 + (v4 + a3)), *(int8x16_t *)(v7 + (v4 + a3))),  v9)),  v8);
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (v5 + 317)) - 12LL))();
}

uint64_t sub_1000192AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13
                                                                       + 8LL
                                                                       * ((984
                                                                         * (((((_DWORD)a2 + 528) ^ (a13 - 1998991134 + (((_DWORD)a2 - 52) | 0x44u) + 1317 < 0xFFFFFFFB)) & 1) == 0)) ^ ((int)a2 + 441))))( a1,  a2,  a3,  a4);
}

void sub_100019320()
{
}

uint64_t sub_100019340( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  BOOL v19 = a16 < 0xF3E5C5F5;
  return ((uint64_t (*)(void))(*(void *)(v18
                                        + 8LL
}

uint64_t sub_1000193C0@<X0>( int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W5>, int a6@<W8>)
{
  BOOL v12 = a2 < v9;
  *(_BYTE *)(a4 + (a6 + v8)) = *(_BYTE *)(v11 + (v6 + a3))
  unsigned int v13 = a1 + v6 + 1;
  int v14 = v12 ^ (v13 < v9);
  BOOL v15 = v13 < a2;
  if (!v14) {
    BOOL v12 = v15;
  }
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * (((16 * !v12) | (32 * !v12)) ^ v7)) - 4LL))();
}

uint64_t sub_100019438( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, unint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, unsigned int a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, int a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49)
{
  int v52 = 628203409 * ((-671978737 - ((v51 - 168) | 0xD7F26B0F) + ((v51 - 168) | 0x280D94F0)) ^ 0xAA8598C3);
  *(_DWORD *)(v51 - 160) = v52 + v49 - 646;
  *(_DWORD *)(v51 - 156) = a15 - v52;
  STACK[0x358] = a24;
  uint64_t v53 = sub_10002B028(v51 - 168);
  uint64_t v54 = a49 & 0x3F;
  *(&a40 + (v54 ^ 0x14)) = -78;
  return ((uint64_t (*)(uint64_t, void, uint64_t))(*(void *)(v50
                                                                       + 8LL
                                                                       * ((105 * ((v54 ^ 0x14) < 0x38)) ^ v49))
                                                           - ((v49 + 2049300052) & 0x85DA233C)
                                                           + 48LL))( v53,  a32,  3005633205LL);
}

uint64_t sub_100019538()
{
  return (*(uint64_t (**)(uint64_t))(v1
                                            + 8LL
                                            * ((((v0 - 1180579210) < 0x38) * (3 * (v2 ^ 0x1ED) - 42)) ^ (v2 + 461))))(50LL);
}

uint64_t sub_100019580@<X0>(int a1@<W8>)
{
  uint64_t v4 = v1;
  uint64_t v5 = v2 + v1;
  else {
    uint64_t v6 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((((a1 - 905) ^ 0x68C) - 1039)
}

uint64_t sub_1000195D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(a10 + v12 + (v10 ^ 0x68F)) = v14;
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * (int)((624 * ((v11 & 0xFFFFFFFFFFFFFFF8LL) == 8)) | v10)) - 8LL))();
}

uint64_t sub_100019620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v7 + (v5 ^ a5)) = v10;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (int)(((v6 == 0) * v8) | v5)) - 8LL))();
}

uint64_t sub_10001964C()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * (((((v2 - 1) | 2) - 509) * (v0 != v1)) ^ v2)))();
}

uint64_t sub_100019674@<X0>(char a1@<W0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = a3 + v4;
  *(_BYTE *)(a2 + v6) = a1;
  return (*(uint64_t (**)(void))(v5
                              + 8LL
                              * ((((unint64_t)(v6 + 1) < 0x38) | (2 * ((unint64_t)(v6 + 1) < 0x38))) ^ v3 ^ 3)))();
}

uint64_t sub_1000196A8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(a4 + v5 + v6) = a1;
  return (*(uint64_t (**)(void))(v7
                              + 8LL
                              * ((((unint64_t)(v5 + v6 + 1) < 0x38) | (2
                                                                            * ((unint64_t)(v5 + v6 + 1) < 0x38))) ^ v4)))();
}

void sub_1000196D4()
{
}

uint64_t sub_100019A10()
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (((v1 != v0) * ((v2 - 1209) ^ 0x27D)) ^ v2)) - 12LL))();
}

uint64_t sub_100019A58@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  uint64_t v7 = v2 + v4;
  *(_BYTE *)(a1 + v7) = v5;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((((unint64_t)(v7 + 1) < 0x40) * v3) ^ (a2 + 1209))) - 12LL))();
}

void sub_100019A98()
{
}

uint64_t sub_100019AA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, int a36, char a37)
{
  BOOL v40 = (v38 & 0xFFFFFFFC) == ((v37 | 0x92) ^ 0x2E1) + 1998989753;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v39
                                                             + 8LL
                                                             * (((2
                                                                * (((19 * ((v37 | 0x92) ^ 0xE1)) ^ v40) & 1)) & 0xF7 | (8 * (((19 * ((v37 | 0x92) ^ 0xE1)) ^ v40) & 1))) ^ (v37 | 0x92))))( a1,  a2,  &a37);
}

uint64_t sub_100019B0C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, int a3@<W8>)
{
  *(_BYTE *)(a2 + (a3 + v5)) = *(_BYTE *)(a1 + v3 - 1998989808);
  return (*(uint64_t (**)(void))(v7 + 8LL * ((1737 * (((v3 + 1LL) & 0xFFFFFFFCLL) == v6)) ^ (v4 - 313))))();
}

uint64_t sub_100019B70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t (*a20)(uint64_t), uint64_t a21, uint64_t a22, uint64_t a23, unint64_t a24)
{
  int v26 = 628203409 * ((~((v25 - 168) | 0x9F6F2C5F) + ((v25 - 168) & 0x9F6F2C5F)) ^ 0xE218DF93);
  *(_DWORD *)(v25 - 160) = v26 + v24 + 1001;
  *(_DWORD *)(v25 - 156) = 507371030 - v26;
  STACK[0x358] = a24;
  uint64_t v27 = sub_10002B028(v25 - 168);
  return a20(v27);
}

uint64_t sub_100019BE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, int a49, __int16 a50,char a51,char a52,int a53)
{
  if (BYTE4(a32) == 2) {
    return ((uint64_t (*)(void))(*(void *)(v53
  }
                                          + 8LL
  if (BYTE4(a32) == 1) {
    return ((uint64_t (*)(void))(*(void *)(v53
  }
                                          + 8LL
                                          * (((2 * (a53 == 369984849)) | (16 * (a53 == 369984849))) ^ ((int)a2 + 1050)))
                              - ((2 * (_DWORD)a2) ^ 0x426u)
                              + 1090LL))();
  uint64_t v55 = 103 * (a2 ^ 0x31);
  unint64_t v56 = ((unint64_t)&a37 ^ 0x7DFFFDE1BDDDED78LL ^ v55)
      + ((2LL * (void)&a37) & 0xFBFFFBC37BBBDEF0LL)
      - 0x601C90400009019ELL;
  a52 = ((v56 + 35) ^ 0xBA) * (v56 + 103 * (a2 ^ 0x31) + 49);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 + 8LL * (int)v55) - 4LL))( a1,  a2,  a19,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41);
}

void sub_100019F24()
{
}

uint64_t sub_100019F2C@<X0>(int a1@<W8>)
{
  int v2 = 235795823 * ((((v1 - 168) | 0xEB9F054C) - ((v1 - 168) & 0xEB9F054C)) ^ 0x7F324C15);
  *(_DWORD *)(v1 - 160) = v2 + 1596901039;
  *(_DWORD *)(v1 - 132) = (a1 + 1809) ^ v2;
  uint64_t result = ((uint64_t (*)(uint64_t))((char *)*(&off_1004EDED0 + a1 - 11) - 4))(v1 - 168);
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(v1 - 136);
  return result;
}

void sub_10001A034(uint64_t a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  __asm { BR              X8 }

uint64_t sub_10001A0B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, unsigned int a15)
{
  a15 = 108757529
  uint64_t v17 = sub_10004CCF0(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v16 + 8LL * ((924 * (a14 == 1645153785)) ^ v15)) - 4LL))(v17);
}

uint64_t sub_10001A140( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, int a15, unsigned int a16)
{
  a16 = 1307 - 460628867 * ((&a14 & 0x9E53D03D | ~(&a14 | 0x9E53D03D)) ^ 0x2D3AADBF);
  a14 = &STACK[0x4BD26FD1213425B9];
  sub_100028A48((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 8LL * ((17 * (a15 == v16)) ^ 0x4AD))
                                                                                                - 4LL))( v18,  v19,  v20,  v21,  v22,  v23,  v24);
}

uint64_t sub_10001A1E4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  a16 = v19 + 1224239923 * ((&a14 & 0xD2B4AA2E | ~(&a14 | 0xD2B4AA2E)) ^ 0xDFF8A806) + 1201;
  a17 = v17;
  a15 = a12;
  uint64_t v23 = ((uint64_t (*)(int *))(*(void *)(v21 + 8LL * (v19 ^ 0xB0)) - 12LL))(&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20
                                                      + 8LL * (((a14 == v18) * (v22 + v19 + 840366501 + 600)) ^ v19))
                                          - 4LL))(v23);
}

uint64_t sub_10001A298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t *a14, uint64_t a15, unsigned int a16, unsigned int a17, unsigned int a18, int a19)
{
  unsigned int v23 = 460628867 * (&a14 ^ 0x4C96827D);
  a18 = 635686783 - v23;
  a14 = &STACK[0x58A7AA08624568F6];
  a15 = a12;
  a16 = v23 - 910010299;
  a17 = v23 + v20 + 2138963185;
  uint64_t v24 = sub_10004D0C0((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v22
                                                      + 8LL
                                                      * (((a19 == v19) * (((v20 ^ (v21 + 602)) - v21 + 300) ^ 0x789)) ^ v20))
                                          - 4LL))(v24);
}

uint64_t sub_10001A34C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, unsigned int a14, unint64_t *a15, unint64_t *a16)
{
  a14 = (v20 - 390) ^ (1374699841
                     * ((&a14 - 762734092 - 2 * (&a14 & 0xD28999F4)) ^ 0xBF7D81FD));
  a15 = &STACK[0x384B062F07609560];
  a16 = a11;
  int v21 = (void (*)(unsigned int *))(*(void *)(v19 + 8LL * (v20 ^ 0x26A)) - 8LL);
  v21(&a14);
  a14 = (v20 - 390) ^ (1374699841
                     * ((&a14 + 2125390926 - 2 * (&a14 & 0x7EAEE44E)) ^ 0x135AFC47));
  a15 = &STACK[0x384B062F07609564];
  a16 = a11;
  v21(&a14);
  a14 = (v20 + 111) ^ (1755732067
                     * ((791046139 - (&a14 | 0x2F2667FB) + (&a14 | 0xD0D99804)) ^ 0xE1F25DF));
  a15 = a11;
  uint64_t v22 = sub_100049128((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18
                                                      + 8LL
                                                      * (((((v20 - v16 - 1) ^ ((_DWORD)a16 == v17)) & 1)
                                                        * (v20 ^ 0x2F5)) ^ v20))
                                          - 4LL))(v22);
}

uint64_t sub_10001A4B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * (int)((1534 * (a14 == v14)) ^ v16 ^ 0x2A)) - (v16 ^ 0x2DBLL)))();
}

uint64_t sub_10001A4F8()
{
  *uint64_t v0 = v2 ^ v7 ^ 0x5019F7ADu;
  uint64_t v10 = v5;
  int v9 = 535753261 * (((v8 | 0x7AAA3359) + (~v8 | 0x8555CCA6)) ^ 0x705E3D77) - 840365647 + v2;
  v4(v8);
  int v9 = 535753261 * ((v8 - 1904952353 - 2 * ((unint64_t)v8 & 0x8E74BBDF)) ^ 0x8480B5F0)
     - 840365647
     + v2;
  uint64_t v10 = v6;
  v4(v8);
  return v1 ^ 0x620F0DF9u;
}

uint64_t sub_10001A608(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 628203409 * (a1 ^ 0x82880C33) + 2;
  signed int v2 = (v1 ^ 0xF680737B) + *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL);
  if (v2 < 0) {
    signed int v2 = -v2;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + v1 - 177)
                              + ((((v2 ^ 0xBDEDFFF6) + 1108475913 + ((2 * v2) & 0x7BDBFFEC) < 0x7FFFFFFF)
                                * ((v1 - 1262923266) & 0x4B46ADFF ^ 0x60E)) ^ v1)
                              - 1)
                            - (((v1 - 18) | 0x10u) ^ 0xD5LL)))();
}

uint64_t sub_10001A70C(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  return ((uint64_t (*)(void))(*(void *)(a5
                                        + 8LL * (((*(_DWORD *)(*v5 + 4LL * v6) != a2) * (((a4 - 22) | 0x18) ^ a3)) ^ a4))
                            - 12LL))();
}

void sub_10001A744()
{
}

uint64_t sub_10001A74C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)(result + 4) = a6;
  return result;
}

void sub_10001A754(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(void *)(a1 + 8) == 0x58A7AA08624568E6LL;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = v2;
  int v1 = *(_DWORD *)(a1 + 16) ^ (1755732067 * ((2 * (a1 & 0x47DE7202) - a1 - 1205760515) ^ 0x66E73026));
  __asm { BR              X8 }

uint64_t sub_10001A880()
{
  LODWORD(STACK[0x468]) = v0;
  uint64_t v5 = v4 - 200;
  *(_BYTE *)uint64_t v5 = (-85 * ((2 * ((v4 + 56) & 0x38) - (v4 + 56) - 57) ^ 0x31)) ^ 0x2E;
  STACK[0x2A8] = (unint64_t)&STACK[0x4CAF57822185C49D];
  *(void *)(v5 + 8) = &STACK[0x4CAF57822185C49D];
  STACK[0x2B0] = (unint64_t)&STACK[0x705CCB0086AF2F6E];
  *(void *)(v5 + 24) = &STACK[0x705CCB0086AF2F6E];
  *(_DWORD *)(v4 - 184) = 3804331 * ((2 * ((v4 - 200) & 0x59AF7138) - (v4 - 200) - 1504670009) ^ 0xD885AB31) + v2 + 856;
  unsigned int v6 = *(uint64_t (**)(uint64_t))(v1 + 8LL * (v2 ^ 0x2CE));
  STACK[0x2A0] = (unint64_t)v6;
  uint64_t v7 = v6(v4 - 200);
  int v8 = *(_DWORD *)(v4 - 180);
  LODWORD(STACK[0x618]) = v8;
  return (*(uint64_t (**)(uint64_t))(v3
                                            + 8LL
                                            * (((v8 == 1645153785) * ((((v2 + 592) | 4) + 556) ^ (v2 - 231))) ^ v2)))(v7);
}

#error "10001B1B4: call analysis failed (funcsize=363)"
uint64_t sub_10001B1B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  STACK[0x2C8] = v1;
  STACK[0x4D8] = 0LL;
  unsigned int v6 = 235795823 * ((565679011 - ((v5 - 200) | 0x21B793A3) + ((v5 - 200) | 0xDE486C5C)) ^ 0x4AE52505);
  v4[1] = 0x15C2A15CF2725D85LL;
  uint64_t v7 = STACK[0x2B8];
  *(_DWORD *)(v5 - 200) = v6 ^ 0xE4EF48AC;
  *(_DWORD *)(v5 - 164) = v3 - v6 - 440;
  int v8 = STACK[0x2C0];
  v4[2] = v7;
  v4[3] = v8;
  int v9 = (uint64_t (*)(uint64_t))(*(void *)(v0 + 8LL * (v3 - 626)) - 12LL);
  STACK[0x2D0] = (unint64_t)v9;
  uint64_t v10 = v9(v5 - 200);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((22 * (*(_DWORD *)(v5 - 168) != 1645153785)) ^ v3))
                                          - ((v3 ^ 0x14Du)
                                           + 676)
                                          + 1249LL))(v10);
}

uint64_t sub_10001B298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LODWORD(STACK[0x4AC]) = v4;
  STACK[0x620] = STACK[0x460];
  LODWORD(STACK[0x618]) = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5
                                                                       + 8LL
                                                                       * ((((179 * (((v3 - 1197) | 0x44) ^ 0x7B)
                                                                           - 1018159216) & 0x3CAFDFCB ^ 0x597)
                                                                         * (v4 == v6)) ^ ((v3 - 1197) | 0x44))))( a1,  a2,  a3,  2649773600LL);
}

void sub_100020530()
{
}

uint64_t sub_1000205C8(unint64_t a1)
{
  *(void *)(v5 + 304) = v2 - 176;
  *(void *)(v5 + 96) = a1;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (v1 | (2 * (v4 > a1)))) - ((v1 - 22) ^ 0x33FLL)))();
}

uint64_t sub_10002066C@<X0>(uint64_t a1@<X0>, char a2@<W3>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (v6 + v7)) = *(_BYTE *)(v9 + (v6 + v7)) ^ *(_BYTE *)(v4
                                                                                                 + ((v6 + v7) & 0xFLL)) ^ *(_BYTE *)(v5 + ((v6 + v7) & 0xFLL)) ^ *(_BYTE *)(((v6 + v7) & 0xFLL) + v3 + 2) ^ (((v6 + v7) & 0xF) * (a3 ^ 0x80)) ^ a2;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((120 * ((v6 + 1 + v7) < 0x150)) ^ a3)) - 8LL))();
}

uint64_t sub_1000206D4@<X0>( uint64_t a1@<X0>, char a2@<W3>, int a3@<W5>, char a4@<W6>, int a5@<W7>, int a6@<W8>)
{
  uint64_t v13 = (v9 + a3);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(v12 + v13) ^ *(_BYTE *)(v7 + (v13 & 0xF)) ^ *(_BYTE *)(v8 + (v13 & 0xF)) ^ *(_BYTE *)((v13 & 0xF) + v6 + 2) ^ ((v13 & 0xF) * a4) ^ a2;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((v9 - 1 != v10) * a5) ^ a6)) - 8LL))();
}

uint64_t sub_100020734@<X0>( int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int8x16_t *a14)
{
  int v17 = (int8x16_t *)((char *)&STACK[0x6C0] + STACK[0x3D0] + (a7 ^ 0x991D124D801601E0LL));
  *int v17 = veorq_s8(*a14, (int8x16_t)xmmword_1003BA310);
  uint64_t v18 = v16[47];
  v16[48] = a1;
  v16[49] = a1;
  v16[47] = 435 * (v14 ^ 0x662u) + v18 - 1708;
  return ((uint64_t (*)(int8x16_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 8LL * (v14 ^ ((v17 == a1) | ((v17 == a1) << 8))))
                                                                                           - 8LL))( a1,  a2,  a3,  a4,  a5,  a6);
}

uint64_t sub_1000207B8@<X0>( unsigned __int8 *a1@<X0>, int a2@<W4>, char a3@<W7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  int v61 = (unsigned __int8 *)&STACK[0x19C0] + a4;
  *int v61 = *a1;
  *(void *)(v61 + 1) = *(void *)(a1 + 1);
  *(_DWORD *)(v61 + 9) = *(_DWORD *)(a1 + 9);
  *(_WORD *)(v61 + 13) = *(_WORD *)(a1 + 13);
  v61[15] = a1[15];
  uint64_t v62 = *((void *)a1 + 1);
  *((void *)v61 + 2) = *(void *)a1;
  *((void *)v61 + 3) = v62;
  int v63 = (v57 - 589705933) & 0x23262F86;
  uint64_t v64 = *(void *)(v59 + 8LL * (v57 - 1560)) - 12LL;
  uint64_t v65 = *(void *)(v59 + 8LL * (v57 - 1531));
  uint64_t v66 = *(void *)(v59 + 8LL * (v57 - 1546)) - 12LL;
  char v67 = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 14) ^ 0x86LL));
  char v68 = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 10) ^ 0xCBLL));
  LODWORD(v62) = (((*(unsigned __int8 *)(v65 + (v61[8] ^ 0x65LL)) + (v61[8] ^ a2) - 123) ^ 0xF5) << 24) | (((v68 ^ (16 * v68)) ^ 0x25) << 8);
  int v69 = ((v61[7] ^ 0x90) + *(_BYTE *)(v64 + (v61[7] ^ 0x7CLL)) - 85) | ((((v61[4] ^ 0x13)
  uint64_t v70 = *(void *)(v59 + 8LL * (v57 - 1733));
  unsigned int v71 = *(unsigned __int8 *)(v70 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 1) ^ 0x1ALL));
  int v72 = (v71 >> 1) ^ (((((v71 ^ 0xA7) + (v71 & 0xD5 ^ a3) + 1) ^ v71 & 0xDF) & 0xF0) >> 4) ^ 0x3C;
  int v73 = ((v61[3] ^ 0xB8) + *(_BYTE *)(v64 + (v61[3] ^ 0x54LL)) - 85) | ((v71 ^ 0x37 ^ (v72 - ((2 * v72) & 0xA6) + 83)) << 16);
  LOBYTE(v71) = *(_BYTE *)(v66 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 6) ^ 0x2ELL));
  unsigned int v74 = *(_BYTE *)(v70 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 13) ^ 0x5BLL)) ^ 0x72;
  unsigned int v75 = v69 & 0xFFFF00FF | (((v71 ^ (16 * v71)) ^ 0x39) << 8);
  int v76 = *(unsigned __int8 *)(v70 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 13) ^ 0x5BLL)) ^ 0x72 ^ (v74 >> 4) ^ (v74 >> 1);
  int v77 = (((v67 ^ (16 * v67)) ^ 0xE9) << 8) | ((v76 - ((2 * v76) & 0x2E) + 23) << 16);
  LOBYTE(v72) = *(_BYTE *)(v70 + (*((unsigned __int8 *)&STACK[0x19C0] + a4 + 5) ^ 0xEDLL));
  int v78 = ((v72 ^ 0x72) >> 4) ^ ((v72 ^ 0x72) >> 1);
  uint64_t v324 = v70;
  uint64_t v326 = v65;
  uint64_t v327 = v64;
  LODWORD(v62) = v62 & 0xFF00FF00 | ((v61[11] ^ 0x3E) + *(_BYTE *)(v64 + (v61[11] ^ 0xD2LL)) - 85) | (((*(_BYTE *)(v70 + (v61[9] ^ 0x38LL)) ^ ((*(_BYTE *)(v70 + (v61[9] ^ 0x38LL)) ^ 0x72) >> 4) ^ ((*(_BYTE *)(v70 + (v61[9] ^ 0x38LL)) ^ 0x72) >> 1)) ^ 0xD9) << 16);
  uint64_t v325 = v66;
  unsigned int v79 = v73 & 0xFFFF00FF | (((*(unsigned __int8 *)(v65 + (*v61 ^ 0x81LL)) + (*v61 ^ 0xD0) - 123) ^ 0x3C) << 24) | (((*(_BYTE *)(v66 + (v61[2] ^ 0x22LL)) ^ (16 * *(_BYTE *)(v66 + (v61[2] ^ 0x22LL)))) ^ 0x17) << 8);
  LODWORD(STACK[0x428]) = (v77 & 0xFFFFFF00 | ((((v61[12] ^ 0x13) + *(unsigned __int8 *)(v65 + (v61[12] ^ 0x42LL)) - 123) ^ 0xE6) << 24) | (*(_BYTE *)(v64 + (v61[15] ^ 0x38LL)) + (v61[15] ^ 0xD4) - 85)) ^ 0x5DA22AEE;
  LODWORD(STACK[0x3D8]) = v79 ^ 0x29843879;
  LODWORD(STACK[0x300]) = (v75 & 0xFF00FFFF | ((v72 ^ 0x6C ^ (v78
                                                                                              - ((2 * v78) & 0x62)
                                                                                              + 49)) << 16)) ^ HIDWORD(a34);
  LODWORD(STACK[0x408]) = v62 ^ 0x18D17C97;
  v322 = *(_BYTE **)(v60 + 384);
  v323 = *(unsigned __int8 **)(v60 + 392);
  STACK[0x420] = 14LL;
  HIDWORD(v333) = (v63 ^ 0x619) + 301;
  uint64_t v80 = v66;
  LODWORD(v61) = *(unsigned __int8 *)(v66 + (BYTE4(v333) ^ 0x15u ^ v323[14]));
  STACK[0x320] = 4LL;
  uint64_t v81 = v323[4];
  unsigned int v82 = (((16 * (_DWORD)v61) ^ 0xFFFFFFA0) - ((2 * ((16 * (_DWORD)v61) ^ 0xFFFFFFA0)) & 0x60) + 58) ^ v61;
  LOBYTE(v61) = *(_BYTE *)(v65 + (v81 ^ 0xE6));
  STACK[0x460] = 15LL;
  int v83 = v323[15];
  unsigned __int8 v84 = ((_BYTE)v61 + (v81 ^ 0xB7) - 123) ^ 0xE5;
  if ((v83 & 0x20) != 0) {
    int v85 = -32;
  }
  else {
    int v85 = 32;
  }
  uint64_t v86 = (v85 + v83);
  int v87 = *(unsigned __int8 *)(v64 + (v86 ^ 0xDD));
  STACK[0x418] = 6LL;
  int v88 = *(unsigned __int8 *)(v66 + (v323[6] ^ 0x51LL));
  int v339 = v87 + (v86 ^ 0x31);
  STACK[0x328] = 12LL;
  STACK[0x2D0] = 0LL;
  HIDWORD(v89) = v88 ^ (((16 * v88) ^ 0xFFFFFFA0) - ((2 * ((16 * v88) ^ 0xFFFFFFA0)) & 0x60) + 58) ^ 0x3F;
  LODWORD(v89) = BYTE4(v89) & 0xF8;
  unint64_t v90 = ((v89 >> 3) | ((unint64_t)v84 << 13)) ^ 0x58F620A6;
  int v91 = (v90 >> 21) | ((_DWORD)v90 << 11);
  int v338 = *(unsigned __int8 *)(v65 + (v323[12] ^ 0xF7) - 2 * ((v323[12] ^ 0xF7) & 0xAEu) + 174) - (v323[12] ^ 0xF7);
  uint64_t v92 = *v323;
  STACK[0x3D0] = 3LL;
  uint64_t v93 = v323[3];
  int v94 = *(unsigned __int8 *)(v65 + (v92 ^ 0xD8)) + (v92 ^ 0x76) - 2 * (v92 ^ 0x76);
  STACK[0x400] = 8LL;
  int v336 = (v93 ^ 0xFFFFFFBB) + *(unsigned __int8 *)(v64 + (v93 ^ 0x57));
  char v95 = (v323[8] ^ 0xA7) + *(_BYTE *)(v65 + (v323[8] ^ 0xF6LL));
  STACK[0x3C0] = 7LL;
  LOBYTE(v93) = (v323[7] ^ 0xE9) + *(_BYTE *)(v64 + (v323[7] ^ 5LL)) - 85;
  STACK[0x298] = 13LL;
  int v96 = *(unsigned __int8 *)(v70 + (v323[13] ^ 0x12LL));
  unsigned int v97 = v96 ^ ((((v96 ^ 0x72u) >> 3) & 4 ^ v96 & 0xA4 | ((v96 ^ 0x72u) >> 3) & 0xFFFFFFFB ^ (v96 ^ 0x72) & 0x5A) >> 1);
  LOBYTE(v96) = *(_BYTE *)(v70 + (v323[5] ^ 0x9CLL));
  int v98 = ((v96 ^ 0x72) >> 4) ^ ((v96 ^ 0x72) >> 1);
  int v99 = v93 | ((v96 ^ 0xE6 ^ (v98 - ((2 * v98) & 0x62) + 49)) << 16);
  STACK[0x290] = 9LL;
  int v100 = *(unsigned __int8 *)(v70 + (v323[9] ^ 0x76LL));
  unsigned int v101 = (v100 ^ 0x72u) >> 3;
  char v102 = v100 & 8 | 0x37;
  int v103 = v100 ^ ((((v101 + v102 - 55) ^ (v100 ^ 0x72) & 0xF7) & 0xFE) >> 1);
  STACK[0x228] = 1LL;
  char v104 = *(_BYTE *)(v64 + (v323[11] ^ 0x12LL)) + (v323[11] ^ 0xFE);
  unsigned int v105 = *(_BYTE *)(v70 + (v323[1] ^ 0xCFLL)) ^ 0x72;
  int v106 = *(unsigned __int8 *)(v70 + (v323[1] ^ 0xCFLL)) ^ 0x72 ^ (v105 >> 4) ^ (v105 >> 1);
  STACK[0x258] = 10LL;
  char v107 = *(_BYTE *)(v80 + (v323[10] ^ 0xFBLL));
  uint64_t v108 = *(void *)(v59 + 8LL * (v63 - 769)) - 4LL;
  HIDWORD(v331) = (v107 ^ (16 * v107)) ^ 0x23;
  int v109 = *(_DWORD *)(v108 + 4LL * ((v107 ^ (16 * v107)) ^ 0xACu));
  HIDWORD(v110) = v109 ^ 0x7763;
  LODWORD(v110) = v109 ^ 0x55D90000;
  uint64_t v111 = *(void *)(v59 + 8LL * (v63 - 704)) - 8LL;
  LODWORD(v333) = v97;
  int v112 = *(_DWORD *)(v111 + 4LL * (v97 ^ 0x17));
  HIDWORD(v340) = v63;
  LODWORD(v331) = v94 - 124;
  uint64_t v113 = *(void *)(v59 + 8LL * (v63 - 734)) - 4LL;
  int v114 = (v110 >> 16) ^ *(_DWORD *)(v113 + 4LL * ((v94 - 124) ^ 0xF9u)) ^ (16 * (v112 ^ 0xB4C82AC9)
                                                                                          + 1452181747
                                                                                          - ((32 * (v112 ^ 0xB4C82AC9)) & 0xAD1D11E0));
  unsigned int v115 = v112 ^ (v114 - 905743237 - ((2 * v114) & 0x9406E8F6));
  HIDWORD(v330) = v99 ^ v91;
  unsigned int v116 = v99 ^ v91 ^ 0xDD03A24B;
  unsigned int v117 = (v99 ^ v91) ^ 0x78;
  uint64_t v118 = *(void *)(v59 + 8LL * (v63 ^ 0x394)) - 8LL;
  LODWORD(v334) = v82;
  int v119 = *(_DWORD *)(v108 + 4LL * (v82 ^ 0x71u));
  unsigned int v120 = *(_DWORD *)(v118 + 4LL * v117) ^ v115;
  HIDWORD(v110) = v119 ^ 0x7763;
  LODWORD(v110) = v119 ^ 0x55D90000;
  unint64_t v332 = __PAIR64__(v103, v106);
  unsigned int v121 = *(_DWORD *)(v111 + 4LL * (v106 ^ 0xBFu)) ^ 0xB4C82AC9;
  int v122 = (v110 >> 16) ^ (16 * v121 + 1452181747 - ((32 * v121) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * HIBYTE(v116));
  HIDWORD(v329) = (v104 - 85);
  unsigned int v123 = *(_DWORD *)(v118 + 4LL * (HIDWORD(v329) ^ 0xB9u)) ^ v121 ^ (v122 - 905743237 - ((2 * v122) & 0x9406E8F6));
  unsigned int v124 = *(_DWORD *)(v111 + 4LL * BYTE2(v116)) ^ 0xB4C82AC9;
  unsigned int v125 = *(unsigned __int8 *)(v80 + (v323[2] ^ 0x26LL)) ^ 0xFFFFFF82;
  LODWORD(v329) = v125 ^ (16 * v125);
  int v126 = *(_DWORD *)(v108 + 4LL * (v329 ^ 0xFBu));
  HIDWORD(v110) = v126 ^ 0x7763;
  LODWORD(v110) = v126 ^ 0x55D90000;
  HIDWORD(v328) = (v95 - ((2 * v95 + 10) & 0x4E) - 84);
  int v127 = (v110 >> 16) ^ *(_DWORD *)(v113 + 4LL * (HIDWORD(v328) ^ 0x40u)) ^ (16 * v124
                                                                           + 1452181747
                                                                           - ((32 * v124) & 0xAD1D11E0));
  LODWORD(v330) = v339 - 85;
  unsigned int v128 = *(_DWORD *)(v118 + 4LL * ((v339 - 85) ^ 0xEBu)) ^ v124 ^ (v127
                                                                                  - 905743237
                                                                                  - ((2 * v127) & 0x9406E8F6));
  unsigned int v129 = *(_DWORD *)(v111 + 4LL * (v103 ^ 0xEu)) ^ 0xB4C82AC9;
  int v130 = *(_DWORD *)(v108 + 4LL * (BYTE1(v91) ^ 0x31u));
  HIDWORD(v110) = v130 ^ 0x7763;
  LODWORD(v110) = v130 ^ 0x55D90000;
  int v131 = (v110 >> 16) ^ *(_DWORD *)(v113 + 4LL * ((v338 - 124) ^ 0xF7u)) ^ (16 * v129
                                                                                           + 1452181747
                                                                                           - ((32 * v129) & 0xAD1D11E0));
  HIDWORD(a20) = v336 - 85;
  LODWORD(v328) = v338 - 124;
  unsigned int v132 = *(_DWORD *)(v118 + 4LL * ((v336 - 85) ^ 0x33u)) ^ v129 ^ (v131
                                                                                  - 905743237
                                                                                  - ((2 * v131) & 0x9406E8F6));
  unsigned int v133 = *(_DWORD *)(v111 + 4LL * (BYTE2(v132) ^ 0xBBu)) ^ 0xB4C82AC9;
  int v134 = *(_DWORD *)(v108 + 4LL * (BYTE1(v128) ^ 0xF4u));
  HIDWORD(v110) = v134 ^ 0x7763;
  LODWORD(v110) = v134 ^ 0x55D90000;
  BYTE1(v134) = BYTE1(v123) ^ 0xAD;
  unsigned int v135 = v133 ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v120) ^ 0xE3)) ^ *(_DWORD *)(v118
                                                                            + 4LL * (v123 ^ 0xDBu)) ^ (16 * v133 + 1452181747 - ((32 * v133) & 0xAD1D11E0)) ^ (v110 >> 16);
  int v136 = *(_DWORD *)(v111 + 4LL * (BYTE2(v120) ^ 0x24u));
  int v137 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v132 ^ 0x22E) >> 8));
  HIDWORD(v110) = v137 ^ 0x7763;
  LODWORD(v110) = v137 ^ 0x55D90000;
  int v138 = (16 * (v136 ^ 0xB4C82AC9) + 1452181747 - ((32 * (v136 ^ 0xB4C82AC9)) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * ((v123 ^ 0xF15ADDB) >> 24)) ^ (v110 >> 16);
  unsigned int v139 = v138 - 905743237 - ((2 * v138) & 0x9406E8F6);
  int v140 = *(_DWORD *)(v118 + 4LL * (v128 ^ 0x80u)) ^ v136;
  unsigned int v141 = *(_DWORD *)(v111 + 4LL * (BYTE2(v123) ^ 0xD6u)) ^ 0xB4C82AC9;
  unsigned int v142 = (16 * v141 + 1452181747 - ((32 * v141) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v128) ^ 0x19));
  int v143 = *(_DWORD *)(v108 + 4LL * (BYTE1(v120) ^ 0xCCu));
  HIDWORD(v110) = v143 ^ 0x7763;
  LODWORD(v110) = v143 ^ 0x55D90000;
  unsigned int v144 = *(_DWORD *)(v118 + 4LL * (v132 ^ 0x2Eu)) ^ v141 ^ (v110 >> 16) ^ (v142
                                                                                          - 905743237
                                                                                          - ((2 * v142) & 0x9406E8F6));
  int v145 = *(_DWORD *)(v111 + 4LL * (BYTE2(v128) ^ 0x32u));
  int v146 = *(_DWORD *)(v108 + 4LL * BYTE1(v134));
  HIDWORD(v110) = v146 ^ 0x7763;
  LODWORD(v110) = v146 ^ 0x55D90000;
  int v147 = (v110 >> 16) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v132) ^ 0xBD)) ^ (16 * (v145 ^ 0xB4C82AC9)
                                                                         + 1452181747
                                                                         - ((32 * (v145 ^ 0xB4C82AC9)) & 0xAD1D11E0));
  unsigned int v148 = v145 ^ *(_DWORD *)(v118 + 4LL * (v120 ^ 0x69u)) ^ 0xC501FC0D ^ (v147
                                                                                        - 905743237
                                                                                        - ((2 * v147) & 0x9406E8F6));
  unsigned int v149 = v148
       - ((2 * v148) & 0x5F186BF6)
       + 797718011
       - ((2 * (v148 - ((2 * v148) & 0x5F186BF6) + 797718011)) & 0xFCE7E61C)
       - 25955570;
  int v150 = *(_DWORD *)(v111 + 4LL * (BYTE2(v149) ^ 0xB0u));
  BYTE2(v132) = BYTE2(v144) ^ 0xEB;
  int v151 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v144 ^ 0xDFF9) >> 8));
  unsigned int v152 = (16 * (v150 ^ 0xB4C82AC9) + 1452181747 - ((32 * (v150 ^ 0xB4C82AC9)) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v135) ^ 0x5C)) ^ (((v151 ^ 0x55D97763u) >> (v135 & 0x10 ^ 0x10) >> (v135 & 0x10)) + ((v151 << 16) ^ 0x77630000));
  unsigned int v153 = *(_DWORD *)(v118 + 4LL * ((v140 ^ v139) ^ 0x10u)) ^ v150 ^ (v152
                                                                                    - 905743236
                                                                                    + ~((2 * v152) & 0x9406E8F6));
  LOWORD(v150) = v135 ^ 0xA05B;
  unsigned int v154 = *(_DWORD *)(v111 + 4LL * ((v135 ^ 0xB559A05B) >> 16)) ^ 0xB4C82AC9;
  unsigned int v155 = (16 * v154 + 1452181747 - ((32 * v154) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * ((v140 ^ ~v139) >> 24));
  int v156 = *(_DWORD *)(v108 + 4LL * (BYTE1(v149) ^ 0x60u));
  HIDWORD(v110) = v156 ^ 0x7763;
  LODWORD(v110) = v156 ^ 0x55D90000;
  unsigned int v157 = *(_DWORD *)(v118 + 4LL * (v144 ^ 0xF9u)) ^ v154 ^ ((v155 ^ (v110 >> 16))
                                                                           - 905743237
                                                                           - ((2 * (v155 ^ (v110 >> 16))) & 0x9406E8F6));
  int v158 = *(_DWORD *)(v113 + 4LL * (HIBYTE(v144) ^ 5));
  HIDWORD(v110) = v158 ^ 0xF3;
  LODWORD(v110) = v158 ^ 0x568E8800;
  unsigned int v159 = *(_DWORD *)(v111 + 4LL * (((v140 ^ v139) >> 16) ^ 0xFDu)) ^ 0xB4C82AC9;
  unsigned int v160 = (((v110 >> 10) ^ 0x25EB099C) << 10) ^ (16 * v159) ^ (((v110 >> 10) ^ 0x25EB099C) >> 22);
  int v161 = *(_DWORD *)(v108 + 4LL * BYTE1(v150));
  HIDWORD(v110) = v161 ^ 0x7763;
  LODWORD(v110) = v161 ^ 0x55D90000;
  int v162 = *(_DWORD *)(v118
                   + 4LL
                   * ((v148
                                      - ((2 * v148) & 0xF6)
                                      - 5
                                      - ((2 * (v148 - ((2 * v148) & 0xF6) - 5)) & 0x1C)
                                      + 14) ^ 0x3Du)) ^ v159 ^ (v110 >> 16) ^ (v160
                                                                             - 905743237
                                                                             - ((2 * v160) & 0x9406E8F6));
  int v163 = *(_DWORD *)(v108 + 4LL * (((unsigned __int16)(v140 ^ v139) >> 8) ^ 0xE7u));
  HIDWORD(v110) = v163 ^ 0x7763;
  LODWORD(v110) = v163 ^ 0x55D90000;
  unsigned int v164 = *(_DWORD *)(v111 + 4LL * BYTE2(v132)) ^ 0xB4C82AC9;
  int v165 = (v110 >> 16) ^ (16 * v164 + 1452181747 - ((32 * v164) & 0xAD1D11E0)) ^ *(_DWORD *)(v113
                                                                                          + 4LL * (HIBYTE(v149) ^ 0x17));
  int v166 = *(_DWORD *)(v118 + 4LL * (v150 ^ 0x33u)) ^ v164;
  unsigned int v167 = v162 ^ 0xF1F7E4A6;
  int v168 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v162 ^ 0xE4A6) >> 8));
  unsigned int v169 = v166 ^ (v165 - 905743237 - ((2 * v165) & 0x9406E8F6));
  HIDWORD(v110) = v168 ^ 0x7763;
  LODWORD(v110) = v168 ^ 0x55D90000;
  unsigned int v170 = *(_DWORD *)(v111 + 4LL * (BYTE2(v169) ^ 0x62u)) ^ 0xB4C82AC9;
  unsigned int v171 = (16 * v170 + 1452181747 - ((32 * v170) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v153) ^ 0x69));
  unsigned int v172 = *(_DWORD *)(v118 + 4LL * (v157 ^ 0x68u)) ^ v170 ^ (v110 >> 16) ^ (v171
                                                                                          - 905743237
                                                                                          - 2
                                                                                          * (v171 & 0x4A03747F ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v153) ^ 0x69)) & 4));
  unsigned int v173 = *(_DWORD *)(v111 + 4LL * (BYTE2(v153) ^ 0x93u)) ^ 0xB4C82AC9;
  int v174 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v169 ^ 0x2957) >> 8));
  HIDWORD(v110) = v174 ^ 0x7763;
  LODWORD(v110) = v174 ^ 0x55D90000;
  int v175 = (16 * v173 + 1452181747 - ((32 * v173) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v157) ^ 0xCE)) ^ (v110 >> 16);
  unsigned int v176 = *(_DWORD *)(v118 + 4LL * (v162 ^ 0x15u)) ^ v173 ^ (v175 - 905743237 - ((2 * v175) & 0x9406E8F6));
  unsigned int v177 = *(_DWORD *)(v111 + 4LL * (BYTE2(v157) ^ 0x60u)) ^ 0xB4C82AC9;
  int v178 = *(_DWORD *)(v108 + 4LL * (BYTE1(v153) ^ 0xB1u));
  HIDWORD(v110) = v178 ^ 0x7763;
  LODWORD(v110) = v178 ^ 0x55D90000;
  int v179 = (16 * v177 + 1452181747 - ((32 * v177) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * HIBYTE(v167)) ^ (v110 >> 16);
  unsigned int v180 = *(_DWORD *)(v118 + 4LL * (v169 ^ 0x57u)) ^ v177 ^ (v179 - 905743237 - ((2 * v179) & 0x9406E8F6));
  if ((v157 & 0x1000) != 0) {
    int v181 = -16;
  }
  else {
    int v181 = 16;
  }
  int v182 = (BYTE1(v157) ^ 0xC) + v181;
  unsigned int v183 = *(_DWORD *)(v111 + 4LL * BYTE2(v167)) ^ 0xB4C82AC9;
  unsigned int v184 = *(_DWORD *)(v108 + 4LL * (v182 ^ 0x83u));
  unsigned int v185 = *(_DWORD *)(v113 + 4LL * (HIBYTE(v169) ^ 0xA1)) ^ HIWORD(v184) ^ (v184 << 16) ^ (16 * v183
                                                                                        + 1452181747
                                                                                        - ((32 * v183) & 0xAD1D11E0)) ^ 0x776355D9;
  unsigned int v186 = *(_DWORD *)(v118 + 4LL * (v153 ^ 0xAAu)) ^ v183 ^ (v185 - 905743237 - ((2 * v185) & 0x9406E8F6));
  unsigned int v187 = v186 ^ 0xEFBC3B44;
  unsigned int v188 = *(_DWORD *)(v111 + 4LL * ((v186 ^ 0xEFBC3B44) >> 16)) ^ 0xB4C82AC9;
  int v189 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v180 ^ 0x8D48) >> 8));
  HIDWORD(v190) = v189 ^ 0x7763;
  LODWORD(v190) = v189 ^ 0x55D90000;
  int v191 = (v190 >> 16) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v172) ^ 0xCC)) ^ (16 * v188
                                                                         + 1452181747
                                                                         - ((32 * v188) & 0xAD1D11E0));
  unsigned int v192 = *(_DWORD *)(v118 + 4LL * (v176 ^ 0xA9u)) ^ v188 ^ (v191 - 905743237 - ((2 * v191) & 0x9406E8F6));
  LOWORD(v188) = v172 ^ 0xD583;
  unsigned int v193 = *(_DWORD *)(v111 + 4LL * (((v172 ^ 0x255FD583) >> 16) ^ 0xC3u)) ^ 0xB4C82AC9;
  int v194 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v186 ^ 0x3B44) >> 8));
  HIDWORD(v190) = v194 ^ 0x7763;
  LODWORD(v190) = v194 ^ 0x55D90000;
  int v195 = (v190 >> 16) ^ *(_DWORD *)(v113 + 4LL * HIBYTE(v176)) ^ (16 * v193 + 1452181747 - ((32 * v193) & 0xAD1D11E0));
  unsigned int v196 = *(_DWORD *)(v118 + 4LL * (v180 ^ 0x48u)) ^ v193 ^ (v195 - 905743237 - ((2 * v195) & 0x9406E8F6));
  unsigned int v197 = *(_DWORD *)(v111 + 4LL * ((v176 ^ 0xE93411A9) >> 16)) ^ 0xB4C82AC9;
  int v198 = *(_DWORD *)(v108 + 4LL * BYTE1(v188));
  HIDWORD(v190) = v198 ^ 0x7763;
  LODWORD(v190) = v198 ^ 0x55D90000;
  int v199 = (16 * v197 + 1452181747 - ((32 * v197) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * ((v180 ^ 0x807D8D48) >> 24)) ^ (v190 >> 16);
  unsigned int v200 = *(_DWORD *)(v118 + 4LL * (v186 ^ 0x77u)) ^ v197 ^ (v199 - 905743237 - ((2 * v199) & 0x9406E8F6));
  unsigned int v201 = *(_DWORD *)(v111 + 4LL * (BYTE2(v180) ^ 0xBEu)) ^ 0xB4C82AC9;
  int v202 = *(_DWORD *)(v108 + 4LL * (BYTE1(v176) ^ 0x82u));
  HIDWORD(v190) = v202 ^ 0x7763;
  LODWORD(v190) = v202 ^ 0x55D90000;
  int v203 = (v190 >> 16) ^ *(_DWORD *)(v113 + 4LL * HIBYTE(v187)) ^ (16 * v201 + 1452181747 - ((32 * v201) & 0xAD1D11E0));
  unsigned int v204 = *(_DWORD *)(v118 + 4LL * v188) ^ v201 ^ (v203 - 905743237 - ((2 * v203) & 0x9406E8F6));
  unsigned int v205 = *(_DWORD *)(v111 + 4LL * ((v204 ^ 0x950DA39D) >> 16)) ^ 0xB4C82AC9;
  unsigned int v206 = (16 * v205 + 1452181747 - ((32 * v205) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * ((v192 ^ 0x11521BCA) >> 24));
  int v207 = *(_DWORD *)(v108 + 4LL * (BYTE1(v200) ^ 0x89u));
  HIDWORD(v190) = v207 ^ 0x7763;
  LODWORD(v190) = v207 ^ 0x55D90000;
  unsigned int v208 = v206 - 905743237 - ((2 * v206) & 0x9406E8F6);
  BYTE1(v206) = BYTE1(v196) ^ 0xD1;
  int v209 = v205 ^ *(_DWORD *)(v118 + 4LL * (v196 ^ 0x88u)) ^ (v190 >> 16) ^ v208;
  int v210 = *(_DWORD *)(v111 + 4LL * ((v192 ^ 0x11521BCA) >> 16));
  int v211 = *(_DWORD *)(v108 + 4LL * (BYTE1(v204) ^ 0x30u));
  HIDWORD(v190) = v211 ^ 0x7763;
  LODWORD(v190) = v211 ^ 0x55D90000;
  unsigned int v212 = (v209 ^ 0x71C9D6C4) - 2 * ((v209 ^ 0x71C9D6C4) & 0x3A5692AD ^ v209 & 9);
  int v213 = (16 * (v210 ^ 0xB4C82AC9) + 1452181747 - ((32 * (v210 ^ 0xB4C82AC9)) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v196) ^ 0xDF)) ^ (v190 >> 16);
  v200 ^= 0x7A851A70u;
  unsigned int v214 = *(_DWORD *)(v118 + 4LL * (v200 ^ 0x33u)) ^ v210 ^ (v213 - 905743237 - ((2 * v213) & 0x9406E8F6));
  unsigned int v215 = *(_DWORD *)(v111 + 4LL * (BYTE2(v196) ^ 0xA7u)) ^ 0xB4C82AC9;
  int v216 = *(_DWORD *)(v108 + 4LL * (BYTE1(v192) ^ 0x88u));
  HIDWORD(v190) = v216 ^ 0x7763;
  LODWORD(v190) = v216 ^ 0x55D90000;
  int v217 = (16 * v215 + 1452181747 - ((32 * v215) & 0xAD1D11E0)) ^ (v190 >> 16) ^ *(_DWORD *)(v113
                                                                                          + 4LL
                                                                                          * ((HIBYTE(v200) ^ -HIBYTE(v200) ^ ((HIBYTE(v200) ^ 0xFFFFFF16) + 234))
                                                                                           + 233));
  unsigned int v218 = *(_DWORD *)(v118 + 4LL * (v204 ^ 0x9Du)) ^ v215 ^ (v217 - 905743237 - ((2 * v217) & 0x9406E8F6));
  int v219 = *(_DWORD *)(v111 + 4LL * BYTE2(v200));
  int v220 = *(_DWORD *)(v108 + 4LL * BYTE1(v206));
  HIDWORD(v190) = v220 ^ 0x7763;
  LODWORD(v190) = v220 ^ 0x55D90000;
  int v221 = (v190 >> 16) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v204) ^ 0x7C)) ^ (16 * (v219 ^ 0xB4C82AC9)
                                                                         + 1452181747
                                                                         - ((32 * (v219 ^ 0xB4C82AC9)) & 0xAD1D11E0));
  unsigned int v222 = *(_DWORD *)(v118 + 4LL * (v192 ^ 0xF9u)) ^ v219 ^ (v221 - 905743237 - ((2 * v221) & 0x9406E8F6));
  int v223 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v218 ^ 0xDE69) >> 8));
  HIDWORD(v190) = v223 ^ 0x7763;
  LODWORD(v190) = v223 ^ 0x55D90000;
  int v224 = *(_DWORD *)(v111 + 4LL * (BYTE2(v222) ^ 0x4Fu));
  v212 -= 1168731484;
  int v225 = (v190 >> 16) ^ (16 * (v224 ^ 0xB4C82AC9) + 1452181747 - ((32 * (v224 ^ 0xB4C82AC9)) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v212) ^ 0xD3));
  unsigned int v226 = *(_DWORD *)(v118 + 4LL * (v214 ^ 0x1Au)) ^ v224 ^ (v225 - 905743237 - ((2 * v225) & 0x9406E8F6));
  int v227 = *(_DWORD *)(v108 + 4LL * (BYTE1(v222) ^ 0x15u));
  HIDWORD(v190) = v227 ^ 0x7763;
  LODWORD(v190) = v227 ^ 0x55D90000;
  unsigned int v228 = *(_DWORD *)(v111 + 4LL * (BYTE2(v212) ^ 0x3Cu)) ^ 0xB4C82AC9;
  unsigned int v229 = v228 ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v214) ^ 0x69)) ^ *(_DWORD *)(v118
                                                                            + 4LL * (v218 ^ 0x69u)) ^ ((v190 >> 16) - 905743237 - ((2 * (v190 >> 16)) & 0x9406E8F6)) ^ (16 * v228 + 1452181747 - ((32 * v228) & 0xAD1D11E0));
  unsigned int v230 = *(_DWORD *)(v111 + 4LL * (BYTE2(v214) ^ 0x32u)) ^ 0xB4C82AC9;
  int v231 = *(_DWORD *)(v108 + 4LL * (BYTE1(v212) ^ 0xF9u));
  HIDWORD(v190) = v231 ^ 0x7763;
  LODWORD(v190) = v231 ^ 0x55D90000;
  int v232 = (16 * v230 + 1452181747 - ((32 * v230) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * ((v218 ^ 0x5FEEDE69) >> 24)) ^ (v190 >> 16);
  unsigned int v233 = *(_DWORD *)(v118
                   + 4LL
  unsigned int v234 = *(_DWORD *)(v111 + 4LL * (BYTE2(v218) ^ 0x2Du)) ^ 0xB4C82AC9;
  int v235 = *(_DWORD *)(v108 + 4LL * (BYTE1(v214) ^ 0xF5u));
  HIDWORD(v190) = v235 ^ 0x7763;
  LODWORD(v190) = v235 ^ 0x55D90000;
  int v236 = (v190 >> 16) ^ (16 * v234 + 1452181747 - ((32 * v234) & 0xAD1D11E0)) ^ *(_DWORD *)(v113
                                                                                          + 4LL
                                                                                          * ((HIBYTE(v222) ^ 0xA1) & 0x90 ^ 0x86u ^ (~(2 * (HIBYTE(v222) ^ 0xA1 | 0x90)) + (HIBYTE(v222) ^ 0xA1 | 0x90))));
  unsigned int v237 = *(_DWORD *)(v118 + 4LL * ~(_BYTE)v212) ^ v234 ^ (v236 - 905743236 + ~((2 * v236) & 0x9406E8F6));
  unsigned int v238 = *(_DWORD *)(v111 + 4LL * ((v237 ^ 0x59A5F4B7) >> 16)) ^ 0xB4C82AC9;
  int v239 = *(_DWORD *)(v108 + 4LL * ((unsigned __int16)(v233 ^ 0x872B) >> 8));
  HIDWORD(v190) = v239 ^ 0x7763;
  LODWORD(v190) = v239 ^ 0x55D90000;
  int v240 = (16 * v238 + 1452181747 - ((32 * v238) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v226) ^ 0x66)) ^ (v190 >> 16);
  unsigned int v241 = *(_DWORD *)(v118 + 4LL * (v229 ^ 0xEEu)) ^ v238 ^ (v240 - 905743237 - ((2 * v240) & 0x9406E8F6));
  unsigned int v242 = *(_DWORD *)(v111 + 4LL * (BYTE2(v226) ^ 0xEDu)) ^ 0xB4C82AC9;
  int v243 = *(_DWORD *)(v108 + 4LL * (BYTE1(v237) ^ 0x67u));
  HIDWORD(v190) = v243 ^ 0x7763;
  LODWORD(v190) = v243 ^ 0x55D90000;
  int v244 = v242 ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v229) ^ 0xD6)) ^ *(_DWORD *)(v118
                                                                            + 4LL * (v233 ^ 0x18u)) ^ (16 * v242 + 1452181747 - ((32 * v242) & 0xAD1D11E0)) ^ ((v190 >> 16) - 905743237 - ((2 * (v190 >> 16)) & 0x9406E8F6));
  unsigned int v245 = *(_DWORD *)(v111 + 4LL * (BYTE2(v229) ^ 0x56u)) ^ 0xB4C82AC9;
  int v246 = *(_DWORD *)(v108 + 4LL * (BYTE1(v226) ^ 0x91u));
  HIDWORD(v190) = v246 ^ 0x7763;
  LODWORD(v190) = v246 ^ 0x55D90000;
  int v247 = *(_DWORD *)(v113 + 4LL * ((v233 ^ 0x911B872B) >> 24)) ^ v245 ^ 0x6D41727E ^ (16 * v245
                                                                                    + 1452181747
                                                                                    - ((32 * v245) & 0xAD1D11E0)) ^ (v190 >> 16);
  unsigned int v248 = *(_DWORD *)(v111 + 4LL * (BYTE2(v233) ^ 0xD8u)) ^ 0xB4C82AC9;
  int v249 = *(_DWORD *)(v108 + 4LL * (BYTE1(v229) ^ 0xE4u));
  HIDWORD(v190) = v249 ^ 0x7763;
  LODWORD(v190) = v249 ^ 0x55D90000;
  int v250 = (v190 >> 16) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v237) ^ 0xB0)) ^ (16 * v248
                                                                         + 1452181747
                                                                         - ((32 * v248) & 0xAD1D11E0));
  unsigned int v251 = *(_DWORD *)(v118 + 4LL * (v226 ^ 0x6Fu)) ^ v248 ^ (v250 - 905743237 - ((2 * v250) & 0x9406E8F6));
  int v252 = *(_DWORD *)(v108
                   + 4LL
                   * (((unsigned __int16)(*(_WORD *)(v118 + 4LL * (v226 ^ 0x6Fu)) ^ v248 ^ (v250 + 29819 - ((2 * v250) & 0xE8F6))) >> 8) ^ 0x66u));
  HIDWORD(v190) = v252 ^ 0x7763;
  LODWORD(v190) = v252 ^ 0x55D90000;
  int v253 = v190 >> 16;
  HIDWORD(v190) = *(_DWORD *)(v118 + 4LL * (v237 ^ 0xB7u)) ^ 0xD68BD0C1;
  LODWORD(v190) = HIDWORD(v190);
  int v254 = v244 ^ 0x177CD9D9;
  unsigned int v255 = *(_DWORD *)(v111 + 4LL * (BYTE2(v241) ^ 0x74u)) ^ 0xB4C82AC9;
  unsigned int v256 = *(_DWORD *)(v113 + 4LL * ((v244 ^ 0x177CD9D9u) >> 24)) ^ 0x6D41727E ^ v255 ^ (16 * v255
                                                                                     + 1452181747
                                                                                     - ((32 * v255) & 0xAD1D11E0)) ^ v253;
  unsigned int v257 = (v256 & 0x200 ^ 0xE7FEFFBE) + 2 * (v256 & 0x200);
  LODWORD(v190) = (v190 >> 21) ^ __ROR4__(v247, 21) ^ 0x549BF9D9;
  HIDWORD(v190) = v190;
  int v258 = v190 >> 11;
  int v259 = *(_DWORD *)(v118 + 4LL * ((v190 >> 11) ^ 0xEFu));
  BOOL v260 = ((v257 + 402718786) & (v259 ^ 0xCA03747B)) == 0;
  unsigned int v261 = *(_DWORD *)(v111 + 4LL * (BYTE2(v251) ^ 0x72u)) ^ 0xB4C82AC9;
  int v262 = *(_DWORD *)(v108 + 4LL * (BYTE1(v258) ^ 0xA0u));
  HIDWORD(v190) = v262 ^ 0x7763;
  LODWORD(v190) = v262 ^ 0x55D90000;
  int v263 = (v190 >> 16) ^ *(_DWORD *)(v113 + 4LL * ((v241 ^ 0xD4B73D47) >> 24)) ^ (16 * v261
                                                                               + 1452181747
                                                                               - ((32 * v261) & 0xAD1D11E0));
  unsigned int v264 = *(_DWORD *)(v118 + 4LL * (v244 ^ 0xEAu)) ^ v261 ^ (v263 - 905743237 - ((2 * v263) & 0x9406E8F6));
  unsigned int v265 = v257 + 1003347924;
  unsigned int v266 = 197910352 - v257;
  if (v260) {
    unsigned int v266 = v265;
  }
  unsigned int v267 = ((v259 ^ 0xD68BD0C1) - 600629138 + v266) ^ v256 & 0xFFFFFDFF;
  unsigned int v268 = *(_DWORD *)(v111 + 4LL * BYTE2(v254)) ^ 0xB4C82AC9;
  int v269 = *(_DWORD *)(v108 + 4LL * (BYTE1(v241) ^ 0xAEu));
  HIDWORD(v270) = v269 ^ 0x7763;
  LODWORD(v270) = v269 ^ 0x55D90000;
  unsigned int v271 = (16 * v268 + 1452181747 - ((32 * v268) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * ((v258 ^ 0x1EA133EFu) >> 24));
  unsigned int v272 = *(_DWORD *)(v118 + 4LL * (v251 ^ 0xDu)) ^ v268 ^ (v270 >> 16) ^ (v271
                                                                                         - 905743237
                                                                                         - 2
                                                                                         * (v271 & 0x4A03747F ^ *(_DWORD *)(v113 + 4LL * ((v258 ^ 0x1EA133EFu) >> 24)) & 4));
  unsigned int v273 = *(_DWORD *)(v111 + 4LL * (BYTE2(v258) ^ 0x62u)) ^ 0xB4C82AC9;
  int v274 = *(_DWORD *)(v108 + 4LL * BYTE1(v254));
  HIDWORD(v270) = v274 ^ 0x7763;
  LODWORD(v270) = v274 ^ 0x55D90000;
  int v275 = (16 * v273 + 1452181747 - ((32 * v273) & 0xAD1D11E0)) ^ *(_DWORD *)(v113 + 4LL * (HIBYTE(v251) ^ 0x32)) ^ (v270 >> 16);
  unsigned int v276 = *(_DWORD *)(v118 + 4LL * (v241 ^ 0x74u)) ^ v273 ^ (v275 - 905743237 - ((2 * v275) & 0x9406E8F6));
  v277 = (char *)*(&off_1004EDED0 + v63 - 726) - 4;
  v278 = (char *)*(&off_1004EDED0 + v63 - 686) - 12;
  v279 = (char *)*(&off_1004EDED0 + v63 - 677) - 12;
  unsigned int v280 = *(_DWORD *)&v278[4 * (BYTE2(v264) ^ 0x99)] ^ 0x858E78B5;
  unsigned int v281 = v280 ^ (*(_DWORD *)&v277[4 * (((v267 ^ 0xF137909F) >> 24) ^ 0xB4)]
               + (((v267 ^ 0xF137909F) >> 24) ^ 0x9FD52929)
               - 1891546004) ^ (v280 >> 2) ^ *(_DWORD *)&v279[4 * (v272 ^ 0x79)] ^ (v280 >> 4);
  v282 = (char *)*(&off_1004EDED0 + (v63 ^ 0x32D)) - 8;
  int v283 = *(_DWORD *)&v282[4 * ((unsigned __int16)(v276 ^ 0x7C9C) >> 8)] ^ 0x44850E66;
  unsigned int v284 = ((v272 ^ 0x7B)
        - 162178079
        + ((2 * (((v272 ^ 0x7B) + 112) & 0x17E ^ (v272 ^ 0xBC37B | 0x7FFFFFF1))) ^ 0xF0C3001D)) ^ v283 ^ (1515496080 * v283);
  unsigned int v285 = HIBYTE(v272);
  unsigned int v286 = v264 ^ 0x6792B6A6;
  int v287 = *(_DWORD *)&v277[4 * (((v264 ^ 0x6792B6A6) >> 24) ^ 0xB4)];
  LODWORD(v335) = *(_DWORD *)&v277[4 * (HIBYTE(v272) ^ 0xB4)];
  LODWORD(v340) = (v276 ^ 0x250E7C9C) >> 24;
  HIDWORD(v337) = *(_DWORD *)&v277[4 * (v340 ^ 0xB4)];
  int v288 = *(_DWORD *)&v278[4 * (BYTE2(v276) ^ 5)];
  int v289 = *(_DWORD *)&v278[4 * ((v267 ^ 0xF137909F) >> 16)];
  HIDWORD(v335) = *(_DWORD *)&v278[4 * ((v272 ^ 0xBC37B) >> 16)];
  int v290 = *(_DWORD *)&v282[4 * ((unsigned __int16)(v272 ^ 0xC37B) >> 8)];
  HIDWORD(v334) = *(_DWORD *)&v282[4 * ((unsigned __int16)(v264 ^ 0xB6A6) >> 8)];
  int v291 = *(_DWORD *)&v282[4 * (BYTE1(v267) ^ 0x5E)];
  int v292 = *(_DWORD *)&v279[4 * (v267 ^ 0x9D)];
  int v293 = *(_DWORD *)&v279[4 * (v276 ^ 0x9E)];
  LODWORD(v337) = *(_DWORD *)&v279[4 * (v264 ^ 0xA4)];
  unsigned int v294 = ((v281 ^ v284) - 1180827501 - ((2 * (v281 ^ v284)) & 0x733C0126)) ^ LODWORD(STACK[0x300]);
  uint64_t v295 = (uint64_t)*(&off_1004EDED0 + v63 - 849);
  v322[5] = *(_BYTE *)(v295 + (((v294 ^ 0x5244C6B3) >> 16) ^ 0x5ELL)) ^ ((v294 ^ 0x5244C6B3) >> 16) ^ 0x8A ^ ((((v294 ^ 0x5244C6B3) >> 16) ^ 0x8A) - ((2 * (((v294 ^ 0x5244C6B3) >> 16) ^ 0x8A) - 18) & 0xF7) - 14) ^ 0xB9;
  unsigned int v296 = v288 ^ 0x858E78B5 ^ ((HIBYTE(v286) ^ 0x9FD52929) - 1891546004 + v287) ^ ((v288 ^ 0x858E78B5) >> 2) ^ ((v288 ^ 0x858E78B5) >> 4) ^ v290 ^ 0x44850E66 ^ v292 ^ (1515496080 * (v290 ^ 0x44850E66)) ^ ((v267 ^ 0x9F) - 162178079 + ((2 * (((v267 ^ 0x9F) + 112) & 0x17E ^ (v267 ^ 0xF137909F | 0x7FFFFFF1))) ^ 0xF0C3001D));
  uint64_t v297 = (v296 + 696531065 - ((2 * v296) & 0x53087184) + 73) ^ LODWORD(STACK[0x3D8]);
  unsigned int v298 = v297 ^ 0x22A932A6;
  uint64_t v299 = (BYTE1(v298) | 0x88) ^ (v298 >> 8) & 0x88;
  v300 = (char *)*(&off_1004EDED0 + (v63 ^ 0x3E4)) - 12;
  v322[2] = (((unsigned __int16)(v297 ^ 0x32A6) >> 8) | 0x88) ^ ((unsigned __int16)(v297 ^ 0x32A6) >> 8) & 0x88 ^ 0x35 ^ ((v300[v299 ^ 0x14] ^ 3) - ((2 * v300[v299 ^ 0x14]) & 0x20) - 112);
  v301 = (char *)*(&off_1004EDED0 + v63 - 844) - 4;
  LODWORD(v299) = v301[HIBYTE(v294) ^ 0xEFLL];
  HIDWORD(v270) = v299 ^ 0x1B;
  LODWORD(v270) = (v299 ^ 0x40) << 24;
  v322[STACK[0x320]] = (v270 >> 29) ^ 0x83;
  int v302 = v289 ^ 0x858E78B5 ^ ((v285 ^ 0x9FD52929) - 1891546004 + v335) ^ ((v289 ^ 0x858E78B5) >> 2) ^ ((v289 ^ 0x858E78B5) >> 4);
  int v303 = v302 & 0x1000000 | 0x287B5FB3;
  if ((v302 & 0x1000000 & ~v293) != 0) {
    int v303 = 1358348134 - v303;
  }
  unsigned int v304 = v302 & 0xFEFFFFFF ^ (1515496080 * (HIDWORD(v334) ^ 0x44850E66)) ^ ((((v276 ^ 0x9C)
                                                                            - 162178079
                                                                            + ((2
                                                                              * (((v276 ^ 0x9C) + 112) & 0xFFFFFF7F ^ (v276 ^ 0x250E7C9C | 0x7FFFFFF0))) ^ 0xF0C3001F)) ^ v293)
                                                                          - 679174067
                                                                          + v303);
  uint64_t v305 = HIDWORD(v334) ^ 0x44850E66 ^ LODWORD(STACK[0x408]) ^ (v304 + 416382103 - ((2 * v304) & 0x31A2F9A2) + 58);
  v306 = (char *)*(&off_1004EDED0 + (v63 ^ 0x3D4)) - 4;
  LOBYTE(v304) = v306[BYTE4(v334) ^ 0x66u ^ LOBYTE(STACK[0x408]) ^ (v304
                                                                                   - 105
                                                                                   - ((2 * v304) & 0xA2)
                                                                                   + 58) ^ 0x28LL];
  v322[11] = v304 & 0xFB ^ ((v304 | 0xFB) + 24) ^ 0x38;
  int v307 = v301[BYTE3(v297) ^ 0xF9LL];
  HIDWORD(v308) = v307 ^ 0x1B;
  LODWORD(v308) = (v307 ^ 0x40) << 24;
  unint64_t v309 = STACK[0x2D0];
  v322[STACK[0x2D0]] = (v308 >> 29) ^ 0xFB;
  v322[STACK[0x228]] = BYTE2(v298) ^ 0x61 ^ ((BYTE2(v298) ^ 0x61) + ((16 - 2 * (BYTE2(v298) ^ 0x61)) | 9) - 13) ^ 0xB8 ^ *(_BYTE *)(v295 + (BYTE2(v298) ^ 0xB5LL));
  int v310 = (v340 ^ 0x9FD52929) - 1891546004 + HIDWORD(v337);
  unsigned int v311 = HIDWORD(v335) ^ 0x858E78B5 ^ ((HIDWORD(v335) ^ 0x858E78B5) >> 4) ^ ((HIDWORD(v335) ^ 0x858E78B5) >> 2);
  unsigned int v312 = (v311 & 0x80000 ^ 0xBF5FFADD) + 2 * (v311 & 0x80000);
  BOOL v260 = ((v312 + 1084228899) & v310) == 0;
  unsigned int v313 = v312 + 1929342327;
  unsigned int v314 = -239115471 - v312;
  if (v260) {
    unsigned int v314 = v313;
  }
  int v315 = v337 ^ (v286 + 2096205936) ^ (((v310 - 845113428 + v314) ^ v311 & 0xFFF7FFFF ^ (1515496080 * (v291 ^ 0x44850E66)))
                                                      + 2036583281
                                                      + ~(2
                                                        * (((v310 - 845113428 + v314) ^ v311 & 0xFFF7FFFF ^ (1515496080 * (v291 ^ 0x44850E66))) & 0x7963CB7A ^ ((v310 - 845113428 + v314) ^ v311 & 0xFFF7FFFF) & 0xA)));
  unsigned int v316 = v291 ^ LODWORD(STACK[0x428]) ^ (v315 + 1570908894 - ((2 * v315) & 0xBB4455BC));
  v322[STACK[0x298]] = *(_BYTE *)(v295 + (BYTE2(v316) ^ 0x1E) + ((v316 >> 15) & 0x1A8 ^ 0xFFFFFFD7) + 213) ^ BYTE2(v316) ^ ((BYTE2(v316) ^ 0x1E) + ((16 - 2 * (BYTE2(v316) ^ 0x1E)) | 9) - 13) ^ 0x98;
  int v317 = v301[HIBYTE(v316) ^ 0xBELL];
  HIDWORD(v318) = v317 ^ 0x1B;
  LODWORD(v318) = (v317 ^ 0x40) << 24;
  v322[STACK[0x328]] = (v318 >> 29) ^ 0x50;
  v322[STACK[0x290]] = ((v305 ^ 0xCFDDD967) >> 16) ^ 0x94 ^ ((((v305 ^ 0xCFDDD967) >> 16) ^ 0x94)
                                                                         + ((16
                                                                           - 2
                                                                           * (((v305 ^ 0xCFDDD967) >> 16) ^ 0x94)) | 9)
                                                                         - 13) ^ *(_BYTE *)(v295
                                                                                          + (((v305 ^ 0xCFDDD967) >> 16) ^ 0x40LL)) ^ 0xC;
  unsigned int v319 = (((v316 ^ 0x1BB09C49) >> 4) & 0xF0 | ((unsigned __int16)(v316 ^ 0x9C49) >> 12)) ^ 0xE6;
  v322[STACK[0x420]] = v300[((v319 >> 4) & 0xFFFFFF0F | (16 * (v319 & 0xF))) ^ 0xAELL] ^ (((v319 >> 4) & 0xF | (16 * (v319 & 0xF)))
                                                                                        - ((v319 >> 3) & 6)
                                                                                        + 3) ^ 0x2B;
  v322[STACK[0x258]] = (((unsigned __int16)(v305 ^ 0xD967) >> 8) - (((v305 ^ 0xCFDDD967) >> 7) & 6) + 3) ^ 0xDB ^ v300[((unsigned __int16)(v305 ^ 0xD967) >> 8) ^ 0xA0LL];
  v322[STACK[0x418]] = (((unsigned __int16)(v294 ^ 0xC6B3) >> 8) - (((v294 ^ 0x5244C6B3) >> 7) & 6) + 3) ^ v300[((unsigned __int16)(v294 ^ 0xC6B3) >> 8) ^ 0x75LL] ^ 0x80;
  v322[STACK[0x3D0]] = v306[v297 ^ 0x95LL] ^ 0x86;
  v322[STACK[0x3C0]] = v306[v294 ^ 0x7FLL] ^ 0x17;
  v322[STACK[0x460]] = v306[v316 ^ 0xE6LL] ^ 0xB8;
  int v320 = v301[BYTE3(v305) ^ 0x49LL];
  HIDWORD(v318) = v320 ^ 0x1B;
  LODWORD(v318) = (v320 ^ 0x40) << 24;
  v322[STACK[0x400]] = (v318 >> 29) ^ 0x2E;
  HIDWORD(a13) = v63 ^ 0x619;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *, unint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 + 8LL * ((56 * ((((_DWORD)v309 - 699207985 - ((2 * (_DWORD)v309 + 32) & 0xACA5DD9E) + 16) ^ 0xD652EEC0) < 0x150)) | v63)) - 8LL))( 9LL,  v305,  v297,  230LL,  v306,  v309,  v300,  1149570662LL,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  v322,  v323,  v324,  v325,  v326,  v327,  a20,  v328,  v329,  v330,  v331,  v332,  v333,  v334,  v335,  v337,  v340,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  2LL,  a43,  a44,  a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57);
}

void sub_100022A5C( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, unsigned __int8 a25, int a26, int a27, unsigned __int8 a28, int a29, unsigned __int8 a30, int a31, int a32, int a33, unsigned __int8 a34, int a35, int a36, int a37, char a38)
{
  LODWORD(STACK[0x3D8]) = (a25 | ((((a37 ^ 0x54A) - 122) ^ a32) << 24) | ((a28 ^ 0xEF) << 8) | ((a34 ^ 0x92) << 16)) ^ 0xB104EBA2;
  LODWORD(STACK[0x300]) = a31 ^ 0xBE1F7410;
  LODWORD(STACK[0x408]) = ((a33 << 8) | (a27 << 24) | ((a35 ^ 0x77) << 16) | a29) ^ 0x310F566E;
  LODWORD(STACK[0x428]) = ((((a36 ^ 0xBC) << 16) + ((a26 ^ 0x1A) << 24)) | a30 | ((a38 ^ a4) << 8)) ^ 0x4E33834F;
  JUMPOUT(0x100020B44LL);
}

uint64_t sub_100022B48( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  unint64_t v19 = STACK[0x550];
  STACK[0x668] -= 32LL;
  *(_BYTE *)(v19 + 335) = *(_BYTE *)(a14 + 335) ^ 0xCD ^ *((_BYTE *)*(&off_1004EDED0 + (a18 ^ 0x526)) + 3) ^ *((_BYTE *)*(&off_1004EDED0 + (a18 ^ 0x586)) + 13) ^ *((_BYTE *)*(&off_1004EDED0 + a18 - 1220) + (((a18 - 1437) | 0x441u) ^ 0x440LL) + 11) ^ 0x32;
  return ((uint64_t (*)(void))(*(void *)(v18 + 8LL * a18) - 4LL))();
}

void sub_100022C20()
{
}

uint64_t sub_100022C28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  STACK[0x3B0] = a8;
  *(void *)(a2 + 304) -= 16LL;
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * ((7 * (v8 ^ 0x4F0)) ^ v8 ^ 0x786))
}

uint64_t sub_100022C70@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  int v10 = *(_BYTE **)(v9 + 344);
  a8[12] = ((-93 * (a1 ^ 0xE6)) ^ 0xE9) + 50;
  a8[13] = 50;
  a8[14] = 50;
  a8[15] = 51;
  v10[16] ^= *a8 ^ 0x32;
  v10[17] ^= a8[1] ^ 0x32;
  v10[18] ^= a8[2] ^ 0x32;
  v10[19] ^= a8[3] ^ 0x32;
  v10[20] ^= a8[4] ^ 0x32;
  v10[21] ^= a8[5] ^ 0x32;
  v10[22] ^= a8[6] ^ 0x32;
  v10[23] ^= a8[7] ^ 0x32;
  v10[24] ^= a8[8] ^ 0x32;
  v10[25] ^= a8[9] ^ 0x32;
  v10[26] ^= a8[10] ^ 0x32;
  v10[27] ^= a8[11] ^ 0x32;
  v10[28] ^= a8[12] ^ 0x32;
  v10[29] ^= a8[13] ^ 0x32;
  v10[30] ^= a8[14] ^ 0x32;
  v10[31] ^= a8[15] ^ 0x32;
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 8LL * (a1 - 395)) - 4LL))(1254LL, 50LL);
}

void sub_100022E7C()
{
}

uint64_t sub_100022E84(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((60 * (LODWORD(STACK[0x46C]) != ((v4 - 225) | 0x451) + 1206751714)) ^ ((v4 - 225) | 0x451)))
                            - ((((v4 - 225) | 0x451u) - 895) ^ a4)))();
}

uint64_t sub_100022F04@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((51 * (*(_BYTE *)(v2 + (a1 + 1252)) == 50)) ^ v1))
                            - ((v1 ^ 0x483u)
                             - 278)
                            + 1083LL))();
}

uint64_t sub_100022F4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
}

uint64_t sub_100022F88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
  LODWORD(STACK[0x46C]) = 1206753083;
  unint64_t v41 = STACK[0x648];
  STACK[0x4C0] = 335LL;
  *(_BYTE *)(v41 + 335) = (a39 ^ 0xBA) * (a39 + 17);
  return (*(uint64_t (**)(void))(v39
                              + 8LL
                              * (int)(((STACK[0x4C0] == 0) * (((v40 + 1002725785) & 0xC43B9DD9) - 1065)) ^ (v40 + 1002725785) & 0xC43B9DD9)))();
}

void sub_1000232D0()
{
}

uint64_t sub_1000232D8@<X0>(int a1@<W8>)
{
  int v3 = a1 - 430;
  int v4 = a1 + 141;
  uint64_t v5 = ((uint64_t (*)(void))STACK[0x310])();
  LODWORD(STACK[0x688]) = v1;
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * (((v1 == v4 + 1645152532) * (v3 - 581)) ^ v3)) - 8LL))(v5);
}

uint64_t sub_10002331C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = LODWORD(STACK[0x468]);
  unint64_t v8 = STACK[0x3C8];
  unint64_t v9 = STACK[0x2C8];
  unint64_t v10 = STACK[0x448];
  uint64_t v11 = *(void *)(v6 + 8LL * (v5 - 1210));
  STACK[0x428] = STACK[0x2C8] + 2353;
  STACK[0x420] = v10 + 49;
  STACK[0x418] = v9 + 2333;
  STACK[0x410] = v10 + 29;
  STACK[0x408] = v9 + 2313;
  STACK[0x400] = v10 + 9;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v11 - 8))( a1,  a2,  v7,  2649773600LL,  a5,  v8);
}

void sub_100023CF8()
{
  LODWORD(STACK[0x680]) = v0;
  JUMPOUT(0x100023C78LL);
}

uint64_t sub_100023D24(uint64_t a1, uint64_t a2, int a3)
{
  STACK[0x460] = v3;
  int v7 = STACK[0x49C];
  *(_DWORD *)(*(void *)(v6 + 448) + ((a3 - 1133293923 + v7 - 1188) & 0xFFFFFFFC)) = v4;
  LODWORD(STACK[0x49C]) = v7 + 4;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((99
}

uint64_t sub_10002541C@<X0>(uint64_t a1@<X8>)
{
  int v9 = v5 + v3;
  int v10 = *(_DWORD *)(a1 + 4LL * (v9 - 8)) ^ *(_DWORD *)(a1 + 4LL * (v9 - 3));
  int v11 = *(_DWORD *)(a1 + 4LL * (v9 - 16)) ^ *(_DWORD *)(a1 + 4LL * (v9 - 14)) ^ (v10 + v8 - (v6 & (2 * v10)));
  HIDWORD(v12) = (v1 - 335) ^ (v8 + 136) ^ v11;
  LODWORD(v12) = v11;
  *(_DWORD *)(a1 + 4LL * (v2 + v5)) = (v12 >> 31) + v8 - (v6 & (2 * (v12 >> 31)));
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((((v2 + 1 + v5) > 0x4F) * v4) ^ v1)) - 8LL))();
}

uint64_t sub_1000254A8()
{
  return (*(uint64_t (**)(void))(v1 + 8LL * v0))();
}

void sub_1000255A4()
{
}

uint64_t sub_1000255BC(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((121 * ((a2 + 1 + v4) > 0x27)) ^ v2)) - 8LL))();
}

uint64_t sub_100025680(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_100025754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((241 * ((a6 + 1 + v8) > 0x4F)) ^ v6)) - 4LL))();
}

void sub_100025818( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  LODWORD(STACK[0x57C]) = v8;
  LODWORD(STACK[0x498]) = v12;
  LODWORD(STACK[0x544]) = v9;
  LODWORD(STACK[0x614]) = v11;
  LODWORD(STACK[0x5C8]) = v10;
  uint64_t v17 = *(void *)(v16 + 432);
  int v18 = *(_DWORD *)(v17 - 0x5C6940C6B1BC6FE2LL);
  LODWORD(STACK[0x49C]) = v15 + 80;
  int v19 = ((v13 - 452) ^ (v14 - 997) ^ v18) + (v10 ^ v14);
  *(_DWORD *)(v17 - 0x5C6940C6B1BC6FE2LL) = v19 + v14 - (a8 & (2 * v19));
  JUMPOUT(0x10002589CLL);
}

uint64_t sub_1000259AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v66 = STACK[0x488];
  int v67 = *(unsigned __int8 *)(STACK[0x488] - 0x5C6940C6B1BC6FDALL) ^ 0x5F;
  if (v67 == 2) {
    return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v65
  }
                                                                 + 8LL
                                                                 * ((562
                                                                   * (((a55 ^ (*(_DWORD *)(v66 - 0x5C6940C6B1BC6FDELL) == 369984849)) & 1) == 0)) ^ ((int)a3 + 74)))
                                                     - 8LL))( a1,  25LL);
  if (v67 == 1) {
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 + 8LL * ((111 * (*(_DWORD *)(v66 - 0x5C6940C6B1BC6FDELL) != (((LODWORD(STACK[0x468]) - 469) | 0xA0) ^ 0x160D86E1))) ^ (LODWORD(STACK[0x468]) + 74))) - 8LL))( a1,  25LL,  a3,  a4,  1099626267LL,  1695LL,  26919485LL,  858949875LL);
  }
  uint64_t v69 = LODWORD(STACK[0x468]);
  STACK[0x480] = 91LL;
  *(_BYTE *)(v66 - 0x5C6940C6B1BC6FDFLL) = (a65 + 7 * ((a3 - 71) ^ 0x2D)) * ((a65 - 44) ^ 0xBA);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v65
                                                               + 8LL * ((932 * (STACK[0x480] == 0)) ^ ((int)a3 - 839)))
                                                   - 12LL))( v69,  25LL);
}

void sub_100026350()
{
}

uint64_t sub_100026358()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_10002638C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)(a6 + 52) = (((((v8 + a3 - 1089 - 164) ^ v6) + (LODWORD(STACK[0x684]) ^ v8)) % 0x2710) ^ 0xEFFFDBB9)
                       + 1006630752
                       + ((2 * ((((v8 + a3 - 1089 - 164) ^ v6) + (LODWORD(STACK[0x684]) ^ v8)) % 0x2710)) & 0x3772);
  int v9 = STACK[0x68C];
  LODWORD(STACK[0x4AC]) = STACK[0x68C];
  return (*(uint64_t (**)(void))(v7 + 8LL * ((1169 * (v9 == v8)) ^ (a3 - 1089))))();
}

void sub_100026414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  *a6 = STACK[0x52C];
  a6[85] = STACK[0x4E4];
  a6[86] = STACK[0x61C];
  a6[87] = STACK[0x60C];
  a6[88] = STACK[0x4EC];
  JUMPOUT(0x10001FB24LL);
}

void sub_100026444(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(v4 + 304) -= 1616LL;
  LODWORD(STACK[0x4AC]) = a4 + 174;
  JUMPOUT(0x10001FB24LL);
}

void sub_100026460()
{
}

void sub_100026468()
{
  *(_DWORD *)(v1 + 36) = v0 | 4;
}

uint64_t sub_100026470(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  STACK[0x3B0] = v4;
  LODWORD(STACK[0x618]) = a4 - 10;
  return (*(uint64_t (**)(void))(v5
                              + 8LL * ((1443 * (((STACK[0x3B0] == 0) ^ (v6 - 84)) & 1)) ^ (v6 - 596))))();
}

uint64_t sub_100026604()
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
                              * ((v0 - 521138063 + ((v2 + 1098251017) & 0xBE8A07F7) - 1253 >= (v2 ^ 0x344u) - 670) ^ v2)))();
}

uint64_t sub_100026650(uint64_t a1)
{
  LODWORD(STACK[0x618]) = v1 - 10;
  unint64_t v4 = STACK[0x530];
  unint64_t v5 = LODWORD(STACK[0x5F4]);
  STACK[0x508] = v5;
  return ((uint64_t (*)(uint64_t, unint64_t))(*(void *)(v2
                                                                        + 8LL
                                                                        * ((1625
                                                                          * ((_DWORD)v5 != ((v3 - 35477226) & 0x21D537C ^ 0x178))) ^ (v3 - 711)))
                                                            - ((v3 - 1045827046) & 0x3E5609CB)
                                                            + 199LL))( a1,  v4);
}

void sub_100026660()
{
}

void sub_10002669C(uint64_t a1@<X1>, int a2@<W8>)
{
  int v4 = a2 ^ 0x674;
  v2(*(unsigned int *)STACK[0x318], a1, LODWORD(STACK[0x334]) - 1862247496 + (a2 ^ 0x674u) - 1253);
  *(_DWORD *)(v3 - 200) = (v4 + 426521764) ^ (535753261
                                            * ((1828448706 - ((v3 - 200) | 0x6CFBE9C2) + ((v3 - 200) | 0x9304163D)) ^ 0x99F01812));
  sub_10004D864((_DWORD *)(v3 - 200));
  JUMPOUT(0x10002672CLL);
}

uint64_t sub_100026770( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43)
{
  unint64_t v49 = STACK[0x530];
  int v50 = LODWORD(STACK[0x5F4]) ^ ((v47 ^ 0x26B) - 1099358560);
  int v51 = (2 * LODWORD(STACK[0x5F4])) & 0x7CF23ED6;
  int v52 = 235795823 * ((((2 * (v48 - 200)) | 0x7ACDC568) - (v48 - 200) - 1030152884) ^ 0xA9CBABED);
  uint64_t v53 = v48 - 200;
  *(void *)(v53 + 8) = v44;
  *(void *)(v53 + memset((void *)(v1 - 204), 50, 16) = a42;
  *(void *)(v53 + 32) = v45;
  *(_DWORD *)(v48 - 136) = v52 + v50 + v51 + 1307043736;
  *(_BYTE *)(v53 + 24) = 111 * ((((2 * (v48 + 56)) | 0x68) - (v48 + 56) + 76) ^ 0xED) - 30;
  *(void *)(v53 + 56) = v49;
  *(void *)(v53 + 48) = a43;
  *(_DWORD *)(v48 - 160) = (v47 - 485) ^ v52;
  *(_DWORD *)(v48 - 200) = (v43 + 760079447) ^ v52;
  uint64_t v54 = ((uint64_t (*)(uint64_t))((char *)*(&off_1004EDED0 + v47 - 642) - 8))(v48 - 200);
  int v55 = *(_DWORD *)(v48 - 132);
  LODWORD(STACK[0x618]) = v55;
}

uint64_t sub_100026890( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, int a38)
{
  return ((uint64_t (*)(void))(*(void *)(v39
                                        + 8LL
                                        * (int)((((LODWORD(STACK[0x590]) ^ v38) != a38 - 1368499268)
                                               * (((v40 + 445943596) & 0xE56B74ED) - 678)) ^ v40))
                            - 4LL))();
}

uint64_t sub_1000268E4@<X0>(int a1@<W8>)
{
  LODWORD(STACK[0x618]) = v1 + 391;
  uint64_t v5 = LODWORD(STACK[0x618]);
  uint64_t v6 = 235795823 * (((v3 | 0x68728E509914D92ELL) - (v3 & 0x68728E509914D92ELL)) ^ 0x60C234AE0DB99077LL);
  int v7 = a1 - 976199517 + v6;
  *(_DWORD *)(v4 - 192) = -235795823 * (((v3 | 0x9914D92E) - (v3 & 0x9914D92E)) ^ 0xDB99077);
  *(_DWORD *)(v4 - 188) = v6 ^ (a1 - 976199517) ^ 0x73;
  unsigned int v8 = (uint64_t *)(v4 - 200);
  v8[2] = v6 ^ 0x9DF05623LL;
  *unsigned int v8 = v5 ^ v6;
  *(_DWORD *)(v4 - 176) = a1 - v6 - 1501687097;
  *(_DWORD *)(v4 - 172) = v7 + 106;
  *(_DWORD *)(v4 - 168) = v7;
  uint64_t v9 = ((uint64_t (*)(uint64_t))STACK[0x3B8])(v4 - 200);
  STACK[0x3B0] = 0LL;
  int v10 = *(uint64_t (**)(uint64_t))(v2 + 8LL * *(int *)(v4 - 164));
  LODWORD(STACK[0x334]) = 1862247496;
  return v10(v9);
}

uint64_t sub_100026964@<X0>(uint64_t a1@<X1>, unsigned int a2@<W8>)
{
  unint64_t v5 = ((unint64_t)&STACK[0x508] ^ 0xF3F3F9DFAFEB7F9FLL)
     + 0x5D9F8EE7FE9CD861LL
     + ((2LL * (void)&STACK[0x508]) & 0xE7E7F3BF5FD6FF30LL);
  uint64_t v6 = v2 - 1;
  *(void *)(v4 + 24) = v6;
  *(_BYTE *)(a1 + v6) = (a2 ^ 0x66 ^ v5 ^ 0xA4) * (v5 + 17);
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((1814 * (*(void *)(v4 + 24) == 0LL)) ^ a2)) - 8LL))();
}

void sub_1000269F4()
{
}

void sub_1000269FC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100026B0C()
{
  STACK[0x3B0] = 0LL;
  int v2 = *(_DWORD *)(STACK[0x3C8] + 56);
  *(_DWORD *)(STACK[0x3C8] + 56) = v2 + 1;
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8LL * ((1804 * ((v0 ^ 0xD381F09D) + v2 < 0xFFFFFFFA)) ^ (v0 - 1129)));
  LODWORD(STACK[0x334]) = 1862247496;
  return v3();
}

void sub_100026B60()
{
  int v3 = v0 ^ 0x499;
  *(_DWORD *)(v2 - 200) = ((v0 ^ 0x499) + 426522893) ^ (535753261
                                                      * ((v2 + 1931614134 - 2 * ((v2 - 200) & 0x7322187E)) ^ 0x79D61651));
  sub_10004D864((_DWORD *)(v2 - 200));
  *(_BYTE *)uint64_t v1 = (-85 * ((v2 + 56) ^ 0xF6)) ^ 0x2F;
  *(void *)(v1 + 24) = STACK[0x2B0];
  *(void *)(v1 + 8) = STACK[0x2A8];
  *(_DWORD *)(v2 - 184) = 3804331 * ((v2 - 200) ^ 0x7ED525F6) + v3 + 1389;
  ((void (*)(uint64_t))STACK[0x2A0])(v2 - 200);
  STACK[0x3B0] = 0LL;
  LODWORD(STACK[0x334]) = 1862247496;
  JUMPOUT(0x10002666CLL);
}

void sub_100026C3C(uint64_t a1)
{
  __asm { BR              X9 }

uint64_t sub_100026C70@<X0>(uint64_t a1@<X8>)
{
  return 0LL;
}

uint64_t sub_100026C84()
{
  return 4294925273LL;
}

void sub_100026C90(uint64_t a1)
{
  int v1 = 235795823 * (((a1 | 0x1A7DF74B) - (a1 | 0xE58208B4) - 444462924) ^ 0x8ED0BE12);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  unsigned int v6 = 1374699841 * ((2 * (&v8 & 0x59A7A858) - &v8 + 643323809) ^ 0x4BAC4FA8);
  unsigned int v7 = *(_DWORD *)(a1 + 64) - v1 - v6;
  int v13 = v6 ^ ((*(_DWORD *)a1 ^ v1) - 757538690);
  uint64_t v14 = v3;
  unsigned int v15 = v7 + 1047456190;
  int v9 = v6 ^ (v2 + 368399990);
  uint64_t v8 = v5;
  uint64_t v12 = v4;
  uint64_t v10 = v5;
  sub_10004D524((uint64_t)&v8);
  __asm { BR              X8 }

uint64_t sub_100026E1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unint64_t *a11, char a12, int a13, uint64_t a14, int a15)
{
  int v24 = *(unsigned __int8 *)(v16 + 24) - v17;
  unsigned int v25 = 1759421093 * (&a10 ^ 0xB37DB054);
  a11 = &STACK[0x17594DE9181849F3];
  a14 = v22;
  a12 = ((v24 ^ 0xFE) + ((v24 << (v23 - 120)) & ((v23 ^ 0xC2) + 127) ^ 2) - 5) ^ (-91 * (&a10 ^ 0x54));
  a13 = v25 + 395618377 + v21;
  a15 = v23 - v25 + 906;
  uint64_t v26 = ((uint64_t (*)(int *))(*(void *)(v15 + 8LL * (v23 ^ 0x5A)) - 4LL))(&a10);
  return ((uint64_t (*)(uint64_t))(*(void *)(v20 + 8LL * (((a10 != v19) * v18) ^ v23)) - 8LL))(v26);
}

uint64_t sub_100026EEC()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
}

void sub_100026F30(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x384B062F07609540LL) = v2 - 1;
  *(_DWORD *)(v1 + 68) = 1645153785;
}

void sub_1000270C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4) {
    BOOL v5 = a5 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  int v6 = !v5;
  __asm { BR              X8 }

uint64_t sub_10002713C( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18)
{
  *a4 = 0LL;
  *a5 = 0;
  a18 = 108757529 * ((&a17 & 0xA7DA3C6 | ~(&a17 | 0xA7DA3C6)) ^ 0x151E3E12) + 1695027452;
  uint64_t v21 = sub_10004CCF0(&a17);
  return (*(uint64_t (**)(uint64_t))(v19 + 8LL * ((1110 * (a17 == v20)) ^ v18)))(v21);
}

uint64_t sub_1000271C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v23 = 1759421093 * ((&a17 - 826825291 - 2 * (&a17 & 0xCEB7A5B5)) ^ 0x7DCA15E1);
  HIDWORD(a17) = v23 ^ 0x771B5177;
  a18 = v23 + 1806;
  a20 = v23 ^ 0x18F94B49;
  LODWORD(a17) = v23 ^ 0x7FA6CEE2;
  ((void (*)(unint64_t **))(*(void *)(v22 + 392) - 12LL))(&a17);
  a17 = &STACK[0x4BD26FD1213425D9];
  a19 = 1307 - 460628867 * ((((2 * &a17) | 0x9D678C32) - &a17 + 827079143) ^ 0x82254464);
  sub_100028A48((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8LL * ((11 * (a18 == v21)) ^ 0x296u)))( v24,  v25,  v26,  v27,  v28,  v29,  v30,  v31,  a9,  a10);
}

uint64_t sub_1000272CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, unsigned int a18, uint64_t a19, unsigned int a20, uint64_t a21)
{
  unsigned int v26 = 1178560073 * ((((2 * &a17) | 0x572E13FC) - &a17 + 1416164866) ^ 0x1103719C);
  a18 = ((2 * v23) & 0xE6FBE672) + (v23 ^ 0x737DF339) - 587243776 + v26;
  a20 = v26 ^ 0x3E8;
  a19 = a16;
  sub_100038AF4((uint64_t)&a17);
  unsigned int v27 = 1178560073 * (((~&a17 & 0x8CEF827A) - (~&a17 | 0x8CEF827B)) ^ 0x367BFA19);
  a21 = v21;
  a20 = v27 ^ ((v22 ^ 0x5BFF7F7E) - 1350459988 + ((2 * v22) & 0xB7FEFEFC));
  a19 = a16;
  a18 = v27 + 1289;
  uint64_t v28 = ((uint64_t (*)(int *))(*(void *)(v25 + 1024) - 8LL))(&a17);
  return (*(uint64_t (**)(uint64_t))(v24 + 8LL * ((1916 * (a17 == 1645153785)) ^ 0x323u)))(v28);
}

uint64_t sub_10002742C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t *a17, uint64_t a18, unsigned int a19, unsigned int a20, unsigned int a21, int a22)
{
  if (a12 >= 0x608FEDF6) {
    int v25 = 1010542952;
  }
  else {
    int v25 = 635686783;
  }
  unsigned int v26 = 460628867
      * ((((&a17 | 0x2AEB2E12) ^ 0xFFFFFFFE) - (~&a17 | 0xD514D1ED)) ^ 0x99825390);
  a17 = &STACK[0x58A7AA0862456906];
  a18 = a16;
  a19 = v26 - 1703100402;
  a20 = v26 + v23 + 2138962557;
  a21 = v25 - v26;
  uint64_t v27 = sub_10004D0C0((uint64_t)&a17);
  return (*(uint64_t (**)(uint64_t))(v24
                                            + 8LL
                                            * ((22 * (a22 == v22 + v23 - 141 + ((v23 + 367) | 0x160) - 2184)) ^ v23)))(v27);
}

uint64_t sub_100027520( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14
                                                     + 8LL * (((((v12 + 466728956) & 0x71D) - 699) * (a12 < v13)) ^ v12)))( a1,  a2);
}

uint64_t sub_1000275B8@<X0>( uint64_t a1@<X8>, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, _BYTE *a6, int a7, char a8, uint64_t a9, uint64_t a10, unsigned int a11, char *a12, _BYTE *a13, uint64_t a14, unsigned int a15)
{
  int v22 = v15;
  a12 = &a8 + a1;
  a13 = a6;
  a11 = (v18 - 1177) ^ (((2 * (&a11 & 0x7F331FB0) - &a11 - 2134056888) ^ 0xED38F841) * v16);
  v20(&a11);
  a13 = v22;
  a14 = v17;
  a15 = ((v18 ^ 0xFE) - 938) ^ (1225351577 * (&a11 ^ 0x239AD816));
  a12 = a6;
  ((void (*)(unsigned int *))(*(void *)(v21 + 8LL * (v18 ^ 0x5B3u)) - 8LL))(&a11);
  a12 = a3;
  a13 = a6;
  a11 = ((v18 ^ 0xFE) - 947) ^ (1374699841
                              * ((-1001333016 - (&a11 | 0xC450DEE8) + (&a11 | 0x3BAF2117)) ^ 0x565B391E));
  v20(&a11);
  a11 = ((v18 ^ 0xFE) - 446) ^ (1755732067
                              * ((((&a11 | 0x3445A058) ^ 0xFFFFFFFE) - (~&a11 | 0xCBBA5FA7)) ^ 0x157CE27C));
  a12 = a6;
  uint64_t v23 = sub_100049128((uint64_t)&a11);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * ((27
                                                        * ((_DWORD)a13 != (((v18 ^ 0xFE) - 45646309) & 0x7FFB)
                                                                        + 1645152982)) ^ v18 ^ 0xFEu))
                                          - (v18 ^ 0x114u)
                                          + 1246LL))(v23);
}

uint64_t sub_10002777C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14)
{
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * (((a14 != v14) * ((v16 - 532) ^ (v16 - 451))) ^ v16)) - 8LL))();
}

uint64_t sub_1000277A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL
                                        * (((a13 != ((v15 + 1678211847) & 0x87B7 ^ (v13 - 925)))
}

uint64_t sub_100027800@<X0>(int a1@<W8>)
{
  BOOL v5 = (*(uint64_t (**)(void))(v4 + 8LL * (v1 - 1731)))(a1 ^ v2) == 0;
  return (*(uint64_t (**)(void))(v3 + 8LL * ((v5 * (((v1 - 1412) | 0x102) ^ 0x336)) ^ v1)))();
}

uint64_t sub_100027848( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v16 = a13 ^ (v14 - 1291) ^ (v13 - 1656909894) & 0x62C26DB7;
  return ((uint64_t (*)(void))(*(void *)(v15
                                        + 8LL
                                        * ((232
                                          * (((2 * (v16 - ((2 * v16) & 0xEDAA0BF4) + 1993672186)) & 0xDFDBFDDA ^ (((v13 - 901) | 0x308) - 846593368))
                                           + ((v16 - ((2 * v16) & 0xEDAA0BF4) + 1993672186) ^ 0x1938FB17)
                                           - 1610946564 != 266921705)) ^ (v13 - 1333)))
                            - 12LL))();
}

uint64_t sub_100027904()
{
  BOOL v4 = v1 + v0 + ((v2 - 874430325) & 0x341EBEEDu) - 1877869966 < (((v2 + 8993113) | 0xA8160008) ^ 0xA89F4081);
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((2 * v4) | (4 * v4) | v2)) - 8LL))();
}

uint64_t sub_100027988(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * (((((a4 - 1904335010) ^ 0x26E16D76 ^ v5) + ((a4 - 1904335010) & 0x7181D2F1))
}

uint64_t sub_1000279D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return (*(uint64_t (**)(void))(v8
                              + 8LL
                              * (((v7 < ((a5 - v6 - 213) ^ (v5 + 1686))) * ((a5 + 21) ^ 0x100)) ^ a5)))();
}

uint64_t sub_100027A0C(uint64_t a1, int a2)
{
  unsigned int v10 = v8 + v7 + v6 + 1696;
  uint64_t v11 = v3 + v10;
  __int128 v12 = *(_OWORD *)(v11 - 31);
  uint64_t v13 = a1 + v10;
  *(_OWORD *)(v13 - 15) = *(_OWORD *)(v11 - 15);
  *(_OWORD *)(v13 - 31) = v12;
  return (*(uint64_t (**)(void))(v9 + 8LL * ((((v5 & 0xFFFFFFE0) != 32) * ((a2 - v2) ^ 0x604)) ^ (v4 + a2 + 410))))();
}

void sub_100027A68()
{
}

uint64_t sub_100027A74(uint64_t a1)
{
  *uint64_t v3 = a1;
  *int v6 = v2;
  int v4 = (v1 - 1155) | 0x202;
  uint64_t v12 = v8;
  unsigned int v11 = v1
      - 500
      + 535753261
  v7(v10);
  uint64_t v12 = v9;
  unsigned int v11 = v4
  v7(v10);
  return 0LL;
}

void sub_100027D2C(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_100027DB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *))(*(void *)(v66 + 3744) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  3102982430LL,  a9,  &a66,  a11,  &STACK[0x4FF3ADA337C70055]);
}

uint64_t sub_100027EFC()
{
  return ((uint64_t (*)(void))(*(void *)(v1
}

uint64_t sub_100027F58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  return (*(uint64_t (**)(void))(v18 + 8LL * ((107 * ((((v17 - 1641) ^ 0xFFFFFF2F) & v19) - a17 == -3)) ^ v17)))();
}

uint64_t sub_100027F8C@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL * (((((a1 - 880016978) | 0xC428) + 879967018) * (v1 == 369238551)) ^ a1))
                            - 8LL))();
}

uint64_t sub_100027FE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, int a21)
{
  int v25 = 2 * (v21 ^ (v22 + 125) ^ 0x10F);
  int v26 = v21 + 879967956;
  BOOL v27 = a21 - 94734047 < (v24 - 937898909);
  return ((uint64_t (*)(void))(*(void *)(v23 + 8LL * ((v27 * (v25 ^ 0x1C0)) ^ v26)) - 8LL))();
}

uint64_t sub_100028194( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int v21 = 628203409 * ((v20 - 152) ^ 0x82880C33);
  *(_DWORD *)(v20 - 136) = v17 - v21 + 1538;
  *(_DWORD *)(v20 - 132) = v19 - v21 + 77623025;
  *(void *)(v20 - 152) = a14;
  *(void *)(v20 - 144) = a12;
  *(void *)(v20 - 112) = a17;
  *(void *)(v20 - 104) = a13;
  *(void *)(v20 - 128) = a15;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(a6 + 8LL * (v17 ^ 0x19D)))(v20 - 152);
  return ((uint64_t (*)(uint64_t))(*(void *)(v18
                                                      + 8LL
                                                      * (((*(_DWORD *)(v20 - 120) == (((v17 + 134791456) | 0xC3840489) ^ 0xA983CB50))
                                                        * ((355 * (v17 ^ 0x105)) ^ 0x58D)) ^ v17))
                                          - 8LL))(v22);
}

uint64_t sub_100028288( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 8LL * (((*(_DWORD *)(v11 + 48LL * (v13 + a8)) == 470551612) * (((16 * v8) ^ 0x6FF0 ^ (v9 + 256)) + 879967002)) ^ v8))
                                                                                       - 4LL))( a1,  a2,  a3,  a4,  a5,  v12);
}

uint64_t sub_1000282E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((v5 - 1155520739) <= 0x19 && ((1 << (v5 + 29)) & 0x3014001) != 0) {
    __asm { BR              X10 }
  }

  return a5 ^ 0x9DF05627;
}

void sub_100028A48(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12) + 460628867 * ((a1 & 0x73B15F3F | ~(a1 | 0x73B15F3F)) ^ 0xC0D822BD);
  uint64_t v2 = *((void *)*(&off_1004EDED0 + v1 - 1265)
       + ((61 * (((uint64_t (*)(uint64_t))*(&off_1004EDED0 + v1 - 1081))(32LL) != 0)) ^ v1)
       - 1)
     - 8LL;
  __asm { BR              X8 }

uint64_t sub_100028AD8(uint64_t result)
{
  uint64_t v2 = *v1;
  *(void *)uint64_t result = 0LL;
  *(void *)(result + 8) = 0x23F5AF4C23F5AF4CLL;
  *(void *)(result + memset((void *)(v1 - 204), 50, 16) = 0xA94A23B81285297ALL;
  *(_DWORD *)(result + 24) = 1645153785;
  *(void *)(v2 - 0x4BD26FD1213425A1LL) = result + 0x27681A84B35EB105LL;
  *((_DWORD *)v1 + 2) = 1645153785;
  return result;
}

void sub_100028B58(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100028B9C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((1906 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x13Eu)))();
}

uint64_t sub_100028BC8()
{
  unsigned int v2 = v1 - ((2 * v1 + 1881461128) & 0x82B34678) + 2037124096;
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((912
                                          * (((2 * v2) & 0xECF2B9EA ^ 0x80B20068) + (v2 ^ 0x3720FFC9) + 1845473215 != 1685654708)) ^ 0x4AAu))
                            - 4LL))();
}

uint64_t sub_100028C7C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * ((26 * (a4 + a3 + v5 + 973 + (v5 ^ 0x9869E38) > 7)) ^ v5)))();
}

uint64_t sub_100028CD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8
}

uint64_t sub_100028D14( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return (*(uint64_t (**)(void))(v8
                              + 8LL
                              * (int)((((((a8 + 2059979559) & 0x33F0) + 118) ^ 0xC21B0EF2 ^ ((((a8 + 2059979559) & 0x33F0)
                                                                                            + 118) | 0x38) ^ 0xC21B0EC4)
                                     * (v9 < 0x20)) ^ (a8 + 2059979559) & 0x33F0)))();
}

uint64_t sub_100028D64(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  unsigned int v12 = a7 + a3 + a4 + 2015;
  uint64_t v13 = v10 + v12;
  __int128 v14 = *(_OWORD *)(v13 - 31);
  uint64_t v15 = v9 + v12;
  *(_OWORD *)(v15 - 15) = *(_OWORD *)(v13 - 15);
  *(_OWORD *)(v15 - 31) = v14;
  return (*(uint64_t (**)(void))(v7
                              + 8LL
                              * ((((v11 & 0xFFFFFFE0) != 32) * (((v8 + a6 + 1315) | 0xC) - 1540)) ^ (v8 + a6 + 124))))();
}

void sub_100028DC0()
{
}

uint64_t sub_100028DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)(a5 + 1424) = v6 + ((v7 - v5) ^ 0x2D86C0A4);
  *(void *)(*(void *)(a1 + 96) + 520LL) = *(void *)(a2 + 8) + 1LL;
  return 0LL;
}

uint64_t sub_100028F24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W5>, int a4@<W8>)
{
  *(_BYTE *)(v5 + (v8 + v7)) = *(_BYTE *)(v6 + (v8 + v7));
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v4
                                                                       + 8LL
                                                                       * ((41
                                                                         * (((v8 - 1 == a4) ^ (((a3 - 31) & 0xF7) - 104)) & 1)) ^ (a3 - 86405151) & 0x5266FF7u))
                                                           - 8LL))( a1,  a2,  (((a3 - 86405151) & 0x5266FF7) - 1385) | 0x482u);
}

void sub_100028F88(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 535753261 * (a1 ^ 0xAF40E2F);
  __asm { BR              X9 }

uint64_t sub_100029010@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

void sub_100029050(int a1@<W8>)
{
  __asm { BR              X15 }

void sub_10002927C()
{
}

void sub_100029284()
{
}

uint64_t sub_1000292B8(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)*(&off_1004E98E0
                                                    + (((8 * (*(_DWORD *)(a2 + 4) != 1206753096)) | ((*(_DWORD *)(a2 + 4) != 1206753096) << 6)) ^ 0x99u))
                                          - 12))(4294925278LL);
}

uint64_t sub_100029300@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(*(void *)(a2 + 96) + 468LL) = *(_BYTE *)(*(void *)(a1 + 8) + 12LL);
  return ((uint64_t (*)(void))(*(void *)(v2 + 9208) - 12LL))(0LL);
}

uint64_t sub_100029358@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v7 + v5)) = *(_BYTE *)(v4 + (v7 + v5));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v7 - 1 != v2) * v6) ^ v3)) - 12LL))(0LL);
}

void sub_10002938C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) ^ (3804331 * ((2 * (a1 & 0x520CC9FF) - a1 - 1376569856) ^ 0xD32613F6));
  uint64_t v2 = *(void *)a1;
  ((void (*)(char *, void (*)()))*(&off_1004EDED0 + (v1 ^ 0x1C2)))( (char *)*(&off_1004EDED0 + v1 - 229) - 4,  sub_10004D258);
  __asm { BR              X11 }

uint64_t sub_100029448()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((883 * (**(void **)(v1 + 8LL * (v2 ^ 0x1E8)) == 0LL)) ^ v2))
                            - ((v2 - 1332780451) & 0x4F709ED1)
                            + 585LL))();
}

  ;
}

uint64_t sub_1000294A4@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (a1 ^ 0x2C2)))(v1);
}

void sub_1000294C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100029514@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((19 * (v1 == 1206753083)) ^ 0x58Du)) - 8LL))();
}

uint64_t sub_10002954C(_DWORD *a1)
{
  *((_BYTE *)a1 + (v3 ^ (v2 + 687)) + v1 + 4) = 79;
  *a1 = v1;
  return 0LL;
}

uint64_t sub_100029580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a1 + (v3 + v4) + 4) = ((2 * **(_BYTE **)(a2 + 8)) & 0x9F) + (**(_BYTE **)(a2 + 8) ^ 0x4F);
  unsigned int v5 = *(_DWORD *)(a2 + 4) - 650652805;
  BOOL v6 = v5 < 0x21256AB6;
  BOOL v7 = v5 > 0x21256AB7;
  if (v6) {
    BOOL v7 = v6;
  }
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * ((1572 * !v7) ^ 0x3BAu)) - 8LL))();
}

void sub_100029630()
{
}

void sub_100029638(uint64_t a1)
{
  BOOL v3 = *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL) == 159353952
    || *(_DWORD *)(*(void *)(a1 + 16) - 0xC7F991DE6408E19LL) == 159353952;
  int v1 = *(_DWORD *)a1 - 1225351577 * ((-1557536513 - (a1 | 0xA329E0FF) + (a1 | 0x5CD61F00)) ^ 0x7F4CC716);
  __asm { BR              X14 }

uint64_t sub_100029748@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v1
                              + 8LL
}

uint64_t sub_1000297A8(int a1)
{
  int v3 = (uint64_t (*)(void, uint64_t, uint64_t))(*(void *)(v1
                                                                    + 8LL
                                                                    * ((1868 * (v2 > ((a1 - 776) | 0x444) - 1239)) ^ a1))
                                                        - 8LL);
  return v3(v3, 136689414LL, 1868LL);
}

uint64_t sub_100029820( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v20 = v17 > v19;
  *(_DWORD *)(a14 + 4LL * (a2 - 136689414)) = v15;
  if (v20 == a2 - 912297563 < ((v16 - 598) | 0x11A) + 1371874575) {
    BOOL v20 = a2 - 912297563 < v18;
  }
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((977 * !v20) ^ v16)) - 8LL))();
}

uint64_t sub_10002989C(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (a1 ^ (46 * (v2 == 0)))) - ((a1 + 118) ^ 0x419LL)))();
}

uint64_t sub_1000298D0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return ((uint64_t (*)(void))(*(void *)(v10
                                        + 8LL * (int)((((v12 + 1694736606) & 0x9AFC5BF7 ^ 0x26B) * (v11 > a10)) ^ v12))
                            - ((v12 - 2048383028) & 0x7A17D5E7)
                            + 441LL))();
}

uint64_t sub_100029954( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL
                                        * ((925 * (*(_DWORD *)(a14 + 4LL * (v16 + v17 + 1)) == v15)) ^ (a1 + 588)))
                            - ((23 * (a1 ^ 0x1C8) - 265) | 0xC5u)
                            + 219LL))();
}

uint64_t sub_1000299B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void sub_1000299EC()
{
}

void sub_1000299F4()
{
  *uint64_t v0 = v1;
}

void sub_100029DEC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((2 * (a1 & 0x2B9C6F1D) - a1 + 1415811298) ^ 0x77F948F4);
  if (*(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL) - 159353952 >= 0) {
    unsigned int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL) - 159353952;
  }
  else {
    unsigned int v2 = 159353952 - *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL);
  }
  if (*(_DWORD *)(*(void *)(a1 + 16) - 0xC7F991DE6408E19LL) - 159353952 >= 0) {
    unsigned int v3 = *(_DWORD *)(*(void *)(a1 + 16) - 0xC7F991DE6408E19LL) - 159353952;
  }
  else {
    unsigned int v3 = 159353952 - *(_DWORD *)(*(void *)(a1 + 16) - 0xC7F991DE6408E19LL);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  v5[1] = (460628867 * ((1088039055 - (v5 | 0x40DA288F) + (v5 | 0xBF25D770)) ^ 0xF3B3550D)) ^ (v1 + 290);
  sub_100039498((uint64_t)v5);
  if (v2 >= v3) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = v2;
  }
  __asm { BR              X16 }

uint64_t sub_100029F78@<X0>(uint64_t a1@<X8>)
{
  int v11 = v4 - 413931738;
  uint64_t v12 = 4LL * (v7 + v5);
  int v13 = (*(_DWORD *)(*(void *)(v10 - 0xC7F991DE6408E15LL) + v12) ^ v6)
      - (*(_DWORD *)(*(void *)(v9 - 0xC7F991DE6408E15LL) + v12) ^ v6);
  *(_DWORD *)(*(void *)(a1 - 0xC7F991DE6408E15LL) + v12) = v13
                                                           + v6
                                                           - ((((v3 - 387) | 0x140) ^ (v8 + 434)) & (2 * v13));
  BOOL v15 = v7 - 1538539199 < 1733551910 && v7 - 1538539199 >= v11;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((v15 * v2) ^ v3)) - 12LL))();
}

uint64_t sub_10002A08C()
{
  BOOL v4 = v2 + 141438039 < (int)(v3 + 1266045501);
  if (v3 > 0x3489ADC2 != v2 + 141438039 < -881438147) {
    BOOL v4 = v3 > 0x3489ADC2;
  }
  return (*(uint64_t (**)(void))(v0 + 8LL * ((!v4 * (((v1 - 453) | 0x320) ^ 0x90)) ^ v1)))();
}

uint64_t sub_10002A104()
{
  BOOL v4 = v2 + 773424304 < (int)(v3 + 1898030669 + v1 + 903);
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((57 * v4) | v1)) - 4LL))();
}

uint64_t sub_10002A18C@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v14 = v7 - 903;
  BOOL v15 = v12 > v6;
  uint64_t v16 = 4LL * (v10 + v8);
  int v17 = v3 + 404716728 + (*(_DWORD *)(*(void *)(v13 - 0xC7F991DE6408E15LL) + v16) ^ 0x401477F0);
  *(_DWORD *)(*(void *)(a2 - 0xC7F991DE6408E15LL) + vmemset((void *)(v1 - 204), 50, 16) = v17 + v9 - (v11 & (2 * v17));
  LODWORD(vmemset((void *)(v1 - 204), 50, 16) = v10 + 1 + v4;
  int v18 = v15 ^ ((int)v16 < a1 + 746);
  BOOL v19 = (int)v16 < v5;
  if (!v18) {
    BOOL v15 = v19;
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1163 * v15) ^ v14)) - 4LL))();
}

uint64_t sub_10002A288()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
}

uint64_t sub_10002A2CC()
{
  return (*(uint64_t (**)(void))(v0 + 8LL * ((691 * (v2 + v3 + ((v1 - 466) | 0x220u) + 538 - 1083 < 0x7FFFFFFF)) ^ v1)))();
}

uint64_t sub_10002A308@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v6 = a1 - 1515627297;
  int v7 = a1 - 321;
  BOOL v8 = v4 - 179107018 < -1201983204;
  int v9 = (**(_DWORD **)(a2 - 0xC7F991DE6408E15LL) ^ 0x401477F0) + 1;
  **(_DWORD **)(a2 - 0xC7F991DE6408E15LL) = v9 + v3 - (v5 & (2 * v9));
  signed int v10 = (v6 & 0x5A56A53A ^ 0xBEA6F4D2) + 2041856053;
  int v11 = v8 ^ (v10 < -1201983204);
  BOOL v12 = v10 < v4 - 179107018;
  if (!v11) {
    BOOL v8 = v12;
  }
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * ((269 * !v8) ^ v7)))(1515627834LL);
}

void sub_10002A3DC()
{
}

uint64_t sub_10002A3E8@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v14 = (a1 - 229) | 0x33;
  uint64_t v15 = 4LL * (v10 + v8);
  int v16 = v3 + 404716727 + (*(_DWORD *)(*(void *)(v13 - 0xC7F991DE6408E15LL) + v15) ^ v9);
  *(_DWORD *)(*(void *)(a2 - 0xC7F991DE6408E15LL) + v15) = v16 + v9 - ((v16 << ((v14 + 84) & 0xF6 ^ 0xC3)) & v11);
  BOOL v17 = v12 > v7;
  LODWORD(v15) = v10 + 1 + v5;
  int v18 = v17 ^ ((int)v15 < v4);
  BOOL v19 = (int)v15 < v6;
  if (!v18) {
    BOOL v17 = v19;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL * ((350 * v17) ^ v14)))();
}

uint64_t sub_10002A4F0()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((247 * (v2 + v3 - 1 < ((v1 + 393399162) & 0xE88D367D ^ 0x7FFFFBE7))) ^ (v1 + 596)))
                            - 8LL))();
}

uint64_t sub_10002A568@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((197
                                          * (*(_DWORD *)(*(void *)(a1 - 0xC7F991DE6408E15LL)
                                                       + 4LL * (v3 + v5 + ((v2 + 12) | 0x50u) - 1141)) == v4 + 262 * (((v2 + 12) | 0x50) ^ 0x470) - 1048)) ^ ((v2 + 12) | 0x50)))
                            - 8LL))();
}

uint64_t sub_10002A5D4()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((108 * (((v1 ^ ((v3 + v2 - 2) < 0x7FFFFFFF)) & 1) == 0)) ^ v1))
                            - ((v1 - 1178509359) & 0x463E9E36)
                            + 536LL))();
}

uint64_t sub_10002A62C()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * (int)((197
                                               * (*(_DWORD *)(v1 + 4LL * (v4 + (v2 ^ v3) + v6 - 1141)) == v5 + 262 * (v2 ^ v3 ^ 0x470) - 1048)) ^ v2 ^ v3))
                            - 8LL))();
}

void sub_10002A67C(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0xC7F991DE6408E19LL) = (((v3 + v2) * (v1 - 1901766679)) ^ 0x5DFFADE4)
                                        - 1417683332
                                        + ((2 * (v3 + v2) * (v1 - 1901766679)) & 0xBBFF5BC8);
}

void sub_10002A708(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) - 1178560073 * (a1 ^ 0xBA947862);
  __asm { BR              X9 }

uint64_t sub_10002A7B4@<X0>(int a1@<W8>)
{
}

uint64_t sub_10002A7FC()
{
  BOOL v6 = (*(_BYTE *)(v3 - 0x27681A84B35EB0F1LL) & 1) == 0
    && (*(_DWORD *)(v2 + 16) ^ v0) - 193011051 < ((v1 - 478) | 0x100u) - 337;
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * ((v6 | (16 * v6)) ^ v1)) - 4LL))();
}

uint64_t sub_10002A868@<X0>( uint64_t (*a1)(unsigned int *)@<X8>, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  unsigned int v11 = 3804331 * (((&a3 | 0xCAC897F1) - (&a3 & 0xCAC897F1)) ^ 0xB41DB207);
  a7 = v11 + 384812048;
  a3 = v11 + 1116194082;
  a4 = v11 + v10 + 248;
  a5 = v7;
  a6 = v8;
  uint64_t v12 = a1(&a3);
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * (((*(_DWORD *)(v8 - 0x27681A84B35EB0EDLL) != ((v10 + 369513487) & 0xE9F9ABF9) + 1645153504)
                                                        * ((v10 + 1017) ^ 0x500)) | v10))
                                          - 12LL))(v12);
}

void sub_10002A938()
{
  unsigned int v5 = v3 - (((v4 + 1008) ^ 0x989A24D6) & (2 * v3 - 386021972)) + 1087108037;
  *uint64_t v7 = (HIBYTE(v5) ^ 0x4C) - ((v5 >> 23) & 0x64) + 50;
  v7[1] = (BYTE2(v5) ^ 0x4D) - ((v5 >> 15) & 0x64) + 50;
  _DWORD v7[2] = (BYTE1(v5) ^ 0x10) - ((2 * (BYTE1(v5) ^ 0x10)) & 0x64) + 50;
  v7[3] = (v3 - (((v4 - 16) ^ 0xD6) & (2 * v3 - 84)) - 59) ^ 0xDD;
  uint64_t v6 = v2 - ((2 * v2) & 0x3749B0E77A16C552LL) + 0x1BA4D873BD0B62A9LL;
  _BYTE v7[4] = (HIBYTE(v6) ^ 0x1B) - ((2 * (HIBYTE(v6) ^ 0x1B)) & 0x64) + 50;
  v7[5] = (BYTE6(v6) ^ 0xA4) - ((2 * (BYTE6(v6) ^ 0xA4)) & 0x64) + 50;
  v7[6] = (BYTE5(v6) ^ 0xD8) + (~(2 * (BYTE5(v6) ^ 0xD8)) | 0x9B) + 51;
  v7[7] = (BYTE4(v6) ^ 0x73) - 2 * ((BYTE4(v6) ^ 0x73) & 0x36 ^ BYTE4(v6) & 4) + 50;
  v7[8] = (((v2 - ((2 * (_DWORD)v2) & 0x7A16C552) - 1123327319) >> 24) ^ 0xBD)
  v7[9] = (BYTE2(v6) ^ 0xB) - ((2 * (BYTE2(v6) ^ 0xB)) & 0x64) + 50;
  v7[10] = (BYTE1(v6) ^ 0x62) - 2 * ((BYTE1(v6) ^ 0x62) & 0x36 ^ BYTE1(v6) & 4) + 50;
  v7[11] = (v2 - ((2 * v2) & 0x52) - 87) ^ 0x9B;
  *unsigned int v0 = *(_DWORD *)(v1 - 0x27681A84B35EB0EDLL);
}

uint64_t sub_10002B028(uint64_t a1)
{
  int v1 = 628203409 * (((a1 | 0xC21FEC2B) - (a1 & 0xC21FEC2B)) ^ 0x4097E018);
  int v2 = *(_DWORD *)(a1 + 8) - v1;
  unsigned int v3 = v1 + *(_DWORD *)(a1 + 12) - 507371026;
  unsigned int v4 = (*(_DWORD *)(*(void *)a1 - 0x5C6940C6B1BC6FF6LL) ^ 0x6731FE54) + v3;
  unsigned int v5 = v4 - ((2 * v4) & 0xCE63FCA8) + 1731329620;
  *(_DWORD *)(*(void *)a1 - 0x5C6940C6B1BC6FF6LL) = v5;
}

void sub_10002B0F0(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0x5C6940C6B1BC6FFALL) = (*(_DWORD *)(a1 - 0x5C6940C6B1BC6FFALL) ^ 0x37D4814A)
                                         + 936673610
                                         - ((2 * (*(_DWORD *)(a1 - 0x5C6940C6B1BC6FFALL) ^ 0x37D4814A) + 2) & 0x6FA90294)
                                         + 1;
}

void sub_10002B138(_DWORD *a1)
{
  unsigned int v1 = 235795823 * (((_DWORD)a1 - 1876425126 - 2 * (a1 & 0x9028065A)) ^ 0x4854F03);
  unsigned int v2 = a1[9] + v1;
  int v3 = *a1 ^ v1;
  BOOL v5 = (v3 & 0x30000000) == 0 || (v3 & 0x3F000000) == 603979776;
  __asm { BR              X11 }

uint64_t sub_10002B208@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, unsigned int a5, uint64_t a6, unint64_t *a7, int a8, unint64_t *a9, char a10, int a11)
{
  uint64_t v15 = *(void *)(v12 + 8);
  unsigned int v16 = 1755732067
      * (((&a4 | 0xA5876138) - &a4 + (&a4 & 0x5A789EC0)) ^ 0x7B41DCE3);
  a8 = v16 + v14 + 301;
  a9 = &STACK[0xF250A47131524F5];
  a6 = v15;
  a7 = &STACK[0x4B30070DAA05F9E0];
  a10 = (99 * (((&a4 | 0x38) - &a4 + (&a4 & 0xC0)) ^ 0xE3)) ^ 0xC5;
  a5 = ((v11 ^ 0x1B729855) + 394248036 + ((v11 << ((v14 - 29) ^ 0x36)) & 0xFD3BA1FE ^ 0xC91A8154)) ^ v16;
  a4 = &STACK[0x330904BA72E93EC4];
  uint64_t v17 = (*(uint64_t (**)(unint64_t **))(a1 + 8LL * (v14 ^ 0x12F)))(&a4);
  return ((uint64_t (*)(uint64_t))(*(void *)(v13 + 8LL * ((1381 * (a11 == 1645153785)) ^ v14)) - 8LL))(v17);
}

uint64_t sub_10002B340()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
}

uint64_t sub_10002B3A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
}

uint64_t sub_10002B41C()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v0 ^ (692 * (v1 != 0xD86A8E34)))) - 12LL))();
}

uint64_t sub_10002B470@<X0>(uint64_t a1@<X8>)
{
  BOOL v9 = v4 > 0x13057B94;
  *(_BYTE *)(a1 + (v7 - 281128576)) = *(_BYTE *)(v1 + (v7 - 281128576));
  if (v9 == v7 - 600254996 < v3) {
    BOOL v9 = v7 - 600254996 < v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((v9 * v6) ^ v2)) - 12LL))();
}

uint64_t sub_10002B4F4()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((15
                                          * (((2 * v1) & 0xDF59FFDE ^ 0x90511C48)
                                           + (v1 ^ 0xB7C671DB)
                                           + ((v0 - 808) ^ 0xF7DF7F8F) != 1737260655)) ^ v0))
                            - 12LL))();
}

uint64_t sub_10002B560()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((2015
                                          * ((((v0 - 1873608687) < 0xC) ^ (-83 * (v1 ^ 4))) & 1)) ^ v1))
}

uint64_t sub_10002B5BC(int a1, int a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((28
                                          * (((a3 + a1 + v4 - (v3 & 3) + 1486) & 0xFFFFFFFC) <= a1
                                                                                              + v4
                                                                                              + ((((a2 - 878) | 0x304)
                                                                                                + a3) ^ (20 * (a2 ^ 0x77Eu))))) ^ a2))
                            - 12LL))();
}

uint64_t sub_10002B624@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>, uint8x8_t a3@<D0>)
{
  uint64_t v8 = (v6 - 519);
  a3.i32[0] = *(_DWORD *)(a2 + (v8 ^ 0x4FF) + a1);
  *(_DWORD *)(a2 - 3 + (v3 + v4 + v8 - 1007 - 271)) = vmovn_s16((int16x8_t)vmovl_u8(a3)).u32[0];
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (int)((1019 * (v5 != 4)) ^ v8)) - 8LL))();
}

uint64_t sub_10002B688@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 3 + (v3 + v2)) = *(_DWORD *)(v1 - 3 + (v3 + v2));
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((v5 == 4) * (((v4 - 71) | 2) ^ 0x77A)) ^ (v4 + 311))) - 8LL))();
}

uint64_t sub_10002B6DC(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((((a1 - 660417817) & 0x275D2D5D ^ 0x127) * (v1 == v2)) ^ a1)) - 4LL))();
}

uint64_t sub_10002B71C@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v4 + v3)) = *(_BYTE *)(v1 + (v4 + v3));
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((529 * (v4 - 1 != v2)) ^ (v5 + 40))) - (v5 ^ 0x2ECu) + 948LL))();
}

uint64_t sub_10002B75C()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1570
                                          * ((((v0 - 696) ^ (*(void *)(v1 + 16) == 0x2E91F1FE0AA58417LL)) & 1) == 0)) ^ v0))
                            - 12LL))();
}

uint64_t sub_10002B7A0@<X0>(uint64_t a1@<X8>, int a2, int a3)
{
  *(_DWORD *)(a1 - 0x2E91F1FE0AA58417LL) = a3;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL * ((980 * (*(void *)(v4 + 24) != 0x5412677448247A30LL)) ^ (v3 - 612)))
                            - 8LL))();
}

void sub_10002B7F8(uint64_t a1@<X8>)
{
  *(void *)(a1 - 0x5412677448247A30LL) = v2;
  *(_DWORD *)(v1 + 32) = 1645153785;
}

void sub_10002B894(uint64_t a1)
{
  int v1 = 1759421093 * (((a1 | 0x9EBEB665) - a1 + (a1 & 0x6141499A)) ^ 0x2DC30631);
  int v2 = *(_DWORD *)(a1 + 16) + v1;
  __asm { BR              X14 }

uint64_t sub_10002B95C@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = 108757529 * ((1436736608 - (&v7 | 0x55A2DC60) + (&v7 | 0xAA5D239F)) ^ 0x4AC141B4);
  uint64_t v8 = v1;
  int v7 = v5 + v3 + 163;
  unsigned int v9 = (v2 - ((((739 * (v3 ^ 0x312)) ^ 0xED4E0848) + v4) & 0xC39B409E) + 1484039958) ^ v5;
  return ((uint64_t (*)(int *))(*(void *)(a1 + 8LL * (v3 ^ 0x38E)) - 8LL))(&v7);
}

void sub_10002BAD0(uint64_t a1, uint64_t a2)
{
  **(_DWORD **)(a1 + 96) = *(_DWORD *)(a2 + 16);
  int v3 = 1178560073 * ((&v5 - 1556789680 - 2 * ((unint64_t)&v5 & 0xA3354650)) ^ 0x19A13E32);
  int v5 = 1076023948 - v3;
  uint64_t v6 = &STACK[0x5C6940C6B1BC70A6];
  int v7 = 1172345435 - v3;
  sub_1000167EC((uint64_t)&v5);
  __asm { BR              X9 }

uint64_t sub_10002BC74()
{
  unsigned int v5 = v1 - 2147479261;
  if (v5 <= 0x40) {
    unsigned int v5 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((659 * (v4 - v0 - v2 + v5 > 0xE)) ^ 0x492u)) - 12LL))();
}

uint64_t sub_10002BCE0(unsigned int a1)
{
  int v7 = v2 + v1;
  int v8 = v7 - 2147479261;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((11 * (v6 - v7 >= (v4 + v8))) ^ a1)) - 12LL))();
}

uint64_t sub_10002BD28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23)
{
  return ((uint64_t (*)(void))(*(void *)(v25
                                        + 8LL
                                        * ((46
}

uint64_t sub_10002BD90@<X0>(int a1@<W8>)
{
  int v7 = 638 * (v4 ^ 0x517);
  v8.i64[0] = 0x6464646464646464LL;
  v8.i64[1] = 0x6464646464646464LL;
  v9.i64[0] = 0x3232323232323232LL;
  v9.i64[1] = 0x3232323232323232LL;
  *(int8x16_t *)(v2 + a1 + (v7 ^ 0x17D ^ (v1 + 897))) = vaddq_s8( vsubq_s8(*v6, vandq_s8(vaddq_s8(*v6, *v6), v8)),  v9);
}

void sub_10002BE14()
{
}

uint64_t sub_10002BE20(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4
                                                               + 8LL
                                                               * (((((v3 - 1867562114) & 0x50B70A) + 879) * (v1 == v2)) ^ v3))
                                                   - (v3
                                                    - 735)
                                                   + 670LL))( a1,  2427853056LL);
}

uint64_t sub_10002BE70@<X0>( int a1@<W1>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17)
{
  *(&a17 + (a2 + v17)) = *(_BYTE *)(v18 + v21 - 1473562207)
  return ((uint64_t (*)(void))(*(void *)(v20 + 8LL * ((107 * ((a1 + a2 + 49) > 0x3F)) ^ v19)) - 12LL))();
}

uint64_t sub_10002BEE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, int32x4_t a41, int32x4_t a42, int32x4_t a43, int32x4_t a44)
{
  uint64_t v120 = v45;
  int v52 = (uint64_t (*)(__n128, __n128, __n128, __n128, __n128))(*(void *)(v46 + 8LL * v44) - 4LL);
  v53.n128_u64[0] = 0x3232323232323232LL;
  v53.n128_u64[1] = 0x3232323232323232LL;
  __n128 v54 = (__n128)vdupq_n_s32(0x620F0DFFu);
  __n128 v55 = (__n128)vdupq_n_s32(0x620F0DF9u);
  uint64_t v123 = v51 - 16;
  v56.n128_u64[0] = 0x6464646464646464LL;
  v56.n128_u64[1] = 0x6464646464646464LL;
  __n128 v57 = (__n128)vdupq_n_s32(0xC41E1BF2);
  HIDWORD(a13) = a13 + 972540699;
  uint64_t v58 = HIDWORD(a31);
  uint64_t v59 = a33;
  int v60 = BYTE4(a34) ^ 0x5F;
  HIDWORD(amemset((void *)(v1 - 204), 50, 16) = BYTE4(a34) ^ 0x5F;
  if (v60 == 2)
  {
    unint64_t v121 = __PAIR64__(a32, HIDWORD(a31));
    unint64_t v122 = __PAIR64__(a33, HIDWORD(a32));
    int8x16x4_t v125 = vld4q_s8((const char *)&a22 + 4);
    int v94 = a6 + a5 + 337;
    LODWORD(amemset((void *)(v1 - 204), 50, 16) = HIDWORD(a33);
    uint8x16_t v95 = (uint8x16_t)veorq_s8(v125.val[0], (int8x16_t)v53);
    uint16x8_t v96 = vmovl_u8(*(uint8x8_t *)v95.i8);
    uint16x8_t v97 = vmovl_high_u8(v95);
    uint8x16_t v98 = (uint8x16_t)veorq_s8(v125.val[1], (int8x16_t)v53);
    _Q22 = vmovl_u8(*(uint8x8_t *)v98.i8);
    _Q21 = vmovl_high_u8(v98);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }

    uint8x16_t v103 = (uint8x16_t)veorq_s8(v125.val[2], (int8x16_t)v53);
    uint16x8_t v104 = vmovl_high_u8(v103);
    uint16x8_t v105 = vmovl_u8(*(uint8x8_t *)v103.i8);
    v125.val[0] = veorq_s8(v125.val[3], (int8x16_t)v53);
    v125.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v125.val[0]);
    v125.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v125.val[1]);
    v125.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v125.val[1].i8);
    v125.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v125.val[0].i8);
    v125.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v125.val[0]);
    v125.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v125.val[0].i8);
    int32x4_t v106 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v105.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.i8), 0x18uLL)),  v125.val[0]);
    int32x4_t v107 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v105, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v96), 0x18uLL)),  v125.val[3]);
    int32x4_t v108 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v104.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8), 0x18uLL)),  v125.val[1]);
    int32x4_t v109 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v104, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v97), 0x18uLL)),  v125.val[2]);
    v125.val[0] = veorq_s8( vandq_s8((int8x16_t)v106, (int8x16_t)v54),  (int8x16_t)(*(_OWORD *)v125.val & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v125.val[3] = veorq_s8( vandq_s8((int8x16_t)v107, (int8x16_t)v54),  (int8x16_t)(*(_OWORD *)&v125.val[3] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v125.val[1] = veorq_s8( vandq_s8((int8x16_t)v108, (int8x16_t)v54),  (int8x16_t)(*(_OWORD *)&v125.val[1] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v125.val[2] = veorq_s8( vandq_s8((int8x16_t)v109, (int8x16_t)v54),  (int8x16_t)(*(_OWORD *)&v125.val[2] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    a43 = vaddq_s32(vsubq_s32(v108, vaddq_s32((int32x4_t)v125.val[1], (int32x4_t)v125.val[1])), (int32x4_t)v55);
    a44 = vaddq_s32(vsubq_s32(v109, vaddq_s32((int32x4_t)v125.val[2], (int32x4_t)v125.val[2])), (int32x4_t)v55);
    a41 = vaddq_s32(vsubq_s32(v106, vaddq_s32((int32x4_t)v125.val[0], (int32x4_t)v125.val[0])), (int32x4_t)v55);
    a42 = vaddq_s32(vsubq_s32(v107, vaddq_s32((int32x4_t)v125.val[3], (int32x4_t)v125.val[3])), (int32x4_t)v55);
    uint64_t v110 = v94 ^ 0x184u;
    uint64_t v111 = (_DWORD *)&a41 + v49 + 1580584629;
    int v112 = *(v111 - 8) ^ *(v111 - 3);
    uint64_t v113 = v110 ^ (v50 + 340);
    uint64_t v114 = *(v111 - 16);
    int v115 = v114 ^ *(v111 - 14) ^ (v112 + v113 - ((2 * v112) & 0xC41E1BF2));
    HIDWORD(v117) = v115 ^ v50;
    LODWORD(v117) = v115;
    int v116 = v117 >> 31;
    uint64_t v118 = (v50 + v116);
    *uint64_t v111 = v118 - ((2 * v116) & 0xC41E1BF2);
    int v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 + 8LL * ((1617 * (v51 != 1580584566)) ^ v94)) - 12LL);
    return v119( v110,  1580584630LL,  v58,  v59,  v119,  v118,  v114,  v113,  a9,  a10,  a11,  a12,  a13,  a14,  v120,  a16,  v121,  v122,  v52,  v123,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40);
  }

  else if (v60 == 1)
  {
    int8x16x4_t v124 = vld4q_s8((const char *)&a22 + 4);
    uint64_t v61 = 41 * (a5 ^ (a5 - 13));
    uint8x16_t v62 = (uint8x16_t)veorq_s8(v124.val[0], (int8x16_t)v53);
    uint16x8_t v63 = vmovl_high_u8(v62);
    int8x16_t v64 = (int8x16_t)vmovl_high_u16(v63);
    uint16x8_t v65 = vmovl_u8(*(uint8x8_t *)v62.i8);
    int8x16_t v66 = (int8x16_t)vmovl_high_u16(v65);
    uint8x16_t v67 = (uint8x16_t)veorq_s8(v124.val[1], (int8x16_t)v53);
    uint16x8_t v68 = vmovl_u8(*(uint8x8_t *)v67.i8);
    uint16x8_t v69 = vmovl_high_u8(v67);
    int8x16_t v70 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v68.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v65.i8));
    int8x16_t v71 = vorrq_s8((int8x16_t)vshll_high_n_u16(v68, 8uLL), v66);
    int8x16_t v72 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v69.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v63.i8));
    int8x16_t v73 = vorrq_s8((int8x16_t)vshll_high_n_u16(v69, 8uLL), v64);
    uint8x16_t v74 = (uint8x16_t)veorq_s8(v124.val[2], (int8x16_t)v53);
    _Q22 = (int8x16_t)vmovl_high_u8(v74);
    _Q21 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v74.i8);
    int8x16_t v77 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    int8x16_t v82 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL);
    __asm { SHLL2           V22.4S, V22.8H, #0x10 }

    v124.val[0] = veorq_s8(v124.val[3], (int8x16_t)v53);
    v124.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v124.val[0].i8);
    v124.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v124.val[0]);
    int32x4_t v83 = (int32x4_t)vorrq_s8( vorrq_s8(v70, v77),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v124.val[1].i8), 0x18uLL));
    v124.val[1] = vorrq_s8( vorrq_s8(v71, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v124.val[1]), 0x18uLL));
    int32x4_t v84 = (int32x4_t)vorrq_s8( vorrq_s8(v72, v82),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v124.val[0].i8), 0x18uLL));
    int32x4_t v85 = (int32x4_t)vorrq_s8( vorrq_s8(v73, _Q22),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v124.val[0]), 0x18uLL));
    a43 = vaddq_s32(vsubq_s32(v84, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v84, v84), (int8x16_t)v57)), (int32x4_t)v55);
    a44 = vaddq_s32(vsubq_s32(v85, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v85, v85), (int8x16_t)v57)), (int32x4_t)v55);
    a41 = vaddq_s32(vsubq_s32(v83, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v83, v83), (int8x16_t)v57)), (int32x4_t)v55);
    a42 = vaddq_s32( vsubq_s32( (int32x4_t)v124.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v124.val[1], (int32x4_t)v124.val[1]), (int8x16_t)v57)),  (int32x4_t)v55);
    int v86 = (HIDWORD(a31) ^ (v47 + (v61 ^ 0x3FF) - 490))
        + ((a33 ^ v47) & (a32 ^ 0xAEC4588A) | (a32 ^ v47) & (HIDWORD(a32) ^ v47))
        - 2059938322
    int v87 = v86 + v47 - (v48 & (2 * v86));
    int v88 = (char *)*(&off_1004EDED0 + (int)(v61 ^ 0x278)) - 4;
    int v89 = (((v87 ^ v47) << (v88[v123 + v49] - 98)) | ((v87 ^ v47) >> (98 - v88[v123 + v49]))) + (a32 ^ v47);
    uint64_t v90 = v48 & (2 * v89);
    uint64_t v91 = v89 + v47 - v90;
    uint64_t v92 = *(uint64_t (**)(char *, uint64_t, void, void, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t (*)(__n128, __n128, __n128, __n128, __n128), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 8LL * (int)(v61 | 0xEA));
    return v92( v88,  v61,  v92,  a33,  v90,  1580584629LL,  HIDWORD(a32),  v91,  a9,  a10,  a11,  a12,  a13,  a14,  v45,  a16,  __PAIR64__(a32, HIDWORD(a31)),  __PAIR64__(a33, HIDWORD(a32)),  v52,  v123,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40);
  }

  else
  {
    HIDWORD(a31) = 2 * (HIDWORD(a31) ^ v47) + v47 - (v48 & (4 * (HIDWORD(a31) ^ v47)));
    LODWORD(a32) = 2 * (a32 ^ v47) + v47 - (v48 & (4 * (a32 ^ v47)));
    HIDWORD(a32) = 2 * (HIDWORD(a32) ^ v47) + v47 - (v48 & (4 * (HIDWORD(a32) ^ v47)));
    LODWORD(a33) = 2 * (a33 ^ v47) + v47 - (v48 & (4 * (a33 ^ v47)));
    return v52(v53, v54, v55, v56, v57);
  }

uint64_t sub_10002CA18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15)
{
  else {
    BOOL v17 = a15 + 1141814776 > v15;
  }
}

uint64_t sub_10002CAAC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

uint64_t sub_10002CAF4( int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return ((uint64_t (*)(void))(*(void *)(v16
                                        + 8LL
                                        * ((460
                                          * (a14
                                           + v15
}

uint64_t sub_10002CB40@<X0>(int a1@<W3>, int a2@<W4>, int a3@<W5>, int a4@<W8>)
{
  *(_BYTE *)(v6 + v8) = *(_BYTE *)(v10 + (v5 + a1))
  return (*(uint64_t (**)(void))(v9 + 8LL * (((v8 + 1 == (a4 ^ (a2 - 57)) + 7LL) * v7) ^ (a3 + a4 + 371))))();
}

uint64_t sub_10002CB90@<X0>( int a1@<W3>, int a2@<W4>, int a3@<W5>, int a4@<W6>, int a5@<W7>, int a6@<W8>, int8x16_t a7@<Q0>, int8x16_t a8@<Q3>)
{
  int8x16_t v12 = *(int8x16_t *)(v11 + v8 + (((a6 ^ (a2 - 3)) * a4) ^ (a1 - 9)));
  *uint64_t v9 = vaddq_s8(vsubq_s8(v12, vandq_s8(vaddq_s8(v12, v12), a8)), a7);
  return (*(uint64_t (**)(void))(v10 + 8LL * (a5 ^ (a3 + a6 + 393))))();
}

uint64_t sub_10002CBF4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  BOOL v16 = v13 + 1674314577 < (a13 + 1505040564);
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * (int)((v16 | (2 * v16)) ^ v14)) - (v14 ^ 0x2B1LL)))();
}

uint64_t sub_10002CC64( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
  uint64_t v34 = (a2 - 113401905) & 0xB7FE76BF;
  int v35 = 628203409 * ((~((v33 - 120) | 0xCC5631E2) + ((v33 - 120) & 0xCC5631E2)) ^ 0xB121C22E);
  int v39 = (a2 + 415) | 0x10;
  *(void *)(v33 - 120) = a11;
  *(_DWORD *)(v33 - 112) = v35 + a2 + 1005;
  *(_DWORD *)(v33 - 108) = a13 - v35 - 1135465194;
  uint64_t v36 = sub_10002B028(v33 - 120);
  uint64_t v37 = a32 & 0x3F;
  *(&a23 + (v37 ^ 0x14)) = -78;
  return ((uint64_t (*)(uint64_t))(*(void *)(v32
}

uint64_t sub_10002CD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
}

uint64_t sub_10002CDB4()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((27 * ((((v1 ^ 0x6B0) - 1006) ^ v0) < 8)) ^ v1)) - 4LL))();
}

uint64_t sub_10002CDEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23)
{
  *(void *)(&a23 + v24 + 1) = 0x3232323232323232LL;
}

uint64_t sub_10002CE38(double a1)
{
  *int v1 = a1;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((v5 == 0) * v4) ^ v2)) - (v3 ^ 0x1DB)))();
}

uint64_t sub_10002CE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v9 + 8LL * (v6 ^ (877 * (v8 != v7))))
                            + 2973505203LL
}

void sub_10002CE98()
{
}

uint64_t sub_10002CEA8@<X0>( int a1@<W0>, int a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, char a18)
{
  BOOL v25 = v18 < v20;
  *(&a18 + 12 * (v21 ^ 0x2BDu) + a3 + v22) = *(_BYTE *)(v24 + (v19 + a2))
  unsigned int v26 = v19 + 1 + a1;
  int v27 = v25 ^ (v26 < v20);
  BOOL v28 = v26 < v18;
  if (!v27) {
    BOOL v25 = v28;
  }
  return ((uint64_t (*)(void))(*(void *)(v23 + 8LL * ((v25 | (2 * v25)) ^ v21)) - 8LL))();
}

uint64_t sub_10002CF24@<X0>(int a1@<W4>, int a2@<W5>, int a3@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((1039 * (a3 - 1370612763 < ((277 * (v4 ^ (a1 - 5))) ^ 0x551u))) ^ (a2 + v4 + 233)))
                            - 12LL))();
}

uint64_t sub_10002CF70@<X0>(unsigned int a1@<W8>)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 - 1370612763LL;
  else {
    uint64_t v5 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (int)((((unint64_t)(v5 - v3 + 1370612763) > 7)
                                               * ((v1 + 1837422910) & 0x927B23FB ^ 0xB5)) | v1))
                            - 12LL))();
}

uint64_t sub_10002CFE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, int a22, char a23)
{
  *(void *)(&a23 + v24 - 1370612763) = 0x3232323232323232LL;
  return ((uint64_t (*)(void))(*(void *)(v26
                                        + 8LL
                                        * ((863 * ((v23 & 0xFFFFFFFFFFFFFFF8LL) == 8)) ^ ((v25 - 1837423955) | 0x29)))
                            - ((((v25 - 1837423955) | 0x29u) + 331) ^ 0x2C4LL)))();
}

uint64_t sub_10002D04C(double a1)
{
  *uint64_t v3 = a1;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((v5 == 0) * v4) ^ v1)) - (v2 ^ 0x2C4)))();
}

uint64_t sub_10002D078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
}

void sub_10002D0B8()
{
}

uint64_t sub_10002D568@<X0>( uint64_t a1@<X2>, char a2@<W4>, char a3@<W5>, unsigned int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31)
{
  int v35 = *((_DWORD *)&a19 + ((v33 + v31) >> (a3 + a2 + v32 + 13 + 35)) + 18);
  *(_BYTE *)(a1 + (v33 + v31 + 1)) = (BYTE2(v35) ^ 0x3B) - ((2 * (BYTE2(v35) ^ 0x3B)) & 0x64) + 50;
  *(_BYTE *)(a1 + (v33 + v31)) = (HIBYTE(v35) ^ 0x51) - ((2 * (HIBYTE(v35) ^ 0x51)) & 0x64) + 50;
  *(_BYTE *)(a1 + (v33 + v31 + 3)) = v35 ^ 0x47;
  *(_BYTE *)(a1 + (v33 + v31 + 2)) = (BYTE1(v35) ^ 0xA7) - ((2 * (BYTE1(v35) ^ 0xA7)) & 0x64) + 50;
  if (v33 + 1230102376 < a4 != a31 - 1338440525 < a4) {
    BOOL v36 = a31 - 1338440525 < a4;
  }
  else {
    BOOL v36 = v33 + 1230102376 < (a31 - 1338440525);
  }
  return ((uint64_t (*)(void))(*(void *)(v34 + 8LL * ((496 * !v36) ^ v32)) - 8LL))();
}

uint64_t sub_10002D658@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, int a34, __int16 a35, char a36, char a37)
{
  unint64_t v38 = ((2LL * (void)&a22) & 0xABEF7EE8F7F2B6F0LL)
  a37 = ((v38 - 58) ^ 0xBA) * (v38 - 41);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 + 8LL * (int)((a5 + a9 - 792) ^ (a5 - 58) ^ a9)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26);
}

void sub_10002D6EC()
{
}

uint64_t sub_10002D6F8()
{
  return 0LL;
}

void sub_10002D738(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0xAE85A791) + (~(_DWORD)a1 | 0x517A586E))) ^ 0xEBEE200C);
  __asm { BR              X10 }

uint64_t sub_10002D7D4@<X0>(uint64_t a1@<X8>)
{
}

uint64_t sub_10002D828@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((v1 + 939) ^ 0x26)) - 4LL))();
}

uint64_t sub_10002D950@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a3
                                        + 8LL
}

uint64_t sub_10002D98C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((1465 * (v1 != 461 * (v2 ^ 0x29C) - 1383)) ^ v2)) - 4LL))();
}

uint64_t sub_10002D9C0@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v3 - 0xC7F991DE6408E15LL) + 4LL * (v2 + v1)) = v4;
  int v6 = v2 + v5 + 712 - 1382;
  *(_DWORD *)(v3 - 0xC7F991DE6408E19LL) = v6;
  int v7 = v6 + v1;
  if (v6 + v1 < 0) {
    int v7 = -v7;
  }
  return (*(uint64_t (**)(void))(a1
                              + 8LL
                              * ((69
                                * ((v7 ^ 0x3D7FACEB)
                                 + (((v5 + 712) ^ 0x7AFF5CB1) & (2 * v7))
                                 - 1031777824
                                 + ((((v5 + 712) ^ 0x5F2) + 123) | 0x24) >= 0)) ^ (v5 + 712) ^ 0x5F2)))();
}

uint64_t sub_10002DA98@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(a2
                              + 8LL
                              * (int)(((*(_DWORD *)(*v4 + 4LL * a1) == v2) * ((v3 + 1043585895) & 0xC1CC2537 ^ 0x4C6)) ^ v3)))();
}

uint64_t sub_10002DAD8@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8LL * ((69 * (v2 - 1 + ((v1 + 123) | 0x24) >= 0)) ^ v1)))();
}

uint64_t sub_10002DB10(uint64_t result)
{
  else {
    int v6 = v5;
  }
  *int v4 = v6;
  *(_DWORD *)(result + 24) = 1261507126;
  return result;
}

void sub_10002DB54(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x5A50E64C) + (~(_DWORD)a1 | 0xA5AF19B3))) ^ 0x1F3B61D1);
  int v2 = *(_DWORD *)(a1 + 40) ^ v1;
  if (*(void *)(a1 + 48) | *(void *)(a1 + 64)) {
    BOOL v3 = *(_DWORD *)(a1 + 24) + v1 == 1354219139;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  __asm { BR              X9 }

uint64_t sub_10002DCAC@<X0>(int a1@<W8>)
{
  BOOL v4 = v1[1] == 0x1171F84DB0CF5C20LL || (v1[7] | v1[4]) == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1402 * (((a1 + 56) ^ v4) & 1)) ^ a1)) - 8LL))();
}

uint64_t sub_10002DD04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, char a30, uint64_t a31, char a32)
{
  uint64_t v37 = *(void *)(v35 + 72);
  *(_DWORD *)(v33 - 0x1171F84DB0CF5C20LL) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8LL * ((2043 * (v37 != 0xC7F991DE6408E1DLL)) ^ v32)))( v37,  0x7542B2AE5773797LL,  &a25,  &a30,  &a32,  &a28,  &a20,  0xC7F991DE6408E1DLL,  a9,  a10,  v34);
}

uint64_t sub_10002DDA0@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int a8@<W8>, uint64_t a9, uint64_t a10)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8LL * (((a8 - 925) * (v10 == 0)) ^ (a8 - 363))) - ((a8 + 1873335829) & 0x905726BF ^ 0x86LL)))( a3 + a7,  a1,  a2,  a3,  a4,  a5,  a6,  a7,  a9,  a10);
}

uint64_t sub_10002DEEC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v27 = v18 ^ 0x6A4;
  int v28 = ((v26 - 1956630864 - 2 * ((v26 - 144) & 0x8B602F40)) ^ 0x31F45722) * v19;
  *(_DWORD *)(v26 - 1memset((void *)(v1 - 204), 50, 16) = v28 + v21 + (v18 ^ 0x9796BF8);
  *(void *)(v26 - 136) = v20;
  *(void *)(v26 - 128) = a1;
  *(_DWORD *)(v26 - 144) = v28 + v18 + 166;
  ((void (*)(uint64_t))(*(void *)(v22 + 8LL * (v18 - 21)) - 12LL))(v26 - 144);
  *(void *)(v26 - 144) = v23;
  *(void *)(v26 - 136) = a16;
  *(_DWORD *)(v26 - 128) = (v27 - 44) ^ (628203409
                                       * ((((2 * (v26 - 144)) | 0x6174B83A) - (v26 - 144) + 1329964003) ^ 0x3232502E));
  ((void (*)(uint64_t))(*(void *)(v22 + 8LL * (v27 - 1446)) - 12LL))(v26 - 144);
  *(void *)(v26 - 144) = a17;
  *(void *)(v26 - 136) = a16;
  *(_DWORD *)(v26 - 128) = v27
                         + 1374699841 * (((~(v26 - 144) & 0xF8095E0E) - (~(v26 - 144) | 0xF8095E0F)) ^ 0x95FD4606)
                         - 507;
  *(void *)(v26 - 112) = a15;
  *(void *)(v26 - 104) = v23;
  *(void *)(v26 - 120) = a18;
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v22 + 8LL * (v27 - 1361)))(v26 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v24
                                                      + 8LL
}

uint64_t sub_10002E0EC()
{
  int v6 = 535753261 * (((((v5 - 144) | 0x615B03DC) ^ 0xFFFFFFFE) - (~(v5 - 144) | 0x9EA4FC23)) ^ 0x9450F20C);
  *(_DWORD *)(v5 - 144) = (v2 - 1439 + v1 - 510816560) ^ v6;
  *(_DWORD *)(v5 - 128) = v2 - 1439 - v6 + 289;
  *(void *)(v5 - 120) = v3;
  *(void *)(v5 - 136) = v8;
  uint64_t result = ((uint64_t (*)(uint64_t))(*(void *)(v4 + 8LL * (v2 - 1462)) - 8LL))(v5 - 144);
  *uint64_t v10 = v9;
  *unsigned int v0 = 1645153785;
  return result;
}

void sub_10002E240(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (1755732067 * (((a1 | 0x83D72B3C) - (a1 & 0x83D72B3C)) ^ 0x5D1196E7));
  uint64_t v2 = *(void *)(a1 + 8);
  v3[0] = v1 + 628203409 * (((v3 | 0xF56E3C19) + (~v3 | 0xA91C3E6)) ^ 0x77E6302B) - 501;
  uint64_t v4 = v2;
  sub_10001A608((uint64_t)v3);
  __asm { BR              X9 }

uint64_t sub_10002E378@<X0>(uint64_t a1@<X8>)
{
  unsigned int v5 = (((v4 ^ v3) >> 4) & 0xFFF6EF8 ^ 0x5AA4270) + (((v4 ^ v3) >> 5) ^ 0x6D2A9EC5) - 375855535;
  BOOL v7 = v5 > v1 + 1503173062 && v5 < v2 + 1503174093;
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((948 * v7) ^ v1)) - (((v1 - 882) | 0xAu) ^ 0x92LL)))();
}

uint64_t sub_10002E400@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
}

uint64_t sub_10002E448@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                                     + 8LL
                                                     * (((((v2 ^ 0x2B) + 325) ^ (v2 + 289))
}

void sub_10002E4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v13 = v5 + 1879029627;
  uint64_t v14 = *(void *)(v11 - 0xC7F991DE6408E15LL);
  unsigned int v15 = (*(_DWORD *)(v14 + 4LL * (v12 - 1)) ^ (a5 + v7 - 1030)) >> v6;
  uint64_t v16 = 4LL * v13;
  *(_DWORD *)(v14 + vmemset((void *)(v1 - 204), 50, 16) = v15 + v7 - (v8 & (2 * v15));
  int v17 = v18 - (*(_DWORD *)(*(void *)(v11 - 0xC7F991DE6408E15LL) + v16) == v7);
  *int v9 = v17;
}

void sub_10002E768(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_10002E7DC@<X0>(int a1@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((2
                                          * (((a1 - 1206753083) ^ 0x7FFF75CFFFFAEFB9LL)
                                           - 0x7FFF75CF03D79510LL
}

uint64_t sub_10002E870()
{
  int v6 = *(unsigned __int8 *)(v4 + v3 - 0x2500E162B343AFF1LL) - *(unsigned __int8 *)(v1 + v3 - 0x2500E162B343AFF1LL);
  return ((uint64_t (*)(uint64_t))(*(void *)(v5
                                                      + 8LL
                                                      * (((((((2 * v2) ^ 0x61E) - 1769999280) & (2 * v6)) + (v6 ^ v0) == v0)
                                                        * (v2 ^ 0x41C)) ^ v2))
                                          - 8LL))(4294925278LL);
}

uint64_t sub_10002E8D8()
{
  BOOL v5 = v1 < v0;
  if (v5 == v2 - 0x2500E161B7205547LL < v0) {
    BOOL v5 = v2 - 0x2500E161B7205547LL < v1;
  }
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (v3 ^ (2 * !v5))) - (v3 ^ 0x2E5u) + 929LL))();
}

uint64_t sub_10002E940@<X0>(int a1@<W8>)
{
}

uint64_t sub_10002E994()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((1697
                                          * (((2 * (*v0 - 42)) & 0xEDBE4FCE) + ((*v0 - 42) ^ 0x76DF27E7) == 1994336231)) ^ v1))
                            - ((v1 - 38) | 0x25u)
                            + 491LL))();
}

uint64_t sub_10002E9FC()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1010
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 1) - 134)))
}

uint64_t sub_10002EA4C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1360
                                          * ((((*(unsigned __int8 *)(v2 + 2) - 72) << (v3 + 9)) & v1)
}

uint64_t sub_10002EAAC()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((2015
                                          * (((((v3 - 257) | 0x100) ^ (v1 - 405)) & (2
                                                                                   * (*(unsigned __int8 *)(v2 + 3) - 134)))
}

uint64_t sub_10002EAFC()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1473
                                          * ((((*(unsigned __int8 *)(v2 + 4) - 247) << (v3 + 9)) & v1)
}

uint64_t sub_10002EB48(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((2026
                                          * (((((v3 - 115) | 0x72) ^ a1) & (2 * (*(unsigned __int8 *)(v2 + 5) - 13)))
}

uint64_t sub_10002EB98()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 6) - 1)))
                                           + ((*(unsigned __int8 *)(v2 + 6) - 1) ^ v0) == v0)
                                          * (((v3 - 152) | 0x97) + 908)) ^ v3))
                            - 12LL))();
}

uint64_t sub_10002EBE4()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1901
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v2 + 7) - 1)))
}

uint64_t sub_10002EC30()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v2 + 8) - 4)))
                                           + ((*(unsigned __int8 *)(v2 + 8) - 4) ^ v0) == v0)
                                          * (((v3 - 4) | 3) ^ 0x383)) ^ v3))
                            - 12LL))();
}

uint64_t sub_10002EC7C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v5 + 96) + 1428LL) = 527506314;
}

uint64_t sub_10002ECE0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((11
                                          * ((v3 & (2 * (**(unsigned __int8 **)(a2 + 8) - 42)))
}

uint64_t sub_10002ED28()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((907
                                          * ((((*(unsigned __int8 *)(v3 + 1) - 134) << (v2 ^ 0xF6)) & v1)
}

uint64_t sub_10002ED6C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0)
                                          * ((66 * (v2 ^ 0x1F3)) ^ 0x2E3)) ^ v2))
                            - 12LL))();
}

uint64_t sub_10002EDB4()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1925
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 3) - 134)))
}

uint64_t sub_10002EE08()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((((v1 & (2 * (*(unsigned __int8 *)(v3 + 4) - 247)))
                                           + ((*(unsigned __int8 *)(v3 + 4) - 247) ^ v0) == v0)
                                          * (v2 + 1339)) ^ v2))
                            - 12LL))();
}

uint64_t sub_10002EE40()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * (int)((1627
                                               * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
}

uint64_t sub_10002EE84(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1809
                                          * ((v2 & (2 * (*(unsigned __int8 *)(v4 + 6) - 1)))
}

uint64_t sub_10002EEC4()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1896
                                          * (((v2 ^ 0xFF ^ (v1 - 264)) & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
}

uint64_t sub_10002EF04()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((637
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 8) - 5)))
                                           + ((*(unsigned __int8 *)(v3 + 8) - 5) ^ v0) == v0
                                                                                        + ((v2 + 340298752) & 0xEBB7735B)
                                                                                        - 339)) ^ v2))
                            - 12LL))();
}

uint64_t sub_10002EF5C(int a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(v4 + 96) + 1428LL) = 527506318;
}

uint64_t sub_10002EFAC(uint64_t a1, uint64_t a2)
{
  int v6 = **(unsigned __int8 **)(a2 + 8) - 42;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (((((v6 << (31 * (v4 ^ 1) - 22)) & v3) + (v6 ^ v2) != v2) * ((v4 ^ 0x101) + 22)) ^ v4))
                            - 12LL))();
}

uint64_t sub_10002F000()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1370
                                          * (((v1 + ((v2 + 1269073064) & 0xB45B7B7F) - 319) & (2
                                                                                             * (*(unsigned __int8 *)(v3 + 1)
                                                                                              - 134)))
}

uint64_t sub_10002F054()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((177
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 2) - 72)))
                                           + ((*(unsigned __int8 *)(v3 + 2) - 72) ^ v0) == v0)) ^ v2))
}

uint64_t sub_10002F090()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((1410
                                          * (((v1 + v3 - 319) & (2 * (*(unsigned __int8 *)(v4 + 3) - 134)))
}

uint64_t sub_10002F0CC()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1878
                                          * ((((*(unsigned __int8 *)(v3 + 4) - 247) << (((v2 + 104) & 0xBF) - 62)) & v1)
}

uint64_t sub_10002F120()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((203
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v3 + 5) - 13)))
}

uint64_t sub_10002F160()
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((828
                                          * ((v1 & (2 * (*(unsigned __int8 *)(v4 + 6) + (v3 ^ 0xFFFFFEC0))))
}

uint64_t sub_10002F19C()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1128
                                          * (((v1 + (v2 ^ 0x28) - 319) & (2 * (*(unsigned __int8 *)(v3 + 7) - 1)))
}

uint64_t sub_10002F1E0()
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1792
                                          * ((((11 * (v2 ^ 0x10A)) ^ (v1 - 221)) & (2
                                                                                  * (*(unsigned __int8 *)(v3 + 8) - 11)))
}

uint64_t sub_10002F22C@<X0>(int a1@<W8>)
{
  int v5 = (v1 ^ 0x44) + 319;
  *(_DWORD *)(*(void *)(v3 + 96) + 1428LL) = 527506330;
  char v6 = (v1 ^ 0x44) - 54;
  int v7 = 1178560073 * ((2 * ((v4 - 120) & 0x128615B8) - (v4 - 120) - 310777277) ^ 0x57ED9221);
  *(void *)(v4 - 112) = v4 + 0x5C6940C6B1BC6F5ELL;
  *(_DWORD *)(v4 - 120) = (((v5 ^ 0x583) + 776745519) ^ (a1 - 1)) - v7;
  *(_DWORD *)(v4 - 104) = v5 - v7 + 1172344777;
  uint64_t v8 = sub_1000167EC(v4 - 120);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8LL
                                                     * ((1410
                                                       * (*(_DWORD *)v3
                                                        - 165236985
                                                        + ((*(_DWORD *)(v4 - 152) << (v6 ^ 0x1C)) & 0x7A ^ 0x28)
                                                        + (*(_DWORD *)(v4 - 152) & 0x3F ^ 0xA7ED9FA9) < 0xFFFFFFC0)) ^ v5)))( v8,  313836798LL);
}

uint64_t sub_10002F404( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21)
{
  unsigned int v26 = v22 + 1477599300;
  if (v26 <= 0x40) {
    unsigned int v26 = 64;
  }
  return ((uint64_t (*)(void))(*(void *)(v24
                                        + 8LL * (a21 ^ (8 * (-v21 - v23 + ((a21 - 1020) ^ (a8 - 787)) + v26 > 0xE))))
                            + 1267140513LL
                            - (a21 ^ (v25 - 1777))))();
}

uint64_t sub_10002F484(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v13 = v9 + v8;
  int v14 = v13 + a2;
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * (int)(((((a1 + 757975018) & 0xD2D235E5) - 167)
}

uint64_t sub_10002F4FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(void))(v15
                              + 8LL
                              * ((19
                                * (a13
                                 + v16
                                 - 220
                                 + (unint64_t)(v13 + ((v14 - 275302696) & 0x5BEFCFE7 ^ 0x139567E6u)) > 0xF)) ^ v14)))();
}

uint64_t sub_10002F550@<X0>(int a1@<W4>, int a2@<W8>)
{
  v8.i64[0] = 0x6464646464646464LL;
  v8.i64[1] = 0x6464646464646464LL;
  v9.i64[0] = 0x3232323232323232LL;
  v9.i64[1] = 0x3232323232323232LL;
  *(int8x16_t *)(v4 + a2 + ((a1 + v3 + 708) ^ (v2 + 787))) = vaddq_s8( vsubq_s8( *v7,  vandq_s8(vaddq_s8(*v7, *v7), v8)),  v9);
  return (*(uint64_t (**)(int8x16_t *))(v6
                                                + 8LL * ((105 * (((v5 + 1) & 0x1FFFFFFF0LL) == 16)) ^ (a1 + v3 + 1588))))(v7 + 1);
}

void sub_10002F5BC()
{
}

uint64_t sub_10002F5C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
}

uint64_t sub_10002F60C@<X0>(int a1@<W4>, int a2@<W6>, uint64_t a3@<X8>)
{
  *(_BYTE *)(v8 - 220 + (((v5 - v9 + 30) ^ 0xFFFFFFE1LL) & (a3 + v3))) = *(_BYTE *)(v4 + v7 - 313836798)
                                                                                     - ((2
                                                                                       * *(_BYTE *)(v4 + v7 - 313836798)) & 0x64)
                                                                                     + 50;
}

uint64_t sub_10002F688( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, int a16, int a17, int a18, int a19, int a20, int a21, int a22, int a23, uint64_t (*a24)(void, __n128, __n128, __n128, __n128, __n128, __n128), int a25, int a26, uint64_t a27, uint64_t a28, int32x4_t a29, int32x4_t a30, int32x4_t a31, int32x4_t a32)
{
  __int128 v42 = *(uint64_t (**)(void, __n128, __n128, __n128, __n128, __n128, __n128))(v33 + 8LL * v32);
  a19 = a13 - 1361199332;
  a18 = ((v32 + 184812002) | v37) ^ 0x5B4E77BD;
  int v43 = (const char *)(v40 - 220);
  __n128 v44 = (__n128)vdupq_n_s32(0x620F0DFFu);
  v45.n128_u64[0] = 0x3232323232323232LL;
  v45.n128_u64[1] = 0x3232323232323232LL;
  __n128 v46 = (__n128)vdupq_n_s32(0x620F0DF9u);
  a27 = v36 - 16;
  v47.n128_u64[0] = 0x6464646464646464LL;
  v47.n128_u64[1] = 0x6464646464646464LL;
  v48.n128_u64[0] = 0x3333333333333333LL;
  v48.n128_u64[1] = 0x3333333333333333LL;
  __n128 v49 = (__n128)vdupq_n_s32(0xC41E1BF2);
  int v50 = (v41 + 1997669178) & 0x3D66F774;
  a25 = v50 ^ 0x239;
  a26 = v35 - 374;
  int v51 = *(_DWORD *)(v40 - 148);
  int v52 = *(_DWORD *)(v40 - 144);
  int v54 = *(_DWORD *)(v40 - 140);
  int v53 = *(_DWORD *)(v40 - 136);
  int v55 = *(_BYTE *)(v40 - 124) ^ 0x5F;
  a17 = *(unsigned __int8 *)(v40 - 124) ^ 0x5F;
  if (v55 == 2)
  {
    a20 = v51;
    a21 = v52;
    a22 = v54;
    a23 = v53;
    a24 = v42;
    int8x16x4_t v100 = vld4q_s8(v43);
    a16 = *(_DWORD *)(v40 - 132);
    uint8x16_t v80 = (uint8x16_t)veorq_s8(v100.val[0], (int8x16_t)v45);
    uint16x8_t v81 = vmovl_u8(*(uint8x8_t *)v80.i8);
    uint16x8_t v82 = vmovl_high_u8(v80);
    uint8x16_t v83 = (uint8x16_t)veorq_s8(v100.val[1], (int8x16_t)v45);
    _Q23 = vmovl_u8(*(uint8x8_t *)v83.i8);
    _Q22 = vmovl_high_u8(v83);
    __asm
    {
      SHLL2           V24.4S, V22.8H, #0x10
      SHLL2           V25.4S, V23.8H, #0x10
    }

    uint8x16_t v88 = (uint8x16_t)veorq_s8(v100.val[2], (int8x16_t)v45);
    uint16x8_t v89 = vmovl_high_u8(v88);
    uint16x8_t v90 = vmovl_u8(*(uint8x8_t *)v88.i8);
    v100.val[0] = veorq_s8(v100.val[3], (int8x16_t)v45);
    v100.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v100.val[0]);
    v100.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v100.val[1]);
    v100.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v100.val[1].i8);
    v100.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v100.val[0].i8);
    v100.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v100.val[0]);
    v100.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v100.val[0].i8);
    int32x4_t v91 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q23.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v90.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8), 0x18uLL)),  v100.val[0]);
    int32x4_t v92 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q25, (int8x16_t)vshll_high_n_u16(v90, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v81), 0x18uLL)),  v100.val[3]);
    int32x4_t v93 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v89.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8), 0x18uLL)),  v100.val[1]);
    int32x4_t v94 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v89, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v82), 0x18uLL)),  v100.val[2]);
    v100.val[0] = veorq_s8( vandq_s8((int8x16_t)v91, (int8x16_t)v44),  (int8x16_t)(*(_OWORD *)v100.val & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v100.val[3] = veorq_s8( vandq_s8((int8x16_t)v92, (int8x16_t)v44),  (int8x16_t)(*(_OWORD *)&v100.val[3] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v100.val[1] = veorq_s8( vandq_s8((int8x16_t)v93, (int8x16_t)v44),  (int8x16_t)(*(_OWORD *)&v100.val[1] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v100.val[2] = veorq_s8( vandq_s8((int8x16_t)v94, (int8x16_t)v44),  (int8x16_t)(*(_OWORD *)&v100.val[2] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    a31 = vaddq_s32(vsubq_s32(v93, vaddq_s32((int32x4_t)v100.val[1], (int32x4_t)v100.val[1])), (int32x4_t)v46);
    a32 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v100.val[2], (int32x4_t)v100.val[2])), (int32x4_t)v46);
    a29 = vaddq_s32(vsubq_s32(v91, vaddq_s32((int32x4_t)v100.val[0], (int32x4_t)v100.val[0])), (int32x4_t)v46);
    a30 = vaddq_s32(vsubq_s32(v92, vaddq_s32((int32x4_t)v100.val[3], (int32x4_t)v100.val[3])), (int32x4_t)v46);
    uint8x16_t v95 = (_DWORD *)&a29 + v39 + 1485875768;
    int v96 = *(v95 - 8) ^ *(v95 - 3);
    unsigned int v97 = *(v95 - 16) ^ *(v95 - 14) ^ (v96 + v34 - ((2 * v96) & 0xC41E1BF2));
    HIDWORD(v98) = v97 ^ v34;
    LODWORD(v98) = v97;
    *uint8x16_t v95 = (v98 >> 31) + v34 - ((2 * (v98 >> 31)) & 0xC41E1BF2);
    return ((uint64_t (*)(uint64_t))(*(void *)(v33
                                                        + 8LL
                                                        * (((4 * (v36 != 1485875705)) | (16 * (v36 != 1485875705))) ^ (a5 + v41 + 950)))
                                            - 8LL))(150LL);
  }

  else if (v55 == 1)
  {
    a20 = v51;
    a21 = v52;
    a22 = v54;
    a23 = v53;
    a24 = v42;
    int8x16x4_t v99 = vld4q_s8(v43);
    uint8x16_t v56 = (uint8x16_t)veorq_s8(v99.val[0], (int8x16_t)v45);
    uint16x8_t v57 = vmovl_high_u8(v56);
    int8x16_t v58 = (int8x16_t)vmovl_high_u16(v57);
    uint16x8_t v59 = vmovl_u8(*(uint8x8_t *)v56.i8);
    int8x16_t v60 = (int8x16_t)vmovl_high_u16(v59);
    uint8x16_t v61 = (uint8x16_t)veorq_s8(v99.val[1], (int8x16_t)v45);
    uint16x8_t v62 = vmovl_u8(*(uint8x8_t *)v61.i8);
    uint16x8_t v63 = vmovl_high_u8(v61);
    int8x16_t v64 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v62.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8));
    int8x16_t v65 = vorrq_s8((int8x16_t)vshll_high_n_u16(v62, 8uLL), v60);
    int8x16_t v66 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v63.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v57.i8));
    int8x16_t v67 = vorrq_s8((int8x16_t)vshll_high_n_u16(v63, 8uLL), v58);
    uint8x16_t v68 = (uint8x16_t)veorq_s8(v99.val[2], (int8x16_t)v45);
    _Q23 = (int8x16_t)vmovl_high_u8(v68);
    _Q22 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v68.i8);
    int8x16_t v71 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL);
    __asm { SHLL2           V22.4S, V22.8H, #0x10 }

    int8x16_t v76 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q23.i8, 0x10uLL);
    __asm { SHLL2           V23.4S, V23.8H, #0x10 }

    v99.val[0] = veorq_s8(v99.val[3], (int8x16_t)v45);
    v99.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v99.val[0].i8);
    v99.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v99.val[0]);
    int32x4_t v77 = (int32x4_t)vorrq_s8( vorrq_s8(v64, v71),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v99.val[1].i8), 0x18uLL));
    v99.val[1] = vorrq_s8( vorrq_s8(v65, _Q22),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v99.val[1]), 0x18uLL));
    int32x4_t v78 = (int32x4_t)vorrq_s8( vorrq_s8(v66, v76),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v99.val[0].i8), 0x18uLL));
    v99.val[0] = vorrq_s8( vorrq_s8(v67, _Q23),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v99.val[0]), 0x18uLL));
    a31 = vaddq_s32(vsubq_s32(v78, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v78, v78), (int8x16_t)v49)), (int32x4_t)v46);
    a32 = vaddq_s32( vsubq_s32( (int32x4_t)v99.val[0],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v99.val[0], (int32x4_t)v99.val[0]), (int8x16_t)v49)),  (int32x4_t)v46);
    a29 = vaddq_s32(vsubq_s32(v77, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v77, v77), (int8x16_t)v49)), (int32x4_t)v46);
    a30 = vaddq_s32( vsubq_s32( (int32x4_t)v99.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v99.val[1], (int32x4_t)v99.val[1]), (int8x16_t)v49)),  (int32x4_t)v46);
    return ((uint64_t (*)(uint64_t, __n128))(*(void *)(v33
                                                                + 8LL * ((1059 * (a27 + 1 == v36)) ^ v50))
                                                    - 12LL))( 150LL,  v44);
  }

  else
  {
    *(_DWORD *)(v40 - 148) = 2 * (v51 ^ v35) + v35 - (v38 & (4 * (v51 ^ v35)));
    *(_DWORD *)(v40 - 144) = 2 * (v52 ^ v35) + v35 - (v38 & (4 * (v52 ^ v35)));
    *(_DWORD *)(v40 - 140) = 2 * (v54 ^ v35) + v35 - (v38 & (4 * (v54 ^ v35)));
    *(_DWORD *)(v40 - 136) = 2 * (v53 ^ v35) + v35 - (v38 & (4 * (v53 ^ v35)));
    return v42(150LL, v44, v45, v46, v47, v48, v49);
  }

uint64_t sub_100030220( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, unsigned int a16, unsigned int a17)
{
  else {
    BOOL v19 = a14 - 32199846 > a17;
  }
  return (*(uint64_t (**)(void))(v17
                              + 8LL * ((!v19 * (((95 * (v18 ^ (v18 + 1)) - 219) | 0x680) ^ 0x6F1)) ^ (a5 + v18 + 577))))();
}

uint64_t sub_1000302BC(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * (((((v4 + 1208417726) | 0x3800325) ^ (v6 - 32))
}

uint64_t sub_100030308( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return ((uint64_t (*)(void))(*(void *)(v15
                                        + 8LL
                                        * ((477
                                          * (a13
                                           + v13
                                           - (unint64_t)(a2
                                                              + (v14 ^ (v16 - 1598))
                                                              + ((v14 - 71884507) & 0x4FCFDFBDu)
                                                              + 1446849464) > 0xF)) ^ v14))
                            - 4LL))();
}

uint64_t sub_10003036C( double a1, double a2, double a3, int8x16_t a4, int8x16_t a5, uint64_t a6, int a7, uint64_t a8, int a9, int a10)
{
  *int v10 = vaddq_s8( vaddq_s8(*(int8x16_t *)(v13 + (a7 + a9)), a5),  vmvnq_s8( vandq_s8( vaddq_s8(*(int8x16_t *)(v13 + (a7 + a9)), *(int8x16_t *)(v13 + (a7 + a9))),  a4)));
  return ((uint64_t (*)(void))(*(void *)(v12 + 8LL * (a10 + v11 + 269)) - 8LL))();
}

uint64_t sub_1000303D0@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, int a4@<W4>, uint64_t a5@<X8>)
{
  *(_BYTE *)(v6 + a5) = *(_BYTE *)(v9 + (a2 + a3))
  return ((uint64_t (*)(void))(*(void *)(v8
}

uint64_t sub_100030424( uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  BOOL v15 = a2 + 1583058440 < (a13 + 254059018);
  return (*(uint64_t (**)(void))(v13 + 8LL * (int)((v15 * (((v14 + 220361917) & 0xF2DD8B2F) - 214)) ^ v14)))();
}

uint64_t sub_100030498( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v16 = 628203409 * ((((v15 - 120) | 0x96D41AAA) - ((v15 - 120) & 0x96D41AAA)) ^ 0x145C1699);
  *(void *)(v15 - 120) = a10;
  *(_DWORD *)(v15 - 112) = v16 + v14 + 787;
  *(_DWORD *)(v15 - 108) = a13 - v16 + ((v14 - a5 - 185) ^ 0xF7D52AB3);
  uint64_t v17 = sub_10002B028(v15 - 120);
  uint64_t v18 = *(_DWORD *)(v15 - 152) & 0x3F;
  *(_BYTE *)(v15 - 220 + (v18 ^ 0x14)) = -78;
  return ((uint64_t (*)(uint64_t))(*(void *)(v13
                                                      + 8LL
                                                      * ((38
}

uint64_t sub_100030598(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3
                                                               + 8LL
                                                               * (((((v1 == 63) ^ (v2 - 116)) & 1)
                                                                 * ((v2 ^ 0x18) - 1252)) ^ v2))
                                                   - 4LL))( a1,  -560347418LL);
}

uint64_t sub_1000305D0()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v1 ^ (396 * ((v0 ^ 0x2Bu) > 7))))
                            - ((v1 + 1809836352) & 0xDFA717B7)
                            - ((v1 + 8585172) | 0x4B040124u)
                            + 2534281030LL))();
}

uint64_t sub_100030634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(void *)(v9 - 220 + v5 + 1) = 0x3232323232323232LL;
  return ((uint64_t (*)(uint64_t))(*(void *)(v8
                                                      + 8LL
                                                      * (int)((((v6 & 0x38) == 8LL)
                                                             * ((v7 - 189157558) & 0xBFBF4FBD ^ 0x756)) ^ (a5 + v7 + 1558)))
                                          - 12LL))(1267140513LL);
}

void sub_1000306A0()
{
}

uint64_t sub_1000306A8@<X0>(int a1@<W1>, int a2@<W3>, int a3@<W8>)
{
  BOOL v10 = v3 < v4;
  *(_BYTE *)(v9 - 220 + (a3 - 98667421)) = *(_BYTE *)(v7 + (a1 + a2))
                                                       + (v8 ^ 0x2F)
                                                       - ((2 * *(_BYTE *)(v7 + (a1 + a2))) & 0x64);
  unsigned int v11 = a1 + 1 + v5;
  int v12 = v10 ^ (v11 < v4);
  BOOL v13 = v11 < v3;
  if (!v12) {
    BOOL v10 = v13;
  }
  return (*(uint64_t (**)(void))(v6 + 8LL * ((52 * v10) ^ v8)))();
}

uint64_t sub_100030728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W4>, int a4@<W8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v4
                                                                        + 8LL
                                                                        * ((195
                                                                          * (a4 + ((48 * (v5 ^ (v6 + 8))) ^ 0xDE99C766) < 0x38)) ^ (v5 + a3)))
                                                            - 4LL))( a1,  a2,  -560347418LL);
}

uint64_t sub_100030774@<X0>(unsigned int a1@<W8>)
{
  unint64_t v3 = a1 - 1827487934LL + ((v1 + 1804562031) & 0xDFF797B5);
  if (v3 <= 0x38) {
    unint64_t v3 = 56LL;
  }
  return (*(uint64_t (**)(void))(v2 + 8LL
                                   * ((1762 * (v3 - a1 + ((v1 + 1337421373) & 0xFBCF97E7) - 706793099LL > 7)) ^ v1)))();
}

uint64_t sub_1000307F4@<X0>(uint64_t a1@<X2>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(void *)(v6 - 220 + a3 + a1) = 0x3232323232323232LL;
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
                                        * ((824
                                          * (((v3 - 1963967430) & 0x2988BD7D ^ 0x155LL) == (v4 & 0xFFFFFFFFFFFFFFF8LL))) ^ (a2 + v3 + 1312)))
                            - 12LL))();
}

uint64_t sub_100030864()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * ((221 * (((v0 == v1) ^ (v4 + v2 - 93)) & 1)) ^ v2)))();
}

void sub_100030894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  int v7 = *(unsigned __int8 *)(v5 - 124) ^ 0x5F;
  if (v7 == 1)
  {
    unsigned int v14 = *(_DWORD *)(v5 - 156);
    unsigned int v13 = *(_DWORD *)(v5 - 152);
    *(_BYTE *)(v5 - 164) = ((8 * v13) ^ 0xA0) - ((2 * ((8 * v13) ^ 0xA0)) & 0x60) + 50;
    *(_BYTE *)(v5 - 163) = ((v13 >> 5) ^ (a5 + v6 - 95))
                         - 2 * (((v13 >> 5) ^ (a5 + v6 - 95)) & 0x33 ^ ((v13 & 0x20) != 0))
                         + 50;
    char v11 = 100;
    *(_BYTE *)(v5 - 162) = ((v13 >> 13) ^ 0x8F) - ((2 * ((v13 >> 13) ^ 0x8F)) & 0x64) + 50;
    HIDWORD(v15) = v14 ^ 0xA;
    LODWORD(v15) = v13 ^ 0x60000000;
    *(_BYTE *)(v5 - 161) = ((v13 >> 21) ^ 0x39) - ((2 * ((v13 >> 21) ^ 0x39)) & 0x64) + 50;
    *(_BYTE *)(v5 - 160) = (v15 >> 29) - ((2 * (v15 >> 29)) & 0x64) + 50;
    *(_BYTE *)(v5 - 159) = ((v14 >> 5) ^ 0xA) - 2 * (((v14 >> 5) ^ 0xA) & 0x37 ^ (v14 >> 5) & 5) + 50;
    *(_BYTE *)(v5 - 158) = ((v14 >> 13) ^ 0xA4) - ((2 * ((v14 >> 13) ^ 0xA4)) & 0x64) + 50;
    char v8 = a5 + v6 + 5;
    unsigned int v12 = (v14 >> 21) ^ 0xFFFFFFBE;
  }

  else
  {
    if (v7 != 2) {
      goto LABEL_6;
    }
    char v8 = -34 * (v6 ^ (v6 - 5));
    unsigned int v9 = *(_DWORD *)(v5 - 156);
    unsigned int v12 = *(_DWORD *)(v5 - 152);
    *(_BYTE *)(v5 - 164) = (v8 ^ (v9 >> 21) ^ 0xE8)
                         - 2 * ((v8 ^ (v9 >> 21) ^ 0xE8) & 0x33 ^ ((v9 & 0x200000) != 0))
                         + 50;
    *(_BYTE *)(v5 - 163) = ((v9 >> 13) ^ 0xA4) - 2 * (((v9 >> 13) ^ 0xA4) & 0x3A ^ (v9 >> 13) & 8) + 50;
    *(_BYTE *)(v5 - 162) = ((v9 >> 5) ^ 0xA) + (~(2 * ((v9 >> 5) ^ 0xA)) | 0x9B) + 51;
    HIDWORD(v10) = v9 ^ 0xA;
    LODWORD(v10) = v12 ^ 0x60000000;
    *(_BYTE *)(v5 - 161) = (v10 >> 29) - ((2 * (v10 >> 29)) & 0x64) + 50;
    *(_BYTE *)(v5 - 160) = ((v12 >> 21) ^ 0x39) - 2 * (((v12 >> 21) ^ 0x39) & 0x36 ^ (v12 >> 21) & 4) + 50;
    *(_BYTE *)(v5 - 159) = ((v12 >> 13) ^ 0x8F) - ((2 * ((v12 >> 13) ^ 0x8F)) & 0x64) + 50;
    *(_BYTE *)(v5 - 158) = ((v12 >> 5) ^ 0xF2) - ((2 * ((v12 >> 5) ^ 0xF2)) & 0x64) + 50;
    char v11 = 96;
    LOBYTE(v12) = (8 * v12) ^ 0xA0;
  }

  *(_BYTE *)(v5 - 157) = v12 - (v11 & (2 * v12)) + ((v8 + 105) & 0xE5 ^ 0x97);
LABEL_6:
  JUMPOUT(0x10002F694LL);
}

uint64_t sub_100030CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (v5 ^ ((8 * (v7 == v6)) | (16 * (v7 == v6)))))
                            + a1
                            - (((v5 - 1645) | 1u)
                             - a5
                             + 16)))();
}

void sub_100030CE8()
{
}

uint64_t sub_100030CFC@<X0>(uint64_t a1@<X1>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(_BYTE *)(v5 - 220 + a3 + a1) = 50;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((1565
}

uint64_t sub_100030DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v10 = v7 - 1734423542 + ((v5 + 1115685440) | 0x9070300);
  int v11 = *(_DWORD *)(v9 - 220 + (v10 & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a3 + v10) = (HIBYTE(v11) ^ 0x51) - ((2 * (HIBYTE(v11) ^ 0x51)) & 0x64) + 50;
  *(_BYTE *)(a3 + (v7 + v3)) = (BYTE2(v11) ^ 0x3B) - ((2 * (BYTE2(v11) ^ 0x3B)) & 0x64) + 50;
  *(_BYTE *)(a3 + (v7 + v3 + 1)) = (BYTE1(v11) ^ 0xA7) - ((2 * (BYTE1(v11) ^ 0xA7)) & 0x64) + 50;
  *(_BYTE *)(a3 + (v7 + v3 + 2)) = v11 ^ 0x47;
  unsigned int v12 = *(_DWORD *)(v9 - 128) + 364390470;
  BOOL v13 = v12 < v4;
  BOOL v14 = v7 + 267092298 < v12;
  if (v7 + 267092298 < v4 != v13) {
    BOOL v14 = v13;
  }
  return (*(uint64_t (**)(void))(v8 + 8LL * ((v14 * v6) ^ v5)))();
}

void sub_100030F4C()
{
}

  ;
}

void sub_100030F90(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((2 * (a1 & 0x5E99CC2A) - a1 - 1587137579) ^ 0xAB923DFA);
  uint64_t v2 = *(void *)a1;
  if (*(_DWORD *)(*(void *)a1 - 0xC7F991DE6408E19LL) - 159353952 >= 0) {
    unsigned int v4 = *(_DWORD *)(*(void *)a1 - 0xC7F991DE6408E19LL) - 159353952;
  }
  else {
    unsigned int v4 = 159353952 - *(_DWORD *)(*(void *)a1 - 0xC7F991DE6408E19LL);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v3 - 0xC7F991DE6408E19LL) - 159353952 >= 0) {
    unsigned int v5 = *(_DWORD *)(v3 - 0xC7F991DE6408E19LL) - 159353952;
  }
  else {
    unsigned int v5 = 159353952 - *(_DWORD *)(v3 - 0xC7F991DE6408E19LL);
  }
  v7[1] = (460628867 * (((v7 | 0xE042447A) - (v7 & 0xE042447A)) ^ 0xACD4C607)) ^ (v1 + 693);
  uint64_t v8 = v2;
  sub_100039498((uint64_t)v7);
  if (v4 >= v5) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = v4;
  }
  __asm { BR              X14 }

uint64_t sub_100031124@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  int v11 = v9 - 27;
  int v12 = (2 * (v9 - 27)) ^ 0x596;
  BOOL v13 = v3 > 0x34F7BADB;
  uint64_t v14 = 4LL * (v6 + v4);
  int v15 = v7
      + 966000769
      + (*(_DWORD *)(*(void *)(v10 - 0xC7F991DE6408E15LL) + v14) ^ (v8 + v12 - 1394))
      + (*(_DWORD *)(*(void *)(a2 - 0xC7F991DE6408E15LL) + v14) ^ v8);
  *(_DWORD *)(*(void *)(a1 - 0xC7F991DE6408E15LL) + v14) = v15 + v8 - (v5 & (2 * v15));
  if (v13 == v6 - 619284429 < -888650460) {
    BOOL v13 = v6 - 619284429 < (int)(v3 + 1258833188);
  }
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((255 * !v13) ^ v11)) - 12LL))();
}

uint64_t sub_100031254()
{
  BOOL v5 = v3 - 2010637295 > 2014963970 || v3 - 2010637295 < v2 - 132519677;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((212 * v5) ^ v1)) - ((v1 - 152439432) & 0x91605FF) + 230LL))();
}

uint64_t sub_1000312B4@<X0>(uint64_t a1@<X8>)
{
  int v13 = v3 - 1253;
  uint64_t v14 = 4LL * (v9 + v7);
  int v15 = v2 + v10 + (*(_DWORD *)(*(void *)(v12 - 0xC7F991DE6408E15LL) + v14) ^ (v11 + v13 + 93 - 234));
  *(_DWORD *)(*(void *)(a1 - 0xC7F991DE6408E15LL) + v14) = v15 + v11 - (v8 & (2 * v15));
  int v16 = v9 + 1 + v4;
  BOOL v18 = v16 > v5 || v16 < v6;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((233 * v18) ^ (v13 + 1253))) - 4LL))();
}

uint64_t sub_10003137C()
{
  BOOL v5 = v2 + 1086776997 > 817410966 || v2 + 1086776997 < v3 - 1330072681;
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((v5 * ((v1 + 2) ^ 0x66 ^ (5 * (v1 ^ 0x1F1)))) ^ v1)) - 12LL))();
}

uint64_t sub_1000313D8@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v13 = 4LL * (v10 + v8);
  int v14 = v3 + v11 + (*(_DWORD *)(*(void *)(a2 - 0xC7F991DE6408E15LL) + v13) ^ v12);
  *(_DWORD *)(*(void *)(a1 - 0xC7F991DE6408E15LL) + v13) = v14 + v12 - ((v14 << ((v7 ^ 6) + 23)) & v9);
  int v15 = v10 + 1 + v4;
  BOOL v17 = v15 > v5 || v15 < v6;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((2 * v17) | (4 * v17)) ^ v7 ^ 6)) - 12LL))();
}

uint64_t sub_1000314A0()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL * ((85 * (v1 == ((v2 + 75) ^ 0x49CCCEB039940553LL))) ^ v2))
                            - (v2 ^ 0x50Au)
                            + 133LL))();
}

void sub_1000314E8(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 0xC7F991DE6408E19LL) = (((v3 + v2) * (v1 - 1901766679)) ^ 0x2D7FCE79)
                                        - 603996697
                                        + ((2 * (v3 + v2) * (v1 - 1901766679)) & 0x5AFF9CF2);
}

void sub_1000315C8(uint64_t a1)
{
  int v1 = 1178560073 * ((-2 - ((a1 | 0x20C3A6CC) + (~(_DWORD)a1 | 0xDF3C5933))) ^ 0x65A82151);
  __asm { BR              X9 }

uint64_t sub_10003167C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((1696 * (v2 != (v1 ^ 0x7D6) + 100575459)) ^ v1)) - 8LL))();
}

uint64_t sub_1000316D0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((59 * (v1 ^ 0xC3)) ^ 0x36)) - 4LL))();
}

uint64_t sub_1000317F8@<X0>(int a1@<W5>, int a2@<W6>, uint64_t a3@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a3 + 8LL * (((v4 == ((v5 + 702) ^ a1 ^ (v3 + 731))) * a2) ^ v5)) - 8LL))();
}

uint64_t sub_100031824@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1 + 8LL * ((((v2 + 214) ^ 0x74) * (v1 != 0)) ^ v2)) - 8LL))();
}

uint64_t sub_10003184C@<X0>(int a1@<W7>, uint64_t a2@<X8>)
{
  int v6 = v3 + v2;
  int v7 = (v5 ^ 0x389) + v3;
  *(_DWORD *)(*(void *)(v4 - 0xC7F991DE6408E15LL) + 4LL * v6) = a1;
  *(_DWORD *)(v4 - 0xC7F991DE6408E19LL) = v7;
  int v8 = v7 + v2;
  if (v7 + v2 < 0) {
    int v8 = -v8;
  }
  return ((uint64_t (*)(void))(*(void *)(a2
                                        + 8LL
                                        * (int)(((v5 ^ 0x7D6) + 1808758879) & 0x943083EF ^ (((int)((v8 ^ 0xBDFFAD62)
                                                                                                 + ((v8 << ((((v5 ^ 0xD6) + 95) & 0xEF) + 84)) & 0x7BFF5AC4)
}

uint64_t sub_100031948@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * (((*(_DWORD *)(*v3 + 4LL * v4) == v1) * ((v2 - 15499184) & 0xEC7FFF ^ 0x40E)) ^ v2))
                            - 8LL))();
}

uint64_t sub_10003198C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
}

_DWORD *sub_1000319D0(_DWORD *result)
{
  else {
    int v6 = v5;
  }
  *unsigned int v4 = v6;
  *uint64_t result = 85258470;
  return result;
}

uint64_t sub_100031A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = qword_100572260 - qword_1005722D0 - (void)&v8;
  qword_1005722D0 = 536075833 * v2 + 0x793AB71194CDC804LL;
  qword_100572260 = 536075833 * (v2 ^ 0x86C548EE6B3237FCLL);
  int v3 = *(_DWORD *)(a2 + 4);
  unsigned __int8 v4 = 57 * ((qword_100572260 + 57 * v2 + 4) ^ 0xFC);
  int v5 = (char *)*(&off_1004EDED0 + (v4 ^ byte_1003C4BD0[byte_1003C0B80[v4] ^ 0x84]) - 54) - 8;
  if (v3 == 1206753086) {
    __asm { BR              X17 }
  }

  if (v3 == 1206753093)
  {
    int v6 = **(unsigned __int8 **)(a2 + 8) - 9;
    __asm { BR              X1 }
  }

  return 4294925278LL;
}

void sub_1000320D8(unint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 44) - 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  unsigned int v3 = *(_DWORD *)(a1 + 16) + 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  unsigned int v4 = 1178560073 * ((1588112264 - (&v37 | 0x5EA8AB88) + (&v37 | 0xA1575477)) ^ 0x1BC32C15);
  int v5 = *(_DWORD *)(a1 + 36);
  unint64_t v21 = 1755732067
      * (((a1 | 0xDEEEE61CC66703ELL) - (a1 | 0xF211119E33998FC1LL) - 0xDEEEE61CC66703FLL) ^ 0xD045495E12A0CDE5LL);
  int v6 = v5 + 1755732067 * (((a1 | 0xCC66703E) - (a1 | 0x33998FC1) + 865701825) ^ 0x12A0CDE5);
  int v39 = v2 - v4 + 1172345356;
  unsigned int v37 = 1076023948 - v4;
  int v27 = &STACK[0x5C6940C6B1BC7306];
  int v38 = &STACK[0x5C6940C6B1BC7306];
  sub_1000167EC((uint64_t)&v37);
  int v7 = (void *)a1;
  char v8 = (char *)*(&off_1004EDED0 + (int)(v2 - 37)) - 8;
  int v20 = ((v2 + 177) | 0x4E8) + v6 + 206677213;
  int v19 = 1484105499;
  int v18 = v6 - 857971597;
  int v12 = v6 + 1138537797;
  int v11 = v6 - 770055748;
  int v10 = (char *)&v10 - 250415509;
  int v17 = 143 * (v2 ^ 0x46);
  int v16 = v17 ^ 0x5875A21C;
  int v13 = (v2 - 1913092366) & 0x72077DBF;
  int v15 = v13 ^ 0x52C;
  int v31 = v2 ^ 0x6F;
  int v30 = v2 ^ 0x22;
  uint64_t v14 = v2 ^ 0x22;
  uint64_t v29 = v14;
  unsigned int v28 = v2;
  int32x4_t v24 = vdupq_n_s32(0x620F0DF9u);
  int32x4_t v25 = vdupq_n_s32(0x620F0DFFu);
  int32x4_t v23 = vdupq_n_s32(0xC41E1BF2);
  int v22 = v7;
  uint64_t v26 = *v7;
  unsigned int v9 = v3
     - (((v3 << (((((v2 - 79) | 0xE8) + 48) | 0xE0) ^ 0x52 ^ (((v2 - 79) | 0xE8) + 3) & 0xBF)) + 655359252) & 0x989A21DE)
     - 539684999;
  char v32 = (HIBYTE(v9) ^ 0x4C) - ((v9 >> 23) & 0x64) + 50;
  char v33 = (BYTE2(v9) ^ 0x4D) - ((v9 >> 15) & 0x64) + 50;
  char v34 = (BYTE1(v9) ^ 0x10) - ((2 * (BYTE1(v9) ^ 0x10)) & 0x64) + 50;
  char v35 = (v3
       - ((((_BYTE)v3 << (((((v2 - 79) | 0xE8) + 48) | 0xE0) ^ 0x52 ^ (((v2 - 79) | 0xE8) + 3) & 0xBF)) + 20) & 0xDE)
       + 121) ^ 0xDD;
  __asm { BR              X15 }

uint64_t sub_1000324DC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int a9@<W8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_BYTE *)(a4 + (v22 + v20 - 921 - 352)) = v21;
  *(_BYTE *)(a4 + (a9 - 1862623871)) = *(_BYTE *)(a6 + 1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 8LL * ((1627 * ((((v20 - 1194) | 1) ^ 0x4Bu) > 2)) ^ (v20 - 921))) - 4LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20);
}

uint64_t sub_10003387C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X5>, int a3@<W8>)
{
  *(_BYTE *)(a1 + (a3 - 1862623870)) = *(_BYTE *)(a2 + (v5 - 1900496073));
}

uint64_t sub_1000338D8@<X0>( uint64_t a1@<X3>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t (*a22)(uint64_t))
{
  int v25 = (v22 - 1690666352) & 0x64C5845F;
  *(_BYTE *)(a1 + (a3 + 2)) = *(_BYTE *)(a2 + (v23 - 1900496151 + v25));
  int v26 = 628203409 * ((-420577316 - ((v24 - 160) | 0xE6EE7FDC) + ((v24 - 160) | 0x19118023)) ^ 0x9B998C10);
  *(_DWORD *)(v24 - 152) = v26 + v25 + 974;
  *(_DWORD *)(v24 - 148) = 507371030 - v26;
  *(void *)(v24 - 160) = a21;
  uint64_t v27 = sub_10002B028(v24 - 160);
  return a22(v27);
}

uint64_t sub_100033980( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11)
{
  BOOL v14 = a11 < 0x9000B19B;
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((v14 * (((v12 - 1221) | 0x19) ^ 0x41)) ^ v12)) - 12LL))();
}

uint64_t sub_100033A00@<X0>( int a1@<W0>, int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W8>)
{
  BOOL v13 = a3 < v9;
  *(_BYTE *)(a4 + (a6 + a2)) = *(_BYTE *)(v12 + (v6 + v8))
  unsigned int v14 = a1 + v6 + 1;
  int v15 = v13 ^ (v14 < v9);
  BOOL v16 = v14 < a3;
  if (!v15) {
    BOOL v13 = v16;
  }
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((v13 * v11) ^ v7)) - 12LL))();
}

uint64_t sub_100033A70( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  int v29 = 628203409 * ((((v28 - 160) | 0x8BCD2C81) + (~(v28 - 160) | 0x7432D37E)) ^ 0x94520B3);
  *(_DWORD *)(v28 - 152) = v29 + v26 + 962;
  *(_DWORD *)(v28 - 148) = a10 - v29;
  *(void *)(v28 - 160) = a26;
  uint64_t v30 = sub_10002B028(v28 - 160);
  uint64_t v31 = STACK[0x310] & 0x3F ^ ((v26 ^ 0x39Au) - 941);
  *((_BYTE *)&STACK[0x2CC] + v31) = -78;
  return ((uint64_t (*)(uint64_t))(*(void *)(v27 + 8LL * ((968 * (v31 > 0x37)) ^ v26)) - 4LL))(v30);
}

uint64_t sub_100033B68()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((((((v1 - 247) ^ (v0 == 63)) & 1) == 0) * (7 * (v1 ^ 0x3CC) - 86)) ^ v1))
                            - 4LL))();
}

uint64_t sub_100033BC0@<X0>(int a1@<W8>)
{
  return (*(uint64_t (**)(void))(v2 + 8LL * ((477 * ((a1 ^ 0x2Bu) > 7)) ^ (v1 | 0x10))))();
}

uint64_t sub_100033BFC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a9 + v10) = v13;
  return (*(uint64_t (**)(void))(v12
                              + 8LL
                              * ((409 * ((v11 & 0x38) - (unint64_t)(v9 + 322) == -393LL)) ^ (v9 + 623))))();
}

uint64_t sub_100033C44(int a1)
{
  *(void *)(v2 + v4) = v6;
  return (*(uint64_t (**)(void))(v5 + 8LL * (((v3 == v4) * a1) ^ v1)))();
}

uint64_t sub_100033C64()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * ((((v1 ^ 0x1DE) + ((v1 - 392) | 0x52) + 673) * (v2 != v0)) ^ v1)))();
}

uint64_t sub_100033CAC@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a1 + a2 + v3) = v6;
  return (*(uint64_t (**)(void))(v7 + 8LL * (((a2 + v3 + (unint64_t)(v2 ^ v5) - 90 > 0x3F) * v4) ^ (v2 + 299))))();
}

void sub_100033CE0()
{
}

uint64_t sub_100033D08()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1556 * (((v2 - 1967077713) & 0x753F3BC7u) + v0 - 250416935 < 0x38)) ^ (v2 + 663)))
                            - 12LL))();
}

uint64_t sub_100033D68@<X0>(unsigned int a1@<W8>)
{
  unint64_t v4 = ((v2 + ((a1 - 2076846039) & 0x7BCA27FD) - 669) ^ (a1 - 1511176519) & 0x5A12B6CF) + v1;
  if (v4 <= 0x38) {
    unint64_t v4 = 56LL;
  }
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((2000 * (v4 - v1 + 250416225 > 7)) ^ a1)) - 12LL))();
}

uint64_t sub_100033DF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(a9 + v10) = v13;
  return ((uint64_t (*)(void))(*(void *)(v12
                                        + 8LL
                                        * (int)((14
                                               * ((((((v11 + 1227796478) & 0xB6D14FF7) - 29) ^ (((((v11 + 1227796478) & 0xB6D14FF7)
                                                                                                - 747LL) & v9) == 8)) & 1) == 0)) ^ (v11 + 1227796478) & 0xB6D14FF7))
                            - 8LL))();
}

uint64_t sub_100033E5C(int a1)
{
  *(void *)(v2 + v5) = v7;
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((14 * (a1 & ~(v3 ^ (v4 == v5)))) ^ v1)) - 8LL))();
}

uint64_t sub_100033E8C()
{
}

uint64_t sub_100033ED4@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a1 + a2 + v3) = v4;
}

void sub_100033F04()
{
  int v1 = LOBYTE(STACK[0x32C]) ^ 0x5F;
  if (v1 == 1)
  {
    unsigned int v8 = STACK[0x310];
    unsigned int v9 = STACK[0x30C];
    int v10 = LODWORD(STACK[0x310]) >> 5;
    char v11 = v10 ^ 0xF2;
    char v12 = (v10 ^ 0xF2) & 0x37 ^ v10 & 5;
    char v5 = v0 ^ 0x26;
    char v13 = v11 - 2 * v12;
    int v14 = LODWORD(STACK[0x310]) >> 13;
    LOBYTE(STACK[0x304]) = (v0 ^ 0x26)
                         + ((8 * LOBYTE(STACK[0x310])) ^ 0xA0)
                         - ((2 * ((8 * LOBYTE(STACK[0x310])) ^ 0xA0)) & 0x60)
                         - 55;
    LOBYTE(STACK[0x305]) = v13 + 50;
    LOBYTE(STACK[0x306]) = (v14 ^ 0x8F) + (~(2 * (v14 ^ 0x8F)) | 0x9B) + 51;
    LOBYTE(STACK[0x307]) = ((v8 >> 21) ^ 0x39) - 2 * (((v8 >> 21) ^ 0x39) & 0x36 ^ (v8 >> 21) & 4) + 50;
    HIDWORD(v15) = v9 ^ 0xA;
    LODWORD(v15) = v8 ^ 0x60000000;
    char v6 = 100;
    LOBYTE(STACK[0x308]) = (v15 >> 29) - ((2 * (v15 >> 29)) & 0x64) + 50;
    LOBYTE(STACK[0x309]) = ((v9 >> 5) ^ 0xA) - ((2 * ((v9 >> 5) ^ 0xA)) & 0x64) + 50;
    LOBYTE(STACK[0x30A]) = ((v9 >> 13) ^ 0xA4) - ((2 * ((v9 >> 13) ^ 0xA4)) & 0x64) + 50;
    unsigned int v7 = (v9 >> 21) ^ 0xFFFFFFBE;
  }

  else
  {
    if (v1 != 2) {
      goto LABEL_6;
    }
    unsigned int v2 = STACK[0x30C];
    unsigned int v7 = STACK[0x310];
    int v3 = LODWORD(STACK[0x30C]) >> 13;
    LOBYTE(STACK[0x304]) = ((LODWORD(STACK[0x30C]) >> 21) ^ 0xBE)
                         - 2 * (((LODWORD(STACK[0x30C]) >> 21) ^ 0xBE) & 0x33 ^ ((STACK[0x30C] & 0x200000) != 0))
                         + 50;
    LOBYTE(STACK[0x305]) = (v3 ^ (v0 + 85)) - 2 * ((v3 ^ (v0 + 85)) & 0x33 ^ ((v2 & 0x2000) != 0)) + 50;
    LOBYTE(STACK[0x306]) = ((v2 >> 5) ^ 0xA) - 2 * (((v2 >> 5) ^ 0xA) & 0x37 ^ (v2 >> 5) & 5) + 50;
    HIDWORD(v4) = v2 ^ 0xA;
    LODWORD(v4) = v7 ^ 0x60000000;
    LOBYTE(STACK[0x307]) = (v4 >> 29) - ((2 * (v4 >> 29)) & 0x64) + 50;
    LOBYTE(STACK[0x308]) = ((v7 >> 21) ^ 0x39) - ((2 * ((v7 >> 21) ^ 0x39)) & 0x64) + 50;
    LOBYTE(STACK[0x309]) = ((v7 >> 13) ^ 0x8F) - ((2 * ((v7 >> 13) ^ 0x8F)) & 0x64) + 50;
    LOBYTE(STACK[0x30A]) = ((v7 >> 5) ^ 0xF2) - 2 * (((v7 >> 5) ^ 0xF2) & 0x36 ^ (v7 >> 5) & 4) + 50;
    char v5 = v0 + 26;
    char v6 = 96;
    LOBYTE(v7) = (8 * v7) ^ 0xA0;
  }

  LOBYTE(STACK[0x30B]) = v7 + ((v5 - 10) & 0xEF) - (v6 & (2 * v7)) - 29;
LABEL_6:
  JUMPOUT(0x100032A80LL);
}

uint64_t sub_100034168( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
  if (a31 == 2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v37
  }
                                                       + 8LL
                                                       * ((961
                                                         * (((LODWORD(STACK[0x328]) == 369984849) ^ (v36 - 34)) & 1)) ^ (v36 + 1245))))( a1,  a11);
  if (a31 == 1) {
    return (*(uint64_t (**)(void))(v37 + 8LL * ((56 * (LODWORD(STACK[0x328]) == v36 + 369984770)) ^ (v36 + 1221))))();
  }
  int v39 = (16 * v36) ^ 0x560;
  unint64_t v40 = ((unint64_t)&a36 ^ 0x3B7E7DF27E694F73LL)
      - 0x18019002680273LL
      + (((void)&a36 << (((16 * v36) ^ 0x60u) + 113)) & 0x76FCFBE4FCD29EE0LL);
  LOBYTE(STACK[0x327]) = ((((v39 - 81) & 0xFE) + 124) ^ v40) * (v40 + 17);
  return ((uint64_t (*)(void))(*(void *)(v37 + 8LL * v39) - 8LL))();
}

void sub_1000344A4()
{
}

uint64_t sub_1000344AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, int a36, char a37)
{
  uint64_t v42 = *(void *)(a18 + 24);
  memset((void *)(v40 - 176), 50, 16);
  int v43 = 235795823 * (((v40 - 160) & 0xA61497F7 | ~((v40 - 160) | 0xA61497F7)) ^ 0xCD462151);
  *(_DWORD *)(v40 - 152) = v43 + 1596901039;
  *(void *)(v40 - 160) = v40 - 192;
  *(_DWORD *)(v40 - 124) = (v37 + 1799) ^ v43;
  *(void *)(v40 - 144) = &a37;
  *(void *)(v40 - 136) = v42;
  *(void *)(v40 - 120) = v40 + 0x3EAB24E7EEDAAD1ALL;
  uint64_t v44 = ((uint64_t (*)(uint64_t))(*(void *)(v41 + 8LL * (v37 - 21)) - 4LL))(v40 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v38
                                                      + 8LL
                                                      * ((1117
                                                        * (*(_DWORD *)(v40 - 128) == v39 + ((v37 + 34) | 0x403) - 1123)) ^ v37))
                                          - 4LL))(v44);
}

uint64_t sub_1000345B4()
{
  uint64_t v7 = v0 + 1;
  BOOL v9 = (v6 ^ 0xFD6C6FCF) + ((v4 - 1044) ^ 0x73FFF5B2) + ((2 * v6) & 0xFAD8DF9E) != 1902929356 || v7 == v2 + 16;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((473 * v9) ^ v4)) - 4LL))();
}

uint64_t sub_10003463C@<X0>(int a1@<W8>)
{
  unint64_t v4 = 1178560073 * ((v3 - 160 - 2 * ((v3 - 160) & 0xDE8BE26CF99EC706LL) - 0x21741D93066138FALL) ^ 0xC577B284430ABF64LL);
  *(void *)(v3 - 144) = v4 + 1902929356;
  *(_DWORD *)(v3 - 132) = v4;
  *(_DWORD *)(v3 - 128) = v4 + a1 + 2104632311;
  *(void *)(v3 - 120) = v1 - v4;
  *(_DWORD *)(v3 - 156) = ((a1 + 1671359681) ^ 0x6B) + v4;
  *(_DWORD *)(v3 - 152) = ((a1 + 1671359681) ^ 0x3E) + v4;
  *(_DWORD *)(v3 - 136) = a1 + 1671359681 + v4;
  uint64_t v5 = ((uint64_t (*)(uint64_t))((char *)*(&off_1004EDED0 + a1 - 8) - 8))(v3 - 160);
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * *(int *)(v3 - 160)) - 4LL))(v5);
}

void sub_10003470C()
{
  *(_DWORD *)(v0 + 32) = 1645153785;
}

void sub_100034758(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1000347B8()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * ((7 * (v1 == 1206753083)) ^ 0x47Au)) - 4LL))();
}

uint64_t sub_1000347EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = v3 + 1013;
  *(_DWORD *)(*(void *)(a1 + 96) + 800LL) = 1612862051;
  *(_DWORD *)(*(void *)(a1 + 96) + 804LL) = 159353952;
  *(void *)(*(void *)(a1 + 96) + 808LL) = *(void *)(a1 + 96) + 816LL;
  uint64_t v5 = *(void *)(a1 + 96) + 0xC7F991DE640913DLL;
  unsigned int v6 = 1178560073
     * (((&v8 ^ 0xF4D518DC | 0xA372392C)
  uint64_t v9 = *(void *)(a2 + 8) + (*(_DWORD *)(a2 + 4) - v4);
  uint64_t v10 = v5;
  unsigned int v12 = v6 + v4 + 306418366;
  unsigned int v8 = v6 + 308;
  ((void (*)(unsigned int *))(*(void *)(a3 + 968) - 12LL))(&v8);
  return (1279786127 * v11 - 1666208810);
}

void sub_100034950(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (235795823 * ((-127693918 - (a1 | 0xF8638BA2) + (a1 | 0x79C745D)) ^ 0x93313D04));
  __asm { BR              X10 }

uint64_t sub_100034A1C(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((*(_DWORD *)(*(void *)(a1 + 8) + v3) == 45 * (v4 ^ 0x29C) + v1)
                                          * (((v4 ^ 0x29C) + 1940) ^ 0x792)) ^ v4))
                            - 12LL))();
}

uint64_t sub_100034A60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  unsigned int v6 = v2 + 1374699841 * ((2 * (&v4 & 0x37738180) - &v4 - 930316676) ^ 0xA5786675) + 1072;
  return sub_100009708((uint64_t)&v4);
}

void sub_100034BE0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1224239923 * ((a1 & 0x9A8552A9 | ~(a1 | 0x9A8552A9)) ^ 0x97C95081);
  __asm { BR              X9 }

void sub_100034CB4()
{
  *uint64_t v0 = -1645193696;
}

uint64_t sub_1000352A4(_DWORD *a1)
{
  unsigned int v1 = 1178560073 * ((2 * (a1 & 0x7B1A53C3) - (_DWORD)a1 - 2065322948) ^ 0x3E71D45E);
  unsigned int v2 = a1[1] + v1;
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + (int)(v2 ^ 0x753))
                              + (int)(((((*a1 - v1) ^ 0x620F0DF9) - 1 < 0x63) * (v2 - 1751 + (v2 ^ 0x7DB) - 322)) ^ v2)
                              - 1)
                            - 12LL))();
}

uint64_t sub_100035340@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(*(void *)(result + 8) - 0x67843F9A1244BACBLL) = (a2 ^ 0x9DF0F206)
                                                              - ((v2 - 1004659888) & (2 * (a2 ^ 0x9DF0F206) - 85198))
                                                              + 1645111186;
  return result;
}

uint64_t sub_1000353E0(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))((char *)*(&off_1004E98E8 + ((109 * (*(_DWORD *)(a2 + 4) != 1206753084)) ^ 0x3A7u) - 1) - 8))();
}

uint64_t sub_100035420()
{
  return 4294925278LL;
}

uint64_t sub_100035428(uint64_t a1, uint64_t a2)
{
  BOOL v2 = **(_BYTE **)(a2 + 8) != 0;
  *(_BYTE *)(a1 + 88) = (v2 ^ 0x2F) + 2 * v2;
  return 0LL;
}

void sub_100035460(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 - 108757529 * ((-2 - ((a1 | 0x1E625E8E) + (~(_DWORD)a1 | 0xE19DA171))) ^ 0x101C35A);
  int v2 = *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL);
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v4 = (460628867 * ((((v3 | 0xC87E0ECA) ^ 0xFFFFFFFE) - (~v3 | 0x3781F135)) ^ 0x7B177348)) ^ (v1 - 113);
  sub_100039498((uint64_t)v3);
  __asm { BR              X9 }

uint64_t sub_1000355A0@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((((131 * ((v1 - 877) ^ 0x182)) ^ 0x191) * (((v3 ^ v2) & 0x1F) == 0xF)) ^ v1))
                            - 4LL))();
}

uint64_t sub_100035610@<X0>(uint64_t a1@<X8>)
{
  int v4 = ((v2 + 892) ^ 0xB0240DD2) + (v3 ^ 0xCFFFFFD5) + 2145122043 + (v1 & 0x9FFFFFAA) < 0x7FFFFFFF;
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
}

uint64_t sub_100035694@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
                                        * ((511 * (v1 + 287788292 < ((v2 - 2113754378) & 0x7DFD53BFu) + 2147482700)) ^ v2))
                            - 4LL))();
}

uint64_t sub_1000356F4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(*(void *)(v5 - 0xC7F991DE6408E15LL) + 4LL * (v1 + v2 + 1)) = -1075083249;
  return ((uint64_t (*)(void))(*(void *)(a1
                                        + 8LL
}

uint64_t sub_100035754@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)(*v6 + 4LL * (a2 + v3 + 1)) = v5;
}

void sub_100035790()
{
  int v5 = 963203894 - v0;
  if (*v4 + 1988129696 >= ((v3 - 390) ^ 0x3B3)) {
    int v6 = v5;
  }
  else {
    int v6 = v1;
  }
  *v4 += v2 + v6 + 2;
}

void sub_100035ADC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_100035B44()
{
  return 4294925278LL;
}

void sub_100035CCC(uint64_t a1)
{
  BOOL v4 = *(void *)(a1 + 40) != 0x27681A84B35EB105LL
    && *(void *)(a1 + 16) != 0x3EEC7284B8A20CABLL
    && *(void *)a1 != 0x66706D739F962A92LL;
  int v1 = *(_DWORD *)(a1 + 8) + 535753261 * ((((2 * a1) | 0xD63BF148) - a1 - 1797126308) ^ 0x61E9F68B);
  __asm { BR              X9 }

uint64_t sub_100035DE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((1069 * (*(_DWORD *)(a18 - 0x27681A84B35EB0EDLL) == 1645153785)) ^ v19)) - (((v19 - 564) | 0x51Cu) ^ 0x516LL)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

uint64_t sub_100035E40( __n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  v24.n128_u64[0] = 0x6464646464646464LL;
  v24.n128_u64[1] = 0x6464646464646464LL;
  v25.n128_u64[0] = 0x3232323232323232LL;
  v25.n128_u64[1] = 0x3232323232323232LL;
  unsigned int v26 = *(_DWORD *)(a22 - 0x27681A84B35EB0F5LL) - 1184605341;
  BOOL v27 = v26 < 0xCBE984DD;
  if (v26 >= 0xCBE984DD) {
    BOOL v27 = v26 > 0xCBE984DD;
  }
  return ((uint64_t (*)(__n128, __n128, __n128, __n128, __n128, __n128))(*(void *)(v23
                                                                                             + 8LL
                                                                                             * ((v27
                                                                                               * ((149 * (v22 ^ 0x512)
                                                                                                 - 1222) ^ 0x3FC)) ^ (149 * (v22 ^ 0x512))))
                                                                                 - ((5 * ((149 * (v22 ^ 0x512)) ^ 0x691u)) ^ 0x22DLL)))( a1,  a2,  a3,  a4,  v24,  v25);
}

uint64_t sub_100036088( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26, unsigned int a27)
{
}

uint64_t sub_100036DA8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  *(_BYTE *)(*v19 + (v17 + a8)) = -78;
  unsigned int v21 = (((v18 - 888) | 0x20) ^ 0x2FE47CEB) + v17;
  int v22 = ((a17 - 504887143) < 0x50E7ACE1) ^ (v21 < 0x50E7ACE1);
  BOOL v23 = v21 < a17 - 504887143;
  if (v22) {
    BOOL v24 = (a17 - 504887143) < 0x50E7ACE1;
  }
  else {
    BOOL v24 = v23;
  }
  return (*(uint64_t (**)(void))(v20 + 8LL * ((23 * v24) ^ v18)))();
}

uint64_t sub_100036E20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v16 = v12 < v8;
  *(_BYTE *)(*v14 + (v9 + 1 + a8)) = 50;
  unsigned int v17 = v10 + v9 + 499;
  int v18 = v16 ^ (v17 < v8 + v11 - 1422);
  BOOL v19 = v17 < v12;
  if (!v18) {
    BOOL v16 = v19;
  }
  return (*(uint64_t (**)(void))(v15 + 8LL * ((v16 * v13) ^ v11)))();
}

void sub_100036E78(int a1@<W8>)
{
  *(void *)(v3 - 0x3EEC7284B8A20CABLL) = *v1;
  *(_DWORD *)(v4 - 0x66706D739F962A92LL) = a1;
  *int v1 = 0LL;
  *(void *)(v7 - 0x27681A84B35EB0FDLL) = 0x23F5AF4C23F5AF4CLL;
  *int v2 = 310716794;
  *(_DWORD *)(v7 - 0x27681A84B35EB0F1LL) = ((*(_DWORD *)(v7 - 0x27681A84B35EB0F1LL) & 0xFFFFFFFE ^ 0x42D83F58 | 0x95997BD8)
                                          - (*(_DWORD *)(v7 - 0x27681A84B35EB0F1LL) & 0xFFFFFFFE ^ 0x42D83F58 | 0x6A668427)
                                          + 1785103399) ^ 0xD7414481;
  *(_DWORD *)(v6 + 28) = *v5;
}

void sub_100036F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  *a5 = 0LL;
  *a6 = 0;
  v6[1] = 108757529
  sub_10004CCF0(v6);
  __asm { BR              X8 }

uint64_t sub_10003706C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, int a16, unsigned int a17)
{
  a15 = &STACK[0x4BD26FD1213425B9];
  a17 = 1307 - 460628867 * ((&a15 & 0xA1039BA5 | ~(&a15 | 0xA1039BA5)) ^ 0x126AE627);
  sub_100028A48((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 8LL * ((16 * (a16 == 1645153785)) | v17)) - 12LL))( v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26);
}

uint64_t sub_10003710C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16, uint64_t a17, unsigned int a18, uint64_t a19)
{
  unsigned int v26 = 1178560073 * ((&a15 & 0x443E359C | ~(&a15 | 0x443E359C)) ^ 0x155B201);
  a17 = a12;
  a18 = v26 ^ 0x3E8;
  a16 = (v22 ^ 0xF3FDF27D) + ((2 * v22) & 0xE7FBE4FA) + 1551851452 + v26;
  sub_100038AF4((uint64_t)&a15);
  unsigned int v27 = 1178560073 * (((&a15 | 0xFEB9F472) - (&a15 & 0xFEB9F472)) ^ 0x442D8C10);
  a17 = a12;
  a18 = v27 ^ 0x3E8;
  a16 = ((2 * v21) & 0xECFABD76) + 1098 + (v21 ^ 0xF67D5EBB) + 1509945140 + v27;
  sub_100038AF4((uint64_t)&a15);
  unsigned int v28 = 1178560073 * ((1638435589 - (&a15 | 0x61A88B05) + (&a15 | 0x9E5774FA)) ^ 0x24C30C98);
  a18 = v28 ^ ((v20 ^ 0x4BF17F7E) - 1081107028 + ((2 * v20) & 0x97E2FEFC));
  a19 = v19;
  a17 = a12;
  a16 = v28 + 1289;
  sub_10002A708((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8LL * ((750 * (a15 == 1645153785)) ^ 0x451u)) - 12LL))( v29,  v30,  v31,  v32,  v33,  v34,  v35,  v36,  v25,  v23);
}

uint64_t sub_100037304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t *a15, uint64_t a16, unsigned int a17, unsigned int a18, unsigned int a19, int a20)
{
  unsigned int v22 = 460628867 * ((&a15 & 0x289C561E | ~(&a15 | 0x289C561E)) ^ 0x9BF52B9C);
  a19 = 635686783 - v22;
  a17 = v22 + 1697367587;
  a18 = v22 + v20 + 2138962262;
  a15 = &STACK[0x58A7AA08624568F6];
  a16 = a12;
  uint64_t v23 = sub_10004D0C0((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21
                                                      + 8LL
                                                      * ((27
}

uint64_t sub_1000373F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int a15, unint64_t *a16, unint64_t *a17, unint64_t *a18, unsigned int a19)
{
  int v22 = v19 & 0x70D0B2DF;
  a16 = a11;
  a17 = &STACK[0x72E1645BEBB64033];
  a19 = (v22 + 211) ^ (1225351577 * (&a15 ^ 0x239AD816));
  a18 = &STACK[0x1E6EF7153090DEA];
  ((void (*)(unsigned int *))(*(void *)(v20 + 8LL * (v22 - 78)) - 8LL))(&a15);
  a16 = &STACK[0x384B062F07609564];
  a17 = a11;
  a15 = (v22 + 202) ^ (1374699841 * (&a15 ^ 0x6DF41809));
  ((void (*)(unsigned int *))(*(void *)(v20 + 8LL * (v22 ^ 0x3Au)) - 8LL))(&a15);
  a16 = a11;
  a15 = (v22 + 703) ^ (1755732067
                     * ((2 * (&a15 & 0x22973738) - &a15 + 1567148230) ^ 0x83AE751D));
  uint64_t v23 = sub_100049128((uint64_t)&a15);
  return (*(uint64_t (**)(uint64_t))(v21
                                            + 8LL
                                            * ((((_DWORD)a17 == 1645153785) * (((v22 - 677531922) & 0x286254D3) + 369)) ^ v22)))(v23);
}

uint64_t sub_100037568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  return (*(uint64_t (**)(void))(v15 + 8LL * ((910 * (a14 == ((221 * (v14 ^ 0x8A)) ^ 0x620F09A8))) ^ v14)))();
}

uint64_t sub_1000375A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  return (*(uint64_t (**)(void))(v14
                              + 8LL
                              * ((691 * (a13 != ((((v13 + 756930384) & 0xD2E22C71) + 1645152037) ^ (v13 + 1536)))) ^ v13)))();
}

uint64_t sub_100037600@<X0>(int a1@<W8>)
{
  BOOL v4 = (*(uint64_t (**)(void))(v2 + 8LL * (v1 - 1453)))(a1 ^ 0x620F0DF9u) == 0;
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((v4 * ((v1 - 1207) ^ 0x5C7 ^ (5 * (v1 ^ 0x652)))) ^ v1)) - 8LL))();
}

uint64_t sub_100037658( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13)
{
  unsigned int v15 = (a13 ^ 0x620F0DF9) + ((v13 + 494461987) & 0xE2871B56 ^ 0x76D504A8) - ((2 * (a13 ^ 0x620F0DF9)) & 0xEDAA0BF4);
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL
                                        * ((1615
                                          * (((2 * v15) & 0xDFDBFDDA ^ 0xCD8A09D0)
                                           + ((v13 - 329) ^ 0x1938FB98 ^ v15)
                                           - 1610946564 != 266921705)) ^ v13))
                            - 12LL))();
}

uint64_t sub_100037704()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * ((((v1 + v0 + v2 - 1877868607) > 7) * (v2 - 334)) | v2)))();
}

uint64_t sub_100037750(uint64_t a1)
{
  unsigned int v4 = v2 + 761;
  BOOL v5 = v1 - a1 < (v4 ^ 0x46BuLL);
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * (int)((v5 | (16 * v5)) ^ v4)) - 12LL))();
}

uint64_t sub_100037790(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v6
                                                              + 8LL
                                                              * (((((v4 < 0x20) ^ (a4 - v5 - 99)) & 1)
                                                                * (a4 - 812)) ^ a4))
                                                  - 4LL))( a1,  (a4 - 146));
}

uint64_t sub_1000377D0(uint64_t a1)
{
  unsigned int v10 = v4 + v5 + v6;
  uint64_t v11 = v1 + v10;
  __int128 v12 = *(_OWORD *)(v11 - 31);
  uint64_t v13 = a1 + v10;
  *(_OWORD *)(v13 - 15) = *(_OWORD *)(v11 - 15);
  *(_OWORD *)(v13 - 31) = v12;
  return ((uint64_t (*)(void))(*(void *)(v9
                                        + 8LL
                                        * ((((v2 & 0xFFFFFFE0) == 32) * ((38 * (v7 ^ (v3 + 1095))) ^ 0x44D)) ^ (v8 + v7 + 734)))
                            - 8LL))();
}

void sub_100037838()
{
}

uint64_t sub_100037844(uint64_t a1)
{
  *int v7 = a1;
  *int v8 = v2;
  int v5 = (v1 ^ 0x4DE) - 426;
  uint64_t v13 = v9;
  unsigned int v12 = (v1 ^ 0x4DE) + (v11 ^ 0xAF40E2F) * v4 - 76;
  v3(v11);
  uint64_t v13 = v10;
  unsigned int v12 = v5 + ((((2 * v11) | 0xC2DB3190) - v11 + 512911160) ^ 0xEB9996E7) * v4 + 350;
  v3(v11);
  return 0LL;
}

void sub_100037AD4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) - 1224239923 * ((-2 - ((a1 | 0xAACC30C4) + (~(_DWORD)a1 | 0x5533CF3B))) ^ 0xA78032EC);
  __asm { BR              X14 }

void sub_100037BEC(uint64_t a1@<X8>)
{
  *(_DWORD *)(v1 + a1) = 159353952;
}

void sub_100038AF4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((2 * (a1 & 0x878F6F35) - a1 + 2020643018) ^ 0xC2E4E8A8));
  __asm { BR              X10 }

uint64_t sub_100038BCC@<X0>( uint64_t a1@<X8>, uint64_t a2, unsigned int a3, int a4, unint64_t *a5, uint64_t a6, unsigned int a7)
{
  unsigned int v10 = 3804331 * (((&a3 | 0x81ADAAE9) + (~&a3 | 0x7E525516)) ^ 0xFF788F1E);
  a5 = &STACK[0x58C2F3F47EC954F5];
  a6 = v8;
  a7 = v10 + 910892480;
  a3 = v10 + 1116194074;
  a4 = v10 + v7 - 480;
  uint64_t v11 = ((uint64_t (*)(unsigned int *))(*(void *)(a1 + 8LL * (v7 - 818)) - 12LL))(&a3);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * ((1204 * (*(_DWORD *)(v8 - 0x27681A84B35EB0EDLL) == 1645153785)) ^ v7)))(v11);
}

void sub_100038C98(_DWORD *a1@<X8>)
{
  unsigned int v3 = v1[1] - v2 - ((2 * (v1[1] - v2) + 1594186638) & 0x989A21DE) - 70271306;
  *int v4 = (HIBYTE(v3) ^ 0x4C) - ((v3 >> 23) & 0x64) + 50;
  v4[1] = (BYTE2(v3) ^ 0x4D) - ((v3 >> 15) & 0x64) + 50;
  v4[2] = (BYTE1(v3) ^ 0x10) - ((2 * (BYTE1(v3) ^ 0x10)) & 0x64) + 50;
  v4[3] = v3 ^ 0xDD;
  *int v1 = *a1;
}

void sub_100038D5C(uint64_t a1)
{
  __asm { BR              X8 }

uint64_t sub_100038DA0()
{
  return 4294925273LL;
}

void sub_100038E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X8 }

uint64_t sub_100038E94(uint64_t a1, int a2)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  int v4 = v3;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((7 * v4) ^ 0x2D2u)) - 4LL))();
}

uint64_t sub_100038EE0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  a14 = v15
  uint64_t v16 = sub_10004CCF0(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v14
                                                      + 8LL
                                                      * ((1788 * (a13 == ((239 * (v15 ^ 0x2D6)) ^ 0x620F0F34))) ^ v15))
                                          - ((v15 - 1689052227) ^ 0x9B531E96LL)))(v16);
}

uint64_t sub_100038FB0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, int a14, unsigned int a15)
{
  a15 = v16 - 460628867 * (((&a13 | 0x8BDC4BD5) + (~&a13 | 0x7423B42A)) ^ 0xC74AC9A9) + 590;
  a13 = &STACK[0x4BD26FD1213425B9];
  sub_100028A48((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 + 8LL * (int)(((a14 != v15) * ((v16 - 76030703) ^ 0xFB77DFC6)) ^ v16))
                                                                                       - ((v16 - 76030703) & 0x9FDB3EB3 ^ 0x9B531E96LL)))( v18,  v19,  v20,  v21,  v22,  v23);
}

uint64_t sub_100039068( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, unsigned int a16, uint64_t a17)
{
  unsigned int v23 = 1178560073 * (&a13 ^ 0xBA947862);
  a17 = v17;
  a14 = v23 + v22 - 128;
  a16 = (((v22 + 1974771810) & 0x8A4B5F9E ^ 0x1FF95825)
       + ((2 * v18) & 0xD70F7EF6)
       + (v18 ^ 0xEB87BDAE ^ ((v22 - 884) | 0xC0))) ^ v23;
  a15 = a12;
  uint64_t v24 = ((uint64_t (*)(int *))(*(void *)(v20 + 8LL * (v22 ^ 0x509)) - 8LL))(&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v21 + 8LL * (((a13 != v19) | (2 * (a13 != v19))) ^ v22)) - 12LL))(v24);
}

uint64_t sub_100039148( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t *a13, uint64_t a14, int a15, int a16, int a17, int a18)
{
  int v21 = 460628867 * ((&a13 - 1886733488 - 2 * ((unint64_t)&a13 & 0x8F8ABB50)) ^ 0xC31C392D);
  a13 = &STACK[0x58A7AA08624568EE];
  a14 = a12;
  a15 = v21 - 1370370129;
  a16 = v21 + 2138961942 + v20;
  a17 = 635686783 - v21;
  uint64_t v22 = sub_10004D0C0((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
                                                      * (((a18 == ((v20 - 693) ^ (v18 + 307)))
                                                        * (((v20 - 1146) | 0x4A0) - 748)) ^ v20))
                                          - 12LL))(v22);
}

uint64_t sub_100039214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, unsigned int a14, unint64_t *a15, uint64_t a16)
{
  a14 = (v16 - 1111) ^ (1374699841
                      * ((((&a14 | 0x21ACE69C) ^ 0xFFFFFFFE) - (~&a14 | 0xDE531963)) ^ 0xB3A7016A));
  a15 = &STACK[0x384B062F07609554];
  a16 = a10;
  uint64_t v19 = ((uint64_t (*)(unsigned int *))(*(void *)(v17 + 8LL * (v16 - 1275)) - 8LL))(&a14);
  return (*(uint64_t (**)(uint64_t))(v18
                                            + 8LL
                                            * ((121 * (a12 == ((v16 - 1710155678) | 0x1420080) - 960762009)) ^ v16)))(v19);
}

uint64_t sub_1000392D4()
{
  unsigned int v14 = 1689051594
      - 108757529 * ((2 * (&v9 & 0x4A6220) - &v9 + 2142608861) ^ 0x9F29FFF6)
      + v3
      + 93;
  uint64_t v11 = v0;
  uint64_t v12 = v6;
  uint64_t v13 = 0x3B4E8EE293AAEC8ALL;
  (*(void (**)(unsigned int *))(v4 + 8LL * (v3 + 1689051594)))(&v9);
  unsigned int v9 = (v3 + 1689052348) ^ (1755732067
                          * (((&v9 | 0x7744F355) - (&v9 & 0x7744F355)) ^ 0xA9824E8E));
  uint64_t v11 = v6;
  sub_100049128((uint64_t)&v9);
  unsigned int v10 = v3
      + 1689051594
  uint64_t v11 = v6;
  v1(&v9);
  uint64_t v11 = v8;
  unsigned int v10 = v3
      + 1689052227
  v1(&v9);
  return v7 ^ v2;
}

void sub_100039498(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 4) ^ (460628867 * (((a1 | 0x4A5B5FFB) - (a1 & 0x4A5B5FFB)) ^ 0x6CDDD86));
  uint64_t v3 = *(void *)(a1 + 8);
  v2[0] = v1 + 628203409 * (((v2 | 0xF7CBF79) + (~v2 | 0xF0834086)) ^ 0x8DF4B34B) - 617;
  sub_10001A608((uint64_t)v2);
  __asm { BR              X8 }

void sub_100039594()
{
  else {
    int v3 = v1 + 2;
  }
  *uint64_t v0 = v3;
}

void sub_100039600(_DWORD *a1)
{
  unsigned int v1 = *a1 + 1755732067 * (((a1 | 0xFD508F6) - (_DWORD)a1 + (a1 & 0xF02AF709)) ^ 0xD113B52D);
  __asm { BR              X14 }

uint64_t sub_100039720()
{
  int v4 = v0 + 295202885 < (int)((v1 ^ 0x1B17FF6C) + v3);
  if (v3 > 0x64E8035A != v0 + 295202885 < -1692926811) {
    int v4 = v3 > 0x64E8035A;
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v2 + 8LL * ((v4 << 9) | (v4 << 10) | v1 ^ 0x2EC)) - 12LL))(0x5795C76E21738119LL);
}

uint64_t sub_100039858@<X0>( uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X6>, unsigned int a6@<W7>, int a7@<W8>)
{
  unint64_t v17 = a1 + a3 + (*(_DWORD *)(v7 + 4 * v12) ^ v9) + a6 * (unint64_t)(*(_DWORD *)(*a5 + 4LL * a2) ^ v9);
  *(_DWORD *)(v7 + 4 * v12) = v17
                            + (((((v11 - 1990494502) & 0x76A48BC9) - 708) | 0x20) ^ (v9 + 283))
                            - (((_DWORD)v17 << (((v11 - 38) & 0xC9 ^ v13) - 69)) & 0x7FD7101E);
  BOOL v19 = a2 - 1793570764 < a7 && a2 - 1793570764 >= a4;
  return ((uint64_t (*)(unint64_t))(*(void *)(v8
                                                               + 8LL * ((v11 - 1990494502) & 0x76A48BC9 ^ (v19 * v10)))
                                                   - 4LL))((v14 ^ HIDWORD(v17)) + (v15 & (v17 >> 31)) + v16);
}

uint64_t sub_100039918(uint64_t a1)
{
}

uint64_t sub_10003997C@<X0>(int a1@<W8>)
{
  int v4 = a1 - 1211;
  BOOL v5 = v1 + 77641432 < (int)(v3 + 236995384);
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1310 * v5) ^ v4)) - 4LL))();
}

uint64_t sub_100039A74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v14 = a1 - 0x5795C76E21738119LL + (*(_DWORD *)(v2 + 4 * v4) ^ v5);
  *(_DWORD *)(v2 + 4 * v4) = v14 + v5 - ((2 * v14) & 0x7FD7101E);
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((((v8 + 88 + v6) & v7 ^ a2 ^ (v14 >> (((v8 + 88) ^ v9)
                                                                                * v10
                                                                                - 86)))
                                           + v12
                                           + (v11 & (2 * (v14 >> (((v8 + 88) ^ v9) * v10 - 86)))) != 0x5795C76E21738119LL)
                                          * v13) ^ (v8 + 88)))
                            - 8LL))();
}

uint64_t sub_100039B1C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  int v13 = *a10 - 176105989;
  BOOL v14 = v10 - 176105989 < v12 + 2130730981;
  int v15 = v14 ^ (v13 < ((v12 - 630) | 0x146) + 2130731285);
  BOOL v16 = v10 - 176105989 > v13;
  if (!v15) {
    BOOL v14 = v16;
  }
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((1483 * v14) ^ v12)) - 8LL))();
}

void sub_100039B90()
{
  *int v1 = v0;
}

uint64_t sub_100039BB4(uint64_t a1)
{
  int v1 = 1374699841 * ((((2 * a1) | 0x4FD35BAC) - a1 + 1477857834) ^ 0xCA1DB5DF);
  int v2 = *(_DWORD *)a1 ^ v1;
  int v3 = *(_DWORD *)(a1 + 16) + v1;
  if (v3 < 0) {
    int v3 = -v3;
  }
  int v4 = *(_DWORD *)(*(void *)(a1 + 8) - 0xC7F991DE6408E19LL);
  unsigned int v6 = v4 - 159353952;
  BOOL v5 = v4 - 159353952 < 0;
  unsigned int v7 = 159353952 - v4;
  if (!v5) {
    unsigned int v7 = v6;
  }
  return (*((uint64_t (**)(void))*(&off_1004EDED0 + v2 - 1300) + ((573 * (v3 >> 5 < v7)) ^ v2) - 1))();
}

uint64_t sub_100039C64@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  unsigned int v4 = ((*(_DWORD *)(*(void *)(v2 - 0xC7F991DE6408E15LL) + 4LL * v3) ^ 0xBFEB880F) >> a2) ^ 0xE0F36651;
  *(_DWORD *)(result + 4) = v4 & 0xC4EA2BA4 ^ 0x3264FBF1 ^ ((v4 & 0xC4822281 | 0x12788964)
                                                          - (v4 & 0x680924 | 0xED87769B)
                                                          - 309889381);
  return result;
}

uint64_t sub_100039CE4(uint64_t result)
{
  *(_DWORD *)(result + 4) = 538735252;
  return result;
}

void sub_100039CF4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1225351577 * ((-2 - ((a1 | 0x64CFEAB8) + (~(_DWORD)a1 | 0x9B301547))) ^ 0xB8AACD51);
  __asm { BR              X13 }

uint64_t sub_100039E6C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, char a31, uint64_t a32, char a33, uint64_t a34, char a35, uint64_t a36, char a37, uint64_t a38, char a39)
{
  __n128 v46 = &a39 + v39;
  int8x16_t v65 = &a29 + v39;
  int8x16_t v64 = &a31 + v39;
  uint16x8_t v63 = &a35 + v39;
  uint16x8_t v62 = &a37 + v39;
  uint8x16_t v61 = &a33 + v39;
  uint64_t v59 = v40;
  int8x16_t v60 = &a25 + v39;
  int8x16_t v66 = &a23 + v39;
  uint64_t v47 = *a1;
  uint64_t v48 = a1[5];
  uint64_t v68 = a1[4];
  LODWORD(a13) = v42 + 380;
  *(void *)(v45 - 104) = *(void *)(*a1 - 0x7542B2AE577378FLL);
  *(void *)(v45 - 128) = &a39 + v39;
  *(void *)(v45 - 120) = v48;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923 * (((v45 - 144) & 0x3BB37F04 | ~((v45 - 144) | 0x3BB37F04)) ^ 0x36FF7D2C);
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = a3;
  int8x16_t v67 = *(void (**)(uint64_t))(a2 + 8LL * ((int)v42 - 1378));
  uint64_t v69 = v41;
  v67(v45 - 144);
  *(void *)(v45 - 136) = v48;
  *(void *)(v45 - 128) = v66;
  *(_DWORD *)(v45 - 144) = (v42 - 453) ^ (((2 * ((v45 - 144) & 0x7323D130) - (v45 - 144) + 215756489) ^ 0x2F46F6DF) * v43);
  *(void *)(v45 - 120) = v46;
  *(void *)(v45 - 112) = v47;
  ((void (*)(uint64_t))((char *)*(&off_1004EDED0 + (int)v42 - 1504) - 4))(v45 - 144);
  *(void *)(v45 - 104) = v46;
  *(_DWORD *)(v45 - 112) = v42 + 380 + 1224239923 * ((v45 + 460286470 - 2 * ((v45 - 144) & 0x1B6F6A96)) ^ 0xE9DC9741);
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 128) = v65;
  *(void *)(v45 - 120) = v48;
  v67(v45 - 144);
  *(void *)(v45 - 104) = v65;
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 128) = v64;
  *(void *)(v45 - 120) = v48;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923 * (((v45 - 144) & 0xFA6987D9 | ~((v45 - 144) | 0xFA6987D9)) ^ 0xF72585F1);
  v67(v45 - 144);
  *(void *)(v45 - 104) = v64;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923
                         * ((((v45 - 144) | 0x89678349) - (v45 - 144) + ((v45 - 144) & 0x76987CB0)) ^ 0x7BD47E9E);
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 128) = v63;
  *(void *)(v45 - 120) = v48;
  v67(v45 - 144);
  *(void *)(v45 - 104) = v63;
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 128) = v62;
  *(void *)(v45 - 120) = v48;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923
                         * ((((v45 - 144) | 0xA3105CC4) - (v45 - 144) + ((v45 - 144) & 0x5CEFA338)) ^ 0x51A3A113);
  v67(v45 - 144);
  *(void *)(v45 - 104) = v62;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923 * (((v45 - 144) & 0x9B210A30 | ~((v45 - 144) | 0x9B210A30)) ^ 0x966D0818);
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 128) = v61;
  *(void *)(v45 - 120) = v48;
  v67(v45 - 144);
  *(void *)(v45 - 104) = v61;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923 * ((((v45 - 144) | 0x95C539CC) - ((v45 - 144) & 0x95C539CC)) ^ 0x6776C41B);
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 128) = v60;
  *(void *)(v45 - 120) = v48;
  v67(v45 - 144);
  *(void *)(v45 - 144) = v47;
  *(void *)(v45 - 136) = v66;
  *(void *)(v45 - 104) = v60;
  *(void *)(v45 - 128) = v66;
  *(void *)(v45 - 120) = v48;
  *(_DWORD *)(v45 - 112) = v42
                         + 380
                         + 1224239923 * (((v45 - 144) & 0x8BC4ED51 | ~((v45 - 144) | 0x8BC4ED51)) ^ 0x8688EF79);
  v67(v45 - 144);
  uint64_t v49 = *(void *)(v47 - 0x7542B2AE5773797LL);
  *(_DWORD *)(v45 - 128) = v42
                         + 1374699841
                         * ((-1520606683 - ((v45 - 144) | 0xA55D6225) + ((v45 - 144) | 0x5AA29DDA)) ^ 0x375685D3)
                         - 79;
  *(void *)(v45 - 144) = v49;
  *(void *)(v45 - 136) = v44;
  sub_100009708(v45 - 144);
  *(void *)(v45 - 136) = v68;
  *(_DWORD *)(v45 - 144) = v42 + 235795823 * ((v45 - 862440077 - 2 * ((v45 - 144) & 0xCC983603)) ^ 0x58357F5A) - 1147;
  sub_1000169B0(v45 - 144);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, char *, char *, char *, char *, uint64_t, uint64_t, uint64_t))(v69 + 8LL * (int)((((*(_DWORD *)(v45 - 140) - 313388985) < 0x7FFFFFFF) * (((v42 - 1428) | 0x54) + ((v42 - 1051) ^ 0xFFFFFEC0))) ^ v42)))( v50,  v51,  v52,  v53,  v54,  v55,  v56,  v57,  v59,  v60,  v61,  v62,  v63,  v64,  v65,  v66,  a12,  a13,  v42);
}

uint64_t sub_10003A370()
{
  int v5 = 1224239923 * ((v4 - 144) ^ 0xF2B3FDD7);
  *(_DWORD *)(v4 - 128) = v5 + v0 + 10;
  *(_DWORD *)(v4 - 144) = v5 ^ 0x3EAF37E3;
  *(void *)(v4 - 136) = v8;
  sub_10000B698((_DWORD *)(v4 - 144));
  *(void *)(v4 - 104) = v1;
  *(_DWORD *)(v4 - 112) = v0
                        + 1224239923 * ((2 * ((v4 - 144) & 0x53DB0AB8) - (v4 - 144) + 740619589) ^ 0xDE970892)
                        + 1724;
  *(void *)(v4 - 128) = v1;
  *(void *)(v4 - 120) = v2;
  *(void *)(v4 - 144) = v3;
  *(void *)(v4 - 136) = v8;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = ((v0 + 556) | 0x98)
                        + 1374699841 * ((((v4 - 144) | 0xF444FDE1) + (~(v4 - 144) | 0xBBB021E)) ^ 0x99B0E5E9)
                        + 557;
  *(void *)(v4 - 144) = v1;
  *(void *)(v4 - 136) = v7;
  return sub_100009708(v4 - 144);
}

void sub_10003B3E0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) ^ (1178560073 * ((((2 * a1) | 0xD7F3130A) - a1 + 335967867) ^ 0x516DF1E7));
  __asm { BR              X14 }

uint64_t sub_10003B510@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v14 = v11 > 0x21B7F2B0;
  *(_DWORD *)(a9 + 4LL * (v9 + a1)) = *(_DWORD *)(*(void *)(v12 - 0xC7F991DE6408E15LL) + 4LL * (v9 + a1));
  if (v14 == v9 + 985134360 < -565703345) {
    BOOL v14 = v9 + 985134360 < (int)(v11 + 1581780303);
  }
  return ((uint64_t (*)(uint64_t))(*(void *)(v13 + 8LL * ((510 * !v14) ^ (v10 - 799))) - 8LL))(3729263951LL);
}

uint64_t sub_10003B5B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v16 = v14 - 963 + v13 - 986969928;
  BOOL v18 = v16 > 1757160217 || v16 < a13 - 390323430;
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((23 * v18) ^ v14)) - 12LL))();
}

uint64_t sub_10003B628@<X0>( int a1@<W2>, int a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(_DWORD *)(a10 + 4LL * (v10 + a2)) = a1;
  int v17 = v12 + v10 + 555;
  BOOL v19 = v17 > ((v11 - 1139021551) & 0x43E4132B) + v13 || v17 < v14;
  return ((uint64_t (*)(void))(*(void *)(v16 + 8LL * ((v19 * v15) ^ v11)) - 12LL))();
}

uint64_t sub_10003B67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7
                                                                                          + 8LL
                                                                                          * ((((2 * v6) ^ 0x40A)
                                                                                            * (v5 == 0)) ^ v6))
                                                                              - ((v6 - 480591215) & 0x1CA53FFF ^ 0x4B7LL)))( a1,  a2,  a3,  a4,  a5);
}

uint64_t sub_10003B6D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  int v17 = 1374699841 * ((2 * ((v16 - 128) & 0x66A9F4B8) - (v16 - 128) + 425069377) ^ 0x74A21348);
  *(_DWORD *)(v16 - 128) = v15 - v17 - 188;
  *(_DWORD *)(v16 - 124) = v17 + ((a13 << 6) & 0xDB9F1FC0) + ((32 * a13) ^ 0x6DCF8FF5) - 621380673;
  *(void *)(v16 - 120) = a14;
  sub_100014F58((_DWORD *)(v16 - 128));
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL
                                        * ((1972 * (*a10 + ((v15 - 159355000) ^ v15 ^ 0x307u) > 0x7FFFFFFE)) ^ v15))
                            - 4LL))();
}

uint64_t sub_10003B7B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(_DWORD *)(v18 - 112) = v14
                         + 1374699841 * (((~(v18 - 128) & 0x2D3D96EC) - (~(v18 - 128) | 0x2D3D96ED)) ^ 0x40C98EE4)
                         + 427;
  *(void *)(v18 - 128) = a14;
  *(void *)(v18 - 120) = &STACK[0xC7F991DE6408E5D];
  sub_100009708(v18 - 128);
  *(void *)(v18 - 120) = a14;
  *(_DWORD *)(v18 - 112) = v14
                         + ((((v18 - 128) ^ 0x5F497C76) & 0x2F4F9D48 | ~((v18 - 128) ^ 0x5F497C76 | 0x2F4F9D48)) ^ 0x356D66A3)
                         * v16
                         + 567;
  *(void *)(v18 - 104) = v17;
  uint64_t v19 = ((uint64_t (*)(uint64_t))*(&off_1004EDED0 + (v14 ^ 0x4A7)))(v18 - 128);
  return ((uint64_t (*)(uint64_t))(*(void *)(v15
                                                      + 8LL
                                                      * (int)(((*(_DWORD *)(v18 - 128) > ((v14 + 1618980239) ^ 0x607FB2C9u)
                                                                                       + 268031314)
                                                             * (((v14 + 1618980239) & 0x9F804EFF) + 405)) ^ v14))
                                          - 4LL))(v19);
}

uint64_t sub_10003B8D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  int v18 = (v17 + 888) | 0x12;
  int v19 = 1075 - (a16 - 159353952 + v18);
  if (a16 - 159353952 + v18 - 1075 >= 0) {
    int v19 = a16 - 159353952 + v18 - 1075;
  }
  return (*(uint64_t (**)(uint64_t))(v16
                                            + 8LL
}

uint64_t sub_10003B984(int a1)
{
  return (*(uint64_t (**)(void))(v4 + 8LL * (((*(_DWORD *)(v1 + 4LL * v2) != a1) * ((v3 + 906) ^ 0xA9)) ^ v3)))();
}

uint64_t sub_10003B9B4()
{
  return (*(uint64_t (**)(void))(v2 + 8LL * (((v0 - 1 > (int)((v1 - 906) ^ 0xFFFFFF56)) * ((v1 + 778) ^ 0x4BB)) ^ v1)))();
}

uint64_t sub_10003B9F0()
{
  uint64_t v3 = *(void *)(v5 + 32);
  *(_DWORD *)(v2 - 112) = v0 + 1374699841 * ((v2 - 128) ^ 0x6DF41809) - 376;
  *(void *)(v2 - 128) = v1;
  *(void *)(v2 - 120) = v3;
  return sub_100009708(v2 - 128);
}

uint64_t sub_10003BEA4(uint64_t a1)
{
  int v1 = 535753261 * (((a1 | 0xB4CC401E) - a1 + (a1 & 0x4B33BFE1)) ^ 0xBE384E31);
  int v2 = *(_DWORD *)(a1 + 8) ^ v1;
  int v3 = *(_DWORD *)(a1 + 24) - v1;
  int v4 = *(_DWORD *)(*(void *)(a1 + 16) - 0xC7F991DE6408E19LL);
  unsigned int v6 = v4 - 159353952;
  BOOL v5 = v4 - 159353952 < 0;
  unsigned int v7 = 159353952 - v4;
  if (v5) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v6;
  }
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + v2 - 1195)
                              + ((944 * ((v3 - 2129462123) >= 4 * (unint64_t)v8)) ^ v2)
                              - 1)
                            - 12LL))();
}

uint64_t sub_10003BF6C()
{
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (int)((v2 + 632557832) & 0xDA4BEEEA ^ (29 * (v1 == 2129462123))))
                            - (((v2 + 632557832) & 0xDA4BEEEA)
                             - 4)
                            + 1208LL))();
}

uint64_t sub_10003BFBC(uint64_t result)
{
  *(_DWORD *)(result + 28) = v1;
  return result;
}

uint64_t sub_10003BFC4(uint64_t a1)
{
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v1 + 8LL * (int)((v3 - 173) ^ 0x4A))
                                                                    - v3
                                                                    + 1216LL))( a1,  v3,  3219884047LL,  v2);
}

uint64_t sub_10003C038@<X0>(void *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W8>)
{
  *(_BYTE *)(*a1 + (a4 + a5)) = ((a3 ^ v7) >> v8)
                                            - (((a3 ^ v7) >> v8 << ((a2 + 49) ^ 0xD4)) & (a2 - 96))
                                            + 50;
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (a2 | (a4 - 1 == v6) | (16 * (a4 - 1 == v6)))) - 12LL))();
}

uint64_t sub_10003C094(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3
                                                                                + 8LL
                                                                                * (int)((74 * (v5 == 24)) ^ (a2 - 173)))
                                                                    - a2
                                                                    + 1216LL))( a1,  a2,  a3,  v4);
}

uint64_t sub_10003C0C8(uint64_t a1)
{
  BOOL v7 = v4 - 1798686946 > 2047817217 || v4 - 1798686946 < v3;
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v1 + 8LL * (v5 ^ (193 * v7)))
                                                                    - 5 * (v5 ^ 0x4E3u)
                                                                    + 1216LL))( a1,  5 * (v5 ^ 0x4E3u),  3219884047LL,  v2);
}

uint64_t sub_10003C120@<X0>(void *a1@<X0>, int a2@<W8>)
{
  return sub_10003C038(a1, v5 + 173, *(_DWORD *)(*v3 + 4LL * (v4 - 1699021736 + v5 + 173)), v2, a2);
}

void sub_10003C14C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 44) - 1224239923 * (((a1 | 0x1FD8AEE4) - a1 + (a1 & 0xE027511B)) ^ 0xED6B5333);
  __asm { BR              X13 }

uint64_t sub_10003C268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v5
                                                                                + 8LL
                                                                                * (v3 ^ (1928 * (v4 != 0xEB8F3DED))))
                                                                    - 12LL))( a1,  a2,  a3,  (v3 + 69));
}

uint64_t sub_10003C2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v15 = v7 > v9;
  *(_BYTE *)(v13 + (v11 - 271286987)) = *(_BYTE *)(*(void *)(v12 + 8LL * (v5 ^ 0x1E3))
                                                               + (((_BYTE)v11 + 53) & 0xF)
                                                               - 4LL) ^ *(_BYTE *)(v4 + (v11 - 271286987)) ^ (23 * ((v11 + 53) & 0xF)) ^ *(_BYTE *)(*(void *)(v12 + 8LL * (v5 - 321)) + (((_BYTE)v11 + 53) & 0xF)) ^ *(_BYTE *)(*(void *)(v12 + 8LL * (v5 - 314)) + (((_BYTE)v11 + 53) & 0xF) + (a4 ^ 0x1F3) - 8);
  if (v15 == v11 - 1983323350 < v6) {
    BOOL v15 = v11 - 1983323350 < v8;
  }
  return ((uint64_t (*)(void))(*(void *)(v14 + 8LL * ((v15 * v10) ^ v5)) - 12LL))();
}

uint64_t sub_10003C36C()
{
  return (*(uint64_t (**)(void))(v2
                              + 8LL
                              * ((52
                                * ((((v0 + 753702940) & 0xD313674B ^ 0xE6FAFFEC) & (2 * v1) ^ 0xC61A79CA)
                                 + (v1 ^ 0x18F2411A)
                                 + ((v0 - 1193) ^ 0x3EE3DA49) != 845240498)) ^ v0)))();
}

uint64_t sub_10003C3E8()
{
  return (*(uint64_t (**)(void))(v3 + 8LL * ((98 * (v2 + v1 + v0 + 209878278 >= (v0 - 1531))) ^ v0)))();
}

uint64_t sub_10003C450(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  return ((uint64_t (*)(void))(*(void *)(v8
                                        + 8LL
                                        * ((30
}

uint64_t sub_10003C49C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v12 = (a3 + v9 + v8 + 1227);
  uint64_t v13 = v12 + v10;
  uint64_t v14 = v12 & 0xF;
  unint64_t v15 = v14 - v13 + v6;
  uint64_t v16 = (v7 | v14) - v13;
  unint64_t v17 = (v5 | v14) - v13;
  BOOL v21 = v15 > 0xF && v4 - v10 >= (((a4 ^ 0x15u) + 575) ^ 0x5BDuLL) && (unint64_t)(v16 + 1) > 0xF && v17 > 0xF;
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((248 * v21) ^ a4)) - 12LL))();
}

uint64_t sub_10003C520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v8
                                                                       + 8LL
                                                                       * ((788
                                                                         * (((v7 < 0x10) ^ ((a7 ^ 0x37) - 1)) & 1)) ^ a7))
                                                           - 8LL))( a1,  a2,  0LL);
}

uint64_t sub_10003C558( uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  char v63 = a4 + 2;
  unsigned int v64 = (a4 + 1289949719) & 0xB31CEFDF;
  v70.val[1].i64[0] = ((_BYTE)a2 + 11) & 0xF;
  v70.val[1].i64[1] = ((_BYTE)a2 + v63 + 21 + 121) & 0xF;
  v70.val[2].i64[0] = ((_BYTE)a2 + 9) & 0xF;
  v70.val[2].i64[1] = ((_BYTE)a2 + 8) & 0xF;
  v70.val[3].i64[0] = ((_BYTE)a2 + 7) & 0xF;
  v70.val[3].i64[1] = ((_BYTE)a2 + 6) & 0xF;
  v65.i64[0] = 0x8787878787878787LL;
  v65.i64[1] = 0x8787878787878787LL;
  uint64_t v66 = a2 + ((v64 - 527) ^ (v57 - 126));
  v70.val[0].i64[0] = ((_BYTE)a2 + ((v64 - 15) ^ (v57 - 126))) & 0xF;
  v70.val[0].i64[1] = ((_BYTE)a2 + 12) & 0xF;
  v67.i64[0] = vqtbl4q_s8(v70, (int8x16_t)xmmword_1003BA320).u64[0];
  v71.val[0].i64[1] = ((_BYTE)a2 + 4) & 0xF;
  v71.val[1].i64[1] = ((_BYTE)a2 + 2) & 0xF;
  v71.val[2].i64[1] = a2 & 0xF;
  v71.val[3].i64[1] = ((_BYTE)a2 + 14) & 0xF;
  v71.val[0].i64[0] = ((_BYTE)a2 + 5) & 0xF;
  v71.val[1].i64[0] = ((_BYTE)a2 + 3) & 0xF;
  v71.val[2].i64[0] = ((_BYTE)a2 + 1) & 0xF;
  v71.val[3].i64[0] = ((_BYTE)a2 - 1) & 0xF;
  v67.i64[1] = vqtbl4q_s8(v71, (int8x16_t)xmmword_1003BA320).u64[0];
  int8x16_t v68 = vrev64q_s8(vmulq_s8(v67, v65));
  *(int8x16_t *)(*(void *)(v62 - 120) - 15LL + v66) = veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v59 + (v66 & 0xF) - 15),  *(int8x16_t *)(v56 - 15 + v66)),  veorq_s8( *(int8x16_t *)((v66 & 0xF) + v60 - 14),  *(int8x16_t *)(v58 + (v66 & 0xF) - 15))),  vextq_s8(v68, v68, 8uLL));
  return ((uint64_t (*)(void))(*(void *)(a56 + 8LL * (int)((13 * ((v61 & 0xFFFFFFF0) != 16)) ^ v64)) - 12LL))();
}

void sub_10003C6D0()
{
}

uint64_t sub_10003C6DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
}

uint64_t sub_10003C718( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v9
                                                      + 8LL
                                                      * ((353 * ((((a8 - 350) ^ (((a8 - 1220) & v8) == 0)) & 1) == 0)) ^ a8))
                                          - 8LL))(a1);
}

uint64_t sub_10003C75C@<X0>( int a1@<W2>, int a2@<W3>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51)
{
  int v60 = v58 + a3 + v57;
  unsigned int v61 = v60 + v52 - a1;
  v63.val[0].i64[0] = v61 & 0xF;
  v63.val[0].i64[1] = ((_BYTE)v60 - (_BYTE)a1 + 12) & 0xF;
  v63.val[1].i64[0] = ((_BYTE)v60 - (_BYTE)a1 + 11) & 0xF;
  v63.val[1].i64[1] = ((_BYTE)v60 - (_BYTE)a1 + ((102 * (a2 ^ 0x98)) ^ 6)) & 0xF;
  v63.val[2].i64[0] = ((_BYTE)v60 - (_BYTE)a1 + 9) & 0xF;
  v63.val[2].i64[1] = ((_BYTE)v60 - (_BYTE)a1 + 8) & 0xF;
  v63.val[3].i64[0] = ((_BYTE)v60 - (_BYTE)a1 + 7) & 0xF;
  v63.val[3].i64[1] = ((_BYTE)v60 - (_BYTE)a1 + 6) & 0xF;
  *(int8x8_t *)(v59 - 7 + v61) = veor_s8( veor_s8( veor_s8(*(int8x8_t *)(v54 + v63.val[0].i64[0] - 7), *(int8x8_t *)(v51 - 7 + v61)),  veor_s8( *(int8x8_t *)(v63.val[0].i64[0] + v55 - 6),  *(int8x8_t *)(v53 + v63.val[0].i64[0] - 7))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v63, (int8x16_t)xmmword_1003BA330),  (int8x8_t)0x8787878787878787LL)));
}

void sub_10003C87C()
{
}

uint64_t sub_10003C884( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v26
                                                                                + 8LL
                                                                                * ((((v25 - 350) ^ 0x120) * (v24 == a7)) ^ v25))
                                                                    - 8LL))( a24,  a2,  a3,  (v25 - 350) ^ 0x29Cu);
}

uint64_t sub_10003C8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  *(_BYTE *)(v12 + (a6 + v8)) = *(_BYTE *)(v10 + ((a6 + v8) & 0xFLL)) ^ *(_BYTE *)(v6
                                                                                               + (a6 + v8)) ^ *(_BYTE *)((((_BYTE)a6 + (_BYTE)v8) & 0xF) + v11 + 1) ^ *(_BYTE *)(v9 + (((_BYTE)a6 + (_BYTE)v8) & 0xF)) ^ (((a6 + v8) & 0xF) * ((a5 ^ 0x9C) - 107));
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * ((1008 * (a6 - 1 != v7)) ^ (a5 + 622))) - 4LL))();
}

uint64_t sub_10003C92C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  uint64_t v50 = *(void *)(a1 + 24);
  *(int8x16_t *)(v48 - 112) = veorq_s8( *(int8x16_t *)(*(void *)(a1 + 16) - 0x2CB40BEC8D7CDE9DLL),  (int8x16_t)xmmword_1003BA340);
  if (v47) {
    BOOL v51 = v50 == 0x39E8CCF6252BBBF8LL;
  }
  else {
    BOOL v51 = 1;
  }
  int v52 = v51;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 8LL * (int)(((((((_DWORD)a4 - 16) ^ v52) & 1) == 0) * (a4 + 763)) ^ a4)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47);
}

uint64_t sub_10003C9A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47)
{
  BOOL v50 = (_DWORD)a25 == v47 + 547374634 || (((_BYTE)a25 + 4) & 0xF) != 11 * (v47 ^ 0x1D3) - 539;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 8LL * (v47 ^ (16 * v50))))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35,  a36,  a37,  a38,  a39,  a40,  a41,  a42,  a43,  a44,  a45,  a46,  a47);
}

uint64_t sub_10003C9F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,int a55,int a56,int a57)
{
  return ((uint64_t (*)(void))(*(void *)(v57
                                        + 8LL
                                        * (a57 ^ (1830
                                                * (((2 * (a25 - ((2 * a55) & 0x73F15AF2) + 425223533)) & 0xF7EFFEEE ^ 0x73E15AE2)
                                                 + ((a25 - ((2 * a55) & 0x73F15AF2) + 425223533) ^ 0x420F520E)
                                                 - 277165155 != 1802685204))))
                            - 12LL))();
}

uint64_t sub_10003CAC0(int a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * (((a2 + a1 + 13 * (v2 ^ 0x20Fu) - 2079850918 > 7) * (v2 + 872)) ^ v2))
                            - 12LL))();
}

uint64_t sub_10003CB38(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

uint64_t sub_10003CB74(int a1, int a2, int a3)
{
  uint64_t v9 = (a2 + a1 + v6);
  unint64_t v10 = v9 + v7 + 1;
  uint64_t v11 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)v6) & 0xF;
  uint64_t v12 = v11 - v9;
  unint64_t v13 = v4 + v12;
  ++v11;
  unint64_t v14 = v4 + v11;
  unint64_t v15 = v5 + v12;
  unint64_t v16 = v5 + v11;
  unint64_t v17 = v3 + v12;
  unint64_t v18 = v3 + v11;
  BOOL v20 = v14 > v7 && v13 < v10;
  if (v16 > v7 && v15 < v10) {
    BOOL v20 = 1;
  }
  int v23 = v18 > v7 && v17 < v10 || v20;
}

uint64_t sub_10003CC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * ((((a6 - 2008942240) & 0x77BE03DF ^ 0x253)
                                                                         * (v6 < 0x10)) ^ a6))
                                                           - ((a6 + 1710980831) & 0x9A047FFE ^ 0x3E0LL)))( a1,  a2,  0LL);
}

uint64_t sub_10003CC5C(int a1, int a2, uint64_t a3, int a4)
{
  v19.val[1].i64[0] = ((_BYTE)v8 + 9) & 0xF;
  v19.val[1].i64[1] = ((_BYTE)v8 + 8) & 0xF;
  v19.val[2].i64[0] = ((_BYTE)v8 + 7) & 0xF;
  v19.val[2].i64[1] = ((_BYTE)v8 + 6) & 0xF;
  v19.val[3].i64[0] = ((_BYTE)v8 + 5) & 0xF;
  v19.val[3].i64[1] = ((_BYTE)v8 + 4) & 0xF;
  v20.val[0].i64[0] = ((_BYTE)v8 + 3) & 0xF;
  v20.val[0].i64[1] = ((_BYTE)v8 + 2) & 0xF;
  v20.val[1].i64[0] = (v8 + 1) & 0xF;
  v20.val[1].i64[1] = v8 & 0xF;
  v20.val[2].i64[0] = (v8 - 1) & 0xF;
  v20.val[2].i64[1] = (v8 + 14) & 0xF;
  v20.val[3].i64[0] = ((_BYTE)v8 + 13) & 0xF;
  v20.val[3].i64[1] = ((_BYTE)v8 + 12) & 0xF;
  v12.i64[0] = 0x505050505050505LL;
  v12.i64[1] = 0x505050505050505LL;
  v13.i64[0] = 0x3232323232323232LL;
  v13.i64[1] = 0x3232323232323232LL;
  uint64_t v14 = v9 + a2 + a1 - 539 + (a4 ^ 0x1FFu);
  v19.val[0].i64[0] = ((_BYTE)v9 + (_BYTE)a2 + (_BYTE)a1 - 27 + ~(_BYTE)a4) & 0xF;
  v19.val[0].i64[1] = ((_BYTE)v8 + 10) & 0xF;
  v15.i64[0] = vqtbl4q_s8(v19, (int8x16_t)xmmword_1003BA320).u64[0];
  v15.i64[1] = vqtbl4q_s8(v20, (int8x16_t)xmmword_1003BA320).u64[0];
  int8x16_t v16 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v10 - 15 + v14), *(int8x16_t *)(v6 + (v14 & 0xF) - 15)),  veorq_s8(*(int8x16_t *)(v7 + (v14 & 0xF) - 15), *(int8x16_t *)(v5 + (v14 & 0xF) - 15))));
  int8x16_t v17 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v16, v16, 8uLL), v13), vmulq_s8(v15, v12)));
  *(int8x16_t *)(v10 - 15 + v14) = vextq_s8(v17, v17, 8uLL);
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * ((1673 * ((v4 & 0xFFFFFFF0) == 16)) ^ a4)) - 8LL))();
}

void sub_10003CDB8()
{
}

uint64_t sub_10003CDC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,unsigned int a55,uint64_t a56,uint64_t a57)
{
  int v62 = v59 - 326;
  int v63 = (2 * (v59 - 326)) ^ 0x256;
  *(_DWORD *)(v61 - 124) = v63;
  uint64_t v64 = *(void *)(v60 + 8LL * (v59 - 479)) - 4LL;
  uint64_t v65 = *(void *)(v60 + 8LL * ((v59 - 326) ^ 0xA7));
  int v66 = (*(unsigned __int8 *)(v65 + (*v57 ^ 0xB1LL)) ^ 0xA7) << (v63 - 86);
  uint64_t v67 = *(void *)(v60 + 8LL * ((v59 - 326) ^ 0x24));
  int v68 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBEBLL) ^ 0x49LL));
  int v69 = v66 | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF6LL) ^ 0xD7LL)) ^ 0x96) << 8);
  HIDWORD(v71) = v68 ^ 2;
  LODWORD(v71) = (v68 ^ 0xFFFFFF9F) << 24;
  unsigned __int8 v70 = v71 >> 26;
  uint64_t v72 = *(void *)(v60 + 8LL * (v62 - 127));
  int v73 = *(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBECLL) ^ 0xB8LL));
  int v74 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBEFLL) ^ 0x6BLL));
  HIDWORD(v71) = v74 ^ 2;
  LODWORD(v71) = (v74 ^ 0xFFFFFF9F) << 24;
  int v75 = ((v71 >> 26) ^ 0x53) << 16;
  LOBYTE(v68) = *(_BYTE *)(v64 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBEALL) ^ 0x2ELL));
  int v76 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF7LL) ^ 0x47LL));
  HIDWORD(v71) = v76 ^ 2;
  LODWORD(v71) = (v76 ^ 0xFFFFFF9F) << 24;
  int v77 = v69 | (*(_BYTE *)(v72 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF5LL) ^ 0xECLL)) + 119) ^ 9 | (((v71 >> 26) ^ 0x1E) << 16);
  int v78 = v75 | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBEELL) ^ 0x77LL)) ^ 0x59) << 8);
  int v79 = (*(_BYTE *)(v72 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF1LL) ^ 0xA9LL)) + 119) | ((*(unsigned __int8 *)(v64 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF2LL) ^ 0x30LL)) ^ 0xA3) << 8);
  int v80 = *(unsigned __int8 *)(v67 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF3LL) ^ 0xCBLL));
  LOBYTE(v67) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBE9LL) ^ 0x36LL)) + 119;
  HIDWORD(v71) = v80 ^ 2;
  LODWORD(v71) = (v80 ^ 0xFFFFFF9F) << 24;
  int v81 = ((v70 ^ 0xFB) << 16) | ((v73 ^ 0x1F) << 24) | ((v68 ^ 0x53) << 8);
  LOBYTE(v64) = *(_BYTE *)(v72 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBEDLL) ^ 0xB5LL));
  unsigned int v82 = v79 & 0xFF00FFFF | (((v71 >> 26) ^ 0xBA) << 16) | ((*(unsigned __int8 *)(v65
                                                                                                + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF4LL) ^ 0x35LL)) ^ 0x68) << 24);
  uint64_t v83 = *(void *)(v60 + 8LL * (v62 ^ 0xCD)) - 8LL;
  int v84 = v78 | ((*(unsigned __int8 *)(v65 + (*(unsigned __int8 *)(v58 - 0x39E8CCF6252BBBF0LL) ^ 0xBFLL)) ^ 0x71) << 24);
  uint64_t v85 = v70 ^ 0x61u;
  uint64_t v86 = *(void *)(v60 + 8LL * (v62 ^ 0x40)) - 8LL;
  LODWORD(v65) = *(_DWORD *)(v83 + 4LL * (v67 ^ 0xFDu)) ^ 0x5859772F ^ *(_DWORD *)(v86 + 4 * v85);
  uint64_t v87 = v73 ^ 0x8Au;
  uint64_t v88 = *(void *)(v60 + 8LL * (v62 ^ 3)) - 12LL;
  LODWORD(v65) = (v65 - 1142355399 + (~(2 * v65) | 0x882DEB8D) + 1) ^ *(_DWORD *)(v88 + 4 * v87);
  LODWORD(v85) = v65 - ((2 * v65) & 0xFEC65660);
  uint64_t v89 = *(void *)(v60 + 8LL * (int)(v62 & 0x8524C8B7)) - 4LL;
  LOBYTE(v67) = v67 ^ 0x2A;
  unsigned int v588 = v81 & 0xFFFFFF00 | v67;
  LOBYTE(v64) = (v64 + 119) ^ 0xA8;
  unsigned int v90 = v84 & 0xFFFFFF00 | v64;
  unint64_t v587 = __PAIR64__(v77, v82);
  int v473 = *(_DWORD *)(v89 + 4LL * (v68 ^ 0x6Bu)) ^ v77 ^ (v85 - 10278096);
  *(_DWORD *)(v61 - 176) = v473 ^ v82;
  int v91 = v473 ^ v82 ^ 0x4D;
  unsigned __int8 v502 = v473 ^ v82 ^ 0x4D;
  *(_DWORD *)(v61 - 168) = v91 ^ v90;
  int v92 = v91 ^ v90 ^ (v588 - 2 * ((v81 & 0x4D356500 | v67 & 0xD7) ^ v67 & 0x10) - 852138553);
  int v516 = ((unsigned __int16)(v91 ^ v90 ^ ((v81 & 0xFF00 | v67)
                                                         - 2 * ((v81 & 0x6500 | v67 & 0xD7) ^ v67 & 0x10)
                                                         + 26055)) >> 8);
  int v505 = BYTE2(v92);
  LODWORD(v87) = *(_DWORD *)(v89 + 4LL * (v516 ^ 0x9Fu)) ^ *(_DWORD *)(v86 + 4LL * (BYTE2(v92) ^ 0x8Bu));
  unsigned int v93 = v92 ^ 0x77C2486E;
  int v514 = v92;
  int v94 = ((v87 ^ 0xF8092AD9) - ((2 * (v87 ^ 0xF8092AD9)) & 0xBE66ED8C) + 1597208262) ^ *(_DWORD *)(v83
                                                                                                + 4LL
                                                                                                * (v92 ^ 0xEEu));
  unsigned int v510 = HIBYTE(v93);
  int v95 = v473 ^ *(_DWORD *)(v88 + 4LL * (HIBYTE(v93) ^ 0x65)) ^ (v94 - ((2 * v94) & 0x77D21472) - 1142355399);
  HIDWORD(v586) = v90;
  int v96 = v90 - 2 * (v90 & 0x33FC9F2E ^ v64 & 4) - 1275289814;
  LODWORD(v64) = v95 ^ 0xB3FC9F2A;
  int v97 = v95;
  *(_DWORD *)(v61 - 160) = v95;
  unsigned int v98 = v95 ^ 0xB3FC9F2A ^ v96;
  unsigned int v99 = v98 ^ v93;
  LODWORD(v87) = v98;
  *(_DWORD *)(v61 - 128) = v98;
  int v530 = BYTE2(v99);
  int v533 = BYTE1(v99);
  unsigned int v100 = *(_DWORD *)(v86 + 4LL * (BYTE2(v99) ^ 0x2Eu)) ^ *(_DWORD *)(v89 + 4LL * (BYTE1(v99) ^ 0x9Bu)) ^ 0xF8092AD9;
  int v601 = v99;
  unsigned int v101 = (v100 - ((2 * v100) & 0xBE66ED8C) + 1597208262) ^ *(_DWORD *)(v83 + 4LL * (v99 ^ 0xD2u));
  unsigned int v102 = v99 ^ 0xB978221C;
  *(_DWORD *)(v61 - 192) = HIBYTE(v99);
  int v103 = (v101 - ((2 * v101) & 0x77D21472) - 1142355399) ^ *(_DWORD *)(v88 + 4LL * (HIBYTE(v99) ^ 0x69));
  unsigned int v104 = v103 ^ v91 ^ 0xD520653E;
  int v557 = v103 ^ v91;
  *(_DWORD *)(v61 - 152) = v104 ^ v98;
  int v105 = ((v104 ^ v87 ^ 0x4FA668D4) - ((2 * (v104 ^ v87 ^ 0x4FA668D4)) & 0x9BBF06AA) - 840989867) ^ v102;
  unsigned int v106 = v105 ^ 0x9547167F;
  int v567 = ((v105 ^ 0x9547167F) >> 16);
  int v589 = ((unsigned __int16)(v105 ^ 0x167F) >> 8);
  unsigned int v107 = *(_DWORD *)(v86 + 4LL * (v567 ^ 0x89u)) ^ *(_DWORD *)(v89 + 4LL * (v589 ^ 0x3Au)) ^ 0xF8092AD9;
  int v575 = (((v104 ^ v87 ^ 0xD4) - ((2 * (v104 ^ v87 ^ 0xD4)) & 0xAA) + 85) ^ v102);
  unsigned int v108 = (v107 - ((2 * v107) & 0xBE66ED8C) + 1597208262) ^ *(_DWORD *)(v83 + 4LL * (v575 ^ 0xE4u));
  unsigned int v592 = HIBYTE(v106);
  int v109 = (v108 - ((2 * v108) & 0x77D21472) - 1142355399) ^ *(_DWORD *)(v88 + 4LL * (HIBYTE(v106) ^ 0x1D));
  unsigned int v538 = v103 ^ v97;
  unsigned int v599 = (v109 - ((2 * v109) & 0xA38B4F64) - 775575630) ^ v103 ^ v97;
  unsigned int v110 = v599 ^ 0xD1C5A7B2 ^ v103 ^ v91;
  *(_DWORD *)(v61 - 224) = v599 ^ 0xD1C5A7B2;
  *(_DWORD *)(v61 - 256) = v110;
  unsigned int v111 = ((v110 ^ 0xFE25CD6D) - ((2 * (v110 ^ 0xFE25CD6D)) & 0x9BBF06AA) - 840989867) ^ v102;
  *(_DWORD *)(v61 - 200) = BYTE1(v111);
  int v112 = *(_DWORD *)(v89 + 4LL * (BYTE1(v111) ^ 0x6Fu));
  *(_DWORD *)(v61 - 208) = BYTE2(v111);
  int v113 = *(_DWORD *)(v86 + 4LL * (BYTE2(v111) ^ 0xA8u));
  int v524 = v64 ^ ((v473 ^ v82 ^ 0xBAF72DE4) - ((2 * (v473 ^ v82 ^ 0xBAF72DE4)) & 0x67F93E54) - 1275289814);
  *(_DWORD *)(v61 - 232) = HIBYTE(v111);
  LODWORD(v67) = ((v112 ^ v113 ^ 0xF8092AD9) - ((2 * (v112 ^ v113 ^ 0xF8092AD9)) & 0x77D21472) - 1142355399) ^ *(_DWORD *)(v88 + 4LL * (HIBYTE(v111) ^ 0x85));
  *(_DWORD *)(v61 - 248) = v111;
  LODWORD(v67) = (v67 - ((2 * v67) & 0xBE66ED8C) + 1597208262) ^ *(_DWORD *)(v83 + 4LL * (v111 ^ 0x25u));
  unsigned int v602 = v110 ^ v104 ^ v98;
  int v114 = (v67 - ((2 * v67) & 0xDFAE912E) + 1876379799) ^ v104 ^ v602;
  unsigned int v115 = (v67 - ((2 * v67) & 0xDFAE912E) + 1876379799) ^ v104;
  *(_DWORD *)(v61 - 132) = v114;
  LODWORD(v64) = v111 ^ v114 ^ 0x355EFF67;
  int v116 = v114 ^ 0x355EFF67;
  __int16 v463 = v114 ^ 0xFF67;
  *(_DWORD *)(v61 - 240) = v111;
  unsigned int v500 = (v64 ^ 0x6D8C20B0) >> 24;
  int v490 = ((v64 ^ 0x6D8C20B0) >> 16);
  int v117 = *(_DWORD *)(v86 + 4LL * (v490 ^ 0x89u)) ^ *(_DWORD *)(v88 + 4LL * (v500 ^ 0x1D));
  int v487 = ((unsigned __int16)(v64 ^ 0x20B0) >> 8);
  unsigned int v118 = ((v117 ^ 0xBC830BD0) - 2 * ((v117 ^ 0xBC830BD0) & 0x7F632B32 ^ v117 & 2) - 10278096) ^ *(_DWORD *)(v89 + 4LL * (v487 ^ 0x3Au));
  *(_DWORD *)(v61 - 184) = v599 ^ 0xD1C5A7B2 ^ v67;
  int v481 = v64;
  LODWORD(v64) = v599 ^ 0xD1C5A7B2 ^ v67 ^ *(_DWORD *)(v83 + 4LL * (v64 ^ 0x2Bu)) ^ (v118 - ((2 * v118) & 0xBE66ED8C) + 1597208262);
  int v119 = v64 ^ v115 ^ 0x7C166C11;
  int v120 = v64;
  int v579 = v64;
  LODWORD(v67) = (v119 ^ v111) >> 24;
  *(_DWORD *)(v61 - 2memset((void *)(v1 - 204), 50, 16) = v67;
  int v569 = (v119 ^ v111);
  LODWORD(v67) = *(_DWORD *)(v88 + 4LL * (v67 ^ 0x9B)) ^ *(_DWORD *)(v83 + 4LL * (v569 ^ 0x31u)) ^ 0xE4DA7CFF;
  unsigned int v546 = ((v119 ^ v111) >> 8) ^ 0x86839A;
  int v554 = ((unsigned __int16)(v119 ^ v111) >> 8) ^ 0x9A;
  int v121 = (v67 - ((2 * v67) & 0xFEC65660) - 10278096) ^ *(_DWORD *)(v89
                                                                 + 4LL
                                                                 * (((unsigned __int16)(v119 ^ v111) >> 8) ^ 0xA0u));
  LODWORD(v67) = v119 ^ v111 ^ 0xE42FE6B3;
  int v552 = ((v119 ^ v111) >> 16);
  LODWORD(v64) = (v121 - ((2 * v121) & 0xED403D2) + 124387817) ^ *(_DWORD *)(v86 + 4LL * (v552 ^ 0xAu));
  int v122 = (v64 - ((2 * v64) & 0xD4DD4916) - 361847669) ^ v120;
  *(_DWORD *)(v61 - 136) = v122;
  int v123 = v122 ^ 0x17ED3E21;
  int v124 = v122 ^ 0x17ED3E21 ^ v119;
  __int16 v496 = v122 ^ 0x3E21;
  unsigned int v560 = v119 ^ v116;
  LODWORD(v85) = v119;
  int v536 = v119;
  int v125 = v119 ^ v116 ^ 0x4158620E;
  *(_DWORD *)(v61 - 140) = v125;
  unsigned int v126 = ((v124 ^ 0x5A137D54) - ((2 * (v124 ^ 0x5A137D54)) & 0xACCAC996) - 697998133) ^ v125;
  unsigned int v127 = ((v126 ^ 0xB97FFD6F) - 2 * ((v126 ^ 0x3EE0256F) & 4 ^ (v126 ^ 0xB97FFD6F) & 0x62AC7C1D) + 1655471129) ^ v67 ^ 0x479AB031;
  int v581 = (((v126 ^ 0x6F) - 2 * ((v126 ^ 0x6F) & 4 ^ (v126 ^ 0x6F) & 0x1D) + 25) ^ v67);
  unsigned int v128 = *(_DWORD *)(v89 + 4LL * (BYTE1(v127) ^ 0x3Au)) ^ *(_DWORD *)(v83 + 4LL * (v581 ^ 0xAAu)) ^ 0xA0505DF6;
  int v129 = (v128 - ((2 * v128) & 0xED403D2) + 124387817) ^ *(_DWORD *)(v86 + 4LL * (BYTE2(v127) ^ 0x89u));
  int v130 = (v129 - ((2 * v129) & 0x77D21472) - 1142355399) ^ *(_DWORD *)(v88 + 4LL * (HIBYTE(v127) ^ 0x1D));
  unsigned int v131 = v130 ^ v85;
  unsigned int v132 = ((v130 ^ v85 ^ 0xA6C48CD5) - ((2 * (v130 ^ v85 ^ 0xA6C48CD5)) & 0xC558F832) + 1655471129) ^ v67;
  int v133 = *(_DWORD *)(v88 + 4LL * (HIBYTE(v132) ^ 5)) ^ *(_DWORD *)(v89 + 4LL * (BYTE1(v132) ^ 0x6Fu)) ^ 0x448A2109;
  int v565 = (((v130 ^ v85 ^ 0xD5) - ((2 * (v130 ^ v85 ^ 0xD5)) & 0x32) + 25) ^ v67);
  unsigned int v134 = (v133 - ((2 * v133) & 0xBE66ED8C) + 1597208262) ^ *(_DWORD *)(v83 + 4LL * (v565 ^ 0x25u));
  int v135 = v123 ^ v130;
  int v136 = v123 ^ v130 ^ *(_DWORD *)(v86 + 4LL * (BYTE2(v132) ^ 0xA8u)) ^ (v134 - ((2 * v134) & 0xED403D2) + 124387817);
  int v137 = v126 ^ 0x3EE0256F ^ v136;
  unsigned int v583 = v137;
  int v595 = ((unsigned __int16)(v137 ^ v132) >> 8);
  unsigned int v469 = (v137 ^ v132) >> 24;
  LODWORD(v88) = *(_DWORD *)(v89 + 4LL * (v595 ^ 0x44u)) ^ *(_DWORD *)(v88 + 4LL * (v469 ^ 0x47));
  int v476 = (v137 ^ v132);
  int v138 = ((v88 ^ 0x448A2109) - ((2 * (v88 ^ 0x448A2109)) & 0xBE66ED8C) + 1597208262) ^ *(_DWORD *)(v83
                                                                                                 + 4LL * (v476 ^ 0xD5u));
  int v459 = ((v137 ^ v132) >> 16);
  int v139 = (v138 - ((2 * v138) & 0xED403D2) + 124387817) ^ *(_DWORD *)(v86 + 4LL * (v459 ^ 0xCBu));
  LODWORD(v586) = v136 ^ 0x29F34BD1 ^ (v139 - ((2 * v139) & 0x5208CCF0) - 1459329416);
  int v465 = v136 ^ v131;
  unsigned int v466 = v136;
  unsigned __int8 v458 = BYTE2(v137) ^ 0x63;
  HIDWORD(v585) = v136 ^ v131 ^ 0xBC788024 ^ (v586 - ((2 * v586) & 0x31B49E60) - 1730523344);
  LODWORD(v585) = HIDWORD(v585) ^ v137 ^ 0x42632BF0 ^ 0x4662A266;
  HIDWORD(a49) = (v585 - 2 * (v585 & 0x60991DD ^ (HIDWORD(v585) ^ v137 ^ 0x42632BF0) & 9) + 101290452) ^ v137 ^ v132;
  int v140 = (char *)*(&off_1004EDED0 + (v62 ^ 0x39)) - 12;
  LODWORD(v86) = (((v135 ^ 0x1B9155BDu) >> 16)
                + 441139960
                + ((2 * ((v135 ^ 0x1B9155BDu) >> 16) + 88) & 0x196 ^ 0xF6F76FFF)) ^ *(_DWORD *)&v140[4 * (((v135 ^ 0x1B9155BDu) >> 16) ^ 0x2D)];
  LODWORD(v88) = ((BYTE2(v132) ^ 0x89) + 441139959 - ((2 * (BYTE2(v132) ^ 0x89) + 160207960) & 0x9089196)) ^ *(_DWORD *)&v140[4 * (BYTE2(v132) ^ 0xA4)];
  unsigned int v141 = (char *)*(&off_1004EDED0 + v62 + 40) - 4;
  int v142 = (v86 - ((2 * v86) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (BYTE1(v135) ^ 0x47)];
  LODWORD(v89) = v88 - ((2 * v88) & 0xB6BB4012);
  int v594 = v62;
  int v143 = (char *)*(&off_1004EDED0 + v62 + 14) - 4;
  int v144 = (v89 - 614621175) ^ *(_DWORD *)&v143[4 * (HIBYTE(v132) ^ 0xCC)];
  __int16 v572 = v126 ^ 0x256F ^ v131;
  int v145 = (char *)*(&off_1004EDED0 + v62 + 55) - 12;
  LODWORD(v67) = *(_DWORD *)&v145[4 * (v126 ^ 0x6F ^ v131 ^ 0x53)];
  int v146 = ((v126 ^ 0x3EE0256F ^ v131) >> 16);
  LODWORD(v67) = *(_DWORD *)&v140[4 * (v146 ^ 0xAA)] ^ *(_DWORD *)&v143[4 * (((v126 ^ 0x3EE0256F ^ v131) >> 24) ^ 0x3E)] ^ ((v146 ^ 0x87) + 441139960 + ((2 * (v146 ^ 0x87) + 88) & 0x196 ^ 0xF6F76FFF)) ^ (181304767 * v67 - ((362609534 * v67 - 27765796) & 0xB6BB4012) + 1518979575);
  int v147 = *(_DWORD *)&v145[4 * (v131 ^ 0x74)];
  int v148 = (181304767 * v147 - ((362609534 * v147 + 2119717852) & 0x5C4753DE) + 760206301) ^ *(_DWORD *)&v141[4 * (BYTE1(v131) ^ 0x5A)];
  unsigned int v577 = v148 - ((2 * v148) & 0xB6BB4012);
  unsigned int v543 = BYTE1(v132) ^ 0xB0;
  int v563 = v144 - ((2 * v144) & 0x5C4753DE);
  int v549 = v67 - ((2 * v67) & 0x5C4753DE);
  unsigned int v591 = (v142 - ((2 * v142) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4 * ((v135 ^ 0x1B9155BDu) >> 24)] ^ (181304767 * *(_DWORD *)&v145[4 * (v135 ^ 0x7D)] + 2133600750);
  int v149 = *(_DWORD *)&v140[4 * (((v524 ^ 0xE9B45E6C) >> 16) ^ 0xF5)] ^ ((((v524 ^ 0xE9B45E6C) >> 16) ^ 0xD8)
                                                                                      + 441139959
                                                                                      - ((2
  unsigned int v150 = *(_DWORD *)(v61 - 128) ^ 0x31676F78;
  unsigned int v151 = *(_DWORD *)&v140[4 * (BYTE2(v150) ^ 0x7B)] ^ ((BYTE2(v150) ^ 0x56)
                                                     + 441139960
                                                     + ((2 * (BYTE2(v150) ^ 0x56) + 88) & 0x196 ^ 0xF6F76FFF));
  int v152 = (v151 - 614621175 + (~(2 * v151) | 0x4944BFED) + 1) ^ *(_DWORD *)&v143[4 * HIBYTE(v150)];
  unsigned int v153 = *(_DWORD *)&v140[4 * (v530 ^ 0x34)] ^ ((v530 ^ 0x19)
                                              + 441139960
                                              + ((2 * (v530 ^ 0x19) + 88) & 0x196 ^ 0xF6F76FFF));
  int v154 = (v153 - ((2 * v153) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (v533 ^ 5)];
  int v531 = v152 - ((2 * v152) & 0x5C4753DE);
  unsigned int v534 = v154 - ((2 * v154) & 0xB6BB4012);
  int v155 = *(_DWORD *)&v145[4 * (*(_DWORD *)(v61 - 160) ^ 0xDF)];
  unsigned int v156 = *(_DWORD *)(v61 - 160) ^ 0x5A18571F;
  unsigned int v157 = *(_DWORD *)&v143[4 * HIBYTE(v156)] ^ ((BYTE2(v156) ^ 0xC1)
                                             + 441139960
                                             + ((2 * (BYTE2(v156) ^ 0xC1) + 88) & 0x196 ^ 0xF6F76FFF)) ^ *(_DWORD *)&v140[4 * (BYTE2(v156) ^ 0xEC)] ^ ((~(362609534 * v155 - 27765796) | 0x4944BFED) + 181304767 * v155 + 1518979576);
  unsigned int v527 = v157 - ((2 * v157) & 0x5C4753DE);
  LODWORD(v67) = *(_DWORD *)&v143[4 * ((v524 ^ 0xE9B45E6C) >> 24)] ^ (v149 - ((2 * v149) & 0xB6BB4012) - 614621175);
  unsigned int v468 = v524 ^ 0xAC;
  unsigned int v519 = BYTE1(v524) ^ 0xB4;
  int v521 = v67 - ((2 * v67) & 0x5C4753DE);
  LOWORD(v89) = v124 ^ 0x8EA4;
  unsigned int v158 = v124 ^ 0x35C48CD5;
  int v159 = v126 ^ 0x5C7FFD6F;
  unsigned int v525 = HIBYTE(v126) ^ 0x2B;
  int v160 = *(_DWORD *)&v140[4 * (BYTE2(v127) ^ 0xDE)] ^ ((BYTE2(v127) ^ 0xF3)
                                                     + 441139959
                                                     - ((2 * (BYTE2(v127) ^ 0xF3) + 160207960) & 0x9089196));
  unsigned int v161 = *(_DWORD *)&v140[4 * (BYTE2(v158) ^ 0xFE)] ^ ((BYTE2(v158) ^ 0xD3)
                                                     + 441139960
                                                     + ((2 * (BYTE2(v158) ^ 0xD3) + 88) & 0x196 ^ 0xF6F76FFF));
  int v162 = *(_DWORD *)&v145[4 * (v126 ^ 0xAA)];
  unsigned int v163 = (v160 - ((2 * v160) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4 * (HIBYTE(v127) ^ 0x36)];
  int v164 = BYTE2(*(_DWORD *)(v61 - 136));
  unsigned int v165 = *(_DWORD *)&v140[4 * (v164 ^ 0xC1)] ^ ((v164 ^ 0xEC)
                                              + 441139960
                                              + ((2 * (v164 ^ 0xEC) + 88) & 0x196 ^ 0xF6F76FFF));
  int v166 = (v165 - ((2 * v165) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (HIBYTE(v496) ^ 0x8B)];
  unsigned int v507 = v163 - ((2 * v163) & 0x5C4753DE);
  unsigned int v512 = v166 - ((2 * v166) & 0xB6BB4012);
  int v167 = *(_DWORD *)&v141[4 * (BYTE1(v159) ^ 0x20)] ^ ((BYTE2(v159) ^ 0xD7)
                                                     + 441139959
                                                     - ((2 * (BYTE2(v159) ^ 0xD7) + 160207960) & 0x9089196)) ^ *(_DWORD *)&v140[4 * (BYTE2(v159) ^ 0xFA)] ^ (181304767 * v162 - ((362609534 * v162 + 2119717852) & 0x5C4753DE) + 760206301);
  unsigned int v168 = (v161 - ((2 * v161) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4 * HIBYTE(v158)] ^ (181304767
                                                                                              * *(_DWORD *)&v145[4 * (v89 ^ 0x99)]
                                                                                              + 2133600750);
  unsigned int v477 = BYTE1(v89) ^ 0x14;
  unsigned int v456 = v496 ^ 0xA3;
  unsigned int v484 = v168 - ((2 * v168) & 0x5C4753DE);
  unsigned int v497 = v167 - ((2 * v167) & 0xB6BB4012);
  unsigned int v478 = v473 ^ 0x2BEAE26B;
  LODWORD(v67) = *(_DWORD *)&v140[4 * (((v473 ^ 0x2BEAE26Bu) >> 16) ^ 0xEC)] ^ ((((v473 ^ 0x2BEAE26Bu) >> 16) ^ 0xC1)
                                                                                               + 441139960
                                                                                               + ((2
  LODWORD(v67) = (v67 - ((2 * v67) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (BYTE1(v473) ^ 8)];
  unsigned int v169 = *(_DWORD *)&v140[4 * (v505 ^ 0x15)] ^ ((v505 ^ 0x38)
                                              + 441139960
                                              + ((2 * (v505 ^ 0x38) + 88) & 0x196 ^ 0xF6F76FFF));
  int v170 = *(_DWORD *)&v145[4 * (v502 ^ 0x55)];
  int v506 = v67 - ((2 * v67) & 0xB6BB4012);
  int v462 = BYTE2(*(_DWORD *)(v61 - 168));
  unsigned int v503 = (v462 ^ 0xA7) + 441139960 + ((2 * (v462 ^ 0xA7) + 88) & 0x196 ^ 0xF6F76FFF);
  LODWORD(v67) = (v169 - ((2 * v169) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (v516 ^ 0xF5)] ^ (181304767 * *(_DWORD *)&v145[4 * (v514 ^ 0x9D)] + 2133600750);
  int v517 = v67 - ((2 * v67) & 0xB6BB4012);
  unsigned int v171 = *(_DWORD *)(v61 - 176);
  unsigned int v172 = (181304767 * v170 - ((362609534 * v170 - 27765796) & 0xB6BB4012) + 1518979575) ^ ((BYTE2(v171) ^ 0xBA)
                                                                                         + 441139960
                                                                                         + ((2 * (BYTE2(v171) ^ 0xBA)
                                                                                           + 88) & 0x196 ^ 0xF6F76FFF)) ^ *(_DWORD *)&v143[4 * (HIBYTE(v171) ^ 0x2F)] ^ *(_DWORD *)&v140[4 * (BYTE2(v171) ^ 0x97)];
  unsigned int v474 = v172 - ((2 * v172) & 0x5C4753DE);
  int v173 = BYTE2(*(_DWORD *)(v61 - 132));
  unsigned int v174 = *(_DWORD *)&v140[4 * (v173 ^ 0x25)] ^ ((v173 ^ 8) + 441139960 + ((2 * (v173 ^ 8) + 88) & 0x196 ^ 0xF6F76FFF));
  LODWORD(v89) = *(_DWORD *)(v61 - 184);
  unsigned int v175 = *(_DWORD *)&v140[4 * (BYTE2(v89) ^ 0x56)] ^ ((BYTE2(v89) ^ 0x7B)
                                                    + 441139960
                                                    + ((2 * (BYTE2(v89) ^ 0x7B) + 88) & 0x196 ^ 0xF6F76FFF));
  int v176 = *(_DWORD *)&v145[4 * (v115 ^ 0xFB)];
  int v177 = (v174 - ((2 * v174) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (HIBYTE(v463) ^ 0x60)] ^ (181304767 * *(_DWORD *)&v145[4 * (v463 ^ 0xC3)] + 2133600750);
  int v178 = (181304767 * v176 - ((362609534 * v176 + 2119717852) & 0x5C4753DE) + 760206301) ^ *(_DWORD *)&v141[4 * (BYTE1(v115) ^ 0xEF)];
  LODWORD(v464) = v177 - ((2 * v177) & 0xB6BB4012);
  LODWORD(v457) = v178 - ((2 * v178) & 0xB6BB4012);
  unsigned int v179 = (v175 - ((2 * v175) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4 * (BYTE3(v89) ^ 0xD9)] ^ (181304767 * *(_DWORD *)&v145[4 * (v89 ^ 0x79)] + 2133600750);
  unsigned int v180 = *(_DWORD *)&v140[4 * (v490 ^ 0x86)] ^ ((v490 ^ 0xAB)
                                              + 441139960
                                              + ((2 * (v490 ^ 0xAB) + 88) & 0x196 ^ 0xF6F76FFF));
  unsigned int v181 = (v180 - ((2 * v180) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4 * v500];
  unsigned int v454 = v487 ^ 0xEE;
  unsigned int v453 = v481 ^ 0x8D;
  unsigned int v491 = v181 - ((2 * v181) & 0x5C4753DE);
  unsigned int v488 = v179 - ((2 * v179) & 0x5C4753DE);
  int v482 = BYTE2(v115) ^ 0x16;
  unsigned int v515 = (BYTE2(v115) ^ 0x73) + 441139960 + ((2 * (BYTE2(v115) ^ 0x73) + 88) & 0x196 ^ 0xF6F76FFF);
  unsigned int v182 = *(_DWORD *)&v140[4 * (v459 ^ 0x8B)] ^ ((v459 ^ 0xA6)
                                              + 441139960
                                              + ((2 * (v459 ^ 0xA6) + 88) & 0x196 ^ 0xF6F76FFF));
  int v501 = (v458 ^ 0xEC) + 441139959 - ((2 * (v458 ^ 0xEC) + 160207960) & 0x9089196);
  unsigned int v183 = v469 ^ 0x22;
  unsigned int v494 = HIBYTE(v115) ^ 0xE8;
  unsigned int v184 = *(_DWORD *)&v140[4 * (BYTE2(v466) ^ 0xE8)] ^ ((BYTE2(v466) ^ 0xC5)
                                                     + 441139960
                                                     + ((2 * (BYTE2(v466) ^ 0xC5) + 88) & 0x196 ^ 0xF6F76FFF));
  unsigned int v185 = (181304767 * *(_DWORD *)&v145[4 * (v466 ^ 0xCA)] + 2133600750) ^ *(_DWORD *)&v143[4 * (HIBYTE(v466) ^ 0x8E)] ^ (v184 - ((2 * v184) & 0xB6BB4012) - 614621175);
  unsigned int v472 = v465 ^ 0x44039AAA;
  unsigned int v186 = (181304767 * *(_DWORD *)&v145[4 * (v465 ^ 0xDB)] + 2133600750) ^ (((v465 ^ 0x44039AAAu) >> 16)
                                                                                          + 441139960
                                                                                          + ((2
                                                                                            * ((v465 ^ 0x44039AAAu) >> 16)
                                                                                            + 88) & 0x196 ^ 0xF6F76FFF)) ^ *(_DWORD *)&v140[4 * (((v465 ^ 0x44039AAAu) >> 16) ^ 0x2D)];
  unsigned int v470 = v185 - ((2 * v185) & 0x5C4753DE);
  int v187 = (v186 - ((2 * v186) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (BYTE1(v465) ^ 0xC0)];
  unsigned int v188 = *(_DWORD *)&v143[4 * v183] ^ (181304767 * *(_DWORD *)&v145[4 * (v476 ^ 0xFE)] + 2133600750) ^ (v182 - ((2 * v182) & 0xB6BB4012) - 614621175);
  HIDWORD(v475) = v187 - ((2 * v187) & 0xB6BB4012);
  HIDWORD(v464) = v188 - ((2 * v188) & 0x5C4753DE);
  int v189 = *(_DWORD *)&v145[4 * ((v103 ^ v97) ^ 0xEC)];
  unsigned int v190 = *(_DWORD *)&v140[4 * (v567 ^ 0x32)] ^ ((v567 ^ 0x1F)
                                              + 441139960
                                              + ((2 * (v567 ^ 0x1F) + 88) & 0x196 ^ 0xF6F76FFF));
  int v191 = *(_DWORD *)&v145[4 * (v557 ^ 0xE6)];
  LODWORD(v67) = *(_DWORD *)&v143[4 * (HIBYTE(v538) ^ 0xCA)] ^ ((BYTE2(v538) ^ 0x2F)
                                                              + 441139960
                                                              + ((2 * (BYTE2(v538) ^ 0x2F) + 88) & 0x196 ^ 0xF6F76FFF)) ^ *(_DWORD *)&v140[4 * (BYTE2(v538) ^ 2)] ^ (181304767 * v189 - ((362609534 * v189 - 27765796) & 0xB6BB4012) + 1518979575);
  int v192 = (v190 - ((2 * v190) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (v589 ^ 0x8C)] ^ (181304767
                                                                                                * *(_DWORD *)&v145[4 * (v575 ^ 0xD9)]
                                                                                                + 2133600750);
  unsigned int v193 = *(_DWORD *)&v143[4 * ((v557 ^ 0x49A657C7u) >> 24)] ^ ((((v557 ^ 0x49A657C7u) >> 16) ^ 0x35)
                                                             + 441139960
                                                             + ((2
  unsigned int v194 = *(_DWORD *)&v140[4 * (((*(_DWORD *)(v61 - 152) ^ 0x715B7EABu) >> 16) ^ 0x2D)] ^ (((*(_DWORD *)(v61 - 152) ^ 0x715B7EABu) >> 16) + 441139960 + ((2 * ((*(_DWORD *)(v61 - 152) ^ 0x715B7EABu) >> 16) + 88) & 0x196 ^ 0xF6F76FFF));
  unsigned int v576 = v592 ^ 0xAA;
  int v590 = (v67 - ((2 * v67) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4
                                                                        * (((unsigned __int16)(v103 ^ v97) >> 8) ^ 0x2E)];
  unsigned int v568 = v192 - ((2 * v192) & 0xB6BB4012);
  unsigned int v460 = BYTE1(v557) ^ 0xB9;
  LODWORD(v67) = (v194 - ((2 * v194) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4
                                                                                 * ((*(_DWORD *)(v61 - 152) ^ 0x715B7EABu) >> 24)] ^ (181304767 * *(_DWORD *)&v145[4 * (*(_DWORD *)(v61 - 152) ^ 0x3B)] + 2133600750);
  unsigned int v558 = v193 - ((2 * v193) & 0x5C4753DE);
  int v539 = v67 - ((2 * v67) & 0x5C4753DE);
  unsigned int v195 = *(_DWORD *)&v140[4 * (v552 ^ 0xC1)] ^ ((v552 ^ 0xEC)
                                              + 441139960
                                              + ((2 * (v552 ^ 0xEC) + 88) & 0x196 ^ 0xF6F76FFF));
  LODWORD(v67) = (v195 - ((2 * v195) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4
                                                                                  * ((v554 - ((2 * v546) & 0x166) + 179) ^ 0x54)] ^ (181304767 * *(_DWORD *)&v145[4 * (v569 ^ 0xE2)] + 2133600750);
  int v196 = *(_DWORD *)&v145[4 * (*(_DWORD *)(v61 - 140) ^ 0xF0)];
  unsigned int v197 = (181304767 * v196 - ((362609534 * v196 - 27765796) & 0xB6BB4012) + 1518979575) ^ *(_DWORD *)&v143[4 * (HIBYTE(v560) ^ 0x3E)];
  int v570 = v67 - ((2 * v67) & 0xB6BB4012);
  unsigned int v547 = v197 - ((2 * v197) & 0x5C4753DE);
  unsigned int v555 = v536 ^ 0xEEA2BFA8;
  int v198 = *(_DWORD *)&v140[4 * (((v536 ^ 0xEEA2BFA8) >> 16) ^ 0x86)] ^ ((((v536 ^ 0xEEA2BFA8) >> 16) ^ 0xAB)
                                                                                      + 441139959
                                                                                      - ((2
  LODWORD(v67) = (181304767 * *(_DWORD *)&v145[4 * (v536 ^ 0x68)] + 2133600750) ^ *(_DWORD *)&v141[4 * (BYTE1(v536) ^ 0x55)] ^ (v198 - ((2 * v198) & 0x5C4753DE) - 1373394449);
  unsigned int v449 = v458 ^ 0xC1;
  int v199 = ((v579 ^ 0x231B9DB5u) >> 16);
  unsigned int v593 = (v199 ^ 0xC1) + 441139960 + ((2 * (v199 ^ 0xC1) + 88) & 0x196 ^ 0xF6F76FFF);
  LODWORD(v452) = v67 - ((2 * v67) & 0xB6BB4012);
  int v447 = BYTE2(v560);
  unsigned int v553 = (BYTE2(v560) ^ 0xC8) + 441139960 + ((2 * (BYTE2(v560) ^ 0xC8) + 88) & 0x196 ^ 0xF6F76FFF);
  unsigned int v200 = v599 ^ 0x406768A6;
  int v201 = *(_DWORD *)&v145[4 * (v565 ^ 0x60)];
  int v202 = *(_DWORD *)&v145[4 * (v601 ^ 0xFB)];
  int v203 = *(_DWORD *)&v145[4 * (*(_DWORD *)(v61 - 128) ^ 0xB8)];
  int v204 = *(_DWORD *)&v145[4 * v468];
  int v205 = *(_DWORD *)&v145[4 * v456];
  int v206 = *(_DWORD *)&v145[4 * (v581 ^ 0xF0)];
  LODWORD(v85) = *(_DWORD *)(v61 - 168);
  int v207 = *(_DWORD *)&v145[4 * (v85 ^ 0x57)];
  int v208 = *(_DWORD *)&v145[4 * v453];
  int v209 = *(_DWORD *)&v145[4 * (v583 ^ 0x78)];
  LODWORD(v67) = *(_DWORD *)&v145[4 * (v579 ^ 0x75)];
  int v210 = *(_DWORD *)&v145[4 * (*(_DWORD *)(v61 - 248) ^ 0x74)];
  int v211 = *(_DWORD *)&v145[4 * (v602 ^ 0x96)];
  unsigned int v212 = *(_DWORD *)(v61 - 256);
  int v213 = *(_DWORD *)&v145[4 * (v212 ^ 0x2A)];
  LODWORD(v145) = *(_DWORD *)&v145[4 * (v599 ^ 0x9F)];
  *(_DWORD *)(v61 - 248) = 181304767 * v201 + 2133600750;
  int v600 = 181304767 * v202 + 2133600750;
  HIDWORD(v457) = 181304767 * v203 + 2133600750;
  HIDWORD(v467) = 181304767 * v204 + 2133600750;
  int v561 = 181304767 * v205 + 2133600750;
  HIDWORD(v455) = 181304767 * v208 + 2133600750;
  LODWORD(v451) = 181304767 * v206 + 2133600750;
  HIDWORD(v451) = 181304767 * v67 + 2133600750;
  HIDWORD(v452) = 181304767 * (_DWORD)v145 + 2133600750;
  LODWORD(v145) = (181304767 * v210 - ((362609534 * v210 - 27765796) & 0xB6BB4012) + 1518979575) ^ *(_DWORD *)&v143[4 * (*(_DWORD *)(v61 - 232) ^ 0x7B)];
  LODWORD(v67) = *(_DWORD *)&v140[4 * (BYTE2(v602) ^ 0x7B)] ^ ((BYTE2(v602) ^ 0x56)
                                                             + 441139960
                                                             + ((2 * (BYTE2(v602) ^ 0x56) + 88) & 0x196 ^ 0xF6F76FFF)) ^ (181304767 * v211 + 2133600750);
  LODWORD(v89) = (v67 - ((2 * v67) & 0x5C4753DE) - 1373394449) ^ *(_DWORD *)&v141[4 * (BYTE1(v602) ^ 0xCC)];
  unsigned int v214 = *(_DWORD *)&v140[4 * (BYTE2(v200) ^ 0x3C)] ^ ((BYTE2(v200) ^ 0x11)
                                                     + 441139960
                                                     + ((2 * (BYTE2(v200) ^ 0x11) + 88) & 0x196 ^ 0xF6F76FFF));
  int v215 = (181304767 * v213 + 2133600750) ^ ((BYTE2(v212) ^ 0x37)
                                          + 441139959
                                          - ((2 * (BYTE2(v212) ^ 0x37) + 160207960) & 0x9089196)) ^ *(_DWORD *)&v140[4 * (BYTE2(v212) ^ 0x1A)];
  int v216 = (_DWORD)v145 - ((2 * (_DWORD)v145) & 0x5C4753DE);
  LODWORD(v145) = (v215 - ((2 * v215) & 0xB6BB4012) - 614621175) ^ *(_DWORD *)&v143[4 * (HIBYTE(v212) ^ 0xF9)];
  LODWORD(v67) = *(_DWORD *)(v61 - 208);
  HIDWORD(v448) = *(_DWORD *)&v140[4 * (BYTE2(v131) ^ 0x61)];
  *(_DWORD *)(v61 - 232) = *(_DWORD *)&v140[4 * (v462 ^ 0x8A)];
  int v542 = *(_DWORD *)&v140[4 * (v482 ^ 0x48)];
  LODWORD(v450) = *(_DWORD *)&v140[4 * v449];
  int v483 = *(_DWORD *)&v140[4 * (v199 ^ 0xEC)];
  HIDWORD(v461) = *(_DWORD *)&v140[4 * (v447 ^ 0xE5)];
  int v598 = *(_DWORD *)&v140[4 * (v67 ^ 0x1A)];
  LODWORD(v140) = ((*(_DWORD *)(v61 - 240) >> 15) & 0x58 ^ 0x48) + (v67 ^ 0x4C64A1B);
  *(_DWORD *)(v61 - 240) = (_DWORD)v140 + 361035980 + ((2 * (_DWORD)v140) & 0x196 ^ 0xF6F76FFF);
  unsigned int v217 = HIBYTE(v602) ^ 0xE5;
  *(_DWORD *)(v61 - 208) = *(_DWORD *)&v141[4 * v543];
  int v544 = *(_DWORD *)&v141[4 * (HIBYTE(v572) ^ 0x8E)];
  int v603 = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 128)) ^ 0x85)];
  HIDWORD(v450) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 160)) ^ 0xBD)];
  *(_DWORD *)(v61 - 160) = *(_DWORD *)&v141[4 * v519];
  HIDWORD(v446) = *(_DWORD *)&v141[4 * v477];
  LODWORD(v448) = *(_DWORD *)&v141[4 * (BYTE1(v127) ^ 0x1A)];
  *(_DWORD *)(v61 - 256) = *(_DWORD *)&v141[4 * (BYTE1(v85) ^ 0xF5)];
  *(_DWORD *)(v61 - 176) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 176)) ^ 0xD6)];
  int v520 = *(_DWORD *)&v141[4 * v454];
  HIDWORD(a25) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 184)) ^ 0xD7)];
  int v573 = *(_DWORD *)&v141[4 * (BYTE1(v583) ^ 0x76)];
  int v218 = *(_DWORD *)&v141[4 * (BYTE1(v466) ^ 0x16)];
  LODWORD(v445) = *(_DWORD *)&v141[4 * (v595 ^ 0xBE)];
  *(_DWORD *)(v61 - 184) = *(_DWORD *)&v141[4 * v460];
  int v596 = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 152)) ^ 0xFE)];
  LODWORD(v446) = *(_DWORD *)&v141[4 * (BYTE1(v579) ^ 0x77)];
  HIDWORD(v445) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 140)) ^ 0x95)];
  *(_DWORD *)(v61 - 200) = *(_DWORD *)&v141[4 * (*(_DWORD *)(v61 - 200) ^ 0x84)];
  LODWORD(v467) = *(_DWORD *)&v141[4 * (BYTE1(v212) ^ 0x2E)];
  int v219 = v89 - ((2 * v89) & 0xB6BB4012);
  LODWORD(v89) = *(_DWORD *)&v141[4 * (BYTE1(*(_DWORD *)(v61 - 224)) ^ 0xC8)];
  LODWORD(v444) = *(_DWORD *)&v143[4 * (HIBYTE(v131) ^ 0xB2)];
  *(_DWORD *)(v61 - 152) = v563 - 1373394449;
  int v564 = v549 - 1373394449;
  *(_DWORD *)(v61 - 192) = *(_DWORD *)&v143[4 * (*(_DWORD *)(v61 - 192) ^ 7)];
  *(_DWORD *)(v61 - 224) = v531 - 1373394449;
  LODWORD(v455) = v527 - 1373394449;
  LODWORD(v461) = v521 - 1373394449;
  int v550 = *(_DWORD *)&v143[4 * (HIBYTE(*(_DWORD *)(v61 - 136)) ^ 0xFB)];
  HIDWORD(v443) = v507 - 1373394449;
  LODWORD(v443) = v484 - 1373394449;
  unsigned int v485 = v474 - 1373394449;
  unsigned int v532 = v491 - 1373394449;
  HIDWORD(v444) = v488 - 1373394449;
  LODWORD(v67) = v470 - 1373394449;
  unsigned int v508 = v558 - 1373394449;
  LODWORD(v475) = v539 - 1373394449;
  unsigned int v548 = v547 - 1373394449;
  int v522 = v216 - 1373394449;
  int v528 = (_DWORD)v145 - ((2 * (_DWORD)v145) & 0x5C4753DE) - 1373394449;
  int v559 = *(_DWORD *)&v143[4 * v525];
  int v489 = *(_DWORD *)&v143[4 * (BYTE3(v85) ^ 0xB8)];
  int v492 = *(_DWORD *)&v143[4 * HIBYTE(v478)];
  int v479 = *(_DWORD *)&v143[4 * (v510 ^ 0x4B)];
  int v540 = *(_DWORD *)&v143[4 * (HIBYTE(*(_DWORD *)(v61 - 132)) ^ 0x17)];
  int v526 = *(_DWORD *)&v143[4 * v494];
  int v220 = *(_DWORD *)&v143[4 * (HIBYTE(v583) ^ 0xA6)];
  int v221 = *(_DWORD *)&v143[4 * HIBYTE(v472)];
  int v511 = *(_DWORD *)&v143[4 * v576];
  LODWORD(v145) = v89 ^ (v214 - ((2 * v214) & 0x5C4753DE) - 1373394449);
  int v222 = *(_DWORD *)&v143[4 * ((v579 ^ 0x231B9DB5u) >> 24)];
  int v537 = *(_DWORD *)&v143[4 * (*(_DWORD *)(v61 - 216) ^ 0x38)];
  int v223 = *(_DWORD *)&v143[4 * HIBYTE(v555)];
  HIDWORD(v471) = *(_DWORD *)&v143[4 * v217];
  LODWORD(v471) = *(_DWORD *)&v143[4 * HIBYTE(v200)];
  unsigned int v224 = v577 - 614621175;
  unsigned int v495 = v534 - 614621175;
  unsigned int v225 = v497 - 614621175;
  *(_DWORD *)(v61 - 2memset((void *)(v1 - 204), 50, 16) = v506 - 614621175;
  int v498 = v517 - 614621175;
  *(_DWORD *)(v61 - 168) = v568 - 614621175;
  int v226 = v570 - 614621175;
  int v227 = v452 - 614621175;
  int v228 = v219 - 614621175;
  unsigned int v229 = (_DWORD)v145 - ((2 * (_DWORD)v145) & 0xB6BB4012) - 614621175;
  int v230 = v591 ^ v590 ^ 0x6285F181;
  int v231 = v67 ^ v218 ^ v230;
  int v232 = (char *)*(&off_1004EDED0 + v594 + 23) - 4;
  uint64_t v233 = (uint64_t)*(&off_1004EDED0 + (v594 ^ 0xA5));
  uint64_t v234 = (uint64_t)*(&off_1004EDED0 + v594 + 21);
  uint64_t v235 = (uint64_t)*(&off_1004EDED0 + v594 - 141);
  unsigned int v236 = (*(unsigned __int8 *)(v235 + (*(unsigned __int8 *)(v61 - 109) ^ 0x41LL)) ^ 5) & 0xFF00FFFF | (((*(_BYTE *)(v233 + (*(unsigned __int8 *)(v61 - 111) ^ 0x40LL)) - 106) ^ 0x5A) << 16) | ((*(unsigned __int8 *)(v234 + (*(unsigned __int8 *)(v61 - 110) ^ 0xBBLL)) ^ 0xD0) << 8) | ((v232[*(unsigned __int8 *)(v61 - 112) ^ 0x1ELL] ^ (*(unsigned __int8 *)(v61 - 112) - ((2 * *(unsigned __int8 *)(v61 - 112)) & 0xCA) - 27) ^ 0x84) << 24);
  v584 = v232;
  int v237 = *(unsigned __int8 *)(v235 + (*(unsigned __int8 *)(v61 - 97) ^ 0x74LL)) ^ 0xA2 | (((*(_BYTE *)(v233 + (*(unsigned __int8 *)(v61 - 99) ^ 0xF3LL)) - 106) ^ 2) << 16) | ((*(unsigned __int8 *)(v234 + (*(unsigned __int8 *)(v61 - 98) ^ 0x20LL)) ^ 0x3A) << 8) | ((v232[*(unsigned __int8 *)(v61 - 100) ^ 0xF3LL] ^ (*(unsigned __int8 *)(v61 - 100) - ((2 * *(unsigned __int8 *)(v61 - 100)) & 0xCA) - 27) ^ 0x85) << 24);
  uint64_t v578 = v235;
  uint64_t v580 = v234;
  unsigned int v238 = (*(unsigned __int8 *)(v235 + (*(unsigned __int8 *)(v61 - 105) ^ 0xE4LL)) ^ 0x33) & 0xFF00FFFF | ((v232[*(unsigned __int8 *)(v61 - 108) ^ 0x3ELL] ^ (*(unsigned __int8 *)(v61 - 108) - ((2 * *(unsigned __int8 *)(v61 - 108)) & 0xCA) - 27) ^ 0xFFFFFFE1) << 24) | (((*(_BYTE *)(v233 + (*(unsigned __int8 *)(v61 - 107) ^ 0x27LL)) - 106) ^ 0x96) << 16) | ((*(unsigned __int8 *)(v234 + (*(unsigned __int8 *)(v61 - 106) ^ 9LL)) ^ 0xD5) << 8);
  int v239 = *(unsigned __int8 **)(v61 - 120);
  uint64_t v582 = v233;
  unsigned int v240 = (*(unsigned __int8 *)(v235 + (*(unsigned __int8 *)(v61 - 101) ^ 0xF2LL)) ^ 0x8A) & 0xFF00FFFF | ((v232[*(unsigned __int8 *)(v61 - 104) ^ 0xD3LL] ^ (*(unsigned __int8 *)(v61 - 104) - ((2 * *(unsigned __int8 *)(v61 - 104)) & 0xCA) - 27) ^ 0xE0) << 24) | ((*(unsigned __int8 *)(v234 + (*(unsigned __int8 *)(v61 - 102) ^ 0xBELL)) ^ 0x72) << 8) & 0xFF00FFFF | (((*(_BYTE *)(v233 + (*(unsigned __int8 *)(v61 - 103) ^ 0xE9LL)) - 106) ^ 0x8A) << 16);
  if ((v231 & 0x80) != 0) {
    int v241 = -128;
  }
  else {
    int v241 = 128;
  }
  *(_DWORD *)(v61 - 128) = v237 ^ 0xC71C9E0F;
  *(_DWORD *)(v61 - 132) = v236 ^ 0x653F3C3B;
  *(_DWORD *)(v61 - 136) = v238 ^ 0xEFEB9384;
  *(_DWORD *)(v61 - 140) = v240 ^ 0x14CE96FF;
  HIDWORD(v574) = (HIDWORD(v464) - 1373394449) ^ v445;
  LODWORD(v574) = v220 ^ v501 ^ v573 ^ v450 ^ (181304767 * v209 + 2133600750);
  HIDWORD(v571) = (HIDWORD(v475) - 614621175) ^ v221;
  LODWORD(v571) = v564 ^ v544;
  HIDWORD(v566) = v444 ^ ((BYTE2(v131) ^ 0x4C) + 441139959 - ((2 * (BYTE2(v131) ^ 0x4C) + 160207960) & 0x9089196)) ^ HIDWORD(v448) ^ v224;
  LODWORD(v566) = v443 ^ HIDWORD(v446);
  HIDWORD(v562) = HIDWORD(v443) ^ v448 ^ v451;
  LODWORD(v562) = (v512 - 614621175) ^ v550 ^ v561;
  HIDWORD(v556) = v225 ^ v559;
  LODWORD(v556) = v446 ^ v222 ^ v593 ^ v483 ^ HIDWORD(v451);
  HIDWORD(v551) = HIDWORD(v445) ^ v553 ^ HIDWORD(v461) ^ v548;
  LODWORD(v551) = v227 ^ v223;
  HIDWORD(v545) = v226 ^ v537;
  LODWORD(v545) = HIDWORD(v444) ^ HIDWORD(a25);
  HIDWORD(v541) = v526 ^ v515 ^ v542 ^ (v457 - 614621175);
  LODWORD(v541) = (v464 - 614621175) ^ v540;
  HIDWORD(v535) = HIDWORD(v455) ^ v520 ^ v532;
  LODWORD(v535) = HIDWORD(v452) ^ v471 ^ v229;
  HIDWORD(v529) = v528 ^ v467;
  LODWORD(v529) = v228 ^ HIDWORD(v471);
  HIDWORD(v523) = *(_DWORD *)(v61 - 200) ^ *(_DWORD *)(v61 - 240) ^ v598 ^ v522;
  LODWORD(v523) = *(_DWORD *)(v61 - 168) ^ v511;
  HIDWORD(v518) = *(_DWORD *)(v61 - 184) ^ v508;
  LODWORD(v518) = v475 ^ v596;
  HIDWORD(v513) = v455 ^ HIDWORD(v450);
  LODWORD(v513) = *(_DWORD *)(v61 - 224) ^ v603 ^ HIDWORD(v457);
  HIDWORD(v509) = HIDWORD(v467) ^ *(_DWORD *)(v61 - 160) ^ v461;
  LODWORD(v509) = v600 ^ *(_DWORD *)(v61 - 192) ^ v495;
  HIDWORD(v504) = v485 ^ *(_DWORD *)(v61 - 176);
  LODWORD(v504) = *(_DWORD *)(v61 - 256) ^ v503 ^ v489 ^ *(_DWORD *)(v61 - 232) ^ (181304767 * v207 + 2133600750);
  HIDWORD(v499) = v498 ^ v479;
  LODWORD(v499) = *(_DWORD *)(v61 - 216) ^ v492;
  HIDWORD(v493) = (v241 + (v231 ^ 0x2497E332)) ^ v230;
  LODWORD(v493) = *(_DWORD *)(v61 - 152) ^ *(_DWORD *)(v61 - 208) ^ *(_DWORD *)(v61 - 248);
  int v242 = *(_DWORD *)(v61 - 124);
  HIDWORD(v486) = v242 & 0x39CF440F;
  LODWORD(v486) = v242 ^ 0x3A0;
  HIDWORD(v480) = v242 ^ 0x3BC;
  LODWORD(v480) = v242 ^ 0x333;
  HIDWORD(a25) = v242 ^ 0x379;
  *(void *)(v61 - 176) = 13LL;
  unsigned __int8 v243 = *(_BYTE *)(v233 + (v239[13] ^ (((v242 - 100) | 0x11) - 40))) - 106;
  *(void *)(v61 - 152) = 1LL;
  uint64_t v244 = v239[1] ^ 0x57LL;
  *(void *)(v61 - 160) = 10LL;
  uint64_t v245 = v239[10] ^ 0xB6LL;
  LODWORD(v244) = ((*(_BYTE *)(v233 + v244) - 106) ^ 0xF6) << 16;
  *(void *)(v61 - 192) = 4LL;
  int v246 = (*(unsigned __int8 *)(v234 + v245) ^ 0x5F) << 8;
  uint64_t v247 = v239[4];
  int v248 = v584[v247 ^ 0x9A];
  *(void *)(v61 - 224) = 7LL;
  LODWORD(v247) = v248 ^ (v247 - ((2 * v247) & 0xCA) - 27) ^ 0xFFFFFFCF;
  int v249 = *(unsigned __int8 *)(v578 + (v239[7] ^ 0xD6LL));
  *(void *)(v61 - 2memset((void *)(v1 - 204), 50, 16) = 2LL;
  LODWORD(v247) = v249 ^ 0x60 | ((_DWORD)v247 << 24);
  int v250 = *(unsigned __int8 *)(v234 + v239[2]) ^ 0x4D;
  *(void *)(v61 - 184) = 3LL;
  LODWORD(v244) = v244 | (v250 << 8);
  int v251 = *(unsigned __int8 *)(v578 + (v239[3] ^ 0x74LL));
  *(void *)(v61 - 168) = 12LL;
  LODWORD(v244) = v244 | v251 ^ 0xA2;
  int v252 = v584[v239[12] ^ 0x6ELL] ^ (v239[12] + (~(2 * v239[12]) | 0x35) - 26) ^ 0x51;
  *(void *)(v61 - 208) = 0LL;
  int v253 = ((v243 ^ 2) << 16) | (v252 << 24);
  int v254 = v244 | ((v584[*v239 ^ 0x15LL] ^ (*v239 - ((2 * *v239) & 0xCA) - 27) ^ 0xAE) << 24);
  LODWORD(v244) = v246 | ((v584[v239[8] ^ 0x46LL] ^ (v239[8] - ((2 * v239[8]) & 0xCA) - 27) ^ 0xFFFFFFE7) << 24);
  *(void *)(v61 - 200) = 14LL;
  int v255 = *(unsigned __int8 *)(v234 + (v239[14] ^ 0xD5LL)) ^ 0xC5;
  *(void *)(v61 - 232) = 5LL;
  LODWORD(v247) = v247 & 0xFF00FFFF | (((*(_BYTE *)(v582 + (v239[5] ^ 0x9DLL)) - 106) ^ 0xF7) << 16);
  LODWORD(v244) = *(unsigned __int8 *)(v578 + (v239[11] ^ 0xC2LL)) ^ 0x87 | v244;
  *(void *)(v61 - 256) = 9LL;
  *(void *)(v61 - 248) = 11LL;
  LODWORD(v244) = v244 & 0xFF00FFFF | (((*(_BYTE *)(v582 + (v239[9] ^ 0x3ELL)) - 106) ^ 0xDF) << 16);
  int v256 = *(unsigned __int8 *)(v234 + (v239[6] ^ 0xA4LL));
  *(void *)(v61 - 240) = 15LL;
  int v257 = *(unsigned __int8 *)(v578 + (v239[15] ^ 0x47LL)) ^ 0xA2 | v253 | (v255 << 8);
  unsigned int v597 = v247 | ((v256 ^ 0x95) << 8);
  uint64_t v258 = (uint64_t)*(&off_1004EDED0 + (v242 ^ 0x3A0));
  unsigned int v259 = ((((unsigned __int16)(v597 ^ WORD2(v585)) >> 8) ^ 0x4C)
        - 1101829684
        - 2 * ((((v597 ^ HIDWORD(v585)) >> 8) ^ 0xB71C4C) & 0xDC ^ ((v597 ^ HIDWORD(v585)) >> 8) & 0x10)) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v597 ^ WORD2(v585)) >> 8) ^ 0x21u));
  unsigned int v260 = v254 ^ v586;
  unsigned int v261 = v254 ^ v586 ^ 0x730032AA;
  uint64_t v262 = (uint64_t)*(&off_1004EDED0 + (v242 & 0x39CF440F));
  unsigned int v263 = (v259 - 747033579 - ((2 * v259) & 0xA6F2582A)) ^ *(_DWORD *)(v262
                                                                    + 4LL * ((v254 ^ v586) ^ 0xAAu));
  unsigned int v264 = ((((unsigned __int16)(WORD2(a49) ^ v257) >> 8) ^ 0xF0)
        - 1101829684
        - 2
        * ((((HIDWORD(a49) ^ v257) >> 8) ^ 0x50F9F0) & 0xCF ^ ((HIDWORD(a49) ^ v257) >> 8) & 3)) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(WORD2(a49) ^ v257) >> 8) ^ 0x9Du));
  unsigned int v265 = v264 - 367616239 - ((2 * v264) & 0xD42D3E22);
  uint64_t v266 = (uint64_t)*(&off_1004EDED0 + v242 - 859);
  int v267 = *(_DWORD *)(v266 + 4LL * (((v244 ^ v585) >> 16) ^ 0x68u));
  HIDWORD(v269) = v267 ^ 0xEA2;
  LODWORD(v269) = v267 ^ 0xBEBBE000;
  int v268 = v269 >> 12;
  int v270 = *(_DWORD *)(v266 + 4LL * BYTE2(v260));
  HIDWORD(v269) = v270 ^ 0xEA2;
  LODWORD(v269) = v270 ^ 0xBEBBE000;
  unsigned int v271 = (char *)*(&off_1004EDED0 + (v242 ^ 0x3BC)) - 12;
  int v272 = v265 ^ *(_DWORD *)&v271[4 * (((v597 ^ HIDWORD(v585)) >> 24) ^ 0xB7)] ^ (v269 >> 12);
  int v273 = *(_DWORD *)(v266 + 4LL * (((HIDWORD(a49) ^ v257) >> 16) ^ 0xF9u));
  HIDWORD(v269) = v273 ^ 0xEA2;
  LODWORD(v269) = v273 ^ 0xBEBBE000;
  int v274 = *(_DWORD *)(v262 + 4LL * ((v247 ^ BYTE4(v585)) ^ 0xFBu)) ^ ((unsigned __int16)(v244 ^ v585) >> 8) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v244 ^ v585) >> 8) ^ 0x23u)) ^ 0x6D2A4597 ^ (v269 >> 12);
  LODWORD(v247) = *(_DWORD *)(v266 + 4LL * (((v597 ^ HIDWORD(v585)) >> 16) ^ 0x1Cu));
  HIDWORD(v269) = v247 ^ 0xEA2;
  LODWORD(v269) = v247 ^ 0xBEBBE000;
  LODWORD(v247) = *(_DWORD *)&v271[4 * (((v244 ^ v585) >> 24) ^ 0xF6)] ^ (BYTE1(v261) - 1101829684 - ((v260 >> 7) & 0x198)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v261) ^ 0x6Du)) ^ ((v269 >> 12) - 367616239 - ((2 * (v269 >> 12)) & 0xD42D3E22));
  unsigned int v275 = HIDWORD(v574) ^ v268 ^ *(_DWORD *)&v271[4 * (((HIDWORD(a49) ^ v257) >> 24) ^ 0x50)] ^ (v263 - 367616239 - ((2 * v263) & 0xD42D3E22));
  unsigned int v276 = v574 ^ *(_DWORD *)(v262 + 4LL * ((BYTE4(a49) ^ v257) ^ 0x9Bu)) ^ (v247
                                                                                          - 747033579
                                                                                          - ((2 * v247) & 0xA6F2582A));
  LODWORD(v247) = HIDWORD(v571) ^ *(_DWORD *)(v262 + 4LL * ((v244 ^ v585) ^ 0x5Fu)) ^ (v272 - 747033579 - ((2 * v272) & 0xA6F2582A));
  unsigned int v277 = HIDWORD(v493) ^ *(_DWORD *)&v271[4 * HIBYTE(v261)] ^ (v274 - 367616239 - ((2 * v274) & 0xD42D3E22));
  unsigned int v278 = v275 ^ 0xF9388C2F;
  int v279 = *(_DWORD *)(v266 + 4LL * ((v275 ^ 0xF9388C2F) >> 16));
  HIDWORD(v269) = v279 ^ 0xEA2;
  LODWORD(v269) = v279 ^ 0xBEBBE000;
  int v280 = v269 >> 12;
  int v281 = *(_DWORD *)(v266 + 4LL * (BYTE2(v276) ^ 6u));
  HIDWORD(v269) = v281 ^ 0xEA2;
  LODWORD(v269) = v281 ^ 0xBEBBE000;
  int v282 = v269 >> 12;
  int v283 = *(_DWORD *)(v266 + 4LL * (BYTE2(v247) ^ 0x66u));
  HIDWORD(v269) = v283 ^ 0xEA2;
  LODWORD(v269) = v283 ^ 0xBEBBE000;
  int v284 = (v269 >> 12) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v277) ^ 5u)) ^ ((BYTE1(v277) ^ 0x68)
                                                                      - 1101829684
                                                                      - 2
                                                                      * (((v277 >> 8) ^ 0x42BD68) & 0xDD ^ (v277 >> 8) & 0x11));
  unsigned int v285 = (v280 - 747033579 - ((2 * v280) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v247 ^ 0xB6u));
  unsigned int v286 = (v284 - 747033579 - ((2 * v284) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v275 ^ 0x61u));
  unsigned int v287 = (BYTE1(v278) - 1101829684 - ((v278 >> 7) & 0x198)) ^ 0xD678EAEF ^ *(_DWORD *)(v258 + 4LL
                                                                                            * (BYTE1(v278) ^ 0x6Du));
  int v288 = *(_DWORD *)&v271[4 * (BYTE3(v247) ^ 0x43)] ^ 0x480CC4AF;
  int v289 = v287 + v288 - 2 * (v287 & v288);
  int v290 = *(_DWORD *)(v266 + 4LL * (BYTE2(v277) ^ 0xBDu));
  HIDWORD(v269) = v290 ^ 0xEA2;
  LODWORD(v269) = v290 ^ 0xBEBBE000;
  unsigned int v291 = *(_DWORD *)&v271[4 * HIBYTE(v278)] ^ (v282 - 367616239 - ((2 * v282) & 0xD42D3E22));
  unsigned int v292 = (v291 - 747033579 - ((2 * v291) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v277 ^ 0xABu));
  unsigned int v293 = *(_DWORD *)&v271[4 * (HIBYTE(v277) ^ 0x42)] ^ v591 ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v276) ^ 0xFFu)) ^ ((BYTE1(v276) ^ 0x92) - 1101829684 - ((2 * ((v276 >> 8) ^ 0xA00692)) & 0x198)) ^ (v285 - 367616239 - ((2 * v285) & 0xD42D3E22));
  LOBYTE(v277) = BYTE1(v247) ^ 0x54;
  LODWORD(v247) = v493 ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v247) ^ 0x39u)) ^ (v292 - 1101829684 - ((2 * v292) & 0x7CA6D398));
  int v294 = v571 ^ *(_DWORD *)&v271[4 * (HIBYTE(v276) ^ 0xA0)] ^ (v286 - 367616239 - ((2 * v286) & 0xD42D3E22));
  unsigned int v295 = HIDWORD(v566) ^ *(_DWORD *)(v262 + 4LL * (v276 ^ 0x8Eu)) ^ ((v289 ^ (v269 >> 12))
                                                                                    - 747033579
                                                                                    - ((2 * (v289 ^ (v269 >> 12))) & 0xA6F2582A));
  int v296 = *(_DWORD *)(v266 + 4LL * (BYTE2(v295) ^ 0x79u));
  HIDWORD(v269) = v296 ^ 0xEA2;
  LODWORD(v269) = v296 ^ 0xBEBBE000;
  BYTE1(v276) = BYTE1(v294) ^ 0x68;
  int v297 = ((v269 >> 12) - 367616239 - ((2 * (v269 >> 12)) & 0xD42D3E22)) ^ *(_DWORD *)&v271[4
                                                                                         * ((v294 ^ 0x2261685Eu) >> 24)];
  int v298 = ((BYTE1(v295) ^ 0xD0) - 1101829684 - 2 * (((v295 >> 8) ^ 0x679D0) & 0xCD ^ (v295 >> 8) & 1)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v295) ^ 0xBDu));
  unsigned int v299 = (v298 - 747033579 - ((2 * v298) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v293 ^ 0x76u));
  unsigned int v300 = ((BYTE1(v247) ^ 0xEC)
        - 1101829684
        - 2 * (((v247 >> 8) ^ 0xE5FEC) & 0xCD ^ (v247 >> 8) & 1)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v247) ^ 0x81u));
  int v301 = *(_DWORD *)(v266 + 4LL * (BYTE2(v247) ^ 0x5Fu));
  HIDWORD(v269) = v301 ^ 0xEA2;
  LODWORD(v269) = v301 ^ 0xBEBBE000;
  int v302 = v269 >> 12;
  HIDWORD(v269) = *(_DWORD *)(v262 + 4LL * (v294 ^ 0x5Eu)) ^ 0x3A6E0B9D;
  LODWORD(v269) = HIDWORD(v269);
  int v303 = (v269 >> 28) ^ __ROR4__( *(_DWORD *)&v271[4 * (HIBYTE(v295) ^ 6)] ^ 0x7462B151 ^ (v300 - 367616239 - ((2 * v300) & 0xD42D3E22)),  28);
  unsigned int v304 = (v302 - 367616239 - ((2 * v302) & 0xD42D3E22)) ^ *(_DWORD *)&v271[4 * (HIBYTE(v293) ^ 0xD2)];
  unsigned int v305 = (v304 - 747033579 - ((2 * v304) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v295 ^ 0x4Cu));
  int v306 = *(_DWORD *)(v266 + 4LL * (BYTE2(v294) ^ 0x1Bu));
  HIDWORD(v269) = v306 ^ 0xEA2;
  LODWORD(v269) = v306 ^ 0xBEBBE000;
  int v307 = v269 >> 12;
  int v308 = ((v293 >> 8) ^ 0xD2CCC0) & 0xCE ^ (v293 >> 8) & 2;
  int v309 = BYTE1(v293) ^ 0xC0;
  int v310 = *(_DWORD *)(v266 + 4LL * (BYTE2(v293) ^ 0xCCu));
  HIDWORD(v269) = v310 ^ 0xEA2;
  LODWORD(v269) = v310 ^ 0xBEBBE000;
  int v311 = v443 ^ HIDWORD(v446) ^ (v269 >> 12) ^ __ROR4__(v303 ^ 0x78071371, 4);
  LOBYTE(v310) = v247 ^ v277;
  unsigned int v312 = HIDWORD(v562) ^ *(_DWORD *)&v271[4 * (BYTE3(v247) ^ 0xE)] ^ v307 ^ (v299 - 367616239 - ((2 * v299) & 0xD42D3E22));
  unsigned int v313 = v562 ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v276) ^ 0x6Du)) ^ (v305 - 1101829684 - ((2 * v305) & 0x7CA6D398));
  unsigned int v314 = HIDWORD(v556) ^ (v309 - 1101829684 - 2 * v308) ^ *(_DWORD *)(v262 + 4LL * (v310 ^ 0xCAu)) ^ *(_DWORD *)(v258 + 4LL * (v309 ^ 0x6Du)) ^ (v297 - 747033579 - ((2 * v297) & 0xA6F2582A));
  unsigned int v315 = BYTE1(v276) ^ 0x4552953C ^ v313;
  LODWORD(v247) = *(_DWORD *)(v266 + 4LL * BYTE2(v315));
  HIDWORD(v269) = v247 ^ 0xEA2;
  LODWORD(v269) = v247 ^ 0xBEBBE000;
  int v316 = v269 >> 12;
  BYTE1(v247) = BYTE1(v311) ^ 0xE7;
  int v317 = *(_DWORD *)(v266 + 4LL * ((v311 ^ 0x99FEE750) >> 16));
  HIDWORD(v269) = v317 ^ 0xEA2;
  LODWORD(v269) = v317 ^ 0xBEBBE000;
  int v318 = (v269 >> 12) - 747033579 - ((2 * (v269 >> 12)) & 0xA6F2582A);
  int v319 = BYTE1(v312) ^ 0x29;
  int v320 = v319 - 1101829684 - 2 * (((v312 >> 8) ^ 0xA73B29) & 0xCE ^ (v312 >> 8) & 2);
  int v321 = *(_DWORD *)(v266 + 4LL * (BYTE2(v314) ^ 2u));
  HIDWORD(v269) = v321 ^ 0xEA2;
  LODWORD(v269) = v321 ^ 0xBEBBE000;
  int v322 = (BYTE1(v315) - 1101829684 - ((v315 >> 7) & 0x198)) ^ *(_DWORD *)(v262 + 4LL * (v312 ^ 0x72u)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v315) ^ 0x6Du)) ^ v318;
  int v323 = *(_DWORD *)&v271[4 * (HIBYTE(v312) ^ 0xA7)] ^ (v269 >> 12);
  int v324 = *(_DWORD *)(v266 + 4LL * (BYTE2(v312) ^ 0x3Bu));
  int v325 = v323 ^ *(_DWORD *)(v262 + 4LL * v315);
  HIDWORD(v269) = v324 ^ 0xEA2;
  LODWORD(v269) = v324 ^ 0xBEBBE000;
  unsigned int v326 = v556 ^ ((BYTE1(v314) ^ 0xD9) - 1101829684 - ((2 * ((v314 >> 8) ^ 0x9802D9)) & 0x198)) ^ *(_DWORD *)(v262 + 4LL * (v311 ^ 0x1Eu)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v314) ^ 0xB4u)) ^ (v269 >> 12) ^ *(_DWORD *)&v271[4 * (HIBYTE(v313) ^ 0x61)];
  unsigned int v327 = HIDWORD(v551) ^ *(_DWORD *)&v271[4 * (HIBYTE(v314) ^ 0x98)] ^ (v322 - 367616239 - ((2 * v322) & 0xD42D3E22));
  int v328 = v227 ^ v223 ^ *(_DWORD *)(v262 + 4LL * (v314 ^ 0x3Du)) ^ v320 ^ *(_DWORD *)&v271[4 * ((v311 ^ 0x99FEE750) >> 24)] ^ *(_DWORD *)(v258 + 4LL * (v319 ^ 0x6Du));
  int v329 = *(_DWORD *)(v266 + 4LL * (BYTE2(v326) ^ 0xF7u));
  HIDWORD(v269) = v329 ^ 0xEA2;
  LODWORD(v269) = v329 ^ 0xBEBBE000;
  int v330 = v269 >> 12;
  int v331 = *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v311 ^ 0xE750) >> 8) ^ 0x6Du));
  unsigned int v332 = v328 ^ v316;
  int v333 = HIDWORD(v545) ^ v331;
  int v334 = *(_DWORD *)(v266 + 4LL * (BYTE2(v332) ^ 0x87u));
  unsigned int v335 = v333 ^ ((v325 ^ 0x396FB304) - 1101829684 - 2 * ((v325 ^ 0x396FB304) & 0x3E5369CE ^ v325 & 2));
  HIDWORD(v269) = v334 ^ 0xEA2;
  LODWORD(v269) = v334 ^ 0xBEBBE000;
  int v336 = BYTE1(v332) ^ 0x4C;
  int v337 = v336 - 1101829684 - 2 * (((v332 >> 8) ^ 0xEC874C) & 0xDE ^ (v332 >> 8) & 0x12);
  unsigned int v338 = v326 ^ 0xDA8D2242;
  int v339 = *(_DWORD *)(v262 + 4LL * ((v335 ^ BYTE1(v247)) ^ 0x41u)) ^ (((unsigned __int16)(v326 ^ 0x2242) >> 8)
                                                                                    - 1101829684
                                                                                    - ((v326 >> 7) & 0x198)) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v326 ^ 0x2242) >> 8) ^ 0x6Du)) ^ ((v269 >> 12) - 747033579 - ((2 * (v269 >> 12)) & 0xA6F2582A));
  int v340 = *(_DWORD *)(v266 + 4LL * (BYTE2(v335) ^ 0x81u));
  HIDWORD(v269) = v340 ^ 0xEA2;
  LODWORD(v269) = v340 ^ 0xBEBBE000;
  int v341 = ((v269 >> 12) - 367616239 - ((2 * (v269 >> 12)) & 0xD42D3E22)) ^ *(_DWORD *)&v271[4 * HIBYTE(v338)];
  unsigned int v342 = (v341 - 747033579 - ((2 * v341) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v332 ^ 1u));
  LODWORD(v247) = *(_DWORD *)(v262 + 4LL * (v327 ^ 0xFCu)) ^ (v330
                                                                             - 747033579
                                                                             - ((2 * v330) & 0xA6F2582A)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v335) ^ 0xCDu)) ^ ((BYTE1(v335) ^ 0xA0) - 1101829684 - 2 * (((v335 >> 8) ^ 0x6881A0) & 0xDE ^ (v335 >> 8) & 0x12));
  unsigned int v343 = *(_DWORD *)(v266 + 4LL * (BYTE2(v327) ^ 0xC6u));
  LODWORD(v269) = __ROR4__((v343 >> 12) ^ 0x266369C, 17) ^ 0xEE910136;
  HIDWORD(v269) = v269;
  unsigned int v344 = v545 ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v327) ^ 0x75u)) ^ (v342 - 1101829684 - ((2 * v342) & 0x7CA6D398));
  LODWORD(v247) = HIDWORD(v541) ^ *(_DWORD *)&v271[4 * (HIBYTE(v332) ^ 0xEC)] ^ (v247
                                                                               - 367616239
                                                                               - ((2 * v247) & 0xD42D3E22));
  int v345 = v541 ^ *(_DWORD *)&v271[4 * (HIBYTE(v327) ^ 0x5A)] ^ (v339 - 367616239 - ((2 * v339) & 0xD42D3E22));
  unsigned int v346 = HIDWORD(v535) ^ v337 ^ *(_DWORD *)(v262 + 4LL * v338) ^ *(_DWORD *)(v258 + 4LL * (v336 ^ 0x6Du)) ^ *(_DWORD *)&v271[4 * (HIBYTE(v335) ^ 0x68)] ^ ((v269 >> 15) + (v343 << 20));
  int v347 = ((BYTE1(v344) ^ 0x9D) - 1101829684 - 2 * (((v344 >> 8) ^ 0xC2489D) & 0xCE ^ (v344 >> 8) & 2)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v344) ^ 0xF0u));
  unsigned int v348 = *(_DWORD *)(v266 + 4LL * (BYTE2(v247) ^ 0x8Fu));
  unsigned int v349 = *(_DWORD *)(v262 + 4LL * (v346 ^ 0x8Eu)) ^ (v348 << 20) ^ (v348 >> 12) ^ 0xEA2BEBBE ^ (v347 - 747033579 - ((2 * v347) & 0xA6F2582A));
  int v350 = *(_DWORD *)(v266 + 4LL * ((v345 ^ 0xCFB8D782) >> 16));
  HIDWORD(v269) = v350 ^ 0xEA2;
  LODWORD(v269) = v350 ^ 0xBEBBE000;
  int v351 = ((v269 >> 12) - 747033579 - ((2 * (v269 >> 12)) & 0xA6F2582A)) ^ *(_DWORD *)(v262
                                                                                    + 4LL
                                                                                    * ((v344 ^ BYTE1(v327)) ^ 0x3Fu));
  unsigned int v352 = v349 - 367616239 - ((2 * v349) & 0xD42D3E22);
  unsigned int v353 = v351 - 367616239 - ((2 * v351) & 0xD42D3E22);
  int v354 = BYTE1(v247) ^ 0xD9;
  unsigned int v355 = v354 - 1101829684 - 2 * (((v247 >> 8) ^ 0xC78FD9) & 0xCE ^ (v247 >> 8) & 2);
  int v356 = *(_DWORD *)(v266 + 4LL * (BYTE2(v344) ^ 0x48u));
  HIDWORD(v269) = v356 ^ 0xEA2;
  LODWORD(v269) = v356 ^ 0xBEBBE000;
  int v357 = ((BYTE1(v346) ^ 0xD3) - 1101829684 - ((2 * ((v346 >> 8) ^ 0xF5C4D3)) & 0x198)) ^ *(_DWORD *)(v262 + 4LL * (v345 ^ 0xCCu)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v346) ^ 0xBEu)) ^ ((v269 >> 12) - 747033579 - ((2 * (v269 >> 12)) & 0xA6F2582A));
  int v358 = *(_DWORD *)(v266 + 4LL * (BYTE2(v346) ^ 0xC4u));
  HIDWORD(v269) = v358 ^ 0xEA2;
  LODWORD(v269) = v358 ^ 0xBEBBE000;
  unsigned int v359 = v535 ^ (((unsigned __int16)(v345 ^ 0xD782) >> 8)
               - 1101829684
               - (((v345 ^ 0xCFB8D782) >> 7) & 0x198)) ^ *(_DWORD *)(v262 + 4LL * (v247 ^ 0x50u)) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v345 ^ 0xD782) >> 8) ^ 0x6Du)) ^ (v269 >> 12) ^ *(_DWORD *)&v271[4 * (HIBYTE(v344) ^ 0xC2)];
  LODWORD(v247) = HIDWORD(v529) ^ *(_DWORD *)&v271[4 * (BYTE3(v247) ^ 0xC7)] ^ (v357
                                                                              - 367616239
                                                                              - ((2 * v357) & 0xD42D3E22));
  unsigned int v360 = v529 ^ *(_DWORD *)&v271[4 * ((v345 ^ 0xCFB8D782) >> 24)] ^ v352;
  unsigned int v361 = HIDWORD(v523) ^ v355 ^ *(_DWORD *)&v271[4 * (HIBYTE(v346) ^ 0xF5)] ^ *(_DWORD *)(v258 + 4LL * (v354 ^ 0x6Du)) ^ v353;
  int v362 = *(_DWORD *)(v266 + 4LL * (BYTE2(v247) ^ 0xE6u));
  HIDWORD(v269) = v362 ^ 0xEA2;
  LODWORD(v269) = v362 ^ 0xBEBBE000;
  int v363 = v269 >> 12;
  int v364 = *(_DWORD *)(v266 + 4LL * (BYTE2(v360) ^ 0x1Cu));
  unsigned int v365 = (((unsigned __int16)(v361 ^ 0xCCA2) >> 8) - 1101829684 - (((v361 ^ 0x33C8CCA2) >> 7) & 0x198)) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v361 ^ 0xCCA2) >> 8) ^ 0x6Du));
  HIDWORD(v269) = v364 ^ 0xEA2;
  LODWORD(v269) = v364 ^ 0xBEBBE000;
  int v366 = (v269 >> 12) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v247) ^ 0xD9u)) ^ ((BYTE1(v247) ^ 0xB4)
                                                                         - 1101829684
                                                                         - 2
                                                                         * (((v247 >> 8) ^ 0x4FE6B4) & 0xCD ^ (v247 >> 8) & 1));
  unsigned int v367 = (v366 - 747033579 - ((2 * v366) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v359 ^ 0xEEu));
  unsigned int v368 = (v365 - 747033579 - ((2 * v365) & 0xA6F2582A)) ^ *(_DWORD *)(v262
                                                                    + 4LL
                                                                    * ((v529 ^ v271[4 * ((v345 ^ 0xCFB8D782) >> 24)] ^ v352) ^ 0x3Au));
  unsigned int v369 = *(_DWORD *)(v262 + 4LL * (v361 ^ 0xA2u)) ^ (((unsigned __int16)(v359 ^ 0xA7EE) >> 8)
                                                                    - 1101829684
                                                                    - (((v359 ^ 0x205CA7EE) >> 7) & 0x198)) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v359 ^ 0xA7EE) >> 8) ^ 0x6Du)) ^ (v363 - 747033579 - ((2 * v363) & 0xA6F2582A));
  int v370 = *(_DWORD *)(v262 + 4LL * (v247 ^ 0x96u));
  HIDWORD(v269) = v370 ^ 0x13792C15;
  LODWORD(v269) = v370 ^ 0xC0000000;
  HIDWORD(v269) = (v269 >> 29) ^ 0x6615DA09;
  LODWORD(v269) = HIDWORD(v269);
  int v371 = (v269 >> 3) - 1101829684 - ((2 * (v269 >> 3)) & 0x7CA6D398);
  int v372 = *(_DWORD *)(v266 + 4LL * ((v359 ^ 0x205CA7EE) >> 16));
  HIDWORD(v269) = v372 ^ 0xEA2;
  LODWORD(v269) = v372 ^ 0xBEBBE000;
  int v373 = v269 >> 12;
  int v374 = *(_DWORD *)(v266 + 4LL * ((v361 ^ 0x33C8CCA2) >> 16));
  HIDWORD(v269) = v374 ^ 0xEA2;
  LODWORD(v269) = v374 ^ 0xBEBBE000;
  unsigned int v375 = v523 ^ *(_DWORD *)&v271[4 * (HIBYTE(v361) ^ 0x17)] ^ (v367 - 367616239 - ((2 * v367) & 0xD42D3E22));
  int v376 = BYTE1(v360);
  int v377 = v371 ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v360) ^ 0xD1u)) ^ (v269 >> 12);
  unsigned int v378 = *(_DWORD *)&v271[4 * (HIBYTE(v359) ^ 4)] ^ v590 ^ (v377 - 367616239 - ((2 * v377) & 0xD42D3E22));
  unsigned int v379 = HIDWORD(v518) ^ *(_DWORD *)&v271[4 * (BYTE3(v247) ^ 0x4F)] ^ v373 ^ (v368
                                                                            - 367616239
                                                                            - ((2 * v368) & 0xD42D3E22));
  LODWORD(v247) = v518 ^ *(_DWORD *)&v271[4 * (HIBYTE(v360) ^ 0x1B)] ^ (v369 - 367616239 - ((2 * v369) & 0xD42D3E22));
  int v380 = *(_DWORD *)(v266 + 4LL * (BYTE2(v247) ^ 0x7Eu));
  HIDWORD(v269) = v380 ^ 0xEA2;
  LODWORD(v269) = v380 ^ 0xBEBBE000;
  int v381 = v269 >> 12;
  int v382 = *(_DWORD *)(v266 + 4LL * (BYTE2(v379) ^ 1u));
  HIDWORD(v269) = v382 ^ 0xEA2;
  LODWORD(v269) = v382 ^ 0xBEBBE000;
  int v383 = ((v269 >> 12) - 747033579 - ((2 * (v269 >> 12)) & 0xA6F2582A)) ^ *(_DWORD *)(v262
                                                                                    + 4LL
                                                                                    * (v375 ^ 0xC6u));
  int v384 = ((BYTE1(v375) ^ 0x71) - 1101829684 - ((2 * ((v375 >> 8) ^ 0xF25B71)) & 0x198)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v375) ^ 0x1Cu));
  unsigned int v385 = (v384 - 367616239 - ((2 * v384) & 0xD42D3E22)) ^ *(_DWORD *)&v271[4 * (HIBYTE(v379) ^ 0x1F)];
  int v386 = *(_DWORD *)(v266 + 4LL * (BYTE2(v375) ^ 0x5Bu));
  HIDWORD(v269) = v386 ^ 0xEA2;
  LODWORD(v269) = v386 ^ 0xBEBBE000;
  int v387 = v269 >> 12;
  unsigned int v388 = v385 - 747033579 - ((2 * v385) & 0xA6F2582A);
  unsigned int v389 = v376 ^ 0x73F4E0AF ^ v378;
  int v390 = *(_DWORD *)(v266 + 4LL * BYTE2(v389));
  HIDWORD(v269) = v390 ^ 0xEA2;
  LODWORD(v269) = v390 ^ 0xBEBBE000;
  int v391 = v269 >> 12;
  HIDWORD(v269) = v381 ^ ((BYTE1(v379) ^ 0x81) - 1101829684 - ((2 * ((v379 >> 8) ^ 0x1F0181)) & 0x198)) ^ 0xD678EAEF ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v379) ^ 0xECu));
  LODWORD(v269) = HIDWORD(v269);
  LODWORD(v269) = (v269 >> 11) ^ __ROR4__(*(_DWORD *)&v271[4 * (HIBYTE(v375) ^ 0xF2)] ^ 0x480CC4AF, 11) ^ 0xD490839A;
  HIDWORD(v269) = v269;
  unsigned int v392 = v455 ^ HIDWORD(v450) ^ *(_DWORD *)(v262 + 4LL * (v379 ^ 0xB8u)) ^ ((BYTE1(v247) ^ 0xAA)
                                                                                           - 1101829684
                                                                                           - 2
                                                                                           * (((v247 >> 8) ^ 0x967EAA) & 0xCD ^ (v247 >> 8) & 1)) ^ *(_DWORD *)&v271[4 * (HIBYTE(v378) ^ 0x57)] ^ v387 ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v247) ^ 0xC7u));
  unsigned int v393 = v513 ^ *(_DWORD *)&v271[4 * (BYTE3(v247) ^ 0x96)] ^ (BYTE1(v389) - 1101829684 - ((v389 >> 7) & 0x198)) ^ *(_DWORD *)(v258 + 4LL * (BYTE1(v389) ^ 0x6Du)) ^ (v383 - 367616239 - ((2 * v383) & 0xD42D3E22));
  unsigned int v394 = HIDWORD(v509) ^ *(_DWORD *)(v262 + 4LL * (v247 ^ 0x88u)) ^ v391 ^ v388;
  unsigned int v395 = v509 ^ *(_DWORD *)(v262 + 4LL * v389) ^ ((v269 >> 21)
                                                                 - 747033579
                                                                 - ((2 * (v269 >> 21)) & 0xA6F2582A));
  int v396 = *(_DWORD *)(v266 + 4LL * (BYTE2(v392) ^ 0x84u));
  HIDWORD(v269) = v396 ^ 0xEA2;
  LODWORD(v269) = v396 ^ 0xBEBBE000;
  int v397 = v269 >> 12;
  int v398 = *(_DWORD *)(v258 + 4LL * (BYTE1(v393) ^ 0x96u)) ^ ((BYTE1(v393) ^ 0xFB)
                                                          - 1101829684
                                                          - ((2 * ((v393 >> 8) ^ 0x3EA2FB)) & 0x198));
  unsigned int v399 = (v398 - 747033579 - ((2 * v398) & 0xA6F2582A)) ^ *(_DWORD *)(v262 + 4LL * (v394 ^ 0x75u));
  int v400 = *(_DWORD *)(v266 + 4LL * (BYTE2(v393) ^ 0xA2u));
  HIDWORD(v269) = v400 ^ 0xEA2;
  LODWORD(v269) = v400 ^ 0xBEBBE000;
  int v401 = (((unsigned __int16)(v394 ^ 0xF075) >> 8) - 1101829684 - (((v394 ^ 0xB54AF075) >> 7) & 0x198)) ^ (v269 >> 12) ^ *(_DWORD *)(v258 + 4LL * (((unsigned __int16)(v394 ^ 0xF075) >> 8) ^ 0x6Du));
  int v402 = *(_DWORD *)&v271[4 * (HIBYTE(v392) ^ 0xFE)];
  unsigned int v403 = (v401 - 367616239 - ((2 * v401) & 0xD42D3E22)) ^ *(_DWORD *)&v271[4 * (HIBYTE(v395) ^ 0xED)];
  unsigned int v404 = v399 - 367616239 - ((2 * v399) & 0xD42D3E22);
  v395 ^= 0xC9AF1D8F;
  int v405 = BYTE1(v395);
  int v406 = BYTE1(v395) - 1101829684 - ((v395 >> 7) & 0x198);
  int v407 = *(_DWORD *)(v262 + 4LL * v395);
  int v408 = *(_DWORD *)(v262 + 4LL * (v392 ^ 0x6Bu));
  unsigned int v409 = *(_DWORD *)(v266 + 4LL * BYTE2(v395));
  LODWORD(v247) = *(_DWORD *)(v266 + 4LL * (BYTE2(v394) ^ 0x4Au));
  HIDWORD(v269) = v247 ^ 0xEA2;
  LODWORD(v269) = v247 ^ 0xBEBBE000;
  LODWORD(v266) = *(_DWORD *)(v258 + 4LL * (v405 ^ 0x6Du));
  int v410 = (v392 >> 8) ^ 0xFE8473;
  LODWORD(v258) = *(_DWORD *)(v258 + 4LL * (v410 ^ 0x6Du));
  int v411 = v410 - 1101829684 - ((2 * v410) & 0x198);
  unsigned int v412 = HIDWORD(v504) ^ *(_DWORD *)(v262 + 4LL * (v393 ^ 0x9Au)) ^ v397 ^ *(_DWORD *)&v271[4 * (HIBYTE(v394) ^ 0x91)] ^ v406 ^ v266;
  LODWORD(v266) = v504 ^ v411 ^ *(_DWORD *)&v271[4 * (HIBYTE(v393) ^ 0x3E)] ^ v258 ^ v407 ^ (v269 >> 12);
  unsigned int v413 = HIDWORD(v499) ^ v408 ^ (v403 - 747033579 - ((2 * v403) & 0xA6F2582A));
  LODWORD(v258) = v499 ^ v402 ^ (v409 >> 12) ^ (v409 << 20) ^ v404;
  int v414 = *(_DWORD *)(v61 - 124);
  v415 = (char *)*(&off_1004EDED0 + v414 - 809) - 4;
  v416 = (char *)*(&off_1004EDED0 + v414 - 792) - 4;
  LODWORD(v247) = *(_DWORD *)&v416[4
                                 * (((unsigned __int16)(v499 ^ v402 ^ (v409 >> 12) ^ v404) >> 8) ^ 0xC8)] ^ *(_DWORD *)&v415[4 * (v413 ^ 7)];
  int v417 = (v247 ^ 0x2636AA21) - 1507977308 - 2 * ((v247 ^ 0x2636AA21) & 0x261E17B4 ^ v247 & 0x10);
  LODWORD(v247) = *(_DWORD *)&v416[4 * (BYTE1(v412) ^ 0xC2)];
  v418 = (char *)*(&off_1004EDED0 + (int)v480) - 4;
  int v419 = *(_DWORD *)&v416[4 * ((unsigned __int16)(v413 ^ 0x6F07) >> 8)];
  int v420 = v417 ^ *(_DWORD *)&v418[4 * (BYTE3(v266) ^ 0xB2)];
  LODWORD(v271) = *(_DWORD *)&v416[4 * ~(v266 >> 8)];
  int v421 = *(_DWORD *)&v418[4 * (HIBYTE(v413) ^ 0xEF)];
  LODWORD(v262) = *(_DWORD *)&v418[4 * (BYTE3(v258) ^ 0x77)];
  int v422 = *(_DWORD *)&v418[4 * (HIBYTE(v412) ^ 8)];
  v423 = (char *)*(&off_1004EDED0 + v414 - 759) - 12;
  int v424 = *(_DWORD *)&v423[4 * (BYTE2(v258) ^ 0x97)];
  uint64_t v425 = *(unsigned int *)&v423[4 * (BYTE2(v413) ^ 0x2A)];
  uint64_t v426 = *(unsigned int *)&v423[4 * (BYTE2(v266) ^ 0x9B)];
  LODWORD(v423) = *(_DWORD *)&v423[4 * (BYTE2(v412) ^ 0xE4)] ^ (v420 + 1430988054 - ((2 * v420) & 0xAA964A2C));
  int v427 = *(_DWORD *)&v415[4 * (v412 ^ 0xD8)];
  LODWORD(v418) = *(_DWORD *)&v415[4 * (v266 ^ 0xC5)];
  LODWORD(v415) = *(_DWORD *)&v415[4 * (v258 ^ 0x65)];
  LODWORD(v258) = *(_DWORD *)(v61 - 140) ^ HIDWORD(v586) ^ ((_DWORD)v423 - ((2 * (_DWORD)v423) & 0x2C9828FA) - 1773398915);
  v428 = (char *)*(&off_1004EDED0 + v414 - 651) - 8;
  *(_BYTE *)(*(void *)(v61 - 120) + 8LL) = v428[BYTE3(v258) ^ 0xD7LL] ^ 0xC2;
  LODWORD(v423) = ((v424 ^ 0x5C323448 ^ v419) - 1507977308 - ((2 * (v424 ^ 0x5C323448 ^ v419)) & 0x4C3C2F48)) ^ v422;
  LODWORD(v423) = ((_DWORD)v423 + 793754495 - ((2 * (_DWORD)v423) & 0x5E9F76FE)) ^ v418;
  LODWORD(v423) = *(_DWORD *)(v61 - 136) ^ v587 ^ ((_DWORD)v423 - ((2 * (_DWORD)v423) & 0xDAD2220C) + 1835602182);
  v429 = (char *)*(&off_1004EDED0 + v414 - 760) - 12;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 224)) = (v429[v423 ^ 0xC7LL] - 63) ^ 0x5F;
  v430 = (char *)*(&off_1004EDED0 + SHIDWORD(a25)) - 12;
  int v431 = v430[BYTE1(v423) ^ 0x13LL];
  HIDWORD(v269) = v431 ^ 0x2A;
  LODWORD(v269) = (v431 ^ 0x40) << 24;
  *(_BYTE *)(*(void *)(v61 - 120) + 6LL) = (v269 >> 30) ^ 0x40;
  int v432 = ((v427 ^ 0x7A049E69 ^ v425) - 1507977308 - ((2 * (v427 ^ 0x7A049E69 ^ v425)) & 0x4C3C2F48)) ^ v262;
  unsigned int v433 = (v432 - ((2 * v432) & 0x12F222BC) + 158929246) ^ v271;
  unsigned int v434 = *(_DWORD *)(v61 - 132) ^ HIDWORD(v587) ^ (v433 - ((2 * v433) & 0xCF7B7D72) - 406995271);
  int v435 = v430[BYTE1(v434)];
  HIDWORD(v269) = v435 ^ 0x2A;
  LODWORD(v269) = (v435 ^ 0x40) << 24;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 216)) = (v269 >> 30) ^ 0x7E;
  v436 = (char *)*(&off_1004EDED0 + v414 - 650) - 8;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 256)) = v436[BYTE2(v258) ^ 0xFBLL] ^ 0xDD;
  int v437 = ((v247 ^ 0xAF6706FA ^ v421) + 1430988054 - ((2 * (v247 ^ 0xAF6706FA ^ v421)) & 0xAA964A2C)) ^ v426;
  unsigned int v438 = v415 ^ (v437 + 793754495 - ((2 * v437) & 0x5E9F76FE));
  unsigned int v439 = *(_DWORD *)(v61 - 128) ^ v588 ^ (v438 - ((2 * v438) & 0x8B3C385C) + 1167989806);
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 176)) = v436[BYTE2(v439) ^ 0xB8LL] ^ 0xE;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 248)) = (v429[v258 ^ 0x1BLL] - 63) ^ 0x7D;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 232)) = v436[BYTE2(v423) ^ 3LL] ^ 0x70;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 192)) = v428[(v423 >> 24) ^ 0x6DLL] ^ 0x3A;
  LODWORD(v423) = v430[BYTE1(v258) ^ 0x92LL];
  HIDWORD(v269) = v423 ^ 0x2A;
  LODWORD(v269) = (v423 ^ 0x40) << 24;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 160)) = (v269 >> 30) ^ 0xD2;
  uint64_t v440 = *(void *)(v61 - 208);
  *(_BYTE *)(*(void *)(v61 - 120) + v440) = v428[HIBYTE(v434) ^ 0x53LL] ^ 0xD6;
  *(_BYTE *)(*(void *)(v61 - 120) + *(void *)(v61 - 184)) = (v429[v434 ^ 0x95LL] - 63) ^ 0xAF;
  LOBYTE(v423) = v429[v439 ^ 0x64LL];
  uint64_t v441 = *(void *)(v61 - 120);
  *(_BYTE *)(v441 + *(void *)(v61 - 240)) = ((_BYTE)v423 - 63) ^ 0x27;
  *(_BYTE *)(v441 + *(void *)(v61 - 168)) = v428[HIBYTE(v439) ^ 0x6ELL] ^ 0x40;
  LODWORD(v423) = v430[BYTE1(v439) ^ 0x1FLL];
  HIDWORD(v269) = v423 ^ 0x2A;
  LODWORD(v269) = (v423 ^ 0x40) << 24;
  *(_BYTE *)(v441 + *(void *)(v61 - 200)) = (v269 >> 30) ^ 0x58;
  *(_BYTE *)(v441 + *(void *)(v61 - 152)) = v436[BYTE2(v434) ^ 0xC8LL] ^ 0x5F;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, unint64_t))(a57 + 8LL * ((1692 * ((((_DWORD)v440 - 1210073429 - 2 * (((_DWORD)v440 + 16) & 0x37DFBE9F)) ^ 0xB7DFBE9B) < a55)) ^ (v414 - 380))))( v430,  793754495LL,  42LL,  2861976108LL,  v426,  1430988054LL,  1587508990LL,  v425,  v443,  v444,  v445,  v446,  v448,  v450,  v451,  v452,  v455,  v457,  v461,  v464,  v467,  v471,  v475,  a24,  a25,  v480,  v486,  v493,  v499,  v504,  v509,  v513,  v518,  v523,  v529,  v535,  v541,  v545,  v551,  v556,  v562,  v566,  v571,  v574,  v578,  v580,  v582,  v584,  a49,
           v585,
           v586,
           v587);
}

void sub_1000415CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,int a58,int a59,int a60)
{
  *(_DWORD *)(v60 - 128) = a57 ^ 0x9EAC4702;
  *(_DWORD *)(v60 - 140) = a59 ^ 0x2D1575D2;
  *(_DWORD *)(v60 - 132) = a60 ^ 0x93AB7741;
  *(_DWORD *)(v60 - 136) = a58 ^ 0x94358E1A;
  JUMPOUT(0x10003F8B4LL);
}

uint64_t sub_100041620(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * (a7 ^ (1816 * (v7 != a3))))
                            - ((a7 + 1721561428) & 0x99630FFE)
                            + 866LL))();
}

uint64_t sub_10004165C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v9
                                                                      + 8LL
                                                                      * (int)((((((a7 + 1714580835) ^ 0x66326F76) & v7) != 0)
                                                                             * ((a7 + 1714580835) & 0x99CD93EF ^ 0x362)) | (a7 + 389))))( a1,  a2,  a3,  (v8 - a3));
}

uint64_t sub_1000416AC( int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  *(_DWORD *)(v65 - 128) = v56;
  *(_DWORD *)(v65 - 124) = v63;
  int v66 = (a7 - 193) | 0x50;
  unsigned int v67 = (v66 ^ 0xFFFFFE2D) & v56;
  int v68 = -a3;
  *(_DWORD *)(v65 - 132) = v67;
  char v69 = v61 + a2 + a1;
  uint64_t v70 = (v68 + a2 + a1 + v62);
  v72.val[0].i64[0] = ((_BYTE)v68 + (_BYTE)a2 + (_BYTE)a1 + (_BYTE)v62) & 0xF;
  v72.val[0].i64[1] = ((_BYTE)v68 + v69 + 10) & 0xF;
  v72.val[1].i64[0] = ((_BYTE)v68 + v69 + 9) & 0xF;
  v72.val[1].i64[1] = ((_BYTE)v68 + v60 + ((((a7 + 63) | 0x50) + 70) ^ 3)) & 0xF;
  v72.val[2].i64[0] = ((_BYTE)v68 + v69 + 7) & 0xF;
  v72.val[2].i64[1] = ((_BYTE)v68 + v69 + 6) & 0xF;
  v72.val[3].i64[0] = ((_BYTE)v68 + v69 + 5) & 0xF;
  v72.val[3].i64[1] = ((_BYTE)v68 + v69 + 4) & 0xF;
  *(int8x8_t *)(v64 - 7 + v70) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8(*(int8x8_t *)(v64 - 7 + v70), *(int8x8_t *)(v58 + (v70 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v59 + (v70 & 0xF) - 7),  *(int8x8_t *)(v57 + (v70 & 0xF) - 7)))),  (int8x8_t)0x3232323232323232LL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v72, (int8x16_t)xmmword_1003BA330),  (int8x8_t)0x505050505050505LL)));
  return (*(uint64_t (**)(__n128))(a56 + 8LL * ((915 * (v68 != 8 - v67)) ^ v66)))((__n128)xmmword_1003BA330);
}

void sub_1000417F0()
{
}

uint64_t sub_100041818()
{
}

uint64_t sub_100041854(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v11 = (a4 - 1802685205);
  *(_BYTE *)(v9 + v11) ^= *(_BYTE *)(v7 + (v11 & 0xF)) ^ *(_BYTE *)(v8 + (v11 & 0xF)) ^ *(_BYTE *)(v6 + (v11 & 0xF)) ^ (5 * (v11 & 0xF)) ^ 0x32;
  return ((uint64_t (*)(void))(*(void *)(v10 + 8LL * ((998 * (a4 - 1 == v5)) ^ (a5 - 369))) - 12LL))();
}

void sub_1000418BC()
{
  if (v0 == 2010122275) {
    int v1 = 1645153785;
  }
  else {
    int v1 = -1645193695;
  }
  *(_DWORD *)(v2 + 40) = v1;
}

void sub_100041920( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2) {
    BOOL v8 = a3 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  int v12 = !v8 && a6 != 0 && a7 != 0 && a8 != 0;
  __asm { BR              X8 }

uint64_t sub_1000419BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, _DWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, unsigned int a22)
{
  *a6 = 0LL;
  *a7 = 0;
  a22 = 108757529
  uint64_t v27 = v22;
  uint64_t v25 = sub_10004CCF0(&a21);
  return ((uint64_t (*)(uint64_t))(*(void *)(v27 + 8LL * ((1797 * (a21 == v24)) ^ v23)) - 4LL))(v25);
}

uint64_t sub_100041A5C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, unint64_t *a21, unsigned int a22, unsigned int a23, int a24)
{
  unsigned int v24 = 1759421093 * ((&a21 + 2130158787 - 2 * (&a21 & 0x7EF7A4C3)) ^ 0xCD8A1497);
  a24 = v24 ^ 0x18F94B49;
  HIDWORD(a21) = v24 ^ 0x771B5177;
  a22 = v24 + 1806;
  LODWORD(a21) = v24 ^ 0x7FA6CEE2;
  sub_100014618((uint64_t)&a21);
  LODWORD(a11) = a23;
  a23 = 1307 - 460628867 * ((((2 * &a21) | 0x5259E7E8) - &a21 + 1456671756) ^ 0xE5BA7189);
  a21 = &STACK[0x4BD26FD1213425D9];
  sub_100028A48((uint64_t)&a21);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a14 + 8LL * ((27 * (a22 != 1645153785)) ^ 0x16Fu)) - 4LL))( v25,  v26,  v27,  v28,  v29,  v30,  v31,  v32,  a9,  a10,  a11,  a12,  a13,  a14);
}

uint64_t sub_100041B94( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, int a22, uint64_t a23, unsigned int a24, uint64_t a25)
{
  int v32 = 87 * v25;
  unsigned int v33 = 1178560073
      * ((-1996209345 - (&a21 | 0x8904433F) + (&a21 | 0x76FBBCC0)) ^ 0xCC6FC4A2);
  a23 = a16;
  a24 = (87 * v25 + 43) ^ v33;
  a22 = (v30 ^ 0xDBFDF3FD) + v33 + 1954504252 + ((((87 * v25 - 937) | 0x160) - 1208228218) & (2 * v30));
  sub_100038AF4((uint64_t)&a21);
  a24 = 87 * v25
  a23 = a16;
  a25 = v29;
  ((void (*)(int *))((char *)*(&off_1004EDED0 + 87 * v25 - 926) - 12))(&a21);
  unsigned int v34 = 1178560073 * (&a21 ^ 0xBA947862);
  a23 = a16;
  a24 = (v32 + 43) ^ v34;
  a22 = (v28 ^ 0x7D7D52F9) + v34 - 754974912 + ((v28 << (68 * (v32 ^ 0xB2) + 5)) & 0xFAFAA5F2);
  sub_100038AF4((uint64_t)&a21);
  a25 = v26;
  a22 = v34 + v32 + 332;
  a24 = v34 ^ ((v27 ^ 0xBFEF9D6F) + 1267826619 + ((2 * v27) & 0x7FDF3ADE));
  a23 = a16;
  uint64_t v35 = ((uint64_t (*)(int *))((char *)*(&off_1004EDED0 + (v32 ^ 0x33Du)) - 8))(&a21);
  return (*(uint64_t (**)(uint64_t))(a14 + 8LL * (((a21 != v31) | ((a21 != v31) << 6)) ^ v32)))(v35);
}

uint64_t sub_100041DAC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, unint64_t *a22, uint64_t a23, int a24, unsigned int a25, int a26, int a27)
{
  if (a12 + (v27 ^ 0xBEFFE260) >= 0x1F8FCFD3) {
    int v29 = 1010542952;
  }
  else {
    int v29 = 635686783;
  }
  int v30 = 460628867 * ((&a22 - 68604818 - 2 * ((unint64_t)&a22 & 0xFBE92C6E)) ^ 0xB77FAE13);
  a26 = v29 - v30;
  a24 = v30 - 982147079;
  a25 = v30 + 2138962340 + a10;
  a22 = &STACK[0x58A7AA086245692E];
  a23 = a17;
  uint64_t v31 = sub_10004D0C0((uint64_t)&a22);
  return (*(uint64_t (**)(uint64_t))(a15
                                            + 8LL
                                            * ((1183 * (a27 == ((((a10 + 1611586287) & 0xF125FF) - 887) ^ (v28 - 364)))) ^ a10)))(v31);
}

uint64_t sub_100041EB4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, unint64_t *a23, unint64_t *a24, unsigned int a25)
{
  a23 = &STACK[0x72E1645BEBB64067];
  a24 = &STACK[0x1E6EF7153090E02];
  a22 = a18;
  a25 = (v27 - 905) ^ (1225351577
                     * ((((2 * &a21) | 0xE5132B40) - &a21 + 225864288) ^ 0xD1134DB6));
  uint64_t v29 = v25;
  uint64_t v30 = ((uint64_t (*)(char *))((char *)*(&off_1004EDED0 + (v27 & 0xF9F055)) - 8))(&a21);
  return (*(uint64_t (**)(uint64_t))(v29 + 8LL * (((((v27 + 37624584) & 0x1C1E0EF) + 490) * (v26 < v28)) ^ v27)))(v30);
}

uint64_t sub_100041FCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _BYTE *a18, uint64_t a19, int a20, char a21, unsigned int a22, char *a23, _BYTE *a24)
{
  a22 = (v27 - 914) ^ ((&a22 ^ 0x6DF41809) * v25);
  a23 = &a21 + v26;
  a24 = a18;
  v29(&a22);
  a22 = (v27 - 914) ^ (1374699841 * ((&a22 & 0x80170750 | ~(&a22 | 0x80170750)) ^ 0x121CE0A6));
  a23 = v28;
  a24 = a18;
  v29(&a22);
  a23 = v24;
  a24 = a18;
  a22 = (v27 - 914) ^ (1374699841
                     * ((&a22 - 1703598249 - 2 * (&a22 & 0x9A752757)) ^ 0xF7813F5E));
  v29(&a22);
  a23 = a18;
  a22 = (v27 - 413) ^ (1755732067
                     * ((2 * (&a22 & 0x6B25E860) - &a22 + 349837213) ^ 0xCA1CAA46));
  uint64_t v31 = sub_100049128((uint64_t)&a22);
  int v32 = (_DWORD)a24 == v30 + ((v27 - 109820142) & 0x68BB7FE) - 1020;
  return ((uint64_t (*)(uint64_t))(*(void *)(a14 + 8LL * (((8 * v32) | (v32 << 9)) ^ (v27 - 1032))) - 8LL))(v31);
}

uint64_t sub_100042140( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20)
{
  return ((uint64_t (*)(void))(*(void *)(v20
                                        + 8LL * (int)(((a20 == v22) * (((v21 + 1980706585) & 0x89F0D3FF) + 296)) ^ v21))
                            - ((v21 - 2065801700) & 0x7B21A19F)
                            + 151LL))();
}

uint64_t sub_100042198@<X0>( int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14)
{
  *int8x16_t v15 = a9 ^ 0xF9;
  return ((uint64_t (*)(void))(*(void *)(v14
                                        + 8LL
                                        * (int)(((a14 == v16)
                                               * ((((a1 - 92) | 0xA0) ^ 0xFFFFFC63) + ((a1 + 333) | 0x210))) ^ a1))
                            - 8LL))();
}

uint64_t sub_1000421F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  BOOL v17 = ((uint64_t (*)(void))*(&off_1004EDED0 + (v15 ^ 1)))(v14 ^ (v16 - 736) ^ v15 ^ 0x603u) != 0;
  return ((uint64_t (*)(void))(*(void *)(a14 + 8LL * ((v17 * (v15 ^ 0x1E0)) ^ v15)) - 8LL))();
}

uint64_t sub_100042250( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20)
{
  unsigned int v23 = (a20 ^ v22) - (((((v20 - 1760) | 0x9A) + 73) ^ 0xEDAA0B17) & (2 * (a20 ^ v22))) + 1993672186;
  return ((uint64_t (*)(void))(*(void *)(v21
                                        + 8LL
                                        * ((504
                                          * (((2 * v23) & 0xDFDBFDDA ^ 0xCD8A09D0) + (v23 ^ 0x1938FB17) - 1610946564 != 266921705)) ^ v20))
                            - 12LL))();
}

uint64_t sub_1000422E4(uint64_t a1, int a2)
{
  int v5 = v3 + v2 - 1877868269 >= ((33 * (a2 ^ 0x8E)) ^ 0x29Cu);
}

uint64_t sub_10004235C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v8 = v5 - a1 >= (unint64_t)(25 * (a5 ^ v6 ^ (v6 + 677))) - 1193;
  return (*(uint64_t (**)(void))(v7 + 8LL * (((4 * v8) | (32 * v8)) ^ a5)))();
}

uint64_t sub_100042398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, void))(*(void *)(v10
                                                              + 8LL
                                                              * ((54 * (v9 >= ((v7 + (a7 ^ (v8 + 1597)) + 851) ^ 0x3CDu))) ^ a7))
                                                  - 12LL))( a1,  0LL);
}

uint64_t sub_1000423D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v13 = v11 + v10 + a6;
  uint64_t v14 = v7 + v13;
  __int128 v15 = *(_OWORD *)(v14 - 31);
  uint64_t v16 = a1 + v13;
  *(_OWORD *)(v16 - 15) = *(_OWORD *)(v14 - 15);
  *(_OWORD *)(v16 - 31) = v15;
  return (*(uint64_t (**)(void))(v12
                              + 8LL
                              * ((((v9 & 0xFFFFFFE0) == 32) * ((10 * (a3 ^ (v8 + 645))) ^ 0x4AB)) ^ (v6 + a3 + 481))))();
}

void sub_100042438()
{
}

uint64_t sub_100042444(uint64_t a1)
{
  *uint64_t v7 = a1;
  *int v8 = v2;
  int v4 = ((v1 ^ 0x31F) - 325940229) & 0x136D717C;
  unsigned int v12 = (v1 ^ 0x31F)
  uint64_t v13 = v10;
  v6(v11);
  unsigned int v12 = v4
      + 535753261
  uint64_t v13 = v9;
  v6(v11);
  return v3 ^ 0x620F0DF9u;
}

void sub_100042700(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 36) ^ (235795823
                             * ((-2 - ((a1 ^ 0x29040430 | 0x96E8ABCB) + (a1 ^ 0x10C0A082 | 0x69175434))) ^ 0x52961214));
  __asm { BR              X14 }

uint64_t sub_100042850(uint64_t a1, int a2)
{
  BOOL v4 = (v2 ^ (a2 + 215) ^ 0x8B0A4B63) == 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8LL * (((2 * v4) | (4 * v4)) ^ a2)))(a1, 827000779LL);
}

uint64_t sub_1000428A4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + (a2 - 827000779)) = *(_BYTE *)(v3 + (a2 - 827000779)) ^ *(_BYTE *)(v6 + ((a2 - 827000779) & 0xFLL)) ^ *(_BYTE *)(v5 + ((a2 - 827000779) & 0xFLL)) ^ *(_BYTE *)(v4 + ((a2 - 827000779) & 0xFLL)) ^ (97 * ((a2 + 53) & 0xF)) ^ 0x32;
  int v13 = v8 - 267 + a2;
  unsigned int v14 = a2 + 869111975;
  uint64_t v15 = (v13 - 1292);
  int v16 = (v9 > v11) ^ (v14 < v7);
  BOOL v17 = v14 < v10;
  if (v16) {
    BOOL v17 = v9 > v11;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v12 + 8LL * ((83 * v17) ^ v8)) - 8LL))(a1, v15);
}

uint64_t sub_100042940()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * ((22
                                          * (((((v0 - 1518) | 0x1C8) - 654498756) ^ v1)
                                           + ((2 * v1) & 0xA7EED6BE ^ 0x60492B6) == 1408723807)) ^ v0))
                            - 8LL))();
}

uint64_t sub_1000429B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * ((1362
}

uint64_t sub_100042A08(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
                                        * (((((a7 - 311191283) & 0x128C66FD) - 159)
}

uint64_t sub_100042A54@<X0>(int a1@<W3>, unsigned int a2@<W4>, int a3@<W7>, uint64_t a4@<X8>)
{
  uint64_t v9 = a3 + a1 + 248 * (((a2 + 920) | 0x301) ^ 0x747);
  uint64_t v10 = v9 + v4;
  uint64_t v11 = v9 + a4;
  unint64_t v12 = v10 - v11;
  uint64_t v13 = a3 & 0xF;
  unint64_t v14 = v13 + v7 - v11;
  unint64_t v15 = (v13 | v6) - v11;
  unint64_t v16 = (v13 | v5) - v11;
  BOOL v20 = v12 > 0xF && v14 > 0xF && v15 > 0xF && v16 > 0xF;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((86 * v20) ^ a2)) - 12LL))();
}

uint64_t sub_100042AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v8
                                                                                         + 8LL
                                                                                         * (a7 ^ (1019 * (v7 > 0xF))))
                                                                             - ((52 * (a7 ^ 0x1E1) + 1506241642) & 0xA63893F6)
                                                                             + 978LL))( a1,  a2,  a3,  a4,  0LL);
}

uint64_t sub_100042B20@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  *(_DWORD *)(v9 - 1memset((void *)(v1 - 204), 50, 16) = v7 + 2;
  *(_DWORD *)(v9 - 128) = v7 + 9;
  *(_DWORD *)(v9 - 136) = v7 + 8;
  v17.val[1].i64[0] = ((_BYTE)v7 + 1) & 0xF;
  v17.val[1].i64[1] = v7 & 0xF;
  v17.val[2].i64[0] = ((_BYTE)v7 - 1) & 0xF;
  v17.val[2].i64[1] = ((_BYTE)v7 + 14) & 0xF;
  v17.val[3].i64[0] = ((_BYTE)v7 + 13) & 0xF;
  v17.val[3].i64[1] = ((_BYTE)v7 + 12) & 0xF;
  v18.val[0].i64[0] = ((_BYTE)v7 + 11) & 0xF;
  v18.val[0].i64[1] = ((_BYTE)v7 + 10) & 0xF;
  v18.val[1].i64[0] = *(_DWORD *)(v9 - 128) & 0xF;
  v18.val[1].i64[1] = *(_DWORD *)(v9 - 136) & 0xF;
  uint64_t v10 = *(void *)(v9 - 256);
  v18.val[2].i64[0] = ((_BYTE)v7 + 7) & 0xF;
  v18.val[2].i64[1] = (v7 + 6) & 0xF;
  v18.val[3].i64[0] = ((_BYTE)v7 + 5) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)v7 + 4) & 0xF;
  v11.i64[0] = 0x6161616161616161LL;
  v11.i64[1] = 0x6161616161616161LL;
  v12.i64[0] = 0x3232323232323232LL;
  v12.i64[1] = 0x3232323232323232LL;
  v17.val[0].i64[0] = ((_BYTE)v7 + (_BYTE)v6) & 0xF;
  v17.val[0].i64[1] = *(_DWORD *)(v9 - 116) & 0xF;
  v13.i64[0] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1003BA320).u64[0];
  v13.i64[1] = vqtbl4q_s8(v18, (int8x16_t)xmmword_1003BA320).u64[0];
  int8x16_t v14 = vrev64q_s8( veorq_s8( veorq_s8(*(int8x16_t *)(v2 - 15 + (v7 + v6)), *(int8x16_t *)(v5 + v17.val[0].i64[0] - 15)),  veorq_s8(*(int8x16_t *)(v4 + v17.val[0].i64[0] - 15), *(int8x16_t *)(v3 + v17.val[0].i64[0] - 15))));
  int8x16_t v15 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v14, v14, 8uLL), v12), vmulq_s8(v13, v11)));
  *(int8x16_t *)(a2 - 15 + (v7 + v6)) = vextq_s8(v15, v15, 8uLL);
  return ((uint64_t (*)(uint64_t))(*(void *)(v10
                                                      + 8LL
                                                      * ((1049 * ((((a1 - 884) | 0x618) ^ 0x608) == (v8 & 0xFFFFFFF0))) ^ a1))
                                          - 8LL))(v8);
}

uint64_t sub_100042CB0( int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v10
                                                      + 8LL
}

uint64_t sub_100042CF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  BOOL v11 = ((((a8 - 1072) ^ 0x6AD) - 1853) & v9) != 0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(v10
                                                                                                  + 8LL * (((8 * v11) | (16 * v11)) ^ (a8 - 1072)))
                                                                                      - 4LL))( a1,  a2,  a3,  a4,  a5,  (v8 - a5));
}

uint64_t sub_100042D28@<X0>(int a1@<W1>, int a2@<W2>, int a3@<W3>, int a4@<W4>, int a5@<W7>, uint64_t a6@<X8>)
{
  *(_DWORD *)(v12 - 152) = v11;
  unsigned int v14 = ((a5 - 19) ^ 0xFFFFFC3B) & v11;
  *(void *)(v12 - 136) = v6 - 7;
  *(void *)(v12 - 144) = a6 - 7;
  int v15 = -a4;
  *(_DWORD *)(v12 - 160) = v14;
  char v16 = v13 + a2 + a1;
  *(_DWORD *)(v12 - 128) = a5 - 19;
  *(_DWORD *)(v12 - 1memset((void *)(v1 - 204), 50, 16) = (a5 + 1920881190) & 0x8D81ABEB;
  uint64_t v17 = (v15 + a3 + a2 + a1 + 496);
  v19.val[0].i64[0] = ((_BYTE)v15 + (_BYTE)a3 + (_BYTE)a2 + (_BYTE)a1 - 16) & 0xF;
  v19.val[0].i64[1] = ((_BYTE)v15 + v16 + 2) & 0xF;
  v19.val[1].i64[0] = ((_BYTE)v15 + v16 + 1) & 0xF;
  v19.val[1].i64[1] = ((_BYTE)v15 + v10) & 0xF;
  v19.val[2].i64[0] = ((_BYTE)v15 + v16 + 15) & 0xF;
  v19.val[2].i64[1] = ((_BYTE)v15 + v16 + 14) & 0xF;
  v19.val[3].i64[0] = ((_BYTE)v15 + v16 + 13) & 0xF;
  v19.val[3].i64[1] = ((_BYTE)v15 + v10 + *(_DWORD *)(v12 - 116) + 4) & 0xF;
  *(int8x8_t *)(*(void *)(v12 - 144) + v17) = vrev64_s8( veor_s8( veor_s8( vrev64_s8( veor_s8( veor_s8( *(int8x8_t *)(*(void *)(v12 - 136) + v17),  *(int8x8_t *)(v9 + (v17 & 0xF) - 7)),  veor_s8( *(int8x8_t *)(v8 + (v17 & 0xF) - 7),  *(int8x8_t *)(v7 + (v17 & 0xF) - 7)))),  (int8x8_t)0x3232323232323232LL),  vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8( v19,  (int8x16_t)xmmword_1003BA330),  (int8x8_t)0x6161616161616161LL)));
  return ((uint64_t (*)(__n128))(*(void *)(*(void *)(v12 - 256)
                                                     + 8LL * ((21 * (v15 != 8 - v14)) ^ *(_DWORD *)(v12 - 128)))
                                         - 4LL))((__n128)xmmword_1003BA330);
}

void sub_100042E9C()
{
}

uint64_t sub_100042EC0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return ((uint64_t (*)(uint64_t))(*(void *)(v10
                                                      + 8LL
                                                      * (int)((((*(_DWORD *)(v11 - 116) + 1285438991) & 0xB361C74D ^ 0x305)
                                                             * (*(_DWORD *)(v11 - 152) == *(_DWORD *)(v11 - 160))) ^ *(_DWORD *)(v11 - 116)))
                                          - ((*(_DWORD *)(v11 - 116) + 536) | 0x10Du)
                                          + 1289LL))(a10);
}

uint64_t sub_100042F1C@<X0>(int a1@<W5>, uint64_t a2@<X8>)
{
  uint64_t v10 = (a1 + v7);
  *(_BYTE *)(a2 + v10) = *(_BYTE *)(v2 + v10) ^ *(_BYTE *)(v5 + (v10 & 0xF)) ^ *(_BYTE *)(v4 + (v10 & 0xF)) ^ *(_BYTE *)(v3 + (v10 & 0xF)) ^ (97 * (v10 & 0xF)) ^ 0x32;
}

uint64_t sub_100042F94@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  uint64_t v38 = *(void *)(a1 + 24);
  *(int8x16_t *)(v37 - 112) = veorq_s8( *(int8x16_t *)(*(void *)(a1 + 40) - 0x3EAB24E7EEDAADCALL),  (int8x16_t)xmmword_1003BA350);
  if (a9) {
    BOOL v39 = v38 == 0x39E8CCF6252BBBF8LL;
  }
  else {
    BOOL v39 = 1;
  }
  int v40 = !v39;
  HIDWORD(a12) = v35 << ((a7 - 14) & 0xDF ^ (a7 - 47));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 + 8LL * (int)((158 * v40) ^ a7)) - 8LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34,  a35);
}

uint64_t sub_100043030( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  unsigned int v37 = (HIDWORD(a11) & 0xFEECEEFE) + (v34 ^ 0xFF76777F);
  BOOL v39 = (((_BYTE)v37 + 1) & 0xF) != 0 || v37 == -9013377;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8LL * (((((v35 ^ 0xAB) - 410) ^ 0x3E6) * v39) ^ v35)))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  a24,  a25,  a26,  a27,  a28,  a29,  a30,  a31,  a32,  a33,  a34);
}

uint64_t sub_100043090( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, int a44, int a45)
{
  unsigned int v46 = a10 - (((a45 + 1991023091) & 0x895367DD ^ 0x97F0829) & a13) + 630243607;
  return ((uint64_t (*)(void))(*(void *)(v45
                                        + 8LL
                                        * ((251
                                          * (((2 * v46) & 0xB6FEE7BE ^ 0x7E072C) + (v46 ^ 0x5FC0F469) + 753659424 == 141255167)) ^ a45))
                            - 4LL))();
}

uint64_t sub_10004315C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL * ((104 * (v2 + v1 + 612404257 >= ((v0 + 465) ^ 0x74Du))) ^ (v0 - 966)))
                            - 12LL))();
}

uint64_t sub_1000431CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6
                                                                                 + 8LL
                                                                                 * (int)((1278
                                                                                        * ((((a3 ^ 0x6EB)
                                                                                           - 1877) & a6) == -612404256)) ^ a3))
                                                                     - 12LL))( a1,  a2,  a3,  a2);
}

uint64_t sub_100043208@<X0>(int a1@<W0>, int a2@<W2>, unint64_t a3@<X8>)
{
  uint64_t v9 = (v7 + v6 + a1);
  unint64_t v10 = v9 + a3 + 1;
  uint64_t v11 = (v7 + v6) & 0xF;
  uint64_t v12 = v11 - v9;
  unint64_t v13 = v4 + v12;
  unint64_t v14 = v11 + v4 + 1;
  unint64_t v15 = v3 + (((a2 ^ 0x28Bu) + 1056) ^ 0x747LL) + v12;
  unint64_t v16 = v11 + v3 + 3;
  unint64_t v17 = v12 + v5 + 4;
  unint64_t v18 = v11 + v5 + 5;
  BOOL v20 = v14 > a3 && v13 < v10;
  if (v16 > a3 && v15 < v10) {
    BOOL v20 = 1;
  }
  int v23 = v18 > a3 && v17 < v10 || v20;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((2006 * (v23 ^ 1)) ^ a2)) - 12LL))();
}

uint64_t sub_1000432A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, void))(*(void *)(v7
                                                                       + 8LL
                                                                       * ((252
                                                                         * (((a6 + 82) ^ (v6 < (((a6 - 795) | 0x180) ^ 0x19Au))) & 1)) ^ a6))
                                                           - 12LL))( a1,  a2,  0LL);
}

uint64_t sub_1000432E4@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  *(_DWORD *)(v10 - 1memset((void *)(v1 - 204), 50, 16) = a2 + 9;
  v17.val[1].i64[0] = ((_BYTE)a2 + 14) & 0xF;
  v17.val[1].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v17.val[2].i64[0] = ((_BYTE)a2 + 12) & 0xF;
  v17.val[2].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  uint64_t v11 = *(void *)(v10 - 256);
  unsigned int v12 = v9 + v8 + a1;
  v17.val[3].i64[0] = ((_BYTE)a2 + 10) & 0xF;
  v17.val[3].i64[1] = *(_DWORD *)(v10 - 116) & 0xF;
  v18.val[0].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v18.val[0].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v18.val[1].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v18.val[1].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v18.val[2].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v18.val[2].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v18.val[3].i64[0] = (a2 + 2) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)a2 + 1) & 0xF;
  v13.i64[0] = 0x7777777777777777LL;
  v13.i64[1] = 0x7777777777777777LL;
  v17.val[0].i64[0] = v12 & 0xF;
  v17.val[0].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v14.i64[0] = vqtbl4q_s8(v17, (int8x16_t)xmmword_1003BA320).u64[0];
  v14.i64[1] = vqtbl4q_s8(v18, (int8x16_t)xmmword_1003BA320).u64[0];
  int8x16_t v15 = vrev64q_s8(vmulq_s8(v14, v13));
  *(int8x16_t *)(a4 - 15 + v12) = veorq_s8( veorq_s8( veorq_s8( veorq_s8( *(int8x16_t *)(v5 + v17.val[0].i64[0] - 15),  *(int8x16_t *)(a4 - 15 + v12)),  *(int8x16_t *)(v17.val[0].i64[0] + v4 - 13)),  *(int8x16_t *)(v6 + v17.val[0].i64[0] + ((4 * a3) ^ 0x62CLL) - 15)),  vextq_s8(v15, v15, 8uLL));
  return (*(uint64_t (**)(void))(v11 + 8LL * ((1988 * ((v7 & 0xFFFFFFF0) == 16)) ^ a3)))();
}

void sub_10004344C()
{
}

uint64_t sub_100043458@<X0>( unsigned __int8 *a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF7LL);
  int v12 = (v8 + 806) | 0x45;
  *(_DWORD *)(v10 - 1memset((void *)(v1 - 204), 50, 16) = v12;
  uint64_t v13 = (uint64_t)*(&off_1004EDED0 + v8 - 862);
  int v14 = *(unsigned __int8 *)(v13 + (v11 ^ 0x85));
  HIDWORD(v15) = v14 ^ 0x1A;
  LODWORD(v15) = ((v12 + 59) ^ v14) << 24;
  int v16 = (v15 >> 30) ^ 0x9F;
  int8x16x4_t v17 = (char *)*(&off_1004EDED0 + v8 - 980) - 12;
  int v18 = v17[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBEDLL) ^ 0xBFLL];
  HIDWORD(v15) = v18 ^ 0xC;
  LODWORD(v15) = (v18 ^ 0xC0) << 24;
  LOBYTE(v18) = v15 >> 28;
  int v19 = v16 << 16;
  int v20 = *(unsigned __int8 *)(v13 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF3LL) ^ 0x6FLL));
  HIDWORD(v15) = v20 ^ 0x1A;
  LODWORD(v15) = (v20 ^ 0x80) << 24;
  int v21 = ((v15 >> 30) ^ 0x68) << 16;
  uint64_t v22 = (uint64_t)*(&off_1004EDED0 + v8 - 773);
  int v23 = (char *)*(&off_1004EDED0 + v8 - 857) - 4;
  char v24 = v23[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBECLL) ^ 0xD8LL];
  int v25 = v17[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBE9LL) ^ 0xBCLL];
  HIDWORD(v15) = v25 ^ 0xC;
  LODWORD(v15) = (v25 ^ 0xC0) << 24;
  LOBYTE(v25) = v15 >> 28;
  int v26 = v21 | ((*(unsigned __int8 *)(v22 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF2LL) ^ 0xDFLL)) ^ 0xC0) << 8) | ((v23[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF4LL) ^ 0xAFLL] ^ 0x6D) << 24);
  int v27 = v17[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF1LL) ^ 0x98LL];
  HIDWORD(v15) = v27 ^ 0xC;
  LODWORD(v15) = (v27 ^ 0xC0) << 24;
  unsigned int v28 = v26 & 0xFFFFFF00 | (v15 >> 28);
  LODWORD(v17) = v17[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF5LL) ^ 0xD0LL];
  HIDWORD(v15) = v17 ^ 0xC;
  LODWORD(v15) = (v17 ^ 0xC0) << 24;
  LOBYTE(v17) = v15 >> 28;
  int v29 = v19 | ((*(unsigned __int8 *)(v22 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF6LL) ^ 0x49LL)) ^ 0x4A) << 8) | ((v23[*v9 ^ 0xFELL] ^ 0xB4) << 24);
  int v30 = *(unsigned __int8 *)(v13 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBEBLL) ^ 0xB6LL));
  HIDWORD(v15) = v30 ^ 0x1A;
  LODWORD(v15) = (v30 ^ 0x80) << 24;
  uint64_t v31 = (v15 >> 30) ^ 0x21LL;
  LODWORD(v13) = *(unsigned __int8 *)(v13 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBEFLL) ^ 0xC8LL));
  HIDWORD(v15) = v13 ^ 0x1A;
  LODWORD(v15) = (v13 ^ 0x80) << 24;
  unint64_t v32 = (((*(unsigned __int8 *)(v22 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBEALL) ^ 0xC7LL)) ^ 1LL) << 8) & 0xFFFFFFFF00FFFFFFLL | ((unint64_t)(v24 ^ 0xBDu) << 24) | (v31 << 16) | v25 ^ 0x68LL) ^ 0x75F49EF4;
  unsigned int v33 = v18 | ((*(unsigned __int8 *)(v22 + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBEELL) ^ 0xB7LL)) ^ 0xE1) << 8) & 0xFF00FFFF | (((v15 >> 30) ^ 0x37) << 16) | ((v23[*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBF0LL) ^ 0x18LL] ^ 0xF2) << 24);
  uint64_t v34 = ((unsigned __int16)((((*(unsigned __int8 *)(v22
                                                                   + (*(unsigned __int8 *)(v6 - 0x39E8CCF6252BBBEALL) ^ 0xC7LL)) ^ 1) << 8) | v25 ^ 0x68) ^ 0x9EF4) >> 8);
  int v35 = (char *)*(&off_1004EDED0 + (v8 ^ 0x384)) - 4;
  LODWORD(v23) = (v34 - ((2 * (v32 >> 8)) & 0x12E) - 630217321) ^ *(_DWORD *)&v35[4 * (v34 ^ 0xF5)];
  uint64_t v36 = (uint64_t)*(&off_1004EDED0 + (v8 ^ 0x34F));
  int v37 = *(_DWORD *)(v36 + 4LL * (v24 ^ 0xA2u));
  HIDWORD(v15) = ~v37;
  LODWORD(v15) = v37 ^ 0xAF8BCD8;
  int v38 = v31 ^ 0xDD;
  BOOL v39 = (char *)*(&off_1004EDED0 + v8 - 811) - 8;
  LODWORD(v23) = (v15 >> 2) ^ *(_DWORD *)&v39[4 * v38] ^ ((_DWORD)v23 - ((2 * (_DWORD)v23) & 0xA555BF4) - 2060800518);
  int v40 = (char *)*(&off_1004EDED0 + (v8 ^ 0x319)) - 4;
  unsigned int v237 = v29 & 0xFFFFFF00 | v17 ^ 0x3C;
  unsigned int v41 = *(_DWORD *)&v40[4 * (v25 ^ 0xD9)] ^ v237 ^ ((_DWORD)v23
                                                                   - ((2 * (_DWORD)v23) & 0xA2BAA0D4)
                                                                   - 782413718);
  unsigned int v238 = v28;
  unsigned int v235 = v33;
  int v233 = v41 ^ v28 ^ 0x2789BBD4;
  int v42 = v33 ^ 0xE6 ^ v233;
  LODWORD(v17) = *(_DWORD *)(v36 + 4LL * (((v42 ^ v32) >> 24) ^ 0x21));
  HIDWORD(v15) = ~(_DWORD)v17;
  LODWORD(v15) = v17 ^ 0xAF8BCD8;
  LODWORD(v17) = ((v15 >> 2) - ((2 * (v15 >> 2)) & 0xA2BAA0D4) - 782413718) ^ *(_DWORD *)&v40[4
                                                                                            * ((v42 ^ v32) ^ 0xDE)];
  int v231 = v42 ^ v32;
  unsigned int v234 = v41;
  unsigned int v230 = *(_DWORD *)&v35[4 * (((unsigned __int16)(v42 ^ v32) >> 8) ^ 0x1E)] ^ *(_DWORD *)&v39[4 * (((v42 ^ v32) >> 16) ^ 0x8F)] ^ v41 ^ ((((unsigned __int16)(v42 ^ v32) >> 8) ^ 0xEB) - 630217321 + (~(2 * (((v42 ^ v32) >> 8) ^ 0x4BA6EB)) | 0xFFFFFED1) + 1) ^ ((_DWORD)v17 - ((2 * (_DWORD)v17) & 0xA555BF4) - 2060800518);
  int v43 = v230 ^ 0x76E748E2 ^ v41 ^ v28;
  int v236 = v32;
  int v44 = *(_DWORD *)(v36 + 4LL * (((v43 ^ v32) >> 24) ^ 0xA2));
  HIDWORD(v15) = ~v44;
  LODWORD(v15) = v44 ^ 0xAF8BCD8;
  unsigned int v45 = v43 ^ v32 ^ 0xC84590C6;
  int v46 = *(_DWORD *)&v35[4 * (BYTE1(v45) ^ 0xF5)] ^ *(_DWORD *)&v39[4
                                                                 * (((v43 ^ v32) >> 16) ^ 0x6C)] ^ (BYTE1(v45) - ((v45 >> 7) & 0x12E) - 630217321) ^ ((v15 >> 2) - ((2 * (v15 >> 2)) & 0xA555BF4) - 2060800518);
  int v228 = v43 ^ v32;
  int v229 = v43;
  unsigned int v227 = v230 ^ 0x76E748E2 ^ *(_DWORD *)&v40[4 * ((v43 ^ v32) ^ 0x83)] ^ (v46
                                                                                         - ((2 * v46) & 0xA2BAA0D4)
                                                                                         - 782413718);
  int v226 = v227 ^ 0x2789BBD4 ^ v43;
  int v232 = v42;
  HIDWORD(v225) = v43 ^ v42;
  unsigned int v47 = v226 ^ 0x8EDEEA78 ^ v43 ^ v42;
  int v48 = *(_DWORD *)(v36 + 4LL * (((v47 ^ v45) >> 24) ^ 0x67));
  HIDWORD(v15) = ~v48;
  LODWORD(v15) = v48 ^ 0xAF8BCD8;
  int v49 = (v15 >> 2) ^ *(_DWORD *)&v35[4 * (((unsigned __int16)(v47 ^ v45) >> 8) ^ 0x97)] ^ ((((unsigned __int16)(v47 ^ v45) >> 8) ^ 0x62) - ((2 * (((v47 ^ v45) >> 8) ^ 0xD8B62)) & 0x12E) - 630217321);
  unsigned int v50 = (v49 - ((2 * v49) & 0xA2BAA0D4) - 782413718) ^ *(_DWORD *)&v40[4 * ((v47 ^ v45) ^ 0xE1)];
  int v51 = v227 ^ 0x2789BBD4 ^ *(_DWORD *)&v39[4 * (((v47 ^ v45 ^ 0x2142BA5) >> 16) ^ 0xB6)] ^ (v50 - ((2 * v50) & 0xA555BF4) - 2060800518);
  HIDWORD(v224) = v47 ^ v45;
  LODWORD(v225) = v47;
  HIDWORD(v223) = v51 ^ v226 ^ 0x8EDEEA78;
  LODWORD(v223) = HIDWORD(v223) ^ 0x307C325C ^ v47 ^ 0x5EF1BA37;
  LODWORD(v23) = *(_DWORD *)(v36 + 4LL * (((v223 ^ v47 ^ v45) >> 24) ^ 0xA4));
  HIDWORD(v15) = ~(_DWORD)v23;
  LODWORD(v15) = v23 ^ 0xAF8BCD8;
  LODWORD(v23) = ((v15 >> 2) - ((2 * (v15 >> 2)) & 0xA2BAA0D4) - 782413718) ^ *(_DWORD *)&v40[4
                                                                                            * ((v223 ^ v47 ^ v45) ^ 0x18)];
  unsigned int v52 = v223 ^ v47 ^ v45 ^ 0xCEE37B5D;
  HIDWORD(v222) = v223 ^ v47 ^ v45;
  LODWORD(v224) = v51;
  unsigned int v53 = *(_DWORD *)&v39[4 * (BYTE6(v222) ^ 0xCA)] ^ *(_DWORD *)&v35[4 * (BYTE1(v52) ^ 0xF5)] ^ v51 ^ (BYTE1(v52) - ((v52 >> 7) & 0x12E) - 630217321) ^ 0xD4F2AD1A ^ ((_DWORD)v23 - ((2 * (_DWORD)v23) & 0xA555BF4) - 2060800518);
  unsigned int v54 = v53 ^ ((v47 ^ 0x5EF1BA37) - ((2 * (v47 ^ 0x5EF1BA37)) & 0xA9E55A34) - 722293478);
  LODWORD(v17) = *(_DWORD *)(v36 + 4LL * (((v54 ^ v52) >> 24) ^ 0x70));
  HIDWORD(v15) = ~(_DWORD)v17;
  LODWORD(v15) = v17 ^ 0xAF8BCD8;
  LODWORD(v17) = ((v15 >> 2) - ((2 * (v15 >> 2)) & 0xA555BF4) - 2060800518) ^ *(_DWORD *)&v39[4
                                                                                            * (((v54 ^ v52 ^ 0xF3443494) >> 16) ^ 0xE4)];
  LODWORD(v17) = ((_DWORD)v17 - 782413718 + (~(2 * (_DWORD)v17) | 0x5D455F2B) + 1) ^ *(_DWORD *)&v40[4 * ((v53 ^ ((v47 ^ 0x37) - ((2 * (v47 ^ 0x37)) & 0x34) + 26) ^ v52) ^ 0x91)];
  LODWORD(v221) = v54 ^ v52;
  int v55 = v54 ^ v52 ^ 0x1A89BBD4;
  LODWORD(v17) = ((_DWORD)v17 - ((2 * (_DWORD)v17) & 0xB4DF4B2E) - 630217321) ^ *(_DWORD *)&v35[4 * (BYTE1(v55) ^ 0xF5)];
  int v56 = v7;
  unsigned int v57 = v53 ^ BYTE1(v55) ^ ((_DWORD)v17 - ((2 * (_DWORD)v17) & 0xA9E55A34) - 722293478);
  HIDWORD(v221) = v54;
  LODWORD(v222) = v53;
  LODWORD(v220) = v53 ^ ((HIDWORD(v223) ^ 0x307C325C) - ((2 * (HIDWORD(v223) ^ 0x307C325C)) & 0xA9E55A34) - 722293478);
  HIDWORD(v219) = v57 ^ v220;
  LODWORD(v17) = v57 ^ v220 ^ 0xE6F58988;
  unsigned int v58 = v17 ^ v54;
  unsigned int v59 = v17 ^ v54 ^ v55;
  int v60 = *(_DWORD *)(v36 + 4LL * (HIBYTE(v59) ^ 0x43));
  HIDWORD(v15) = ~v60;
  LODWORD(v15) = v60 ^ 0xAF8BCD8;
  int v61 = *(_DWORD *)&v35[4 * (((unsigned __int16)(v59 ^ 0x7ABE) >> 8) ^ 0xF5)] ^ *(_DWORD *)&v39[4 * (((v59 ^ 0x4D501F31) >> 16) ^ 0xE2)] ^ (((unsigned __int16)(v59 ^ 0x7ABE) >> 8) - (((v59 ^ 0x299B7ABE) >> 7) & 0x12E) - 630217321) ^ ((v15 >> 2) - ((2 * (v15 >> 2)) & 0xA555BF4) - 2060800518);
  HIDWORD(v220) = v57;
  unsigned int v62 = v57 ^ *(_DWORD *)&v40[4 * (v59 ^ 0xFB)] ^ (v61 - ((2 * v61) & 0xA2BAA0D4) - 782413718);
  HIDWORD(v217) = v62 ^ v17;
  LODWORD(v17) = v62 ^ v17 ^ 0x5BF36347;
  LODWORD(v219) = v58;
  LODWORD(v217) = v17 ^ v58;
  LODWORD(v23) = v17 ^ v58 ^ 0x2745D0FF;
  unsigned int v63 = v23 ^ v59 ^ 0x299B7ABE ^ 0x3DCC6B2B;
  int v64 = (BYTE1(v63) - ((v63 >> 7) & 0x12E) - 630217321) ^ *(_DWORD *)&v35[4 * (BYTE1(v63) ^ 0xF5)];
  unsigned int v65 = (v64 - ((2 * v64) & 0xA2BAA0D4) - 782413718) ^ *(_DWORD *)&v40[4
                                                                     * ((~(v17 ^ v58) ^ v59 ^ 0xBE) ^ 0x6E)];
  HIDWORD(v2memset((void *)(v1 - 204), 50, 16) = v23 ^ v59 ^ 0x299B7ABE;
  int v66 = *(_DWORD *)(v36 + 4LL * (HIBYTE(HIDWORD(v216)) ^ 0x57u));
  HIDWORD(v15) = ~v66;
  LODWORD(v15) = v66 ^ 0xAF8BCD8;
  unint64_t v218 = __PAIR64__(v59, v62);
  LODWORD(v2memset((void *)(v1 - 204), 50, 16) = (v15 >> 2) ^ *(_DWORD *)&v39[4 * (((HIDWORD(v216) ^ 0x516EF336u) >> 16) ^ 0x8B)] ^ v62 ^ (v65 - ((2 * v65) & 0xA555BF4) - 2060800518);
  HIDWORD(v215) = v216 ^ 0x930000ED ^ v17;
  LODWORD(v215) = HIDWORD(v215) ^ 0x8D06EA22 ^ v23;
  int v67 = *(_DWORD *)(v36 + 4LL * (((v215 ^ v63) >> 24) ^ 0x39));
  HIDWORD(v15) = ~v67;
  LODWORD(v15) = v67 ^ 0xAF8BCD8;
  HIDWORD(v214) = v215 ^ v63;
  LODWORD(v32) = v215 ^ v63 ^ 0x53DEAA41;
  int v68 = *(_DWORD *)&v40[4 * ((v215 ^ v63) ^ 4)] ^ *(_DWORD *)&v35[4 * (BYTE1(v32) ^ 0xF5)] ^ 0xB32F5FD ^ (v15 >> 2);
  int v69 = *(_DWORD *)&v39[4 * (((v215 ^ v63 ^ 0x9289BB39) >> 16) ^ 0x7E)] ^ v216 ^ 0x930000ED ^ BYTE1(v32) ^ 0xE1715EEC ^ (v68 - ((2 * v68) & 0xA555BF4) - 2060800518);
  unsigned int v70 = (HIDWORD(v215) ^ 0x8D06EA22) - ((2 * (HIDWORD(v215) ^ 0x8D06EA22)) & 0xC2E2BDD8);
  LODWORD(v23) = v69 ^ ((_DWORD)v23 - ((2 * (_DWORD)v23) & 0xC2E2BDD8) - 512663828);
  LODWORD(v36) = *(_DWORD *)(v36 + 4LL * (((v23 ^ v32) >> 24) ^ 0x44));
  HIDWORD(v15) = ~(_DWORD)v36;
  LODWORD(v15) = v36 ^ 0xAF8BCD8;
  int v71 = *(_DWORD *)&v35[4
                      * (((unsigned __int16)((unsigned __int16)v23 ^ WORD2(v214) ^ 0xAA41) >> 8) ^ 0xFD)] ^ *(_DWORD *)&v40[4 * (v23 ^ BYTE4(v214) ^ 0x41 ^ 0xC4)] ^ ((((unsigned __int16)((unsigned __int16)v23 ^ WORD2(v214) ^ 0xAA41) >> 8) ^ 8) - (((v23 ^ v32) >> 7) & 0x12E) - 630217321) ^ ((v15 >> 2) - ((2 * (v15 >> 2)) & 0xA2BAA0D4) - 782413718);
  HIDWORD(v213) = v23 ^ v32 ^ 0xF2402859;
  LODWORD(v17) = (v71 - ((2 * v71) & 0xA555BF4) - 2060800518) ^ *(_DWORD *)&v39[4
                                                                              * (((v23 ^ v32) >> 16) ^ 0x16)];
  LODWORD(v34) = (_DWORD)v17 - ((2 * (_DWORD)v17) & 0xC2E2BDD8);
  uint64_t v72 = (uint64_t)*(&off_1004EDED0 + (v8 ^ 0x3BC));
  int v73 = (char *)*(&off_1004EDED0 + v8 - 920) - 4;
  uint64_t v74 = (uint64_t)*(&off_1004EDED0 + v8 - 864);
  int v75 = *(unsigned __int8 *)(v74 + (*(unsigned __int8 *)(v10 - 109) ^ 0xA5LL));
  HIDWORD(v15) = v75 ^ 7;
  LODWORD(v15) = v75 << 24;
  uint64_t v76 = (uint64_t)*(&off_1004EDED0 + (v8 ^ 0x3BE));
  uint64_t v210 = v74;
  uint64_t v212 = v72;
  unsigned int v77 = (*(unsigned __int8 *)(v74 + (*(unsigned __int8 *)(v10 - 105) ^ 0x28LL)) ^ 0xD) & 0xFFFF00FF | ((((*(_BYTE *)(v10 - 106) ^ 0xAC) + *(_BYTE *)(v72 + (*(unsigned __int8 *)(v10 - 106) ^ 0xA3LL)) + 87) ^ 0xF6) << 8) | ((*(unsigned __int8 *)(v76 + (*(unsigned __int8 *)(v10 - 108) ^ 0xB2LL)) ^ 0x2E) << 24);
  uint64_t v209 = v76;
  LODWORD(v17) = (*(unsigned __int8 *)(v74 + (*(unsigned __int8 *)(v10 - 97) ^ 0x7BLL)) ^ 0x78) & 0xFFFF00FF | ((((*(_BYTE *)(v10 - 98) ^ 0xD0) + *(_BYTE *)(v72 + (*(unsigned __int8 *)(v10 - 98) ^ 0xDFLL)) + 87) ^ 0xE4) << 8) | ((v73[*(unsigned __int8 *)(v10 - 99) ^ 0xAALL] ^ 0xE2) << 16) | ((*(unsigned __int8 *)(v76 + (*(unsigned __int8 *)(v10 - 100) ^ 0x45LL)) ^ 0x16) << 24);
  int v211 = v73;
  unsigned int v78 = (((((v15 >> 30) ^ 0xDB) >> 2) | (((v15 >> 30) ^ 0xDB) << 6)) | ((v73[*(unsigned __int8 *)(v10 - 111) ^ 0x7ALL] ^ 0x81) << 16) | ((*(unsigned __int8 *)(v76 + (*(unsigned __int8 *)(v10 - 112) ^ 0x78LL)) ^ 0x2C) << 24) | (((*(_BYTE *)(v72 + (*(unsigned __int8 *)(v10 - 110) ^ 0x5DLL)) + (*(_BYTE *)(v10 - 110) ^ 0x52) + 87) ^ 0x5D) << 8)) ^ 0xAE30F304;
  LODWORD(v72) = ((*(unsigned __int8 *)(v74 + (*(unsigned __int8 *)(v10 - 101) ^ 0x60LL)) ^ 0xCC) & 0xFFFF00FF | ((v73[*(unsigned __int8 *)(v10 - 103) ^ 5LL] ^ 0xD0) << 16) | (((*(_BYTE *)(v72 + (*(unsigned __int8 *)(v10 - 102) ^ 4LL)) + (*(_BYTE *)(v10 - 102) ^ 0xB) + 87) ^ 0x33) << 8) | ((*(unsigned __int8 *)(v76 + (*(unsigned __int8 *)(v10 - 104) ^ 0x1CLL)) ^ 0xD9) << 24)) ^ 0xF27FA7C8;
  int v79 = (v77 | ((v73[*(unsigned __int8 *)(v10 - 107) ^ 0x27LL] ^ 0xB4) << 16)) ^ 0xF6784D9;
  LODWORD(v40) = v17 ^ 0x8663AEDE;
  LODWORD(v208) = v56 + 9013377;
  int v80 = *(_DWORD *)(v10 - 116);
  HIDWORD(v207) = v80 & 0xBC56885E;
  LODWORD(v207) = v80 ^ 0x754;
  HIDWORD(v206) = v69 ^ (v70 - 512663828);
  LODWORD(v214) = v69;
  LODWORD(v206) = (v34 - 512663828) ^ v69;
  HIDWORD(v205) = v80 ^ 0x711;
  LODWORD(v205) = v80 ^ 0x7F2;
  LODWORD(v213) = v23 ^ 0x626A2240;
  HIDWORD(v208) = (v70 - 512663828) ^ 0x3DC8BA5D ^ (v34 - 512663828);
  HIDWORD(a6) = HIDWORD(v208) ^ v23 ^ 0x626A2240;
  *(void *)(v10 - 200) = 7LL;
  uint64_t v81 = a1[7];
  *(void *)(v10 - 152) = 12LL;
  LODWORD(v17) = *(unsigned __int8 *)(v74 + (v81 ^ 0x41));
  uint64_t v82 = a1[12] ^ 0x60LL;
  uint64_t v83 = ((v80 - 1525) | 0x424) ^ 0x57Cu;
  *(void *)(v10 - 144) = v83;
  *(void *)(v10 - 128) = 1LL;
  int v84 = *(unsigned __int8 *)(v209 + v82) ^ 0xAD;
  int v85 = *(unsigned __int8 *)(v209 + (a1[v83] ^ 0xC1LL)) ^ 0x19;
  LODWORD(v82) = v73[a1[1] ^ 0x66LL] ^ 0x6D;
  *(void *)(v10 - 136) = 15LL;
  LODWORD(v35) = (_DWORD)v82 << 16;
  uint64_t v86 = a1[15] ^ 0xE9LL;
  *(void *)(v10 - 160) = 11LL;
  LODWORD(v86) = *(unsigned __int8 *)(v74 + v86) ^ 0xDA;
  LODWORD(v73) = v86 | (v84 << 24);
  int v87 = *(unsigned __int8 *)(v74 + (a1[11] ^ 0xC3LL));
  *(void *)(v10 - 176) = 0LL;
  unsigned int v88 = v35 | ((*(unsigned __int8 *)(v209 + (*a1 ^ 0x30LL)) ^ 0x9D) << 24);
  LOBYTE(v35) = v87 ^ 0x10;
  *(void *)(v10 - 168) = 2LL;
  unsigned int v89 = v88 & 0xFFFF00FF | (((*(_BYTE *)(v212 + (a1[2] ^ 0xC0LL)) + (a1[2] ^ 0xCF) + 87) ^ 0xF9) << 8);
  *(void *)(v10 - 232) = 4LL;
  *(void *)(v10 - 2memset((void *)(v1 - 204), 50, 16) = 9LL;
  int v90 = v211[a1[9] ^ 0x5DLL] ^ 0xBE;
  *(void *)(v10 - 192) = 10LL;
  int v91 = (v90 << 16) | (((*(_BYTE *)(v212 + (a1[10] ^ 0xD5LL)) + (a1[10] ^ 0xDA) + 87) ^ 0xCF) << 8) | v87 ^ 0x10 | (v85 << 24);
  *(void *)(v10 - 184) = 14LL;
  uint64_t v92 = a1[14];
  LOBYTE(v85) = *(_BYTE *)(v212 + (v92 ^ 0xE4));
  *(void *)(v10 - 224) = 5LL;
  LODWORD(v74) = (v85 + (v92 ^ 0xEB) - 41);
  *(void *)(v10 - 208) = 3LL;
  LODWORD(v92) = *(unsigned __int8 *)(v210 + (a1[3] ^ 0xDCLL)) ^ 0xCE | v89;
  *(void *)(v10 - 240) = 13LL;
  LODWORD(v17) = v17 ^ 0xA;
  unsigned int v93 = v17 | ((*(unsigned __int8 *)(v209 + (a1[4] ^ 0xFCLL)) ^ 0x23) << 24);
  LODWORD(v73) = ((_DWORD)v74 << 8) | ((v211[a1[13] ^ 0x92LL] ^ 0x83) << 16) | v73;
  LODWORD(v74) = (v211[a1[5] ^ 0xA9LL] ^ 0x50) << 16;
  *(void *)(v10 - 248) = 6LL;
  int v94 = v91 + 1271275121 - 2 * (v91 & 0x4BC61E75 ^ v35 & 4);
  LODWORD(v35) = v78 ^ v237 ^ (v92 - ((2 * v92) & 0x2F12947A) + 394873405);
  unsigned int v95 = v79 ^ v238 ^ ((v74 & 0xFFFF00FF | (((*(_BYTE *)(v212 + (a1[6] ^ 0x4FLL)) + (a1[6] ^ 0x40) + 87) ^ 0xB7) << 8) | v93)
                    - 2
  LODWORD(v17) = v40 ^ v236 ^ ((_DWORD)v73 + 1071257447 - 2
                                                                      * (v73 & 0x3FDA1777 ^ v86 & 0x10));
  unsigned int v96 = v72 ^ v235 ^ v94;
  int v97 = (char *)*(&off_1004EDED0 + (v80 ^ 0x754)) - 8;
  LODWORD(v72) = *(_DWORD *)&v97[4 * (HIBYTE(v96) ^ 0x3F)];
  HIDWORD(v15) = ~(_DWORD)v72;
  LODWORD(v15) = v72 ^ 0x1DE9534E;
  uint64_t v98 = (uint64_t)*(&off_1004EDED0 + v80 - 1765);
  LODWORD(v74) = (v15 >> 1) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v17) ^ 0x34u)) ^ ((BYTE2(v17) ^ 0x68)
                                                                             - 114727250
                                                                             - 2
                                                                             * (((v17 >> 16) ^ 0xB768) & 0xBE ^ (v17 >> 16) & 0x10));
  unsigned int v99 = (char *)*(&off_1004EDED0 + (int)(v80 & 0xBC56885E)) - 4;
  unsigned int v100 = *(_DWORD *)&v99[4 * (v96 ^ 0xC6)] ^ ((BYTE2(v35) ^ 0xD5)
                                                             - 114727250
                                                             - ((2 * ((v35 >> 16) ^ 0x6CD5)) & 0x15C)) ^ ((v96 ^ 0xAB) + 1069380434 + ((2 * (v96 ^ 0xAB) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v35) ^ 0x89u));
  unsigned int v101 = *(_DWORD *)(v98 + 4LL * (BYTE2(v95) ^ 0x8Cu)) ^ *(_DWORD *)&v99[4 * (v17 ^ 0xB6)] ^ ((v17 ^ 0xDB) + 1069380434 + ((2 * (v17 ^ 0xDB) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ ((BYTE2(v95) ^ 0xD0) - 114727250 - ((2 * (HIWORD(v95) ^ 0xC8D0)) & 0x15C));
  int v102 = *(_DWORD *)&v97[4 * (HIBYTE(v95) ^ 0xC8)];
  HIDWORD(v15) = ~v102;
  LODWORD(v15) = v102 ^ 0x1DE9534E;
  LODWORD(v92) = v101 + 1312414243 - ((2 * v101) & 0x9C73B446);
  unsigned int v103 = v100 + 1312414243 - ((2 * v100) & 0x9C73B446);
  LODWORD(v73) = *(_DWORD *)&v97[4 * ((v35 >> 24) ^ 0x6C)];
  LODWORD(v86) = ((BYTE2(v96) ^ 0xAD) - 114727250 - ((2 * (HIWORD(v96) ^ 0x3FAD)) & 0x15C)) ^ *(_DWORD *)&v99[4 * (v35 ^ 0x1C)] ^ ((v35 ^ 0x71) + 1069380434 + ((2 * (v35 ^ 0x71) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v96) ^ 0xF1u)) ^ (v15 >> 1);
  HIDWORD(v15) = ~(_DWORD)v73;
  LODWORD(v15) = v73 ^ 0x1DE9534E;
  LODWORD(v73) = v15 >> 1;
  int v104 = *(_DWORD *)&v97[4 * ((v17 >> 24) ^ 0xB7)];
  HIDWORD(v15) = ~v104;
  LODWORD(v15) = v104 ^ 0x1DE9534E;
  uint64_t v105 = (uint64_t)*(&off_1004EDED0 + v80 - 1760);
  unsigned int v106 = (v95 ^ 0x10) + 1069380434 + ((2 * (v95 ^ 0x10) + 254) & 0x1A4 ^ 0xFFC2FFFF);
  LODWORD(v74) = *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0xDEu)) ^ v232 ^ *(_DWORD *)&v99[4
                                                                                       * (v95 ^ 0x7D)] ^ (v74 + 1312414243 - ((2 * v74) & 0x9C73B446));
  int v107 = *(_DWORD *)(v105 + 4LL * (BYTE1(v17) ^ 0x66u));
  LODWORD(v17) = v103 ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v95) ^ 0x2Fu)) ^ (v15 >> 1);
  LODWORD(v35) = (_DWORD)v17 - ((2 * (_DWORD)v17) & 0x3E5B35E);
  unsigned int v108 = v74 ^ v106;
  LODWORD(v17) = *(_DWORD *)(v105 + 4LL * (BYTE1(v96) ^ 0x29u)) ^ v234 ^ v73 ^ v92;
  LODWORD(v86) = v107 ^ v233 ^ (v86 + 1312414243 - ((2 * v86) & 0x9C73B446));
  LODWORD(v73) = *(_DWORD *)&v97[4 * ((v74 ^ ~v106) >> 24)];
  HIDWORD(v15) = ~(_DWORD)v73;
  LODWORD(v15) = v73 ^ 0x1DE9534E;
  LODWORD(v73) = v15 >> 1;
  LODWORD(v74) = *(_DWORD *)&v97[4 * ((v17 >> 24) ^ 0x91)];
  HIDWORD(v15) = ~(_DWORD)v74;
  LODWORD(v15) = v74 ^ 0x1DE9534E;
  LODWORD(v74) = v15 >> 1;
  int v109 = *(_DWORD *)&v97[4 * (BYTE3(v86) ^ 0xA3)];
  HIDWORD(v15) = ~v109;
  LODWORD(v15) = v109 ^ 0x1DE9534E;
  int v110 = v74 ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v86) ^ 0xF0u)) ^ ((BYTE2(v86) ^ 0xAC)
                                                              - 114727250
                                                              - 2 * ((WORD1(v86) ^ 0xA3AC) & 0xBF ^ WORD1(v86) & 0x11));
  LODWORD(v74) = (v15 >> 1) ^ *(_DWORD *)&v99[4 * (v17 ^ 0x7B)] ^ *(_DWORD *)(v98
                                                                                             + 4LL
                                                                                             * (BYTE2(v108) ^ 0x15u)) ^ ((BYTE2(v108) ^ 0x49) - 114727250 - ((2 * (HIWORD(v108) ^ 0xFF49)) & 0x15C)) ^ ((v17 ^ 0x16) + 1069380434 + ((2 * (v17 ^ 0x16) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  LODWORD(v92) = v74 + 1312414243 - ((2 * v74) & 0x9C73B446);
  LODWORD(v35) = ((_DWORD)v35 + 32692655) ^ v231;
  unsigned int v111 = (v110 + 1312414243 - ((2 * v110) & 0x9C73B446)) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v108) ^ 0x2Cu));
  LODWORD(v73) = v73 ^ *(_DWORD *)&v99[4 * (v86 ^ 3)] ^ ((v86 ^ 0x6E)
                                                                                      + 1069380434
                                                                                      + ((2
  LODWORD(v74) = *(_DWORD *)(v98 + 4LL * (BYTE2(v17) ^ 0x2Eu)) ^ ((BYTE2(v17) ^ 0x72)
                                                                - 114727250
                                                                - ((2 * ((v17 >> 16) ^ 0x9172)) & 0x15C));
  int v112 = *(_DWORD *)&v97[4 * ((v35 >> 24) ^ 0x6F)];
  HIDWORD(v15) = ~v112;
  LODWORD(v15) = v112 ^ 0x1DE9534E;
  LODWORD(v86) = ((v108 ^ 0xFC)
                + 1069380434
                + ((2 * (v108 ^ 0xFC) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v105
                                                                                                 + 4LL
                                                                                                 * (BYTE1(v86) ^ 0xBDu)) ^ *(_DWORD *)&v99[4 * (v108 ^ 0x91)] ^ (v74 + 1312414243 - ((2 * v74) & 0x9C73B446)) ^ (v15 >> 1);
  unsigned int v113 = ((v35 ^ 0xE2) - 1726037377) ^ v230 ^ *(_DWORD *)&v99[4 * (v35 ^ 0x8F)] ^ (v111 - 1499549486 - ((2 * v111) & 0x4D3D61A4));
  LODWORD(v17) = *(_DWORD *)(v105 + 4LL * (BYTE1(v17) ^ 0x57u)) ^ HIDWORD(v225) ^ ((_DWORD)v73
                                                                                 + 1312414243
                                                                                 - ((2 * (_DWORD)v73) & 0x9C73B446));
  LODWORD(v86) = (v86 - ((2 * v86) & 0x80116EF0) - 1073170568) ^ v228;
  LODWORD(v35) = *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0x42u)) ^ v229 ^ v92;
  int v114 = *(_DWORD *)&v97[4 * (BYTE3(v86) ^ 0x2D)];
  HIDWORD(v15) = ~v114;
  LODWORD(v15) = v114 ^ 0x1DE9534E;
  LODWORD(v74) = ((v35 ^ 0xA1)
                + 1069380434
                + ((2 * (v35 ^ 0xA1) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v35 ^ 0xCC)];
  int v115 = *(_DWORD *)(v98 + 4LL * (BYTE2(v113) ^ 0xDBu)) ^ ((BYTE2(v113) ^ 0x87)
                                                         - 114727250
                                                         - 2 * ((HIWORD(v113) ^ 0x3A87) & 0xBE ^ HIWORD(v113) & 0x10)) ^ (v15 >> 1);
  LODWORD(v74) = (v74 + 1312414243 - ((2 * v74) & 0x9C73B446)) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v113) ^ 0xDEu));
  LODWORD(v73) = ((v113 ^ 0x9E)
                + 1069380434
                + ((2 * (v113 ^ 0x9E) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v113 ^ 0xF3)];
  unsigned int v116 = (v115 + 1312414243 - ((2 * v115) & 0x9C73B446)) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0x57u));
  int v117 = ((v17 ^ 0x740CBC3A) >> 16);
  LODWORD(v92) = v117 - 114727250 - (((v17 ^ 0x740CBC3A) >> 15) & 0x15C);
  int v118 = *(_DWORD *)&v97[4 * ((v17 >> 24) ^ 0x37)];
  HIDWORD(v15) = ~v118;
  LODWORD(v15) = v118 ^ 0x1DE9534E;
  int v119 = v15 >> 1;
  int v120 = *(_DWORD *)&v97[4 * (HIBYTE(v113) ^ 0x3A)];
  HIDWORD(v15) = ~v120;
  LODWORD(v15) = v120 ^ 0x1DE9534E;
  int v121 = BYTE2(v35) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v35) ^ 0xF6u)) ^ *(_DWORD *)(v105
                                                                                + 4LL
                                                                                * ((unsigned __int16)((unsigned __int16)v17 ^ 0xBC3A) >> 8)) ^ 0xB710BC27 ^ (v15 >> 1);
  unsigned int v122 = ((v86 ^ 0x68) - 1726037377) ^ v227 ^ *(_DWORD *)&v99[4 * (v86 ^ 5)] ^ (v121 - 1499549486 - ((2 * v121) & 0x4D3D61A4));
  LODWORD(v17) = ((v17 ^ 0x3A) - 1726037377) ^ HIDWORD(v224) ^ *(_DWORD *)&v99[4
                                                                                              * (v17 ^ 0x57)] ^ (v116 - 1499549486 - ((2 * v116) & 0x4D3D61A4));
  LODWORD(v35) = *(_DWORD *)&v97[4 * ((v35 >> 24) ^ 0x7C)];
  HIDWORD(v15) = ~(_DWORD)v35;
  LODWORD(v15) = v35 ^ 0x1DE9534E;
  unsigned int v123 = *(_DWORD *)(v98 + 4LL * (BYTE2(v86) ^ 0x8Eu)) ^ v225 ^ BYTE2(v86) ^ v119 ^ (v74
                                                                                   - 114727250
                                                                                   - ((2 * v74) & 0xF252CD5C));
  LODWORD(v35) = *(_DWORD *)(v105 + 4LL * (BYTE1(v86) ^ 0x57u)) ^ v226 ^ v92 ^ *(_DWORD *)(v98 + 4LL * (v117 ^ 0x5Cu)) ^ (v15 >> 1) ^ ((_DWORD)v73 + 1312414243 - ((2 * (_DWORD)v73) & 0x9C73B446));
  LODWORD(v86) = v123 ^ 0xFA64A511;
  LODWORD(v74) = ((v123 ^ 0x11) + 1069380434 + ((2 * (v123 ^ 0xFA64A511) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v123 ^ 0x7C)];
  LODWORD(v73) = *(_DWORD *)&v97[4 * (HIBYTE(v122) ^ 0x5B)];
  int v124 = v74 + 1312414243 - ((2 * v74) & 0x9C73B446);
  HIDWORD(v15) = ~(_DWORD)v73;
  LODWORD(v15) = v73 ^ 0x1DE9534E;
  int v125 = *(_DWORD *)&v97[4 * ((v17 >> 24) ^ 0x28)];
  LODWORD(v74) = (v15 >> 1) ^ *(_DWORD *)&v99[4 * (v17 ^ 0x1F)];
  HIDWORD(v15) = ~v125;
  LODWORD(v15) = v125 ^ 0x1DE9534E;
  LODWORD(v73) = v15 >> 1;
  int v126 = *(_DWORD *)&v97[4 * (HIBYTE(v123) ^ 0xB9)];
  HIDWORD(v15) = ~v126;
  LODWORD(v15) = v126 ^ 0x1DE9534E;
  int v127 = v15 >> 1;
  LODWORD(v74) = v74 ^ ((v17 ^ 0x72)
                      + 1069380434
                      + ((2 * (v17 ^ 0x72) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  int v128 = *(_DWORD *)&v97[4 * ((v35 >> 24) ^ 0xB4)];
  HIDWORD(v15) = ~v128;
  LODWORD(v15) = v128 ^ 0x1DE9534E;
  unsigned int v129 = v127 ^ *(_DWORD *)&v99[4 * (v35 ^ 0x8B)] ^ ((v35 ^ 0xE6)
                                                                    + 1069380434
                                                                    + ((2 * (v35 ^ 0xE6) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  int v130 = BYTE2(v122) ^ 0x95;
  int v131 = v130 - 114727250 - ((2 * (HIWORD(v122) ^ 0x5B95)) & 0x15C);
  LODWORD(v83) = v122;
  unsigned int v132 = (v122 ^ 0xF4) + 1069380434 + ((2 * (v122 ^ 0xF4) + 254) & 0x1A4 ^ 0xFFC2FFFF);
  unsigned int v133 = ((BYTE2(v17) ^ 0x14)
        - 114727250
        - 2 * (((v17 >> 16) ^ 0x2814) & 0xAF ^ (v17 >> 16) & 1)) ^ v223 ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v122) ^ 0x1Fu)) ^ (v129 + 1312414243 - ((2 * v129) & 0x9C73B446)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v17) ^ 0x48u));
  unsigned int v134 = *(_DWORD *)(v105 + 4LL * BYTE1(v86)) ^ v224 ^ ((BYTE2(v35) ^ 0x59)
                                                      - 114727250
                                                      - ((2 * ((v35 >> 16) ^ 0xB459)) & 0x15C)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v35) ^ 5u)) ^ (v74 + 1312414243 - ((2 * v74) & 0x9C73B446));
  LODWORD(v86) = (BYTE2(v86) - 114727250 - ((v86 >> 15) & 0x15C)) ^ HIDWORD(v223) ^ *(_DWORD *)&v99[4 * (v83 ^ 0x99)] ^ v132 ^ ((v15 >> 1) + 1312414243 - ((2 * (v15 >> 1)) & 0x9C73B446)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v86) ^ 0x5Cu)) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v17) ^ 0x12u));
  LODWORD(v35) = *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0x34u)) ^ HIDWORD(v222) ^ v131 ^ *(_DWORD *)(v98 + 4LL * (v130 ^ 0x5Cu)) ^ v124 ^ v73;
  LODWORD(v17) = *(_DWORD *)&v97[4 * ((v35 >> 24) ^ 0xEB)];
  HIDWORD(v15) = ~(_DWORD)v17;
  LODWORD(v15) = v17 ^ 0x1DE9534E;
  LODWORD(v17) = (v15 >> 1) + 1312414243 - ((2 * (v15 >> 1)) & 0x9C73B446);
  unsigned int v135 = ((BYTE2(v86) ^ 0x81) - 114727250 - ((2 * (WORD1(v86) ^ 0x1481)) & 0x15C)) ^ *(_DWORD *)(v98
                                                                                               + 4LL
                                                                                               * (BYTE2(v86) ^ 0xDDu));
  unsigned int v136 = ((v86 ^ 0x51) + 1069380434 + ((2 * (v86 ^ 0x51) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v86 ^ 0x3C)];
  LODWORD(v74) = *(_DWORD *)(v98 + 4LL * (BYTE2(v133) ^ 0xDBu)) ^ ((BYTE2(v133) ^ 0x87)
                                                                 - 114727250
                                                                 - ((2 * (HIWORD(v133) ^ 0x7787)) & 0x15C));
  unsigned int v137 = *(_DWORD *)(v98 + 4LL * (((v35 ^ 0xA87CE98B) >> 16) ^ 0x5Cu)) ^ ((v35 ^ 0xA87CE98B) >> 16) ^ (v136 - 114727250 - ((2 * v136) & 0xF252CD5C));
  int v138 = *(_DWORD *)&v97[4 * (BYTE3(v86) ^ 0x14)];
  HIDWORD(v15) = ~v138;
  LODWORD(v15) = v138 ^ 0x1DE9534E;
  int v139 = v15 >> 1;
  int v140 = *(_DWORD *)&v97[4 * (HIBYTE(v134) ^ 0x9A)];
  HIDWORD(v15) = ~v140;
  LODWORD(v15) = v140 ^ 0x1DE9534E;
  int v141 = ((v35 ^ 0x8B)
        + 1069380434
        + ((2 * (v35 ^ 0xA87CE98B) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)(v105
                                                                                           + 4LL * (BYTE1(v133) ^ 0xDEu)) ^ *(_DWORD *)&v99[4 * (v35 ^ 0xE6)] ^ (v135 + 1312414243 - ((2 * v135) & 0x9C73B446)) ^ (v15 >> 1);
  int v142 = *(_DWORD *)&v97[4 * (HIBYTE(v133) ^ 0x77)];
  HIDWORD(v15) = ~v142;
  LODWORD(v15) = v142 ^ 0x1DE9534E;
  LODWORD(v17) = *(_DWORD *)(v105 + 4LL * (BYTE1(v86) ^ 0x34u)) ^ v221 ^ ((BYTE2(v134) ^ 0xE9)
                                                                        - 114727250
                                                                        - ((2 * (HIWORD(v134) ^ 0x9AE9)) & 0x15C)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v134) ^ 0xB5u)) ^ ((v133 ^ 0x9E) + 1069380434 + ((2 * (v133 ^ 0x9E) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ v17 ^ *(_DWORD *)&v99[4 * (v133 ^ 0xF3)];
  LODWORD(v83) = *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0xBu)) ^ v220 ^ v139 ^ ((v134 ^ 0xA8)
                                                                              + 1069380434
  unsigned int v143 = *(_DWORD *)(v105 + 4LL * (BYTE1(v134) ^ 0x2Du)) ^ HIDWORD(v221) ^ (v15 >> 1) ^ (v137
                                                                                       + 1312414243
                                                                                       - ((2 * v137) & 0x9C73B446));
  LODWORD(v86) = (v141 - 722293478 - ((2 * v141) & 0xA9E55A34)) ^ v222;
  int v144 = *(_DWORD *)&v97[4 * (BYTE3(v83) ^ 0x6D)];
  HIDWORD(v15) = ~v144;
  LODWORD(v15) = v144 ^ 0x1DE9534E;
  int v145 = v15 >> 1;
  unsigned int v146 = *(_DWORD *)&v97[4 * (BYTE3(v86) ^ 0xFD)];
  unsigned int v147 = *(_DWORD *)(v98 + 4LL * (((v83 ^ 0x2E0E654A) >> 16) ^ 0x5Cu)) ^ (~v146 << 31) ^ (v146 >> 1) ^ (((v83 ^ 0x2E0E654A) >> 16) - 114727250 - (((v83 ^ 0x2E0E654A) >> 15) & 0x15C)) ^ 0xEF4A9A7;
  int v148 = ((v83 ^ 0x4A) + 1069380434 + ((2 * (v83 ^ 0x2E0E654A) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v83 ^ 0x27)];
  LODWORD(v73) = v147 + 1312414243 - ((2 * v147) & 0x9C73B446);
  int v149 = *(_DWORD *)&v97[4 * (HIBYTE(v143) ^ 0xAE)];
  HIDWORD(v15) = ~v149;
  LODWORD(v15) = v149 ^ 0x1DE9534E;
  int v150 = (v15 >> 1) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v86) ^ 0xA4u)) ^ (v148 + 1312414243 - ((2 * v148) & 0x9C73B446));
  LODWORD(v92) = v150 - 114727250 - ((2 * v150) & 0xF252CD5C);
  unsigned int v151 = *(_DWORD *)(v98 + 4LL * (BYTE2(v143) ^ 0x3Au)) ^ v145 ^ *(_DWORD *)&v99[4 * (v86 ^ 0x4D)] ^ ((v86 ^ 0x20) + 1069380434 + ((2 * (v86 ^ 0x20) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ ((BYTE2(v143) ^ 0x66) - 114727250 - 2 * ((HIWORD(v143) ^ 0xAE66) & 0xAF ^ HIWORD(v143) & 1));
  LODWORD(v35) = ((v143 ^ 0xB3)
                - 413623133
                + ((2 * (v143 ^ 0xB3) + 126) & 0x46 ^ 0xEFCE7BFF)) ^ *(_DWORD *)(v105
                                                                                                + 4LL
                                                                                                * (BYTE1(v83) ^ 0x65u));
  LODWORD(v35) = ((_DWORD)v35 - 1499549486 - ((2 * (_DWORD)v35) & 0x4D3D61A4)) ^ *(_DWORD *)&v99[4
                                                                                               * (v143 ^ 0xDE)];
  LODWORD(v86) = *(_DWORD *)(v98 + 4LL * (BYTE2(v86) ^ 0x40u)) ^ ((BYTE2(v86) ^ 0x1C)
                                                                - 114727250
                                                                - ((2 * (WORD1(v86) ^ 0xFD1C)) & 0x15C));
  LODWORD(v86) = (v86 ^ 0xD9E215AF ^ -(v86 ^ 0xD9E215AF) ^ ((v86 ^ v35 ^ 0x431D28D3)
                                                          + (v35 ^ 0x6500C283)
                                                          + 1))
               + (v35 ^ 0x6500C283);
  LODWORD(v35) = *(_DWORD *)&v97[4 * ((v17 ^ 0x3F162902) >> 24)];
  HIDWORD(v15) = ~(_DWORD)v35;
  LODWORD(v15) = v35 ^ 0x1DE9534E;
  int v152 = *(_DWORD *)(v105 + 4LL * (BYTE1(v143) ^ 0x7Cu));
  unsigned int v153 = ((v17 ^ 0x3F162902) >> 16) ^ v219 ^ *(_DWORD *)(v98 + 4LL * (((v17 ^ 0x3F162902) >> 16) ^ 0x5Cu)) ^ v92;
  unsigned int v154 = (v15 >> 1) ^ HIDWORD(v218) ^ v86;
  unsigned int v155 = *(_DWORD *)(v105 + 4LL * (BYTE1(v17) ^ 0xCBu)) ^ HIDWORD(v219) ^ (v151 + 1312414243 - ((2 * v151) & 0x9C73B446));
  LODWORD(v35) = v152 ^ HIDWORD(v220) ^ ((v17 ^ 2)
                                       + 1069380434
                                       + ((2 * (v17 ^ 0x3F162902) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v17 ^ 0x6F)] ^ v73;
  LODWORD(v86) = ((BYTE2(v35) ^ 0xE9) - 114727250 - ((2 * ((v35 >> 16) ^ 0xB8E9)) & 0x15C)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v35) ^ 0xB5u));
  int v156 = *(_DWORD *)&v97[4 * (HIBYTE(v153) ^ 0x9D)];
  HIDWORD(v15) = ~v156;
  LODWORD(v15) = v156 ^ 0x1DE9534E;
  int v157 = v15 >> 1;
  LODWORD(v73) = *(_DWORD *)&v97[4 * (HIBYTE(v155) ^ 0x61)];
  HIDWORD(v15) = ~(_DWORD)v73;
  LODWORD(v15) = v73 ^ 0x1DE9534E;
  LODWORD(v17) = *(_DWORD *)&v99[4 * (v35 ^ 0xC5)] ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v153) ^ 0x28u)) ^ ((v35 ^ 0xA8) + 1069380434 + ((2 * (v35 ^ 0xA8) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ ((BYTE2(v153) ^ 0x74) - 114727250 - ((2 * (HIWORD(v153) ^ 0x9D74)) & 0x15C)) ^ (v15 >> 1);
  int v158 = v157 ^ ((BYTE2(v154) ^ 0xE6) - 114727250 - 2 * ((HIWORD(v154) ^ 0xB0E6) & 0xAF ^ HIWORD(v154) & 1)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v154) ^ 0xBAu));
  LODWORD(v73) = v153;
  LODWORD(v92) = (v153 ^ 0xD9)
               + 1069380434
               + ((2 * (v153 ^ 0xD9) + 254) & 0x1A4 ^ 0xFFC2FFFF);
  int v159 = *(_DWORD *)&v97[4 * ((v35 >> 24) ^ 0xB8)];
  HIDWORD(v15) = ~v159;
  LODWORD(v15) = v159 ^ 0x1DE9534E;
  unsigned int v160 = (v155 ^ 0x85) + 1069380434 + ((2 * (v155 ^ 0x85) + 254) & 0x1A4 ^ 0xFFC2FFFF);
  int v161 = ((BYTE2(v155) ^ 8) - 114727250 - ((2 * (HIWORD(v155) ^ 0x6108)) & 0x15C)) ^ *(_DWORD *)(v98
                                                                                               + 4LL
                                                                                               * (BYTE2(v155) ^ 0x54u)) ^ *(_DWORD *)&v99[4 * (v154 ^ 0x29)] ^ ((v154 ^ 0x44) + 1069380434 + ((2 * (v154 ^ 0x44) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ (v15 >> 1);
  LODWORD(v17) = *(_DWORD *)(v105 + 4LL * (BYTE1(v154) ^ 0xDDu)) ^ HIDWORD(v217) ^ ((_DWORD)v17
                                                                                  + 1312414243
                                                                                  - ((2 * (_DWORD)v17) & 0x9C73B446));
  LODWORD(v83) = *(_DWORD *)&v97[4 * (HIBYTE(v154) ^ 0xB0)];
  HIDWORD(v15) = ~(_DWORD)v83;
  LODWORD(v15) = v83 ^ 0x1DE9534E;
  unsigned int v162 = *(_DWORD *)(v105 + 4LL * (BYTE1(v153) ^ 0xBDu)) ^ v218 ^ (v161 + 1312414243 - ((2 * v161) & 0x9C73B446));
  int v163 = *(_DWORD *)&v99[4 * (v155 ^ 0xE8)];
  unsigned int v164 = *(_DWORD *)(v105 + 4LL * (BYTE1(v155) ^ 0x8Fu)) ^ HIDWORD(v216) ^ *(_DWORD *)&v99[4
                                                                                         * (v73 ^ 0xB4)] ^ v92 ^ (v15 >> 1) ^ (v86 + 1312414243 - ((2 * v86) & 0x9C73B446));
  LODWORD(v86) = v160 ^ v217 ^ v163 ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0x2Du)) ^ (v158
                                                                                      + 1312414243
                                                                                      - ((2 * v158) & 0x9C73B446));
  int v165 = BYTE2(v162);
  int v166 = *(_DWORD *)&v97[4 * (HIBYTE(v164) ^ 0x18)];
  unsigned int v167 = ((BYTE2(v86) ^ 0x66) - 114727250 - 2 * ((WORD1(v86) ^ 0xAE66) & 0xAF ^ WORD1(v86) & 1)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v86) ^ 0x3Au));
  HIDWORD(v15) = ~v166;
  LODWORD(v15) = v166 ^ 0x1DE9534E;
  LODWORD(v35) = ((v15 >> 1) - 114727250 - ((2 * (v15 >> 1)) & 0xF252CD5C)) ^ *(_DWORD *)(v98
                                                                                        + 4LL * (BYTE2(v162) ^ 0x40u));
  int v168 = *(_DWORD *)&v97[4 * (HIBYTE(v162) ^ 0xEF)];
  HIDWORD(v15) = ~v168;
  LODWORD(v15) = v168 ^ 0x1DE9534E;
  int v169 = (v15 >> 1) ^ *(_DWORD *)&v99[4 * (v164 ^ 0x90)] ^ ((v164 ^ 0xFD)
                                                                           + 1069380434
                                                                           + ((2 * (v164 ^ 0xFD) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  LODWORD(v73) = v167 + 1312414243 - ((2 * v167) & 0x9C73B446);
  unsigned int v170 = *(_DWORD *)&v99[4 * (v17 ^ 0x27)] ^ ((v17 ^ 0x4A)
                                                             + 1069380434
                                                             + ((2 * (v17 ^ 0x4A) + 254) & 0x1A4 ^ 0xFFC2FFFF));
  LODWORD(v83) = *(_DWORD *)&v97[4 * (BYTE3(v86) ^ 0xAE)];
  HIDWORD(v15) = ~(_DWORD)v83;
  LODWORD(v15) = v83 ^ 0x1DE9534E;
  int v171 = (v15 >> 1) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v164) ^ 0xFu)) ^ (v170 - 114727250 - ((2 * v170) & 0xF252CD5C));
  LODWORD(v74) = *(_DWORD *)&v97[4 * ((v17 >> 24) ^ 0xDC)];
  HIDWORD(v15) = ~(_DWORD)v74;
  LODWORD(v15) = v74 ^ 0x1DE9534E;
  unsigned int v172 = (_DWORD)v35 + 1312414243 - ((2 * (_DWORD)v35) & 0x9C73B446);
  LODWORD(v35) = ((BYTE2(v17) ^ 0xE)
                - 114727250
                - 2 * (((v17 >> 16) ^ 0xDC0E) & 0xBF ^ (v17 >> 16) & 0x11)) ^ v216 ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v86) ^ 0x7Cu)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v17) ^ 0x52u)) ^ (v169 + 1312414243 - ((2 * v169) & 0x9C73B446));
  LODWORD(v83) = v86;
  unsigned int v173 = (v86 ^ 0xB3) + 1069380434 + ((2 * (v86 ^ 0xB3) + 254) & 0x1A4 ^ 0xFFC2FFFF);
  LODWORD(v86) = *(_DWORD *)(v105 + 4LL * (BYTE1(v164) ^ 0x1Bu)) ^ HIDWORD(v215) ^ *(_DWORD *)&v99[4
                                                                                                 * (v162 ^ 0x4D)] ^ ((v162 ^ 0x20) + 1069380434 + ((2 * (v162 ^ 0x20) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ (v15 >> 1) ^ v73;
  LODWORD(v17) = v172 ^ HIDWORD(v214) ^ v173 ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v17) ^ 0x65u)) ^ *(_DWORD *)&v99[4 * (v83 ^ 0xDE)];
  LOBYTE(v73) = v17 ^ BYTE2(v162);
  unsigned int v174 = *(_DWORD *)(v105 + 4LL * (BYTE1(v162) ^ 0xA4u)) ^ v215 ^ (v171 + 1312414243 - ((2 * v171) & 0x9C73B446));
  LODWORD(v92) = v17 ^ v165 ^ 0x7641388B;
  int v175 = (v174 ^ BYTE2(v164));
  LODWORD(v83) = *(_DWORD *)&v97[4 * BYTE3(v92)];
  HIDWORD(v15) = ~(_DWORD)v83;
  LODWORD(v15) = v83 ^ 0x1DE9534E;
  LODWORD(v83) = v15 >> 1;
  int v176 = *(_DWORD *)&v97[4 * ((v35 ^ 0xF7E9CFA8) >> 24)];
  HIDWORD(v15) = ~v176;
  LODWORD(v15) = v176 ^ 0x1DE9534E;
  int v177 = v15 >> 1;
  unsigned int v178 = (BYTE2(v92) - 114727250 - ((v17 >> 15) & 0x15C)) ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v92) ^ 0x5Cu));
  int v179 = *(_DWORD *)&v97[4 * (HIBYTE(v174) ^ 0xE7)];
  HIDWORD(v15) = ~v179;
  LODWORD(v15) = v179 ^ 0x1DE9534E;
  int v180 = v15 >> 1;
  int v181 = v83 ^ *(_DWORD *)&v99[4 * (v175 ^ 0x18)] ^ (((v35 ^ 0xF7E9CFA8) >> 16)
                                                   - 114727250
                                                   - (((v35 ^ 0xF7E9CFA8) >> 15) & 0x15C)) ^ *(_DWORD *)(v98 + 4LL * (((v35 ^ 0xF7E9CFA8) >> 16) ^ 0x5Cu)) ^ ((~(2 * (v175 ^ 0x75) + 4031742) | 0xFFC2FE5B) + (v175 ^ 0x75) + 1069380434);
  unsigned int v182 = (v181 + 1312414243 - ((2 * v181) & 0x9C73B446)) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v86) ^ 0xECu));
  int v183 = v177 ^ *(_DWORD *)(v98 + 4LL * (BYTE2(v86) ^ 0xA7u)) ^ ((BYTE2(v86) ^ 0xFB)
                                                               - 114727250
                                                               - ((2 * (WORD1(v86) ^ 0x57FB)) & 0x15C)) ^ (v92 + 1069380434 + ((2 * v92 + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ *(_DWORD *)&v99[4 * (v73 ^ 0xE6)];
  LODWORD(v83) = *(_DWORD *)&v97[4 * (BYTE3(v86) ^ 0x57)];
  HIDWORD(v15) = ~(_DWORD)v83;
  LODWORD(v15) = v83 ^ 0x1DE9534E;
  unsigned int v184 = (v183 + 1312414243 - ((2 * v183) & 0x9C73B446)) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v174) ^ 0x6Du));
  int v185 = HIWORD(v174) ^ 0xE731;
  LODWORD(v98) = *(_DWORD *)(v98 + 4LL * (v185 ^ 0x5Cu));
  int v186 = *(_DWORD *)(v105 + 4LL * (BYTE1(v35) ^ 0x2Du));
  LODWORD(v86) = v86;
  unsigned int v187 = ((v35 ^ 0xA8)
        + 1069380434
        + ((2 * (v35 ^ 0xF7E9CFA8) + 254) & 0x1A4 ^ 0xFFC2FFFF)) ^ (v185
                                                                                - 114727250
                                                                                - ((2 * v185) & 0x15C)) ^ *(_DWORD *)&v99[4 * (v35 ^ 0xC5)];
  LODWORD(v83) = *(_DWORD *)&v99[4 * (v86 ^ 0x42)];
  LODWORD(v35) = (v86 ^ 0x2F) + 1069380434 + ((2 * (v86 ^ 0x2F) + 254) & 0x1A4 ^ 0xFFC2FFFF);
  LODWORD(v86) = HIDWORD(v206) ^ *(_DWORD *)(v105 + 4LL * (BYTE1(v17) ^ 0xDAu)) ^ ((v187 ^ (v15 >> 1) ^ v98)
                                                                                 + 1312414243
                                                                                 - ((2 * (v187 ^ (v15 >> 1) ^ v98)) & 0x9C73B446));
  LODWORD(v17) = (v184 - 512663828 - ((2 * v184) & 0xC2E2BDD8)) ^ v214;
  LODWORD(v105) = (v182 - 595648296 - ((2 * v182) & 0xB8FE41B0)) ^ HIDWORD(v213);
  LODWORD(v99) = v186 ^ v213 ^ v35 ^ v180 ^ v83 ^ (v178 + 1312414243 - ((2 * v178) & 0x9C73B446));
  BYTE2(v187) = BYTE2(v86) ^ 0x8C;
  LODWORD(v35) = v105 ^ 0x351D74B9;
  LODWORD(v34) = *(_DWORD *)(v10 - 116);
  unsigned int v188 = (char *)*(&off_1004EDED0 + (int)v34 - 1801) - 4;
  int v189 = (char *)*(&off_1004EDED0 + (int)v34 - 1668) - 8;
  unsigned int v190 = (char *)*(&off_1004EDED0 + (int)v34 - 1699) - 8;
  int v191 = (*(_DWORD *)&v190[4 * (BYTE2(v17) ^ 0x9E)] - 1066110617) ^ (*(_DWORD *)&v188[4 * (v99 ^ 0xC9)]
                                                                   + 1161575469);
  uint64_t v192 = *(unsigned int *)&v188[4 * (v86 ^ 0xC8)];
  int v193 = (*(_DWORD *)&v190[4 * (BYTE2(v99) ^ 0x38)] - 1066110617) ^ (*(_DWORD *)&v189[4
                                                                                    * ((v86 ^ 0x898C5DC8) >> 24)]
                                                                   + 74050895) ^ (*(_DWORD *)&v188[4
                                                                                                 * (v17 ^ 0xA2)]
                                                                                + 1161575469);
  LODWORD(v98) = *(_DWORD *)&v188[4 * (v105 ^ 0xB9)];
  uint64_t v194 = *(unsigned int *)&v189[4 * ((v17 >> 24) ^ 0xE7)];
  LODWORD(v188) = *(_DWORD *)&v189[4 * ((v99 >> 24) ^ 0xB8)];
  uint64_t v195 = (uint64_t)*(&off_1004EDED0 + (int)v34 - 1817);
  LODWORD(v86) = *(_DWORD *)(v195 + 4LL * (BYTE1(v86) ^ 0x61u)) ^ (*(_DWORD *)&v189[4 * (BYTE3(v105) ^ 0x65)] + 74050895);
  LODWORD(v105) = *(_DWORD *)(v195 + 4LL * (BYTE1(v17) ^ 0xA0u));
  LODWORD(v99) = *(_DWORD *)(v195 + 4LL * (BYTE1(v99) ^ 0xE9u));
  LODWORD(v86) = (v191 - 839040011 - ((2 * v191) & 0x9BFA87EA)) ^ v86;
  LODWORD(v92) = *(_DWORD *)&v190[4 * BYTE2(v187)];
  LODWORD(v189) = *(_DWORD *)&v190[4 * BYTE2(v35)];
  LODWORD(v97) = *(_DWORD *)(v195 + 4LL * BYTE1(v35)) ^ HIDWORD(v208) ^ (v193 - 839040011 - ((2 * v193) & 0x9BFA87EA));
  LODWORD(v17) = HIDWORD(a6) ^ HIDWORD(v213) ^ (v86 - 595648296 - ((2 * v86) & 0xB8FE41B0));
  uint64_t v196 = ((unsigned __int16)(*(_WORD *)(v195 + 4LL * BYTE1(v35)) ^ WORD2(v208) ^ (v193
                                                                                                 + 17397
                                                                                                 - ((2 * v193) & 0x87EA))) >> 8) ^ 0x99LL;
  unsigned int v197 = (char *)*(&off_1004EDED0 + (int)v34 - 1741) - 12;
  a1[*(void *)(v10 - 248)] = v197[v196] ^ 0x5D;
  int v198 = (char *)*(&off_1004EDED0 + (int)v34 - 1818) - 4;
  a1[*(void *)(v10 - 240)] = (v198[BYTE2(v17) ^ 0xADLL] - 42) ^ 0xC5;
  LODWORD(v196) = v105 ^ HIDWORD(a6) ^ (v192 - ((2 * v192 - 1971816358) & 0x9BFA87EA) + 322535458) ^ ((_DWORD)v188 + 74050895) ^ ((_DWORD)v189 - 1066110617);
  int v199 = (char *)*(&off_1004EDED0 + SHIDWORD(v205)) - 8;
  a1[*(void *)(v10 - 200)] = v199[v97 ^ 0xFCLL] ^ 0x42;
  a1[*(void *)(v10 - 216)] = (v198[BYTE2(v196) ^ 0x8CLL] - 42) ^ 0x47;
  unsigned int v200 = (char *)*(&off_1004EDED0 + (int)v205) - 12;
  a1[*(void *)(v10 - 232)] = (v200[(v97 >> 24) ^ 0xDELL] + 24) ^ 0x1B;
  a1[*(void *)(v10 - 224)] = ((v198[BYTE2(v97) ^ 0x15LL] + ((v198[BYTE2(v97) ^ 0x15LL] - 42) ^ 0xDA) - 41) ^ 0xFE)
                             + v198[BYTE2(v97) ^ 0x15LL]
                             - 42;
  uint64_t v201 = (v98 + 1161575469);
  uint64_t v202 = v206 ^ v99 ^ ((_DWORD)v92 - 1066110617) ^ v201 ^ ((_DWORD)v194 - ((2 * (_DWORD)v194 + 148101790) & 0x9BFA87EA) - 764989116);
  a1[*(void *)(v10 - 208)] = v199[(v206 ^ v99 ^ (v92 + 103) ^ v201 ^ (v194 - ((2 * v194 - 98) & 0xEA) + 68)) ^ 5LL] ^ 0xB0;
  a1[*(void *)(v10 - 152)] = (v200[(v17 >> 24) ^ 0x4ELL] + 24) ^ 0xE6;
  a1[*(void *)(v10 - 144)] = (v200[BYTE3(v196) ^ 0x9CLL] + 24) ^ 0xB8;
  uint64_t v203 = *(void *)(v10 - 176);
  a1[v203] = (v200[BYTE3(v202) ^ 0x67LL] + 24) ^ 0x91;
  a1[*(void *)(v10 - 160)] = v199[v196 ^ 0xF2LL] ^ 0xBA;
  a1[*(void *)(v10 - 192)] = v197[BYTE1(v196) ^ 0x1ELL] ^ 0xFE;
  a1[*(void *)(v10 - 168)] = v197[((unsigned __int16)(v206 ^ (unsigned __int16)v99 ^ (v92 + 29031) ^ v201 ^ (v194 - ((2 * v194 - 9570) & 0x87EA) + 12612)) >> 8) ^ 0x33LL] ^ 0xE7;
  a1[*(void *)(v10 - 184)] = v197[BYTE1(v17) ^ 0xBCLL] ^ 0x29;
  a1[*(void *)(v10 - 136)] = v199[v17 ^ 0x9FLL] ^ 0x42;
  a1[*(void *)(v10 - 128)] = (v198[BYTE2(v202) ^ 0xDLL] - 42) ^ 0x8E;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t (**)(int, int, int, int, int, int, int, int, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(v10 - 256) + 8LL * (int)((v34 - 568) | (2 * ((((_DWORD)v203 - 1332899240 - ((2 * (_DWORD)v203 + 32) & 0x611B24B0) + 16) ^ 0xB08D9258) < v56 + 9013377)))) - 8LL))( v201,  v202,  v194,  &off_1004EDED0,  66LL,  v192,  v195,  v199,  a2,  a3,  a4,  a1,  a6,  v205,  v206,  v207,  v208,  v209,  v210,  v211,  v212,  v213,  v214,  v215,  v216,  v217,  v218,  v219,  v220,  v221,  v222,  v223,  v224,  v225);
}

void sub_1000463BC()
{
}

uint64_t sub_1000463F0(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((253 * (v4 ^ 0x6E) - 204) * (v3 != a3)) ^ v4))
}

uint64_t sub_10004642C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)(v7
                                                                                        + 8LL
                                                                                        * ((1004
                                                                                          * ((((v6 & 8) == 0) ^ (a6 + 75)) & 1)) ^ a6))
                                                                            - 8LL))( a1,  a2,  a3,  (a2 - a3),  (a6 + 331) | 0x400u);
}

uint64_t sub_100046464@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W6>, uint64_t a4@<X8>)
{
  *(_DWORD *)(v12 - 128) = v11;
  *(_DWORD *)(v12 - 136) = v7;
  unsigned int v13 = (a3 ^ 0xFFFFF88F) & v7;
  int v14 = -a2;
  *(_DWORD *)(v12 - 144) = v13;
  char v15 = v10 + v9 + v8;
  *(_DWORD *)(v12 - 1memset((void *)(v1 - 204), 50, 16) = a3 ^ 0x721;
  uint64_t v16 = (v14 + v10 + v9 + a1);
  v18.val[0].i64[0] = ((_BYTE)v14 + (_BYTE)v10 + (_BYTE)v9 + (_BYTE)a1) & 0xF;
  v18.val[0].i64[1] = ((_BYTE)v14 + v15 - 81) & 0xF;
  v18.val[1].i64[0] = ((_BYTE)v14 + v15 + 5 * *(_BYTE *)(v12 - 116)) & 0xF;
  v18.val[1].i64[1] = ((_BYTE)v14 + v15 - 83) & 0xF;
  v18.val[2].i64[0] = ((_BYTE)v14 + v15 - 84) & 0xF;
  v18.val[2].i64[1] = ((_BYTE)v14 + v15 - 85) & 0xF;
  v18.val[3].i64[0] = ((_BYTE)v14 + v15 - 86) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)v14 + v15 - 87) & 0xF;
  *(int8x8_t *)(a4 - 7 + vmemset((void *)(v1 - 204), 50, 16) = veor_s8( veor_s8( veor_s8(*(int8x8_t *)(v5 + (v16 & 0xF) - 7), *(int8x8_t *)(a4 - 7 + v16)),  veor_s8(*(int8x8_t *)((v16 & 0xF) + v4 - 5), *(int8x8_t *)((v16 & 0xF) + v6 - 3))),  vrev64_s8( vmul_s8( (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v18, (int8x16_t)xmmword_1003BA330),  (int8x8_t)0x7777777777777777LL)));
  return (*(uint64_t (**)(__n128))(*(void *)(v12 - 256) + 8LL * (a3 ^ 2 | (2 * (v14 != 8 - v13)))))((__n128)xmmword_1003BA330);
}

void sub_1000465A0()
{
}

uint64_t sub_1000465C8()
{
}

uint64_t sub_10004660C@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  uint64_t v8 = (a1 - 141255584);
  *(_BYTE *)(a3 + v8) ^= *(_BYTE *)(v5 + (v8 & 0xF)) ^ *(_BYTE *)((v8 & 0xF) + v4 + 2) ^ *(_BYTE *)((v8 & 0xF) + v6 + 4) ^ (119 * (v8 & 0xF));
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * ((19 * (a1 - 1 != v3)) ^ (a2 - 1753))) - 8LL))();
}

void sub_100046678()
{
  if (v0 == 1807390555) {
    int v1 = 1645153785;
  }
  else {
    int v1 = -1645193695;
  }
  *(_DWORD *)(v2 + 32) = v1;
}

void sub_1000466DC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16) - 1374699841 * ((a1 + 2125213654 - 2 * (a1 & 0x7EAC2FD6)) ^ 0x135837DF);
  int v3 = *(unint64_t **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(unint64_t **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(v2 - 0x7542B2AE577378FLL);
  unsigned int v11 = v1 + 1224239923 * ((&v7 & 0x62925DD | ~(&v7 | 0x62925DD)) ^ 0xB6527F5) + 865;
  uint64_t v12 = v6;
  int v9 = &STACK[0xC7F991DE6408E4D];
  uint64_t v10 = v5;
  uint64_t v7 = v2;
  uint64_t v8 = v4;
  ((void (*)(uint64_t *))*(&off_1004EDED0 + v1 - 893))(&v7);
  uint64_t v7 = *(void *)(v2 - 0x7542B2AE5773797LL);
  uint64_t v8 = &STACK[0xC7F991DE6408E5D];
  LODWORD(v9) = v1
              + 1374699841
  sub_100009708((uint64_t)&v7);
  LODWORD(v7) = v1 + 235795823 * (&v7 ^ 0x94AD4959) - 662;
  uint64_t v8 = v3;
  sub_1000169B0((uint64_t)&v7);
  __asm { BR              X8 }

uint64_t sub_1000468E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  *(_DWORD *)(v19 - 112) = v13 + 1224239923 * ((v19 + 1260386870 - 2 * ((v19 - 144) & 0x4B1FFAC6)) ^ 0xB9AC0711) + 1606;
  *(void *)(v19 - 144) = v14;
  *(void *)(v19 - 136) = a12;
  *(void *)(v19 - 104) = v17;
  *(void *)(v19 - 128) = v17;
  *(void *)(v19 - 120) = v15;
  uint64_t v20 = a11(v19 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v12
                                                      + 8LL
                                                      * ((111
}

uint64_t sub_100046998( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v19 - 136) = v15;
  *(void *)(v19 - 128) = v16;
  *(_DWORD *)(v19 - 144) = (v17 + 791) ^ (1225351577
                                        * ((((2 * ((v19 - 144) ^ 0x34E6FF81)) | 0xB1E44DAA)
                                          - ((v19 - 144) ^ 0x34E6FF81)
                                          + 655218987) ^ 0xCF8E0142));
  *(void *)(v19 - 120) = v16;
  *(void *)(v19 - 112) = v14;
  ((void (*)(uint64_t))((char *)*(&off_1004EDED0 + v17 - 260) - 4))(v19 - 144);
  int v20 = 1374699841
      * ((~((v19 - 144) ^ 0xCE91F438 | 0xE3331AF3) + (((v19 - 144) ^ 0xCE91F438) & 0xE3331AF3)) ^ 0xBFA9093D);
  *(_DWORD *)(v19 - 144) = (v17 + 1030) ^ v20;
  *(_DWORD *)(v19 - 128) = -313388985 - v20 + v18;
  *(void *)(v19 - 136) = a13;
  uint64_t v21 = sub_100039BB4(v19 - 144);
  return (*(uint64_t (**)(uint64_t))(v13 + 8LL * ((114 * (*(_DWORD *)(v19 - 140) == 538735252)) ^ v17)))(v21);
}

uint64_t sub_100046ABC()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((111
}

uint64_t sub_100046B00()
{
  uint64_t v5 = *(void *)(v8 + 24);
  int v6 = 1224239923 * ((((v4 - 144) | 0x5ECCF06D) + (~(v4 - 144) | 0xA1330F92)) ^ 0xAC7F0DBB);
  *(_DWORD *)(v4 - 144) = v6 ^ 0x3EAF37E3;
  *(void *)(v4 - 136) = v10;
  *(_DWORD *)(v4 - 128) = v6 + v3 - 849;
  sub_10000B698((_DWORD *)(v4 - 144));
  *(void *)(v4 - 144) = v0;
  *(void *)(v4 - 136) = v10;
  *(void *)(v4 - 104) = v2;
  *(void *)(v4 - 128) = v2;
  *(void *)(v4 - 120) = v1;
  *(_DWORD *)(v4 - 112) = v3
                        + 1224239923 * ((2 * ((v4 - 144) & 0x10151408) - (v4 - 144) - 269816843) ^ 0x1D591622)
                        + 865;
  v9(v4 - 144);
  *(_DWORD *)(v4 - 128) = v3 + 1374699841 * ((v4 - 144) ^ 0x6DF41809) + 406;
  *(void *)(v4 - 144) = v2;
  *(void *)(v4 - 136) = v5;
  return sub_100009708(v4 - 144);
}

void sub_100046C24(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32) ^ (1225351577 * ((-2 - ((a1 | 0x21ABC784) + (~(_DWORD)a1 | 0xDE54387B))) ^ 0xFDCEE06D));
  __asm { BR              X10 }

uint64_t sub_100046CF4@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * ((2 * (&a4 & 0x17931B20) - &a4 + 1751966942) ^ 0xB6AA5905);
  a8 = v12 ^ 0x6228DDF;
  a7 = &STACK[0x37021DA481391552];
  a4 = &STACK[0x42E48BBDD224DE45];
  a5 = v11;
  a6 = (v10 - 136) ^ v12;
  uint64_t v13 = ((uint64_t (*)(unint64_t **))(*(void *)(a1 + 8LL * (v10 ^ 0x14F)) - 8LL))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * (((*(_DWORD *)(v11 - 0x27681A84B35EB0EDLL) == v8) * ((v10 + 48) ^ 0x53C)) ^ v10)))(v13);
}

uint64_t sub_100046DD8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  return ((uint64_t (*)(void))(*(void *)(v11
                                        + 8LL
                                        * ((((a10 == v10) ^ (v12 + 1)) & 1 | (8
}

uint64_t sub_100046E20( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11)
{
  *(_BYTE *)(v11 + (v13 + v12)) = *(_BYTE *)(a11 + (v13 + v12)) ^ 0x32;
  BOOL v17 = ((v16 - 1825813931) & 0x6CD3B57A ^ (v12 + 351)) + v13 < (a10 ^ v14);
  return ((uint64_t (*)(void))(*(void *)(v15 + 8LL * ((v17 | (8 * v17)) ^ v16)) - 4LL))();
}

void sub_100046E84(_DWORD *a1@<X8>)
{
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(*(void *)(v3 + 24) - 0x1E6EF7153090DC2LL) = v1;
  *(_DWORD *)(v4 - 0x72E1645BEBB64013LL) = v2;
  *(_DWORD *)uint64_t v3 = *a1;
}

void sub_100046EEC(_DWORD *a1)
{
  unsigned int v1 = *a1 + 108757529 * ((2 * (a1 & 0x5EAB9BD4) - (_DWORD)a1 - 1588304853) ^ 0x41C80600);
  __asm { BR              X14 }

uint64_t sub_100046FAC(uint64_t a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (int)(((*(_DWORD *)(*(void *)(a1 + 8) + v4) != v3)
                                               * (((v1 + 1019832448) & 0xC336977F) + 614)) ^ (v1 + 1138)))
                            - ((v1 + 670) | 0x304u)
                            + 1800LL))();
}

uint64_t sub_100047004()
{
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * (int)(((((((10 * (v2 ^ 0x731)) ^ 0xF68072D2) + v3) * (v0 - 159353952)) >> 31)
                                               * ((v2 - 1130536225) & 0x4362977E ^ 0x130)) | v2))
                            - 8LL))();
}

uint64_t sub_100047068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v5 = v2;
  unsigned int v6 = v3 - 535753261 * ((&v5 & 0xF4826C3B | ~(&v5 | 0xF4826C3B)) ^ 0x1899DEB) - 229;
  uint64_t v7 = a1;
  uint64_t v8 = v2;
  return ((uint64_t (*)(uint64_t *))(*(void *)(v1 + 8LL * (v3 - 231)) - 4LL))(&v5);
}

void sub_1000471B0(uint64_t a1)
{
  __asm { BR              X8 }

void sub_1000472D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(unsigned __int8 **)(a4 + 8LL * (a5 ^ (a5 - 19)));
  BOOL v11 = ((**(unsigned __int8 **)(a7 + 80) - (*v9 ^ 0x32)) ^ 0x76DF27E7)
      + ((2 * (**(unsigned __int8 **)(a7 + 80) - (*v9 ^ 0x32))) & 0xEDBE4FCE)
      - 1183589858 == 1608824740 - v7
     && a6 != 2441235919LL;
  __asm { BR              X15 }

uint64_t sub_1000483BC@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  *(_BYTE *)(v2 + (v4 - 266921706)) = *(_BYTE *)(a2 + (v4 - 266921706));
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * ((117 * (((a1 + 94) ^ 0xFFFFFC70) + v4 == v3)) ^ a1)) - 12LL))();
}

void sub_100048404(uint64_t a1)
{
  int v1 = 1759421093 * (a1 ^ 0xB37DB054);
  if (*(void *)(a1 + 24)) {
    BOOL v2 = *(_DWORD *)(a1 + 20) - v1 == 603303756;
  }
  else {
    BOOL v2 = 1;
  }
  int v3 = !v2;
  __asm { BR              X8 }

uint64_t sub_1000484B0()
{
  BOOL v3 = (*(uint64_t (**)(uint64_t))(v0 + 8LL * (v2 ^ 0x302)))(32LL) == 0;
}

uint64_t sub_10004851C()
{
  BOOL v4 = v1 != v0 + ((v3 - 1653570193) & 0x628F7D0B) - 1027;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (((2 * v4) | (4 * v4)) ^ v3)) - 8LL))();
}

uint64_t sub_100048574@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v11 = v2 - 603303757;
  int v12 = v2 - 1;
  int v13 = *(unsigned __int8 *)(v6 + v11);
  if (v13 == 50) {
    __asm { BR              X11 }
  }

  if (v13 == 178)
  {
    int v14 = 1645153785;
    uint64_t v15 = *(void *)(v4 + 8);
    int v16 = *(unsigned __int8 *)(v4 + 16) ^ v5;
    *(void *)uint64_t result = v6;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 24) {
      int v17 = -1454758981;
    }
    else {
      int v17 = -1454758982;
    }
    *(_DWORD *)(result + memset((void *)(v1 - 204), 50, 16) = 310716794;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 1645153785;
    *(void *)(v15 - 0x17594DE9181849F3LL) = a2;
  }

  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v8 + 8LL * (v9 ^ 0x419)))();
    int v14 = -1645193696;
  }

  *(_DWORD *)uint64_t v4 = v14;
  return result;
}

void sub_100048658(uint64_t a1)
{
  int v2 = 1755732067 * ((2 * ((a1 ^ 0xFDCA5AD1) & 0x4699B354) - (a1 ^ 0xFDCA5AD1) - 1184478037) ^ 0x9A6AABA1);
  int v3 = *(_DWORD *)(a1 + 32) - v2;
  unsigned int v4 = v3
  nullsub_13(&v4);
  __asm { BR              X17 }

uint64_t sub_1000487F0()
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * (v3 | (8 * (((v0 + 1) & 0x7FFFFFFC) != v1)))) - 4LL))();
}

void sub_100048814()
{
}

uint64_t sub_100048820@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((1176 * v5) ^ v4)) - 4LL))();
}

uint64_t sub_10004886C()
{
  int v3 = 13 * (v2 ^ 0x29F);
  unsigned int v4 = v0 - ((2 * v0 + 1881461130) & 0x918F5A50) + ((v3 + 1325647569) & 0xB0FC3DDF) - 2133192674;
  return ((uint64_t (*)(void))(*(void *)(v1
                                        + 8LL
                                        * ((1636
                                          * (((2 * v4) & 0xFFFEFB66 ^ 0x918E5A40) + (v4 ^ 0xB738D09B) - 1394876467 != 752573824)) ^ v3))
                            - 8LL))();
}

uint64_t sub_100048924()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
}

uint64_t sub_100048988(uint64_t a1)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * (v2 ^ (((unint64_t)(v1 - a1) > 0x1F) | (2 * ((unint64_t)(v1 - a1) > 0x1F))))))();
}

uint64_t sub_1000489AC()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((((v0 < 0x20) ^ (((v1 + 42) | 0x11) + 112)) & 1)
                                          * (((((v1 - 1238) | 0x11) - 840300522) & 0x3215F7D7) - 580)) ^ ((v1 - 1238) | 0x11)))
                            - 4LL))();
}

uint64_t sub_100048A00(uint64_t a1)
{
  unsigned int v8 = v4 + v3 + v5;
  uint64_t v9 = v1 + v8;
  __int128 v10 = *(_OWORD *)(v9 - 31);
  uint64_t v11 = a1 + v8;
  *(_OWORD *)(v11 - 15) = *(_OWORD *)(v9 - 15);
  *(_OWORD *)(v11 - 31) = v10;
}

void sub_100048A58()
{
}

uint64_t sub_100048A64(uint64_t a1, int a2)
{
}

uint64_t sub_100048AA4(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL * ((a2 + 464) ^ (1777 * ((v2 & 0x18) == 0))))
                            - (a2 + 576)
}

uint64_t sub_100048ADC(uint64_t a1)
{
  *(void *)(a1 - 7 + (v4 + v3 + v5 - v6)) = *(void *)(v1 - 7 + (v4 + v3 + v5 - v6));
  BOOL v9 = v7 - (v2 & 0xFFFFFFF8) - 763 == -v6;
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((8 * v9) | (16 * v9) | v7)) - 12LL))();
}

uint64_t sub_100048B3C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(a3 + (v4 + a4)) = *(void *)(v5 + (v4 + a4));
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((8 * (v6 == a4)) | (16 * (v6 == a4)) | v7)) - 12LL))();
}

uint64_t sub_100048B6C(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))(*(void *)(v4 + 8LL * (((((v3 + 102) | 0x107) ^ 0x5C8) * (v2 == a2)) ^ v3))
                            - (v3 ^ 0x55Eu)
                            + 312LL))();
}

uint64_t sub_100048BA8@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W8>)
{
  int v6 = (a2 - 296) | 0x10A;
  *(_BYTE *)(a1 + (v4 - 752573825)) = *(_BYTE *)(v3 + (v4 - 752573825));
  BOOL v7 = v4 - 1 != (v6 ^ 0x4D1 ^ a3);
  return ((uint64_t (*)(void))(*(void *)(v5 + 8LL * (((2 * v7) | (32 * v7)) ^ v6)) - 8LL))();
}

uint64_t sub_100048BF8@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  *(_BYTE *)(a1 + (v5 + v4)) = *(_BYTE *)(v2 + (v5 + v4));
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * (((2 * (v5 - 1 != a2)) | (32 * (v5 - 1 != a2))) ^ v3)) - 8LL))();
}

uint64_t sub_100048C28()
{
  return ((uint64_t (*)(void))(*(void *)(v2
                                        + 8LL
                                        * (((*(void *)(v1 + 24) != 0x4B30070DAA05F9DDLL) * ((v0 - 838) ^ 0x165)) ^ v0))
                            - 4LL))();
}

uint64_t sub_100048C64@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)(a2 - 0x4B30070DAA05F9DDLL) = 1;
  uint64_t v4 = *v2;
  *(void *)(v2[5] - 0xF250A47131524EDLL) = result;
  *(_DWORD *)(v4 - 0x330904BA72E93EC0LL) = v3;
  *((_DWORD *)v2 + 13) = 1645153785;
  return result;
}

void sub_100048CF8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100048D5C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a2 + 96) + 24LL) = v4;
  unsigned int v5 = *(_DWORD *)(a1 + 4) - ((2 * *(_DWORD *)(a1 + 4) + 1881461130) & 0xEDAA0BF4) + 786919103;
  return ((uint64_t (*)(void))(*(void *)(v2
                                                     + 8LL
                                                     * ((83
                                                       * (((2 * v5) & 0xDFDBFDDA ^ 0xCD8A09D0)
                                                        + (v5 ^ 0x1938FB17)
                                                        - 1610946564 != 266921705)) ^ v3))
                                         - 8LL))(0LL);
}

uint64_t sub_100048DF0()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
}

uint64_t sub_100048E60(uint64_t a1, uint64_t a2, int a3)
{
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((84 * (v4 - a1 - (unint64_t)(a3 + 12) + 385 < 0x20)) | (a3 + 1191))))();
}

uint64_t sub_100048E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

uint64_t sub_100048EF0@<X0>(int a1@<W1>, int a2@<W3>, uint64_t a3@<X8>)
{
  unsigned int v9 = v7 + v6 + v8;
  uint64_t v10 = v4 + v9;
  __int128 v11 = *(_OWORD *)(v10 - 31);
  uint64_t v12 = a3 + v9;
  *(_OWORD *)(v12 - 15) = *(_OWORD *)(v10 - 15);
  *(_OWORD *)(v12 - 31) = v11;
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((((v5 & 0xFFFFFFE0) == 32) * (((a2 + 1016589078) & 0x3CED7F3C) + 357)) ^ (a1 + a2 + 1066))))();
}

void sub_100048F58()
{
}

uint64_t sub_100048F64(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                                     + 8LL
                                                     * (int)(((((13 * (a5 ^ 0x105)) ^ (a2 + 1842))
                                                             + ((a5 - 1082458691) & 0xC6FF97EF))
                                                            * (v6 != a3)) ^ a5))
                                         - 8LL))(0LL);
}

uint64_t sub_100048FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return ((uint64_t (*)(void, uint64_t, uint64_t, void))(*(void *)(v6
                                                                               + 8LL
                                                                               * ((244
                                                                                 * (((a6 + 112) ^ ((((a6 + 935) ^ 0x538) & v7) == 0)) & 1)) ^ a6))
                                                                   - 8LL))( (a6 + 1646419312) & 0x9DDDA5FF,  a2,  a3,  (v8 - a3));
}

uint64_t sub_100049008@<X0>(int a1@<W0>, int a2@<W2>, uint64_t a3@<X8>)
{
  *(void *)(a3 - 7 + (v7 + v6 + v8 - a2)) = *(void *)(v4 - 7 + (v7 + v6 + v8 - a2));
}

void sub_100049068()
{
}

uint64_t sub_100049074(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
}

uint64_t sub_1000490A4@<X0>(int a1@<W3>, int a2@<W4>, uint64_t a3@<X8>)
{
  *(_BYTE *)(a3 + (a1 - 266921706)) = *(_BYTE *)(v5 + (a1 - 266921706));
  return ((uint64_t (*)(void))(*(void *)(v3 + 8LL
                                                          * ((450 * ((a2 ^ 0x1C2) + a1 - 1251 != v4)) ^ a2 ^ 0x1C2))
                                         - 4LL))(0LL);
}

uint64_t sub_1000490E8@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + (v7 + v3)) = *(_BYTE *)(v4 + (v7 + v3));
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * (((v6 + v7 - 1251 != v2) * v5) ^ v6)) - 4LL))(0LL);
}

  ;
}

uint64_t sub_100049128(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (1755732067 * ((a1 & 0xECFD530 | ~(a1 | 0xECFD530)) ^ 0x2FF69714));
  return ((uint64_t (*)(void))(*((void *)*(&off_1004EDED0 + v1 - 804)
                              + ((1547 * (*(void *)(a1 + 8) != 0x27681A84B35EB105LL)) ^ v1)
                              - 1)
                            - 8LL))();
}

uint64_t sub_1000491B8()
{
  return ((uint64_t (*)(void))(*(void *)(v0
                                        + 8LL
                                        * ((1858
                                          * (*(_DWORD *)(v1 - 0x27681A84B35EB0EDLL) == ((v2 + 1851613323) & 0x91A29F6E ^ 0x620F0EB1))) ^ v2))
                            - 8LL))();
}

uint64_t sub_100049218()
{
  unsigned int v3 = *(_DWORD *)(v1 - 0x27681A84B35EB0F5LL) + 1273267861;
  unsigned int v4 = *(_DWORD *)(v1 - 0x27681A84B35EB0F9LL) + 980680899;
  BOOL v5 = v4 < (v2 ^ 6u) + 1583983809;
  BOOL v6 = v3 < v4;
  if (v3 < 0x5E69B00F != v5) {
    BOOL v6 = v5;
  }
  return ((uint64_t (*)(void))(*(void *)(v0 + 8LL * (((2 * !v6) | (4 * !v6)) ^ v2)) - 8LL))();
}

uint64_t sub_1000492B4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *int v2 = a2;
  *(_DWORD *)(result + memset((void *)(v1 - 204), 50, 16) = -1645193524;
  return result;
}

void sub_1000492C8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16)
     - 460628867 * (((a1 ^ 0x68759CF4 | 0x87CE5E15) - ((a1 ^ 0x68759CF4) & 0x87CE5E15)) ^ 0xA32D409C);
  __asm { BR              X10 }

uint64_t sub_100049410()
{
  BOOL v5 = *(_DWORD *)(v2 + 48) - v0 != 870327928 && (*(void *)(v2 + 32) | *(void *)(v2 + 56)) != 0LL;
}

uint64_t sub_100049470()
{
  BOOL v4 = v1[5] == 0x164C0FDDF1987668LL || (*v1 | v1[3]) == 0LL;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((362 * (((v0 - 100) ^ v4) & 1)) ^ v0)) - 8LL))();
}

uint64_t sub_1000494D0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return ((uint64_t (*)(uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 + 8LL * (int)(v20 & 0x8E18C33F ^ (124 * (v19 != 0)))) - ((502 * (v20 & 0x8E18C33F ^ 0x33F) - 1894953982) & 0x70F2B3FC) + 1000LL))( a1,  &STACK[0xC7F991DE6408EC5],  a2,  a3,  a4,  a5,  a6,  a7,  a1,  a10,  a11,  a12,  a13,  &STACK[0xC7F991DE6408EC5],  a15,  a8 - 0x3555E11E9398A6A2LL,  a17,  a8 - 0x3555E11E9398A7B2LL,  a19);
}

uint64_t sub_100049610@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  int v29 = v22 ^ 0x22F;
  int v30 = ((v28 - 1244544018 - 2 * ((v28 - 144) & 0xB5D1C47E)) ^ 0xF45BC1C) * v27;
  *(void *)(v28 - 128) = v20;
  *(void *)(v28 - 120) = a20;
  *(_DWORD *)(v28 - 140) = v22 - v30 - 751;
  *(_DWORD *)(v28 - 136) = v23 + v30 + (v22 ^ 0xD21E8525);
  uint64_t v46 = a1 + v21;
  ((void (*)(uint64_t))(*(void *)(v26 + 8LL * (v22 - 950)) - 8LL))(v28 - 144);
  HIDWORD(a10) = 203 * (v29 ^ 0x1C0);
  uint64_t v47 = v25;
  HIDWORD(v45) = v29 + 1083;
  *(_DWORD *)(v28 - 128) = (v29 + 1083) ^ (628203409
                                         * ((2 * ((v28 - 144) & 0x54E47578) - (v28 - 144) + 723225217) ^ 0xA99386B2));
  *(void *)(v28 - 144) = a17;
  *(void *)(v28 - 136) = a18;
  int v44 = (void (*)(uint64_t))(*(void *)(v26 + 8LL * (v29 ^ 0x147)) - 12LL);
  v44(v28 - 144);
  LODWORD(v45) = v29 + 1402;
  *(void *)(v28 - 120) = a17;
  *(void *)(v28 - 112) = a19;
  *(_DWORD *)(v28 - 128) = (v29 + 1402) ^ (((((v28 - 144) | 0x680F62BB) - ((v28 - 144) & 0x680F62BB)) ^ 0xD29B1AD9) * v27);
  *(void *)(v28 - 144) = a18;
  *(void *)(v28 - 136) = a20;
  int v43 = (void (*)(uint64_t))(*(void *)(v26 + 8LL * (v29 ^ 0x1C1)) - 4LL);
  v43(v28 - 144);
  HIDWORD(v42) = v29 + 1485;
  *(_DWORD *)(v28 - 112) = v29
                         + 1485
                         + 1224239923
                         * ((((v28 - 144) ^ 0xF9BB0CB1 | 0x15437DFD) - (((v28 - 144) ^ 0xF9BB0CB1) & 0x15437DFD)) ^ 0x1E4B8C9B);
  *(void *)(v28 - 104) = v25;
  *(void *)(v28 - 128) = a19;
  *(void *)(v28 - 120) = a17;
  *(void *)(v28 - 144) = a18;
  *(void *)(v28 - 136) = a19;
  uint64_t v31 = *(void (**)(uint64_t))(v26 + 8LL * (v29 ^ 0x171));
  v31(v28 - 144);
  LODWORD(v42) = v29 + 469;
  *(void *)(v28 - 136) = a19;
  *(void *)(v28 - 128) = a19;
  *(_DWORD *)(v28 - 120) = v29 + 469 + 1225351577 * ((v28 - 144) ^ 0x239AD816);
  *(void *)(v28 - 112) = a9;
  *(void *)(v28 - 104) = a17;
  *(void *)(v28 - 144) = a18;
  unint64_t v32 = (void (*)(uint64_t))(*(void *)(v26 + 8LL * (v29 - 279)) - 12LL);
  v32(v28 - 144);
  *(void *)(v28 - 144) = a13;
  *(void *)(v28 - 136) = a18;
  *(_DWORD *)(v28 - 128) = (v29 + 1083) ^ (628203409
                                         * ((((v28 - 144) | 0xDED8722D) - ((v28 - 144) & 0xDED8722D)) ^ 0x5C507E1E));
  v44(v28 - 144);
  *(void *)(v28 - 120) = a13;
  *(void *)(v28 - 112) = a7;
  *(_DWORD *)(v28 - 128) = (v29 + 1402) ^ (1178560073
                                         * ((989915423 - ((v28 - 144) | 0x3B00E91F) + ((v28 - 144) | 0xC4FF16E0)) ^ 0x7E6B6E82));
  *(void *)(v28 - 144) = a18;
  *(void *)(v28 - 136) = a20;
  v43(v28 - 144);
  *(_DWORD *)(v28 - 112) = v29
                         + 1485
                         + 1224239923 * ((((v28 - 144) | 0x639614A3) + (~(v28 - 144) | 0x9C69EB5C)) ^ 0x9125E975);
  *(void *)(v28 - 104) = v47;
  *(void *)(v28 - 144) = a18;
  *(void *)(v28 - 136) = a7;
  *(void *)(v28 - 128) = a7;
  *(void *)(v28 - 120) = a13;
  v31(v28 - 144);
  *(void *)(v28 - 136) = a7;
  *(void *)(v28 - 128) = a7;
  *(void *)(v28 - 112) = a11;
  *(void *)(v28 - 104) = a13;
  *(_DWORD *)(v28 - 120) = v29
                         + 469
                         + 1225351577 * ((((v28 - 144) | 0x59480BB8) - ((v28 - 144) & 0x59480BB8)) ^ 0x7AD2D3AE);
  *(void *)(v28 - 144) = a18;
  v32(v28 - 144);
  *(_DWORD *)(v28 - 144) = v29
                         - 108757529
                         * (((((v28 - 144) | 0xF475AFFA) ^ 0xFFFFFFFE) - (~(v28 - 144) | 0xB8A5005)) ^ 0xEB16322E)
                         - 81;
  *(void *)(v28 - 136) = a7;
  *(void *)(v28 - 128) = a19;
  ((void (*)(uint64_t))((char *)*(&off_1004EDED0 + (v29 ^ 0x1AB)) - 12))(v28 - 144);
  *(_DWORD *)(v28 - 140) = (v29 + 383) ^ (460628867 * ((v28 - 144) ^ 0x4C96827D));
  *(void *)(v28 - 136) = a7;
  sub_100039498(v28 - 144);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t), void (*)(uint64_t), uint64_t, uint64_t, void, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(uint64_t)))(*(void *)(v24 + 8LL * (v29 | (32 * (*(_DWORD *)(v28 - 144) < (HIDWORD(a10) + 1901766070))))) - 7 * (v29 ^ 0x194u) + 597LL))( v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  a2,  v42,  v43,  v44,  v45,  a7,  7 * (v29 ^ 0x194u),  a9,  a10,  (char *)*(&off_1004EDED0 + (v29 ^ 0x15A)) - 8,  v46,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  v31);
}

uint64_t sub_100049B10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t), uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void (*a27)(uint64_t), uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35)
{
  *(_DWORD *)(v40 - 144) = (v37 - 204) ^ (235795823 * ((v40 - 101333398 - 2 * ((v40 - 144) & 0xF9F5C6FA)) ^ 0x6D588FA3));
  *(void *)(v40 - 136) = v39;
  *(void *)(v40 - 128) = v36;
  v35(v40 - 144);
  *(void *)(v40 - 144) = a25;
  *(void *)(v40 - 136) = v39;
  *(_DWORD *)(v40 - 112) = v37
                         + 1327
                         + 1224239923
                         * ((2 * (((v40 - 144) ^ 0xA8FDC33E) & 0x7EE300AA) - ((v40 - 144) ^ 0xA8FDC33E) + 18677589) ^ 0x5B52C1BC);
  *(void *)(v40 - 128) = v39;
  *(void *)(v40 - 120) = v36;
  *(void *)(v40 - 104) = a35;
  a27(v40 - 144);
  *(_DWORD *)(v40 - 112) = v37
                         + 1327
                         + 1224239923
                         * ((((v40 - 144) | 0x595B079F) - (v40 - 144) + ((v40 - 144) & 0xA6A4F860)) ^ 0xABE8FA48);
  *(void *)(v40 - 144) = a25;
  *(void *)(v40 - 136) = a19;
  *(void *)(v40 - 128) = v39;
  *(void *)(v40 - 120) = v36;
  *(void *)(v40 - 104) = v39;
  a27(v40 - 144);
  *(void *)(v40 - 136) = v39;
  *(void *)(v40 - 128) = a24;
  *(_DWORD *)(v40 - 144) = (v37 - 1882358073) ^ (235795823
                                               * ((((v40 - 144) | 0xEC38560C) - ((v40 - 144) & 0xEC38560C)) ^ 0x78951F55));
  sub_10004D420(v40 - 144);
  *(_DWORD *)(v40 - 144) = (v37 - 204) ^ (235795823
                                        * ((-2026376004 - ((v40 - 144) | 0x8737F4BC) + ((v40 - 144) | 0x78C80B43)) ^ 0xEC65421A));
  *(void *)(v40 - 136) = v39;
  *(void *)(v40 - 128) = a26;
  a18(v40 - 144);
  *(void *)(v40 - 144) = v39;
  *(void *)(v40 - 136) = a26;
  *(_DWORD *)(v40 - 128) = v37 + 1374699841 * ((v40 - 144) ^ 0x6DF41809) + 868;
  uint64_t v41 = sub_100009708(v40 - 144);
  return ((uint64_t (*)(uint64_t))(*(void *)(v38
                                                      + 8LL
                                                      * ((((((v37 - 577) ^ (a23 == 0)) & 1) == 0) * (v37 - 556)) ^ (v37 + 381)))
                                          - 12LL))(v41);
}

uint64_t sub_100049D50()
{
  int v4 = 535753261 * ((((v3 - 144) ^ 0x80BC1318 | 0x67434C63) + ((v3 - 144) ^ 0x26000443 | 0x98BCB39C)) ^ 0xAC481975);
  *(_DWORD *)(v3 - 136) = ((v0 | 0x648) - 403) ^ v4;
  *(_DWORD *)(v3 - 120) = v4 + v7 + 1259132612 + (((v0 | 0x648) - 953243641) & 0x38D157BF);
  *(void *)(v3 - 144) = v8;
  *(void *)(v3 - 128) = v2;
  uint64_t result = ((uint64_t (*)(uint64_t))((char *)*(&off_1004EDED0 + ((v0 | 0x648) ^ 0x6B6)) - 8))(v3 - 144);
  *(_DWORD *)(v6 - 0x164C0FDDF1987668LL) = v7;
  *(_DWORD *)(v1 + 64) = 1645153785;
  return result;
}

void sub_100049EFC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) + 1759421093 * ((a1 - 1364022623 - 2 * (a1 & 0xAEB2AAA1)) ^ 0x1DCF1AF5);
  __asm { BR              X9 }

uint64_t sub_100049FAC()
{
  BOOL v3 = (*(uint64_t (**)(uint64_t))(v0 + 8LL * (v1 - 613)))(200LL) == 0;
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((1636 * ((v3 ^ v1) & 1)) ^ v1)) - 8LL))();
}

uint64_t sub_100049FEC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void))(v5 + 8LL * ((v7 ^ 0x4D8) - 1826)))(a1, 0LL);
  if ((_DWORD)result == 16)
  {
    v3 -= 7;
    goto LABEL_7;
  }

  if ((_DWORD)result == 12)
  {
LABEL_7:
    uint64_t result = (*(uint64_t (**)(uint64_t))(v5 + 8LL * (v4 & 0x75DAF05A)))(a1);
    int v10 = v3;
    goto LABEL_8;
  }

  if ((_DWORD)result)
  {
    v3 -= 6;
    goto LABEL_7;
  }

  *uint64_t v6 = a1;
  int v10 = 2107069443;
LABEL_8:
  *(_DWORD *)(v1 + 12) = v10 ^ v2;
  return result;
}

void sub_10004A078(_DWORD *a1)
{
  unsigned int v1 = *a1 ^ (1374699841 * ((((2 * (_DWORD)a1) | 0x97E9331C) - (_DWORD)a1 + 873162354) ^ 0xA6008187));
  __asm { BR              X10 }

uint64_t sub_10004A144@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, int a6, unint64_t *a7, int a8)
{
  unsigned int v12 = 1755732067 * ((&a4 & 0xC1A12D46 | ~(&a4 | 0xC1A12D46)) ^ 0xE0986F62);
  a7 = &STACK[0x37021DA48139155A];
  a6 = (v10 - 127) ^ v12;
  a4 = &STACK[0x42E48BBDD224DE3D];
  a5 = v11;
  a8 = v12 ^ 0x6BDE6AF;
  uint64_t v13 = ((uint64_t (*)(unint64_t **))(*(void *)(a1 + 8LL * (v10 - 300)) - 8LL))(&a4);
  return (*(uint64_t (**)(uint64_t))(v9
                                            + 8LL
                                            * ((866
                                              * (*(_DWORD *)(v11 - 0x27681A84B35EB0EDLL) == v8
                                                                                          + ((v10 + 682) | 0x24)
                                                                                          - 1063)) ^ v10)))(v13);
}

uint64_t sub_10004A22C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11)
{
  return ((uint64_t (*)(void))(*(void *)(v12 + 8LL * ((111 * (a11 != v11 + 4)) ^ v13))
                            - ((v13 - 509929160) & 0x1E64E3F9)
                            + 337LL))();
}

void sub_10004A270(_DWORD *a1@<X8>)
{
  *a1 = v2;
  *(_DWORD *)(v1 + 4) = -1645193524;
}

void sub_10004A328(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1755732067 * ((a1 & 0xB853BF30 | ~(a1 | 0xB853BF30)) ^ 0x996AFD14);
  uint64_t v2 = *(void *)a1;
  ((void (*)(char *, void (*)()))*(&off_1004EDED0 + (v1 ^ 0x345)))( (char *)*(&off_1004EDED0 + v1 - 872) - 4,  sub_10004D258);
  __asm { BR              X11 }

uint64_t sub_10004A3F8@<X0>(int a1@<W8>)
{
  BOOL v3 = **(void **)(v2 + 8LL * (a1 - 698)) != 0LL;
  return ((uint64_t (*)(void))(*(void *)(v1 + 8LL * ((v3 | (32 * v3)) ^ a1)) - 4LL))();
}

uint64_t sub_10004A424()
{
  return (*(uint64_t (**)(uint64_t))(v2 + 8LL * (v0 ^ 0x309)))(v1);
}

  ;
}

void sub_10004A454(uint64_t a1, uint64_t a2)
{
  __asm { BR              X8 }

uint64_t sub_10004A4DC(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((918 * (**(_BYTE **)(a2 + 8) == 0)) ^ 0x94u)) - 12LL))();
}

uint64_t sub_10004A508( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  *(void *)(*(void *)(a17 + 96) + 504LL) = v19 + 1;
  *(_DWORD *)(*(void *)(a17 + 96) + 496LL) = a19 - 1;
  int v22 = 1178560073 * ((((v21 - 152) | 0xA18E8F2E) - ((v21 - 152) & 0xA18E8F2E)) ^ 0x1B1AF74C);
  *(void *)(v21 - 144) = v21 + 0x5C6940C6B1BC6F3ELL;
  *(_DWORD *)(v21 - 136) = 1172345435 - v22;
  *(_DWORD *)(v21 - 152) = 1076023948 - v22;
  uint64_t v23 = sub_1000167EC(v21 - 152);
  BOOL v24 = a19 - 1071279739 + ((2 * (*(_DWORD *)(v21 - 184) & 0x3F)) ^ 0x28) + (*(_DWORD *)(v21 - 184) & 0x3F ^ 0xF7ECD6EB) > 0xFFFFFFBF;
  return ((uint64_t (*)(uint64_t))(*(void *)(v20 + 8LL * (((4 * v24) | (8 * v24)) ^ 0x283u)) - 12LL))(v23);
}

uint64_t sub_10004A6FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  BOOL v22 = v19 + 1552915351 < (a19 + 2020647308);
  return ((uint64_t (*)(void))(*(void *)(v21 + 8LL * ((v22 * (((v20 - 189) | 0x14) + 430)) ^ v20)) - 4LL))();
}

uint64_t sub_10004A768( int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  unsigned int v21 = (a1 + 7106602) | 0xC1808080;
  int v22 = 628203409 * ((((v20 - 152) | 0xE8E27941) - (v20 - 152) + ((v20 - 152) & 0x171D86B8)) ^ 0x6A6A7572);
  *(void *)(v20 - 152) = a16;
  *(_DWORD *)(v20 - 144) = v22 + a1 + 992;
  *(_DWORD *)(v20 - 140) = a19 - v22 - 699382058;
  uint64_t v23 = sub_10002B028(v20 - 152);
  uint64_t v24 = *(_DWORD *)(v20 - 184) & 0x3F;
  *(_BYTE *)(v20 - 252 + (v24 ^ 0x14)) = -78;
  return ((uint64_t (*)(uint64_t))(*(void *)(v19
                                                      + 8LL
}

uint64_t sub_10004A888(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return (*(uint64_t (**)(uint64_t))(v6
                                            + 8LL
                                            * (((v4 == a4 + ((v5 - 202575953) & 0xCDFFFFF7) + 63)
                                              * (((v5 + 225) | 0x400) - 1545)) | v5)))(-1615192458LL);
}

uint64_t sub_10004A8D4(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))(*(void *)(v5
                                        + 8LL
}

uint64_t sub_10004A910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 252 + a2 + a1) = 0x3232323232323232LL;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL * ((51 * (((v3 + 704899974) & 0xD5FC0F78) - 336LL == (v2 & 0x38))) ^ v3))
                            - 8LL))();
}

uint64_t sub_10004A974@<X0>(int a1@<W4>, int a2@<W8>)
{
  BOOL v10 = v3 < v4;
  *(_BYTE *)(v9 - 252 + (a2 - 1737234171)) = *(_BYTE *)(v6 + (v2 + a1))
                                                         + (~(*(unsigned __int8 *)(v6
  unsigned int v11 = v2 + 1 + v5;
  int v12 = v10 ^ (v11 < v4);
  BOOL v13 = v11 < v3;
  if (!v12) {
    BOOL v10 = v13;
  }
  return ((uint64_t (*)(void))(*(void *)(v8 + 8LL * ((491 * v10) ^ v7)) - 4LL))((v7 - 169));
}

uint64_t sub_10004A9F4(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(void))(v6 + 8LL * ((622 * (((v4 == v3) ^ (a3 + v5 - 92)) & 1)) ^ v5)))();
}

uint64_t sub_10004AA44( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t (*a25)(void, __n128, __n128, __n128, __n128, __n128), int a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, int32x4_t a33, int32x4_t a34, int32x4_t a35, int32x4_t a36)
{
  __n128 v45 = (__n128)vdupq_n_s32(0x620F0DFFu);
  uint64_t v46 = (const char *)(v43 - 252);
  __n128 v47 = (__n128)vdupq_n_s32(0x620F0DF9u);
  v48.n128_u64[0] = 0x3232323232323232LL;
  v48.n128_u64[1] = 0x3232323232323232LL;
  a27 = v41 - 16;
  uint64_t v49 = (v42 - 1);
  v50.n128_u64[0] = 0x6464646464646464LL;
  v50.n128_u64[1] = 0x6464646464646464LL;
  __n128 v51 = (__n128)vdupq_n_s32(0xC41E1BF2);
  int v53 = *(_DWORD *)(v43 - 180);
  int v52 = *(_DWORD *)(v43 - 176);
  a26 = v53;
  int v54 = *(_DWORD *)(v43 - 172);
  int v55 = *(_DWORD *)(v43 - 168);
  int v56 = *(_BYTE *)(v43 - 156) ^ 0x5F;
  if (v56 == 2)
  {
    a25 = v44;
    int8x16x4_t v103 = vld4q_s8(v46);
    int v82 = a3 + a4 + 361;
    uint8x16_t v83 = (uint8x16_t)veorq_s8(v103.val[0], (int8x16_t)v48);
    uint16x8_t v84 = vmovl_u8(*(uint8x8_t *)v83.i8);
    uint16x8_t v85 = vmovl_high_u8(v83);
    uint8x16_t v86 = (uint8x16_t)veorq_s8(v103.val[1], (int8x16_t)v48);
    _Q22 = vmovl_u8(*(uint8x8_t *)v86.i8);
    _Q21 = vmovl_high_u8(v86);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }

    uint8x16_t v91 = (uint8x16_t)veorq_s8(v103.val[2], (int8x16_t)v48);
    uint16x8_t v92 = vmovl_high_u8(v91);
    uint16x8_t v93 = vmovl_u8(*(uint8x8_t *)v91.i8);
    v103.val[0] = veorq_s8(v103.val[3], (int8x16_t)v48);
    v103.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v103.val[0]);
    v103.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[1]);
    v103.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[1].i8);
    v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
    v103.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]);
    v103.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8);
    int32x4_t v94 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v93.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v84.i8), 0x18uLL)),  v103.val[0]);
    int32x4_t v95 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v93, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v84), 0x18uLL)),  v103.val[3]);
    int32x4_t v96 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8( (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL),  (int8x16_t)vshll_n_u16(*(uint16x4_t *)v92.i8, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v85.i8), 0x18uLL)),  v103.val[1]);
    int32x4_t v97 = (int32x4_t)vorrq_s8( vorrq_s8( vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v92, 8uLL)),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v85), 0x18uLL)),  v103.val[2]);
    v103.val[0] = veorq_s8( vandq_s8((int8x16_t)v94, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)v103.val & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v103.val[3] = veorq_s8( vandq_s8((int8x16_t)v95, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)&v103.val[3] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v103.val[1] = veorq_s8( vandq_s8((int8x16_t)v96, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)&v103.val[1] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    v103.val[2] = veorq_s8( vandq_s8((int8x16_t)v97, (int8x16_t)v45),  (int8x16_t)(*(_OWORD *)&v103.val[2] & __PAIR128__(0xFFFFFF06FFFFFF06LL, 0xFFFFFF06FFFFFF06LL)));
    a35 = vaddq_s32(vsubq_s32(v96, vaddq_s32((int32x4_t)v103.val[1], (int32x4_t)v103.val[1])), (int32x4_t)v47);
    a36 = vaddq_s32(vsubq_s32(v97, vaddq_s32((int32x4_t)v103.val[2], (int32x4_t)v103.val[2])), (int32x4_t)v47);
    a33 = vaddq_s32(vsubq_s32(v94, vaddq_s32((int32x4_t)v103.val[0], (int32x4_t)v103.val[0])), (int32x4_t)v47);
    a34 = vaddq_s32(vsubq_s32(v95, vaddq_s32((int32x4_t)v103.val[3], (int32x4_t)v103.val[3])), (int32x4_t)v47);
    uint64_t v98 = (_DWORD *)&a33 + v39 + 1438604517;
    int v99 = *((_DWORD *)&a33 + (v82 ^ 0x475u ^ (unint64_t)(v39 + 788)) + 1438604517) ^ *(v98 - 3);
    unsigned int v100 = *(v98 - 16) ^ *(v98 - 14) ^ (v99 + v37 - ((2 * v99) & 0xC41E1BF2));
    HIDWORD(v101) = v100 ^ v37;
    LODWORD(v101) = v100;
    *uint64_t v98 = (v101 >> 31) + v37 - ((2 * (v101 >> 31)) & 0xC41E1BF2);
    return ((uint64_t (*)(uint64_t))(*(void *)(v40 + 8LL * ((1178 * (v41 == 1438604454)) ^ v82)) - 12LL))(v49);
  }

  else if (v56 == 1)
  {
    a25 = v44;
    int8x16x4_t v102 = vld4q_s8(v46);
    uint8x16_t v57 = (uint8x16_t)veorq_s8(v102.val[0], (int8x16_t)v48);
    uint16x8_t v58 = vmovl_high_u8(v57);
    int8x16_t v59 = (int8x16_t)vmovl_high_u16(v58);
    uint16x8_t v60 = vmovl_u8(*(uint8x8_t *)v57.i8);
    int8x16_t v61 = (int8x16_t)vmovl_high_u16(v60);
    uint8x16_t v62 = (uint8x16_t)veorq_s8(v102.val[1], (int8x16_t)v48);
    uint16x8_t v63 = vmovl_u8(*(uint8x8_t *)v62.i8);
    uint16x8_t v64 = vmovl_high_u8(v62);
    int8x16_t v65 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v63.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v60.i8));
    int8x16_t v66 = vorrq_s8((int8x16_t)vshll_high_n_u16(v63, 8uLL), v61);
    int8x16_t v67 = vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v64.i8, 8uLL), (int8x16_t)vmovl_u16(*(uint16x4_t *)v58.i8));
    int8x16_t v68 = vorrq_s8((int8x16_t)vshll_high_n_u16(v64, 8uLL), v59);
    uint8x16_t v69 = (uint8x16_t)veorq_s8(v102.val[2], (int8x16_t)v48);
    _Q22 = (int8x16_t)vmovl_high_u8(v69);
    _Q21 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v69.i8);
    int8x16_t v72 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL);
    __asm { SHLL2           V21.4S, V21.8H, #0x10 }

    int8x16_t v77 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL);
    __asm { SHLL2           V22.4S, V22.8H, #0x10 }

    v102.val[0] = veorq_s8(v102.val[3], (int8x16_t)v48);
    v102.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.val[0].i8);
    v102.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v102.val[0]);
    int32x4_t v78 = (int32x4_t)vorrq_s8( vorrq_s8(v65, v72),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[1].i8), 0x18uLL));
    v102.val[1] = vorrq_s8( vorrq_s8(v66, _Q21),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v102.val[1]), 0x18uLL));
    int32x4_t v79 = (int32x4_t)vorrq_s8( vorrq_s8(v67, v77),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v102.val[0].i8), 0x18uLL));
    int32x4_t v80 = (int32x4_t)vorrq_s8( vorrq_s8(v68, _Q22),  (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v102.val[0]), 0x18uLL));
    a35 = vaddq_s32(vsubq_s32(v79, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v79, v79), (int8x16_t)v51)), (int32x4_t)v47);
    a36 = vaddq_s32(vsubq_s32(v80, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v80, v80), (int8x16_t)v51)), (int32x4_t)v47);
    a33 = vaddq_s32(vsubq_s32(v78, (int32x4_t)vandq_s8((int8x16_t)vaddq_s32(v78, v78), (int8x16_t)v51)), (int32x4_t)v47);
    a34 = vaddq_s32( vsubq_s32( (int32x4_t)v102.val[1],  (int32x4_t)vandq_s8((int8x16_t)vaddq_s32((int32x4_t)v102.val[1], (int32x4_t)v102.val[1]), (int8x16_t)v51)),  (int32x4_t)v47);
    return ((uint64_t (*)(uint64_t, __n128))(*(void *)(v40 + 8LL
                                                                      * ((62 * (a27 + 1 != v41)) | (a3 + a4 + 129)))
                                                    - 12LL))( v49,  v45);
  }

  else
  {
    *(_DWORD *)(v43 - 180) = (v53 ^ v42) + (a26 ^ v42) + v42 - (v38 & (2 * ((v53 ^ v42) + (a26 ^ v42))));
    *(_DWORD *)(v43 - 176) = 2 * (v52 ^ v42) + v42 - (v38 & (4 * (v52 ^ v42)));
    *(_DWORD *)(v43 - 172) = 2 * (v54 ^ v42) + v42 - (v38 & (4 * (v54 ^ v42)));
    *(_DWORD *)(v43 - 168) = 2 * (v55 ^ v42) + v42 - (v38 & (4 * (v55 ^ v42)));
    a31 = 0LL;
    return v44(v49, v45, v47, v48, v50, v51);
  }

uint64_t sub_10004B8A4( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, int a21, int a22, int a23, unsigned int a24)
{
  else {
    BOOL v25 = a21 + 1538029256 > a24;
  }
}

uint64_t sub_10004B934(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  return ((uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7
                                                               + 8LL
                                                               * ((1709
                                                                 * (((v6 + 1) ^ (a5 + v5 + 63 < (v5 - 633048600 + a3 + v6 - 352))) & 1)) ^ v6))
                                                   - 12LL))( a1,  1456643678LL);
}

uint64_t sub_10004B998( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return ((uint64_t (*)(void))(*(void *)(v22
                                        + 8LL
                                        * (((~a19
                                           + v19
                                           - (unint64_t)(v21 + (v20 ^ 0x3A ^ (a3 + 214))) < 0x10)
                                          * ((v20 ^ 0x3A) - 288)) ^ v20 ^ 0x3A))
                            - 12LL))();
}

uint64_t sub_10004B9E0@<X0>(char a1@<W1>, int a2@<W3>, int a3@<W4>, char a4@<W6>, uint64_t a5@<X8>)
{
  *(_BYTE *)(v7 + a5) = *(_BYTE *)(v10 + (v5 + a3))
  return ((uint64_t (*)(void))(*(void *)(v11 + 8LL * (((a5 == 63) * v9) | (a2 + v6 + 276))) - 8LL))();
}

uint64_t sub_10004BA38( double a1, double a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  *uint64_t v10 = vaddq_s8( vsubq_s8( *(int8x16_t *)(v12 + (v9 + a9)),  vandq_s8( vaddq_s8(*(int8x16_t *)(v12 + (v9 + a9)), *(int8x16_t *)(v12 + (v9 + a9))),  a4)),  a3);
  return ((uint64_t (*)(void))(*(void *)(v13 + 8LL * (v11 + 25)) - 8LL))();
}

uint64_t sub_10004BAA0@<X0>(int a1@<W2>, int a2@<W3>, int a3@<W8>)
{
  return (*(uint64_t (**)(uint64_t))(v4
                                            + 8LL
                                            * ((1030 * ((v3 - a1 + 443 + a3 - 1615192901) < 0x38)) ^ (a2 + v3 + 455))))(-1615192458LL);
}

uint64_t sub_10004BAE4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W8>)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1 + a2;
  else {
    uint64_t v6 = 56LL;
  }
  return (*(uint64_t (**)(void))(v3
                              + 8LL
                              * ((1858
                                * (((v2 + 44) ^ (v6 - v4 + 1615192458 < (((v2 + 99) | 0x61u) ^ 0x277uLL))) & 1)) ^ v2)))();
}

uint64_t sub_10004BB60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(v5 - 252 + v3 + a1) = 0x3232323232323232LL;
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL * ((58 * (((7 * (v2 ^ 0x22Cu) - 589LL) & a2) != 8)) ^ (7 * (v2 ^ 0x22C))))
                            - ((7 * (v2 ^ 0x22C) - 147) | 9u)
                            + 439LL))();
}

uint64_t sub_10004BBCC(double a1)
{
  *(double *)(v3 + v6) = a1;
  return ((uint64_t (*)(void))(*(void *)(v7 + 8LL * (((v4 != v6) * v5) ^ v1)) - v2 + 439))();
}

uint64_t sub_10004BBF4@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(void))(v4
                              + 8LL
                              * (int)(((((v3 - 805309644) & 0xF1ECFBF7 ^ 0xFFFFFF72) + (v3 ^ (a1 + 117))) * (a2 == v2)) ^ v3)))();
}

void sub_10004BC40(uint64_t a1, uint64_t a2, char a3, char a4)
{
  int v5 = *(unsigned __int8 *)(v4 - 156) ^ 0x5F;
  if (v5 == 1)
  {
    unsigned int v10 = *(_DWORD *)(v4 - 188);
    unsigned int v9 = *(_DWORD *)(v4 - 184);
    *(_BYTE *)(v4 - 196) = ((8 * v9) ^ 0xA0) + ((a3 + 22) & 0xB7 ^ 0x87) - ((2 * ((8 * v9) ^ 0xA0)) & 0x60);
    *(_BYTE *)(v4 - 195) = ((v9 >> 5) ^ 0xF2) - 2 * (((v9 >> 5) ^ 0xF2) & 0x36 ^ (v9 >> 5) & 4) + 50;
    *(_BYTE *)(v4 - 194) = ((v9 >> 13) ^ 0x8F) - ((2 * ((v9 >> 13) ^ 0x8F)) & 0x64) + 50;
    *(_BYTE *)(v4 - 193) = ((v9 >> 21) ^ 0x39) - ((2 * ((v9 >> 21) ^ 0x39)) & 0x64) + 50;
    HIDWORD(v11) = v10 ^ 0xA;
    LODWORD(v11) = v9 ^ 0x60000000;
    *(_BYTE *)(v4 - 192) = (v11 >> 29) - ((2 * (v11 >> 29)) & 0x64) + 50;
    *(_BYTE *)(v4 - 191) = ((v10 >> 5) ^ 0xA) - 2 * (((v10 >> 5) ^ 0xA) & 0x37 ^ (v10 >> 5) & 5) + 50;
    *(_BYTE *)(v4 - 190) = ((v10 >> 13) ^ 0xA4) - ((2 * ((v10 >> 13) ^ 0xA4)) & 0x64) + 50;
    unsigned int v8 = ((v10 >> 21) ^ 0xFFFFFFBE) - ((2 * ((v10 >> 21) ^ 0xFFFFFFBE)) & 0x64) + 50;
  }

  else
  {
    if (v5 != 2) {
      goto LABEL_6;
    }
    unsigned int v8 = *(_DWORD *)(v4 - 188);
    unsigned int v6 = *(_DWORD *)(v4 - 184);
    *(_BYTE *)(v4 - 196) = ((v8 >> 21) ^ 0xBE)
                         + ~(2 * (((v8 >> 21) ^ 0xBE) & (a4 + a3 + 51) ^ ((v8 & 0x200000) != 0)))
                         + 51;
    *(_BYTE *)(v4 - 195) = ((v8 >> 13) ^ 0xA4) + (~(2 * ((v8 >> 13) ^ 0xA4)) | 0x9B) + 51;
    HIDWORD(v7) = v8 ^ 0xA;
    LODWORD(v7) = v6 ^ 0x60000000;
    *(_BYTE *)(v4 - 194) = ((v8 >> 5) ^ 0xA) - 2 * (((v8 >> 5) ^ 0xA) & 0x36 ^ (v8 >> 5) & 4) + 50;
    *(_BYTE *)(v4 - 193) = (v7 >> 29) - ((2 * (v7 >> 29)) & 0x64) + 50;
    *(_BYTE *)(v4 - 192) = ((v6 >> 21) ^ 0x39) - ((2 * ((v6 >> 21) ^ 0x39)) & 0x64) + 50;
    *(_BYTE *)(v4 - 191) = ((v6 >> 13) ^ 0x8F) - ((2 * ((v6 >> 13) ^ 0x8F)) & 0x64) + 50;
    *(_BYTE *)(v4 - 190) = ((v6 >> 5) ^ 0xF2) - ((2 * ((v6 >> 5) ^ 0xF2)) & 0x64) + 50;
    LOBYTE(v8) = ((8 * v6) ^ 0xA0) + (~(2 * ((8 * v6) ^ 0xA0)) | 0x9F) + 51;
  }

  *(_BYTE *)(v4 - 189) = v8;
LABEL_6:
  JUMPOUT(0x10004AD0CLL);
}

uint64_t sub_10004C0AC@<X0>(char a1@<W3>, uint64_t a2@<X5>, int a3@<W8>)
{
  unsigned int v8 = v5 + a3;
  unsigned int v9 = *(_DWORD *)(v7 - 252 + ((v5 + a3) & 0xFFFFFFFC) + 72);
  *(_BYTE *)(a2 + v8 + 1) = (BYTE2(v9) ^ 0x3B) - ((2 * (BYTE2(v9) ^ 0x3B)) & 0x64) + 50;
  *(_BYTE *)(a2 + v8) = (HIBYTE(v9) ^ 0x51) - (((HIBYTE(v9) ^ 0x51) << ((v4 - a1 + 1) ^ 0xE6)) & 0x64) + 50;
  *(_BYTE *)(a2 + v8 + 3) = v9 ^ 0x47;
  *(_BYTE *)(a2 + v8 + 2) = (BYTE1(v9) ^ 0xA7) - ((2 * (BYTE1(v9) ^ 0xA7)) & 0x64) + 50;
  unsigned int v10 = *(_DWORD *)(v7 - 160) - 2026446123;
  if (v5 - 1725448501 < v3 != v10 < v3) {
    BOOL v11 = v10 < v3;
  }
  else {
    BOOL v11 = v5 - 1725448501 < v10;
  }
  return ((uint64_t (*)(void))(*(void *)(v6 + 8LL * ((510 * !v11) ^ v4)) - 12LL))();
}

void sub_10004C244()
{
}

uint64_t sub_10004C24C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
  *(_DWORD *)(&a33 + a31) = 1037212390;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(v34 + 8LL * ((22 * (v33 ^ 0x350)) ^ 0x6BD)) - 8LL))( 1398064151LL,  1037212390LL,  a3,  a4,  a5,  &a33 + a31,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21,  a22,  a23,  &a33 + a31 + 392);
}

uint64_t sub_10004C300(int a1)
{
  return ((uint64_t (*)(void))(*(void *)(v2 + 8LL * ((51 * (((v3 == a1) ^ (v1 + 33)) & 1)) ^ v1)) - 4LL))();
}

uint64_t sub_10004C348( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30)
{
  unsigned int v33 = v30 & 0xDDFDFEFF;
  unsigned __int8 v34 = v33 + 12;
  int v35 = v33 - a3 + 242;
  int v36 = a4 + v33 + 67;
  BOOL v37 = a30 - 176914108 < (v32 - 1020078970);
  return (*(uint64_t (**)(void))(v31 + 8LL * ((((v34 ^ v37) & 1) * (v35 ^ 0x29)) ^ v36)))();
}

uint64_t sub_10004C5A8()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * (((((*(_DWORD *)(v1 + 48LL * (v4 + v2) + 36) == v4) ^ ((v0 & 0xBF) - 30)) & 1)
                                          * (((v0 & 0x6937FBBF) + 63) ^ 0x80)) ^ v0 & 0x6937FBBF))
                            - 12LL))();
}

uint64_t sub_10004C600( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  int v31 = v27 - a4 - 242;
  int v32 = 628203409 * ((((v30 - 152) | 0x36F0807) - ((v30 - 152) & 0x36F0807)) ^ 0x81E70434);
  *(_DWORD *)(v30 - 136) = v27 - v32 + 1552;
  *(_DWORD *)(v30 - 132) = v29 - v32 + 77623025;
  *(void *)(v30 - 128) = a14;
  *(void *)(v30 - 112) = v26;
  *(void *)(v30 - 104) = a12;
  *(void *)(v30 - 152) = a13;
  *(void *)(v30 - 144) = a11;
  uint64_t v34 = v25;
  ((void (*)(uint64_t))*(&off_1004EDED0 + v27 - 85))(v30 - 152);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 + 8LL * ((356 * (*(_DWORD *)(v30 - 120) == (v31 ^ 0xA3E3FA51) + (v27 ^ 0x3B1))) ^ v27))
                                                                                       - 8LL))( 1398064151LL,  1037212390LL,  3253530855LL,  1041436441LL,  v34,  a25);
}

uint64_t sub_10004C6FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(v7
                              + 8LL
                              * (((*(_DWORD *)(a5 + 48LL * (v8 + v5)) != 617625952)
                                * (((a3 + v6 - 835) ^ (a3 - 51)) - 51)) | v6)))();
}

uint64_t sub_10004C748@<X0>(int a1@<W3>, int a2@<W8>)
{
  return ((uint64_t (*)(void))(*(void *)(v4
                                        + 8LL
                                        * ((199
                                          * (((((v2 - 1058217968) | 0x1001084) - 2098010104) ^ a2) != v3 - 634403168)) ^ v2))
                            + 3253530843LL
                            - (v2 - a1 - 83)))();
}

uint64_t sub_10004C7B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return ((uint64_t (*)(void))(*(void *)(v6
                                        + 8LL
                                        * ((39
}

uint64_t sub_10004C840@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, int a25, uint64_t a26, int a27, int a28)
{
  *(_DWORD *)(a2 + 392) = a3;
  *(_DWORD *)(a2 + 396) = a28;
  *(void *)(a2 + 400) = a23;
  *(_DWORD *)(a2 + 408) = a25 - v32 + 1642836220;
  *(void *)(a2 + 4memset((void *)(v1 - 204), 50, 16) = v29 + (v32 - 363588221);
  int v35 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 48LL * v28 + 8))(a12, a19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33
                                                                       + 8LL
                                                                       * ((270
                                                                         * (v35
                                                                          + v30
                                                                          - (((v31 + 510469503) & 0xE192D4B6 ^ (v34 - 140)) & (2 * v35)) == v30)) ^ v31)))( 1398064151LL,  1037212390LL,  3253530855LL,  1041436441LL);
}

uint64_t sub_10004C90C()
{
  return ((uint64_t (*)(void))(*(void *)(v3
                                        + 8LL
                                        * ((39
}

uint64_t sub_10004C980(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  return ((uint64_t (*)(void))(*(void *)(v7
                                        + 8LL
}

uint64_t sub_10004C9D8@<X0>( int a1@<W2>, uint64_t a2@<X4>, _DWORD *a3@<X5>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, int a26)
{
  uint64_t v33 = &a3[6 * v27];
  v33[2] = v32;
  v33[3] = v28;
  *((void *)v33 + 2) = v30;
  v33[6] = a26;
  *a3 = v26 + 1;
  return ((uint64_t (*)(void))(*(void *)(v31
                                        + 8LL
                                        * (((*(_DWORD *)(a2 + 48LL * v29 + 32) + 749419496 < ((a4 + 1033) ^ 0x800004F8))
                                          * ((a1 + a4 - 242) ^ (a1 + 719))) ^ a4))
                            - 8LL))();
}

uint64_t sub_10004CA54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 + 8LL * (((v22 + 74 * (v21 ^ 0x4F9) == 1645153933) * (((74 * (v21 ^ 0x4F9)) ^ 0x66) + 1545)) ^ (74 * (v21 ^ 0x4F9)))) - 12LL))( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  a10,  a11,  a12,  a13,  a14,  a15,  a16,  a17,  a18,  a19,  a20,  a21);
}

uint64_t sub_10004CAB4( int a1, int a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27)
{
  BOOL v31 = v29 != a1 || *a6 != a2 + (v27 ^ a27) - a3;
  return ((uint64_t (*)(void))(*(void *)(v28 + 8LL * ((1725 * v31) ^ v27)) - 8LL))();
}

void sub_10004CAFC()
{
}

uint64_t sub_10004CB3C()
{
  return v0 ^ v1;
}

uint64_t sub_10004CB80(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 88) = 47;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 80) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_10004CBA0(uint64_t result)
{
  unint64_t v1 = 1374699841 * ((result - 2 * (result & 0xA8F7ECC532399345LL) - 0x5708133ACDC66CBBLL) ^ 0xA6FB72C95FCD8B4CLL);
  unint64_t v2 = *(void *)(result + 16) ^ v1;
  unint64_t v3 = *(void *)(result + 8) - v1;
  BOOL v4 = v2 >= v3;
  BOOL v5 = (uint64_t)v2 < (uint64_t)v3;
  int v6 = !v4;
  if (((*(_DWORD *)(result + 24) + 1374699841 * (((_DWORD)result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C)) & 1) == 0) {
    BOOL v5 = v6;
  }
  BOOL v7 = !v5;
  uint64_t v8 = 32LL;
  if (!v7) {
    uint64_t v8 = 28LL;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(result + 40) ^ (1374699841
                                                       * ((result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C)) ^ *(_DWORD *)(result + v8) ^ (1374699841 * ((result - 2 * (result & 0x32399345) + 842634053) ^ 0x5FCD8B4C));
  return result;
}

uint64_t sub_10004CC30(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 24);
  return 0LL;
}

uint64_t sub_10004CC48(uint64_t result)
{
  uint64_t v1 = 1178560073 * ((2 * (result & 0x64AC438940A5398ALL) - result + 0x1B53BC76BF5AC675LL) ^ 0xAFEC9E05CEBE17LL);
  unint64_t v2 = *(void *)(result + 16) - v1;
  unint64_t v3 = *(void *)(result + 40) + v1;
  BOOL v4 = v3 >= v2;
  BOOL v5 = v3 != v2;
  int v6 = v4;
  if (((*(_DWORD *)(result + 28) ^ (1178560073 * ((2 * (result & 0x40A5398A) - (_DWORD)result - 1084569995) ^ 0x5CEBE17))) & 1) != 0) {
    int v7 = v6;
  }
  else {
    int v7 = v5;
  }
  BOOL v8 = v7 == 0;
  uint64_t v9 = 4LL;
  if (!v8) {
    uint64_t v9 = 24LL;
  }
  *(_DWORD *)uint64_t result = (*(_DWORD *)(result + v9)
                     - 1178560073 * ((2 * (result & 0x40A5398A) - result - 1084569995) ^ 0x5CEBE17)) ^ (*(_DWORD *)(result + 8) - 1178560073 * ((2 * (result & 0x40A5398A) - result - 1084569995) ^ 0x5CEBE17));
  return result;
}

uint64_t sub_10004CCF0(int *a1)
{
  unsigned int v2 = a1[1] - 108757529 * (a1 ^ 0xE09C622B);
  uint64_t result = ((uint64_t (*)(char *, void))*(&off_1004EDED0 + (int)(v2 - 1695027228)))( (char *)*(&off_1004EDED0 + (int)(v2 - 1695027372)) - 12,  *(&off_1004EDED0 + (int)(v2 ^ 0x6508107F)));
  int v4 = *(_DWORD *)*(&off_1004EDED0 + (int)(v2 ^ 0x650810DA));
  if ((_DWORD)result) {
    int v4 = -1645193401;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_10004CD8C(uint64_t result)
{
  unint64_t v1 = 235795823 * ((~result & 0x2A1D36B9A93A3D3LL | result & 0xFD5E2C94656C5C2CLL) ^ 0xA1169950E3EEA8ALL);
  uint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = v2 ^ v1;
  BOOL v4 = *(void *)result == v2;
  BOOL v5 = (*(void *)result ^ v1) > v3;
  if (((*(_DWORD *)(result + 8) + (_DWORD)v1) & 1) != 0) {
    BOOL v6 = v5;
  }
  else {
    BOOL v6 = v4;
  }
  BOOL v7 = !v6;
  uint64_t v8 = 28LL;
  if (!v7) {
    uint64_t v8 = 32LL;
  }
  *(_DWORD *)(result + 36) = *(_DWORD *)(result + 12) ^ v1 ^ (*(_DWORD *)(result + v8) - v1);
  return result;
}

_BYTE *sub_10004CE24(_BYTE *result, char a2, unint64_t a3)
{
  unint64_t v3 = -(int)result & 7;
  if (v3 > a3) {
    LODWORD(v3) = a3;
  }
  switch((int)v3)
  {
    case 1:
      goto LABEL_10;
    case 2:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 4:
      goto LABEL_7;
    case 5:
      goto LABEL_6;
    case 6:
      goto LABEL_5;
    case 7:
      *result++ = a2;
LABEL_5:
      *result++ = a2;
LABEL_6:
      *result++ = a2;
LABEL_7:
      *result++ = a2;
LABEL_8:
      *result++ = a2;
LABEL_9:
      *result++ = a2;
LABEL_10:
      *result++ = a2;
      break;
    default:
      break;
  }

  unint64_t v4 = a3 - v3;
  unint64_t v6 = v4;
  unint64_t v5 = v4 & 7;
  switch(v6)
  {
    case 0uLL:
      return result;
    case 1uLL:
      goto LABEL_20;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      goto LABEL_18;
    case 4uLL:
      goto LABEL_17;
    case 5uLL:
      goto LABEL_16;
    case 6uLL:
      goto LABEL_15;
    case 7uLL:
      *result++ = a2;
LABEL_15:
      *result++ = a2;
LABEL_16:
      *result++ = a2;
LABEL_17:
      *result++ = a2;
LABEL_18:
      *result++ = a2;
LABEL_19:
      *result++ = a2;
LABEL_20:
      *uint64_t result = a2;
      break;
    default:
      uint64_t result = (_BYTE *)((uint64_t (*)(void))((char *)&loc_10004CEB4 + 4 * byte_1003BD527[(v5 >> 3) & 7]))();
      break;
  }

  return result;
}

uint64_t sub_10004CF18(uint64_t a1)
{
  int v2 = 628203409 * (((a1 | 0xBB8CAEEC) - (a1 & 0xBB8CAEEC)) ^ 0x3904A2DF);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 20) + v2;
  int v7 = *(_DWORD *)a1 + 2024873124 + v2;
  unsigned int v8 = 235795823
     * (((&v10 | 0xDE5284D5) - &v10 + (&v10 & 0x21AD7B28)) ^ 0x4AFFCD8C);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = v4;
  uint64_t v16 = v3;
  unsigned int v11 = v8 + (v6 ^ 0x1C576372) + 2142240416 + ((2 * v6) & 0xBEFD8FFE ^ 0x8651091A);
  uint64_t v10 = v5;
  int v15 = v8 ^ (v7 + 1820);
  uint64_t result = ((uint64_t (*)(uint64_t *))((char *)*(&off_1004EDED0 + v7) - 4))(&v10);
  *(_DWORD *)(a1 + 40) = v14;
  return result;
}

uint64_t sub_10004D074(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 64) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_10004D090(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_10004D0A8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 48) = *(void *)(a2 + 8);
  return 0LL;
}

uint64_t sub_10004D0C0(uint64_t a1)
{
  int v2 = 460628867 * (((a1 | 0x167EA26) - a1 + (a1 & 0xFE9815D9)) ^ 0x4DF1685B);
  int v3 = *(_DWORD *)(a1 + 20) - v2;
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16) - v2 - ((2 * (*(_DWORD *)(a1 + 16) - v2) + 50606586) & 0x52C224C2) - 1427952802;
  int v7 = -400126375 * (*(_DWORD *)(a1 + 24) + v2) - 1847956774;
  unsigned int v8 = 1755732067
     * (((&v10 | 0x8E52AAAD) - &v10 + (&v10 & 0x71AD5550)) ^ 0x50941776);
  unsigned int v10 = (v7 ^ 0xFFDDE664) + v8 + ((2 * v7) & 0xFFBBCCC8) + 1370734048;
  int v12 = v8 ^ (v3 - 2138962107);
  uint64_t v13 = v4;
  int v14 = v6 ^ v8;
  uint64_t v11 = v5;
  uint64_t result = ((uint64_t (*)(unsigned int *))((char *)*(&off_1004EDED0 + (v3 ^ 0x7F7DFD65)) - 8))(&v10);
  *(_DWORD *)(a1 + 28) = v15;
  return result;
}

void sub_10004D258()
{
  unint64_t v0 = qword_100572270 ^ (unint64_t)&v1 ^ qword_100572260;
  qword_100572270 = 536075833 * v0 + 0x3076D37E12EEFF1CLL;
  qword_100572260 = 536075833 * (v0 ^ 0x86C548EE6B3237FCLL);
  unsigned int v3 = 1951 - 1759421093 * ((2 * (&v2 & 0x1AB9A500) - &v2 + 1699109631) ^ 0xD63BEAAB);
  uint64_t v2 = (uint64_t)*(&off_1004EDED0
  sub_100049EFC((uint64_t)&v2);
}

uint64_t sub_10004D380(uint64_t result)
{
  unint64_t v1 = 1755732067 * ((2 * (result & 0x155053FA18C8728CLL) - result + 0x6AAFAC05E7378D73LL) ^ 0xB7040B3A39F130A8LL);
  unint64_t v2 = *(void *)(result + 16) ^ v1;
  unint64_t v3 = *(void *)(result + 8) - v1;
  BOOL v4 = v3 > v2;
  BOOL v5 = v3 == v2;
  int v6 = v4;
  if (((*(_DWORD *)(result + 32) - 1755732067 * ((2 * (result & 0x18C8728C) - (_DWORD)result - 415789709) ^ 0x39F130A8)) & 1) != 0) {
    int v7 = v6;
  }
  else {
    int v7 = v5;
  }
  if (v7) {
    int v8 = *(_DWORD *)(result + 24) + 1755732067 * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8);
  }
  else {
    int v8 = *(_DWORD *)(result + 28) - 1755732067 * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8);
  }
  *(_DWORD *)uint64_t result = *(_DWORD *)(result + 4) ^ (1755732067
                                               * ((2 * (result & 0x18C8728C) - result - 415789709) ^ 0x39F130A8)) ^ v8;
  return result;
}

uint64_t sub_10004D420(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (235795823 * ((2 * (a1 & 0x5AD4AFC8) - a1 + 623595575) ^ 0xB186196E));
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  unsigned int v5 = v1
     + 1225351577
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  return ((uint64_t (*)(unsigned int *))*(&off_1004EDED0 + (int)(v1 ^ 0x8FCD81B4)))(&v5);
}

uint64_t sub_10004D524(uint64_t a1)
{
  int v2 = 1374699841 * (a1 ^ 0x6DF41809);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)a1;
  unsigned int v7 = 1224239923 * ((((2 * &v10) | 0x912C61DA) - &v10 + 929681171) ^ 0x3A25CD3A);
  int v8 = (*(_DWORD *)(a1 + 8) ^ v2) - 368400168;
  int v11 = v2 + *(_DWORD *)(a1 + 56) - v7 - 707766453;
  int v16 = v8 + v7 + 869;
  uint64_t v13 = v3;
  uint64_t v14 = v5;
  uint64_t v10 = v6;
  uint64_t v12 = v4;
  uint64_t result = ((uint64_t (*)(uint64_t *))((char *)*(&off_1004EDED0 + v8) - 4))(&v10);
  *(_DWORD *)(a1 + 24) = v15;
  return result;
}

void sub_10004D63C()
{
  unint64_t v0 = (unint64_t)&v2[qword_100572260 ^ qword_100571698];
  qword_100571698 = 536075833 * v0 - 0x793AB71194CDC804LL;
  qword_100572260 = 536075833 * (v0 ^ 0x86C548EE6B3237FCLL);
  uint64_t v3 = (char *)*(&off_1004EDED0
  unsigned int v4 = 1951 - 1759421093 * (((&v3 | 0x62E542B1) - (&v3 & 0x62E542B1)) ^ 0xD198F2E5);
  sub_100049EFC((uint64_t)&v3);
  unsigned int v4 = 1951 - 1759421093 * ((((2 * &v3) | 0xD19EEED6) - &v3 - 1758426987) ^ 0xDBB2C73F);
  uint64_t v3 = (char *)*(&off_1004EDED0
               + ((57 * (qword_100571698 ^ 0xFC ^ qword_100572260)) ^ byte_1003C97C0[byte_1003C4AD0[(57 * (qword_100571698 ^ 0xFC ^ qword_100572260))] ^ 0x15])
               + 80)
     - 4;
  sub_100049EFC((uint64_t)&v3);
  unsigned int v1 = 1225351577
     * (((&v3 ^ 0x9D172845 | 0xE551A89D)
  LODWORD(v3) = v1 + 336;
  BYTE4(v3) = v1 ^ 0x7D;
  sub_1000160B4((uint64_t)&v3);
}

void sub_10004D864(_DWORD *a1)
{
  uint64_t v1 = *(void *)*(&off_1004EDED0
                  + (int)((*a1 ^ (535753261
  unsigned int v3 = (3804331 * (&v2 ^ 0x7ED525F6)) ^ ((*a1 ^ (535753261
                                                             * ((1711628207
                                                               - (a1 | 0x66055FAF)
  uint64_t v2 = v1;
  sub_10002938C((uint64_t)&v2);
}

id sub_10004DE84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _emitAudioTopologyForRequestId:*(void *)(a1 + 40)];
}

void sub_10004E5A8(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  id v3 = (id)objc_claimAutoreleasedReturnValue([v1 getDevicesDiscoveredTypeCountForUserID:a1[6]]);
  [v1 _emitDevicesDiscoveredEventForRequestId:v2 deviceTypeCount:v3];
}

uint64_t start(int a1, uint64_t *a2)
{
  unsigned int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (a1 >= 1)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *a2++;
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
      -[NSMutableArray addObject:](v4, "addObject:", v7);

      --v5;
    }

    while (v5);
  }

  id v8 = [[SiriCoreSiriDaemonLaunchContext alloc] initWithLaunchArguments:v4];
  uint64_t v9 = objc_autoreleasePoolPush();
  kdebug_trace(722470188LL, 0LL, 0LL, 0LL, 0LL);
  if (!_set_user_dir_suffix("com.apple.assistantd") || !confstr(65537, v21, 0x400uLL))
  {
    uint64_t v13 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = v13;
      int v15 = __error();
      int v16 = strerror(*v15);
      int v17 = 136315394;
      int v18 = "_ADEnterSandbox";
      __int16 v19 = 2082;
      int v20 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Failed to initialize temp directory.  errno: %{public}s\n",  (uint8_t *)&v17,  0x16u);
    }

    abort();
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  if ([v8 daemonType] == (id)1) {
    [v10 configureForDaemon];
  }
  [v10 logEventWithType:101 context:0];

  objc_autoreleasePoolPop(v9);
  int v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
  [v11 runWithLaunchContext:v8];

  return 0LL;
}

uint64_t sub_10004ED30(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10004ED44(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentHome]);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    if (*(_BYTE *)(a1 + 48)) {
      uint64_t v4 = 3LL;
    }
    else {
      uint64_t v4 = 1LL;
    }
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = @"HS+JS";
      if (!v3) {
        uint64_t v10 = @"HS";
      }
      int v11 = 136315394;
      uint64_t v12 = "-[ADHomeInfoManager(VoiceActivation) setAllowJustSiriHomeKitSetting:withCompletion:queue:]_block_invoke_2";
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Setting Siri Phrase Options for the home to %@",  (uint8_t *)&v11,  0x16u);
    }

    [v2 updateSiriPhraseOptions:v4 completion:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315138;
      uint64_t v12 = "-[ADHomeInfoManager(VoiceActivation) setAllowJustSiriHomeKitSetting:withCompletion:queue:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s currentHome is nil",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v9 = -[NSError initWithDomain:code:userInfo:]( v8,  "initWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  5000LL,  0LL);
    (*(void (**)(uint64_t, NSError *))(v7 + 16))(v7, v9);
  }
}

void sub_10004EEFC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentHome]);
  id v3 = v2;
  if (v2) {
    [v2 siriPhraseOptions];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10004EF60(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10004EFF0;
  v5[3] = &unk_1004EE600;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  char v9 = *(_BYTE *)(a1 + 56);
  id v8 = *(id *)(a1 + 48);
  [v2 getHomeManagerWithCompletion:v5];
}

void sub_10004EFF0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentHome]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueIdentifier]);
  +[ADRemoraHomeKitSettingsManager setAllowHeySiriHomeKitSettingForAccessory:forHomeId:homeManager:value:completion:]( &OBJC_CLASS___ADRemoraHomeKitSettingsManager,  "setAllowHeySiriHomeKitSettingForAccessory:forHomeId:homeManager:value:completion:",  v7,  v6,  v4,  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48));
}

void sub_10004F894(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setAllowsAWDL:v3];
  [v4 setAllowsBLE:a1[5]];
  [v4 setAllowsInfraWiFi:a1[6]];
  [v4 setAllowsBTPipe:a1[7]];
  [v4 setAllowsForceBLE:a1[8]];
  [v4 setAllowsForceAWDL:a1[9]];
  [v4 setNoL2Cap:a1[10]];
}

void sub_10005016C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000502A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000508F4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 48)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(_BYTE *)(v1 + 49) != 0;
  }
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = v2;
  return result;
}

id sub_100050924(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetDetector];
}

void sub_10005092C(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _osmedDetector]);

  if (v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _osmedDetector]);
    _AFPreferencesSpokenNotificationTriggerlessReplyTresholdTime();
    objc_msgSend(v3, "updateAttendingThreshold:");
  }

id sub_100050998(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _attendingStoppedWithReason:*(void *)(a1 + 40)];
}

void sub_1000509A4(uint64_t a1)
{
  BOOL v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v10 = "-[ADAnnounceSpeechManager _startAttendingForSpeechPauseWithType:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s OPPSPK - Listening for voice pause", buf, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AFHeadphonesAnnouncementRequestCapabilityProvider provider]( &OBJC_CLASS___ADHeadphonesAnnouncementRequestCapabilityProvider,  "provider"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100050AC4;
  v5[3] = &unk_1004EE760;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  uint64_t v8 = *(void *)(a1 + 64);
  __int128 v7 = *(_OWORD *)(a1 + 48);
  [v3 fetchCurrentlyRoutedHeadphonesCBUUIDWithCompletion:v5];
}

void sub_100050AC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100050B74;
  v8[3] = &unk_1004EE738;
  id v9 = v3;
  id v6 = v4;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v6;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100050B74(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    __int128 v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      int v21 = "-[ADAnnounceSpeechManager _startAttendingForSpeechPauseWithType:completion:]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s No preferred external headphones route found",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    id v4 = (CSOpportuneSpeakListenerOption *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 7201LL));
    (*(void (**)(uint64_t, void, CSOpportuneSpeakListenerOption *))(v13 + 16))(v13, 0LL, v4);
    goto LABEL_9;
  }

  if (*(void *)(a1 + 72) == 1LL)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      int v21 = "-[ADAnnounceSpeechManager _startAttendingForSpeechPauseWithType:completion:]_block_invoke";
      __int16 v22 = 2112;
      uint64_t v23 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s OPPSPK - Chose device %@", buf, 0x16u);
      BOOL v2 = *(void **)(a1 + 32);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 32LL), v2);
    *(void *)(*(void *)(a1 + 40) + 24LL) = *(void *)(a1 + 72);
    id v4 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakListenerOption);
    -[CSOpportuneSpeakListenerOption setDeviceId:](v4, "setDeviceId:", *(void *)(*(void *)(a1 + 40) + 32LL));
    -[CSOpportuneSpeakListenerOption setOpportuneSpeakListeningType:](v4, "setOpportuneSpeakListeningType:", 0LL);
    *(_BYTE *)(*(void *)(a1 + 40) + 48LL) = 1;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _osmedDetector]);
    float v6 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    float v7 = *(double *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    v18[2] = sub_100050E6C;
    v18[3] = &unk_1004EE6E8;
    uint64_t v8 = *(void **)(a1 + 48);
    v18[4] = *(void *)(a1 + 40);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    id v19 = v8;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100050EE8;
    v16[3] = &unk_1004EE710;
    id v9 = *(void **)(a1 + 48);
    v16[4] = *(void *)(a1 + 40);
    id v17 = v9;
    *(float *)&double v10 = v6;
    *(float *)&double v11 = v7;
    [v5 listenForPauseWithOptions:v4 forPause:1 maxDelay:v18 stopOnDetection:v16 executeOnSuccess:v10 onFail:v11];

LABEL_9:
    return;
  }

  uint64_t v14 = *(void *)(a1 + 48);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 7202LL));
  (*(void (**)(uint64_t, void))(v14 + 16))(v14, 0LL);
}

uint64_t sub_100050E6C(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10005102C;
  v6[3] = &unk_1004FD990;
  id v4 = v2;
  v6[4] = *(void *)(a1 + 32);
  id v7 = v4;
  dispatch_async(v3, v6);

  return 0LL;
}

uint64_t sub_100050EE8(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100050F64;
  v6[3] = &unk_1004FD990;
  id v4 = v2;
  v6[4] = *(void *)(a1 + 32);
  id v7 = v4;
  dispatch_async(v3, v6);

  return 0LL;
}

uint64_t sub_100050F64(uint64_t a1)
{
  BOOL v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADAnnounceSpeechManager _startAttendingForSpeechPauseWithType:completion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s OPPSPK - Voice pause not detected",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0LL, 0LL);
  }
  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 0;
  return result;
}

uint64_t sub_10005102C(uint64_t a1)
{
  BOOL v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADAnnounceSpeechManager _startAttendingForSpeechPauseWithType:completion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s OPPSPK - Voice pause detected",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 0;
  return result;
}

void sub_1000510F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000511B0;
  block[3] = &unk_1004EE698;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  __int128 v11 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_1000511B0(void *a1)
{
  BOOL v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(*(void *)(a1[7] + 8LL) + 24LL);
  if (v2) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (v4)
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[ADAnnounceSpeechManager _startAttendingForSpeechWithType:completion:]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s No preferred external headphones route found",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v9 = a1[6];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  7201LL,  0LL));
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }

  else
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v22 = 0x3032000000LL;
    uint64_t v23 = sub_100051418;
    uint64_t v24 = sub_100051428;
    id v25 = 0LL;
    if (!v3) {
      id v25 = v2;
    }
    uint64_t v13 = 0LL;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000LL;
    [(id)objc_opt_class(a1[5]) _bargeInTimeThresholdForType:a1[8]];
    uint64_t v16 = v5;
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = v14[3];
      *(_DWORD *)id v17 = 136315394;
      int v18 = "-[ADAnnounceSpeechManager _startAttendingForSpeechWithType:completion:]_block_invoke";
      __int16 v19 = 2048;
      uint64_t v20 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s Using %f seconds for detection threshold",  v17,  0x16u);
    }

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100051430;
    v12[3] = &unk_1004EE670;
    v12[4] = a1[5];
    v12[5] = &buf;
    uint64_t v7 = a1[8];
    v12[6] = a1[7];
    v12[7] = &v13;
    v12[8] = v7;

    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&buf, 8);
  }

void sub_1000513F8(_Unwind_Exception *a1)
{
}

uint64_t sub_100051418(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100051428(uint64_t a1)
{
}

void sub_100051430(uint64_t a1)
{
  BOOL v2 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakListenerOption);
  -[CSOpportuneSpeakListenerOption setDeviceId:]( v2,  "setDeviceId:",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  -[CSOpportuneSpeakListenerOption setOpportuneSpeakListeningType:]( v2,  "setOpportuneSpeakListeningType:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _osmedDetector]);
  uint64_t v4 = *(void *)(a1 + 64);
  double v5 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  *(float *)&double v5 = v5;
  _DWORD v7[2] = sub_100051528;
  v7[3] = &unk_1004EE648;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10005157C;
  v6[3] = &unk_1004F28A8;
  v6[4] = v8;
  [v3 listenForUserSpeechWithOptions:v2 forVoice:0 maxDelay:v7 stopOnDetection:v6 executeOnSuccess:v5 onFail:COERCE_DOUBLE(1118437376)];
}

id sub_100051528(uint64_t a1, float a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56LL));
  *(float *)&double v5 = a2;
  id v6 = [WeakRetained speechManager:*(void *)(a1 + 32) detectedSpeechForListeningType:*(void *)(a1 + 40) atHostTime:1 shouldHandleActivation:v5];

  return v6;
}

uint64_t sub_10005157C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  BOOL v2 = *(dispatch_queue_s **)(v1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000515D8;
  block[3] = &unk_1004FD940;
  void block[4] = v1;
  dispatch_async(v2, block);
  return 0LL;
}

void sub_1000515D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56LL));
  [WeakRetained speechManager:*(void *)(a1 + 32) didStopUnexpectlyWithError:0];

  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 0;
}

void sub_10005161C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100051690;
  v3[3] = &unk_1004FC6E0;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  [v1 _startAttendingForSpeechPauseWithType:v2 completion:v3];
}

uint64_t sub_100051690(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000516A4(void *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10005171C;
  v3[3] = &unk_1004FD6F0;
  uint64_t v1 = (void *)a1[5];
  uint64_t v2 = a1[6];
  id v4 = (id)a1[4];
  id v5 = v1;
  [v4 _startAttendingForSpeechWithType:v2 completion:v3];
}

void sub_10005171C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000517AC;
  v7[3] = &unk_1004FD990;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1000517AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000558CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

uint64_t sub_1000559E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000559F4(uint64_t a1)
{
}

void sub_1000559FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADSyncBlacklist sharedInstance](&OBJC_CLASS___ADSyncBlacklist, "sharedInstance"));
  [v7 filterBlacklistedKeys:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appSources:v5];

  if ([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count]
    || [v5 count]
    || [v6 count]
    || *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    [*(id *)(a1 + 32) _requestAnchorsForKeys:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appSources:v5 watchAppSources:v6 forceReset:*(unsigned __int8 *)(a1 + 64) includeAllKnownAnchors:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) reasons:*(void *)(a1 + 40)];
  }

  else
  {
    id v8 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      uint64_t v10 = "-[ADCommandCenter(Sync) _sync_syncAnchorKeys:forceReset:reasons:forSyncPromise:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Nothing to sync", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_100055B5C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100055C44;
  block[3] = &unk_1004FCBB0;
  id v13 = v5;
  id v8 = a1[5];
  id v9 = a1[4];
  id v14 = v8;
  id v15 = v9;
  id v16 = v6;
  id v17 = a1[6];
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100055C44(uint64_t a1)
{
  if (![*(id *)(a1 + 32) count])
  {
    id v6 = @"com.apple.siri.appIntentSupportPolicyAndVocab";
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
    sub_1002D6A38(v2);

    if (*(void *)(a1 + 40)) {
      [*(id *)(*(void *)(a1 + 48) + 800) removeObject:@"com.apple.siri.appIntentSupportPolicyAndVocab"];
    }
  }

  if (![*(id *)(a1 + 56) count])
  {
    id v5 = @"com.apple.siri.appIntentSupportPolicyAndVocab.nano";
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v5, 1LL));
    sub_1002D6A38(v3);

    if (*(void *)(a1 + 40)) {
      [*(id *)(*(void *)(a1 + 48) + 800) removeObject:@"com.apple.siri.appIntentSupportPolicyAndVocab.nano"];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_100055D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_100055DF8;
    v5[3] = &unk_1004FD968;
    void v5[4] = *(void *)(a1 + 32);
    id v6 = v3;
    dispatch_async(v4, v5);
  }
}

id sub_100055DF8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_sync_syncAnchorKeys:forceReset:reasons:forSyncPromise:",  *(void *)(a1 + 40),  0,  &off_100512FA0,  0);
}

void sub_100055E14(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] _queue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100055ED8;
  v8[3] = &unk_1004FD470;
  id v9 = v3;
  id v5 = a1[5];
  id v6 = a1[4];
  id v10 = v5;
  id v11 = v6;
  id v12 = a1[6];
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_100055ED8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v5 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", *(void *)(a1 + 32));
    uint64_t v2 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", *(void *)(a1 + 40));
    if (-[NSSet count](v2, "count"))
    {
      if (!-[NSSet isSubsetOfSet:](v5, "isSubsetOfSet:", v2)) {
        objc_msgSend( *(id *)(a1 + 48),  "_sync_syncAnchorKeys:forceReset:reasons:forSyncPromise:",  *(void *)(a1 + 32),  0,  &off_100512F88,  0);
      }
    }
  }

  else if (([*(id *)(a1 + 56) isSyncing] & 1) != 0 {
         || (objc_msgSend(*(id *)(a1 + 48), "_sync_isRequestBlockingSyncVerification") & 1) != 0
  }
         || (id v3 = *(void **)(a1 + 48), !v3[104]))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _currentClient]);

    if (!v4) {
      [*(id *)(a1 + 48) _resetServices];
    }
    [*(id *)(a1 + 48) _shutdownSessionWhenIdle];
  }

  else
  {
    _[v3 _prepareAndStartSyncVerification];
  }

void sub_100055FD8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 841))
  {
    id v3 = (id *)(v2 + 776);
    id v4 = a2;
    id WeakRetained = objc_loadWeakRetained(v3);
    [WeakRetained adSyncVerificationPartialResult:v4];
  }

void sub_10005603C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    uint64_t v10 = AFSynapseSyncAnchorKey;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _emptyVerificationSyncAnchorForKey:v10 appBundleID:v5 syncSlotName:*(void *)(*((void *)&v13 + 1) + 8 * (void)v11)]);
        if (v12) {
          [*(id *)(a1 + 40) addObject:v12];
        }

        id v11 = (char *)v11 + 1;
      }

      while (v8 != v11);
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v8);
  }
}

void sub_10005617C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = objc_alloc_init(&OBJC_CLASS___SASyncGetCachedSyncAnchorsResponse);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interactionId]);
  -[SASyncGetCachedSyncAnchorsResponse setInteractionId:](v6, "setInteractionId:", v4);

  -[SASyncGetCachedSyncAnchorsResponse setAnchors:](v6, "setAnchors:", v3);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, SASyncGetCachedSyncAnchorsResponse *, void))(v5 + 16))(v5, v6, 0LL);
  }
}

void sub_100056210(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___SACommandIgnored);
    [v2 setRefId:*(void *)(a1 + 32)];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10005627C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100056364;
  v10[3] = &unk_1004F7BE0;
  id v11 = v3;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v15 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v14 = v4;
  id v16 = *(id *)(a1 + 56);
  id v8 = v4;
  id v9 = v3;
  dispatch_async(v8, v10);
}

void sub_100056364(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 40) _resetSyncVerification];
    id v2 = objc_alloc_init(&OBJC_CLASS___SASyncGetAnchorsResponse);
    id v3 = dispatch_group_create();
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sources]);
    id v5 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v25;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v25 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)v8);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _serviceManager]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 serviceForSyncAnchorKey:v9]);

          if (v11)
          {
            dispatch_group_enter(v3);
            id v12 = objc_alloc_init(&OBJC_CLASS___AFSyncInfo);
            [v12 setKey:v9];
            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472LL;
            v19[2] = sub_100056604;
            v19[3] = &unk_1004EE7D8;
            id v20 = *(id *)(a1 + 56);
            uint64_t v21 = v9;
            uint64_t v22 = v2;
            uint64_t v23 = v3;
            [v11 fetchSyncSnapshotForInfo:v12 handler:v19];
          }

          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v24 objects:v28 count:16];
      }

      while (v6);
    }

    id v13 = *(dispatch_queue_s **)(a1 + 56);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000566B4;
    v16[3] = &unk_1004FD990;
    id v14 = *(id *)(a1 + 72);
    id v17 = v2;
    id v18 = v14;
    id v15 = v2;
    dispatch_group_notify(v3, v13, v16);
  }

void sub_100056604(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000566D4;
  v7[3] = &unk_1004FD470;
  id v5 = *(dispatch_queue_s **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1000566B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0LL);
  }
  return result;
}

void sub_1000566D4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___SASyncAnchor);
    -[SASyncAnchor setKey:](v2, "setKey:", *(void *)(a1 + 40));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) validity]);
    -[SASyncAnchor setValidity:](v2, "setValidity:", v3);

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) anchor]);
    -[SASyncAnchor setGeneration:](v2, "setGeneration:", v4);

    -[SASyncAnchor setCount:](v2, "setCount:", [*(id *)(a1 + 32) count]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) anchors]);
    id v6 = v5;
    if (v5) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSArray);
    }
    id v8 = v7;

    uint64_t v9 = *(void **)(a1 + 48);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByAddingObject:](v8, "arrayByAddingObject:", v2));
    [v9 setAnchors:v10];

    id v11 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = 136315650;
      id v14 = "-[ADCommandCenter(Sync) _saSyncGetAnchors:completion:]_block_invoke_5";
      __int16 v15 = 2112;
      uint64_t v16 = v12;
      __int16 v17 = 2112;
      id v18 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Got snapshot for %@: %@",  (uint8_t *)&v13,  0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100056880(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v23 = "-[ADCommandCenter(Sync) _requestAnchorsForKeys:appSources:watchAppSources:forceReset:includeAllKnownAnchors:re"
          "asons:]_block_invoke";
    __int16 v24 = 2112;
    uint64_t v25 = v3;
    __int16 v26 = 2112;
    uint64_t v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting sync %@ for reasons %@", buf, 0x20u);
  }

  dispatch_suspend(*(dispatch_object_t *)(a1 + 48));
  id v5 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100056AC0;
  v20[3] = &unk_1004FB890;
  id v21 = *(id *)(a1 + 48);
  id v6 = -[AFSafetyBlock initWithBlock:](v5, "initWithBlock:", v20);
  dispatch_time_t v7 = dispatch_time(0LL, 15000000000LL);
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100056B70;
  block[3] = &unk_1004FD940;
  uint64_t v9 = v6;
  __int16 v19 = v9;
  dispatch_after(v7, v8, block);

  id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _queue]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100056B78;
  v13[3] = &unk_1004F7698;
  id v11 = *(void **)(a1 + 64);
  v13[4] = *(void *)(a1 + 56);
  id v14 = v11;
  __int16 v15 = v9;
  id v16 = *(id *)(a1 + 32);
  id v17 = *(id *)(a1 + 72);
  uint64_t v12 = v9;
  dispatch_async(v10, v13);
}

void sub_100056AC0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[ADCommandCenter(Sync) _requestAnchorsForKeys:appSources:watchAppSources:forceReset:includeAllKnownAnchors:rea"
         "sons:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Resuming SyncAnchorsQueue",  (uint8_t *)&v3,  0xCu);
  }

  dispatch_resume(*(dispatch_object_t *)(a1 + 32));
}

id sub_100056B70(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100056B78(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100056C14;
  v4[3] = &unk_1004FAAD0;
  id v5 = *(id *)(a1 + 48);
  [v2 _sendCommandToServer:v3 opportunistically:0 completion:v4];
  [*(id *)(a1 + 32) _addOutstandingAnchorsRequestId:*(void *)(a1 + 56)];
  [*(id *)(a1 + 64) setGetAnchorsRequest:*(void *)(a1 + 40)];
}

id sub_100056C14(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100056C1C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100056E50;
  v9[3] = &unk_1004FD470;
  id v10 = a3;
  id v11 = v5;
  id v6 = *(dispatch_queue_s **)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 48);
  id v7 = v5;
  id v8 = v10;
  dispatch_async(v6, v9);
}

uint64_t sub_100056CE8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _appMetaDataListFromVocabSources:*(void *)(a1 + 48) appIdentifyingInfoList:*(void *)(a1 + 56)]);
  [v2 addObjectsFromArray:v3];

  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 64);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)v8);
        id v10 = objc_alloc_init(&OBJC_CLASS___SASyncAppMetaData);
        objc_msgSend(v10, "setDeveloperMode:", &__kCFBooleanTrue, (void)v12);
        [v10 setAppIdentifyingInfo:v9];
        [*(id *)(a1 + 72) addObject:v10];

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_100056E50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v25 = "-[ADCommandCenter(Sync) _fetchAllAppSourcesForSyncingWithCustomVocabInfo:completion:]_block_invoke_2";
      __int16 v26 = 2114;
      uint64_t v27 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error finding all Siri Extensions %{public}@",  buf,  0x16u);
    }
  }

  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v20;
    *(void *)&__int128 v6 = 136315138LL;
    __int128 v18 = v6;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v11 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "bundleIdentifier", v18, (void)v19));
        if (v11 == @"com.apple.ShortcutsActions"
          || (__int128 v12 = v11) != 0LL
          && (unsigned int v13 = [@"com.apple.ShortcutsActions" isEqual:v11],
              v12,
              v12,
              v13))
        {
          __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = v18;
            uint64_t v25 = "-[ADCommandCenter(Sync) _fetchAllAppSourcesForSyncingWithCustomVocabInfo:completion:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Skipping attempt to sync com.apple.ShortcutsActions bundleId for app intent sync",  buf,  0xCu);
          }
        }

        else if (sub_10005709C(v10))
        {
          __int128 v15 = *(void **)(a1 + 48);
          id v16 = sub_100057150(v10, 0LL);
          id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
          [v15 addObject:v17];
        }
      }

      id v7 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v7);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_10005709C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 applicationType]);
  unsigned int v3 = v2 != 0LL;

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 itemID]);
  id v5 = [v4 integerValue];

  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v1 applicationType]);
  unsigned int v7 = [v6 isEqualToString:@"System"];

  if (!AFIsInternalInstall(v8) || (_AFPreferencesShouldSyncFirstPartyAppIntentPolicy() & 1) == 0)
  {
    if (v2) {
      unsigned int v3 = v7 ^ 1;
    }
    else {
      unsigned int v3 = 0;
    }
  }

  if (v5) {
    return 0LL;
  }
  else {
    return v3;
  }
}

id sub_100057150(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init(&OBJC_CLASS___SASyncAppIdentifyingInfo);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  [v5 setBundleId:v6];
  if (v4)
  {
    [v5 setClientIdentifier:v4];
  }

  else
  {
    uint64_t v7 = AFApplicationClientIdentifierForApp(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v5 setClientIdentifier:v8];
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([v3 shortVersionString]);
  id v10 = (void *)v9;
  if (v9) {
    id v11 = (const __CFString *)v9;
  }
  else {
    id v11 = @"0";
  }
  [v5 setVersion:v11];

  uint64_t v12 = objc_claimAutoreleasedReturnValue([v3 bundleVersion]);
  unsigned int v13 = (void *)v12;
  if (v12) {
    __int128 v14 = (const __CFString *)v12;
  }
  else {
    __int128 v14 = @"0";
  }
  [v5 setBuildNumber:v14];

  return v5;
}

void sub_10005724C(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if ([v5 count])
  {
    uint64_t v6 = AFApplicationClientIdentifierForApp(v11);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v7]);
    if (v8)
    {
      uint64_t v9 = v8;
      [v8 setSyncSlots:v5];
    }

    else
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationProxy applicationProxyForIdentifier:]( &OBJC_CLASS___LSApplicationProxy,  "applicationProxyForIdentifier:",  v11));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _appMetaDataForAppProxy:v10 clientIdentifier:v7 syncSlots:v5]);
      [*(id *)(a1 + 32) setObject:v9 forKey:v7];
    }
  }
}

LABEL_22:
    LOBYTE(v4) = 0;
    return v4;
  }

  if (-[AFModesConfiguration deviceMotion](self->_currentModesConfiguration, "deviceMotion") == (id)2)
  {
    id v10 = (os_log_s *)AFSiriLogContextConnection;
    LOBYTE(v4) = 1;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      __int128 v21 = 136315138;
      __int128 v22 = "-[ADResponseModeProvider _isScreenEngaged]";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s #modes ScreenEngagement - Device is moving",  (uint8_t *)&v21,  0xCu);
    }

    return v4;
  }

  if (-[AFModesConfiguration deviceMotion](self->_currentModesConfiguration, "deviceMotion") == (id)1)
  {
    id v11 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      __int128 v21 = 136315138;
      __int128 v22 = "-[ADResponseModeProvider _isScreenEngaged]";
      uint64_t v12 = "%s #modes ScreenEngagement - Device is stationary";
      goto LABEL_20;
    }

    goto LABEL_22;
  }

  __int128 v15 = -[AFModesConfiguration deviceMotion](self->_currentModesConfiguration, "deviceMotion");
  id v16 = (os_log_s *)AFSiriLogContextConnection;
  id v17 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
  if (v15 != (id)3)
  {
    if (!v17) {
      goto LABEL_22;
    }
    __int128 v21 = 136315138;
    __int128 v22 = "-[ADResponseModeProvider _isScreenEngaged]";
    uint64_t v12 = "%s #modes ScreenEngagement - No ScreenEngagement heuristics detected";
    unsigned int v13 = v16;
    goto LABEL_21;
  }

  if (v17)
  {
    __int128 v18 = v16;
    __int128 v19 = -[ADResponseModeProvider _isAudioAccessoryConnected](self, "_isAudioAccessoryConnected");
    __int128 v20 = @"notConnected";
    if (v19) {
      __int128 v20 = @"Connected";
    }
    __int128 v21 = 136315394;
    __int128 v22 = "-[ADResponseModeProvider _isScreenEngaged]";
    uint64_t v23 = 2112;
    __int16 v24 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s #modes ScreenEngagement - Device is in a moving environment and audio accessory connected = %@",  (uint8_t *)&v21,  0x16u);
  }

  return !-[ADResponseModeProvider _isAudioAccessoryConnected](self, "_isAudioAccessoryConnected");
}

  id v17 = v13;

  return v17;
}

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rttVariance));
  [v4 setObject:v11 forKey:@"rtt_variance"];

  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_7:
    if ((has & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  PBDataWriterWriteUint32Field(v7, self->_rttVariance, 12LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_7:
    if ((has & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  *((_DWORD *)v4 + 25) = self->_rttVariance;
  *((_WORD *)v4 + 56) |= 0x1000u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_7:
    if ((has & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  v5[7] = self->_txPackets;
  *((_WORD *)v5 + 56) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_7:
    if ((has & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }

  id v10 = 0LL;
  if ((has & 0x80) != 0)
  {
LABEL_8:
    id v11 = 2654435761u * self->_txRetransmitBytes;
    if ((*(_WORD *)&self->_has & 0x100) != 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }

  self->_rttVariance = *((_DWORD *)v4 + 25);
  *(_WORD *)&self->_has |= 0x1000u;
  id v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
}

      return;
    case 6LL:
      uint64_t v25 = dispatch_time(0LL, (uint64_t)(a6 * 1000000000.0));
      queue = (dispatch_queue_s *)self->_queue;
      uint64_t v27 = &stru_1004F2030;
      goto LABEL_21;
    case 7LL:
      uint64_t v25 = dispatch_time(0LL, (uint64_t)(a6 * 1000000000.0));
      queue = (dispatch_queue_s *)self->_queue;
      uint64_t v27 = &stru_1004F2010;
      goto LABEL_21;
    case 9LL:
      uint64_t v25 = dispatch_time(0LL, 60000000000LL);
      queue = (dispatch_queue_s *)self->_queue;
      uint64_t v27 = &stru_1004F2050;
LABEL_21:
      dispatch_after(v25, queue, v27);
      goto LABEL_22;
    default:
      __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v53 = "-[ADCloudKitRetryManager retryForTypeOnRetryManagerQueue:zoneInfo:error:retryAfterInterval:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Unhandled type. File bug.",  buf,  0xCu);
      }

      goto LABEL_22;
  }

    unsigned int v13 = *(void *)(a1 + 40);
    __int128 v14 = 3302LL;
    goto LABEL_26;
  }

  if ([v7 statusCode] != (id)200)
  {
    uint64_t v27 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = v27;
      int v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSHTTPURLResponse localizedStringForStatusCode:]( NSHTTPURLResponse,  "localizedStringForStatusCode:",  [v7 statusCode]));
      *(_DWORD *)__int128 buf = 136315394;
      int v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
      int v55 = 2114;
      int v56 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%s Connected to remote configuration plist server but got back non 200 response: %{public}@",  buf,  0x16u);
    }

    unsigned int v13 = *(void *)(a1 + 40);
    __int128 v14 = 3303LL;
    goto LABEL_26;
  }

  if (!v8)
  {
    int v32 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "%s Error downloading remote configuration plist",  buf,  0xCu);
    }

    goto LABEL_22;
  }

  uint64_t v51 = 0LL;
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v8,  0LL,  0LL,  &v51));
  id v16 = v51;
  if (v16 || (id v17 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v15, v17) & 1) == 0))
  {
    uint64_t v30 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = v30;
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v16 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      int v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
      int v55 = 2112;
      int v56 = v41;
      _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%s Error serializing plist data to dictionary: %@",  buf,  0x16u);
    }

    BOOL v31 = *(void *)(a1 + 40);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3304LL));
    (*(void (**)(uint64_t, void, void *))(v31 + 16))(v31, 0LL, v19);
  }

  else
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKey:@"experiments"]);
    __int128 v19 = v18;
    if (v18)
    {
      uint64_t v43 = v15;
      int v44 = v8;
      uint64_t v49 = 0u;
      __n128 v50 = 0u;
      __n128 v47 = 0u;
      __n128 v48 = 0u;
      int v42 = v18;
      obj = v18;
      __int128 v20 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
      if (v20)
      {
        __int128 v21 = v20;
        uint64_t v46 = *(void *)v48;
LABEL_14:
        __int128 v22 = 0LL;
        while (1)
        {
          if (*(void *)v48 != v46) {
            objc_enumerationMutation(obj);
          }
          uint64_t v23 = *(void **)(*((void *)&v47 + 1) + 8 * v22);
          __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKey:@"identifier"]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configurationIdentifier]);
          __int16 v26 = [v24 isEqualToString:v25];

          if ((v26 & 1) != 0) {
            break;
          }
          if (v21 == (id)++v22)
          {
            __int128 v21 = [obj countByEnumeratingWithState:&v47 objects:v52 count:16];
            if (v21) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }
        }

        int v35 = v23;

        if (!v35) {
          goto LABEL_38;
        }
        int v36 = (os_log_s *)AFSiriLogContextDaemon;
        __int128 v15 = v43;
        uint64_t v8 = v44;
        __int128 v19 = v42;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          int v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "%s Received remote configuration",  buf,  0xCu);
        }

        (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v35, 0LL);
      }

      else
      {
LABEL_20:

LABEL_38:
        BOOL v37 = *(void *)(a1 + 40);
        int v35 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3306LL));
        (*(void (**)(uint64_t, void, id))(v37 + 16))(v37, 0LL, v35);
        __int128 v15 = v43;
        uint64_t v8 = v44;
        __int128 v19 = v42;
      }
    }

    else
    {
      int v38 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s Error no experiments specified in plist",  buf,  0xCu);
      }

      uint64_t v39 = *(void *)(a1 + 40);
      int v35 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3305LL));
      (*(void (**)(uint64_t, void, id))(v39 + 16))(v39, 0LL, v35);
    }
  }

LABEL_27:
}
}
}

LABEL_23:
  if (!v9) {
    goto LABEL_24;
  }
LABEL_27:
  uint64_t v23 = *(void *)(a1 + 48);
  __int16 v24 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v23, v24) & 1) != 0)
  {
    uint64_t v25 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void **)(a1 + 48);
      int v34 = v25;
      int v35 = (void *)objc_claimAutoreleasedReturnValue([v33 debugDescription]);
      *(_DWORD *)__int128 buf = 136315395;
      uint64_t v43 = "-[ADUserProfileService _loadProfileNamesFromCloudWithCompletion:]_block_invoke";
      int v44 = 2113;
      __n128 v45 = v35;
      _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%s Invalid type found for profile names %{private}@",  buf,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 40) addObjectsFromArray:*(void *)(a1 + 48)];
  }

  [*(id *)(*(void *)(a1 + 32) + 40) minusSet:*(void *)(*(void *)(a1 + 32) + 48)];
  __int16 v26 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v27 = *(void *)(a1 + 32);
  uint64_t v28 = *(void **)(v27 + 48);
  *(void *)(v27 + 4_Block_object_dispose((const void *)(v51 - 176), 8) = v26;

  int v29 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    BOOL v31 = *(void **)(*(void *)(a1 + 32) + 40LL);
    *(_DWORD *)__int128 buf = 136315395;
    uint64_t v43 = "-[ADUserProfileService _loadProfileNamesFromCloudWithCompletion:]_block_invoke";
    int v44 = 2113;
    __n128 v45 = v31;
    _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s %{private}@", buf, 0x16u);
  }

  [*(id *)(a1 + 32) _setUserProfileAceCommand];
  __int128 v22 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL);
  return v22();
}
}

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(-[ADSynchronizedIds aggregationIds](v9, "aggregationIds"));
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 current]);

  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = 138412290;
    int v29 = v22;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Created current aggregation id %@",  (uint8_t *)&v28,  0xCu);
  }

  -[ADSyncCoordinating addAggregationIdForUser:aggregationId:]( self->_syncCoordinator,  "addAggregationIdForUser:aggregationId:",  0LL,  v22);
  if ((v14 & 8) != 0)
  {
LABEL_25:
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(-[ADSynchronizedIds aggregationIds](v9, "aggregationIds"));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 next]);

    __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = 138412290;
      int v29 = v25;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "Created next aggregation id %@",  (uint8_t *)&v28,  0xCu);
    }

    -[ADSyncCoordinating addAggregationIdForUser:aggregationId:]( self->_syncCoordinator,  "addAggregationIdForUser:aggregationId:",  0LL,  v25);
  }
}

LABEL_25:
      id v16 = (void **)&SAUIResponseModeVoiceForwardValue;
      goto LABEL_26;
    }

    if (-[AFModesConfiguration isUIFree](self->_currentModesConfiguration, "isUIFree"))
    {
      uint64_t v23 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        __int16 v24 = "%s #modes UIFree session (likely Announce)";
LABEL_39:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v24, (uint8_t *)&v30, 0xCu);
        goto LABEL_40;
      }

      goto LABEL_40;
    }

    if (-[AFModesConfiguration isInAmbient](self->_currentModesConfiguration, "isInAmbient")
      && -[ADResponseModeProvider _overrideModeWhenInAmbient](self, "_overrideModeWhenInAmbient"))
    {
      id v17 = (os_log_s *)AFSiriLogContextConnection;
      if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      uint64_t v30 = 136315138;
      BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
      __int128 v18 = "%s #modes Ambient session";
      goto LABEL_23;
    }

    if ((-[AFModesConfiguration isForCarDND](self->_currentModesConfiguration, "isForCarDND") & 1) != 0
      || -[AFModesConfiguration isEyesFree](self->_currentModesConfiguration, "isEyesFree"))
    {
      uint64_t v23 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        __int16 v24 = "%s #modes CarDND or Eyesfree mode active";
        goto LABEL_39;
      }

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txBytes));
  [v4 setObject:v14 forKey:@"tx_bytes"];

  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_10:
    if ((has & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  PBDataWriterWriteUint64Field(v7, self->_txBytes, 21LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_10:
    if ((has & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  *((void *)v4 + 6) = self->_txBytes;
  *((_WORD *)v4 + 56) |= 0x20u;
  has = (__int16)self->_has;
  if ((has & 0x80) == 0)
  {
LABEL_10:
    if ((has & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  v5[9] = self->_txUnacked;
  *((_WORD *)v5 + 56) |= 0x100u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_10:
    if ((has & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }

  unsigned int v13 = 0LL;
  if ((has & 1) != 0)
  {
LABEL_11:
    __int128 v14 = 2654435761u * self->_rxBytes;
    if ((has & 2) != 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }

  self->_txBytes = *((void *)v4 + 6);
  *(_WORD *)&self->_has |= 0x20u;
  id v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
  }

  else
  {
    uint64_t v6 = 0;
  }

  return v6 & 1;
}

      uint64_t v9 = 0;
      goto LABEL_26;
    }
  }

  uint64_t v9 = 3;
LABEL_26:

  return v9;
}

    goto LABEL_26;
  }
}
}

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantIdentifier]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 uppercaseString]);
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v4 assistantIdentifier]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 uppercaseString]);
  uint64_t v28 = v25;
  int v29 = v27;
  uint64_t v30 = v29;
  if (v28 == v29)
  {
    uint64_t v23 = v28 != 0LL;
  }

  else
  {
    uint64_t v23 = 0LL;
    if (v28 && v29) {
      uint64_t v23 = (uint64_t)[v28 isEqual:v29];
    }
  }

LABEL_31:
  return v23;
}

    goto LABEL_26;
  }

  id v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __n128 v48 = "-[ADPeerCloudService _sendProto:ofType:originalRequestId:toPeers:responseType:completion:]";
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Lost mode is active, not sending any outbound requests",  buf,  0xCu);
  }

  if (v15)
  {
    __int128 v18 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"ADRemoteConnectionErrorDomain",  7LL,  0LL);
    v15[2](v15, 0LL, v18);
LABEL_26:
  }
}
}
  }

  else
  {
    id v17 = 0;
  }

  return v17;
}

  primarySubflowIface = self->_primarySubflowIface;
  if (primarySubflowIface) {
    [v3 setObject:primarySubflowIface forKey:@"primary_subflow_iface"];
  }
  if ((*((_BYTE *)&self->_has + 2) & 4) != 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_primarySubflowSwitchCount));
    [v3 setObject:v7 forKey:@"primary_subflow_switch_count"];
  }

  connectionMethodName = self->_connectionMethodName;
  if (connectionMethodName) {
    [v3 setObject:connectionMethodName forKey:@"connectionMethodName"];
  }
  connectionEdgeIDName = self->_connectionEdgeIDName;
  if (connectionEdgeIDName) {
    [v3 setObject:connectionEdgeIDName forKey:@"connectionEdgeIDName"];
  }
  connectionEdgeType = self->_connectionEdgeType;
  if (connectionEdgeType) {
    [v3 setObject:connectionEdgeType forKey:@"connectionEdgeType"];
  }
  id v11 = self->_has;
  if ((*(_WORD *)&v11 & 0x8000) != 0)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_connectionFallbackReason));
    [v3 setObject:v12 forKey:@"connectionFallbackReason"];

    id v11 = self->_has;
  }

  if ((*(_WORD *)&v11 & 0x100) != 0)
  {
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  self->_tuscanyConnectionDelay));
    [v3 setObject:v13 forKey:@"tuscanyConnectionDelay"];
  }

  if (-[NSMutableArray count](self->_tcpInfoMetrics, "count"))
  {
    __int128 v14 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  -[NSMutableArray count](self->_tcpInfoMetrics, "count"));
    __n128 v45 = 0u;
    uint64_t v46 = 0u;
    __n128 v47 = 0u;
    __n128 v48 = 0u;
    __int128 v15 = self->_tcpInfoMetrics;
    id v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v45,  v49,  16LL);
    if (v16)
    {
      id v17 = v16;
      __int128 v18 = *(void *)v46;
      do
      {
        for (i = 0LL; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v46 != v18) {
            objc_enumerationMutation(v15);
          }
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v45 + 1) + 8 * (void)i),  "dictionaryRepresentation",  (void)v45));
          -[NSMutableArray addObject:](v14, "addObject:", v20);
        }

        id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v45,  v49,  16LL);
      }

      while (v17);
    }

    [v3 setObject:v14 forKey:@"tcp_info_metrics"];
  }

  __int128 v21 = v3;

  return v21;
}

  id v11 = v4;
  if (self->_primarySubflowIface)
  {
    objc_msgSend(v4, "setPrimarySubflowIface:");
    id v4 = v11;
  }

  if ((*((_BYTE *)&self->_has + 2) & 4) != 0)
  {
    *((_DWORD *)v4 + 42) = self->_primarySubflowSwitchCount;
    *((_DWORD *)v4 + 53) |= 0x40000u;
  }

  if (self->_connectionMethodName)
  {
    objc_msgSend(v11, "setConnectionMethodName:");
    id v4 = v11;
  }

  if (self->_connectionEdgeIDName)
  {
    objc_msgSend(v11, "setConnectionEdgeIDName:");
    id v4 = v11;
  }

  if (self->_connectionEdgeType)
  {
    objc_msgSend(v11, "setConnectionEdgeType:");
    id v4 = v11;
  }

  uint64_t v6 = self->_has;
  if ((*(_WORD *)&v6 & 0x8000) != 0)
  {
    *((_DWORD *)v4 + 34) = self->_connectionFallbackReason;
    *((_DWORD *)v4 + 53) |= 0x8000u;
    uint64_t v6 = self->_has;
  }

  if ((*(_WORD *)&v6 & 0x100) != 0)
  {
    v4[9] = *(void *)&self->_tuscanyConnectionDelay;
    *((_DWORD *)v4 + 53) |= 0x100u;
  }

  if (-[_ADPBProxyGetMetricsResponse tcpInfoMetricsCount](self, "tcpInfoMetricsCount"))
  {
    [v11 clearTcpInfoMetrics];
    uint64_t v7 = -[_ADPBProxyGetMetricsResponse tcpInfoMetricsCount](self, "tcpInfoMetricsCount");
    if (v7)
    {
      uint64_t v8 = v7;
      for (i = 0LL; i != v8; ++i)
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue(-[_ADPBProxyGetMetricsResponse tcpInfoMetricsAtIndex:](self, "tcpInfoMetricsAtIndex:", i));
        [v11 addTcpInfoMetrics:v10];
      }
    }
  }
}

  uint64_t v8 = -[NSString copyWithZone:](self->_primarySubflowIface, "copyWithZone:", a3);
  uint64_t v9 = (void *)v6[20];
  v6[20] = v8;

  if ((*((_BYTE *)&self->_has + 2) & 4) != 0)
  {
    *((_DWORD *)v6 + 42) = self->_primarySubflowSwitchCount;
    *((_DWORD *)v6 + 53) |= 0x40000u;
  }

  id v10 = -[NSString copyWithZone:](self->_connectionMethodName, "copyWithZone:", a3);
  id v11 = (void *)v6[18];
  v6[18] = v10;

  uint64_t v12 = -[NSString copyWithZone:](self->_connectionEdgeIDName, "copyWithZone:", a3);
  unsigned int v13 = (void *)v6[15];
  v6[15] = v12;

  __int128 v14 = -[NSString copyWithZone:](self->_connectionEdgeType, "copyWithZone:", a3);
  __int128 v15 = (void *)v6[16];
  v6[16] = v14;

  id v16 = self->_has;
  if ((*(_WORD *)&v16 & 0x8000) != 0)
  {
    *((_DWORD *)v6 + 34) = self->_connectionFallbackReason;
    *((_DWORD *)v6 + 53) |= 0x8000u;
    id v16 = self->_has;
  }

  if ((*(_WORD *)&v16 & 0x100) != 0)
  {
    v6[9] = *(void *)&self->_tuscanyConnectionDelay;
    *((_DWORD *)v6 + 53) |= 0x100u;
  }

  __int16 v26 = 0u;
  uint64_t v27 = 0u;
  __int16 v24 = 0u;
  uint64_t v25 = 0u;
  id v17 = self->_tcpInfoMetrics;
  __int128 v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v24,  v28,  16LL);
  if (v18)
  {
    __int128 v19 = v18;
    __int128 v20 = *(void *)v25;
    do
    {
      __int128 v21 = 0LL;
      do
      {
        if (*(void *)v25 != v20) {
          objc_enumerationMutation(v17);
        }
        __int128 v22 = objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * (void)v21), "copyWithZone:", a3, (void)v24);
        [v6 addTcpInfoMetrics:v22];

        __int128 v21 = (char *)v21 + 1;
      }

      while (v19 != v21);
      __int128 v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v24,  v28,  16LL);
    }

    while (v19);
  }

  return v6;
}

  if (*((void *)v4 + 20)) {
    -[_ADPBProxyGetMetricsResponse setPrimarySubflowIface:](self, "setPrimarySubflowIface:");
  }
  if ((*((_BYTE *)v5 + 214) & 4) != 0)
  {
    self->_primarySubflowSwitchCount = *((_DWORD *)v5 + 42);
    *(_DWORD *)&self->_has |= 0x40000u;
  }

  if (*((void *)v5 + 18)) {
    -[_ADPBProxyGetMetricsResponse setConnectionMethodName:](self, "setConnectionMethodName:");
  }
  if (*((void *)v5 + 15)) {
    -[_ADPBProxyGetMetricsResponse setConnectionEdgeIDName:](self, "setConnectionEdgeIDName:");
  }
  if (*((void *)v5 + 16)) {
    -[_ADPBProxyGetMetricsResponse setConnectionEdgeType:](self, "setConnectionEdgeType:");
  }
  uint64_t v7 = *((_DWORD *)v5 + 53);
  if ((v7 & 0x8000) != 0)
  {
    self->_connectionFallbackReason = *((_DWORD *)v5 + 34);
    *(_DWORD *)&self->_has |= 0x8000u;
    uint64_t v7 = *((_DWORD *)v5 + 53);
  }

  if ((v7 & 0x100) != 0)
  {
    self->_tuscanyConnectionDelay = *((double *)v5 + 9);
    *(_DWORD *)&self->_has |= 0x100u;
  }

  __int128 v15 = 0u;
  id v16 = 0u;
  unsigned int v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v8 = *((id *)v5 + 25);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v9)
  {
    id v10 = v9;
    id v11 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        -[_ADPBProxyGetMetricsResponse addTcpInfoMetrics:]( self,  "addTcpInfoMetrics:",  *(void *)(*((void *)&v13 + 1) + 8LL * (void)i),  (void)v13);
      }

      id v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v10);
  }
}

  __int16 v24 = 0LL;
  if (!v5) {
    goto LABEL_29;
  }
LABEL_26:
  if (v24) {
    goto LABEL_29;
  }
  uint64_t v25 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    __int16 v26 = v25;
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[ADService identifier](self, "identifier"));
    *(_DWORD *)__int128 buf = 136315650;
    int v131 = "-[ADBundleService _parseInfoDictionary:]";
    unsigned int v132 = 2114;
    unsigned int v133 = @"AssistantDomains";
    unsigned int v134 = 2114;
    unsigned int v135 = v27;
    _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s Malformed info plist value for key %{public}@ in bundle %{public}@",  buf,  0x20u);
  }

  return v32;
}

LABEL_40:
      id v16 = (void **)&SAUIResponseModeVoiceOnlyValue;
      goto LABEL_26;
    }

    if (-[ADResponseModeProvider _isThirdPartyBTConnected](self, "_isThirdPartyBTConnected"))
    {
      id v17 = (os_log_s *)AFSiriLogContextConnection;
      if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      uint64_t v30 = 136315138;
      BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
      __int128 v18 = "%s #modes ThirdPartyBTConnected";
      goto LABEL_23;
    }

    if (-[ADResponseModeProvider _isNavigationActive](self, "_isNavigationActive"))
    {
      id v17 = (os_log_s *)AFSiriLogContextConnection;
      if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      uint64_t v30 = 136315138;
      BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
      __int128 v18 = "%s #modes Navigation is active";
      goto LABEL_23;
    }

    if ((id)-[ADResponseModeProvider _voiceFeedbackSetting](self, "_voiceFeedbackSetting") == (id)1)
    {
      uint64_t v25 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s #modes PreferSilentResponses",  (uint8_t *)&v30,  0xCu);
      }

      if ((-[AFModesConfiguration isDeviceScreenON](self->_currentModesConfiguration, "isDeviceScreenON") & 1) != 0
        || !-[ADResponseModeProvider _isAudioAccessoryConnected](self, "_isAudioAccessoryConnected"))
      {
        goto LABEL_16;
      }

      id v17 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        __int128 v18 = "%s #modes PreferSilentResponses with headphones and screen off";
        goto LABEL_23;
      }

      goto LABEL_25;
    }

    if (-[ADResponseModeProvider _deviceUnlockSignalEnabled](self, "_deviceUnlockSignalEnabled")
      && !-[ADResponseModeProvider _isDeviceUnlocked](self, "_isDeviceUnlocked"))
    {
      uint64_t v28 = (os_log_s *)AFSiriLogContextConnection;
      if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      uint64_t v30 = 136315138;
      BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
      __int128 v18 = "%s #modes Unlock signal enabled && device is locked";
      __int128 v19 = v28;
      __int128 v20 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_24;
    }

    if (((-[ADResponseModeProvider _deviceUnlockSignalEnabled](self, "_deviceUnlockSignalEnabled") | previousScreenEngagement) & 1) == 0)
    {
      id v17 = (os_log_s *)AFSiriLogContextConnection;
      if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      uint64_t v30 = 136315138;
      BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
      __int128 v18 = "%s #modes No screen engagement";
      goto LABEL_23;
    }

    if ((id)-[ADResponseModeProvider _voiceFeedbackSetting](self, "_voiceFeedbackSetting") == (id)3)
    {
      __int16 v26 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        uint64_t v27 = "%s #modes PreferSpokenResponses";
LABEL_70:
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, v27, (uint8_t *)&v30, 0xCu);
      }
    }

    else
    {
      if (-[ADResponseModeProvider _deviceUnlockSignalEnabled](self, "_deviceUnlockSignalEnabled"))
      {
        int v29 = (os_log_s *)AFSiriLogContextConnection;
        if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_16;
        }
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        unsigned int v13 = "%s #modes Unlock signal enabled && device is unlocked";
        __int128 v14 = v29;
        __int128 v15 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_15;
      }

      if (-[ADResponseModeProvider _isAudioAccessoryConnected](self, "_isAudioAccessoryConnected"))
      {
        __int16 v26 = (os_log_s *)AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = 136315138;
          BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
          uint64_t v27 = "%s #modes AudioAccessoryConnected";
          goto LABEL_70;
        }
      }

      else if (-[ADResponseModeProvider _isDeviceSilent](self, "_isDeviceSilent"))
      {
        uint64_t v12 = (os_log_s *)AFSiriLogContextConnection;
        if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO)) {
          goto LABEL_16;
        }
        uint64_t v30 = 136315138;
        BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
        unsigned int v13 = "%s #modes Device is in silent mode";
LABEL_14:
        __int128 v14 = v12;
        __int128 v15 = OS_LOG_TYPE_INFO;
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, (uint8_t *)&v30, 0xCu);
        goto LABEL_16;
      }
    }

    id v16 = (void **)&SAUIResponseModeDisplayForwardValue;
    goto LABEL_26;
  }

  uint64_t v9 = (os_log_s *)AFSiriLogContextConnection;
  id v10 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
  id v11 = v8;
  if (v10)
  {
    uint64_t v30 = 136315394;
    BOOL v31 = "-[ADResponseModeProvider _computeModeForiOS]";
    int v32 = 2112;
    uint64_t v33 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s #modes Override value being used: %@",  (uint8_t *)&v30,  0x16u);
    id v11 = v8;
  }

  [(id)v14 setDeviceFixingProblems:1];
  id v17 = state64;
  if ((state64 & 0x40) == 0)
  {
LABEL_19:
    if ((v17 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }

    uint64_t v46 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      unsigned int v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      int v130 = 2112;
      int v131 = v24;
      unsigned int v132 = 2112;
      unsigned int v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 2 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v2");
    if ((sub_100273F08(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_44;
      }
LABEL_56:
      int v56 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315650;
        unsigned int v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        int v130 = 2112;
        int v131 = v24;
        unsigned int v132 = 2112;
        unsigned int v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 3 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v3");
      if ((sub_100273358(v29, v24) & 1) != 0) {
        goto LABEL_59;
      }
      goto LABEL_63;
    }

  return v7;
}

        __int16 v26 = (char *)v26 + 1;
      }

      while (v24 != v26);
      int v73 = [obj countByEnumeratingWithState:&v227 objects:v239 count:16];
      __int16 v24 = v73;
      if (!v73) {
        goto LABEL_116;
      }
    }
  }

  int v198 = 0;
  unsigned int v184 = 0;
  uint64_t v194 = 0LL;
  int v189 = 0LL;
LABEL_116:

  if ([v182 count])
  {
    uint64_t v202 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  }

  else
  {
    uint64_t v202 = 0LL;
  }

  uint64_t v74 = log;
  uint64_t v225 = 0u;
  int v226 = 0u;
  uint64_t v223 = 0u;
  uint64_t v224 = 0u;
  uint64_t v196 = v182;
  int v75 = [v196 countByEnumeratingWithState:&v223 objects:v237 count:16];
  if (v75)
  {
    uint64_t v76 = v75;
    int8x16_t v77 = *(void *)v224;
    do
    {
      int32x4_t v78 = 0LL;
      do
      {
        if (*(void *)v224 != v77) {
          objc_enumerationMutation(v196);
        }
        int32x4_t v79 = *(void **)(*((void *)&v223 + 1) + 8LL * (void)v78);
        int32x4_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 recordName]);
        if ([v80 length])
        {
          [v201 removeObject:v80];
          [v205 removeObject:v80];
          if (([v80 isEqualToString:@"User Identifier"] & 1) != 0
            || [v80 isEqualToString:@"Logging User Identifier"])
          {
            -[NSMutableDictionary removeObjectForKey:](self->_localKeychainPreferenceCache, "removeObjectForKey:", v80);
LABEL_128:
            -[NSMutableDictionary setObject:forKey:](self->_modificationDateCache, "setObject:forKey:", v202, v80);
            int v198 = 1;
            goto LABEL_132;
          }

          int v82 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_localPreferenceCache, "objectForKey:", v80));

          if (v82)
          {
            uint8x16_t v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            -[NSMutableDictionary setObject:forKey:](v190, "setObject:forKey:", v83, v80);

            goto LABEL_128;
          }
        }

        else
        {
          uint64_t v81 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315394;
            int v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
            int v242 = 2112;
            unsigned __int8 v243 = v79;
            _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "%s Deleted record ID is lacking a name : (%@)",  buf,  0x16u);
          }

          uint64_t v74 = log;
        }

LABEL_27:
  __int128 v21 = v11;
  return v21;
}

  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txUnacked));
  [v4 setObject:v16 forKey:@"tx_unacked"];

  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_12:
    if ((has & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  PBDataWriterWriteUint64Field(v7, self->_txUnacked, 23LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_12:
    if ((has & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  *((void *)v4 + 9) = self->_txUnacked;
  *((_WORD *)v4 + 56) |= 0x100u;
  has = (__int16)self->_has;
  if ((has & 8) == 0)
  {
LABEL_12:
    if ((has & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  v5[1] = self->_rxBytes;
  *((_WORD *)v5 + 56) |= 1u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_12:
    if ((has & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }

  __int128 v15 = 0LL;
  if ((has & 4) != 0)
  {
LABEL_13:
    id v16 = 2654435761u * self->_rxOooBytes;
    if ((has & 0x10) != 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }

  self->_txUnacked = *((void *)v4 + 9);
  *(_WORD *)&self->_has |= 0x100u;
  id v5 = *((_WORD *)v4 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
}
}
}

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v9 languageCode]);
  BOOL v31 = [v30 length];

  if (!v31)
  {
    int v32 = AFOutputVoiceLanguageForRecognitionLanguage(v8);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    if (!v25)
    {
      int v35 = v26;

LABEL_42:
      uint64_t v9 = v35;
      goto LABEL_43;
    }

    if (v26)
    {
      int v34 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      int v35 = (id)objc_claimAutoreleasedReturnValue([v34 voiceSimilarToVoice:v26 inSiriSessionLanguage:v33]);

      int v36 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_38;
      }
      *(_DWORD *)__int128 buf = 136315650;
      unsigned int v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
      int v71 = 2112;
      int8x16_t v72 = v35;
      int v73 = 2112;
      uint64_t v74 = v26;
      BOOL v37 = "%s Language code changed, using similar voice %@ to previously selected voice %@";
      int v38 = v36;
      uint64_t v39 = 32;
    }

    else
    {
      int v35 = (id)objc_claimAutoreleasedReturnValue(+[AFVoiceInfo voiceInfoForLanguageCode:](&OBJC_CLASS___AFVoiceInfo, "voiceInfoForLanguageCode:", v33));

      uint64_t v41 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_38;
      }
      *(_DWORD *)__int128 buf = 136315394;
      unsigned int v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
      int v71 = 2112;
      int8x16_t v72 = v35;
      BOOL v37 = "%s Language code changed and no previous output voice selected. Using %@";
      int v38 = v41;
      uint64_t v39 = 22;
    }

    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, v37, buf, v39);
LABEL_38:
    if (!v35)
    {
      int v42 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unsigned int v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
        _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%s Voice info nil", buf, 0xCu);
      }

      int v35 = 0LL;
    }

    goto LABEL_42;
  }

          __int128 v19 = (char *)v19 + 1;
          __int128 v20 = v5;
        }

        while (v17 != v19);
        int v32 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
        id v17 = v32;
        if (!v32)
        {
LABEL_34:

          goto LABEL_35;
        }
      }
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[ADPeerInfo assistantIdentifier](v45, "assistantIdentifier"));
    uint64_t v7 = [v6 length];

    if (v7) {
      goto LABEL_7;
    }
  }

  else
  {
    __n128 v45 = 0LL;
  }

  id v5 = 0LL;
LABEL_35:

  return v5;
}

    return v3;
  }

  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    BOOL v37 = "-[ADMUXCompanionSyncTokenContainer _loadContentsOfFileIfExists]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s The fileHandle exists. Returning",  buf,  0xCu);
  }

  return 0;
}

      uint64_t v8 = (char *)v8 + 1;
    }

    while (v5 != v8);
    __int16 v26 = [obj countByEnumeratingWithState:&v35 objects:v41 count:16];
    id v5 = v26;
  }

  while (v26);

  if ((v6 & 1) != 0)
  {
    uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = v30;
      uint64_t v40 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%s Triggering download", buf, 0xCu);
    }

    uint64_t v28 = *(void **)(a1 + 32);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10029942C;
    v34[3] = &unk_1004FB0E0;
    v34[4] = v28;
    [v28 _forceCloudSyncedUserDownload:v34];
  }

  if ((v32 & 1) != 0)
  {
    [*(id *)(a1 + 32) _saveSharedUsers];
    [*(id *)(a1 + 32) _updateSAMultiUserInfo];
    int v29 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    [v29 sendMultiUserInfoToMUX];

    uint64_t v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v2 postNotificationName:@"ADMultiUsersDidChangeNotification" object:0];
LABEL_42:
  }

  return v31;
}
}

    [v11 setShouldRecognizeCommands:0];
  }

  if ([v11 shouldRecognizeCommands]
    && [v11 shouldClassifyIntent])
  {
    uint64_t v30 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v43 = 136315138;
      int v44 = "-[ADDictationConnection _dictationWillStartWithLanguageCode:options:speechOptions:xpcconnection:]";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s We can only support either Dictation intent classification or Dictation command recognition; disabling intent"
        " classification.",
        (uint8_t *)&v43,
        0xCu);
    }

    [v11 setShouldClassifyIntent:0];
  }

  if ([v11 shouldGenerateVoiceCommandCandidates]
    && ([v11 detectUtterances] & 1) == 0)
  {
    BOOL v31 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v43 = 136315138;
      int v44 = "-[ADDictationConnection _dictationWillStartWithLanguageCode:options:speechOptions:xpcconnection:]";
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s Dictation voice command candidates generation is only supported with utterance detection enabled; disabling.",
        (uint8_t *)&v43,
        0xCu);
    }

    [v11 setShouldGenerateVoiceCommandCandidates:0];
  }

  int v32 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 dictationAutoPunctuationSupportedLocales]);

  int v34 = (void *)objc_claimAutoreleasedReturnValue([v10 stringByReplacingOccurrencesOfString:@"_" withString:@"-"]);
  int v35 = [v33 containsObject:v34];

  if ((v35 & 1) == 0)
  {
    int v36 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v43 = 136315394;
      int v44 = "-[ADDictationConnection _dictationWillStartWithLanguageCode:options:speechOptions:xpcconnection:]";
      __n128 v45 = 2112;
      uint64_t v46 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "%s Disabling auto punctuation for unsupported language %@.",  (uint8_t *)&v43,  0x16u);
    }

    [v11 setAutoPunctuation:0];
  }

  -[ADDictationConnection _updateDictationOptions:](self, "_updateDictationOptions:", v11);
  BOOL v37 = 1;
  self->_waitingForSpeechRecognition = 1;
  if (![v11 transcriptionMode]) {
    BOOL v37 = [v11 voiceSearchTypeOptions] != 0;
  }
  self->_waitingForStructuredResultsOrVoiceSearch = v37;
  self->_waitingForAudioFile = 0;
  if ([v12 audioFileType])
  {
    if (v13)
    {
      int v38 = (void *)kAssistantDictationPrerecordedEntitlement;
      if (AFConnectionHasEntitlement(v13, kAssistantDictationPrerecordedEntitlement))
      {
LABEL_47:
        self->_waitingForAudioFile = 1;
        goto LABEL_51;
      }
    }

    else
    {
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCConnection currentConnection](&OBJC_CLASS___NSXPCConnection, "currentConnection"));
      int v38 = (void *)kAssistantDictationPrerecordedEntitlement;
      HasEntitlement = AFConnectionHasEntitlement(v39, kAssistantDictationPrerecordedEntitlement);

      if ((HasEntitlement & 1) != 0) {
        goto LABEL_47;
      }
    }

    [v12 setAudioFileType:0];
    uint64_t v41 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v43 = 136315394;
      int v44 = "-[ADDictationConnection _dictationWillStartWithLanguageCode:options:speechOptions:xpcconnection:]";
      __n128 v45 = 2112;
      uint64_t v46 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "%s Need %@ entitlement to use audioFileType; ignoring.",
        (uint8_t *)&v43,
        0x16u);
    }
  }

LABEL_11:
      id v10 = (void **)&SAUIResponseModeVoiceForwardValue;
LABEL_12:
      uint64_t v7 = *v10;
      goto LABEL_13;
    }

    if ((id)-[ADResponseModeProvider _voiceFeedbackSetting](self, "_voiceFeedbackSetting") == (id)3)
    {
      unsigned int v13 = (os_log_s *)AFSiriLogContextConnection;
      if (!os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
LABEL_32:
        id v10 = (void **)&SAUIResponseModeDisplayForwardValue;
        goto LABEL_12;
      }

      __int128 v22 = 136315138;
      uint64_t v23 = "-[ADResponseModeProvider _computeModeForWatchOS]";
      __int128 v14 = "%s #modes Always On";
    }

    else
    {
      if ((id)-[ADResponseModeProvider _voiceFeedbackSetting](self, "_voiceFeedbackSetting") == (id)2)
      {
        __int128 v15 = (void *)AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          id v16 = v15;
          id v17 = -[ADResponseModeProvider _isDeviceSilent](self, "_isDeviceSilent");
          __int128 v18 = @"OFF";
          if (v17) {
            __int128 v18 = @"ON";
          }
          __int128 v22 = 136315394;
          uint64_t v23 = "-[ADResponseModeProvider _computeModeForWatchOS]";
          __int16 v24 = 2112;
          uint64_t v25 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s #modes Control with Ringer Switch - Device silent mode = %@",  (uint8_t *)&v22,  0x16u);
        }

        __int128 v19 = -[ADResponseModeProvider _isDeviceSilent](self, "_isDeviceSilent");
        id v10 = (void **)&SAUIResponseModeDisplayOnlyValue;
        if (!v19) {
          id v10 = (void **)&SAUIResponseModeDisplayForwardValue;
        }
        goto LABEL_12;
      }

      __int128 v20 = -[ADResponseModeProvider _voiceFeedbackSetting](self, "_voiceFeedbackSetting");
      unsigned int v13 = (os_log_s *)AFSiriLogContextConnection;
      __int128 v21 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
      if (v20 == 1)
      {
        if (v21)
        {
          __int128 v22 = 136315138;
          uint64_t v23 = "-[ADResponseModeProvider _computeModeForWatchOS]";
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s #modes Headphones Only",  (uint8_t *)&v22,  0xCu);
        }

        id v10 = (void **)&SAUIResponseModeDisplayOnlyValue;
        goto LABEL_12;
      }

      if (!v21) {
        goto LABEL_32;
      }
      __int128 v22 = 136315138;
      uint64_t v23 = "-[ADResponseModeProvider _computeModeForWatchOS]";
      __int128 v14 = "%s #modes Defaulting to DisplayForward";
    }

    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v22, 0xCu);
    goto LABEL_32;
  }

  id v5 = (os_log_s *)AFSiriLogContextConnection;
  uint64_t v6 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
  uint64_t v7 = v4;
  if (v6)
  {
    __int128 v22 = 136315394;
    uint64_t v23 = "-[ADResponseModeProvider _computeModeForWatchOS]";
    __int16 v24 = 2112;
    uint64_t v25 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s #modes Override value being used: %@",  (uint8_t *)&v22,  0x16u);
    uint64_t v7 = v4;
  }

  return v4;
}

  return (char)v5;
}

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_12;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_DSID"));

  if (!v8)
  {
    __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int128 v15 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315395;
      *(void *)&uint8_t buf[4] = "-[ADDailyDeviceStatusActivity fetchICUserIdentityForSharedUser:completion:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2113;
      *(void *)&buf[14] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s no DSID for home ID : %{private}@",  buf,  0x16u);
    }

    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a1 + 40);
  id v16 = 0LL;
  id v17 = &v16;
  __int128 v18 = 0x2050000000LL;
  id v10 = (void *)qword_100577A40;
  __int128 v19 = qword_100577A40;
  if (!qword_100577A40)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_100065880;
    __int128 v21 = &unk_1004FDB20;
    __int128 v22 = &v16;
    sub_100065880((uint64_t)buf);
    id v10 = (void *)v17[3];
  }

  id v11 = v10;
  _Block_object_dispose(&v16, 8);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_DSID", v16));
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 specificAccountWithDSID:v12]);
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v13);

LABEL_12:
}

  return v4;
}
}
}

  id v16 = [v15 status];
  id v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (v16 == (id)1)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int128 v18 = *(unsigned __int8 *)(a1 + 48);
      __int128 v19 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 v22 = 136315650;
      *(void *)&v22[4] = "-[ADMobileBluetoothDeviceProxy _setPersonalVolume:completion:]_block_invoke";
      *(_WORD *)&v22[12] = 2048;
      *(void *)&v22[14] = v18;
      *(_WORD *)&v22[22] = 2112;
      uint64_t v23 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Changed headphone personal volume mode to %ld for %@.",  v22,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 v22 = 136315650;
    *(void *)&v22[4] = "-[ADMobileBluetoothDeviceProxy _setPersonalVolume:completion:]_block_invoke_3";
    *(_WORD *)&v22[12] = 2048;
    *(void *)&v22[14] = a2;
    *(_WORD *)&v22[22] = 2048;
    uint64_t v23 = a3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Unable to set personal volume mode for BTDevice %p via BTAccessoryManager %p",  v22,  0x20u);
  }

  __int128 v20 = *(void *)(a1 + 40);
  if (v20) {
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v15);
  }
}

  id v16 = [v15 status];
  id v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (v16 == (id)1)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int128 v18 = *(unsigned __int8 *)(a1 + 48);
      __int128 v19 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 v22 = 136315650;
      *(void *)&v22[4] = "-[ADMobileBluetoothDeviceProxy _setConversationAwareness:completion:]_block_invoke";
      *(_WORD *)&v22[12] = 2048;
      *(void *)&v22[14] = v18;
      *(_WORD *)&v22[22] = 2112;
      uint64_t v23 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Changed headphone conversation awareness mode to %ld for %@.",  v22,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 v22 = 136315650;
    *(void *)&v22[4] = "-[ADMobileBluetoothDeviceProxy _setConversationAwareness:completion:]_block_invoke_3";
    *(_WORD *)&v22[12] = 2048;
    *(void *)&v22[14] = a2;
    *(_WORD *)&v22[22] = 2048;
    uint64_t v23 = a3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Unable to set conversation awareness mode for BTDevice %p via BTAccessoryManager %p",  v22,  0x20u);
  }

  __int128 v20 = *(void *)(a1 + 40);
  if (v20) {
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v15);
  }
}

  uint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    unsigned int v13 = *(void *)(a1 + 32);
    LODWORD(buf[0]) = 136315650;
    *(void *)((char *)buf + 4) = "-[ADMobileBluetoothWirelessSplitterSessionProxy _fetchWirelessSplitterSessionInfoWith"
                                   "Completion:]_block_invoke";
    WORD2(buf[1]) = 2112;
    *(void *)((char *)&buf[1] + 6) = v2;
    HIWORD(buf[2]) = 2112;
    buf[3] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Fetched Wireless Splitter session info %@ for %@.",  (uint8_t *)buf,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}
}

  return (char)v5;
}

    goto LABEL_13;
  }

  id v4 = type;
  id v5 = (void *)AFSiriLogContextDaemon;
  uint64_t v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
  if (v4 == (xpc_type_t)&_xpc_type_error)
  {
    if (!v6) {
      goto LABEL_13;
    }
    uint64_t v8 = v5;
    *(_DWORD *)__int128 v14 = 136315394;
    *(void *)&v14[4] = "-[ADExternalRequestListener listen]_block_invoke";
    *(_WORD *)&v14[12] = 2082;
    *(void *)&v14[14] = xpc_dictionary_get_string(v2, _xpc_error_key_description);
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "%s External Request Listener Error: %{public}s",  v14,  0x16u);
    goto LABEL_11;
  }

  if (v6)
  {
    *(_DWORD *)__int128 v14 = 136315138;
    *(void *)&v14[4] = "-[ADExternalRequestListener listen]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_ERROR,  "%s Ignoring unexpected event type on External Request Listener",  v14,  0xCu);
  }
}

  return v6;
}
}

  if (self->_hasActiveAccount != (_DWORD)v4)
  {
    self->_hasActiveAccount = (char)v4;
    uint64_t v7 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v14 = "-[ADPeerCloudService _updateActiveAccountState]";
      __int128 v15 = 1024;
      id v16 = (int)v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Has active account: %d", buf, 0x12u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v8 postNotificationName:@"ADPeerCloudServiceActiveAccountStatusDidChangeNotification" object:0];
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_10018AA70;
  v13[3] = &unk_1004F4008;
  uint64_t v12 = *(void **)(a1 + 40);
  v13[4] = *(void *)(a1 + 32);
  __int128 v14 = v12;
  -[NSMutableArray enumerateObjectsUsingBlock:](v4, "enumerateObjectsUsingBlock:", v13);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

  return (char)v6;
}
}

    uint64_t v8 = 0;
    goto LABEL_5;
  }
}

    goto LABEL_12;
  }

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( -[ADSpeechSamplingSendAudioData makeValidWAVFile:withSamplingRateOf:]( self,  "makeValidWAVFile:withSamplingRateOf:",  v15,  v20));
  if (v21)
  {
    __n128 v47 = v8;
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue( -[ADSpeechSamplingSendAudioData convertToALACWithPath:withSamplingRateOf:]( self,  "convertToALACWithPath:withSamplingRateOf:",  v21,  v20));

    uint64_t v23 =  +[AFAssistantSamplingUtilities deleteItemAtFilePath:]( &OBJC_CLASS___AFAssistantSamplingUtilities,  "deleteItemAtFilePath:",  v21);
    if ((_DWORD)v20 == 16000) {
      __int16 v24 = @"MHASRAUDIOCODEC_ALAC_MONO_16000HZ_VALUE";
    }
    else {
      __int16 v24 = @"MHASRAUDIOCODEC_ALAC_MONO_8000HZ_VALUE";
    }
    [v12 setCodec:v24];
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v12 codec]);

    if (v26)
    {
      if (v22)
      {
        [v12 setLanguage:v48];
        uint64_t v27 = objc_alloc(&OBJC_CLASS___NSUUID);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:@"asrSelfComponentIdentifier"]);
        uint64_t v46 = -[NSUUID initWithUUIDString:](v27, "initWithUUIDString:", v28);

        int v29 = objc_alloc(&OBJC_CLASS___NSUUID);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:@"interactionIdentifier"]);
        __n128 v45 = -[NSUUID initWithUUIDString:](v29, "initWithUUIDString:", v30);

        BOOL v31 = [[SISchemaUUID alloc] initWithNSUUID:v45];
        [v12 setInteractionId:v31];

        int v32 = (void *)objc_claimAutoreleasedReturnValue(+[ADAccount activeAccount](&OBJC_CLASS___ADAccount, "activeAccount"));
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 speechIdentifier]);
        [v12 setSpeechIdString:v33];

        int v34 = (void *)objc_claimAutoreleasedReturnValue([v9 valueForKey:@"samplingTimestamp"]);
        int v35 = 1000 * (void)[v34 longLongValue];

        [v12 setAudioCreatedTimestampMs:v35];
        int v36 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472LL;
        v49[2] = sub_10024CAEC;
        v49[3] = &unk_1004F78F8;
        v49[4] = self;
        __n128 v50 = v15;
        uint64_t v51 = v46;
        int v52 = v22;
        int v53 = v12;
        int v54 = v47;
        int v55 = v10;
        BOOL v37 = v22;
        int v38 = v46;
        [v36 enqueueLargeMessageObjectFromPath:v37 assetIdentifier:v45 messageMetadata:v53 completion:v49];

        uint64_t v8 = v47;
      }

      else
      {
        uint64_t v40 = (os_log_s *)AFSiriLogContextSpeech;
        uint64_t v8 = v47;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
        {
          int v44 = self->_samplingComponent;
          *(_DWORD *)__int128 buf = 136315394;
          uint8x16_t v57 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]";
          uint16x8_t v58 = 2112;
          int8x16_t v59 = v44;
          _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Failed while converting audio",  buf,  0x16u);
        }
      }
    }

    else
    {
      uint64_t v39 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = self->_samplingComponent;
        *(_DWORD *)__int128 buf = 136315394;
        uint8x16_t v57 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]";
        uint16x8_t v58 = 2112;
        int8x16_t v59 = v43;
        _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: No Codec info available.",  buf,  0x16u);
      }

      uint64_t v8 = v47;
    }
  }

  else
  {
    uint64_t v25 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      int v42 = self->_samplingComponent;
      *(_DWORD *)__int128 buf = 136315394;
      uint8x16_t v57 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]";
      uint16x8_t v58 = 2112;
      int8x16_t v59 = v42;
      _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Could not create WAV file.",  buf,  0x16u);
    }
  }
}

  if (v4) {
    (*((void (**)(id, void))v4 + 2))(v4, 0LL);
  }
LABEL_13:
}

  return v11;
}
}

    -[NSMutableDictionary setObject:forKey:](v37, "setObject:forKey:", v9, v4);
    goto LABEL_12;
  }

  id v4 = 0LL;
LABEL_13:
  int v42 = 0u;
  uint64_t v43 = 0u;
  uint64_t v40 = 0u;
  uint64_t v41 = 0u;
  obj = *(id *)(v2 + 232);
  __int128 v20 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
  if (v20)
  {
    __int128 v21 = v20;
    uint64_t v39 = *(void *)v41;
    __int128 v22 = kAFMultiUserSharedUserIdKey;
    uint64_t v23 = kAFMultiUserConformingSharedUserIdKey;
    do
    {
      for (i = 0LL; i != v21; i = (char *)i + 1)
      {
        uint64_t v25 = v4;
        if (*(void *)v41 != v39) {
          objc_enumerationMutation(obj);
        }
        __int16 v26 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)i);
        id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) iCloudAltDSID]);

        uint64_t v27 = a1;
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) objectForKey:v26]);
        int v29 = objc_alloc(&OBJC_CLASS___NSDictionary);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v28 sharedUserID]);
        BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v28 loggableMusicSyncSharedUserID]);
        int v32 = -[NSDictionary initWithObjectsAndKeys:](v29, "initWithObjectsAndKeys:", v30, v22, v31, v23, 0LL);

        if (v4 && ((AFIsHorseman(v33) & 1) != 0 || _AFPreferencesSiriRMVSetting(v4) == 1)) {
          -[NSMutableDictionary setObject:forKey:](v37, "setObject:forKey:", v32, v4);
        }

        a1 = v27;
      }

      __int128 v21 = [obj countByEnumeratingWithState:&v40 objects:v44 count:16];
    }

    while (v21);
  }

  int v34 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v35 = v34;
    int v36 = -[NSMutableDictionary count](v37, "count");
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v46 = "-[ADMultiUserService getRecognizableUsersConfromingSharedUserIds:]_block_invoke";
    __n128 v47 = 2048;
    __n128 v48 = (uint64_t)v36;
    _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "%s User count: %ld", buf, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

  unsigned int v13 = -[ADSynchronizedIds populateNullsWithCreationTime:](v9, "populateNullsWithCreationTime:", v6);
  __int128 v14 = v13;
  if ((v13 & 1) != 0)
  {
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(-[ADSynchronizedIds ephemeralSeeds](v9, "ephemeralSeeds"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 current]);

    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = 138412290;
      int v29 = v16;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Created current user seed %@",  (uint8_t *)&v28,  0xCu);
    }

    -[ADSyncCoordinating addSeedForUser:seed:](self->_syncCoordinator, "addSeedForUser:seed:", 0LL, v16);
    if ((v14 & 2) == 0)
    {
LABEL_13:
      if ((v14 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_22;
    }
  }

  else if ((v13 & 2) == 0)
  {
    goto LABEL_13;
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(-[ADSynchronizedIds ephemeralSeeds](v9, "ephemeralSeeds"));
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 next]);

  __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = 138412290;
    int v29 = v19;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Created next user seed %@",  (uint8_t *)&v28,  0xCu);
  }

  -[ADSyncCoordinating addSeedForUser:seed:](self->_syncCoordinator, "addSeedForUser:seed:", 0LL, v19);
  if ((v14 & 4) == 0)
  {
LABEL_14:
    if ((v14 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }

    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession languageCode](self, "languageCode"));
    [v19 setLanguageCode:v26];

    [v19 setTimeout:self->_aceHeaderTimeout];
    [v19 setPrefersWWAN:v10];
    [v19 setSkipPeer:v9];
    [v19 setSkipPeerError:v12];
    if (v8) {
      [v19 setUseWiFiHint:1];
    }
    [v19 setForceReconnect:v7];
    [v19 start];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v27 logEventWithType:912 context:0];

    if (!-[ADSessionRemoteServer _authenticationDisabled](self, "_authenticationDisabled"))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[ADSessionRemoteServer _cachedValidationData](self, "_cachedValidationData"));
      if (!v28 || (forceValidationRefresh = self->_forceValidationRefresh, v28, forceValidationRefresh))
      {
        uint64_t v30 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          uint8x16_t v62 = "-[ADSessionRemoteServer _startSiriCoreConnectionPreferringWWAN:skipPeer:skipPeerError:useWiFiHint:forceReconnect:]";
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s No cached validation data beginning eager auth",  buf,  0xCu);
        }

        BOOL v31 = (void *)objc_claimAutoreleasedReturnValue(-[ADSessionRemoteServer _cachedServerCertificate](self, "_cachedServerCertificate"));
        int v32 = (void *)objc_claimAutoreleasedReturnValue(-[ADSessionRemoteServer _authenticator](self, "_authenticator"));
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472LL;
        v60[2] = sub_1002B6334;
        v60[3] = &unk_1004F98F0;
        v60[4] = self;
        [v32 prepareWithCertificateData:v31 completion:v60];
      }
    }

    -[ADSession setState:](self, "setState:", 3LL);

    goto LABEL_22;
  }

  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 25LL));
  -[ADSessionRemoteServer _informDelegateOfError:](self, "_informDelegateOfError:", v19);
  uint64_t v33 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint8x16_t v62 = "-[ADSessionRemoteServer _startSiriCoreConnectionPreferringWWAN:skipPeer:skipPeerError:useWiFiHint:forceReconnect:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%s Hostname invalid in configuration",  buf,  0xCu);
  }

    uint64_t v12 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      __int128 v14 = 136315394;
      __int128 v15 = "-[ADSessionRemoteServer _cachedValidationData]";
      id v16 = 2112;
      id v17 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Session data has expired %@",  (uint8_t *)&v14,  0x16u);
    }

    goto LABEL_13;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v6 = [v4 compare:v5];

  if (v6 != (id)1) {
    goto LABEL_11;
  }
  uint64_t v7 = (NSData *)objc_claimAutoreleasedReturnValue([v3 validationData]);
  if (v7
    && !-[ADSessionRemoteServer _versionForCachedValidationDataMatchesCurrentVersion]( self,  "_versionForCachedValidationDataMatchesCurrentVersion"))
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      __int128 v14 = 136315138;
      __int128 v15 = "-[ADSessionRemoteServer _cachedValidationData]";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Resetting cached validation data due to cached version not matching current version.",  (uint8_t *)&v14,  0xCu);
    }

    [v3 setValidationData:0];
    [v3 setValidationExpiration:0];
    [v3 save];
LABEL_13:
    uint64_t v7 = 0LL;
  }

  __int128 v14 = 0LL;
LABEL_14:

LABEL_17:
  return v14;
}
}
}

  return (char)v3;
}

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_13:
  id v11 = v7;
  return v11;
}

  -[NSMutableArray addObject:](v9, "addObject:", SAContextTypeREQUEST_ORIGINValue);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  uint64_t result = 1LL;
LABEL_18:
  if (self->_headsetSupportsAnnounceCalls
    && self->_isHeadsetInEar
    && (self->_inEarDetectEnabled || !self->_inEarDetectEnabledSpecified)
    && !self->_shouldDeferToOtherConnectedDevice)
  {
    result |= 2uLL;
  }

  return result;
}

      __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4011LL));
      -[ADCloudKitManager _executeZoneFetchCompletionBlock:zoneInfo:completion:]( self,  "_executeZoneFetchCompletionBlock:zoneInfo:completion:",  v26,  v15,  v47);

      goto LABEL_39;
    }

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v15 zone]);
    uint64_t v28 = v27 == 0LL;

    if (v28)
    {
      __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:contain"
                             "er:mirror:completion:]";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s Unable to fetch records for zone because zone is disabled: (%@)",  buf,  0x16u);
      }

      goto LABEL_13;
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    int v29 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
    uint64_t v30 = -[ADCloudKitManager _isCloudSyncEnabledForZone:](self, "_isCloudSyncEnabledForZone:", v29);

    int8x16_t v68 = v30;
    if (v19)
    {
      BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v19 options]);
      int v32 = (void *)objc_claimAutoreleasedReturnValue([v31 accountOverrideInfo]);

      if (v32)
      {
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 accountID]);
        int v34 = v33 == 0LL;

        if (!v34)
        {
          containerDict = self->_containerDict;
          v57[0] = _NSConcreteStackBlock;
          v57[1] = 3221225472LL;
          v57[2] = sub_10009E794;
          v57[3] = &unk_1004EF850;
          uint16x8_t v58 = v32;
          int8x16_t v59 = self;
          int8x16_t v61 = v69;
          uint8x16_t v62 = buf;
          uint16x8_t v60 = v15;
          -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:]( containerDict,  "enumerateKeysAndObjectsUsingBlock:",  v57);
        }
      }
    }

    if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
    {
      int v36 = (void *)objc_claimAutoreleasedReturnValue([v15 rateLimitTimer]);

      if (!v36)
      {
        if ([v15 fetchInProgress])
        {
          int v42 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint16x8_t v63 = 136315394;
            uint16x8_t v64 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion:]";
            int8x16_t v65 = 2112;
            int8x16_t v66 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "%s Unable to start a fetch when a fetch is already in progress for container %@",  v63,  0x16u);
          }
        }

        else
        {
          [v15 setFetchInProgress:1];
          int v44 = (void *)objc_claimAutoreleasedReturnValue([v15 zone]);
          __n128 v45 = (void *)objc_claimAutoreleasedReturnValue([v15 serverChangeToken]);
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472LL;
          v48[2] = sub_10009E8C8;
          v48[3] = &unk_1004EF8E8;
          v48[4] = self;
          uint64_t v49 = v15;
          int v53 = buf;
          int v56 = v12;
          int v52 = v47;
          int v55 = a4;
          __n128 v50 = v46;
          uint64_t v51 = v19;
          int v54 = v69;
          -[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:completion:]( self,  "_fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:completion:",  v44,  v45,  v12,  v50,  v51,  v9,  v48);
        }

        goto LABEL_38;
      }

      BOOL v37 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        int v38 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
        *(_DWORD *)uint16x8_t v63 = 136315394;
        uint16x8_t v64 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion:]";
        int8x16_t v65 = 2112;
        int8x16_t v66 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s Unable to fetch records for zone because zone is rate limited: (%@)",  v63,  0x16u);
      }
    }

    else
    {
      BOOL v37 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneName]);
        *(_DWORD *)uint16x8_t v63 = 136315394;
        uint16x8_t v64 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion:]";
        int8x16_t v65 = 2112;
        int8x16_t v66 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s iCloud sync is disabled. Unable to fetch records for zone: (%@)",  v63,  0x16u);
      }
    }

    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4011LL));
    -[ADCloudKitManager _executeZoneFetchCompletionBlock:zoneInfo:completion:]( self,  "_executeZoneFetchCompletionBlock:zoneInfo:completion:",  v39,  v15,  v47);

LABEL_38:
    _Block_object_dispose(buf, 8);
    goto LABEL_39;
  }

  __int128 v22 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:m"
                         "irror:completion:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s Not ready yet on container %@", buf, 0x16u);
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4011LL));
  -[ADCloudKitManager _executeZoneFetchCompletionBlock:zoneInfo:completion:]( self,  "_executeZoneFetchCompletionBlock:zoneInfo:completion:",  v23,  v15,  v47);

LABEL_39:
  _Block_object_dispose(v69, 8);
}
}

  __int16 v26 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v11;
}

  -[NSMutableArray addObject:](v17, "addObject:", SAAlarmDayOfWeekWednesdayValue);
  if ((v15 & 8) == 0)
  {
LABEL_6:
    if ((v15 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

    (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  v8);
    goto LABEL_14;
  }

  id v11 = v5;
  uint64_t v12 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    __int128 v21 = 136315394;
    __int128 v22 = "-[ADAnnounceDeviceSelector handleAnnouncementRequest:]_block_invoke";
    uint64_t v23 = 2112;
    __int16 v24 = v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s Received response: %@",  (uint8_t *)&v21,  0x16u);
  }

  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 result]);
  __int128 v14 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
  isKindOfClass = objc_opt_isKindOfClass(v13, v14);

  if ((isKindOfClass & 1) != 0)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);

    if (v16)
    {
      id v17 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
      v17[2](v17, 1LL);
    }
  }

  else
  {
    __int128 v18 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      __int128 v19 = v18;
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v11 result]);
      __int128 v21 = 136315394;
      __int128 v22 = "-[ADAnnounceDeviceSelector handleAnnouncementRequest:]_block_invoke";
      uint64_t v23 = 2112;
      __int16 v24 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s SAExecuteOnRemoteResponse contains error sending remote announcement: %@",  (uint8_t *)&v21,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

LABEL_14:
}
}

  dispatch_group_enter(v12);
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472LL;
  v65[2] = sub_100132CAC;
  v65[3] = &unk_1004F2980;
  int8x16_t v67 = &v69;
  int8x16_t v68 = &v73;
  __int128 v14 = v12;
  int8x16_t v66 = v14;
  +[ADCoreBluetoothManager retrieveConnectedDevicesInfoWithCompletion:]( &OBJC_CLASS___ADCoreBluetoothManager,  "retrieveConnectedDevicesInfoWithCompletion:",  v65);
  __int128 v15 = dispatch_time(0LL, 4000000000LL);
  dispatch_group_wait(v14, v15);
  if ([(id)v74[5] count])
  {
    id v16 = (SACommandFailed *)objc_claimAutoreleasedReturnValue([(id)v74[5] dequeueObject]);
    int8x16_t v61 = 0LL;
    uint8x16_t v62 = &v61;
    uint16x8_t v63 = 0x2020000000LL;
    uint16x8_t v64 = 1;
    dispatch_group_enter(v14);
    uint8x16_t v57 = 0LL;
    uint16x8_t v58 = &v57;
    int8x16_t v59 = 0x2020000000LL;
    uint16x8_t v60 = 0LL;
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_1001333A4;
    v53[3] = &unk_1004F2958;
    int v55 = &v57;
    int v56 = &v61;
    id v17 = v14;
    int v54 = v17;
    -[SACommandFailed getHeadphoneListeningMode:](v16, "getHeadphoneListeningMode:", v53);
    __int128 v18 = dispatch_time(0LL, 4000000000LL);
    dispatch_group_wait(v17, v18);
    if (*((_BYTE *)v62 + 24))
    {
      __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "-[ADSettingsService _setNoiseManagement:completion:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device time outed while checking current listening mode",  (uint8_t *)&buf,  0xCu);
      }

      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  SASettingNoHeadsetConnectedErrorCode,  0LL));
      __int128 v21 = -[SACommandFailed initWithErrorCode:]( [SACommandFailed alloc],  "initWithErrorCode:",  [v20 code]);
      ((void (**)(void, SACommandFailed *, void *))v8)[2](v8, v21, v20);
    }

    else
    {
      uint64_t v23 = v58[3];
      if (v23 > 1)
      {
        uint64_t v28 = SASettingNoiseManagementOptionOFFValue;
        if (v23 - 3 <= 2)
        {
          int v29 = *(id *)*(&off_1004F2A18 + v23 - 3);

          uint64_t v28 = v29;
        }

        uint64_t v49 = 0LL;
        __n128 v50 = &v49;
        uint64_t v51 = 0x2020000000LL;
        int v52 = 1;
        dispatch_group_enter(v17);
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint8x16_t v86 = 0x3032000000LL;
        int v87 = sub_100132C94;
        unsigned int v88 = sub_100132CA4;
        unsigned int v89 = 0LL;
        uint64_t v30 = v70[3];
        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472LL;
        v45[2] = sub_1001333C4;
        v45[3] = &unk_1004F29A8;
        p___int128 buf = &buf;
        __n128 v48 = &v49;
        BOOL v31 = v17;
        uint64_t v46 = v31;
        -[SACommandFailed setHeadphoneListeningMode:completion:](v16, "setHeadphoneListeningMode:completion:", v30, v45);
        int v32 = dispatch_time(0LL, 4000000000LL);
        dispatch_group_wait(v31, v32);
        uint64_t v41 = [(id)v74[5] count];
        __int128 v21 = (SACommandFailed *)v28;
        while (!*(void *)(*((void *)&buf + 1) + 40LL))
        {
          if (!objc_msgSend((id)v74[5], "count", v41)) {
            break;
          }
          dispatch_group_enter(v31);
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([(id)v74[5] dequeueObject]);
          int v34 = v70[3];
          v43[0] = _NSConcreteStackBlock;
          v43[1] = 3221225472LL;
          v43[2] = sub_1001334E8;
          v43[3] = &unk_1004FBD90;
          int v44 = v31;
          int v35 = v34;
          __int128 v21 = (SACommandFailed *)v28;
          [v33 setHeadphoneListeningMode:v35 completion:v43];
        }

        int v36 = dispatch_time(0LL, 1000000000LL * (void)v41);
        dispatch_group_wait(v31, v36);
        if (*((_BYTE *)v50 + 24))
        {
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  SASettingNoHeadsetConnectedErrorCode,  0LL));
          BOOL v37 = -[SACommandFailed initWithErrorCode:]( [SACommandFailed alloc],  "initWithErrorCode:",  [v20 code]);
          ((void (**)(void, SACommandFailed *, void *))v8)[2](v8, v37, v20);
        }

        else
        {
          if (*(void *)(*((void *)&buf + 1) + 40LL))
          {
            int v38 = objc_alloc(&OBJC_CLASS___SACommandFailed);
            BOOL v37 = -[SACommandFailed initWithErrorCode:]( v38,  "initWithErrorCode:",  [*(id *)(*((void *)&buf + 1) + 40) code]);
            ((void (**)(void, SACommandFailed *, void))v8)[2]( v8,  v37,  *(void *)(*((void *)&buf + 1) + 40LL));
          }

          else
          {
            uint64_t v39 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int32x4_t v79 = 136315650;
              int32x4_t v80 = "-[ADSettingsService _setNoiseManagement:completion:]";
              uint64_t v81 = 2112;
              int v82 = v21;
              uint8x16_t v83 = 2112;
              uint16x8_t v84 = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "%s Done setting bluetooth device noise management from %@ to %@",  v79,  0x20u);
            }

            BOOL v37 = (SACommandFailed *)objc_alloc_init(&OBJC_CLASS___SASettingNoiseManagementEntity);
            -[SACommandFailed setPreviousValue:](v37, "setPreviousValue:", v21);
            -[SACommandFailed setValue:](v37, "setValue:", v42);
            uint64_t v40 = objc_alloc_init(&OBJC_CLASS___SASettingSetValueResponse);
            -[SASettingSetValueResponse setSetting:](v40, "setSetting:", v37);
            ((void (**)(void, SASettingSetValueResponse *, void))v8)[2](v8, v40, 0LL);
          }

          __int128 v20 = 0LL;
        }

        _Block_object_dispose(&buf, 8);
        _Block_object_dispose(&v49, 8);
      }

      else
      {
        __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "-[ADSettingsService _setNoiseManagement:completion:]";
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Unable to determine bluetooth device's current listening mode",  (uint8_t *)&buf,  0xCu);
        }

        uint64_t v25 = objc_alloc(&OBJC_CLASS___SACommandFailed);
        __int128 v21 = -[SACommandFailed initWithErrorCode:]( v25,  "initWithErrorCode:",  SASettingConnectedHeadsetNoiseManagementUnsupportedErrorCode);
        __int16 v26 = -[SACommandFailed errorCode](v21, "errorCode");
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  v26,  0LL));
        ((void (**)(void, SACommandFailed *, void *))v8)[2](v8, v21, v27);

        __int128 v20 = 0LL;
      }
    }

    _Block_object_dispose(&v57, 8);
    _Block_object_dispose(&v61, 8);
  }

  else
  {
    __int128 v22 = sub_100132EAC(0LL, v70[3]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v22);
    id v16 = -[SACommandFailed initWithErrorCode:]( [SACommandFailed alloc],  "initWithErrorCode:",  [v20 code]);
    ((void (**)(void, SACommandFailed *, void *))v8)[2](v8, v16, v20);
  }

  _Block_object_dispose(&v69, 8);
  _Block_object_dispose(&v73, 8);

LABEL_39:
}
}

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      __int128 v20 = [obj countByEnumeratingWithState:&v24 objects:v34 count:16];
      id v4 = v20;
    }

    while (v20);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

      if (v17) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }

    __int128 v21 = *v14;
    if (!os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)__int128 buf = 136315906;
    int8x16_t v65 = "-[ADCloudKitCapabilitiesDataStore _preparedDatabaseWithError:]";
    int8x16_t v66 = 2048;
    int8x16_t v67 = v12;
    int8x16_t v68 = 2112;
    uint8x16_t v69 = v7;
    unsigned int v70 = 2112;
    int v71 = v17;
    _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s Failed to open capabilities database (retry #%tu) at path %@ with error %@.",  buf,  0x2Au);
    if (v17) {
      goto LABEL_17;
    }
LABEL_14:
    int8x16_t v61 = 0LL;
    __int128 v22 = [v11 performIntegrityCheckWithError:&v61];
    id v17 = (__CFString *)v61;
    if ((v22 & 1) == 0 && (uint64_t v23 = *v8, os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR)))
    {
      *(_DWORD *)__int128 buf = 136315906;
      int8x16_t v65 = "-[ADCloudKitCapabilitiesDataStore _preparedDatabaseWithError:]";
      int8x16_t v66 = 2048;
      int8x16_t v67 = v12;
      int8x16_t v68 = 2112;
      uint8x16_t v69 = v7;
      unsigned int v70 = 2112;
      int v71 = v17;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s Failed to perform integrity check on capabilities database (retry #%tu) at path %@ with error %@.",  buf,  0x2Au);
      if (!v17) {
        goto LABEL_37;
      }
    }

    else if (!v17)
    {
      goto LABEL_37;
    }
  }

  return (char)v10;
}
}

    uint64_t v25 = CSSiriSpeechRecordingTrimmedAudioDirectoryPath();
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v28 = [v27 fileExistsAtPath:v26 isDirectory:&v123];

    if (v28)
    {
      if (v123) {
        goto LABEL_23;
      }
      int v29 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"File exists at path %@, but it is expected to be directory.",  v26);
      uint64_t v30 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:description:](&OBJC_CLASS___AFError, "errorWithCode:description:", 226LL, v29));
    }

    else
    {
      BOOL v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      unsigned int v122 = 0LL;
      int v32 = [v31 createDirectoryAtPath:v26 withIntermediateDirectories:1 attributes:0 error:&v122];
      int v29 = (NSString *)v122;

      if (v32)
      {

        goto LABEL_23;
      }

      uint64_t v33 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Unable to create directory at path %@.",  v26);
      uint64_t v30 = objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v33,  v29));
    }

    if (v30)
    {
      int v34 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inPropertyData = 136315394;
        *(void *)&inPropertyData[4] = "ADAudioFileTrim";
        *(_WORD *)&inPropertyData[12] = 2112;
        *(void *)&inPropertyData[14] = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
      }

      int v35 = (void *)v30;
      goto LABEL_29;
    }

  if (AFSupportsMultiUser(v2, v3))
  {
    __int128 v18 = +[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService");
    __int128 v19 = +[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService");
  }

  __int128 v20 = [*(id *)(a1 + 32) _contextManager];
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
  __int128 v22 = -[ADDeviceResolutionServiceListener initWithInstanceContext:deviceCircleManager:]( objc_alloc(&OBJC_CLASS___ADDeviceResolutionServiceListener),  "initWithInstanceContext:deviceCircleManager:",  *(void *)(*(void *)(a1 + 32) + 680LL),  v21);
  uint64_t v23 = *(void *)(a1 + 32);
  __int16 v24 = *(void **)(v23 + 224);
  *(void *)(v23 + 224) = v22;

  uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSMapTable);
  __int16 v26 = *(void *)(a1 + 32);
  uint64_t v27 = *(void **)(v26 + 936);
  *(void *)(v26 + 936) = v25;

  uint64_t v28 = objc_alloc_init(&OBJC_CLASS___NSMapTable);
  int v29 = *(void *)(a1 + 32);
  uint64_t v30 = *(void **)(v29 + 928);
  *(void *)(v29 + 92_Block_object_dispose((const void *)(v51 - 176), 8) = v28;

  if (AFDeviceSupportsCarPlay())
  {
    BOOL v31 = -[AFSiriAnnouncementRequestCapabilityManager initWithPlatform:]( objc_alloc(&OBJC_CLASS___ADSiriAnnouncementRequestCapabilityManager),  "initWithPlatform:",  2LL);
    int v32 = *(void *)(a1 + 32);
    uint64_t v33 = *(void **)(v32 + 216);
    *(void *)(v32 + 2memset((void *)(v1 - 204), 50, 16) = v31;
  }

  int v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _flowServiceListener]);
  [v34 setupListener];

  int v35 = kAFDisableServiceCommandExecution;
  int v36 = _AFPreferencesValueForKey(kAFDisableServiceCommandExecution);
  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  *(_BYTE *)(*(void *)(a1 + 32) + 527LL) = _AFPreferencesBoolFromValueWithDefault(v37, v35, 0LL);

  int v38 = objc_claimAutoreleasedReturnValue(+[ADAssetManager sharedInstance](&OBJC_CLASS___ADAssetManager, "sharedInstance"));
  uint64_t v39 = *(void *)(a1 + 32);
  uint64_t v40 = *(void **)(v39 + 232);
  *(void *)(v39 + 232) = v38;

  uint64_t v41 = objc_alloc_init(&OBJC_CLASS___ADSAEAssetsAvailabilityObserver);
  [*(id *)(*(void *)(a1 + 32) + 232) addAvailabilityObserver:v41];
  int v42 = +[ADSyncConfigAssetManager sharedInstance](&OBJC_CLASS___ADSyncConfigAssetManager, "sharedInstance");
  if (+[AFFeatureFlags isNLServerFallbackDisabledWithExperiment]( &OBJC_CLASS___AFFeatureFlags,  "isNLServerFallbackDisabledWithExperiment")) {
    uint64_t v43 =  +[ADServerFallbackConfigManager sharedInstance]( &OBJC_CLASS___ADServerFallbackConfigManager,  "sharedInstance");
  }
  int v44 = [*(id *)(a1 + 32) _setupUIBridgeServiceListener];
  if (AFSupportsRemoraHost(v44, v45))
  {
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[SHAFHomeHubManager sharedManager](&OBJC_CLASS___SHAFHomeHubManager, "sharedManager"));
    [v46 registerObserverForEndpointLifeCycleChanges:*(void *)(a1 + 32)];
  }

  else
  {
    [*(id *)(a1 + 32) _fetchHubAccountInBackground];
    DistributedCenter = CFNotificationCenterGetDistributedCenter();
    CFNotificationCenterAddObserver( DistributedCenter,  *(const void **)(a1 + 32),  (CFNotificationCallback)sub_1001E72AC,  AFSiriActiveAccountChangedDistributedNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
  }

  __n128 v48 = *(id *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[ADQueueMonitor sharedMonitor](&OBJC_CLASS___ADQueueMonitor, "sharedMonitor"));
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_1001E735C;
  v51[3] = &unk_1004FBBD0;
  int v52 = v48;
  __n128 v50 = v48;
  [v49 addQueue:v50 heartBeatInterval:v51 timeoutInterval:5.0 timeoutHandler:5.0];
}
}
  }

  return v4;
}

  -[NSMutableArray addObject:](v3, "addObject:", SAAlarmDayOfWeekThursdayValue);
  if ((a1 & 0x10) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
}
}

  [v4 closeFile];
  id v16 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v28 = "-[ADSpeechSamplingDictationAudioDataHandler addAudioSamplesOnQueue:]";
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Dictation Sampling: Done reading audio file and adding audio samples.",  buf,  0xCu);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v17 stopSpeechWithOptions:0 forDelegate:self];

LABEL_22:
}

      uint64_t v6 = sub_100273358(v3, v5);
      goto LABEL_14;
    }

    goto LABEL_13;
  }
}

  if ([v3 length])
  {
    id v16 = *(void *)(a1 + 32);
    id v17 = *(void **)(v16 + 240);
    if (!v17) {
      goto LABEL_19;
    }
    __int128 v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = 136315138;
      int v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Primary user present",  (uint8_t *)&v28,  0xCu);
      id v17 = *(void **)(*(void *)(a1 + 32) + 240LL);
    }

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 sharedUserID]);
    __int128 v20 = [v19 isEqualToString:v3];

    id v16 = *(void *)(a1 + 32);
    if (v20)
    {
      __int128 v21 = *(void *)(a1 + 40);
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v16 + 240) homeUserUUID]);
      (*(void (**)(uint64_t, void *, void))(v21 + 16))(v21, v22, 0LL);
    }

    else
    {
LABEL_19:
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v16 + 232) objectForKey:v3]);
      __int128 v22 = v23;
      if (v23)
      {
        __int16 v24 = *(void *)(a1 + 40);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 homeUserUUID]);
        (*(void (**)(uint64_t, void *, void))(v24 + 16))(v24, v25, 0LL);
      }

      else
      {
        uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = 136315138;
          int v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s Primary user not present or home userId not found",  (uint8_t *)&v28,  0xCu);
        }

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL, v25);
      }
    }
  }

  else
  {
    __int16 v26 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = 136315138;
      int v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "%s No selectedSharedUserID found, returning nil",  (uint8_t *)&v28,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  localAssertionCoordinator = self->_localAssertionCoordinator;
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v6 effectiveDate]);
  __int128 v20 = v6;
  if (!v19) {
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v6 mutatedCopyWithMutator:&stru_1004FA210]);
  }
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_1002C8F84;
  v24[3] = &unk_1004FA238;
  uint64_t v25 = v7;
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( -[AFAssertionCoordinator acquireRelinquishableAssertionWithContext:relinquishmentHandler:]( localAssertionCoordinator,  "acquireRelinquishableAssertionWithContext:relinquishmentHandler:",  v20,  v24));
  if (!v19) {

  }
  __int128 v22 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADAudioSessionCoordinator acquireAudioSessionAssertionWithContext:relinquishmentHandler:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v21;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s assertion = %@", buf, 0x16u);
  }

LABEL_20:
  return v21;
}

    unsigned int v13 = a1[5];
    if (v13) {
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v7);
    }
    uint64_t v9 = 0LL;
    goto LABEL_16;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[SAGenericCommand aceObjectWithDictionary:]( &OBJC_CLASS___SAGenericCommand,  "aceObjectWithDictionary:",  v5));
  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  id v11 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (!v9)
  {
    if (v11)
    {
      *(_DWORD *)__int128 buf = 136315394;
      BOOL v31 = "-[ADCommandCenter(RemoteExecute) _remoteExecute_remoteDeviceExecuteCommand:onPeer:allowsRelay:throughProxyDe"
            "vice:executionContext:completion:]_block_invoke";
      int v32 = 2112;
      uint64_t v33 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Malformed command dictionary: %@",  buf,  0x16u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 102LL));
    goto LABEL_13;
  }

  if (v11)
  {
    *(_DWORD *)__int128 buf = 136315394;
    BOOL v31 = "-[ADCommandCenter(RemoteExecute) _remoteExecute_remoteDeviceExecuteCommand:onPeer:allowsRelay:throughProxyDevi"
          "ce:executionContext:completion:]_block_invoke";
    int v32 = 2112;
    uint64_t v33 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Response came back from the companion: %@",  buf,  0x16u);
  }

  uint64_t v12 = a1[5];
  if (v12) {
    (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v9, 0LL);
  }
  uint64_t v7 = 0LL;
LABEL_16:
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  __int128 v15 = AFAnalyticsContextCreateWithError(v7);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v29[0] = v16;
  __int128 v19 = AFAnalyticsContextCreateWithCommand(v9, v17, v18);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v29[1] = v20;
  __int128 v21 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  v27[0] = @"transport type";
  v27[1] = @"id";
  __int128 v22 = a1[4];
  v28[0] = v21;
  v28[1] = v22;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  2LL));
  v29[2] = v23;
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v29, 3LL));
  uint64_t v25 = AFAnalyticsContextsMerge();
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  [v14 logEventWithType:4802 context:v26];
}

    uint64_t v9 = 0;
    goto LABEL_21;
  }

  uint64_t v7 = v5;
  if ([v7 announcementType] == (id)8)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 announcementIdentifier]);
    uint64_t v9 = [v8 isEqual:v4];
    if ((v9 & 1) != 0)
    {
      -[ADExternalNotificationRequestHandler _stopCurrentRequestWithReason:shouldCancelRequest:]( self,  "_stopCurrentRequestWithReason:shouldCancelRequest:",  12LL,  1LL);
      -[ADExternalNotificationRequestHandler _completeNotificationsWithSuccess:forReason:shouldEmitInstrumentationEvent:]( self,  "_completeNotificationsWithSuccess:forReason:shouldEmitInstrumentationEvent:",  0LL,  6LL,  1LL);
      currentState = self->_currentState;
      if (currentState >= 5)
      {
        id v11 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          id v17 = v11;
          Name = AFExternalNotificationRequestHandlerStateGetName(currentState);
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(Name);
          __int128 v20 = 136315394;
          __int128 v21 = "-[ADExternalNotificationRequestHandler _deactivateWorkoutReminderAnnouncementWithId:]";
          __int128 v22 = 2112;
          uint64_t v23 = v19;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s Transitioning from state %@ to idle for deactivation request",  (uint8_t *)&v20,  0x16u);
        }

        -[ADExternalNotificationRequestHandler _changeCurrentStateToState:](self, "_changeCurrentStateToState:", 1LL);
      }
    }

    else
    {
      __int128 v15 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        __int128 v20 = 136315138;
        __int128 v21 = "-[ADExternalNotificationRequestHandler _deactivateWorkoutReminderAnnouncementWithId:]";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s Current announcement does not match the requested deactivation request's announce id - ignoring",  (uint8_t *)&v20,  0xCu);
      }
    }
  }

  else
  {
    __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      __int128 v20 = 136315138;
      __int128 v21 = "-[ADExternalNotificationRequestHandler _deactivateWorkoutReminderAnnouncementWithId:]";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Current announcement is not a workout reminder - ignoring",  (uint8_t *)&v20,  0xCu);
    }

    uint64_t v9 = 0;
  }

LABEL_21:
  return v9;
}

void sub_1000597BC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[3] outputDevices]);
    *((_BYTE *)v2 + 66) = 0;
    *((_WORD *)v2 + 32) = 0;
    if ([v3 count])
    {
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      id v4 = v3;
      id v5 = [v4 countByEnumeratingWithState:&v19 objects:v25 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v20;
        do
        {
          for (i = 0LL; i != v6; i = (char *)i + 1)
          {
            if (*(void *)v20 != v7) {
              objc_enumerationMutation(v4);
            }
            uint64_t v9 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
            unint64_t v10 = (unint64_t)[v9 deviceType];
            if (v10 <= 4 && ((1LL << v10) & 0x13) != 0)
            {
              *((_BYTE *)v2 + 64) = 1;
              if (v10 == 1)
              {
                uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADBluetoothManager sharedInstance](&OBJC_CLASS___ADBluetoothManager, "sharedInstance"));
                uint64_t v13 = objc_claimAutoreleasedReturnValue([v9 deviceID]);
                __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceWithAddress:v13]);

                __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 deviceInfo]);
                LOBYTE(v13) = [v15 isAdvancedAppleAudioDevice];

                id v16 = (os_log_s *)AFSiriLogContextConnection;
                BOOL v17 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
                if ((v13 & 1) != 0)
                {
                  __int128 v18 = (char *)v2 + 66;
                  if (v17)
                  {
                    *(_DWORD *)__int128 buf = 136315138;
                    __int16 v24 = "-[ADResponseModeProvider _fetchConnectedAudioAccessoryState]_block_invoke";
                    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s #modes Wx output route detected",  buf,  0xCu);
                    __int128 v18 = (char *)v2 + 66;
                  }
                }

                else
                {
                  __int128 v18 = (char *)v2 + 65;
                  if (v17)
                  {
                    *(_DWORD *)__int128 buf = 136315138;
                    __int16 v24 = "-[ADResponseModeProvider _fetchConnectedAudioAccessoryState]_block_invoke";
                    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s #modes Third party bluetooth device detected",  buf,  0xCu);
                    __int128 v18 = (char *)v2 + 65;
                  }
                }

                *__int128 v18 = 1;
              }
            }
          }

          id v6 = [v4 countByEnumeratingWithState:&v19 objects:v25 count:16];
        }

        while (v6);
      }
    }

    else
    {
      *((_WORD *)v2 + 32) = 0;
      *((_BYTE *)v2 + 66) = 0;
    }
  }
}

void sub_100059A54(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    uint64_t v9 = "-[ADResponseModeProvider _computeMode]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s #modes Computing mode for tvOS",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _computeModeFortvOS]);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 56);
  *(void *)(v4 + 56) = v3;

  id v6 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 56LL);
    int v8 = 136315394;
    uint64_t v9 = "-[ADResponseModeProvider _computeMode]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #modes Computed mode: %@",  (uint8_t *)&v8,  0x16u);
  }

uint64_t sub_100059B7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100059B8C(uint64_t a1)
{
}

void sub_100059B94(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 56LL);
  if (v2) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v2);
  }
  uint64_t v3 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v5 = 136315394;
    id v6 = "-[ADResponseModeProvider fetchCurrentMode]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #modes Fetching current mode: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_100059C70(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = 136315394;
    int v5 = "-[ADResponseModeProvider updateModesConfiguration:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s #modes Triggering mode computation with updated modesconfiguration %@",  (uint8_t *)&v4,  0x16u);
  }

LABEL_12:
  -[NSMutableArray addObject:](v9, "addObject:", SAContextTypeBACKGROUND_CONTEXTValue);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }

  [*(id *)(a1 + 32) _close];
  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, void, void, NSError *))(v13 + 16))( v13,  *(void *)(*(void *)(a1 + 32) + 88LL),  *(void *)(*(void *)(a1 + 32) + 24LL),  v9);
  }
}
}
}
}
}
}
}

    uint64_t v2 = v12;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___ADAccount);
    -[ADAccount setIsReadOnly:](v12, "setIsReadOnly:", v6);
    -[ADAccount setInstanceContext:](v12, "setInstanceContext:", v4);
    goto LABEL_13;
  }

        __int16 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      __int16 v26 = [v6 countByEnumeratingWithState:&v38 objects:v50 count:16];
      uint64_t v8 = v26;
      if (!v26)
      {
LABEL_17:

        uint64_t v27 = *(void *)(v33 + 32);
        v42[0] = @"request_id";
        v42[1] = @"context_snapshot";
        v43[0] = v27;
        v43[1] = v4;
        v42[2] = @"context_snapshot_by_assistant_identifier";
        v43[2] = v5;
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v43,  v42,  3LL));
        int v29 = *(void **)(v33 + 40);
        uint64_t v30 = *(void *)(v33 + 48);
        BOOL v31 = (void *)v29[24];
        int v32 = (void *)objc_claimAutoreleasedReturnValue([v29 _contextLinkMessageOptions]);
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_1000F58AC;
        v35[3] = &unk_1004FC2A0;
        int v36 = *(id *)(v33 + 32);
        BOOL v37 = *(id *)(v33 + 48);
        [v31 sendRequestID:@"com.apple.siri.rapport-link.request.generic" messageType:@"context_snapshot_push" messagePayload:v28 toPeer:v30 options:v32 completion:v35];

        uint64_t v3 = v34;
        break;
      }
    }
  }
}

    (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), 0LL, v8);
    goto LABEL_13;
  }

  uint64_t v13 = v5;
  __int128 v14 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    __int128 v21 = 136315394;
    __int128 v22 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
    uint64_t v23 = 2112;
    __int16 v24 = v13;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Received response: %@",  (uint8_t *)&v21,  0x16u);
  }

  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v13 result]);
  id v16 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
  isKindOfClass = objc_opt_isKindOfClass(v15, v16);

  if ((isKindOfClass & 1) != 0)
  {
    __int128 v18 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    __int128 v20 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      __int128 v21 = 136315138;
      __int128 v22 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s Received non-success response while canceling remote announcement",  (uint8_t *)&v21,  0xCu);
    }

    __int128 v18 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v18();

LABEL_13:
}

  uint64_t v7 = (void *)nw_connection_create_with_connected_socket();
  uint64_t v2 = 0LL;
  if (!v7) {
    goto LABEL_13;
  }
LABEL_17:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  return v15;
}
}

    id v16 = 0;
    goto LABEL_14;
  }

  nacContext = self->_nacContext;
  __int16 v10 = v6;
  sub_100007908((uint64_t)nacContext, (uint64_t)[v10 bytes], (int)objc_msgSend(v10, "length"));
  if (!v11)
  {
    self->_sessionState = 2LL;
    id v16 = 1;
    goto LABEL_14;
  }

  uint64_t v12 = v11;
  uint64_t v13 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
  {
    __int128 v18 = 136315394;
    __int128 v19 = "-[ADDeviceAuthenticationSessionV0 completeWithHandshakeResponse:error:]";
    __int128 v20 = 1024;
    __int128 v21 = v12;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s NACKeyEstablishment error %d",  (uint8_t *)&v18,  0x12u);
  }

  -[ADDeviceAuthenticationSessionV0 invalidate](self, "invalidate");
  if (!a4) {
    goto LABEL_12;
  }
  sessionState = v12;
  __int128 v14 = @"com.apple.assistant.deviceAuth.session.GenericError";
  __int128 v15 = &off_100513A70;
LABEL_11:
  id v16 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v14,  sessionState,  v15));
LABEL_14:

  return v16;
}

    id v16 = 0LL;
    goto LABEL_16;
  }

  __int128 v21 = 0LL;
  nacContext = self->_nacContext;
  __int16 v10 = v6;
  sub_100008B54( (uint64_t)nacContext,  (uint64_t)[v10 bytes],  (uint64_t)objc_msgSend(v10, "length"),  (uint64_t)&v21);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v23 = "-[ADDeviceAuthenticationSessionV0 signData:error:]";
      __int16 v24 = 1026;
      uint64_t v25 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s NACSign error %{public}d", buf, 0x12u);
    }

    -[ADDeviceAuthenticationSessionV0 invalidate](self, "invalidate");
    if (a4)
    {
      sessionState = v12;
      __int128 v14 = @"com.apple.assistant.deviceAuth.session.GenericError";
      __int128 v15 = &off_100513A98;
LABEL_11:
      id v16 = 0LL;
      *a4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v14,  sessionState,  v15));
      goto LABEL_16;
    }

    goto LABEL_12;
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v21, 0LL));
  BOOL v17 = sub_100008CF8(v21);
  if (v17)
  {
    __int128 v18 = v17;
    __int128 v19 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v23 = "-[ADDeviceAuthenticationSessionV0 signData:error:]";
      __int16 v24 = 1026;
      uint64_t v25 = v18;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s Error disposing validation data %{public}d",  buf,  0x12u);
    }
  }
}

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v11 postNotificationName:@"ADCurrentHomeKitHomeChanged" object:0];
}

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v14 postNotificationName:@"ADCurrentHomeKitHomeChanged" object:0];
}
}

  -[NSMutableArray addObject:](v3, "addObject:", SAAlarmDayOfWeekWednesdayValue);
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
}
}

  return v6;
}

  uint64_t v2 = *(void *)(a1 + 32);
LABEL_13:
  uint64_t v39 = 0u;
  uint64_t v40 = 0u;
  BOOL v37 = 0u;
  int v38 = 0u;
  obj = *(id *)(v2 + 232);
  __int128 v18 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v18)
  {
    __int128 v19 = v18;
    __int128 v20 = *(void *)v38;
    __int128 v21 = kAFMultiUserSharedUserIdKey;
    __int128 v22 = kAFMultiUserConformingSharedUserIdKey;
    do
    {
      uint64_t v23 = 0LL;
      do
      {
        if (*(void *)v38 != v20) {
          objc_enumerationMutation(obj);
        }
        __int16 v24 = a1;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 232) objectForKey:*(void *)(*((void *)&v37 + 1) + 8 * (void)v23)]);
        __int16 v26 = objc_alloc(&OBJC_CLASS___NSDictionary);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 sharedUserID]);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v25 loggableMusicSyncSharedUserID]);
        int v29 = -[NSDictionary initWithObjectsAndKeys:](v26, "initWithObjectsAndKeys:", v27, v21, v28, v22, 0LL);

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v25 homeUserUUID]);
        if (v30)
        {
          BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v25 homeUserUUID]);
          -[NSMutableDictionary setObject:forKey:](v36, "setObject:forKey:", v29, v31);
        }

        uint64_t v23 = (char *)v23 + 1;
        a1 = v24;
      }

      while (v19 != v23);
      __int128 v19 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
    }

    while (v19);
  }

  int v32 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = v32;
    int v34 = -[NSMutableDictionary count](v36, "count");
    *(_DWORD *)__int128 buf = 136315394;
    int v42 = "-[ADMultiUserService getConformingSharedUserIds:]_block_invoke";
    uint64_t v43 = 2048;
    int v44 = v34;
    _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "%s User count: %ld", buf, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

  return v6;
}

  uint64_t v9 = *(void **)(a1 + 32);
  return [v9 _continueAuthentication];
}

  if (v8) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = v5 == 0LL;
  }
  if (v9)
  {
    __int16 v10 = 0LL;
  }

  else
  {
    v13[0] = @"d";
    v13[1] = @"v";
    v14[0] = v5;
    v14[1] = &off_1005137E0;
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v14,  v13,  2LL));
  }

  return v10;
}

    __int128 v20 = &_dispatch_data_empty;
    __int128 v21 = &_dispatch_data_empty;
    goto LABEL_13;
  }

  if (v19)
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v46 = "-[ADSiriConnectionRemote _establishNetworkConnectionToURL:connectionId:withPOP:countAgainstFallbacksAllowed:]";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s Falling back", buf, 0xCu);
  }

  __int128 v20 = 0LL;
LABEL_13:
  __int128 v22 = self->_safetyNetBuffer;
  self->_safetyNetBuffer = (OS_dispatch_data *)v20;

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[ADSiriConnectionRemote _networkConnectionProvider](self, "_networkConnectionProvider"));
  [v23 setConnectByPOPMethod:v7];
  [v23 setRetransmitConnectionDropTime:8.0];
  [v23 setStaleInterval:100.0];
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[ADAccount activeAccount](&OBJC_CLASS___ADAccount, "activeAccount"));
  if (![v24 connectionPolicyStatus])
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 saConnectionPolicy]);
    [v23 setProviderConnectionPolicy:v25];
  }

  -[ADSiriConnectionRemote _doMetricsBookkeepingForNetworkStreamStart]( self,  "_doMetricsBookkeepingForNetworkStreamStart",  a2);
  __int16 v26 = self->_networkConnectionSequenceNumber + 1;
  self->_networkConnectionSequenceNumber = v26;
  if (v7)
  {
    uint64_t v27 = self->_networkOutputBuffer;
    uint64_t v28 = v27;
    int v29 = v12;
    if (v27) {
      size = dispatch_data_get_size((dispatch_data_t)v27);
    }
    else {
      size = 0LL;
    }
    BOOL v31 = (os_log_s *)AFSiriLogContextProxy;
    if (os_log_type_enabled(AFSiriLogContextProxy, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v46 = "-[ADSiriConnectionRemote _establishNetworkConnectionToURL:connectionId:withPOP:countAgainstFallbacksAllowed:]";
      __n128 v47 = 2048;
      __n128 v48 = size;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "%s Will open stream with initial payload length %lu",  buf,  0x16u);
    }

    uint64_t v12 = v29;
    p_networkURL = &self->_networkURL;
  }

  else
  {
    size = 0LL;
    uint64_t v28 = 0LL;
  }

  if ([v23 supportsInitialPayload])
  {
    if (v11)
    {
LABEL_25:
      int v32 = (NSURL *)v11;
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v33 = v11;
    int v34 = p_networkURL;
    int v35 = v12;
    int v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    [v36 handleFailureInMethod:v39 object:self file:@"ADSiriConnectionRemote.m" lineNumber:416 description:@"Programming error: network stream provider should support initial payload."];

    uint64_t v12 = v35;
    p_networkURL = v34;
    uint64_t v11 = v33;
    if (v33) {
      goto LABEL_25;
    }
  }

  int v32 = *p_networkURL;
  if (!v32)
  {
    int v32 = (NSURL *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"ADSiriConnectionRemoteErrorDomain",  2LL,  0LL));
    -[ADSiriConnectionRemote _didEstablishNetworkConnectionForProvider:initialPayload:ofLength:error:]( self,  "_didEstablishNetworkConnectionForProvider:initialPayload:ofLength:error:",  v23,  0LL,  0LL,  v32);
    goto LABEL_31;
  }

  return v5;
}

LABEL_14:
  -[NSMutableArray addObject:](v9, "addObject:", SAContextTypeRESTRICTED_APP_CONTEXTValue);
  if ((v4 & 0x20) != 0) {
LABEL_7:
  }
    -[NSMutableArray addObject:](v9, "addObject:", SAContextTypeNL_ALERT_CONTEXTValue);
LABEL_8:
  [v7 setPromiseTypes:v9];

  if (v6)
  {
    [v7 setAceId:v6];
  }

  else
  {
    uint64_t v11 = SiriCoreUUIDStringCreate(v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v7 setAceId:v12];
  }

  -[ADCommandCenter _sendCommandToServer:](self, "_sendCommandToServer:", v7);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 aceId]);

  return v13;
}
}

  uint64_t v9 = v32;
LABEL_15:
  if (!v8)
  {
    __int128 v21 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    pairedWatches = self->_pairedWatches;
    self->_pairedWatches = v21;
  }

  uint64_t v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v12 = (NSMutableSet *)v23;
  if (v9) {
    -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v9, @"Watch Language");
  }
  if (v10) {
    -[NSMutableSet setObject:forKey:](v12, "setObject:forKey:", v10, @"Watch User Agent String");
  }
  -[NSMutableSet setObject:forKey:](v12, "setObject:forKey:", v33, @"Watch Assistant Identifier");
  -[NSMutableSet setObject:forKey:](v12, "setObject:forKey:", v7, @"Watch Override Id");
  __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v41 = "-[ADAccount(SharedData) updateGizmoData:forUniqueId:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s inserted", buf, 0xCu);
  }

  -[NSMutableSet addObject:](self->_pairedWatches, "addObject:", v12);
LABEL_38:

  -[ADAccount save](self, "save");
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  objc_msgSend(v27, "setHasPairedWatches:", -[NSMutableSet count](self->_pairedWatches, "count") != 0);

  keychainQueue = (dispatch_queue_s *)self->_keychainQueue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A8A50;
  block[3] = &unk_1004FD940;
  void block[4] = self;
  dispatch_async(keychainQueue, block);
LABEL_39:
}

  return (char)v6;
}

  -[NSMutableArray addObject:](v17, "addObject:", SAAlarmDayOfWeekThursdayValue);
  if ((v15 & 0x10) == 0)
  {
LABEL_7:
    if ((v15 & 0x20) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    -[NSMutableArray addObject:](v17, "addObject:", SAAlarmDayOfWeekSaturdayValue);
    if ((v15 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  return v19;
}

  uint64_t v11 = 1;
LABEL_15:

  return v11;
}
}
  }

  uint64_t v13 = v21[5];
  _Block_object_dispose(&v20, 8);

  return v13;
}
  }
}
}

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      __int16 v26 = [v6 countByEnumeratingWithState:&v31 objects:v39 count:16];
      uint64_t v9 = v26;
    }

    while (v26);
  }
}

  __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    BOOL v17 = self->_currentAccessory;
    __int128 v18 = 136315395;
    __int128 v19 = "-[ADHomeInfoManager _currentAccessory]";
    __int128 v20 = 2113;
    __int128 v21 = v17;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s currentAccessory = %{private}@",  (uint8_t *)&v18,  0x16u);
  }

  -[ADHomeInfoManager _updateCurrentAccessoryInfoWithAccessory:]( self,  "_updateCurrentAccessoryInfoWithAccessory:",  self->_currentAccessory);
  currentAccessory = self->_currentAccessory;
  if (!self->isATVOnly || !currentAccessory) {
    return currentAccessory;
  }
  __int128 v15 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int128 v18 = 136315138;
    __int128 v19 = "-[ADHomeInfoManager _currentAccessory]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s New current accessory -> allowing RmV sync of Home settings",  (uint8_t *)&v18,  0xCu);
  }

  self->_allowATVRmVHomeSettingSync = 1;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v16 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];

  return self->_currentAccessory;
}

  return v14;
}

    if ([v9 count])
    {
      __int128 v14 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v9 count]);
      requestMap = self->_requestMap;
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 refId]);
      BOOL v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](requestMap, "objectForKey:", v16));

      uint64_t v28 = 0u;
      int v29 = 0u;
      __int16 v26 = 0u;
      uint64_t v27 = 0u;
      __int128 v18 = v9;
      __int128 v19 = [v18 countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (v19)
      {
        __int128 v20 = v19;
        __int128 v21 = *(void *)v27;
        do
        {
          for (j = 0LL; j != v20; j = (char *)j + 1)
          {
            if (*(void *)v27 != v21) {
              objc_enumerationMutation(v18);
            }
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v17,  "objectForKey:",  *(void *)(*((void *)&v26 + 1) + 8 * (void)j),  (void)v26));
            if (v23) {
              -[NSMutableArray addObject:](v14, "addObject:", v23);
            }
          }

          __int128 v20 = [v18 countByEnumeratingWithState:&v26 objects:v34 count:16];
        }

        while (v20);
      }
    }

    else
    {
      __int128 v14 = 0LL;
    }

    if (-[NSMutableArray count](v14, "count", (void)v26)) {
      __int16 v24 = v14;
    }
    else {
      __int16 v24 = 0LL;
    }
    uint64_t v13 = v24;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  return v13;
}

  -[NSMutableArray addObject:](v3, "addObject:", SAAlarmDayOfWeekFridayValue);
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    int v4 = &SAAlarmDayOfWeekSundayValue;
    goto LABEL_17;
  }

        int v29 = self->_path;
        *(_DWORD *)__int128 buf = 136315650;
        int v56 = "-[ADOfflineMetricsMap insertMetrics:withOfflineIdentifier:]";
        uint8x16_t v57 = 2112;
        uint16x8_t v58 = v29;
        int8x16_t v59 = 2112;
        uint16x8_t v60 = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s Unable to create directory at path %@ due to error %@.",  buf,  0x20u);
        goto LABEL_34;
      }
    }

      BOOL v17 = objc_alloc_init(&OBJC_CLASS___ADAudioSessionCoordinationMessageEndAudioSessionResponse);
      ((void (**)(id, ADAudioSessionCoordinationMessageEndAudioSessionResponse *, id))v10)[2](v10, v17, 0LL);

LABEL_15:
      __int128 v14 = 0LL;
      goto LABEL_16;
    }
  }

  if (v10) {
    goto LABEL_9;
  }
LABEL_16:
}
}

  __int128 v15 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  BOOL v17 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v15,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v16,  v3,  v4,  v8,  0LL,  0LL,  0LL);

  return v17;
}

  if (v15) {
    -[NSMutableDictionary setObject:forKey:](self->_sharedUsersByiCloudAltDSID, "setObject:forKey:", v4, v15);
  }
  __int128 v18 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __int128 v20 = 136315138;
    __int128 v21 = "-[ADMultiUserService _updateMappingsForSharedUser:]";
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s Posting notification as shared user info updated",  (uint8_t *)&v20,  0xCu);
  }

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kAFSharedUserUpdateDarwinNotification, 0LL, 0LL, 1u);
}

    if (v8)
    {
      if (!++v8) {
        goto LABEL_31;
      }
    }

    else
    {
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 setConnectionPolicyFirstFailureDate:v21];

      uint64_t v8 = 1LL;
    }

  return v7;
}

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      __int16 v10 = [v8 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v10);
  }

  __int128 v18 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __int128 v19 = *(void *)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v27 = "-[ADDeviceResolutionServiceListener getContextAndProximitySnapshotForCurrentRequestForDeviceUnits:serviceConte"
          "xts:completion:]_block_invoke_3";
    uint64_t v28 = 2112;
    int v29 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s #hal cacheDeviceContextProximity getContextAndProximitySnapshotForCurrentRequest result: %@",  buf,  0x16u);
  }

  __int128 v20 = *(void *)(a1 + 56);
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 48),  (void)v22));
  (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v21);
}
}

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentRequest]);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentRequest]);
    __int16 v10 = [v9 requestWasInterrupted];

    if (v10)
    {
      uint64_t v11 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void **)(a1 + 40);
        uint64_t v13 = v11;
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 _currentRequest]);
        __int128 v15 = [v14 requestWasInterrupted];
        __int128 v20 = 136315394;
        __int128 v21 = "-[ADExternalNotificationRequestHandler _startAnnouncementRequestWithRequestInfo:]_block_invoke";
        __int128 v22 = 1024;
        LODWORD(v23) = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s request was interrupted: %d",  (uint8_t *)&v20,  0x12u);
      }
    }
  }

  id v16 = *(void **)(a1 + 40);
  if (*(_BYTE *)(a1 + 56))
  {
    [*(id *)(a1 + 40) _completeNotificationsWithSuccess:1 forReason:10 shouldEmitInstrumentationEvent:1];
  }

  else
  {
    BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentRequest]);
    objc_msgSend( v16,  "_completeNotificationsWithSuccess:forReason:shouldEmitInstrumentationEvent:",  objc_msgSend(v17, "requestWasInterrupted"),  10,  1);
  }

void sub_10005A7F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_10005AC78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10005C6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id sub_10005CC38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setAlertContextDirty");
}

void sub_10005CC40(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentClient]);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2)
  {
    id v4 = v2;
    [v2 adGetBulletinContext:v3];
LABEL_5:
    uint64_t v2 = v4;
    goto LABEL_6;
  }

  if (v3)
  {
    id v4 = 0LL;
    (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0LL);
    goto LABEL_5;
  }

LABEL_6:
}
}
}
}
}
}

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v7 logEventWithType:4570 context:0];

    __int16 v6 = 1;
    goto LABEL_7;
  }

  if (v2) {
    goto LABEL_6;
  }
LABEL_4:
  __int16 v6 = 0;
LABEL_7:
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 48);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_100167BB8;
  v25[3] = &unk_1004F33E0;
  v25[4] = v8;
  __int16 v26 = *(id *)(a1 + 48);
  [v9 enumerateObjectsUsingBlock:v25];
  __int16 v10 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 104);
  *(void *)(v11 + 104) = v10;

  if (*(_BYTE *)(a1 + 72) && *(void *)(a1 + 56)) {
    uint64_t v13 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "containsObject:");
  }
  else {
    uint64_t v13 = 0;
  }
  __int128 v14 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v14 + 56) != v13)
  {
    *(_BYTE *)(v14 + 56) = v13;
    [*(id *)(a1 + 32) _updateClientLinkSiriInfo];
    [*(id *)(a1 + 32) _updateContextCollectorStatusToRapport:*(unsigned __int8 *)(*(void *)(a1 + 32) + 56)];
  }

  if (v6)
  {
    uint64_t v23 = 0u;
    __int16 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v15 = *(id *)(*(void *)(a1 + 32) + 40LL);
    id v16 = [v15 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v16)
    {
      BOOL v17 = v16;
      __int128 v18 = *(void *)v22;
      do
      {
        __int128 v19 = 0LL;
        do
        {
          if (*(void *)v22 != v18) {
            objc_enumerationMutation(v15);
          }
          objc_msgSend( *(id *)(*((void *)&v21 + 1) + 8 * (void)v19),  "contextCollectorChangedToDevicesWithIdentifiers:localDeviceIsCollector:",  *(void *)(*(void *)(a1 + 32) + 48),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 56),  (void)v21);
          __int128 v19 = (char *)v19 + 1;
        }

        while (v17 != v19);
        BOOL v17 = [v15 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }

      while (v17);
    }
  }

  __int128 v20 = *(void *)(a1 + 64);
  if (v20) {
    (*(void (**)(void))(v20 + 16))();
  }
}
}

  if (self->_supportsSiriHybridUoD) {
    goto LABEL_7;
  }
  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v25 = "-[ADAssetManager _registerAssetStatusTrackers]";
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Device does not support full Siri UoD or Hybrid UoD, not registering assets change for NL assets",  buf,  0xCu);
  }

  uint64_t v9 = (objc_msgSend(v3, "deviceFlags", v6) >> 26) & 1;
  __int16 v10 = ([v3 deviceFlags] >> 27) & 1;
  uint64_t v11 = [v3 autoAncCapability] == 1;
  __int128 v20 = v1;
  uint64_t v12 = sub_10022DC28(v1);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10022DE40;
  v21[3] = &unk_1004F7098;
  __int128 v22 = v3;
  uint64_t v27 = (((_DWORD)v5 - 8194) < 0x25) & (0x1C7BB7FF9BuLL >> (v5 - 2));
  uint64_t v25 = v4;
  __int16 v26 = (int)v5;
  __int128 v14 = v19;
  uint64_t v23 = v14;
  uint64_t v28 = v8;
  int v29 = (((_DWORD)v5 - 8212) < 0x11) & (0x116A1u >> ((_BYTE)v5 - 20));
  uint64_t v30 = v9;
  BOOL v31 = v10;
  int v32 = v11;
  __int128 v15 = v13;
  __int16 v24 = v15;
  id v16 = +[AFBluetoothDeviceInfo newWithBuilder:](&OBJC_CLASS___AFBluetoothDeviceInfo, "newWithBuilder:", v21);
  BOOL v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    int v34 = "_ADCBV2BluetoothDeviceGetDeviceInfo";
    int v35 = 2112;
    int v36 = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s deviceInfo: %@", buf, 0x16u);
  }

  id v1 = v20;
LABEL_10:

  return v16;
}

  uint64_t v11 = a1[5];
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
}

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

  uint64_t v13 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  __int128 v15 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v13,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v14,  v3,  v4,  v8,  0LL,  0LL,  0LL);

  return v15;
}
}

    uint64_t v12 = 0LL;
    if (!v4) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_activeiTunesAccount"));
  uint64_t v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_storefront"));
  if (v9)
  {
    __int16 v10 = (NSString *)v9;
    goto LABEL_15;
  }

  uint64_t v13 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    __int128 v20 = 136315138;
    __int128 v21 = "-[ADAssistantDataManager _updateItunesStoreIdentifier:]";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Using local identifier", (uint8_t *)&v20, 0xCu);
  }

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_localiTunesAccount"));
  if (!v14)
  {
    __int128 v15 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      __int128 v20 = 136315138;
      __int128 v21 = "-[ADAssistantDataManager _updateItunesStoreIdentifier:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Unable to get the local iTunes Account.",  (uint8_t *)&v20,  0xCu);
    }
  }

  id v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ams_storefront"));
  if (!v16)
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      __int128 v20 = 136315138;
      __int128 v21 = "-[ADAssistantDataManager _updateItunesStoreIdentifier:]";
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s No store front identifier available",  (uint8_t *)&v20,  0xCu);
    }

    goto LABEL_6;
  }

  __int16 v10 = (NSString *)v16;

LABEL_15:
  cachedStoreFrontId = self->_cachedStoreFrontId;
  self->_cachedStoreFrontId = v10;
  __int128 v18 = v10;

  uint64_t v12 = -[NSString isEqualToString:](self->_cachedStoreFrontId, "isEqualToString:", v5) ^ 1;
  if (v4) {
LABEL_16:
  }
    v4[2](v4, v12);
LABEL_17:
}

  return v4;
}
}
}
}

  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  if (!result)
  {
    __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      BOOL v17 = 136315138;
      __int128 v18 = "-[ADBluetoothInEarDetectionStateObserver stopObservingForObserverID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s No IED state observers, stop observing Bluetooth device",  (uint8_t *)&v17,  0xCu);
    }

    return [*(id *)(a1 + 32) _invalidate];
  }

  return result;
}

id sub_10005CCA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setBackgroundContextDirty];
}

uint64_t sub_10005CCA8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10005CCBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005CD6C;
  block[3] = &unk_1004FD4C0;
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10005CD6C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SASetApplicationContext);
  [v2 setRefId:*(void *)(a1 + 32)];
  [v2 setOrderedContext:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _sendCommandToServer:v2];
}

void sub_10005CDC4(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("INAppInfo");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1005779E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getINAppInfoClass(void)_block_invoke"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCommandCenter_Context.m",  61,  @"Unable to find class %s",  "INAppInfo");

    __break(1u);
  }

void *sub_10005CE88()
{
  id v4 = 0LL;
  if (!qword_1005779E8)
  {
    __int128 v5 = off_1004EEA78;
    uint64_t v6 = 0LL;
    qword_1005779E8 = _sl_dlopen(&v5, &v4);
  }

  unint64_t v0 = (void *)qword_1005779E8;
  if (!qword_1005779E8)
  {
    unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *IntentsLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCommandCenter_Context.m",  60,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  id v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_10005CF8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = v6;
    id v9 = a2;
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v7 encodedClassName]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 encodedClassName]);

    *(_DWORD *)__int128 buf = 136315906;
    id v16 = "-[ADCommandCenter(Context) _context_setOverriddenApplicationContext:withContext:]_block_invoke";
    __int16 v17 = 2112;
    __int128 v18 = v10;
    __int16 v19 = 2112;
    __int128 v20 = v11;
    __int16 v21 = 2112;
    id v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Phone search reply for %@ %@ %@", buf, 0x2Au);
  }

  uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005D25C;
  block[3] = &unk_1004FD940;
  id v14 = *(id *)(a1 + 48);
  dispatch_async(v12, block);
}

void sub_10005D114(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005D22C;
  block[3] = &unk_1004FD4C0;
  id v7 = v3;
  id v8 = a1[5];
  id v9 = a1[6];
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_10005D1D4(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SASetApplicationContext);
  [v2 setOrderedContext:*(void *)(a1 + 32)];
  [v2 setRefId:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) _sendCommandToServer:v2];
}

void sub_10005D22C(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10005D25C(uint64_t a1)
{
}

void sub_10005D264(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setAssociatedBundleIdentifier:v3];
  [v4 setAceContexts:*(void *)(a1 + 40)];
}

void sub_10005D2AC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v22 = "-[ADCommandCenter(Context) _fetchAndSendApplicationContextForApplicationInfos:fetchedOrderedContextDictionarie"
          "s:applicationContexts:refID:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #context Finished fetching app context - %@",  buf,  0x16u);
  }

  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005D448;
  block[3] = &unk_1004EE9E0;
  id v14 = a1[5];
  id v15 = v5;
  id v16 = a1[6];
  id v9 = a1[7];
  id v10 = a1[4];
  id v17 = v9;
  id v18 = v10;
  id v19 = a1[8];
  id v20 = v6;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_10005D448(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SASetApplicationContext);
  [v2 setRefId:*(void *)(a1 + 48)];
  [v2 setAceId:*(void *)(a1 + 56)];
  [v2 setOrderedContext:*(void *)(a1 + 32)];
  BOOL v31 = v2;
  [*(id *)(a1 + 64) _sendCommandToServer:v2];
  int v36 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  int v32 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  uint64_t v35 = a1;
  id obj = *(id *)(a1 + 72);
  id v3 = [obj countByEnumeratingWithState:&v44 objects:v48 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v45;
    id v6 = sub_10005D81C;
    id v7 = &unk_1004EE990;
    do
    {
      id v8 = 0LL;
      id v33 = v4;
      do
      {
        if (*(void *)v45 != v5) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)v8);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 associatedBundleIdentifier]);
        id v11 = v9;
        if (v10)
        {
          id v12 = *(void **)(v35 + 80);
          v42[0] = _NSConcreteStackBlock;
          v42[1] = 3221225472LL;
          v42[2] = v6;
          v42[3] = v7;
          id v43 = v10;
          id v13 = [v12 indexOfObjectPassingTest:v42];
          if (v13 != (id)0x7FFFFFFFFFFFFFFFLL)
          {
            id v14 = v13;
            id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v35 + 80) objectAtIndex:v13]);
            v40[0] = _NSConcreteStackBlock;
            v40[1] = 3221225472LL;
            v40[2] = sub_10005D85C;
            v40[3] = &unk_1004F0D40;
            v40[4] = v11;
            id v41 = v15;
            id v16 = v15;
            id v17 = v7;
            id v18 = v6;
            uint64_t v19 = v5;
            uint64_t v20 = objc_claimAutoreleasedReturnValue([v11 mutatedCopyWithMutator:v40]);

            -[NSMutableIndexSet addIndex:](v32, "addIndex:", v14);
            id v4 = v33;
            id v11 = (id)v20;
            uint64_t v5 = v19;
            id v6 = v18;
            id v7 = v17;
          }
        }

        -[NSMutableArray addObject:](v36, "addObject:", v11);

        id v8 = (char *)v8 + 1;
      }

      while (v4 != v8);
      id v4 = [obj countByEnumeratingWithState:&v44 objects:v48 count:16];
    }

    while (v4);
  }

  __int16 v21 = *(void **)(v35 + 80);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_10005D8E4;
  v37[3] = &unk_1004EE9B8;
  int v38 = v32;
  uint64_t v39 = v36;
  id v22 = v36;
  __int16 v23 = v32;
  [v21 enumerateObjectsUsingBlock:v37];
  id v24 = [[AFApplicationContextSnapshot alloc] initWithApplicationContexts:v22];
  id v25 = objc_alloc(&OBJC_CLASS___AFDeviceContextMetadata);
  uint64_t v26 = AFDeviceContextKeyApplication;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 15.0));
  id v29 = [v25 initWithType:v26 deliveryDate:v27 expirationDate:v28 redactedKeyPaths:0 historyConfiguration:0];

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[AFContextDonationService defaultService](&OBJC_CLASS___AFContextDonationService, "defaultService"));
  [v30 registerContextTransformer:*(void *)(v35 + 64) forType:v26];
  [v30 donateContext:v24 withMetadata:v29 pushToRemote:0];
}

id sub_10005D81C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 associatedBundleIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10005D85C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v3 aceContexts]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceContexts]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 arrayByAddingObjectsFromArray:v5]);
  [v4 setAceContexts:v6];
}

void sub_10005D8E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
}

void sub_10005D934(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 addObject:v4];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10005D9F8;
  v8[3] = &unk_1004F9100;
  id v5 = *(void **)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = v6;
  uint64_t v10 = v7;
  id v11 = *(id *)(a1 + 56);
  [v5 _getOrderedContextDictionaryForTransformedAFApplicationContext:v4 completion:v8];
}

id sub_10005D9E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchAndSendApplicationContextForApplicationInfos:*(void *)(a1 + 40) fetchedOrderedContextDictionaries:*(void *)(a1 + 48) applicationContexts:*(void *)(a1 + 56) refID:*(void *)(a1 + 64)];
}

void sub_10005D9F8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v7 = a1[4];
    *(_DWORD *)__int128 buf = 136315650;
    id v13 = "-[ADCommandCenter(Context) _context_fetchAppicationContextForApplicationInfo:supplementalContext:refID:]_block_invoke_2";
    __int16 v14 = 2112;
    id v15 = v3;
    __int16 v16 = 2048;
    id v17 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s #context Finished ordered fetch - %@ - %p",  buf,  0x20u);
  }

  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[5] _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005DB58;
  block[3] = &unk_1004FD4C0;
  id v9 = a1[6];
  id v10 = v3;
  id v11 = a1[4];
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10005DB58(uint64_t a1)
{
}

void sub_10005DB84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10005DC20;
  v7[3] = &unk_1004FD968;
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_10005DC20(uint64_t a1)
{
  id v2 = sub_10029CB20(*(void **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_10029C004(v3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v4);

  if (v7)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentRequest]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 currentRequestId]);
    [v7 setRefId:v6];

    [*(id *)(a1 + 40) _sendCommandToServer:v7];
  }
}

uint64_t sub_10005DCB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10005DCC4(uint64_t a1)
{
}

void sub_10005DCCC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SASetRestrictedAppContext);
  [v2 setRefId:*(void *)(a1 + 32)];
  [v2 setPreviewRestrictedApps:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  [*(id *)(a1 + 40) _sendCommandToServer:v2];
}

void sub_10005DD2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315394;
    id v10 = "-[ADCommandCenter(Context) _setRestrictedAppContext]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Got restricted apps: %@",  (uint8_t *)&v9,  0x16u);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
  id v7 = v3;

  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  dispatch_async(v8, *(dispatch_block_t *)(a1 + 40));
}

void sub_10005DE30(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_10005DED0;
    v7[3] = &unk_1004FD968;
    id v5 = v3;
    uint64_t v6 = *(void *)(a1 + 32);
    id v8 = v5;
    uint64_t v9 = v6;
    dispatch_async(v4, v7);
  }
}

void sub_10005DED0(uint64_t a1)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___SASyncSyncPromise);
  uint64_t v2 = SiriCoreUUIDStringCreate(v4);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v4 setAceId:v3];
  [v4 setKeys:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _sendCommandToServer:v4];
  objc_msgSend( *(id *)(a1 + 40),  "_sync_syncAnchorKeys:forceReset:reasons:forSyncPromise:",  *(void *)(a1 + 32),  0,  &off_100512FB8,  v3);
}

void sub_10005DF54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E004;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

id sub_10005E004(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    int v7 = 136315394;
    id v8 = "-[ADCommandCenter(Context) _setBackgroundContext]_block_invoke_2";
    __int16 v9 = 2112;
    id v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s SetBackgroundContext: %@",  (uint8_t *)&v7,  0x16u);
  }

  return [*(id *)(a1 + 48) _sendCommandToServer:*(void *)(a1 + 32)];
}

void sub_10005E0FC(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10005E148(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10005E194(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10005E21C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10005E314;
  v8[3] = &unk_1004EE8C8;
  id v5 = *(void **)(a1 + 32);
  void v8[4] = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10005E3C4;
  v6[3] = &unk_1004EE8F0;
  v6[4] = *(void *)(a1 + 40);
  id v7 = *(id *)(a1 + 56);
  [v5 getAlertContextWithBulletins:v2 externalAlarmSnapshot:v3 timerSnapshot:v4 nlAlertContextCompletion:v8 fullAlertContextCompletion:v6];
}

void sub_10005E314(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E4A4;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_10005E3C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005E474;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  dispatch_async(v4, block);
}

id sub_10005E474(uint64_t a1)
{
  return [*(id *)(a1 + 48) _sendCommandToServer:*(void *)(a1 + 32)];
}

id sub_10005E4A4(uint64_t a1)
{
  return [*(id *)(a1 + 48) _sendCommandToServer:*(void *)(a1 + 32)];
}

void sub_10005E4D4(uint64_t a1, void *a2)
{
  if ([a2 count])
  {
    id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10005E554;
    block[3] = &unk_1004FD940;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v3, block);
  }

id sub_10005E554(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAlertContext];
}

void sub_10005E55C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

LABEL_7:
      return 0LL;
    }
  }

  return v2;
}

      -[AFHeadphonesAnnouncementRequestCapabilityProvider fetchEligibleAnnouncementRequestTypesAndNotifyObservers:]( self,  "fetchEligibleAnnouncementRequestTypesAndNotifyObservers:",  0LL,  *(_OWORD *)v9);
    }
  }

  else if (self->_pairedInfoChangeObserver == v5)
  {
    id v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id v9 = 136315138;
      *(void *)&void v9[4] = "-[AFHeadphonesAnnouncementRequestCapabilityProvider notifyObserver:didReceiveNotificationWithToken:]";
      id v8 = "%s re-fetching eligibility after assistantd is ready";
LABEL_10:
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, v8, v9, 0xCu);
      goto LABEL_7;
    }

    goto LABEL_7;
  }
}

  objc_exception_throw(  -[NSException initWithName:reason:userInfo:]( objc_alloc(&OBJC_CLASS___NSException),  "initWithName:reason:userInfo:",  NSInvalidArgumentException,  @"Unable to get setting with type Unknown",  &__NSDictionary0__struct));
  -[AFGetSettingsRequest _ad_handleSettingsRequestWithCompletionHandler:](v5, v6, v7);
}
}

    ((void (*)(void *, void))v5[2])(v5, 0LL);
    goto LABEL_8;
  }

  if (v13)
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v22 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDevic"
          "es:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s #hal Calculating proximity...",  buf,  0xCu);
    id v10 = *(void **)(a1 + 32);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10019E914;
  void v14[3] = &unk_1004FD6C8;
  v14[4] = v10;
  id v15 = v5;
  [v10 _getAggregatedProximityObservationsWithCompletion:v14];

LABEL_8:
}
}

  -[ADCommandCenter _awdSessionEnd](self, "_awdSessionEnd");
  uint64_t v11 = -[ADSessionManager resetRetryManager](self->_sessionManager, "resetRetryManager");
  if (AFDeviceSupportsFullSiriUOD(v11, v12)
    && !-[ADSessionManager hasSessionRequiringServerConnection]( self->_sessionManager,  "hasSessionRequiringServerConnection"))
  {
    self->_sessionExperiencedError = 1;
    id v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = 136315138;
      id v17 = "-[ADCommandCenter assistantSessionManager:receivedError:isRetryableError:]";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Ignoring session error because Siri supports Full UOD, and server connection is not required.",  (uint8_t *)&v16,  0xCu);
    }

    -[ADSessionManager cancelSessions](self->_sessionManager, "cancelSessions");
    -[ADCommandCenter _invokeAllCompletionsWithError:](self, "_invokeAllCompletionsWithError:", v9);
  }

  else
  {
    -[ADSessionManager cancelSessions](self->_sessionManager, "cancelSessions");
    -[ADCommandCenter _sessionDidFailWithError:](self, "_sessionDidFailWithError:", v9);
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkActivityTracing sharedNetworkActivityTracing]( &OBJC_CLASS___SiriCoreNetworkActivityTracing,  "sharedNetworkActivityTracing"));
  [v14 networkActivityTracingCancel];

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[SNNetworkActivityTracing sharedInstance](&OBJC_CLASS___SNNetworkActivityTracing, "sharedInstance"));
  [v15 networkActivityTracingCancel:0];

LABEL_14:
  -[ADCommandCenter _sync_reset](self, "_sync_reset");
}

    __int16 v14 = self->_path;
    id v15 = sub_100248DE4(v7);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = (NSString *)objc_claimAutoreleasedReturnValue(-[NSString stringByAppendingPathComponent:](v14, "stringByAppendingPathComponent:", v16));

    if ([v10 fileExistsAtPath:v17])
    {
      id v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        int v56 = "-[ADOfflineMetricsMap insertMetrics:withOfflineIdentifier:]";
        uint8x16_t v57 = 2112;
        uint16x8_t v58 = v17;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Offline metrics plist file already exists at path %@.",  buf,  0x16u);
      }

      goto LABEL_33;
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);
    __n128 v50 = 0LL;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v19,  200LL,  0LL,  &v50));
    __int16 v21 = (NSString *)v50;

    if (v21)
    {
      id v22 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        __int16 v23 = v22;
        id v24 = (NSString *)objc_claimAutoreleasedReturnValue([v6 dictionary]);
        *(_DWORD *)__int128 buf = 136315650;
        int v56 = "-[ADOfflineMetricsMap insertMetrics:withOfflineIdentifier:]";
        uint8x16_t v57 = 2112;
        uint16x8_t v58 = v24;
        int8x16_t v59 = 2112;
        uint16x8_t v60 = v21;
        id v25 = "%s Unable to serialize offline metrics plist %@ due to error %@.";
        uint64_t v26 = v23;
        uint64_t v27 = 32;
LABEL_29:
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, v25, buf, v27);
      }
    }

    else
    {
      uint64_t v49 = 0LL;
      int v36 = [v20 writeToFile:v17 options:1 error:&v49];
      __int16 v21 = (NSString *)v49;
      if ((v36 & 1) != 0)
      {
        BOOL v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v17));
        __n128 v48 = v21;
        int v38 = [v37 setResourceValue:&__kCFBooleanTrue forKey:NSURLIsExcludedFromBackupKey error:&v48];
        uint64_t v11 = v48;

        if ((v38 & 1) != 0)
        {
          offlineIdentifiers = self->_offlineIdentifiers;
          if (!offlineIdentifiers)
          {
LABEL_32:

LABEL_33:
            goto LABEL_34;
          }

          uint64_t v40 = (NSOrderedSet *)-[NSOrderedSet mutableCopy](offlineIdentifiers, "mutableCopy");
          -[NSOrderedSet addObject:](v40, "addObject:", v7);
          id v41 = (NSOrderedSet *)-[NSOrderedSet copy](v40, "copy");
          int v42 = self->_offlineIdentifiers;
          self->_offlineIdentifiers = v41;

          id v43 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315394;
            int v56 = "-[ADOfflineMetricsMap insertMetrics:withOfflineIdentifier:]";
            uint8x16_t v57 = 2112;
            uint16x8_t v58 = (NSString *)v7;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "%s offlineIdentifiers += %@", buf, 0x16u);
          }
        }

        else
        {
          __int128 v46 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315650;
            int v56 = "-[ADOfflineMetricsMap insertMetrics:withOfflineIdentifier:]";
            uint8x16_t v57 = 2112;
            uint16x8_t v58 = v17;
            int8x16_t v59 = 2112;
            uint16x8_t v60 = v11;
            _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "%s Unable to exclude offline metrics plist file at path %@ from backup due to error %@.",  buf,  0x20u);
          }

          [v10 removeItemAtPath:v17 error:0];
          uint64_t v40 = self->_offlineIdentifiers;
          self->_offlineIdentifiers = 0LL;
        }

        __int16 v21 = v11;
LABEL_31:

        uint64_t v11 = v21;
        goto LABEL_32;
      }

      __int128 v45 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        __int16 v23 = v45;
        id v24 = (NSString *)objc_claimAutoreleasedReturnValue([v6 dictionary]);
        *(_DWORD *)__int128 buf = 136315906;
        int v56 = "-[ADOfflineMetricsMap insertMetrics:withOfflineIdentifier:]";
        uint8x16_t v57 = 2112;
        uint16x8_t v58 = v24;
        int8x16_t v59 = 2112;
        uint16x8_t v60 = v17;
        int8x16_t v61 = 2112;
        uint8x16_t v62 = v21;
        id v25 = "%s Unable to write to offline metrics plist %@ to path %@ due to error %@.";
        uint64_t v26 = v23;
        uint64_t v27 = 42;
        goto LABEL_29;
      }
    }

    [v10 removeItemAtPath:v17 error:0];
    uint64_t v40 = self->_offlineIdentifiers;
    self->_offlineIdentifiers = 0LL;
    goto LABEL_31;
  }
}

      if (v14) {
        v14[2](v14);
      }
      goto LABEL_22;
    }
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[AFSiriDataSharingSensitivityManager shared]( &OBJC_CLASS___AFSiriDataSharingSensitivityManager,  "shared"));
  __int16 v21 = [v20 isOptedOutOfMTE];

  if (v21)
  {
    __int16 v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v39 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSessi"
            "on:purgesOversizedStorage:scheduledActivity:completion:]";
      id v17 = "%s #MTEOptOut Skipped sending metrics to server because the device is opted out of MTE.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v17, buf, 0xCu);
      goto LABEL_7;
    }

    goto LABEL_7;
  }

  self->_isSendingAnalyticsEventStreamsAndOfflineMetrics = 1;
  id v22 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  [v22 suspendEventsStaging];

  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_10026E960;
  v35[3] = &unk_1004FCB38;
  BOOL v37 = a6;
  v35[4] = self;
  int v36 = v14;
  __int16 v23 = objc_retainBlock(v35);
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v24 systemUptime];
  uint64_t v26 = v25;

  if (v26 >= a3)
  {
    uint64_t v28 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v39 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSessi"
            "on:purgesOversizedStorage:scheduledActivity:completion:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s Skipped sending offline metrics to server because time limit is reached.",  buf,  0xCu);
    }

    ((void (*)(void *))v23[2])(v23);
  }

  else
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[ADSiriAnalyticsServiceHost sharedSiriAnalyticsServiceHost]( &OBJC_CLASS___ADSiriAnalyticsServiceHost,  "sharedSiriAnalyticsServiceHost"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10026EAEC;
    v29[3] = &unk_1004F87A8;
    v29[4] = self;
    BOOL v31 = a3;
    int v32 = v11;
    id v33 = v10;
    int v34 = a7;
    uint64_t v30 = v23;
    [v27 deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:v29];
  }

LABEL_22:
}
}

LABEL_8:
  BOOL v31 = 0u;
  int v32 = 0u;
  id v29 = 0u;
  uint64_t v30 = 0u;
  id v9 = self->_sharedUsersByHomeUserUUID;
  id v10 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v29,  v33,  16LL);
  if (!v10) {
    goto LABEL_22;
  }
  id v12 = v10;
  id v13 = *(void *)v30;
  *(void *)&uint64_t v11 = 136315395LL;
  uint64_t v27 = v11;
  do
  {
    __int16 v14 = 0LL;
    do
    {
      if (*(void *)v30 != v13) {
        objc_enumerationMutation(v9);
      }
      id v15 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_sharedUsersByHomeUserUUID,  "objectForKey:",  *(void *)(*((void *)&v29 + 1) + 8LL * (void)v14),  v27));
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommunalDeviceUser saHomeMemberInfo:]( &OBJC_CLASS___ADCommunalDeviceUser,  "saHomeMemberInfo:",  v15));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 homeMemberSettings]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 meCard]);

      if (v18)
      {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v15 homeUserUUID]);

        if (!v19) {
          goto LABEL_18;
        }
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v15 homeUserUUID]);
        -[NSMutableDictionary setObject:forKey:](v28, "setObject:forKey:", v18, v20);
        goto LABEL_16;
      }

      __int16 v21 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = v21;
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v15 homeUserUUID]);
        *(_DWORD *)__int128 buf = v27;
        uint64_t v35 = "-[ADMultiUserService homeUserIdToNames]";
        int v36 = 2113;
        BOOL v37 = v22;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s Empty meCard for homeUserId %{private}@",  buf,  0x16u);

LABEL_16:
      }

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6002LL,  &__NSDictionary0__struct));
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, v12);
  }

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6002LL,  &__NSDictionary0__struct));
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, v12);
  }

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6002LL,  &__NSDictionary0__struct));
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, v12);
  }

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6002LL,  &__NSDictionary0__struct));
    (*((void (**)(id, void, void *))v7 + 2))(v7, 0LL, v12);
    goto LABEL_8;
  }

    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 232) objectForKey:a1[5]]);
    goto LABEL_8;
  }

  __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int16 v16 = 136315138;
    id v17 = "-[ADMultiUserService getMultiUserAudioAppSignalsForSharedUserID:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Non multi-user HomePod and primary user not found. Returning an error",  (uint8_t *)&v16,  0xCu);
  }

  id v15 = a1[6];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:description:](&OBJC_CLASS___AFError, "errorWithCode:description:", 6001LL, 0LL));
  (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0LL, v9);
LABEL_16:
}

    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 232) objectForKey:a1[5]]);
LABEL_8:
    id v8 = v7;
    if (v7)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 settings]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:SAHomeMemberSettingsTemperatureUnitPListKey]);

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 settings]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:SAHomeMemberSettingsTwentyFourHourTimeDisplayPListKey]);
      id v13 = [v12 BOOLValue];

      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v8 settings]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:SAHomeMemberSettingsRegionPListKey]);

      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v8 settings]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:SAHomeMemberSettingsCountryCodePListKey]);

      id v18 = (void *)objc_claimAutoreleasedReturnValue([v8 settings]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKey:SAHomeMemberSettingsPreferredLanguagePListKey]);

LABEL_10:
      uint64_t v20 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = 136315138;
        uint64_t v27 = "-[ADMultiUserService getMultiUserSettingsForSharedUserID:completion:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s User found", (uint8_t *)&v26, 0xCu);
      }

      __int16 v21 = objc_alloc_init(&OBJC_CLASS___AFPersonalUserSettings);
      -[AFPersonalUserSettings setTemperatureUnit:](v21, "setTemperatureUnit:", v10);
      -[AFPersonalUserSettings setTwentyFourHourTimeDisplay:](v21, "setTwentyFourHourTimeDisplay:", v13);
      -[AFPersonalUserSettings setRegion:](v21, "setRegion:", v15);
      -[AFPersonalUserSettings setCountryCode:](v21, "setCountryCode:", v17);
      -[AFPersonalUserSettings setPreferredLanguage:](v21, "setPreferredLanguage:", v19);
      (*(void (**)(void))(a1[6] + 16LL))();

      goto LABEL_18;
    }

    goto LABEL_15;
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue(+[ADAssistantDataManager sharedDataManager](&OBJC_CLASS___ADAssistantDataManager, "sharedDataManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v22 _cachedAssistantData]);

  if (v8)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 temperatureUnit]);
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v8 twentyFourHourTimeDisplay]);
    id v13 = [v23 BOOLValue];

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 region]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v8 countryCode]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v8 preferredLanguage]);
    goto LABEL_10;
  }

  if ([v3 length])
  {
    [*(id *)(a1 + 32) getMultiUserSettingsForSharedUserID:v3 completion:*(void *)(a1 + 40)];
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}
}
}
}
}

uint64_t sub_10005F480()
{
  unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  unsigned int v1 = [v0 isSiriNetworkActivated];

  if (!v1) {
    return (uint64_t)+[SiriCoreTrialUtilities getBooleanForTrialProject:trialNamespace:trialFactor:]( &OBJC_CLASS___SiriCoreTrialUtilities,  "getBooleanForTrialProject:trialNamespace:trialFactor:",  @"SIRI_NETWORK",  @"SIRI_NETWORK_ENABLEMENT",  @"SiriNetwork.enable");
  }
  id v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "ADSiriNetworkEnablementExperimentActivated";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s SiriNetwork activated via shared preferences",  (uint8_t *)&v4,  0xCu);
  }

  return 1LL;
}

void sub_1000606E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 136315650;
      id v10 = "-[ADPeerConnection service:account:incomingUnhandledProtobuf:fromID:context:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      id v14 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error for request id %@ %{public}@",  (uint8_t *)&v9,  0x20u);
    }
  }

  [*(id *)(a1 + 40) _sendResponse:v5 forRequestId:*(void *)(a1 + 32)];
}

void sub_1000607E4(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___IDSProtobuf);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) data]);
  id v4 = [v2 initWithProtobufData:v3 type:0 isResponse:1];

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v19 = IDSSendMessageOptionPeerResponseIdentifierKey;
  uint64_t v20 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _service]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _destination]);
  id v13 = 0LL;
  id v14 = 0LL;
  unsigned __int8 v9 = [v7 sendProtobuf:v4 toDestinations:v8 priority:300 options:v6 identifier:&v14 error:&v13];
  id v10 = v14;
  id v11 = v13;

  if ((v9 & 1) == 0)
  {
    uint64_t v12 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v16 = "-[ADPeerConnection _sendResponse:forRequestId:]_block_invoke";
      __int16 v17 = 2114;
      id v18 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Error sending response %{public}@",  buf,  0x16u);
    }
  }
}

id sub_1000609A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _service];
  id result = objc_storeWeak((id *)(*(void *)(a1 + 32) + 56LL), *(id *)(a1 + 40));
  *(void *)(*(void *)(a1 + 32) + 72LL) = *(void *)(a1 + 48);
  return result;
}

void sub_1000609E4(uint64_t a1)
{
  id v2 = *(char **)(a1 + 32);
  id v3 = v2 + 16;
  if (*(_BYTE *)(a1 + 74)) {
    id v3 = (_BYTE *)(a1 + 75);
  }
  int v4 = *v3;
  if (!*v3 || ([v2 _hasConnectedPeer] & 1) != 0)
  {
    id v5 = objc_alloc(&OBJC_CLASS___IDSProtobuf);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
    id v7 = [v5 initWithProtobufData:v6 type:*(unsigned __int16 *)(a1 + 72) isResponse:0];

    if (v4)
    {
      uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKey:]( v8,  "setObject:forKey:",  &__kCFBooleanTrue,  IDSSendMessageOptionForceLocalDeliveryKey);
    }

    else
    {
      if (!*(_BYTE *)(a1 + 76) && *(double *)(a1 + 56) <= 0.0 && !*(_BYTE *)(a1 + 77) && !*(void *)(a1 + 48))
      {
        uint64_t v8 = 0LL;
LABEL_22:
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _service]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _destination]);
        id v29 = 0LL;
        id v30 = 0LL;
        unsigned int v13 = [v11 sendProtobuf:v7 toDestinations:v12 priority:300 options:v8 identifier:&v30 error:&v29];
        id v14 = v30;
        id v15 = v29;

        if (v15)
        {
          __int16 v16 = (os_log_s *)AFSiriLogContextIDS;
          if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315394;
            int v32 = "-[ADPeerConnection _sendRequest:responseClass:fireAndForget:timeout:overrideRequireConnectedPeer:to:al"
                  "lowCloud:completion:]_block_invoke";
            __int16 v33 = 2114;
            id v34 = v15;
            _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Error sending request %{public}@",  buf,  0x16u);
          }
        }

        __int16 v17 = *(void (***)(void, void, void))(a1 + 48);
        if (v17)
        {
          if (v13)
          {
            if (v14)
            {
              id v18 = *(void **)(*(void *)(a1 + 32) + 40LL);
              if (!v18)
              {
                uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                uint64_t v20 = *(void *)(a1 + 32);
                __int16 v21 = *(void **)(v20 + 40);
                *(void *)(v20 + 40) = v19;

                id v22 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                uint64_t v23 = *(void *)(a1 + 32);
                id v24 = *(void **)(v23 + 48);
                *(void *)(v23 + 4_Block_object_dispose(va, 8) = v22;

                id v18 = *(void **)(*(void *)(a1 + 32) + 40LL);
                __int16 v17 = *(void (***)(void, void, void))(a1 + 48);
              }

              id v25 = objc_retainBlock(v17);
              [v18 setObject:v25 forKey:v14];

              uint64_t v26 = *(void *)(a1 + 64);
              if (v26) {
                [*(id *)(*(void *)(a1 + 32) + 48) setObject:v26 forKey:v14];
              }
            }

            else
            {
              v17[2](*(void *)(a1 + 48), 0LL, 0LL);
            }
          }

          else
          {
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _wrappedSendFailureError:v15]);
            ((void (**)(void, void, void *))v17)[2](v17, 0LL, v27);
          }
        }

        return;
      }

      uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }

    if (*(_BYTE *)(a1 + 76)) {
      -[NSMutableDictionary setObject:forKey:]( v8,  "setObject:forKey:",  &__kCFBooleanTrue,  IDSSendMessageOptionFireAndForgetKey);
    }
    if (*(double *)(a1 + 56) > 0.0)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
      -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v10, IDSSendMessageOptionTimeoutKey);
    }

    if (*(_BYTE *)(a1 + 77)) {
      -[NSMutableDictionary setObject:forKey:]( v8,  "setObject:forKey:",  &__kCFBooleanTrue,  IDSSendMessageOptionAllowCloudDeliveryKey);
    }
    if (*(void *)(a1 + 48)) {
      -[NSMutableDictionary setObject:forKey:]( v8,  "setObject:forKey:",  &__kCFBooleanTrue,  IDSSendMessageOptionExpectsPeerResponseKey);
    }
    goto LABEL_22;
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v28 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"ADRemoteConnectionErrorDomain",  4LL,  &__NSDictionary0__struct);
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0LL);
  }

void sub_1000619FC(void *a1, void *a2)
{
  uint64_t v3 = a1[12];
  id v4 = a2;
  [v4 setSequence:v3];
  [v4 setType:a1[13]];
  [v4 setCommandPushGenerationsRequest:a1[4]];
  [v4 setCommandPushGenerationsResponse:a1[5]];
  [v4 setCommandPullGenerationsRequest:a1[6]];
  [v4 setCommandPullGenerationsResponse:a1[7]];
  [v4 setCommandPullDeltaRequest:a1[8]];
  [v4 setCommandPullDeltaResponse:a1[9]];
  [v4 setCommandPullSnapshotRequest:a1[10]];
  [v4 setCommandPullSnapshotResponse:a1[11]];
}

void sub_100062B20(_Unwind_Exception *a1)
{
}

void sub_100063F5C(_Unwind_Exception *a1)
{
}

void sub_100064F24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100065618(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADDailyDeviceStatusActivity fetchICUserIdentityForSharedUser:completion:]_block_invoke";
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error ic_storeAccountForHomeUserIdentifier %{public}@",  buf,  0x16u);
    }

void sub_100065860( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100065880(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("ICUserIdentity");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100577A40 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getICUserIdentityClass(void)_block_invoke"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADDailyDeviceStatusActivity.m",  85,  @"Unable to find class %s",  "ICUserIdentity");

    __break(1u);
  }

void sub_100065944()
{
  uint64_t v3 = 0LL;
  if (!qword_100577A38)
  {
    __int128 v4 = off_1004EED48;
    uint64_t v5 = 0LL;
    qword_100577A38 = _sl_dlopen(&v4, &v3);
  }

  if (!qword_100577A38)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *iTunesCloudLibrary(void)"));
    objc_msgSend( v1,  "handleFailureInFunction:file:lineNumber:description:",  v2,  @"ADDailyDeviceStatusActivity.m",  83,  @"%s",  v3);

    __break(1u);
    goto LABEL_7;
  }

  unint64_t v0 = v3;
  if (v3) {
LABEL_7:
  }
    free(v0);
}

void sub_100065A48(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)__int128 buf = 136315395;
      uint64_t v12 = "-[ADDailyDeviceStatusActivity fetchAppleMusicSubscriptionForSharedUser:completion:]_block_invoke";
      __int16 v13 = 2113;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Fetching Apple Music subscription status for ICUserIdentity: %{private}@",  buf,  0x16u);
    }

    id v6 = [sub_100065BDC() sharedStatusController];
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100065C90;
    v9[3] = &unk_1004EECA0;
    id v10 = *(id *)(a1 + 40);
    [v7 getSubscriptionStatusForUserIdentity:v3 withCompletionHandler:v9];
  }

  else
  {
    if (v5)
    {
      uint64_t v8 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315395;
      uint64_t v12 = "-[ADDailyDeviceStatusActivity fetchAppleMusicSubscriptionForSharedUser:completion:]_block_invoke";
      __int16 v13 = 2113;
      id v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s No userIdentity for sharedUser: %{private}@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id sub_100065BDC()
{
  uint64_t v4 = 0LL;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  unint64_t v0 = (void *)qword_100577A30;
  uint64_t v7 = qword_100577A30;
  if (!qword_100577A30)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_100065D9C;
    v3[3] = &unk_1004FDB20;
    void v3[4] = &v4;
    sub_100065D9C((uint64_t)v3);
    unint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100065C78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100065C90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      id v10 = "-[ADDailyDeviceStatusActivity fetchAppleMusicSubscriptionForSharedUser:completion:]_block_invoke";
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error fetching AppleMusic subscription status: %{public}@",  (uint8_t *)&v9,  0x16u);
    }

    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    [v5 statusType];
    uint64_t v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v8();
}

void sub_100065D9C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("ICMusicSubscriptionStatusController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100577A30 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getICMusicSubscriptionStatusControllerClass(void)_block_invoke"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADDailyDeviceStatusActivity.m",  84,  @"Unable to find class %s",  "ICMusicSubscriptionStatusController");

    __break(1u);
  }

uint64_t sub_100065E60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100065E70(uint64_t a1)
{
}

void sub_100065E78(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    id v3 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  *(void *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  uint64_t v6 = AFGradingOptInStateChangeWithHistoryEntry();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v7];
}

void sub_100065F08(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 56);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100066008;
  block[3] = &unk_1004FD4C0;
  id v6 = v3;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 64);
  dispatch_async(v4, block);
}

void sub_100065FB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100066008(uint64_t a1)
{
}

BOOL sub_100066034(id a1, PKSecureElementPass *a2, unint64_t a3, BOOL *a4)
{
  return -[PKSecureElementPass isCarKeyPass](a2, "isCarKeyPass", a3, a4);
}

void sub_10006603C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v13 = 136315651;
    id v14 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEnab"
          "led:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spokenNoti"
          "ficationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotification"
          "sMutedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotificationsCon"
          "trolCenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:preciseLoc"
          "ationEnabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetEnabled:adapt"
          "iveSiriVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTriggerEnabled:autoSe"
          "ndSettings:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehindSiriEnabledOnCar"
          "Play:isSiriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke";
    __int16 v15 = 2113;
    id v16 = v5;
    __int16 v17 = 2113;
    id v18 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Hosted accessory: %{private}@/%{private}@",  (uint8_t *)&v13,  0x20u);
  }

  id v8 = objc_alloc_init(&OBJC_CLASS___SISchemaLinkedAccessoryState);
  id v9 = [[SISchemaUUID alloc] initWithNSUUID:v6];
  [v8 setAccessoryId:v9];

  id v10 = -[AFInstanceContext initWithEndpointUUID:loadsEndpointOnDemand:]( objc_alloc(&OBJC_CLASS___AFInstanceContext),  "initWithEndpointUUID:loadsEndpointOnDemand:",  v5,  1LL);
  __int16 v11 = -[AFPreferences initWithInstanceContext:]( objc_alloc(&OBJC_CLASS___AFPreferences),  "initWithInstanceContext:",  v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _truncatedGradingOptInStateChanges:v11]);
  [v8 setGradingOptInStateChanges:v12];
  [*(id *)(a1 + 40) addObject:v8];
}

void sub_1000661D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___SISchemaMultiUserState);
  [v4 setEnrolledUsers:v3];

  [*(id *)(a1 + 32) setMultiUserState:v4];
  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    id v7 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEnabl"
         "ed:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spokenNotifi"
         "cationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotificationsMu"
         "tedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotificationsControl"
         "CenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:preciseLocation"
         "Enabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetEnabled:adaptiveSir"
         "iVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTriggerEnabled:autoSendSetti"
         "ngs:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehindSiriEnabledOnCarPlay:isS"
         "iriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Multi user state fetched", (uint8_t *)&v6, 0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000662C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        if ((uint64_t)objc_msgSend(v10, "footprint", (void)v14) >= 2)
        {
          __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
          id v12 = +[SiriTTSSynthesisVoice voiceEnumForName:]( &OBJC_CLASS___SiriTTSSynthesisVoice,  "voiceEnumForName:",  v11);

          int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v12));
          [v4 addObject:v13];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v7);
  }

  [*(id *)(a1 + 32) setInstalledVoices:v4];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100066454(uint64_t a1, uint64_t a2)
{
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEnabl"
         "ed:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spokenNotifi"
         "cationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotificationsMu"
         "tedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotificationsControl"
         "CenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:preciseLocation"
         "Enabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetEnabled:adaptiveSir"
         "iVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTriggerEnabled:autoSendSetti"
         "ngs:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehindSiriEnabledOnCarPlay:isS"
         "iriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Multi user metrics fetched",  (uint8_t *)&v4,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100066510(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int128 v14 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEn"
            "abled:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spoken"
            "NotificationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotifi"
            "cationsMutedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotifica"
            "tionsControlCenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:"
            "preciseLocationEnabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetE"
            "nabled:adaptiveSiriVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTrigger"
            "Enabled:autoSendSettings:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehind"
            "SiriEnabledOnCarPlay:isSiriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke";
      __int16 v15 = 2114;
      id v16 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error fetching AppleMusic subscription status for the active account: %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    BOOL v8 = 0LL;
  }

  else
  {
    id v9 = [v5 statusType];
    BOOL v8 = v9 == (id)1;
    id v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = v10;
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9 == (id)1));
      int v13 = 136315394;
      __int128 v14 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEn"
            "abled:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spoken"
            "NotificationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotifi"
            "cationsMutedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotifica"
            "tionsControlCenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:"
            "preciseLocationEnabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetE"
            "nabled:adaptiveSiriVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTrigger"
            "Enabled:autoSendSettings:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehind"
            "SiriEnabledOnCarPlay:isSiriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Apple Music subscription status for the active account is %@",  (uint8_t *)&v13,  0x16u);
    }
  }

  [*(id *)(a1 + 32) setAppleMusicSubscriber:v8];
  [*(id *)(a1 + 40) setPersonalization:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000666D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    id v6 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEnabl"
         "ed:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spokenNotifi"
         "cationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotificationsMu"
         "tedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotificationsControl"
         "CenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:preciseLocation"
         "Enabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetEnabled:adaptiveSir"
         "iVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTriggerEnabled:autoSendSetti"
         "ngs:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehindSiriEnabledOnCarPlay:isS"
         "iriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s StoreFrontID is %@", (uint8_t *)&v5, 0x16u);
  }

  [*(id *)(a1 + 32) setStorefrontId:v3];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000667AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1000667BC(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    int v5 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEnabl"
         "ed:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spokenNotifi"
         "cationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotificationsMu"
         "tedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotificationsControl"
         "CenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:preciseLocation"
         "Enabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetEnabled:adaptiveSir"
         "iVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTriggerEnabled:autoSendSetti"
         "ngs:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehindSiriEnabledOnCarPlay:isS"
         "iriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke_2";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Timed out on async data fetches for heartbeat",  (uint8_t *)&v4,  0xCu);
  }

  AnalyticsSendEvent(@"com.apple.HeartbeatDataFetchTimeout", 0LL);
  return [*(id *)(a1 + 32) invoke];
}

id sub_100066880(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v2)
  {
    [v2 cancel];
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

  int v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 136315395;
    id v9 = "-[ADDailyDeviceStatusActivity buildDailyDeviceStatusHeartbeatMetricsWithSiriEnabled:onLockscreen:dictationEnabl"
         "ed:voiceTriggerEnabled:starkHasBeenActiveWithin24Hours:raiseToSpeakEnabled:activeAppleAudioDevices:spokenNotifi"
         "cationsEnabled:announceNotificationsEnabledOnHeadphones:carplayAnnounceEnablementType:isAnnounceNotificationsMu"
         "tedForCarPlay:shouldSkipTriggerlessReplyConfirmation:spokenNotificationsProxCardSeen:spokenNotificationsControl"
         "CenterModuleEnabled:spokenNotificationsWhitelistSettings:announceCallsEnabled:hostedAccessories:preciseLocation"
         "Enabled:locationAccessPermission:adaptiveSiriVolumeEnabled:adaptiveSiriVolumePermanentOffsetEnabled:adaptiveSir"
         "iVolumePermanentOffsetFactor:adaptiveSiriVolumeMostRecentIntent:isRemoteDarwinVoiceTriggerEnabled:autoSendSetti"
         "ngs:hangUpEnablementState:heartbeatQueuedTime:siriVoiceTriggerSettings:isShowAppsBehindSiriEnabledOnCarPlay:isS"
         "iriCapableDigitalCarKeyAvailable:connectedBTCarHeadunits:withCompletion:]_block_invoke";
    __int16 v10 = 2113;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s heartbeat wrapper: %{private}@",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 40) invoke];
}

Class sub_100066968(uint64_t a1)
{
  if (!qword_100577A28)
  {
    __int128 v3 = off_1004EED30;
    uint64_t v4 = 0LL;
    qword_100577A28 = _sl_dlopen(&v3, 0LL);
  }

  Class result = objc_getClass("UNNotificationSettingsCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  qword_100577A20 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_100066A1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accessoryLoggingSalt]);

    if (!v5)
    {
      int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v20 = "-[ADDailyDeviceStatusActivity runWithCompletion:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v5;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s accessoryLoggingSalt not ready because HomeManager is not ready, using a randomized salt value (%@) so that we can continue to report device counts",  buf,  0x16u);
      }
    }

    __int16 v7 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v3 count]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100066DC4;
    v16[3] = &unk_1004EEB30;
    uint64_t v10 = *(void *)(a1 + 40);
    id v17 = v5;
    uint64_t v18 = v10;
    id v11 = v5;
    [v3 enumerateObjectsUsingBlock:v16];
  }

  id v12 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    __int128 v14 = v12;
    id v15 = [v13 count];
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v20 = "-[ADDailyDeviceStatusActivity runWithCompletion:]_block_invoke";
    __int16 v21 = 2048;
    id v22 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Hosted accessories count = %lu",  buf,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100066C48(id a1, SISchemaDailyDeviceStatus *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[ADDailyDeviceStatusActivity runWithCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Running completion", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  objc_msgSend(v4, "metrics_publishDailyDeviceStatus:completion:", v2, &stru_1004EEBB8);
}

void sub_100066D20(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADDailyDeviceStatusActivity runWithCompletion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s DailyDeviceStatus published",  (uint8_t *)&v2,  0xCu);
  }

void sub_100066DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1001EC064(v3, *(void **)(a1 + 32));
  int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315651;
    uint64_t v8 = "-[ADDailyDeviceStatusActivity runWithCompletion:]_block_invoke";
    __int16 v9 = 2113;
    id v10 = v3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s accessoryUniqueIdetifier = %{private}@, loggingAccessoryUniqueIdentifier = %@",  (uint8_t *)&v7,  0x20u);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v5 forKey:v3];
}

uint64_t sub_100067698(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000676A8(uint64_t a1)
{
}

void sub_1000676B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100067748;
    v4[3] = &unk_1004EEDB0;
    void v4[4] = v2;
    sub_100067880(1u, 0x676C6F62644F7574LL, 0, v4);
    id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

void sub_100067748(uint64_t a1, AudioObjectID *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    while (1)
    {
      AudioObjectID v7 = *a2++;
      uint64_t v6 = v7;
      if (!--v3) {
        return;
      }
    }

    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x3032000000LL;
    uint64_t v20 = sub_100067B4C;
    __int16 v21 = sub_100067B74;
    id v22 = 0LL;
    uint64_t v8 = *(void *)(a1 + 32);
    __int16 v9 = *(void **)(v8 + 8);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100067B7C;
    v16[3] = &unk_1004FCDB0;
    void v16[4] = v8;
    void v16[5] = &v17;
    id v10 = sub_100067C4C(0x676C6F62644F7574LL, 0, v9, v16);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
    id v12 = (void *)v18[5];
    void v18[5] = v11;

    int v13 = -[ADAudioRoute initWithAudioDeviceID:](objc_alloc(&OBJC_CLASS___ADAudioRoute), "initWithAudioDeviceID:", v6);
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = *(void **)(v14 + 24);
    *(void *)(v14 + 24) = v13;

    _Block_object_dispose(&v17, 8);
  }

void sub_100067868( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100067880(AudioObjectID a1, uint64_t a2, AudioObjectPropertyElement a3, void *a4)
{
  *(void *)&inAddress.mSelector = a2;
  inAddress.mElement = a3;
  int v5 = a4;
  if (v5)
  {
    UInt32 outDataSize = 0;
    OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(a1, &inAddress, 0, 0LL, &outDataSize);
    if (PropertyDataSize)
    {
      OSStatus v7 = PropertyDataSize;
      uint64_t v8 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315906;
        uint64_t v17 = "_AudioObjectGetScalarArray";
        __int16 v18 = 1042;
        int v19 = 4;
        __int16 v20 = 2082;
        p_AudioObjectPropertyAddress inAddress = &inAddress;
        __int16 v22 = 1024;
        OSStatus v23 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed getting audio property size %{public}.4s %d{public}",  buf,  0x22u);
      }
    }

    else if (outDataSize && (__int16 v9 = malloc(outDataSize)) != 0LL)
    {
      id v10 = v9;
      OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &outDataSize, v9);
      if (PropertyData)
      {
        OSStatus v12 = PropertyData;
        int v13 = (os_log_s *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315906;
          uint64_t v17 = "_AudioObjectGetScalarArray";
          __int16 v18 = 1042;
          int v19 = 4;
          __int16 v20 = 2082;
          p_AudioObjectPropertyAddress inAddress = &inAddress;
          __int16 v22 = 1026;
          OSStatus v23 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Failed getting audio property %{public}.4s %{public}d",  buf,  0x22u);
        }
      }

      else
      {
        v5[2](v5, v10, (unint64_t)outDataSize >> 2);
      }

      free(v10);
    }

    else
    {
      UInt32 outDataSize = 0;
      v5[2](v5, 0LL, 0LL);
    }
  }
}

uint64_t sub_100067A98(AudioObjectID a1)
{
  uint64_t v4 = 0LL;
  int v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000688AC;
  v3[3] = &unk_1004EEDD8;
  void v3[4] = &v4;
  sub_100067880(a1, 0x6F75747073746D23LL, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100067B34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100067B4C(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100067B74(uint64_t a1)
{
}

uint64_t sub_100067B7C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    char v7 = "-[ADAudioSession currentOutputRoute]_block_invoke_3";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Output route changed", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = 0LL;

  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void *sub_100067C4C(uint64_t a1, AudioObjectPropertyElement a2, void *a3, void *a4)
{
  *(void *)&inAddress.mSelector = a1;
  inAddress.mElement = a2;
  int v5 = a3;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_100068860;
  v19[3] = &unk_1004EEE00;
  id v6 = a4;
  id v20 = v6;
  char v7 = objc_retainBlock(v19);
  OSStatus v8 = AudioObjectAddPropertyListenerBlock(1u, &inAddress, v5, v7);
  if (v8)
  {
    OSStatus v9 = v8;
    id v10 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      OSStatus v23 = "_AudioDeviceRegisterForChangedNotification";
      __int16 v24 = 1042;
      int v25 = 4;
      __int16 v26 = 2082;
      p_AudioObjectPropertyAddress inAddress = &inAddress;
      __int16 v28 = 1026;
      OSStatus v29 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Failed registering for property listener %{public}.4s %{public}d",  buf,  0x22u);
    }

    uint64_t v11 = 0LL;
  }

  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100068874;
    void v14[3] = &unk_1004F6B28;
    AudioObjectPropertyAddress v17 = inAddress;
    int v18 = 1;
    id v15 = v5;
    id v16 = v7;
    uint64_t v11 = objc_retainBlock(v14);
  }

  OSStatus v12 = objc_retainBlock(v11);

  return v12;
}

LABEL_26:
  if (sub_100067A98(a3))
  {
    __int16 v24 = 0LL;
    int v25 = (uint64_t)&v24;
    __int16 v26 = 0x2020000000LL;
    LODWORD(v27) = 0;
    OSStatus v29 = _NSConcreteStackBlock;
    id v30 = 3221225472LL;
    BOOL v31 = (uint64_t)sub_100068820;
    int v32 = (uint64_t (*)(uint64_t, uint64_t))&unk_1004EEE50;
    __int16 v33 = (void (*)(uint64_t))&v24;
    sub_10006862C(a3, 0x6F75747073737263LL, 0, &v29);
    id v16 = *(_DWORD *)(v25 + 24);
    _Block_object_dispose(&v24, 8);
    if (v10 == 1651275109)
    {
      __int16 v24 = 0LL;
      int v25 = (uint64_t)&v24;
      __int16 v26 = 0x2020000000LL;
      LOBYTE(v27) = 0;
      OSStatus v29 = _NSConcreteStackBlock;
      id v30 = 3221225472LL;
      BOOL v31 = (uint64_t)sub_100068830;
      int v32 = (uint64_t (*)(uint64_t, uint64_t))&unk_1004EEDD8;
      __int16 v33 = (void (*)(uint64_t))&v24;
      sub_100067880(a3, 0x6F75747064636832LL, 0, &v29);
      AudioObjectPropertyAddress v17 = *(unsigned __int8 *)(v25 + 24);
      _Block_object_dispose(&v24, 8);
      int v18 = @"BluetoothA2DPOutput";
      int v19 = @"BluetoothHFP";
      id v20 = v17 == 0;
LABEL_29:
      if (v20) {
        __int16 v21 = (__CFString *)v19;
      }
      else {
        __int16 v21 = (__CFString *)v18;
      }
      goto LABEL_32;
    }

    if (v10 <= 1651274861)
    {
      if (v10)
      {
        if (v10 != 1651271009)
        {
LABEL_47:
          __int16 v21 = @"ADAudioSessionPortOther";
          goto LABEL_32;
        }

        __int16 v21 = @"BluetoothLE";
      }

      else
      {
        __int16 v21 = 0LL;
      }
    }

    else
    {
      switch(v10)
      {
        case 1970496032:
          __int16 v21 = @"USBAudio";
          break;
        case 1751412073:
          __int16 v21 = @"HDMIOutput";
          break;
        case 1651274862:
          int v18 = @"ADAudioSessionPortOther";
          if (v16 == 1751412846) {
            int v18 = @"Headphones";
          }
          int v19 = @"Speaker";
          id v20 = v16 == 1769173099;
          goto LABEL_29;
        default:
          goto LABEL_47;
      }
    }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txRetransmitBytes));
  [v4 setObject:v15 forKey:@"tx_retransmit_bytes"];

  has = (__int16)self->_has;
  if ((has & 0x100) == 0)
  {
LABEL_11:
    if ((has & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  PBDataWriterWriteUint64Field(v7, self->_txRetransmitBytes, 22LL);
  uint64_t v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x100) == 0)
  {
LABEL_11:
    if ((has & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  *((void *)v4 + _Block_object_dispose(va, 8) = self->_txRetransmitBytes;
  *((_WORD *)v4 + 56) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x100) == 0)
  {
LABEL_11:
    if ((has & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  void v5[4] = self->_rxPackets;
  *((_WORD *)v5 + 56) |= 8u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_11:
    if ((has & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  uint64_t v14 = 0LL;
  if ((has & 2) != 0)
  {
LABEL_12:
    id v15 = 2654435761u * self->_rxDuplicateBytes;
    if ((has & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

  self->_txRetransmitBytes = *((void *)v4 + 8);
  *(_WORD *)&self->_has |= 0x80u;
  int v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

    int v36 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration discoveryOptions](v7->_configuration, "discoveryOptions"));
    BOOL v37 = [v36 includesRemoraDevices];

    if (v37 == (id)2)
    {
      uint64_t v40 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "%s Sidekick endpoints included", buf, 0xCu);
      }

      v24 |= 0x400000000uLL;
      OSStatus v23 = (id)(v23 | 0x2000);
    }

    else if (v37 == (id)1)
    {
      int v38 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s Sidekick endpoints excluded", buf, 0xCu);
      }

      v24 &= ~0x400000000uLL;
      OSStatus v23 = (id)(v23 & 0xFFFFDFFF);
    }
  }

    goto LABEL_27;
  }

  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v35 = "-[ADSyncSnapshot _readFromDisk]";
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Nothing saved", buf, 0xCu);
  }
  }

  else
  {
    int v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      BOOL v31 = "-[ADSyncControllerService _triggerBuildSpeechProfileIfRequiredForAssistantId:]";
      int v32 = 2112;
      __int16 v33 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s Skipping profile rebuild for assistantId: %@ as it is not marked for rebuild",  buf,  0x16u);
    }
  }
}

  id v10 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = @"NO";
    int v13 = 136315650;
    uint64_t v14 = "-[NSError(ADSiriUtilities) ad_isUnreachableError]";
    id v15 = 2112;
    id v16 = self;
    if (v5) {
      uint64_t v11 = @"YES";
    }
    AudioObjectPropertyAddress v17 = 2112;
    int v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Error %@ is unreachable: %@",  (uint8_t *)&v13,  0x20u);
  }

  return v5;
}

  id v20 = self->_currentClient;
  if (!v20 || v20 == v8)
  {
    if (v13) {
      -[ADSessionManager setHasActiveRequest:](self->_sessionManager, "setHasActiveRequest:", 0LL);
    }
    -[ADCommandCenter _removeAllSpeechCapturingContexts](self, "_removeAllSpeechCapturingContexts");
  }
}
}

  return v30;
}

LABEL_32:
    objc_storeStrong((id *)&v4->_destination, v21);
  }

  return v4;
}

  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_sndBandwidth));
  [v4 setObject:v21 forKey:@"snd_bandwidth"];

  has = (__int16)self->_has;
  if ((has & 0x2000) != 0) {
    goto LABEL_33;
  }
LABEL_17:
  if ((has & 0x4000) != 0)
  {
LABEL_18:
    char v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_tfoSynDataAcked));
    [v4 setObject:v7 forKey:@"tfo_syn_data_acked"];
  }

  return v4;
}

  PBDataWriterWriteUint64Field(v7, self->_sndBandwidth, 40LL);
  uint64_t v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x2000) != 0) {
    goto LABEL_33;
  }
LABEL_17:
  if ((has & 0x4000) != 0)
  {
LABEL_18:
    PBDataWriterWriteUint32Field(v7, self->_tfoSynDataAcked, 42LL);
    uint64_t v4 = v7;
  }

  *((void *)v4 + 5) = self->_sndBandwidth;
  *((_WORD *)v4 + 56) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x2000) != 0) {
    goto LABEL_33;
  }
LABEL_17:
  if ((has & 0x4000) != 0)
  {
LABEL_18:
    *((_DWORD *)v4 + 27) = self->_tfoSynDataAcked;
    *((_WORD *)v4 + 56) |= 0x4000u;
  }

  self->_sndBandwidth = *((void *)v4 + 5);
  *(_WORD *)&self->_has |= 0x10u;
  int v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x2000) != 0) {
    goto LABEL_33;
  }
LABEL_17:
  if ((v5 & 0x4000) != 0)
  {
LABEL_18:
    self->_tfoSynDataAcked = *((_DWORD *)v4 + 27);
    *(_WORD *)&self->_has |= 0x4000u;
  }
}

    int v5 = v45;
  }

LABEL_34:
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v4 assistantIdentifier]);
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 uppercaseString]);

  if ([v35 length])
  {
    __n128 v48 = 0u;
    uint64_t v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    int v36 = v5;
    BOOL v37 = [v36 countByEnumeratingWithState:&v46 objects:v62 count:16];
    if (v37)
    {
      int v38 = *(void *)v47;
      while (2)
      {
        for (i = 0LL; i != v37; i = (char *)i + 1)
        {
          if (*(void *)v47 != v38) {
            objc_enumerationMutation(v36);
          }
          uint64_t v40 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
          id v41 = sub_10016AB90(v40);
          int v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          id v43 = [v42 isEqualToString:v35];

          if (v43)
          {
            BOOL v37 = v40;
            goto LABEL_51;
          }
        }

        BOOL v37 = [v36 countByEnumeratingWithState:&v46 objects:v62 count:16];
        if (v37) {
          continue;
        }
        break;
      }
    }
}

            BOOL v37 = v33;

            int v38 = (os_log_s *)AFSiriLogContextDaemon;
            goto LABEL_35;
          }

          int v36 = sub_10016AD0C(v30);
          __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(v36);
          if (v33) {
            goto LABEL_32;
          }
          uint64_t v39 = sub_10016AD0C(v26);
          uint64_t v35 = objc_claimAutoreleasedReturnValue(v39);
LABEL_34:
          BOOL v37 = (id)v35;

          int v38 = (os_log_s *)AFSiriLogContextDaemon;
          if (v37)
          {
LABEL_35:
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315394;
              int v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
              int v53 = 2112;
              int v54 = v27;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "%s #hal Including remote device context pushed to collector: %@",  buf,  0x16u);
            }

            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v27 serializedBackingStore]);
            -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v40, v37);
          }

          else
          {
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = v45;
              int v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%s #hal Excluding remote device context due to missing device identifier",  buf,  0xCu);
            }

            BOOL v37 = 0LL;
          }

          goto LABEL_39;
        }

        __int16 v28 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315394;
          int v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
          int v53 = 2112;
          int v54 = v27;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "%s #hal Excluding remote device context matching sender: %@",  buf,  0x16u);
        }

        id v30 = (os_log_s *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          BOOL v31 = *(void *)(a1 + 56);
          *(_DWORD *)id v34 = 136315394;
          *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
          *(_WORD *)&v34[12] = 2048;
          *(void *)&v34[14] = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s Starting location monitoring routine with accuracy of %f",  v34,  0x16u);
        }

        objc_msgSend( *(id *)(a1 + 32),  "_startMonitoringLocationWithDesiredAccuracy:",  *(double *)(a1 + 56),  *(_OWORD *)v34,  *(void *)&v34[16]);
        int v32 = -[ADLocationFetchRequest initWithClientFetchRequest:completion:]( objc_alloc(&OBJC_CLASS___ADLocationFetchRequest),  "initWithClientFetchRequest:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
        [*(id *)(*(void *)(a1 + 32) + 144) addObject:v32];
        [*(id *)(a1 + 32) scheduleLocationFetchRequestTimeoutForRequest:v32 timeout:*(double *)(a1 + 64)];

        goto LABEL_13;
      }

      [v9 horizontalAccuracy];
      AudioObjectPropertyAddress v17 = *(double *)(a1 + 56);
      int v19 = v18 - v17;
      id v20 = (os_log_s *)AFSiriLogContextLocation;
      __int16 v21 = os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO);
      if (v19 > 2.22044605e-16)
      {
        if (v21)
        {
          *(_DWORD *)id v34 = 136315394;
          *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
          *(_WORD *)&v34[12] = 2048;
          *(double *)&v34[14] = v17;
          __int16 v22 = "%s Cached location accuracy is not satisfying requested accuracy of %f and request style is 'default'";
          OSStatus v23 = v20;
          __int16 v24 = 22;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, v22, v34, v24);
          goto LABEL_32;
        }

        goto LABEL_32;
      }

      if (v21)
      {
        *(_DWORD *)id v34 = 136315394;
        *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
        *(_WORD *)&v34[12] = 2048;
        *(double *)&v34[14] = v17;
        __int16 v26 = "%s Cached location satisfies requested accuracy %f and request style is 'default'";
        uint64_t v27 = v20;
        __int16 v28 = 22;
        goto LABEL_37;
      }
    }

    __int16 v33 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)id v34 = 136315138;
      *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "%s Cached location satisfies fetch request",  v34,  0xCu);
    }

    id v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_12;
  }

    goto LABEL_33;
  }

  id v6 = (void *)v5;
  char v7 = objc_claimAutoreleasedReturnValue([v1 expectedSpeakerSharedUserID]);
  OSStatus v8 = (void *)v7;
  if (!v7 || (OSStatus v9 = AFIsInternalInstall(v7), (v9 & 1) == 0))
  {

    goto LABEL_23;
  }

  uint64_t v11 = AFSupportsMultiUser(v9, v10);

  if (!v11) {
    goto LABEL_23;
  }
  OSStatus v12 = (SAStartRequest *)objc_alloc_init(&OBJC_CLASS___SAStartMultiUserTestRequest);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v1 expectedSpeakerSharedUserID]);
  -[SAStartRequest setExpectedSelectedSharedUserId:](v12, "setExpectedSelectedSharedUserId:", v13);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v1 text]);
  -[SAStartRequest setUtterance:](v12, "setUtterance:", v14);

  if ([v1 activationEvent] == (id)5) {
    -[SAStartRequest setOrigin:](v12, "setOrigin:", SAInputOriginAssistantTextInputValue);
  }
  id v15 = objc_alloc_init(&OBJC_CLASS___SAConfidenceScores);
  [v15 setProcessedAudioDurationMilliseconds:4000];
  [v15 setThresholdType:SAVoiceIDConfidenceScoresThresholdTypeVOICE_TRIGGERValue];
  [v15 setAssetVersion:@"12.216.PremiumTests"];
  [v15 setScoringSchemeVersion:&off_100513660];
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v1 expectedSpeakerSharedUserID]);
  [v15 setClassifiedUser:v16];

  AudioObjectPropertyAddress v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
  int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 getDebugVoiceIdScores]);

  int v19 = (os_log_s *)AFSiriLogContextDaemon;
  id v20 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v18)
  {
    int32x4_t v78 = v15;
    int32x4_t v79 = v12;
    if (v20)
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "_RequestForInfo";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Using debug voiceID scores", buf, 0xCu);
    }

    *(void *)__int128 buf = 0LL;
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    unsigned int v88 = 0LL;
    int8x16_t v77 = v18;
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( [v21 validateAndReturnScores:v18 classifiedUser:0 donatedScores:&__NSDictionary0__struct unknownUserSharedId:&v88 totalUsers:buf ghostVoiceProfileDetected:0]);
    uint64_t v76 = v88;

    OSStatus v23 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint16x8_t v84 = 0u;
    uint16x8_t v85 = 0u;
    uint8x16_t v86 = 0u;
    int v87 = 0u;
    __int16 v24 = v22;
    int v25 = [v24 countByEnumeratingWithState:&v84 objects:v90 count:16];
    if (v25)
    {
      __int16 v26 = v25;
      uint64_t v27 = *(void *)v85;
      do
      {
        for (i = 0LL; i != v26; i = (char *)i + 1)
        {
          if (*(void *)v85 != v27) {
            objc_enumerationMutation(v24);
          }
          OSStatus v29 = *(void *)(*((void *)&v84 + 1) + 8LL * (void)i);
          id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKey:", v29, v76));
          BOOL v31 = objc_alloc_init(&OBJC_CLASS___SAUserConfidenceScore);
          objc_msgSend(v31, "setConfidenceScore:", objc_msgSend(v30, "integerValue"));
          [v31 setSharedUserId:v29];
          -[NSMutableArray addObject:](v23, "addObject:", v31);
        }

        __int16 v26 = [v24 countByEnumeratingWithState:&v84 objects:v90 count:16];
      }

      while (v26);
    }

    int v32 = v76;
    if (v76)
    {
      __int16 v33 = objc_alloc_init(&OBJC_CLASS___SAUserConfidenceScore);
      [v33 setConfidenceScore:0];
      [v33 setSharedUserId:v76];
      -[NSMutableArray addObject:](v23, "addObject:", v33);
    }

    id v15 = v78;
    objc_msgSend(v78, "setScores:", v23, v76);

    OSStatus v12 = v79;
    int v18 = v77;
  }

  else
  {
    if (v20)
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "_RequestForInfo";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "%s Constructing voiceID scores", buf, 0xCu);
    }

    int8x16_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    int8x16_t v67 = (void *)objc_claimAutoreleasedReturnValue([v1 expectedSpeakerSharedUserID]);
    int8x16_t v68 = [v1 expectedSpeakerConfidenceScore];
    uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue([v1 nonspeakerConfidenceScores]);
    int v32 = (void *)objc_claimAutoreleasedReturnValue( [v66 confidenceScoresForMultiUserTestingExpectedSpeakerSharedUserID:v67 expectedSpeakerConfidenceScore:v68 nons peakerConfidenceScores:v69]);

    [v15 setScores:v32];
  }

  -[SAStartRequest setVoiceIDConfidenceScores:](v12, "setVoiceIDConfidenceScores:", v15);
  int v82 = 0u;
  uint8x16_t v83 = 0u;
  int32x4_t v80 = 0u;
  uint64_t v81 = 0u;
  unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue([v15 scores]);
  int v71 = [v70 countByEnumeratingWithState:&v80 objects:v89 count:16];
  if (v71)
  {
    int8x16_t v72 = v71;
    int v73 = *(void *)v81;
    while (2)
    {
      for (j = 0LL; j != v72; j = (char *)j + 1)
      {
        if (*(void *)v81 != v73) {
          objc_enumerationMutation(v70);
        }
        if ([*(id *)(*((void *)&v80 + 1) + 8 * (void)j) confidenceScore])
        {

          goto LABEL_59;
        }
      }

      int8x16_t v72 = [v70 countByEnumeratingWithState:&v80 objects:v89 count:16];
      if (v72) {
        continue;
      }
      break;
    }
  }

  int v75 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = "_RequestForInfo";
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_INFO,  "%s All provided scores are 0, defaulting to unknown user",  buf,  0xCu);
  }

  -[SAStartRequest setExpectedSelectedSharedUserId:](v12, "setExpectedSelectedSharedUserId:", @"unknown");
LABEL_59:

LABEL_33:
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v1 requestIdentifier]);
  __n128 v50 = (void *)objc_claimAutoreleasedReturnValue([v49 UUIDString]);
  -[SAStartRequest setAceId:](v12, "setAceId:", v50);

  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v1 turnIdentifier]);
  String = AFTurnIdentifierGetString();
  int v53 = (void *)objc_claimAutoreleasedReturnValue(String);
  -[SAStartRequest setTurnId:](v12, "setTurnId:", v53);

  return v12;
}
}

      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, v36, buf, 0xCu);
      goto LABEL_10;
    }

    __int16 v28 = (os_log_s *)AFSiriLogContextDaemon;
    id v15 = v37;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      ((void (*)(void *))v20[2])(v20);
      goto LABEL_21;
    }

    *(_DWORD *)__int128 buf = 136315138;
    int v54 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]";
    OSStatus v29 = "%s #MTEOptOut Attempted to send analytics event stream when device is opted out of MTE";
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, v29, buf, 0xCu);
    goto LABEL_20;
  }

  uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    int v54 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]";
    int v36 = "%s Attempted to send analytics event stream when HIPAA compliance for On-Device Dictation.";
    goto LABEL_32;
  }
}
}

void sub_100068360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_100068404(uint64_t a1, void *cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      id v5 = [cf copy];
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
      char v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
  }

void sub_100068470(AudioObjectID a1, uint64_t a2, AudioObjectPropertyElement a3, void *a4)
{
  *(void *)&inAddress.mSelector = a2;
  inAddress.mElement = a3;
  id v5 = a4;
  CFTypeRef outData = 0LL;
  UInt32 ioDataSize = 8;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &ioDataSize, &outData);
  if (PropertyData)
  {
    OSStatus v7 = PropertyData;
    OSStatus v8 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      int v13 = "_AudioObjectGetCFTypeRef";
      __int16 v14 = 1042;
      int v15 = 4;
      __int16 v16 = 2082;
      p_AudioObjectPropertyAddress inAddress = &inAddress;
      __int16 v18 = 1026;
      OSStatus v19 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed getting audio property %{public}.4s %{public}d",  buf,  0x22u);
    }
  }

  else
  {
    v5[2](v5, outData);
    if (outData) {
      CFRelease(outData);
    }
  }
}

void sub_1000685B0(uint64_t a1, void *cf)
{
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFStringGetTypeID())
    {
      id v5 = [cf copy];
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
      OSStatus v7 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v5;
    }
  }

uint64_t sub_10006861C(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

void sub_10006862C(AudioObjectID a1, uint64_t a2, AudioObjectPropertyElement a3, void *a4)
{
  *(void *)&inAddress.mSelector = a2;
  inAddress.mElement = a3;
  id v5 = a4;
  UInt32 ioDataSize = 4;
  unsigned int outData = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &ioDataSize, &outData);
  if (PropertyData)
  {
    OSStatus v7 = PropertyData;
    OSStatus v8 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      int v13 = "_AudioObjectGetIntValue";
      __int16 v14 = 1042;
      int v15 = 4;
      __int16 v16 = 2082;
      p_AudioObjectPropertyAddress inAddress = &inAddress;
      __int16 v18 = 1026;
      OSStatus v19 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed getting audio property %{public}.4s %{public}d",  buf,  0x22u);
    }
  }

  else
  {
    v5[2](v5, outData);
  }
}

uint64_t sub_10006875C(AudioObjectID a1)
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_100068848;
  v3[3] = &unk_1004EEDD8;
  void v3[4] = &v4;
  sub_100067880(a1, 0x696E707473746D23LL, 0, v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000687F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100068810(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

uint64_t sub_100068820(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

uint64_t sub_100068830(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a3 == 2;
  return result;
}

uint64_t sub_100068848(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a3 != 0;
  return result;
}

uint64_t sub_100068860(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100068874(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  *(void *)&v4.mSelector = *(void *)(a1 + 48);
  AudioObjectID v2 = *(_DWORD *)(a1 + 60);
  v4.mElement = *(_DWORD *)(a1 + 56);
  return AudioObjectRemovePropertyListenerBlock(v2, &v4, *(dispatch_queue_t *)(a1 + 32), v1);
}

uint64_t sub_1000688AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a3 != 0;
  return result;
}

void sub_1000688C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  if (!v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100068970;
    v4[3] = &unk_1004EED88;
    int v5 = 0;
    void v4[4] = v2;
    void v4[5] = 0x676C6F6264657623LL;
    sub_100067880(1u, 0x676C6F6264657623LL, 0, v4);
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

void sub_100068970(uint64_t a1, AudioObjectID *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    while (1)
    {
      AudioObjectID v7 = *a2++;
      uint64_t v6 = v7;
      if (!--v3) {
        return;
      }
    }

    uint64_t v18 = 0LL;
    OSStatus v19 = &v18;
    uint64_t v20 = 0x3032000000LL;
    __int16 v21 = sub_100067B4C;
    __int16 v22 = sub_100067B74;
    id v23 = 0LL;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = *(void **)(v9 + 8);
    v17[0] = _NSConcreteStackBlock;
    v17[2] = sub_100068A98;
    v17[3] = &unk_1004FCDB0;
    v17[1] = 3221225472LL;
    uint8_t v17[4] = v9;
    v17[5] = &v18;
    uint64_t v11 = sub_100067C4C(v8, *(_DWORD *)(a1 + 48), v10, v17);
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
    int v13 = (void *)v19[5];
    v19[5] = v12;

    __int16 v14 = -[ADAudioRoute initWithAudioDeviceID:](objc_alloc(&OBJC_CLASS___ADAudioRoute), "initWithAudioDeviceID:", v6);
    uint64_t v15 = *(void *)(a1 + 32);
    __int16 v16 = *(void **)(v15 + 16);
    *(void *)(v15 + memset((void *)(v1 - 204), 50, 16) = v14;

    _Block_object_dispose(&v18, 8);
  }

void sub_100068A80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100068A98(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    AudioObjectID v7 = "-[ADAudioSession currentInputRoute]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Input route changed", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  AudioObjectPropertyAddress v4 = *(void **)(v3 + 16);
  *(void *)(v3 + memset((void *)(v1 - 204), 50, 16) = 0LL;

  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100068BA8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADAudioSession);
  uint64_t v2 = (void *)qword_100577A48;
  qword_100577A48 = (uint64_t)v1;
}

void sub_1000692BC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 136315906;
      uint64_t v9 = "-[ADOnDemandAssetSubscriber requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke";
      __int16 v10 = 2048;
      uint64_t v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v5;
      __int16 v14 = 2112;
      uint64_t v15 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s origin = %ld client = %@ requestInfo = %@",  (uint8_t *)&v8,  0x2Au);
    }

    if (*(void *)(a1 + 56) != 1LL && *(void *)(a1 + 40))
    {
      AudioObjectID v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        uint64_t v9 = "-[ADOnDemandAssetSubscriber requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Allowing on demand asset subscription",  (uint8_t *)&v8,  0xCu);
      }

      [WeakRetained[2] allowAssistantOnDemandAssetSubscription];
      [WeakRetained _invalidate];
    }
  }
}

void sub_10006941C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained[2] assistantOnDemandAssetSubscriptionAllowed])
    {
      uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v5 = 136315138;
        uint64_t v6 = "-[ADOnDemandAssetSubscriber _setupIfNecessary]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s On demand asset subscription already allowed",  (uint8_t *)&v5,  0xCu);
      }

      [v2 _invalidate];
    }

    else
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[ADRequestLifecycleObserver sharedObserver]( &OBJC_CLASS___ADRequestLifecycleObserver,  "sharedObserver"));
      [v4 addListener:v2];
    }
  }
}

id sub_100069BE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _delete];
}

void sub_100069C10(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[3];
  if (v3)
  {
    if (v2[11])
    {
LABEL_5:
      uint64_t v9 = 0LL;
      goto LABEL_12;
    }

    id v4 = objc_claimAutoreleasedReturnValue([v3 path]);
    uint64_t v5 = open((const char *)[v4 fileSystemRepresentation], 0);

    if ((v5 & 0x80000000) == 0)
    {
      uint64_t v6 = -[NSFileHandle initWithFileDescriptor:closeOnDealloc:]( objc_alloc(&OBJC_CLASS___NSFileHandle),  "initWithFileDescriptor:closeOnDealloc:",  v5,  1LL);
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = *(void **)(v7 + 88);
      *(void *)(v7 + 8_Block_object_dispose(va, 8) = v6;

      goto LABEL_5;
    }

    __int16 v14 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = v14;
      __int16 v16 = __error();
      AudioObjectPropertyAddress v17 = strerror(*v16);
      int v18 = 136315394;
      OSStatus v19 = "-[ADAudioFileWriter flushWithCompletion:]_block_invoke";
      __int16 v20 = 2082;
      __int16 v21 = v17;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Failed opening fd for flushed audio file %{public}s",  (uint8_t *)&v18,  0x16u);
    }

    uint64_t v9 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  *__error(),  0LL);
  }

  else
  {
    __int16 v10 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315138;
      OSStatus v19 = "-[ADAudioFileWriter flushWithCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s No file url on flush",  (uint8_t *)&v18,  0xCu);
      uint64_t v2 = *(void **)(a1 + 32);
    }

    uint64_t v11 = v2[12];
    if (v11)
    {
      NSErrorUserInfoKey v22 = NSUnderlyingErrorKey;
      uint64_t v23 = v11;
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
    }

    else
    {
      __int16 v12 = 0LL;
    }

    uint64_t v9 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"ADAudioFileWriterErrorDomain",  1LL,  v12);
  }

void sub_100069E84(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 40LL))
  {
    unsigned int v2 = [*(id *)(a1 + 40) length];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    unsigned int v5 = *(_DWORD *)(v4 + 72);
    LODWORD(v4) = *(_DWORD *)(v4 + 76);
    ioData.mNumberBuffers = 1;
    ioData.mBuffers[0].mNumberChannels = v4;
    UInt32 v6 = v2 / v5;
    ioData.mBuffers[0].mDataByteSize = [v3 length];
    ioData.mBuffers[0].mData = [*(id *)(a1 + 40) bytes];
    OSStatus v7 = ExtAudioFileWrite(*(ExtAudioFileRef *)(*(void *)(a1 + 32) + 40LL), v6, &ioData);
    if (v7)
    {
      OSStatus v8 = v7;
      uint64_t v9 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315394;
        __int16 v16 = "-[ADAudioFileWriter appendAudioData:]_block_invoke";
        __int16 v17 = 1026;
        OSStatus v18 = v8;
        __int16 v10 = "%s Failed writing audio file %{public}d";
        p_AudioBufferList ioData = (AudioBufferList *)&v15;
        __int16 v12 = v9;
        uint32_t v13 = 18;
LABEL_8:
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v10, (uint8_t *)p_ioData, v13);
      }
    }
  }

  else
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      ioData.mNumberBuffers = 136315138;
      *(void *)(&ioData.mNumberBuffers + 1) = "-[ADAudioFileWriter appendAudioData:]_block_invoke";
      __int16 v10 = "%s No audio file to append data";
      p_AudioBufferList ioData = &ioData;
      __int16 v12 = v14;
      uint32_t v13 = 12;
      goto LABEL_8;
    }
  }

void *sub_100069FF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 40))
  {
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    [v33 handleFailureInMethod:*(void *)(a1 + 40) object:*(void *)(a1 + 32) file:@"ADAudioFileWriter.m" lineNumber:210 description:@"AudioFile Already configured"];

    uint64_t v2 = *(void *)(a1 + 32);
  }

  __int128 v3 = *(_OWORD *)(a1 + 48);
  __int128 v4 = *(_OWORD *)(a1 + 64);
  *(void *)(v2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(v2 + 4_Block_object_dispose(va, 8) = v3;
  *(_OWORD *)(v2 + 64) = v4;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 32);
  if (v6)
  {
    OSStatus v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v6, 0LL));
  }

  else
  {
    id v8 = [(id)objc_opt_class(v5) _generateTemporaryFileURL];
    OSStatus v7 = (void *)objc_claimAutoreleasedReturnValue(v8);
  }

  uint64_t v9 = v7;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v7);

  __int16 v10 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 24LL);
    *(_DWORD *)__int128 buf = 136315394;
    int v38 = "-[ADAudioFileWriter configureWithAudioStreamBasicDescription:]_block_invoke";
    __int16 v39 = 2112;
    *(void *)uint64_t v40 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Creating audio file at URL %@", buf, 0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  memset(&v34.mFormatID, 0, 32);
  UInt32 v14 = *(_DWORD *)(v12 + 76);
  v34.mChannelsPerFrame = v14;
  if (!v14)
  {
    int v15 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      int v38 = "_AudioStreamBasicDescriptionForAFAudioFileType";
      __int16 v39 = 2048;
      *(void *)uint64_t v40 = 0LL;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s inASBD->mChannelsPerFrame = %lu",  buf,  0x16u);
    }

    UInt32 v14 = 1;
    v34.mChannelsPerFrame = 1;
  }

  v34.mSampleRate = *(Float64 *)(v12 + 48);
  switch(v13)
  {
    case 3LL:
      v34.mSampleRate = 24000.0;
      v34.mFormatID = 1869641075;
      v34.mFramesPerPacket = 480;
      v34.mChannelsPerFrame = 1;
      break;
    case 2LL:
      *(void *)&v34.mFormatID = 0xC6C70636DLL;
      v34.mBitsPerChannel = 16;
      v34.mFramesPerPacket = 1;
      v34.mBytesPerFrame = 2 * v14;
      v34.mBytesPerPacket = 2 * v14;
      break;
    case 1LL:
      v34.mSampleRate = 0.0;
      v34.mFormatID = 1935764850;
      break;
    default:
      goto LABEL_21;
  }

  ioOSStatus PropertyDataSize = 40;
  OSStatus Property = AudioFormatGetProperty(0x666D7469u, 0, 0LL, &ioPropertyDataSize, &v34);
  if (Property)
  {
    __int16 v16 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136316162;
      int v38 = "_AudioStreamBasicDescriptionForAFAudioFileType";
      __int16 v39 = 1042;
      *(_DWORD *)uint64_t v40 = 4;
      *(_WORD *)&v40[4] = 2082;
      *(void *)&v40[6] = &v34.mFormatID;
      __int16 v41 = 1042;
      int v42 = 4;
      __int16 v43 = 2082;
      p_OSStatus Property = &Property;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Error getting format info for type %{public}.4s %{public}.4s",  buf,  0x2Cu);
    }
  }

LABEL_21:
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(v17 + 16);
  else {
    AudioFileTypeID v19 = dword_1003C9DB0[v18 - 1];
  }
  if (v18 == 3) {
    UInt32 v20 = 3;
  }
  else {
    UInt32 v20 = 1;
  }
  OSStatus v21 = ExtAudioFileCreateWithURL(*(CFURLRef *)(v17 + 24), v19, &v34, 0LL, v20, (ExtAudioFileRef *)(v17 + 40));
  if (v21)
  {
    OSStatus v22 = v21;
    uint64_t v23 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)(*(void *)(a1 + 32) + 24LL);
      *(_DWORD *)__int128 buf = 136315650;
      int v38 = "-[ADAudioFileWriter configureWithAudioStreamBasicDescription:]_block_invoke";
      __int16 v39 = 2114;
      *(void *)uint64_t v40 = v32;
      *(_WORD *)&v40[8] = 1026;
      *(_DWORD *)&v40[10] = v22;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s Failed creating audio file at url %{public}@ %{public}d",  buf,  0x1Cu);
    }

    uint64_t v24 = *(void *)(a1 + 32);
    if (!*(void *)(v24 + 96) && *(void *)(v24 + 88))
    {
      int v25 = objc_alloc(&OBJC_CLASS___NSError);
      __int16 v26 = -[NSError initWithDomain:code:userInfo:]( v25,  "initWithDomain:code:userInfo:",  @"ADAudioFileWriterExtAudioFileErrorDomain",  v22,  0LL,  *(void *)&v34.mSampleRate,  *(_OWORD *)&v34.mFormatID,  *(_OWORD *)&v34.mBytesPerFrame);
      uint64_t v27 = *(void *)(a1 + 32);
      __int16 v28 = *(void **)(v27 + 96);
      *(void *)(v27 + 96) = v26;
    }
  }

  else
  {
    uint64_t result = (void *)ExtAudioFileSetProperty( *(ExtAudioFileRef *)(*(void *)(a1 + 32) + 40LL),  0x63666D74u,  0x28u,  (const void *)(*(void *)(a1 + 32) + 48LL));
    if (!(_DWORD)result) {
      return result;
    }
    int v30 = (int)result;
    BOOL v31 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      int v38 = "-[ADAudioFileWriter configureWithAudioStreamBasicDescription:]_block_invoke";
      __int16 v39 = 1026;
      *(_DWORD *)uint64_t v40 = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%s Error setting input format %{public}d",  buf,  0x12u);
    }
  }

  uint64_t result = *(void **)(a1 + 32);
  if (result[5])
  {
    [result _close];
    return [*(id *)(a1 + 32) _delete];
  }

  return result;
}

  *((_DWORD *)v5 + 22) = self->_rttBest;
  *((_WORD *)v5 + 56) |= 0x200u;
  has = (__int16)self->_has;
  if ((has & 0x40) == 0)
  {
LABEL_6:
    if ((has & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  uint64_t v9 = 0LL;
  if ((has & 0x20) != 0)
  {
LABEL_7:
    __int16 v10 = 2654435761u * self->_txBytes;
    if ((has & 0x80) != 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
}

        __int16 v10 = SASettingAudioRouteTypeOTHERValue;
        goto LABEL_22;
      }

      __int128 v4 = @"Audio/Video";
    }

    OSStatus v7 = (void *)objc_claimAutoreleasedReturnValue([v3 routeForCategory:v4]);
    goto LABEL_11;
  }

  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    UInt32 v14 = 136315138;
    int v15 = "-[ADSettingsService _getPlaybackAudioRoute:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Unable to get an instance of AVSystemController.",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  OSStatus v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 37LL));
  (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
LABEL_25:
}

    -[SiriCoreSQLiteDatabase closeWithError:](v19, "closeWithError:", 0LL);
    if (SiriCoreSQLiteDatabaseIsErrorUnrecoverable(v25))
    {
      __int128 v46 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      __int128 v47 = AFAnalyticsContextCreateWithError(v25);
      __n128 v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v190[0] = v48;
      unsigned int v188 = @"retryCount";
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v20));
      int v189 = v49;
      __n128 v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v189,  &v188,  1LL));
      v190[1] = v50;
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v190, 2LL));
      int v52 = AFAnalyticsContextsMerge();
      int v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      [v46 logEventWithType:4304 context:v53];

      __int128 v3 = v151;
      id v8 = &CFNotificationCenterGetDarwinNotifyCenter_ptr;
      int v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      LODWORD(v49) = [v54 fileExistsAtPath:v151->_path];

      if ((_DWORD)v49)
      {
        int v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        int v56 = v151->_path;
        int v169 = v25;
        uint8x16_t v57 = [v55 removeItemAtPath:v56 error:&v169];
        uint64_t v12 = v169;

        if ((v57 & 1) == 0)
        {
          uint16x8_t v58 = (os_log_s *)AFSiriLogContextAnalytics;
          if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
          {
            int8x16_t v59 = v151->_path;
            *(_DWORD *)__int128 buf = 136316162;
            uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
            uint64_t v196 = 2048;
            unsigned int v197 = v20;
            int v198 = 2048;
            int v199 = 3LL;
            unsigned int v200 = 2112;
            uint64_t v201 = (__CFString *)v59;
            uint64_t v202 = 2112;
            uint64_t v203 = v12;
            _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "%s Failed to remove database (retry %tu out of %tu) at path %@ due to %@.",  buf,  0x34u);
          }
        }
      }

      else
      {
        uint64_t v12 = v25;
      }
    }

    else
    {
      uint64_t v12 = v25;
      id v8 = &CFNotificationCenterGetDarwinNotifyCenter_ptr;
    }

    UInt32 v20 = (const __CFString *)((char *)v20 + 1);
  }

  while (v20 != (const __CFString *)3);
  if (v12)
  {
    uint8x16_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    uint16x8_t v63 = AFAnalyticsContextCreateWithError(v12);
    uint16x8_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    v187[0] = v64;
    int v185 = @"retryCount";
    int8x16_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 3LL));
    int v186 = v65;
    int8x16_t v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v186,  &v185,  1LL));
    v187[1] = v66;
    int8x16_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v187, 2LL));
    int8x16_t v68 = AFAnalyticsContextsMerge();
    uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
    [v62 logEventWithType:4305 context:v69];

    unsigned int v70 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
      uint64_t v196 = 2048;
      unsigned int v197 = (const __CFString *)3;
      int v198 = 2112;
      int v199 = (uint64_t)v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "%s Failed to prepare analytics database after %tu retries due to %@.",  buf,  0x20u);
      if (a3) {
LABEL_37:
      }
        *a3 = v12;
    }

    else if (a3)
    {
      goto LABEL_37;
    }

LABEL_98:
    uint64_t v5 = 0LL;
    return v5;
  }

    int v30 = 0;
    goto LABEL_22;
  }

  uint64_t v35 = (const char *)[v79 cStringUsingEncoding:4];
  int v36 = open(v35, 0);
  if (v36 < 0)
  {
    __int16 v39 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint8x16_t v69 = __error();
      unsigned int v70 = strerror(*v69);
      *(_DWORD *)int v107 = 136315650;
      *(void *)&v107[4] = "_ADCloudKitExtractArchiveToDirectory";
      *(_WORD *)&v107[12] = 2080;
      *(void *)&v107[14] = v35;
      *(_WORD *)&v107[22] = 2080;
      unsigned int v108 = v70;
      _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "%s Failed to open input path %s: %s",  v107,  0x20u);
    }

    goto LABEL_21;
  }

  int8x16_t v77 = v36;
  if (fcntl(v36, 48, 1LL) < 0)
  {
    BOOL v37 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v74 = __error();
      int v75 = strerror(*v74);
      *(_DWORD *)int v107 = 136315650;
      *(void *)&v107[4] = "_ADCloudKitExtractArchiveToDirectory";
      *(_WORD *)&v107[12] = 2080;
      *(void *)&v107[14] = v35;
      *(_WORD *)&v107[22] = 2080;
      unsigned int v108 = v75;
      _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s Unable to set F_NOCACHE accessing file %s %s",  v107,  0x20u);
    }
  }

  if (v96[3])
  {
    int v38 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      int8x16_t v66 = v96[3];
      int8x16_t v67 = __error();
      int8x16_t v68 = strerror(*v67);
      *(_DWORD *)int v107 = 136315650;
      *(void *)&v107[4] = "_ADCloudKitExtractArchiveToDirectory";
      *(_WORD *)&v107[12] = 2048;
      *(void *)&v107[14] = v66;
      *(_WORD *)&v107[22] = 2080;
      unsigned int v108 = v68;
      _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%s Unexpected resumptionOffset: %llu: %s",  v107,  0x20u);
    }

    close(v77);
    goto LABEL_21;
  }

  uint64_t v76 = dispatch_semaphore_create(0LL);
  uint8x16_t v83 = 0LL;
  uint16x8_t v84 = &v83;
  uint16x8_t v85 = 0x3032000000LL;
  uint8x16_t v86 = sub_100071DB4;
  int v87 = sub_100071DC4;
  unsigned int v88 = 0LL;
  while (1)
  {
    uint64_t v40 = objc_autoreleasePoolPush();
    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](&OBJC_CLASS___NSMutableData, "dataWithCapacity:", 0x20000LL));
    [v41 setLength:0x20000];
    int v42 = v41;
    __int16 v43 = read(v77, [v42 mutableBytes], 0x20000uLL);
    __int128 v44 = v43;
    if (!v43)
    {
      __int128 v46 = 16;
      goto LABEL_59;
    }

    if (v43 != -1)
    {
      [v42 setLength:v43];
      *(void *)int v99 = 0LL;
      *(void *)&v99[8] = v99;
      *(void *)&v99[16] = 0x2020000000LL;
      LOBYTE(v100) = 0;
      *(void *)int v107 = _NSConcreteStackBlock;
      *(void *)&v107[8] = 3221225472LL;
      *(void *)&v107[16] = sub_100071E34;
      unsigned int v108 = (char *)&unk_1004EF010;
      int v110 = &v83;
      unsigned int v111 = v99;
      __int128 v47 = v76;
      int v109 = v47;
      [v18 supplyBytes:v42 withCompletionBlock:v107];

      __n128 v48 = dispatch_time(0LL, 10000000000LL);
      if (dispatch_semaphore_wait(v47, v48))
      {
        uint64_t v49 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int8x16x4_t v103 = 136315138;
          int v104 = "_ADCloudKitExtractArchiveToDirectory";
          __n128 v50 = v49;
          uint64_t v51 = "%s StreamingZip Error time out supplying bytes to extractor";
          int v52 = 12;
LABEL_67:
          _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, v51, v103, v52);
        }
      }

      else
      {
        int v53 = (void *)v84[5];
        if (!v53)
        {
          if (*(_BYTE *)(*(void *)&v99[8] + 24LL))
          {
            int v55 = (os_log_s *)AFSiriLogContextDaemon;
            __int128 v46 = 16;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int8x16x4_t v103 = 136315138;
              int v104 = "_ADCloudKitExtractArchiveToDirectory";
              _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "%s Extractor said data was complete.",  v103,  0xCu);
            }
          }

          else
          {
            __int128 v46 = 0;
          }

          goto LABEL_58;
        }

        int v54 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int8x16x4_t v103 = 136315394;
          int v104 = "_ADCloudKitExtractArchiveToDirectory";
          uint64_t v105 = 2112;
          unsigned int v106 = v53;
          __n128 v50 = v54;
          uint64_t v51 = "%s supplyBytes: returned error %@";
          int v52 = 22;
          goto LABEL_67;
        }
      }

      close(v77);
      __int128 v46 = 1;
LABEL_58:

      _Block_object_dispose(v99, 8);
      int v42 = 0LL;
      goto LABEL_59;
    }

    __int128 v45 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      int v56 = __error();
      uint8x16_t v57 = strerror(*v56);
      *(_DWORD *)int v99 = 136315394;
      *(void *)&v99[4] = "_ADCloudKitExtractArchiveToDirectory";
      *(_WORD *)&v99[12] = 2080;
      *(void *)&v99[14] = v57;
      _os_log_error_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%s Read failed with error %s",  v99,  0x16u);
    }

    close(v77);
    __int128 v46 = 1;
LABEL_59:

    objc_autoreleasePoolPop(v40);
    if (v46) {
      break;
    }
    if (v44 <= 0) {
      goto LABEL_69;
    }
  }

  if (v46 != 16)
  {
    int v30 = 0;
    goto LABEL_79;
  }
}

    __int16 v26 = 0LL;
    goto LABEL_17;
  }

  UInt32 v20 = objc_opt_class(&OBJC_CLASS___SAAlarmDismiss);
  if ((objc_opt_isKindOfClass(v30, v20) & 1) != 0
    || (OSStatus v21 = objc_opt_class(&OBJC_CLASS___SAAlarmSnooze), (objc_opt_isKindOfClass(v30, v21) & 1) != 0))
  {
    OSStatus v22 = objc_alloc(&OBJC_CLASS___NSString);
    if (a10)
    {
LABEL_12:
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v30 encodedClassName]);
      AudioFileTypeID v19 = -[NSString initWithFormat:](v22, "initWithFormat:", @"%@.error", v18);
      goto LABEL_13;
    }

    uint64_t v23 = (uint64_t *)&SAAlarmGroupAcronym;
  }

  else
  {
    OSStatus v29 = objc_opt_class(&OBJC_CLASS___SATimerDismiss);
    if ((objc_opt_isKindOfClass(v30, v29) & 1) == 0) {
      goto LABEL_21;
    }
    OSStatus v22 = objc_alloc(&OBJC_CLASS___NSString);
    if (a10) {
      goto LABEL_12;
    }
    uint64_t v23 = (uint64_t *)&SATimerGroupAcronym;
  }

  uint64_t v24 = *v23;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v30 encodedClassName]);
  int v25 = (void *)objc_claimAutoreleasedReturnValue([v14 encodedClassName]);
  __int16 v26 = -[NSString initWithFormat:](v22, "initWithFormat:", @"%@%@.%@", v24, v18, v25);

LABEL_14:
  if (v13 && v26)
  {
    [v13 addCoreAnalyticsDeviceTargetedWithContextIdentifier:v12 commandResultDescription:v26];
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[AFCoreAnalyticsLoggingService sharedLoggingService]( &OBJC_CLASS___AFCoreAnalyticsLoggingService,  "sharedLoggingService"));
    [v28 logToCoreAnalyticsCrossDeviceRequestEvent:v13];
  }
  }
}
}

        return;
      }

      AudioFileTypeID v19 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_21;
      }
      uint64_t v24 = 136315394;
      int v25 = "-[ADHomeInfoManager _resolveSiriDataSharingStatusMismatch:]";
      __int16 v26 = 2112;
      uint64_t v27 = @"root.general.analytics.shareSiriAnalytics";
      UInt32 v20 = "%s %@ value is null, no recovery needed";
    }

    else
    {
      AudioFileTypeID v19 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_21;
      }
      uint64_t v24 = 136315394;
      int v25 = "-[ADHomeInfoManager _resolveSiriDataSharingStatusMismatch:]";
      __int16 v26 = 2112;
      uint64_t v27 = @"root.general.analytics.shareSiriAnalytics";
      UInt32 v20 = "%s %@ setting does not exist on this HomePod, no recovery needed";
    }

    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v24, 0x16u);
    goto LABEL_21;
  }

    goto LABEL_22;
  }

  uint64_t v24 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    int v30 = "-[ADCompanionRoutingPhoneService _handleMessage:messageType:fromDeviceWithIdentifier:completion:]";
    BOOL v31 = 2112;
    uint64_t v32 = v11;
    _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Received message with unknown message type: %@",  buf,  0x16u);
    if (!v13) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }

  if (v13)
  {
LABEL_12:
    int v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1004LL));
    v13[2](v13, 0LL, v15);
    goto LABEL_21;
  }

    objc_msgSend(*(id *)(a1 + 40), "_updateVoiceProfileInfo", *(_OWORD *)v16);
    [*(id *)(a1 + 40) _updateSAMultiUserInfo];
    uint64_t v12 = *(void *)(a1 + 64);
    if (v12) {
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v9);
    }
    goto LABEL_23;
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 32LL), v2);
  if (AFIsATV(v3, v4)
    && !*(void *)(a1 + 48)
    && [*(id *)(a1 + 40) _updateNonHomeUserSettings:*(void *)(a1 + 56)])
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    *(_DWORD *)__int16 v16 = 136315138;
    *(void *)&void v16[4] = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke_2";
    goto LABEL_16;
  }

  if (([*(id *)(a1 + 40) _updateHomeKitSettings:*(void *)(a1 + 48)] & 1) == 0)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6008LL,  &__NSDictionary0__struct));
    goto LABEL_21;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKey:*(void *)(a1 + 48)]);
  OSStatus v7 = v6;
  if (!v6)
  {
LABEL_11:

LABEL_19:
    uint64_t v9 = 0LL;
    goto LABEL_21;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"allowVoiceID"]);
  if ([v8 integerValue])
  {

    goto LABEL_11;
  }

  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int16 v16 = 136315138;
    *(void *)&void v16[4] = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s VoiceID disabled for existing user and we did not get a homeinfo change notification",  v16,  0xCu);
  }

  [*(id *)(a1 + 40) removeUserWithHomeUUID:*(void *)(a1 + 48) completion:&stru_1004F91E0];
  UInt32 v14 = *(void *)(a1 + 64);
  if (v14)
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6010LL,  &__NSDictionary0__struct));
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
  }

  uint64_t v9 = 0LL;
LABEL_23:
}
}

void sub_10006A4CC(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16LL) = *(void *)(a1 + 56);
  __int128 v3 = *(void **)(a1 + 40);
  if (v3)
  {
    if (fcntl((int)[v3 fileDescriptor], 50, v21) == -1)
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextSpeech;
      BOOL v7 = os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR);
      if (v7)
      {
        *(_DWORD *)__int128 buf = 136315138;
        UInt32 v20 = "-[ADAudioFileWriter _initWithType:pathGenerator:xorFileHandle:priority:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Error getting file path from provided file handle; will create our own path and handle",
          buf,
          0xCu);
      }
    }

    else
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithCString:encoding:]( &OBJC_CLASS___NSString,  "stringWithCString:encoding:",  v21,  +[NSString defaultCStringEncoding](&OBJC_CLASS___NSString, "defaultCStringEncoding")));
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = v4;

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 88LL), *(id *)(a1 + 40));
    }
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(v8 + 16))(*(void *)(a1 + 48));
      uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v9);
      id v10 = [v1 copy];
    }

    else
    {
      id v10 = 0LL;
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), v10);
    if (v8)
    {
    }
  }

  if ((AFIsInternalInstall(v7) & 1) == 0)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    if ([v13 shouldLogForQA])
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 32LL);

      if (v14)
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32LL);
        goto LABEL_17;
      }
    }

    else
    {
    }

LABEL_19:
    int v15 = 0LL;
    goto LABEL_20;
  }

  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32LL);
  if (!v12) {
    goto LABEL_19;
  }
LABEL_17:
  uint64_t v17 = @"path";
  uint64_t v18 = v12;
  int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
LABEL_20:
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v16 logEventWithType:238 context:v15];
}
}
}

  BOOL v7 = 0LL;
  if ((*(_WORD *)&self->_has & 0x200) != 0)
  {
LABEL_5:
    uint64_t v8 = 2654435761LL * self->_rttBest;
    if ((has & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
}
}

  uint64_t v24 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADLocationManager locationManager:didFailWithError:]";
    uint64_t v32 = 2114;
    __int16 v33 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s LocationService not handling error %{public}@",  buf,  0x16u);
  }

  return v15;
}
}
}
}
}

    AudioFileTypeID v19 = v18;
  }

  else
  {
LABEL_17:
    AudioFileTypeID v19 = 0LL;
  }

  return v19;
}
}
}

  UInt32 v20 = *(void *)(*(void *)(a1 + 40) + 8LL);
  OSStatus v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v6;
}

    goto LABEL_20;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
  uint64_t v11 = v10 == 0LL;

  if (v11)
  {
    AudioFileTypeID v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
      UInt32 v20 = "%s announcement identifier is nil";
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 finishedDate]);
  if (v13)
  {
    [v12 timeIntervalSinceDate:v13];
    int v15 = v14;
    __int16 v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s timeIntervalSinceAnnouncementFinishedDate = %f",  buf,  0x16u);
    }

    if (v15 < expirationDuration)
    {
      uint64_t v17 = expirationDuration - v15;
      uint64_t v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s timeIntervalUntilExpiration = %f",  buf,  0x16u);
      }

LABEL_36:
      BOOL v31 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        *(void *)&uint8_t buf[4] = "-[ADHomeAnnouncementContextAdaptor _processAndEvaluateSnapshot:]";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 2048;
        __int128 v45 = *(uint64_t (**)(uint64_t, uint64_t))&v17;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "%s lastPlayedAnnouncement %@ is valid with %f seconds until expiration.",  buf,  0x20u);
      }

      -[ADHomeAnnouncementContextAdaptor _setSnapshot:](self, "_setSnapshot:", v4);
      *(void *)__int128 buf = 0LL;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x3032000000LL;
      __int128 v45 = sub_1002A3BE0;
      __int128 v46 = sub_1002A3BF0;
      __int128 v47 = 0LL;
      objc_initWeak(&location, self);
      uint64_t v32 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
      queue = self->_queue;
      int v36 = _NSConcreteStackBlock;
      BOOL v37 = 3221225472LL;
      int v38 = sub_1002A3BF8;
      __int16 v39 = &unk_1004FA058;
      objc_copyWeak(&v42, &location);
      uint64_t v40 = v4;
      __int16 v41 = buf;
      AudioStreamBasicDescription v34 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v32,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  queue,  &v36,  v17 + 0.005);
      uint64_t v35 = *(void **)(*(void *)&buf[8] + 40LL);
      *(void *)(*(void *)&buf[8] + 40LL) = v34;

      objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "start", v36, v37, v38, v39);
      objc_destroyWeak(&v42);
      objc_destroyWeak(&location);
      _Block_object_dispose(buf, 8);

      goto LABEL_39;
    }
  }

  else
  {
    uint64_t v23 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "%s announcement finishedDate is nil", buf, 0xCu);
    }
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 startedDate]);
  if (v24)
  {
    [v12 timeIntervalSinceDate:v24];
    __int16 v26 = v25;
    uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "%s timeIntervalSinceAnnouncementStartedDate = %f",  buf,  0x16u);
    }

    if (v26 < expirationDuration)
    {
      uint64_t v17 = expirationDuration - v26;
      int v30 = (os_log_s *)AFSiriLogContextDaemon;
      __int16 v28 = 1;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s timeIntervalUntilExpiration = %f",  buf,  0x16u);
      }
    }

    else
    {
      __int16 v28 = 0;
      uint64_t v17 = 0.0;
    }
  }

  else
  {
    OSStatus v29 = (os_log_s *)AFSiriLogContextDaemon;
    uint64_t v17 = 0.0;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "ADHomeAnnouncementGetIsValid";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s announcement startedDate is nil", buf, 0xCu);
    }

    __int16 v28 = 0;
  }

  if (v28) {
    goto LABEL_36;
  }
LABEL_20:
  OSStatus v21 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADHomeAnnouncementContextAdaptor _processAndEvaluateSnapshot:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s lastPlayedAnnouncement %@ is invalid.",  buf,  0x16u);
  }

  OSStatus v22 = (void *)objc_claimAutoreleasedReturnValue([v4 mutatedCopyWithMutator:&stru_1004F9850]);
  -[ADHomeAnnouncementContextAdaptor _setSnapshot:](self, "_setSnapshot:", v22);

LABEL_39:
}

    __int16 v28 = 0;
    goto LABEL_20;
  }

  __int16 v16 = mach_absolute_time();
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1002C73B4;
  v33[3] = &unk_1004FCF60;
  v33[4] = self;
  uint64_t v17 = v10;
  AudioStreamBasicDescription v34 = v17;
  BOOL v37 = v16;
  uint64_t v18 = v12;
  uint64_t v35 = v18;
  int v36 = v11;
  AudioFileTypeID v19 = objc_retainBlock(v33);
  [v18 timeIntervalSinceNow];
  OSStatus v21 = v20;
  if (v20 <= 0.0)
  {
    ((void (*)(void *))v19[2])(v19);
  }

  else
  {
    OSStatus v22 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = "-[ADAudioSessionCoordinator _relinquishRemoteAssertionForSenderID:reason:effectiveDate:error:]";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2048;
      __int16 v39 = *(uint64_t (**)(uint64_t, uint64_t))&v21;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%s Remote assertions from %@ will be relinquished in %f seconds.",  buf,  0x20u);
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    __int16 v39 = sub_1002C74B8;
    *(void *)uint64_t v40 = sub_1002C74C8;
    *(void *)&v40[8] = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_queue);
    uint64_t v23 = *(dispatch_source_s **)(*(void *)&buf[8] + 40LL);
    uint64_t v24 = AFDispatchTimeGetFromDateAndOffset(v18, 0.0);
    dispatch_source_set_timer(v23, v24, 0xFFFFFFFFFFFFFFFFLL, 0LL);
    int v25 = *(dispatch_source_s **)(*(void *)&buf[8] + 40LL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_1002C74D0;
    handler[3] = &unk_1004FC1D8;
    BOOL v31 = v19;
    uint64_t v32 = buf;
    dispatch_source_set_event_handler(v25, handler);
    dispatch_resume(*(dispatch_object_t *)(*(void *)&buf[8] + 40LL));

    _Block_object_dispose(buf, 8);
  }

  __int16 v28 = 1;
LABEL_20:

  return v28;
}

  BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v6 alarmSnapshot]);
  uint64_t v32 = v31;
  if (v31)
  {
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v31 alarmsByID]);
    AudioStreamBasicDescription v34 = (void *)objc_claimAutoreleasedReturnValue([v32 notifiedFiringAlarmIDs]);
    int8x16_t v66 = 0LL;
    int8x16_t v67 = &v66;
    int8x16_t v68 = 0x3032000000LL;
    uint8x16_t v69 = sub_1002FE38C;
    unsigned int v70 = sub_1002FE39C;
    int v71 = 0LL;
    v63[0] = _NSConcreteStackBlock;
    v63[1] = 3221225472LL;
    v63[2] = sub_1002FE3A4;
    v63[3] = &unk_1004FB700;
    uint64_t v35 = v33;
    uint16x8_t v64 = v35;
    int8x16_t v65 = &v66;
    [v34 enumerateObjectsUsingBlock:v63];
    if (v67[5])
    {
      int v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v36 timeIntervalSinceDate:v67[5]];
      int v38 = v37;

      __int16 v39 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALAlarmContext);
      -[ADDeviceResolutionServiceListener _generalizeTimeIntervalsForPrivacy:]( self,  "_generalizeTimeIntervalsForPrivacy:",  v38);
      [v39 setTimeSinceAlarmFiredInSeconds:(unint64_t)v40];
      [v7 setAlarmContext:v39];
    }

    _Block_object_dispose(&v66, 8);
  }

  __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v6 timerSnapshot]);
  int v42 = v41;
  if (v41)
  {
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v41 timersByID]);
    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v42 notifiedFiringTimerIDs]);
    int8x16_t v66 = 0LL;
    int8x16_t v67 = &v66;
    int8x16_t v68 = 0x3032000000LL;
    uint8x16_t v69 = sub_1002FE38C;
    unsigned int v70 = sub_1002FE39C;
    int v71 = 0LL;
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472LL;
    v60[2] = sub_1002FE458;
    v60[3] = &unk_1004FB700;
    __int128 v45 = v43;
    int8x16_t v61 = v45;
    uint8x16_t v62 = &v66;
    [v44 enumerateObjectsUsingBlock:v60];
    if (v67[5])
    {
      __int128 v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v46 timeIntervalSinceDate:v67[5]];
      __n128 v48 = v47;

      uint64_t v49 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALTimerContext);
      -[ADDeviceResolutionServiceListener _generalizeTimeIntervalsForPrivacy:]( self,  "_generalizeTimeIntervalsForPrivacy:",  v48);
      [v49 setTimeSinceTimerFiredInSeconds:(unint64_t)v50];
      [v7 setTimerContext:v49];
    }

    _Block_object_dispose(&v66, 8);
  }

  if ([v6 heardVoiceTrigger] == (id)2)
  {
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v6 heardVoiceTriggerMetadata]);
    int v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    int v53 = (void *)objc_claimAutoreleasedReturnValue([v51 deliveryDate]);
    [v52 timeIntervalSinceDate:v53];
    int v55 = v54;

    int v56 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALVoiceTriggerContext);
    -[ADDeviceResolutionServiceListener _generalizeTimeIntervalsForPrivacy:]( self,  "_generalizeTimeIntervalsForPrivacy:",  v55);
    [v56 setTimeSinceVoiceTriggerHeardInSeconds:(unint64_t)v57];
    [v7 setVoiceTriggerContext:v56];
  }

  uint16x8_t v58 = (void *)objc_claimAutoreleasedReturnValue([v6 systemStateSnapshot]);
  if (v58) {
    objc_msgSend( v7,  "setPowerState:",  -[ADDeviceResolutionServiceListener _halDevicePowerStateFromSystemStateSnapshot:]( self,  "_halDevicePowerStateFromSystemStateSnapshot:",  v58));
  }

  return v7;
}

          -[ADExternalNotificationRequestHandler _changeCurrentStateToState:](self, "_changeCurrentStateToState:", 1LL);
          break;
        default:
          break;
      }
    }
  }

void sub_10006AB08(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
  id v4 = a2;
  [v4 setIsEnabled:v3];
  [v4 setPrimaryEarbudSide:*(void *)(a1 + 32)];
  [v4 setPrimaryInEarStatus:*(void *)(a1 + 40)];
  [v4 setSecondaryInEarStatus:*(void *)(a1 + 48)];
}

void sub_10006AB68(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
  id v4 = a2;
  [v4 setIsEnabled:v3];
  [v4 setPrimaryEarbudSide:*(void *)(a1 + 32)];
  [v4 setPrimaryInEarStatus:*(void *)(a1 + 40)];
  [v4 setSecondaryInEarStatus:*(void *)(a1 + 48)];
}

id sub_10006AEE8(uint64_t a1, void *a2)
{
  return [a2 setDataType:*(void *)(a1 + 32)];
}

LABEL_24:
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txPackets));
  [v4 setObject:v13 forKey:@"tx_packets"];

  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_9:
    if ((has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  PBDataWriterWriteUint64Field(v7, self->_txPackets, 20LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_9:
    if ((has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  *((void *)v4 + 7) = self->_txPackets;
  *((_WORD *)v4 + 56) |= 0x40u;
  has = (__int16)self->_has;
  if ((has & 0x20) == 0)
  {
LABEL_9:
    if ((has & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  v5[8] = self->_txRetransmitBytes;
  *((_WORD *)v5 + 56) |= 0x80u;
  has = (__int16)self->_has;
  if ((has & 0x100) == 0)
  {
LABEL_9:
    if ((has & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }

  uint64_t v12 = 0LL;
  if ((has & 8) != 0)
  {
LABEL_10:
    uint64_t v13 = 2654435761u * self->_rxPackets;
    if ((has & 1) != 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }

  self->_txPackets = *((void *)v4 + 7);
  *(_WORD *)&self->_has |= 0x40u;
  uint64_t v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
}

  return v9;
}

  if (!v11) {
    goto LABEL_18;
  }
LABEL_25:
  OSStatus v22 = 0LL;
  if (v7) {
LABEL_26:
  }
    v7[2](v7, v22, 0LL, v11);
LABEL_27:
}

  return v12;
}
}
}
              }

              __int16 v16 = [v36 countByEnumeratingWithState:&v45 objects:v54 count:16];
            }

            while (v16);
          }

          uint64_t v8 = v32;
          i = v35;
        }

        AudioStreamBasicDescription v34 = [obj countByEnumeratingWithState:&v49 objects:v55 count:16];
      }

      while (v34);
    }

    __int16 v28 = [v38 copy];
    id v10 = v30;
    (*((void (**)(id, void, id))v30 + 2))(v30, 0LL, v28);
  }
}

          uint64_t v5 = (ADPeerInfo *)objc_claimAutoreleasedReturnValue([v21 getAceDiscoveryType]);

          OSStatus v29 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = v36;
            int v52 = "-[ADCompanionService discoveryTypeForPeer:]";
            int v53 = 2112;
            int v54 = v5;
            int v55 = 2112;
            int v56 = v45;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%s Found discovery type %@ for device with peerInfo: %@",  buf,  0x20u);
          }

      p_delegate = v47;
      __int16 v16 = v48;
      goto LABEL_25;
    }

    __int128 v47 = &self->_delegate;
    __n128 v48 = v16;
    UInt32 v20 = v15;
    OSStatus v21 = (void *)objc_claimAutoreleasedReturnValue([v20 patternId]);
    if (!v21)
    {
      BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v20 responseMode]);

      if (v31)
      {
LABEL_14:
        uint64_t v51 = 0u;
        int v52 = 0u;
        uint64_t v49 = 0u;
        __n128 v50 = 0u;
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v20 views]);
        uint64_t v32 = [v24 countByEnumeratingWithState:&v49 objects:v58 count:16];
        if (v32)
        {
          __int16 v33 = v32;
          __int128 v44 = v15;
          __int128 v45 = v11;
          AudioStreamBasicDescription v34 = *(void *)v50;
          do
          {
            for (i = 0LL; i != v33; i = (char *)i + 1)
            {
              if (*(void *)v50 != v34) {
                objc_enumerationMutation(v24);
              }
              int v36 = *(void *)(*((void *)&v49 + 1) + 8LL * (void)i);
              if (+[ADUserNotificationAnnouncementSpeakingStatePublisher supportsPublishingArrivalForAceObject:]( &OBJC_CLASS___ADUserNotificationAnnouncementSpeakingStatePublisher,  "supportsPublishingArrivalForAceObject:",  v36))
              {
                BOOL v37 = (void *)objc_claimAutoreleasedReturnValue( +[ADUserNotificationAnnouncementSpeakingStatePublisher sharedPublisher]( &OBJC_CLASS___ADUserNotificationAnnouncementSpeakingStatePublisher,  "sharedPublisher"));
                [v37 publishObjectHasArrived:v36];
              }
            }

            __int16 v33 = [v24 countByEnumeratingWithState:&v49 objects:v58 count:16];
          }

          while (v33);
          uint64_t v11 = v45;
          int v15 = v44;
        }

        goto LABEL_24;
      }

      OSStatus v21 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v21 _responseModeProvider]);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 fetchCurrentMode]);
      [v20 setResponseMode:v40];

      __int16 v41 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v42 = v41;
        __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v21 _responseModeProvider]);
        __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v46 fetchCurrentMode]);
        *(_DWORD *)__int128 buf = 136315394;
        uint16x8_t v60 = "-[ADUIService handleCommand:forDomain:executionContext:reply:]";
        int8x16_t v61 = 2112;
        uint8x16_t v62 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "%s #modes Bridging addViews with Response Mode %@",  buf,  0x16u);
      }
    }

    goto LABEL_14;
  }

  objc_msgSend(v14, "_adui_handleWithCompletion:", v13);
LABEL_27:
}

  [*(id *)(*(void *)(a1 + 32) + 208) removeObject:*(void *)(a1 + 40)];
}
}
}
  }

  else
  {
    OSStatus v21 = 0;
  }

  return v21;
}
}

LABEL_28:
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_rxPackets));
  [v4 setObject:v17 forKey:@"rx_packets"];

  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_13:
    if ((has & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  PBDataWriterWriteUint64Field(v7, self->_rxPackets, 30LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_13:
    if ((has & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  *((void *)v4 + 4) = self->_rxPackets;
  *((_WORD *)v4 + 56) |= 8u;
  has = (__int16)self->_has;
  if ((has & 1) == 0)
  {
LABEL_13:
    if ((has & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  _DWORD v5[2] = self->_rxDuplicateBytes;
  *((_WORD *)v5 + 56) |= 2u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_13:
    if ((has & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }

  __int16 v16 = 0LL;
  if ((has & 0x10) != 0)
  {
LABEL_14:
    uint64_t v17 = 2654435761u * self->_sndBandwidth;
    if ((*(_WORD *)&self->_has & 0x2000) != 0) {
      goto LABEL_15;
    }
LABEL_30:
    uint64_t v18 = 0LL;
    if ((*(_WORD *)&self->_has & 0x4000) != 0) {
      goto LABEL_16;
    }
LABEL_31:
    AudioFileTypeID v19 = 0LL;
    return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19;
  }

  self->_rxPackets = *((void *)v4 + 4);
  *(_WORD *)&self->_has |= 8u;
  uint64_t v5 = *((_WORD *)v4 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
}

      uint64_t v35 = (void *)v42;
LABEL_29:
      OSStatus v22 = v35;
      uint64_t v23 = 0LL;
      uint64_t v24 = 0;
LABEL_30:

LABEL_31:
      __n128 v48 = v23;
      uint64_t v49 = v22;
      __n128 v50 = (os_log_s *)AFSiriLogContextDaemon;
      if (v24)
      {
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)inOSStatus PropertyData = 136315394;
          *(void *)&inPropertyData[4] = "-[ADCommandCenter _trimRecordedAudioWithIdentifier:offset:duration:outputFileT"
                                          "ype:completion:]_block_invoke";
          *(_WORD *)&inPropertyData[12] = 2112;
          *(void *)&inPropertyData[14] = v48;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "%s trimmedAudioFileURL = %@",  inPropertyData,  0x16u);
        }

        uint64_t v51 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      }

      else
      {
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)inOSStatus PropertyData = 136315394;
          *(void *)&inPropertyData[4] = "-[ADCommandCenter _trimRecordedAudioWithIdentifier:offset:duration:outputFileT"
                                          "ype:completion:]_block_invoke";
          *(_WORD *)&inPropertyData[12] = 2112;
          *(void *)&inPropertyData[14] = v49;
          _os_log_error_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "%s error = %@",  inPropertyData,  0x16u);
        }

        uint64_t v51 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
      }

      v51();

      goto LABEL_39;
    }

    outOSStatus PropertyData = 0LL;
    ioOSStatus PropertyDataSize = 8;
    if (!ExtAudioFileGetProperty(outExtAudioFile, 0x2366726Du, &ioPropertyDataSize, &outPropertyData))
    {
      int v52 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 2048;
        *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = outPropertyData;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_INFO,  "%s totalFrameLength = %lld",  (uint8_t *)&buf,  0x16u);
      }
    }

    if (v9 == 3) {
      int v53 = @".caf";
    }
    else {
      int v53 = @".wav";
    }
    int v54 = objc_alloc(&OBJC_CLASS___NSString);
    int v55 = objc_alloc_init(&OBJC_CLASS___NSUUID);
    int v56 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v55, "UUIDString"));
    uint8x16_t v57 = -[NSString initWithFormat:](v54, "initWithFormat:", @"%@%@", v56, v53);

    uint16x8_t v58 = objc_alloc(&OBJC_CLASS___NSURL);
    int8x16_t v59 = (void *)objc_claimAutoreleasedReturnValue([v26 stringByAppendingPathComponent:v57]);
    uint16x8_t v60 = -[NSURL initFileURLWithPath:](v58, "initFileURLWithPath:", v59);

    inExtAudioFile = 0LL;
    int v114 = v57;
    int v115 = v60;
    if (v9 == 2)
    {
      p_inStreamDesc = (AudioStreamBasicDescription *)inPropertyData;
      uint8x16_t v62 = (const __CFURL *)v60;
      uint16x8_t v63 = 1463899717;
    }

    else
    {
      if (v9 != 3)
      {
        int v75 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Output file type %ld is not supported.",  v9);
        uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  226LL,  v75));

        unsigned int v70 = (os_log_s *)AFSiriLogContextUtility;
        if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
          goto LABEL_62;
        }
        goto LABEL_63;
      }

      p_inStreamDesc = &inStreamDesc;
      uint8x16_t v62 = (const __CFURL *)v60;
      uint16x8_t v63 = 1667327590;
    }

    uint16x8_t v64 = ExtAudioFileCreateWithURL(v62, v63, p_inStreamDesc, 0LL, 1u, &inExtAudioFile);
    if ((_DWORD)v64)
    {
      int8x16_t v65 = objc_alloc(&OBJC_CLASS___NSString);
      int8x16_t v66 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL path](v60, "path"));
      int8x16_t v67 = -[NSString initWithFormat:]( v65,  "initWithFormat:",  @"ExtAudioFileCreateWithURL() failed to create output audio file at %@. (status = %d)",  v66,  v64);
      int8x16_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  (int)v64,  0LL));
      uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v67,  v68));

      unsigned int v70 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      goto LABEL_63;
    }

    int v71 = ExtAudioFileSetProperty(inExtAudioFile, 0x63666D74u, 0x28u, inPropertyData);
    if ((_DWORD)v71)
    {
      int8x16_t v72 = v71;
      int v73 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"ExtAudioFileSetProperty() failed to set client data format of output audio file. (status = %d)",  v71);
      uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v72,  0LL));
      uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v73,  v74));

      unsigned int v70 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_62;
      }
      goto LABEL_63;
    }

    uint64_t v76 = (uint64_t)(*(double *)inPropertyData * v8);
    int8x16_t v77 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      buf.mNumberBuffers = 136315394;
      *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
      LOWORD(buf.mBuffers[0].mDataByteSize) = 2048;
      *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v76;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "%s frameOffset = %lld",  (uint8_t *)&buf,  0x16u);
    }

    int32x4_t v78 = ExtAudioFileSeek(outExtAudioFile, v76);
    if ((_DWORD)v78)
    {
      int32x4_t v80 = v78;
      uint64_t v81 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"ExtAudioFileSeek() failed to seek to frame offset %lld in input audio file. (status = %d)",  v76,  v78);
      int v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v80,  0LL));
      uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v81,  v82));

      unsigned int v70 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_62:
        buf.mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 2112;
        *(void *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v69;
        _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&buf, 0x16u);
      }
}

  return v9;
}

    int v25 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = 136315394;
      __int16 v28 = "-[ADSessionRemoteServer _updateConnectionPolicyFailureCount:]";
      OSStatus v29 = 1024;
      int v30 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s Setting failure count of %d",  (uint8_t *)&v27,  0x12u);
    }

    [v7 setConnectionPolicyFailureCount:v8];
    goto LABEL_31;
  }
  }

  else
  {
    __int16 v26 = 0LL;
  }

  if (v13)
  {
    int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v13 timeIntervalSinceDate:v30];
    uint64_t v32 = v31;
    if (v31 <= 0.0 || v31 >= 0.02)
    {
      __int16 v33 = v13;
    }

    else
    {
      __int16 v33 = v30;

      AudioStreamBasicDescription v34 = -0.0;
      if (a6 > 0.0) {
        AudioStreamBasicDescription v34 = v32;
      }
      a6 = v34 + a6;
      uint64_t v35 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v36 = v35;
        [v33 timeIntervalSinceNow];
        *(_DWORD *)__int128 buf = 136315906;
        *(void *)&uint8_t buf[4] = "-[ADAudioSessionCoordinator _acquireRemoteAssertionForSenderID:reason:effectiveDate:expirat"
                             "ionDuration:error:]";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v33;
        *(_WORD *)&buf[22] = 2048;
        int v82 = v37;
        *(_WORD *)uint8x16_t v83 = 2048;
        *(double *)&v83[2] = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "%s effectiveDate = %@ (%f), expirationDuration = %f (Time Drift Mitigation)",  buf,  0x2Au);
      }
    }
  }

  else
  {
    __int16 v33 = 0LL;
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  int v82 = sub_1002C74B8;
  *(void *)uint8x16_t v83 = sub_1002C74C8;
  *(void *)&v83[8] = 0LL;
  remoteAssertionCoordinator = self->_remoteAssertionCoordinator;
  v65[0] = _NSConcreteStackBlock;
  v65[1] = 3221225472LL;
  v65[2] = sub_1002C7774;
  v65[3] = &unk_1004FA440;
  unsigned int v70 = v53;
  __int16 v39 = v54;
  int8x16_t v66 = v39;
  uint64_t v40 = v33;
  int8x16_t v67 = v40;
  int v71 = a6;
  __int16 v41 = v26;
  int8x16_t v68 = v41;
  int v42 = v12;
  uint8x16_t v69 = v42;
  __int16 v43 = +[AFAssertionContext newWithBuilder:](&OBJC_CLASS___AFAssertionContext, "newWithBuilder:", v65);
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3221225472LL;
  v64[2] = sub_1002C78A4;
  v64[3] = &unk_1004FA468;
  v64[4] = buf;
  __int128 v44 = objc_claimAutoreleasedReturnValue( -[AFAssertionCoordinator acquireRelinquishableAssertionWithContext:relinquishmentHandler:]( remoteAssertionCoordinator,  "acquireRelinquishableAssertionWithContext:relinquishmentHandler:",  v43,  v64));
  __int128 v45 = *(void **)(*(void *)&buf[8] + 40LL);
  *(void *)(*(void *)&buf[8] + 40LL) = v44;

  __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)&buf[8] + 40) uuid]);
  __int128 v47 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __n128 v48 = *(void *)(*(void *)&buf[8] + 40LL);
    *(_DWORD *)uint64_t v76 = 136315394;
    int8x16_t v77 = "-[ADAudioSessionCoordinator _acquireRemoteAssertionForSenderID:reason:effectiveDate:expirationDuration:error:]";
    int32x4_t v78 = 2112;
    int32x4_t v79 = v48;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "%s Acquired remote assertion %@.", v76, 0x16u);
  }

  _Block_object_dispose(buf, 8);

  uint64_t v49 = self->_remoteAssertionCoordinator;
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472LL;
  v61[2] = sub_1002C7978;
  v61[3] = &unk_1004FA490;
  uint8x16_t v62 = v42;
  OSStatus v29 = v46;
  uint16x8_t v63 = v29;
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472LL;
  v55[2] = sub_1002C7B0C;
  v55[3] = &unk_1004FA4B8;
  uint16x8_t v60 = v53;
  uint64_t v13 = v40;
  int v56 = v13;
  uint8x16_t v57 = v39;
  uint16x8_t v58 = v41;
  int8x16_t v59 = v62;
  __n128 v50 = v41;
  uint64_t v51 = +[AFAssertionContext newWithBuilder:](&OBJC_CLASS___AFAssertionContext, "newWithBuilder:", v55);
  -[AFAssertionCoordinator relinquishAsertionsPassingTest:context:]( v49,  "relinquishAsertionsPassingTest:context:",  v61,  v51);

LABEL_44:
  return v29;
}

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _sharedDataService](self, "_sharedDataService"));
  if ([v35 watchIsNearbyForAssistantId:v12])
  {

    goto LABEL_31;
  }

  int v36 = (void *)objc_claimAutoreleasedReturnValue(+[ADAccount activeAccount](&OBJC_CLASS___ADAccount, "activeAccount"));
  BOOL v37 = [v36 watchExistsForAssistantId:v12];

  if (v37) {
    goto LABEL_31;
  }
  if ((!v23 || -[ADCommandCenter _isFauxPeer:](self, "_isFauxPeer:", v23))
    && (__int16 v39 = -[ADCommandCenter _localDeviceIsHomePod](self, "_localDeviceIsHomePod"), v12)
    && v39)
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472LL;
    v59[2] = sub_1002DD01C;
    v59[3] = &unk_1004FAB48;
    uint16x8_t v60 = v12;
    int8x16_t v61 = self;
    uint8x16_t v62 = v11;
    int8x16_t v65 = v24;
    int8x16_t v66 = v48;
    uint16x8_t v63 = v13;
    uint16x8_t v64 = v14;
    [v40 getIDSIdentifierForAssistantId:v60 completion:v59];

    __int16 v41 = v60;
  }

  else
  {
    int v42 = !v24;
    if (!v12) {
      int v42 = 1;
    }
    if ((v42 & 1) != 0)
    {
      __int128 v44 = (os_log_s *)AFSiriLogContextDaemon;
      int v38 = v49;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v71 = "-[ADCommandCenter(RemoteExecute) _remoteExecute_remoteDeviceExecuteSerializedCommand:onDeviceForAssistantI"
              "d:allowFallbackOnAWDL:executionContext:completion:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "%s Unable to find remote device for execution",  buf,  0xCu);
        if (!v14) {
          goto LABEL_33;
        }
      }

      else if (!v14)
      {
        goto LABEL_33;
      }

      __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1000LL));
      (*((void (**)(id, void, void *))v14 + 2))(v14, 0LL, v45);

      goto LABEL_33;
    }

    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472LL;
    v50[2] = sub_1002DD1C8;
    v50[3] = &unk_1004FAB70;
    uint64_t v51 = v12;
    int v52 = self;
    int v53 = v11;
    int v54 = v23;
    uint8x16_t v57 = 1;
    uint16x8_t v58 = v48;
    int v55 = v13;
    int v56 = v14;
    [v43 getContextCollectorDeviceIdentifiersWithCompletion:v50];

    __int16 v41 = v51;
  }

LABEL_32:
  int v38 = v49;
LABEL_33:
}

  BOOL v37 = (os_log_s *)AFSiriLogContextProxy;
  if (os_log_type_enabled(AFSiriLogContextProxy, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v46 = "-[ADSiriConnectionRemote _establishNetworkConnectionToURL:connectionId:withPOP:countAgainstFallbacksAllowed:]";
    __int128 v47 = 2048;
    __n128 v48 = v26;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s opening %lu", buf, 0x16u);
  }

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_1002F10C0;
  v40[3] = &unk_1004FB2D8;
  __int16 v43 = v26;
  v40[4] = self;
  __int16 v41 = v23;
  int v42 = v28;
  __int128 v44 = size;
  [v41 openConnectionForURL:v32 withConnectionId:v12 initialPayload:v42 completion:v40];

LABEL_31:
}

LABEL_29:
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_rxBytes));
  [v4 setObject:v18 forKey:@"rx_bytes"];

  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_14:
    if ((has & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  PBDataWriterWriteUint64Field(v7, self->_rxBytes, 31LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_14:
    if ((has & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  *((void *)v4 + 1) = self->_rxBytes;
  *((_WORD *)v4 + 56) |= 1u;
  has = (__int16)self->_has;
  if ((has & 2) == 0)
  {
LABEL_14:
    if ((has & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  v5[3] = self->_rxOooBytes;
  *((_WORD *)v5 + 56) |= 4u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_14:
    if ((has & 0x2000) == 0) {
      goto LABEL_15;
    }
LABEL_31:
    *((_DWORD *)v5 + 26) = self->_synRetransmits;
    *((_WORD *)v5 + 56) |= 0x2000u;
    if ((*(_WORD *)&self->_has & 0x4000) == 0) {
      return v5;
    }
    goto LABEL_16;
  }

  uint64_t v17 = 0LL;
  if ((*(_WORD *)&self->_has & 0x2000) == 0) {
    goto LABEL_30;
  }
LABEL_15:
  uint64_t v18 = 2654435761LL * self->_synRetransmits;
  if ((*(_WORD *)&self->_has & 0x4000) == 0) {
    goto LABEL_31;
  }
LABEL_16:
  AudioFileTypeID v19 = 2654435761LL * self->_tfoSynDataAcked;
  return v5 ^ v3 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19;
}

  self->_rxBytes = *((void *)v4 + 1);
  *(_WORD *)&self->_has |= 1u;
  uint64_t v5 = *((_WORD *)v4 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
          }
        }

        uint64_t v14 = [v6 countByEnumeratingWithState:&v31 objects:v40 count:16];
      }

      while (v14);
      id v4 = 0LL;
      uint64_t v5 = v26;
    }
  }

  return v5;
}

        uint64_t v51 = (os_log_s *)AFSiriLogContextDaemon;
        int v52 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
        if (v52)
        {
          *(_DWORD *)__int128 buf = 136315394;
          int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:"
                 "nonCloudSyncedUser:completion:]";
          int v110 = 2112;
          unsigned int v111 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "%s Secondary user not added for (%@) due to conflicts",  buf,  0x16u);
        }

        if (!AFIsATV(v52, v53))
        {
          OSStatus v29 = kAFAssistantErrorDomain;
          int v30 = 6005LL;
          goto LABEL_47;
        }

        primaryUser = self->_primaryUser;
        self->_primaryUser = 0LL;

        int v55 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315394;
          int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:"
                 "nonCloudSyncedUser:completion:]";
          int v110 = 2112;
          unsigned int v111 = v107;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "%s Replacing primary user for (%@)",  buf,  0x16u);
        }

        uint64_t v49 = v16;
        int v56 = -[ADCommunalDeviceUser init:sharedUserId:loggableSharedUserId:iCloudAltDSID:attribute:]( objc_alloc(&OBJC_CLASS___ADCommunalDeviceUser),  "init:sharedUserId:loggableSharedUserId:iCloudAltDSID:attribute:",  v16,  v17,  v106,  v26,  1LL);
        [v56 setEnrollmentName:v107];
        if (a9) {
          [v56 setNonCloudSyncedUserAttribute:1];
        }
        -[ADMultiUserService _updateMappingsForSharedUser:](self, "_updateMappingsForSharedUser:", v56);
        -[ADMultiUserService _saveSharedUsers](self, "_saveSharedUsers");
        uint8x16_t v57 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315394;
          int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:"
                 "nonCloudSyncedUser:completion:]";
          int v110 = 2112;
          unsigned int v111 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "%s #multi-user Logging userAddedWithSharedUserID:(%@) for secondary User ",  buf,  0x16u);
        }

        -[ADMultiUserService _logRelevantAnalyticsOnUserAddedWithSharedUserID:isPrimary:]( self,  "_logRelevantAnalyticsOnUserAddedWithSharedUserID:isPrimary:",  v17,  0LL);
LABEL_90:

        __int16 v16 = v49;
LABEL_91:
        int v71 = notify_post(AFCachedFusePersonalizationTokenChanged);
        int v73 = 0LL;
        goto LABEL_92;
      }

      __int16 v16 = v49;
    }

    goto LABEL_29;
  }

  uint64_t v24 = self->_primaryUser;
  int v25 = v106;
  __int16 v26 = v18;
  if (!v24)
  {
    uint16x8_t v58 = -[ADCommunalDeviceUser init:sharedUserId:loggableSharedUserId:iCloudAltDSID:attribute:]( objc_alloc(&OBJC_CLASS___ADCommunalDeviceUser),  "init:sharedUserId:loggableSharedUserId:iCloudAltDSID:attribute:",  v16,  v17,  v106,  v18,  0LL);
    int8x16_t v59 = self->_primaryUser;
    self->_primaryUser = v58;

    objc_storeStrong((id *)&self->_deviceOwner, self->_primaryUser);
    -[ADMultiUserService _saveDeviceOwnerToKeychainCache](self, "_saveDeviceOwnerToKeychainCache");
    -[ADCommunalDeviceUser setEnrollmentName:](self->_primaryUser, "setEnrollmentName:", v19);
    uint16x8_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser homeUserUUID](self->_primaryUser, "homeUserUUID"));

    if (v60)
    {
      uint16x8_t v63 = objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser homeUserUUID](self->_primaryUser, "homeUserUUID"));
    }

    else
    {
      if (!AFIsATV(v61, v62)
        || (int v82 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_primaryUser, "sharedUserID")),
            v82,
            !v82))
      {
LABEL_56:
        if (a9)
        {
          -[ADCommunalDeviceUser setNonCloudSyncedUserAttribute:]( self->_primaryUser,  "setNonCloudSyncedUserAttribute:",  1LL);
        }

        else
        {
          self->_primaryUserIsFromLiveOnApp = 0;
          -[ADMultiUserService _savePrimaryAndDeviceOwner](self, "_savePrimaryAndDeviceOwner");
          uint8x16_t v83 = (os_log_s *)AFSiriLogContextDaemon;
          uint16x8_t v84 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
          if (v84)
          {
            *(_DWORD *)__int128 buf = 136315650;
            int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimar"
                   "y:nonCloudSyncedUser:completion:]";
            int v110 = 2112;
            unsigned int v111 = v17;
            int v112 = 2112;
            unsigned int v113 = v18;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEBUG,  "%s #multi-user Logging userAddedWithSharedUserID:(%@) iCloudAltDSID (%@) for primary User ",  buf,  0x20u);
          }

          if (AFIsATV(v84, v85)
            && +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled"))
          {
            if (v18) {
              -[NSMutableDictionary removeObjectForKey:](self->_sharedUsersByiCloudAltDSID, "removeObjectForKey:", v18);
            }
            if (v17) {
              -[NSMutableDictionary removeObjectForKey:](self->_sharedUsersBySharedUserID, "removeObjectForKey:", v17);
            }
            if (v16) {
              -[NSMutableDictionary removeObjectForKey:](self->_sharedUsersByHomeUserUUID, "removeObjectForKey:", v16);
            }
          }

          uint8x16_t v86 = self->_sharedUsersByiCloudAltDSID;
          if (v86)
          {
            int v87 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v86, "objectForKey:", v18));
            if (v87)
            {
              unsigned int v88 = v16;
              unsigned int v89 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315138;
                int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPr"
                       "imary:nonCloudSyncedUser:completion:]";
                _os_log_debug_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv primary user existed as shared user. Untracking as shared user.",  buf,  0xCu);
              }

              __int16 v16 = v88;
              if (v88) {
                -[NSMutableDictionary removeObjectForKey:](self->_sharedUsersByHomeUserUUID, "removeObjectForKey:", v88);
              }
              if (v17) {
                -[NSMutableDictionary removeObjectForKey:](self->_sharedUsersBySharedUserID, "removeObjectForKey:", v17);
              }
              if (v26) {
                -[NSMutableDictionary removeObjectForKey:]( self->_sharedUsersByiCloudAltDSID,  "removeObjectForKey:",  v26);
              }
            }
          }

          -[ADMultiUserService _logRelevantAnalyticsOnUserAddedWithSharedUserID:isPrimary:]( self,  "_logRelevantAnalyticsOnUserAddedWithSharedUserID:isPrimary:",  v17,  1LL);
        }

        goto LABEL_91;
      }

      uint16x8_t v63 = objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_primaryUser, "sharedUserID"));
    }

    uint16x8_t v64 = (void *)v63;
    -[ADMultiUserService _trackHomeUserUUIDForInFlightVoiceProfile:]( self,  "_trackHomeUserUUIDForInFlightVoiceProfile:",  v63);

    goto LABEL_56;
  }

  if (v19)
  {
    -[ADCommunalDeviceUser setEnrollmentName:](v24, "setEnrollmentName:", v19);
    uint64_t v24 = self->_primaryUser;
  }

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v24, "sharedUserID"));
  __int16 v28 = [v27 isEqualToString:v17];

  if (!v28)
  {
    int8x16_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser homeUserUUID](self->_primaryUser, "homeUserUUID"));
    int8x16_t v66 = [v65 isEqualToString:v16];

    if (v66)
    {
      int8x16_t v67 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:no"
               "nCloudSyncedUser:completion:]";
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_INFO,  "%s Resetting sharedUserID on existing primary user since home User ID matches",  buf,  0xCu);
      }

      voiceProfileManager = self->_voiceProfileManager;
      uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_primaryUser, "sharedUserID"));
      unsigned int v70 =  -[SSRVoiceProfileManager discardSiriEnrollmentForProfileId:forLanguageCode:]( voiceProfileManager,  "discardSiriEnrollmentForProfileId:forLanguageCode:",  v69,  0LL);

      -[ADCommunalDeviceUser setSharedUserID:](self->_primaryUser, "setSharedUserID:", v17);
    }

    goto LABEL_91;
  }

  OSStatus v29 = kAFAssistantErrorDomain;
  int v30 = 6000LL;
LABEL_47:
  int v71 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v29,  v30,  &__NSDictionary0__struct));
  int v73 = (void *)v71;
  if (!v71) {
    goto LABEL_91;
  }
LABEL_92:
  if (AFIsATV(v71, v72))
  {
    uint64_t v98 = +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled");
    if (v26)
    {
      if (v98)
      {
        int v99 = v16;
        unsigned int v100 = _AFPreferencesSiriRMVSetting(v26);
        unint64_t v101 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136316163;
          int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:"
                 "nonCloudSyncedUser:completion:]";
          int v110 = 2113;
          unsigned int v111 = v17;
          int v112 = 2113;
          unsigned int v113 = v26;
          int v114 = 2113;
          int v115 = v99;
          unsigned int v116 = 2048;
          int v117 = v100;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Tracking for ON user with sharedUserID %{private}@, iCloudAltDSID %{private}@, homeUserID %{private}@, Current state %ld.",  buf,  0x34u);
        }

        userWithRMVEnabledDuringBuddy = self->_userWithRMVEnabledDuringBuddy;
        if (userWithRMVEnabledDuringBuddy
          && -[NSString isEqualToString:](userWithRMVEnabledDuringBuddy, "isEqualToString:", v26))
        {
          -[ADMultiUserService syncATVRmVSettingIfAvailable](self, "syncATVRmVSettingIfAvailable");
        }

        else
        {
          int8x16x4_t v103 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315138;
            int v109 = "-[ADMultiUserService _addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimar"
                   "y:nonCloudSyncedUser:completion:]";
            _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_INFO,  "%s Posting notification as RMV setting changed",  buf,  0xCu);
          }

          DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
          CFNotificationCenterPostNotification( DarwinNotifyCenter,  kAFRecognizeMyVoiceSettingChangedDarwinNotification,  0LL,  0LL,  1u);
        }

        __int16 v16 = v99;
      }
    }
  }

  -[ADMultiUserService _updateSAMultiUserInfo](self, "_updateSAMultiUserInfo");
  if (v105) {
    v105[2](v105, v73);
  }
}

    uint64_t v17 = 0LL;
    goto LABEL_30;
  }

  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v35 = "-[ADMultiUserService getAssistantIdentifierForIDS:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s Matched primary user companion",  buf,  0xCu);
  }

  uint64_t v12 = self->_primaryUser;
LABEL_14:
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser companionAssistantID](v12, "companionAssistantID"));
LABEL_30:

  return v17;
}
}
          }

          uint64_t v24 = [v22 countByEnumeratingWithState:&v109 objects:v127 count:16];
        }

        while (v24);
      }

      uint64_t v6 = v91;
      __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v91 peerUserAgentString]);
      -[os_log_s setUserAgent:](log, "setUserAgent:", v41);

      int v42 = (void *)objc_claimAutoreleasedReturnValue([v91 peerLanguageCode]);
      -[os_log_s setLanguage:](log, "setLanguage:", v42);

      -[os_log_s setSiriEnabled:](log, "setSiriEnabled:", [v91 peerSiriEnabled]);
      __int16 v16 = v84;
      __int16 v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v84 personalDomainsIsEnabled]));
      -[os_log_s setPersonalDomainsEnabled:](log, "setPersonalDomainsEnabled:", v43);

      __int128 v44 = [v84 securePersonalDomainsRequireAuth];
      __int128 v45 = &SARemoteDevicePersonalDomainsAuthenticationModeSecureRequestsValue;
      if (!v44) {
        __int128 v45 = &SARemoteDevicePersonalDomainsAuthenticationModeNeverValue;
      }
      -[os_log_s setPersonalDomainsAuthenticationMode:](log, "setPersonalDomainsAuthenticationMode:", *v45, v84);
      v103[0] = _NSConcreteStackBlock;
      v103[1] = 3221225472LL;
      v103[2] = sub_1002B433C;
      v103[3] = &unk_1004FD2E8;
      __int128 v46 = log;
      int v104 = v46;
      __int128 v47 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v103);
      p_superclass = &OBJC_CLASS___ADAnnounceIncomingCallRequest.superclass;
      __n128 v48 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
      uint64_t v49 = -[ADPeerInfo initWithAFPeerInfo:](objc_alloc(&OBJC_CLASS___ADPeerInfo), "initWithAFPeerInfo:", v47);
      __n128 v50 = (void *)objc_claimAutoreleasedReturnValue([v48 discoveryTypeForPeer:v49]);

      if (v50) {
        -[os_log_s setDiscoveryMode:](v46, "setDiscoveryMode:", v50);
      }
      id v10 = v97;
      -[NSMutableArray addObject:](v97, "addObject:", v46);
      uint64_t v51 = (void *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        loga = v51;
        int32x4_t v94 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s assistantId](v46, "assistantId"));
        int v52 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s userAgent](v46, "userAgent"));
        int v53 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s language](v46, "language"));
        int v54 = -[os_log_s siriEnabled](v46, "siriEnabled");
        int v55 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s discoveryMode](v46, "discoveryMode"));
        *(_DWORD *)__int128 buf = 136316418;
        int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
        unsigned int v116 = 2112;
        int v117 = v94;
        int v118 = 2112;
        int v119 = v52;
        int v120 = 2112;
        int v121 = v53;
        unsigned int v122 = 1024;
        unsigned int v123 = v54;
        int v124 = 2112;
        int v125 = v55;
        _os_log_impl( (void *)&_mh_execute_header,  loga,  OS_LOG_TYPE_INFO,  "%s assistantd id: %@ user agent: %@ language: %@ siri enabled: %d discovery type: %@",  buf,  0x3Au);

        id v10 = v97;
        __int16 v16 = v85;
      }

      self = v88;
      BOOL v7 = v89;
      uint64_t v9 = v86;
      AudioFileTypeID v19 = v93;
    }

    else
    {
      id v10 = v97;
      if (([v16 personalDomainsIsEnabled] & 1) == 0)
      {
        int v73 = objc_alloc_init(&OBJC_CLASS___SARemoteDevice);
        [v73 setAssistantId:&stru_1004FECA0];
        [v73 setUserAgent:&stru_1004FECA0];
        [v73 setLanguage:&stru_1004FECA0];
        [v73 setPersonalDomainsEnabled:&__kCFBooleanFalse];
        uint64_t v74 = [v16 securePersonalDomainsRequireAuth];
        int v75 = &SARemoteDevicePersonalDomainsAuthenticationModeSecureRequestsValue;
        if (!v74) {
          int v75 = &SARemoteDevicePersonalDomainsAuthenticationModeNeverValue;
        }
        [v73 setPersonalDomainsAuthenticationMode:*v75];
        -[NSMutableArray addObject:](v97, "addObject:", v73);
        uint64_t v76 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "%s personal requests are disabled, but the companion's assistantId is unknown",  buf,  0xCu);
        }

        AudioFileTypeID v19 = v93;
      }

      int8x16_t v77 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
        unsigned int v116 = 2112;
        int v117 = v19;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "%s companion identifier: %@", buf, 0x16u);
      }

      if (v19)
      {
        int32x4_t v78 = (void *)objc_claimAutoreleasedReturnValue([v6 peerUserAgentString]);
        int32x4_t v79 = [v78 length];

        if (v79)
        {
          [v9 setRemoteDeviceHasNoAssistantId:1];
          int32x4_t v80 = (void *)AFSiriLogContextSession;
          AudioFileTypeID v19 = v93;
          if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
          {
            uint64_t v81 = v80;
            int v82 = [v6 peerSiriEnabled];
            *(_DWORD *)__int128 buf = 136315394;
            int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
            unsigned int v116 = 1024;
            LODWORD(v117) = v82;
            _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "%s companion has siri enabled: %d",  buf,  0x12u);
          }
        }

        else
        {
          [v9 setRemoteDeviceUnreachable:1];
          uint8x16_t v83 = (os_log_s *)AFSiriLogContextSession;
          AudioFileTypeID v19 = v93;
          if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315138;
            int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "%s companion is unreachable", buf, 0xCu);
          }
        }
      }
    }
  }

  int v56 = AFSupportsPairedDevice(v12, v13);
  if (!(_DWORD)v56) {
    goto LABEL_82;
  }
  int v56 = AFIsNano(v56);
  if ((v56 & 1) != 0) {
    goto LABEL_82;
  }
  if (self->_pairedWatchUniqueId)
  {
    uint16x8_t v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "saRemoteDevice:"));
    if (v58)
    {
      -[NSMutableArray addObject:](v10, "addObject:", v58);
    }
  }

  int v56 = (uint64_t)-[NSMutableArray count](v10, "count");
  if (v56)
  {
LABEL_82:
    if (AFSupportsMultiUser(v56, v57))
    {
      int8x16_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
      uint16x8_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 sharedRemoteDevices]);

      if (v60 && [v60 count])
      {
        int v87 = v9;
        int v90 = v7;
        uint16x8_t v92 = v6;
        unint64_t v101 = 0u;
        int8x16x4_t v102 = 0u;
        int v99 = 0u;
        unsigned int v100 = 0u;
        int8x16_t v61 = v60;
        uint8x16_t v62 = [v61 countByEnumeratingWithState:&v99 objects:v113 count:16];
        if (v62)
        {
          uint16x8_t v63 = v62;
          uint16x8_t v64 = *(void *)v100;
          do
          {
            for (k = 0LL; k != v63; k = (char *)k + 1)
            {
              if (*(void *)v100 != v64) {
                objc_enumerationMutation(v61);
              }
              int8x16_t v66 = *(void **)(*((void *)&v99 + 1) + 8LL * (void)k);
              int8x16_t v67 = (void *)AFSiriLogContextSession;
              if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
              {
                int8x16_t v68 = v67;
                uint8x16_t v69 = (void *)objc_claimAutoreleasedReturnValue([v66 assistantId]);
                *(_DWORD *)__int128 buf = 136315394;
                int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
                unsigned int v116 = 2112;
                int v117 = v69;
                _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "%s Adding shared device for (%@)",  buf,  0x16u);

                id v10 = v97;
              }

              -[NSMutableArray addObject:](v10, "addObject:", v66);
            }

            uint16x8_t v63 = [v61 countByEnumeratingWithState:&v99 objects:v113 count:16];
          }

          while (v63);
        }

        BOOL v7 = v90;
        uint64_t v6 = v92;
        uint64_t v9 = v87;
        p_superclass = &OBJC_CLASS___ADAnnounceIncomingCallRequest.superclass;
      }
    }

    unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue([p_superclass + 179 sharedInstance]);
    int v71 = [v70 isReady];

    [v9 setRemoteDeviceNotSetup:v71 ^ 1];
    int8x16_t v72 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      int v115 = "-[ADSessionRemoteServer _sendSetRemoteDevicesWithAccount:multiUserInfo:]";
      unsigned int v116 = 1024;
      LODWORD(v117) = v71;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "%s set up is complete: %d", buf, 0x12u);
    }

    [v9 setRemoteDevices:v10];
    -[ADSessionRemoteServer _sendServerCommand:](self, "_sendServerCommand:", v9);
  }
}

  if ((*(_DWORD *)&has & 0x20000) != 0)
  {
    __n128 v50 = 2654435761LL * self->_pingCount;
    if ((*(_DWORD *)&has & 0x2000000) != 0)
    {
LABEL_31:
      uint64_t v49 = 2654435761LL * self->_unacknowledgedPingCount;
      if ((*(_DWORD *)&has & 0x100000) != 0) {
        goto LABEL_32;
      }
      goto LABEL_49;
    }
  }

  else
  {
    __n128 v50 = 0LL;
    if ((*(_DWORD *)&has & 0x2000000) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v49 = 0LL;
  if ((*(_DWORD *)&has & 0x100000) != 0)
  {
LABEL_32:
    __n128 v48 = 2654435761LL * self->_rttCurrent;
    if ((*(_DWORD *)&has & 0x200000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_50;
  }

LABEL_30:
  AudioFileTypeID v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_rxDuplicateBytes));
  [v4 setObject:v19 forKey:@"rx_duplicate_bytes"];

  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_15:
    if ((has & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  PBDataWriterWriteUint64Field(v7, self->_rxDuplicateBytes, 32LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_15:
    if ((has & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  *((void *)v4 + 2) = self->_rxDuplicateBytes;
  *((_WORD *)v4 + 56) |= 2u;
  has = (__int16)self->_has;
  if ((has & 4) == 0)
  {
LABEL_15:
    if ((has & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }

  void v5[5] = self->_sndBandwidth;
  *((_WORD *)v5 + 56) |= 0x10u;
  has = (__int16)self->_has;
  if ((has & 0x2000) != 0) {
    goto LABEL_31;
  }
LABEL_15:
  if ((has & 0x4000) != 0)
  {
LABEL_16:
    *((_DWORD *)v5 + 27) = self->_tfoSynDataAcked;
    *((_WORD *)v5 + 56) |= 0x4000u;
  }

  return v5;
}

  self->_rxDuplicateBytes = *((void *)v4 + 2);
  *(_WORD *)&self->_has |= 2u;
  uint64_t v5 = *((_WORD *)v4 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
}

    goto LABEL_31;
  }
}

LABEL_31:
  UInt32 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_rxOooBytes));
  [v4 setObject:v20 forKey:@"rx_ooo_bytes"];

  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_16:
    if ((has & 0x2000) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    OSStatus v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_synRetransmits));
    [v4 setObject:v22 forKey:@"syn_retransmits"];

    if ((*(_WORD *)&self->_has & 0x4000) == 0) {
      return v4;
    }
    goto LABEL_18;
  }

  PBDataWriterWriteUint64Field(v7, self->_rxOooBytes, 33LL);
  id v4 = v7;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_16:
    if ((has & 0x2000) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    PBDataWriterWriteUint32Field(v7, self->_synRetransmits, 41LL);
    id v4 = v7;
    if ((*(_WORD *)&self->_has & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  *((void *)v4 + 3) = self->_rxOooBytes;
  *((_WORD *)v4 + 56) |= 4u;
  has = (__int16)self->_has;
  if ((has & 0x10) == 0)
  {
LABEL_16:
    if ((has & 0x2000) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    *((_DWORD *)v4 + 26) = self->_synRetransmits;
    *((_WORD *)v4 + 56) |= 0x2000u;
    if ((*(_WORD *)&self->_has & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  self->_rxOooBytes = *((void *)v4 + 3);
  *(_WORD *)&self->_has |= 4u;
  uint64_t v5 = *((_WORD *)v4 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
LABEL_33:
    self->_synRetransmits = *((_DWORD *)v4 + 26);
    *(_WORD *)&self->_has |= 0x2000u;
    if ((*((_WORD *)v4 + 56) & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
}
}

      -[ADSession _addPendingCommand:](self, "_addPendingCommand:", v6);
      goto LABEL_32;
    }

    if ((unint64_t)(state - 8) <= 2)
    {
      if (!-[ADSession _waitingForAssistantData](self, "_waitingForAssistantData"))
      {
        -[ADSession _sendLimboCommand:](self, "_sendLimboCommand:", v6);
        goto LABEL_32;
      }

      goto LABEL_31;
    }

    switch(state)
    {
      case 1LL:
      case 2LL:
      case 3LL:
      case 6LL:
        goto LABEL_31;
      case 4LL:
      case 5LL:
      case 7LL:
        -[ADSession _addPendingCommand:](self, "_addPendingCommand:", v6);
        -[ADSession _startSession](self, "_startSession");
        break;
      default:
        -[ADSession _addPendingCommand:](self, "_addPendingCommand:", v6);
        if (!a4) {
          -[ADSession _startConnection](self, "_startConnection");
        }
        break;
    }
  }

  __n128 v50 = v25;
  if ((AFIsHorseman(v23, v24) & 1) == 0)
  {
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 languageCode]);

    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet previousLanguageCode](v4, "previousLanguageCode"));
    if (v27 == v28 || [v27 isEqualToString:v28])
    {
      OSStatus v29 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v52 = "-[ADCommandCenter(SharedDataClient) _resetPeerAccountSettingsWithSharedData:]";
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%s Setting new language code from cloud data",  buf,  0xCu);
      }

      int v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet languageCode](v4, "languageCode"));
      BOOL v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet outputVoice](v4, "outputVoice"));
      -[ADCommandCenter _setLanguageCode:outputVoice:](self, "_setLanguageCode:outputVoice:", v30, v31);
    }

    else
    {
      uint64_t v49 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        int v52 = "-[ADCommandCenter(SharedDataClient) _resetPeerAccountSettingsWithSharedData:]";
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "%s Not setting language code due to previous mismatch",  buf,  0xCu);
      }
    }
  }

  uint64_t v32 = objc_alloc(&OBJC_CLASS___NSSet);
  __int16 v33 = _AFPreferencesNotificationPreviewRestrictedApps(v32);
  AudioStreamBasicDescription v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  uint64_t v35 = -[NSSet initWithArray:](v32, "initWithArray:", v34);

  int v36 = objc_alloc(&OBJC_CLASS___NSSet);
  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet notificationPreviewRestrictedApps](v4, "notificationPreviewRestrictedApps"));
  int v38 = -[NSSet initWithArray:](v36, "initWithArray:", v37);

  __int16 v39 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315650;
    int v52 = "-[ADCommandCenter(SharedDataClient) _resetPeerAccountSettingsWithSharedData:]";
    int v53 = 2112;
    int v54 = v35;
    int v55 = 2112;
    int v56 = v38;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "%s current restricted: %@ new restricted: %@",  buf,  0x20u);
  }

  if (!-[NSSet isEqualToSet:](v35, "isEqualToSet:", v38))
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet notificationPreviewRestrictedApps](v4, "notificationPreviewRestrictedApps"));
    _AFPreferencesSetNotificationPreviewRestrictedApps();
  }

  __int16 v41 = (NSSet *)objc_claimAutoreleasedReturnValue(-[NSSet temperatureUnit](v4, "temperatureUnit"));
  if (v41)
  {
    int v42 = self;
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "af_aceTemperatureUnit"));

    if ((-[NSSet isEqualToString:](v41, "isEqualToString:", v44) & 1) == 0)
    {
      __int128 v45 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        int v52 = "-[ADCommandCenter(SharedDataClient) _resetPeerAccountSettingsWithSharedData:]";
        int v53 = 2112;
        int v54 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "%s Updating temperature unit to: %@",  buf,  0x16u);
      }

      +[NSLocale af_setAceTemperatureUnit:](&OBJC_CLASS___NSLocale, "af_setAceTemperatureUnit:", v41);
    }

    self = v42;
  }

  if (v50)
  {
LABEL_49:
    __int128 v46 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v52 = "-[ADCommandCenter(SharedDataClient) _resetPeerAccountSettingsWithSharedData:]";
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "%s Resetting sessions due to account settings change",  buf,  0xCu);
    }

    __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v47 logEventWithType:5001 context:0];

    __n128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _sessionManager](self, "_sessionManager"));
    [v48 resetSessionsAtNextRequestBoundary];
  }
  }

  else
  {
    AudioStreamBasicDescription v34 = &__NSDictionary0__struct;
  }

  __int16 v39 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint8x16_t v57 = "-[ADCommandCenter(Metrics) _metrics_markLocalEagerRecognitionCandidate:]";
    uint16x8_t v58 = 2112;
    int8x16_t v59 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "%s Local eager candidate log context: %@",  buf,  0x16u);
  }

  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v40 logEventWithType:4403 context:v34];
}

  int v30 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"AssistantFirstUnlockRestrictedDomains"]);
  if (v30)
  {
    if (-[ADBundleService _isValidRestrictionsDomainInfo:](self, "_isValidRestrictionsDomainInfo:", v30))
    {
      BOOL v31 = v30;
      v118[0] = _NSConcreteStackBlock;
      v118[1] = 3221225472LL;
      v118[2] = sub_1002CFC80;
      v118[3] = &unk_1004FA718;
      int v119 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v32 = v119;
      [v31 enumerateKeysAndObjectsUsingBlock:v118];

      -[ADService setFirstUnlockRestrictedCommands:](self, "setFirstUnlockRestrictedCommands:", v32);
    }

    else
    {
      __int16 v33 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int32x4_t v95 = v33;
        int32x4_t v96 = (void *)objc_claimAutoreleasedReturnValue(-[ADService identifier](self, "identifier"));
        *(_DWORD *)__int128 buf = 136315650;
        int v131 = "-[ADBundleService _parseInfoDictionary:]";
        unsigned int v132 = 2114;
        unsigned int v133 = @"AssistantFirstUnlockRestrictedDomains";
        unsigned int v134 = 2114;
        unsigned int v135 = v96;
        _os_log_error_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "%s Malformed info plist value for key %{public}@ in bundle %{public}@",  buf,  0x20u);
      }
    }
  }

  AudioStreamBasicDescription v34 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"AssistantLockRestrictedDomains"]);
  if (v34)
  {
    if (-[ADBundleService _isValidRestrictionsDomainInfo:](self, "_isValidRestrictionsDomainInfo:", v34))
    {
      uint64_t v35 = v34;
      v116[0] = _NSConcreteStackBlock;
      v116[1] = 3221225472LL;
      v116[2] = sub_1002CFDC0;
      v116[3] = &unk_1004FA718;
      int v117 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      int v36 = v117;
      [v35 enumerateKeysAndObjectsUsingBlock:v116];

      BOOL v37 = -[NSArray initWithArray:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:", v36);
      lockRestrictedCommands = self->_lockRestrictedCommands;
      self->_lockRestrictedCommands = v37;
    }

    else
    {
      __int16 v39 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int32x4_t v97 = v39;
        uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(-[ADService identifier](self, "identifier"));
        *(_DWORD *)__int128 buf = 136315650;
        int v131 = "-[ADBundleService _parseInfoDictionary:]";
        unsigned int v132 = 2114;
        unsigned int v133 = @"AssistantLockRestrictedDomains";
        unsigned int v134 = 2114;
        unsigned int v135 = v98;
        _os_log_error_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "%s Malformed info plist value for key %{public}@ in bundle %{public}@",  buf,  0x20u);
      }
    }
  }

  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"AssistantControlCenterLockRestrictedDomains"]);
  if (v40)
  {
    if (-[ADBundleService _isValidRestrictionsDomainInfo:](self, "_isValidRestrictionsDomainInfo:", v40))
    {
      __int16 v41 = v40;
      v114[0] = _NSConcreteStackBlock;
      v114[1] = 3221225472LL;
      v114[2] = sub_1002CFF00;
      v114[3] = &unk_1004FA718;
      int v115 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      int v42 = v115;
      [v41 enumerateKeysAndObjectsUsingBlock:v114];

      -[ADService setControlCenterLockRestrictedCommands:](self, "setControlCenterLockRestrictedCommands:", v42);
    }

    else
    {
      __int16 v43 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v99 = v43;
        unsigned int v100 = (void *)objc_claimAutoreleasedReturnValue(-[ADService identifier](self, "identifier"));
        *(_DWORD *)__int128 buf = 136315650;
        int v131 = "-[ADBundleService _parseInfoDictionary:]";
        unsigned int v132 = 2114;
        unsigned int v133 = @"AssistantControlCenterLockRestrictedDomains";
        unsigned int v134 = 2114;
        unsigned int v135 = v100;
        _os_log_error_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_ERROR,  "%s Malformed info plist value for key %{public}@ in bundle %{public}@",  buf,  0x20u);
      }
    }
  }

  __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"AssistantManagedStorageDomains"]);
  __int128 v45 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v44, v45) & 1) != 0)
  {
    __int128 v46 = v6;
    int v112 = 0u;
    unsigned int v113 = 0u;
    int v110 = 0u;
    unsigned int v111 = 0u;
    __int128 v47 = v44;
    __n128 v48 = [v47 countByEnumeratingWithState:&v110 objects:v129 count:16];
    if (v48)
    {
      uint64_t v49 = v48;
      __n128 v50 = *(void *)v111;
      while (2)
      {
        for (j = 0LL; j != v49; j = (char *)j + 1)
        {
          if (*(void *)v111 != v50) {
            objc_enumerationMutation(v47);
          }
          int v52 = *(void *)(*((void *)&v110 + 1) + 8LL * (void)j);
          int v53 = objc_opt_class(&OBJC_CLASS___NSString);
          if ((objc_opt_isKindOfClass(v52, v53) & 1) == 0)
          {

            int v54 = 0LL;
            goto LABEL_59;
          }
        }

        uint64_t v49 = [v47 countByEnumeratingWithState:&v110 objects:v129 count:16];
        if (v49) {
          continue;
        }
        break;
      }
    }

    int v54 = v47;
LABEL_59:
    uint64_t v6 = v46;
    if (!v44) {
      goto LABEL_63;
    }
  }

  else
  {
    int v54 = 0LL;
    if (!v44) {
      goto LABEL_63;
    }
  }

  if (!v54)
  {
    int v55 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v56 = v55;
      uint8x16_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[ADService identifier](self, "identifier"));
      *(_DWORD *)__int128 buf = 136315650;
      int v131 = "-[ADBundleService _parseInfoDictionary:]";
      unsigned int v132 = 2114;
      unsigned int v133 = @"AssistantManagedStorageDomains";
      unsigned int v134 = 2114;
      unsigned int v135 = v57;
      _os_log_error_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "%s Malformed info plist value for key %{public}@ in bundle %{public}@",  buf,  0x20u);
    }

    goto LABEL_65;
  }

LABEL_20:
  *((_DWORD *)v5 + 25) = self->_rttVariance;
  *((_WORD *)v5 + 56) |= 0x1000u;
  has = (__int16)self->_has;
  if ((has & 0x200) == 0)
  {
LABEL_5:
    if ((has & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }

  uint64_t v8 = 0LL;
  if ((has & 0x40) != 0)
  {
LABEL_6:
    uint64_t v9 = 2654435761u * self->_txPackets;
    if ((has & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
}
}

  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = a1[6];
    uint64_t v18 = a1[4];
    *(_DWORD *)UInt32 v20 = 136315650;
    *(void *)&void v20[4] = "-[ADMobileBluetoothDeviceProxy _changeHeadphoneListeningMode:completion:]_block_invoke";
    *(_WORD *)&v20[12] = 2048;
    *(void *)&v20[14] = v17;
    *(_WORD *)&v20[22] = 2112;
    OSStatus v21 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Changed headphone listening mode to %ld for %@.",  v20,  0x20u);
  }

  __int16 v16 = 0LL;
LABEL_23:
  AudioFileTypeID v19 = a1[5];
  if (v19) {
    (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v16);
  }
}
}

  if (v11)
  {
    UInt32 v20 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenterCurrentRequest currentRequestId](v11, "currentRequestId"));
    -[ADCommandCenter _notifyUSTForRequestStarted:](self, "_notifyUSTForRequestStarted:", v20);

    OSStatus v21 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v23 = self->_requestGroup;
      uint64_t v24 = self->_currentRequest;
      int v25 = 136315650;
      __int16 v26 = "-[ADCommandCenter _setCurrentRequest:]";
      uint64_t v27 = 2112;
      __int16 v28 = v23;
      OSStatus v29 = 2112;
      int v30 = v24;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s Entering request group %@ because there is no previous request and the current request is %@...",  (uint8_t *)&v25,  0x20u);
    }

    dispatch_group_enter((dispatch_group_t)self->_requestGroup);
  }
}

    id v10 = 0;
    goto LABEL_21;
  }

  if ((*((_BYTE *)v4 + 52) & 1) != 0) {
    goto LABEL_20;
  }
LABEL_16:
  handoffNotification = self->_handoffNotification;
  if ((unint64_t)handoffNotification | *((void *)v4 + 2)
    && !-[NSString isEqual:](handoffNotification, "isEqual:"))
  {
    goto LABEL_20;
  }

  handoffOriginDeviceName = self->_handoffOriginDeviceName;
  else {
    id v10 = 1;
  }
LABEL_21:

  return v10;
}

  int v30 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v47 = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s Checking HomeKit Settings", buf, 0xCu);
  }

  BOOL v31 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472LL;
  v44[2] = sub_10028C5A8;
  v44[3] = &unk_1004F93D8;
  v44[4] = *(void *)(a1 + 48);
  __int128 v45 = v3;
  [v31 settingsForMultiUserWithRefresh:1 completion:v44];

  uint64_t v35 = 0LL;
LABEL_23:
  (*(void (**)(void, void *, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v35,  v32,  v33,  v34);
}
}

  BOOL v31 = 0;
LABEL_21:

LABEL_22:
  __int16 v33 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136316162;
    if (v18) {
      AudioStreamBasicDescription v34 = v18;
    }
    else {
      AudioStreamBasicDescription v34 = v7;
    }
    __n128 v50 = "-[ADDictationConnection _updateDictationOptionsForOnDeviceDictation:language:]";
    uint64_t v51 = 2112;
    int v52 = v7;
    int v53 = 2112;
    *(void *)int v54 = v34;
    *(_WORD *)&v54[8] = 1024;
    LODWORD(v55[0]) = v13;
    WORD2(v55[0]) = 1024;
    *(_DWORD *)((char *)v55 + 6) = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "%s Dictation: offline speech recognition not available. Language code: %@, asset language code: %@, searchRequest= %d, searchModel=%d",  buf,  0x2Cu);
  }

  if (!v9) {
    goto LABEL_45;
  }
  uint64_t v35 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315906;
    __n128 v50 = "-[ADDictationConnection _updateDictationOptionsForOnDeviceDictation:language:]";
    uint64_t v51 = 2114;
    int v52 = v7;
    int v53 = 1024;
    *(_DWORD *)int v54 = v48;
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = v31;
    _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%s Dictation for %{public}@ is supported=%d, installed=%d on device with forced offline recognition",  buf,  0x22u);
  }

  if (v48) {
    -[ADDictationConnection requestOfflineDictationSupportForLanguage:completion:]( v46,  "requestOfflineDictationSupportForLanguage:completion:",  v7,  &stru_1004FBB40);
  }
  int v36 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 602LL));
LABEL_46:

  return v36;
}

LABEL_80:
  return v8;
}

uint64_t sub_10006CC70(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0LL;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0LL;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0LL;
        }
LABEL_13:
        if (!v10 && (v6 & 7) != 4)
        {
          switch((v6 >> 3))
          {
            case 0xAu:
              char v12 = 0;
              unsigned int v13 = 0;
              uint64_t v14 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x400u;
              while (1)
              {
                unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                  break;
                }
                char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
                *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
                v14 |= (unint64_t)(v16 & 0x7F) << v12;
                if ((v16 & 0x80) == 0) {
                  goto LABEL_128;
                }
                v12 += 7;
                BOOL v9 = v13++ >= 9;
                if (v9)
                {
                  LODWORD(v14) = 0;
                  goto LABEL_130;
                }
              }

              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_128:
              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v14) = 0;
              }
LABEL_130:
              uint64_t v78 = 92LL;
              goto LABEL_188;
            case 0xBu:
              char v21 = 0;
              unsigned int v22 = 0;
              uint64_t v14 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x800u;
              while (2)
              {
                unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
                  v14 |= (unint64_t)(v24 & 0x7F) << v21;
                  if (v24 < 0)
                  {
                    v21 += 7;
                    BOOL v9 = v22++ >= 9;
                    if (v9)
                    {
                      LODWORD(v14) = 0;
                      goto LABEL_134;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v14) = 0;
              }
LABEL_134:
              uint64_t v78 = 96LL;
              goto LABEL_188;
            case 0xCu:
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v14 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x1000u;
              while (2)
              {
                unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
                  v14 |= (unint64_t)(v28 & 0x7F) << v25;
                  if (v28 < 0)
                  {
                    v25 += 7;
                    BOOL v9 = v26++ >= 9;
                    if (v9)
                    {
                      LODWORD(v14) = 0;
                      goto LABEL_138;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v14) = 0;
              }
LABEL_138:
              uint64_t v78 = 100LL;
              goto LABEL_188;
            case 0xDu:
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v14 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x200u;
              while (2)
              {
                unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v31 == -1LL || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v32 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
                  v14 |= (unint64_t)(v32 & 0x7F) << v29;
                  if (v32 < 0)
                  {
                    v29 += 7;
                    BOOL v9 = v30++ >= 9;
                    if (v9)
                    {
                      LODWORD(v14) = 0;
                      goto LABEL_142;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v14) = 0;
              }
LABEL_142:
              uint64_t v78 = 88LL;
              goto LABEL_188;
            case 0xEu:
            case 0xFu:
            case 0x10u:
            case 0x11u:
            case 0x12u:
            case 0x13u:
            case 0x18u:
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
            case 0x1Cu:
            case 0x1Du:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
              goto LABEL_27;
            case 0x14u:
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x40u;
              while (2)
              {
                unint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v36 == -1LL || v36 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v37 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
                  v35 |= (unint64_t)(v37 & 0x7F) << v33;
                  if (v37 < 0)
                  {
                    v33 += 7;
                    BOOL v9 = v34++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_146;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_146:
              uint64_t v79 = 56LL;
              goto LABEL_179;
            case 0x15u:
              char v38 = 0;
              unsigned int v39 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x20u;
              while (2)
              {
                unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v40 == -1LL || v40 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v41 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 1;
                  v35 |= (unint64_t)(v41 & 0x7F) << v38;
                  if (v41 < 0)
                  {
                    v38 += 7;
                    BOOL v9 = v39++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_150;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_150:
              uint64_t v79 = 48LL;
              goto LABEL_179;
            case 0x16u:
              char v42 = 0;
              unsigned int v43 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x80u;
              while (2)
              {
                unint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v44 == -1LL || v44 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v45 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 1;
                  v35 |= (unint64_t)(v45 & 0x7F) << v42;
                  if (v45 < 0)
                  {
                    v42 += 7;
                    BOOL v9 = v43++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_154;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_154:
              uint64_t v79 = 64LL;
              goto LABEL_179;
            case 0x17u:
              char v46 = 0;
              unsigned int v47 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x100u;
              while (2)
              {
                unint64_t v48 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v48 == -1LL || v48 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v49 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v48 + 1;
                  v35 |= (unint64_t)(v49 & 0x7F) << v46;
                  if (v49 < 0)
                  {
                    v46 += 7;
                    BOOL v9 = v47++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_158;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_158:
              uint64_t v79 = 72LL;
              goto LABEL_179;
            case 0x1Eu:
              char v50 = 0;
              unsigned int v51 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 8u;
              while (2)
              {
                unint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v52 == -1LL || v52 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v53 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 1;
                  v35 |= (unint64_t)(v53 & 0x7F) << v50;
                  if (v53 < 0)
                  {
                    v50 += 7;
                    BOOL v9 = v51++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_162;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_162:
              uint64_t v79 = 32LL;
              goto LABEL_179;
            case 0x1Fu:
              char v54 = 0;
              unsigned int v55 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 1u;
              while (2)
              {
                unint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v56 == -1LL || v56 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v57 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56 + 1;
                  v35 |= (unint64_t)(v57 & 0x7F) << v54;
                  if (v57 < 0)
                  {
                    v54 += 7;
                    BOOL v9 = v55++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_166;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_166:
              uint64_t v79 = 8LL;
              goto LABEL_179;
            case 0x20u:
              char v58 = 0;
              unsigned int v59 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 2u;
              while (2)
              {
                unint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v60 == -1LL || v60 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v61 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 1;
                  v35 |= (unint64_t)(v61 & 0x7F) << v58;
                  if (v61 < 0)
                  {
                    v58 += 7;
                    BOOL v9 = v59++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_170;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_170:
              uint64_t v79 = 16LL;
              goto LABEL_179;
            case 0x21u:
              char v62 = 0;
              unsigned int v63 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 4u;
              while (2)
              {
                unint64_t v64 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v64 == -1LL || v64 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v65 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 1;
                  v35 |= (unint64_t)(v65 & 0x7F) << v62;
                  if (v65 < 0)
                  {
                    v62 += 7;
                    BOOL v9 = v63++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_174;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_174:
              uint64_t v79 = 24LL;
              goto LABEL_179;
            case 0x28u:
              char v66 = 0;
              unsigned int v67 = 0;
              uint64_t v35 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x10u;
              while (2)
              {
                unint64_t v68 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v68 == -1LL || v68 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v69 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 1;
                  v35 |= (unint64_t)(v69 & 0x7F) << v66;
                  if (v69 < 0)
                  {
                    v66 += 7;
                    BOOL v9 = v67++ >= 9;
                    if (v9)
                    {
                      uint64_t v35 = 0LL;
                      goto LABEL_178;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                uint64_t v35 = 0LL;
              }
LABEL_178:
              uint64_t v79 = 40LL;
LABEL_179:
              *(void *)(a1 + v79) = v35;
              goto LABEL_189;
            case 0x29u:
              char v70 = 0;
              unsigned int v71 = 0;
              uint64_t v14 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x2000u;
              while (2)
              {
                unint64_t v72 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v72 == -1LL || v72 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v73 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72 + 1;
                  v14 |= (unint64_t)(v73 & 0x7F) << v70;
                  if (v73 < 0)
                  {
                    v70 += 7;
                    BOOL v9 = v71++ >= 9;
                    if (v9)
                    {
                      LODWORD(v14) = 0;
                      goto LABEL_183;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v14) = 0;
              }
LABEL_183:
              uint64_t v78 = 104LL;
              goto LABEL_188;
            case 0x2Au:
              char v74 = 0;
              unsigned int v75 = 0;
              uint64_t v14 = 0LL;
              *(_WORD *)(a1 + 112) |= 0x4000u;
              while (2)
              {
                unint64_t v76 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
                if (v76 == -1LL || v76 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
                {
                  *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
                }

                else
                {
                  char v77 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
                  *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76 + 1;
                  v14 |= (unint64_t)(v77 & 0x7F) << v74;
                  if (v77 < 0)
                  {
                    v74 += 7;
                    BOOL v9 = v75++ >= 9;
                    if (v9)
                    {
                      LODWORD(v14) = 0;
                      goto LABEL_187;
                    }

                    continue;
                  }
                }

                break;
              }

              if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
                LODWORD(v14) = 0;
              }
LABEL_187:
              uint64_t v78 = 108LL;
LABEL_188:
              *(_DWORD *)(a1 + v7_Block_object_dispose(va, 8) = v14;
              goto LABEL_189;
            default:
              if ((v6 >> 3) == 1)
              {
                uint64_t String = PBReaderReadString(a2);
                uint64_t v18 = objc_claimAutoreleasedReturnValue(String);
                AudioFileTypeID v19 = *(void **)(a1 + 80);
                *(void *)(a1 + 80) = v18;
              }

              else
              {
LABEL_27:
                uint64_t result = PBReaderSkipValueWithTag(a2);
                if (!(_DWORD)result) {
                  return result;
                }
              }

LABEL_189:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
          }
        }
      }

      break;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10006E134( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_100070100(uint64_t a1)
{
  return [*(id *)(a1 + 32) _preheat];
}

void sub_100070108(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = objc_alloc_init(&OBJC_CLASS____ADPBProxyGetMetricsResponse);
  -[_ADPBProxyGetMetricsResponse _ad_setMetrics:](v4, "_ad_setMetrics:", v3);

  id v5 = objc_alloc(&OBJC_CLASS___IDSProtobuf);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[_ADPBProxyGetMetricsResponse data](v4, "data"));
  id v7 = [v5 initWithProtobufData:v6 type:0 isResponse:1];

  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) outgoingResponseIdentifier]);
  BOOL v9 = (void *)v8;
  if (v8)
  {
    uint64_t v22 = IDSSendMessageOptionPeerResponseIdentifierKey;
    uint64_t v23 = v8;
    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
  }

  else
  {
    int v10 = 0LL;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _service]);
  char v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _destination]);
  id v16 = 0LL;
  id v17 = 0LL;
  [v11 sendProtobuf:v7 toDestinations:v12 priority:300 options:v10 identifier:&v17 error:&v16];
  id v13 = v17;
  id v14 = v16;

  if (v14)
  {
    unint64_t v15 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      AudioFileTypeID v19 = "-[ADSharedPeerStreamConnection _handleGetMetricsMessage:context:]_block_invoke";
      __int16 v20 = 2114;
      id v21 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Error sending metrics response %{public}@",  buf,  0x16u);
    }
  }
}

void sub_100070308(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _failureMetricsContextDictionary]);
  id v3 = [v2 mutableCopy];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10007035C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setPreferBTClassic:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10007036C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pairedDevice]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 isNearby];
}

uint64_t sub_1000703B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000703F0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextIDS;
  if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    char v28 = "-[ADSharedPeerStreamConnection getRemoteMetrics:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  id v3 = objc_alloc_init(&OBJC_CLASS____ADPBProxyGetMetricsRequest);
  id v4 = objc_alloc(&OBJC_CLASS___IDSProtobuf);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[_ADPBProxyGetMetricsRequest data](v3, "data"));
  id v6 = objc_msgSend( v4,  "initWithProtobufData:type:isResponse:",  v5,  objc_msgSend((id)objc_opt_class(v3), "_ADPBProxyRequestType"),  0);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _service]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _destination]);
  v31[0] = IDSSendMessageOptionTimeoutKey;
  v31[1] = IDSSendMessageOptionExpectsPeerResponseKey;
  v32[0] = &off_100513B88;
  v32[1] = &__kCFBooleanTrue;
  v31[2] = IDSSendMessageOptionForceLocalDeliveryKey;
  v32[2] = &__kCFBooleanTrue;
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v32,  v31,  3LL));
  id v25 = 0LL;
  id v26 = 0LL;
  [v7 sendProtobuf:v6 toDestinations:v8 priority:300 options:v9 identifier:&v26 error:&v25];
  id v10 = v26;
  id v11 = v25;

  if (v11 || !v10)
  {
    id v21 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      char v28 = "-[ADSharedPeerStreamConnection getRemoteMetrics:]_block_invoke";
      __int16 v29 = 2114;
      id v30 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s Wake up message failed %{public}@",  buf,  0x16u);
    }

    uint64_t v22 = *(void *)(a1 + 40);
    if (v22) {
      (*(void (**)(uint64_t, void))(v22 + 16))(v22, 0LL);
    }
  }

  else
  {
    char v12 = *(void **)(*(void *)(a1 + 32) + 56LL);
    if (!v12)
    {
      id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v14 = *(void *)(a1 + 32);
      unint64_t v15 = *(void **)(v14 + 56);
      *(void *)(v14 + 56) = v13;

      char v12 = *(void **)(*(void *)(a1 + 32) + 56LL);
    }

    id v16 = objc_retainBlock(*(id *)(a1 + 40));
    [v12 setObject:v16 forKey:v10];

    id v17 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      char v28 = "-[ADSharedPeerStreamConnection getRemoteMetrics:]_block_invoke";
      __int16 v29 = 2112;
      id v30 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Sending getRemoteMetrics request for id %@",  buf,  0x16u);
    }

    dispatch_time_t v18 = dispatch_time(0LL, 8000000000LL);
    uint64_t v19 = *(void *)(a1 + 32);
    __int16 v20 = *(dispatch_queue_s **)(v19 + 32);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10007078C;
    v23[3] = &unk_1004FD968;
    v23[4] = v19;
    id v24 = v10;
    dispatch_after(v18, v20, v23);
  }
}

id sub_10007078C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) objectForKey:*(void *)(a1 + 40)]);

  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADSharedPeerStreamConnection getRemoteMetrics:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Metrics response timed out",  (uint8_t *)&v5,  0xCu);
    }
  }

  return [*(id *)(a1 + 32) _invokeMetricsCompletionWithMetrics:0 forIdentifier:*(void *)(a1 + 40)];
}

void sub_10007085C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
  id v3 = *(id *)(a1 + 40);
  id v4 = (os_log_s *)AFSiriLogContextIDS;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO);
  if (v3 == WeakRetained)
  {
    if (v5)
    {
      int v11 = 136315138;
      char v12 = "-[ADSharedPeerStreamConnection closeForConnection:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v11, 0xCu);
    }

    objc_storeWeak((id *)(*(void *)(a1 + 32) + 48LL), 0LL);
    [*(id *)(a1 + 32) _setPreferBTClassic:0];
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v9 + 73))
    {
      *(_BYTE *)(v9 + 73) = 0;
      [*(id *)(a1 + 32) _getSocketFromDevice];
      goto LABEL_11;
    }

    id v10 = (os_log_s *)AFSiriLogContextIDS;
    if (!os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO)) {
      goto LABEL_11;
    }
    int v11 = 136315138;
    char v12 = "-[ADSharedPeerStreamConnection closeForConnection:]_block_invoke";
    id v6 = "%s Ignoring close request since current streams have not been vended";
    id v7 = v10;
    uint32_t v8 = 12;
    goto LABEL_4;
  }

  if (v5)
  {
    int v11 = 136315650;
    char v12 = "-[ADSharedPeerStreamConnection closeForConnection:]_block_invoke";
    __int16 v13 = 2048;
    uint64_t v14 = v3;
    __int16 v15 = 2048;
    id v16 = WeakRetained;
    id v6 = "%s Ignoring close request because connection %p did not open current stream %p";
    id v7 = v4;
    uint32_t v8 = 32;
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v11, v8);
  }

uint64_t sub_100070A14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100070A24(uint64_t a1)
{
}

void sub_100070A2C(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  id v6 = (os_log_s *)AFSiriLogContextIDS;
  if (v5)
  {
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      unint64_t v27 = "-[ADSharedPeerStreamConnection _getSocketFromDeviceForStreamIdentifier:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v24;
      __int16 v30 = 2114;
      uint64_t v31 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s got device connection completion for identifier %@ with error=%{public}@",  buf,  0x20u);
    }

    *(void *)(*(void *)(a1 + 40) + 192) = [(id)v5 code];
  }

  else if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    unint64_t v27 = "-[ADSharedPeerStreamConnection _getSocketFromDeviceForStreamIdentifier:]_block_invoke";
    __int16 v28 = 2112;
    uint64_t v29 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s got device connection completion for %@",  buf,  0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  uint64_t v10 = *(void *)(v8 + 80);
  if (v9 == v10)
  {
    *(_BYTE *)(v8 + 72) = 0;
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 64LL), *(id *)(a1 + 32));
    if (v5)
    {
      uint64_t v15 = *(void *)(a1 + 40);
      id v16 = *(void **)(v15 + 80);
      *(void *)(v15 + 80) = 0LL;

LABEL_21:
      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) close];
      uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
      dispatch_time_t v18 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = 0LL;

      *(void *)(*(void *)(a1 + 40) + 184LL) = 0LL;
      goto LABEL_22;
    }
  }

  else
  {
    int v11 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      unint64_t v27 = "-[ADSharedPeerStreamConnection _getSocketFromDeviceForStreamIdentifier:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v9;
      __int16 v30 = 2112;
      uint64_t v31 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s device connection was closed while we were getting socket (expected %@; found %@); returning an error",
        buf,
        0x20u);
      uint64_t v8 = *(void *)(a1 + 40);
    }

    if (!(v5 | *(void *)(v8 + 96)) && !*(void *)(v8 + 80))
    {
      char v12 = (os_log_s *)AFSiriLogContextIDS;
      if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unint64_t v27 = "-[ADSharedPeerStreamConnection _getSocketFromDeviceForStreamIdentifier:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Optimistically trying eager fetch again on socket success after wake up timeout",  buf,  0xCu);
        uint64_t v8 = *(void *)(a1 + 40);
      }

      [(id)v8 _initiateOptimisticEagerStreamFetchRetry];
      uint64_t v8 = *(void *)(a1 + 40);
    }

    id v13 = [(id)objc_opt_class(v8) _deviceConnectionClosedErrorWithUnderlyingError:v5];
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);

    uint64_t v5 = v14;
    if (v14) {
      goto LABEL_21;
    }
  }

  if (*(_BYTE *)(*(void *)(a1 + 40) + 72LL))
  {
    uint64_t v5 = 0LL;
    goto LABEL_21;
  }

  if (a2 != -1)
  {
    *(_DWORD *)__int128 buf = 800;
    setsockopt(a2, 0xFFFF, 4230, buf, 4u);
    int v25 = 1;
    setsockopt(a2, 6, 1, &v25, 4u);
    *(_DWORD *)(*(void *)(a1 + 40) + 88LL) = dup(a2);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    [v21 systemUptime];
    *(double *)(*(void *)(a1 + 40) + 184LL) = v22 - *(double *)(a1 + 56);

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v23 setLastKnownProxyStreamId:*(void *)(a1 + 32)];
    [v23 synchronize];
  }

  uint64_t v5 = 0LL;
LABEL_22:
  uint64_t v19 = *(_BYTE **)(a1 + 40);
  if (v19[72])
  {
    __int16 v20 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unint64_t v27 = "-[ADSharedPeerStreamConnection _getSocketFromDeviceForStreamIdentifier:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Not completing socket fetch since we have a new one outstanding",  buf,  0xCu);
    }
  }

  else
  {
    [v19 _invokeSocketCompletionWithCurrentSocketOrError:v5];
  }
}

void sub_100070E2C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[ADSharedPeerStreamConnection _streamPairInterruptedError]( &OBJC_CLASS___ADSharedPeerStreamConnection,  "_streamPairInterruptedError"));
  [v2 _invokeSocketCompletionWithCurrentSocketOrError:v3];

  objc_storeWeak((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
  id v4 = objc_retainBlock(*(id *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 96);
  *(void *)(v5 + 96) = v4;

  uint64_t v7 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v7 + 88) == -1)
  {
    int v9 = *(unsigned __int8 *)(v7 + 72);
    uint64_t v10 = (os_log_s *)AFSiriLogContextIDS;
    BOOL v11 = os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO);
    if (v9)
    {
      if (v11)
      {
        int v12 = 136315138;
        id v13 = "-[ADSharedPeerStreamConnection getSocketForConnection:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Already getting device socket, waiting for completion",  (uint8_t *)&v12,  0xCu);
      }
    }

    else
    {
      if (v11)
      {
        int v12 = 136315138;
        id v13 = "-[ADSharedPeerStreamConnection getSocketForConnection:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Asking for socket now",  (uint8_t *)&v12,  0xCu);
        uint64_t v7 = *(void *)(a1 + 32);
      }

      [(id)v7 _getSocketFromDevice];
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315138;
      id v13 = "-[ADSharedPeerStreamConnection getSocketForConnection:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Already have valid socket, returning immediately",  (uint8_t *)&v12,  0xCu);
      uint64_t v7 = *(void *)(a1 + 32);
    }

    [(id)v7 _invokeSocketCompletionWithCurrentSocketOrError:0];
  }

void sub_100070FFC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[10])
  {
    id v2 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      id v4 = "-[ADSharedPeerStreamConnection _initiateOptimisticEagerStreamFetchRetry]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Canceling optimistic socket fetch since we already have a _deviceConnection",  (uint8_t *)&v3,  0xCu);
    }
  }

  else
  {
    [v1 _getSocketFromDevice];
  }

id sub_1000710D4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
}

id sub_1000710E0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + memset((void *)(v1 - 204), 50, 16) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10007136C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([(id)qword_100577A68 objectForKey:*(void *)(a1 + 32)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v5 = -[ADSharedPeerStreamConnection _initWithServiceIdentifier:listener:]( objc_alloc(&OBJC_CLASS___ADSharedPeerStreamConnection),  "_initWithServiceIdentifier:listener:",  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 48));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [(id)qword_100577A68 setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKey:*(void *)(a1 + 32)];
  }

void sub_100071408(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v3 = dispatch_queue_create("ADPeerStreamConnectionFactory", v2);

  uint64_t v4 = (void *)qword_100577A60;
  qword_100577A60 = (uint64_t)v3;

  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v6 = (void *)qword_100577A68;
  qword_100577A68 = (uint64_t)v5;
}

void sub_1000717BC(uint64_t a1, void *a2, int a3, void *a4)
{
  id v8 = a2;
  id v9 = a4;
  if (*(void *)(a1 + 40))
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), a2);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315138;
      int v12 = "-[ADPeerStreamConnection getSocket:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s No completion, closing down.",  (uint8_t *)&v11,  0xCu);
    }

    [v8 close];
    if (a3 != -1) {
      close(a3);
    }
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "closeForConnection:");
  }
}

uint64_t sub_100071C58(uint64_t a1)
{
  uint64_t result = AFIsNano(a1);
  if ((_DWORD)result)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[ADSharedPeerStreamConnection sharedPeerStreamConnectionWithServiceIdentifier:listener:]( &OBJC_CLASS___ADSharedPeerStreamConnection,  "sharedPeerStreamConnectionWithServiceIdentifier:listener:",  @"com.apple.private.alloy.siri.proxy",  0LL));
    id v3 = [v2 deviceIsNearby];

    return (uint64_t)v3;
  }

  return result;
}

id sub_100071CA8(uint64_t a1)
{
  if (AFIsNano(a1))
  {
    dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[ADSharedPeerStreamConnection sharedPeerStreamConnectionWithServiceIdentifier:listener:]( &OBJC_CLASS___ADSharedPeerStreamConnection,  "sharedPeerStreamConnectionWithServiceIdentifier:listener:",  @"com.apple.private.alloy.siri.proxy",  0LL));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 _pairedDevice]);

    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 destination]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 destinationURIs]);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_100071D70(id a1)
{
  id v1 = [[AFSiriActivationConnection alloc] initWithServicePort:AFSiriActivationServiceGetPort()];
  uint64_t v2 = (void *)qword_100577A80;
  qword_100577A80 = (uint64_t)v1;
}

uint64_t sub_100071DB4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100071DC4(uint64_t a1)
{
}

void sub_100071DCC(uint64_t a1, uint64_t a2, id obj)
{
  id v6 = obj;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100071E34(uint64_t a1, void *a2, char a3)
{
  id v6 = a2;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a3;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100071E98(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

NSMutableDictionary *sub_100071EE4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSArray);
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v5 = v1;
  uint64_t v6 = v4;
  id v7 = v5;
  id v8 = [v5 countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v38;
    uint64_t v28 = v6;
    id v29 = v7;
    uint64_t v27 = *(void *)v38;
    do
    {
      uint64_t v11 = 0LL;
      id v30 = v9;
      do
      {
        if (*(void *)v38 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v32 = v11;
        int v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", *(void *)(*((void *)&v37 + 1) + 8 * v11), v27, v28, v29));
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"productType"]);
        if ((objc_opt_isKindOfClass(v13, v3) & 1) != 0)
        {
          uint64_t v31 = v12;
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:@"languages"]);
          if ((objc_opt_isKindOfClass(v14, v6) & 1) != 0)
          {
            __int128 v35 = 0u;
            __int128 v36 = 0u;
            __int128 v33 = 0u;
            __int128 v34 = 0u;
            id v15 = v14;
            id v16 = [v15 countByEnumeratingWithState:&v33 objects:v41 count:16];
            if (v16)
            {
              id v17 = v16;
              uint64_t v18 = *(void *)v34;
              do
              {
                for (i = 0LL; i != v17; i = (char *)i + 1)
                {
                  if (*(void *)v34 != v18) {
                    objc_enumerationMutation(v15);
                  }
                  uint64_t v20 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)i);
                  if ((objc_opt_isKindOfClass(v20, v3) & 1) != 0)
                  {
                    id v21 = v14;
                    double v22 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v2, "objectForKey:", v20));
                    if (v22)
                    {
                      uint64_t v23 = v22;
                    }

                    else
                    {
                      uint64_t v23 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
                      -[NSMutableArray addObject:](v23, "addObject:", v13);
                      -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v23, v20);
                    }

                    uint64_t v14 = v21;
                  }
                }

                id v17 = [v15 countByEnumeratingWithState:&v33 objects:v41 count:16];
              }

              while (v17);
            }

            uint64_t v6 = v28;
            id v7 = v29;
            uint64_t v10 = v27;
            id v9 = v30;
          }

          int v12 = v31;
        }

        uint64_t v11 = v32 + 1;
      }

      while ((id)(v32 + 1) != v9);
      id v9 = [v7 countByEnumeratingWithState:&v37 objects:v42 count:16];
    }

    while (v9);
  }

  if (-[NSMutableDictionary count](v2, "count")) {
    uint64_t v24 = v2;
  }
  else {
    uint64_t v24 = 0LL;
  }
  int v25 = v24;

  return v25;
}

uint64_t sub_1000738BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000738D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000738E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000738F8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007390C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      double v22 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v5;
      __int16 v25 = 2112;
      id v26 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to delete Assistant history for %@ due to %@.",  buf,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    double v22 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
    __int16 v23 = 2112;
    uint64_t v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Deleted Assistant history for %@.", buf, 0x16u);
  }

  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    double v22 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
    __int16 v23 = 2112;
    uint64_t v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Destroying Assistant for %@...", buf, 0x16u);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100073B40;
  void v14[3] = &unk_1004FBCF0;
  id v9 = *(void **)(a1 + 40);
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  int v12 = *(void **)(a1 + 56);
  id v15 = v10;
  uint64_t v16 = v11;
  id v17 = v3;
  id v18 = v12;
  id v19 = *(id *)(a1 + 64);
  id v20 = *(id *)(a1 + 72);
  id v13 = v3;
  [v9 destroyAssistantWithCompletion:v14];
}

void sub_100073B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      id v20 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
      __int16 v21 = 2112;
      uint64_t v22 = v5;
      __int16 v23 = 2112;
      id v24 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to destroy Assistant for %@ due to %@.",  buf,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    id v20 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
    __int16 v21 = 2112;
    uint64_t v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Destroyed Assistant for %@.", buf, 0x16u);
  }

  id v7 = *(void **)(a1 + 48);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100073D38;
  block[3] = &unk_1004F73F0;
  id v13 = v7;
  id v14 = v3;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v9 = (id)v11.i64[0];
  int8x16_t v17 = vextq_s8(v11, v11, 8uLL);
  id v18 = *(id *)(a1 + 72);
  id v10 = v3;
  dispatch_async(v8, block);
}

uint64_t sub_100073D38(uint64_t a1)
{
  if (*(void *)(a1 + 32) && *(void *)(a1 + 40))
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v15 = *(void **)(a1 + 48);
      int v16 = 136315394;
      int8x16_t v17 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Failed to process account deletion file at %@.",  (uint8_t *)&v16,  0x16u);
    }

    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:@"date"]);
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDate);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
    {
      id v5 = v3;

      if (v5)
      {
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v6 timeIntervalSinceDate:v5];
        double v8 = v7;

        if (v8 <= 2592000.0) {
          goto LABEL_16;
        }
      }
    }

    else
    {

      id v5 = 0LL;
    }

    int8x16_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 48);
      int v16 = 136315650;
      int8x16_t v17 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Account deletion was issued on %@, cleaning up %@ now...",  (uint8_t *)&v16,  0x20u);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    [v13 removeItemAtPath:*(void *)(a1 + 48) error:0];
  }

  else
  {
    id v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v10 = *(void **)(a1 + 48);
      int v16 = 136315394;
      int8x16_t v17 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionFileAtPath:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Successfully processed account deletion file at %@, cleaning up now...",  (uint8_t *)&v16,  0x16u);
    }

    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    [v5 removeItemAtPath:*(void *)(a1 + 48) error:0];
  }

LABEL_16:
  [*(id *)(*(void *)(a1 + 64) + 16) removeObjectForKey:*(void *)(a1 + 72)];
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

LABEL_34:
            return;
          }

          if (!strcmp("com.apple.managedconfiguration.effectivesettingschanged", v4))
          {
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 _sharedDataService]);
            [v32 effectiveSettingsChanged];

            int8x16_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
            [v17 managedConfigurationEffectiveSettingsChanged];
            goto LABEL_33;
          }

          if (+[ADServiceManager isReloadServiceNotification:]( &OBJC_CLASS___ADServiceManager,  "isReloadServiceNotification:",  v5))
          {
            int8x16_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
            [v17 reloadServiceForNotification:v5];
            goto LABEL_33;
          }

          if (!strcmp((const char *)[kAssetTypeEmbeddedSpeechModelNewAssetInstalled UTF8String], v4)
            || !strcmp((const char *)[kTrialSiriAssistantAssetNamespaceUpdate UTF8String], v4)
            || !strcmp((const char *)[kUAFSiriAssistantAssetNamespaceUpdate UTF8String], v4)
            || !strcmp((const char *)[kAFMAStartupActivatedNotification UTF8String], v4))
          {
            int8x16_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[ADDictationOfflineStatusObserver sharedDictationOfflineStatusObserver]( &OBJC_CLASS___ADDictationOfflineStatusObserver,  "sharedDictationOfflineStatusObserver"));
            [v17 fetchOfflineDictationStatusIgnoringCache:1 asynchronously:1];
            goto LABEL_33;
          }

          if (strcmp("com.apple.siri.inference.audio-app-signals-update", v4)) {
            goto LABEL_34;
          }
          id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
          id v10 = v14;
          id v15 = *(void *)(a1 + 32);
          int v16 = @"ADAudioAppSignalsDidChangeNotification";
LABEL_15:
          [v14 postNotificationName:v16 object:v15];
          goto LABEL_16;
        }

        int8x16_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        [v17 preheatWithStyle:1 forOptions:0 completion:0];
      }

    *(_DWORD *)__int128 buf = 136315394;
    id v13 = "-[ADDeviceSyncSession _pullSnapshotForDataType:completion:]_block_invoke";
    id v14 = 2112;
    id v15 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    goto LABEL_15;
  }

  if ([v4 sequence] != *(id *)(a1 + 56))
  {
    double v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2407LL,  @"The sequence of the reply message is invalid.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10012D9CC;
  v10[3] = &unk_1004F2830;
  id v5 = *(void **)(a1 + 40);
  int8x16_t v11 = *(id *)(a1 + 48);
  if ((sub_1002D37BC(v5, 0LL, 0LL, 0LL, 0LL, v10) & 1) == 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2409LL,  @"There's no supported response in reply message.",  0LL));
    double v7 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pullSnapshotForDataType:completion:]_block_invoke";
      id v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

    *(_DWORD *)__int128 buf = 136315394;
    id v13 = "-[ADDeviceSyncSession _pullDeltaForDataType:generation:limit:completion:]_block_invoke";
    id v14 = 2112;
    id v15 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    goto LABEL_15;
  }

  if ([v4 sequence] != *(id *)(a1 + 56))
  {
    double v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2407LL,  @"The sequence of the reply message is invalid.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10012DF14;
  v10[3] = &unk_1004F2808;
  id v5 = *(void **)(a1 + 40);
  int8x16_t v11 = *(id *)(a1 + 48);
  if ((sub_1002D37BC(v5, 0LL, 0LL, 0LL, v10, 0LL) & 1) == 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2409LL,  @"There's no supported response in reply message.",  0LL));
    double v7 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pullDeltaForDataType:generation:limit:completion:]_block_invoke";
      id v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

    *(_DWORD *)__int128 buf = 136315394;
    id v13 = "-[ADDeviceSyncSession _pullGenerationsForDataTypes:completion:]_block_invoke";
    id v14 = 2112;
    id v15 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    goto LABEL_15;
  }

  if ([v4 sequence] != *(id *)(a1 + 56))
  {
    double v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2407LL,  @"The sequence of the reply message is invalid.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10012E458;
  v10[3] = &unk_1004F27B8;
  id v5 = *(void **)(a1 + 40);
  int8x16_t v11 = *(id *)(a1 + 48);
  if ((sub_1002D37BC(v5, 0LL, 0LL, v10, 0LL, 0LL) & 1) == 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2409LL,  @"There's no supported response in reply message.",  0LL));
    double v7 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pullGenerationsForDataTypes:completion:]_block_invoke";
      id v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

    *(_DWORD *)__int128 buf = 136315394;
    id v13 = "-[ADDeviceSyncSession _pushGenerationsByDataType:completion:]_block_invoke";
    id v14 = 2112;
    id v15 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    goto LABEL_15;
  }

  if ([v4 sequence] != *(id *)(a1 + 56))
  {
    double v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2407LL,  @"The sequence of the reply message is invalid.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10012E990;
  v10[3] = &unk_1004F2790;
  id v5 = *(void **)(a1 + 40);
  int8x16_t v11 = *(id *)(a1 + 48);
  if ((sub_1002D37BC(v5, 0LL, v10, 0LL, 0LL, 0LL) & 1) == 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2409LL,  @"There's no supported response in reply message.",  0LL));
    double v7 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pushGenerationsByDataType:completion:]_block_invoke_2";
      id v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

    *(_DWORD *)__int128 buf = 136315394;
    id v13 = "-[ADDeviceSyncSession _pingWithCompletion:]_block_invoke";
    id v14 = 2112;
    id v15 = v8;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    goto LABEL_15;
  }

  if ([v4 sequence] != *(id *)(a1 + 56))
  {
    double v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2407LL,  @"The sequence of the reply message is invalid.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    goto LABEL_16;
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10012EDC0;
  v10[3] = &unk_1004FC838;
  id v5 = *(void **)(a1 + 40);
  int8x16_t v11 = *(id *)(a1 + 48);
  if ((sub_1002D37BC(v5, v10, 0LL, 0LL, 0LL, 0LL) & 1) == 0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2409LL,  @"There's no supported response in reply message.",  0LL));
    double v7 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pingWithCompletion:]_block_invoke_2";
      id v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

      -[SACommandFailed setErrorCode:](v13, "setErrorCode:", *v16);
      break;
  }
}

  return v16;
}

    if (v12 == 3) {
      int v16 = 3;
    }
    else {
      int v16 = 2;
    }
    if (v12 == 2) {
      int8x16_t v17 = 4LL;
    }
    else {
      int8x16_t v17 = v16;
    }
    __int16 v18 = AFEffectiveSiriBundlePathForLocation(v6);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v18);
    +[CLLocationManager setAuthorizationStatusByType:forBundlePath:]( &OBJC_CLASS___CLLocationManager,  "setAuthorizationStatusByType:forBundlePath:",  v17,  v15);
    goto LABEL_23;
  }
  }

          goto LABEL_17;
        }
      }

      else
      {
      }

      __int16 v20 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = 136315138;
        __int16 v23 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeys"
              "InResponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s #hal Serialized context is not a dictionary. Skipping",  (uint8_t *)&v22,  0xCu);
      }

      uint64_t v12 = 0LL;
      goto LABEL_16;
    }
  }

  else
  {
  }

  id v19 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = 136315138;
    __int16 v23 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s #hal Device ID is not a string. Skipping",  (uint8_t *)&v22,  0xCu);
  }

  id v9 = 0LL;
LABEL_17:
}

              double v8 = v52;
              goto LABEL_28;
            }

            __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v15 experimentId]);
            [v52 setObject:v35 forKey:v16];

            __int128 v36 = (void *)AFSiriLogContextConnection;
            if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
            {
              __int128 v37 = v36;
              __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v15 experimentNamespace]);
              __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v15 experimentId]);
              *(_DWORD *)__int128 buf = 136315650;
              unint64_t v60 = "+[ADExperimentManager(Tracer) filterExperiments:experimentsEmitted:namespaceAssetSet:]";
              char v61 = 2112;
              char v62 = v38;
              unsigned int v63 = 2112;
              unint64_t v64 = v39;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s AssetSet namespace %@ Trial experiment %@ activated. AssetSet experiment activated.",  buf,  0x20u);

              double v8 = v52;
            }
          }
        }

        __int128 v40 = objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v16]);
        if (v40)
        {
          char v41 = (void *)v40;
          char v42 = objc_claimAutoreleasedReturnValue([v8 objectForKey:v16]);
          if (v42)
          {
            unsigned int v43 = (void *)v42;
            unint64_t v44 = [v15 allocationStatus];

            if (v44 != 2)
            {
              char v45 = (void *)AFSiriLogContextConnection;
              if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
              {
                char v46 = v45;
                unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue([v15 experimentNamespace]);
                unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v15 experimentId]);
                char v49 = (void *)objc_claimAutoreleasedReturnValue( +[ADExperimentManager treatmentAllocationStatusToString:]( ADExperimentManager,  "treatmentAllocationStatusToString:",  [v15 allocationStatus]));
                *(_DWORD *)__int128 buf = v51;
                unint64_t v60 = "+[ADExperimentManager(Tracer) filterExperiments:experimentsEmitted:namespaceAssetSet:]";
                char v61 = 2112;
                char v62 = v47;
                unsigned int v63 = 2112;
                unint64_t v64 = v48;
                char v65 = 2112;
                char v66 = v49;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "%s AssetSet namespace %@ Trial experiment %@ status update: %@",  buf,  0x2Au);

                double v8 = v52;
              }

              [v8 removeObjectForKey:v16];
            }
          }

          else
          {
          }
        }

        -[NSMutableArray addObject:](v54, "addObject:", v15);
LABEL_28:
      }

      uint64_t v12 = [obj countByEnumeratingWithState:&v55 objects:v67 count:16];
    }

    while (v12);
  }

  return v54;
}

        if (v4) {
          v4[2](v4, 0LL);
        }

        goto LABEL_19;
      }

      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_1001A68B4;
      v21[3] = &unk_1004F4F40;
      v21[4] = v11;
      uint64_t v22 = v4;
      -[ADExperimentManager _serverConfigurationForServerConfigurationInfo:completion:]( self,  "_serverConfigurationForServerConfigurationInfo:completion:",  v11,  v21);
    }

    double v8 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v8) {
      continue;
    }
    break;
  }

    -[ADCommandCenter _setCurrentRequestWithCommand:](self, "_setCurrentRequestWithCommand:", v6);
    if (v14) {
      __int16 v20 = v14;
    }
    else {
      __int16 v20 = v6;
    }
    -[ADCommandCenter _sendRetryableRequestToServer:](self, "_sendRetryableRequestToServer:", v20);
    goto LABEL_20;
  }

  if (v19)
  {
    uint64_t v21 = 136315138;
    uint64_t v22 = "-[ADCommandCenter _reallyHandleNewStartRequest:info:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s [_reallyHandleNewStartRequest] Dismissing Siri with reason AFDismissalAssetsNotReady",  (uint8_t *)&v21,  0xCu);
  }

  -[ADCommandCenter dismissAssistantWithReason:](self, "dismissAssistantWithReason:", 5LL);
LABEL_20:
}

    id v24 = v12;

    __int16 v25 = 0;
    double v8 = v24;
LABEL_17:
    uint64_t v22 = self;
    goto LABEL_18;
  }

  if (([v8 isEqualToString:v12] & 1) == 0)
  {
    [v11 setLanguageCode:v8];
    __int128 v40 = (os_log_s *)AFSiriLogContextDaemon;
    __int16 v25 = 1;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      char v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
      unsigned int v71 = 2112;
      unint64_t v72 = v12;
      char v73 = 2112;
      char v74 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "%s language code changed from %@ to %@",  buf,  0x20u);
    }

    goto LABEL_17;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 allOutputVoiceIdentifiersForSiriLanguage:v8]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v13 languageCode]);
  if ([v20 containsObject:v21])
  {

    uint64_t v22 = self;
LABEL_64:
    unsigned int v63 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      char v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
      unsigned int v71 = 2112;
      unint64_t v72 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_INFO,  "%s no need to change language code to %@ because it is already set to that language code",  buf,  0x16u);
    }

    __int16 v25 = 0;
    goto LABEL_18;
  }

  char v66 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  unint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "voiceNamesForOutputLanguageCode:gender:", v8, objc_msgSend(v13, "gender")));
  uint64_t v22 = self;
  char v61 = v19;
  char v62 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
  char v65 = [v60 containsObject:v62];

  if ((v65 & 1) != 0) {
    goto LABEL_64;
  }
  unint64_t v64 = (os_log_s *)AFSiriLogContextDaemon;
  __int16 v25 = 1;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    char v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
    unsigned int v71 = 2112;
    unint64_t v72 = v68;
    char v73 = 2112;
    id v26 = v13;
    char v74 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_INFO,  "%s output voice language code updated to %@ due to mismatch voice info %@",  buf,  0x20u);
    if (!v9) {
      goto LABEL_27;
    }
    goto LABEL_19;
  }

    *(_BYTE *)(*(void *)(a1 + 48) + 362LL) = 0;
    objc_msgSend( *(id *)(a1 + 48),  "_endSpeechRequestForCommand:withError:suppressAlert:secureOfflineOnlyDictation:",  0,  *(void *)(a1 + 56),  1,  *(unsigned __int8 *)(a1 + 64),  *(_OWORD *)v14,  *(void *)&v14[16]);
    goto LABEL_17;
  }

  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)id v14 = 136315394;
    *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:se"
                         "ssionUUID:statistics:]_block_invoke";
    *(_WORD *)&v14[12] = 2114;
    *(void *)&v14[14] = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Ignoring local speech recognition failure because the session is still active: %{public}@",  v14,  0x16u);
  }

  return v7;
}
}
}

  if (v12) {
    (*((void (**)(id, void))v12 + 2))(v12, 0LL);
  }
LABEL_18:
}

    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100278E2C;
    v19[3] = &unk_1004F8CF8;
    __int16 v20 = v8;
    uint64_t v21 = v13;
    uint64_t v22 = v9;
    -[ADCommandCenter _sendAMOSCommand:domain:toBundleWithIdentifier:completion:]( self,  "_sendAMOSCommand:domain:toBundleWithIdentifier:completion:",  v20,  v11,  v18,  v19);

    goto LABEL_17;
  }

  if (a4)
  {
    id v15 = [v13 implementsCommand:v10 forDomain:v11];
    int v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (v15)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v24 = "-[ADCommandCenter(AMOS) _handleSADOCommandIfServiceDoesNotUseAMOS:allowInterposing:completion:]";
        int8x16_t v17 = "%s Services uses AMOS, but wants to intercept command";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v17, buf, 0xCu);
        goto LABEL_16;
      }

      goto LABEL_16;
    }
  }

  else
  {
    int v16 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v24 = "-[ADCommandCenter(AMOS) _handleSADOCommandIfServiceDoesNotUseAMOS:allowInterposing:completion:]";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Service uses AMOS for command", buf, 0xCu);
  }

  (*((void (**)(id, void, void, void))v9 + 2))(v9, 0LL, 0LL, 0LL);
LABEL_17:
}

  uint64_t v27 = AFIsATV(v19, v20);
  if (v12
    || !v27
    || (uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](self->_primaryUser, "iCloudAltDSID")),
        id v29 = [v21 isEqualToString:v28],
        v28,
        (v29 & 1) != 0))
  {
    id v30 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      primaryUser = self->_primaryUser;
      uint64_t v32 = v30;
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](primaryUser, "iCloudAltDSID"));
      *(_DWORD *)__int128 buf = 136315395;
      unsigned int v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
      int v117 = 2113;
      int v118 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Shared user not found or is primary %{private}@ ",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v12 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_sharedUsersByiCloudAltDSID, "objectForKey:", v21));
  }

  __int128 v34 = _AFPreferencesSiriRMVSetting(v21);
  if (AFIsATV(v34, v35))
  {
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
    double v7 = [v36 userProfileExistsWithiCloudAltDSID:v21];

    if ((_DWORD)v7)
    {
      if (v34 != 3)
      {
        __int128 v37 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315651;
          unsigned int v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
          int v117 = 2113;
          int v118 = v21;
          int v119 = 2048;
          int v120 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Attempted to remove ATV user %{private}@ from invalid state. Bailing %ld",  buf,  0x20u);
        }

        __int128 v38 = a7;
        if (a7)
        {
          __int128 v39 = kAFAssistantErrorDomain;
          __int128 v40 = 1010LL;
LABEL_86:
          uint8x16_t v83 = 0;
          *__int128 v38 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v39,  v40,  &__NSDictionary0__struct));
          goto LABEL_88;
        }

        goto LABEL_87;
      }
    }
  }

  if (!v12)
  {
    int v112 = v17;
    if (v13)
    {
      double v7 = (id)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser homeUserUUID](self->_primaryUser, "homeUserUUID"));
    }

    uint16x8_t v84 = v13;
    uint16x8_t v85 = v14;
    if (v14)
    {
      id v14 = (id)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_primaryUser, "sharedUserID"));
      uint8x16_t v86 = v85;
      if ([v14 isEqualToString:v85])
      {

        id v14 = v85;
        id v13 = v84;
        if (!v84)
        {
LABEL_71:
          unsigned int v111 = v34;
          int v90 = -[ADMultiUserService _untrackUUIDsForUser:](self, "_untrackUUIDsForUser:", self->_primaryUser);
          if (AFIsATV(v90, v91)
            && +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled")
            && (uint16x8_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[ADUserProfileService sharedService]( ADUserProfileService,  "sharedService")),  v93 = [v92 userProfileExistsWithiCloudAltDSID:v21],  v92,  v93))
          {
            int32x4_t v94 = (os_log_s *)AFSiriLogContextDaemon;
            int8x16_t v17 = v112;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              unsigned int v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
              _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_INFO,  "%s PB User profile still exists, preserve home member info for primary.",  buf,  0xCu);
            }

            voiceProfileManager = self->_voiceProfileManager;
            int32x4_t v96 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_primaryUser, "sharedUserID"));
            int32x4_t v97 =  -[SSRVoiceProfileManager discardSiriEnrollmentForProfileId:forLanguageCode:]( voiceProfileManager,  "discardSiriEnrollmentForProfileId:forLanguageCode:",  v96,  0LL);

            __int128 v34 = v111;
          }

          else
          {
            uint64_t v98 = (void *)AFSiriLogContextDaemon;
            int8x16_t v17 = v112;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              int v99 = self->_primaryUser;
              unsigned int v100 = v98;
              unint64_t v101 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](v99, "iCloudAltDSID"));
              *(_DWORD *)__int128 buf = 136315907;
              unsigned int v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
              int v117 = 2113;
              int v118 = v13;
              int v119 = 2113;
              int v120 = (uint64_t)v14;
              int v121 = 2113;
              unsigned int v122 = (uint64_t)v101;
              _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_INFO,  "%s Trying to delete the primary user with home User ID (%{private}@) shared User ID (%{private}@) iCloud AltDSID (%{private}@)",  buf,  0x2Au);
            }

            int8x16x4_t v102 = -[ADMultiUserService _resetPrimaryUser](self, "_resetPrimaryUser");
            char v77 = (id)AFIsATV(v102, v103);
            __int128 v34 = v111;
            if ((_DWORD)v77) {
              char v77 = -[ADMultiUserService removeDeviceOwner](self, "removeDeviceOwner");
            }
          }

          goto LABEL_48;
        }
  }
}
}

        int8x16_t v11 = 0;
LABEL_17:

        goto LABEL_18;
      }

      if (productType)
      {
        id v13 = -[NSString isEqualToString:](productType, "isEqualToString:", v10);
        id v14 = (NSString *)objc_claimAutoreleasedReturnValue(-[ADPeerInfo buildVersion](v6, "buildVersion"));
        if (!v13) {
          goto LABEL_16;
        }
        goto LABEL_20;
      }

id sub_100073FCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processNextAccountDeletionUntilDate:*(void *)(a1 + 40)];
}

void sub_100073FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v7 = *(void **)(a1 + 32);
    double v8 = v6;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByAppendingPathComponent:a2]);
    int v10 = 136315650;
    int8x16_t v11 = "-[ADRemoraEndpointAssistantDeletionManager _processAccountDeletionsUntilDate:]_block_invoke";
    __int16 v12 = 2048;
    uint64_t v13 = a3;
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s [%tu] %@", (uint8_t *)&v10, 0x20u);
  }

id sub_1000740D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processAccountDeletionsUntilDate:*(void *)(a1 + 40)];
}

id sub_1000740E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addAccount:*(void *)(a1 + 40) forEndpointUUID:*(void *)(a1 + 48)];
}

void sub_1000741D4(CC_SHA1_CTX *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSUUID);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    [v3 getUUIDBytes:v9];
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v9, 16LL));
LABEL_7:
    id v8 = v5;
    CC_SHA1_Update(a1, [v8 bytes], (CC_LONG)objc_msgSend(v8, "length"));
    goto LABEL_8;
  }

  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v3, v6) & 1) != 0)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([v3 dataUsingEncoding:4]);
    goto LABEL_7;
  }

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSData);
  if ((objc_opt_isKindOfClass(v3, v7) & 1) != 0)
  {
    id v5 = v3;
    goto LABEL_7;
  }

  id v8 = (id)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v9 = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "Only NSUUID, NSString and NSData are supported. Other input types are ignored",  v9,  2u);
  }

LABEL_8:
}

  -[NSMapTable removeObjectForKey:](self->_devicesByDeviceUID, "removeObjectForKey:", v8);
  -[NSMapTable removeObjectForKey:](self->_devicesByAddress, "removeObjectForKey:", v7);
}
}

    __int16 v12 = 1;
    goto LABEL_9;
  }

  isKindOfClass = [v10 supportsSync];
LABEL_4:
  __int16 v12 = isKindOfClass;
LABEL_9:

  return v12 & 1;
}

  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
LABEL_9:
  id v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315650;
    id v15 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]_block_invoke";
    int v16 = 2048;
    int8x16_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s BTDevice %p for address %@", buf, 0x20u);
    id v9 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v15 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]_block_invoke";
    int v16 = 2048;
    int8x16_t v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s BTAccessoryManager %p", buf, 0x16u);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v13, v6);
  }
  return result;
}

    goto LABEL_12;
  }

  if (a4)
  {
    int v16 = v8;
    id v15 = 0;
    *a4 = v16;
  }

  else
  {
    id v15 = 0;
    int v16 = v8;
  }
}

  id v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, 0LL, 0LL);
  }
LABEL_11:
}
}
}

  objc_destroyWeak(&location);
}

  objc_destroyWeak(&location);
}

  if (self->_supportsSiriUoD || self->_supportsSiriHybridUoD)
  {
    p_delegateQueue = &self->_delegateQueue;
    int v10 = (dispatch_queue_s *)self->_delegateQueue;
    int8x16_t v11 = (dispatch_group_s *)p_delegateQueue[1];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100222EA0;
    v15[3] = &unk_1004FAF58;
    objc_copyWeak(&v16, &location);
    dispatch_group_async(v11, v10, v15);
    objc_destroyWeak(&v16);
  }

  else
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v25 = "-[ADAssetManager _registerAssetStatusTrackers]";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Device does not support full Siri UoD or Hybrid UoD, not registering assets change for Morphun assets",  buf,  0xCu);
    }
  }

  objc_destroyWeak(&location);
}

  if (outExtAudioFile) {
    ExtAudioFileDispose(outExtAudioFile);
  }
  uint64_t v22 = 0LL;
LABEL_11:

  return v22;
}
}
}
}

  return v8;
}
}
}
}
}

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 296) objectForKey:a1[5]]);
  if (v14)
  {
    id v19 = v14;
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sharedUserID]);
    int v16 = [v15 copy];
    int8x16_t v17 = *(void *)(a1[6] + 8LL);
    __int16 v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    __int16 v14 = v19;
  }
}
}

    objc_msgSend( *(id *)(a1 + 40),  "_remoteExecute_remoteDeviceExecuteSerializedCommand:onPeer:allowsRelay:allowFallbackOnAWDL:executionContext:completion:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(unsigned __int8 *)(a1 + 80),  *(unsigned __int8 *)(a1 + 81),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(_OWORD *)v15,  *(void *)&v15[16],  v16);
    goto LABEL_9;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)id v15 = 136315138;
    *(void *)&v15[4] = "-[ADCommandCenter(RemoteExecute) _remoteExecute_remoteDeviceExecuteSerializedCommand:onDeviceFo"
                         "rAssistantId:allowFallbackOnAWDL:executionContext:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Remote device not reachable and no context collector is available for relay",  v15,  0xCu);
  }

  uint64_t v13 = *(void *)(a1 + 72);
  if (v13)
  {
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1000LL));
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);
  }
}

    v5.n128_u32[0] = v3;
    return (*(uint64_t (**)(__n128))(a1[4] + 16LL))(v5);
  }

  if (v10)
  {
    uint64_t v13 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
    __int16 v14 = v9;
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v13));
    int v16 = 136315906;
    int8x16_t v17 = "-[ADSpeechManager _getAdjustedSiriOutputVolumeLevelForAudioRoute:withCompletion:]_block_invoke";
    __int16 v18 = 2048;
    id v19 = v2;
    __int16 v20 = 2048;
    uint64_t v21 = v2;
    uint64_t v22 = 2112;
    __int16 v23 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Reference volume: %f, adjusted Siri volume: %f, Media volume used: %@",  (uint8_t *)&v16,  0x2Au);

    uint64_t v2 = *(float *)(*(void *)(a1[6] + 8LL) + 24LL);
  }

  v5.n128_f32[0] = v2;
  return (*(uint64_t (**)(__n128))(a1[4] + 16LL))(v5);
}

    __int16 v18 = 0LL;
    goto LABEL_9;
  }

  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 announcementIdentifier]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _currentRequest](self, "_currentRequest"));
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 announcementIdentifier]);
  id v15 = [v12 isEqual:v14];

  if (v15)
  {
    int v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = 136315138;
      uint64_t v22 = "-[ADExternalNotificationRequestHandler _withdrawalAnnouncementRequestForNotification:completion:]";
      int8x16_t v17 = "%s Attempt to withdrawal current request. Ignoring withdrawal.";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v17, (uint8_t *)&v21, 0xCu);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _requestQueue](self, "_requestQueue"));
  __int16 v18 = [v19 removeAnnouncementRequest:v11];

  __int16 v20 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v21 = 136315650;
    uint64_t v22 = "-[ADExternalNotificationRequestHandler _withdrawalAnnouncementRequestForNotification:completion:]";
    __int16 v23 = 2112;
    id v24 = v11;
    __int16 v25 = 1024;
    id v26 = (int)v18;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Withdrawal for request: %@ successful: %{BOOL}d",  (uint8_t *)&v21,  0x1Cu);
  }

  uint64_t v21 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    unsigned int v59 = "-[ADVolumeService _fetchSystemVolumeForCategory:andMode:audioRoute:withName:usingSystemController:volume:]";
    unint64_t v60 = 2112;
    char v61 = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s routeInfo = %@", buf, 0x16u);
  }

  char v49 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:AVSystemController_RouteDescriptionKey_AVAudioRouteName]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:AVSystemController_RouteDescriptionKey_RouteUID]);
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:AVSystemController_RouteDescriptionKey_RouteSubtype]);
  id v24 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315906;
    unsigned int v59 = "-[ADVolumeService _fetchSystemVolumeForCategory:andMode:audioRoute:withName:usingSystemController:volume:]";
    unint64_t v60 = 2112;
    char v61 = v49;
    char v62 = 2112;
    unsigned int v63 = v22;
    unint64_t v64 = 2112;
    char v65 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s route = %@, deviceIdentifier = %@, routeSubtype = %@",  buf,  0x2Au);
  }

  __int16 v25 = [v17 getVolume:a8 category:v13 mode:v14 route:v49 deviceIdentifier:v22 routeSubtype:v23];
  id v19 = v25 == 0;
  if (!v25)
  {
    char v45 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v55[1] = @"volume";
    v56[0] = v13;
    v55[0] = @"category";
    *(float *)&id v26 = *a8;
    unint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v26));
    v56[1] = v44;
    unsigned int v47 = v17;
    uint64_t v27 = v15;
    uint64_t v28 = v14;
    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v56,  v55,  2LL));
    [v45 logEventWithType:4602 context:v29];

    __int16 v14 = v28;
    id v15 = v27;
    int8x16_t v17 = v47;
  }

LABEL_35:
  return v19;
}

  return v10;
}

void sub_1000746E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

LABEL_10:
}

  btAddress = self->_btAddress;
  __int16 v14 = btAddress;
  if (!btAddress)
  {
    id v15 = objc_claimAutoreleasedReturnValue(-[AFSiriAudioRoute btAddress](v6, "btAddress"));
    if (!v15) {
      goto LABEL_17;
    }
    id v3 = (void *)v15;
    __int16 v14 = self->_btAddress;
  }

  int v16 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriAudioRoute btAddress](v6, "btAddress"));
  int8x16_t v17 = -[NSString isEqualToString:](v14, "isEqualToString:", v16);

  if (btAddress)
  {
    if (!v17) {
      goto LABEL_21;
    }
    goto LABEL_17;
  }

  if ((v17 & 1) == 0)
  {
LABEL_21:
    LOBYTE(v12) = 0;
    goto LABEL_22;
  }

  if (v7 && v9) {
    (*((void (**)(id, id))v7 + 2))(v7, v9);
  }
}

  id v15 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    int8x16_t v17 = "-[ADCompanionRoutingService preheatDomain:]";
    __int16 v18 = 2112;
    id v19 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s unsupported preheat domain: %@",  (uint8_t *)&v16,  0x16u);
  }

    uint64_t v6 = 0;
    goto LABEL_11;
  }

  if (!self->_isPastBuddy)
  {
    int8x16_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = 136315138;
      __int16 v14 = "-[ADCloudKitManager _isCloudSyncEnabledForZone:accountInfo:]";
      id v8 = "%s Still in Buddy";
      id v9 = v11;
      int v10 = 12;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  uint64_t v6 = 1;
LABEL_11:

  return v6;
}
}

  dispatch_group_leave((dispatch_group_t)self->_group);
}

    id v15 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0BF0,  *(void *)v22,  *(_OWORD *)&v22[8],  v23,  v24);
    goto LABEL_11;
  }

  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  id v8 = BTAccessoryManagerSendControlCommand(a3, a2, 38LL, v7);
  if (v8)
  {
    id v9 = v8;
    int v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v22 = 136315906;
      *(void *)&v22[4] = "_ADBTDeviceSetPersonalVolume";
      *(_WORD *)&v22[12] = 2048;
      *(void *)&v22[14] = a2;
      *(_WORD *)&v22[22] = 2048;
      __int16 v23 = a3;
      LOWORD(v24) = 1024;
      *(_DWORD *)((char *)&v24 + 2) = v9;
      int8x16_t v11 = "%s Unable to set personal volume mode for BTDevice %p via BTAccessoryManager %p (result = %d)";
      __int16 v12 = v10;
      uint64_t v13 = 38;
LABEL_22:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v11, v22, v13);
      goto LABEL_10;
    }

    goto LABEL_10;
  }

  *(void *)uint64_t v22 = _NSConcreteStackBlock;
  *(void *)&v22[8] = 3221225472LL;
  *(void *)&v22[16] = sub_1000E048C;
  __int16 v23 = &unk_1004F0C10;
  LOBYTE(v24) = v6;
  id v15 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  v22);
  uint64_t v21 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)&v22[4] = "_ADBTDeviceSetPersonalVolume";
    *(_WORD *)&v22[12] = 1024;
    *(_DWORD *)&v22[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s Changed personal volume mode to %d.",  v22,  0x12u);
  }

    id v15 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0BF0,  *(void *)v22,  *(_OWORD *)&v22[8],  v23,  v24);
    goto LABEL_11;
  }

  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = 2LL;
  }
  id v8 = BTAccessoryManagerSendControlCommand(a3, a2, 40LL, v7);
  if (v8)
  {
    id v9 = v8;
    int v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v22 = 136315906;
      *(void *)&v22[4] = "_ADBTDeviceSetConversationAwareness";
      *(_WORD *)&v22[12] = 2048;
      *(void *)&v22[14] = a2;
      *(_WORD *)&v22[22] = 2048;
      __int16 v23 = a3;
      LOWORD(v24) = 1024;
      *(_DWORD *)((char *)&v24 + 2) = v9;
      int8x16_t v11 = "%s Unable to set conversation awareness mode for BTDevice %p via BTAccessoryManager %p (result = %d)";
      __int16 v12 = v10;
      uint64_t v13 = 38;
LABEL_22:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v11, v22, v13);
      goto LABEL_10;
    }

    goto LABEL_10;
  }

  *(void *)uint64_t v22 = _NSConcreteStackBlock;
  *(void *)&v22[8] = 3221225472LL;
  *(void *)&v22[16] = sub_1000E048C;
  __int16 v23 = &unk_1004F0C10;
  LOBYTE(v24) = v6;
  id v15 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  v22);
  uint64_t v21 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)&v22[4] = "_ADBTDeviceSetConversationAwareness";
    *(_WORD *)&v22[12] = 1024;
    *(_DWORD *)&v22[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s Changed conversation awareness mode to %d.",  v22,  0x12u);
  }

    v4[2](v4, v7);
    goto LABEL_11;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = v12;
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dictionaryRepresentation", v17, v18, v19, v20));
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v25 = "-[ADDeviceProperties getODDDevicePropertiesWithCompletion:]";
    id v26 = 2112;
    uint64_t v27 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Timed out waiting to populate ODDDeviceProperties event %@",  buf,  0x16u);
  }

  AnalyticsSendEvent(@"com.apple.siri.DeviceProperties.Timeout", 0LL);
  if (v4) {
    goto LABEL_10;
  }
LABEL_11:
}
  }
}
}
}
}
}
}

  ((void (*)(void *))v20[2])(v20);
  id v15 = v37;
LABEL_21:
}

  v25[2](v25, 0LL);
}
}

    int v104 = v12;
    if (!AFIsInternalInstall(v18))
    {
LABEL_37:
      unsigned int v43 = -[ADSessionRemoteServer _connectionErrorIsTimeout:](self, "_connectionErrorIsTimeout:", v14);
      unint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( -[ADSessionRemoteServer _generateAnalyticsContextWithError:]( self,  "_generateAnalyticsContextWithError:",  v14));
      v107[0] = _NSConcreteStackBlock;
      v107[1] = 3221225472LL;
      v107[2] = sub_1002B5B4C;
      v107[3] = &unk_1004F9A08;
      unsigned int v100 = v15;
      unsigned int v108 = v100;
      int8x16x4_t v102 = v44;
      int v109 = v102;
      unint64_t v101 = v16;
      int v110 = v101;
      unsigned int v111 = self;
      log = objc_retainBlock(v107);
      char v45 = -[ADSession state](self, "state");
      char v46 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession delegate](self, "delegate"));
      unsigned int v47 = v46;
      if (v45 < 5 || (v43 & 1) != 0)
      {
        [v46 updateConnectionDidFailAggdMetrics];

        siriNetworkEnablementExperimentActivated = self->_siriNetworkEnablementExperimentActivated;
        unint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession delegate](self, "delegate"));
        if (siriNetworkEnablementExperimentActivated) {
          char v53 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _currentSNConnectionType](self, "_currentSNConnectionType"));
        }
        else {
          char v53 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _currentConnectionType](self, "_currentConnectionType"));
        }
        char v54 = v53;
        objc_msgSend(v52, "updateConnectionSetConnectionType:", objc_msgSend(v53, "aggregatorConnectionType"));

        unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        char v49 = v48;
        if (v43) {
          char v50 = 904LL;
        }
        else {
          char v50 = 906LL;
        }
      }

      else
      {
        [v46 updateConnectionDidDropAggdMetrics];

        unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        char v49 = v48;
        char v50 = 905LL;
      }

      [v48 logEventWithType:v50 contextProvider:log];
      int8x16x4_t v103 = v13;

      if (self->_siriNetworkEnablementExperimentActivated)
      {
        unsigned int v55 = v16;
        unint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession connectionMode](self, "connectionMode"));
        char v57 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _adSessionTypeString](self, "_adSessionTypeString"));
        char v58 = -[ADSession state](self, "state");
        unsigned int v59 = v15;
        if (v58 > 0xB) {
          unint64_t v60 = @"unknown";
        }
        else {
          unint64_t v60 = *(&off_1004F6E78 + v58);
        }
        char v65 = v60;
        char v66 = (void *)objc_claimAutoreleasedReturnValue( +[SNNetworkAnalytics sessionConnectionFailedError:connectionMode:sessionType:sessionState:dormant:connectionAnalysisInfo:]( &OBJC_CLASS___SNNetworkAnalytics,  "sessionConnectionFailedError:connectionMode:sessionType:sessionState:dormant:connectionAnalysisInfo:",  v14,  v56,  v57,  v65,  -[ADSession dormant](self, "dormant"),  v101));

        if (!v66)
        {
LABEL_57:
          id v15 = v59;

          int v16 = v55;
          if (v14) {
            -[ADSessionRemoteServer _generateAWDMetricsForConnectionError:]( self,  "_generateAWDMetricsForConnectionError:",  v14);
          }
          uint64_t v13 = v103;
          if (-[ADSessionRemoteServer _connectionErrorSuggestsConnectionPolicyReset:]( self,  "_connectionErrorSuggestsConnectionPolicyReset:",  v14))
          {
            char v70 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              unsigned int v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInf"
                     "o:siriNetworkAnalysisInfo:]";
              _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_INFO,  "%s Error suggests bad connection policy; reverting to factory policy.",
                buf,
                0xCu);
            }

            unsigned int v71 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
            [v71 setConnectionPolicy:0];

            unint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
            [v72 setConnectionPolicyDate:0];

            char v73 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
            [v73 setConnectionPolicyHostname:0];

            char v74 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
            [v74 save];

            -[ADSessionRemoteServer _resetConnectionPolicyBlacklisting](self, "_resetConnectionPolicyBlacklisting");
          }

          -[ADSessionRemoteServer _updateConnectionPolicyFailureCount:]( self,  "_updateConnectionPolicyFailureCount:",  v14);
          unsigned int v75 = -[ADSessionRemoteServer _connectionErrorIsRedirect:](self, "_connectionErrorIsRedirect:", v14);
          if (v75 && AFIsInternalInstall(v75))
          {
            int v99 = v15;
            unint64_t v76 = self->_siriNetworkEnablementExperimentActivated;
            char v77 = (void *)objc_claimAutoreleasedReturnValue(-[NSString userInfo](v14, "userInfo"));
            uint64_t v78 = v77;
            uint64_t v79 = &SiriCoreSiriConnectionHTTPRedirectValueKey;
            if (v76) {
              uint64_t v79 = &SiriNetworkBackgroundConnectionHTTPRedirectValueKey;
            }
            int32x4_t v80 = (SNConnection *)objc_claimAutoreleasedReturnValue([v77 objectForKey:*v79]);

            uint64_t v81 = self->_currentConnectionHostname;
            int v82 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
            if (v80)
            {
              if ((-[SNConnection isEqualToString:](v80, "isEqualToString:", v81) & 1) == 0)
              {
                uint8x16_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 redirectForServerURLString:v80]);

                if (!v83)
                {
                  uint8x16_t v91 = (os_log_s *)AFSiriLogContextSession;
                  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)__int128 buf = 136315650;
                    unsigned int v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnaly"
                           "sisInfo:siriNetworkAnalysisInfo:]";
                    int v114 = 2112;
                    int v115 = v80;
                    unsigned int v116 = 2112;
                    int v117 = v81;
                    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_INFO,  "%s Got redirect %@ for %@",  buf,  0x20u);
                  }

                  [v82 setRedirect:v80 forServerURLString:v81];
                  [v82 synchronize];

                  id v15 = v99;
                  goto LABEL_89;
                }
              }
            }

            uint16x8_t v84 = (os_log_s *)AFSiriLogContextSession;
            if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 136315650;
              unsigned int v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInf"
                     "o:siriNetworkAnalysisInfo:]";
              int v114 = 2114;
              int v115 = v80;
              unsigned int v116 = 2114;
              int v117 = v81;
              _os_log_error_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_ERROR,  "%s Ignoring redirect %{public}@ for %{public}@",  buf,  0x20u);
            }

            id v15 = v99;
          }

          if (v14 && !-[NSString ad_isRetryableConnectionError](v14, "ad_isRetryableConnectionError")
            || self->_isAttemptingRetry
            && !-[NSString ad_isStricterRetryableConnectionError]( v14,  "ad_isStricterRetryableConnectionError")
            || !-[ADSessionRemoteServer _shouldRetry](self, "_shouldRetry")
            || -[ADSession state](self, "state") >= 11
            && (uint16x8_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession delegate](self, "delegate")),
                uint8x16_t v86 = [v85 assistantSessionShouldAttemptRetry:self],
                v85,
                !v86))
          {
            int v87 = (os_log_s *)AFSiriLogContextSession;
            if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              unsigned int v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInf"
                     "o:siriNetworkAnalysisInfo:]";
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "%s No retrying", buf, 0xCu);
            }

            __int16 v12 = v104;
            if (self->_siriNetworkEnablementExperimentActivated) {
              unsigned int v88 = (void *)objc_claimAutoreleasedReturnValue(-[ADSessionRemoteServer _siriNetworkManager](self, "_siriNetworkManager"));
            }
            else {
              unsigned int v88 = (void *)objc_claimAutoreleasedReturnValue(-[ADSessionRemoteServer _networkManager](self, "_networkManager"));
            }
            unsigned int v89 = v88;
            int v90 = v102;
            [v88 releaseWiFiAssertion];

            -[ADSession _clearLimbo](self, "_clearLimbo");
            -[ADSessionRemoteServer _resetServerConnection](self, "_resetServerConnection");
            -[ADSessionRemoteServer _informDelegateOfError:](self, "_informDelegateOfError:", v14);
LABEL_95:

            goto LABEL_96;
          }

  [v16 setBundleID:@"com.apple.siri"];
  [v16 setReproducibility:a5];
  [v16 setClassification:a6];
  id v30 = [sub_1002D4814() shared];
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1002D48C8;
  v33[3] = &unk_1004FCC00;
  __int128 v34 = v13;
  uint64_t v32 = v13;
  [v31 createDraft:v16 forProcessNamed:@"Siri" withDisplayReason:v12 completionHandler:v33];
}

  return v2;
}
}

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_5:
  endpointConnection = self->_endpointConnection;
  int8x16_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (!endpointConnection)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)location = 136315394;
      *(void *)&location[4] = "-[ADRemoraEndpointConnectivitySession sendMessage:completion:]";
      __int16 v18 = 2048;
      id v19 = self;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s %p Ignored because the endpoint connection has not been set up yet.",  location,  0x16u);
      if (!v7) {
        goto LABEL_12;
      }
    }

    else if (!v7)
    {
      goto LABEL_12;
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 44LL));
    v7[2](v7, v13);

    goto LABEL_12;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)location = 136315906;
    *(void *)&location[4] = "-[ADRemoraEndpointConnectivitySession sendMessage:completion:]";
    __int16 v18 = 2048;
    id v19 = self;
    __int16 v20 = 2112;
    uint64_t v21 = endpointConnection;
    uint64_t v22 = 2112;
    __int16 v23 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s %p endpointConnection = %@, payload = %@",  location,  0x2Au);
  }

  objc_initWeak((id *)location, self);
  __int16 v12 = self->_endpointConnection;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10007664C;
  void v14[3] = &unk_1004F36D0;
  objc_copyWeak(&v16, (id *)location);
  id v15 = v7;
  -[ADRemoraEndpointConnection sendMessage:completionHandler:](v12, "sendMessage:completionHandler:", v6, v14);

  objc_destroyWeak(&v16);
  objc_destroyWeak((id *)location);
LABEL_12:
}
}

  id v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v5);
  }
}

  id v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t, id))(v8 + 16))(v8, a2, v5);
  }
}

  return v5;
}

  if (v7)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( -[ADAnnounceDeviceSelector announceIdToRemoteAssistantIdMap]( self,  "announceIdToRemoteAssistantIdMap"));
    [v13 setObject:v7 forKey:v8];
  }

  __int16 v14 = dispatch_time(0LL, 60000000000LL);
  cachePurgeQueue = (dispatch_queue_s *)self->_cachePurgeQueue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100100904;
  block[3] = &unk_1004FD4C0;
  void block[4] = self;
  id v19 = v8;
  __int16 v20 = v6;
  dispatch_after(v14, cachePurgeQueue, block);

LABEL_13:
}
}
}

void sub_100075378( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100075648( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100075918( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100075E9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100076140(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v8 = v6;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v12 = 136315650;
    uint64_t v13 = "-[ADRemoraEndpointConnectivitySession _relinquishEndpointAssertion]_block_invoke";
    __int16 v14 = 2048;
    id v15 = WeakRetained;
    __int16 v16 = 1024;
    LODWORD(v17) = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s %p status = %d", (uint8_t *)&v12, 0x1Cu);

    if (!v5) {
      goto LABEL_5;
    }
  }

  else if (!v5)
  {
    goto LABEL_5;
  }

  uint64_t v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v10 = v7;
    id v11 = objc_loadWeakRetained((id *)(a1 + 32));
    int v12 = 136315650;
    uint64_t v13 = "-[ADRemoraEndpointConnectivitySession _relinquishEndpointAssertion]_block_invoke";
    __int16 v14 = 2048;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v12, 0x20u);
  }

uint64_t sub_1000762D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000762EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v9 = v6;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v13 = 136315650;
    __int16 v14 = "-[ADRemoraEndpointConnectivitySession releaseAssertionWithCompletion:]_block_invoke";
    __int16 v15 = 2048;
    id v16 = WeakRetained;
    __int16 v17 = 1024;
    LODWORD(v1_Block_object_dispose(va, 8) = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s %p status = %d", (uint8_t *)&v13, 0x1Cu);

    if (!v5) {
      goto LABEL_5;
    }
  }

  else if (!v5)
  {
    goto LABEL_5;
  }

  uint64_t v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v11 = v7;
    id v12 = objc_loadWeakRetained((id *)(a1 + 40));
    int v13 = 136315650;
    __int16 v14 = "-[ADRemoraEndpointConnectivitySession releaseAssertionWithCompletion:]_block_invoke";
    __int16 v15 = 2048;
    id v16 = v12;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v13, 0x20u);
  }

void sub_10007649C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v9 = v6;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v13 = 136315650;
    __int16 v14 = "-[ADRemoraEndpointConnectivitySession acquireAssertionWithCompletion:]_block_invoke";
    __int16 v15 = 2048;
    id v16 = WeakRetained;
    __int16 v17 = 1024;
    LODWORD(v1_Block_object_dispose(va, 8) = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s %p status = %d", (uint8_t *)&v13, 0x1Cu);

    if (!v5) {
      goto LABEL_5;
    }
  }

  else if (!v5)
  {
    goto LABEL_5;
  }

  uint64_t v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v11 = v7;
    id v12 = objc_loadWeakRetained((id *)(a1 + 40));
    int v13 = 136315650;
    __int16 v14 = "-[ADRemoraEndpointConnectivitySession acquireAssertionWithCompletion:]_block_invoke";
    __int16 v15 = 2048;
    id v16 = v12;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v13, 0x20u);
  }

void sub_10007664C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    id v5 = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v8 = 136315650;
    id v9 = "-[ADRemoraEndpointConnectivitySession sendMessage:completion:]_block_invoke";
    __int16 v10 = 2048;
    id v11 = WeakRetained;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v8, 0x20u);
  }

  else
  {
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_5;
    }
    id v5 = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v8 = 136315394;
    id v9 = "-[ADRemoraEndpointConnectivitySession sendMessage:completion:]_block_invoke";
    __int16 v10 = 2048;
    id v11 = WeakRetained;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s %p done", (uint8_t *)&v8, 0x16u);
  }

LABEL_5:
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_1000767D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 24) == *(void *)(a1 + 40))
  {
    [*(id *)(a1 + 32) _invalidate];
  }

  else
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "-[ADRemoraEndpointConnectivitySession endpointConnectionInvalidated:]_block_invoke";
      __int16 v5 = 2048;
      uint64_t v6 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s %p Ignored because the endpoint connection changed.",  (uint8_t *)&v3,  0x16u);
    }
  }

void sub_1000768C0(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  if (v1[3] == a1[5])
  {
    objc_initWeak((id *)buf, v1);
    uint64_t v4 = (void *)a1[4];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100076A34;
    v6[3] = &unk_1004F3870;
    objc_copyWeak(&v7, (id *)buf);
    __int16 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _remoteServiceDelegateWithErrorHandler:v6]);
    [v5 didReceiveMessage:a1[6] error:a1[7]];

    objc_destroyWeak(&v7);
    objc_destroyWeak((id *)buf);
  }

  else
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[ADRemoraEndpointConnectivitySession endpointConnection:didReceiveMessage:error:]_block_invoke";
      __int16 v10 = 2048;
      id v11 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s %p Ignored because the endpoint connection changed.",  buf,  0x16u);
    }
  }

void sub_100076A10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100076A34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    __int16 v5 = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v7 = 136315650;
    int v8 = "-[ADRemoraEndpointConnectivitySession endpointConnection:didReceiveMessage:error:]_block_invoke";
    __int16 v9 = 2048;
    id v10 = WeakRetained;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_100076B2C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  if (v1[3] == a1[5])
  {
    objc_initWeak((id *)buf, v1);
    uint64_t v4 = (void *)a1[4];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100076CA0;
    v6[3] = &unk_1004F3870;
    objc_copyWeak(&v7, (id *)buf);
    __int16 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _remoteServiceDelegateWithErrorHandler:v6]);
    [v5 didChangeState:a1[7] error:a1[6]];

    objc_destroyWeak(&v7);
    objc_destroyWeak((id *)buf);
  }

  else
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v9 = "-[ADRemoraEndpointConnectivitySession endpointConnection:didChangeState:error:]_block_invoke";
      __int16 v10 = 2048;
      __int16 v11 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s %p Ignored because the endpoint connection changed.",  buf,  0x16u);
    }
  }

void sub_100076C7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100076CA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    __int16 v5 = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v7 = 136315650;
    int v8 = "-[ADRemoraEndpointConnectivitySession endpointConnection:didChangeState:error:]_block_invoke";
    __int16 v9 = 2048;
    id v10 = WeakRetained;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_100076D98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleXPCConnectionInvalidation];
}

void sub_100076DC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleXPCConnectionInterruption];
}

void sub_1000775E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 8);
  *(void *)(v2 + _Block_object_dispose(va, 8) = 0LL;

  *(void *)(*(void *)(a1 + 32) + 16LL) = 0LL;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[ADDeviceRouter requestLifecycleObserver:requestDidEndWithInfo:origin:client:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s #hal _currentDeviceContextTuples cleared",  (uint8_t *)&v5,  0xCu);
  }

void sub_1000776A4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_queue_s **)(v2 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100077700;
  v4[3] = &unk_1004FC4D0;
  void v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_100077700(uint64_t a1)
{
  uint64_t v2 = 1LL;
  if (*(_BYTE *)(a1 + 40)) {
    uint64_t v2 = 2LL;
  }
  *(void *)(*(void *)(a1 + 32) + 16LL) = v2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADDeviceRouter requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke_2";
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal local device is a follower in a stereo pair? %d",  (uint8_t *)&v5,  0x12u);
  }

void sub_1000777D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16LL);
  BOOL v5 = v4 == 2;
  if (!v4)
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v25 = "-[ADDeviceRouter getPreferredDeviceToHandleCommand:logNearbyDeviceMetrics:executionContext:sharedUserID:comp"
            "letion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s #hal local device follower status not ready",  buf,  0xCu);
    }
  }

  if (objc_msgSend(*(id *)(a1 + 40), "ad_requiresProximityInformationForDeviceContextTuples:", v3))
  {
    id v7 = sub_10029CB20(v3);
    int v8 = (__CFString *)objc_claimAutoreleasedReturnValue(v7);
    __int16 v9 = *(void **)(a1 + 40);
    id v10 = *(void **)(*(void *)(a1 + 32) + 32LL);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100077A58;
    v16[3] = &unk_1004EF0D0;
    __int16 v17 = v8;
    id v18 = v9;
    id v19 = v3;
    id v20 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 56);
    BOOL v23 = v5;
    id v22 = *(id *)(a1 + 64);
    __int16 v11 = v8;
    [v10 getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:v11 includesAllReachableDevices:0 completion:v16];

    id v12 = v17;
  }

  else
  {
    __int16 v11 = (__CFString *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "ad_executionDeviceForDeviceContextTuples:executionContext:proximityMap:sharedUserID:localDeviceIsFollower:",  v3,  *(void *)(a1 + 48),  0,  *(void *)(a1 + 56),  v4 == 2));
    id v12 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString peerInfo](v11, "peerInfo"));
    id v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = @"local device";
      uint64_t v15 = *(void *)(a1 + 40);
      if (v12) {
        __int16 v14 = v12;
      }
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v25 = "-[ADDeviceRouter getPreferredDeviceToHandleCommand:logNearbyDeviceMetrics:executionContext:sharedUserID:comp"
            "letion:]_block_invoke";
      __int16 v26 = 2112;
      uint64_t v27 = v14;
      __int16 v28 = 2112;
      uint64_t v29 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s #hal Preferred handling device is %@ for command: %@",  buf,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_100077A58(uint64_t a1, void *a2)
{
  id v3 = sub_10029C7B0(a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = AFCoreAnalyticsEventCreateForDeviceContexts(*(void *)(a1 + 32), v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "ad_executionDeviceForDeviceContextTuples:executionContext:proximityMap:sharedUserID:localDeviceIsFollower:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v4,  *(void *)(a1 + 64),  *(unsigned __int8 *)(a1 + 80)));
  int v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 peerInfo]);
  __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v10 = @"local device";
    uint64_t v11 = *(void *)(a1 + 40);
    if (v8) {
      id v10 = v8;
    }
    int v12 = 136315650;
    id v13 = "-[ADDeviceRouter getPreferredDeviceToHandleCommand:logNearbyDeviceMetrics:executionContext:sharedUserID:comple"
          "tion:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s #hal Preferred handling device is %@ for prox-based command: %@",  (uint8_t *)&v12,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100077BA8(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_100077C4C;
  v8[3] = &unk_1004FBA38;
  v8[1] = 3221225472LL;
  uint64_t v11 = a1[6];
  void v8[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, v8);
}

uint64_t sub_100077C4C(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  id v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = v2 - *(void *)(a1 + 56);
    uint64_t v6 = v3;
    int v7 = 136315394;
    int v8 = "-[ADDeviceRouter _fetchCurrentDeviceContextTuplesIfNecessaryWithCompletion:]_block_invoke_2";
    __int16 v9 = 2048;
    uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds(v5);
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s #hal context updated after %llu milliseconds",  (uint8_t *)&v7,  0x16u);
  }

  [*(id *)(a1 + 32) _updateContext:*(void *)(a1 + 40)];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100077D4C(id a1, AFPeerContentTuple *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = v5;
    int v7 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerContentTuple content](a2, "content"));
    int v8 = 136315394;
    __int16 v9 = "-[ADDeviceRouter _updateContext:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s #hal %@", (uint8_t *)&v8, 0x16u);
  }

void sub_100077E24(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[1])
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADDeviceRouter updateContext:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal context already updated",  (uint8_t *)&v4,  0xCu);
    }
  }

  else
  {
    [v2 _updateContext:*(void *)(a1 + 40)];
  }

uint64_t sub_100078274(uint64_t a1, void *a2)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "timerSnapshot", 0));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 timersByID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allValues]);

  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    while (2)
    {
      __int16 v9 = 0LL;
      do
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        __int16 v10 = *(void **)(a1 + 32);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v14 + 1) + 8 * (void)v9) timerURL]);
        LOBYTE(v10) = [v10 containsObject:v11];

        if ((v10 & 1) != 0)
        {
          uint64_t v12 = 1LL;
          goto LABEL_11;
        }

        __int16 v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  uint64_t v12 = 0LL;
LABEL_11:

  return v12;
}

id sub_1000789BC(void *a1, void *a2, int a3)
{
  id v5 = a1;
  id v6 = a2;
  if ([v5 count] && objc_msgSend(v6, "count"))
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100078E10;
    v22[3] = &unk_1004EF0F8;
    id v7 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v6);
    BOOL v23 = v7;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100078F88;
    v20[3] = &unk_1004EF120;
    uint64_t v8 = objc_retainBlock(v22);
    id v21 = v8;
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 indexesOfObjectsPassingTest:v20]);
    if (![v9 count])
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_100078F98;
      v18[3] = &unk_1004EF120;
      id v19 = v8;
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 indexesOfObjectsPassingTest:v18]);

      __int16 v9 = (void *)v10;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectsAtIndexes:v9]);
    uint64_t v12 = v11;
    if (a3) {
      id v13 = &stru_1004EF160;
    }
    else {
      id v13 = &stru_1004EF180;
    }
    id v14 = [v11 indexOfObjectPassingTest:v13];
    if (v14 == (id)0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v15 = objc_claimAutoreleasedReturnValue([v12 firstObject]);
    }
    else {
      uint64_t v15 = objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:v14]);
    }
    __int128 v16 = (void *)v15;
  }

  else
  {
    __int128 v16 = 0LL;
  }

  return v16;
}

ADDeviceRouterResult *sub_100078B98(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    if ([v7 fromLocalDevice])
    {
      uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v26 = 136315650;
        uint64_t v27 = "ADDeviceRouterResultForDeviceContextWithFiringAlarm";
        __int16 v28 = 2112;
        id v29 = v9;
        __int16 v30 = 2112;
        id v31 = v8;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #hal %@ local alarms: %@",  (uint8_t *)&v26,  0x20u);
      }

      uint64_t v11 = 0LL;
    }

    else
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceInfo]);
      id v14 = sub_10016563C(v13, 0LL);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

      __int128 v16 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v21 = v16;
        uint64_t CompactDescription = AFPeerInfoGetCompactDescription(v15);
        BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(CompactDescription);
        uint64_t Name = AFDeviceProximityGetName(a2);
        __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(Name);
        int v26 = 136316162;
        uint64_t v27 = "ADDeviceRouterResultForDeviceContextWithFiringAlarm";
        __int16 v28 = 2112;
        id v29 = v9;
        __int16 v30 = 2112;
        id v31 = v8;
        __int16 v32 = 2112;
        __int128 v33 = v23;
        __int16 v34 = 2112;
        __int128 v35 = v25;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s #hal %@ alarms: %@ on %@, proximity: %@",  (uint8_t *)&v26,  0x34u);
      }

      uint64_t v11 = -[ADPeerInfo initWithAFPeerInfo:](objc_alloc(&OBJC_CLASS___ADPeerInfo), "initWithAFPeerInfo:", v15);
    }

    __int128 v17 = objc_alloc(&OBJC_CLASS___ADDeviceRouterResult);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 contextCollectorSource]);
    uint64_t v12 = -[ADDeviceRouterResult initWithPeerInfo:contextIdentifier:proximity:commandRelayProxyIdentifier:error:]( v17,  "initWithPeerInfo:contextIdentifier:proximity:commandRelayProxyIdentifier:error:",  v11,  v18,  a2,  v19,  0LL);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  return v12;
}

uint64_t sub_100078E10(uint64_t a1, void *a2, char a3)
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "alarmSnapshot", 0));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 alarmsByID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allValues]);

  id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v20;
    char v11 = a3 ^ 1;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(v7);
        }
        id v13 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v14 = *(void **)(a1 + 32);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 alarmURL]);
        if ([v14 containsObject:v15])
        {
          char v16 = [v13 isFiring] | v11;

          if ((v16 & 1) != 0)
          {
            uint64_t v17 = 1LL;
            goto LABEL_13;
          }
        }

        else
        {
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v9);
  }

  uint64_t v17 = 0LL;
LABEL_13:

  return v17;
}

uint64_t sub_100078F88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100078F98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

BOOL sub_100078FA8(id a1, AFDeviceContext *a2, unint64_t a3, BOOL *a4)
{
  return -[AFDeviceContext fromLocalDevice](a2, "fromLocalDevice", a3, a4);
}

BOOL sub_100078FB0(id a1, AFDeviceContext *a2, unint64_t a3, BOOL *a4)
{
  return -[AFDeviceContext fromLocalDevice](a2, "fromLocalDevice", a3, a4) ^ 1;
}

void sub_100079F38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100079FF0;
  block[3] = &unk_1004FD9E0;
  id v7 = *(dispatch_queue_s **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

void sub_100079FF0(void *a1)
{
  uint64_t v1 = a1[6];
  if (v1)
  {
    id v3 = (void *)a1[4];
    if (v3 || (id v8 = (void *)a1[5]) == 0LL)
    {
      int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"timer-data"]);
      if (v4)
      {
        id v5 = off_1005725D8();
        if (v5)
        {
          id v17 = 0LL;
          id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v5,  v4,  &v17));
          id v7 = v17;
          if (v6)
          {
            (*(void (**)(void))(a1[6] + 16LL))();
          }

          else
          {
            id v14 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 136315394;
              __int128 v19 = "-[ADRemoteTimerManager _sendStereoPartnerAction:timerID:changes:completion:]_block_invoke";
              __int16 v20 = 2112;
              id v21 = v7;
              _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Failed to deserialize reply time data (error = %@).",  buf,  0x16u);
            }

            uint64_t v15 = a1[6];
            char v16 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2110LL,  0LL,  v7));
            (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0LL, v16);
          }
        }

        else
        {
          id v12 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315138;
            __int128 v19 = "-[ADRemoteTimerManager _sendStereoPartnerAction:timerID:changes:completion:]_block_invoke";
            _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Unable to get MTTimer class.",  buf,  0xCu);
          }

          uint64_t v13 = a1[6];
          id v7 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2110LL,  @"Unable to get MTTimer class.",  0LL));
          (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0LL, v7);
        }
      }

      else
      {
        id v10 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int128 v19 = "-[ADRemoteTimerManager _sendStereoPartnerAction:timerID:changes:completion:]_block_invoke";
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s No reply timer data.", buf, 0xCu);
        }

        uint64_t v11 = a1[6];
        id v7 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2112LL,  0LL,  a1[5]));
        (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v7);
      }
    }

    else
    {
      id v9 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        __int128 v19 = "-[ADRemoteTimerManager _sendStereoPartnerAction:timerID:changes:completion:]_block_invoke_2";
        __int16 v20 = 2112;
        id v21 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s No reply message (error = %@).",  buf,  0x16u);
        id v8 = (void *)a1[5];
        uint64_t v1 = a1[6];
      }

      (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0LL, v8);
    }
  }

id sub_10007A330()
{
  return (id)qword_100577A90;
}

id sub_10007A33C()
{
  if (qword_100577A88 != -1) {
    dispatch_once(&qword_100577A88, &stru_1004EF218);
  }
  return (id)qword_100577A90;
}

void sub_10007A37C(id a1)
{
  if (qword_100577A98 != -1) {
    dispatch_once(&qword_100577A98, &stru_1004EF238);
  }
  qword_100577A90 = (uint64_t)objc_getClass("MTTimer");
  off_1005725D8 = sub_10007A330;
}

void sub_10007A3D8(id a1)
{
  qword_100577AA0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer", 2);
}

void sub_10007A400(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    if (v5)
    {
      id v14 = 0LL;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v5,  1LL,  &v14));
      id v9 = v14;
      if (v8)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        __int128 v19 = @"timer-data";
        __int16 v20 = v8;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
        (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v6);
      }

      else
      {
        id v12 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          char v16 = "-[ADRemoteTimerManager handleMessage:messageType:fromDeviceWithIdentifier:completion:]_block_invoke";
          __int16 v17 = 2112;
          id v18 = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Failed to serialize time data (error = %@)",  buf,  0x16u);
        }

        uint64_t v13 = *(void *)(a1 + 32);
        if (v6)
        {
          (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0LL, v6);
          goto LABEL_11;
        }

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2109LL,  0LL,  v9));
        (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v11);
      }

LABEL_11:
      goto LABEL_12;
    }

    (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0LL, v6);
  }

void sub_10007A5DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    if (v5)
    {
      id v14 = 0LL;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v5,  1LL,  &v14));
      id v9 = v14;
      if (v8)
      {
        uint64_t v10 = *(void *)(a1 + 32);
        __int128 v19 = @"timer-data";
        __int16 v20 = v8;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
        (*(void (**)(uint64_t, void *, id))(v10 + 16))(v10, v11, v6);
      }

      else
      {
        id v12 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          char v16 = "-[ADRemoteTimerManager handleMessage:messageType:fromDeviceWithIdentifier:completion:]_block_invoke";
          __int16 v17 = 2112;
          id v18 = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Failed to serialize time data (error = %@)",  buf,  0x16u);
        }

        uint64_t v13 = *(void *)(a1 + 32);
        if (v6)
        {
          (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0LL, v6);
          goto LABEL_11;
        }

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2109LL,  0LL,  v9));
        (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v11);
      }

LABEL_11:
      goto LABEL_12;
    }

    (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0LL, v6);
  }

void sub_10007A7B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10007A838;
  v3[3] = &unk_1004EF1F8;
  id v4 = *(id *)(a1 + 48);
  [v1 _sendStereoPartnerAction:@"remove-timer" timerID:v2 changes:0 completion:v3];
}

uint64_t sub_10007A838(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007A84C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10007A8D4;
  v4[3] = &unk_1004EF1F8;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v1 _sendStereoPartnerAction:@"update-timer" timerID:v2 changes:v3 completion:v4];
}

uint64_t sub_10007A8D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007A8E8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _storageForDeviceWithIdentifier:*(void *)(a1 + 40)]);
  [v2 beginGrouping];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  [v2 endGroupingWithOptions:0];
}

id sub_10007A944(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _invalidateStorageForDeviceWithIdentifier:*(void *)(a1 + 40)];
}

id sub_10007A950(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storageForDeviceWithIdentifier:*(void *)(a1 + 40)];
}

void sub_10007A974(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10007AA20;
  v7[3] = &unk_1004EF1D0;
  id v8 = v2;
  id v6 = v2;
  [v3 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = -[NSMutableDictionary copy](v6, "copy");
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_10007AA20(uint64_t a1, void *a2, void *a3)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10007AAD0;
  v8[3] = &unk_1004FD6A0;
  id v9 = a3;
  id v7 = v9;
  id v5 = a2;
  id v6 = +[AFClockTimerSnapshot newWithBuilder:](&OBJC_CLASS___AFClockTimerSnapshot, "newWithBuilder:", v8);
  [*(id *)(a1 + 32) setObject:v6 forKey:v5];
}

void sub_10007AAD0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setGeneration:", objc_msgSend(v3, "generation"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) date]);
  [v4 setDate:v5];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemsByID]);
  [v4 setTimersByID:v6];
}

void sub_10007AB60(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _storageForDeviceWithIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10007AC08;
  v6[3] = &unk_1004FD6A0;
  id v7 = v2;
  id v5 = v2;
  id v4 = +[AFClockTimerSnapshot newWithBuilder:](&OBJC_CLASS___AFClockTimerSnapshot, "newWithBuilder:", v6);
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_10007AC08(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setGeneration:", objc_msgSend(v3, "generation"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) date]);
  [v4 setDate:v5];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemsByID]);
  [v4 setTimersByID:v6];
}

LABEL_18:
}

  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s There is no zoneInfo - do nothing & return",  buf,  0xCu);
  }

  id v7 = 0LL;
LABEL_50:
}

LABEL_19:
LABEL_20:
  if (v8)
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = 136315394;
      id v21 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
      __int128 v22 = 2112;
      BOOL v23 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v20, 0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

LABEL_25:
}

      uint64_t v15 = 0;
      goto LABEL_19;
    }

    if (!v12)
    {
      uint64_t v15 = 1;
      goto LABEL_19;
    }

    unint64_t v44 = 136315138;
    char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
    char v16 = "%s Sending location to server because it asked us for location update";
    uint64_t v15 = 1;
    goto LABEL_10;
  }

  if (![(id)objc_opt_class(self) _shouldUseOneshotLocationRequest])
  {
    if (!-[ADLocationManager allowAdHocSendingLocationToServer](self, "allowAdHocSendingLocationToServer"))
    {
      __int16 v17 = (os_log_s *)AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        unint64_t v44 = 136315138;
        char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Not sending location to server because running full UOD",  (uint8_t *)&v44,  0xCu);
      }

      goto LABEL_18;
    }

    if (-[ADLocationManager needsToSendLocation](self, "needsToSendLocation"))
    {
      uint64_t v11 = (void *)AFSiriLogContextLocation;
      uint64_t v15 = 1;
      if (!os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO)) {
        goto LABEL_19;
      }
      unint64_t v44 = 136315138;
      char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
      char v16 = "%s Sending location to server because of needsToSendLocation override";
      goto LABEL_10;
    }

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(-[ADLocationManager locationSentToServer](self, "locationSentToServer"));
    if (v19)
    {
      if (-[ADLocationManager isNavigating](self, "isNavigating")) {
        __int16 v20 = 1.0;
      }
      else {
        __int16 v20 = 5.0;
      }
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v6 timestamp]);
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v19 timestamp]);
      [v21 timeIntervalSinceDate:v22];
      id v24 = v23;

      if (v24 - v20 <= 2.22044605e-16)
      {
        __int128 v35 = (os_log_s *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          unint64_t v44 = 136315650;
          char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
          char v46 = 2048;
          unsigned int v47 = v24;
          unint64_t v48 = 2048;
          char v49 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s Not sending location to server because location age difference %.3g is less than or equal to %.3g",  (uint8_t *)&v44,  0x20u);
        }

        goto LABEL_39;
      }

      objc_msgSend(v6, "horizontalAccuracy", v24 - v20);
      int v26 = v25;
      [v19 horizontalAccuracy];
      if (v26 - v27 < -2.22044605e-16)
      {
        __int16 v28 = (void *)AFSiriLogContextLocation;
        uint64_t v15 = 1;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          id v29 = v28;
          [v6 horizontalAccuracy];
          id v31 = v30;
          [v19 horizontalAccuracy];
          unint64_t v44 = 136315650;
          char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
          char v46 = 2048;
          unsigned int v47 = v31;
          unint64_t v48 = 2048;
          char v49 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%s Sending location to server because new location accuracy %.3g is better than old %.3g",  (uint8_t *)&v44,  0x20u);
        }

        goto LABEL_40;
      }

      [v6 horizontalAccuracy];
      if (v36 - kCLLocationAccuracyHundredMeters <= 2.22044605e-16
        && ([v19 horizontalAccuracy], v37 - kCLLocationAccuracyHundredMeters <= 2.22044605e-16)
        && ([v19 distanceFromLocation:v6], v38 + -10.0 >= 2.22044605e-16))
      {
        __int128 v33 = (os_log_s *)AFSiriLogContextLocation;
        uint64_t v15 = 1;
        if (!os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO)) {
          goto LABEL_40;
        }
        unint64_t v44 = 136315138;
        char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
        __int16 v34 = "%s Sending location to server because new location is further than 10m from previously sent";
      }

      else
      {
        [v6 verticalAccuracy];
        if (v39 + -30.0 > 2.22044605e-16
          || ([v19 verticalAccuracy], v40 + -30.0 > 2.22044605e-16)
          || ([v6 altitude], char v42 = v41, objc_msgSend(v19, "altitude"), vabdd_f64(v42, v43) < 10.0))
        {
LABEL_39:
          uint64_t v15 = 0;
          goto LABEL_40;
        }

        __int128 v33 = (os_log_s *)AFSiriLogContextLocation;
        uint64_t v15 = 1;
        if (!os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO)) {
          goto LABEL_40;
        }
        unint64_t v44 = 136315138;
        char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
        __int16 v34 = "%s Sending location to server because location altitude has changed for more than 50 centimeters";
      }
    }

    else
    {
      __int128 v33 = (os_log_s *)AFSiriLogContextLocation;
      uint64_t v15 = 1;
      if (!os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
LABEL_40:

        goto LABEL_19;
      }

      unint64_t v44 = 136315138;
      char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
      __int16 v34 = "%s Sending location to server because never sent it to server during this session";
    }

    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, v34, (uint8_t *)&v44, 0xCu);
    goto LABEL_40;
  }

  uint64_t v11 = (void *)AFSiriLogContextLocation;
  uint64_t v15 = 1;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    unint64_t v44 = 136315138;
    char v45 = "-[ADLocationManager shouldSendLocationToServer:forAceCommand:]";
    char v16 = "%s Sending location to server because because it's running on stationary device";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, OS_LOG_TYPE_INFO, v16, (uint8_t *)&v44, 0xCu);
  }

  int v26 = v13;
  if (!v9) {
    goto LABEL_27;
  }
LABEL_19:
  if (v8 && ([v9 isValidForSiriSessionLanguage:v8] & 1) == 0)
  {
    uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      char v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
      unsigned int v71 = 2112;
      unint64_t v72 = v9;
      char v73 = 2112;
      char v74 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "%s output voice %@ is not supported for language code %@ for this device",  buf,  0x20u);
    }

    if (v25) {
      __int16 v28 = 0LL;
    }
    else {
      __int16 v28 = v26;
    }
    id v29 = v28;

    id v9 = v29;
  }

  if ([*(id *)(a1 + 56) isEqualToString:v12])
  {
    char v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 assistantIdentifier]);
    [v16 endDictationSessionWithAssistantId:v18];
  }
}
}

  return v5;
}

    BOOL v23 = 0;
    goto LABEL_19;
  }

  char v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_timerInfo, "objectForKey:", v12));

  if (v16)
  {
    __int16 v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      char v50 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]";
      unsigned int v51 = 2112;
      unint64_t v52 = *(double *)&v12;
      id v18 = "%s already tracking timer for message: %@";
      __int128 v19 = v17;
      __int16 v20 = 22;
LABEL_17:
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
      goto LABEL_18;
    }

    goto LABEL_18;
  }

  if (a5 <= 0.0)
  {
    __int16 v30 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      char v50 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]";
      unsigned int v51 = 2048;
      unint64_t v52 = a5;
      char v53 = 2112;
      char v54 = v12;
      id v18 = "%s invalid timeout (%f) for message: %@";
      __int128 v19 = v30;
      __int16 v20 = 32;
      goto LABEL_17;
    }

    goto LABEL_18;
  }

  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v13 idsDeviceIdentifier]);
  __int128 v22 = [v39 length];
  BOOL v23 = v22 != 0LL;
  if (v22)
  {
    if (!self->_timerInfo)
    {
      id v24 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
      timerInfo = self->_timerInfo;
      self->_timerInfo = v24;
    }

    int v26 = objc_opt_new(&OBJC_CLASS___ADCompanionServiceRequestTimerInfo);
    objc_initWeak((id *)buf, self);
    uint64_t v27 = &unk_1003C9000;
    if (v8)
    {
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      v44[2] = sub_10023F370;
      v44[3] = &unk_1004F7648;
      char v45 = v12;
      objc_copyWeak(v48, (id *)buf);
      v48[1] = *(id *)&a5;
      *(double *)&v48[2] = a5 * 0.5;
      char v46 = self;
      unsigned int v47 = v39;
      __int16 v28 = objc_retainBlock(v44);
      id v29 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( objc_alloc(&OBJC_CLASS___AFWatchdogTimer),  "initWithTimeoutInterval:onQueue:timeoutHandler:",  self->_serialQueue,  v28,  a5 * 0.5);
      -[ADCompanionServiceRequestTimerInfo setHeartbeatTimer:](v26, "setHeartbeatTimer:", v29);
      __int128 v38 = v29;

      objc_destroyWeak(v48);
      uint64_t v27 = (void *)&unk_1003C9000;
    }

    else
    {
      __int128 v38 = 0LL;
    }

    __int128 v33 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
    serialQueue = self->_serialQueue;
    v40[0] = _NSConcreteStackBlock;
    v40[1] = v27[280];
    v40[2] = sub_10023F5D8;
    v40[3] = &unk_1004F7670;
    __int128 v35 = v12;
    char v41 = v35;
    objc_copyWeak(&v43, (id *)buf);
    char v42 = v14;
    __int128 v36 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v33,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  serialQueue,  v40,  a5);
    -[ADCompanionServiceRequestTimerInfo setRequestTimer:](v26, "setRequestTimer:", v36);
    -[NSMutableDictionary setObject:forKey:](self->_timerInfo, "setObject:forKey:", v26, v35);
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    [v37 systemUptime];
    -[ADCompanionServiceRequestTimerInfo setStartTime:](v26, "setStartTime:");

    -[AFWatchdogTimer start](v36, "start");
    -[AFWatchdogTimer start](v38, "start");

    objc_destroyWeak(&v43);
    objc_destroyWeak((id *)buf);
  }

  else
  {
    __int16 v32 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      char v50 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]";
      unsigned int v51 = 2112;
      unint64_t v52 = *(double *)&v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%s target device lacks IDS identifier: %@",  buf,  0x16u);
    }
  }

LABEL_19:
  return v23;
}

  self = self;
  __int128 v39 = self;
LABEL_23:

  return v39;
}

    ((void (*)(void *))v13[2])(v13);
    goto LABEL_19;
  }

  if (!-[ADCommandCenter _metrics_isSystemIdle](self, "_metrics_isSystemIdle"))
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]";
      __int16 v20 = "%s Attempted to send offline metrics when system is busy.";
      goto LABEL_15;
    }

    goto LABEL_18;
  }

  if (!-[ADCommandCenter _metrics_isAssistantOrDictationEnabled](self, "_metrics_isAssistantOrDictationEnabled"))
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]";
      __int16 v20 = "%s Attempted to send offline metrics when Assistant and Dictation are disabled.";
      goto LABEL_15;
    }

    goto LABEL_18;
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v18 = [v17 isDictationHIPAACompliant];

  if (v18)
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]";
      __int16 v20 = "%s Attempted to send offline metrics when HIPAA compliance for On-Device Dictation.";
LABEL_15:
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, v20, buf, 0xCu);
      goto LABEL_18;
    }

    goto LABEL_18;
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[AFSiriDataSharingSensitivityManager shared]( &OBJC_CLASS___AFSiriDataSharingSensitivityManager,  "shared"));
  __int128 v22 = [v21 isOptedOutOfMTE];

  if (v22)
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresAc"
          "tiveSession:completion:]";
    __int16 v20 = "%s #MTEOptOut Attempted to send offline metrics when device is opted out of MTE";
    goto LABEL_15;
  }

  if (v7 && (IOPSDrawingUnlimitedPower() & 1) == 0)
  {
    __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresAc"
          "tiveSession:completion:]";
    __int16 v20 = "%s Attempted to send offline metrics when the device is on battery.";
    goto LABEL_15;
  }

  if (v6)
  {
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _sessionManager](self, "_sessionManager"));
    id v24 = [v23 hasActiveSessionForSendingMetrics];

    if ((v24 & 1) == 0)
    {
      __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_18;
      }
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]";
      __int16 v20 = "%s Skipped sending metrics to server because the session is not active.";
      goto LABEL_15;
    }
  }

  __int16 v25 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v36 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresAc"
          "tiveSession:completion:]";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%s Fetching next offline metrics...", buf, 0xCu);
  }

  int v26 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _offlineMetricsManager](self, "_offlineMetricsManager"));
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10026E4FC;
  v27[3] = &unk_1004F8820;
  v27[4] = self;
  __int16 v30 = a3;
  id v31 = v6;
  __int16 v32 = v7;
  __int16 v28 = v12;
  id v29 = v13;
  [v26 fetchNextMetricsUsingBlock:v27];

LABEL_19:
}
}

      id v14 = (char *)v14 + 1;
    }

    while (v12 != v14);
    BOOL v23 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v29,  v33,  16LL);
    id v12 = v23;
  }

  while (v23);
LABEL_22:

  return v28;
}

            id v12 = v24;
            uint64_t v15 = v32;
          }
        }

        __int16 v17 = (char *)v17 + 1;
      }

      while (v17 != v15);
      uint64_t v15 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
    }

    while (v15);
  }

  if ((([v30 isEqualToString:_UNNotificationContentTypeMessagingDirect] & 1) != 0
     || [v30 isEqualToString:_UNNotificationContentTypeMessagingGroup])
    && (__int16 v28 = &off_100513828, ([obj containsObject:&off_100513828] & 1) != 0)
    || [v30 isEqualToString:_UNNotificationContentTypeIntercom]
    && (__int16 v28 = &off_100513840, ([obj containsObject:&off_100513840] & 1) != 0)
    || [v30 isEqualToString:_UNNotificationContentTypeVoicemail]
    && (__int16 v28 = &off_100513858, ([obj containsObject:&off_100513858] & 1) != 0)
    || [v30 isEqualToString:_UNNotificationContentTypeIncomingCall]
    && (__int16 v28 = &off_100513870, [obj containsObject:&off_100513870]))
  {
    -[NSMutableSet addObject:](v34, "addObject:", v28);
  }

  return v34;
}

  char v16 = 0LL;
LABEL_19:

  return v16;
}

    id v5 = 0LL;
    return v5;
  }

  id v12 = (void *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = *(_DWORD *)(*(void *)(a1 + 40) + 40LL);
    id v14 = v12;
    uint64_t v15 = sub_10031DA50(v13);
    char v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v30 = "-[ADSpeechManager _prepareAudioSystemWithContext:audioSessionAssertion:completion:]_block_invoke";
    id v31 = 2112;
    __int16 v32 = *(double *)&v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Begin speech recorder preparation. (speechState = %@)",  buf,  0x16u);
  }

  __int16 v17 = mach_absolute_time();
  id v18 = *(void **)(a1 + 48);
  __int16 v28 = 0LL;
  [v18 prepareSpeechCaptureWithOptions:v3 error:&v28];
  __int128 v19 = v28;
  __int16 v20 = (void *)AFSiriLogContextSpeech;
  if (!v19)
  {
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      id v24 = v20;
      __int16 v25 = mach_absolute_time();
      TimeInterval = AFMachAbsoluteTimeGetTimeInterval(v25 - v17);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v30 = "-[ADSpeechManager _prepareAudioSystemWithContext:audioSessionAssertion:completion:]_block_invoke";
      id v31 = 2048;
      __int16 v32 = TimeInterval;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s End speech recorder preparation. (duration = %f)",  buf,  0x16u);
    }

    goto LABEL_18;
  }

  id v5 = v19;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    id v21 = v20;
    __int128 v22 = mach_absolute_time();
    BOOL v23 = AFMachAbsoluteTimeGetTimeInterval(v22 - v17);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v30 = "-[ADSpeechManager _prepareAudioSystemWithContext:audioSessionAssertion:completion:]_block_invoke";
    id v31 = 2112;
    __int16 v32 = *(double *)&v5;
    __int128 v33 = 2048;
    __int16 v34 = v23;
    _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s End speech recorder preparation with error %@. (duration = %f)",  buf,  0x20u);
  }

  return v5;
}

  return v11;
}

id sub_10007B9DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateConnection];
}

id sub_10007B9E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateConnection];
}

void sub_10007B9EC(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    id v5 = "-[ADUserNotificationAnnouncementSpeakingStatePublisher connectionProxy]_block_invoke";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error retrieving remote object proxy: %@",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_10007BAAC(void *a1)
{
  uint64_t v1 = a1;
  id v2 = (void *)a1[4];
  uint64_t v3 = v2[3];
  if (v3)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = v1[5];
      *(_DWORD *)__int128 buf = 136315650;
      BOOL v23 = "-[ADUserNotificationAnnouncementSpeakingStatePublisher listener:shouldAcceptNewConnection:]_block_invoke";
      __int16 v24 = 2112;
      uint64_t v25 = v5;
      __int16 v26 = 2112;
      uint64_t v27 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s New connection: %@ while one exists: %@. Invalidating old connection",  buf,  0x20u);
      id v2 = (void *)v1[4];
    }

    a1 = [v2 _invalidateConnection];
  }

  __int16 v6 = (void *)v1[5];
  uint64_t XPCInterface = AFUserNotificationAnnouncementSpeakingStateServiceGetXPCInterface(a1);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(XPCInterface);
  [v6 setExportedInterface:v8];

  id v9 = [(id)v1[5] setExportedObject:v1[4]];
  uint64_t v10 = (void *)v1[5];
  uint64_t v11 = AFUserNotificationAnnouncementSpeakingStateServiceDelegateGetXPCInterface(v9);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v10 setRemoteObjectInterface:v12];

  objc_initWeak((id *)buf, (id)v1[4]);
  uint64_t v13 = (void *)v1[5];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10007BCE8;
  v20[3] = &unk_1004FAF58;
  objc_copyWeak(&v21, (id *)buf);
  [v13 setInvalidationHandler:v20];
  id v14 = (void *)v1[5];
  uint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  __int16 v17 = sub_10007BD14;
  id v18 = &unk_1004FAF58;
  objc_copyWeak(&v19, (id *)buf);
  [v14 setInterruptionHandler:&v15];
  objc_msgSend((id)v1[5], "resume", v15, v16, v17, v18);
  objc_storeStrong((id *)(v1[4] + 24LL), (id)v1[5]);
  objc_destroyWeak(&v19);
  objc_destroyWeak(&v21);
  objc_destroyWeak((id *)buf);
}

void sub_10007BCB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_10007BCE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained connectionInvalidated];
}

void sub_10007BD14(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained connectionInterrupted];
}

id sub_10007BD40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _publishCancelAndRemoveAllObjectsForReason:@"Request was cancelled."];
}

id sub_10007BD50(uint64_t a1)
{
  return [*(id *)(a1 + 32) _publishFinishedAndRemoveAllObjectsForReason:@"Request ended."];
}

id sub_10007BD60(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_publishFinishedAndRemoveAllObjectsForReason:",  @"New request is starting but we have unfinished identifiers, which shouldn't be possible.");
}

id sub_10007BD70(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _publishObjectHasArrived:*(void *)(a1 + 40)];
}

void sub_10007BFE4(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___ADUserNotificationAnnouncementSpeakingStatePublisher);
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v6 = dispatch_queue_create("com.apple.assistant.announcement-state-manager", v3);

  id v4 = -[ADUserNotificationAnnouncementSpeakingStatePublisher _initWithQueue:](v1, "_initWithQueue:", v6);
  uint64_t v5 = (void *)qword_100577AB0;
  qword_100577AB0 = (uint64_t)v4;
}

void sub_10007CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

LABEL_17:
      uint64_t result = 0LL;
      if (!self->_shouldTakeRouteFromOtherConnectedDevice) {
        return result;
      }
      goto LABEL_18;
    }

  avAudioRouteuint64_t Name = self->_avAudioRouteName;
  id v19 = (void *)objc_claimAutoreleasedReturnValue(-[AFSiriAudioRoute routeName](v6, "routeName"));
  LODWORD(avAudioRouteName) = -[NSString isEqualToString:](avAudioRouteName, "isEqualToString:", v19);

  if (!(_DWORD)avAudioRouteName) {
    goto LABEL_21;
  }
  availableAnnouncementRequestTypes = (id)self->_availableAnnouncementRequestTypes;
  if (availableAnnouncementRequestTypes != (id)-[AFSiriAudioRoute availableAnnouncementRequestTypes]( v6,  "availableAnnouncementRequestTypes")) {
    goto LABEL_21;
  }
  announcePlatformForRoute = (id)self->_announcePlatformForRoute;
  if (announcePlatformForRoute != (id)-[AFSiriAudioRoute announcePlatformForRoute](v6, "announcePlatformForRoute")) {
    goto LABEL_21;
  }
  __int128 v22 = -[AFSiriAudioRoute hasAuthenticationCapability](self, "hasAuthenticationCapability");
  id v12 = v22 ^ -[AFSiriAudioRoute hasAuthenticationCapability](v6, "hasAuthenticationCapability") ^ 1;
LABEL_22:

  return v12;
}

    id v18 = 0;
    goto LABEL_18;
  }

  -[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion:]( self,  "_fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion:",  self->_multiUserRecordZoneInfo,  a4,  0LL,  0LL,  v15,  0LL,  v9);
  id v18 = 1;
LABEL_18:

LABEL_19:
  return v18;
}

      if (v25) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }

    if ((v23 & 1) != 0) {
      goto LABEL_17;
    }
    __int16 v26 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v26 logEventWithType:4307 context:0];

    if (v25) {
      goto LABEL_21;
    }
LABEL_18:
    unsigned int v170 = 0LL;
    __int128 v36 = -[SiriCoreSQLiteDatabase performIntegrityCheckWithError:]( v19,  "performIntegrityCheckWithError:",  &v170);
    uint64_t v25 = v170;
    if ((v36 & 1) != 0) {
      goto LABEL_20;
    }
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    __int128 v38 = AFAnalyticsContextCreateWithError(v25);
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v193[0] = v39;
    int v191 = @"retryCount";
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v20));
    uint64_t v192 = v40;
    char v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v192,  &v191,  1LL));
    v193[1] = v41;
    char v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v193, 2LL));
    unsigned int v43 = AFAnalyticsContextsMerge();
    unint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    [v37 logEventWithType:4303 context:v44];

    uint64_t v3 = v151;
    char v45 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      char v61 = v151->_path;
      *(_DWORD *)__int128 buf = 136316162;
      uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
      uint64_t v196 = 2048;
      unsigned int v197 = v20;
      int v198 = 2048;
      int v199 = 3LL;
      unsigned int v200 = 2112;
      uint64_t v201 = (__CFString *)v61;
      uint64_t v202 = 2112;
      uint64_t v203 = v25;
      _os_log_error_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%s Failed to perform integrity check on analytics database (retry %tu/%tu) at path %@ with error %@.",  buf,  0x34u);
      if (!v25) {
        goto LABEL_39;
      }
    }

    else
    {
LABEL_20:
      if (!v25) {
        goto LABEL_39;
      }
    }

LABEL_22:
    goto LABEL_23;
  }

  *a4 = 0LL;
  if ([v6 count]) {
    goto LABEL_5;
  }
  *a4 = 0LL;
LABEL_18:
  id v19 = 1;
LABEL_23:

  return v19;
}

  return v22;
}

LABEL_18:
    goto LABEL_19;
  }

  id v14 = (os_log_s *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v24 = "-[ADAnalyticsStore _updateRecordsWithSpeechId:toUpdatedSpeechId:error:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Attempting to updated event records to NULL speechId",  buf,  0xCu);
  }

  uint64_t v15 = 0;
LABEL_19:

  return v15;
}

  return v13;
}

    [v11 closeWithError:0];
    if (SiriCoreSQLiteDatabaseIsErrorUnrecoverable(v17)
      && (__int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager")),
          uint64_t v25 = [v24 fileExistsAtPath:v7],
          v24,
          v25))
    {
      __int16 v26 = v14;
      uint64_t v27 = v8;
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      unint64_t v60 = v17;
      id v29 = [v28 removeItemAtPath:v7 error:&v60];
      uint64_t v10 = v60;

      if ((v29 & 1) != 0)
      {
        id v8 = v27;
      }

      else
      {
        id v8 = v27;
        __int16 v30 = *v27;
        if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315906;
          char v65 = "-[ADCloudKitCapabilitiesDataStore _preparedDatabaseWithError:]";
          char v66 = 2048;
          unsigned int v67 = v12;
          unint64_t v68 = 2112;
          char v69 = v7;
          char v70 = 2112;
          unsigned int v71 = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s Failed to remove database (retry #%tu) at path %@ due to %@.",  buf,  0x2Au);
        }
      }

      id v14 = v26;
      uint64_t v13 = &OBJC_CLASS___NSPredicate_ptr;
    }

    else
    {
      uint64_t v10 = v17;
    }

    id v12 = (const __CFString *)((char *)v12 + 1);
  }

  while (v12 != (const __CFString *)3);
  if (!v10)
  {
LABEL_37:
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(-[_ADCloudKitCapabilitiesDataStoreHelper tableDescription](v55->_helper, "tableDescription"));
    __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 name]);
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v11 fetchTableWithName:v34 error:0]);

    if (v35)
    {
      __int128 v36 = objc_claimAutoreleasedReturnValue( -[ADCloudKitCapabilitiesDataStore _addMissingColumnsForTable:withDescription:inDatabase:]( v55,  "_addMissingColumnsForTable:withDescription:inDatabase:",  v35,  v33,  v11));
      uint64_t v10 = (__CFString *)v36;
      __int128 v37 = v56;
      if (!v56 || !v36)
      {
LABEL_42:
        char v53 = v35;
        char v57 = v33;
        unint64_t v52 = objc_alloc(&OBJC_CLASS___SiriCoreSQLiteTableDescription);
        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteColumnDescription uniqueTextColumnWithName:]( &OBJC_CLASS___SiriCoreSQLiteColumnDescription,  "uniqueTextColumnWithName:",  @"capabilities_type"));
        v63[0] = v39;
        __int128 v40 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"last_sync_date" type:@"REAL" constraints:0];
        v63[1] = v40;
        char v41 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"last_sync_os" type:@"TEXT" constraints:0];
        v63[2] = v41;
        char v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v63, 3LL));
        unsigned int v43 = [v52 initWithName:@"metadata" columns:v42 constraints:0];

        unint64_t v44 = v43;
        char v45 = (void *)objc_claimAutoreleasedReturnValue([v43 name]);
        char v46 = (void *)objc_claimAutoreleasedReturnValue([v11 fetchTableWithName:v45 error:0]);

        if (v46)
        {
          unsigned int v47 = (__CFString *)objc_claimAutoreleasedReturnValue( -[ADCloudKitCapabilitiesDataStore _addMissingColumnsForTable:withDescription:inDatabase:]( v55,  "_addMissingColumnsForTable:withDescription:inDatabase:",  v46,  v43,  v11));

          if (v37)
          {
            __int128 v33 = v57;
            if (!v47) {
              goto LABEL_52;
            }
LABEL_56:
            unsigned int v47 = v47;
            *__int128 v37 = v47;
LABEL_57:
            __int16 v32 = 1;
            goto LABEL_58;
          }
        }

        else
        {
          char v58 = v10;
          char v49 = [v11 createTable:v43 error:&v58];
          unsigned int v47 = v58;

          if ((v49 & 1) == 0)
          {
            char v50 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 136315650;
              char v65 = "-[ADCloudKitCapabilitiesDataStore _preparedDatabaseWithError:]";
              char v66 = 2112;
              unsigned int v67 = @"device_capabilities";
              unint64_t v68 = 2112;
              char v69 = v47;
              _os_log_error_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "%s Failed to create '%@' table with error %@",  buf,  0x20u);
            }

            __int128 v33 = v57;
            if (!v37) {
              goto LABEL_57;
            }
            goto LABEL_56;
          }
        }

        __int128 v33 = v57;
LABEL_52:
        -[_ADCloudKitCapabilitiesDataStoreHelper createIndicesForTableInDatabase:]( v55->_helper,  "createIndicesForTableInDatabase:",  v11);
        objc_storeStrong(location, v11);
        __int16 v32 = 0;
LABEL_58:

        uint64_t v10 = v47;
        __int128 v35 = v53;
        goto LABEL_59;
      }
    }

    else
    {
      unsigned int v59 = 0LL;
      __int128 v38 = [v11 createTable:v33 error:&v59];
      uint64_t v10 = (__CFString *)v59;
      __int128 v37 = v56;
      if ((v38 & 1) != 0) {
        goto LABEL_42;
      }
      unint64_t v48 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315650;
        char v65 = "-[ADCloudKitCapabilitiesDataStore _preparedDatabaseWithError:]";
        char v66 = 2112;
        unsigned int v67 = @"device_capabilities";
        unint64_t v68 = 2112;
        char v69 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "%s Failed to create '%@' table with error %@",  buf,  0x20u);
        if (!v56) {
          goto LABEL_49;
        }
      }

      else if (!v56)
      {
LABEL_49:
        __int16 v32 = 1;
LABEL_59:

        goto LABEL_60;
      }
    }

    uint64_t v10 = v10;
    *__int128 v37 = v10;
    goto LABEL_49;
  }

  id v31 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    char v65 = "-[ADCloudKitCapabilitiesDataStore _preparedDatabaseWithError:]";
    char v66 = 2112;
    unsigned int v67 = v10;
    _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%s Failed to prepare analytics database due to %@.",  buf,  0x16u);
  }

  if (v56)
  {
    uint64_t v10 = v10;
    *unint64_t v56 = v10;
  }

  __int16 v32 = 1;
LABEL_60:

  if (v32)
  {
    dispatch_queue_t v6 = 0LL;
    return v6;
  }

  database = (SiriCoreSQLiteDatabase *)*location;
LABEL_4:
  dispatch_queue_t v6 = database;
  return v6;
}
}
}
}

      goto LABEL_31;
    }

    id v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v28 = 136315138;
      *(void *)&v28[4] = "-[ADBackgroundContextCache _updateDefaultTokenInDynamiteClientState:]";
      __int16 v20 = "%s Have a preferredMediaUserSharedUserID but was unable to find token associated with them";
      id v21 = v19;
      __int128 v22 = 12;
LABEL_22:
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v20, v28, v22);
    }
  }

  else if (AFIsHorseman(v6, v7))
  {
    preferredMediaUserHomeUserID = self->_preferredMediaUserHomeUserID;
    if (preferredMediaUserHomeUserID)
    {
      id v14 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int16 v28 = 136315395;
        *(void *)&v28[4] = "-[ADBackgroundContextCache _updateDefaultTokenInDynamiteClientState:]";
        *(_WORD *)&v28[12] = 2113;
        *(void *)&v28[14] = preferredMediaUserHomeUserID;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Have a preferredMediaUserHomeUserID (%{private}@)",  v28,  0x16u);
      }

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v15 getSharedUserIdForHomeUserId:self->_preferredMediaUserHomeUserID]);

      if (v11)
      {
        uint64_t v16 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](self->_allMusicPersonalizationTokens, "objectForKey:", v11));
        if (v16)
        {
          __int16 v17 = (void *)v16;
          -[ADBackgroundContextCache _setDefaultToken:inDynamiteClientState:]( self,  "_setDefaultToken:inDynamiteClientState:",  v16,  v4);
          id v18 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int16 v28 = 136315138;
            *(void *)&v28[4] = "-[ADBackgroundContextCache _updateDefaultTokenInDynamiteClientState:]";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Successfully set token based on preferredMediaUserHomeUserID",  v28,  0xCu);
          }

          goto LABEL_17;
        }

        uint64_t v25 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int16 v28 = 136315138;
          *(void *)&v28[4] = "-[ADBackgroundContextCache _updateDefaultTokenInDynamiteClientState:]";
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s Have a preferredMediaUserHomeUserID but was unable to find token associated with them",  v28,  0xCu);
        }
      }

      else
      {
        BOOL v23 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          __int16 v24 = self->_preferredMediaUserHomeUserID;
          *(_DWORD *)__int16 v28 = 136315395;
          *(void *)&v28[4] = "-[ADBackgroundContextCache _updateDefaultTokenInDynamiteClientState:]";
          *(_WORD *)&v28[12] = 2113;
          *(void *)&v28[14] = v24;
          __int16 v20 = "%s No sharedUserID found for preferredMediaUserHomeUserID (%{private}@)";
          id v21 = v23;
          __int128 v22 = 22;
          goto LABEL_22;
        }
      }
    }
  }

  musicPersonalizationToken = self->_musicPersonalizationToken;
  if (musicPersonalizationToken || self->_musicPersonalizationTokenStatus)
  {
    uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int16 v28 = 136315138;
      *(void *)&v28[4] = "-[ADBackgroundContextCache _updateDefaultTokenInDynamiteClientState:]";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%s Using default musicPersonalizationToken since we didn't find one for preferredMediaUserSharedUserID or it wasn't set",  v28,  0xCu);
      musicPersonalizationToken = self->_musicPersonalizationToken;
    }

    -[ADBackgroundContextCache _setDefaultToken:inDynamiteClientState:]( self,  "_setDefaultToken:inDynamiteClientState:",  musicPersonalizationToken,  v4,  *(_OWORD *)v28,  *(void *)&v28[16]);
  }

  dispatch_queue_t v6 = *v5;

  uint64_t v3 = v6;
  return v3;
}

  dispatch_queue_t v6 = *v5;

  uint64_t v3 = v6;
  return v3;
}

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 idsDeviceIdentifier]);
      -[ADCompanionService setStereoPartnerIDSIdentifier:](self, "setStereoPartnerIDSIdentifier:", v15);
    }

    else
    {
      -[ADCompanionService setStereoPartnerIDSIdentifier:](self, "setStereoPartnerIDSIdentifier:", 0LL);
    }
  }
  }

  return v9;
}
}
}

LABEL_15:
  return v4;
}

    id v7 = (id *)&SACompanionExecutionFailedErrorCode;
    goto LABEL_22;
  }

  id v4 = 0LL;
LABEL_24:

  return v4;
}

LABEL_15:
    if (isRouteCurrentlyPicked) {
      goto LABEL_16;
    }
    goto LABEL_17;
  }

  return v6;
}
}

  uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  1801LL,  0LL,  *(_OWORD *)v20,  *(void *)&v20[16],  v21,  v22));
  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (v15)
  {
    uint64_t v16 = (void *)v15;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v20 = 136315650;
      *(void *)&void v20[4] = "-[ADMobileBluetoothDeviceProxy _changeHeadphoneListeningMode:completion:]_block_invoke";
      *(_WORD *)&v20[12] = 2048;
      *(void *)&v20[14] = a2;
      *(_WORD *)&v20[22] = 2048;
      id v21 = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Unable to set listening mode for BTDevice %p via BTAccessoryManager %p",  v20,  0x20u);
    }

    goto LABEL_23;
  }

  -[NSMutableArray addObject:](v17, "addObject:", SAAlarmDayOfWeekFridayValue);
  if ((v15 & 0x20) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v15 & 0x40) != 0) {
LABEL_17:
  }
    -[NSMutableArray addObject:](v17, "addObject:", SAAlarmDayOfWeekSundayValue);
LABEL_18:
  if (-[NSMutableArray count](v17, "count"))
  {
    id v18 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v17));
  }

  else
  {
    uint64_t v25 = SAAlarmDayOfWeekNeverValue;
    id v18 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v25, 1LL));
  }

  id v19 = (void *)v18;
  -[SAAlarmObject setFrequency:](v10, "setFrequency:", v18);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v8 title]);
  -[SAAlarmObject setLabel:](v10, "setLabel:", v20);

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v8 isFiring]));
  -[SAAlarmObject setFiring:](v10, "setFiring:", v21);

  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v8 isEnabled]));
  -[SAAlarmObject setEnabled:](v10, "setEnabled:", v22);

  BOOL v23 = (void *)objc_claimAutoreleasedReturnValue( -[ADContextManager _dataSourceInfoWithProximity:deviceContext:]( self,  "_dataSourceInfoWithProximity:deviceContext:",  a4,  v9));
  -[SAAlarmObject setDataSourceInfo:](v10, "setDataSourceInfo:", v23);

  return v10;
}

  return v21;
}
}
}
}
  }

  if (!v9) {
    goto LABEL_18;
  }
  uint64_t v16 = objc_alloc(&OBJC_CLASS___AFExperiment);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v4 version]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v9 properties]);
  id v21 = [v16 initWithConfigurationIdentifier:v17 configurationVersion:v18 deploymentGroupIdentifier:v19 deploymentGroupProperties:v20 deploymentReason:2];

LABEL_19:
  return v21;
}

    id v21 = 0LL;
    __int128 v22 = 1;
    goto LABEL_16;
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  __int16 v32 = 0LL;
  id v18 = [v17 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:&v32];
  uint64_t v11 = (NSString *)v32;

  if (v18)
  {

    goto LABEL_15;
  }

  id v19 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Unable to create directory at path %@.",  v8);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v19,  v11));

LABEL_11:
  if (!v12) {
    goto LABEL_15;
  }
  __int16 v20 = (os_log_s *)AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v35 = "ADCreateTrimmedAudioDirectory";
    __int128 v36 = 2112;
    __int128 v37 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
  }

  id v21 = v12;
  __int128 v22 = 0;
LABEL_16:

  id v14 = v21;
  if (!v22)
  {
    __int16 v28 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v35 = "-[ADCommandCenter _storeExtractedSpeechLocally:]";
      __int128 v36 = 2112;
      __int128 v37 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    goto LABEL_26;
  }

  BOOL v23 = (void *)objc_claimAutoreleasedReturnValue([v3 speechData]);
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v3 speechDataUrl]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v24));
  id v31 = v14;
  [v23 writeToURL:v25 options:2 error:&v31];
  __int16 v26 = v31;

  uint64_t v27 = (void *)AFSiriLogContextDaemon;
  if (!v26)
  {
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_27;
    }
    id v14 = v27;
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 speechDataUrl]);
    *(_DWORD *)__int128 buf = 136315650;
    __int128 v35 = "-[ADCommandCenter _storeExtractedSpeechLocally:]";
    __int128 v36 = 2112;
    __int128 v37 = (os_log_s *)v3;
    __int128 v38 = 2112;
    __int128 v39 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s extractSpeechDataCompleted = %@ (speechDataUrl = %@)",  buf,  0x20u);
LABEL_25:

LABEL_26:
    goto LABEL_27;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v29 = v27;
    __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s userInfo](v26, "userInfo"));
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v35 = "-[ADCommandCenter _storeExtractedSpeechLocally:]";
    __int128 v36 = 2112;
    __int128 v37 = v30;
    _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%s error writing data %@", buf, 0x16u);
  }

LABEL_27:
}

  __int16 v17 = v8 - Milliseconds;
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  (double)-v14 / 1000.0));
  id v19 = -[NSDateInterval initWithStartDate:duration:]( objc_alloc(&OBJC_CLASS___NSDateInterval),  "initWithStartDate:duration:",  v18,  (double)v17 / 1000.0);

LABEL_18:
  return v19;
}
}

  -[NSMutableArray addObject:](v3, "addObject:", SAAlarmDayOfWeekSaturdayValue);
  if ((a1 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if (!a1)
  {
    id v4 = &SAAlarmDayOfWeekNeverValue;
LABEL_17:
    -[NSMutableArray addObject:](v3, "addObject:", *v4);
  }

  return v3;
}

  return v6;
}

  __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int16 v26 = 136315138;
    uint64_t v27 = "-[ADMultiUserService getMultiUserSettingsForSharedUserID:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s User not found", (uint8_t *)&v26, 0xCu);
  }

  uint64_t v25 = a1[6];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6001LL,  0LL));
  (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0LL, v10);
LABEL_18:
}
}

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      return;
    }

    if (!*(_BYTE *)(a1 + 80))
    {
LABEL_20:
      uint64_t v15 = *(void **)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      id v18 = *(void *)(a1 + 32);
      __int16 v17 = *(void *)(a1 + 40);
      __int128 v22 = 0LL;
      [v15 _removeUser:v17 homeUserID:0 sharedUserID:v16 iCloudAltDSID:v18 error:&v22];
      uint64_t v10 = v22;
      id v19 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v21 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v27 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
        __int16 v28 = 2112;
        id v29 = v10;
        __int16 v30 = 2112;
        id v31 = v21;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s Removed user with error (%@). %@",  buf,  0x20u);
      }

      __int16 v20 = *(void **)(a1 + 48);
      if (v10)
      {
        [v20 triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 32) homeUserID:0 toState:2];
        [*(id *)(a1 + 48) triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 32) homeUserID:0 toState:1];
      }

      else
      {
        [v20 _postRemovalStateCleanup];
      }

      (*(void (**)(void, id))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), v10);
LABEL_8:

      return;
    }
  }

  else if (!*(_BYTE *)(a1 + 80))
  {
    goto LABEL_14;
  }

  id v12 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v27 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s Kicking off voice profile setup",  buf,  0xCu);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) getCloudKitManager]);
  id v14 = *(void **)(a1 + 32);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_100295AB4;
  v23[3] = &unk_1004FD740;
  v23[4] = *(void *)(a1 + 48);
  __int16 v24 = v14;
  uint64_t v25 = *(id *)(a1 + 64);
  [v13 forceMultiUserSync:0 download:1 activity:0 iCloudAltDSID:v24 completion:v23];
}

  return v9;
}
}

      id v14 = (NSString *)objc_claimAutoreleasedReturnValue(-[ADPeerInfo buildVersion](v6, "buildVersion"));
      goto LABEL_16;
    }

    uint64_t v11 = 0;
  }

void *sub_10007CFFC()
{
  id v4 = 0LL;
  if (!qword_100577AC0)
  {
    __int128 v5 = off_1004EF298;
    uint64_t v6 = 0LL;
    qword_100577AC0 = _sl_dlopen(&v5, &v4);
  }

  unint64_t v0 = (void *)qword_100577AC0;
  if (!qword_100577AC0)
  {
    unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *MediaExperienceLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"AFSiriAudioRoute.m",  25,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_10007D100()
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  unint64_t v0 = (id *)qword_100577AE0;
  uint64_t v8 = qword_100577AE0;
  if (!qword_100577AE0)
  {
    uint64_t v1 = sub_10007CFFC();
    unint64_t v0 = (id *)dlsym(v1, "AVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled");
    v6[3] = (uint64_t)v0;
    qword_100577AE0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    id v2 = *v0;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getAVSystemController_RouteDescriptionKey_PreferredExternalRouteDetails_InEarDetectEnabled(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"AFSiriAudioRoute.m",  28,  @"%s",  dlerror());

    __break(1u);
  }

void sub_10007D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_10007D558(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10007D56C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    uint64_t v8 = "-[ADMockServer _establishConnectionIfNeeded]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s MockServer XPC proxy error: %@",  (uint8_t *)&v7,  0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) invalidate];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 8);
  *(void *)(v5 + _Block_object_dispose(va, 8) = 0LL;
}

void sub_10007D694(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADMockServer);
  id v2 = (void *)qword_100577B18;
  qword_100577B18 = (uint64_t)v1;
}

void sub_10007E364(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  id v4 = a2;
  [v4 setGeneration:v3];
  [v4 setDate:a1[4]];
  [v4 setItems:a1[5]];
}

LABEL_37:
  char v41 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  char v42 = [v41 allowsAWDL];

  if (v42 == (id)2)
  {
    unint64_t v44 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "%s AWDL enabled", buf, 0xCu);
    }

    __int16 v24 = v24 & 0xFFFFFFFFFFBFFFF7LL | 8;
  }

  else if (v42 == (id)1)
  {
    unsigned int v43 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "%s AWDL disabled", buf, 0xCu);
    }

    __int16 v24 = v24 & 0xFFFFFFFFFFBFFFF7LL | 0x400000;
  }

  char v45 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  char v46 = [v45 allowsBLE];

  if (v46 == (id)2)
  {
    unint64_t v48 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "%s BLE enabled", buf, 0xCu);
    }

    v24 |= 2uLL;
  }

  else if (v46 == (id)1)
  {
    unsigned int v47 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "%s BLE disabled", buf, 0xCu);
    }

    v24 &= ~2uLL;
  }

  char v49 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  char v50 = [v49 allowsForceAWDL];

  if (v50 == (id)2)
  {
    unsigned int v51 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "%s ForceAWDL connection enabled", buf, 0xCu);
    }

    __int16 v24 = v24 & 0xFFFFFFFFFFBDFFF7LL | 0x20008;
  }

  unint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  char v53 = [v52 allowsForceBLE];

  if (v53 == (id)2)
  {
    char v54 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "%s ForceBLE enabled", buf, 0xCu);
    }

    v24 |= 0x8002uLL;
  }

  unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  unint64_t v56 = [v55 allowsBTPipe];

  if (v56 == (id)2)
  {
    char v58 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "%s BTPipe enabled", buf, 0xCu);
    }

    v24 |= 0x20uLL;
  }

  else if (v56 == (id)1)
  {
    char v57 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "%s BTPipe disabled", buf, 0xCu);
    }

    v24 &= ~0x20uLL;
  }

  unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  unint64_t v60 = [v59 allowsInfraWiFi];

  if (v60 == (id)2)
  {
    char v62 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%s Infra WiFi enabled", buf, 0xCu);
    }

    __int16 v24 = v24 & 0xFFFFFFFFFFDFFFFBLL | 4;
  }

  else if (v60 == (id)1)
  {
    char v61 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "%s Infra WiFi disabled", buf, 0xCu);
    }

    __int16 v24 = v24 & 0xFFFFFFFFFFDFFFFBLL | 0x200000;
  }

  unsigned int v63 = -[ADRapportLinkConfiguration enablesProximityTracking](v7->_configuration, "enablesProximityTracking");
  if (v63 == (id)2)
  {
    char v65 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "%s Proximity enabled", buf, 0xCu);
    }

    v24 |= 0x200000000uLL;
  }

  else if (v63 == (id)1)
  {
    unint64_t v64 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "%s Proximity disabled", buf, 0xCu);
    }

    v24 &= ~0x200000000uLL;
  }

  char v66 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration transportOptions](v7->_configuration, "transportOptions"));
  unsigned int v67 = [v66 noL2Cap];

  if (v67 == (id)2)
  {
    unint64_t v68 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "%s Disable Bluetooth L2Cap connection",  buf,  0xCu);
    }

    __int16 v24 = v24 & 0xFFFFFDFFFFFFFEFFLL | 0x20000000000LL;
  }

  char v69 = v24 | 0x4000000000000LL;
  -[RPCompanionLinkClient setControlFlags:](v7->_client, "setControlFlags:", v69);
  -[RPCompanionLinkClient setFlags:](v7->_client, "setFlags:", v23);
  char v70 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLinkConfiguration connectionOptions](v7->_configuration, "connectionOptions"));
  unsigned int v71 = [v70 usesOnDemandConnection] == (id)2;

  if (v71)
  {
    unint64_t v72 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkDevice);
    -[RPCompanionLinkDevice setIdentifier:](v72, "setIdentifier:", @"rapport:rdid:ContextCollector");
    -[RPCompanionLinkClient setDestinationDevice:](v7->_client, "setDestinationDevice:", v72);
    char v73 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      char v74 = v7->_client;
      *(_DWORD *)__int128 buf = 136315650;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      unint64_t v101 = 2112;
      int8x16x4_t v102 = v72;
      int8x16x4_t v103 = 2112;
      int v104 = v74;
      _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "%s #hal #on-demand Setting destination device:%@ on rapportLink:%@",  buf,  0x20u);
    }
  }

  else
  {
    unsigned int v75 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      unint64_t v76 = v7->_client;
      char v77 = v7->_configuration;
      *(_DWORD *)__int128 buf = 136316162;
      unsigned int v100 = "-[ADRapportLink initWithQueue:configuration:]";
      unint64_t v101 = 2112;
      int8x16x4_t v102 = v76;
      int8x16x4_t v103 = 2112;
      int v104 = v77;
      uint64_t v105 = 2048;
      unsigned int v106 = v69;
      int v107 = 1024;
      unsigned int v108 = (int)v23;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_INFO,  "%s #hal init rapportLink:%@ configuration:%@ controlFlags:%llx flags:%dx",  buf,  0x30u);
    }
  }

  objc_initWeak((id *)buf, v7);
  uint64_t v78 = v7->_client;
  v96[0] = _NSConcreteStackBlock;
  v96[1] = 3221225472LL;
  v96[2] = sub_100083B0C;
  v96[3] = &unk_1004FAF58;
  objc_copyWeak(&v97, (id *)buf);
  -[RPCompanionLinkClient setInterruptionHandler:](v78, "setInterruptionHandler:", v96);
  uint64_t v79 = v7->_client;
  v94[0] = _NSConcreteStackBlock;
  v94[1] = 3221225472LL;
  v94[2] = sub_100083B38;
  v94[3] = &unk_1004FAF58;
  objc_copyWeak(&v95, (id *)buf);
  -[RPCompanionLinkClient setInvalidationHandler:](v79, "setInvalidationHandler:", v94);
  int32x4_t v80 = v7->_client;
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 3221225472LL;
  v92[2] = sub_100083B64;
  v92[3] = &unk_1004EF300;
  objc_copyWeak(&v93, (id *)buf);
  -[RPCompanionLinkClient setLocalDeviceUpdatedHandler:](v80, "setLocalDeviceUpdatedHandler:", v92);
  uint64_t v81 = v7->_client;
  v90[0] = _NSConcreteStackBlock;
  v90[1] = 3221225472LL;
  v90[2] = sub_100083BAC;
  v90[3] = &unk_1004EF300;
  objc_copyWeak(&v91, (id *)buf);
  -[RPCompanionLinkClient setDeviceLostHandler:](v81, "setDeviceLostHandler:", v90);
  int v82 = v7->_client;
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472LL;
  v88[2] = sub_100083BF4;
  v88[3] = &unk_1004EF300;
  objc_copyWeak(&v89, (id *)buf);
  -[RPCompanionLinkClient setDeviceFoundHandler:](v82, "setDeviceFoundHandler:", v88);
  uint8x16_t v83 = v7->_client;
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472LL;
  v86[2] = sub_100083C3C;
  v86[3] = &unk_1004EF328;
  objc_copyWeak(&v87, (id *)buf);
  -[RPCompanionLinkClient setDeviceChangedHandler:](v83, "setDeviceChangedHandler:", v86);
  objc_destroyWeak(&v87);
  objc_destroyWeak(&v89);
  objc_destroyWeak(&v91);
  objc_destroyWeak(&v93);
  objc_destroyWeak(&v95);
  objc_destroyWeak(&v97);
  objc_destroyWeak((id *)buf);
LABEL_96:

  return v7;
}
}

          __int16 v34 = 0;
          goto LABEL_38;
        }

        if (v36)
        {
          char v61 = (void *)AFSiriLogContextConnection;
          if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
          {
            char v62 = v61;
            unsigned int v63 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"TrialNamespace"]);
            unint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v14 experimentId]);
            *(_DWORD *)__int128 buf = 136315906;
            int v82 = "+[ADExperimentManager(Tracer) logAssetSetExperiment:trialData:experimentsEmitted:]";
            uint8x16_t v83 = 2112;
            uint16x8_t v84 = v7;
            uint16x8_t v85 = 2112;
            uint8x16_t v86 = v63;
            int v87 = 2112;
            unsigned int v88 = v64;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "%s AssetSet %@ (%@), experiment %@ activated, logging already emitted",  buf,  0x2Au);
          }

          goto LABEL_37;
        }

        char v46 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        char v70 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"TrialNamespace"]);
        unsigned int v71 = objc_claimAutoreleasedReturnValue( +[ADExperimentManager expExperimentWithExperimentIdentifiers:status:trialNamespace:]( &OBJC_CLASS___ADExperimentManager,  "expExperimentWithExperimentIdentifiers:status:trialNamespace:"));

        uint64_t v79 = (void *)v71;
        -[NSMutableArray addObject:](v46, "addObject:", v71);
        +[ADExperimentManager emitUpdatedExperiments:]( &OBJC_CLASS___ADExperimentManager,  "emitUpdatedExperiments:",  v46);
        unint64_t v72 = (void *)AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          char v73 = v72;
          char v74 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"TrialNamespace"]);
          unsigned int v75 = (void *)objc_claimAutoreleasedReturnValue([v14 experimentId]);
          *(_DWORD *)__int128 buf = 136315906;
          int v82 = "+[ADExperimentManager(Tracer) logAssetSetExperiment:trialData:experimentsEmitted:]";
          uint8x16_t v83 = 2112;
          uint16x8_t v84 = v7;
          uint16x8_t v85 = 2112;
          uint8x16_t v86 = v74;
          int v87 = 2112;
          unsigned int v88 = v75;
          _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "%s AssetSet %@ (%@), experiment %@ activated, logging emitted",  buf,  0x2Au);

          __int128 v36 = 0LL;
        }

        unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v17 experimentId]);
        char v77 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"TrialNamespace"]);
        [v9 setObject:v76 forKey:v77];

        uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
        [v78 setExperimentsUAFEmitted:v9];
      }

      __int16 v34 = 1;
LABEL_38:

LABEL_39:
      goto LABEL_40;
    }
  }

  __int16 v30 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v31 = v30;
    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"TrialProject"]);
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"TrialNamespace"]);
    *(_DWORD *)__int128 buf = 136315906;
    int v82 = "+[ADExperimentManager(Tracer) logAssetSetExperiment:trialData:experimentsEmitted:]";
    uint8x16_t v83 = 2112;
    uint16x8_t v84 = v7;
    uint16x8_t v85 = 2112;
    uint8x16_t v86 = v32;
    int v87 = 2112;
    unsigned int v88 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s AssetSet %@ not configured to log. Trial Project: %@, Trial Namespace: %@",  buf,  0x2Au);
  }

  __int16 v34 = 0;
LABEL_40:

  return v34;
}

  return v13;
}

void sub_10007F59C(_Unwind_Exception *a1)
{
}

LABEL_96:
  return v29;
}
}

LABEL_9:
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  return v10;
}

    __int16 v24 = 0LL;
    goto LABEL_10;
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  __int128 v22 = [v21 _hasIncomingCall];

  if (!v22) {
    goto LABEL_9;
  }
  if (v13)
  {
    BOOL v23 = objc_alloc(&OBJC_CLASS___SACommandFailed);
    __int16 v24 = -[SACommandFailed initWithErrorCode:](v23, "initWithErrorCode:", SAPhoneCompanionHasIncomingCallErrorCode);
    (*((void (**)(id, SACommandFailed *, void))v13 + 2))(v13, v24, 0LL);
LABEL_11:
  }
}

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[ADPreferences accountInfoForIdentifier:](v5, "accountInfoForIdentifier:", v7));
  id v12 = (ADAccount *)objc_claimAutoreleasedReturnValue( +[ADAccount _accountForIdentifier:infoDictionary:intanceContext:isReadOnly:isCoupledToHost:]( &OBJC_CLASS___ADAccount,  "_accountForIdentifier:infoDictionary:intanceContext:isReadOnly:isCoupledToHost:",  v7,  v11,  v4,  v6,  1LL));

  if (!v12) {
    goto LABEL_12;
  }
LABEL_13:

  return v12;
}

  id v10 = (void *)SASyncSyncTypeAppInfoValue;
  uint64_t v11 = v5;
  id v12 = v10;
  if (v12 == v11)
  {

    if (!v5) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v13 = v12;
    if (!v5 || !v12)
    {

      goto LABEL_17;
    }

    id v14 = [v11 isEqual:v12];

    if ((v14 & 1) == 0)
    {
LABEL_17:
      uint64_t v15 = (void *)SASyncSyncTypeAppCustomVocabValue;
      uint64_t v16 = v11;
      __int16 v17 = v15;
      if (v17 == v16)
      {

        if (v5)
        {
LABEL_23:
          __int16 v9 = 2;
          goto LABEL_26;
        }
      }

      else
      {
        id v18 = v17;
        if (v5 && v17)
        {
          id v19 = [v16 isEqual:v17];

          if (!v19) {
            goto LABEL_25;
          }
          goto LABEL_23;
        }
      }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 aceId]);

  if (v12)
  {
    if (!self->_sessionOriginatedCommandTable)
    {
      uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      sessionOriginatedCommandTable = self->_sessionOriginatedCommandTable;
      self->_sessionOriginatedCommandTable = v13;
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v6 aceId]);
    uint64_t v16 = self->_sessionOriginatedCommandTable;
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v7 sessionId]);
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v17, v15);
  }

  return v11;
}
}

        id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) partialSerializedBackingStoreIncludingKeys:*(void *)(a1 + 48) excludingMandatoryKeys:*(void *)(a1 + 56)]);
        if (v12) {
          [*(id *)(a1 + 64) setObject:v12 forKey:v11];
        }

        goto LABEL_12;
      }
    }

    uint64_t v11 = v7;

    goto LABEL_9;
  }
}

  *(_BYTE *)(*(void *)(a1 + 32) + 224LL) = 0;
}

    v7[2](v7, v6, 0LL);
    goto LABEL_10;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[ADLocationManager _locationShifter](self, "_locationShifter"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_100186A00;
  v19[3] = &unk_1004F3D40;
  __int16 v20 = v6;
  id v21 = v7;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100186B74;
  v17[3] = &unk_1004FCC00;
  id v18 = v21;
  objc_msgSend( v16,  "shiftCoordinate:accuracy:withCompletionHandler:mustGoToNetworkCallback:errorHandler:callbackQueue:",  v19,  &stru_1004F3D60,  v17,  self->_internalQueue,  v11,  v13,  v15);

LABEL_10:
}
}

    uint64_t v5 = 0LL;
  }

  return v5;
}
}
}

  v6[2](v6, v18);
}

LABEL_51:
  }

  else
  {
    __int128 v37 = 0LL;
  }

LABEL_54:
  return v37;
}

    return;
  }

  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    unsigned int v47 = "-[ADCloudKitManager saveFileAssetRecordsWithDictionary:mirror:onZone:activity:completion:]_block_invoke";
    unint64_t v48 = 2112;
    char v49 = @"com.apple.assistant.multiuser.shared";
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s iCloud sync is disabled. Unable to save records to zone: (%@)",  buf,  0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4014LL));
    (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
    goto LABEL_51;
  }

  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueWiFi8021xValue);
  __int16 v17 = state64;
  if ((state64 & 0x20000) == 0)
  {
LABEL_30:
    if ((v17 & 0x40000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_53;
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_attemptCount));
  [v3 setObject:v25 forKey:@"attempt_count"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_5:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_53;
  }

  PBDataWriterWriteDoubleField(v5, 5LL, self->_pingMean);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_7:
    if ((*(_DWORD *)&has & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }

  *((_DWORD *)v4 + 44) = self->_rttCurrent;
  *((_DWORD *)v4 + 53) |= 0x100000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_53;
  }

  v5[10] = self->_txBytes;
  *((_DWORD *)v5 + 53) |= 0x200u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_WORD *)&has & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }

  char v46 = 0LL;
  if ((*(_DWORD *)&has & 0x80000) != 0)
  {
LABEL_35:
    char v45 = 2654435761LL * self->_rttBest;
    if ((*(_WORD *)&has & 0x400) != 0) {
      goto LABEL_36;
    }
    goto LABEL_53;
  }

  self->_pingMean = *((double *)v4 + 3);
  *(_DWORD *)&self->_has |= 4u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x20000) == 0)
  {
LABEL_7:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }

  self->_isDetectingUtterances = -[AFDictationOptions detectUtterances]( self->_dictationOptions,  "detectUtterances");
  *(_WORD *)&self->_shouldFinalizeRequestOnNextFinalResult = 0;

  return v14;
}

void sub_10008265C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = a1[4];
    uint64_t v23 = a1[5];
    int v24 = 136316162;
    uint64_t v25 = "-[ADRapportLink _sendRequestID:messageType:messagePayload:destinationID:options:completion:]_block_invoke";
    __int16 v26 = 2112;
    uint64_t v27 = v22;
    __int16 v28 = 2112;
    uint64_t v29 = v23;
    __int16 v30 = 2112;
    id v31 = v7;
    __int16 v32 = 2112;
    id v33 = v9;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Received response for requestID=%@, messageType=%@ : %@, error: %@",  (uint8_t *)&v24,  0x34u);
  }

  if (a1[6])
  {
    if (v9)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
      unsigned int v12 = [v11 isEqualToString:RPErrorDomain];

      if (v12)
      {
        if (AFIsInternalInstall(v13))
        {
          id v14 = (os_log_s *)AFSiriLogContextPerformance;
          os_signpost_id_t v15 = os_signpost_id_generate(AFSiriLogContextPerformance);
          if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            os_signpost_id_t v16 = v15;
            if (os_signpost_enabled(v14))
            {
              LOWORD(v24) = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  v16,  "CompanionRapportTransportError",  "ADRapportLink _sendRequestID",  (uint8_t *)&v24,  2u);
            }
          }
        }

        id v17 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  1000LL,  0LL,  v9));
      }

      else
      {
        id v17 = v9;
      }
    }

    else
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"payload"]);
      if (!v18 || (uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v18, v19) & 1) != 0))
      {
        __int16 v20 = 0LL;
LABEL_20:
        (*(void (**)(void))(a1[6] + 16LL))();

        goto LABEL_21;
      }

      id v21 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315138;
        uint64_t v25 = "-[ADRapportLink _sendRequestID:messageType:messagePayload:destinationID:options:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s received malformed response",  (uint8_t *)&v24,  0xCu);
      }

      id v17 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
    }

    __int16 v20 = v17;
    id v18 = 0LL;
    goto LABEL_20;
  }

void sub_100082914(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setIdsDeviceUniqueIdentifier:v3];
  [v4 setRapportEffectiveIdentifier:a1[5]];
  [v4 setHomeKitAccessoryIdentifier:a1[6]];
  [v4 setAssistantIdentifier:a1[7]];
}

void sub_100082974(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = RPOptionSenderIDSDeviceID;
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v4]);
  [v5 setIdsDeviceUniqueIdentifier:v6];

  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:RPOptionSenderID]);
  [v5 setRapportEffectiveIdentifier:v7];
}

void sub_100082A0C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"messageID"]);
  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315906;
    id v17 = "-[ADRapportLink _registerRequestID:options:handler:]_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    id v21 = v7;
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s incoming generic request: %@ %@ %@",  (uint8_t *)&v16,  0x2Au);
  }

  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADFMDMonitor sharedManager](&OBJC_CLASS___ADFMDMonitor, "sharedManager"));
  unsigned int v13 = [v12 isLostModeActive];

  if (v13)
  {
    id v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315138;
      id v17 = "-[ADRapportLink _registerRequestID:options:handler:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Lost mode is active, rejecting incoming request",  (uint8_t *)&v16,  0xCu);
    }

    os_signpost_id_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1003LL));
    (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0LL, 0LL, v15);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100082BF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportLink:didLoseDevice:") & 1) != 0) {
    [v3 rapportLink:*(void *)(a1 + 32) didLoseDevice:*(void *)(a1 + 40)];
  }
}

void sub_100082C44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportLink:didUpdateDevice:changes:") & 1) != 0) {
    [v3 rapportLink:*(void *)(a1 + 32) didUpdateDevice:*(void *)(a1 + 40) changes:*(unsigned int *)(a1 + 48)];
  }
}

void sub_100082C94(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportLink:didFindDevice:") & 1) != 0) {
    [v3 rapportLink:*(void *)(a1 + 32) didFindDevice:*(void *)(a1 + 40)];
  }
}

void sub_100082CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportLink:didUpdateLocalDevice:") & 1) != 0) {
    [v3 rapportLink:*(void *)(a1 + 32) didUpdateLocalDevice:*(void *)(a1 + 40)];
  }
}

void sub_100082D2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportLinkDidInvalidate:") & 1) != 0) {
    [v3 rapportLinkDidInvalidate:*(void *)(a1 + 32)];
  }
}

void sub_100082D78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportLinkDidInterrupt:") & 1) != 0) {
    [v3 rapportLinkDidInterrupt:*(void *)(a1 + 32)];
  }
}

id sub_100082DC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_100082DCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 32);
    uint64_t v6 = v4;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
    int v8 = 136315650;
    id v9 = "-[ADRapportLink updateLocalDeviceIsContextCollector:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s updated local context collector status to:%@ error:%@",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_100082ECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 32);
    uint64_t v6 = v4;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
    int v8 = 136315650;
    id v9 = "-[ADRapportLink updateLocalDeviceIsContextCollector:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s updated local context collector status to:%@ error:%@",  (uint8_t *)&v8,  0x20u);
  }
}

uint64_t sub_100082FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a4);
  }
  return result;
}

void sub_100082FE4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _destinationIDForPeerInfo:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v5 = v2;
    [*(id *)(a1 + 32) _sendRequestID:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) messagePayload:*(void *)(a1 + 64) destinationID:v2 options:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
LABEL_5:
    id v2 = v5;
    goto LABEL_6;
  }

  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 44LL));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);

    goto LABEL_5;
  }

void sub_100083080(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _destinationIDForDeviceAssistantIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v5 = v2;
    [*(id *)(a1 + 32) _sendRequestID:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) messagePayload:*(void *)(a1 + 64) destinationID:v2 options:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
LABEL_5:
    id v2 = v5;
    goto LABEL_6;
  }

  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 44LL));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);

    goto LABEL_5;
  }

void sub_10008311C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _destinationIDForDeviceHomeKitAccessoryIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v5 = v2;
    [*(id *)(a1 + 32) _sendRequestID:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) messagePayload:*(void *)(a1 + 64) destinationID:v2 options:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
LABEL_5:
    id v2 = v5;
    goto LABEL_6;
  }

  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 44LL));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);

    goto LABEL_5;
  }

void sub_1000831B8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _destinationIDForDeviceIDSIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v5 = v2;
    [*(id *)(a1 + 32) _sendRequestID:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) messagePayload:*(void *)(a1 + 64) destinationID:v2 options:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
LABEL_5:
    id v2 = v5;
    goto LABEL_6;
  }

  uint64_t v3 = *(void *)(a1 + 80);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 44LL));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v4);

    goto LABEL_5;
  }

id sub_100083254(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendRequestID:*(void *)(a1 + 40) request:*(void *)(a1 + 48) destinationID:*(void *)(a1 + 56) options:*(void *)(a1 + 64) responseHandler:*(void *)(a1 + 72)];
}

void sub_100083268(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKey:a1[5]]);
  if (!v2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToWeakObjectsMapTable"));
    [*(id *)(a1[4] + 32) setObject:v3 forKey:a1[5]];
    id v2 = v3;
  }

  id v4 = v2;
  [v2 setObject:a1[6] forKey:a1[7]];
}

void sub_1000832D8(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v1 = (void *)a1[5];
  uint64_t v3 = a1[6];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100083354;
  v4[3] = &unk_1004EF3A0;
  void v4[4] = v2;
  id v5 = v1;
  [v2 _registerRequestID:v5 options:v3 handler:v4];
}

void sub_100083354(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  int v8 = *(void **)(a1 + 32);
  id v9 = a3;
  id v10 = a2;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 _buildResponse]);
  __int16 v12 = *(void **)(a1 + 32);
  id v34 = 0LL;
  id v35 = 0LL;
  id v32 = 0LL;
  id v33 = 0LL;
  id v31 = 0LL;
  unsigned __int8 v13 = [v12 _validateIncomingRequest:v10 options:v9 error:&v35 messageID:&v34 messageType:&v33 messagePayload:&v32 senderPeerInfo:&v31];

  id v14 = v35;
  id v27 = v34;
  id v15 = v33;
  id v16 = v32;
  id v17 = v31;
  __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
  if ((v13 & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v37 = "-[ADRapportLink registerRequestID:options:]_block_invoke";
      __int16 v38 = 2112;
      id v39 = v15;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s incoming request type: %@", buf, 0x16u);
      __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
    }

    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v37 = "-[ADRapportLink registerRequestID:options:]_block_invoke";
      __int16 v38 = 2112;
      id v39 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s incoming request sender: %@", buf, 0x16u);
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKey:*(void *)(a1 + 40)]);
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v15]);

    if (v20)
    {
      uint64_t v21 = *(void *)(a1 + 32);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_100083730;
      v28[3] = &unk_1004F68A0;
      v28[4] = v21;
      id v29 = v11;
      id v30 = v7;
      [v20 rapportLink:v21 didReceiveMessage:v16 ofType:v15 fromPeer:v17 completion:v28];
    }

    else
    {
      __int16 v22 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        __int16 v26 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v37 = "-[ADRapportLink registerRequestID:options:]_block_invoke";
        __int16 v38 = 2112;
        id v39 = v26;
        __int16 v40 = 2112;
        id v41 = v15;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s Unexpected message type for requestID: %@: %@",  buf,  0x20u);
      }

      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1014LL));
      (*((void (**)(id, void *, void, void *))v7 + 2))(v7, v11, 0LL, v23);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v24 = v18;
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v14 localizedDescription]);
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v37 = "-[ADRapportLink registerRequestID:options:]_block_invoke_2";
      __int16 v38 = 2112;
      id v39 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
    }

    (*((void (**)(id, void *, void, id))v7 + 2))(v7, v11, 0LL, v14);
  }
}

void sub_100083730(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100083800;
  v12[3] = &unk_1004FDA30;
  id v13 = v5;
  id v14 = v7;
  id v9 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, v12);
}

uint64_t sub_100083800(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKey:@"payload"];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100083844(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000838CC;
  v6[3] = &unk_1004EF378;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v2 _registerRequestID:v3 options:v4 handler:v6];
}

void sub_1000838CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10008396C;
  v11[3] = &unk_1004EF350;
  uint64_t v8 = *(void *)(a1 + 40);
  _BYTE v11[4] = *(void *)(a1 + 32);
  id v12 = v7;
  id v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v8 + 16);
  id v10 = v7;
  v9(v8, a2, a3, v11);
}

void sub_10008396C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100083A48;
  v15[3] = &unk_1004FDA30;
  id v16 = v7;
  id v17 = v8;
  id v18 = v9;
  id v19 = v10;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, v15);
}

uint64_t sub_100083A48(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16LL))(a1[7], a1[4], a1[5], a1[6]);
}

id sub_100083A5C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) setDestinationDevice:*(void *)(a1 + 40)];
}

id sub_100083A68(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) setServiceType:*(void *)(a1 + 40)];
}

id sub_100083A74(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

id sub_100083A80(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
}

void sub_100083A8C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_100083AF8;
  v2[3] = &unk_1004FCC00;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _activateWithCompletion:v2];
}

uint64_t sub_100083AF8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100083B0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleDidInterrupt];
}

void sub_100083B38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleDidInvalidate];
}

void sub_100083B64(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleDidUpdateLocalDevice:v3];
}

void sub_100083BAC(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleDidLoseDevice:v3];
}

void sub_100083BF4(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleDidFindDevice:v3];
}

void sub_100083C3C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _handleDidUpdateDevice:v5 changes:a3];
}

void sub_100083D74(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS____ADSiriInfoBroadcastLink);
  uint64_t v2 = (void *)qword_100577B28;
  qword_100577B28 = (uint64_t)v1;
}

id sub_100084750(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 16LL);
    int v5 = 136315394;
    id v6 = "-[_ADSiriInfoBroadcastLink _broadcastSiriInfo:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Broadcasting SiriInfo: %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 8) _setSiriInfo:*(void *)(*(void *)(a1 + 32) + 16)];
}

void *sub_10008481C(void *result)
{
  if (*(void *)(result[4] + 24LL) == result[6]) {
    return (void *)(*(uint64_t (**)(void))(result[5] + 16LL))();
  }
  return result;
}

void sub_100084840(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    int v14 = 136315650;
    id v15 = "-[_ADSiriInfoBroadcastLink updateSiriInfoWithObject:forKey:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    __int16 v18 = 2112;
    uint64_t v19 = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Updating SiriInfo with key %@, value %@",  (uint8_t *)&v14,  0x20u);
  }

  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 16) objectForKey:*(void *)(a1 + 32)]);
  id v5 = v3;
  id v6 = v4;
  if (v5 == v6)
  {
  }

  else
  {
    __int16 v7 = v6;
    if ((v5 == 0LL) == (v6 != 0LL))
    {

LABEL_11:
      [*(id *)(*(void *)(a1 + 48) + 16) setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 32)];
      id v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 16LL);
        int v14 = 136315394;
        id v15 = "-[_ADSiriInfoBroadcastLink updateSiriInfoWithObject:forKey:]_block_invoke";
        __int16 v16 = 2112;
        uint64_t v17 = v13;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Current SiriInfo: %@",  (uint8_t *)&v14,  0x16u);
      }

      [*(id *)(a1 + 48) _broadcastSiriInfo:1];
      return;
    }

    unsigned int v8 = [v5 isEqual:v6];

    if (!v8) {
      goto LABEL_11;
    }
  }

  id v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 136315138;
    id v15 = "-[_ADSiriInfoBroadcastLink updateSiriInfoWithObject:forKey:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s Skipped because an identical key-value pair already exists in cache.",  (uint8_t *)&v14,  0xCu);
  }

uint64_t sub_100084A70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100084A80(uint64_t a1)
{
}

void sub_100084A88(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100084AC0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
  id v2 = objc_alloc(&OBJC_CLASS___ADRapportLink);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 32LL);
  id v4 = +[ADRapportLinkConfiguration newWithBuilder:]( &OBJC_CLASS___ADRapportLinkConfiguration,  "newWithBuilder:",  &stru_1004EF4F0);
  id v5 = -[ADRapportLink initWithQueue:configuration:](v2, "initWithQueue:configuration:", v3, v4);
  uint64_t v6 = *(void *)(a1 + 32);
  __int16 v7 = *(void **)(v6 + 8);
  *(void *)(v6 + _Block_object_dispose(va, 8) = v5;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "addListener:");
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100084BB0;
  v11[3] = &unk_1004FBD90;
  _BYTE v11[4] = v8;
  return [v9 activateWithCompletion:v11];
}

uint64_t sub_100084B94(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 8LL)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16LL))();
  }
  return result;
}

void sub_100084BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "-[_ADSiriInfoBroadcastLink _configureRapportLinkAndReconnectNow:]_block_invoke_5";
      __int16 v7 = 2112;
      id v8 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s SiriInfo broadcast link activation error: %@",  (uint8_t *)&v5,  0x16u);
    }
  }

  [*(id *)(a1 + 32) _broadcastSiriInfo:1];
}

void sub_100084C8C(id a1, ADRapportLinkConfigurationMutating *a2)
{
  id v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkDiscoveryOptions,  "newWithBuilder:",  &stru_1004EF510);
  -[ADRapportLinkConfigurationMutating setDiscoveryOptions:](v2, "setDiscoveryOptions:", v3);

  id v4 = +[ADRapportLinkTransportOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkTransportOptions,  "newWithBuilder:",  &stru_1004EF530);
  -[ADRapportLinkConfigurationMutating setTransportOptions:](v2, "setTransportOptions:", v4);
}

void sub_100084D0C(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  id v4 = a2;
  id v2 = (id)_AFPreferencesBLECompanionConnectionsEnabled();
  if ((_DWORD)v2) {
    id v2 = -[ADRapportLinkTransportOptionsMutating setAllowsBLE:](v4, "setAllowsBLE:", 2LL);
  }
}

void sub_100084D58(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  id v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesFamily:](v2, "setIncludesFamily:", 0LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesRemoraDevices:](v2, "setIncludesRemoraDevices:", 2LL);
}

void sub_100085260(_Unwind_Exception *a1)
{
}

void sub_100085450(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[SFEntitledAssetManager sharedInstance](&OBJC_CLASS___SFEntitledAssetManager, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[SFEntitledAssetManager subscriberIdForDictationAssets]( &OBJC_CLASS___SFEntitledAssetManager,  "subscriberIdForDictationAssets"));
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 detailedInstallationStatusForLanguagesWithAssetType:3 subscriberId:v3]);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateOfflineDictationStatus:v5 error:0];
}

uint64_t sub_1000854E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000855D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *(void **)(a1 + 32);
  v22[0] = AFOfflineDictationStatusInstalledKey;
  id v4 = a3;
  id v5 = a2;
  uint64_t v6 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  AFOfflineDictationStatusStringIsInstalled(v4));
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v23[0] = v7;
  v22[1] = AFOfflineDictationStatusHighQualityKey;
  id v8 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  AFOfflineDictationStatusStringIsHighQualityModelSupported(v4));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v23[1] = v9;
  v22[2] = AFOfflineDictationStatusContinuousListeningKey;
  id v10 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  AFOfflineDictationStatusStringIsContinuousListeningSupported(v4));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v23[2] = v11;
  v22[3] = AFOfflineDictationStatusOnDeviceSearchKey;
  uint64_t v12 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  AFOfflineDictationStatusStringIsOnDeviceSearchSupported(v4));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v23[3] = v13;
  void v22[4] = AFOfflineDictationStatusAutoPunctuationKey;
  int v14 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  AFOfflineDictationStatusStringIsAutoPunctuationSupported(v4));
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v23[4] = v15;
  v22[5] = AFOfflineDictationStatusEmojiRecognitionKey;
  __int16 v16 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  AFOfflineDictationStatusStringIsEmojiRecognitionSupported(v4));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  void v23[5] = v17;
  v22[6] = AFOfflineDictationStatusVoiceCommandsKey;
  uint64_t IsVoiceCommandsSupported = AFOfflineDictationStatusStringIsVoiceCommandsSupported(v4);

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", IsVoiceCommandsSupported));
  v23[6] = v19;
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  7LL));
  [v21 setObject:v20 forKey:v5];
}

void sub_10008582C(id a1)
{
  if (AFOfflineDictationCapable(a1))
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADDictationOfflineStatusObserver);
    uint64_t v2 = (void *)qword_100577B30;
    qword_100577B30 = (uint64_t)v1;

    [(id)qword_100577B30 fetchOfflineDictationStatusIgnoringCache:0 asynchronously:1];
  }

  else
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "+[ADDictationOfflineStatusObserver sharedDictationOfflineStatusObserver]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Offline Dictation is not supported.",  (uint8_t *)&v4,  0xCu);
    }
  }

void sub_100086758(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  unsigned int v3 = [v2 _isInCall];

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 72) != v3)
  {
    *(_BYTE *)(v4 + 72) = v3;
    id v5 = *(_BYTE **)(a1 + 32);
    if (v5[72]) {
      [v5 _processPendingCallResultBlocks];
    }
  }

void sub_1000867D4(id a1, SAAceCommand *a2, NSError *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ADCompanionRoutingService preheatDomain:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s received response: %@ error: %@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_1000868B0(id a1)
{
  v3[0] = SASmsGroupIdentifier;
  v3[1] = SAReminderGroupIdentifier;
  v4[0] = SAAceDomainSignalDomainMESSAGESValue;
  v4[1] = SAAceDomainSignalDomainREMINDERSValue;
  _DWORD v3[2] = SAABGroupIdentifier;
  v3[3] = SAPhoneGroupIdentifier;
  v4[2] = SAAceDomainSignalDomainCONTACTValue;
  v4[3] = SAAceDomainSignalDomainPHONEValue;
  void v3[4] = SACalendarGroupIdentifier;
  void v3[5] = SAEmailGroupIdentifier;
  void v4[4] = SAAceDomainSignalDomainCALENDARValue;
  void v4[5] = SAAceDomainSignalDomainEMAILValue;
  v3[6] = SAStockGroupIdentifier;
  void v4[6] = SAAceDomainSignalDomainSTOCKValue;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  7LL));
  uint64_t v2 = (void *)qword_100577B48;
  qword_100577B48 = v1;
}

void sub_1000869E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 56LL);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100086AB8;
  block[3] = &unk_1004F95C8;
  block[1] = 3221225472LL;
  id v9 = v7;
  id v13 = v5;
  id v14 = v6;
  char v17 = *(_BYTE *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 32);
  id v16 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_100086AB8(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    id v2 = *(id *)(a1 + 32);
    if (!*(void *)(a1 + 32))
    {
      unsigned int v3 = *(void **)(a1 + 40);
      if (v3)
      {
        uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          __int16 v22 = "-[ADCompanionRoutingService _handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
          __int16 v23 = 2112;
          int v24 = v3;
          _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Constructing failure response due to remote execution error %@",  buf,  0x16u);
          unsigned int v3 = *(void **)(a1 + 40);
        }

        id v5 = sub_1003408B0(v3);
        uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);

        id v2 = (id)v6;
      }
    }

    if (*(_BYTE *)(a1 + 64)
      && !*(_BYTE *)(*(void *)(a1 + 48) + 72LL)
      && (uint64_t v7 = objc_opt_class(&OBJC_CLASS___SAPhoneCallStarted), (objc_opt_isKindOfClass(v2, v7) & 1) != 0))
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v22 = "-[ADCompanionRoutingService _handleCommand:forDomain:executionContext:reply:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Waiting for Call to route to complete the request...",  buf,  0xCu);
      }

      id v9 = *(void **)(*(void *)(a1 + 48) + 64LL);
      if (!v9)
      {
        id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v11 = *(void *)(a1 + 48);
        uint64_t v12 = *(void **)(v11 + 64);
        *(void *)(v11 + 64) = v10;

        id v9 = *(void **)(*(void *)(a1 + 48) + 64LL);
      }

      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_100086D60;
      v18[3] = &unk_1004FD990;
      id v20 = *(id *)(a1 + 56);
      id v19 = v2;
      id v13 = objc_retainBlock(v18);
      [v9 addObject:v13];

      dispatch_time_t v14 = dispatch_time(0LL, 3000000000LL);
      uint64_t v15 = *(void *)(a1 + 48);
      id v16 = *(dispatch_queue_s **)(v15 + 56);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100086D74;
      block[3] = &unk_1004FD940;
      void block[4] = v15;
      dispatch_after(v14, v16, block);
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }
  }

uint64_t sub_100086D60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

id sub_100086D74(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCompanionRoutingService _handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Timed out waiting for Call to route",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _processPendingCallResultBlocks];
}

id sub_100086E24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCommand:*(void *)(a1 + 40) forDomain:*(void *)(a1 + 48) executionContext:*(void *)(a1 + 56) reply:*(void *)(a1 + 64)];
}

void sub_100087EBC(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  id v2 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  SAGroupIdentifier,  SASGroupIdentifier,  SASyncGroupIdentifier,  SADIAGGroupIdentifier,  SAAIGroupIdentifier,  SATTSGroupIdentifier,  0LL);
  unsigned int v3 = (void *)qword_100577B58;
  qword_100577B58 = (uint64_t)v2;
}

uint64_t sub_100088148(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 1;
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100088A08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateDisplayScaleIfNeededAndNotify:0];
}

id sub_100088A14(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeObserver:*(void *)(a1 + 40)];
}

id sub_100088A20(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 1;
  return _[*(id *)(a1 + 32) _updateDisplayScaleIfNeededAndNotify:1];
}

id sub_100088A38(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObserver:*(void *)(a1 + 40)];
}

void sub_10008C6F8(_Unwind_Exception *a1)
{
}

void sub_10008D05C(_Unwind_Exception *a1)
{
}

void sub_10008DFA8(_Unwind_Exception *a1)
{
}

void sub_100090870( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100093D04(uint64_t a1)
{
  if (sub_1002FEBC4(*(void **)(a1 + 32)))
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Zone not found on shared zone. Unexpected error.",  buf,  0xCu);
    }

    BOOL v3 = 0;
    uint64_t v4 = 4104LL;
  }

  else if (sub_1002FEED4(*(void **)(a1 + 32)))
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Missing Manatee Identity. Handled on private database.",  buf,  0xCu);
    }

    BOOL v3 = 0;
    uint64_t v4 = 6103LL;
  }

  else if (sub_1002FF294(*(void **)(a1 + 32)))
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
      __int16 v29 = 2112;
      uint64_t v30 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Keychain sync incomplete (%@)",  buf,  0x16u);
    }

    BOOL v3 = 0;
    *(_BYTE *)(*(void *)(a1 + 40) + 49LL) = 1;
    uint64_t v4 = 4103LL;
  }

  else if (sub_1002FED60(*(void **)(a1 + 32)))
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
      __int16 v29 = 2112;
      uint64_t v30 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Rate limited (%@)", buf, 0x16u);
    }

    if (CKCanRetryForError(*(void *)(a1 + 32)))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:CKErrorRetryAfterKey]);

      BOOL v3 = v9 != 0LL;
      if (v9)
      {
        id v10 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 136315650;
          __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
          __int16 v29 = 2112;
          uint64_t v30 = v22;
          __int16 v31 = 2048;
          uint64_t v32 = 0x404E000000000000LL;
          _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Rate limiting initiated for error (%@). Retrying in %f seconds",  buf,  0x20u);
        }

        [v9 doubleValue];
        double v12 = fmax(v11, 60.0);
      }

      else
      {
        double v12 = 60.0;
      }

      uint64_t v4 = 4106LL;
      goto LABEL_31;
    }

    BOOL v3 = 0;
    uint64_t v4 = 4106LL;
  }

  else if (sub_1002FF52C(*(void **)(a1 + 32)))
  {
    id v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
      __int16 v29 = 2112;
      uint64_t v30 = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%s Network failure (%@)", buf, 0x16u);
    }

    BOOL v3 = 1;
    uint64_t v4 = 4107LL;
  }

  else
  {
    dispatch_time_t v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v28 = "-[ADCloudKitManager handleSharedDBCloudKitError:operationType:]_block_invoke";
      __int16 v29 = 2112;
      uint64_t v30 = v23;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Server Changed Record failure (%@). Unexpected error. But retry.",  buf,  0x16u);
    }

    BOOL v3 = 1;
    uint64_t v4 = 4108LL;
  }

  double v12 = 60.0;
LABEL_31:
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10009420C;
  v25[3] = &unk_1004FD8D0;
  id v26 = *(id *)(a1 + 32);
  [v15 logEventWithType:v4 contextProvider:v25];

  if (v3)
  {
    dispatch_time_t v16 = dispatch_time(0LL, (uint64_t)(v12 * 1000000000.0));
    uint64_t v17 = *(void *)(a1 + 40);
    __int16 v18 = *(dispatch_queue_s **)(v17 + 112);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100094214;
    v24[3] = &unk_1004FD940;
    v24[4] = v17;
    dispatch_after(v16, v18, v24);
  }

uint64_t sub_10009420C(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

id sub_100094214(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) fetchSharedZones];
}

void sub_100094220(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _trackedCKContainerForiCloudAltDSID:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v20 = *(void *)(a1 + 48);
    v18[0] = @"rmvTVSetting";
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
    v18[1] = @"syncRequestTime";
    v19[0] = v3;
    uint64_t v4 = +[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", mach_absolute_time());
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v19[1] = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  2LL));
    uint64_t v21 = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));

    id v8 = -[ADCloudKitSharedZoneUpdater initWithQueue:container:sharedZone:zoneOwner:delegate:]( objc_alloc(&OBJC_CLASS___ADCloudKitSharedZoneUpdater),  "initWithQueue:container:sharedZone:zoneOwner:delegate:",  *(void *)(*(void *)(a1 + 32) + 112LL),  v2,  *(void *)(*(void *)(a1 + 32) + 216LL),  1LL,  0LL);
    id v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v23 = "-[ADCloudKitManager syncSiriRMVSetting:iCloudAltDSID:homeUniqueIdentifier:completion:]_block_invoke";
      __int16 v24 = 2112;
      uint64_t v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Syncing %@ to user profile companion.",  buf,  0x16u);
    }

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_1000944F4;
    v16[3] = &unk_1004FCC00;
    id v17 = *(id *)(a1 + 56);
    -[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:completion:]( v8,  "addDictionaryToSharedStore:completion:",  v7,  v16);
  }

  else
  {
    id v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      double v11 = *(void **)(a1 + 40);
      double v12 = *(void **)(*(void *)(a1 + 32) + 152LL);
      id v13 = v10;
      dispatch_time_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 allKeys]);
      *(_DWORD *)__int128 buf = 136315651;
      uint64_t v23 = "-[ADCloudKitManager syncSiriRMVSetting:iCloudAltDSID:homeUniqueIdentifier:completion:]_block_invoke";
      __int16 v24 = 2113;
      uint64_t v25 = v11;
      __int16 v26 = 2113;
      id v27 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s No container found for iCloud ID %{private}@ %{private}@",  buf,  0x20u);
    }

    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4022LL,  @"No container found for given iCloud ID"));
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v7);
  }
}

void sub_1000944F4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([a2 description]);
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4021LL,  v4));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  else
  {
    (*(void (**)(void))(v2 + 16))(*(void *)(a1 + 32));
  }

void sub_10009457C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v4 = (void *)v3;
  id v5 = (void *)AFDefaultLanguageCode;
  if (v3) {
    id v5 = (void *)v3;
  }
  id v6 = v5;

  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v13 = "-[ADCloudKitManager hasVoiceProfileAvailableForiCloudAltDSID:completion:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Querying devices with assets for language %@",  buf,  0x16u);
  }

  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000946D8;
  v10[3] = &unk_1004FCEE8;
  id v11 = *(id *)(a1 + 48);
  [v8 _devicesWithAvailablePHSAssetsForLanguage:v6 iCloudAltDSID:v9 completion:v10];
}

void sub_1000946D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "-[ADCloudKitManager hasVoiceProfileAvailableForiCloudAltDSID:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Looking for a compatible voice profile from %@",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void, BOOL, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [v6 count] != 0,  v5);
}

void sub_1000947D4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:@"com.apple.assistant.multiuser.shared"])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 72))
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 136) multiUserRecordZoneInfo]);
      goto LABEL_14;
    }

    id v6 = *(void **)(v2 + 216);
  }

  else if ([*(id *)(a1 + 32) isEqualToString:@"com.apple.assistant.backedup"])
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 72))
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 136) keyValueRecordZoneInfo]);
      goto LABEL_14;
    }

    id v6 = *(void **)(v4 + 184);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 72))
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 136) accountStatusRecordZoneInfo]);
      goto LABEL_14;
    }

    id v6 = *(void **)(v5 + 176);
  }

  id v3 = v6;
LABEL_14:
  id v7 = v3;
  if (v3)
  {
    if (sub_1002FEBC4(*(void **)(a1 + 48)))
    {
      int v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        id v33 = *(const __CFString **)(a1 + 48);
        uint64_t v34 = *(void *)(a1 + 32);
        id v35 = @"mirror";
        if (!*(_BYTE *)(a1 + 72)) {
          id v35 = @"not mirror";
        }
        *(_DWORD *)__int128 buf = 136315906;
        uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke";
        __int16 v82 = 2112;
        uint8x16_t v83 = v33;
        __int16 v84 = 2112;
        uint64_t v85 = v34;
        __int16 v86 = 2112;
        int v87 = v35;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s resetting zone for error (%@) for zone (%@) (%@)",  buf,  0x2Au);
      }

      [*(id *)(a1 + 40) _prepareZoneForResetWithZoneInfo:v7];
      [*(id *)(a1 + 40) _resetZoneWithZoneInfo:v7];
      uint64_t v9 = 4104LL;
    }

    else
    {
      id v11 = *(void **)(a1 + 48);
      double v12 = (void *)objc_claimAutoreleasedReturnValue([v7 zone]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneID]);
      id v14 = sub_1002FF118(v11, v13);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      BOOL v16 = sub_1002FEE28(v15);

      if (v16)
      {
        id v17 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          unint64_t v44 = *(const __CFString **)(a1 + 48);
          uint64_t v45 = *(void *)(a1 + 32);
          char v46 = @"mirror";
          if (!*(_BYTE *)(a1 + 72)) {
            char v46 = @"not mirror";
          }
          *(_DWORD *)__int128 buf = 136315906;
          uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke";
          __int16 v82 = 2112;
          uint8x16_t v83 = v44;
          __int16 v84 = 2112;
          uint64_t v85 = v45;
          __int16 v86 = 2112;
          int v87 = v46;
          _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s token expired (%@) for zone (%@) (%@)",  buf,  0x2Au);
        }

        [v7 setServerChangeToken:0];
        if (!*(_BYTE *)(a1 + 72)) {
          [*(id *)(a1 + 40) _fetchChangesWithZoneInfo:v7 retryCount:1 useSharedDatabase:0 activity:0 container:0 mirror:0];
        }
        uint64_t v9 = 4105LL;
      }

      else if (sub_1002FEED4(*(void **)(a1 + 48)))
      {
        __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          unsigned int v51 = @"mirror";
          if (!*(_BYTE *)(a1 + 72)) {
            unsigned int v51 = @"not mirror";
          }
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke";
          __int16 v82 = 2112;
          uint8x16_t v83 = v51;
          _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Missing Manatee Identity : (%@)",  buf,  0x16u);
        }

        [*(id *)(a1 + 40) _prepareZoneForResetWithZoneInfo:v7];
        uint64_t v19 = *(void **)(a1 + 40);
        v78[0] = _NSConcreteStackBlock;
        v78[1] = 3221225472LL;
        v78[2] = sub_100095118;
        v78[3] = &unk_1004FC2C8;
        v78[4] = v19;
        id v79 = v7;
        [v19 _deleteRecordZoneWithZoneInfo:v79 completion:v78];

        uint64_t v9 = 6103LL;
      }

      else if (sub_1002FF294(*(void **)(a1 + 48)))
      {
        uint64_t v20 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          unint64_t v52 = *(const __CFString **)(a1 + 48);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke_3";
          __int16 v82 = 2112;
          uint8x16_t v83 = v52;
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s Keychain sync incomplete (%@)",  buf,  0x16u);
        }

        *(_BYTE *)(*(void *)(a1 + 40) + 49LL) = 1;
        uint64_t v9 = 4103LL;
      }

      else if (sub_1002FED60(*(void **)(a1 + 56)))
      {
        uint64_t v21 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          char v53 = *(const __CFString **)(a1 + 48);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke";
          __int16 v82 = 2112;
          uint8x16_t v83 = v53;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s Rate limited (%@)", buf, 0x16u);
        }

        uint64_t v23 = *(void **)(a1 + 32);
        uint64_t v22 = *(void *)(a1 + 40);
        __int16 v24 = *(dispatch_queue_s **)(v22 + 112);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000951AC;
        block[3] = &unk_1004FCF60;
        void block[4] = v22;
        id v74 = v23;
        id v75 = *(id *)(a1 + 48);
        id v25 = v7;
        uint64_t v26 = *(void *)(a1 + 64);
        id v76 = v25;
        uint64_t v77 = v26;
        dispatch_async(v24, block);

        uint64_t v9 = 4106LL;
      }

      else if (sub_1002FF52C(*(void **)(a1 + 56)))
      {
        id v27 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          char v54 = *(const __CFString **)(a1 + 48);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke_2";
          __int16 v82 = 2112;
          uint8x16_t v83 = v54;
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s Network failure (%@)", buf, 0x16u);
        }

        __int16 v29 = *(void **)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 40);
        uint64_t v30 = *(dispatch_queue_s **)(v28 + 112);
        v68[0] = _NSConcreteStackBlock;
        v68[1] = 3221225472LL;
        v68[2] = sub_1000951F4;
        v68[3] = &unk_1004FCF60;
        v68[4] = v28;
        id v31 = v29;
        uint64_t v32 = *(void *)(a1 + 64);
        id v69 = v31;
        uint64_t v72 = v32;
        id v70 = v7;
        id v71 = *(id *)(a1 + 48);
        dispatch_async(v30, v68);

        uint64_t v9 = 4107LL;
      }

      else
      {
        if (!sub_1002FF7B0(*(void **)(a1 + 56)))
        {
          if ([*(id *)(a1 + 56) code] != (id)6) {
            goto LABEL_50;
          }
          unsigned int v47 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            unint64_t v56 = *(const __CFString **)(a1 + 48);
            *(_DWORD *)__int128 buf = 136315394;
            uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke_2";
            __int16 v82 = 2112;
            uint8x16_t v83 = v56;
            _os_log_error_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "%s Assistant not ready error thrown (%@)",  buf,  0x16u);
          }

          uint64_t v48 = *(void *)(a1 + 40);
          char v49 = *(dispatch_queue_s **)(v48 + 112);
          v59[0] = _NSConcreteStackBlock;
          v59[1] = 3221225472LL;
          v59[2] = sub_10009528C;
          v59[3] = &unk_1004FD510;
          uint64_t v50 = *(void *)(a1 + 64);
          v59[4] = v48;
          uint64_t v62 = v50;
          id v7 = v7;
          id v60 = v7;
          id v61 = *(id *)(a1 + 48);
          dispatch_async(v49, v59);

          unsigned int v43 = v60;
          goto LABEL_49;
        }

        __int128 v36 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          unsigned int v55 = *(const __CFString **)(a1 + 48);
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v81 = "-[ADCloudKitManager handleCloudKitError:forZone:mirror:operationType:]_block_invoke_2";
          __int16 v82 = 2112;
          uint8x16_t v83 = v55;
          _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s Server Changed Record failure (%@)",  buf,  0x16u);
        }

        __int16 v38 = *(void **)(a1 + 32);
        uint64_t v37 = *(void *)(a1 + 40);
        id v39 = *(dispatch_queue_s **)(v37 + 112);
        v63[0] = _NSConcreteStackBlock;
        v63[1] = 3221225472LL;
        v63[2] = sub_100095240;
        v63[3] = &unk_1004FCF60;
        v63[4] = v37;
        id v40 = v38;
        uint64_t v41 = *(void *)(a1 + 64);
        id v64 = v40;
        uint64_t v67 = v41;
        id v65 = v7;
        id v66 = *(id *)(a1 + 48);
        dispatch_async(v39, v63);

        uint64_t v9 = 4108LL;
      }
    }

    char v42 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3221225472LL;
    v57[2] = sub_1000952A8;
    v57[3] = &unk_1004FD8D0;
    id v58 = *(id *)(a1 + 48);
    [v42 logEventWithType:v9 contextProvider:v57];

    unsigned int v43 = v58;
LABEL_49:

    goto LABEL_50;
  }

void sub_100095118(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000952B0;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

id sub_1000951AC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isCloudSyncEnabledForZone:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    return [*(id *)(*(void *)(a1 + 32) + 56) handleRateLimitedError:*(void *)(a1 + 48) forZoneInfo:*(void *)(a1 + 56) operationType:*(void *)(a1 + 64)];
  }
  return result;
}

id sub_1000951F4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isCloudSyncEnabledForZone:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    return [*(id *)(*(void *)(a1 + 32) + 56) retryForTypeOnRetryManagerQueue:*(void *)(a1 + 64) zoneInfo:*(void *)(a1 + 48) error:*(void *)(a1 + 56) retryAfterInterval:0.0];
  }
  return result;
}

id sub_100095240(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isCloudSyncEnabledForZone:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    return [*(id *)(*(void *)(a1 + 32) + 56) retryForTypeOnRetryManagerQueue:*(void *)(a1 + 64) zoneInfo:*(void *)(a1 + 48) error:*(void *)(a1 + 56) retryAfterInterval:0.0];
  }
  return result;
}

id sub_10009528C(void *a1)
{
  return [*(id *)(a1[4] + 56) retryForTypeOnRetryManagerQueue:a1[7] zoneInfo:a1[5] error:a1[6] retryAfterInterval:600.0];
}

uint64_t sub_1000952A8(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

id sub_1000952B0(uint64_t a1)
{
  id result = (id)sub_1002FF228(*(void **)(a1 + 32));
  return result;
}

id sub_1000952E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchChangesWithZoneInfo:*(void *)(a1 + 40) useSharedDatabase:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1000952F8(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (!v3) {
    goto LABEL_29;
  }
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 152LL);
    id v6 = v4;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 allKeys]);
    *(_DWORD *)__int128 buf = 136315651;
    unsigned int v47 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke";
    __int16 v48 = 2113;
    char v49 = v3;
    __int16 v50 = 2112;
    unsigned int v51 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s iCloud AltDSID is specified, choosing container for %{private}@ from %@",  buf,  0x20u);

    id v3 = *(void **)(a1 + 32);
  }

  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _trackedCKContainerForiCloudAltDSID:v3]);
  id v9 = (id)v8;
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v47 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Apple TV only supports download.", buf, 0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      double v12 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 13LL));
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
    }

    goto LABEL_23;
  }

  if (!v8)
  {
LABEL_29:
    if ([*(id *)(a1 + 40) _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared"])
    {
      int v18 = *(unsigned __int8 *)(a1 + 73);
      if (!*(_BYTE *)(a1 + 72))
      {
        if (*(_BYTE *)(a1 + 73))
        {
          __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
          [v29 setMultiUserSharedDataServerChangeToken:0];

          [*(id *)(a1 + 40) _fetchChangesWithZoneInfo:*(void *)(*(void *)(a1 + 40) + 216) retryCount:0 useSharedDatabase:0 activity:*(void *)(a1 + 48) container:0 mirror:0 completion:*(void *)(a1 + 56)];
        }

        goto LABEL_22;
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 216) dataStore]);
      uint64_t v20 = *(void **)(a1 + 48);
      if (v18)
      {
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472LL;
        v37[2] = sub_100095984;
        v37[3] = &unk_1004F86F8;
        void v37[4] = *(void *)(a1 + 40);
        id v38 = v20;
        id v39 = 0LL;
        id v40 = *(id *)(a1 + 56);
        [v19 synchronizeUsingActivity:v38 completion:v37];

        uint64_t v21 = v38;
      }

      else
      {
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_100095B08;
        v35[3] = &unk_1004FC010;
        v35[4] = *(void *)(a1 + 40);
        id v36 = *(id *)(a1 + 56);
        [v19 synchronizeUsingActivity:v20 completion:v35];

        uint64_t v21 = v36;
      }
    }

    else
    {
      dispatch_time_t v22 = dispatch_time(0LL, 120000000000LL);
      uint64_t v23 = *(void *)(a1 + 40);
      __int16 v24 = *(void **)(a1 + 48);
      id v25 = *(dispatch_queue_s **)(v23 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100095C90;
      block[3] = &unk_1004EFC90;
      uint64_t v26 = *(void *)(a1 + 64);
      void block[4] = v23;
      uint64_t v33 = v26;
      __int16 v34 = *(_WORD *)(a1 + 72);
      id v31 = v24;
      id v32 = *(id *)(a1 + 56);
      dispatch_after(v22, v25, block);
      uint64_t v27 = *(void *)(a1 + 56);
      if (v27)
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4016LL));
        (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v28);
      }

      uint64_t v21 = v31;
    }

LABEL_22:
    id v9 = 0LL;
    goto LABEL_23;
  }

  id v13 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v14 = v13;
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 containerIdentifier]);
    *(_DWORD *)__int128 buf = 136315394;
    unsigned int v47 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke";
    __int16 v48 = 2112;
    char v49 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Found container: %@", buf, 0x16u);
  }

  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_1000957EC;
  v41[3] = &unk_1004EFC68;
  id v16 = *(id *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 40);
  id v45 = v16;
  v41[4] = v17;
  id v9 = v9;
  id v42 = v9;
  id v43 = *(id *)(a1 + 32);
  id v44 = *(id *)(a1 + 48);
  [v9 accountInfoWithCompletionHandler:v41];

LABEL_23:
}

void sub_1000957EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    if (v6) {
      goto LABEL_3;
    }
LABEL_6:
    [*(id *)(a1 + 32) _trackCKContainer:*(void *)(a1 + 40) accountInfo:v5 foriCloudAltDSID:*(void *)(a1 + 48)];
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(dispatch_queue_s **)(v9 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100095E20;
    block[3] = &unk_1004FCBB0;
    void block[4] = v9;
    id v12 = v5;
    id v13 = *(id *)(a1 + 56);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 64);
    dispatch_async(v10, block);

    goto LABEL_7;
  }

  *(_DWORD *)__int128 buf = 136315394;
  uint64_t v17 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke";
  __int16 v18 = 2112;
  id v19 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Fetch account Info with Error %@",  buf,  0x16u);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
  }
LABEL_7:
}

void sub_100095984(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v15 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke_2";
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s result %d", buf, 0x12u);
    if (a2) {
      goto LABEL_3;
    }
  }

  else if (a2)
  {
LABEL_3:
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    id v7 = *(dispatch_queue_s **)(v5 + 112);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100095DE4;
    v10[3] = &unk_1004FDA30;
    void v10[4] = v5;
    id v11 = v6;
    id v12 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    dispatch_async(v7, v10);

    return;
  }

  uint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4016LL,  @"data store failed to sync"));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }

void sub_100095B08(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315394;
    id v15 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke_2";
    __int16 v16 = 1024;
    int v17 = a2;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s result %d", (uint8_t *)&v14, 0x12u);
  }

  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = (void *)v5[17];
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 keyValueRecordZoneInfo]);
    [v5 _synchronizeMirroredContainer:v7];

    uint64_t v8 = *(id **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8[17] multiUserRecordZoneInfo]);
    [v8 _synchronizeMirroredContainer:v9];

    uint64_t v10 = *(id **)(a1 + 32);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10[17] accountStatusRecordZoneInfo]);
    [v10 _synchronizeMirroredContainer:v11];
  }

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12)
  {
    if (a2)
    {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0LL);
    }

    else
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4016LL,  @"data store failed to sync"));
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
    }
  }

void sub_100095C90(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared"])
  {
    uint64_t v2 = *(void *)(a1 + 56);
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v7 = "-[ADCloudKitManager _forceMultiUserSync:download:retryCount:activity:iCloudAltDSID:completion:]_block_invoke";
      __int16 v8 = 2048;
      uint64_t v9 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Retrying because CloudKit was not ready on try (%lu)",  buf,  0x16u);
    }

    [*(id *)(a1 + 32) _forceMultiUserSync:*(unsigned __int8 *)(a1 + 64) download:*(unsigned __int8 *)(a1 + 65) retryCount:v2 + 1 activity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4016LL));
      (*(void (**)(uint64_t))(v4 + 16))(v4);
    }
  }

id sub_100095DE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchChangesWithZoneInfo:*(void *)(*(void *)(a1 + 32) + 216) retryCount:1 useSharedDatabase:0 activity:*(void *)(a1 + 40) container:*(void *)(a1 + 48) mirror:0 completion:*(void *)(a1 + 56)];
}

uint64_t (**sub_100095E20(uint64_t a1))(id, void)
{
  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared" accountInfo:*(void *)(a1 + 40)]) {
    return (uint64_t (**)(id, void))[*(id *)(a1 + 32) _fetchChangesWithZoneInfo:*(void *)(*(void *)(a1 + 32) + 216) retryCount:0 useSharedDatabase:0 activity:*(void *)(a1 + 48) contai ner:*(void *)(a1 + 56) mirror:0 completion:*(void *)(a1 + 64)];
  }
  id result = *(uint64_t (***)(id, void))(a1 + 64);
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0LL);
  }
  return result;
}

id sub_100095EA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _forceMultiUserSync:*(unsigned __int8 *)(a1 + 64) download:*(unsigned __int8 *)(a1 + 65) retryCount:0 activity:*(void *)(a1 + 40) iCloudAltDSID:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100095EC0(uint64_t a1)
{
  uint64_t v2 = (CKFetchRecordsOperation *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _verifyAccountWithManateeRequired:0]);
  if (v2)
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 120) accountStatus];
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (v3 == (id)3)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v26 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s No iCloud account signed in", buf, 0xCu);
      }

      id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v26 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
        __int16 v27 = 2112;
        uint64_t v28 = v2;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error encountered (%@)", buf, 0x16u);
      }

      id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    v5();
  }

  else
  {
    id v6 = kAFSessionLanguage;
    id v7 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  @"com.apple.assistant.backedup",  CKCurrentUserDefaultName);
    __int16 v8 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v6,  v7);
    uint64_t v9 = objc_alloc(&OBJC_CLASS___CKFetchRecordsOperation);
    __int16 v24 = v8;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
    id v11 = -[CKFetchRecordsOperation initWithRecordIDs:](v9, "initWithRecordIDs:", v10);

    -[CKFetchRecordsOperation setDesiredKeys:](v11, "setDesiredKeys:", &__NSArray0__struct);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1000962C4;
    v21[3] = &unk_1004F4150;
    uint64_t v12 = v8;
    dispatch_time_t v22 = v12;
    id v23 = *(id *)(a1 + 40);
    -[CKFetchRecordsOperation setFetchRecordsCompletionBlock:](v11, "setFetchRecordsCompletionBlock:", v21);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 128) privateCloudDatabase]);

    if (v13)
    {
      int v14 = objc_alloc_init(&OBJC_CLASS___CKOperationConfiguration);
      -[CKOperationConfiguration setTimeoutIntervalForRequest:](v14, "setTimeoutIntervalForRequest:", 10.0);
      -[CKFetchRecordsOperation setConfiguration:](v11, "setConfiguration:", v14);
      -[CKFetchRecordsOperation setQualityOfService:](v11, "setQualityOfService:", 25LL);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 128) privateCloudDatabase]);
      [v15 addOperation:v11];

      __int16 v16 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v26 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
        __int16 v27 = 2112;
        uint64_t v28 = v11;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Dispatched operation %@", buf, 0x16u);
      }

      dispatch_time_t v17 = dispatch_time(0LL, 10000000000LL);
      __int16 v18 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_100096608;
      v19[3] = &unk_1004FD940;
      uint64_t v20 = v11;
      dispatch_after(v17, v18, v19);
    }

    else
    {
      int v14 = (CKOperationConfiguration *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4015LL));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

void sub_1000962C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v20 = 136315394;
    uint64_t v21 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Operation callback %@", (uint8_t *)&v20, 0x16u);
  }

  if (!v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_25;
  }

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4021LL));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  id v10 = [v6 code];

  if (v10 != (id)2) {
    goto LABEL_20;
  }
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:CKPartialErrorsByItemIDKey]);

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:*(void *)(a1 + 32)]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 domain]);
  if ([v13 isEqualToString:CKErrorDomain])
  {
    id v14 = [v12 code];

    if (v14 != (id)11) {
      goto LABEL_12;
    }
    id v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v20 = 136315138;
      uint64_t v21 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Language Session Record not found",  (uint8_t *)&v20,  0xCu);
    }

    id v13 = v8;
    __int16 v8 = 0LL;
  }

LABEL_12:
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v12 domain]);
  if (![v16 isEqualToString:CKErrorDomain])
  {
LABEL_17:

    goto LABEL_18;
  }

  id v17 = [v12 code];

  if (v17 == (id)26)
  {
    __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v20 = 136315138;
      uint64_t v21 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s Zone not found", (uint8_t *)&v20, 0xCu);
    }

    __int16 v16 = v8;
    __int16 v8 = 0LL;
    goto LABEL_17;
  }

id sub_100096608(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isFinished];
  if ((result & 1) == 0)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 136315394;
      id v6 = "-[ADCloudKitManager hasEverSetLanguageCodeWithCompletion:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Cancelling %@", (uint8_t *)&v5, 0x16u);
    }

    return [*(id *)(a1 + 32) cancel];
  }

  return result;
}

void sub_1000966D4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:a1[4]]);
    if (!v9)
    {
      __int16 v27 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v45 = "-[ADCloudKitManager _fetchManifest:legacy:language:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s Language manifest failed to find a record",  buf,  0xCu);
      }

      uint64_t v8 = 0LL;
      goto LABEL_33;
    }

    v50[0] = objc_opt_class(&OBJC_CLASS___NSString);
    v50[1] = objc_opt_class(&OBJC_CLASS___NSDictionary);
    v50[2] = objc_opt_class(&OBJC_CLASS___NSArray);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v50, 3LL));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_ad_dataOfClasses:", v11));

    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0) {
      id v14 = v12;
    }
    else {
      id v14 = 0LL;
    }
    id v15 = v14;
    uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 objectForKey:a1[5]]);
    id v38 = (void *)v16;
    if (v16)
    {
      id v17 = (void *)v16;
      uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSArray);
      if ((objc_opt_isKindOfClass(v17, v18) & 1) != 0)
      {
        __int16 v34 = v12;
        id v35 = v9;
        id v36 = a1;
        id v37 = v5;
        uint64_t v8 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSString);
        __int128 v39 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        id v20 = v17;
        id v21 = [v20 countByEnumeratingWithState:&v39 objects:v43 count:16];
        if (v21)
        {
          id v22 = v21;
          uint64_t v23 = *(void *)v40;
          do
          {
            for (i = 0LL; i != v22; i = (char *)i + 1)
            {
              if (*(void *)v40 != v23) {
                objc_enumerationMutation(v20);
              }
              id v25 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
              if ((objc_opt_isKindOfClass(v25, v19) & 1) != 0)
              {
                -[NSMutableArray addObject:](v8, "addObject:", v25);
              }

              else
              {
                uint64_t v26 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__int128 buf = 136315394;
                  id v45 = "-[ADCloudKitManager _fetchManifest:legacy:language:completion:]_block_invoke";
                  __int16 v46 = 2112;
                  id v47 = v25;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s Malformed device in manifest: %@",  buf,  0x16u);
                }
              }
            }

            id v22 = [v20 countByEnumeratingWithState:&v39 objects:v43 count:16];
          }

          while (v22);
        }

        a1 = v36;
        id v5 = v37;
        uint64_t v9 = v35;
        id v6 = 0LL;
        uint64_t v12 = v34;
        goto LABEL_30;
      }

      uint64_t v33 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_29:
        uint64_t v8 = 0LL;
LABEL_30:
        if (!-[NSMutableArray count](v8, "count"))
        {

          uint64_t v8 = 0LL;
        }

LABEL_33:
        goto LABEL_34;
      }

      *(_DWORD *)__int128 buf = 136315138;
      id v45 = "-[ADCloudKitManager _fetchManifest:legacy:language:completion:]_block_invoke";
      uint64_t v30 = "%s Language manifest record is malformed";
      id v31 = v33;
      uint32_t v32 = 12;
    }

    else
    {
      uint64_t v28 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      __int16 v29 = (void *)a1[5];
      *(_DWORD *)__int128 buf = 136315650;
      id v45 = "-[ADCloudKitManager _fetchManifest:legacy:language:completion:]_block_invoke";
      __int16 v46 = 2112;
      id v47 = v29;
      __int16 v48 = 2112;
      id v49 = v15;
      uint64_t v30 = "%s Language manifest record does not contain language %@ %@";
      id v31 = v28;
      uint32_t v32 = 32;
    }

    _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
    goto LABEL_29;
  }

  __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v45 = "-[ADCloudKitManager _fetchManifest:legacy:language:completion:]_block_invoke";
    __int16 v46 = 2112;
    id v47 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch language manifest with error: (%@)",  buf,  0x16u);
  }

  uint64_t v8 = 0LL;
LABEL_34:
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100096B98(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count]) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
  else {
    [*(id *)(a1 + 32) _fetchManifest:*(void *)(a1 + 40) legacy:1 language:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_100096BF4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    __int16 v7 = "-[ADCloudKitManager getDevicesWithAvailablePHSAssetsOnDeviceCheck:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v6, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _verifyAccountWithManateeRequired:1]);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      __int16 v7 = "-[ADCloudKitManager getDevicesWithAvailablePHSAssetsOnDeviceCheck:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error encountered (%@)",  (uint8_t *)&v6,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 216) dataStore]);
    [v5 fetchDeviceTypesForAllLanguages:*(void *)(a1 + 40)];
  }
}

void sub_100096D58(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 bestSupportedLanguageCodeForLanguageCode:*(void *)(a1 + 32)]);

  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315650;
    id v17 = "-[ADCloudKitManager _devicesWithAvailablePHSAssetsForLanguage:iCloudAltDSID:completion:]_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v3;
    __int16 v20 = 2112;
    uint64_t v21 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Resolved best language '%@' for provided language '%@'",  buf,  0x20u);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _verifyAccountWithManateeRequired:1]);
  if (v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    objc_initWeak((id *)buf, *(id *)(*(void *)(a1 + 40) + 112LL));
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 216) dataStore]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100096F7C;
    v11[3] = &unk_1004EFC18;
    objc_copyWeak(&v15, (id *)buf);
    id v8 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = *(void **)(a1 + 48);
    id v14 = v8;
    _BYTE v11[4] = v9;
    id v12 = v10;
    id v13 = v3;
    [v7 fetchDeviceTypesForLanguage:v13 completion:v11];

    objc_destroyWeak(&v15);
    objc_destroyWeak((id *)buf);
  }
}

void sub_100096F50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_100096F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s *)objc_loadWeakRetained((id *)(a1 + 64));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100097050;
  block[3] = &unk_1004FCBB0;
  id v10 = v3;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  __int16 v7 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v11 = v6;
  id v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(WeakRetained, block);
}

void sub_100097050(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    uint64_t v2 = *(void **)(a1 + 40);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) privateCloudDatabase]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_100097114;
    v5[3] = &unk_1004FC5F0;
    uint64_t v4 = *(void *)(a1 + 56);
    id v6 = *(id *)(a1 + 64);
    [v2 _fetchManifest:v3 language:v4 completion:v5];
  }

uint64_t sub_100097114(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100097128(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315394;
    uint64_t v9 = "-[ADCloudKitManager getDevicesWithAvailablePHSAssetsForLanguage:iCloudAltDSID:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error encountered (%@)",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100097214(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000972AC;
  v4[3] = &unk_1004FD6F0;
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  [v3 _forceVoiceProfileDownloadForiCloudAltDSID:v5 retryCount:0 completion:v4];
}

void sub_1000972AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 136315650;
    int v8 = "-[ADCloudKitManager downloadVoiceProfileForiCloudAltDSID:completion:]_block_invoke_2";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Finished all operations for iCloudAltDSID: %@ with error: %@",  (uint8_t *)&v7,  0x20u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_100097394(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  [v2 setCloudSyncEnabled:0];

  [(id)objc_opt_class(*(void *)(a1 + 32)) _setAppleAccountSiriStateEnabled:0 withCompletion:0];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  [v3 setHasSetUpAccountStatusRecordZoneSubscription:0];
  [v3 setAccountStatusServerChangeToken:0];
  [v3 setHasSetUpKeyValueRecordZoneSubscription:0];
  [v3 setKeyValueServerChangeToken:0];
  [v3 setHasSetUpVoiceTriggerRecordZoneSubscription:0];
  [v3 setVoiceTriggerServerChangeToken:0];
  [v3 setPhsAssetManifest:0 onSharedZone:1];
  [v3 setPhsAssetManifest:0 onSharedZone:0];
  [v3 setHasSetupMultiUserSharedRecordZoneSubscription:0];
  [v3 setMultiUserSharedDataNeedsSync:1];
  [v3 setMultiUserSharedDataServerChangeToken:0];
  [*(id *)(*(void *)(a1 + 32) + 40) reset];
  [v3 synchronize];
  uint64_t v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  v41[0] = 0LL;
  v41[1] = v41;
  v41[2] = 0x3032000000LL;
  v41[3] = sub_100097844;
  v41[4] = sub_100097854;
  id v42 = 0LL;
  uint64_t v5 = *(void **)(a1 + 32);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_10009785C;
  v38[3] = &unk_1004EFBC8;
  v38[4] = v5;
  __int128 v40 = v41;
  uint64_t v6 = v4;
  __int128 v39 = v6;
  [v5 _saveCloudSyncEnabledRecord:0 mirror:0 qualityOfService:25 completion:v38];
  dispatch_group_enter(v6);
  v36[0] = 0LL;
  v36[1] = v36;
  v36[2] = 0x3032000000LL;
  v36[3] = sub_100097844;
  v36[4] = sub_100097854;
  id v37 = 0LL;
  int v7 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  @"com.apple.assistant.backedup",  CKCurrentUserDefaultName);
  int v8 = *(void **)(a1 + 32);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_100097928;
  v33[3] = &unk_1004F2BF0;
  id v35 = v36;
  __int16 v9 = v6;
  __int16 v34 = v9;
  [v8 _deleteRecordZoneWithZoneID:v7 qualityOfService:25 completion:v33];
  dispatch_group_enter(v9);
  v31[0] = 0LL;
  v31[1] = v31;
  v31[2] = 0x3032000000LL;
  void v31[3] = sub_100097844;
  v31[4] = sub_100097854;
  id v32 = 0LL;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[CKKnowledgeStore defaultSynchedKnowledgeStore]( &OBJC_CLASS___CKKnowledgeStore,  "defaultSynchedKnowledgeStore"));
  if (v10)
  {
    dispatch_group_enter(v9);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100097974;
    v28[3] = &unk_1004F2BF0;
    uint64_t v30 = v31;
    __int16 v29 = v9;
    [v10 disableSyncAndDeleteCloudDataWithCompletionHandler:v28];
  }

  dispatch_group_enter(v9);
  v26[0] = 0LL;
  v26[1] = v26;
  v26[2] = 0x3032000000LL;
  v26[3] = sub_100097844;
  v26[4] = sub_100097854;
  id v27 = 0LL;
  __int16 v11 = -[CKRecordZoneID initWithZoneName:ownerName:]( objc_alloc(&OBJC_CLASS___CKRecordZoneID),  "initWithZoneName:ownerName:",  @"com.apple.assistant.multiuser.shared",  CKCurrentUserDefaultName);
  id v12 = *(void **)(a1 + 32);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1000979C0;
  v23[3] = &unk_1004F2BF0;
  id v25 = v26;
  id v13 = v9;
  __int16 v24 = v13;
  [v12 _deleteRecordZoneWithZoneID:v11 qualityOfService:25 completion:v23];
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, kAFCloudStorageDeletedByUserDarwinNotification, 0LL, 0LL, 1u);
  id v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100097A0C;
  block[3] = &unk_1004EFBF0;
  id v18 = v15;
  uint64_t v19 = v41;
  __int16 v20 = v36;
  uint64_t v21 = v31;
  id v22 = v26;
  dispatch_group_notify(v13, v16, block);

  _Block_object_dispose(v26, 8);
  _Block_object_dispose(v31, 8);

  _Block_object_dispose(v36, 8);
  _Block_object_dispose(v41, 8);
}

void sub_1000977F0(_Unwind_Exception *a1)
{
}

uint64_t sub_100097844(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100097854(uint64_t a1)
{
}

void sub_10009785C(uint64_t a1, void *a2)
{
  id v4 = a2;
  int v5 = AFIsMultiUserCompanion(v4);
  if (v4 || !v5)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(dispatch_queue_s **)(v6 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100097AAC;
    block[3] = &unk_1004FBE80;
    void block[4] = v6;
    __int128 v9 = *(_OWORD *)(a1 + 40);
    id v8 = (id)v9;
    __int128 v11 = v9;
    dispatch_async(v7, block);
  }
}

void sub_100097928(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100097974(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000979C0(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100097A0C(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    id v3 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
    if (v3
      || (id v3 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL)) != 0LL
      || (id v3 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL)) != 0LL
      || (id v3 = *(void **)(*(void *)(a1[8] + 8LL) + 40LL)) != 0LL)
    {
      id v4 = v3;
      uint64_t v2 = a1[4];
    }

    else
    {
      id v4 = 0LL;
    }

    id v5 = v4;
    (*(void (**)(void))(v2 + 16))();
  }

void sub_100097AAC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100097B34;
  v4[3] = &unk_1004EFBA0;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  [v1 _saveCloudSyncEnabledRecord:0 mirror:1 qualityOfService:25 completion:v4];
}

void sub_100097B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    __int128 v9 = "-[ADCloudKitManager disableAndDeleteCloudSyncWithCompletion:]_block_invoke_4";
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s synced cloud sync status to mirror with error (%@)",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
  id v7 = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100097C20(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 184LL);
  if (v2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([v2 dataStore]);
    [v4 synchronizeWithCompletion:0];
    [v4 synchronizeKeychainPreferencesWithCompletion:0];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 176) dataStore]);
    [v3 synchronizeWithCompletion:0];
  }

void sub_100097CA4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100097D88;
  v13[3] = &unk_1004EFB50;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v14 = v4;
  uint64_t v15 = v5;
  [v3 fetchZoneShare:v13];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100097E30;
  v9[3] = &unk_1004EFB78;
  uint64_t v6 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  [v6 fetchValueForKeyFromSharedStore:@"ADCloudKitShareParticipants" completion:v9];
}

void sub_100097D88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (!a4)
    {
      uint64_t v5 = *(void **)(a1 + 32);
      id v6 = a2;
      [v5 setPermission:3];
      [v6 addParticipant:*(void *)(a1 + 32)];
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void **)(v7 + 24);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_1000981AC;
      v9[3] = &unk_1004FC2C8;
      void v9[4] = v7;
      id v10 = 0LL;
      [v8 saveZoneShare:v6 completion:v9];
    }
  }

void sub_100097E30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5) {
    uint64_t v7 = (NSMutableDictionary *)[v5 mutableCopy];
  }
  else {
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  uint64_t v8 = v7;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) participantID]);
  id v10 = (void *)v9;
  if (v9) {
    id v11 = (const __CFString *)v9;
  }
  else {
    id v11 = @"unknownParticipantID";
  }
  -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v11, *(void *)(a1 + 40));
  uint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315395;
    __int16 v20 = "-[ADCloudKitManager saveParticipantsOnShare:forOwner:participants:]_block_invoke_4";
    __int16 v21 = 2113;
    id v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s participantID (%{private}@)", buf, 0x16u);
  }

  id v13 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v8,  @"ADCloudKitShareParticipants",  0LL);
  id v14 = *(void **)(a1 + 48);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100097FF0;
  v17[3] = &unk_1004FC2C8;
  uint8_t v17[4] = v14;
  id v18 = v8;
  uint64_t v15 = v8;
  id v16 = v14;
  [v16 addDictionaryToSharedStore:v13 completion:v17];
}

void sub_100097FF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v11 = "-[ADCloudKitManager saveParticipantsOnShare:forOwner:participants:]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to save share participants list with (%@)",  buf,  0x16u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000981A4;
    v8[3] = &unk_1004FD8D0;
    id v6 = v3;
    id v9 = v6;
    [v5 logEventWithType:6104 contextProvider:v8];

    [*(id *)(a1 + 32) handleCloudKitError:v6 forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:5];
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void **)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315395;
    id v11 = "-[ADCloudKitManager saveParticipantsOnShare:forOwner:participants:]_block_invoke_2";
    __int16 v12 = 2113;
    id v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Saved (%{private}@)", buf, 0x16u);
  }
}

uint64_t sub_1000981A4(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

id *sub_1000981AC(id *result, uint64_t a2)
{
  if (a2) {
    return (id *)[result[4] handleCloudKitError:result[5] forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:5];
  }
  return result;
}

void sub_1000981D0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 120) accountStatus] != (id)1
    || ([*(id *)(*(void *)(a1 + 32) + 120) supportsDeviceToDeviceEncryption] & 1) == 0
    && !*(_BYTE *)(*(void *)(a1 + 32) + 16LL))
  {
    __int16 v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unint64_t v52 = "-[ADCloudKitManager shareWithOwner:addShare:retryCount:homes:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s Account not ready.", buf, 0xCu);
    }

    dispatch_time_t v13 = dispatch_time(0LL, 180000000000LL);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(a1 + 40);
    id v16 = *(dispatch_queue_s **)(v14 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100098678;
    block[3] = &unk_1004F89D8;
    void block[4] = v14;
    id v17 = v15;
    char v50 = *(_BYTE *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 64);
    id v46 = v17;
    uint64_t v49 = v18;
    id v47 = *(id *)(a1 + 48);
    id v48 = *(id *)(a1 + 56);
    dispatch_after(v13, v16, block);

    id v11 = v46;
    goto LABEL_13;
  }

  id v2 = &AFSiriLogContextDaemon;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = @"add";
    uint64_t v5 = *(void *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 72)) {
      id v4 = @"delete";
    }
    *(_DWORD *)__int128 buf = 136315650;
    unint64_t v52 = "-[ADCloudKitManager shareWithOwner:addShare:retryCount:homes:completion:]_block_invoke";
    __int16 v53 = 2112;
    char v54 = v4;
    __int16 v55 = 2112;
    uint64_t v56 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %@ for homeOwnerID (%@)", buf, 0x20u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 24);
  if (v7)
  {
LABEL_9:
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_1000987F8;
    v35[3] = &unk_1004EFB28;
    char v38 = *(_BYTE *)(a1 + 72);
    id v8 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    id v37 = v8;
    v35[4] = v9;
    id v36 = v10;
    [v7 fetchZoneShare:v35];

    id v11 = v37;
LABEL_13:

    return;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 136) container]);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) multiUserRecordZoneInfo]);
  uint64_t v21 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v21 + 16))
  {
    id v22 = *(id *)(v21 + 128);

    uint64_t v19 = v22;
  }

  if (v19)
  {
    if (v20)
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v20 zone]);

      if (v23)
      {
        __int16 v24 = -[ADCloudKitZoneShareCreator initWithQueue:container:sharedZone:]( objc_alloc(&OBJC_CLASS___ADCloudKitZoneShareCreator),  "initWithQueue:container:sharedZone:",  *(void *)(*(void *)(a1 + 32) + 112LL),  v19,  v20);
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v26 = *(void **)(v25 + 24);
        *(void *)(v25 + 24) = v24;

        uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 24LL);
        goto LABEL_9;
      }
    }
  }

  id v27 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    if (v20)
    {
      id v2 = (void *)objc_claimAutoreleasedReturnValue([v20 zone]);
      __int16 v34 = @"container";
      if (!v2) {
        __int16 v34 = @"[zoneInfo zone]";
      }
    }

    else
    {
      __int16 v34 = @"zone";
    }

    *(_DWORD *)__int128 buf = 136315394;
    unint64_t v52 = "-[ADCloudKitManager shareWithOwner:addShare:retryCount:homes:completion:]_block_invoke";
    __int16 v53 = 2112;
    char v54 = v34;
    _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s %@ not found.", buf, 0x16u);
    if (v20) {
  }
    }

  dispatch_time_t v28 = dispatch_time(0LL, 180000000000LL);
  uint64_t v29 = *(void *)(a1 + 32);
  uint64_t v30 = *(void **)(a1 + 40);
  id v31 = *(dispatch_queue_s **)(v29 + 112);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_100098738;
  v39[3] = &unk_1004F89D8;
  v39[4] = v29;
  id v32 = v30;
  char v44 = *(_BYTE *)(a1 + 72);
  uint64_t v33 = *(void *)(a1 + 64);
  id v40 = v32;
  uint64_t v43 = v33;
  id v41 = *(id *)(a1 + 48);
  id v42 = *(id *)(a1 + 56);
  dispatch_after(v28, v31, v39);
}

id sub_100098678(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCloudKitManager shareWithOwner:addShare:retryCount:homes:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Retrying sharing.", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) shareWithOwner:*(void *)(a1 + 40) addShare:*(unsigned __int8 *)(a1 + 72) retryCount:*(void *)(a1 + 64) + 1 homes:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

id sub_100098738(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCloudKitManager shareWithOwner:addShare:retryCount:homes:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Retrying sharing.", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) shareWithOwner:*(void *)(a1 + 40) addShare:*(unsigned __int8 *)(a1 + 72) retryCount:*(void *)(a1 + 64) + 1 homes:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000987F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v27 = "-[ADCloudKitManager shareWithOwner:addShare:retryCount:homes:completion:]_block_invoke";
      __int16 v28 = 2112;
      id v29 = v9;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Retrying for sharing error (%@)",  buf,  0x16u);
    }

    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v11 = 5LL;
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      uint64_t v25 = *(void *)(a1 + 40);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v25, 1LL));
      [v14 setMultiUserHomeUUIDsForDeletion:v15];

      uint64_t v11 = 6LL;
    }

    [*(id *)(a1 + 32) handleCloudKitError:v9 forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:v11];
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      dispatch_time_t v13 = *(void (**)(void))(v16 + 16);
      goto LABEL_12;
    }
  }

  else
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      uint64_t v18 = *(void **)(a1 + 40);
      uint64_t v19 = *(dispatch_queue_s **)(v17 + 112);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_100098A34;
      v20[3] = &unk_1004FCBB0;
      void v20[4] = v17;
      id v21 = v18;
      id v22 = v7;
      id v23 = v8;
      id v24 = *(id *)(a1 + 48);
      dispatch_async(v19, v20);

      goto LABEL_14;
    }

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      dispatch_time_t v13 = *(void (**)(void))(v12 + 16);
LABEL_12:
      v13();
    }
  }

id sub_100098A34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeHomeOwnerCKParticipantAssociation:*(void *)(a1 + 40) onShare:*(void *)(a1 + 48) onContainer:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_100098A48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v92[0] = _NSConcreteStackBlock;
    v92[1] = 3221225472LL;
    v92[2] = sub_1000993C4;
    v92[3] = &unk_1004FD8D0;
    id v8 = (NSMutableArray *)v6;
    uint16x8_t v93 = v8;
    [v7 logEventWithType:6104 contextProvider:v92];

    id v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
      __int16 v102 = 2112;
      int8x16x4_t v103 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch participants with error (%@)",  buf,  0x16u);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    uint64_t v99 = *(void *)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v99, 1LL));
    [v10 setMultiUserHomeUUIDsForDeletion:v11];

    [*(id *)(a1 + 40) handleCloudKitError:v8 forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:6];
    uint64_t v12 = *(void *)(a1 + 64);
    if (v12) {
      (*(void (**)(uint64_t, void, void, NSMutableArray *))(v12 + 16))( v12,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v8);
    }
    dispatch_time_t v13 = v93;
  }

  else
  {
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    __int128 v88 = 0u;
    __int128 v89 = 0u;
    id v14 = [v5 countByEnumeratingWithState:&v88 objects:v98 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = 0LL;
      uint64_t v17 = *(void *)v89;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v89 != v17) {
            objc_enumerationMutation(v5);
          }
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:*(void *)(*((void *)&v88 + 1) + 8 * (void)i)]);
          v16 += [v19 isEqualToString:@"unknownParticipantID"];
        }

        id v15 = [v5 countByEnumeratingWithState:&v88 objects:v98 count:16];
      }

      while (v15);
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    __int16 v20 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v5 objectForKey:*(void *)(a1 + 32)]);
    dispatch_time_t v13 = v20;
    if (v20 && -[NSMutableArray isEqualToString:](v20, "isEqualToString:", @"unknownParticipantID"))
    {
      id v21 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s Removing an unknown association.",  buf,  0xCu);
      }

      [*(id *)(a1 + 40) removeHomeOwnerCKParticipantAssociation:*(void *)(a1 + 32) participants:v5 completion:*(void *)(a1 + 64)];
      if (v16 == 1)
      {
        unsigned int v63 = v13;
        id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
        uint64_t v62 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        __int128 v86 = 0u;
        __int128 v87 = 0u;
        id obj = v22;
        id v23 = [obj countByEnumeratingWithState:&v84 objects:v97 count:16];
        if (v23)
        {
          id v24 = v23;
          uint64_t v25 = *(void *)v85;
          uint64_t v64 = *(void *)v85;
          do
          {
            uint64_t v26 = 0LL;
            id v65 = v24;
            do
            {
              if (*(void *)v85 != v25) {
                objc_enumerationMutation(obj);
              }
              id v27 = *(void **)(*((void *)&v84 + 1) + 8LL * (void)v26);
              __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 participantID]);
              if ([v27 role] == (id)1)
              {
                id v29 = 0LL;
              }

              else
              {
                uint64_t v30 = a1;
                __int128 v82 = 0u;
                __int128 v83 = 0u;
                __int128 v80 = 0u;
                __int128 v81 = 0u;
                id v31 = v5;
                id v32 = [v31 countByEnumeratingWithState:&v80 objects:v96 count:16];
                if (v32)
                {
                  id v33 = v32;
                  uint64_t v34 = *(void *)v81;
                  while (2)
                  {
                    for (j = 0LL; j != v33; j = (char *)j + 1)
                    {
                      if (*(void *)v81 != v34) {
                        objc_enumerationMutation(v31);
                      }
                      id v36 = (void *)objc_claimAutoreleasedReturnValue( [v31 objectForKey:*(void *)(*((void *)&v80 + 1) + 8 * (void)j)]);
                      if ([v36 isEqualToString:v28])
                      {
                        id v29 = v63;

                        goto LABEL_38;
                      }
                    }

                    id v33 = [v31 countByEnumeratingWithState:&v80 objects:v96 count:16];
                    if (v33) {
                      continue;
                    }
                    break;
                  }
                }

                -[NSMutableArray addObject:](v62, "addObject:", v27);
                id v29 = 0LL;
LABEL_38:
                a1 = v30;
                uint64_t v25 = v64;
                id v24 = v65;
              }

              uint64_t v26 = (char *)v26 + 1;
            }

            while (v26 != v24);
            id v24 = [obj countByEnumeratingWithState:&v84 objects:v97 count:16];
          }

          while (v24);
        }

        id v37 = -[NSMutableArray count](v62, "count");
        char v38 = (os_log_s *)AFSiriLogContextDaemon;
        BOOL v39 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
        if (v37)
        {
          id v6 = 0LL;
          if (v39)
          {
            *(_DWORD *)__int128 buf = 136315394;
            unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
            __int16 v102 = 2112;
            int8x16x4_t v103 = v62;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s Removing these participant IDs (%@)",  buf,  0x16u);
          }

          __int128 v78 = 0u;
          __int128 v79 = 0u;
          __int128 v76 = 0u;
          __int128 v77 = 0u;
          id v40 = v62;
          id v41 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v40,  "countByEnumeratingWithState:objects:count:",  &v76,  v95,  16LL);
          dispatch_time_t v13 = v63;
          if (v41)
          {
            id v42 = v41;
            uint64_t v43 = *(void *)v77;
            do
            {
              for (k = 0LL; k != v42; k = (char *)k + 1)
              {
                if (*(void *)v77 != v43) {
                  objc_enumerationMutation(v40);
                }
                [*(id *)(a1 + 48) removeParticipant:*(void *)(*((void *)&v76 + 1) + 8 * (void)k)];
              }

              id v42 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v40,  "countByEnumeratingWithState:objects:count:",  &v76,  v95,  16LL);
            }

            while (v42);
          }

          [*(id *)(*(void *)(a1 + 40) + 24) saveZoneShare:*(void *)(a1 + 48) completion:&stru_1004EFB00];
        }

        else
        {
          id v6 = 0LL;
          dispatch_time_t v13 = v63;
          if (v39)
          {
            *(_DWORD *)__int128 buf = 136315138;
            unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "%s Nothing to remove", buf, 0xCu);
          }
        }
      }

      else
      {
        id v61 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315138;
          unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "%s Multiple unknown association. Cannot modify share participants as of now. Remove when unknown homeOwner a ssociation is removed.",  buf,  0xCu);
        }
      }
    }

    else if (v16)
    {
      id v45 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "%s Unknown associations exist, do not delete participant from share, but remove the association with homeOwnerID.",  buf,  0xCu);
      }

      [*(id *)(a1 + 40) removeHomeOwnerCKParticipantAssociation:*(void *)(a1 + 32) participants:v5 completion:*(void *)(a1 + 64)];
    }

    else
    {
      id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) participants]);
      id v47 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "%s Removing participant and home owner association",  buf,  0xCu);
      }

      __int128 v74 = 0u;
      __int128 v75 = 0u;
      __int128 v72 = 0u;
      __int128 v73 = 0u;
      id v48 = v46;
      id v49 = [v48 countByEnumeratingWithState:&v72 objects:v94 count:16];
      if (v49)
      {
        id v50 = v49;
        uint64_t v51 = *(void *)v73;
        while (2)
        {
          for (m = 0LL; m != v50; m = (char *)m + 1)
          {
            if (*(void *)v73 != v51) {
              objc_enumerationMutation(v48);
            }
            __int16 v53 = *(void **)(*((void *)&v72 + 1) + 8LL * (void)m);
            char v54 = (void *)objc_claimAutoreleasedReturnValue([v53 participantID]);
            if (-[NSMutableArray isEqualToString:](v13, "isEqualToString:", v54))
            {
              [*(id *)(a1 + 48) removeParticipant:v53];
              uint64_t v56 = *(void **)(a1 + 32);
              char v57 = *(void **)(*(void *)(a1 + 40) + 24LL);
              uint64_t v58 = *(void *)(a1 + 48);
              v67[0] = _NSConcreteStackBlock;
              v67[1] = 3221225472LL;
              v67[2] = sub_1000993CC;
              v67[3] = &unk_1004F79D8;
              id v59 = v56;
              uint64_t v60 = *(void *)(a1 + 40);
              id v68 = v59;
              uint64_t v69 = v60;
              id v71 = *(id *)(a1 + 64);
              id v70 = v5;
              [v57 saveZoneShare:v58 completion:v67];

              goto LABEL_70;
            }
          }

          id v50 = [v48 countByEnumeratingWithState:&v72 objects:v94 count:16];
          if (v50) {
            continue;
          }
          break;
        }
      }

      __int16 v55 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unint64_t v101 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke_2";
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "%s Did not find association", buf, 0xCu);
      }

      [*(id *)(a1 + 40) removeHomeOwnerCKParticipantAssociation:*(void *)(a1 + 32) participants:v5 completion:*(void *)(a1 + 64)];
LABEL_70:
      id v6 = 0LL;
    }
  }
}

uint64_t sub_1000993C4(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

void sub_1000993CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v17 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error while saving changes (%@)",  buf,  0x16u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    uint64_t v15 = *(void *)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
    [v5 setMultiUserHomeUUIDsForDeletion:v6];

    [*(id *)(a1 + 40) handleCloudKitError:v3 forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:6];
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      (*(void (**)(uint64_t, void, void, id))(v7 + 16))(v7, 0LL, 0LL, v3);
    }
  }

  else
  {
    id v9 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v10 = *(dispatch_queue_s **)(v8 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000995A0;
    block[3] = &unk_1004FDA30;
    void block[4] = v8;
    id v12 = v9;
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    dispatch_async(v10, block);
  }
}

id sub_1000995A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeHomeOwnerCKParticipantAssociation:*(void *)(a1 + 40) participants:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1000995B0(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:onShare:onContainer:completion:]_block_invoke";
      __int16 v6 = 2112;
      uint64_t v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Failure to save share on sanitization (%@)",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_100099674(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v20 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:participants:completion:]_block_invoke";
      __int16 v21 = 2112;
      id v22 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to save share participants list with (%@)",  buf,  0x16u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    id v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472LL;
    uint64_t v15 = sub_1000998C4;
    uint64_t v16 = &unk_1004FD8D0;
    id v6 = v3;
    id v17 = v6;
    [v5 logEventWithType:6104 contextProvider:&v13];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[ADPreferences sharedPreferences]( &OBJC_CLASS___ADPreferences,  "sharedPreferences",  v13,  v14,  v15,  v16));
    uint64_t v18 = *(void *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
    [v7 setMultiUserHomeUUIDsForDeletion:v8];

    [*(id *)(a1 + 40) handleCloudKitError:v6 forZone:@"com.apple.assistant.multiuser.shared" mirror:1 operationType:6];
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v9 removeMultiUserHomeUUID:*(void *)(a1 + 32)];

    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void **)(a1 + 48);
      *(_DWORD *)__int128 buf = 136315395;
      __int16 v20 = "-[ADCloudKitManager removeHomeOwnerCKParticipantAssociation:participants:completion:]_block_invoke_2";
      __int16 v21 = 2113;
      id v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Saved (%{private}@)", buf, 0x16u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    (*(void (**)(uint64_t, void, void, id))(v12 + 16))(v12, 0LL, 0LL, v3);
  }
}

uint64_t sub_1000998C4(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

void sub_1000998CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (!v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v12 = "-[ADCloudKitManager _acceptSharesForMetadatas:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Share acceptance on sharee side complete.",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(dispatch_queue_s **)(v5 + 112);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100099D3C;
    v9[3] = &unk_1004FD940;
    void v9[4] = v5;
    uint64_t v7 = v9;
    goto LABEL_10;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v12 = "-[ADCloudKitManager _acceptSharesForMetadatas:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
  }

  if (!sub_1002FF9F8(v3))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v6 = *(dispatch_queue_s **)(v8 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100099CE0;
    block[3] = &unk_1004FD940;
    void block[4] = v8;
    uint64_t v7 = block;
LABEL_10:
    dispatch_async(v6, v7);
    goto LABEL_11;
  }

  [*(id *)(a1 + 32) handleCloudKitError:v3 forZone:@"com.apple.assistant.multiuser.shared" mirror:*(void *)(*(void *)(a1 + 40) + 136) != 0 operationType:7];
LABEL_11:
}

void sub_100099A9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v19 = "-[ADCloudKitManager _acceptSharesForMetadatas:]_block_invoke_2";
      __int16 v20 = 2112;
      id v21 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
    }

    if (sub_1002FF9F8(v9))
    {
      [*(id *)(a1 + 32) handleCloudKitError:v9 forZone:@"com.apple.assistant.multiuser.shared" mirror:*(void *)(*(void *)(a1 + 40) + 136) != 0 operationType:7];
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 40);
      __int16 v13 = *(dispatch_queue_s **)(v12 + 112);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_100099C70;
      v17[3] = &unk_1004FD940;
      uint8_t v17[4] = v12;
      dispatch_async(v13, v17);
    }
  }

  else
  {
    uint64_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 112LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100099CCC;
    block[3] = &unk_1004FD968;
    id v15 = v8;
    id v16 = *(id *)(a1 + 48);
    dispatch_async(v11, block);
  }
}

void sub_100099C70(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) dequeueObject];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) frontObject]);

  if (v3) {
    [*(id *)(a1 + 32) continueShareAcceptanceOperations];
  }
}

id *sub_100099CCC(id *result)
{
  if (result[4]) {
    return (id *)objc_msgSend(result[5], "addObject:");
  }
  return result;
}

void sub_100099CE0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) dequeueObject];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) frontObject]);

  if (v3) {
    [*(id *)(a1 + 32) continueShareAcceptanceOperations];
  }
}

void sub_100099D3C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) dequeueObject];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) frontObject]);

  if (v3) {
    [*(id *)(a1 + 32) continueShareAcceptanceOperations];
  }
}

void sub_100099D98(uint64_t a1)
{
  if (*(void *)(a1 + 72) >= 4uLL)
  {
    id v2 = *(void **)(a1 + 32);
    if (v2)
    {
      id v3 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        id v36 = v3;
        id v37 = (__CFString *)objc_claimAutoreleasedReturnValue([v2 url]);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v56 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke";
        __int16 v57 = 2112;
        uint64_t v58 = v37;
        _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s Giving up on object with URL (%@)",  buf,  0x16u);
      }

      id v4 = [*(id *)(*(void *)(a1 + 40) + 64) dequeueObject];
      [*(id *)(a1 + 40) continueShareAcceptanceOperations];
    }

    return;
  }

  if (*(_BYTE *)(*(void *)(a1 + 40) + 16LL))
  {
    uint64_t v5 = objc_alloc(&OBJC_CLASS___CKFetchShareMetadataOperation);
    uint64_t v54 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v54, 1LL));
    id v7 = -[CKFetchShareMetadataOperation initWithShareURLs:](v5, "initWithShareURLs:", v6);
    goto LABEL_10;
  }

  if (*(void *)(a1 + 56))
  {
    id v8 = objc_alloc(&OBJC_CLASS___CKFetchShareMetadataOperation);
    uint64_t v53 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v53, 1LL));
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v51 = *(void *)(a1 + 48);
    uint64_t v52 = v9;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v52,  &v51,  1LL));
    id v7 = -[CKFetchShareMetadataOperation initWithShareURLs:invitationTokensByShareURL:]( v8,  "initWithShareURLs:invitationTokensByShareURL:",  v6,  v10);

LABEL_10:
    uint64_t v11 = (ADCloudKitShareAcceptanceParameters *)*(id *)(a1 + 32);
    uint64_t v12 = v11;
    if (*(void *)(a1 + 32))
    {
      __int16 v13 = v11;
    }

    else
    {
      __int16 v13 = -[ADCloudKitShareAcceptanceParameters initWithURL:token:container:retryCount:]( objc_alloc(&OBJC_CLASS___ADCloudKitShareAcceptanceParameters),  "initWithURL:token:container:retryCount:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72));

      id v29 = *(void **)(*(void *)(a1 + 40) + 64LL);
      if (!v29)
      {
        uint64_t v30 = objc_alloc_init(&OBJC_CLASS___AFQueue);
        uint64_t v31 = *(void *)(a1 + 40);
        id v32 = *(void **)(v31 + 64);
        *(void *)(v31 + 64) = v30;

        id v29 = *(void **)(*(void *)(a1 + 40) + 64LL);
      }

      id v33 = (void *)objc_claimAutoreleasedReturnValue([v29 frontObject]);

      if (v33)
      {
        uint64_t v34 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v56 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s Another share accept operation in progress.",  buf,  0xCu);
        }

        [*(id *)(*(void *)(a1 + 40) + 64) enqueueObject:v13];
        goto LABEL_35;
      }

      [*(id *)(*(void *)(a1 + 40) + 64) enqueueObject:v13];
    }

    if ([*(id *)(*(void *)(a1 + 40) + 120) accountStatus] == (id)1
      && (([*(id *)(*(void *)(a1 + 40) + 120) supportsDeviceToDeviceEncryption] & 1) != 0
       || *(_BYTE *)(*(void *)(a1 + 40) + 16LL)))
    {
      id v14 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v15 = *(const __CFString **)(a1 + 48);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v56 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke_2";
        __int16 v57 = 2112;
        uint64_t v58 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Starting share accept for URL (%@)",  buf,  0x16u);
      }

      id v16 = *(id *)(a1 + 40);
      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_10009A37C;
      v45[3] = &unk_1004EFA90;
      id v46 = *(id *)(a1 + 48);
      id v47 = v16;
      uint64_t v48 = *(void *)(a1 + 40);
      id v18 = v17;
      id v49 = v18;
      -[CKFetchShareMetadataOperation setPerShareMetadataBlock:](v7, "setPerShareMetadataBlock:", v45);
      char v38 = _NSConcreteStackBlock;
      uint64_t v39 = 3221225472LL;
      id v40 = sub_10009A558;
      id v41 = &unk_1004F7328;
      uint64_t v19 = *(void *)(a1 + 40);
      id v42 = v16;
      uint64_t v43 = v19;
      id v20 = v18;
      id v44 = v20;
      -[CKFetchShareMetadataOperation setFetchShareMetadataCompletionBlock:]( v7,  "setFetchShareMetadataCompletionBlock:",  &v38);
      uint64_t v21 = *(void *)(a1 + 40);
      id v22 = *(void **)(v21 + 136);
      if (v22)
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "container", v38, v39, v40, v41, v42, v43));
        [v23 addOperation:v7];
      }

      else
      {
        objc_msgSend(*(id *)(v21 + 128), "addOperation:", v7, v38, v39, v40, v41, v42, v43);
      }
    }

    else
    {
      id v24 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = @"still";
        if (!*(void *)(a1 + 72)) {
          uint64_t v25 = @"is";
        }
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v56 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke";
        __int16 v57 = 2112;
        uint64_t v58 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s Account %@ not ready to accept the share",  buf,  0x16u);
      }

      dispatch_time_t v26 = dispatch_time(0LL, 180000000000LL);
      uint64_t v27 = *(void *)(a1 + 40);
      __int16 v28 = *(dispatch_queue_s **)(v27 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10009A374;
      block[3] = &unk_1004FD940;
      void block[4] = v27;
      dispatch_after(v26, v28, block);
    }

LABEL_35:
    return;
  }

  id v35 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v56 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%s No token on shared Manatee container",  buf,  0xCu);
  }

        uint64_t v5 = (char *)v5 + 1;
      }

      while (v5 != v3);
      id v3 = [obj countByEnumeratingWithState:&v62 objects:v71 count:16];
    }

    while (v3);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FA4D8;
  block[3] = &unk_1004F7960;
  uint64_t v51 = *(int8x16_t *)(v39 + 40);
  id v36 = (dispatch_queue_s *)(id)v51.i64[0];
  uint64_t v53 = vextq_s8(v51, v51, 8uLL);
  uint64_t v54 = v45;
  __int16 v55 = v44;
  uint64_t v56 = *(id *)(v39 + 32);
  __int16 v57 = *(id *)(v39 + 56);
  id v37 = v44;
  char v38 = v45;
  dispatch_group_notify(group, v36, block);
}
}

id sub_10009A374(uint64_t a1)
{
  return [*(id *)(a1 + 32) continueShareAcceptanceOperations];
}

void sub_10009A37C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      id v20 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke";
      __int16 v21 = 2112;
      id v22 = v9;
      __int16 v23 = 2112;
      uint64_t v24 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Failed with error (%@) for URL (%@)",  buf,  0x20u);
    }

    if (sub_1002FF9F8(v9))
    {
      [*(id *)(a1 + 40) handleCloudKitError:v9 forZone:@"com.apple.assistant.multiuser.shared" mirror:*(void *)(*(void *)(a1 + 48) + 136) != 0 operationType:7];
    }

    else
    {
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = *(dispatch_queue_s **)(v13 + 112);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      void v18[2] = sub_10009A808;
      v18[3] = &unk_1004FD940;
      void v18[4] = v13;
      dispatch_async(v14, v18);
    }
  }

  else
  {
    uint64_t v12 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 112LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009A864;
    block[3] = &unk_1004FD968;
    id v16 = v8;
    id v17 = *(id *)(a1 + 56);
    dispatch_async(v12, block);
  }
}

void sub_10009A558(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v16 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Failed to accept share with error (%@)",  buf,  0x16u);
    }

    if (sub_1002FF9F8(v3))
    {
      [*(id *)(a1 + 32) handleCloudKitError:v3 forZone:@"com.apple.assistant.multiuser.shared" mirror:*(void *)(*(void *)(a1 + 40) + 136) != 0 operationType:7];
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 40);
      id v10 = *(dispatch_queue_s **)(v9 + 112);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_10009A6F0;
      void v14[3] = &unk_1004FD940;
      void v14[4] = v9;
      dispatch_async(v10, v14);
    }
  }

  else
  {
    uint64_t v5 = *(void **)(a1 + 48);
    id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 112LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009A74C;
    block[3] = &unk_1004FD968;
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 40);
    id v12 = v7;
    uint64_t v13 = v8;
    dispatch_async(v6, block);
  }
}

void sub_10009A6F0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) dequeueObject];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) frontObject]);

  if (v3) {
    [*(id *)(a1 + 32) continueShareAcceptanceOperations];
  }
}

id sub_10009A74C(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s accepting share for meta data",  (uint8_t *)&v4,  0xCu);
  }

  id result = [*(id *)(a1 + 32) count];
  if (result) {
    return [*(id *)(a1 + 40) _acceptSharesForMetadatas:*(void *)(a1 + 32)];
  }
  return result;
}

void sub_10009A808(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) dequeueObject];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) frontObject]);

  if (v3) {
    [*(id *)(a1 + 32) continueShareAcceptanceOperations];
  }
}

void sub_10009A864(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    uint64_t v5 = "-[ADCloudKitManager acceptShare:token:containerID:retryCount:object:]_block_invoke_2";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s adding share meta data (%@)",  (uint8_t *)&v4,  0x16u);
  }

  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
  }
}

void sub_10009A92C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009A9E8;
  block[3] = &unk_1004FD9E0;
  id v12 = v6;
  id v13 = v5;
  id v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_10009A9E8(void *a1)
{
  if (a1[4])
  {
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    uint64_t v2 = a1[5];
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSString);
    char isKindOfClass = objc_opt_isKindOfClass(v2, v3);
    id v5 = (void *)AFSiriLogContextDaemon;
    BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
    if ((isKindOfClass & 1) != 0)
    {
      if (v6)
      {
        id v9 = (void *)a1[5];
        id v10 = v5;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 debugDescription]);
        int v15 = 136315650;
        id v16 = "-[ADCloudKitManager fetchSharedUserIdForiCloudAltDSID:completion:]_block_invoke";
        __int16 v17 = 2112;
        id v18 = @"meDeviceSharedUserID";
        __int16 v19 = 2112;
        id v20 = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Retrieved results for %@ : %@",  (uint8_t *)&v15,  0x20u);
      }

      (*(void (**)(void))(a1[6] + 16LL))();
    }

    else
    {
      if (v6)
      {
        id v12 = (void *)a1[5];
        id v13 = v5;
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 debugDescription]);
        int v15 = 136315650;
        id v16 = "-[ADCloudKitManager fetchSharedUserIdForiCloudAltDSID:completion:]_block_invoke_2";
        __int16 v17 = 2112;
        id v18 = @"meDeviceSharedUserID";
        __int16 v19 = 2112;
        id v20 = v14;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Invalid results for %@ : %@",  (uint8_t *)&v15,  0x20u);
      }

      uint64_t v7 = a1[6];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4012LL));
      (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v8, 0LL);
    }
  }

void sub_10009AC0C(void *a1)
{
  if (*(void *)(a1[4] + 32LL))
  {
    _[*(id *)(a1[4] + 32) fetchValuesForKeysFromSharedStore:a1[5] withQOS:a1[7] completion:a1[6]];
  }

  else
  {
    uint64_t v1 = a1[6];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_10009AC9C(void *a1)
{
  if (*(void *)(a1[4] + 32LL))
  {
    [*(id *)(a1[4] + 32) fetchValueForKeyFromSharedStore:a1[5] withQOS:a1[7] completion:a1[6]];
  }

  else
  {
    uint64_t v1 = a1[6];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6LL));
      (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v2);
    }
  }

void sub_10009AD2C(void *a1)
{
  id v2 = -[ADCloudKitSharedZoneUpdater initWithQueue:container:sharedZone:zoneOwner:delegate:]( objc_alloc(&OBJC_CLASS___ADCloudKitSharedZoneUpdater),  "initWithQueue:container:sharedZone:zoneOwner:delegate:",  *(void *)(a1[4] + 112LL),  a1[5],  *(void *)(a1[4] + 216LL),  1LL);
  -[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]( v2,  "fetchValueForKeyFromSharedStore:withQOS:completion:",  a1[6],  a1[8],  a1[7]);
}

void sub_10009AD84(void *a1)
{
  if (*(void *)(a1[4] + 32LL))
  {
    _[*(id *)(a1[4] + 32) addDictionaryToSharedStore:a1[5] recordKeysForDeletion:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6LL));
      (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
    }
  }

void sub_10009AE10(void *a1)
{
  if (*(void *)(a1[4] + 32LL))
  {
    _[*(id *)(a1[4] + 32) addKeyToSharedStore:a1[5] value:a1[6] completion:a1[7]];
  }

  else
  {
    uint64_t v1 = a1[7];
    if (v1)
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6LL));
      (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
    }
  }

id sub_10009AE9C(void *a1)
{
  return _[*(id *)(a1[4] + 32) addKeyToSharedStore:a1[5] value:a1[6]];
}

void sub_10009AEB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 56LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6LL));
  [v2 retryForType:9 zoneInfo:v1 error:v3];
}

void sub_10009AF08(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    id v5 = *(id **)(a1 + 40);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5[17] keyValueRecordZoneInfo]);
    [v5 _synchronizeMirroredContainer:v6];

    uint64_t v7 = *(id **)(a1 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7[17] accountStatusRecordZoneInfo]);
    [v7 _synchronizeMirroredContainer:v8];

    goto LABEL_5;
  }

  if ([v2 isEqualToString:@"com.apple.assistant.backedup"])
  {
    id v3 = *(id **)(a1 + 40);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3[17] keyValueRecordZoneInfo]);
LABEL_8:
    id v9 = (id)v4;
    objc_msgSend(v3, "_synchronizeMirroredContainer:");

    return;
  }

  if ([*(id *)(a1 + 32) isEqualToString:@"com.apple.assistant.account.status"])
  {
    id v3 = *(id **)(a1 + 40);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3[17] accountStatusRecordZoneInfo]);
    goto LABEL_8;
  }

  if ([*(id *)(a1 + 32) isEqualToString:@"com.apple.assistant.multiuser.shared"])
  {
LABEL_5:
    id v3 = *(id **)(a1 + 40);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3[17] multiUserRecordZoneInfo]);
    goto LABEL_8;
  }

void sub_10009B01C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    BOOL v6 = "-[ADCloudKitManager _synchronizeMirroredContainer:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Completed synchronization of key,value zone with status (%d)",  (uint8_t *)&v5,  0x12u);
  }

  if ((a2 & 1) == 0) {
    [*(id *)(a1 + 32) _scheduleMirrorSynchronizationAfterDelay:@"com.apple.assistant.backedup"];
  }
}

void sub_10009B0F0(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    BOOL v6 = "-[ADCloudKitManager _synchronizeMirroredContainer:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Completed synchronization of account status zone with status (%d)",  (uint8_t *)&v5,  0x12u);
  }

  if ((a2 & 1) == 0) {
    [*(id *)(a1 + 32) _scheduleMirrorSynchronizationAfterDelay:@"com.apple.assistant.account.status"];
  }
}

void sub_10009B1C4(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    __int16 v7 = "-[ADCloudKitManager _synchronizeMirroredContainer:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Completed synchronization of multi-user shared zone with status (%d)",  (uint8_t *)&v6,  0x12u);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  [v5 setMultiUserSharedDataNeedsSync:0];

  if ((a2 & 1) == 0) {
    [*(id *)(a1 + 32) _scheduleMirrorSynchronizationAfterDelay:@"com.apple.assistant.multiuser.shared"];
  }
}

void sub_10009B2B8(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "-[ADCloudKitManager _synchronizeMirroredContainer:]_block_invoke";
    __int16 v6 = 1024;
    BOOL v7 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Completed keychain synchronization of key,value zone with status (%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_10009B36C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = 136315650;
      id v16 = "-[ADCloudKitManager _createRecordZoneSubscriptionWithZoneID:name:recordTypes:container:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Zone subscription (%@) creation failed: (%@)",  (uint8_t *)&v15,  0x20u);
    }
  }

  if (*(void *)(a1 + 40))
  {
    id v11 = [v7 count];
    uint64_t v12 = *(void *)(a1 + 40);
    if (v11)
    {
      id v13 = [v7 mutableCopy];
      (*(void (**)(uint64_t, id, id))(v12 + 16))(v12, v9, v13);
    }

    else
    {
      (*(void (**)(uint64_t, id, void))(v12 + 16))(v12, v9, 0LL);
    }
  }
}

void sub_10009B4C4(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountOverrideInfo]);

  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountOverrideInfo]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountID]);
    LODWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = [v8 isEqualToString:v11];

    if ((_DWORD)v8)
    {
      uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _trackedCKAccountInfoForiCloudAltDSID:v17]);
      uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;

      int v15 = *(void **)(a1 + 40);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) zoneName]);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = objc_msgSend( v15,  "_isCloudSyncEnabledForZone:accountInfo:",  v16,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                                                + 40LL));
    }
  }
}

void sub_10009B5E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009B6D0;
  block[3] = &unk_1004EFA20;
  void block[4] = v7;
  id v10 = v8;
  uint64_t v11 = *(void *)(a1 + 64);
  id v17 = v10;
  id v18 = v6;
  uint64_t v21 = v11;
  id v19 = v5;
  uint64_t v22 = *(void *)(a1 + 72);
  __int128 v15 = *(_OWORD *)(a1 + 48);
  id v12 = (id)v15;
  __int128 v20 = v15;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v9, block);
}

void sub_10009B6D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  id v3 = *(void **)(a1 + 32);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  if (v2) {
    unsigned __int8 v5 = [v3 _isCloudSyncEnabledForZone:v4 accountInfo:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  }
  else {
    unsigned __int8 v5 = [v3 _isCloudSyncEnabledForZone:v4];
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v5;

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL))
  {
    id v6 = *(void **)(a1 + 48);
    if (v6)
    {
      uint64_t v7 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v8 = v7;
        *(_DWORD *)__int128 buf = 136315394;
        id v33 = "-[ADCloudKitManager _setupRecordZoneSubscriptionWithZoneInfo:retryInterval:container:]_block_invoke";
        __int16 v34 = 1024;
        LODWORD(v35) = [v6 count];
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s Subscription created: (%d)", buf, 0x12u);

        id v6 = *(void **)(a1 + 48);
      }

      [*(id *)(a1 + 40) setSubscriptionList:v6];
      [*(id *)(a1 + 40) setHasSetUpRecordZoneSubscription:1];
      [*(id *)(a1 + 32) _fetchChangesWithZoneInfo:*(void *)(a1 + 40) useSharedDatabase:0];
    }

    else
    {
      int v13 = sub_1002FEBC4(*(void **)(a1 + 56));
      id v14 = *(void **)(a1 + 40);
      if (v13)
      {
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zone]);

        if (v15)
        {
          [*(id *)(a1 + 32) _prepareZoneForResetWithZoneInfo:*(void *)(a1 + 40)];
          [*(id *)(a1 + 32) _resetZoneWithZoneInfo:*(void *)(a1 + 40)];
        }
      }

      else
      {
        dispatch_source_t v16 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 32) + 112LL));
        [v14 setSubscriptionSetupTimer:v16];

        id v17 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subscriptionSetupTimer]);
        dispatch_time_t v18 = dispatch_time(0LL, (unint64_t)(*(double *)(a1 + 88) * 1000000000.0));
        dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);

        else {
          double v19 = 86400.0;
        }
        __int128 v20 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subscriptionSetupTimer]);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472LL;
        handler[2] = sub_10009BAD8;
        handler[3] = &unk_1004F92D0;
        uint64_t v30 = *(void *)(a1 + 72);
        id v21 = *(id *)(a1 + 40);
        uint64_t v22 = *(void *)(a1 + 32);
        id v27 = v21;
        uint64_t v28 = v22;
        double v31 = v19;
        id v29 = *(id *)(a1 + 64);
        dispatch_source_set_event_handler(v20, handler);

        __int16 v23 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subscriptionSetupTimer]);
        dispatch_resume(v23);

        uint64_t v24 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *(void **)(a1 + 88);
          *(_DWORD *)__int128 buf = 136315394;
          id v33 = "-[ADCloudKitManager _setupRecordZoneSubscriptionWithZoneInfo:retryInterval:container:]_block_invoke_2";
          __int16 v34 = 2048;
          id v35 = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Subscription creation failed. Retrying in %f seconds",  buf,  0x16u);
        }
      }
    }
  }

  else
  {
    id v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v10 = *(void **)(a1 + 40);
      uint64_t v11 = v9;
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
      *(_DWORD *)__int128 buf = 136315394;
      id v33 = "-[ADCloudKitManager _setupRecordZoneSubscriptionWithZoneInfo:retryInterval:container:]_block_invoke_2";
      __int16 v34 = 2112;
      id v35 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s iCloud sync is disabled. Will not attempt retry creating subscription for zone: (%@)",  buf,  0x16u);
    }
  }

void sub_10009BAD8(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionList]);
    if ([v2 count])
    {
      unsigned __int8 v3 = [*(id *)(a1 + 32) hasSetUpRecordZoneSubscription];

      if ((v3 & 1) != 0) {
        return;
      }
    }

    else
    {
    }

    [*(id *)(a1 + 40) _setupRecordZoneSubscriptionWithZoneInfo:*(void *)(a1 + 32) retryInterval:*(void *)(a1 + 48) container:*(double *)(a1 + 64)];
  }

void sub_10009BB58(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:*(void *)(a1 + 40)])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) container]);
    unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _manateeRecordZoneInfoForName:*(void *)(a1 + 40)]);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zone]);
    if (v4)
    {
      unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createRecordsWithDictionary:*(void *)(a1 + 48) forZoneInfo:v3]);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_10009BDD4;
      v12[3] = &unk_1004F6878;
      id v6 = *(void **)(a1 + 40);
      void v12[4] = *(void *)(a1 + 32);
      id v13 = v6;
      id v14 = *(id *)(a1 + 56);
      sub_100103390(v5, 0LL, 25LL, v2, 1, 0LL, v12);
    }

    else
    {
      id v9 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        dispatch_source_t v16 = "-[ADCloudKitManager saveRecordsWithDictionary:inZone:completion:]_block_invoke";
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%s Zone not created", buf, 0xCu);
      }

      uint64_t v10 = *(void *)(a1 + 56);
      if (!v10) {
        goto LABEL_13;
      }
      unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4020LL));
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v5, 0LL);
    }

LABEL_13:
    goto LABEL_14;
  }

  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315394;
    dispatch_source_t v16 = "-[ADCloudKitManager saveRecordsWithDictionary:inZone:completion:]_block_invoke";
    __int16 v17 = 2112;
    uint64_t v18 = v11;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s iCloud sync is disabled. Unable to save records to zone: (%@)",  buf,  0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 56);
  if (v8)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4014LL));
    (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v2, 0LL);
LABEL_14:
  }

void sub_10009BDD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(dispatch_queue_s **)(v10 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009BF14;
    block[3] = &unk_1004FD4C0;
    void block[4] = v10;
    id v19 = v7;
    id v20 = *(id *)(a1 + 40);
    dispatch_async(v11, block);
  }

  id v12 = *(void **)(a1 + 48);
  if (v12)
  {
    id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10009BF2C;
    void v14[3] = &unk_1004FD9E0;
    id v17 = v12;
    id v15 = v7;
    id v16 = v8;
    dispatch_async(v13, v14);
  }
}

id sub_10009BF14(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleCloudKitError:*(void *)(a1 + 40) forZone:*(void *)(a1 + 48) mirror:1 operationType:2];
}

uint64_t sub_10009BF2C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10009BF40(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared"])
  {
    if (*(_BYTE *)(a1 + 72))
    {
      uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v47 = "-[ADCloudKitManager saveFileAssetRecordsWithDictionary:mirror:onZone:activity:completion:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s mirrored", buf, 0xCu);
      }

      id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) multiUserRecordZoneInfo]);
    }

    else
    {
      id v3 = *(id *)(*(void *)(a1 + 32) + 216LL);
    }

    id v6 = v3;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 zone]);

    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 zone]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneID]);

      uint64_t v10 = *(void **)(a1 + 40);
      if (v10)
      {
        uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 zoneID]);

        id v9 = (void *)v11;
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 rateLimitTimer]);

      if (v9) {
        BOOL v13 = v12 == 0LL;
      }
      else {
        BOOL v13 = 0;
      }
      if (!v13)
      {
        uint64_t v14 = *(void *)(a1 + 64);
        if (v14)
        {
          if (v12)
          {
            id v15 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              id v16 = *(void **)(*(void *)(a1 + 32) + 216LL);
              id v17 = v15;
              uint64_t v18 = (__CFString *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
              *(_DWORD *)__int128 buf = 136315394;
              id v47 = "-[ADCloudKitManager saveFileAssetRecordsWithDictionary:mirror:onZone:activity:completion:]_block_invoke";
              __int16 v48 = 2112;
              id v49 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Unable to save records for zone because zone is rate limited: (%@)",  buf,  0x16u);

              uint64_t v14 = *(void *)(a1 + 64);
            }

            uint64_t v19 = 4019LL;
          }

          else
          {
            uint64_t v19 = 4020LL;
          }

          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", v19));
          (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v25, 0LL);
          goto LABEL_49;
        }

LABEL_50:
        goto LABEL_51;
      }

      id v21 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      id v22 = *(id *)(a1 + 48);
      id v23 = [v22 countByEnumeratingWithState:&v41 objects:v45 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = 0LL;
        uint64_t v26 = *(void *)v42;
        while (2)
        {
          id v27 = 0LL;
          uint64_t v28 = v25;
          do
          {
            if (*(void *)v42 != v26) {
              objc_enumerationMutation(v22);
            }
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createFileAssetRecordWithDictionary:*(void *)(*((void *)&v41 + 1) + 8 * (void)v27) zone:v9 version:2]);

            if (!v25)
            {
              uint64_t v29 = *(void *)(a1 + 64);
              if (v29)
              {
                uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4012LL));
                (*(void (**)(uint64_t, void *, void))(v29 + 16))(v29, v30, 0LL);
              }

              uint64_t v25 = 0LL;
              goto LABEL_47;
            }

            -[NSMutableArray addObject:](v21, "addObject:", v25);
            id v27 = (char *)v27 + 1;
            uint64_t v28 = v25;
          }

          while (v24 != v27);
          id v24 = [v22 countByEnumeratingWithState:&v41 objects:v45 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }

      else
      {
        uint64_t v25 = 0LL;
      }

      if (-[NSMutableArray count](v21, "count"))
      {
        uint64_t v31 = *(void *)(a1 + 32);
        if (*(_BYTE *)(a1 + 72)) {
          id v32 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v31 + 136) container]);
        }
        else {
          id v32 = *(id *)(v31 + 128);
        }
        id v22 = v32;
        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneID]);
        id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 ownerName]);
        int v36 = [v35 isEqualToString:CKCurrentUserDefaultName];

        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472LL;
        v38[2] = sub_10009C4B8;
        v38[3] = &unk_1004EF9F8;
        char v40 = *(_BYTE *)(a1 + 72);
        v38[4] = *(void *)(a1 + 32);
        id v37 = *(void **)(a1 + 56);
        id v39 = *(id *)(a1 + 64);
        sub_100103390(v21, 0LL, 17LL, v22, v36, v37, v38);
      }

      else
      {
        uint64_t v33 = *(void *)(a1 + 64);
        if (!v33)
        {
LABEL_48:

LABEL_49:
          goto LABEL_50;
        }

        id v22 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4005LL));
        (*(void (**)(uint64_t, id, void))(v33 + 16))(v33, v22, 0LL);
      }

  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueVPNValue);
  id v17 = state64;
  if ((state64 & 0x10000) == 0)
  {
LABEL_29:
    if ((v17 & 0x20000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_52;
  }

  PBDataWriterWriteUint32Field(v5, self->_metricsCount, 4LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_6:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }

  *((_DWORD *)v4 + 52) = self->_unacknowledgedPingCount;
  *((_DWORD *)v4 + 53) |= 0x2000000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_9:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_52;
  }

  v5[11] = self->_txPackets;
  *((_DWORD *)v5 + 53) |= 0x400u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }

  id v47 = 0LL;
  if ((*(_DWORD *)&has & 0x400000) != 0)
  {
LABEL_34:
    id v46 = 2654435761LL * self->_rttVariance;
    if ((*(_DWORD *)&has & 0x80000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_52;
  }

  self->_metricsCount = *((_DWORD *)v4 + 38);
  *(_DWORD *)&self->_has |= 0x10000u;
  id v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 4) == 0)
  {
LABEL_6:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }

LABEL_47:
      goto LABEL_48;
    }

    uint64_t v20 = *(void *)(a1 + 64);
    if (v20)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4020LL));
      (*(void (**)(uint64_t, void *, void))(v20 + 16))(v20, v9, 0LL);
      goto LABEL_50;
    }

  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueStereoNotFoundValue);
  id v17 = state64;
  if ((state64 & 0x2000) == 0)
  {
LABEL_26:
    if ((v17 & 0x4000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }

    id v21 = v76;
    goto LABEL_48;
  }

  id v27 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v81 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s companion service is disabled",  buf,  0xCu);
    if (!v16) {
      goto LABEL_49;
    }
    goto LABEL_12;
  }

  if (v16)
  {
LABEL_12:
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1009LL));
    v16[2](v16, 0LL, v21);
LABEL_48:
  }
}

  *((_DWORD *)v4 + 3_Block_object_dispose((const void *)(v1 - 152), 8) = self->_metricsCount;
  *((_DWORD *)v4 + 53) |= 0x10000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_6:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }

  *((_DWORD *)v5 + 45) = self->_rttSmoothed;
  *((_DWORD *)v5 + 53) |= 0x200000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x400000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }

                __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _requestQueue](self, "_requestQueue"));
                [v57 enqueueAnnouncementRequest:v4];
              }

              else
              {
                if (v65)
                {
                  *(_DWORD *)__int128 buf = 136315138;
                  id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
                  _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "%s Currently listening but new notification came in, starting new reading request",  buf,  0xCu);
                }

                -[ADExternalNotificationRequestHandler _clearTriggerlessUserReplyTimer]( self,  "_clearTriggerlessUserReplyTimer");
                -[ADExternalNotificationRequestHandler _changeCurrentStateToState:]( self,  "_changeCurrentStateToState:",  2LL);
                -[ADExternalNotificationRequestHandler _setCurrentRequest:](self, "_setCurrentRequest:", v4);
                id v66 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _requestQueue](self, "_requestQueue"));
                [v66 enqueueAnnouncementRequest:v4];

                -[ADExternalNotificationRequestHandler _startAnnouncementRequest:]( self,  "_startAnnouncementRequest:",  v4);
              }

              break;
            default:
              break;
          }

          goto LABEL_57;
        }

        __int128 v44 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "%s In an announce call request, rejecting notification",  buf,  0xCu);
        }

        id v45 = v4;
        id v46 = 5LL;
        id v47 = 1LL;
      }

      [v45 completeRequestWithSuccess:0 forReason:v46 shouldEmitInstrumentationEvent:v47];
    }

void sub_10009C4B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!*(_BYTE *)(a1 + 48)
    || (uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon, !os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)))
  {
    if (!v7) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  *(_DWORD *)__int128 buf = 136315394;
  uint64_t v18 = "-[ADCloudKitManager saveFileAssetRecordsWithDictionary:mirror:onZone:activity:completion:]_block_invoke";
  __int16 v19 = 2112;
  id v20 = v7;
  _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Encountered error (%@) on mirrored container",  buf,  0x16u);
  if (v7) {
LABEL_4:
  }
    [*(id *)(a1 + 32) handleCloudKitError:v7 forZone:@"com.apple.assistant.multiuser.shared" mirror:*(unsigned __int8 *)(a1 + 48) operationType:2];
LABEL_5:
  uint64_t v11 = *(void **)(a1 + 40);
  if (v11)
  {
    id v12 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009C650;
    block[3] = &unk_1004FD9E0;
    id v16 = v11;
    id v14 = v7;
    id v15 = v8;
    dispatch_async(v12, block);
  }
}

uint64_t sub_10009C650(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10009C664(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.backedup"])
  {
    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v17 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
        _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s mirrored", buf, 0xCu);
      }

      id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) keyValueRecordZoneInfo]);
      int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zone]);

      if (v4) {
        goto LABEL_6;
      }
    }

    else
    {
      int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) zone]);
      if (v4)
      {
LABEL_6:
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createKeyValueRecordsWithDictionary:*(void *)(a1 + 40) mirror:*(unsigned __int8 *)(a1 + 56)]);
        uint64_t v6 = *(void *)(a1 + 32);
        if (*(_BYTE *)(a1 + 56)) {
          id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 136) container]);
        }
        else {
          id v7 = *(id *)(v6 + 128);
        }
        id v12 = v7;
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        void v13[2] = sub_10009C96C;
        v13[3] = &unk_1004EF9F8;
        char v15 = *(_BYTE *)(a1 + 56);
        void v13[4] = *(void *)(a1 + 32);
        id v14 = *(id *)(a1 + 48);
        sub_100103390(v5, 0LL, 25LL, v12, 1, 0LL, v13);

LABEL_19:
        goto LABEL_20;
      }
    }

    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v17 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s Zone not created", buf, 0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (!v11)
    {
      int v4 = 0LL;
      goto LABEL_20;
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4020LL));
    (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v5, 0LL);
    goto LABEL_19;
  }

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v17 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
    __int16 v18 = 2112;
    __int16 v19 = @"com.apple.assistant.backedup";
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s iCloud sync is disabled. Unable to save records to zone: (%@)",  buf,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4014LL));
    (*(void (**)(uint64_t, void *, void))(v9 + 16))(v9, v4, 0LL);
LABEL_20:
  }

void sub_10009C96C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v25 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s qualityOfService = NSQualityOfServiceUserInitiated;",
      buf,
      0xCu);
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v25 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
    __int16 v26 = 2112;
    id v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s savedRecords -> %@", buf, 0x16u);
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v25 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s deletedRecordIDs -> %@", buf, 0x16u);
  }

  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v25 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s saveOnMirror = true;", buf, 0xCu);
    }
  }

  if (v7)
  {
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v25 = "-[ADCloudKitManager saveKeyValueRecordsWithDictionary:mirror:completion:]_block_invoke";
      __int16 v26 = 2112;
      id v27 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Encountered error (%@) on mirrored container",  buf,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    id v14 = *(dispatch_queue_s **)(v13 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009CC94;
    block[3] = &unk_1004FC188;
    void block[4] = v13;
    id v22 = v7;
    char v23 = *(_BYTE *)(a1 + 48);
    dispatch_async(v14, block);
  }

  char v15 = *(void **)(a1 + 40);
  if (v15)
  {
    id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10009CCB0;
    v17[3] = &unk_1004FD9E0;
    id v20 = v15;
    id v18 = v7;
    id v19 = v8;
    dispatch_async(v16, v17);
  }
}

id sub_10009CC94(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleCloudKitError:*(void *)(a1 + 40) forZone:@"com.apple.assistant.backedup" mirror:*(unsigned __int8 *)(a1 + 48) operationType:2];
}

uint64_t sub_10009CCB0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10009CCC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void **)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315394;
    id v21 = "-[ADCloudKitManager _saveCloudSyncEnabledRecord:mirror:qualityOfService:completion:]_block_invoke";
    __int16 v22 = 2048;
    id v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s qualityOfService = %ld;", buf, 0x16u);
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v21 = "-[ADCloudKitManager _saveCloudSyncEnabledRecord:mirror:qualityOfService:completion:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s savedRecords -> %@", buf, 0x16u);
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v21 = "-[ADCloudKitManager _saveCloudSyncEnabledRecord:mirror:qualityOfService:completion:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s deletedRecordIDs -> %@", buf, 0x16u);
  }

  if (*(_BYTE *)(a1 + 56))
  {
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v21 = "-[ADCloudKitManager _saveCloudSyncEnabledRecord:mirror:qualityOfService:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s saveOnMirror = true;", buf, 0xCu);
    }
  }

  if (v7)
  {
    uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v21 = "-[ADCloudKitManager _saveCloudSyncEnabledRecord:mirror:qualityOfService:completion:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Encountered error (%@) on mirrored container",  buf,  0x16u);
    }

    uint64_t v14 = *(void *)(a1 + 32);
    char v15 = *(dispatch_queue_s **)(v14 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009CF9C;
    block[3] = &unk_1004FC188;
    void block[4] = v14;
    id v18 = v7;
    char v19 = *(_BYTE *)(a1 + 56);
    dispatch_async(v15, block);
  }

  uint64_t v16 = *(void *)(a1 + 40);
  if (v16) {
    (*(void (**)(uint64_t, id, id))(v16 + 16))(v16, v7, v8);
  }
}

id sub_10009CF9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleCloudKitError:*(void *)(a1 + 40) forZone:@"com.apple.assistant.account.status" mirror:*(unsigned __int8 *)(a1 + 48) operationType:2];
}

id sub_10009CFB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _saveCloudSyncEnabledRecord:*(unsigned __int8 *)(a1 + 48) mirror:*(unsigned __int8 *)(a1 + 49) qualityOfService:17 completion:*(void *)(a1 + 40)];
}

void sub_10009CFD0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_queue_s **)(v2 + 112);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10009D02C;
  v4[3] = &unk_1004FC4D0;
  char v5 = a2;
  void v4[4] = v2;
  dispatch_async(v3, v4);
}

id sub_10009D02C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "-[ADCloudKitManager _synchronizeVoiceTriggerData]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Shared zone upload completed",  (uint8_t *)&v8,  0xCu);
    }

    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v3 setMultiUserSharedDataNeedsSync:0];

    if (AFIsMultiUserCompanion(v4))
    {
      char v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      [v5 setMirroredMultiUserSharedDataNeedsSync:0];
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v6 synchronize];
  }

  return [*(id *)(a1 + 32) _startVoiceTriggerSyncTimerWithInterval:86400.0];
}

id sub_10009D150(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  if ([v2 multiUserSharedDataNeedsSync])
  {
    unsigned int v3 = [*(id *)(a1 + 32) cloudSyncEnabled];

    if (!v3) {
      return [*(id *)(a1 + 32) _startVoiceTriggerSyncTimerWithInterval:86400.0];
    }
    return _[*(id *)(a1 + 32) _synchronizeVoiceTriggerData];
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  if ([v4 voiceTriggerNeedsDataSync])
  {
    unsigned __int8 v5 = [*(id *)(a1 + 32) cloudSyncEnabled];

    if ((v5 & 1) != 0) {
      return _[*(id *)(a1 + 32) _synchronizeVoiceTriggerData];
    }
  }

  else
  {
  }

  return [*(id *)(a1 + 32) _startVoiceTriggerSyncTimerWithInterval:86400.0];
}

void sub_10009D200(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    unsigned __int8 v5 = "-[ADCloudKitManager _homeInfoDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 48))
  {
    *(_BYTE *)(v3 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 1;
    [*(id *)(a1 + 32) _setupMultiUserSharedRecordZone];
  }

id sub_10009D2C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _forceVoiceProfileDownloadOfAllUsers:0];
}

id sub_10009D2D0(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  if (v2[88]) {
    return _[v2 _forceVoiceProfileDownloadOfAllUsers:*(void *)(a1 + 40) + 1];
  }
  else {
    return _[v2 _forceVoiceProfileDownloadOfAllUsers:0];
  }
}

void sub_10009D2F4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    uint64_t v11 = "-[ADCloudKitManager _voiceTriggerPHSProfileDidChange]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Voice Trigger PHS data did change!",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v4 = [v3 multiUserSharedDataNeedsSync];
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADCloudKitManager _voiceTriggerPHSProfileDidChange]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s multiUserSharedDataNeedsSync",  (uint8_t *)&v10,  0xCu);
    }

    [v3 setMultiUserSharedDataNeedsSync:1];
    [v3 setVoiceTriggerNeedsDataSync:1];
    [v3 synchronize];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 216) zone]);

    if (v7)
    {
      int v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315138;
        uint64_t v11 = "-[ADCloudKitManager _voiceTriggerPHSProfileDidChange]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Start sync timer.",  (uint8_t *)&v10,  0xCu);
      }

      id v4 = [*(id *)(a1 + 32) _startVoiceTriggerSyncTimerWithInterval:0.0];
    }
  }

  if (AFSupportsMultiUser(v4, v5))
  {
    id v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADCloudKitManager _voiceTriggerPHSProfileDidChange]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s synchronizeSharedZones",  (uint8_t *)&v10,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 40) synchronizeSharedZones];
  }
}

void sub_10009D518(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  *(_BYTE *)(v1 + 90) = v2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 90LL)) {
      uint64_t v5 = @"enabled";
    }
    else {
      uint64_t v5 = @"disabled";
    }
    int v10 = 136315394;
    uint64_t v11 = "-[ADCloudKitManager _voiceTriggerEnabledDidChange]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Voice Trigger is now %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v6 + 90))
  {
LABEL_13:
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 216) dataStore]);
    [v9 deleteUserData:0];

    [*(id *)(a1 + 32) _cancelVoiceTriggerSyncTimer];
    return;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 216) zone]);

  if (!v7)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    goto LABEL_13;
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  if (([v8 multiUserSharedDataNeedsSync] & 1) == 0)
  {
    [v8 setMultiUserSharedDataNeedsSync:1];
    [v8 setVoiceTriggerNeedsDataSync:1];
    [v8 synchronize];
    [*(id *)(a1 + 32) _startVoiceTriggerSyncTimerWithInterval:0.0];
  }
}

void sub_10009D6A0(uint64_t a1)
{
  int v2 = *(id **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2[27] zoneName]);
  LODWORD(v2) = [v2 _isCloudSyncEnabledForZone:v3];

  if ((_DWORD)v2)
  {
    if (AFIsMultiUserCompanion(v4))
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      unsigned int v6 = [v5 multiUserVoiceIdentification];
    }

    else
    {
      unsigned int v6 = 0;
    }

    id v7 = *(_BYTE **)(a1 + 32);
    if (v7[90]) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = v6 == 0;
    }
    if (!v8) {
      [v7 _setupVoiceTriggerSyncTimer];
    }
  }

void sub_10009D744(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = v9;
  if (v7 && v8 || AFIsATV(v9, v10))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(dispatch_queue_s **)(v12 + 112);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10009D7EC;
    block[3] = &unk_1004FD940;
    void block[4] = v12;
    dispatch_async(v13, block);
  }
}

id sub_10009D7EC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 1;
  return [*(id *)(a1 + 32) _setupMultiUserSharedRecordZone];
}

void sub_10009D800(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[ADCloudKitManager _setUpMirroredZoneWithZoneInfo:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Encountered (%@). Giving up.",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10009D930;
    v6[3] = &unk_1004FB0E0;
    id v7 = *(id *)(a1 + 32);
    [v5 synchronizeWithCompletion:v6];
  }
}

void sub_10009D930(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    unsigned int v6 = v4;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneName]);
    int v8 = 136315650;
    id v9 = "-[ADCloudKitManager _setUpMirroredZoneWithZoneInfo:]_block_invoke_2";
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Mirror sync result (%d) for (%@)",  (uint8_t *)&v8,  0x1Cu);
  }

  if (a2) {
    [*(id *)(a1 + 32) setRetryState:0];
  }
}

void sub_10009DA30(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    id v3 = "-[ADCloudKitManager _resetZoneWithZoneInfo:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s Reset shared zone", (uint8_t *)&v2, 0xCu);
  }

void sub_10009DAD8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    __int16 v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = *(void **)(a1 + 32);
      uint64_t v13 = v10;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneName]);
      int v15 = 136315650;
      uint64_t v16 = "-[ADCloudKitManager _deleteRecordZoneWithZoneID:qualityOfService:completion:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Error deleting zone (%@): (%@)",  (uint8_t *)&v15,  0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a4);
  }

  uint64_t v11 = *(void *)(a1 + 48);
  if (v11 && !*(_BYTE *)(a1 + 64)) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);
  }
  if (*(_BYTE *)(a1 + 64)) {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
}

void sub_10009DC44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    __int16 v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void **)(a1 + 32);
      int v15 = v10;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 zoneName]);
      int v17 = 136315650;
      id v18 = "-[ADCloudKitManager _deleteRecordZoneWithZoneID:qualityOfService:completion:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v16;
      __int16 v21 = 2112;
      id v22 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Error deleting zone (%@): (%@)",  (uint8_t *)&v17,  0x20u);
    }

    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v13 = *(void *)(v11 + 40);
    __int16 v12 = (id *)(v11 + 40);
    if (!v13) {
      objc_storeStrong(v12, a4);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_10009DD90(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCloudKitManager _deleteRecordZoneWithZoneID:qualityOfService:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Two container zone deletion done",  (uint8_t *)&v4,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

void sub_10009DE54(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    __int16 v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = *(void **)(a1 + 32);
      uint64_t v13 = v10;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 zoneName]);
      int v15 = 136315650;
      uint64_t v16 = "-[ADCloudKitManager _deleteRecordZoneWithZoneInfo:qualityOfService:completion:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v14;
      __int16 v19 = 2112;
      id v20 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Error deleting zone (%@): (%@)",  (uint8_t *)&v15,  0x20u);
    }
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);
  }
}

void sub_10009DF8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009E070;
  block[3] = &unk_1004F9060;
  void block[4] = v7;
  id v14 = v8;
  id v10 = *(id *)(a1 + 48);
  id v16 = v6;
  id v17 = v10;
  id v15 = v5;
  char v19 = *(_BYTE *)(a1 + 64);
  uint64_t v18 = *(void *)(a1 + 56);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_10009E070(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  LOBYTE(v2) = [v2 _isCloudSyncEnabledForZone:v3];

  if ((v2 & 1) == 0)
  {
    id v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v11 = *(void **)(a1 + 40);
      id v12 = v10;
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneName]);
      *(_DWORD *)__int128 buf = 136315394;
      id v35 = "-[ADCloudKitManager _setupRecordZoneWithZoneInfo:retryInterval:completion:]_block_invoke_2";
      __int16 v36 = 2112;
      id v37 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s iCloud sync is disabled. Will not attempt retry creating zone: (%@)",  buf,  0x16u);
    }

    goto LABEL_12;
  }

  if (!*(void *)(*(void *)(a1 + 32) + 128LL))
  {
    id v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v35 = "-[ADCloudKitManager _setupRecordZoneWithZoneInfo:retryInterval:completion:]_block_invoke_3";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Zone creation error - container no longer exists",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) setZone:0];
    goto LABEL_12;
  }

  if (!*(void *)(a1 + 48))
  {
    id v16 = *(void **)(a1 + 56);
    if (v16)
    {
      id v17 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = v17;
        char v19 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneID]);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneName]);
        *(_DWORD *)__int128 buf = 136315394;
        id v35 = "-[ADCloudKitManager _setupRecordZoneWithZoneInfo:retryInterval:completion:]_block_invoke";
        __int16 v36 = 2112;
        id v37 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s Zone created: (%@)", buf, 0x16u);

        id v16 = *(void **)(a1 + 56);
      }

      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zone]);
      unsigned __int8 v22 = [v16 isEqual:v21];

      if ((v22 & 1) == 0)
      {
        [*(id *)(a1 + 40) setZone:*(void *)(a1 + 56)];
        [*(id *)(a1 + 40) setServerChangeToken:0];
      }

      if (*(_BYTE *)(a1 + 80)) {
        goto LABEL_12;
      }
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subscriptionList]);
      if ([v23 count])
      {
        unsigned __int8 v24 = [*(id *)(a1 + 40) hasSetUpRecordZoneSubscription];

        if ((v24 & 1) != 0)
        {
          [*(id *)(a1 + 32) _fetchChangesWithZoneInfo:*(void *)(a1 + 40) useSharedDatabase:0];
          goto LABEL_12;
        }
      }

      else
      {
      }

      [*(id *)(a1 + 32) _setupRecordZoneSubscriptionWithZoneInfo:*(void *)(a1 + 40) retryInterval:0 container:120.0];
LABEL_12:
      uint64_t v15 = *(void *)(a1 + 64);
      if (v15) {
        (*(void (**)(void))(v15 + 16))();
      }
      return;
    }
  }

  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10009E470;
  v28[3] = &unk_1004F8BA0;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v29 = v4;
  uint64_t v30 = v5;
  uint64_t v33 = *(void *)(a1 + 72);
  id v32 = *(id *)(a1 + 64);
  id v31 = *(id *)(a1 + 48);
  id v6 = objc_retainBlock(v28);
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7 && sub_1002FEED4(v7))
  {
    [*(id *)(a1 + 32) _prepareZoneForResetWithZoneInfo:*(void *)(a1 + 40)];
    id v9 = *(void **)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10009E67C;
    v25[3] = &unk_1004FD740;
    void v25[4] = v9;
    id v26 = v8;
    id v27 = v6;
    [v9 _deleteRecordZoneWithZoneInfo:v26 completion:v25];
  }

  else
  {
    ((void (*)(void *))v6[2])(v6);
  }
}

void sub_10009E470(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  dispatch_source_t v3 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 40) + 112LL));
  [v2 setZoneSetupTimer:v3];

  id v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneSetupTimer]);
  dispatch_time_t v5 = dispatch_time(0LL, (unint64_t)(*(double *)(a1 + 64) * 1000000000.0));
  dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);

  else {
    double v6 = 86400.0;
  }
  uint64_t v7 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneSetupTimer]);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_10009E780;
  handler[3] = &unk_1004FBA38;
  int8x16_t v13 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v13.i64[0];
  int8x16_t v15 = vextq_s8(v13, v13, 8uLL);
  double v17 = v6;
  id v16 = *(id *)(a1 + 56);
  dispatch_source_set_event_handler(v7, handler);

  id v9 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneSetupTimer]);
  dispatch_resume(v9);

  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 64);
    *(_DWORD *)__int128 buf = 136315650;
    char v19 = "-[ADCloudKitManager _setupRecordZoneWithZoneInfo:retryInterval:completion:]_block_invoke";
    __int16 v20 = 2112;
    uint64_t v21 = v11;
    __int16 v22 = 2048;
    uint64_t v23 = v12;
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Zone creation failed: (%@) Retrying in %f seconds",  buf,  0x20u);
  }
}

void sub_10009E67C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_10009E72C;
  v8[3] = &unk_1004FDA30;
  uint64_t v4 = *(void *)(a1 + 32);
  dispatch_time_t v5 = *(void **)(a1 + 40);
  double v6 = *(dispatch_queue_s **)(v4 + 112);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

uint64_t sub_10009E72C(uint64_t a1)
{
  uint64_t result = sub_1002FF228(*(void **)(a1 + 32));
  if ((result & 1) == 0)
  {
    [*(id *)(*(void *)(a1 + 40) + 56) cancelRecordZoneSetupTimerForZoneInfo:*(void *)(a1 + 48)];
    [*(id *)(a1 + 48) setHasSetUpRecordZoneSubscription:0];
    return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  return result;
}

id sub_10009E780(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupRecordZoneWithZoneInfo:*(void *)(a1 + 40) retryInterval:*(void *)(a1 + 48) completion:*(double *)(a1 + 56)];
}

void sub_10009E794(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountOverrideInfo]);

  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountOverrideInfo]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountID]);
    unsigned int v12 = [v8 isEqualToString:v11];

    if (v12)
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _trackedCKAccountInfoForiCloudAltDSID:v18]);
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
      int8x16_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;

      id v16 = *(void **)(a1 + 40);
      double v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) zoneName]);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = objc_msgSend( v16,  "_isCloudSyncEnabledForZone:accountInfo:",  v17,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8)
                                                                                                + 40LL));
    }
  }
}

void sub_10009E8C8(uint64_t a1, void *a2, void *a3, void *a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  int8x16_t v15 = *(void **)(a1 + 40);
  id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009EA44;
  block[3] = &unk_1004EF8C0;
  id v26 = v15;
  id v27 = v11;
  char v37 = a5;
  id v28 = v12;
  id v29 = v13;
  uint64_t v30 = *(void *)(a1 + 32);
  id v31 = v14;
  __int128 v24 = *(_OWORD *)(a1 + 64);
  id v17 = (id)v24;
  __int128 v34 = v24;
  char v38 = *(_BYTE *)(a1 + 96);
  uint64_t v36 = *(void *)(a1 + 88);
  id v32 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 80);
  id v33 = v18;
  uint64_t v35 = v19;
  id v20 = v14;
  id v21 = v13;
  id v22 = v12;
  id v23 = v11;
  dispatch_async(v16, block);
}

void sub_10009EA44(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zone]);

  if (!v2)
  {
    id v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v50 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:complet"
            "ion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Freeing zone fetch completion", buf, 0xCu);
    }

    goto LABEL_11;
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (!v3)
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL)) {
      return;
    }
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v50 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:complet"
            "ion:]_block_invoke_2";
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s No error", buf, 0xCu);
    }

    [*(id *)(a1 + 32) setRetryState:0];
    if (*(_BYTE *)(a1 + 128) || [*(id *)(a1 + 48) count] || objc_msgSend(*(id *)(a1 + 56), "count"))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 56);
      uint64_t v16 = *(unsigned __int8 *)(a1 + 128);
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      v44[2] = sub_10009F10C;
      v44[3] = &unk_1004EF878;
      v44[4] = *(void *)(a1 + 64);
      id v45 = *(id *)(a1 + 32);
      id v46 = *(id *)(a1 + 72);
      id v47 = *(id *)(a1 + 96);
      __int16 v48 = *(_WORD *)(a1 + 128);
      [v13 mergeDataWithModifiedRecords:v14 deletedRecordIDs:v15 containsAllChanges:v16 completion:v44];

      id v17 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      [v17 logEventWithType:4101 context:0];

      return;
    }

    char v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimitTimer]);

    if (!v38) {
      [*(id *)(a1 + 32) setServerChangeToken:*(void *)(a1 + 72)];
    }
LABEL_11:
    [*(id *)(a1 + 32) setFetchInProgress:0];
    [*(id *)(a1 + 64) _executeZoneFetchCompletionBlock:0 zoneInfo:*(void *)(a1 + 32) completion:*(void *)(a1 + 96)];
    return;
  }

  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v50 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completio"
          "n:]_block_invoke";
    __int16 v51 = 2112;
    uint64_t v52 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Error during fetch: (%@)", buf, 0x16u);
  }

  [*(id *)(a1 + 32) setFetchInProgress:0];
  id v5 = objc_alloc(&OBJC_CLASS___CKRecordZoneID);
  double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zone]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 zoneID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 ownerName]);
  uint64_t v10 = -[CKRecordZoneID initWithZoneName:ownerName:](v5, "initWithZoneName:ownerName:", v6, v9);

  if (sub_1002FEBC4(*(void **)(a1 + 40)))
  {
    if (!*(_BYTE *)(a1 + 129)) {
      [*(id *)(a1 + 64) _prepareZoneForResetWithZoneInfo:*(void *)(a1 + 32)];
    }
    [*(id *)(a1 + 64) _resetZoneWithZoneInfo:*(void *)(a1 + 32)];
    goto LABEL_21;
  }

  id v18 = sub_1002FF118(*(void **)(a1 + 40), v10);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  BOOL v20 = sub_1002FEE28(v19);

  if (!v20)
  {
    if (sub_1002FEED4(*(void **)(a1 + 40)))
    {
      uint64_t v21 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zone]);
      if (v21)
      {
        id v22 = (void *)v21;
        id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);

        if (v23)
        {
          int v24 = *(unsigned __int8 *)(a1 + 129);
          uint64_t v25 = (os_log_s *)AFSiriLogContextDaemon;
          BOOL v26 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
          if (v24)
          {
            if (v26)
            {
              *(_DWORD *)__int128 buf = 136315138;
              id v50 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror"
                    ":completion:]_block_invoke";
              _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%s Deleting shared zone",  buf,  0xCu);
            }

            id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zone]);
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 zoneID]);

            if (v28)
            {
              id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 ownerName]);

              if (v29)
              {
                uint64_t v30 = *(void **)(*(void *)(a1 + 64) + 40LL);
                id v31 = (void *)objc_claimAutoreleasedReturnValue([v28 ownerName]);
                [v30 deleteShareForUser:v31 markForReinvitation:1 completion:&stru_1004EF898];
              }
            }
          }

          else
          {
            if (v26)
            {
              *(_DWORD *)__int128 buf = 136315138;
              id v50 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror"
                    ":completion:]_block_invoke";
              _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%s Deleting private zone",  buf,  0xCu);
            }

            [*(id *)(a1 + 64) _prepareZoneForResetWithZoneInfo:*(void *)(a1 + 32)];
            id v39 = *(void **)(a1 + 64);
            char v40 = *(void **)(a1 + 32);
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 3221225472LL;
            v42[2] = sub_10009F1D8;
            v42[3] = &unk_1004FC2C8;
            void v42[4] = v39;
            id v43 = v40;
            [v39 _deleteRecordZoneWithZoneInfo:v43 completion:v42];
          }
        }
      }

      goto LABEL_21;
    }

    if (sub_1002FF294(*(void **)(a1 + 40)))
    {
      id v32 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 136315394;
        id v50 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:compl"
              "etion:]_block_invoke";
        __int16 v51 = 2112;
        uint64_t v52 = v41;
        _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%s Keychain sync incomplete (%@)",  buf,  0x16u);
      }

      *(_BYTE *)(*(void *)(a1 + 64) + 49LL) = 1;
      goto LABEL_21;
    }

    uint64_t v33 = *(void *)(a1 + 88);
    __int128 v34 = *(void **)(a1 + 64);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    if (v33)
    {
      unsigned __int8 v36 = [v34 _isCloudSyncEnabledForZone:v35 accountInfo:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];

      if ((v36 & 1) == 0) {
        goto LABEL_21;
      }
    }

    else
    {
      unsigned int v37 = [v34 _isCloudSyncEnabledForZone:v35];

      if (!v37) {
        goto LABEL_21;
      }
    }

    [*(id *)(*(void *)(a1 + 64) + 56) handleRateLimitedError:*(void *)(a1 + 40) forZoneInfo:*(void *)(a1 + 32) operationType:1];
    goto LABEL_21;
  }

  [*(id *)(a1 + 32) setServerChangeToken:0];
  [*(id *)(a1 + 64) _fetchChangesWithZoneInfo:*(void *)(a1 + 32) retryCount:*(void *)(a1 + 120) + 1 useSharedDatabase:*(unsigned __int8 *)(a1 + 129) activity:*(void *)(a1 + 80) container:*(void *)(a1 + 88) mirror:0 completion:0];
LABEL_21:
  [*(id *)(a1 + 64) _executeZoneFetchCompletionBlock:*(void *)(a1 + 40) zoneInfo:*(void *)(a1 + 32) completion:*(void *)(a1 + 96)];
}

void sub_10009F10C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 112LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10009F3D4;
  v9[3] = &unk_1004F73A0;
  id v10 = v4;
  id v11 = v3;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = *(id *)(a1 + 56);
  __int16 v15 = *(_WORD *)(a1 + 64);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_10009F1D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009F314;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_10009F26C(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    id v3 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "%s Deleted shared zone",  (uint8_t *)&v2,  0xCu);
  }

void sub_10009F314(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completion"
         ":]_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Deleted private zone",  (uint8_t *)&v3,  0xCu);
  }

id sub_10009F3D4(uint64_t a1)
{
  if (*(void *)(a1 + 40)
    || (int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rateLimitTimer]),
        v2,
        v2))
  {
    id result = [*(id *)(a1 + 56) _resetZoneFetchCompletionBlock:*(void *)(a1 + 32)];
  }

  else
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315138;
      id v8 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:completi"
           "on:]_block_invoke_2";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s Setting server change token",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(a1 + 32) setServerChangeToken:*(void *)(a1 + 48)];
    id result = [*(id *)(a1 + 56) _executeZoneFetchCompletionBlock:0 zoneInfo:*(void *)(a1 + 32) completion:*(void *)(a1 + 64)];
  }

  if (*(_BYTE *)(a1 + 72))
  {
    if (!*(_BYTE *)(a1 + 73))
    {
      uint64_t v4 = *(void **)(a1 + 56);
      if (v4[17])
      {
        id v5 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v7 = 136315138;
          id v8 = "-[ADCloudKitManager _fetchChangesWithZoneInfo:retryCount:useSharedDatabase:activity:container:mirror:comp"
               "letion:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Synchronizing with mirrored container, when downloading all changes",  (uint8_t *)&v7,  0xCu);
          uint64_t v4 = *(void **)(a1 + 56);
        }

        return [v4 _synchronizeMirroredContainer:*(void *)(a1 + 32)];
      }
    }
  }

  return result;
}

id sub_10009F564(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_10009F570(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10009F57C(uint64_t a1, int a2, id obj)
{
}

void sub_10009F590(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  id v14 = v13;
  if (v13)
  {
    if (!sub_1002FEE28(v13))
    {
      int v21 = sub_1002FEBC4(v14);
      id v22 = (void *)AFSiriLogContextDaemon;
      BOOL v23 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
      if (!v21)
      {
        if (!v23) {
          goto LABEL_13;
        }
        uint64_t v16 = v22;
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
        uint64_t v28 = *(void *)(a1 + 32);
        int v29 = 136315906;
        uint64_t v30 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:co"
              "mpletion:]_block_invoke";
        __int16 v31 = 2112;
        id v32 = v17;
        __int16 v33 = 2112;
        __int128 v34 = v14;
        __int16 v35 = 2112;
        uint64_t v36 = v28;
        id v18 = "%s Failed to fetch changes in zone (%@) with error (%@) for container %@";
        int v24 = v16;
        uint32_t v25 = 42;
        goto LABEL_15;
      }

      if (!v23) {
        goto LABEL_13;
      }
      uint64_t v16 = v22;
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
      int v29 = 136315394;
      uint64_t v30 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:comp"
            "letion:]_block_invoke";
      __int16 v31 = 2112;
      id v32 = v17;
      id v18 = "%s Zone does not exist (%@)";
LABEL_11:
      int v24 = v16;
      uint32_t v25 = 22;
LABEL_15:
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v29, v25);
      goto LABEL_7;
    }

    __int16 v15 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = v15;
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
      int v29 = 136315394;
      uint64_t v30 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:comp"
            "letion:]_block_invoke_4";
      __int16 v31 = 2112;
      id v32 = v17;
      id v18 = "%s Change token expired for zone (%@)";
      goto LABEL_11;
    }
  }

  else
  {
    uint64_t v19 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = v19;
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
      BOOL v20 = *(void **)(a1 + 32);
      int v29 = 136315650;
      uint64_t v30 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:comp"
            "letion:]_block_invoke";
      __int16 v31 = 2112;
      id v32 = v17;
      __int16 v33 = 2112;
      __int128 v34 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Fetched changes successfully in zone (%@) for container %@",  (uint8_t *)&v29,  0x20u);
LABEL_7:
    }
  }

void sub_10009F85C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = v4;
    uint64_t v7 = CKDatabaseScopeString([v5 databaseScope]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = [*(id *)(a1 + 40) count];
    id v10 = [*(id *)(a1 + 48) count];
    int v20 = 136315906;
    int v21 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:comple"
          "tion:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v8;
    __int16 v24 = 2048;
    id v25 = v9;
    __int16 v26 = 2048;
    id v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Finished fetching changes in database (%@), %zd modified records %zd deleted records",  (uint8_t *)&v20,  0x2Au);
  }

  if (v3)
  {
    id v11 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int16 v15 = *(void **)(a1 + 56);
      uint64_t v16 = v11;
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneID]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 zoneName]);
      uint64_t v19 = *(void **)(a1 + 64);
      int v20 = 136315906;
      int v21 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:comp"
            "letion:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v3;
      __int16 v24 = 2112;
      id v25 = v18;
      __int16 v26 = 2112;
      id v27 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch changes with error (%@) on zone %@ for container %@",  (uint8_t *)&v20,  0x2Au);
    }
  }

  if (sub_1002FEBC4(v3))
  {
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315138;
      int v21 = "-[ADCloudKitManager _fetchChangesFromZone:serverChangeToken:useSharedDatabase:activity:container:mirror:comp"
            "letion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Zone does not exist",  (uint8_t *)&v20,  0xCu);
    }
  }

  uint64_t v13 = *(void *)(a1 + 72);
  if (v13)
  {
    if (v3) {
      BOOL v14 = 0LL;
    }
    else {
      BOOL v14 = *(_BYTE *)(a1 + 88) != 0;
    }
    (*(void (**)(uint64_t, id, void, void, BOOL, void))(v13 + 16))( v13,  v3,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v14,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL));
  }
}

void sub_10009FAC4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 recordName]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10009FB28(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountOverrideInfo]);

  if (v7)
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountOverrideInfo]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountID]);
    LODWORD(v_Block_object_dispose((const void *)(v1 - 152), 8) = [v8 isEqualToString:v11];

    if ((_DWORD)v8)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) ckAcctInfo]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _trackedCKAccountInfoForiCloudAltDSID:v14]);

      if (v12 == v13) {
        [*(id *)(a1 + 48) _fetchChangesWithZoneInfo:*(void *)(a1 + 40) retryCount:0 useSharedDatabase:0 activity:0 container:*(void *)(a1 + 56) mirror:0];
      }
    }
  }
}

id sub_10009FC38(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleSubscriptionNotification:a2 container:*(void *)(a1 + 40)];
}

void sub_10009FC48(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.backedup" accountInfo:*(void *)(a1 + 40)])
  {
    id v3 = objc_alloc(&OBJC_CLASS___ADCloudKitRecordZoneInfo);
    uint64_t v26 = qword_100577B78;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v26, 1LL));
    id v5 = -[ADCloudKitRecordZoneInfo initWithZoneName:subscriptionNames:ckAccountInfo:]( v3,  "initWithZoneName:subscriptionNames:ckAccountInfo:",  @"com.apple.assistant.backedup",  v4,  *(void *)(a1 + 40));

    [*(id *)(a1 + 32) _fetchChangesWithZoneInfo:v5 retryCount:0 useSharedDatabase:0 activity:0 container:*(void *)(a1 + 48) mirror:0];
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKey:@"com.apple.assistant.backedup"]);
    [v2 addObjectsFromArray:v6];

    [v2 addObject:v5];
    [*(id *)(*(void *)(a1 + 32) + 168) setValue:v2 forKey:@"com.apple.assistant.backedup"];
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___ADCloudKitKeyValueDataStore);
    -[ADCloudKitRecordZoneInfo setDataStore:](v5, "setDataStore:", v7);

    [*(id *)(a1 + 32) _setupZoneSubscriptionsForSecondaryAccount:*(void *)(a1 + 48) zoneInfo:v5];
  }

  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.account.status" accountInfo:*(void *)(a1 + 40)])
  {
    id v8 = objc_alloc(&OBJC_CLASS___ADCloudKitRecordZoneInfo);
    uint64_t v25 = qword_100577B80;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v25, 1LL));
    id v10 = -[ADCloudKitRecordZoneInfo initWithZoneName:subscriptionNames:ckAccountInfo:]( v8,  "initWithZoneName:subscriptionNames:ckAccountInfo:",  @"com.apple.assistant.account.status",  v9,  *(void *)(a1 + 40));

    [*(id *)(a1 + 32) _fetchChangesWithZoneInfo:v10 retryCount:0 useSharedDatabase:0 activity:0 container:*(void *)(a1 + 48) mirror:0];
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));

    id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKey:@"com.apple.assistant.account.status"]);
    [v11 addObjectsFromArray:v12];

    [v11 addObject:v10];
    [*(id *)(*(void *)(a1 + 32) + 168) setValue:v11 forKey:@"com.apple.assistant.account.status"];
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___ADCloudKitAccountStatusDataStore);
    -[ADCloudKitRecordZoneInfo setDataStore:](v10, "setDataStore:", v13);

    [*(id *)(a1 + 32) _setupZoneSubscriptionsForSecondaryAccount:*(void *)(a1 + 48) zoneInfo:v10];
    int v2 = v11;
  }

  if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared" accountInfo:*(void *)(a1 + 40)])
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 1;
    id v14 = objc_alloc(&OBJC_CLASS___ADCloudKitRecordZoneInfo);
    v24[0] = qword_100577B88;
    v24[1] = qword_100577B90;
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v24, 2LL));
    uint64_t v16 = -[ADCloudKitRecordZoneInfo initWithZoneName:subscriptionNames:ckAccountInfo:]( v14,  "initWithZoneName:subscriptionNames:ckAccountInfo:",  @"com.apple.assistant.multiuser.shared",  v15,  *(void *)(a1 + 40));

    id v17 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000A0078;
    v22[3] = &unk_1004FBD90;
    uint64_t v18 = *(void *)(a1 + 48);
    id v23 = *(id *)(a1 + 56);
    [v17 _fetchChangesWithZoneInfo:v16 retryCount:0 useSharedDatabase:0 activity:0 container:v18 mirror:0 completion:v22];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));

    int v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKey:@"com.apple.assistant.multiuser.shared"]);
    [v19 addObjectsFromArray:v20];

    [v19 addObject:v16];
    [*(id *)(*(void *)(a1 + 32) + 168) setValue:v19 forKey:@"com.apple.assistant.multiuser.shared"];
    int v21 = -[ADCloudKitMultiUserSharedDataStore initWithInstanceContext:]( objc_alloc(&OBJC_CLASS___ADCloudKitMultiUserSharedDataStore),  "initWithInstanceContext:",  *(void *)(*(void *)(a1 + 32) + 72LL));
    -[ADCloudKitRecordZoneInfo setDataStore:](v16, "setDataStore:", v21);
    [*(id *)(a1 + 32) _setupZoneSubscriptionsForSecondaryAccount:*(void *)(a1 + 48) zoneInfo:v16];

    int v2 = v19;
  }
}

void sub_1000A0078(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315394;
    id v8 = "-[ADCloudKitManager _setupZonesForSecondaryAccount:container:acctInfo:]_block_invoke_2";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Finished setting up MU container with error %@",  (uint8_t *)&v7,  0x16u);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3)
  {
LABEL_3:
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    [v5 triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 32) homeUserID:0 toState:3];

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    [v6 triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 32) homeUserID:0 toState:0];
  }

LABEL_4:
}
}

  int v7 = (void *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    id v8 = v7;
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3 & 1));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", HIDWORD(v3)));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
    int v21 = 136315906;
    __int16 v22 = "-[ADLocationManager updateAuthorizationStyleWithUserSelection:timeout:completion:]_block_invoke";
    id v23 = 2112;
    __int16 v24 = v9;
    uint64_t v25 = 2112;
    uint64_t v26 = v10;
    id v27 = 2112;
    uint64_t v28 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Authorization style update is not needed. Location services enabled: %@, current auth: %@, accuracy auth: %@",  (uint8_t *)&v21,  0x2Au);
  }

  return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}
}
}
}
}
}
}

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

  if (Value) {
    objc_msgSend(self, Value, v29);
  }
  else {
    -[ADSession _passObjectToDelegate:](self, "_passObjectToDelegate:", v29);
  }
}
}
}
}
}
}
}
}

void sub_1000A0198(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000A0210;
  v3[3] = &unk_1004FDAA8;
  void v3[4] = *(void *)(a1 + 32);
  [v2 getUserProfileDictionariesWithCompletion:v3];
}

void sub_1000A0210(uint64_t a1, void *a2)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v16 objects:v26 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v17;
    *(void *)&__int128 v4 = 136315651LL;
    __int128 v14 = v4;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", @"ADUserProfileKeyICloudIdentifier", v14));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"ADUserProfileKeyPBSIdentifier"]);
        id v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = v14;
          int v21 = "-[ADCloudKitManager _setupSecondaryAccounts]_block_invoke_2";
          __int16 v22 = 2113;
          id v23 = v10;
          __int16 v24 = 2113;
          uint64_t v25 = v9;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s Attempting container setup for user profile pbs: %{private}@ altdsid: %{private}@",  buf,  0x20u);
        }

        id v12 = *(void **)(a1 + 32);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 lowercaseString]);
        [v12 setupContainerForiCloudAltDSID:v13];
      }

      id v5 = [obj countByEnumeratingWithState:&v16 objects:v26 count:16];
    }

    while (v5);
  }
}

void sub_1000A03E4(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getContainerIDForThisDevice]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](&OBJC_CLASS___ACAccountStore, "defaultStore"));
  __int128 v4 = v3;
  if (*(void *)(a1 + 40))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "aa_appleAccountWithAltDSID:"));
    if (v5)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _trackedCKContainerForiCloudAltDSID:*(void *)(a1 + 40)]);
      if (!v6)
      {
        int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
        id v8 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v9 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 136315395;
          __int16 v22 = "-[ADCloudKitManager setupContainerForiCloudAltDSID:]_block_invoke";
          __int16 v23 = 2113;
          uint64_t v24 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s New container needed for %{private}@",  buf,  0x16u);
        }

        id v10 = sub_1002FE578(v2, v7);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v10);
      }

      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_1000A065C;
      v17[3] = &unk_1004EF6E8;
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = *(void **)(a1 + 40);
      id v18 = v6;
      uint64_t v19 = v11;
      id v20 = v12;
      id v13 = v6;
      [v13 accountInfoWithCompletionHandler:v17];
    }

    else
    {
      __int16 v15 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 136315395;
        __int16 v22 = "-[ADCloudKitManager setupContainerForiCloudAltDSID:]_block_invoke";
        __int16 v23 = 2113;
        uint64_t v24 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s No Apple Account found for %{private}@",  buf,  0x16u);
      }
    }
  }

  else
  {
    __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v22 = "-[ADCloudKitManager setupContainerForiCloudAltDSID:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s nil iCloudAltDSID", buf, 0xCu);
    }
  }
}

void sub_1000A065C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 && (int v7 = (os_log_s *)AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)))
  {
    int v12 = 136315394;
    id v13 = "-[ADCloudKitManager setupContainerForiCloudAltDSID:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error while retrieving account status: %@",  (uint8_t *)&v12,  0x16u);
    if (!v5) {
      goto LABEL_8;
    }
  }

  else if (!v5)
  {
    goto LABEL_8;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) options]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accountOverrideInfo]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountID]);

    if (v10) {
      [*(id *)(a1 + 40) _setupZonesForSecondaryAccount:*(void *)(a1 + 48) container:*(void *)(a1 + 32) acctInfo:v5];
    }
  }

LABEL_8:
  if (AFIsATVOnly( [*(id *)(a1 + 40) _trackCKContainer:*(void *)(a1 + 32) accountInfo:v5 foriCloudAltDSID:*(void *)(a1 + 48)]))
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    [v11 syncATVRmVSettingIfAvailable];
  }
}

void sub_1000A07D0(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 152LL);
    *(_DWORD *)__int128 buf = 136315395;
    uint64_t v19 = "-[ADCloudKitManager _handleATVUserProfilesRemoved:]_block_invoke";
    __int16 v20 = 2113;
    int v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Tracking containers %{private}@", buf, 0x16u);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = *(id *)(a1 + 40);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v14;
    *(void *)&__int128 v6 = 136315395LL;
    __int128 v12 = v6;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v13 + 1) + 8 * (void)v9),  "objectForKey:",  @"ADUserProfileKeyICloudIdentifier",  v12,  (void)v13));
        uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = v12;
          uint64_t v19 = "-[ADCloudKitManager _handleATVUserProfilesRemoved:]_block_invoke";
          __int16 v20 = 2113;
          int v21 = v10;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s untracking container %{private}@",  buf,  0x16u);
        }

        [*(id *)(a1 + 32) _untrackiCloudAltDSID:v10];

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_1000A09C8(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 152LL);
    *(_DWORD *)__int128 buf = 136315395;
    __int16 v22 = "-[ADCloudKitManager _handleATVUserProfilesAdded:]_block_invoke";
    __int16 v23 = 2113;
    uint64_t v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Tracking containers %{private}@", buf, 0x16u);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id obj = *(id *)(a1 + 40);
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v27 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v18;
    *(void *)&__int128 v5 = 136315650LL;
    __int128 v15 = v5;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", @"ADUserProfileKeyICloudIdentifier", v15));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"ADUserProfileKeyPBSIdentifier"]);
        __int128 v12 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = v15;
          __int16 v22 = "-[ADCloudKitManager _handleATVUserProfilesAdded:]_block_invoke";
          __int16 v23 = 2112;
          uint64_t v24 = v11;
          __int16 v25 = 2112;
          uint64_t v26 = v10;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s Attempting container setup for PineBoard user profile %@ %@",  buf,  0x20u);
        }

        __int128 v13 = *(void **)(a1 + 32);
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 lowercaseString]);
        [v13 setupContainerForiCloudAltDSID:v14];
      }

      id v6 = [obj countByEnumeratingWithState:&v17 objects:v27 count:16];
    }

    while (v6);
  }
}

void sub_1000A0C10(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v42 = "-[ADCloudKitManager _handleUserProfilesChanged]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s UserProfiles changed", buf, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allUserProfileEntries]);

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v5 = v4;
  id v6 = [v5 countByEnumeratingWithState:&v36 objects:v47 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v37 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        if (([*(id *)(*(void *)(a1 + 32) + 80) isEqualToString:v10] & 1) == 0)
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) objectForKey:v10]);

          if (!v11)
          {
            __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v10]);
            __int128 v13 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              __int128 v16 = v13;
              __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v12 personaUniqueIdentifier]);
              *(_DWORD *)__int128 buf = 136315651;
              __int128 v42 = "-[ADCloudKitManager _handleUserProfilesChanged]_block_invoke";
              __int16 v43 = 2112;
              __int128 v44 = v17;
              __int16 v45 = 2113;
              id v46 = v10;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s Attempting container setup for new user profile %@ %{private}@",  buf,  0x20u);
            }

            __int128 v14 = *(void **)(a1 + 32);
            __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v10 lowercaseString]);
            [v14 setupContainerForiCloudAltDSID:v15];
          }
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v36 objects:v47 count:16];
    }

    while (v7);
  }

  __int128 v18 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v29 = v18;
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v5 allKeys]);
    *(_DWORD *)__int128 buf = 136315395;
    __int128 v42 = "-[ADCloudKitManager _handleUserProfilesChanged]_block_invoke";
    __int16 v43 = 2113;
    __int128 v44 = v30;
    _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "%s Keys %{private}@", buf, 0x16u);
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v19 = [*(id *)(*(void *)(a1 + 32) + 152) copy];
  id v20 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v20)
  {
    id v22 = v20;
    uint64_t v23 = *(void *)v33;
    *(void *)&__int128 v21 = 136315395LL;
    __int128 v31 = v21;
    do
    {
      for (j = 0LL; j != v22; j = (char *)j + 1)
      {
        if (*(void *)v33 != v23) {
          objc_enumerationMutation(v19);
        }
        __int16 v25 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)j);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v25, v31));

        if (!v26)
        {
          unsigned int v27 = [v25 isEqualToString:*(void *)(*(void *)(a1 + 32) + 80)];
          uint64_t v28 = (os_log_s *)AFSiriLogContextDaemon;
          if (v27)
          {
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 136315138;
              __int128 v42 = "-[ADCloudKitManager _handleUserProfilesChanged]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s We should not be tracking primary users container for deletion, Skipping...",  buf,  0xCu);
            }
          }

          else
          {
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = v31;
              __int128 v42 = "-[ADCloudKitManager _handleUserProfilesChanged]_block_invoke";
              __int16 v43 = 2113;
              __int128 v44 = v25;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "%s Profile %{private}@ no longer exists on device. Cleaning up containers.",  buf,  0x16u);
            }

            [*(id *)(a1 + 32) _untrackiCloudAltDSID:v25];
          }
        }
      }

      id v22 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }

    while (v22);
  }
}

id sub_1000A10AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupPrimaryContainer];
}

void sub_1000A10B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 112);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000A1134;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1000A1134(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 160);
  if (v4 != v2)
  {
    unsigned __int8 v5 = objc_msgSend(v4, "isEqualToString:");
    uint64_t v3 = *(void *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
      if (*(void *)(v3 + 160))
      {
        id v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int128 v17 = "-[ADCloudKitManager _handleAccountStatusChange:]_block_invoke_2";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Deleting cached user data", buf, 0xCu);
          uint64_t v3 = *(void *)(a1 + 32);
        }

        [(id)v3 _deleteUserData];
      }

      id v7 = [*(id *)(a1 + 40) copy];
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void **)(v8 + 160);
      *(void *)(v8 + 160) = v7;

      uint64_t v10 = _AFPreferencesSetCloudUserID(*(void *)(a1 + 40));
      AFBackedUpPreferencesSynchronize(v10);
      uint64_t v3 = *(void *)(a1 + 32);
    }
  }

  *(_BYTE *)(v3 + 49) = 0;
  int v11 = AFIsMultiUserCompanion();
  __int128 v12 = *(void **)(a1 + 32);
  if (!v11) {
    return [v12 _setupAccountState];
  }
  __int128 v13 = (void *)v12[17];
  if (!v13) {
    return [v12 _setupAccountState];
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000A129C;
  v15[3] = &unk_1004FBD90;
  void v15[4] = v12;
  return [v13 createMirroredZonesWithCompletion:v15];
}

void sub_1000A129C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _setupAccountState];
}

void sub_1000A12F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    int v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    int v16 = 136315394;
    __int128 v17 = "-[ADCloudKitManager _setupAccount]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v6;
    __int128 v12 = "%s Could not find primary Apple Account: %@";
    __int128 v13 = v11;
    uint32_t v14 = 22;
LABEL_9:
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v16, v14);
    goto LABEL_7;
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "aa_altDSID"));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 80);
  *(void *)(v8 + 80) = v7;

  uint64_t v10 = *(void **)(a1 + 32);
  if (!v10[10])
  {
    __int128 v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    int v16 = 136315138;
    __int128 v17 = "-[ADCloudKitManager _setupAccount]_block_invoke";
    __int128 v12 = "%s No primary account iCloudAltDSID available.";
    __int128 v13 = v15;
    uint32_t v14 = 12;
    goto LABEL_9;
  }

  objc_msgSend(v10, "_trackCKContainer:accountInfo:foriCloudAltDSID:", v10[16], v10[15]);
LABEL_7:
}

void sub_1000A145C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A150C;
  block[3] = &unk_1004FD4C0;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000A150C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADCloudKitManager _setupAccount]_block_invoke_2";
      __int16 v6 = 2112;
      uint64_t v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error while retrieving account status: %@",  (uint8_t *)&v4,  0x16u);
    }
  }

  if (*(void *)(a1 + 40)) {
    objc_msgSend(*(id *)(a1 + 48), "_handleAccountStatusChange:");
  }
}

id sub_1000A15E4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqualToString:kAFPreferencesDidChangeDarwinNotification];
  if ((result & 1) != 0)
  {
    uint64_t v3 = 92LL;
  }

  else
  {
    id result = [*(id *)(a1 + 32) isEqualToString:@"ADPreferencesSharedUserIdentifierDidChangeNotification"];
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v3 = 96LL;
  }

  ++*(_DWORD *)(*(void *)(a1 + 40) + v3);
  return result;
}

void sub_1000A1648(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 92);
  if (v2)
  {
    *(_DWORD *)(v1 + 92) = v2 - 1;
  }

  else
  {
    int v4 = _AFPreferencesCloudSyncEnabled();
    uint64_t v5 = *(void *)(a1 + 32);
    if (*(unsigned __int8 *)(v5 + 89) != v4)
    {
      *(_BYTE *)(v5 + 89) = v4;
      __int16 v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        if (*(_BYTE *)(*(void *)(a1 + 32) + 89LL)) {
          uint64_t v7 = @"enabled";
        }
        else {
          uint64_t v7 = @"disabled";
        }
        int v14 = 136315394;
        __int128 v15 = "-[ADCloudKitManager _preferencesDidChange]_block_invoke";
        __int16 v16 = 2112;
        __int128 v17 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Cloud sync is now %@",  (uint8_t *)&v14,  0x16u);
      }

      uint64_t v8 = *(_BYTE **)(a1 + 32);
      if (v8[89])
      {
        [v8 _triggerVoiceProfileUploadPostBuddyOrCloudSyncChange];
        [*(id *)(a1 + 32) _initializeZones];
        [*(id *)(a1 + 32) _setupAccountState];
        [*(id *)(a1 + 32) _triggerMultiUserSharingPostBuddyOrCloudSyncChange];
      }

      else
      {
        [v8 _cleanUpRecordZonesAndSubscriptions];
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v9 postNotificationName:@"ADSharedDataDidChangeNotification" object:0];

      uint64_t v5 = *(void *)(a1 + 32);
    }

    if (*(void *)(v5 + 176))
    {
      unsigned int v10 = [(id)v5 _isCloudSyncEnabledForZone:@"com.apple.assistant.account.status"];
      uint64_t v5 = *(void *)(a1 + 32);
      if (v10)
      {
        int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 176) dataStore]);
        [v11 synchronizeWithCompletion:0];

        uint64_t v5 = *(void *)(a1 + 32);
      }
    }

    if ([(id)v5 _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared"])
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) dataStore]);
      [v12 synchronizeWithCompletion:0];
    }

    if ([*(id *)(a1 + 32) _isCloudSyncEnabledForZone:@"com.apple.assistant.multiuser.shared"])
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 216) dataStore]);
      [v13 synchronizeWithCompletion:0];
    }
  }

void sub_1000A1850(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) dataStore]);
  [v1 synchronizeWithCompletion:0];
}

void sub_1000A1888(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 96);
  if (v2)
  {
    *(_DWORD *)(v1 + 96) = v2 - 1;
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 184) dataStore]);
    [v3 synchronizeKeychainPreferencesWithCompletion:0];
  }

void sub_1000A18DC(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) dataStore]);
  [v1 synchronizeWithCompletion:0];
}

void sub_1000A1914(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) dataStore]);
  [v1 synchronizeWithCompletion:0];
}

void sub_1000A194C(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADBuddyMonitor sharedManager](&OBJC_CLASS___ADBuddyMonitor, "sharedManager"));
  unsigned int v3 = [v2 isPastBuddy];

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v4 + 88) != v3)
  {
    *(_BYTE *)(v4 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v3;
    uint64_t v5 = *(_BYTE **)(a1 + 32);
    if (v5[88])
    {
      [v5 _triggerVoiceProfileUploadPostBuddyOrCloudSyncChange];
      [*(id *)(a1 + 32) _initializeZones];
      [*(id *)(a1 + 32) _setupAccountState];
      [*(id *)(a1 + 32) _triggerMultiUserSharingPostBuddyOrCloudSyncChange];
    }

    else
    {
      [v5 _cleanUpRecordZonesAndSubscriptions];
    }
  }

id sub_1000A19E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _setupAccount];
  id result = (id)AFIsATV(v2, v3);
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _setupSecondaryAccounts];
  }
  return result;
}

id sub_1000A1A24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _disablePush];
}

id sub_1000A1A2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enablePush];
}

void sub_1000A1A34(id a1, BOOL a2, NSError *a3)
{
  BOOL v3 = a2;
  uint64_t v4 = a3;
  if (v3)
  {
    uint64_t v5 = _AFBackedUpPreferencesBoolValueForKey(kAFCloudSyncEnabledKey);
    __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (!v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
      [v7 setCloudSyncEnabled:1];
    }
  }

  else
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315394;
      unsigned int v10 = "-[ADCloudKitManager _setDefaultiCloudEnabledState]_block_invoke";
      __int16 v11 = 2112;
      id v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Enabling Siri account failed with error: %@",  (uint8_t *)&v9,  0x16u);
    }
  }
}

void sub_1000A1B44(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    __int16 v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    int v16 = 136315394;
    __int128 v17 = "-[ADCloudKitManager initWithInstanceContext:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v6;
    id v12 = "%s Could not find primary Apple Account: %@";
    id v13 = v11;
    uint32_t v14 = 22;
LABEL_9:
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v16, v14);
    goto LABEL_7;
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "aa_altDSID"));
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(void **)(v8 + 80);
  *(void *)(v8 + 80) = v7;

  unsigned int v10 = *(void **)(a1 + 32);
  if (!v10[10])
  {
    __int128 v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    int v16 = 136315138;
    __int128 v17 = "-[ADCloudKitManager initWithInstanceContext:]_block_invoke";
    id v12 = "%s No primary account cloudkit identifier available.";
    id v13 = v15;
    uint32_t v14 = 12;
    goto LABEL_9;
  }

  objc_msgSend(v10, "_trackCKContainer:accountInfo:foriCloudAltDSID:", v10[16], 0);
LABEL_7:
}

id sub_1000A1CB4(uint64_t a1, void *a2)
{
  BOOL v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "_ADCloudKitPreferencesDidChangeCallback";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  return [a2 _preferencesDidChange];
}

id sub_1000A1D64(uint64_t a1, void *a2)
{
  BOOL v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "_ADCloudKitLanguageCodeDidChangeCallback";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  return [a2 _languageCodeDidChange];
}

id sub_1000A1E14(uint64_t a1, void *a2)
{
  BOOL v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "_ADCloudKitOutputLanguageDidChangeCallback";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  return [a2 _outputLanguageDidChange];
}

id sub_1000A1EC4(uint64_t a1, void *a2)
{
  return _[a2 _voiceTriggerEnabledDidChange];
}

id sub_1000A1ECC(uint64_t a1, void *a2)
{
  return _[a2 _voiceTriggerPHSProfileDidChange];
}

void sub_1000A1ED4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 176LL);
  BOOL v3 = objc_alloc_init(&OBJC_CLASS___ADCloudKitAccountStatusDataStore);
  [v2 setDataStore:v3];

  if ([*(id *)(a1 + 32) _zoneShouldUpdateMirroredZone])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 176) dataStore]);
    [v4 setDataStoreShouldMirrorData:1];
  }

  int v5 = *(void **)(*(void *)(a1 + 32) + 184LL);
  id v6 = objc_alloc_init(&OBJC_CLASS___ADCloudKitKeyValueDataStore);
  [v5 setDataStore:v6];

  if ([*(id *)(a1 + 32) _zoneShouldUpdateMirroredZone])
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) dataStore]);
    [v7 setDataStoreShouldMirrorData:1];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 90LL) = sub_1001EBF24(*(void **)(*(void *)(a1 + 32) + 72LL));
  uint64_t v8 = -[ADCloudKitMultiUserSharedDataStore initWithInstanceContext:]( objc_alloc(&OBJC_CLASS___ADCloudKitMultiUserSharedDataStore),  "initWithInstanceContext:",  *(void *)(*(void *)(a1 + 32) + 72LL));
  [*(id *)(*(void *)(a1 + 32) + 216) setDataStore:v8];
  if ([*(id *)(a1 + 32) _zoneShouldUpdateMirroredZone])
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 216) dataStore]);
    [v9 setDataStoreShouldMirrorData:1];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 89LL) = _AFPreferencesCloudSyncEnabled();
  unsigned int v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 89LL)) {
      __int16 v11 = @"enabled";
    }
    else {
      __int16 v11 = @"disabled";
    }
    int v21 = 136315394;
    id v22 = "-[ADCloudKitManager initWithInstanceContext:]_block_invoke";
    __int16 v23 = 2112;
    uint64_t v24 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Cloud sync is %@", (uint8_t *)&v21, 0x16u);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADBuddyMonitor sharedManager](&OBJC_CLASS___ADBuddyMonitor, "sharedManager"));
  *(_BYTE *)(*(void *)(a1 + 32) + 88) = [v12 isPastBuddy];

  [*(id *)(a1 + 32) _initializeZones];
  id v13 = [*(id *)(a1 + 32) _setupAccount];
  if (AFIsATV(v13, v14))
  {
    __int128 v15 = -[CKNotificationListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___CKNotificationListener),  "initWithMachServiceName:",  @"com.apple.assistantd.aps");
    uint64_t v16 = *(void *)(a1 + 32);
    __int128 v17 = *(void **)(v16 + 192);
    *(void *)(v16 + 192) = v15;

    [*(id *)(a1 + 32) _setupSecondaryAccounts];
  }

  __int16 v18 = -[ADCloudKitRetryManager initWithQueue:]( objc_alloc(&OBJC_CLASS___ADCloudKitRetryManager),  "initWithQueue:",  *(void *)(*(void *)(a1 + 32) + 112LL));
  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = *(void **)(v19 + 56);
  *(void *)(v19 + 56) = v18;
}

void sub_1000A2450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    [v5 setEnabled:*(unsigned __int8 *)(a1 + 48) forDataclass:kAccountDataclassSiri];
    [*(id *)(a1 + 32) saveAccount:v5 withCompletionHandler:*(void *)(a1 + 40)];
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        __int16 v11 = "+[ADCloudKitManager _setAppleAccountSiriStateEnabled:withCompletion:]_block_invoke";
        __int16 v12 = 2112;
        id v13 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Error while retrieving primary account: %@",  (uint8_t *)&v10,  0x16u);
      }
    }

    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v7);
    }
  }
}

void sub_1000A2574(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100577B70;
  qword_100577B70 = (uint64_t)v1;
}

id sub_1000A3340(uint64_t a1)
{
  return [*(id *)(a1 + 32) _saveTimeouts:*(void *)(a1 + 40)];
}

BOOL sub_1000A334C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 compare:*(void *)(a1 + 32)] == (id)1;
}

uint64_t sub_1000A3374(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A3384(uint64_t a1)
{
}

void sub_1000A338C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _timeoutsExpiringAfter:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000A33C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SASyncAnchor _af_normalizedKeyForKey:appBundleID:syncSlotName:]( &OBJC_CLASS___SASyncAnchor,  "_af_normalizedKeyForKey:appBundleID:syncSlotName:",  AFIntentSupportAndVocabSyncKey,  v5,  0LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SASyncAnchor _af_normalizedKeyForKey:appBundleID:syncSlotName:]( &OBJC_CLASS___SASyncAnchor,  "_af_normalizedKeyForKey:appBundleID:syncSlotName:",  AFIntentSupportAndVocabSyncNanoKey,  v5,  0LL));
  int v21 = v8;
  id v22 = v7;
  if (([*(id *)(a1 + 32) containsObject:v7] & 1) != 0
    || [*(id *)(a1 + 32) containsObject:v8])
  {
    [v6 count];
    char v19 = 1;
  }

  else
  {
    if (![v6 count])
    {
      [*(id *)(a1 + 40) setObject:v6 forKey:v5];
      goto LABEL_19;
    }

    char v19 = 0;
  }

  uint64_t v9 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v6 count]);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v20 = v6;
  id v10 = v6;
  id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v24;
    uint64_t v14 = AFSynapseSyncAnchorKey;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v16 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[SASyncAnchor _af_normalizedKeyForKey:appBundleID:syncSlotName:]( &OBJC_CLASS___SASyncAnchor,  "_af_normalizedKeyForKey:appBundleID:syncSlotName:",  v14,  v5,  v16));
      }

      id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v12);
  }

  if (-[NSMutableArray count](v9, "count")) {
    char v18 = 0;
  }
  else {
    char v18 = v19;
  }
  uint64_t v8 = v21;
  if ((v18 & 1) == 0) {
    [*(id *)(a1 + 40) setObject:v9 forKey:v5];
  }

  id v6 = v20;
  uint64_t v7 = v22;
LABEL_19:
}

void sub_1000A3638(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[SASyncAnchor _af_normalizedKeyForKey:appBundleID:syncSlotName:]( &OBJC_CLASS___SASyncAnchor,  "_af_normalizedKeyForKey:appBundleID:syncSlotName:",  AFSynapseSyncAnchorKey,  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _timeoutsExpiringAfter:v2]);
  id v5 = v4;
  if (v3)
  {
  }

  else
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v9 = 136315650;
      id v10 = "-[ADSyncBlacklist checkPermissionToSyncSlot:forApp:completion:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s No normalized key could be computed for %@ %@",  (uint8_t *)&v9,  0x20u);
    }
  }

  [*(id *)(a1 + 48) _saveTimeouts:v5];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000A37A4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _timeoutsExpiringAfter:v2]);
  [*(id *)(a1 + 32) _saveTimeouts:v3];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[_INVocabulary supportedVocabularyStringTypes]( &OBJC_CLASS____INVocabulary,  "supportedVocabularyStringTypes"));
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v12 = v2;
    uint64_t v7 = *(void *)v14;
    uint64_t v8 = AFSynapseSyncAnchorKey;
    while (2)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[SASyncAnchor _af_normalizedKeyForKey:appBundleID:syncSlotName:]( &OBJC_CLASS___SASyncAnchor,  "_af_normalizedKeyForKey:appBundleID:syncSlotName:",  v8,  *(void *)(a1 + 40),  *(void *)(*((void *)&v13 + 1) + 8LL * (void)i)));
        if (v10)
        {
          __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v10]);

          if (v11)
          {

            goto LABEL_12;
          }
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }

void sub_1000A3964(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _storePath]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  v2));

  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 _timeouts:v8 expiringAfter:v4]);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 8);
  *(void *)(v6 + _Block_object_dispose((const void *)(v1 - 152), 8) = v5;
}

void sub_1000A3A78(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_100577B98;
  qword_100577B98 = (uint64_t)v1;
}

void sub_1000A3F94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A4050;
  block[3] = &unk_1004FD9E0;
  id v13 = v6;
  id v14 = v7;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_1000A4050(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

id sub_1000A406C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000A40F4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_100577BB0;
  qword_100577BB0 = (uint64_t)v1;
}

void sub_1000A6968(uint64_t a1)
{
  uint64_t v2 = *(_WORD **)(a1 + 32);
  if ((v2[34] & 1) != 0)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataUsingEncoding:4]);
    unsigned int v4 = [v2 _onQueueSetKeychainValue:v3 forKey:@"Assistant Identifier"];

    uint64_t v2 = *(_WORD **)(a1 + 32);
    if (v4)
    {
      v2[34] &= ~1u;
      uint64_t v2 = *(_WORD **)(a1 + 32);
    }
  }

  if ((v2[34] & 2) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataUsingEncoding:4]);
    unsigned int v6 = [v2 _onQueueSetKeychainValue:v5 forKey:@"Logging Assistant Identifier"];

    uint64_t v2 = *(_WORD **)(a1 + 32);
    if (v6)
    {
      v2[34] &= ~2u;
      uint64_t v2 = *(_WORD **)(a1 + 32);
    }
  }

  if ((v2[34] & 4) != 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) dataUsingEncoding:4]);
    unsigned int v8 = [v2 _onQueueSetKeychainValue:v7 forKey:@"Speech Identifier"];

    if (v8) {
      *(_WORD *)(*(void *)(a1 + 32) + 68LL) &= ~4u;
    }
  }

  uint64_t v9 = AFIsNano(a1);
  if ((v9 & 1) != 0 || (uint64_t v9 = AFIsHorseman(v9, v10), (_DWORD)v9))
  {
    __int16 v11 = *(_WORD **)(a1 + 32);
    if ((v11[34] & 8) != 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataUsingEncoding:4]);
      unsigned int v13 = [v11 _onQueueSetKeychainValue:v12 forKey:@"Peer Assistant Identifier"];

      __int16 v11 = *(_WORD **)(a1 + 32);
      if (v13)
      {
        v11[34] &= ~8u;
        __int16 v11 = *(_WORD **)(a1 + 32);
      }
    }

    if ((v11[34] & 0x10) != 0)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) dataUsingEncoding:4]);
      unsigned int v15 = [v11 _onQueueSetKeychainValue:v14 forKey:@"Peer Logging Assistant Identifier"];

      __int16 v11 = *(_WORD **)(a1 + 32);
      if (v15)
      {
        v11[34] &= ~0x10u;
        __int16 v11 = *(_WORD **)(a1 + 32);
      }
    }

    if ((v11[34] & 0x20) != 0)
    {
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) dataUsingEncoding:4]);
      unsigned int v17 = [v11 _onQueueSetKeychainValue:v16 forKey:@"Peer Speech Identifier"];

      __int16 v11 = *(_WORD **)(a1 + 32);
      if (v17)
      {
        v11[34] &= ~0x20u;
        __int16 v11 = *(_WORD **)(a1 + 32);
      }
    }

    if ((v11[34] & 0x40) != 0)
    {
      char v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) dataUsingEncoding:4]);
      unsigned int v19 = [v11 _onQueueSetKeychainValue:v18 forKey:@"Peer User Agent String"];

      __int16 v11 = *(_WORD **)(a1 + 32);
      if (v19)
      {
        v11[34] &= ~0x40u;
        __int16 v11 = *(_WORD **)(a1 + 32);
      }
    }

    if ((v11[34] & 0x80) != 0)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) dataUsingEncoding:4]);
      unsigned int v21 = [v11 _onQueueSetKeychainValue:v20 forKey:@"Peer Language Code"];

      __int16 v11 = *(_WORD **)(a1 + 32);
      if (v21)
      {
        v11[34] &= ~0x80u;
        __int16 v11 = *(_WORD **)(a1 + 32);
      }
    }

    if ((v11[34] & 0x100) != 0)
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 112)));
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v22,  1LL,  0LL));
      unsigned int v24 = [v11 _onQueueSetKeychainValue:v23 forKey:@"Peer Siri Enabled"];

      if (v24) {
        *(_WORD *)(*(void *)(a1 + 32) + 68LL) &= ~0x100u;
      }
    }
  }

  uint64_t v25 = AFSupportsPairedDevice(v9, v10);
  if ((_DWORD)v25 && (AFIsNano(v25) & 1) == 0 && (*(_WORD *)(*(void *)(a1 + 32) + 68LL) & 0x200) != 0)
  {
    id v26 = (id)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  *(void *)(a1 + 104),  1LL,  0LL));
  }

uint64_t sub_1000A6D1C(void *a1)
{
  uint64_t result = AFKeychainSetValueForAccountAndKey(a1[4], *(void *)(a1[5] + 152LL), a1[6]);
  *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = result;
  return result;
}

id sub_1000A6D54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueSetKeychainValue:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

uint64_t sub_1000A6D64(uint64_t a1)
{
  return AFKeychainRemoveValueForAccountAndKey(*(void *)(*(void *)(a1 + 32) + 152LL), *(void *)(a1 + 40));
}

uint64_t sub_1000A6D70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000A6D80(uint64_t a1)
{
}

void sub_1000A6D88(void *a1)
{
  uint64_t v2 = AFKeychainValueForAccountAndKey(*(void *)(a1[4] + 152LL), a1[5]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_1000A6DC4(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 1u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 2u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 4u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 8u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x10u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x20u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x40u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x80u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x100u;
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x200u;
  return result;
}

id sub_1000A6E68(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 isEqualToString:*(void *)(*(void *)(a1 + 32) + 144)];
  if (a4) {
    *a4 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_1000A6EA0(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 4u;
  return result;
}

uint64_t sub_1000A6EB4(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 2u;
  return result;
}

uint64_t sub_1000A6EC8(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 1u;
  return result;
}

uint64_t sub_1000A8A50(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x200u;
  return result;
}

uint64_t sub_1000A8A64(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x200u;
  return result;
}

uint64_t sub_1000A8A78(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x100u;
  return result;
}

uint64_t sub_1000A8A8C(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x80u;
  return result;
}

uint64_t sub_1000A8AA0(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x40u;
  return result;
}

uint64_t sub_1000A8AB4(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x20u;
  return result;
}

uint64_t sub_1000A8AC8(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 0x10u;
  return result;
}

uint64_t sub_1000A8ADC(uint64_t result)
{
  *(_WORD *)(*(void *)(result + 32) + 68LL) |= 8u;
  return result;
}

id sub_1000A9368(__int16 a1)
{
  else {
    return (id)objc_opt_class(*off_1004EFD50[(unsigned __int16)(a1 - 1)]);
  }
}

void sub_1000AA234( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000AA794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000AA9AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v6 = WeakRetained[1];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_1000AAA48;
    v7[3] = &unk_1004FD968;
    void v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

id sub_1000AAA48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setStereoPartnerDeviceIdentifier:*(void *)(a1 + 40)];
}

void sub_1000AAA54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v6 = WeakRetained[1];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_1000AAAF0;
    v7[3] = &unk_1004FD968;
    void v7[4] = WeakRetained;
    id v8 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_1000AAAF0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = objc_alloc(&OBJC_CLASS___NSSet);
  if (*(void *)(a1 + 40)) {
    uint64_t v4 = *(void **)(a1 + 40);
  }
  else {
    uint64_t v4 = &__NSArray0__struct;
  }
  id v5 = -[NSSet initWithArray:](v3, "initWithArray:", v4);
  [v2 _setDeviceIdentifiers:v5];
}

void sub_1000AAB50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315906;
    char v18 = "-[ADDeviceSyncMessagingServiceRapport _handleIncomingDictionary:fromDeviceWithIdentifier:completion:]_block_invoke";
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    __int16 v21 = 2112;
    id v22 = v5;
    __int16 v23 = 2112;
    id v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s deviceIdentifier = %@, replyMessage = %@, error = %@",  buf,  0x2Au);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if (v5)
    {
      id v16 = 0LL;
      id v10 = sub_1002D3418(v5, &v16);
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v12 = v16;
      if (v12)
      {
        unsigned int v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
      }

      else
      {
        id v14 = (os_log_s *)AFSiriLogContextDeviceSync;
        if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 136315650;
          char v18 = "-[ADDeviceSyncMessagingServiceRapport _handleIncomingDictionary:fromDeviceWithIdentifier:completion:]_block_invoke";
          __int16 v19 = 2112;
          uint64_t v20 = v15;
          __int16 v21 = 2112;
          id v22 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s deviceIdentifier = %@, replyDictionary = %@",  buf,  0x20u);
        }

        unsigned int v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
      }

      v13();
    }

    else
    {
      (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0LL, v6);
    }
  }
}

void sub_1000AAD24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000AADF4;
  v11[3] = &unk_1004FDA30;
  id v12 = v7;
  id v13 = v5;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_1000AADF4(void *a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = (void *)a1[5];
    uint64_t v5 = a1[6];
    *(_DWORD *)__int128 buf = 136315906;
    id v16 = "-[ADDeviceSyncMessagingServiceRapport _handleOutgoingMessage:toDeviceWithIdentifier:completion:]_block_invoke_2";
    __int16 v17 = 2112;
    uint64_t v18 = v3;
    __int16 v19 = 2112;
    uint64_t v20 = v4;
    __int16 v21 = 2112;
    uint64_t v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s deviceIdentifier = %@, replyDictionary = %@, error = %@",  buf,  0x2Au);
  }

  uint64_t v6 = a1[7];
  if (v6)
  {
    uint64_t v7 = (void *)a1[5];
    if (v7)
    {
      id v14 = 0LL;
      id v8 = sub_1002D35C8(v7, &v14);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      id v10 = v14;
      if (v10)
      {
        __int16 v11 = *(void (**)(void))(a1[7] + 16LL);
      }

      else
      {
        id v12 = (os_log_s *)AFSiriLogContextDeviceSync;
        if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = a1[4];
          *(_DWORD *)__int128 buf = 136315650;
          id v16 = "-[ADDeviceSyncMessagingServiceRapport _handleOutgoingMessage:toDeviceWithIdentifier:completion:]_block_invoke";
          __int16 v17 = 2112;
          uint64_t v18 = v13;
          __int16 v19 = 2112;
          uint64_t v20 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s deviceIdentifier = %@, replyMessage = %@",  buf,  0x20u);
        }

        __int16 v11 = *(void (**)(void))(a1[7] + 16LL);
      }

      v11();
    }

    else
    {
      (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0LL, a1[6]);
    }
  }

id sub_1000AAFA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleOutgoingMessage:*(void *)(a1 + 40) toDeviceWithIdentifier:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

id sub_1000AAFB8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleIncomingDictionary:*(void *)(a1 + 40) fromDeviceWithIdentifier:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

id sub_1000AAFC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1000AAFD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCompanionServiceStereoConfigurationDidChange];
}

id sub_1000AAFD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleCompanionServiceActiveDevicesDidChange];
}

id sub_1000AAFE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleCompanionServiceReadyStateDidChange];
}

id sub_1000AAFE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCompanionServiceStereoConfigurationDidChange];
}

void sub_1000AB504(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    id v9 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Completed", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v5);
  }
}

void sub_1000AB5DC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000AB668;
  v4[3] = &unk_1004EFEC8;
  id v3 = *(id *)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 accessStoreUsingBlock:v4];
}

void sub_1000AB668(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000AB6F8;
  v6[3] = &unk_1004F6F00;
  id v4 = *(id *)(a1 + 40);
  id v7 = v3;
  id v8 = v4;
  void v6[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v5 fetchEventStreamUIDsWithCompletion:v6];
}

void sub_1000AB6F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v42 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke_3";
      __int16 v43 = 2112;
      __int128 v44 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error fetching event streamUIDs: %@",  buf,  0x16u);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_5:
    v8();
    goto LABEL_28;
  }

  if (![v5 count])
  {
    uint64_t v28 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v42 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "%s No pending event streamUIDs.",  buf,  0xCu);
    }

    id v8 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_5;
  }

  uint64_t v29 = a1;
  uint64_t v30 = 0LL;
  id v9 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v5 count]);
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v31 = v5;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v37 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        uint64_t v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "streamUID", v29, v30));
        if (v16)
        {
          __int16 v17 = (void *)v16;
          uint64_t v18 = objc_alloc(&OBJC_CLASS___NSUUID);
          __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v15 streamUID]);
          uint64_t v20 = -[NSUUID initWithUUIDString:](v18, "initWithUUIDString:", v19);

          if (v20)
          {
            -[NSMutableArray addObject:](v9, "addObject:", v20);
          }
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v36 objects:v40 count:16];
    }

    while (v12);
  }

  id v21 = -[NSMutableArray count](v9, "count");
  uint64_t v22 = (os_log_s *)AFSiriLogContextDaemon;
  if (v21)
  {
    uint64_t v23 = v29;
    uint64_t v6 = v30;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v42 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
      __int16 v43 = 2112;
      __int128 v44 = v9;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "%s Fetching sensitive condition ranges for bootSessionUUIDs: %@",  buf,  0x16u);
    }

    id v24 = *(void **)(*(void *)(v29 + 32) + 8LL);
    id v25 = -[NSMutableArray copy](v9, "copy", v29, v30);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000ABB10;
    void v32[3] = &unk_1004EFEA0;
    id v26 = *(id *)(v23 + 40);
    uint64_t v27 = *(void *)(v23 + 32);
    id v33 = v26;
    uint64_t v34 = v27;
    id v35 = *(id *)(v23 + 48);
    [v24 sensitiveConditionRangesForBootSessionUUIDs:v25 completion:v32];
  }

  else
  {
    uint64_t v6 = v30;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v42 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s No streamUIDs were able to be parsed.",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(v29 + 48) + 16LL))();
  }

  id v5 = v31;

LABEL_28:
}

void sub_1000ABB10(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v19 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
    __int16 v20 = 2112;
    id v21 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Fetched sensitive condition ranges: %@",  buf,  0x16u);
  }

  id v5 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000ABCD8;
  void v14[3] = &unk_1004EFE78;
  dispatch_group_t v15 = dispatch_group_create();
  id v16 = *(id *)(a1 + 32);
  uint64_t v6 = v5;
  __int16 v17 = v6;
  id v7 = v15;
  [v3 enumerateKeysAndObjectsUsingBlock:v14];
  id v8 = *(void **)(a1 + 48);
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000ABF34;
  block[3] = &unk_1004FD990;
  id v12 = v6;
  id v13 = v8;
  id v10 = v6;
  dispatch_group_notify(v7, v9, block);
}

void sub_1000ABCD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 UUIDString]);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = v5;
  id v7 = [obj countByEnumeratingWithState:&v24 objects:v36 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)v10);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
        id v12 = [v11 startedAt];
        id v13 = [v11 endedAt];
        id v14 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315906;
          uint64_t v29 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
          __int16 v30 = 2048;
          id v31 = v12;
          __int16 v32 = 2048;
          id v33 = v13;
          __int16 v34 = 2112;
          id v35 = v6;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Deleting records from:%llu to:%llu streamUID:%@",  buf,  0x2Au);
        }

        dispatch_group_t v15 = *(void **)(a1 + 40);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        void v18[2] = sub_1000ABFFC;
        v18[3] = &unk_1004EFE50;
        void v18[4] = v11;
        id v16 = v6;
        id v19 = v16;
        id v20 = *(id *)(a1 + 48);
        id v22 = v12;
        id v23 = v13;
        id v21 = *(id *)(a1 + 32);
        [v15 deleteEventRecordsFromStartTime:v12 toEndTime:v13 eventStreamUID:v16 completion:v18];

        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v24 objects:v36 count:16];
    }

    while (v8);
  }
}

uint64_t sub_1000ABF34(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v6 = @"Redacted spans";
  uint64_t v7 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  [v2 logEventWithType:4310 context:v4];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000ABFFC(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = v2;
    id v10 = [v8 startedAt];
    id v11 = [*(id *)(a1 + 32) endedAt];
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315906;
    id v14 = "-[ADSiriAnalyticsServiceHost deleteLegacyMetricsAffectedBySensitiveConditionsWithCompletion:]_block_invoke";
    __int16 v15 = 2048;
    id v16 = v10;
    __int16 v17 = 2048;
    id v18 = v11;
    __int16 v19 = 2112;
    uint64_t v20 = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s Finished deleting records from:%llu to:%llu streamUID:%@",  buf,  0x2Au);
  }

  uint64_t v3 = *(void **)(a1 + 48);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 64)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 72)));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  (int)[*(id *)(a1 + 32) conditionType]));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v4, v5, v6, 0LL));
  [v3 addObject:v7];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000AC198(uint64_t a1)
{
  if (AFIsInternalInstall(a1)
    && [*(id *)(a1 + 32) _siriOrDictationIsEnabled])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    unsigned int v3 = [v2 longLivedIdentifierUploadingEnabled];

    if (v3)
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      [v4 fetchActiveAccount:&stru_1004EFE28];
    }
  }

void sub_1000AC228(id a1, ADAccount *a2)
{
  uint64_t v2 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[FLLogger sharedLogger](&OBJC_CLASS___FLLogger, "sharedLogger"));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(-[ADAccount speechIdentifier](v2, "speechIdentifier"));

  [v4 setValue:v3 forUploadHeaderNamed:@"userId"];
}

void sub_1000AC2D8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ADSiriAnalyticsServiceHost);
  uint64_t v2 = (void *)qword_100577BC0;
  qword_100577BC0 = (uint64_t)v1;
}

void sub_1000AC714(uint64_t a1, xpc_object_t xdict)
{
  if (xdict) {
    xpc_dictionary_get_BOOL(xdict, AFExternalRequestReplyKeyResult);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_1000ACAFC(uint64_t a1, xpc_object_t xdict)
{
  if (xdict) {
    xpc_dictionary_get_BOOL(xdict, AFExternalRequestReplyKeyResult);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

id sub_1000ACEA4(uint64_t a1, void *a2)
{
  return _[a2 setDataTypes:*(void *)(a1 + 32)];
}

void sub_1000B09E0(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[ADServiceManager _serviceBundleIDFromServiceReloadNotification:]( &OBJC_CLASS___ADServiceManager,  "_serviceBundleIDFromServiceReloadNotification:",  a2));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:v4]);
  [*(id *)(a1 + 40) addObject:v3];
}

BOOL sub_1000B0A48(id a1, ADService *a2, unint64_t a3, BOOL *a4)
{
  return -[ADService requiresBootMaintenance](a2, "requiresBootMaintenance", a3, a4);
}

id sub_1000B0A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _loadServiceFromBundlePath:a2 infoDictionary:a3];
}

void sub_1000B2910(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v5 count]);
  [*(id *)(a1 + 32) setObject:v7 forKey:v6];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1000B2A44;
  v9[3] = &unk_1004EFF58;
  id v10 = v7;
  id v8 = v7;
  [v5 enumerateKeysAndObjectsUsingBlock:v9];
}

void sub_1000B29E4(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 dictionaryRepresentation]);
  [v4 setObject:v6 forKey:v5];
}

void sub_1000B2A44(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 dictionaryRepresentation]);
  [v4 setObject:v6 forKey:v5];
}

id sub_1000B2AA4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _pruneAppsCacheWithTruth:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _save];
  }
  return result;
}

void sub_1000B2AE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) shouldIgnoreSyncKey:v5])
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      id v10 = "-[ADSyncSnapshot _readFromDisk]_block_invoke";
      __int16 v11 = 2112;
      id v12 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Dropping ignored sync data of type %@",  (uint8_t *)&v9,  0x16u);
    }
  }

  else
  {
    id v8 = -[_ADChunkInfo initWithDictionary:](objc_alloc(&OBJC_CLASS____ADChunkInfo), "initWithDictionary:", v6);
    if (-[_ADChunkInfo isValid](v8, "isValid")) {
      [*(id *)(a1 + 40) setObject:v8 forKey:v5];
    }
  }
}

void sub_1000B2C00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (sub_1000B2D5C(v5)
    && (objc_opt_respondsToSelector(v6, "enumerateKeysAndObjectsUsingBlock:") & 1) != 0)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000B2DA4;
    v8[3] = &unk_1004F3280;
    id v9 = *(id *)(a1 + 32);
    id v10 = v5;
    [v6 enumerateKeysAndObjectsUsingBlock:v8];
  }

  else
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v12 = "-[ADSyncSnapshot _readFromDisk]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Saved %@ data is invalid, continuing...",  buf,  0x16u);
    }
  }
}

uint64_t sub_1000B2D5C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSString);
  char isKindOfClass = objc_opt_isKindOfClass(v1, v2);

  return isKindOfClass & 1;
}

void sub_1000B2DA4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = -[_ADChunkInfo initWithDictionary:](objc_alloc(&OBJC_CLASS____ADChunkInfo), "initWithDictionary:", v5);

  if (sub_1000B2D5C(v8) && -[_ADChunkInfo isValid](v6, "isValid"))
  {
    uint64_t v7 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:*(void *)(a1 + 40)]);
    if (!v7)
    {
      uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [*(id *)(a1 + 32) setObject:v7 forKey:*(void *)(a1 + 40)];
    }

    -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v6, v8);
  }
}

id sub_1000B2E68(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[ADSyncSnapshot deleteSavedSnapshots]_block_invoke";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s ", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
  return [*(id *)(a1 + 32) _save];
}

id sub_1000B2F34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _noteSendingPostGen:*(void *)(a1 + 40) validity:*(void *)(a1 + 48) key:*(void *)(a1 + 56) appMetaData:*(void *)(a1 + 64)];
}

id sub_1000B2F48(uint64_t a1)
{
  return [*(id *)(a1 + 32) _save];
}

id sub_1000B2F50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchSentAnchorsOnQueue:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000B2F60(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 anchorWithKey:a2 appID:0 syncType:0]);
  [*(id *)(a1 + 32) addObject:v4];
}

void sub_1000B2FB0(uint64_t a1, void *a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000B305C;
  v6[3] = &unk_1004EFF80;
  id v7 = a2;
  id v8 = *(id *)(a1 + 32);
  id v5 = v7;
  [a3 enumerateKeysAndObjectsUsingBlock:v6];
}

uint64_t sub_1000B304C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000B305C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 anchorWithKey:AFSynapseSyncAnchorKey appID:*(void *)(a1 + 32) syncType:a2]);
  [*(id *)(a1 + 40) addObject:v4];
}

id sub_1000B30B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _readFromDisk];
}

void sub_1000B3134(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_100577BC8;
  qword_100577BC8 = (uint64_t)v1;
}

id sub_1000B3FE8(uint64_t a1, void *a2)
{
  return [a2 setEffectiveDate:*(void *)(a1 + 32)];
}

void sub_1000B421C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) properties]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000B4310;
  v6[3] = &unk_1004FD338;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000B42AC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUID]);
  [v5 setTimerID:v4];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000B4310(uint64_t a1, void *a2, void *a3)
{
  id v41 = a2;
  id v5 = a3;
  if ([v41 isEqual:@"timerURL"])
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSURL);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0) {
      id v7 = v5;
    }
    else {
      id v7 = 0LL;
    }
    [*(id *)(a1 + 32) setTimerURL:v7];
  }

  else if ([v41 isEqual:@"isFiring"])
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char isKindOfClass = objc_opt_isKindOfClass(v5, v8);
    id v10 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      id v11 = [v5 BOOLValue];
      id v12 = v10;
    }

    else
    {
      id v12 = v10;
      id v11 = 0LL;
    }

    [v12 setIsFiring:v11];
  }

  else if ([v41 isEqual:@"title"])
  {
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v5, v13) & 1) != 0) {
      id v14 = v5;
    }
    else {
      id v14 = 0LL;
    }
    [*(id *)(a1 + 32) setTitle:v14];
  }

  else if ([v41 isEqual:@"state"])
  {
    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char v16 = objc_opt_isKindOfClass(v5, v15);
    __int16 v17 = *(void **)(a1 + 32);
    if ((v16 & 1) != 0)
    {
      id v18 = [v5 integerValue];
      __int16 v19 = v17;
    }

    else
    {
      __int16 v19 = v17;
      id v18 = 0LL;
    }

    [v19 setState:v18];
  }

  else if ([v41 isEqual:@"duration"])
  {
    uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char v21 = objc_opt_isKindOfClass(v5, v20);
    id v22 = *(void **)(a1 + 32);
    if ((v21 & 1) != 0) {
      [v5 doubleValue];
    }
    else {
      double v23 = 0.0;
    }
    [v22 setDuration:v23];
  }

  else if ([v41 isEqual:@"type"])
  {
    uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char v25 = objc_opt_isKindOfClass(v5, v24);
    __int128 v26 = *(void **)(a1 + 32);
    if ((v25 & 1) != 0)
    {
      id v27 = [v5 integerValue];
      uint64_t v28 = v26;
    }

    else
    {
      uint64_t v28 = v26;
      id v27 = 0LL;
    }

    [v28 setType:v27];
  }

  else if ([v41 isEqual:@"fireTimeInterval"])
  {
    uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSNumber);
    char v30 = objc_opt_isKindOfClass(v5, v29);
    id v31 = *(void **)(a1 + 32);
    if ((v30 & 1) != 0) {
      [v5 doubleValue];
    }
    else {
      double v32 = 0.0;
    }
    [v31 setFireTimeInterval:v32];
  }

  else if ([v41 isEqual:@"fireDate"])
  {
    uint64_t v33 = objc_opt_class(&OBJC_CLASS___NSDate);
    if ((objc_opt_isKindOfClass(v5, v33) & 1) != 0) {
      id v34 = v5;
    }
    else {
      id v34 = 0LL;
    }
    [*(id *)(a1 + 32) setFireDate:v34];
  }

  else if ([v41 isEqual:@"firedDate"])
  {
    uint64_t v35 = objc_opt_class(&OBJC_CLASS___NSDate);
    if ((objc_opt_isKindOfClass(v5, v35) & 1) != 0) {
      id v36 = v5;
    }
    else {
      id v36 = 0LL;
    }
    [*(id *)(a1 + 32) setFiredDate:v36];
  }

  else if ([v41 isEqual:@"dismissedDate"])
  {
    uint64_t v37 = objc_opt_class(&OBJC_CLASS___NSDate);
    if ((objc_opt_isKindOfClass(v5, v37) & 1) != 0) {
      id v38 = v5;
    }
    else {
      id v38 = 0LL;
    }
    [*(id *)(a1 + 32) setDismissedDate:v38];
  }

  else if ([v41 isEqual:@"lastModifiedDate"])
  {
    uint64_t v39 = objc_opt_class(&OBJC_CLASS___NSDate);
    if ((objc_opt_isKindOfClass(v5, v39) & 1) != 0) {
      id v40 = v5;
    }
    else {
      id v40 = 0LL;
    }
    [*(id *)(a1 + 32) setLastModifiedDate:v40];
  }
}

void sub_1000B46BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timerID]);
  [v3 setUUID:v4];

  v29[0] = @"timerURL";
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timerURL]);
  if (v28) {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timerURL]);
  }
  else {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v27 = (void *)v5;
  v30[0] = v5;
  v29[1] = @"isFiring";
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) isFiring]));
  v30[1] = v26;
  v29[2] = @"title";
  char v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) title]);
  if (v25) {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) title]);
  }
  else {
    uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  uint64_t v24 = (void *)v6;
  v30[2] = v6;
  v29[3] = @"state";
  double v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) state]));
  v30[3] = v23;
  v29[4] = @"type";
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) type]));
  v30[4] = v22;
  v29[5] = @"duration";
  [*(id *)(a1 + 32) duration];
  char v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v30[5] = v21;
  v29[6] = @"fireTimeInterval";
  [*(id *)(a1 + 32) fireTimeInterval];
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v30[6] = v20;
  v29[7] = @"fireDate";
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fireDate]);
  if (v7) {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fireDate]);
  }
  else {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v9 = (void *)v8;
  v30[7] = v8;
  v29[8] = @"firedDate";
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firedDate]);
  if (v10) {
    uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firedDate]);
  }
  else {
    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v12 = (void *)v11;
  v30[8] = v11;
  v29[9] = @"dismissedDate";
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dismissedDate]);
  if (v13) {
    uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dismissedDate]);
  }
  else {
    uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  uint64_t v15 = (void *)v14;
  v30[9] = v14;
  v29[10] = @"lastModifiedDate";
  char v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastModifiedDate]);
  if (v16) {
    uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastModifiedDate]);
  }
  else {
    uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v18 = (void *)v17;
  v30[10] = v17;
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  11LL));
  [v3 setProperties:v19];
}

id sub_1000B5C90(uint64_t a1, void *a2)
{
  return _[a2 setIncrementalChanges:*(void *)(a1 + 32)];
}

void sub_1000B648C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SOClockTimerObserver);
  uint64_t v2 = (void *)qword_100577BE0;
  qword_100577BE0 = (uint64_t)v1;
}

void sub_1000B7350(_Unwind_Exception *a1)
{
}

void sub_1000B7C4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000B8114(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000B8198;
  v4[3] = &unk_1004FCC00;
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  [v2 sendDeviceConfig:v1 device:v3 completion:v4];
}

uint64_t sub_1000B8198(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B81A4(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) discoveredDevices]);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v26 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bluetoothAddress", (void)v16));
        uint64_t v10 = AFNormalizeMacAddress(v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        if ([v11 isEqualToString:a1[5]])
        {
          uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v14 = a1[6];
            *(_DWORD *)__int128 buf = 136315650;
            char v21 = "-[ADCoreBluetoothV2DeviceSource fetchAudioAccessoryDeviceForBTAddress:completion:]_block_invoke";
            __int16 v22 = 2112;
            uint64_t v23 = v14;
            __int16 v24 = 2112;
            char v25 = v8;
            _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s : %@ -> (%@)", buf, 0x20u);
          }

          (*(void (**)(void))(a1[7] + 16LL))();

          goto LABEL_15;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v26 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  id v12 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = a1[6];
    *(_DWORD *)__int128 buf = 136315394;
    char v21 = "-[ADCoreBluetoothV2DeviceSource fetchAudioAccessoryDeviceForBTAddress:completion:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v15;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s : %@ -> nil", buf, 0x16u);
  }

  (*(void (**)(void))(a1[7] + 16LL))();
LABEL_15:
}

void sub_1000B83EC(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) discoveredDevices]);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    while (2)
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier", (void)v15));
        unsigned int v10 = [v9 isEqualToString:a1[5]];

        if (v10)
        {
          id v12 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v13 = a1[5];
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v20 = "-[ADCoreBluetoothV2DeviceSource fetchAudioAccessoryDeviceForCBUUID:completion:]_block_invoke";
            __int16 v21 = 2112;
            uint64_t v22 = v13;
            __int16 v23 = 2112;
            __int16 v24 = v8;
            _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s : %@ -> (%@)", buf, 0x20u);
          }

          (*(void (**)(void))(a1[6] + 16LL))();

          goto LABEL_15;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v25 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = a1[5];
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v20 = "-[ADCoreBluetoothV2DeviceSource fetchAudioAccessoryDeviceForCBUUID:completion:]_block_invoke";
    __int16 v21 = 2112;
    uint64_t v22 = v14;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s : %@ -> nil", buf, 0x16u);
  }

  (*(void (**)(void))(a1[6] + 16LL))();
LABEL_15:
}

void sub_1000B8620(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 64) objectForKey:a1[5]]);
  if ([v2 length])
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = a1[5];
      int v5 = 136315650;
      uint64_t v6 = "-[ADCoreBluetoothV2DeviceSource fetchAddressForDeviceWithCBUUID:completion:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      unsigned int v10 = v2;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s (cached): %@ -> (%@)",  (uint8_t *)&v5,  0x20u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

void sub_1000B871C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) objectForKey:*(void *)(a1 + 40)]);
  if ([v2 length])
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v13 = "-[ADCoreBluetoothV2DeviceSource fetchCBUUIDForDeviceWithAddress:completion:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      __int128 v17 = v2;
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s (cached): %@ -> (%@)", buf, 0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000B8890;
    v8[3] = &unk_1004F0108;
    id v5 = v4;
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    id v11 = *(id *)(a1 + 48);
    +[ADCoreBluetoothManager fetchCBUUIDForConnectedDeviceWithAddress:completion:]( &OBJC_CLASS___ADCoreBluetoothManager,  "fetchCBUUIDForConnectedDeviceWithAddress:completion:",  v5,  v8);
  }
}

void sub_1000B8890(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[4];
    int v6 = 136315650;
    uint64_t v7 = "-[ADCoreBluetoothV2DeviceSource fetchCBUUIDForDeviceWithAddress:completion:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s (caching): %@ -> (%@)",  (uint8_t *)&v6,  0x20u);
  }

  [*(id *)(a1[5] + 56) setObject:v3 forKey:a1[4]];
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000B8988(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    int v6 = "-[ADCoreBluetoothV2DeviceSource _aadConnectionInterrupted]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s AAd was interrupted, waiting for a client to set up aad again",  (uint8_t *)&v5,  0xCu);
  }

  [*(id *)(a1 + 32) invalidate];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose((const void *)(v1 - 152), 8) = 0LL;
}

void sub_1000B8A4C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315394;
    __int16 v8 = "-[ADCoreBluetoothV2DeviceSource _aadActivatingWithRetry:andError:]_block_invoke";
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s AudioAccessory daemon started, token: %d",  (uint8_t *)&v7,  0x12u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _setupDiscoveryWithRetry:0];
  }
}

id sub_1000B8B30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _aadActivatingWithRetry:*(unsigned __int8 *)(a1 + 48) andError:*(void *)(a1 + 40)];
}

id sub_1000B8B40(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleDeviceLost:*(void *)(a1 + 40)];
}

id sub_1000B8B4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleDeviceFound:*(void *)(a1 + 40)];
}

id sub_1000B8B58()
{
  return (id)qword_100577BE8;
}

Class sub_1000B8B64()
{
  uint64_t v4 = 0LL;
  if (!qword_100577BF0)
  {
    __int128 v5 = off_1004F0128;
    uint64_t v6 = 0LL;
    qword_100577BF0 = _sl_dlopen(&v5, &v4);
  }

  if (!qword_100577BF0)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *AudioAccessoryServicesLibrary(void)"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCoreBluetoothV2DeviceSource.m",  19,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  unint64_t v0 = v4;
  if (v4) {
LABEL_7:
  }
    free(v0);
  Class result = objc_getClass("AADeviceManager");
  qword_100577BE8 = (uint64_t)result;
  off_100572B28 = (uint64_t (*)())sub_1000B8B58;
  return result;
}

void sub_1000B8C88(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleDeviceFound:v5];
  }
}

void sub_1000B8CD8(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleDeviceLost:v5];
  }
}

void sub_1000B8D28(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained aadActivatingWithRetry:*(unsigned __int8 *)(a1 + 40) andError:v5];
  }
}

void sub_1000B8D7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _aadConnectionInterrupted];
    id WeakRetained = v2;
  }
}

id sub_1000B8DAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1000B8DB4(void *a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v7 = 136315650;
    __int16 v8 = "-[ADCoreBluetoothV2DeviceSource invalidateDeviceWithAddress:cbuuid:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s : %@ CBUUID: %@", (uint8_t *)&v7, 0x20u);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[6] + 32) objectForKey:a1[4]]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[6] + 40) objectForKey:a1[5]]);
  if (a1[4])
  {
    objc_msgSend(*(id *)(a1[6] + 32), "removeObjectForKey:");
    [v3 invalidate];
  }

  if (a1[5])
  {
    objc_msgSend(*(id *)(a1[6] + 40), "removeObjectForKey:");
    if (!a1[4]) {
      [v4 invalidate];
    }
  }
}

void sub_1000B8EF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    int v7 = "-[ADCoreBluetoothV2DeviceSource _deviceWithUID:createsIfAbsent:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s (caching): %@ -> (%@)",  (uint8_t *)&v6,  0x20u);
  }

  [*(id *)(*(void *)(a1 + 40) + 32) setObject:*(void *)(a1 + 32) forKey:v3];
}

void sub_1000B8FDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    int v7 = "-[ADCoreBluetoothV2DeviceSource _deviceWithAddress:createsIfAbsent:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s (caching): %@ -> (%@)",  (uint8_t *)&v6,  0x20u);
  }

  [*(id *)(*(void *)(a1 + 40) + 40) setObject:*(void *)(a1 + 32) forKey:v3];
}

uint64_t sub_1000B90C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B90D4(uint64_t a1)
{
}

void sub_1000B90DC(void *a1)
{
  uint64_t v2 = AFNormalizeMacAddress(a1[4]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 72) objectForKey:v3]);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  int v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    int v10 = 136315650;
    uint64_t v11 = "-[ADCoreBluetoothV2DeviceSource headGestureConfigurationForBTAddress:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s  %@: %@", (uint8_t *)&v10, 0x20u);
  }
}

void sub_1000B91F0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2[6])
  {
    id v3 = (dispatch_queue_s *)v2[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000B9330;
    block[3] = &unk_1004FD940;
    void block[4] = v2;
    dispatch_async(v3, block);
    uint64_t v2 = (void *)a1[4];
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 _deviceWithUID:a1[5] createsIfAbsent:1]);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  int v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = a1[5];
    uint64_t v9 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v12 = "-[ADCoreBluetoothV2DeviceSource deviceWithUID:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s  %@: %@", buf, 0x20u);
  }

id sub_1000B9330(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCoreBluetoothV2DeviceSource deviceWithUID:]_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Setting up aaDeviceManager",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _setupDiscoveryWithRetry:1];
}

void sub_1000B93E8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2[6])
  {
    id v3 = (dispatch_queue_s *)v2[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000B9528;
    block[3] = &unk_1004FD940;
    void block[4] = v2;
    dispatch_async(v3, block);
    uint64_t v2 = (void *)a1[4];
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 _deviceWithAddress:a1[5] createsIfAbsent:1]);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  int v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = a1[5];
    uint64_t v9 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v12 = "-[ADCoreBluetoothV2DeviceSource deviceWithAddress:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s  %@: %@", buf, 0x20u);
  }

id sub_1000B9528(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCoreBluetoothV2DeviceSource deviceWithAddress:]_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Setting up aaDeviceManager",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _setupDiscoveryWithRetry:1];
}

id sub_1000B95E0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToWeakObjectsMapTable"));
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToWeakObjectsMapTable"));
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToStrongObjectsMapTable"));
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(void **)(v9 + 56);
  *(void *)(v9 + 56) = v8;

  uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToStrongObjectsMapTable"));
  uint64_t v12 = *(void *)(a1 + 32);
  __int16 v13 = *(void **)(v12 + 64);
  *(void *)(v12 + 64) = v11;

  uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToStrongObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToStrongObjectsMapTable"));
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void **)(v15 + 72);
  *(void *)(v15 + 72) = v14;

  return [*(id *)(a1 + 32) _setupDiscoveryWithRetry:1];
}

void sub_1000B9694(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 event]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 contextData]);
  id v5 = [v4 copy];

  [*(id *)(a1 + 32) addObject:v5];
  if (*(void *)(a1 + 40)) {
    **(void **)(a1 + 40) += [v5 length];
  }
}

void sub_1000B971C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___SISchemaClientTurnBasedEvent);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 event]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 contextData]);
  id v7 = [v4 initWithData:v6];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 event]);
  id v9 = [v8 eventType];
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 event]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 eventData]);
  uint64_t v12 = SIReflectionHydrateProtoFromEventTypeAndData(v9, v11);
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  if (v13)
  {
    id v14 = objc_alloc_init(&OBJC_CLASS___SISchemaClientEvent);
    [v14 setEventType:v13];
    id v15 = objc_alloc_init(&OBJC_CLASS___SISchemaClientEventMetadata);
    [v14 setEventMetadata:v15];

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 eventMetadata]);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v3 streamUID]);
    [v16 setEventGeneratedTimestampRefId:v17];

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v14 eventMetadata]);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v3 event]);
    objc_msgSend(v18, "setEventGeneratedRelativeToBootTimeTimestampNs:", objc_msgSend(v19, "timestamp"));

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v14 eventMetadata]);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v7 turnContext]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 turnID]);
    [v20 setTurnID:v22];

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v14 data]);
    [*(id *)(a1 + 32) addObject:v23];
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) += [v23 length];
    }
  }

  else
  {
    __int16 v24 = (void *)AFSiriLogContextAnalytics;
    if (!os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    char v25 = v24;
    id v14 = (id)objc_claimAutoreleasedReturnValue([v7 event]);
    int v26 = 136315394;
    id v27 = "ADAnalyticsSendInstrumentationForUEICreate_block_invoke";
    __int16 v28 = 1024;
    unsigned int v29 = [v14 eventType];
    _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s Unable to map event type %d to known instrumentation event class.",  (uint8_t *)&v26,  0x12u);
  }

LABEL_7:
}

NSMutableDictionary *sub_1000B99EC(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 timeUntilOpen]);
    [v3 doubleValue];
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4 * 1000.0));

    if (v5) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v5, @"openTime");
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 timeUntilFirstByteRead]);
    [v6 doubleValue];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7 * 1000.0));

    if (v8) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v8, @"firstByteTime");
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v1 attemptCount]);
    if (v9) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v9, @"attemptCount");
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue([v1 metricsCount]);
    if (v10) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v10, @"metricsCount");
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v1 meanPing]);
    [v11 doubleValue];
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v12 * 1000.0));

    if (v13) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v13, @"meanPing");
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v1 pingCount]);
    if (v14) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v14, @"pingCount");
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v1 unacknowledgedPingCount]);
    if (v15) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v15, @"unacknowledgedPingCount");
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v1 providerStyle]);
    if (v16) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v16, @"provider");
    }

    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v1 policyId]);
    if (v17) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v17, @"policyId");
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v1 tcpInfoMetricsByInterfaceName]);
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472LL;
    v72[2] = sub_1000BA394;
    v72[3] = &unk_1004F3910;
    __int128 v19 = v2;
    __int128 v73 = v19;
    [v18 enumerateKeysAndObjectsUsingBlock:v72];

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v1 subflowCount]);
    if (v20) {
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v20, @"subflowCount");
    }

    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v1 connectedSubflowCount]);
    if (v21) {
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v21, @"connectedSubflowCount");
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v1 primarySubflowInterfaceName]);
    if (v22) {
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v22, @"primarySubflowInterfaceName");
    }

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v1 subflowSwitchCounts]);
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472LL;
    v70[2] = sub_1000BA90C;
    v70[3] = &unk_1004F56B8;
    __int16 v24 = v19;
    id v71 = v24;
    [v23 enumerateKeysAndObjectsUsingBlock:v70];

    char v25 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionMethod]);
    if (v25)
    {
      id v65 = v25;
      int v26 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionMethod",  v25);
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v26);

      id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionMethodHistory]);
      -[NSMutableArray addObjectsFromArray:](v27, "addObjectsFromArray:", v28);

      if ((unint64_t)-[NSMutableArray count](v27, "count") >= 2)
      {
        do
        {
          unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v27, "objectAtIndex:", 0LL));
          char v30 = (void *)objc_claimAutoreleasedReturnValue([v29 stringByAppendingString:@"To"]);

          id v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v27, "objectAtIndex:", 1LL));
          double v32 = (void *)objc_claimAutoreleasedReturnValue([v30 stringByAppendingString:v31]);

          -[NSMutableArray removeObjectAtIndex:](v27, "removeObjectAtIndex:", 0LL);
          uint64_t v33 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionFallbackFrom",  v32);
          -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v33);
        }

        while ((unint64_t)-[NSMutableArray count](v27, "count") > 1);
      }

      char v25 = v65;
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionEdgeID]);
    uint64_t v35 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionEdgeId",  v34);
    -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v35);

    id v36 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionEdgeType]);
    uint64_t v37 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionEdgeType",  v36);
    -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v37);

    id v38 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionFallbackReason]);
    if (v38) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v38, @"NSPConnectionFallbackReason");
    }

    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionDelay]);
    if (v39) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v39, @"TuscanyConnectionDelay");
    }

    id v40 = (void *)objc_claimAutoreleasedReturnValue([v1 firstTxByteDelay]);
    if (v40) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v40, @"TuscanyFirstTxByteDelay");
    }

    id v41 = objc_alloc(&OBJC_CLASS___NSString);
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v1 carrierName]);
    __int16 v43 = -[NSString initWithFormat:](v41, "initWithFormat:", @"%@.%@", @"CarrierName", v42);
    -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v43);

    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v1 signalStrengthBars]);
    if (v44) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v44, @"SignalStrengthBars");
    }

    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v1 rssi]);
    if (v45) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v45, @"RSSI");
    }

    id v46 = (void *)objc_claimAutoreleasedReturnValue([v1 snr]);
    if (v46) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v46, @"SNR");
    }

    id v47 = (void *)objc_claimAutoreleasedReturnValue([v1 wifiPhyMode]);
    if (v47) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v47, @"WiFiPhyMode");
    }

    __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v1 wifiChannelInfo]);
    if (v48) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v48, @"WiFiChannelInfo");
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue([v1 isCaptive]);
    if (v49) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v49, @"Captive");
    }

    id v50 = (void *)objc_claimAutoreleasedReturnValue([v1 dnsResolutionTime]);
    if (v50) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v50, @"dnsResolutionTime");
    }

    __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionStartTimeToDNSResolutionTimeMsec]);
    if (v51) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v51, @"startToDNSResolution");
    }

    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionEstablishmentTimeMsec]);
    if (v52) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v52, @"connectionEstablishmentTime");
    }

    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionStartTimeToConnectionEstablishmentTimeMsec]);
    if (v53) {
      -[NSMutableDictionary setObject:forKey:]( v24,  "setObject:forKey:",  v53,  @"connectionStartToEstablishmentTime");
    }

    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v1 tlsHandshakeTimeMsec]);
    if (v54) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v54, @"tlsHandshakeTime");
    }

    __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionStartTimeToTLSHandshakeTimeMsec]);
    if (v55) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v55, @"connectionStartToTLSHandshake");
    }

    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v1 tlsVersion]);
    if (v56) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v56, @"tlsVersion");
    }

    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v1 simSubscriptions]);
    if (v57) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v57, @"simSubscriptions");
    }

    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v1 flowNetworkInterfaceType]);
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472LL;
    v68[2] = sub_1000BA99C;
    v68[3] = &unk_1004FBB00;
    id v59 = v24;
    uint64_t v69 = v59;
    [v58 enumerateKeysAndObjectsUsingBlock:v68];

    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v1 symptomsBasedNetworkQuality]);
    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472LL;
    v66[2] = sub_1000BAA34;
    v66[3] = &unk_1004FBB00;
    id v61 = v59;
    uint64_t v67 = v61;
    [v60 enumerateKeysAndObjectsUsingBlock:v66];

    uint64_t v62 = v67;
    unsigned int v63 = v61;
  }

  else
  {
    unsigned int v63 = (NSMutableDictionary *)&__NSDictionary0__struct;
  }

  return v63;
}

void sub_1000BA394(uint64_t a1, void *a2, void *a3)
{
  id v51 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 rttCurrent]);
  if (v6)
  {
    double v7 = *(void **)(a1 + 32);
    uint64_t v8 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttCurrent",  v51);
    [v7 setObject:v6 forKey:v8];
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 rttSmoothed]);
  if (v9)
  {
    int v10 = *(void **)(a1 + 32);
    uint64_t v11 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttSmoothed",  v51);
    [v10 setObject:v9 forKey:v11];
  }

  double v12 = (void *)objc_claimAutoreleasedReturnValue([v5 rttVariance]);
  if (v12)
  {
    __int16 v13 = *(void **)(a1 + 32);
    id v14 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttVariance",  v51);
    [v13 setObject:v12 forKey:v14];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 rttBest]);
  if (v15)
  {
    uint64_t v16 = *(void **)(a1 + 32);
    __int128 v17 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttBest",  v51);
    [v16 setObject:v15 forKey:v17];
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v5 packetsSent]);
  if (v18)
  {
    __int128 v19 = *(void **)(a1 + 32);
    uint64_t v20 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"packetsSent",  v51);
    [v19 setObject:v18 forKey:v20];
  }

  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesSent]);
  if (v21)
  {
    uint64_t v22 = *(void **)(a1 + 32);
    __int16 v23 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesSent",  v51);
    [v22 setObject:v21 forKey:v23];
  }

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesRetransmitted]);
  if (v24)
  {
    char v25 = *(void **)(a1 + 32);
    int v26 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesRetransmitted",  v51);
    [v25 setObject:v24 forKey:v26];
  }

  id v27 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesUnacked]);
  if (v27)
  {
    __int16 v28 = *(void **)(a1 + 32);
    unsigned int v29 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesUnacked",  v51);
    [v28 setObject:v27 forKey:v29];
  }

  char v30 = (void *)objc_claimAutoreleasedReturnValue([v5 packetsReceived]);
  if (v30)
  {
    id v31 = *(void **)(a1 + 32);
    double v32 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"packetsReceived",  v51);
    [v31 setObject:v30 forKey:v32];
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesReceived]);
  if (v33)
  {
    id v34 = *(void **)(a1 + 32);
    uint64_t v35 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesReceived",  v51);
    [v34 setObject:v33 forKey:v35];
  }

  id v36 = (void *)objc_claimAutoreleasedReturnValue([v5 duplicateBytesReceived]);
  if (v36)
  {
    uint64_t v37 = *(void **)(a1 + 32);
    id v38 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"duplicateBytesReceived",  v51);
    [v37 setObject:v36 forKey:v38];
  }

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v5 outOfOrderBytesReceived]);
  if (v39)
  {
    id v40 = *(void **)(a1 + 32);
    id v41 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"outOfOrderBytesReceived",  v51);
    [v40 setObject:v39 forKey:v41];
  }

  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 sendBandwidth]);
  if (v42)
  {
    __int16 v43 = *(void **)(a1 + 32);
    __int128 v44 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"sendBandwidth",  v51);
    [v43 setObject:v42 forKey:v44];
  }

  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v5 synRetransmits]);
  if (v45)
  {
    id v46 = *(void **)(a1 + 32);
    id v47 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"synRetransmits",  v51);
    [v46 setObject:v45 forKey:v47];
  }

  __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v5 tfoSynDataAcked]);
  if (v48)
  {
    id v49 = *(void **)(a1 + 32);
    id v50 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"tfoSynDataAcked",  v51);
    [v49 setObject:v48 forKey:v50];
  }
}

void sub_1000BA90C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  if (v8)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = a2;
    double v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"subflowSwitchCount",  v6);

    [v5 setObject:v8 forKey:v7];
  }
}

void sub_1000BA99C(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    double v4 = *(void **)(a1 + 32);
    id v5 = a3;
    id v6 = a2;
    double v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@.%@",  @"InterfaceNetworkType",  v6,  v5);

    [v4 setObject:&off_100513210 forKey:v7];
  }

void sub_1000BAA34(uint64_t a1, void *a2, void *a3)
{
  double v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  double v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@.%@",  @"Symptoms",  v6,  v5);

  [v4 setObject:&off_100513210 forKey:v7];
}

NSMutableDictionary *sub_1000BAAC4(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 timeUntilOpen]);
    [v3 doubleValue];
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v4 * 1000.0));

    if (v5) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v5, @"openTime");
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v1 timeUntilFirstByteRead]);
    [v6 doubleValue];
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7 * 1000.0));

    if (v8) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v8, @"firstByteTime");
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v1 attemptCount]);
    if (v9) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v9, @"attemptCount");
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue([v1 metricsCount]);
    if (v10) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v10, @"metricsCount");
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v1 meanPing]);
    [v11 doubleValue];
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v12 * 1000.0));

    if (v13) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v13, @"meanPing");
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue([v1 pingCount]);
    if (v14) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v14, @"pingCount");
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v1 unacknowledgedPingCount]);
    if (v15) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v15, @"unacknowledgedPingCount");
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v1 providerStyle]);
    if (v16) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v16, @"provider");
    }

    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v1 policyId]);
    if (v17) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v17, @"policyId");
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v1 tcpInfoMetricsByInterfaceName]);
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472LL;
    v72[2] = sub_1000BB46C;
    v72[3] = &unk_1004F0170;
    __int128 v19 = v2;
    __int128 v73 = v19;
    [v18 enumerateKeysAndObjectsUsingBlock:v72];

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v1 subflowCount]);
    if (v20) {
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v20, @"subflowCount");
    }

    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v1 connectedSubflowCount]);
    if (v21) {
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v21, @"connectedSubflowCount");
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v1 primarySubflowInterfaceName]);
    if (v22) {
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v22, @"primarySubflowInterfaceName");
    }

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v1 subflowSwitchCounts]);
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472LL;
    v70[2] = sub_1000BB9E4;
    v70[3] = &unk_1004F56B8;
    __int16 v24 = v19;
    id v71 = v24;
    [v23 enumerateKeysAndObjectsUsingBlock:v70];

    char v25 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionMethod]);
    if (v25)
    {
      id v65 = v25;
      int v26 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionMethod",  v25);
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v26);

      id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionMethodHistory]);
      -[NSMutableArray addObjectsFromArray:](v27, "addObjectsFromArray:", v28);

      if ((unint64_t)-[NSMutableArray count](v27, "count") >= 2)
      {
        do
        {
          unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v27, "objectAtIndex:", 0LL));
          char v30 = (void *)objc_claimAutoreleasedReturnValue([v29 stringByAppendingString:@"To"]);

          id v31 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v27, "objectAtIndex:", 1LL));
          double v32 = (void *)objc_claimAutoreleasedReturnValue([v30 stringByAppendingString:v31]);

          -[NSMutableArray removeObjectAtIndex:](v27, "removeObjectAtIndex:", 0LL);
          uint64_t v33 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionFallbackFrom",  v32);
          -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v33);
        }

        while ((unint64_t)-[NSMutableArray count](v27, "count") > 1);
      }

      char v25 = v65;
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionEdgeID]);
    uint64_t v35 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionEdgeId",  v34);
    -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v35);

    id v36 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionEdgeType]);
    uint64_t v37 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"ConnectionEdgeType",  v36);
    -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v37);

    id v38 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionFallbackReason]);
    if (v38) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v38, @"NSPConnectionFallbackReason");
    }

    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionDelay]);
    if (v39) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v39, @"TuscanyConnectionDelay");
    }

    id v40 = (void *)objc_claimAutoreleasedReturnValue([v1 firstTxByteDelay]);
    if (v40) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v40, @"TuscanyFirstTxByteDelay");
    }

    id v41 = objc_alloc(&OBJC_CLASS___NSString);
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v1 carrierName]);
    __int16 v43 = -[NSString initWithFormat:](v41, "initWithFormat:", @"%@.%@", @"CarrierName", v42);
    -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", &off_100513210, v43);

    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v1 signalStrengthBars]);
    if (v44) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v44, @"SignalStrengthBars");
    }

    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v1 rssi]);
    if (v45) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v45, @"RSSI");
    }

    id v46 = (void *)objc_claimAutoreleasedReturnValue([v1 snr]);
    if (v46) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v46, @"SNR");
    }

    id v47 = (void *)objc_claimAutoreleasedReturnValue([v1 wifiPhyMode]);
    if (v47) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v47, @"WiFiPhyMode");
    }

    __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v1 wifiChannelInfo]);
    if (v48) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v48, @"WiFiChannelInfo");
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue([v1 isCaptive]);
    if (v49) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v49, @"Captive");
    }

    id v50 = (void *)objc_claimAutoreleasedReturnValue([v1 dnsResolutionTime]);
    if (v50) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v50, @"dnsResolutionTime");
    }

    id v51 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionStartTimeToDNSResolutionTimeMsec]);
    if (v51) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v51, @"startToDNSResolution");
    }

    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionEstablishmentTimeMsec]);
    if (v52) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v52, @"connectionEstablishmentTime");
    }

    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionStartTimeToConnectionEstablishmentTimeMsec]);
    if (v53) {
      -[NSMutableDictionary setObject:forKey:]( v24,  "setObject:forKey:",  v53,  @"connectionStartToEstablishmentTime");
    }

    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v1 tlsHandshakeTimeMsec]);
    if (v54) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v54, @"tlsHandshakeTime");
    }

    __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v1 connectionStartTimeToTLSHandshakeTimeMsec]);
    if (v55) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v55, @"connectionStartToTLSHandshake");
    }

    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v1 tlsVersion]);
    if (v56) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v56, @"tlsVersion");
    }

    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v1 simSubscriptions]);
    if (v57) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v57, @"simSubscriptions");
    }

    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v1 flowNetworkInterfaceType]);
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472LL;
    v68[2] = sub_1000BBA74;
    v68[3] = &unk_1004FBB00;
    id v59 = v24;
    uint64_t v69 = v59;
    [v58 enumerateKeysAndObjectsUsingBlock:v68];

    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v1 symptomsBasedNetworkQuality]);
    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472LL;
    v66[2] = sub_1000BBB0C;
    v66[3] = &unk_1004FBB00;
    id v61 = v59;
    uint64_t v67 = v61;
    [v60 enumerateKeysAndObjectsUsingBlock:v66];

    uint64_t v62 = v67;
    unsigned int v63 = v61;
  }

  else
  {
    unsigned int v63 = (NSMutableDictionary *)&__NSDictionary0__struct;
  }

  return v63;
}

void sub_1000BB46C(uint64_t a1, void *a2, void *a3)
{
  id v51 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 rttCurrent]);
  if (v6)
  {
    double v7 = *(void **)(a1 + 32);
    id v8 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttCurrent",  v51);
    [v7 setObject:v6 forKey:v8];
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 rttSmoothed]);
  if (v9)
  {
    int v10 = *(void **)(a1 + 32);
    uint64_t v11 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttSmoothed",  v51);
    [v10 setObject:v9 forKey:v11];
  }

  double v12 = (void *)objc_claimAutoreleasedReturnValue([v5 rttVariance]);
  if (v12)
  {
    __int16 v13 = *(void **)(a1 + 32);
    id v14 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttVariance",  v51);
    [v13 setObject:v12 forKey:v14];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 rttBest]);
  if (v15)
  {
    uint64_t v16 = *(void **)(a1 + 32);
    __int128 v17 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"rttBest",  v51);
    [v16 setObject:v15 forKey:v17];
  }

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v5 packetsSent]);
  if (v18)
  {
    __int128 v19 = *(void **)(a1 + 32);
    uint64_t v20 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"packetsSent",  v51);
    [v19 setObject:v18 forKey:v20];
  }

  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesSent]);
  if (v21)
  {
    uint64_t v22 = *(void **)(a1 + 32);
    __int16 v23 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesSent",  v51);
    [v22 setObject:v21 forKey:v23];
  }

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesRetransmitted]);
  if (v24)
  {
    char v25 = *(void **)(a1 + 32);
    int v26 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesRetransmitted",  v51);
    [v25 setObject:v24 forKey:v26];
  }

  id v27 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesUnacked]);
  if (v27)
  {
    __int16 v28 = *(void **)(a1 + 32);
    unsigned int v29 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesUnacked",  v51);
    [v28 setObject:v27 forKey:v29];
  }

  char v30 = (void *)objc_claimAutoreleasedReturnValue([v5 packetsReceived]);
  if (v30)
  {
    id v31 = *(void **)(a1 + 32);
    double v32 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"packetsReceived",  v51);
    [v31 setObject:v30 forKey:v32];
  }

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesReceived]);
  if (v33)
  {
    id v34 = *(void **)(a1 + 32);
    uint64_t v35 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"bytesReceived",  v51);
    [v34 setObject:v33 forKey:v35];
  }

  id v36 = (void *)objc_claimAutoreleasedReturnValue([v5 duplicateBytesReceived]);
  if (v36)
  {
    uint64_t v37 = *(void **)(a1 + 32);
    id v38 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"duplicateBytesReceived",  v51);
    [v37 setObject:v36 forKey:v38];
  }

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v5 outOfOrderBytesReceived]);
  if (v39)
  {
    id v40 = *(void **)(a1 + 32);
    id v41 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"outOfOrderBytesReceived",  v51);
    [v40 setObject:v39 forKey:v41];
  }

  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 sendBandwidth]);
  if (v42)
  {
    __int16 v43 = *(void **)(a1 + 32);
    __int128 v44 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"sendBandwidth",  v51);
    [v43 setObject:v42 forKey:v44];
  }

  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v5 synRetransmits]);
  if (v45)
  {
    id v46 = *(void **)(a1 + 32);
    id v47 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"synRetransmits",  v51);
    [v46 setObject:v45 forKey:v47];
  }

  __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v5 tfoSynDataAcked]);
  if (v48)
  {
    id v49 = *(void **)(a1 + 32);
    id v50 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"tfoSynDataAcked",  v51);
    [v49 setObject:v48 forKey:v50];
  }
}

void sub_1000BB9E4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  if (v8)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = a2;
    double v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@",  @"subflowSwitchCount",  v6);

    [v5 setObject:v8 forKey:v7];
  }
}

void sub_1000BBA74(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    double v4 = *(void **)(a1 + 32);
    id v5 = a3;
    id v6 = a2;
    double v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@.%@",  @"InterfaceNetworkType",  v6,  v5);

    [v4 setObject:&off_100513210 forKey:v7];
  }

void sub_1000BBB0C(uint64_t a1, void *a2, void *a3)
{
  double v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  double v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@.%@.%@",  @"Symptoms",  v6,  v5);

  [v4 setObject:&off_100513210 forKey:v7];
}

void sub_1000BC46C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained speechCapturingDidRecordPCMAudioData:*(void *)(a1 + 40)];
}

uint64_t sub_1000BC4AC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  id v9 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v13 = *a2;
    int v16 = 136315650;
    __int128 v17 = "-[ADSpeechCompressor addAudioSampleData:]_block_invoke_2";
    __int16 v18 = 1024;
    unsigned int v19 = v13;
    __int16 v20 = 1024;
    unsigned int v21 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s Got asked for %u packets, have %u",  (uint8_t *)&v16,  0x18u);
  }

  if (*(_DWORD *)a3 == 1)
  {
    if (!a4) {
      goto LABEL_5;
    }
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    [v14 handleFailureInMethod:*(void *)(a1 + 40) object:*(void *)(a1 + 32) file:@"ADSpeechCompressor.m" lineNumber:196 description:@"Too many buffers"];

    if (!a4) {
      goto LABEL_5;
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  [v15 handleFailureInMethod:*(void *)(a1 + 40) object:*(void *)(a1 + 32) file:@"ADSpeechCompressor.m" lineNumber:197 description:@"Cannot produce ASPD for PCM"];

LABEL_5:
  *(_DWORD *)(a3 + _Block_object_dispose((const void *)(v1 - 152), 8) = 1;
  if (v8 >= *a2)
  {
    uint64_t v11 = (char *)[*(id *)(*(void *)(a1 + 32) + 24) mutableBytes];
    uint64_t result = 0LL;
    *(void *)(a3 + memset((void *)(v1 - 204), 50, 16) = &v11[*(void *)(*(void *)(a1 + 32) + 40LL)];
    uint64_t v12 = 2 * *a2;
    *(_DWORD *)(a3 + 12) = v12;
    *(void *)(*(void *)(a1 + 32) + 40LL) += v12;
  }

  else
  {
    *a2 = 0;
    *(void *)(a3 + memset((void *)(v1 - 204), 50, 16) = 0LL;
    uint64_t result = 1836086393LL;
    *(_DWORD *)(a3 + 12) = 0;
  }

  return result;
}

uint64_t sub_1000BC694(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  unsigned int v8 = (uint64_t (**)(id, uint64_t, uint64_t, uint64_t))objc_retainBlock(a5);
  uint64_t v9 = v8[2](v8, a2, a3, a4);

  return v9;
}

void sub_1000BC6EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained speechCapturingDidRecordSpeechPackets:*(void *)(a1 + 40) atTimestamp:*(void *)(*(void *)(a1 + 32) + 32) totalPacketCount:0.0];
}

void sub_1000BC734(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained speechCapturingDidStartRecordingSuccessfully:1 error:0 withInfo:*(void *)(a1 + 40)];
}

void sub_1000BC77C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained speechCapturingDidStopRecordingWithError:0 endpointMode:2 totalPacketCount:*(void *)(*(void *)(a1 + 32) + 32) endpointerMetrics:0];
}

void sub_1000BC7CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained speechCapturingDidStopRecordingWithError:0 endpointMode:2 totalPacketCount:*(void *)(*(void *)(a1 + 32) + 32) endpointerMetrics:0];
}

id sub_1000BC81C(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 8LL), *(id *)(a1 + 40));
}

id sub_1000BE4FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1000BE504(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1[6] == 1LL)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4LL,  @"Server connection closed."));
    [v1 _finalizeDeleteAssistantHistoryWithState:3 error:v3];

    id v1 = *(void **)(a1 + 32);
  }

  if (v1[9] == 1LL)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4LL,  @"Server connection closed."));
    [v1 _finalizeDestroyAssistantWithState:3 error:v4];
  }

id sub_1000BE5C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _finalizeDestroyAssistantWithState:2 error:0];
}

void sub_1000BE5D8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1[6] == 1LL)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4LL,  @"Server connection reset."));
    [v1 _finalizeDeleteAssistantHistoryWithState:3 error:v3];

    id v1 = *(void **)(a1 + 32);
  }

  if (v1[9] == 1LL)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4LL,  @"Server connection reset."));
    [v1 _finalizeDestroyAssistantWithState:3 error:v4];
  }

void *sub_1000BE69C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[6] == 1LL)
  {
    [result _finalizeDeleteAssistantHistoryWithState:3 error:*(void *)(a1 + 40)];
    uint64_t result = *(void **)(a1 + 32);
  }

  if (result[9] == 1LL) {
    return [result _finalizeDestroyAssistantWithState:3 error:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1000BE6F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[6] == 1LL)
  {
    id v3 = (void *)v2[7];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
    LOBYTE(v3) = [v3 isEqualToString:v4];

    if ((v3 & 1) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
      if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
      {
        [*(id *)(a1 + 32) _finalizeDeleteAssistantHistoryWithState:2 error:0];
        return;
      }

      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
      if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
      {
        id v13 = *(id *)(a1 + 40);
        uint64_t v14 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
        if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0) {
          id v25 = v13;
        }
        else {
          id v25 = 0LL;
        }

        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v25 reason]);
        unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ad_error"));
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2LL,  v20,  v21));

        [*(id *)(a1 + 32) _finalizeDeleteAssistantHistoryWithState:3 error:v22];
LABEL_23:

        goto LABEL_24;
      }

      id v25 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  8LL,  @"Server response is unexpected."));
      [*(id *)(a1 + 32) _finalizeDeleteAssistantHistoryWithState:3 error:v25];
      goto LABEL_24;
    }

    uint64_t v2 = *(void **)(a1 + 32);
  }

  if (v2[9] == 1LL)
  {
    double v7 = (void *)v2[10];
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
    LODWORD(v7) = [v7 isEqualToString:v8];

    if ((_DWORD)v7)
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = objc_opt_class(&OBJC_CLASS___SAAssistantDestroyed);
      if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
      {
        [*(id *)(a1 + 32) _finalizeDestroyAssistantWithState:2 error:0];
        return;
      }

      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
      if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
      {
        id v17 = *(id *)(a1 + 40);
        uint64_t v18 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
        if ((objc_opt_isKindOfClass(v17, v18) & 1) != 0) {
          id v19 = v17;
        }
        else {
          id v19 = 0LL;
        }
        id v25 = v19;

        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v25 reason]);
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ad_error"));
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2LL,  v23,  v24));

        [*(id *)(a1 + 32) _finalizeDestroyAssistantWithState:3 error:v22];
        goto LABEL_23;
      }

      id v25 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  8LL,  @"Server response is unexpected."));
      [*(id *)(a1 + 32) _finalizeDestroyAssistantWithState:3 error:v25];
LABEL_24:
    }
  }

id sub_1000BEA0C(uint64_t a1, void *a2)
{
  return [a2 invokeWithValue:*(void *)(a1 + 32)];
}

id sub_1000BEA18(uint64_t a1, void *a2)
{
  return [a2 invokeWithValue:*(void *)(a1 + 32)];
}

void sub_1000BEA24(void *a1)
{
  uint64_t v30 = 0LL;
  id v31 = &v30;
  uint64_t v32 = 0x3032000000LL;
  uint64_t v33 = sub_1000BED48;
  id v34 = sub_1000BED58;
  id v35 = 0LL;
  id v2 = objc_alloc(&OBJC_CLASS___AFOneArgumentSafetyBlock);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_1000BED60;
  v26[3] = &unk_1004F01C0;
  id v4 = (void *)a1[5];
  uint64_t v3 = a1[6];
  __int16 v28 = &v30;
  uint64_t v29 = v3;
  v26[4] = a1[4];
  id v27 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 40LL));
  id v6 = [v2 initWithBlock:v26 defaultValue:v5];

  double v7 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
  uint64_t v8 = *(void *)(a1[4] + 8LL);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_1000BEE80;
  v24[3] = &unk_1004FD940;
  id v9 = v6;
  id v25 = v9;
  uint64_t v10 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v7,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v8,  v24,  10.0);
  uint64_t v11 = (void *)v31[5];
  void v31[5] = (uint64_t)v10;

  [(id)v31[5] start];
  uint64_t v12 = a1[4];
  uint64_t v13 = *(void *)(v12 + 72);
  if (v13 == 2)
  {
    [v9 invokeWithValue:0];
  }

  else if (v13 == 1)
  {
    [*(id *)(v12 + 88) addObject:v9];
  }

  else
  {
    *(void *)(v12 + 72) = 1LL;
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v15 = a1[4];
    uint64_t v16 = *(void **)(v15 + 88);
    *(void *)(v15 + 8_Block_object_dispose((const void *)(v1 - 152), 8) = v14;

    [*(id *)(a1[4] + 88) addObject:v9];
    id v17 = objc_alloc_init(&OBJC_CLASS___NSUUID);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v17, "UUIDString"));
    uint64_t v19 = a1[4];
    __int16 v20 = *(void **)(v19 + 80);
    *(void *)(v19 + 80) = v18;

    id v21 = objc_alloc_init(&OBJC_CLASS___SADestroyAssistant);
    [v21 setAceId:*(void *)(a1[4] + 80)];
    uint64_t v22 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = a1[4];
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v37 = "-[ADRemoraEndpointAssistantDeletionSession destroyAssistantWithCompletion:]_block_invoke_2";
      __int16 v38 = 2048;
      uint64_t v39 = v23;
      __int16 v40 = 2112;
      id v41 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s %p destroyAssistant = %@", buf, 0x20u);
    }

    [*(id *)(a1[4] + 40) sendCommand:v21 opportunistically:0];
  }

  _Block_object_dispose(&v30, 8);
}

void sub_1000BED24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1000BED48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000BED58(uint64_t a1)
{
}

void sub_1000BED60(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[7];
    int v11 = 136315906;
    uint64_t v12 = "-[ADRemoraEndpointAssistantDeletionSession destroyAssistantWithCompletion:]_block_invoke_2";
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s %p %llu finished (error = %@)",  (uint8_t *)&v11,  0x2Au);
  }

  double v7 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  if (v7)
  {
    [v7 cancel];
    uint64_t v8 = *(void *)(a1[6] + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0LL;
  }

  uint64_t v10 = a1[5];
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v3);
  }
}

void sub_1000BEE80(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 10LL));
  [v1 invokeWithValue:v2];
}

void sub_1000BEECC(void *a1)
{
  uint64_t v30 = 0LL;
  id v31 = &v30;
  uint64_t v32 = 0x3032000000LL;
  uint64_t v33 = sub_1000BED48;
  id v34 = sub_1000BED58;
  id v35 = 0LL;
  id v2 = objc_alloc(&OBJC_CLASS___AFOneArgumentSafetyBlock);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_1000BF1F0;
  v26[3] = &unk_1004F01C0;
  id v4 = (void *)a1[5];
  uint64_t v3 = a1[6];
  __int16 v28 = &v30;
  uint64_t v29 = v3;
  v26[4] = a1[4];
  id v27 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 40LL));
  id v6 = [v2 initWithBlock:v26 defaultValue:v5];

  double v7 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
  uint64_t v8 = *(void *)(a1[4] + 8LL);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_1000BF310;
  v24[3] = &unk_1004FD940;
  id v9 = v6;
  id v25 = v9;
  uint64_t v10 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v7,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v8,  v24,  10.0);
  int v11 = (void *)v31[5];
  void v31[5] = (uint64_t)v10;

  [(id)v31[5] start];
  uint64_t v12 = a1[4];
  uint64_t v13 = *(void *)(v12 + 48);
  if (v13 == 2)
  {
    [v9 invokeWithValue:0];
  }

  else if (v13 == 1)
  {
    [*(id *)(v12 + 64) addObject:v9];
  }

  else
  {
    *(void *)(v12 + 4_Block_object_dispose(va, 8) = 1LL;
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v15 = a1[4];
    uint64_t v16 = *(void **)(v15 + 64);
    *(void *)(v15 + 64) = v14;

    [*(id *)(a1[4] + 64) addObject:v9];
    __int16 v17 = objc_alloc_init(&OBJC_CLASS___NSUUID);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v17, "UUIDString"));
    uint64_t v19 = a1[4];
    __int16 v20 = *(void **)(v19 + 56);
    *(void *)(v19 + 56) = v18;

    id v21 = objc_alloc_init(&OBJC_CLASS___SADeleteAssistantHistory);
    [v21 setAceId:*(void *)(a1[4] + 56)];
    uint64_t v22 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = a1[4];
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v37 = "-[ADRemoraEndpointAssistantDeletionSession deleteAssistantHistoryWithCompletion:]_block_invoke_2";
      __int16 v38 = 2048;
      uint64_t v39 = v23;
      __int16 v40 = 2112;
      id v41 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s %p deleteAssistantHistory = %@", buf, 0x20u);
    }

    [*(id *)(a1[4] + 40) sendCommand:v21 opportunistically:0];
  }

  _Block_object_dispose(&v30, 8);
}

void sub_1000BF1CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000BF1F0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[7];
    int v11 = 136315906;
    uint64_t v12 = "-[ADRemoraEndpointAssistantDeletionSession deleteAssistantHistoryWithCompletion:]_block_invoke";
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2112;
    id v18 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s %p %llu finished (error = %@)",  (uint8_t *)&v11,  0x2Au);
  }

  double v7 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  if (v7)
  {
    [v7 cancel];
    uint64_t v8 = *(void *)(a1[6] + 8LL);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0LL;
  }

  uint64_t v10 = a1[5];
  if (v10) {
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v3);
  }
}

void sub_1000BF310(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 10LL));
  [v1 invokeWithValue:v2];
}

id sub_1000BF35C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startSession];
}

void sub_1000BF4D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000BF6B8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleHomeAnnouncementSnapshotUpdate:v3];
}

void sub_1000BFA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000BFBDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1000C047C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000C0C58(uint64_t a1, uint64_t a2)
{
  if ((AFDeviceSupportsSpokenMessages(a1, a2) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    uint64_t v6 = *(dispatch_queue_s **)(v3 + 40);
    uint64_t v5 = *(dispatch_group_s **)(v3 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000C0D78;
    v8[3] = &unk_1004FD990;
    void v8[4] = v3;
    id v9 = v4;
    dispatch_group_notify(v5, v6, v8);
  }

  else
  {
    double v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v11 = "-[AFHeadphonesAnnouncementRequestCapabilityProvider fetchAvailableAnnouncementRequestTypesWithCompletion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Announcements not supported on this device",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1000C0D78(uint64_t a1)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C0E5C;
  v10[3] = &unk_1004FD990;
  id v2 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v2;
  uint64_t v3 = objc_retainBlock(v10);
  id v4 = v3;
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5[7])
  {
    double v7 = (dispatch_queue_s *)v5[5];
    uint64_t v6 = (dispatch_group_s *)v5[6];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C0EE4;
    block[3] = &unk_1004FC838;
    id v9 = v3;
    dispatch_group_notify(v6, v7, block);
  }

  else
  {
    ((void (*)(void *))v3[2])(v3);
  }
}

void sub_1000C0E5C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _headphonesMonitor]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000C0EF0;
  v4[3] = &unk_1004F02B0;
  uint64_t v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  [v2 fetchPrivateSessionStateWithCompletion:v4];
}

uint64_t sub_1000C0EE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C0EF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  double v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C0F94;
  v10[3] = &unk_1004FBA38;
  uint64_t v13 = a2;
  void v10[4] = v6;
  id v11 = v5;
  id v12 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

uint64_t sub_1000C0F94(void *a1)
{
  id v2 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1[4] + 56LL);
    uint64_t v6 = a1[7];
    double v7 = v2;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v6));
    int v9 = 136315650;
    uint64_t v10 = "-[AFHeadphonesAnnouncementRequestCapabilityProvider fetchAvailableAnnouncementRequestTypesWithCompletion:]_block_invoke_4";
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Available announcement requests: %lu, private session state: %@",  (uint8_t *)&v9,  0x20u);
  }

  if (a1[5] || a1[7] != 1LL) {
    uint64_t v3 = *(uint64_t (**)(void))(a1[6] + 16LL);
  }
  else {
    uint64_t v3 = *(uint64_t (**)(void))(a1[6] + 16LL);
  }
  return v3();
}

void sub_1000C10D8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000C1360;
  v4[3] = &unk_1004F0288;
  void v4[4] = v1;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  [v1 _fetchPairedBluetoothDevicesFromSourceWithCompletion:v4];
}

void sub_1000C1158(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1000C12D4;
  v2[3] = &unk_1004FC160;
  id v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 fetchLocalVoiceAssetAvailabilityWithCompletion:v2];
}

uint64_t sub_1000C11C8(void *a1)
{
  id v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
    int v7 = *(unsigned __int8 *)(a1[4] + 8LL);
    int v8 = 136315650;
    int v9 = "-[AFHeadphonesAnnouncementRequestCapabilityProvider fetchEligibleAnnouncementRequestTypesWithCompletion:]_block_invoke_7";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Eligible Announcement Requests: %lu, Local Voice Asset Available: %d",  (uint8_t *)&v8,  0x1Cu);
  }

  uint64_t v3 = a1[4];
  if (*(_BYTE *)(v3 + 8)) {
    uint64_t v4 = *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
  }
  else {
    uint64_t v4 = 0LL;
  }
  *(void *)(v3 + 64) = v4;
  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_1000C12D4(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C134C;
  block[3] = &unk_1004FC188;
  void block[4] = v2;
  char v7 = a2;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_1000C134C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = *(_BYTE *)(a1 + 48);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000C1360(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C140C;
  block[3] = &unk_1004FBE80;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  __int128 v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_1000C140C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        __int128 v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1000C1544(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 72) addObject:*(void *)(a1 + 40)];
}

void sub_1000C1550(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    id v6 = "-[AFHeadphonesAnnouncementRequestCapabilityProvider _settingsConnectionDidDisconnect]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 16);
  *(void *)(v3 + memset((void *)(v1 - 204), 50, 16) = 0LL;
}

id sub_1000C160C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAudioRouteAvailabilityAndBroadcast:1];
}

id sub_1000C1618(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyObserversOfAvailableAnnouncementRequestTypes];
}

uint64_t sub_1000C1620(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000C1630(uint64_t a1)
{
}

void sub_1000C1638(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[5];
  int v5 = *(dispatch_queue_s **)(a1[4] + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C16D8;
  block[3] = &unk_1004FAFF0;
  id v8 = v3;
  id v9 = v4;
  uint64_t v10 = a1[6];
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1000C16D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
}

void sub_1000C1714(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(dispatch_queue_s **)(v2 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C1770;
  block[3] = &unk_1004FBF70;
  void block[5] = v3;
  block[6] = a2;
  void block[4] = v2;
  dispatch_async(v4, block);
}

void *sub_1000C1770(void *result)
{
  uint64_t v2 = result[5];
  uint64_t v1 = result[6];
  if (v2 != v1)
  {
    uint64_t v3 = result;
    id v4 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      int v5 = 136315650;
      id v6 = "-[AFHeadphonesAnnouncementRequestCapabilityProvider _fetchEligibleAnnouncementRequestTypesAndNotifyObservers]_block_invoke_2";
      __int16 v7 = 2048;
      uint64_t v8 = v2;
      __int16 v9 = 2048;
      uint64_t v10 = v1;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s previous announcement request eligibility: %lu, now updating to %lu",  (uint8_t *)&v5,  0x20u);
      uint64_t v1 = v3[6];
    }

    return [(id)v3[4] _notifyObserversOfEligibleAnnouncementRequestTypes:v1];
  }

  return result;
}

id sub_1000C1854(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchEligibleAnnouncementRequestTypesAndNotifyObservers];
}

void sub_1000C185C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000C18B4;
  v4[3] = &unk_1004FD0A0;
  void v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1000C18B4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v16 = "-[AFHeadphonesAnnouncementRequestCapabilityProvider notifyObserversOfAvailableAnnouncementRequestTypes]_block_invoke_2";
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Notifying observers of available announcement requests: %lu",  buf,  0x16u);
  }

  id v3 = [*(id *)(*(void *)(a1 + 32) + 72) copy];
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend( *(id *)(*((void *)&v10 + 1) + 8 * (void)v8),  "provider:availableAnnouncementRequestTypesChanged:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  (void)v10);
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }
}

void sub_1000C1A20(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 80LL);
  if (v1) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v1);
  }
}

void sub_1000C1A40(uint64_t a1)
{
}

void sub_1000C1A54(uint64_t a1)
{
}

void *sub_1000C1A84()
{
  id v4 = 0LL;
  if (!qword_100577C10)
  {
    __int128 v5 = off_1004F02D0;
    uint64_t v6 = 0LL;
    qword_100577C10 = _sl_dlopen(&v5, &v4);
  }

  unint64_t v0 = (void *)qword_100577C10;
  if (!qword_100577C10)
  {
    unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *BluetoothManagerLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"AFHeadphonesAnnouncementRequestCapabilityProvider.m",  50,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_1000C1FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000C2384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000C23AC()
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  unint64_t v0 = (id *)qword_100577C20;
  uint64_t v8 = qword_100577C20;
  if (!qword_100577C20)
  {
    uint64_t v1 = sub_1000C24A0();
    unint64_t v0 = (id *)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    v6[3] = (uint64_t)v0;
    qword_100577C20 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    id v2 = *v0;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getINSearchForMessagesIntentIdentifier(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"AFHeadphonesAnnouncementRequestCapabilityProvider.m",  33,  @"%s",  dlerror());

    __break(1u);
  }

void sub_1000C2488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_1000C24A0()
{
  id v4 = 0LL;
  if (!qword_100577C28)
  {
    __int128 v5 = off_1004F02E8;
    uint64_t v6 = 0LL;
    qword_100577C28 = _sl_dlopen(&v5, &v4);
  }

  unint64_t v0 = (void *)qword_100577C28;
  if (!qword_100577C28)
  {
    unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *IntentsLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"AFHeadphonesAnnouncementRequestCapabilityProvider.m",  32,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_1000C25A4()
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  unint64_t v0 = (id *)qword_100577C38;
  uint64_t v8 = qword_100577C38;
  if (!qword_100577C38)
  {
    uint64_t v1 = sub_1000C24A0();
    unint64_t v0 = (id *)dlsym(v1, "INSearchForNotebookItemsIntentIdentifier");
    v6[3] = (uint64_t)v0;
    qword_100577C38 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    id v2 = *v0;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getINSearchForNotebookItemsIntentIdentifier(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"AFHeadphonesAnnouncementRequestCapabilityProvider.m",  36,  @"%s",  dlerror());

    __break(1u);
  }

void sub_1000C2680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000C2698(uint64_t a1)
{
  id v1 = [objc_alloc((Class)objc_opt_class(*(void *)(a1 + 32))) _init];
  id v2 = (void *)qword_100577C00;
  qword_100577C00 = (uint64_t)v1;
}

void sub_1000C2D84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
}

void sub_1000C3DB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1000C41C0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (*(_BYTE *)(a1 + 40))
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[ADOpportuneSpeakingModuleEdgeDetector opportuneSpeakListener:didStopUnexpectly:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s OPPSPK - Listening for speech stopped unexpectedly",  (uint8_t *)&v6,  0xCu);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 112LL) = 1;
    [*(id *)(*(void *)(a1 + 32) + 120) cancel];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 120);
    *(void *)(v3 + 120) = 0LL;

    id result = [*(id *)(a1 + 32) _resetStateWithCompletion:*(void *)(*(void *)(a1 + 32) + 88)];
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[ADOpportuneSpeakingModuleEdgeDetector opportuneSpeakListener:didStopUnexpectly:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s OPPSPK - Listening for speech stopped normally",  (uint8_t *)&v6,  0xCu);
    }

    id result = [*(id *)(a1 + 32) _didStopListening];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 153LL) = 0;
  return result;
}

void sub_1000C4304(uint64_t a1)
{
  id v1 = *(_BYTE **)(a1 + 32);
  if (v1[112] || !v1[153])
  {
    id v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADOpportuneSpeakingModuleEdgeDetector opportuneSpeakListener:hasVADAvailable:withHostTime:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Has stopped listening", (uint8_t *)&v4, 0xCu);
    }
  }

  else
  {
    v1[17] = *(_BYTE *)(a1 + 44);
    *(_DWORD *)(*(void *)(a1 + 32) + 148LL) = *(_DWORD *)(a1 + 40);
    if ([*(id *)(*(void *)(a1 + 32) + 48) opportuneSpeakListeningType] == (id)1) {
      _[*(id *)(a1 + 32) _handleFrame:0];
    }
  }

void sub_1000C441C(uint64_t a1)
{
  id v1 = *(_BYTE **)(a1 + 32);
  if (v1[112] || !v1[153])
  {
    id v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADOpportuneSpeakingModuleEdgeDetector opportuneSpeakListener:hasRemoteVADAvailable:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Has stopped listening", (uint8_t *)&v4, 0xCu);
    }
  }

  else
  {
    v1[16] = *(_BYTE *)(a1 + 40);
    if (![*(id *)(*(void *)(a1 + 32) + 48) opportuneSpeakListeningType]) {
      _[*(id *)(a1 + 32) _handleFrame:1];
    }
  }

void sub_1000C4524(uint64_t a1, int a2, void *a3)
{
  int v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a3 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315650;
    __int128 v13 = "-[ADOpportuneSpeakingModuleEdgeDetector _restartAndExtendListening]_block_invoke";
    __int16 v14 = 1026;
    int v15 = a2;
    __int16 v16 = 2114;
    __int16 v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s OPPSPK - stopListenWithCompletion : %{public}d, %{public}@",  buf,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = *(dispatch_queue_s **)(v9 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C4654;
  block[3] = &unk_1004FD940;
  void block[4] = v9;
  dispatch_async(v10, block);
}

void sub_1000C4654(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 112LL) = 0;
  id v2 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakListenerOption);
  -[CSOpportuneSpeakListenerOption setDeviceId:](v2, "setDeviceId:", *(void *)(*(void *)(a1 + 32) + 128LL));
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  LODWORD(v4) = v3[34];
  [v3 _scheduleTimerForMaxDelay:v4];
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000C46F8;
  v7[3] = &unk_1004FAE50;
  void v7[4] = v5;
  [v6 startListenWithOption:v2 completion:v7];
}

void sub_1000C46F8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v17 = "-[ADOpportuneSpeakingModuleEdgeDetector _restartAndExtendListening]_block_invoke_2";
    __int16 v18 = 1026;
    int v19 = a2;
    __int16 v20 = 2114;
    id v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s OPPSPK - startListenWithOption : %{public}d, %{public}@",  buf,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v10 = *(dispatch_queue_s **)(v9 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C4850;
  block[3] = &unk_1004FC188;
  char v15 = a2;
  id v13 = v5;
  uint64_t v14 = v9;
  id v11 = v5;
  dispatch_async(v10, block);
}

id *sub_1000C4850(id *result)
{
  if (*((_BYTE *)result + 48))
  {
    if (!result[4]) {
      return (id *)_[result[5] _didStartListening];
    }
  }

  return result;
}

id sub_1000C486C(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADOpportuneSpeakingModuleEdgeDetector stopListening]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s OPPSPK - stopListening", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _stopListeningWithCompletion:0];
}

void sub_1000C4920(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 96);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C49C4;
  v10[3] = &unk_1004FBFC0;
  char v14 = a2;
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v9 = v5;
  dispatch_async(v8, v10);
}

id sub_1000C49C4(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    int v4 = *(void **)(a1 + 32);
    id v5 = v2;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v8 = 136315650;
    id v9 = "-[ADOpportuneSpeakingModuleEdgeDetector _stopListeningWithCompletion:]_block_invoke_2";
    __int16 v10 = 1026;
    int v11 = v3;
    __int16 v12 = 2114;
    id v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s OPPSPK - stopListenWithCompletion : %{public}d, %{public}@",  (uint8_t *)&v8,  0x1Cu);
  }

  return [*(id *)(a1 + 40) _resetStateWithCompletion:*(void *)(a1 + 48)];
}

id sub_1000C4ABC(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_1000C4AE4(uint64_t a1)
{
}

uint64_t sub_1000C4AEC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (result) {
    return (*(uint64_t (**)(float))(result + 16))(*(float *)(*(void *)(a1 + 32) + 148LL));
  }
  return result;
}

void sub_1000C4B14(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  int v3 = (void *)v2[6];
  if (v3)
  {
    float v4 = *(float *)(a1 + 40);
    *(_DWORD *)(*(void *)(a1 + 32) + 72LL) = (int)(float)(v4
                                                          * (float)objc_msgSend( v2,  "_framesPerSecondForOpportuneSpeakListeningType:",  objc_msgSend( v3,  "opportuneSpeakListeningType")));
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      double v6 = *(float *)(a1 + 40);
      int v8 = 136315394;
      id v9 = "-[ADOpportuneSpeakingModuleEdgeDetector updateAttendingThreshold:]_block_invoke";
      __int16 v10 = 2048;
      double v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Updated listening threshold to: %f",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      id v9 = "-[ADOpportuneSpeakingModuleEdgeDetector updateAttendingThreshold:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to update listening threshold",  (uint8_t *)&v8,  0xCu);
    }
  }

void sub_1000C4C6C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  double v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v6;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v17 = "-[ADOpportuneSpeakingModuleEdgeDetector listenForUserSpeechWithOptions:forVoice:maxDelay:stopOnDetection:execu"
          "teOnSuccess:onFail:]_block_invoke";
    __int16 v18 = 1026;
    int v19 = a2;
    __int16 v20 = 2114;
    id v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s OPPSPK - startListenWithOption : %{public}d, %{public}@",  buf,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  __int16 v10 = *(dispatch_queue_s **)(v9 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C4DC4;
  block[3] = &unk_1004FC188;
  char v15 = a2;
  id v13 = v5;
  uint64_t v14 = v9;
  id v11 = v5;
  dispatch_async(v10, block);
}

id *sub_1000C4DC4(id *result)
{
  if (*((_BYTE *)result + 48))
  {
    if (!result[4]) {
      return (id *)_[result[5] _didStartListening];
    }
  }

  return result;
}

void sub_1000C4DE0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  double v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v6;
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v17 = "-[ADOpportuneSpeakingModuleEdgeDetector listenForPauseWithOptions:forPause:maxDelay:stopOnDetection:executeOnS"
          "uccess:onFail:]_block_invoke";
    __int16 v18 = 1026;
    int v19 = a2;
    __int16 v20 = 2114;
    id v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s startListenWithOption : %{public}d, %{public}@",  buf,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  __int16 v10 = *(dispatch_queue_s **)(v9 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C4F38;
  block[3] = &unk_1004FC188;
  char v15 = a2;
  id v13 = v5;
  uint64_t v14 = v9;
  id v11 = v5;
  dispatch_async(v10, block);
}

id *sub_1000C4F38(id *result)
{
  if (*((_BYTE *)result + 48))
  {
    if (!result[4]) {
      return (id *)_[result[5] _didStartListening];
    }
  }

  return result;
}

id sub_1000C4F54(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 60LL);
    int v6 = 136315394;
    uint64_t v7 = "-[ADOpportuneSpeakingModuleEdgeDetector _scheduleTimerForMaxDelay:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s OPPSPK - TIMEOUT frame = %d",  (uint8_t *)&v6,  0x12u);
  }

  float v4 = *(void **)(a1 + 32);
  if (v4[13]) {
    return [v4 _stopListeningWithCompletion:v4[11]];
  }
  else {
    return [v4 _restartAndExtendListening];
  }
}

void sub_1000C5DE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1000C734C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1000C7E18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_1000C97F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 192))
  {
    dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    float v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
    dispatch_queue_t v5 = dispatch_queue_create("UnlockedWorkQueue", v4);

    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 192);
    *(void *)(v6 + 192) = v5;

    char v8 = AFHasUnlockedSinceBoot();
    uint64_t v2 = *(void *)(a1 + 32);
    if ((v8 & 1) == 0)
    {
      dispatch_suspend(*(dispatch_object_t *)(v2 + 192));
      *(_BYTE *)(*(void *)(a1 + 32) + 184LL) = 1;
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }

  dispatch_async(*(dispatch_queue_t *)(v2 + 192), *(dispatch_block_t *)(a1 + 40));
}

id sub_1000C9890(uint64_t a1)
{
  return [*(id *)(a1 + 32) _registerSyncCoalescedJob];
}

id sub_1000C9898(uint64_t a1)
{
  return [*(id *)(a1 + 32) _syncForReason:*(void *)(a1 + 40) withCoalescing:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1000C98A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C9900;
  block[3] = &unk_1004FD940;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_1000C9900(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 160LL) = 0;
  if ([*(id *)(*(void *)(a1 + 32) + 152) count])
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) allObjects]);
    uint64_t v2 = *(void *)(a1 + 32);
    dispatch_queue_attr_t v3 = *(void **)(v2 + 152);
    *(void *)(v2 + 152) = 0LL;

    float v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    [v4 syncAnchorKeys:0 forceReset:0 reasons:v5];
  }

void sub_1000C999C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 232LL);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADDaemon _daemonDidLaunchWithContext:]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Instance context set to %@", buf, 0x16u);
  }

  EffectiveNotification = (const char *)AFNotifyGetEffectiveNotification( AFSiriDaemonLaunchedDarwinNotification,  *(void *)(*(void *)(a1 + 32) + 232LL));
  notify_post(EffectiveNotification);
  [*(id *)(a1 + 32) _setupSessionLanguage];
  [*(id *)(a1 + 32) _setupInternal];
  [*(id *)(a1 + 32) _setupClientListener];
  [*(id *)(a1 + 32) _setupOfflineDictationStatusObserver];
  [*(id *)(a1 + 32) _setupDictationListener];
  [*(id *)(a1 + 32) _setupExternalRequestListener];
  [*(id *)(a1 + 32) _setupClientLiteListener];
  [*(id *)(a1 + 32) _setupSettingsListener];
  [*(id *)(a1 + 32) _setupRapportServices];
  [*(id *)(a1 + 32) _setupLocationService];
  [*(id *)(a1 + 32) _setupIDSServices];
  [*(id *)(a1 + 32) _setupManagedStorageListener];
  [*(id *)(a1 + 32) _setupSynapseSyncListener];
  [*(id *)(a1 + 32) _setupAnalyticsListener];
  [*(id *)(a1 + 32) _setupSiriAnalyticsListener];
  [*(id *)(a1 + 32) _setupContextListener];
  [*(id *)(a1 + 32) _setupSecurityListener];
  [*(id *)(a1 + 32) _setupAnalyticsObservationListener];
  [*(id *)(a1 + 32) _setupLocationServiceListener];
  [*(id *)(a1 + 32) _setupSyncListener];
  [*(id *)(a1 + 32) _registerForSyncNotifications];
  [*(id *)(a1 + 32) _setupTetherListener];
  [*(id *)(a1 + 32) _setupNotifyHandlers];
  [*(id *)(a1 + 32) _setupDistributedNotificationHandlers];
  [*(id *)(a1 + 32) _setupPairedSync];
  [*(id *)(a1 + 32) _setupHomeKit];
  [*(id *)(a1 + 32) _setupCloudKit];
  [*(id *)(a1 + 32) _setupMultiUserCloudSyncer];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  [v5 startAcceptingCloudSharesForMultiUserService];

  [*(id *)(a1 + 32) _setupMemoryPressureObservation];
  [*(id *)(a1 + 32) _setupWirelessCoexManagerSubscription];
  [*(id *)(a1 + 32) _setupNanoPreferences];
  [*(id *)(a1 + 32) _setupNotificationServiceListener];
  [*(id *)(a1 + 32) _setupAudioSessionAssertionAcquisitionService];
  [*(id *)(a1 + 32) _setupAudioSessionAssertionServiceListener];
  [*(id *)(a1 + 32) _setupAnnouncementSpeakingStatePublisher];
  [*(id *)(a1 + 32) _setupAccessibility];
  [*(id *)(a1 + 32) _setupPommesSearchService];
  [*(id *)(a1 + 32) _setupBGSystemTasksForASRSubscriptionFromVoice];
  [*(id *)(a1 + 32) _setupMobileGestaltNotificationHandlers];
  id v6 = [*(id *)(*(void *)(a1 + 32) + 232) isEndpoint];
  if ((v6 & 1) == 0)
  {
    if (AFProcessIsRunningAsInstance(v6, v7))
    {
      char v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = "ADRegisterXPCActivities";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Skipped register XPC activities because the process is running as an instance of a multi-instance service.",  buf,  0xCu);
      }
    }

    else
    {
      if ((sub_1001EA830() & 1) != 0)
      {
        sub_100260A3C("com.apple.siri.xpc_activity.sync.daily", XPC_ACTIVITY_CHECK_IN, &stru_1004F7E78, &stru_1004F7EB8);
      }

      else
      {
        __int16 v10 = (os_log_s *)AFSiriLogContextDaemon;
        BOOL v9 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
        if (v9)
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_RegisterDailySyncActivity";
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Skipped register XPC activitiy for daily sync because sync can never happen",  buf,  0xCu);
        }
      }

      uint64_t v11 = AFIsNano(v9);
      if ((v11 & 1) != 0 || (uint64_t v13 = AFSupportsPairedDevice(v11, v12), (_DWORD)v13)) {
        sub_100260A3C("com.apple.siri.xpc_activity.peer_fetch", XPC_ACTIVITY_CHECK_IN, &stru_1004F7ED8, &stru_1004F7F18);
      }
      if (AFIsHorseman(v13, v14)) {
        sub_100260A3C( "com.apple.siri.xpc_activity.companion_fetch",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F7F38,  &stru_1004F7F78);
      }
      sub_100260A3C( "com.apple.siri.xpc_activity.refresh_validation",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F7F98,  &stru_1004F7FD8);
      sub_100260A3C("com.apple.siri.xpc_activity.destroy", XPC_ACTIVITY_CHECK_IN, &stru_1004F7FF8, &stru_1004F8018);
      sub_100260A3C( "com.apple.siri.xpc_activity.service_maintenance",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8038,  &stru_1004F8058);
      char v15 = (void *)objc_opt_class(&OBJC_CLASS___ADDailyDeviceStatusActivity);
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_100260DA4;
      v51[3] = &unk_1004F8078;
      v51[4] = v15;
      __int16 v16 = objc_retainBlock(v51);
      __int16 v17 = (const char *)[v15 activityIdentifier];
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v15 xpcCriteria]);
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100260E00;
      __int16 v57 = &unk_1004FA030;
      id v58 = v18;
      id v19 = v18;
      __int16 v20 = objc_retainBlock(buf);
      id v21 = objc_retainBlock(v20);

      sub_100260A3C(v17, XPC_ACTIVITY_CHECK_IN, v21, v16);
      sub_100260A3C( "com.apple.siri.xpc_activity.metrics-sender",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8098,  &stru_1004F80B8);
      if (AFIsInternalInstall(v22)) {
        sub_100260A3C( "com.apple.siri.xpc_activity.internal-cleanup",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F80D8,  &stru_1004F80F8);
      }
      sub_100260A3C( "com.apple.siri.xpc_activity.cloudkitsync.weekly",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8138,  &stru_1004F8158);
      uint64_t v25 = AFDeviceSupportsSpokenMessages(v23, v24);
      if ((_DWORD)v25) {
        sub_100260A3C( "com.apple.siri.xpc_activity.announce-messages-eligibility",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8178,  &stru_1004F8198);
      }
      if (AFDeviceSupportsSpokenMessages(v25, v26)) {
        sub_100260A3C( "com.apple.siri.xpc_activity.announce-notifications-enablement",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F81B8,  &stru_1004F81D8);
      }
      sub_100260A3C( "com.apple.siri.xpc_activity.service_boot_maintenance",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F81F8,  &stru_1004F8218);
      sub_100260A3C( "com.apple.siri.xpc_activity.speech-audio-sample-delete",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8238,  &stru_1004F8258);
      sub_100260A3C( "com.apple.siri.xpc_activity.speech-audio-sampled",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8278,  &stru_1004F8298);
      uint64_t v27 = AFSupportsHALContextCollectorElection();
      if ((_DWORD)v27) {
        sub_100260A3C( "com.apple.siri.xpc_activity.context-collector-reelection",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F82B8,  &stru_1004F82D8);
      }
      char v29 = AFSupportsMultiUser(v27, v28);
      uint64_t v30 = (os_log_s *)AFSiriLogContextDaemon;
      BOOL v31 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      if ((v29 & 1) != 0)
      {
        if (v31)
        {
          *(_DWORD *)__int128 buf = 136315394;
          *(void *)&uint8_t buf[4] = "_RegisterMultiUserMetricsActivity";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "com.apple.siri.apc_activity.multi-user.metrics";
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "%s Registering %s activity", buf, 0x16u);
        }

        sub_100260A3C( "com.apple.siri.apc_activity.multi-user.metrics",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F82F8,  &stru_1004F8318);
      }

      else if (v31)
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "_RegisterMultiUserMetricsActivity";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "com.apple.siri.apc_activity.multi-user.metrics";
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s Device does not support MultiUser, skipping %s registration",  buf,  0x16u);
      }

      uint64_t v32 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "_RegisterRemoraStatusCheckActivity";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "com.apple.siri.xpc_activity.remora.status.check";
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%s Registering %s activity", buf, 0x16u);
      }

      sub_100260A3C( "com.apple.siri.xpc_activity.remora.status.check",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8338,  &stru_1004F8358);
      sub_100260A3C( "com.apple.siri.xpc_activity.siri-information-clear-cache",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8378,  &stru_1004F8398);
      sub_100260A3C( "com.apple.siri.xpc_activity.logviewer-identifier-defaults-write",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F83D8,  &stru_1004F83F8);
      if (AFDeviceSupportsSiriMUX())
      {
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
        unsigned __int8 v34 = [v33 isEndpoint];

        if ((v34 & 1) == 0) {
          sub_100260A3C( "com.apple.siri.xpc_activity.multiuser-synccontroller-periodic-refresh",  XPC_ACTIVITY_CHECK_IN,  &stru_1004F8418,  &stru_1004F8438);
        }
      }
    }
  }

  id v35 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = "-[ADDaemon _daemonDidLaunchWithContext:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s assistantd finished post launch setup",  buf,  0xCu);
  }

  dispatch_activate(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8LL));
  id v36 = +[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter");
  sub_1001EA01C();
  sub_1001EBDE4(@"assistantdDidLaunch");
  uint64_t v37 = AFBuildVersion();
  __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  __int16 v40 = v39;
  if (v38)
  {
    uint64_t v54 = @"systemBuild";
    __int16 v55 = v38;
    id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));
    [v40 logEventWithType:102 context:v41];
  }

  else
  {
    [v39 logEventWithType:102 context:0];
  }

  if (AFSupportsRemora())
  {
    if ([*(id *)(*(void *)(a1 + 32) + 232) isEndpoint])
    {
      uint64_t v52 = @"endpointUUID";
      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) endpointUUID]);
      __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v42 UUIDString]);
      uint64_t v53 = v43;
      __int128 v44 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v53,  &v52,  1LL));
    }

    else
    {
      __int16 v45 = objc_alloc_init(&OBJC_CLASS___ADRemoraCleanupManager);
      uint64_t v46 = *(void *)(a1 + 32);
      id v47 = *(void **)(v46 + 240);
      *(void *)(v46 + 240) = v45;

      __int16 v48 = objc_alloc_init(&OBJC_CLASS___ADRemoraEndpointConnectivityManager);
      __int128 v44 = 0LL;
      uint64_t v49 = *(void *)(a1 + 32);
      __int128 v42 = *(void **)(v49 + 248);
      *(void *)(v49 + 24_Block_object_dispose(va, 8) = v48;
    }
  }

  else
  {
    __int128 v44 = 0LL;
  }

  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification(DistributedCenter, AFSiriDaemonLaunchedDistributedNotification, 0LL, v44, 1u);
  qword_100577C88 = mach_absolute_time();
}

void sub_1000CA37C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  float v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    char v8 = "-[ADDaemon _daemonDidLaunchWithContext:]_block_invoke";
    __int16 v9 = 2112;
    __int16 v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1000CA494(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000CA554;
  v11[3] = &unk_1004FDA30;
  char v8 = *(dispatch_queue_s **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v15 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

uint64_t sub_1000CA554(uint64_t result)
{
  if (!*(void *)(result + 32))
  {
    uint64_t v1 = result;
    objc_storeStrong((id *)(*(void *)(result + 40) + 232LL), *(id *)(result + 48));
    return (*(uint64_t (**)(void))(*(void *)(v1 + 56) + 16LL))();
  }

  return result;
}

AFAudioSessionAssertionAcquisitionService *__cdecl sub_1000CA598(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[ADSpeechManager sharedManager](&OBJC_CLASS___ADSpeechManager, "sharedManager"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 audioSessionAssertionAcquisitionService]);

  return (AFAudioSessionAssertionAcquisitionService *)v2;
}

void sub_1000CA5D8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _sharedDataService]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000CA678;
  v4[3] = &unk_1004FD940;
  id v5 = *(id *)(a1 + 32);
  [v3 pushSharedDataToPeer:v4];
}

id sub_1000CA678(uint64_t a1)
{
  return _[*(id *)(a1 + 32) syncDidComplete];
}

id sub_1000CA6A0()
{
  return (id)qword_100577C98;
}

id sub_1000CA6AC()
{
  if (qword_100577C90 != -1) {
    dispatch_once(&qword_100577C90, &stru_1004F0530);
  }
  return (id)qword_100577C98;
}

void sub_1000CA6EC(id a1)
{
  if (qword_100577CA0 != -1) {
    dispatch_once(&qword_100577CA0, &stru_1004F0550);
  }
  qword_100577C98 = (uint64_t)objc_getClass("PSYSyncCoordinator");
  off_100572BF0 = sub_1000CA6A0;
}

void sub_1000CA748(id a1)
{
  qword_100577CA8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync", 2);
}

void sub_1000CA770(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
  id v4 = sub_1002D6D90(a3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v6 syncForReason:v5 withCoalescing:1];
}

void sub_1000CA7D0(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  xpc_type_t type = xpc_get_type(v2);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v7 = v2;
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    xpc_connection_set_target_queue(v7, v9);

    *(void *)uint64_t v11 = _NSConcreteStackBlock;
    *(void *)&v11[8] = 3221225472LL;
    *(void *)&v11[16] = sub_1000CA9A8;
    id v12 = &unk_1004FA030;
    uint64_t v13 = v7;
    id v10 = v7;
    xpc_connection_set_event_handler(v10, v11);
    xpc_connection_resume(v10);

LABEL_6:
    goto LABEL_8;
  }

  xpc_type_t v4 = type;
  id v5 = (void *)AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
  if (v4 == (xpc_type_t)&_xpc_type_error)
  {
    if (!v6) {
      goto LABEL_8;
    }
    id v10 = v5;
    *(_DWORD *)uint64_t v11 = 136315394;
    *(void *)&void v11[4] = "-[ADDaemon _setupSyncListener]_block_invoke";
    *(_WORD *)&v11[12] = 2082;
    *(void *)&v11[14] = xpc_dictionary_get_string(v2, _xpc_error_key_description);
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Sync listener error %{public}s",  v11,  0x16u);
    goto LABEL_6;
  }

  if (v6)
  {
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)&void v11[4] = "-[ADDaemon _setupSyncListener]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_ERROR,  "%s Ignoring unexpected event type on sync listener",  v11,  0xCu);
  }

void sub_1000CA9A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string(v3, "name");
    if (string)
    {
      id v9 = string;
      if (!strcmp(string, "sync_now"))
      {
        id v15 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v31 = 136315138;
          uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Received sync now notification from UEA.",  (uint8_t *)&v31,  0xCu);
        }

        __int16 v16 = xpc_dictionary_get_string(v3, "sync_reason");
        if (v16) {
          __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
        }
        else {
          __int16 v17 = 0LL;
        }
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
        [v28 syncForReason:v17 withCoalescing:0];
      }

      else
      {
        int v10 = strcmp(v9, "defrost");
        uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (!v10)
        {
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            int v31 = 136315138;
            uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Received defrost XPC message",  (uint8_t *)&v31,  0xCu);
          }

          __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
          [v18 defrost];

          uint64_t uint64 = xpc_dictionary_get_uint64(v3, "mach_time");
          unint64_t v20 = +[ADDaemon processLaunchMachTime](&OBJC_CLASS___ADDaemon, "processLaunchMachTime");
          BOOL v21 = v20 > uint64;
          unint64_t v22 = v20 - uint64;
          if (v21)
          {
            double TimeInterval = AFMachAbsoluteTimeGetTimeInterval(v22);
            uint64_t v24 = (os_log_s *)AFSiriLogContextDaemon;
            if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
              goto LABEL_32;
            }
            int v31 = 136315394;
            uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
            __int16 v33 = 2048;
            unsigned __int8 v34 = *(const char **)&TimeInterval;
            uint64_t v25 = "%s Process launched %fs after sending defrost XPC message.";
            uint64_t v26 = v24;
            uint32_t v27 = 22;
          }

          else
          {
            char v29 = (os_log_s *)AFSiriLogContextDaemon;
            if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
              goto LABEL_32;
            }
            int v31 = 136315138;
            uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
            uint64_t v25 = "%s Process launched before sending defrost XPC message.";
            uint64_t v26 = v29;
            uint32_t v27 = 12;
          }

          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, v25, (uint8_t *)&v31, v27);
          goto LABEL_32;
        }

        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v31 = 136315394;
          uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
          __int16 v33 = 2080;
          unsigned __int8 v34 = v9;
          BOOL v6 = "%s Unexpected message on sync connection %s";
          uint64_t v7 = v11;
          uint32_t v12 = 22;
LABEL_16:
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v31, v12);
        }
      }
    }

    else
    {
      id v14 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v31 = 136315138;
        uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
        BOOL v6 = "%s Unexpected nameless message on sync connection";
        uint64_t v7 = v14;
        goto LABEL_15;
      }
    }
  }

  else
  {
    id v5 = (void *)AFSiriLogContextDaemon;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = v5;
        int v31 = 136315394;
        uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
        __int16 v33 = 2080;
        unsigned __int8 v34 = xpc_dictionary_get_string(v3, _xpc_error_key_description);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Sync peer shutting down due to %s",  (uint8_t *)&v31,  0x16u);
      }

      xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
    }

    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v31 = 136315138;
      uint64_t v32 = "_ADHandleNewSyncPeer_block_invoke";
      BOOL v6 = "%s Ignoring unexpected type on sync connection";
      uint64_t v7 = (os_log_s *)v5;
LABEL_15:
      uint32_t v12 = 12;
      goto LABEL_16;
    }
  }

void sub_1000CAE08(id a1, __CFString *a2, __CFDictionary *a3)
{
  if (a2)
  {
    if (CFStringCompare(a2, @"UserAssignedDeviceName", 0LL) == kCFCompareEqualTo)
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v3 postNotificationName:@"ADSharedDataDidChangeNotification" object:0];
    }
  }

void sub_1000CAE74(uint64_t a1, void *a2)
{
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  if (string)
  {
    id v5 = string;
    BOOL v6 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", string);
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v22 = 136315394;
      uint64_t v23 = "-[ADDaemon _setupDistributedNotificationHandlers]_block_invoke";
      __int16 v24 = 2080;
      uint64_t v25 = (NSString *)v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Got xpc event for distributed notification %s",  (uint8_t *)&v22,  0x16u);
    }

    if (sub_1002D6A88(v6))
    {
      id v8 = sub_1002D6D90(v6);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      xpc_object_t dictionary = xpc_dictionary_get_dictionary(v3, "UserInfo");
      uint64_t v11 = (NSString *)objc_claimAutoreleasedReturnValue(dictionary);
      uint32_t v12 = v11;
      if (v11)
      {
        uint64_t v13 = xpc_copy_description(v11);
        if (v13)
        {
          id v14 = v13;
          id v15 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            int v22 = 136315394;
            uint64_t v23 = "-[ADDaemon _setupDistributedNotificationHandlers]_block_invoke";
            __int16 v24 = 2080;
            uint64_t v25 = (NSString *)v14;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s Notification payload: %s",  (uint8_t *)&v22,  0x16u);
          }

          free(v14);
        }

        if (sub_1002D6E08(v9, v12, v6)) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }

      if (!sub_1002D6E08(v9, 0LL, v6))
      {
LABEL_24:
        [*(id *)(a1 + 32) _syncForReason:v9 withCoalescing:1];
        goto LABEL_25;
      }

      uint32_t v12 = 0LL;
    }

    else
    {
      if (![AFSiriDaemonLaunchedDistributedNotification isEqualToString:v6]
        || ([*(id *)(*(void *)(a1 + 32) + 232) isEndpoint] & 1) != 0)
      {
        goto LABEL_27;
      }

      xpc_object_t v16 = xpc_dictionary_get_dictionary(v3, "UserInfo");
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v9 = v17;
      if (!v17
        || xpc_get_type(v17) != (xpc_type_t)&_xpc_type_dictionary
        || (__int16 v18 = xpc_dictionary_get_string(v9, "endpointUUID")) == 0LL)
      {
LABEL_26:

LABEL_27:
        goto LABEL_28;
      }

      uint32_t v12 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v18);
      id v19 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v12);
      if (v19)
      {
        unint64_t v20 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v22 = 136315395;
          uint64_t v23 = "-[ADDaemon _setupDistributedNotificationHandlers]_block_invoke";
          __int16 v24 = 2113;
          uint64_t v25 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Received remora launch notification for endpoint:%{private}@",  (uint8_t *)&v22,  0x16u);
        }

        BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(+[SHAFHomeHubManager sharedManager](&OBJC_CLASS___SHAFHomeHubManager, "sharedManager"));
        [v21 handleRemoraLaunchForEndpointUUID:v19];
      }
    }

void sub_1000CB1A4(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  if (string)
  {
    xpc_type_t v4 = string;
    id v5 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", string);
    BOOL v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v33 = 136315394;
      unsigned __int8 v34 = "-[ADDaemon _setupNotifyHandlers]_block_invoke";
      __int16 v35 = 2080;
      id v36 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Got xpc event for notification %s",  (uint8_t *)&v33,  0x16u);
    }

    if (strcmp("com.apple.MobileAsset.VoiceServices.VoiceResources.new-asset-installed", v4)
      && strcmp("com.apple.voiceservices.notification.voice-update", v4))
    {
      if (!strcmp("com.apple.voicetrigger.EarlyDetect", v4))
      {
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        __int16 v18 = -[AFSpeechRequestOptions initWithActivationEvent:]( objc_alloc(&OBJC_CLASS___AFSpeechRequestOptions),  "initWithActivationEvent:",  8LL);
        [v17 preheatWithStyle:2 forOptions:v18 completion:0];
      }

      else
      {
        if (strcmp("com.apple.siri.preheat.quiet", v4))
        {
          uint64_t v7 = strcmp("com.apple.nanoregistry.devicedidpair", v4);
          if (!(_DWORD)v7)
          {
            uint64_t v19 = AFIsNano(v7);
            if ((v19 & 1) != 0 || AFSupportsPairedDevice(v19, v20))
            {
              BOOL v21 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommandCenter sharedCommandCenter]( &OBJC_CLASS___ADCommandCenter,  "sharedCommandCenter"));
              [v21 updateSharedDataFromPeerUseCache:1 completion:0];
            }

            int v22 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
            unsigned int v23 = [v22 assistantIsEnabled];

            if (!v23) {
              goto LABEL_34;
            }
            __int16 v24 = *(void **)(a1 + 32);
            int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
            uint64_t v11 = v24;
            uint32_t v12 = v10;
            uint64_t v13 = 0LL;
            goto LABEL_24;
          }

          if (!strcmp("com.apple.mobile.keybagd.first_unlock", v4))
          {
            uint64_t v25 = *(void *)(a1 + 32);
            if (*(_BYTE *)(v25 + 184) && *(void *)(v25 + 192))
            {
              *(_BYTE *)(v25 + 184) = 0;
              dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 192LL));
            }

            if (off_100575CB8())
            {
              id v26 = sub_1001EBCFC(@"sync_flag");
              uint32_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
              if (!v27
                || (v28 = v27, [v27 timeIntervalSinceNow], double v30 = v29, v28, v30 < -172800.0))
              {
                [*(id *)(a1 + 32) _syncForReason:@"Safety net" withCoalescing:0];
              }
            }

            __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
            [v17 postNotificationName:@"ADFirstUnlockNotification" object:0];
            goto LABEL_33;
          }

          if (!strcmp("com.apple.assistant.sync_homekit_urgent", v4))
          {
            *(void *)(*(void *)(a1 + 32) + 144LL) = mach_absolute_time();
            dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8LL), &stru_1004F0448);
            goto LABEL_34;
          }

          if (sub_1002D6A88(v5))
          {
            id v8 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v4);
            id v9 = sub_1002D6D90(v8);
            int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

            if (!sub_1002D6E08(v10, 0LL, v5))
            {
              uint64_t v11 = *(void **)(a1 + 32);
              uint32_t v12 = v10;
              uint64_t v13 = 1LL;
LABEL_24:
              [v11 _syncForReason:v12 withCoalescing:v13];
            }

LABEL_33:
      goto LABEL_34;
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    int v10 = v14;
    uint64_t v15 = *(void *)(a1 + 32);
    xpc_object_t v16 = @"ADVoiceAssetsUpdatedNotification";
    goto LABEL_15;
  }
}

  return v21;
}
}

void sub_1000CB6D0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v1 syncAnchorKeys:0 forceReset:0 reasons:&off_100512FD0];
}

uint64_t sub_1000CB714(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000CB724(uint64_t a1)
{
}

void sub_1000CB72C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 40);
    int v6 = 136315394;
    uint64_t v7 = "-[ADDaemon _audioSessionAssertionServiceListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Audio Session Assertion Service Connection Invalidated (pid=%d)",  (uint8_t *)&v6,  0x12u);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) invalidate];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;
}

void sub_1000CB808(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 40);
    int v6 = 136315394;
    uint64_t v7 = "-[ADDaemon _audioSessionAssertionServiceListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Audio Session Assertion Service Connection Interrupted (pid=%d)",  (uint8_t *)&v6,  0x12u);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) invalidate];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;
}

void sub_1000CB8E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADDaemon _notificationServiceListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Notification Service Connection Invalidated (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_1000CB99C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADDaemon _notificationServiceListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Notification Service Connection Interrupted (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_1000CBA54(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADDaemon _securityListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Security Connection Invalidated (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_1000CBB0C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADDaemon _securityListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Security Connection Interrupted (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_1000CBBC4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v5 = 136315394;
    __int16 v6 = "-[ADDaemon _analyticsObservationListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Analytics Observation Connection Invalidated (pid=%d)",  (uint8_t *)&v5,  0x12u);
  }

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  [v4 setObserverConnection:0];
}

void sub_1000CBC9C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADDaemon _analyticsObservationListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Analytics Observation Connection Interrupted (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_1000CBD58(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 40);
    int v6 = 136315394;
    int v7 = "-[ADDaemon _analyticsListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Analytics Connection Invalidated (pid=%d)",  (uint8_t *)&v6,  0x12u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
    [v5 connectionDisconnected:WeakRetained];
  }
}

void sub_1000CBE44(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v5 = *(_DWORD *)(a1 + 40);
    int v6 = 136315394;
    int v7 = "-[ADDaemon _analyticsListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Analytics Connection Interrupted (pid=%d)",  (uint8_t *)&v6,  0x12u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
    [v4 connectionInterrupted:WeakRetained];
  }
}

void sub_1000CBF34(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v5 = 136315650;
    int v6 = "-[ADDaemon _managedStorageListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s %@ Managed Storage Connection Disconnected (pid=%d)",  (uint8_t *)&v5,  0x1Cu);
  }

void sub_1000CBFFC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADDaemon _synapseSyncListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Synapse Sync Connection Disconnected (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_1000CC0B4(id a1)
{
  byte_1005780A0 = AFFetchDeviceCarryStatus(a1);
}

id sub_1000CC0D0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 40);
    int v6 = 136315650;
    int v7 = "-[ADDaemon _settingsListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s %@ Settings Connection Disconnected (pid=%d)",  (uint8_t *)&v6,  0x1Cu);
  }

  return [*(id *)(a1 + 32) connectionDisconnected];
}

void sub_1000CC1A0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)__int128 buf = 136315906;
    id v14 = "-[ADDaemon _dictationListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    __int16 v17 = 1024;
    int v18 = v4;
    __int16 v19 = 2112;
    uint64_t v20 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s %@ Dictation Connection Disconnected (pid=%d])  %@",  buf,  0x26u);
  }

  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v5 removeDelegate:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) connectionDisconnected];
  sub_1001EBDE4(@"session_did_finish_timestamp");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  [v6 endEventsGrouping];

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADQueueMonitor sharedMonitor](&OBJC_CLASS___ADQueueMonitor, "sharedMonitor"));
  [v7 endMonitoring];

  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(a1 + 48);
  __int16 v10 = *(dispatch_queue_s **)(v8 + 200);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000CC330;
  v11[3] = &unk_1004FD968;
  void v11[4] = v8;
  id v12 = v9;
  dispatch_async(v10, v11);
}

id sub_1000CC330(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 208) removeObject:*(void *)(a1 + 40)];
}

void sub_1000CC33C(id a1)
{
}

void sub_1000CC34C(uint64_t a1)
{
  DistributedCenter = CFNotificationCenterGetDistributedCenter();
  CFNotificationCenterPostNotification( DistributedCenter,  AFSiriStartUIRequestNotification,  0LL,  *(CFDictionaryRef *)(a1 + 32),  1u);
}

void sub_1000CC384(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(a1 + 56);
    int v9 = 136315650;
    __int16 v10 = "-[ADDaemon _clientListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v3;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s %@ Client Connection Disconnected (pid=%d)",  (uint8_t *)&v9,  0x1Cu);
  }

  [*(id *)(a1 + 32) connectionDisconnected];
  [*(id *)(a1 + 40) removeDelegate:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) clientDisconnected:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) dismissedAllVisibleAssistantUIForReason:@"ADLocationInUseEndedReasonClientConnectionInvalidated"];
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  [v5 endEventsGrouping];

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADQueueMonitor sharedMonitor](&OBJC_CLASS___ADQueueMonitor, "sharedMonitor"));
  [v6 endMonitoring];

  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0LL;
}

void sub_1000CC4C0(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  string = xpc_dictionary_get_string(v2, _xpc_event_key_name);
  if (string)
  {
    int v4 = string;
    int v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      __int16 v10 = "-[ADDaemon _setupRapportServices]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Rapport requested launch",  (uint8_t *)&v9,  0xCu);
    }

    if (!strcmp(v4, "WakeUpRequest")) {
      id v6 = +[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter");
    }
    if (xpc_dictionary_get_BOOL(v2, "replyRequired"))
    {
      xpc_object_t reply = xpc_dictionary_create_reply(v2);
      uint64_t v8 = reply;
      if (reply) {
        xpc_dictionary_send_reply(reply);
      }
    }
  }
}

void sub_1000CC5EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void sub_1000CC664(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v1 systemUptime];
  qword_100577C78 = v2;

  qword_100577C80 = mach_absolute_time();
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___ADDaemon);
  int v4 = (void *)qword_100577C68;
  qword_100577C68 = (uint64_t)v3;
}

void sub_1000CD898(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADSharedDataService _handleExecuteRequestOnRemoteWatch:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s error executing remote command: %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0LL, v6);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADSharedDataService _handleExecuteRequestOnRemoteWatch:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s got command response: %@",  (uint8_t *)&v11,  0x16u);
    }

    int v9 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceExecuteOnRemoteResponse);
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v5 plistData]);
    -[_ADPBDeviceExecuteOnRemoteResponse setContent:](v9, "setContent:", v10);

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1000CDA3C(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if (!v5)
  {
    id v6 = v11;
    uint64_t v7 = v6;
    if (v6 && [v6 hasContent])
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 content]);
      int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithPlistData:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithPlistData:",  v8));

      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      goto LABEL_8;
    }
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v5);
  }
LABEL_8:
}

void sub_1000CDB18(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceStartRemoteRequest);
  -[_ADPBDeviceStartRemoteRequest _ad_setRequestInfo:](v2, "_ad_setRequestInfo:", *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 16LL);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS____ADPBDeviceStartRemoteResponse);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000CDBD4;
  v5[3] = &unk_1004F0578;
  id v6 = *(id *)(a1 + 48);
  [v3 sendRequest:v2 responseClass:v4 overrideRequireConnectedPeer:1 allowCloud:0 completion:v5];
}

void sub_1000CDBD4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!v5)
  {
    else {
      id v5 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1200LL));
    }
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_1000CDC58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  [WeakRetained sharedDataConnection:*(void *)(a1 + 32) didUpdateSharedData:*(void *)(*(void *)(a1 + 32) + 32)];
}

void sub_1000CDCA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CDD3C;
  block[3] = &unk_1004FD9E0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1000CDD3C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v9 = v2;
  if (v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_ad_data"));
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 32);
    *(void *)(v4 + 32) = v3;

    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      id v7 = *(void (**)(void))(v6 + 16);
LABEL_6:
      v7();
    }
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8)
    {
      id v7 = *(void (**)(void))(v8 + 16);
      goto LABEL_6;
    }
  }
}

uint64_t (**sub_1000CDDB8(uint64_t a1))(void)
{
  if (!*(_BYTE *)(a1 + 48) || !*(void *)(*(void *)(a1 + 32) + 32LL)) {
    return (uint64_t (**)(void))_[*(id *)(a1 + 32) _requestDataRemotelyAllowingCloudMessaging:*(unsigned __int8 *)(a1 + 49) completion:*(void *)(a1 + 40)];
  }
  uint64_t result = *(uint64_t (***)(void))(a1 + 40);
  if (result) {
    return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_1000CDDF0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) peerExportsSharedData])
  {
    id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
    id v4 = 0LL;
    [v2 deviceIsNearby:&v4];
    id v3 = v4;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_1000CDE88(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000CDE98(uint64_t a1)
{
}

void sub_1000CDEA0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) peerBuildVersion]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CDEDC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) peerType]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000CDF18(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32))
  {
    id v9 = v5;
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceStartRemoteResponse);
    -[_ADPBDeviceStartRemoteResponse setSuccess:](v6, "setSuccess:", a2);
    uint64_t v7 = *(void *)(a1 + 32);
    if ((_DWORD)a2)
    {
      (*(void (**)(uint64_t, _ADPBDeviceStartRemoteResponse *, void))(v7 + 16))(v7, v6, 0LL);
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  1200LL,  0LL,  v9));
      (*(void (**)(uint64_t, _ADPBDeviceStartRemoteResponse *, void *))(v7 + 16))(v7, v6, v8);
    }

    id v5 = v9;
  }
}

void sub_1000CDFD0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[3];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (!v3)
  {
    if (v5)
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v12 = "-[ADSharedDataService _getDataWithPBCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Getting Peer Data from ADCommandCenter",  buf,  0xCu);
      uint64_t v2 = *(void **)(a1 + 32);
    }

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000CE154;
    v9[3] = &unk_1004F7558;
    id v8 = *(id *)(a1 + 40);
    void v9[4] = *(void *)(a1 + 32);
    id v10 = v8;
    [v2 _getDataWithCompletion:v9];
    uint64_t v7 = v10;
    goto LABEL_9;
  }

  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v12 = "-[ADSharedDataService _getDataWithPBCompletion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Already have Peer Data returning now!",  buf,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _setDataFromSharedData:*(void *)(*(void *)(a1 + 32) + 24)]);
    (*(void (**)(uint64_t, void *, void))(v6 + 16))(v6, v7, 0LL);
LABEL_9:
  }

void sub_1000CE154(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    id v8 = "-[ADSharedDataService _getDataWithPBCompletion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Sending ADCC Peer Data now!",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _setDataFromSharedData:v3]);
    (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
  }
}

id sub_1000CE244(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pushSharedDataToPeerFromNotification:*(void *)(a1 + 40) completion:0];
}

void sub_1000CE254(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CE2E8;
  block[3] = &unk_1004FD9E0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1000CE2E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

void sub_1000CE32C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000CE3E0;
  v7[3] = &unk_1004FDA30;
  id v8 = v4;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1000CE3E0(uint64_t a1)
{
  uint64_t v2 = AFIsNano(a1);
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = AFIsHorseman(v2, v3);
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = sub_1001EA6E0(v4);
      _AFPreferencesSetLastPushedCensorSpeechSetting(v5);
    }
  }

  id v6 = *(void **)(a1 + 32);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"ADSharedDataDidChangePreviousLanguageCodeKey"]);
    id v8 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    if (v7 == v9) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = v7;
    }
    [v8 setPreviousLanguageCode:v10];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:@"ADSharedDataDidChangePreviousOutputVoiceKey"]);
    uint64_t v12 = *(void **)(a1 + 40);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    if (v11 == v13) {
      id v14 = 0LL;
    }
    else {
      id v14 = v11;
    }
    [v12 setPreviousOutputVoice:v14];

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"ADSharedDataDidChangePeerSetKey"]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    if (v15 == v16) {
      __int16 v17 = 0LL;
    }
    else {
      __int16 v17 = v15;
    }
    id v22 = v17;
  }

  else
  {
    id v22 = 0LL;
  }

  id v18 = [*(id *)(*(void *)(a1 + 48) + 16) hasPeer];
  if ((_DWORD)v18) {
    id v18 = [*(id *)(a1 + 48) _sendData:*(void *)(a1 + 40)];
  }
  if (sub_1001EA800((uint64_t)v18, v19))
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance"));
    [v20 sendSharedData:*(void *)(a1 + 40) toPeers:v22];
  }

  uint64_t v21 = *(void *)(a1 + 56);
  if (v21) {
    (*(void (**)(void))(v21 + 16))();
  }
}

uint64_t sub_1000CE55C(uint64_t a1)
{
  uint64_t result = AFIsNano(a1);
  if ((result & 1) == 0)
  {
    uint64_t result = AFIsHorseman(result, v3);
    if ((result & 1) == 0)
    {
      uint64_t PushedCensorSpeechSetting = _AFPreferencesLastPushedCensorSpeechSetting();
      int v5 = PushedCensorSpeechSetting;
      uint64_t result = sub_1001EA6E0(PushedCensorSpeechSetting);
      if (v5 != (_DWORD)result)
      {
        id v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v7 = 136315138;
          id v8 = "-[ADSharedDataService effectiveSettingsChanged]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Censor setting changed, pushing to peer.",  (uint8_t *)&v7,  0xCu);
        }

        return (uint64_t)[*(id *)(a1 + 32) _pushSharedDataToPeerFromNotification:0 completion:0];
      }
    }
  }

  return result;
}

id sub_1000CE638(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pushSharedDataToPeerFromNotification:0 completion:*(void *)(a1 + 40)];
}

LABEL_54:
    id v9 = 0LL;
    goto LABEL_55;
  }

  unsigned int v23 = v10;

  __int16 v24 = 1;
  uint64_t v60 = v53;
  uint64_t v25 = @"defaultSessionHasResults";
  uint64_t v2 = v55;
LABEL_28:
  if (v54 == v61 || [v23 sessionType] == preferredSessionType || v2->_timerFiredOnce)
  {
    id v50 = v25;
    id v51 = v24;
    uint64_t v52 = v10;
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 dequeueResultObjects]);
    uint32_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 firstObject]);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 refId]);

    -[ADSessionManager _cancelOtherSessionRequests:forRefId:](v2, "_cancelOtherSessionRequests:forRefId:", v23, v28);
    uint64_t v64 = 0u;
    id v65 = 0u;
    uint64_t v62 = 0u;
    unsigned int v63 = 0u;
    obja = v26;
    double v29 = [obja countByEnumeratingWithState:&v62 objects:v84 count:16];
    if (v29)
    {
      double v30 = v29;
      int v31 = *(void *)v63;
      p_delegate = (id *)&v2->_delegate;
      do
      {
        for (j = 0LL; j != v30; j = (char *)j + 1)
        {
          if (*(void *)v63 != v31) {
            objc_enumerationMutation(obja);
          }
          unsigned __int8 v34 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)j);
          __int16 v35 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            id v36 = v35;
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v34 encodedClassName]);
            *(_DWORD *)__int128 buf = 136315394;
            id v71 = "-[ADSessionManager _evaluateResultObjects]";
            __int128 v72 = 2112;
            __int128 v73 = v37;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%s Command %@", buf, 0x16u);

            uint64_t v2 = v55;
          }

          id WeakRetained = objc_loadWeakRetained(p_delegate);
          [WeakRetained assistantSessionManager:v2 receivedCommand:v34];
        }

        double v30 = [obja countByEnumeratingWithState:&v62 objects:v84 count:16];
      }

      while (v30);
    }

    v2->_isQueuingResultsForDelayedEvaluation = 0;
    if (v54 == v61) {
      uint64_t v39 = 1;
    }
    else {
      uint64_t v39 = v51;
    }
    __int16 v40 = v2;
    if (v51) {
      id v41 = v50;
    }
    else {
      id v41 = @"sessionHasHigherUsefulnessScore";
    }
    if ((v39 & 1) == 0)
    {
      if (v40->_timerFiredOnce) {
        id v41 = @"timerFiredAndSomeSessionHadResults";
      }
      else {
        id v41 = @"onlySessionHasResults";
      }
    }

    __int128 v42 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v43 = v42;
      __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v23 sessionId]);
      __int16 v45 = [v23 sessionType];
      *(_DWORD *)__int128 buf = 136316674;
      id v71 = "-[ADSessionManager _evaluateResultObjects]";
      __int128 v72 = 2112;
      __int128 v73 = v44;
      __int128 v74 = 1024;
      __int128 v75 = v45;
      __int128 v76 = 2112;
      __int128 v77 = v41;
      __int128 v78 = 1024;
      __int128 v79 = v56;
      __int128 v80 = 2048;
      __int128 v81 = v53;
      __int128 v82 = 2048;
      __int128 v83 = v60;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "%s Session %@ (type %d) wins with reason %@ preferred %d remoteSessionScore %ld localSessionScore %ld",  buf,  0x40u);
    }

    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v23 _adSessionTypeString]);
    id v47 = v41;
    uint64_t v2 = v55;
    -[ADSessionManager _logContextForWinningSession:forReason:forRemoteSessionScore:forLocalSessionScore:]( v55,  "_logContextForWinningSession:forReason:forRemoteSessionScore:forLocalSessionScore:",  v46,  v47,  v53,  v60);

    uint64_t v10 = v52;
  }

        id v11 = (char *)v11 + 1;
      }

      while (v57 != v11);
      uint64_t v49 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
      __int16 v57 = v49;
    }

    while (v49);
  }
}

  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueNetworkNotShareableValue);
  LOBYTE(v17) = state64;
  if ((state64 & 0x100000) == 0)
  {
LABEL_33:
    if ((v17 & 1) == 0) {
      goto LABEL_58;
    }
LABEL_56:
    if (!-[NSMutableArray count](v16, "count")) {
      -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueGenericProblemValue);
    }
    goto LABEL_58;
  }
}

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", self->_pingCount));
  [v3 setObject:v28 forKey:@"ping_count"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x2000000) == 0)
  {
LABEL_8:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_56;
  }

  PBDataWriterWriteUint32Field(v5, self->_rttCurrent, 10LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }

  *((_DWORD *)v4 + 43) = self->_rttBest;
  *((_DWORD *)v4 + 53) |= 0x80000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_56;
  }

  v5[7] = self->_rxPackets;
  *((_DWORD *)v5 + 53) |= 0x40u;
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }

  __int16 v43 = 0LL;
  if ((*(_WORD *)&has & 0x800) != 0)
  {
LABEL_38:
    __int128 v42 = 2654435761u * self->_txRetransmitBytes;
    if ((*(_WORD *)&has & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_56;
  }

  self->_rttCurrent = *((_DWORD *)v4 + 44);
  *(_DWORD *)&self->_has |= 0x100000u;
  id v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x200000) == 0)
  {
LABEL_10:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }

LABEL_55:
  isQueuingResultsForDelayedEvaluation = v2->_isQueuingResultsForDelayedEvaluation;
  return isQueuingResultsForDelayedEvaluation;
}

  id v11 = 0LL;
  uint64_t v4 = &unk_1003C9000;
  id v47 = v52;
LABEL_56:

LABEL_57:
  v53[0] = _NSConcreteStackBlock;
  v53[1] = v4[280];
  v53[2] = sub_1000DFD08;
  v53[3] = &unk_1004F0A20;
  v53[4] = *(void *)(a1 + 32);
  __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v11 mutatedCopyWithMutator:v53]);

  uint64_t v49 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v50 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADMobileBluetoothDeviceProxy _fetchDeviceInfoWithCompletion:]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v48;
    *(_WORD *)&buf[22] = 2112;
    *(void *)&_BYTE buf[24] = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "%s Fetched device info %@ for %@.", buf, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueNetworkProfileRequiredValue);
  if ((state64 & 1) != 0) {
    goto LABEL_56;
  }
LABEL_58:
  [(id)v14 setValues:v16];

LABEL_59:
  id v18 = objc_claimAutoreleasedReturnValue(-[ADBackgroundContextCache errorIndicatorStatus](self->_bgContext, "errorIndicatorStatus"));
  uint64_t v19 = (void *)v18;
  if (v14 | v18 && ([(id)v18 isEqual:v14] & 1) == 0)
  {
    -[ADBackgroundContextCache setErrorIndicatorStatus:](self->_bgContext, "setErrorIndicatorStatus:", v14);
    uint64_t v20 = 1LL;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  v11[2](v11, v20);

LABEL_64:
}

  double v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_unacknowledgedPingCount));
  [v3 setObject:v29 forKey:@"unacknowledged_ping_count"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_9:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }

  PBDataWriterWriteUint32Field(v5, self->_rttSmoothed, 11LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x400000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }

  v4[11] = self->_txPackets;
  *((_DWORD *)v4 + 53) |= 0x400u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_57;
  }

  void v5[4] = self->_rxBytes;
  *((_DWORD *)v5 + 53) |= 8u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }

  __int128 v42 = 0LL;
  if ((*(_WORD *)&has & 0x1000) != 0)
  {
LABEL_39:
    id v41 = 2654435761u * self->_txUnacked;
    if ((*(_BYTE *)&has & 0x40) != 0) {
      goto LABEL_40;
    }
    goto LABEL_57;
  }

  self->_rttSmoothed = *((_DWORD *)v4 + 45);
  *(_DWORD *)&self->_has |= 0x200000u;
  id v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x400000) == 0)
  {
LABEL_11:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }

LABEL_36:
      -[ADSessionManager _logContextForWinningSession:forReason:forRemoteSessionScore:forLocalSessionScore:]( self,  "_logContextForWinningSession:forReason:forRemoteSessionScore:forLocalSessionScore:",  v47,  @"arbiterReusedPreviousWinner",  0LL,  0LL);
    }
  }
}

  return v23;
}

        uint64_t v32 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int v33 = 136315650;
          *(void *)&void v33[4] = "-[ADCommandCenter _shouldIgnoreCommand:executionContext:]";
          *(_WORD *)&v33[12] = 2112;
          *(void *)&v33[14] = v6;
          *(_WORD *)&v33[22] = 2112;
          unsigned __int8 v34 = v7;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "%s Ignoring %@ because it is not in scope. (executionContext = %@)",  v33,  0x20u);
        }

        uint64_t v21 = 1;
        goto LABEL_32;
      }

      *(_DWORD *)int v33 = 136315394;
      *(void *)&void v33[4] = "-[ADCommandCenter _shouldIgnoreCommand:executionContext:]";
      *(_WORD *)&v33[12] = 2112;
      *(void *)&v33[14] = v24;
      double v30 = "%s Execution context %@ does not belong to an outstanding request, and an associated local execution context"
            " can not be found";
LABEL_35:
      _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, v30, v33, 0x16u);
      if ((v28 & 1) != 0) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }

  else if (![v7 isFromRemote])
  {
    goto LABEL_10;
  }

  uint64_t v20 = (os_log_s *)AFSiriLogContextDaemon;
  uint64_t v21 = 0;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v33 = 136315650;
    *(void *)&void v33[4] = "-[ADCommandCenter _shouldIgnoreCommand:executionContext:]";
    *(_WORD *)&v33[12] = 2112;
    *(void *)&v33[14] = v6;
    *(_WORD *)&v33[22] = 2112;
    unsigned __int8 v34 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s Handling %@ for a request initiated on another device. (executionContext = %@)",  v33,  0x20u);
    uint64_t v21 = 0;
  }
}
}
}

LABEL_39:
}

  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueWiFiProblemValue);
  __int16 v17 = state64;
  if ((state64 & 0x20) == 0)
  {
LABEL_18:
    if ((v17 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }

        __int16 v24 = (char *)v24 + 1;
      }

      while (v22 != v24);
      id v41 = [v19 countByEnumeratingWithState:&v46 objects:v50 count:16];
      id v22 = v41;
    }

    while (v41);
  }

  __int128 v42 = *(void *)(a1 + 48);
  if (v42) {
    (*(void (**)(uint64_t, NSMutableDictionary *, void))(v42 + 16))(v42, v8, 0LL);
  }
  __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v43 logEventWithType:4587 context:0];
}

        if (!v18) {
          goto LABEL_149;
        }
        xpc_dictionary_set_BOOL(v18, AFExternalRequestReplyKeyResult, 0);
        uint64_t v52 = xpc_dictionary_get_remote_connection(v18);
        uint64_t v53 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v52);
        __int128 v42 = v53;
        if (v53) {
          xpc_connection_send_message(v53, v18);
        }
        goto LABEL_91;
      case 6LL:
        if (!v3) {
          goto LABEL_153;
        }
        uint64_t v54 = v3;
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_1001247BC;
        int v177 = &unk_1004F21C8;
        unsigned int v178 = (AFRequestInfo *)xpc_dictionary_create_reply(v54);
        xpc_object_t reply = v178;
        __int16 v55 = objc_retainBlock(buf);
        xpc_object_t dictionary = xpc_dictionary_get_dictionary(v54, AFExternalRequestMessageKeyActivationContext);
        __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(dictionary);

        if (v57 && xpc_get_type(v57) == (xpc_type_t)&_xpc_type_dictionary)
        {
          ContextFromXPCDictionary = AFSiriActivationCreateContextFromXPCDictionary(v57);
          id v58 = (void *)objc_claimAutoreleasedReturnValue(ContextFromXPCDictionary);
        }

        else
        {
          id v58 = 0LL;
        }

        int v158 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext defaultContext](&OBJC_CLASS___AFInstanceContext, "defaultContext"));
        v172[0] = _NSConcreteStackBlock;
        v172[1] = (id)3221225472LL;
        v172[2] = sub_100124850;
        v172[3] = &unk_1004FC358;
        unsigned int v173 = v55;
        int v159 = v55;
        AFSiriActivationPerform(v58, v158, v172);

LABEL_137:
        goto LABEL_152;
      case 7LL:
        if (!v3) {
          goto LABEL_153;
        }
        id v59 = v3;
        uint64_t v60 = (AFRequestInfo *)xpc_dictionary_create_reply(v59);
        id v61 = xpc_dictionary_get_value(v59, AFExternalRequestMessageKeyIncomingCall);
        xpc_object_t reply = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v61);

        uint64_t v62 = objc_alloc(&OBJC_CLASS___NSData);
        unsigned int v63 = xpc_data_get_bytes_ptr(reply);
        id v18 = -[NSData initWithBytes:length:](v62, "initWithBytes:length:", v63, xpc_data_get_length(reply));
        uint64_t v64 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v18,  0LL);
        id v65 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v64,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___AFSiriIncomingCall),  NSKeyedArchiveRootObjectKey);
        id v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
        -[NSKeyedUnarchiver finishDecoding](v64, "finishDecoding");
        uint64_t v67 = objc_alloc(&OBJC_CLASS___ADAnnounceIncomingCallRequest);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_10012485C;
        int v177 = &unk_1004FB0E0;
        unsigned int v178 = v60;
        id v68 = v60;
        uint64_t v69 = -[ADAnnounceIncomingCallRequest initWithCall:completion:](v67, "initWithCall:completion:", v66, buf);
        id v70 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
        goto LABEL_85;
      case 8LL:
        xpc_object_t reply = (AFRequestInfo *)v3;
        if (!reply) {
          goto LABEL_152;
        }
        if (+[AFFeatureFlags isHomeAutomationBackgroundRequestEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isHomeAutomationBackgroundRequestEnabled"))
        {
          id v71 = xpc_dictionary_get_value(reply, AFExternalRequestMessageKeyHomeAutomationBackgroundRequest);
          __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
          if (v72)
          {
            __int128 v73 = objc_alloc(&OBJC_CLASS___NSData);
            __int128 v74 = xpc_data_get_bytes_ptr(v72);
            __int128 v75 = -[NSData initWithBytes:length:](v73, "initWithBytes:length:", v74, xpc_data_get_length(v72));
            v172[0] = 0LL;
            __int128 v76 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___AFSiriHomeAutomationRequestInfo),  v75,  v172);
            __int128 v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
            __int128 v78 = v172[0];
            __int128 v79 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
              _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_INFO,  "%s Getting requestInfo dictionary",  buf,  0xCu);
            }

            __int128 v80 = objc_opt_class(&OBJC_CLASS___NSDictionary);
            __int128 v81 = objc_opt_class(&OBJC_CLASS___NSUUID);
            __int128 v82 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v80,  v81,  objc_opt_class(&OBJC_CLASS___NSString),  0LL);
            __int128 v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
            __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([v77 context]);
            int v175 = v78;
            __int128 v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v83,  v84,  &v175));
            __int128 v86 = v175;

            __int128 v87 = (void *)objc_claimAutoreleasedReturnValue([v85 objectForKeyedSubscript:AFSiriHomeAutomationContextKey]);
            __int128 v88 = [v87 copy];

            __int128 v89 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v88;
              _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_INFO,  "%s Got identifier: %@ from requestInfo dictionary",  buf,  0x16u);
            }

            if (!v86 && v77 && v88)
            {
              __int128 v86 = objc_alloc_init(&OBJC_CLASS___SAStartUIRequest);
              __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"));
              __int128 v91 = (void *)objc_claimAutoreleasedReturnValue([v90 bundleIdentifier]);

              uint16x8_t v92 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)__int128 buf = 136315650;
                *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v88;
                *(_WORD *)&buf[22] = 2112;
                int v177 = v91;
                _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_INFO,  "%s Creating localRequest with identifier: %@ and reportingDomain: %@",  buf,  0x20u);
              }

              uint16x8_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[SKIHomeAutomationInvocation generateAsyncDialogResponse:reportingDomain:]( &OBJC_CLASS___SKIHomeAutomationInvocation,  "generateAsyncDialogResponse:reportingDomain:",  v88,  v91));
              [v86 setStartLocalRequest:v93];
              if (v93)
              {
                int32x4_t v94 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommandCenter sharedCommandCenter]( &OBJC_CLASS___ADCommandCenter,  "sharedCommandCenter"));
                [v94 handleAceCommand:v86 afterCurrentRequest:1 waitForResponse:0 withDelegate:0 completion:&stru_1004F21E8];
              }

              else
              {
                unsigned int v162 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__int128 buf = 136315138;
                  *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
                  _os_log_error_impl( (void *)&_mh_execute_header,  v162,  OS_LOG_TYPE_ERROR,  "%s Couldn't get the command from SKI",  buf,  0xCu);
                }
              }

              int v142 = 1;
LABEL_159:

              goto LABEL_160;
            }
          }

          else
          {
            __int128 v77 = 0LL;
            __int128 v88 = 0LL;
            __int128 v86 = 0LL;
          }

          int v161 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315138;
            *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
            _os_log_error_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_ERROR,  "%s Error obtaining the homeAutomationRequestInfo",  buf,  0xCu);
          }

          int v142 = 0;
          goto LABEL_159;
        }

        int v141 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
          _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_INFO,  "%s Feature flag to enable HA background requests is not enabled. Ignoring the message Please enable: home_au tomation_background_request",  buf,  0xCu);
        }

        int v142 = 0;
LABEL_160:
        int v163 = (NSData *)xpc_dictionary_create_reply(reply);
        id v18 = v163;
        if (!v163) {
          goto LABEL_151;
        }
        xpc_dictionary_set_BOOL(v163, AFExternalRequestReplyKeyResult, v142);
        unsigned int v164 = xpc_dictionary_get_remote_connection(v18);
        uint64_t v19 = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v164);
        int v165 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v166 = "false";
          if (v142) {
            int v166 = "true";
          }
          *(_DWORD *)__int128 buf = 136315394;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestHomeAutomationBackgroundRequest";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v166;
          _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_INFO,  "%s Sending reply with isValidMessage state: %s",  buf,  0x16u);
        }

        if (v19) {
          xpc_connection_send_message(v19, v18);
        }
        goto LABEL_150;
      case 9LL:
        int32x4_t v95 = (AFRequestInfo *)v3;
        xpc_object_t reply = v95;
        if (!v95) {
          goto LABEL_152;
        }
        id v18 = (NSData *)xpc_dictionary_create_reply(v95);
        if (!v18) {
          goto LABEL_151;
        }
        unsigned int v174 = 0LL;
        int v175 = 0LL;
        sub_1001240C8(reply, &v175, &v174, (uint64_t *)v172, 0LL, 0LL);
        uint64_t v19 = (AFRequestInfo *)v175;
        int32x4_t v96 = (NSKeyedUnarchiver *)v174;
        uint64_t v20 = v96;
        if (v19)
        {
          if (-[NSKeyedUnarchiver length](v96, "length"))
          {
            int32x4_t v97 = xpc_dictionary_get_int64(reply, AFExternalRequestMessageKeyDeactivationReason);
            if ((AFSiriDeactivationReasonGetIsValid() & 1) == 0)
            {
              uint64_t v98 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315394;
                *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDeactivationRequest";
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v97;
                _os_log_error_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_ERROR,  "%s non-valid AFSiriDeactivationReason: %lli, defaulting to AFSiriDeactivationReasonUnspecified.",  buf,  0x16u);
              }

              int32x4_t v97 = 0LL;
            }

            uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
            unsigned int v100 = v172[0];
            *(void *)__int128 buf = _NSConcreteStackBlock;
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = sub_1001248CC;
            int v177 = &unk_1004FB0E0;
            unsigned int v178 = v18;
            [v99 deactivateNotificationAnnouncementRequestForReason:v97 notification:v19 sourceAppId:v20 platform:v100 completion:buf];

LABEL_71:
LABEL_149:

LABEL_150:
LABEL_151:

LABEL_152:
            goto LABEL_153;
          }

          unsigned int v143 = (os_log_s *)AFSiriLogContextDaemon;
          if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
            goto LABEL_149;
          }
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDeactivationRequest";
          int v144 = "%s non-valid sourceAppID from XPC message.";
        }

        else
        {
          unsigned int v143 = (os_log_s *)AFSiriLogContextDaemon;
          if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
            goto LABEL_149;
          }
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDeactivationRequest";
          int v144 = "%s non-valid notification from XPC message.";
        }
}

  int v145 = objc_alloc(&OBJC_CLASS___SiriCoreSQLiteTableDescription);
  objb = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"stream_uid" type:@"TEXT" constraints:0];
  v184[0] = objb;
  id v71 = objc_alloc(&OBJC_CLASS___SiriCoreSQLiteColumnDescription);
  int v142 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteColumnConstraint defaultColumnConstraintWithName:value:]( &OBJC_CLASS___SiriCoreSQLiteColumnConstraint,  "defaultColumnConstraintWithName:value:",  0LL,  &off_1005132E8));
  int v183 = v142;
  int v141 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v183, 1LL));
  int v140 = [v71 initWithName:@"delivery_stream" type:@"INTEGER" constraints:v141];
  v184[1] = v140;
  int v139 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"type" type:@"INTEGER" constraints:0];
  v184[2] = v139;
  int v138 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"timestamp" type:@"INTEGER" constraints:0];
  v184[3] = v138;
  unsigned int v137 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"context_data" type:@"BLOB" constraints:0];
  v184[4] = v137;
  __int128 v72 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"context_data_type" type:@"INTEGER" constraints:0];
  v184[5] = v72;
  __int128 v73 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"date_created" type:@"REAL" constraints:0];
  v184[6] = v73;
  __int128 v74 = objc_alloc(&OBJC_CLASS___SiriCoreSQLiteColumnDescription);
  __int128 v75 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteColumnConstraint defaultColumnConstraintWithName:value:]( &OBJC_CLASS___SiriCoreSQLiteColumnConstraint,  "defaultColumnConstraintWithName:value:",  0LL,  &off_1005132E8));
  unsigned int v182 = v75;
  __int128 v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v182, 1LL));
  __int128 v77 = [v74 initWithName:@"status" type:@"INTEGER" constraints:v76];
  v184[7] = v77;
  __int128 v78 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"assistant_id" type:@"TEXT" constraints:0];
  v184[8] = v78;
  __int128 v79 = [[SiriCoreSQLiteColumnDescription alloc] initWithName:@"record_id" type:@"TEXT" constraints:0];
  v184[9] = v79;
  __int128 v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v184, 10LL));
  unsigned int v146 = [v145 initWithName:@"events" columns:v80 constraints:0];

  __int128 v81 = (void *)objc_claimAutoreleasedReturnValue( -[SiriCoreSQLiteDatabase fetchTableWithName:error:]( v19,  "fetchTableWithName:error:",  @"events",  0LL));
  __int128 v82 = v81;
  if (v81)
  {
    __int128 v83 = (void *)objc_claimAutoreleasedReturnValue([v81 columns]);
    __int128 v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v83 count]));

    unsigned int v167 = 0u;
    int v168 = 0u;
    int v165 = 0u;
    int v166 = 0u;
    __int128 v85 = (void *)objc_claimAutoreleasedReturnValue([v82 columns]);
    __int128 v86 = [v85 countByEnumeratingWithState:&v165 objects:v181 count:16];
    if (v86)
    {
      __int128 v87 = v86;
      __int128 v88 = *(void *)v166;
      do
      {
        for (i = 0LL; i != v87; i = (char *)i + 1)
        {
          if (*(void *)v166 != v88) {
            objc_enumerationMutation(v85);
          }
          __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v165 + 1) + 8 * (void)i), "name", v137));
          [v84 addObject:v90];
        }

        __int128 v87 = [v85 countByEnumeratingWithState:&v165 objects:v181 count:16];
      }

      while (v87);
    }

    unsigned int v143 = v82;

    __int128 v91 = (void *)objc_claimAutoreleasedReturnValue([v146 columns]);
    uint16x8_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v91 count]));

    int v163 = 0u;
    unsigned int v164 = 0u;
    int v161 = 0u;
    unsigned int v162 = 0u;
    uint16x8_t v93 = (void *)objc_claimAutoreleasedReturnValue([v146 columns]);
    int32x4_t v94 = [v93 countByEnumeratingWithState:&v161 objects:v180 count:16];
    if (v94)
    {
      int32x4_t v95 = v94;
      int32x4_t v96 = *(void *)v162;
      do
      {
        for (j = 0LL; j != v95; j = (char *)j + 1)
        {
          if (*(void *)v162 != v96) {
            objc_enumerationMutation(v93);
          }
          uint64_t v98 = *(void **)(*((void *)&v161 + 1) + 8LL * (void)j);
          uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "name", v137));
          unsigned int v100 = [v84 containsObject:v99];

          if ((v100 & 1) == 0) {
            [v92 addObject:v98];
          }
        }

        int32x4_t v95 = [v93 countByEnumeratingWithState:&v161 objects:v180 count:16];
      }

      while (v95);
    }

    int v159 = 0u;
    unsigned int v160 = 0u;
    int v157 = 0u;
    int v158 = 0u;
    id obj = v92;
    unint64_t v101 = [obj countByEnumeratingWithState:&v157 objects:v179 count:16];
    if (v101)
    {
      __int16 v102 = v101;
      int8x16x4_t v103 = 0;
      int v104 = 0LL;
      uint64_t v105 = *(void *)v158;
      while (2)
      {
        unsigned int v106 = 0LL;
        int v107 = v104;
        do
        {
          if (*(void *)v158 != v105) {
            objc_enumerationMutation(obj);
          }
          unsigned int v108 = *(void **)(*((void *)&v157 + 1) + 8LL * (void)v106);
          int v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v108, "name", v137));
          int v110 = [v109 isEqualToString:@"record_id"];

          if (v110) {
            int8x16x4_t v103 = 1;
          }
          int v156 = v107;
          unsigned int v111 = -[SiriCoreSQLiteDatabase alterTableWithName:addColumn:error:]( v19,  "alterTableWithName:addColumn:error:",  @"events",  v108,  &v156);
          int v104 = v156;

          if ((v111 & 1) == 0)
          {
            int v112 = (void *)AFSiriLogContextAnalytics;
            if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
            {
              unsigned int v135 = v112;
              unsigned int v136 = (__CFString *)objc_claimAutoreleasedReturnValue([v108 name]);
              *(_DWORD *)__int128 buf = 136315906;
              uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
              uint64_t v196 = 2112;
              unsigned int v197 = v136;
              int v198 = 2112;
              int v199 = (uint64_t)@"events";
              unsigned int v200 = 2112;
              uint64_t v201 = v104;
              _os_log_error_impl( (void *)&_mh_execute_header,  v135,  OS_LOG_TYPE_ERROR,  "%s Failed to add column '%@' to '%@' table with error %@",  buf,  0x2Au);
            }

            if (a3)
            {
              int v104 = v104;
              unsigned int v113 = 0;
              *a3 = v104;
            }

            else
            {
              unsigned int v113 = 0;
            }

            goto LABEL_81;
          }

          unsigned int v106 = (char *)v106 + 1;
          int v107 = v104;
        }

        while (v102 != v106);
        __int16 v102 = [obj countByEnumeratingWithState:&v157 objects:v179 count:16];
        if (v102) {
          continue;
        }
        break;
      }
    }

    else
    {
      int8x16x4_t v103 = 0;
      int v104 = 0LL;
    }

    unsigned int v113 = 1;
LABEL_81:
    __int128 v82 = v143;
    int v114 = v146;

    if ((v113 & 1) != 0)
    {
      int v144 = v103 & 1;
LABEL_83:
      -[SiriCoreSQLiteDatabase dropIndexWithName:error:]( v19,  "dropIndexWithName:error:",  @"events_index_date_inserted",  0LL,  v137);
      -[SiriCoreSQLiteDatabase dropIndexWithName:error:](v19, "dropIndexWithName:error:", @"status", 0LL);
      -[SiriCoreSQLiteDatabase dropIndexWithName:error:](v19, "dropIndexWithName:error:", @"delivery_stream", 0LL);
      -[SiriCoreSQLiteDatabase dropIndexWithName:error:]( v19,  "dropIndexWithName:error:",  @"events_index_date_created",  0LL);
      v153[0] = _NSConcreteStackBlock;
      v153[1] = 3221225472LL;
      v153[2] = sub_10013A198;
      v153[3] = &unk_1004F2B50;
      obja = v19;
      unsigned int v154 = obja;
      int v119 = objc_retainBlock(v153);
      v178[0] = @"stream_uid";
      v178[1] = @"assistant_id";
      int v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v178, 2LL));
      ((void (*)(void *, const __CFString *, void *))v119[2])(v119, @"events_index_stream_uid", v120);

      int v177 = @"timestamp";
      int v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v177, 1LL));
      ((void (*)(void *, const __CFString *, void *))v119[2])(v119, @"events_index_timestamp", v121);

      v176[0] = @"status";
      v176[1] = @"date_created";
      unsigned int v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v176, 2LL));
      ((void (*)(void *, const __CFString *, void *))v119[2])( v119,  @"events_index_date_created_status",  v122);

      v175[0] = @"status";
      v175[1] = @"stream_uid";
      unsigned int v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v175, 2LL));
      ((void (*)(void *, const __CFString *, void *))v119[2])( v119,  @"events_index_covering_status_stream_uid",  v123);

      v174[0] = @"timestamp";
      v174[1] = @"stream_uid";
      v174[2] = @"assistant_id";
      v174[3] = @"status";
      v174[4] = @"delivery_stream";
      int v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v174, 5LL));
      ((void (*)(void *, const __CFString *, void *))v119[2])( v119,  @"events_index_event_batch",  v124);

      unsigned int v173 = @"record_id";
      int v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v173, 1LL));
      ((void (*)(void *, const __CFString *, void *))v119[2])( v119,  @"events_index_record_uuid",  v125);

      if (v144)
      {
        int v126 = (os_log_s *)AFSiriLogContextAnalytics;
        if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
          uint64_t v196 = 2112;
          unsigned int v197 = @"record_id";
          _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_INFO,  "%s %@ column added as part of DB migration, performing column value uniquification",  buf,  0x16u);
        }

        int v127 = (SiriCoreSQLiteDatabase *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteQueryCriterion isNullQueryCriterionWithColumnName:negation:]( &OBJC_CLASS___SiriCoreSQLiteQueryCriterion,  "isNullQueryCriterionWithColumnName:negation:",  @"record_id",  0LL));
        int v152 = v104;
        int v128 = obja;
        unsigned int v129 = -[SiriCoreSQLiteDatabase updateTableWithName:columnName:columnValue:criterion:error:]( obja,  "updateTableWithName:columnName:columnValue:criterion:error:",  @"events",  @"record_id",  @"UUID()",  v127,  &v152);
        int v130 = v152;

        if ((v129 & 1) != 0)
        {

          int v114 = v146;
          goto LABEL_90;
        }

        unsigned int v133 = (os_log_s *)AFSiriLogContextAnalytics;
        int v114 = v146;
        if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
          uint64_t v196 = 2112;
          unsigned int v197 = v130;
          _os_log_error_impl( (void *)&_mh_execute_header,  v133,  OS_LOG_TYPE_ERROR,  "%s Failed to update database records with UUIDs due to error %@",  buf,  0x16u);
        }

        if (a3)
        {
          int v130 = v130;
          *a3 = v130;
        }

        int v118 = 1;
        int v117 = v151;
      }

      else
      {
        int v130 = v104;
        int v114 = v146;
        int v128 = obja;
LABEL_90:
        int v131 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
        [v131 setLastKnownAnalyticsStoreState:0];

        unsigned int v132 = v128;
        int v118 = 0;
        int v117 = v151;
        int v127 = v151->_database;
        v151->_database = v132;
      }

      int v104 = v130;
    }

    else
    {
      int v118 = 1;
      int v117 = v151;
    }
  }

  else
  {
    unsigned int v155 = 0LL;
    int v114 = v146;
    int v115 = -[SiriCoreSQLiteDatabase createTable:error:](v19, "createTable:error:", v146, &v155);
    int v104 = (__CFString *)v155;
    if ((v115 & 1) != 0)
    {
      int v144 = 0;
      goto LABEL_83;
    }

    unsigned int v116 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v195 = "-[ADAnalyticsStore _preparedDatabaseWithError:]";
      uint64_t v196 = 2112;
      unsigned int v197 = @"events";
      int v198 = 2112;
      int v199 = (uint64_t)v104;
      _os_log_error_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_ERROR,  "%s Failed to create '%@' table with error %@",  buf,  0x20u);
    }

    int v117 = v151;
    if (a3)
    {
      int v104 = v104;
      *a3 = v104;
    }

    int v118 = 1;
  }

  if (v118) {
    goto LABEL_98;
  }
  database = v117->_database;
LABEL_4:
  int v5 = database;
  return v5;
}
}

    if (!+[AFFeatureFlags isRemoraEnabled](&OBJC_CLASS___AFFeatureFlags, "isRemoraEnabled")
      || (uint64_t v37 = objc_claimAutoreleasedReturnValue([v20 accessoryWithUniqueIdentifier:v25])) == 0)
    {
      __int16 v15 = v45 + 1;
      __int16 v13 = v46;
      a4 = v47;
      id v14 = v43;
      if ((id)(v45 + 1) != v44) {
        continue;
      }
      __int16 v35 = 0LL;
      __int128 v44 = [v46 countByEnumeratingWithState:&v54 objects:v67 count:16];
      if (!v44) {
        goto LABEL_47;
      }
      goto LABEL_15;
    }

    break;
  }

  __int16 v35 = (id)v37;
  __int16 v40 = (void *)AFSiriLogContextDaemon;
  a4 = v47;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v41 = v40;
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v35 description]);
    *(_DWORD *)__int128 buf = 136315395;
    id v59 = "-[ADHomeInfoManager _accessoryForIdentifier:inHome:]";
    uint64_t v60 = 2113;
    id v61 = v42;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s accessory:%{private}@", buf, 0x16u);

    __int16 v40 = (void *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v59 = "-[ADHomeInfoManager _accessoryForIdentifier:inHome:]";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v40, OS_LOG_TYPE_INFO, "%s found accessory", buf, 0xCu);
  }

  id v36 = v20;
LABEL_45:

  uint64_t v10 = v36;
  __int16 v13 = v46;
LABEL_47:

  __int16 v38 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315907;
    id v59 = "-[ADHomeInfoManager _accessoryForIdentifier:inHome:]";
    uint64_t v60 = 2112;
    id v61 = v49;
    uint64_t v62 = 2113;
    unsigned int v63 = v35;
    uint64_t v64 = 2113;
    id v65 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "%s %@ -> %{private}@ (%{private}@)",  buf,  0x2Au);
    if (a4) {
LABEL_49:
    }
      *a4 = v10;
  }

  else if (a4)
  {
    goto LABEL_49;
  }

  id v11 = v35;
  id v8 = v48;
LABEL_51:

  int v7 = v49;
LABEL_52:

  return v11;
}
}

    uint64_t v4 = 0LL;
    goto LABEL_53;
  }

  if (!v5)
  {
    __int16 v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv no user found",  buf,  0xCu);
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 240) iCloudAltDSID]);
    __int16 v17 = [v4 isEqualToString:v16];

    if (v17)
    {
      id v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv is primary user",  buf,  0xCu);
      }

      uint64_t v19 = *(id *)(*(void *)(a1 + 48) + 240LL);
    }

    else
    {
      uint64_t v19 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 304) objectForKey:v4]);
    }

    int v5 = v19;
  }

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
  if ([v24 userProfileExistsWithiCloudAltDSID:v4])
  {

    goto LABEL_44;
  }

  double v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) getCloudKitManager]);
  if ([v30 isPastBuddy])
  {

    goto LABEL_52;
  }

  int v31 = *(void *)(*(void *)(a1 + 48) + 88LL);

  if (v31)
  {
LABEL_52:
    uint64_t v32 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315395;
      __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
      uint64_t v49 = 2113;
      id v50 = (uint64_t)v4;
      double v29 = "%s #multi-user-atv updating RmV state for %{private}@ and user does not have a profile on TV. Outside of Bud"
            "dy this should not happen.";
      int v33 = v32;
      unsigned __int8 v34 = 22;
      goto LABEL_66;
    }

    goto LABEL_53;
  }

    uint64_t v16 = v4;
    __int16 v17 = 13LL;
    goto LABEL_40;
  }

  if ([v4 platform] == (id)4
    && !-[ADExternalNotificationRequestHandler _announceOnDeviceSpeakerAllowedForRequest:]( self,  "_announceOnDeviceSpeakerAllowedForRequest:",  v4))
  {
    uint64_t v52 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
      id v71 = 2112;
      __int128 v72 = v4;
      uint64_t v49 = "%s Not announcing on speaker, since the setting is disabled for %@";
      id v50 = v52;
      id v51 = 22;
      goto LABEL_38;
    }

    goto LABEL_39;
  }

  if ([v4 platform] != (id)4
    || !-[ADExternalNotificationRequestHandler _isDeviceSilent](self, "_isDeviceSilent"))
  {
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v4 appID]);
    uint64_t v25 = _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForAppOnPlatform( v24,  [v4 platform]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

    if (v26
      && (uint32_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v26 laterDate:v27]),
          double v29 = [v28 isEqualToDate:v26],
          v28,
          v27,
          v29))
    {
      double v30 = _AFPreferencesAnnounceNotificationsTemporarilyDisabledEndDateForPlatform([v4 platform]);
      int v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      if (v31
        && (uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
            int v33 = (void *)objc_claimAutoreleasedReturnValue([v31 laterDate:v32]),
            unsigned __int8 v34 = [v33 isEqualToDate:v31],
            v33,
            v32,
            v34))
      {
        __int16 v35 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          id v36 = v35;
          uint64_t v37 = AFSiriAnnouncementPlatformGetName([v4 platform]);
          __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          *(_DWORD *)__int128 buf = 136315650;
          id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
          id v71 = 2112;
          __int128 v72 = v31;
          __int128 v73 = 2112;
          __int128 v74 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "%s Announce Notifications is globally temporarily disabled until %@ on platform %@",  buf,  0x20u);
        }

        uint64_t v39 = 4LL;
      }

      else
      {
        id v58 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          id v59 = v58;
          uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v4 appID]);
          id v61 = AFSiriAnnouncementPlatformGetName([v4 platform]);
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
          *(_DWORD *)__int128 buf = 136315906;
          id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
          id v71 = 2112;
          __int128 v72 = v26;
          __int128 v73 = 2112;
          __int128 v74 = v60;
          __int128 v75 = 2112;
          __int128 v76 = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "%s Announce Notifications is temporarily disabled until %@ for app %@ on platform %@",  buf,  0x2Au);
        }

        uint64_t v39 = 3LL;
      }

      [v4 completeRequestWithSuccess:0 forReason:v39 shouldEmitInstrumentationEvent:1];
    }

    else
    {
      if ([v4 platform] == (id)2
        && !-[ADExternalNotificationRequestHandler _canAnnounceInCarPlay](self, "_canAnnounceInCarPlay"))
      {
        unsigned int v63 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
          _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_INFO,  "%s Not permitted to Announce in CarPlay, rejecting notification",  buf,  0xCu);
        }

        __int16 v45 = v4;
        uint64_t v46 = 0LL;
        id v47 = 0LL;
      }

      else
      {
        __int16 v40 = objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _currentRequest](self, "_currentRequest"));
        if (!v40
          || (id v41 = (void *)v40,
              __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _currentRequest](self, "_currentRequest")),
              __int16 v43 = [v42 requestType],
              v42,
              v41,
              v43 != (id)2))
        {
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _currentRequest](self, "_currentRequest"));
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[ADExternalNotificationRequestHandler _sharedCommandCenter](self, "_sharedCommandCenter"));
          switch(self->_currentState)
          {
            case 1LL:
              v67[0] = _NSConcreteStackBlock;
              v67[1] = 3221225472LL;
              v67[2] = sub_10032A500;
              v67[3] = &unk_1004FC160;
              void v67[4] = self;
              id v68 = v4;
              -[ADExternalNotificationRequestHandler _shouldAnnounceGivenCurrentClientConditionsForRequest:completion:]( self,  "_shouldAnnounceGivenCurrentClientConditionsForRequest:completion:",  v68,  v67);

              break;
            case 2LL:
            case 3LL:
            case 4LL:
            case 6LL:
              __int16 v55 = (os_log_s *)AFSiriLogContextDaemon;
              if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
                goto LABEL_47;
              }
              *(_DWORD *)__int128 buf = 136315138;
              id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
              uint64_t v56 = "%s Enqueueing announcement request";
              goto LABEL_46;
            case 5LL:
              waitForUserInputAfterReading = self->_waitForUserInputAfterReading;
              __int16 v55 = (os_log_s *)AFSiriLogContextDaemon;
              id v65 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
              if (waitForUserInputAfterReading)
              {
                if (v65)
                {
                  *(_DWORD *)__int128 buf = 136315138;
                  id v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
                  uint64_t v56 = "%s Currently waiting for explicit user input";
LABEL_46:
                  _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, v56, buf, 0xCu);
                }

void sub_1000D6C70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

void sub_1000D7650(uint64_t a1, char a2)
{
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000D76EC;
  block[3] = &unk_1004F0668;
  char v7 = a2;
  __int128 v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  __int128 v6 = v4;
  dispatch_async(v2, block);
}

uint64_t sub_1000D76D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

void sub_1000D76EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 48)) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_1000D7708(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", *(void *)(a1 + 32), @"sessionType");
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    uint64_t v4 = AFAnalyticsContextCreateWithError(v3);
    int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  else
  {
    int v5 = &__NSDictionary0__struct;
  }

  v10[0] = v2;
  v10[1] = v5;
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v10, 2LL));
  uint64_t v7 = AFAnalyticsContextsMerge();
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

void sub_1000D77DC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = v3;
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v35 = "-[ADSessionManager _logMetricsForSessionFailure:withError:completion:]_block_invoke_2";
    __int16 v36 = 1024;
    unsigned int v37 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s metrics count %d", buf, 0x12u);
  }

  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id obj = v2;
  id v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v25)
  {
    uint64_t v24 = *(void *)v30;
    do
    {
      int v5 = 0LL;
      do
      {
        if (*(void *)v30 != v24) {
          objc_enumerationMutation(obj);
        }
        __int128 v6 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)v5);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        v28[2] = sub_1000D7EB8;
        v28[3] = &unk_1004FD8D0;
        void v28[4] = v6;
        [v7 logEventWithType:902 contextProvider:v28];

        id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_1000D7EC0;
        v27[3] = &unk_1004FD8D0;
        v27[4] = v6;
        [v8 logEventWithType:903 contextProvider:v27];

        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
        id v10 = [v9 getSequenceNumber];

        id v26 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sessionConnectionNetworkFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sessionConnectionNetworkFromSiriCoreConnectionMetrics:",  v6));
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 flowNetworkInterfaceType]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics networkInterfacesFromDictionary:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "networkInterfacesFromDictionary:",  v11));

        id v13 = objc_alloc_init(&OBJC_CLASS___NETSchemaNETSessionConnectionSnapshotCaptured);
        [v13 setSequenceNumber:v10];
        [v13 setSnapshotTriggerReason:2];
        [v13 setNetwork:v26];
        [v13 setNetworkInterfaces:v12];
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 providerStyle]);
        objc_msgSend( v13,  "setProvider:",  +[SiriCoreNetworkingAnalytics providerFromString:]( SiriCoreNetworkingAnalytics,  "providerFromString:",  v14));

        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
        [v15 logSessionConnectionSnapshotCaptured:v13];

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics debugSessionConnectionNetworkFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "debugSessionConnectionNetworkFromSiriCoreConnectionMetrics:",  v6));
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics debugNetworkInterfacesFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "debugNetworkInterfacesFromSiriCoreConnectionMetrics:",  v6));
        id v18 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics pingInfoFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "pingInfoFromSiriCoreConnectionMetrics:",  v6));
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sessionConnectionQualityFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sessionConnectionQualityFromSiriCoreConnectionMetrics:",  v6));
        id v20 = objc_alloc_init(&OBJC_CLASS___NETSchemaNETDebugSessionConnectionSnapshotCaptured);
        [v20 setSequenceNumber:v10];
        [v20 setNetwork:v16];
        [v20 setNetworkInterfaces:v17];
        [v20 setPingInfo:v18];
        [v20 setQuality:v19];
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
        [v21 logDebugSessionConnectionSnapshotCaptured:v20];

        int v5 = (char *)v5 + 1;
      }

      while (v25 != v5);
      id v25 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }

    while (v25);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000D7BCC(uint64_t a1, void *a2)
{
  uint64_t v16 = a1;
  id v2 = a2;
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = v3;
    *(_DWORD *)__int128 buf = 136315394;
    id v26 = "-[ADSessionManager _logMetricsForSessionFailure:withError:completion:]_block_invoke_3";
    __int16 v27 = 1024;
    unsigned int v28 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s SN Connection metrics count %d", buf, 0x12u);
  }

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id obj = v2;
  id v5 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v21;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)v8);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics", v16));
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        void v19[2] = sub_1000D7E74;
        v19[3] = &unk_1004FD8D0;
        void v19[4] = v9;
        [v10 logEventWithType:902 contextProvider:v19];

        id v11 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        void v18[2] = sub_1000D7E7C;
        v18[3] = &unk_1004FD8D0;
        void v18[4] = v9;
        [v11 logEventWithType:903 contextProvider:v18];

        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 connectionSnapshot]);
        [v12 setSnapshotTriggerReason:2];
        if (v12)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue( +[SNNetworkAnalytics sharedSNNetworkAnalytics]( &OBJC_CLASS___SNNetworkAnalytics,  "sharedSNNetworkAnalytics"));
          [v13 logSessionConnectionSnapshotCaptured:v12];
        }

        id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 debugConnectionSnapshot]);
        if (v14)
        {
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[SNNetworkAnalytics sharedSNNetworkAnalytics]( &OBJC_CLASS___SNNetworkAnalytics,  "sharedSNNetworkAnalytics"));
          [v15 logDebugSessionConnectionSnapshotCaptured:v14];
        }

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v6);
  }

  dispatch_group_leave(*(dispatch_group_t *)(v16 + 32));
}

uint64_t sub_1000D7E60(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

NSMutableDictionary *sub_1000D7E74(uint64_t a1)
{
  return sub_1000BAAC4(*(void **)(a1 + 32));
}

id sub_1000D7E7C(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteMetrics]);
  id v2 = sub_1000BAAC4(v1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  return v3;
}

NSMutableDictionary *sub_1000D7EB8(uint64_t a1)
{
  return sub_1000B99EC(*(void **)(a1 + 32));
}

id sub_1000D7EC0(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteMetrics]);
  id v2 = sub_1000B99EC(v1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  return v3;
}

NSMutableDictionary *sub_1000D7EFC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  AFMachAbsoluteTimeGetNanoseconds(*(void *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v4, @"timestamp");

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v5, @"aceId");
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v6, @"refId");
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _adSessionTypeString]);
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v7, @"sessionType");

  if (*(void *)(a1 + 56)) {
    -[NSMutableDictionary addEntriesFromDictionary:](v2, "addEntriesFromDictionary:");
  }
  return v2;
}

id sub_1000D7FD8(void *a1)
{
  id v1 = a1;
  id v2 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v1);

  if (v2) {
    id v3 = [[SISchemaUUID alloc] initWithNSUUID:v2];
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

void sub_1000D8044(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v9 + 1) + 8 * (void)v7)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }

  if ([*(id *)(a1 + 32) count])
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentSNConnectionPreCachedMetrics]);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000D8174(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) addObject:*(void *)(*((void *)&v9 + 1) + 8 * (void)v7)];
        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }

  if ([*(id *)(a1 + 32) count])
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentConnectionPreCachedMetrics]);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000D82A4(uint64_t a1, void *a2)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v22;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v6);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
        id v8 = objc_alloc(&OBJC_CLASS___AFTwoArgumentSafetyBlock);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        void v19[2] = sub_1000D84B0;
        v19[3] = &unk_1004FC2A0;
        void v19[4] = v7;
        id v20 = *(id *)(a1 + 32);
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 40LL));
        __int128 v10 = -[AFTwoArgumentSafetyBlock initWithBlock:defaultValue1:defaultValue2:]( v8,  "initWithBlock:defaultValue1:defaultValue2:",  v19,  0LL,  v9);

        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 48);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_1000D8608;
        v17[3] = &unk_1004F86D0;
        id v18 = v10;
        __int16 v15 = v10;
        [v11 sendMessage:v12 messageType:v13 toDeviceWithHKIdentifier:v14 completion:v17];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v4);
  }
}

void sub_1000D84B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextSession;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      id v8 = *(void **)(a1 + 32);
      int v10 = 136315650;
      __int128 v11 = "-[ADSessionManager _updateRemoraHostname:messageType:]_block_invoke_2";
      __int16 v12 = 2112;
      id v13 = v8;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failure sending rapport message to accessory=%@ Error:%@",  (uint8_t *)&v10,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    __int128 v9 = *(void **)(a1 + 32);
    int v10 = 136315650;
    __int128 v11 = "-[ADSessionManager _updateRemoraHostname:messageType:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Received response=%@ from accessory=%@",  (uint8_t *)&v10,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1000D8608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) invokeWithValue:a2 andValue:a3];
}

void sub_1000D8618(id a1)
{
  uint64_t v1 = AFIsInternalInstall(a1);
  if ((_DWORD)v1 && AFIsHorseman(v1, v2))
  {
    id v3 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "ADTriggerDeviceReboot";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification( DarwinNotifyCenter,  @"com.apple.siridebug.userinitiated.reboot",  0LL,  0LL,  1u);
  }

id sub_1000D86E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1000D8838(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2[7] <= 0) {
    [v2 _startSessions:*(unsigned __int8 *)(a1 + 48)];
  }
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceId]);
  if (!v53)
  {
    uint64_t v3 = SiriCoreUUIDStringCreate(0LL);
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v3);
    objc_msgSend(*(id *)(a1 + 40), "setAceId:");
  }

  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___SAStartRequest);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0
    || (uint64_t v6 = *(void *)(a1 + 40),
        uint64_t v7 = objc_opt_class(&OBJC_CLASS___SASStartSpeech),
        (objc_opt_isKindOfClass(v6, v7) & 1) != 0))
  {
    [*(id *)(a1 + 32) setRequestId:v53];
    id v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) turnId]);
    int v54 = 1;
  }

  else
  {
    id v51 = 0LL;
    int v54 = 0;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 88LL);
  id v57 = [obj countByEnumeratingWithState:&v58 objects:v68 count:16];
  int v10 = 0LL;
  if (v57)
  {
    uint64_t v56 = *(void *)v59;
    *(void *)&__int128 v9 = 136315650LL;
    __int128 v50 = v9;
    do
    {
      __int128 v11 = 0LL;
      do
      {
        if (*(void *)v59 != v56) {
          objc_enumerationMutation(obj);
        }
        __int16 v12 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)v11);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "encodedClassName", v50));
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 sessionId]);
        if (([v12 canHandleRequest] & 1) == 0 && v8)
        {
          id v15 = (os_log_s *)AFSiriLogContextSession;
          if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_54;
          }
          *(_DWORD *)__int128 buf = 136315394;
          unsigned int v63 = "-[ADSessionManager _sendCommand:opportunistically:logEvent:doSendPreProcessing:doSendPostProcessing:]_block_invoke";
          __int16 v64 = 2112;
          id v65 = v14;
          uint64_t v16 = v15;
          __int16 v17 = "%s session %@ cannot handle request or has non null refId";
          uint32_t v18 = 22;
          goto LABEL_32;
        }

        uint64_t v19 = *(void **)(a1 + 32);
        id v20 = *(void **)(a1 + 40);
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 groupIdentifier]);
        LOBYTE(v19) = [v19 _filterUnsupportedCommands:v20 inGroup:v21 onSession:v12];

        if ((v19 & 1) == 0)
        {
          __int128 v29 = (os_log_s *)AFSiriLogContextSession;
          if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_54;
          }
          __int128 v30 = *(void **)(a1 + 40);
          *(_DWORD *)__int128 buf = v50;
          unsigned int v63 = "-[ADSessionManager _sendCommand:opportunistically:logEvent:doSendPreProcessing:doSendPostProcessing:]_block_invoke";
          __int16 v64 = 2112;
          id v65 = v30;
          __int16 v66 = 2112;
          uint64_t v67 = v14;
          uint64_t v16 = v29;
          __int16 v17 = "%s command %@ filtered for session %@";
          goto LABEL_31;
        }

        __int128 v22 = *(void **)(*(void *)(a1 + 32) + 168LL);
        if (!v22
          || ([v22 isEqualToString:v14] & 1) != 0
          || ([*(id *)(a1 + 32) _allowWhitelistedCommands:v13] & 1) != 0)
        {
          if (v8)
          {
            __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 160) valueForKey:v8]);
            __int128 v24 = v23;
            if (v23 && ([v23 isEqualToString:v14] & 1) == 0)
            {
              __int16 v45 = (os_log_s *)AFSiriLogContextSession;
              if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG))
              {
                id v47 = *(void **)(a1 + 40);
                *(_DWORD *)__int128 buf = v50;
                unsigned int v63 = "-[ADSessionManager _sendCommand:opportunistically:logEvent:doSendPreProcessing:doSendPostProcessin"
                      "g:]_block_invoke";
                __int16 v64 = 2112;
                id v65 = v47;
                __int16 v66 = 2112;
                uint64_t v67 = v14;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "%s command %@ does not belong to session %@",  buf,  0x20u);
              }

              goto LABEL_54;
            }
          }

          id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
          unsigned int v26 = [v25 isDictationHIPAACompliant];

          if (v26)
          {
            __int16 v27 = (os_log_s *)AFSiriLogContextSession;
            if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_54;
            }
            unsigned int v28 = *(void **)(a1 + 40);
            *(_DWORD *)__int128 buf = v50;
            unsigned int v63 = "-[ADSessionManager _sendCommand:opportunistically:logEvent:doSendPreProcessing:doSendPostProcessing:]_block_invoke";
            __int16 v64 = 2112;
            id v65 = v28;
            __int16 v66 = 2112;
            uint64_t v67 = v14;
            uint64_t v16 = v27;
            __int16 v17 = "%s HIPAA compliance for On-Device Dictation, not sending command %@ to session %@";
            goto LABEL_31;
          }

          id v31 = [*(id *)(a1 + 40) copy];

          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _mapADRequestIdToSessionRequestId:v53 forSession:v12]);
          if (v32) {
            [v31 setAceId:v32];
          }
          if (v8)
          {
            uint64_t v33 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _mapADRequestIdToSessionRequestId:v8 forSession:v12]);
            if (v33)
            {
              unsigned __int8 v34 = (void *)v33;
              [v31 setRefId:v33];
            }
          }

          [*(id *)(a1 + 32) _convertEmbeddedRequestIds:v31 originalCommand:*(void *)(a1 + 40) session:v12];
          if (*(_BYTE *)(a1 + 49)) {
            [*(id *)(a1 + 32) _logCommandToMetrics:v31 forSession:v12 outbound:1];
          }
          if (v54)
          {
            [v12 retryNakedCommandsIfNeeded];
            id v35 = v32;
            uint64_t v36 = ADCreateRequestLinkInfo(v53, 1LL);
            unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
            uint64_t v38 = ADCreateRequestLinkInfo(v35, 6LL);
            uint64_t v52 = v32;
            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);

            ADEmitRequestLinkEventMessage(v37, v39);
            __int128 v32 = v52;

            if (v51)
            {
              id v40 = v51;
              uint64_t v41 = ADCreateRequestLinkInfo(v53, 1LL);
              __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
              uint64_t v43 = ADCreateRequestLinkInfo(v40, 2LL);
              __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(v43);

              ADEmitRequestLinkEventMessage(v42, v44);
              __int128 v32 = v52;
            }
          }

          if (*(_BYTE *)(a1 + 50)) {
            [v12 doSendPreProcessing:v31];
          }
          [v12 sendCommand:v31 opportunistically:*(unsigned __int8 *)(a1 + 48)];
          if (v54) {
            [v12 beginRetryableRequest:v31];
          }
          if (*(_BYTE *)(a1 + 51)) {
            [v12 doSendPostProcessing:v31];
          }

          int v10 = v31;
        }

        else
        {
          uint64_t v46 = (os_log_s *)AFSiriLogContextSession;
          if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG))
          {
            __int16 v48 = *(void **)(a1 + 40);
            *(_DWORD *)__int128 buf = v50;
            unsigned int v63 = "-[ADSessionManager _sendCommand:opportunistically:logEvent:doSendPreProcessing:doSendPostProcessing:]_block_invoke";
            __int16 v64 = 2112;
            id v65 = v48;
            __int16 v66 = 2112;
            uint64_t v67 = v14;
            uint64_t v16 = v46;
            __int16 v17 = "%s not sending command %@ to session %@";
LABEL_31:
            uint32_t v18 = 32;
LABEL_32:
            _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v17, buf, v18);
          }
        }

void sub_1000D8EE8(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000D8FFC;
    block[3] = &unk_1004FC838;
    id v7 = *(id *)(a1 + 48);
    dispatch_async(v3, block);
  }

  else
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v9 = "-[ADSessionManager _sendCommand:opportunistically:logEvent:doSendPreProcessing:doSendPostProcessing:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Dropped command: %@", buf, 0x16u);
    }
  }

uint64_t sub_1000D8FFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D9008(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  SACFFetchScriptCommandClassIdentifier,  SACFFetchScriptResponseClassIdentifier,  0LL);
  uint64_t v3 = (void *)qword_100577CD0;
  qword_100577CD0 = (uint64_t)v2;
}

void sub_1000D9058(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained assistantSessionManager:*(void *)(a1 + 32) receivedError:*(void *)(a1 + 40) isRetryableError:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1000D909C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 96LL));
  [WeakRetained assistantSessionManager:*(void *)(a1 + 32) receivedError:*(void *)(a1 + 40) isRetryableError:0];
}

void sub_1000D90E0(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v2 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  SAAddResultObjectsClassIdentifier,  SAUIAppPunchOutClassIdentifier,  SACFFlowCommandClassIdentifier,  SADomainObjectCommitClassIdentifier,  SAIntentGroupHandleIntentClassIdentifier,  SARequestCompletedClassIdentifier,  SAExecuteCallbacksClassIdentifier,  0LL);
  uint64_t v3 = (void *)qword_100577CB8;
  qword_100577CB8 = (uint64_t)v2;

  uint64_t v4 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v5 = -[NSSet initWithObjects:]( v4,  "initWithObjects:",  SAClientSetupInfoClassIdentifier,  SASyncGetAnchorsResponseClassIdentifier,  SAGuidanceGuideUpdateClassIdentifier,  SAUIGetResponseAlternativesPlaybackClassIdentifier,  SASyncChunkAcceptedClassIdentifier,  0LL);
  uint64_t v6 = (void *)qword_100577CC0;
  qword_100577CC0 = (uint64_t)v5;
}

void sub_1000D91E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _resultObjectsTimerFired:*(void *)(a1 + 32)];
}

void *sub_1000D922C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0LL;

  id v4 = [*(id *)(a1 + 32) _languageCode];
  uint64_t v5 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 80LL);
    int v8 = 136315394;
    __int128 v9 = "-[ADSessionManager _languageCodeDidChange:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s language code changed to %@",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t result = *(void **)(a1 + 32);
  if (result[11]) {
    return [result _resetSessionsAndMakeQuiet:1];
  }
  return result;
}

void sub_1000D931C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_ad_connectionModeFromEnabledState"));

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 72))
  {
    uint64_t v3 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(v3 + 72), obj);
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 72) && [*(id *)(v4 + 88) count]) {
    [*(id *)(a1 + 32) _resetSessionsAndMakeQuiet:0];
  }
LABEL_7:
}

id sub_1000D93B4(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 48LL) = 2LL;
  return [*(id *)(a1 + 32) _updateSharedUserIdentifiers];
}

id sub_1000D93C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0LL;

  *(void *)(*(void *)(a1 + 32) + 48LL) = 2LL;
  return [*(id *)(a1 + 32) _updateSharedUserIdentifiers];
}

void sub_1000D9414(uint64_t a1)
{
}

void sub_1000D9420(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _cancelSynchronously:0];
    id WeakRetained = v2;
    *((void *)v2 + 7) = 0LL;
  }
}

NSString *sub_1000DBE74(NSString *a1)
{
  if (!a1) {
    return a1;
  }
  uint64_t v1 = a1;
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  Addressuint64_t String = BTDeviceGetAddressString(a1, v12, 248LL);
  if (!AddressString)
  {
    a1 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v12);
    return a1;
  }

  int v3 = AddressString;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315650;
    id v7 = "_ADBTDeviceGetAddress";
    __int16 v8 = 2048;
    __int128 v9 = v1;
    __int16 v10 = 1024;
    int v11 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed getting address from BTDevice %p (uint64_t result = %d).",  (uint8_t *)&v6,  0x1Cu);
  }

  return (NSString *)0LL;
}

void sub_1000DBF9C(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    __int16 v8 = "-[ADMobileBluetoothDeviceDataSource _fetchPairedDeviceAddresses]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    __int16 v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s     [%02tu] %@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1000DC070(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    __int16 v8 = "-[ADMobileBluetoothDeviceDataSource _fetchConnectedDeviceAddresses]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    __int16 v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s     [%02tu] %@", (uint8_t *)&v7, 0x20u);
  }
}

uint64_t sub_1000DE5F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000DE604(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDeviceDidInvalidate:") & 1) != 0) {
    [v3 bluetoothDeviceDidInvalidate:*(void *)(a1 + 32)];
  }
}

void sub_1000DE650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315906;
    id v15 = "-[ADMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]_block_invoke";
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = a3;
    __int16 v20 = 2112;
    uint64_t v21 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Got BTDevice %p and BTAccessoryManager %p for %@.",  buf,  0x2Au);
  }

  __int16 v8 = *(void **)(a1 + 40);
  __int16 v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DE8C4;
  block[3] = &unk_1004F0A70;
  id v11 = v8;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  dispatch_async(v9, block);
}

void sub_1000DE780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315906;
    id v15 = "-[ADMobileBluetoothDeviceProxy _accessBTDeviceAndAccessoryManagerUsingBlock:]_block_invoke_2";
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2048;
    uint64_t v19 = a3;
    __int16 v20 = 2112;
    uint64_t v21 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Got BTDevice %p and BTAccessoryManager %p for %@.",  buf,  0x2Au);
  }

  __int16 v8 = *(void **)(a1 + 40);
  __int16 v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DE8B0;
  block[3] = &unk_1004F0A70;
  id v11 = v8;
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  dispatch_async(v9, block);
}

uint64_t sub_1000DE8B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))(a1[4], a1[5], a1[6]);
}

uint64_t sub_1000DE8C4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16LL))(a1[4], a1[5], a1[6]);
}

void sub_1000DE8D8(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a2 || !a3)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)__int16 v20 = 136315138;
    *(void *)&void v20[4] = "_ADBTDeviceSetHeadphoneListeningMode";
    __int16 v8 = "%s Unable to set bluetooth device listening mode, found NULL handles";
    goto LABEL_8;
  }

  unint64_t v6 = a1[6];
  if (v6 <= 1)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    *(_DWORD *)__int16 v20 = 136315138;
    *(void *)&void v20[4] = "_ADBTDeviceSetHeadphoneListeningMode";
    __int16 v8 = "%s Unable to set bluetooth device listening mode to undefined mode";
LABEL_8:
    __int16 v9 = v7;
    uint32_t v10 = 12;
LABEL_9:
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, v20, v10);
    goto LABEL_15;
  }

  if (v6 - 3 >= 3) {
    uint64_t v11 = 1LL;
  }
  else {
    uint64_t v11 = (v6 - 1);
  }
  int v12 = BTAccessoryManagerSendControlCommand(a3, a2, 13LL, v11);
  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (!v12)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int16 v20 = 136315394;
      *(void *)&void v20[4] = "_ADBTDeviceSetHeadphoneListeningMode";
      *(_WORD *)&v20[12] = 2048;
      *(void *)&v20[14] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Changed headphone listening mode to %ld.",  v20,  0x16u);
      uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
    }

    goto LABEL_20;
  }

  int v14 = v12;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int16 v20 = 136315906;
    *(void *)&void v20[4] = "_ADBTDeviceSetHeadphoneListeningMode";
    *(_WORD *)&v20[12] = 2048;
    *(void *)&v20[14] = a2;
    *(_WORD *)&v20[22] = 2048;
    uint64_t v21 = a3;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = v14;
    __int16 v8 = "%s Unable to set listening mode for BTDevice %p via BTAccessoryManager %p (result = %d)";
    __int16 v9 = v13;
    uint32_t v10 = 38;
    goto LABEL_9;
  }

uint64_t sub_1000DEC08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1000DECF4(a2, a3);
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 136315650;
    __int16 v9 = "-[ADMobileBluetoothDeviceProxy _fetchHeadphoneListeningModeWithCompletion:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Fetched headphone listening mode %ld for %@.",  (uint8_t *)&v8,  0x20u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000DECF4(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
  {
    __int16 v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v16 = "_ADBTDeviceGetHeadphoneListeningMode";
      uint64_t v7 = "%s Unable to get bluetooth device listening mode, found NULL handles";
      int v8 = v10;
      uint32_t v9 = 12;
      goto LABEL_15;
    }

    return 0LL;
  }

  unsigned int v14 = 0;
  int ControlCommand = BTAccessoryManagerGetControlCommand(a2, a1, 13LL, 0LL, &v14);
  if (ControlCommand)
  {
    int v5 = ControlCommand;
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      __int16 v16 = "_ADBTDeviceGetHeadphoneListeningMode";
      __int16 v17 = 2048;
      uint64_t v18 = a1;
      __int16 v19 = 2048;
      uint64_t v20 = a2;
      __int16 v21 = 1024;
      int v22 = v5;
      uint64_t v7 = "%s Unable to determine listening mode for BTDevice %p via BTAccessoryManager %p (result = %d)";
      int v8 = v6;
      uint32_t v9 = 38;
LABEL_15:
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v7, buf, v9);
      return 0LL;
    }

    return 0LL;
  }

  if (v14 < 5) {
    uint64_t v11 = v14 + 1LL;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v16 = "_ADBTDeviceGetHeadphoneListeningMode";
    __int16 v17 = 2048;
    uint64_t v18 = a1;
    __int16 v19 = 2048;
    uint64_t v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Listening mode for BTDevice %p is %ld",  buf,  0x20u);
  }

  return v11;
}

void sub_1000DEED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = sub_1000DEFC4(a2, a3);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 136315650;
    uint32_t v9 = "-[ADMobileBluetoothDeviceProxy _fetchHeadphoneInEarDetectionStateWithCompletion:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Fetched headphone in-ear detection state %@ for %@.",  (uint8_t *)&v8,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000DEFC4(uint64_t a1, uint64_t a2)
{
  id v3 = 0LL;
  if (a1 && a2)
  {
    int v25 = 3;
    int v26 = 0;
    int v23 = 3;
    int v24 = 3;
    int v5 = BTAccessoryManagerGetInEarDetectionEnable(a2, a1, &v26);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        return 0LL;
      }
      *(_DWORD *)__int128 buf = 136315394;
      unsigned int v28 = "_ADBTDeviceGetHeadphoneInEarDetectionState";
      __int16 v29 = 1024;
      int v30 = v6;
      uint64_t v15 = "%s Failed getting in-ear detection enable flag %d";
LABEL_18:
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
      return 0LL;
    }

    int v9 = v26;
    if (v26 == -1)
    {
      int PrimaryBudSide = BTAccessoryManagerGetPrimaryBudSide(a2, a1, &v25);
      if (PrimaryBudSide)
      {
        int v14 = PrimaryBudSide;
        uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
        if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
          return 0LL;
        }
        *(_DWORD *)__int128 buf = 136315394;
        unsigned int v28 = "_ADBTDeviceGetHeadphoneInEarDetectionState";
        __int16 v29 = 1024;
        int v30 = v14;
        uint64_t v15 = "%s Failed getting primary earbud side %d";
        goto LABEL_18;
      }

      int v16 = BTAccessoryManagerGetInEarStatus(a2, a1, &v24, &v23);
      if (v16)
      {
        int v17 = v16;
        uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
        if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
          return 0LL;
        }
        *(_DWORD *)__int128 buf = 136315394;
        unsigned int v28 = "_ADBTDeviceGetHeadphoneInEarDetectionState";
        __int16 v29 = 1024;
        int v30 = v17;
        uint64_t v15 = "%s Failed getting primary and secondary in-ear status %d";
        goto LABEL_18;
      }

      int v12 = v25;
      int v9 = v26;
      int v10 = v23;
      int v11 = v24;
    }

    else
    {
      int v10 = 3;
      int v11 = 3;
      int v12 = 3;
    }

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1000DF204;
    v18[3] = &unk_1004F0BD0;
    int v19 = v9;
    int v20 = v12;
    int v21 = v11;
    int v22 = v10;
    id v3 = +[AFBluetoothHeadphoneInEarDetectionState newWithBuilder:]( &OBJC_CLASS___AFBluetoothHeadphoneInEarDetectionState,  "newWithBuilder:",  v18);
  }

  return v3;
}

void sub_1000DF204(_DWORD *a1, void *a2)
{
  id v9 = a2;
  [v9 setIsEnabled:a1[8] == -1];
  if (a1[8] == -1)
  {
    int v3 = a1[9];
    if (v3 == 1) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = 2LL * (v3 == 2);
    }
    [v9 setPrimaryEarbudSide:v4];
    uint64_t v5 = a1[10];
    else {
      uint64_t v6 = 3 - v5;
    }
    [v9 setPrimaryInEarStatus:v6];
    uint64_t v7 = a1[11];
    else {
      uint64_t v8 = 3 - v7;
    }
    [v9 setSecondaryInEarStatus:v8];
  }
}

void sub_1000DF2A4(uint64_t a1, NSString *a2, uint64_t a3)
{
  uint64_t v4 = (void *)&unk_1003C9000;
  if (!a2)
  {
    id v11 = 0LL;
    goto LABEL_57;
  }

  uint64_t v7 = sub_1000DBE74(a2);
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v83 = 0LL;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v70 = 0u;
  memset(buf, 0, sizeof(buf));
  int Name = BTDeviceGetName(a2, buf, 248LL);
  if (Name)
  {
    int v9 = Name;
    int v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v63 = 136315650;
      __int16 v64 = "_ADBTDeviceGetName";
      __int16 v65 = 2048;
      __int16 v66 = a2;
      __int16 v67 = 1024;
      int v68 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Failed getting name from BTDevice %p (uint64_t result = %d).",  v63,  0x1Cu);
    }

    id v51 = 0LL;
  }

  else
  {
    id v51 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", buf);
  }

  *(_DWORD *)unsigned int v63 = 0;
  uint64_t v62 = 0LL;
  int v61 = 0;
  int DeviceId = BTDeviceGetDeviceId(a2, v63, (char *)&v62 + 4, &v62, &v61);
  BOOL v13 = DeviceId != 0;
  if (DeviceId)
  {
    int v14 = DeviceId;
    uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&_BYTE buf[24] = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Failed getting vendor id and product id from BTDevice %p (uint64_t result = %d).",  buf,  0x1Cu);
    }
  }

  unsigned int v60 = 0;
  int IsAppleAudioDevice = BTDeviceIsAppleAudioDevice(a2, &v60);
  if (IsAppleAudioDevice)
  {
    int v17 = IsAppleAudioDevice;
    uint64_t v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&_BYTE buf[24] = v17;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Failed getting vendor id and product id from BTDevice %p (uint64_t result = %d).",  buf,  0x1Cu);
    }

    BOOL v13 = 1;
  }

  uint64_t v59 = 0LL;
  unsigned int v58 = 0;
  int AACPCapabilityInteger = BTAccessoryManagerGetAACPCapabilityInteger(a3, a2, 96LL, &v58);
  int v20 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (v58) {
      BOOL v21 = AACPCapabilityInteger == 0;
    }
    else {
      BOOL v21 = 0;
    }
    *(_DWORD *)__int128 buf = 136315906;
    *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = AACPCapabilityInteger == 0;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = 96;
    *(_WORD *)&_BYTE buf[24] = 1024;
    *(_DWORD *)&buf[26] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s GetJustSiriAACPCapability result: %d, AACP capability bit: %d,  AACP capability supported: %d",  buf,  0x1Eu);
  }

  if (a3)
  {
    int FeatureCapability = BTAccessoryManagerGetFeatureCapability(a3, a2, 1LL, (char *)&v59 + 4);
    if (FeatureCapability)
    {
      int v23 = FeatureCapability;
      int v24 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315906;
        *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = a3;
        LOWORD(v70) = 1024;
        *(_DWORD *)((char *)&v70 + 2) = v23;
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Failed getting InEar capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
      }

      BOOL v13 = 1;
    }

    int v25 = BTAccessoryManagerGetFeatureCapability(a3, a2, 22LL, &v59);
    if (v25)
    {
      int v26 = v25;
      __int16 v27 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315906;
        *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = a2;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&_BYTE buf[24] = a3;
        LOWORD(v70) = 1024;
        *(_DWORD *)((char *)&v70 + 2) = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%s Failed getting DoAP capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
      }

      BOOL v13 = 1;
    }
  }

  unsigned int v58 = 0;
  int v28 = BTAccessoryManagerGetFeatureCapability(a3, a2, 16LL, &v58);
  if (v28)
  {
    int v29 = v28;
    int v30 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = a3;
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v29;
      _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s Failed getting ANC capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
    }

    BOOL v13 = 1;
  }

  unsigned int v57 = 0;
  int v31 = BTAccessoryManagerGetFeatureCapability(a3, a2, 17LL, &v57);
  if (v31)
  {
    int v32 = v31;
    uint64_t v33 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = a3;
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v32;
      _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%s Failed getting Transparency capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
    }

    BOOL v13 = 1;
  }

  unsigned __int8 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u,%u",  HIDWORD(v62),  v62));
  int v35 = AFIsH2Headset();

  if (v58 == -1) {
    int v36 = v35;
  }
  else {
    int v36 = 0;
  }
  if (v57 == -1) {
    int v37 = v36;
  }
  else {
    int v37 = 0;
  }
  int v56 = 0;
  int v38 = BTAccessoryManagerGetFeatureCapability(a3, a2, 26LL, &v56);
  if (v38)
  {
    int v39 = v38;
    id v40 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = a3;
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v39;
      _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%s Failed getting Software Volume capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
    }

    BOOL v13 = 1;
  }

  unsigned int v55 = 0;
  int AnnounceMessagesSupport = BTAccessoryManagerGetAnnounceMessagesSupport(a3, a2, &v55);
  if (AnnounceMessagesSupport)
  {
    int v42 = AnnounceMessagesSupport;
    uint64_t v43 = (os_log_s *)AFSiriLogContextDaemon;
    __int128 v44 = v51;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = a3;
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = v42;
      _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%s Failed getting Announce Messages capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
    }

    int v54 = 0;
    int AnnounceCallsSupport = BTAccessoryManagerGetAnnounceCallsSupport(a3, a2, &v54);
    if (!AnnounceCallsSupport) {
      goto LABEL_55;
    }
    goto LABEL_53;
  }

  int v54 = 0;
  int AnnounceCallsSupport = BTAccessoryManagerGetAnnounceCallsSupport(a3, a2, &v54);
  __int128 v44 = v51;
  if (AnnounceCallsSupport)
  {
LABEL_53:
    uint64_t v46 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315906;
      *(void *)&uint8_t buf[4] = "_ADBTDeviceGetDeviceInfo";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = a3;
      LOWORD(v70) = 1024;
      *(_DWORD *)((char *)&v70 + 2) = AnnounceCallsSupport;
      _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "%s Failed getting Announce Calls capability from BTDevice %p via BTAccessoryManager %p (uint64_t result = %d).",  buf,  0x26u);
    }

    goto LABEL_55;
  }

  if (!v13)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    uint64_t v4 = &unk_1003C9000;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_1000DFBE4;
    *(void *)&_BYTE buf[24] = &unk_1004F0BB0;
    id v47 = v52;
    *(void *)&__int128 v70 = v52;
    *((void *)&v70 + 1) = v51;
    *(void *)&__int128 v71 = __PAIR64__(v62, HIDWORD(v62));
    *((void *)&v71 + 1) = __PAIR64__(HIDWORD(v59), v60);
    *(void *)&__int128 v72 = __PAIR64__(v55, v59);
    BYTE8(v73) = 0;
    *((void *)&v72 + 1) = __PAIR64__(v57, v58);
    LODWORD(v73) = v37 << 31 >> 31;
    DWORD1(v73) = v54;
    BYTE9(v73) = v35;
    id v11 = +[AFBluetoothDeviceInfo newWithBuilder:](&OBJC_CLASS___AFBluetoothDeviceInfo, "newWithBuilder:", buf);

    goto LABEL_56;
  }

void sub_1000DFBE4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setAddress:v3];
  [v4 setName:*(void *)(a1 + 40)];
  [v4 setVendorID:*(unsigned int *)(a1 + 48)];
  [v4 setProductID:*(unsigned int *)(a1 + 52)];
  [v4 setIsAdvancedAppleAudioDevice:*(_DWORD *)(a1 + 56) == -1];
  [v4 setSupportsInEarDetection:*(_DWORD *)(a1 + 60) == -1];
  [v4 setSupportsVoiceTrigger:*(_DWORD *)(a1 + 64) == -1];
  [v4 setSupportsSpokenNotification:*(_DWORD *)(a1 + 68) == -1];
  [v4 setSupportsJustSiri:*(unsigned __int8 *)(a1 + 88)];
  [v4 setSupportsListeningModeANC:*(_DWORD *)(a1 + 72) == -1];
  [v4 setSupportsListeningModeTransparency:*(_DWORD *)(a1 + 76) == -1];
  [v4 setSupportsListeningModeAutomatic:*(_DWORD *)(a1 + 80) == -1];
  [v4 setSupportsAnnounceCall:*(_DWORD *)(a1 + 84) == -1];
  [v4 setSupportsConversationAwareness:*(unsigned __int8 *)(a1 + 89)];
  [v4 setSupportsPersonalVolume:*(unsigned __int8 *)(a1 + 89)];
}

id sub_1000DFD08(uint64_t a1, void *a2)
{
  return [a2 setDeviceUID:*(void *)(*(void *)(a1 + 32) + 64)];
}

void sub_1000DFD18(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDevice:headphoneListeningModeDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothDevice:a1[4] headphoneListeningModeDidChangeFrom:a1[5] to:a1[6]];
  }
}

void sub_1000DFD68(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDevice:headphoneInEarDetectionStateDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothDevice:a1[4] headphoneInEarDetectionStateDidChangeFrom:a1[5] to:a1[6]];
  }
}

void sub_1000DFDB8(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDevice:deviceInfoDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothDevice:a1[4] deviceInfoDidChangeFrom:a1[5] to:a1[6]];
  }
}

void sub_1000DFE08(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1000DFE78;
  v2[3] = &unk_1004F08B0;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 _getDeviceInfo:v2];
}

void sub_1000DFE78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 supportsPersonalVolume])
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000DFFE8;
    v9[3] = &unk_1004F09B8;
    id v4 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    id v11 = v4;
    [v10 _accessBTDeviceAndAccessoryManagerUsingBlock:v9];
  }

  else
  {
    uint64_t v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v5;
      *(_DWORD *)__int128 buf = 136315394;
      BOOL v13 = "-[ADMobileBluetoothDeviceProxy _getPersonalVolume:]_block_invoke";
      __int16 v14 = 1024;
      unsigned int v15 = [v3 productID];
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device '%d' does not support personal volume, ignoring request to set.",  buf,  0x12u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      id v7 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F09F8);
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    }
  }
}

void sub_1000DFFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    int ControlCommand = BTAccessoryManagerGetControlCommand(a3, a2, 38LL, 0LL, &v19);
    if (ControlCommand)
    {
      int v7 = ControlCommand;
      uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315906;
        BOOL v21 = "_ADBTDeviceGetPersonalVolume";
        __int16 v22 = 2048;
        *(void *)int v23 = a2;
        *(_WORD *)&v23[8] = 2048;
        *(void *)&v23[10] = a3;
        __int16 v24 = 1024;
        int v25 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Unable to get personal volume mode for BTDevice %p via BTAccessoryManager %p (uint64_t result = %d)",  buf,  0x26u);
      }

      id v9 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0BF0);
    }

    else
    {
      id v12 = sub_1000E0330(v19);
      id v9 = (id)objc_claimAutoreleasedReturnValue(v12);
      BOOL v13 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        BOOL v21 = "_ADBTDeviceGetPersonalVolume";
        __int16 v22 = 1024;
        *(_DWORD *)int v23 = v19;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Adaptive volume mode is %d.", buf, 0x12u);
      }
    }

    id v11 = v9;
  }

  else
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      BOOL v21 = "_ADBTDeviceGetPersonalVolume";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to get bluetooth device personal volume mode, found NULL handles",  buf,  0xCu);
    }

    id v11 =  +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0BF0);
  }

  __int16 v14 = v11;

  id v15 = [v14 status];
  int v16 = (os_log_s *)AFSiriLogContextDaemon;
  if (v15 == (id)1)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      BOOL v21 = "-[ADMobileBluetoothDeviceProxy _getPersonalVolume:]_block_invoke";
      __int16 v22 = 1024;
      *(_DWORD *)int v23 = 0;
      *(_WORD *)&void v23[4] = 2112;
      *(void *)&v23[6] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Got personal volume mode is %d for %@.",  buf,  0x1Cu);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315650;
    BOOL v21 = "-[ADMobileBluetoothDeviceProxy _getPersonalVolume:]_block_invoke_3";
    __int16 v22 = 2048;
    *(void *)int v23 = a2;
    *(_WORD *)&v23[8] = 2048;
    *(void *)&v23[10] = a3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Unable to get personal volume mode for BTDevice %p via BTAccessoryManager %p",  buf,  0x20u);
  }

  uint64_t v18 = *(void *)(a1 + 40);
  if (v18) {
    (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v14);
  }
}

void sub_1000E02F8(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  id v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 3LL);
}

id sub_1000E0330(int a1)
{
  if (!a1)
  {
LABEL_9:
    id v2 = &stru_1004F0BF0;
    return  +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  v2,  *(void *)v5,  *(void *)&v5[8],  *(void *)&v5[16],  v6,  v7);
  }

  if (a1 == 2)
  {
    *(void *)uint64_t v5 = _NSConcreteStackBlock;
    *(void *)&v5[8] = 3221225472LL;
    *(void *)&v5[16] = sub_1000E048C;
    uint64_t v6 = &unk_1004F0C10;
    LOBYTE(v7) = 0;
    goto LABEL_6;
  }

  if (a1 != 1)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)&void v5[4] = "_BTAccessoryGenericConfigModeToAFBluetoothDeviceBooleanSettingResponse";
      *(_WORD *)&v5[12] = 1024;
      *(_DWORD *)&v5[14] = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Bluetooth device returned unexpected mode %d",  v5,  0x12u);
    }

    goto LABEL_9;
  }

  *(void *)uint64_t v5 = _NSConcreteStackBlock;
  *(void *)&v5[8] = 3221225472LL;
  *(void *)&v5[16] = sub_1000E048C;
  uint64_t v6 = &unk_1004F0C10;
  LOBYTE(v7) = 1;
LABEL_6:
  id v2 = (Block_layout *)v5;
  return  +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  v2,  *(void *)v5,  *(void *)&v5[8],  *(void *)&v5[16],  v6,  v7);
}

void sub_1000E048C(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32)) {
    uint64_t v2 = 2LL;
  }
  else {
    uint64_t v2 = 1LL;
  }
  id v3 = a2;
  [v3 setValue:v2];
  [v3 setStatus:1];
}

void sub_1000E04DC(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 2LL);
}

void sub_1000E0514(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1000E0584;
  v2[3] = &unk_1004F08B0;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 _getDeviceInfo:v2];
}

void sub_1000E0584(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 supportsConversationAwareness])
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000E06F4;
    v9[3] = &unk_1004F09B8;
    id v4 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    id v11 = v4;
    [v10 _accessBTDeviceAndAccessoryManagerUsingBlock:v9];
  }

  else
  {
    uint64_t v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v5;
      *(_DWORD *)__int128 buf = 136315394;
      BOOL v13 = "-[ADMobileBluetoothDeviceProxy _getConversationAwareness:]_block_invoke";
      __int16 v14 = 1024;
      unsigned int v15 = [v3 productID];
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device '%d' does not support conversation awareness, ignoring request to get mode.",  buf,  0x12u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      id v7 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F09D8);
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    }
  }
}

void sub_1000E06F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    int ControlCommand = BTAccessoryManagerGetControlCommand(a3, a2, 40LL, 0LL, &v19);
    if (ControlCommand)
    {
      int v7 = ControlCommand;
      uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315906;
        BOOL v21 = "_ADBTDeviceGetConversationAwareness";
        __int16 v22 = 2048;
        *(void *)int v23 = a2;
        *(_WORD *)&v23[8] = 2048;
        *(void *)&v23[10] = a3;
        __int16 v24 = 1024;
        int v25 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Unable to get conversation awareness mode for BTDevice %p via BTAccessoryManager %p (uint64_t result = %d)",  buf,  0x26u);
      }

      id v9 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0BF0);
    }

    else
    {
      id v12 = sub_1000E0330(v19);
      id v9 = (id)objc_claimAutoreleasedReturnValue(v12);
      BOOL v13 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        BOOL v21 = "_ADBTDeviceGetConversationAwareness";
        __int16 v22 = 1024;
        *(_DWORD *)int v23 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Conversation awareness mode is %d.",  buf,  0x12u);
      }
    }

    id v11 = v9;
  }

  else
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      BOOL v21 = "_ADBTDeviceGetConversationAwareness";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to set bluetooth device conversation awareness mode, found NULL handles",  buf,  0xCu);
    }

    id v11 =  +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0BF0);
  }

  __int16 v14 = v11;

  id v15 = [v14 status];
  int v16 = (os_log_s *)AFSiriLogContextDaemon;
  if (v15 == (id)1)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      BOOL v21 = "-[ADMobileBluetoothDeviceProxy _getConversationAwareness:]_block_invoke";
      __int16 v22 = 1024;
      *(_DWORD *)int v23 = 0;
      *(_WORD *)&void v23[4] = 2112;
      *(void *)&v23[6] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Got conversation awareness mode is %d for %@.",  buf,  0x1Cu);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315650;
    BOOL v21 = "-[ADMobileBluetoothDeviceProxy _getConversationAwareness:]_block_invoke_3";
    __int16 v22 = 2048;
    *(void *)int v23 = a2;
    *(_WORD *)&v23[8] = 2048;
    *(void *)&v23[10] = a3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s Unable to get conversation awareness mode for BTDevice %p via BTAccessoryManager %p",  buf,  0x20u);
  }

  uint64_t v18 = *(void *)(a1 + 40);
  if (v18) {
    (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v14);
  }
}

void sub_1000E0A04(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 3LL);
}

void sub_1000E0A3C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1000E0AB4;
  v2[3] = &unk_1004F0970;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  char v5 = *(_BYTE *)(a1 + 48);
  id v4 = v1;
  [v3 _getDeviceInfo:v2];
}

void sub_1000E0AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 supportsPersonalVolume])
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000E0C2C;
    v9[3] = &unk_1004F0928;
    char v12 = *(_BYTE *)(a1 + 48);
    id v4 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    id v11 = v4;
    [v10 _accessBTDeviceAndAccessoryManagerUsingBlock:v9];
  }

  else
  {
    char v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v5;
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v14 = "-[ADMobileBluetoothDeviceProxy _setPersonalVolume:completion:]_block_invoke";
      __int16 v15 = 1024;
      unsigned int v16 = [v3 productID];
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device '%d' does not support personal volume, ignoring request to set.",  buf,  0x12u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      id v7 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0990);
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    }
  }
}

void sub_1000E0C2C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a2 || !a3)
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v22 = 136315138;
      *(void *)&void v22[4] = "_ADBTDeviceSetPersonalVolume";
      id v11 = "%s Unable to set bluetooth device listening mode, found NULL handles";
      char v12 = v14;
      uint32_t v13 = 12;
      goto LABEL_22;
    }

void sub_1000E0F54(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 3LL);
}

void sub_1000E0F8C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_1000E1004;
  v2[3] = &unk_1004F0970;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  char v5 = *(_BYTE *)(a1 + 48);
  id v4 = v1;
  [v3 _getDeviceInfo:v2];
}

void sub_1000E1004(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 supportsConversationAwareness])
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000E117C;
    v9[3] = &unk_1004F0928;
    char v12 = *(_BYTE *)(a1 + 48);
    id v4 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    id v11 = v4;
    [v10 _accessBTDeviceAndAccessoryManagerUsingBlock:v9];
  }

  else
  {
    char v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = v5;
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v14 = "-[ADMobileBluetoothDeviceProxy _setConversationAwareness:completion:]_block_invoke";
      __int16 v15 = 1024;
      unsigned int v16 = [v3 productID];
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device '%d' does not support conversation awareness, ignoring request to set.",  buf,  0x12u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6)
    {
      id v7 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0948);
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
    }
  }
}

void sub_1000E117C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a2 || !a3)
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v22 = 136315138;
      *(void *)&void v22[4] = "_ADBTDeviceSetConversationAwareness";
      id v11 = "%s Unable to set bluetooth device listening mode, found NULL handles";
      char v12 = v14;
      uint32_t v13 = 12;
      goto LABEL_22;
    }

void sub_1000E14A4(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 3LL);
}

void sub_1000E14DC(void *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000E1554;
  v3[3] = &unk_1004F0900;
  uint64_t v2 = (void *)a1[5];
  uint64_t v1 = a1[6];
  id v4 = (id)a1[4];
  uint64_t v6 = v1;
  id v5 = v2;
  [v4 _getDeviceInfo:v3];
}

void sub_1000E1554(void *a1, void *a2)
{
  id v3 = a2;
  if (([v3 supportsListeningModeANC] & 1) != 0
    || ([v3 supportsListeningModeTransparency] & 1) != 0
    || [v3 supportsListeningModeAutomatic])
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1000E16E4;
    v10[3] = &unk_1004F08D8;
    id v4 = (void *)a1[5];
    uint64_t v5 = a1[6];
    id v11 = (id)a1[4];
    uint64_t v13 = v5;
    id v12 = v4;
    [v11 _changeHeadphoneListeningMode:v5 completion:v10];
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  1802LL,  0LL));
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[6];
      *(_DWORD *)__int128 buf = 136315394;
      id v15 = "-[ADMobileBluetoothDeviceProxy _setHeadphoneListeningMode:completion:]_block_invoke_2";
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Unable to set headphoneListeningMode to %ld, device does not support this mode",  buf,  0x16u);
    }

    uint64_t v8 = a1[5];
    if (v8) {
      (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v6);
    }
  }
}

void sub_1000E16E4(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) _updateHeadphoneListeningMode:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_1000E1734(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[6])
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    _DWORD v2[2] = sub_1000E17C8;
    v2[3] = &unk_1004F08B0;
    void v2[4] = v1;
    id v3 = *(id *)(a1 + 40);
    [v1 _getDeviceInfo:v2];
  }

void sub_1000E17C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 supportsListeningModeANC] & 1) != 0
    || ([v3 supportsListeningModeTransparency] & 1) != 0
    || [v3 supportsListeningModeAutomatic])
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_1000E1884;
    v5[3] = &unk_1004F9450;
    id v4 = *(void **)(a1 + 40);
    id v6 = *(id *)(a1 + 32);
    id v7 = v4;
    [v6 _fetchHeadphoneListeningModeWithCompletion:v5];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_1000E1884(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E18BC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[5])
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    _DWORD v2[2] = sub_1000E1950;
    v2[3] = &unk_1004F08B0;
    void v2[4] = v1;
    id v3 = *(id *)(a1 + 40);
    [v1 _getDeviceInfo:v2];
  }

void sub_1000E1950(uint64_t a1, void *a2)
{
  if ([a2 supportsInEarDetection])
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1000E19EC;
    v4[3] = &unk_1004FC9B8;
    id v3 = *(void **)(a1 + 40);
    id v5 = *(id *)(a1 + 32);
    id v6 = v3;
    [v5 _fetchHeadphoneInEarDetectionStateWithCompletion:v4];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1000E19EC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _updateHeadphoneInEarDetectionState:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E1A3C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _updateDeviceInfo:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E1A8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _updateDeviceInfo:v3];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    id v7 = "-[ADMobileBluetoothDeviceProxy _reload:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Reloaded device info %@ for %@.",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_1000E1B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _updateHeadphoneInEarDetectionState:v3];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    id v7 = "-[ADMobileBluetoothDeviceProxy _reload:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Reloaded headphone in-ear detection state %@ for %@.",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_1000E1C4C(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    id v7 = "-[ADMobileBluetoothDeviceProxy _reload:]_block_invoke";
    __int16 v8 = 2048;
    uint64_t v9 = a2;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Reloaded headphone listening mode %ld for %@.",  (uint8_t *)&v6,  0x20u);
  }

id sub_1000E1D28(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1000E1D30(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

id sub_1000E1D3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1000E1D90(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315394;
    id v7 = "-[ADMobileBluetoothDeviceProxy getHeadGestures:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Head gestures not supported for %@...",  (uint8_t *)&v6,  0x16u);
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v4 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0860);
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }

void sub_1000E1E80(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 3LL);
}

id sub_1000E1EB8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getPersonalVolume:*(void *)(a1 + 40)];
}

id sub_1000E1EC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getConversationAwareness:*(void *)(a1 + 40)];
}

void sub_1000E1ED0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315394;
    id v7 = "-[ADMobileBluetoothDeviceProxy setHeadGestures:completion:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Head gestures not supported for %@...",  (uint8_t *)&v6,  0x16u);
  }

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v4 = +[AFBluetoothDeviceBooleanSettingResponse newWithBuilder:]( &OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse,  "newWithBuilder:",  &stru_1004F0840);
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }

void sub_1000E1FC0(id a1, AFBluetoothDeviceBooleanSettingResponseMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothDeviceBooleanSettingResponseMutating setValue:](v2, "setValue:", 0LL);
  -[AFBluetoothDeviceBooleanSettingResponseMutating setStatus:](v2, "setStatus:", 3LL);
}

id sub_1000E1FF8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setPersonalVolume:*(unsigned __int8 *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

id sub_1000E2008(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setConversationAwareness:*(unsigned __int8 *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

id sub_1000E2018(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setHeadphoneListeningMode:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

id sub_1000E2028(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getHeadphoneListeningMode:*(void *)(a1 + 40)];
}

id sub_1000E2034(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getHeadphoneInEarDetectionState:*(void *)(a1 + 40)];
}

id sub_1000E2040(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getDeviceInfo:*(void *)(a1 + 40)];
}

uint64_t sub_1000E204C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E205C(uint64_t a1)
{
}

void sub_1000E2064(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 32LL);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), v2);
  }

  else
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v13 = "-[ADMobileBluetoothDeviceProxy deviceInfo]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Using slow path...", buf, 0xCu);
    }

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    dispatch_semaphore_t v5 = dispatch_semaphore_create(0LL);
    uint64_t v6 = *(void *)(a1[6] + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    __int16 v8 = (void *)a1[4];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1000E219C;
    v9[3] = &unk_1004F0820;
    CFAbsoluteTime v11 = Current;
    __int128 v10 = *(_OWORD *)(a1 + 5);
    [v8 _getDeviceInfo:v9];
  }

void sub_1000E219C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    dispatch_semaphore_t v5 = v4;
    CFAbsoluteTime v6 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 48);
    int v10 = 136315394;
    CFAbsoluteTime v11 = "-[ADMobileBluetoothDeviceProxy deviceInfo]_block_invoke";
    __int16 v12 = 2048;
    CFAbsoluteTime v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Slow path took %f seconds.",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
  __int16 v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v3;
  id v9 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

id sub_1000E22A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reload:0];
}

id sub_1000E22B4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reload:1];
}

id sub_1000E22C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateHeadphoneListeningMode:*(void *)(a1 + 40)];
}

id sub_1000E22CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateHeadphoneInEarDetectionState:*(void *)(a1 + 40)];
}

id sub_1000E22D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateDeviceInfo:*(void *)(a1 + 40)];
}

void sub_1000E22E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v8 = "-[ADMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Loading device info for %@...", buf, 0x16u);
  }

  id v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000E23E4;
  v5[3] = &unk_1004F07F8;
  id v6 = v4;
  [v6 _fetchDeviceInfoWithCompletion:v5];
}

void sub_1000E23E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _updateDeviceInfo:v3];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    uint64_t v7 = "-[ADMobileBluetoothDeviceProxy initWithDeviceUID:dataSource:queue:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Loaded device info %@ for %@.",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_1000E24C4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v8 = "-[ADMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Loading device info for %@...", buf, 0x16u);
  }

  id v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000E25C4;
  v5[3] = &unk_1004F07F8;
  id v6 = v4;
  [v6 _fetchDeviceInfoWithCompletion:v5];
}

void sub_1000E25C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _updateDeviceInfo:v3];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    uint64_t v7 = "-[ADMobileBluetoothDeviceProxy initWithAddress:dataSource:queue:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Loaded device info %@ for %@.",  (uint8_t *)&v6,  0x20u);
  }
}

uint64_t sub_1000E35E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E35EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDeviceDidInvalidate:") & 1) != 0) {
    [v3 bluetoothWirelessSplitterSessionDidInvalidate:*(void *)(a1 + 32)];
  }
}

void sub_1000E3638(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v12 = "-[ADMobileBluetoothWirelessSplitterSessionProxy _accessBTLocalDeviceUsingBlock:]_block_invoke";
    __int16 v13 = 2048;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Got BTLocalDevice %p for %@.", buf, 0x20u);
  }

  int v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000E3758;
  v8[3] = &unk_1004F0B38;
  id v9 = v6;
  uint64_t v10 = a2;
  dispatch_async(v7, v8);
}

uint64_t sub_1000E3758(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1000E3768(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (a2)
  {
    int v23 = 0;
    int IsSharingEnabled = BTLocalDeviceIsSharingEnabled(a2, &v23);
    if (IsSharingEnabled)
    {
      int v5 = IsSharingEnabled;
      int v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_4:
        id v2 = 0LL;
        goto LABEL_11;
      }

      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "_ADBTLocalDeviceGetWirelessSplitterSessionInfo";
      WORD2(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 6) = v5;
      id v9 = "%s Failed getting sharing enable flag %d";
LABEL_25:
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v9, (uint8_t *)buf, 0x12u);
      goto LABEL_4;
    }

    if (v23)
    {
      int v44 = 0;
      uint64_t v43 = 0LL;
      unint64_t v22 = 0LL;
      int SharingAddresses = BTLocalDeviceGetSharingAddresses(v2, &v43, &v22, 2LL);
      if (SharingAddresses)
      {
        int v8 = SharingAddresses;
        int v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
          goto LABEL_4;
        }
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "_ADBTLocalDeviceGetWirelessSplitterSessionInfo";
        WORD2(buf[1]) = 1024;
        *(_DWORD *)((char *)&buf[1] + 6) = v8;
        id v9 = "%s Failed getting sharing device addresses %d";
        goto LABEL_25;
      }

      if (v22)
      {
        uint64_t v14 = objc_alloc(&OBJC_CLASS___NSMutableArray);
        uint64_t v10 = -[NSMutableArray initWithCapacity:](v14, "initWithCapacity:", v22);
        if (v22)
        {
          unint64_t v15 = 0LL;
          uint64_t v16 = &v43;
          do
          {
            int v20 = *(_DWORD *)v16;
            __int16 v21 = *((_WORD *)v16 + 2);
            uint64_t v42 = 0LL;
            __int128 v40 = 0u;
            __int128 v41 = 0u;
            __int128 v38 = 0u;
            __int128 v39 = 0u;
            __int128 v36 = 0u;
            __int128 v37 = 0u;
            __int128 v34 = 0u;
            __int128 v35 = 0u;
            __int128 v32 = 0u;
            __int128 v33 = 0u;
            __int128 v30 = 0u;
            __int128 v31 = 0u;
            __int128 v29 = 0u;
            memset(buf, 0, sizeof(buf));
            if (BTDeviceAddressToString(&v20, buf, 248LL))
            {
              uint64_t v17 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v24 = 136315394;
                int v25 = "_ADBTLocalDeviceGetWirelessSplitterSessionInfo";
                __int16 v26 = 1024;
                int v27 = 0;
                _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Failed converting address from BTDeviceAddress (uint64_t result = %d).",  v24,  0x12u);
              }
            }

            else
            {
              uint64_t v18 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", buf);
              if (v18)
              {
                int v19 = v18;
                -[NSMutableArray addObject:](v10, "addObject:", v18);
              }
            }

            ++v15;
            uint64_t v16 = (uint64_t *)((char *)v16 + 6);
          }

          while (v15 < v22);
        }
      }

      else
      {
        uint64_t v10 = (NSMutableArray *)&__NSArray0__struct;
      }
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    buf[0] = _NSConcreteStackBlock;
    buf[1] = 3221225472LL;
    buf[2] = sub_1000E3B08;
    buf[3] = &unk_1004F0C38;
    DWORD2(v29) = v23;
    *(void *)&__int128 v29 = v10;
    uint64_t v11 = v10;
    id v2 = +[AFBluetoothWirelessSplitterSessionInfo newWithBuilder:]( &OBJC_CLASS___AFBluetoothWirelessSplitterSessionInfo,  "newWithBuilder:",  buf);
  }

void sub_1000E3B08(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 40)) {
    uint64_t v3 = 2LL;
  }
  else {
    uint64_t v3 = 1LL;
  }
  id v4 = a2;
  [v4 setState:v3];
  [v4 setDeviceAddresses:*(void *)(a1 + 32)];
}

void sub_1000E3B5C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothWirelessSplitterSession:sessionInfoDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothWirelessSplitterSession:a1[4] sessionInfoDidChangeFrom:a1[5] to:a1[6]];
  }
}

void sub_1000E3BAC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _updateWirelessSplitterSessionInfo:v4];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E3BFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _updateWirelessSplitterSessionInfo:v3];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    uint64_t v7 = "-[ADMobileBluetoothWirelessSplitterSessionProxy _reload:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Reloaded Wireless Splitter session info %@ for %@.",  (uint8_t *)&v6,  0x20u);
  }
}

id sub_1000E3CDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1000E3CE4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) removeObject:*(void *)(a1 + 40)];
}

id sub_1000E3CF0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

id sub_1000E3D44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getWirelessSplitterSessionInfo:*(void *)(a1 + 40)];
}

void *sub_1000E3D50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[5]) {
    return _[result _reload:1];
  }
  return result;
}

id sub_1000E3D6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _reload:1];
}

id sub_1000E3D78(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateWirelessSplitterSessionInfo:*(void *)(a1 + 40)];
}

void sub_1000E3D84(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v8 = "-[ADMobileBluetoothWirelessSplitterSessionProxy initWithDataSource:queue:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Loading Wireless Splitter session info for %@...",  buf,  0x16u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000E3E84;
  v5[3] = &unk_1004F0A98;
  id v6 = v4;
  [v6 _fetchWirelessSplitterSessionInfoWithCompletion:v5];
}

void sub_1000E3E84(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) _updateWirelessSplitterSessionInfo:v3];
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    uint64_t v7 = "-[ADMobileBluetoothWirelessSplitterSessionProxy initWithDataSource:queue:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Loaded Wireless Splitter session info %@ for %@.",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_1000E3F64(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v10 = "-[ADMobileBluetoothDeviceDataSource getPairedDevicesWithCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_group_s **)(v3 + 48);
  int v6 = *(dispatch_queue_s **)(v3 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000E4068;
  v7[3] = &unk_1004FD990;
  void v7[4] = v3;
  id v8 = v4;
  dispatch_group_notify(v5, v6, v7);
}

void sub_1000E4068(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _pairedDeviceProxies]);
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADMobileBluetoothDeviceDataSource getPairedDevicesWithCompletion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s pairedDevices = %@", (uint8_t *)&v4, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E4148(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v10 = "-[ADMobileBluetoothDeviceDataSource getConnectedDevicesWithCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_group_s **)(v3 + 48);
  __int16 v6 = *(dispatch_queue_s **)(v3 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000E424C;
  v7[3] = &unk_1004FD990;
  void v7[4] = v3;
  id v8 = v4;
  dispatch_group_notify(v5, v6, v7);
}

void sub_1000E424C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _connectedDeviceProxies]);
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADMobileBluetoothDeviceDataSource getConnectedDevicesWithCompletion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s connectedDevices = %@", (uint8_t *)&v4, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000E432C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 16)) {
    uint64_t v3 = *(void *)(v2 + 24);
  }
  else {
    uint64_t v3 = 0LL;
  }
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADMobileBluetoothDeviceDataSource getBTLocalDeviceWithCompletion:]_block_invoke";
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s BTLocalDevice %p", (uint8_t *)&v6, 0x16u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v3);
  }
  return result;
}

uint64_t sub_1000E4414(uint64_t a1)
{
  uint64_t v9 = 0LL;
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    v16[0] = 0LL;
    v16[1] = 0LL;
    [*(id *)(a1 + 40) getUUIDBytes:v16];
    int v2 = BTDeviceFromIdentifier(*(void *)(*(void *)(a1 + 32) + 16LL), v16, &v9);
    if (v2)
    {
      int v3 = v2;
      int v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v11 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithDeviceUID:completion:]_block_invoke";
        __int16 v12 = 1024;
        LODWORD(v13) = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed getting device from deviceUID %d",  buf,  0x12u);
      }
    }

    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32LL);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v11 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithDeviceUID:completion:]_block_invoke";
    __int16 v12 = 2048;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s BTDevice %p for deviceUID %@", buf, 0x20u);
    int v6 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v11 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithDeviceUID:completion:]_block_invoke";
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s BTAccessoryManager %p", buf, 0x16u);
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v9, v5);
  }
  return result;
}

uint64_t sub_1000E4604(uint64_t a1)
{
  uint64_t v13 = 0LL;
  if (!*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    uint64_t v6 = 0LL;
    goto LABEL_9;
  }

  int v2 = BTDeviceAddressFromString([*(id *)(a1 + 40) UTF8String], v12);
  if (!v2)
  {
    int v7 = BTDeviceFromAddress(*(void *)(*(void *)(a1 + 32) + 16LL), v12, &v13);
    if (!v7) {
      goto LABEL_8;
    }
    int v8 = v7;
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
      goto LABEL_8;
    }
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v15 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]_block_invoke";
    __int16 v16 = 1024;
    LODWORD(v17) = v8;
    uint64_t v5 = "%s Failed getting device from address %d";
    goto LABEL_17;
  }

  int v3 = v2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v15 = "-[ADMobileBluetoothDeviceDataSource getBTDeviceWithAddress:completion:]_block_invoke";
    __int16 v16 = 1024;
    LODWORD(v17) = v3;
    uint64_t v5 = "%s Failed getting device address from string %d";
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x12u);
  }

void sub_1000E484C(uint64_t a1, void *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a2 address]);
  unsigned int v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  if (v4) {
    _[*(id *)(a1 + 40) updateHeadphoneListeningMode:*(void *)(a1 + 48)];
  }
}

void sub_1000E48A8(uint64_t a1, void *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a2 address]);
  unsigned int v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  if (v4) {
    _[*(id *)(a1 + 40) updateHeadphoneInEarDetectionState:*(void *)(a1 + 48)];
  }
}

void sub_1000E4904(uint64_t a1, void *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a2 address]);
  unsigned int v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  if (v4) {
    [*(id *)(a1 + 40) reload];
  }
}

void *sub_1000E4960(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[4] == *(void *)(a1 + 40))
  {
    int v3 = *(_DWORD *)(a1 + 56);
    switch(v3)
    {
      case 0:
        goto LABEL_7;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        [result _reloadForDevice:*(void *)(a1 + 48)];
        uint64_t result = _[*(id *)(a1 + 32) _handleListeningModeChangedForBTDevice:*(void *)(a1 + 48) fromAccessoryManager:*(void *)(a1 + 40)];
        break;
      case 6:
      case 12:
        [result _reloadForDevice:*(void *)(a1 + 48)];
        uint64_t result = _[*(id *)(a1 + 32) _handleInEarStatusChangedForBTDevice:*(void *)(a1 + 48) fromAccessoryManager:*(void *)(a1 + 40)];
        break;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        return result;
      default:
        if (v3 == 22) {
LABEL_7:
        }
          uint64_t result = [result _reloadForDevice:*(void *)(a1 + 48)];
        break;
    }
  }

  return result;
}

id sub_1000E4A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return _[a5 accessoryManager:a1 event:a2 device:a3 state:a4];
}

void *sub_1000E4A20(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  if (result[3] != *(void *)(a1 + 40)) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  switch(v3)
  {
    case 11:
      [result _cleanUpDeviceProxies];
      uint64_t result = *(void **)(a1 + 32);
      return _[result _resetPairedDeviceAddresses];
    case 5:
      return _[result _resetConnectedDeviceAddresses];
    case 4:
      return _[result _resetPairedDeviceAddresses];
  }

  return result;
}

id sub_1000E4A90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 localDevice:a1 event:a2 result:a3];
}

id *sub_1000E4AA4(id *result)
{
  if (*((_DWORD *)result + 10) <= 1u) {
    return (id *)_[result[4] _resetConnectedDeviceAddresses];
  }
  return result;
}

id sub_1000E4ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return _[a6 device:a1 serviceMask:a2 serviceEventType:a3 serviceSpecificEvent:a4 result:a5];
}

void sub_1000E4ADC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if ((a2 - 2) < 2)
  {
    id v8 = v7;
    [v7 _sessionTerminated:a1];
    goto LABEL_7;
  }

  if (a2 == 1)
  {
    id v8 = v7;
    [v7 _sessionDetached:a1];
    goto LABEL_7;
  }

  if (!a2)
  {
    id v8 = v7;
    [v7 _sessionAttached:a1 result:a3];
LABEL_7:
    id v7 = v8;
  }
}

id sub_1000E4B60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _detachFromSession];
}

void sub_1000E4B90(uint64_t a1)
{
}

void sub_1000E4BBC(uint64_t a1, unint64_t a2)
{
  int v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v8 = "-[ADMobileBluetoothDeviceDataSource init]_block_invoke_2";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1000E55EC(id a1)
{
  uint64_t v1 = NSHomeDirectory();
  int v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"Library/Assistant/ServiceStatistics"]);
  unsigned int v4 = (void *)qword_100577CD8;
  qword_100577CD8 = v3;

  if (qword_100577CD8)
  {
    BOOL v5 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
    if (!-[NSFileManager fileExistsAtPath:](v5, "fileExistsAtPath:", qword_100577CD8))
    {
      id v10 = 0LL;
      unsigned __int8 v6 = -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v5,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  qword_100577CD8,  1LL,  0LL,  &v10);
      id v7 = v10;
      if ((v6 & 1) == 0)
      {
        id v8 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          __int16 v12 = "-[ADServiceStatistics _statsDirectory]_block_invoke";
          __int16 v13 = 2114;
          id v14 = v7;
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Couldn't create stats dir %{public}@",  buf,  0x16u);
        }

        __int16 v9 = (void *)qword_100577CD8;
        qword_100577CD8 = 0LL;
      }
    }
  }

uint64_t sub_1000E6E14(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 56LL);
  return result;
}

void sub_1000E6E28(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) routeController]);
  [v2 removeDelegate:*(void *)(a1 + 32)];

  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v7 removeObserver:*(void *)(a1 + 32) name:TUCallCenterCallStatusChangedNotification object:0];
  [v7 removeObserver:*(void *)(a1 + 32) name:TUCallCenterVideoCallStatusChangedNotification object:0];
  [v7 removeObserver:*(void *)(a1 + 32) name:TUCallCenterCallContinuityStateChangedNotification object:0];
  [v7 removeObserver:*(void *)(a1 + 32) name:TUCallCenterControlFailureNotification object:0];
  [v7 removeObserver:*(void *)(a1 + 32) name:TUCallCenterCallConnectedNotification object:0];
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = 0LL;

  uint64_t v5 = *(void *)(a1 + 32);
  unsigned __int8 v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0LL;
}

void sub_1000E6F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      id v8 = "-[ADCallObserver _registerForDropInCallbacks]_block_invoke";
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to register for drop-in calls: %{public}@",  (uint8_t *)&v7,  0x16u);
    }

    uint64_t v5 = *(void *)(a1 + 32);
    unsigned __int8 v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315138;
    id v8 = "-[ADCallObserver _registerForDropInCallbacks]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Registered for drop-in calls",  (uint8_t *)&v7,  0xCu);
  }
}

void sub_1000E7060(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v12 = "-[ADCallObserver startObservingCallStateWithDelegate:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting observing call state", buf, 0xCu);
  }

  [*(id *)(a1 + 32) _registerForDropInCallbacks];
  if (!*(void *)(*(void *)(a1 + 32) + 32LL))
  {
    id v3 = -[TUCallCenter initWithQueue:]( objc_alloc(&OBJC_CLASS___TUCallCenter),  "initWithQueue:",  *(void *)(*(void *)(a1 + 32) + 8LL));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 32);
    *(void *)(v4 + 32) = v3;

    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(void **)(v6 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1000E7268;
    v10[3] = &unk_1004FD940;
    void v10[4] = v6;
    [v7 registerWithCompletionHandler:v10];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) routeController]);
    [v8 addDelegate:*(void *)(a1 + 32)];
  }

  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v9 addObserver:*(void *)(a1 + 32) selector:"_callStateChanged:" name:TUCallCenterCallStatusChangedNotification object:0];
  [v9 addObserver:*(void *)(a1 + 32) selector:"_callStateChanged:" name:TUCallCenterVideoCallStatusChangedNotification object:0];
  [v9 addObserver:*(void *)(a1 + 32) selector:"_callStateChanged:" name:TUCallCenterCallContinuityStateChangedNotification object:0];
  [v9 addObserver:*(void *)(a1 + 32) selector:"_callStateChanged:" name:TUCallCenterControlFailureNotification object:0];
  [v9 addObserver:*(void *)(a1 + 32) selector:"_callStateChanged:" name:TUCallCenterCallConnectedNotification object:0];
}

id sub_1000E7268(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _callStateChanged:0];
}

id sub_1000E7274(uint64_t a1)
{
  int v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v4 = v2;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 currentAudioAndVideoCalls]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v5 count]));
    *(_DWORD *)__int128 buf = 136315394;
    int v28 = "-[ADCallObserver _callStateChanged:]_block_invoke";
    __int16 v29 = 2112;
    __int128 v30 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #callstate [_callCenter currentAudioAndVideoCalls count]: %@",  buf,  0x16u);
  }

  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) currentAudioAndVideoCalls]);
  id v7 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v7)
  {
    id v8 = v7;
    char v9 = 0;
    uint64_t v10 = 0LL;
    uint64_t v11 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(obj);
        }
        __int16 v13 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        id v14 = [v13 status];
        switch((int)v14)
        {
          case 1:
          case 2:
            if (!AFIsHorseman(v14, v15)
              || ([v13 isEndpointOnCurrentDevice] & 1) != 0
              || [v13 isHostedOnCurrentDevice])
            {
              v10 |= 1uLL;
            }

            break;
          case 3:
            v10 |= 2uLL;
            break;
          case 4:
            v10 |= 4uLL;
            break;
          case 5:
            v10 |= 8uLL;
            break;
          default:
            break;
        }

        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) activeConversationForCall:v13]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 provider]);
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
        unsigned __int8 v19 = [v18 isEqualToString:@"com.apple.private.alloy.dropin.communication"];

        v9 |= v19;
      }

      id v8 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v8);
  }

  else
  {
    char v9 = 0;
    uint64_t v10 = 0LL;
  }

  return [*(id *)(a1 + 32) _handleCallStateDidChangeTo:v10 isDropInCallDidChange:v9 & 1];
}

void sub_1000E8580( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1000E9854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1000EB288( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

LABEL_62:
}

        uint64_t v50 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          int v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_INFO,  "%s #multi-user _updateHomeUserSettings- MultiUserSetupHomepodUserAddedToHome primary user",  buf,  0xCu);
        }

        int v142 = 1;
        -[ADHomeInfoManager _logRelevantAnalyticsOnHomeUserSettingsUpdateForCurrentSettings:allowVoiceIdSettingValue:isPrimaryUser:]( v2,  "_logRelevantAnalyticsOnHomeUserSettingsUpdateForCurrentSettings:allowVoiceIdSettingValue:isPrimaryUser:",  v20,  v22,  1LL);
        goto LABEL_65;
      }

      __int128 v37 = v151;
      __int128 v38 = v23;
LABEL_65:
      id v51 = v2->_homeUserSettings;
      uint64_t v52 = -[NSMutableDictionary mutableCopy](v20, "mutableCopy");
      unsigned int v135 = v14;
      -[NSMutableDictionary setObject:forKey:](v51, "setObject:forKey:", v52, v14);

      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome users](v146, "users"));
      unsigned int v155 = 0u;
      int v156 = 0u;
      int v157 = 0u;
      int v158 = 0u;
      int v140 = v53;
      int v145 = [v140 countByEnumeratingWithState:&v155 objects:v163 count:16];
      if (!v145) {
        goto LABEL_126;
      }
      unsigned int v143 = *(void *)v156;
      do
      {
        int v54 = 0LL;
        unsigned int v55 = v38;
        int v56 = v20;
        unsigned int v57 = v37;
        unsigned int v58 = v154;
        do
        {
          if (*(void *)v156 != v143) {
            objc_enumerationMutation(v140);
          }
          uint64_t v59 = *(void **)(*((void *)&v155 + 1) + 8LL * (void)v54);
          unsigned int v60 = (void *)objc_claimAutoreleasedReturnValue([v59 uniqueIdentifier]);
          int v61 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v60 UUIDString]);

          uint64_t v62 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v2->_homeUserSettings,  "objectForKey:",  v61));
          unsigned int v63 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v62, "objectForKey:", @"allowVoiceID"));

          int v152 = v63;
          __int16 v64 = [v63 integerValue];
          unsigned int v154 = v62;
          if (v62)
          {
            __int16 v65 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315651;
              int v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
              int v166 = 2113;
              unsigned int v167 = v62;
              int v168 = 2112;
              int v169 = v146;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "%s Secondary user previous settings %{private}@ for home (%@)",  buf,  0x20u);
            }

            [v141 setObject:v152 forKey:v61];
          }

          int v20 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( -[ADHomeInfoManager _settingsForHomeUser:forHome:]( v2,  "_settingsForHomeUser:forHome:",  v59,  v146));

          __int16 v66 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v20, "objectForKey:", @"allowVoiceID"));
          __int16 v67 = [v66 integerValue];
          int v149 = v66;
          [v144 setObject:v66 forKey:v61];
          uint64_t v69 = v64 == v67 || v67 == (id)2;
          __int128 v70 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315651;
            int v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
            int v166 = 2113;
            unsigned int v167 = v20;
            int v168 = 2112;
            int v169 = v146;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEBUG,  "%s Secondary user new settings %{private}@ for home (%@)",  buf,  0x20u);
          }

          __int128 v71 = -[NSMutableDictionary isEqualToDictionary:](v62, "isEqualToDictionary:", v20);
          if (!(_DWORD)v71 || v2->_allowATVRmVHomeSettingSync)
          {
            if (AFIsMultiUserCompanion(v71))
            {
              __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome currentUser](v146, "currentUser"));
              __int128 v73 = (void *)objc_claimAutoreleasedReturnValue([v72 uniqueIdentifier]);
              __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([v73 UUIDString]);
              __int128 v75 = -[NSMutableDictionary isEqualToString:](v61, "isEqualToString:", v74);

              int v2 = v138;
              if (v75)
              {
                if (v67)
                {
                  if (v67 == (id)1)
                  {
                    __int128 v76 = (os_log_s *)AFSiriLogContextDaemon;
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)__int128 buf = 136315395;
                      int v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
                      int v166 = 2113;
                      unsigned int v167 = v61;
                      _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "%s Voice ID setting is ON for %{private}@",  buf,  0x16u);
                    }

                    unsigned int v136 = 1LL;
                  }
                }

                else
                {
                  unsigned int v136 = 0LL;
                }

                goto LABEL_108;
              }
            }

            if (v2->isATVOnly)
            {
              if (v154) {
                __int128 v77 = v69;
              }
              else {
                __int128 v77 = 1;
              }
              if (v77 == 1 && !v2->_allowATVRmVHomeSettingSync)
              {
              }

              else
              {
                if (v67 == (id)1)
                {
                  __int128 v78 = (os_log_s *)AFSiriLogContextDaemon;
                  if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)__int128 buf = 136315395;
                    int v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
                    int v166 = 2113;
                    unsigned int v167 = v61;
                    _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Voice ID setting is ON for %{private}@",  buf,  0x16u);
                  }

LABEL_101:
                  __int128 v79 = v139;
                  __int128 v80 = v61;
                  __int128 v81 = 2LL;
LABEL_102:
                  [v79 triggerATVRmVStateChangeForiCloudAltDSID:0 homeUserID:v80 toState:v81];
                }

                else if ([v139 isRmVEnabledForHomeUser:v61] {
                       && v2->_allowATVRmVHomeSettingSync)
                }
                {
                  __int128 v82 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome uniqueIdentifier](v146, "uniqueIdentifier"));
                  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 UUIDString]);
                  [v139 syncToCloudATVRmVSetting:1 homeID:v83 homeUserID:v61 notifyClients:v2->_allowATVRmVHomeSettingSync];
                }

                else if (!v67)
                {
                  __int128 v79 = v139;
                  __int128 v80 = v61;
                  __int128 v81 = 3LL;
                  goto LABEL_102;
                }

                [v137 addObject:v61];
              }
            }

  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txRetransmitBytes));
  [v3 setObject:v36 forKey:@"tx_retransmit_bytes"];

  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }

  PBDataWriterWriteUint64Field(v5, self->_rxPackets, 30LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }

  void v4[6] = self->_rxOooBytes;
  *((_DWORD *)v4 + 53) |= 0x20u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_64;
  }

  self->_rxPackets = *((void *)v4 + 7);
  *(_DWORD *)&self->_has |= 0x40u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 8) == 0)
  {
LABEL_18:
    if ((v6 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }

void sub_1000ECE5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

LABEL_38:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueHomeKitProblemValue);
  uint64_t v17 = state64;
  if ((state64 & 0x10) == 0)
  {
LABEL_17:
    if ((v17 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }

            __int128 v37 = v32;
            goto LABEL_39;
          }

          if (v35)
          {
            *(_DWORD *)__int128 buf = 136315394;
            int v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
            int v242 = 2112;
            unsigned __int8 v243 = v32;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s Merging record : (%@)", buf, 0x16u);
          }

          if ([v32 isEqualToString:v195])
          {
            __int128 v36 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              int v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
              int v242 = 2112;
              unsigned __int8 v243 = v32;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "%s Ignoring changes to previous version : (%@)",  buf,  0x16u);
            }

            __int128 v34 = v194;
            __int128 v37 = v32;
            uint64_t v194 = v27;
            goto LABEL_39;
          }

          if ([v32 isEqualToString:@"Output Voice v2"])
          {
            __int128 v34 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
LABEL_36:
              *(_DWORD *)__int128 buf = 136315394;
              int v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
              int v242 = 2112;
              unsigned __int8 v243 = v32;
              __int128 v39 = v34;
              __int128 v40 = "%s Ignoring changes to previous version : (%@)";
LABEL_37:
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, v40, buf, 0x16u);
            }

            goto LABEL_38;
          }

          if ([v32 isEqualToString:@"Output Voice v3"])
          {
            __int128 v34 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO)) {
              goto LABEL_36;
            }
            goto LABEL_38;
          }

          if ([v32 isEqualToString:v192])
          {
            __int128 v41 = v27;

            int v189 = v41;
          }

          uint64_t v42 = sub_100274B08(v32);
          __int128 v37 = (id)objc_claimAutoreleasedReturnValue(v42);

          if (([v18 containsObject:v37] & 1) == 0)
          {
            __int128 v34 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              int v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
              int v242 = 2112;
              unsigned __int8 v243 = v37;
              _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s Ignoring non-whitelisted key : (%@)",  buf,  0x16u);
            }

            goto LABEL_39;
          }

          [v201 removeObject:v37];
          [v205 removeObject:v37];
          v238[0] = objc_opt_class(&OBJC_CLASS___NSNumber);
          v238[1] = objc_opt_class(&OBJC_CLASS___NSString);
          v238[2] = objc_opt_class(&OBJC_CLASS___NSDictionary);
          v238[3] = objc_opt_class(&OBJC_CLASS___NSArray);
          v238[4] = objc_opt_class(&OBJC_CLASS___NSDate);
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v238,  5LL));
          int v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v43));
          __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "_ad_dataOfClasses:", v44));

          __int16 v45 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_modificationDateCache, "objectForKey:", v37));
          if (v45) {
            uint64_t v46 = v186;
          }
          else {
            uint64_t v46 = 1;
          }
          if (!hasMergedAllRecords
            && (v46 & 1) == 0
            && (([v37 isEqualToString:v195] & 1) != 0
             || [v37 isEqualToString:v192]))
          {
            id v47 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              int v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
              int v242 = 2112;
              unsigned __int8 v243 = v37;
              _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "%s Adjusting weight of record : (%@)",  buf,  0x16u);
            }

            __int16 v48 = objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
            __int16 v45 = (void *)v48;
          }

          if (([v37 isEqualToString:@"User Identifier"] & 1) != 0
            || [v37 isEqualToString:@"Logging User Identifier"])
          {
            id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_localKeychainPreferenceCache,  "objectForKey:",  v37));
            if (v45)
            {
              uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);

              if (v50)
              {
                id v51 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);
                int v185 = v45;
                uint64_t v52 = [v51 compare:v45];

                if (v52 == (id)1)
                {
                  if (v34 != v49 && (-[os_log_s isEqual:](v34, "isEqual:", v49) & 1) == 0)
                  {
                    localKeychainPreferenceCache = self->_localKeychainPreferenceCache;
                    if (v34) {
                      -[NSMutableDictionary setObject:forKey:]( localKeychainPreferenceCache,  "setObject:forKey:",  v34,  v37);
                    }
                    else {
                      -[NSMutableDictionary removeObjectForKey:]( localKeychainPreferenceCache,  "removeObjectForKey:",  v37);
                    }
                    unsigned int v184 = 1;
                  }

                  goto LABEL_105;
                }

                if (v34 != v49)
                {
                  unsigned int v55 = v49;
                  int v61 = -[os_log_s isEqual:](v34, "isEqual:", v49);
                  goto LABEL_97;
                }

LABEL_41:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueWiFiPerformanceProblemValue);
  uint64_t v17 = state64;
  if ((state64 & 0x80) == 0)
  {
LABEL_20:
    if ((v17 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }

  *((_DWORD *)v5 + 2_Block_object_dispose(&STACK[0x250], 8) = self->_attemptCount;
  *((_DWORD *)v5 + 53) |= 0x2000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_5:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }

LABEL_42:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueInternetProblemValue);
  uint64_t v17 = state64;
  if ((state64 & 0x100) == 0)
  {
LABEL_21:
    if ((v17 & 0x200) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }

  *((_DWORD *)v5 + 3_Block_object_dispose(&STACK[0x250], 8) = self->_metricsCount;
  *((_DWORD *)v5 + 53) |= 0x10000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_6:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }

LABEL_43:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueHardwareProblemValue);
  uint64_t v17 = state64;
  if ((state64 & 0x200) == 0)
  {
LABEL_22:
    if ((v17 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }

  uint64_t v43 = v22;
  int v44 = -[ADCommandCenter _outputVoice_setOutputVoice:](v22, "_outputVoice_setOutputVoice:", v9);
  __int16 v45 = v44;
  uint64_t v46 = v67 | v25 | v44;
  if ((v67 | v25) == 1 && (v44 & 1) == 0)
  {
    [v11 synchronize];
    uint64_t v46 = 0;
  }

  if ((v25 & 1) != 0)
  {
    [v11 setIsSiriFullUODSupported:0];
    -[ADAssetManager languageCodeWasChangedTo:](v43->_assetManager, "languageCodeWasChangedTo:", v8);
    id v47 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
    [v47 syncForReason:@"siri_locale_change" withCoalescing:0];

    __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(+[SSRVoiceProfileManager sharedInstance](&OBJC_CLASS___SSRVoiceProfileManager, "sharedInstance"));
    id v49 = (void *)objc_claimAutoreleasedReturnValue(+[CSPreferences sharedPreferences](&OBJC_CLASS___CSPreferences, "sharedPreferences"));
    uint64_t v50 = [v49 isPHSSupported];

    if (v50 && ([v48 isSATEnrolledForSiriProfileId:0 forLanguageCode:v8] & 1) == 0)
    {
      id v51 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int128 v70 = "-[ADCommandCenter _setLanguageCode:outputVoice:isDefaultValue:]";
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "%s Disabling voice trigger", buf, 0xCu);
      }

      sub_1001EBFAC(0LL, v43->_instanceContext, 0LL);
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, AFLanguageCodeDidChangeDarwinNotification, 0LL, 0LL, 1u);
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    [v53 updateRmVForUserProfilesWithLanguageCode:v8];

    int v54 = v68;
  }

  else
  {
    int v54 = v68;
    if ((v45 & 1) == 0) {
      goto LABEL_60;
    }
  }

  unsigned int v55 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  int v56 = v55;
  if (!v26)
  {
    unsigned int v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    -[NSMutableDictionary setObject:forKey:]( v56,  "setObject:forKey:",  v57,  @"ADSharedDataDidChangePreviousOutputVoiceKey");

    if (v54) {
      goto LABEL_56;
    }
LABEL_58:
    unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    -[NSMutableDictionary setObject:forKey:]( v56,  "setObject:forKey:",  v58,  @"ADSharedDataDidChangePreviousLanguageCodeKey");

    goto LABEL_59;
  }

  -[NSMutableDictionary setObject:forKey:]( v55,  "setObject:forKey:",  v26,  @"ADSharedDataDidChangePreviousOutputVoiceKey");
  if (!v54) {
    goto LABEL_58;
  }
LABEL_56:
  -[NSMutableDictionary setObject:forKey:]( v56,  "setObject:forKey:",  v54,  @"ADSharedDataDidChangePreviousLanguageCodeKey");
LABEL_59:
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v59 postNotificationName:@"ADSharedDataDidChangeNotification" object:0 userInfo:v56];

LABEL_60:
  if (v46) {
    [v11 synchronize];
  }
}

  if (v10)
  {
    __int128 v39 =  +[AFAssistantSamplingUtilities deleteItemAtFilePath:]( &OBJC_CLASS___AFAssistantSamplingUtilities,  "deleteItemAtFilePath:",  *(void *)(a1 + 56));
    sub_10024D354(*(void *)(*(void *)(a1 + 32) + 24LL), *(void **)(a1 + 72), *(void **)(a1 + 80));
  }
}
}

    __int16 v29 = 0LL;
    goto LABEL_44;
  }

  uint64_t v53 = mach_absolute_time();
  if (AFIsInternalInstall(v53))
  {
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLink activeDevices](self->_rapportLink, "activeDevices"));
    __int16 v18 = [v17 countByEnumeratingWithState:&v72 objects:v80 count:16];
    if (v18)
    {
      unsigned __int8 v19 = *(void *)v73;
      while (2)
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v73 != v19) {
            objc_enumerationMutation(v17);
          }
          uint64_t v21 = *(void **)(*((void *)&v72 + 1) + 8LL * (void)i);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "identifier", v53));
          __int128 v23 = [v22 isEqual:v12];

          if ((v23 & 1) == 0)
          {
            __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v21 effectiveIdentifier]);
            __int128 v25 = [v24 isEqual:v12];

            if ((v25 & 1) == 0) {
              continue;
            }
          }

          __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v21 name]);
          goto LABEL_28;
        }

        __int16 v18 = [v17 countByEnumeratingWithState:&v72 objects:v80 count:16];
        __int16 v26 = 0LL;
        if (v18) {
          continue;
        }
        break;
      }
    }

    else
    {
      __int16 v26 = 0LL;
    }

  v5[3] = *(void *)&self->_pingMean;
  *((_DWORD *)v5 + 53) |= 4u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_7:
    if ((*(_DWORD *)&has & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }

    uint64_t v21 = 0;
  }

LABEL_44:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueBluetoothProblemValue);
  uint64_t v17 = state64;
  if ((state64 & 0x400) == 0)
  {
LABEL_23:
    if ((v17 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }

        objc_autoreleasePoolPop(v30);
        int v28 = (char *)v28 + 1;
      }

      while (v26 != v28);
      int v56 = [obj countByEnumeratingWithState:&v89 objects:buf count:16];
      __int16 v26 = v56;
      if (!v56)
      {
LABEL_55:

        int v61 = -[NSMutableDictionary count](v23, "count");
        unsigned int v60 = v61 != 0LL;
        if (v61)
        {
          AFSystemGetBootTimeInTimeInterval();
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
          -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v62, @"SystemBootTime");

          -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v77, @"StreamIdentifier");
          unsigned int v58 = v23;
          uint64_t v59 = v24;
        }

        else
        {
          unsigned int v63 = (os_log_s *)AFSiriLogContextAnalytics;
          if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v101 = 136315394;
            __int16 v102 = "_ADAnalyticsMetricsCreateTimingsAndEventInformationDictionaries";
            int8x16x4_t v103 = 2048;
            int v104 = v71;
            _os_log_error_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "%s Dropped %tu events because no timings can be extracted from the events.",  v101,  0x16u);
          }

          unsigned int v58 = 0LL;
          uint64_t v59 = 0LL;
        }

        char v9 = v72;
        a1 = v73;

        goto LABEL_61;
      }
    }
  }

  unsigned int v57 = (os_log_s *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    int32x4_t v96 = "_ADAnalyticsMetricsCreateTimingsAndEventInformationDictionaries";
    _os_log_error_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "%s Unable to build metrics out of no event records.",  buf,  0xCu);
  }

  uint64_t v83 = 0LL;
  unsigned int v58 = 0LL;
  uint64_t v59 = 0LL;
  unsigned int v60 = 0;
LABEL_61:

  __int16 v64 = v58;
  __int16 v65 = v59;
  if (v60)
  {
    __int16 v66 = objc_alloc_init(&OBJC_CLASS___SAMetrics);
    -[SAMetrics setCategory:](v66, "setCategory:", @"Events");
    -[SAMetrics setEventInformation:](v66, "setEventInformation:", v65);
    -[SAMetrics setTimings:](v66, "setTimings:", v64);
    __int16 v67 = v75;
    -[SAMetrics setSpeechId:](v66, "setSpeechId:", v75);
  }

  else
  {
    __int16 v66 = 0LL;
    __int16 v67 = v75;
  }

  objc_autoreleasePoolPop(v74);
  [*(id *)(a1 + 48) setPayloadSize:v83];
  int v68 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v69 = v68;
    __int128 v70 = [v20 count];
    *(_DWORD *)__int128 buf = 136315650;
    int32x4_t v96 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
    int32x4_t v97 = 2048;
    uint64_t v98 = v70;
    uint64_t v99 = 2112;
    unsigned int v100 = v66;
    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "%s Converted %tu analytics events to Events metrics %@",  buf,  0x20u);
  }

  [*(id *)(a1 + 56) _sendMetrics:v66 requiresActiveSession:*(unsigned __int8 *)(a1 + 64) batch:*(void *)(a1 + 48) completion:v9];
}

  __int128 v25 = _AFPreferencesSiriRMVSetting(v4);
  __int16 v26 = *(void *)(a1 + 56);
  if (v25 != v26)
  {
    int v27 = v25;
    if (v25 == 1 && v26 == 2)
    {
      int v28 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        __int16 v29 = "%s #multi-user-atv Skipping transition to on since we are already on";
LABEL_58:
        __int128 v33 = v28;
        __int128 v34 = 12;
LABEL_66:
        _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, v29, buf, v34);
      }
    }

    else if (v25 || v26 != 3)
    {
      if ((v25 == 2 || v26 != 1) && (v25 == 3 || v26))
      {
        if (v26 == 1)
        {
          [v5 setVoiceIDAllowedByUser:1];
          __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
          v44[0] = _NSConcreteStackBlock;
          v44[1] = 3221225472LL;
          v44[2] = sub_10029411C;
          v44[3] = &unk_1004F9100;
          v44[4] = *(void *)(a1 + 48);
          __int16 v45 = v4;
          uint64_t v46 = v5;
          [v36 getUserProfileDictionariesWithCompletion:v44];
        }

        else if (!v26)
        {
          [v5 setVoiceIDAllowedByUser:0];
          [*(id *)(*(void *)(a1 + 48) + 208) removeObject:v4];
        }

        _AFPreferencesSetSiriRMVSetting(v4, *(void *)(a1 + 56));
        __int128 v37 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          __int128 v38 = *(void *)(a1 + 56);
          __int128 v39 = v37;
          __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v5 homeUserUUID]);
          *(_DWORD *)__int128 buf = 136316162;
          __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
          id v49 = 2048;
          uint64_t v50 = v27;
          id v51 = 2048;
          uint64_t v52 = v38;
          uint64_t v53 = 2112;
          int v54 = v4;
          unsigned int v55 = 2112;
          int v56 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv setting change %ld -> %ld for user with iCloudAltDSID %@ and homeUserUUID %@",  buf,  0x34u);
        }

        [*(id *)(a1 + 48) _postRemovalStateCleanup];
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        [v41 sendMultiUserInfoToMUX];

        DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
        CFNotificationCenterPostNotification( DarwinNotifyCenter,  kAFRecognizeMyVoiceSettingChangedDarwinNotification,  0LL,  0LL,  1u);
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        [v43 postNotificationName:@"ADMultiUsersDidChangeNotification" object:0];
      }

      else
      {
        __int128 v35 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315650;
          __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
          id v49 = 2048;
          uint64_t v50 = v27;
          id v51 = 2048;
          uint64_t v52 = v26;
          __int16 v29 = "%s #multi-user-atv Invalid request to tranisition states from %ld to %ld";
          __int128 v33 = v35;
          __int128 v34 = 32;
          goto LABEL_66;
        }
      }
    }

    else
    {
      int v28 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        __int16 v29 = "%s #multi-user-atv Skipping transition to off since we are already off";
        goto LABEL_58;
      }
    }
  }

  *((_DWORD *)v5 + 39) = self->_pingCount;
  *((_DWORD *)v5 + 53) |= 0x20000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x2000000) == 0)
  {
LABEL_8:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }

  return v21;
}

LABEL_45:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueThermalProblemValue);
  uint64_t v17 = state64;
  if ((state64 & 0x800) == 0)
  {
LABEL_24:
    if ((v17 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }

        id v49 = (void *)*((void *)&v53 + 1);
        uint64_t v50 = (void *)v53;
        id v51 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          unsigned int v58 = "-[ADCommandCenter(SharedDataClient) _updateSharedDataWithPairedPeerData:]";
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "%s Resetting sessions due to hostname change",  buf,  0xCu);
        }

        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _sessionManager](self, "_sessionManager"));
        [v52 resetSessionsAndMakeQuiet:1];
LABEL_51:

LABEL_52:
        goto LABEL_53;
      }
    }

    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v4 dataSharingOptInStatus]);
    __int128 v34 = v33;
    if (v33)
    {
      if ([v33 isEqualToString:SADataSharingOptInStatusOptedInValue])
      {
        if (!AFDeviceIsTinker())
        {
          __int128 v35 = 1LL;
LABEL_27:
          __int128 v38 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315395;
            unsigned int v58 = "-[ADCommandCenter(SharedDataClient) _updateSharedDataWithPairedPeerData:]";
            uint64_t v59 = 2049;
            unsigned int v60 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%s Updating sharing opt-in status: %{private}ld",  buf,  0x16u);
          }

          __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
          [v39 setSiriDataSharingOptInStatus:v35 propagateToHomeAccessories:0 source:8 reason:@"SharedData" completion:0];

          goto LABEL_30;
        }

        goto LABEL_24;
      }

      if ([v34 isEqualToString:SADataSharingOptInStatusOptedOutValue])
      {
        AFDeviceIsTinker();
LABEL_26:
        __int128 v35 = 2LL;
        goto LABEL_27;
      }

      __int128 v36 = [v34 isEqualToString:SADataSharingOptInStatusDismissedValue];
      if ((AFDeviceIsTinker() & 1) != 0)
      {
LABEL_24:
        __int128 v37 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          unsigned int v58 = "-[ADCommandCenter(SharedDataClient) _updateSharedDataWithPairedPeerData:]";
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s Tinker device should not sync Siri Data Sharing value",  buf,  0xCu);
        }

        goto LABEL_26;
      }

      if (v36) {
        __int128 v35 = 3LL;
      }
      else {
        __int128 v35 = 0LL;
      }
      if (v36) {
        goto LABEL_27;
      }
    }

  *((_DWORD *)v5 + 52) = self->_unacknowledgedPingCount;
  *((_DWORD *)v5 + 53) |= 0x2000000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_9:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }

LABEL_46:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueRecoveryValue);
  uint64_t v17 = state64;
  if ((state64 & 0x1000) == 0)
  {
LABEL_25:
    if ((v17 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
}

  id v51 = (id)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser shareOwnerName](self->_deviceOwner, "shareOwnerName"));
  uint64_t v52 = v19;
  uint64_t v53 = v52;
  if (v51 == v52)
  {

    goto LABEL_56;
  }

  if (v52 && v51)
  {
    int v54 = [v51 isEqual:v52];

    if ((v54 & 1) != 0) {
      goto LABEL_56;
    }
  }

  else
  {
  }

  unsigned int v55 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    int v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMemberSe"
           "ttings:loggingAllowed:]";
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "%s Updating shareOwner name", buf, 0xCu);
  }

  -[ADCommunalDeviceUser setShareOwnerName:](self->_deviceOwner, "setShareOwnerName:", v53);
  uint64_t v21 = 1;
LABEL_56:
  if (-[ADCommunalDeviceUser loggingIsAllowed](self->_deviceOwner, "loggingIsAllowed") != a9)
  {
    int v56 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "%s Updating loggingIsAllowed", buf, 0xCu);
    }

    -[ADCommunalDeviceUser testAndSetLoggingIsAllowed:](self->_deviceOwner, "testAndSetLoggingIsAllowed:", a9);
    uint64_t v21 = 1;
  }

  unsigned int v57 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser companionSpeechID](self->_deviceOwner, "companionSpeechID"));
  unsigned int v58 = (void *)objc_claimAutoreleasedReturnValue([v18 speechID]);
  uint64_t v59 = v57;
  unsigned int v60 = v58;
  if (v59 == v60)
  {

LABEL_70:
    goto LABEL_71;
  }

  int v61 = v60;
  if (!v59 || !v60)
  {

    goto LABEL_67;
  }

  uint64_t v62 = [v59 isEqual:v60];

  if ((v62 & 1) == 0)
  {
LABEL_67:
    unsigned int v63 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "%s Updating companion speechID", buf, 0xCu);
    }

    __int16 v64 = self->_deviceOwner;
    uint64_t v59 = (id)objc_claimAutoreleasedReturnValue([v18 speechID]);
    -[ADCommunalDeviceUser setCompanionSpeechID:](v64, "setCompanionSpeechID:", v59);
    uint64_t v21 = 1;
    goto LABEL_70;
  }

  *((_DWORD *)v4 + 2_Block_object_dispose(&STACK[0x250], 8) = self->_attemptCount;
  *((_DWORD *)v4 + 53) |= 0x2000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_5:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_48;
  }

  *((_DWORD *)v5 + 44) = self->_rttCurrent;
  *((_DWORD *)v5 + 53) |= 0x100000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }

LABEL_48:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueStereoVersionValue);
  uint64_t v17 = state64;
  if ((state64 & 0x4000) == 0)
  {
LABEL_27:
    if ((v17 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_50;
  }

    id v51 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      unsigned int v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      int v130 = 2112;
      int v131 = v24;
      unsigned int v132 = 2112;
      unsigned int v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 3 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v3");
    if ((sub_100273358(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_52;
      }
LABEL_59:
      unsigned int v57 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315650;
        unsigned int v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        int v130 = 2112;
        int v131 = v24;
        unsigned int v132 = 2112;
        unsigned int v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 4 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v4");
      if ((sub_1002734D8(v29, v24) & 1) != 0) {
        goto LABEL_79;
      }
      goto LABEL_71;
    }

  v4[3] = *(void *)&self->_pingMean;
  *((_DWORD *)v4 + 53) |= 4u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_7:
    if ((*(_DWORD *)&has & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }

  *((_DWORD *)v5 + 46) = self->_rttVariance;
  *((_DWORD *)v5 + 53) |= 0x400000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_12:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }

LABEL_49:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueStereoErrorValue);
  uint64_t v17 = state64;
  if ((state64 & 0x8000) == 0)
  {
LABEL_28:
    if ((v17 & 0x10000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_51;
  }
}
              }

              else
              {
                id v47 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:v14]);
                if (v47)
                {
                  __int128 v33 = (void *)v47;
                  [v18 setObject:v47 forKey:@"nearby_devices_scores"];
                  goto LABEL_49;
                }
              }
            }

            [*(id *)(a1 + 64) setObject:v18 forKey:v14];
            id v49 = *(void **)(a1 + 72);
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v14]);
            [v49 setObject:v42 forKey:v14];
          }

          goto LABEL_52;
        }

        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
        uint64_t v17 = [v16 isEqualToString:v14];

        if (v17) {
          goto LABEL_22;
        }
        __int16 v45 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315395;
          __int128 v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUsers"
                ":ghostVoiceProfileDetected:]_block_invoke";
          __int128 v73 = 2113;
          __int128 v74 = v14;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "%s Ghost voice profile detected for sharedUserID (%{private}@)",  buf,  0x16u);
        }

        [*(id *)(a1 + 32) _trackGhostVoiceProfile:v14];
        uint64_t v46 = *(_BYTE **)(a1 + 96);
        if (v46) {
          *uint64_t v46 = 1;
        }
LABEL_52:
        __int16 v13 = (char *)v13 + 1;
      }

      while (v66 != v13);
      unsigned int v57 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
      __int16 v66 = v57;
    }

    while (v57);
  }

  unsigned int v58 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) sharedUserId]);
  uint64_t v59 = *(void *)(*(void *)(a1 + 88) + 8LL);
  unsigned int v60 = *(void **)(v59 + 40);
  *(void *)(v59 + 40) = v58;
}

        int v68 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int128 v82 = "-[ADSessionRemoteServer _connectionInfoWithPreferWWAN:skipPeer:skipPeerError:useWiFiHint:forceReconnect:]";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "%s Connection policy not in use",  buf,  0xCu);
        }

        [v11 setConnectionPolicy:0];
LABEL_52:
        uint64_t v21 = v14;

        goto LABEL_8;
      }
    }

    else
    {
      unsigned int v57 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        __int128 v82 = "-[ADSessionRemoteServer _connectionInfoWithPreferWWAN:skipPeer:skipPeerError:useWiFiHint:forceReconnect:]";
        uint64_t v83 = 2112;
        __int128 v84 = v55;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "%s Connection policy expired at %@; ignoring it",
          buf,
          0x16u);
      }

      -[ADSessionRemoteServer _resetConnectionPolicyBlacklisting](self, "_resetConnectionPolicyBlacklisting");
      id v49 = 0LL;
    }

    __int16 v67 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v82 = "-[ADSessionRemoteServer _connectionInfoWithPreferWWAN:skipPeer:skipPeerError:useWiFiHint:forceReconnect:]";
      uint64_t v83 = 2112;
      __int128 v84 = v15;
      __int128 v85 = 2112;
      __int128 v86 = v79;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_INFO,  "%s Connection policy hostname %@ does not match account hostname %@; ignoring policy",
        buf,
        0x20u);
    }

    goto LABEL_49;
  }

  uint64_t v17 = (void *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    __int16 v18 = v17;
    unsigned __int8 v19 = [v12 needsDestruction];
    int v20 = @"needs creation";
    if (v19) {
      int v20 = @"is being destroyed";
    }
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v82 = "-[ADSessionRemoteServer _connectionInfoWithPreferWWAN:skipPeer:skipPeerError:useWiFiHint:forceReconnect:]";
    uint64_t v83 = 2112;
    __int128 v84 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s Account %@ use default connection policy and clear our dns settings.",  buf,  0x16u);
  }

  uint64_t v21 = v14;
  -[ADSessionRemoteServer _resetConnectionPolicyBlacklisting](self, "_resetConnectionPolicyBlacklisting");
LABEL_8:
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 routes]);

  if (!v23
    || ![v23 count]
    || (__int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectAtIndexedSubscript:0]),
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 host]),
        __int16 v26 = [v25 isEqualToString:v79],
        v25,
        v24,
        (v26 & 1) == 0))
  {
    int v27 = (void *)objc_opt_new(&OBJC_CLASS___SAConnectionPolicy);
    int v28 = (void *)objc_opt_new(&OBJC_CLASS___SAConnectionPolicyRoute);
    [v28 setRouteId:@"RouteId1"];
    [v28 setMptcp:&off_100513750];
    [v28 setPriority:1];
    [v28 setTimeout:&off_100513768];
    [v28 setHost:v79];
    [v11 setConnectionPolicyRoute:v28];
    __int128 v80 = v28;
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v80, 1LL));
    [v27 setRoutes:v29];

    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 policyId]);
    [v27 setPolicyId:v31];

    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 timeToLive]);
    [v27 setTimeToLive:v33];

    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 enableTLS13]);
    [v27 setEnableTLS13:v35];

    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 enableTcpFastOpen]);
    [v27 setEnableTcpFastOpen:v37];

    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 globalTimeout]);
    [v27 setGlobalTimeout:v39];

    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionPolicy]);
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 enableOptimisticDNS]);
    [v27 setEnableOptimisticDNS:v41];

    [v11 setConnectionPolicy:v27];
    [v11 setImposePolicyBan:0];
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession languageCode](self, "languageCode"));
  [v11 setLanguageCode:v42];

  [v11 setTimeout:self->_aceHeaderTimeout];
  [v11 setPrefersWWAN:v73];
  [v11 setSkipPeer:v74];
  [v11 setSkipPeerErrorReason:v10];

  [v11 setForceReconnect:v75];
  [v11 setProductTypePrefix:self->_productTypePrefix];
  [v11 setConnectionProtocolTechnology:1];
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
  int v44 = (void *)objc_claimAutoreleasedReturnValue([v43 assistantIdentifier]);
  [v11 setAssistantIdentifier:v44];

  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 peerAssistantIdentifier]);
  [v11 setPeerAssistantIdentifier:v46];

  [v11 setPeerType:self->_peerType];
  [v11 setPeerVersion:self->_peerVersion];
  id v47 = objc_msgSend( v11,  "setUsesProxyConnection:",  AFIsNano(objc_msgSend(v11, "setUsesPeerManagedSync:", self->_siriConnectionUsesPeerManagedSync)));
  if (v77) {
    [v11 setUseWiFiHint:1];
  }

  return v11;
}

  PBDataWriterWriteUint32Field(v5, self->_attemptCount, 3LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x10000) == 0)
  {
LABEL_5:
    if ((*(_BYTE *)&has & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }

  *((_DWORD *)v4 + 39) = self->_pingCount;
  *((_DWORD *)v4 + 53) |= 0x20000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x2000000) == 0)
  {
LABEL_8:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_51;
  }

  *((_DWORD *)v5 + 43) = self->_rttBest;
  *((_DWORD *)v5 + 53) |= 0x80000u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  __int16 v48 = 0LL;
  if ((*(_DWORD *)&has & 0x200000) != 0)
  {
LABEL_33:
    id v47 = 2654435761LL * self->_rttSmoothed;
    if ((*(_DWORD *)&has & 0x400000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_51;
  }

  self->_attemptCount = *((_DWORD *)v4 + 28);
  *(_DWORD *)&self->_has |= 0x2000u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x10000) == 0)
  {
LABEL_5:
    if ((v6 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }

LABEL_52:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueCDPValue);
  uint64_t v17 = state64;
  if ((state64 & 0x40000) == 0)
  {
LABEL_31:
    if ((v17 & 0x80000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_54;
  }
}

  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_metricsCount));
  [v3 setObject:v26 forKey:@"metrics_count"];

  has = self->_has;
  if ((*(_BYTE *)&has & 4) == 0)
  {
LABEL_6:
    if ((*(_DWORD *)&has & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_54;
  }

  PBDataWriterWriteUint32Field(v5, self->_pingCount, 6LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x2000000) == 0)
  {
LABEL_8:
    if ((*(_DWORD *)&has & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }

  *((_DWORD *)v4 + 45) = self->_rttSmoothed;
  *((_DWORD *)v4 + 53) |= 0x200000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x400000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_54;
  }

  v5[12] = self->_txRetransmitBytes;
  *((_DWORD *)v5 + 53) |= 0x800u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }

  __int16 v45 = 0LL;
  if ((*(_WORD *)&has & 0x400) != 0)
  {
LABEL_36:
    int v44 = 2654435761u * self->_txPackets;
    if ((*(_WORD *)&has & 0x200) != 0) {
      goto LABEL_37;
    }
    goto LABEL_54;
  }

  self->_pingCount = *((_DWORD *)v4 + 39);
  *(_DWORD *)&self->_has |= 0x20000u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }

LABEL_53:
  -[NSMutableArray addObject:](v16, "addObject:", SAErrorIndicatorStatusValueNetworkProfileValue);
  uint64_t v17 = state64;
  if ((state64 & 0x80000) == 0)
  {
LABEL_32:
    if ((v17 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_55;
  }
}

  int v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", self->_pingMean));
  [v3 setObject:v27 forKey:@"ping_mean"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x20000) == 0)
  {
LABEL_7:
    if ((*(_DWORD *)&has & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_55;
  }

  PBDataWriterWriteUint32Field(v5, self->_unacknowledgedPingCount, 7LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x100000) == 0)
  {
LABEL_9:
    if ((*(_DWORD *)&has & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }

  *((_DWORD *)v4 + 46) = self->_rttVariance;
  *((_DWORD *)v4 + 53) |= 0x400000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_12:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_55;
  }

  v5[13] = self->_txUnacked;
  *((_DWORD *)v5 + 53) |= 0x1000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_17:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }

  int v44 = 0LL;
  if ((*(_WORD *)&has & 0x200) != 0)
  {
LABEL_37:
    uint64_t v43 = 2654435761u * self->_txBytes;
    if ((*(_WORD *)&has & 0x800) != 0) {
      goto LABEL_38;
    }
    goto LABEL_55;
  }

  self->_unacknowledgedPingCount = *((_DWORD *)v4 + 52);
  *(_DWORD *)&self->_has |= 0x2000000u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x100000) == 0)
  {
LABEL_9:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }

uint64_t sub_1000EFCFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000EFD08(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADContextManager _handleHomeAnnouncementSnapshotUpdate:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

void sub_1000EFDD0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 56LL);
  id v4 = a2;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 homeAnnouncement]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastPlayedAnnouncement]);

  if (v6)
  {
    unint64_t v7 = objc_alloc_init(&OBJC_CLASS___SAHomeCommunicationAnnouncement);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
    if (v8)
    {
      char v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v8));
      [(id)v7 setIdentifier:v9];
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 startedDate]);
    if (v10) {
      [(id)v7 setDatePlaybackStarted:v10];
    }
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 finishedDate]);
    if (v11) {
      [(id)v7 setDatePlaybackFinished:v11];
    }
  }

  else
  {
    unint64_t v7 = 0LL;
  }

  __int16 v12 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136315650;
    __int16 v16 = "-[ADContextManager _updateHomeAnnouncementWithContext:supplementalSnapshot:completion:]_block_invoke";
    __int16 v17 = 2112;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    unint64_t v20 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s cachedHomeAnnouncement = %@, proposedHomeAnnouncement = %@",  (uint8_t *)&v15,  0x20u);
  }

  if (v5 | v7) {
    unsigned int v13 = [(id)v5 isEqual:v7] ^ 1;
  }
  else {
    unsigned int v13 = 0;
  }
  id v14 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 136315394;
    __int16 v16 = "-[ADContextManager _updateHomeAnnouncementWithContext:supplementalSnapshot:completion:]_block_invoke";
    __int16 v17 = 1024;
    LODWORD(v1_Block_object_dispose(&STACK[0x250], 8) = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s didChange = %d", (uint8_t *)&v15, 0x12u);
    if (!v13) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }

  if (v13) {
LABEL_17:
  }
    [*(id *)(*(void *)(a1 + 32) + 56) setHomeAnnouncement:v7];
LABEL_18:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000F0034(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000F00C8;
  v7[3] = &unk_1004FD990;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1000F00C8(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[ADContextManager _updateHomeAnnouncementWithContext:supplementalSnapshot:completion:]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s fetchedSnapshot = %@",  (uint8_t *)&v5,  0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000F0190(uint64_t a1)
{
  int v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned __int8 v4 = [WeakRetained _isCollectingContext];

  id v5 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000F02AC;
  v7[3] = &unk_1004F14F8;
  unsigned __int8 v11 = v4;
  objc_copyWeak(&v9, (id *)(a1 + 56));
  id v8 = *(id *)(a1 + 40);
  objc_copyWeak(v10, v2);
  v10[1] = *(id *)(a1 + 64);
  [v5 setMyriadAdvertisementContext:v6 completion:v7];

  objc_destroyWeak(v10);
  objc_destroyWeak(&v9);
}

void sub_1000F0290(_Unwind_Exception *a1)
{
}

void sub_1000F02AC(uint64_t a1)
{
  uint64_t v18 = AFDeviceContextKeyMyriadAdvertisement;
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
  v17[0] = AFDeviceContextKeyIdentifier;
  v17[1] = AFDeviceContextKeyDeviceInfo;
  v17[2] = AFDeviceContextKeyPrivacyClass;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v17, 3LL));
  if (*(_BYTE *)(a1 + 64))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained && *(void *)(a1 + 32))
    {
      id v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 56);
        *(_DWORD *)__int128 buf = 136315394;
        id v14 = "-[ADContextManager pushSCDAAdvertisementContextToContextCollector:completion:]_block_invoke_2";
        __int16 v15 = 2048;
        uint64_t v16 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s #hal Fetching context after %f seconds",  buf,  0x16u);
      }

      dispatch_time_t v7 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0));
      id v8 = (dispatch_queue_s *)WeakRetained[25];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_1000F04D0;
      v9[3] = &unk_1004FDA30;
      void v9[4] = WeakRetained;
      id v10 = v2;
      id v11 = v3;
      id v12 = *(id *)(a1 + 32);
      dispatch_after(v7, v8, v9);
    }
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained pushContextToContextCollectorIncludingKeys:v2 excludingMandatoryKeys:v3 expectingResponseIncludingKeys:v2 excludingMandator yKeys:v3 completion:*(void *)(a1 + 32)];
  }
}

id sub_1000F04D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) getContextIncludingKeys:*(void *)(a1 + 40) excludingMandatoryKeys:*(void *)(a1 + 48) timeOut:*(void *)(a1 + 56) completion:0.0];
}

void sub_1000F04E4(uint64_t a1)
{
  int v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned __int8 v4 = [WeakRetained _isCollectingContext];

  id v5 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000F0600;
  v7[3] = &unk_1004F14F8;
  unsigned __int8 v11 = v4;
  objc_copyWeak(&v9, (id *)(a1 + 56));
  id v8 = *(id *)(a1 + 40);
  objc_copyWeak(v10, v2);
  v10[1] = *(id *)(a1 + 64);
  [v5 setMyriadAdvertisementContext:v6 completion:v7];

  objc_destroyWeak(v10);
  objc_destroyWeak(&v9);
}

void sub_1000F05E4(_Unwind_Exception *a1)
{
}

void sub_1000F0600(uint64_t a1)
{
  uint64_t v18 = AFDeviceContextKeyMyriadAdvertisement;
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
  v17[0] = AFDeviceContextKeyIdentifier;
  v17[1] = AFDeviceContextKeyDeviceInfo;
  v17[2] = AFDeviceContextKeyPrivacyClass;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v17, 3LL));
  if (*(_BYTE *)(a1 + 64))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained && *(void *)(a1 + 32))
    {
      id v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 56);
        *(_DWORD *)__int128 buf = 136315394;
        id v14 = "-[ADContextManager pushMyriadAdvertisementContextToContextCollector:completion:]_block_invoke_2";
        __int16 v15 = 2048;
        uint64_t v16 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s #hal Fetching context after %f seconds",  buf,  0x16u);
      }

      dispatch_time_t v7 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0));
      id v8 = (dispatch_queue_s *)WeakRetained[25];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_1000F0824;
      v9[3] = &unk_1004FDA30;
      void v9[4] = WeakRetained;
      id v10 = v2;
      id v11 = v3;
      id v12 = *(id *)(a1 + 32);
      dispatch_after(v7, v8, v9);
    }
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained pushContextToContextCollectorIncludingKeys:v2 excludingMandatoryKeys:v3 expectingResponseIncludingKeys:v2 excludingMandator yKeys:v3 completion:*(void *)(a1 + 32)];
  }
}

id sub_1000F0824(uint64_t a1)
{
  return [*(id *)(a1 + 32) getContextIncludingKeys:*(void *)(a1 + 40) excludingMandatoryKeys:*(void *)(a1 + 48) timeOut:*(void *)(a1 + 56) completion:0.0];
}

id sub_1000F0838(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000F0894;
  v3[3] = &unk_1004FB0E0;
  void v3[4] = v1;
  return [v1 _updatePlaybackDevicesWithContext:&off_1005139D0 completion:v3];
}

void sub_1000F0894(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADContextManager _playbackDevicesDidChange:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

void sub_1000F095C(uint64_t a1)
{
  if (AFSupportsPlayThisOnThat( [*(id *)(*(void *)(a1 + 32) + 64) logEventWithType:4523 context:*(void *)(a1 + 40)]))
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_1000F0A20;
    v3[3] = &unk_1004F14D0;
    void v3[4] = *(void *)(a1 + 32);
    id v4 = *(id *)(a1 + 48);
    [v2 getPlaybackDeviceListWithCompletion:v3];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_1000F0A20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F0AB4;
  block[3] = &unk_1004FD9E0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1000F0AB4(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 56) playbackDeviceList]);
  unint64_t v3 = a1[5];
  id v4 = (id)v2;
  (*(void (**)(void))(a1[6] + 16LL))();
}

id sub_1000F0B30(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000F0B8C;
  v3[3] = &unk_1004FB0E0;
  void v3[4] = v1;
  return [v1 _updateSimpleThingsWithContext:&off_1005139A8 completion:v3];
}

void sub_1000F0B8C(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADContextManager _callStateDidChange:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

void sub_1000F0C54(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADContextManager _handleDeviceProblemsChangedWithToken:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

id sub_1000F0D1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reallyUpdateBackgroundContextIfNowPlayingInfoChangedForReason:0];
}

void sub_1000F0D28(uint64_t a1, int a2)
{
  if (a2)
  {
    unint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADContextManager _reallyUpdateBackgroundContextIfNowPlayingInfoChangedForReason:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

void sub_1000F0DF0(void *a1, void *a2)
{
  unint64_t v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 56) queueState]);
  int v5 = (void *)v4;
  if (v3 | v4) {
    unsigned int v6 = [(id)v4 isEqual:v3] ^ 1;
  }
  else {
    unsigned int v6 = 0;
  }
  id v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = a1[5];
    id v9 = v7;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v3 aceId]);
    int v11 = 136315906;
    id v12 = "-[ADContextManager _updateNowPlayingInfoWithContext:completion:]_block_invoke";
    __int16 v13 = 2048;
    uint64_t v14 = v8;
    __int16 v15 = 1024;
    unsigned int v16 = v6;
    __int16 v17 = 2112;
    uint64_t v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s group=%p didChange=%d queueState ID=%@",  (uint8_t *)&v11,  0x26u);
  }

  if (v6) {
    [*(id *)(a1[4] + 56) setQueueState:v3];
  }
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000F0F60(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 88LL);
    int v7 = 136315394;
    uint64_t v8 = "-[ADContextManager _scheduleNowPlayingRefreshForReason:isPlaying:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Updating NowPlaying info now for %@",  (uint8_t *)&v7,  0x16u);
  }

  if ([*(id *)(*(void *)(a1 + 32) + 88) count])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) allObjects]);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 sortedArrayUsingSelector:"compare:"]);

    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 componentsJoinedByString:@","]);
  }

  else
  {
    unsigned int v6 = 0LL;
  }

  [*(id *)(a1 + 32) _reallyUpdateBackgroundContextIfNowPlayingInfoChangedForReason:v6];
}

void sub_1000F1094(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = NSStringFromSelector(*(SEL *)(a1 + 40));
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  [v1 _scheduleNowPlayingRefreshForReason:v3 isPlaying:0];
}

void sub_1000F10D8(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(void *)(a1 + 40) == 1LL));
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = NSStringFromSelector(*(SEL *)(a1 + 48));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v2 _scheduleNowPlayingRefreshForReason:v4 isPlaying:v5];
}

id sub_1000F1148(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000F11A4;
  v3[3] = &unk_1004FB0E0;
  void v3[4] = v1;
  return [v1 _updateNavStatusWithContext:&off_100513958 completion:v3];
}

void sub_1000F11A4(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      unsigned int v6 = "-[ADContextManager navStatusDidChange:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

void sub_1000F126C(uint64_t a1, void *a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = v3 | v4;
  id v7 = (id)v3;
  if (v3 | v4)
  {
    if ([(id)v4 isEqual:v3])
    {
      unsigned int v5 = 0;
    }

    else
    {
      [*(id *)(*(void *)(a1 + 40) + 56) setLocalSearchGetNavigationStatusCompleted:v7];
      unsigned int v5 = 1;
    }
  }

  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v5;
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v6);
}

void sub_1000F12EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F13A8;
  block[3] = &unk_1004FD9E0;
  id v12 = v5;
  id v13 = v6;
  id v14 = v7;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1000F13A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___SALocalSearchGetNavigationStatusCompleted);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    id v4 = *(id *)(a1 + 32);
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v6 = &stru_1004FECA0;
      id v7 = *(const __CFString **)(a1 + 32);
      if (!v7) {
        id v7 = &stru_1004FECA0;
      }
      if (*(void *)(a1 + 40)) {
        id v6 = *(const __CFString **)(a1 + 40);
      }
      int v8 = 136315650;
      id v9 = "-[ADContextManager _updateNavStatusWithContext:completion:]_block_invoke_3";
      __int16 v10 = 2112;
      int v11 = v7;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Could not fetch route! %@ %@",  (uint8_t *)&v8,  0x20u);
    }

    id v4 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_1000F14CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000F1528;
  v3[3] = &unk_1004FB0E0;
  void v3[4] = v1;
  return [v1 _updateSimpleThingsWithContext:&off_100513930 completion:v3];
}

void sub_1000F1528(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADContextManager updateBackgroundContextIfHomeKitInfoChanged]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

uint64_t sub_1000F15F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000F1600(uint64_t a1)
{
}

void sub_1000F1608(uint64_t a1)
{
  id v2 = [(id)qword_100577CF0 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000F1640(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADContextManager _updateBackgroundContextIfMusicPersonalizationTokenChanged]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #background marking context as dirty",  (uint8_t *)&v5,  0xCu);
    }

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    [WeakRetained contextManagerDidUpdateBackgroundContext:*(void *)(a1 + 32)];
  }

id sub_1000F1708()
{
  return (id)qword_100577D40;
}

id sub_1000F1714()
{
  if (qword_100577D38 != -1) {
    dispatch_once(&qword_100577D38, &stru_1004F15D0);
  }
  return (id)qword_100577D40;
}

void sub_1000F1754(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000F1828;
  block[3] = &unk_1004FCBB0;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 40);
  block[1] = 3221225472LL;
  id v13 = v6;
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, block);
}

void sub_1000F1828(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v11 = "-[ADContextManager _updateMusicPersonalizationTokenWithContext:completion:]_block_invoke_2";
      __int16 v12 = 2112;
      uint64_t v13 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
    }
  }

  id v4 = *(id *)(a1 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 56) musicPersonalizationToken]);
  unsigned int v6 = [v5 isEqual:v4];
  if ((v6 & 1) == 0) {
    [*(id *)(*(void *)(a1 + 48) + 56) setMusicPersonalizationToken:v4];
  }
  if (v4)
  {
    [*(id *)(a1 + 48) _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:v6 ^ 1 completion:*(void *)(a1 + 64)];
  }

  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000F19A8;
    v8[3] = &unk_1004F1368;
    uint64_t v7 = *(void **)(a1 + 56);
    void v8[4] = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 64);
    [v7 getTokenStatusForcingRefresh:0 completion:v8];
  }
}

void sub_1000F19A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000F1A68;
  v12[3] = &unk_1004FDA30;
  void v12[4] = v7;
  id v13 = v5;
  id v14 = v6;
  id v15 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_1000F1A68(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _makeUserTokenStatusWithICTokenStatus:*(void *)(a1 + 40) icError:*(void *)(a1 + 48)]);
  [*(id *)(*(void *)(a1 + 32) + 56) setMusicPersonalizationTokenStatus:v2];
  [*(id *)(a1 + 32) _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:1 completion:*(void *)(a1 + 56)];
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 errorCode]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 lastUpdateAttemptTime]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 shouldExcludeFromBackgroundRefresh]);
    int v8 = 136315906;
    id v9 = "-[ADContextManager _updateMusicPersonalizationTokenWithContext:completion:]_block_invoke_2";
    __int16 v10 = 2112;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Token status errorCode:%@ lastUpdateAttemptTime:%@ shouldExcludeFromBackgroundRefresh: %@",  (uint8_t *)&v8,  0x2Au);
  }
}

void sub_1000F1BBC(id a1)
{
  if (!qword_100577D48)
  {
    qword_100577D48 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud", 2);
    if (!qword_100577D48) {
      __assert_rtn("iTunesCloudLibrary", "ADContextManager.m", 139, "frameworkLibrary");
    }
  }

  qword_100577D40 = (uint64_t)objc_getClass("ICLibraryAuthServiceClientTokenProvider");
  if (!qword_100577D40) {
    __assert_rtn( "initICLibraryAuthServiceClientTokenProvider_block_invoke",  "ADContextManager.m",  140,  "classICLibraryAuthServiceClientTokenProvider");
  }
  off_100572E40 = sub_1000F1708;
}

void sub_1000F1C60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int16 v12 = v7;
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v19 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
    __int16 v20 = 2048;
    id v21 = [v5 count];
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s Received %lu tokens", buf, 0x16u);
  }

  if (![v5 count])
  {
    int v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (v6)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        __int16 v19 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
        __int16 v20 = 2112;
        id v21 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s No tokens found and error is %@",  buf,  0x16u);
      }
    }

    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v19 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s No tokens found, but no error either.",  buf,  0xCu);
    }
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000F1E94;
  v13[3] = &unk_1004F1318;
  id v9 = *(void **)(a1 + 32);
  void v13[4] = *(void *)(a1 + 40);
  id v14 = v5;
  char v17 = *(_BYTE *)(a1 + 56);
  id v15 = v6;
  id v16 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  [v9 getAllTokenStatusForAssistantForcingRefresh:0 completion:v13];
}

void sub_1000F1E94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v14 = v7;
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v23 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
    __int16 v24 = 2048;
    id v25 = [v5 count];
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Received %lu token statuses",  buf,  0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F202C;
  block[3] = &unk_1004F73C8;
  void block[4] = v8;
  id v11 = v9;
  char v21 = *(_BYTE *)(a1 + 64);
  id v16 = v11;
  id v17 = v5;
  id v18 = v6;
  id v19 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 56);
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v10, block);
}

void sub_1000F202C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) allMusicPersonalizationTokens]);
  uint64_t v3 = (void *)v2;
  if (*(_BYTE *)(a1 + 80) || v2 | *(void *)(a1 + 40) && !objc_msgSend((id)v2, "isEqual:"))
  {
    char v4 = 1;
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v24 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s No changes to DynamiteClientState tokens",  buf,  0xCu);
    }

    char v4 = 0;
  }

  if ([*(id *)(a1 + 48) count])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1000F2374;
    void v17[3] = &unk_1004F12F0;
    uint64_t v7 = *(void **)(a1 + 48);
    id v18 = *(id *)(a1 + 40);
    id v19 = *(id *)(a1 + 56);
    id v8 = *(id *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 32);
    id v20 = v8;
    uint64_t v21 = v9;
    unint64_t v10 = v6;
    id v22 = (id)v10;
    [v7 enumerateKeysAndObjectsUsingBlock:v17];
    uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) allMusicPersonalizationTokenStatuses]);
    id v12 = (void *)v11;
    if ((v4 & 1) != 0 || v10 | v11 && ![(id)v11 isEqual:v10])
    {
      [*(id *)(*(void *)(a1 + 32) + 56) setAllMusicPersonalizationTokenStatuses:v10];
      id v13 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
    }

    else
    {
      id v16 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v24 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s No changes to DynamiteClientState tokens or token statuses",  buf,  0xCu);
      }

      id v13 = *(void (**)(void))(*(void *)(a1 + 72) + 16LL);
    }

    v13();
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 56);
    id v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (v14)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        __int16 v24 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
        __int16 v25 = 2112;
        uint64_t v26 = v14;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s No token statuses found and error is %@",  buf,  0x16u);
      }
    }

    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v24 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s No token statuses found, but no error either.",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_1000F2374(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 tokenResult]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 token]);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v5];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 lastError]);
  if (!v9 && !*(void *)(a1 + 40))
  {
    if (!*(void *)(a1 + 48)) {
      goto LABEL_11;
    }
    uint64_t v11 = *(void **)(a1 + 56);
    goto LABEL_7;
  }

  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(a1 + 56);
  if (!v10) {
LABEL_7:
  }
    uint64_t v10 = *(void *)(a1 + 48);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 _makeUserTokenStatusWithICTokenStatus:v6 icError:v10]);
  id v13 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = v13;
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v12 errorCode]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v12 lastUpdateAttemptTime]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 shouldExcludeFromBackgroundRefresh]);
    int v18 = 136316162;
    id v19 = "-[ADContextManager _updateMultiUserPersonalizationTokensWithSingleUserTokenChanged:completion:]_block_invoke";
    __int16 v20 = 2112;
    id v21 = v5;
    __int16 v22 = 2112;
    __int128 v23 = v15;
    __int16 v24 = 2112;
    __int16 v25 = v16;
    __int16 v26 = 2112;
    int v27 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Received token status for sharedId %@: errorCode:%@ lastUpdateAttemptTime:%@ shouldExcludeFromBackgroundRefresh: %@",  (uint8_t *)&v18,  0x34u);
  }

  [*(id *)(a1 + 64) setObject:v12 forKeyedSubscript:v5];

LABEL_11:
}

void sub_1000F254C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0) {
    id v9 = v7;
  }
  else {
    id v9 = 0LL;
  }

  id v10 = v6;
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = v10;

    if (v9 && v12)
    {
      id v13 = sub_100165580(v9);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      id v15 = -[AFDeviceContext initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:]( objc_alloc(&OBJC_CLASS___AFDeviceContext),  "initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:",  v12,  sub_10016A850(v14, *(void **)(a1 + 32)),  0LL);
      id v16 = *(void **)(a1 + 40);
      id v17 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v14,  v15);
      [v16 addObject:v17];

      int v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315394;
        __int16 v20 = "-[ADContextManager _handleContextSnapshotPush:completion:]_block_invoke";
        __int16 v21 = 2112;
        __int16 v22 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s #hal %@", (uint8_t *)&v19, 0x16u);
      }
    }
  }

  else
  {

    id v12 = 0LL;
  }
}

void sub_1000F2738(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0) {
    id v9 = v7;
  }
  else {
    id v9 = 0LL;
  }

  id v10 = v6;
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    id v12 = v10;

    if (v9 && v12)
    {
      id v13 = sub_10016ABE0(v9);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      id v15 = -[AFDeviceContext initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:]( objc_alloc(&OBJC_CLASS___AFDeviceContext),  "initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:",  v12,  sub_10016A850(v14, *(void **)(a1 + 32)),  0LL);
      id v16 = *(void **)(a1 + 40);
      id v17 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v14,  v15);
      [v16 addObject:v17];

      int v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315394;
        __int16 v20 = "-[ADContextManager _handleContextSnapshotPush:completion:]_block_invoke";
        __int16 v21 = 2112;
        __int16 v22 = v15;
        _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s #hal %@", (uint8_t *)&v19, 0x16u);
      }
    }
  }

  else
  {

    id v12 = 0LL;
  }
}

id sub_1000F2924(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 184) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1000F2930(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  if ([*(id *)(a1 + 32) count])
  {
    dispatch_group_enter(v2);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    id v5 = *(void **)(v3 + 256);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1000F2B24;
    v21[3] = &unk_1004F12A0;
    void v21[4] = v3;
    char v24 = *(_BYTE *)(a1 + 72);
    uint64_t v6 = *(void *)(a1 + 48);
    id v22 = *(id *)(a1 + 56);
    id v7 = v2;
    __int128 v23 = v7;
    [v5 getSerializedDeviceContextSnapshotIncludingKeys:v4 excludingMandatoryKeys:v6 completion:v21];
    dispatch_group_enter(v7);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localContextStore]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1000F2BDC;
    v15[3] = &unk_1004F12C8;
    char v20 = *(_BYTE *)(a1 + 72);
    int8x16_t v11 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v11.i64[0];
    int8x16_t v16 = vextq_s8(v11, v11, 8uLL);
    id v17 = *(id *)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    int v19 = v7;
    [v8 getLocalContextWithPrivacyClass:50 completion:v15];
  }

  id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 200LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F2CBC;
  block[3] = &unk_1004FD990;
  id v14 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 56);
  dispatch_group_notify(v2, v10, block);
}

void sub_1000F2B24(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  _DWORD v7[2] = sub_1000F2DC4;
  v7[3] = &unk_1004FC250;
  char v11 = *(_BYTE *)(a1 + 56);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 200LL);
  v7[1] = 3221225472LL;
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1000F2BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000F2CD8;
  block[3] = &unk_1004F5B20;
  char v15 = *(_BYTE *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 200);
  block[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1000F2CBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000F2CD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);
    id v5 = v4;
    if (v3)
    {
      id v6 = sub_10016AC9C(v4);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      if (!v7)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) localPeerInfo]);
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 assistantIdentifier]);
        goto LABEL_8;
      }
    }

    else
    {
      id v10 = sub_10016AD0C(v4);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v10);
      if (!v7)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) localPeerInfo]);
        uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 idsDeviceUniqueIdentifier]);
LABEL_8:
        id v11 = (id)v9;

        if (!v11)
        {
LABEL_12:

          goto LABEL_13;
        }

void sub_1000F2DC4(uint64_t a1)
{
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v26 objects:v36 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v27;
    *(void *)&__int128 v4 = 136315650LL;
    __int128 v25 = v4;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v7);
        int v9 = *(unsigned __int8 *)(a1 + 56);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "info", v25, (void)v26));
        id v11 = v10;
        if (v9) {
          id v12 = sub_10016AC9C(v10);
        }
        else {
          id v12 = sub_10016AD0C(v10);
        }
        id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

        if (v13)
        {
          id v14 = *(void **)(a1 + 40);
          char v15 = (void *)objc_claimAutoreleasedReturnValue([v8 content]);
          [v14 setObject:v15 forKey:v13];

          goto LABEL_15;
        }

        int v16 = *(unsigned __int8 *)(a1 + 56);
        id v17 = (void *)AFSiriLogContextDaemon;
        BOOL v18 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
        if (v16)
        {
          if (!v18) {
            goto LABEL_15;
          }
          int v19 = v17;
          char v20 = (void *)objc_claimAutoreleasedReturnValue([v8 info]);
          __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v8 content]);
          *(_DWORD *)__int128 buf = v25;
          __int128 v31 = "-[ADContextManager _handlePushContextMessage:fromDeviceWithPeerInfo:completion:]_block_invoke_3";
          __int16 v32 = 2112;
          __int128 v33 = v20;
          __int16 v34 = 2112;
          __int128 v35 = v21;
          id v22 = v19;
          __int128 v23 = "%s #hal No Assistant identifier in %@. Skipping %@.";
        }

        else
        {
          if (!v18) {
            goto LABEL_15;
          }
          int v19 = v17;
          char v20 = (void *)objc_claimAutoreleasedReturnValue([v8 info]);
          __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v8 content]);
          *(_DWORD *)__int128 buf = v25;
          __int128 v31 = "-[ADContextManager _handlePushContextMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
          __int16 v32 = 2112;
          __int128 v33 = v20;
          __int16 v34 = 2112;
          __int128 v35 = v21;
          id v22 = v19;
          __int128 v23 = "%s #hal No IDS device unique identifier in %@. Skipping %@.";
        }

        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x20u);

LABEL_15:
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v24 = [v2 countByEnumeratingWithState:&v26 objects:v36 count:16];
      id v5 = v24;
    }

    while (v24);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000F3058(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315138;
    int v9 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s #hal Fetch local context completed",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
  id v7 = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F313C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  int v8 = (void *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      id v10 = v8;
      int v12 = 136315650;
      id v13 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2048;
      id v17 = [v6 count];
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #hal Force fetching from %@ completed, count: %ld",  (uint8_t *)&v12,  0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 136315650;
    id v13 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "%s #hal Failed to force fetch from %@: %@",  (uint8_t *)&v12,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000F32D0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  int v8 = (void *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = v8;
      int v10 = 136315394;
      uint64_t v11 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
      __int16 v12 = 2048;
      id v13 = [v6 count];
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #hal Fetch remote context snapshot completed, count: %ld",  (uint8_t *)&v10,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v10 = 136315394;
    uint64_t v11 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "%s #hal Failed to fetch context snapshot: %@",  (uint8_t *)&v10,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F3448(uint64_t a1, void *a2)
{
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (a2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
      __int16 v53 = 2048;
      int v54 = a2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal Context collection completed unsuccessfully with signal: %ld",  buf,  0x16u);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v5 logEventWithType:4589 context:0];
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal Context collection completed successfully",  buf,  0xCu);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) cancel];
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;

  int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned __int8 v10 = [v9 assistantIsEnabled];

  if ((v10 & 1) != 0)
  {
    int v11 = *(unsigned __int8 *)(a1 + 80);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) localPeerInfo]);
    id v13 = v12;
    if (v11) {
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v12 assistantIdentifier]);
    }
    else {
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v12 idsDeviceUniqueIdentifier]);
    }
    __int16 v16 = (void *)v14;

    id v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (v16)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v44 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
        __int16 v53 = 2112;
        int v54 = v44;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s #hal Including local device context: %@",  buf,  0x16u);
      }

      BOOL v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) serializedBackingStore]);
      -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v18, v16);
    }

    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s #hal Excluding local device context due to missing device identifier",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v52 = "-[ADContextManager _handleAggregateContextFetchWithMessage:fromDeviceWithPeerInfo:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s #hal Excluding local device context because Siri is disabled on this device",  buf,  0xCu);
    }
  }

  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id v19 = *(id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  id v20 = [v19 countByEnumeratingWithState:&v46 objects:v50 count:16];
  if (v20)
  {
    id v22 = v20;
    uint64_t v23 = *(void *)v47;
    *(void *)&__int128 v21 = 136315138LL;
    __int128 v45 = v21;
    do
    {
      id v24 = 0LL;
      do
      {
        if (*(void *)v47 != v23) {
          objc_enumerationMutation(v19);
        }
        __int128 v25 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)v24);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "info", v45));
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v25 content]);
        if ((sub_10016A850(v26, *(void **)(a1 + 40)) & 1) == 0)
        {
          int v29 = *(unsigned __int8 *)(a1 + 80);
          __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v27 deviceInfo]);
          __int128 v31 = v30;
          if (v29)
          {
            id v32 = sub_10016AC9C(v30);
            __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
            if (!v33)
            {
              id v34 = sub_10016AC9C(v26);
              uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
              goto LABEL_34;
            }

id sub_1000F3A84(uint64_t a1)
{
  return [*(id *)(a1 + 32) invokeWithSignal:0];
}

id sub_1000F3A90(uint64_t a1)
{
  return [*(id *)(a1 + 32) invokeWithSignal:-2];
}

uint64_t sub_1000F3A9C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

uint64_t sub_1000F3AB4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0LL, a2);
  }
  return result;
}

id sub_1000F3AD0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _configuredContextLink]);
  uint64_t v3 = *(void *)(a1 + 32);
  __int128 v4 = *(void **)(v3 + 192);
  *(void *)(v3 + 192) = v2;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 192), "addListener:");
  [*(id *)(*(void *)(a1 + 32) + 248) updateRapportLink:*(void *)(*(void *)(a1 + 32) + 192)];
  return [*(id *)(*(void *)(a1 + 32) + 256) updateRapportLink:*(void *)(*(void *)(a1 + 32) + 192)];
}

uint64_t sub_1000F3B30(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 192LL)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16LL))();
  }
  return result;
}

void sub_1000F3B4C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[31] == *(void *)(a1 + 40))
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    _DWORD v2[2] = sub_1000F3BC8;
    v2[3] = &unk_1004F11D8;
    id v3 = *(id *)(a1 + 48);
    [v1 _enumerateDeviceContextConnectionsUsingBlock:v2];
  }

id sub_1000F3BC8(uint64_t a1, void *a2)
{
  return [a2 updateLocalDeviceContext:*(void *)(a1 + 32)];
}

void sub_1000F3BD4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(unsigned __int8 *)(a1 + 48);
    int v9 = 136315650;
    unsigned __int8 v10 = "-[ADContextManager contextCollectorChangedToDevicesWithIdentifiers:localDeviceIsCollector:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 1024;
    int v14 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal collectorID(s): %@, isLocal: %d",  (uint8_t *)&v9,  0x1Cu);
  }

  int v3 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 240LL);
  int v4 = *(unsigned __int8 *)(a1 + 48);
  if ([*(id *)(a1 + 32) count])
  {
    [*(id *)(a1 + 40) _setCollectingContext:*(unsigned __int8 *)(a1 + 48)];
  }

  else
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      unsigned __int8 v10 = "-[ADContextManager contextCollectorChangedToDevicesWithIdentifiers:localDeviceIsCollector:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s #hal No collector device found",  (uint8_t *)&v9,  0xCu);
    }
  }

  if (v3 != v4)
  {
    uint64_t v6 = *(void **)(a1 + 40);
    if (*(_BYTE *)(a1 + 48)) {
      [v6 _startPeriodicContextFetchFromNearbyDevices];
    }
    else {
      [v6 _stopPeriodicContextFetchFromNearbyDevices];
    }
  }

id sub_1000F3D44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeDeviceContextConnection:*(void *)(a1 + 40)];
}

id sub_1000F3D50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addDeviceContextConnection:*(void *)(a1 + 40)];
}

void sub_1000F3D5C(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleDeviceProblemsChangedWithToken:a2];
}

void sub_1000F3D98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateBackgroundContextIfMusicPersonalizationTokenChanged];
}

void sub_1000F3DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000F3E6C;
  v6[3] = &unk_1004FBF48;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_1000F3E6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _handleHomeAnnouncementSnapshotUpdate:*(void *)(a1 + 32)];
}

id sub_1000F3EA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getBackgroundContext:*(void *)(a1 + 40)];
}

void sub_1000F3EB4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got NavStatus ctxg=%p", (uint8_t *)&v4, 0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F3F74(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got NowPlaying ctxg=%p", (uint8_t *)&v4, 0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F4034(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got PlaybackDevices ctxg=%p",  (uint8_t *)&v4,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F40F4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got Simple Context ctxg=%p",  (uint8_t *)&v4,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F41B4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got DeviceProblems ctxg=%p",  (uint8_t *)&v4,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F4274(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got Music Personalization Token ctxg=%p",  (uint8_t *)&v4,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F4334(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got HomeAnnouncement ctxg=%p",  (uint8_t *)&v4,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000F43F4(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSUUID);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v2, "UUIDString"));

  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 48);
    int v8 = 136315650;
    int v9 = "-[ADContextManager _getBackgroundContext:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2112;
    __int16 v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Done ctxg=%p aceID=%@", (uint8_t *)&v8, 0x20u);
  }

  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 56) backgroundContextWithCachedObjects]);
  [v6 setAceId:v3];
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7) {
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v6);
  }
}

id sub_1000F4528(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v11 = @"didChange";
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  __int16 v12 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));

  if (v3)
  {
    v10[0] = v3;
    v10[1] = v5;
    __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v10, 2LL));
    uint64_t v7 = AFAnalyticsContextsMerge();
    id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  }

  else
  {
    id v8 = v5;
  }

  return v8;
}

void sub_1000F4620(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v6 = [v2 initWithNSUUID:v3];

  [*(id *)(a1 + 32) _logForceFetchContextStartedWithHALMetricsId:*(void *)(a1 + 40) contextId:v6 timestamp:*(void *)(a1 + 56)];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 32);
  if (!*(void *)(a1 + 64) || *(void *)(a1 + 48)) {
    [v5 _logForceFetchContextFailedWithHALMetricsId:v4 contextId:v6 error:*(void *)(a1 + 48)];
  }
  else {
    objc_msgSend(v5, "_logForceFetchContextEndedWithHALMetricsId:contextId:forceFetchCount:", v4, v6);
  }
}

void sub_1000F46C4(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEvent);
  id v3 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALLocalFetchEnded);
  id v4 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALLocalFetchContext);
  [v4 setEnded:v3];
  [v2 setLocalFetchContext:v4];
  id v5 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEventMetadata);
  id v6 = [[SISchemaUUID alloc] initWithNSUUID:*(void *)(a1 + 32)];
  [v5 setHalId:v6];

  [v2 setEventMetadata:v5];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v7 emitMessage:v2];

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager _logFetchLocalContextEnded:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #hal Emitted localFetch.ended event %@ to sharedStream",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_1000F4840(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEvent);
  id v3 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALLocalFetchStarted);
  id v4 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALLocalFetchContext);
  [v4 setStartedOrChanged:v3];
  [v2 setLocalFetchContext:v4];
  id v5 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEventMetadata);
  id v6 = [[SISchemaUUID alloc] initWithNSUUID:*(void *)(a1 + 32)];
  [v5 setHalId:v6];

  [v2 setEventMetadata:v5];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v7 emitMessage:v2];

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager _logFetchLocalContextStarted:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #hal Emitted localFetch.started event %@ to sharedStream",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_1000F49BC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEvent);
  id v3 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALContextCollectorFetchFailed);
  id v4 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALContextCollectorFetchContext);
  [v4 setFailed:v3];
  [v2 setContextCollectorFetchContext:v4];
  id v5 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEventMetadata);
  id v6 = [[SISchemaUUID alloc] initWithNSUUID:*(void *)(a1 + 32)];
  [v5 setHalId:v6];

  [v2 setEventMetadata:v5];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v7 emitMessage:v2];

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager _logContextCollectorFetchFailed:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #hal Emitted contextCollectorFetch.failed event %@ to sharedStream",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_1000F4B38(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEvent);
  id v3 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALContextCollectorFetchEnded);
  [v3 setNumDeviceContextsFetched:*(unsigned int *)(a1 + 40)];
  id v4 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALContextCollectorFetchContext);
  [v4 setEnded:v3];
  [v2 setContextCollectorFetchContext:v4];
  id v5 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEventMetadata);
  id v6 = [[SISchemaUUID alloc] initWithNSUUID:*(void *)(a1 + 32)];
  [v5 setHalId:v6];

  [v2 setEventMetadata:v5];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v7 emitMessage:v2];

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager _logContextCollectorFetchEnded:numDeviceContextsFetched:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #hal Emitted contextCollectorFetch.ended event %@ to sharedStream",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_1000F4CBC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEvent);
  id v3 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALContextCollectorFetchStarted);
  id v4 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALContextCollectorFetchContext);
  [v4 setStartedOrChanged:v3];
  [v2 setContextCollectorFetchContext:v4];
  id v5 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALClientEventMetadata);
  id v6 = [[SISchemaUUID alloc] initWithNSUUID:*(void *)(a1 + 32)];
  [v5 setHalId:v6];

  [v2 setEventMetadata:v5];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v7 emitMessage:v2];

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager _logContextCollectorFetchStarted:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #hal Emitted contextCollectorFetch.started event %@ to sharedStream",  (uint8_t *)&v9,  0x16u);
  }
}

id sub_1000F4E38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 256);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000F4EA8;
  v5[3] = &unk_1004F1188;
  void v5[4] = v2;
  return [v3 fetchContextSnapshotFromAllDevicesWithCompletion:v5];
}

void sub_1000F4EA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v8 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    if (v8)
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v16 = "-[ADContextManager _startPeriodicContextFetchFromNearbyDevices]_block_invoke_2";
      __int16 v17 = 2112;
      id v18 = v6;
      int v9 = "%s Context refreshing error: %@";
      __int16 v10 = v7;
      uint32_t v11 = 22;
LABEL_7:
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v9, buf, v11);
    }
  }

  else if (v8)
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v16 = "-[ADContextManager _startPeriodicContextFetchFromNearbyDevices]_block_invoke";
    int v9 = "%s Context refreshing done";
    __int16 v10 = v7;
    uint32_t v11 = 12;
    goto LABEL_7;
  }

  uint64_t v12 = *(void *)(a1 + 32);
  __int16 v13 = *(dispatch_queue_s **)(v12 + 200);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F5008;
  block[3] = &unk_1004FD940;
  void block[4] = v12;
  dispatch_async(v13, block);
}

_BYTE *sub_1000F5008(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[240]) {
    return [result _startPeriodicContextFetchFromNearbyDevices];
  }
  return result;
}

void sub_1000F501C(uint64_t a1)
{
  if (*(void *)(a1 + 56) != 7LL)
  {
    if ([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 144)])
    {
      uint64_t v2 = *(void *)(a1 + 40);
LABEL_4:
      id v3 = *(void **)(v2 + 136);
      *(void *)(v2 + 136) = 0LL;

      uint64_t v4 = *(void *)(a1 + 40);
      id v5 = *(void **)(v4 + 144);
      *(void *)(v4 + 144) = 0LL;

      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void **)(v6 + 152);
      *(void *)(v6 + 152) = 0LL;

      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = *(void **)(v8 + 112);
      *(void *)(v8 + 112) = 0LL;

      [*(id *)(*(void *)(a1 + 40) + 120) removeAllObjects];
      __int16 v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 136315138;
        __int16 v17 = "-[ADContextManager requestLifecycleObserver:requestDidEndWithInfo:origin:client:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #hal context snapshot cleared",  (uint8_t *)&v16,  0xCu);
      }

      return;
    }

    if (!*(void *)(a1 + 32))
    {
      uint64_t v2 = *(void *)(a1 + 40);
      if (!*(void *)(v2 + 144)) {
        goto LABEL_4;
      }
    }
  }

  uint32_t v11 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void **)(a1 + 48);
    __int16 v13 = v11;
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 uuid]);
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 144LL);
    int v16 = 136315650;
    __int16 v17 = "-[ADContextManager requestLifecycleObserver:requestDidEndWithInfo:origin:client:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v14;
    __int16 v20 = 2112;
    uint64_t v21 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s #hal ended request has different UUID (%@) than current request (%@). Not clearing context snapshot.",  (uint8_t *)&v16,  0x20u);
  }

void sub_1000F51E8(uint64_t a1)
{
  if (*(void *)(a1 + 48) == 7LL
    || (uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]), v2, !v2))
  {
    uint64_t v21 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v22 = *(void **)(a1 + 32);
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v15 = v21;
      id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v23));
      int v26 = 136315650;
      __int128 v27 = "-[ADContextManager requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke";
      __int16 v28 = 2112;
      int v29 = v22;
      __int16 v30 = 2112;
      __int128 v31 = v24;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s #hal Not updating requestDate or currentRequestInfoUUID for requestInfo: %@, origin: %@",  (uint8_t *)&v26,  0x20u);

LABEL_16:
    }
  }

  else
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 144);
    *(void *)(v4 + 144) = v3;

    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      __int128 v25 = *(void **)(*(void *)(a1 + 40) + 144LL);
      int v26 = 136315394;
      __int128 v27 = "-[ADContextManager requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke";
      __int16 v28 = 2112;
      int v29 = v25;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s #hal _currentRequestInfoUUID set to %@",  (uint8_t *)&v26,  0x16u);
    }

    uint64_t v7 = mach_absolute_time();
    double TimeInterval = AFMachAbsoluteTimeGetTimeInterval(v7 - (void)[*(id *)(a1 + 32) timestamp]);
    if (TimeInterval > 0.0 && TimeInterval < 5.0)
    {
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 dateByAddingTimeInterval:-TimeInterval]);
      uint64_t v12 = *(void *)(a1 + 40);
      __int16 v13 = *(void **)(v12 + 152);
      *(void *)(v12 + 152) = v11;

      if (AFIsInternalInstall(v14))
      {
        uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
        int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSLocale localeWithLocaleIdentifier:]( &OBJC_CLASS___NSLocale,  "localeWithLocaleIdentifier:",  @"en_US"));
        -[os_log_s setLocale:](v15, "setLocale:", v16);

        -[os_log_s setLocalizedDateFormatFromTemplate:]( v15,  "setLocalizedDateFormatFromTemplate:",  @"HH:mm:ss.SSS");
        __int16 v17 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 152LL);
          id v19 = v17;
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s stringFromDate:](v15, "stringFromDate:", v18));
          int v26 = 136315394;
          __int128 v27 = "-[ADContextManager requestLifecycleObserver:requestWillBeginWithInfo:origin:client:]_block_invoke";
          __int16 v28 = 2112;
          int v29 = v20;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s #hal _currentRequestDate set to %@",  (uint8_t *)&v26,  0x16u);
        }

        goto LABEL_16;
      }
    }
  }

void sub_1000F54DC(void *a1)
{
  uint64_t v1 = a1[6];
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 184) objectForKey:a1[5]]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1000F5528(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count])
  {
    uint64_t v33 = a1;
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v34 = v3;
    id v6 = v3;
    id v7 = [v6 countByEnumeratingWithState:&v38 objects:v50 count:16];
    if (!v7) {
      goto LABEL_17;
    }
    id v8 = v7;
    uint64_t v9 = *(void *)v39;
    while (1)
    {
      __int16 v10 = 0LL;
      do
      {
        if (*(void *)v39 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v10);
        id v12 = sub_10029C69C(v11);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
        if (v13)
        {
          uint64_t v14 = (void *)v13;
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v11 content]);
          int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 serializedBackingStore]);
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v16, v14);

LABEL_11:
          goto LABEL_12;
        }

        id v17 = sub_10029C604(v11);
        uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
        if (v18)
        {
          uint64_t v14 = (void *)v18;
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v11 content]);
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 serializedBackingStore]);
          -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v20, v14);

          goto LABEL_11;
        }

        uint64_t v21 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          id v22 = v21;
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v11 info]);
          id v24 = (void *)objc_claimAutoreleasedReturnValue([v11 content]);
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 deviceInfo]);
          *(_DWORD *)__int128 buf = 136315650;
          __int128 v45 = "-[ADContextManager pushContextSnapshotForCurrentRequestWithID:toDevice:]_block_invoke";
          __int16 v46 = 2112;
          __int128 v47 = v23;
          __int16 v48 = 2112;
          __int128 v49 = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s #hal Unable to find IDS device unique identifier or Assistant identifier in %@ %@",  buf,  0x20u);
        }

void sub_1000F58AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 136315650;
      uint64_t v11 = "-[ADContextManager pushContextSnapshotForCurrentRequestWithID:toDevice:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #hal Error pushing current context snapshot for request %@ to device %@",  (uint8_t *)&v10,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315138;
    uint64_t v11 = "-[ADContextManager pushContextSnapshotForCurrentRequestWithID:toDevice:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s #hal success", (uint8_t *)&v10, 0xCu);
  }
}

uint64_t sub_1000F59E8(void *a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = 1LL;
    goto LABEL_6;
  }

  if (a2 == -2)
  {
    uint64_t v4 = a1[4];
    if (!*(void *)(v4 + 128))
    {
      uint64_t v5 = 2LL;
LABEL_6:
      *(void *)(v4 + 12_Block_object_dispose(&STACK[0x250], 8) = v5;
    }
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_1000F5A50(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADContextManager getContextSnapshotForCurrentRequestWithCompletion:]_block_invoke_2";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Timed out fetching aggregated context",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained invokeWithSignal:-2];
  [*(id *)(*(void *)(a1 + 32) + 112) removeObject:WeakRetained];
}

id sub_1000F5B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 144))
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
      return [*(id *)(a1 + 40) invoke];
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v12 = "-[ADContextManager getContextSnapshotForCurrentRequestWithCompletion:]_block_invoke";
    id v6 = "%s #hal current request is nil, skip fetching context";
LABEL_15:
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v6, buf, 0xCu);
    return [*(id *)(a1 + 40) invoke];
  }

  if ([*(id *)(v2 + 112) count])
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v12 = "-[ADContextManager getContextSnapshotForCurrentRequestWithCompletion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal queue context snapshot completion",  buf,  0xCu);
    }

    return [*(id *)(*(void *)(a1 + 32) + 112) addObject:*(void *)(a1 + 40)];
  }

  if (*(void *)(*(void *)(a1 + 32) + 136LL))
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
      return [*(id *)(a1 + 40) invoke];
    }
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v12 = "-[ADContextManager getContextSnapshotForCurrentRequestWithCompletion:]_block_invoke";
    id v6 = "%s #hal return existing context snapshot";
    goto LABEL_15;
  }

  id v7 = -[NSMutableArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithObjects:",  *(void *)(a1 + 40),  0LL);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 112);
  *(void *)(v8 + 112) = v7;

  int v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v12 = "-[ADContextManager getContextSnapshotForCurrentRequestWithCompletion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #hal calling _fetchContextSnapshotForCurrentRequest",  buf,  0xCu);
  }

  return [*(id *)(a1 + 32) _fetchContextSnapshotForCurrentRequest];
}

void sub_1000F5D40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 128) == 2LL)
  {
    if ([*(id *)(v4 + 120) containsObject:*(void *)(v4 + 144)])
    {
      uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s #hal context snapshot fetch timed out and snapshot has been accessed by client, clear the snapshot",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) _logContextCollectorFetchFailed:*(void *)(a1 + 40)];
      uint64_t v6 = *(void *)(a1 + 32);
      if (!*(void *)(v6 + 144) && ![*(id *)(v6 + 136) count])
      {
        id v7 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #hal context snapshot cleared",  buf,  0xCu);
        }

        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = *(void **)(v8 + 136);
        *(void *)(v8 + 136) = 0LL;
      }

      goto LABEL_25;
    }

    uint64_t v4 = *(void *)(a1 + 32);
  }

  int v10 = *(void **)(a1 + 48);
  if (!v10) {
    goto LABEL_14;
  }
  if ([v10 isEqual:*(void *)(v4 + 144)])
  {
    uint64_t v4 = *(void *)(a1 + 32);
LABEL_14:
    if (([*(id *)(v4 + 120) containsObject:*(void *)(v4 + 144)] & 1) == 0
      && *(void *)(*(void *)(a1 + 32) + 128LL) == 2LL)
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        *(void *)&uint8_t buf[4] = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s #hal context snapshot fetch timed out but snapshot hasn't been accessed by client, proceeed to setting the snapshot",  buf,  0xCu);
      }
    }

    id v12 = sub_10029C1C4(v3);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 152);
    if (v15)
    {
      id v16 = v15;
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_10029CC64;
      __int128 v40 = &unk_1004F9580;
      id v41 = v16;
      id v17 = v16;
      uint64_t v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "af_mappedArray:", buf));

      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v13 = (void *)v18;
    }

    objc_storeStrong((id *)(v14 + 136), v13);
    id v19 = (void *)AFSiriLogContextDaemon;
    BOOL v20 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
    if (v20)
    {
      uint64_t v30 = *(void **)(*(void *)(a1 + 32) + 136LL);
      __int128 v31 = v19;
      id v32 = [v30 count];
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v32;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "%s #hal context snapshot set with %tu contexts.",  buf,  0x16u);
    }

    uint64_t v21 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void *)(v22 + 200);
    uint64_t v33 = _NSConcreteStackBlock;
    uint64_t v34 = 3221225472LL;
    uint64_t v35 = sub_1000F7238;
    id v36 = &unk_1004FD968;
    uint64_t v37 = v22;
    id v38 = v3;
    id v24 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v21,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v23,  &v33,  20.0);
    uint64_t v25 = *(void *)(a1 + 32);
    id v26 = *(void **)(v25 + 160);
    *(void *)(v25 + 160) = v24;

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 160), "start", v33, v34, v35, v36, v37);
    goto LABEL_25;
  }

  uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v28 = *(void *)(a1 + 48);
    int v29 = *(void **)(*(void *)(a1 + 32) + 144LL);
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v28;
    *(_WORD *)&buf[22] = 2112;
    __int128 v40 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "%s #hal skip setting context snapshot as the request has changed: %@ -> %@",  buf,  0x20u);
  }

void sub_1000F6178(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  v9[0] = @"context_collector_available";
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a2 count] != 0));
  v9[1] = @"local_is_collector";
  v10[0] = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  v10[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v9,  2LL));
  [v4 logEventWithType:4525 machAbsoluteTime:v5 context:v8];
}

void sub_1000F6274(uint64_t a1, void *a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 200LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = v4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v7, 1LL));
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  [*(id *)(a1 + 32) _logFetchLocalContextEnded:*(void *)(a1 + 40)];
}

void sub_1000F6328(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 200LL));
  uint64_t v7 = *(void *)(a1 + 56);
  id v8 = [v5 copy];
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000F6460;
  v13[3] = &unk_1004F1138;
  int v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v10;
  uint64_t v20 = *(void *)(a1 + 64);
  id v16 = v6;
  id v17 = v9;
  id v18 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 56);
  id v11 = v6;
  id v12 = v5;
  [v10 _getDevicesWithContexts:v12 passingTest:&stru_1004F0FC8 capabilitesPassingTest:&stru_1004F1008 completion:v13];
}

void sub_1000F6460(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) mutableCopy];
  id v5 = v4;
  if (v4) {
    id v6 = (NSMutableArray *)v4;
  }
  else {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  }
  uint64_t v7 = v6;

  uint64_t v53 = 0LL;
  int v54 = &v53;
  uint64_t v55 = 0x2020000000LL;
  uint64_t v56 = 0LL;
  v52[0] = 0LL;
  v52[1] = v52;
  v52[2] = 0x2020000000LL;
  v52[3] = 0LL;
  v50[0] = 0LL;
  v50[1] = v50;
  v50[2] = 0x3032000000LL;
  void v50[3] = sub_1000F15F0;
  v50[4] = sub_1000F1600;
  id v51 = 0LL;
  v40[2] = sub_1000F6A18;
  v40[3] = &unk_1004F1070;
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void **)(a1 + 48);
  v40[4] = *(void *)(a1 + 40);
  uint64_t v49 = v8;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  id v41 = v9;
  int v10 = v7;
  uint64_t v42 = v10;
  id v43 = *(id *)(a1 + 56);
  id v44 = *(id *)(a1 + 64);
  __int16 v46 = &v53;
  __int128 v47 = v52;
  __int16 v48 = v50;
  id v45 = *(id *)(a1 + 72);
  id v11 = objc_retainBlock(v40);
  if ([v3 count])
  {
    uint64_t v34 = 0LL;
    uint64_t v35 = &v34;
    uint64_t v36 = 0x3032000000LL;
    uint64_t v37 = sub_1000F15F0;
    id v38 = sub_1000F1600;
    id v39 = 0LL;
    id v12 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1000F6DD4;
    v30[3] = &unk_1004F1098;
    id v32 = &v34;
    uint64_t v33 = v50;
    __int128 v31 = v11;
    uint64_t v13 = -[AFSafetyBlock initWithBlock:](v12, "initWithBlock:", v30);
    id v14 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 200LL);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_1000F6E3C;
    v27[3] = &unk_1004FD968;
    id v16 = v3;
    id v28 = v16;
    id v17 = v13;
    int v29 = v17;
    id v18 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v14,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v15,  v27,  0.5);
    id v19 = (void *)v35[5];
    void v35[5] = (uint64_t)v18;

    [(id)v35[5] start];
    v54[3] = mach_absolute_time();
    uint64_t v20 = *(void **)(*(void *)(a1 + 40) + 256LL);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000F6F04;
    v22[3] = &unk_1004F1110;
    uint64_t v23 = v10;
    uint64_t v25 = v52;
    id v26 = v50;
    uint64_t v21 = v17;
    id v24 = v21;
    [v20 fetchContextSnapshotFromDevicesWithPeerInfo:v16 completion:v22];

    _Block_object_dispose(&v34, 8);
  }

  else
  {
    ((void (*)(void *))v11[2])(v11);
  }

  _Block_object_dispose(v50, 8);
  _Block_object_dispose(v52, 8);
  _Block_object_dispose(&v53, 8);
}

void sub_1000F67B8(_Unwind_Exception *a1)
{
}

BOOL sub_1000F67FC(id a1, NSArray *a2)
{
  return -[NSArray indexOfObjectPassingTest:](a2, "indexOfObjectPassingTest:", &stru_1004F1048) != 0x7FFFFFFFFFFFFFFFLL;
}

BOOL sub_1000F6828(id a1, SVDCapability *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___SVDVoiceTriggerCapability);
  BOOL v6 = (objc_opt_isKindOfClass(v4, v5) & 1) != 0
    && -[SVDCapability supportsVoiceTrigger](v4, "supportsVoiceTrigger") == (id)1;

  return v6;
}

BOOL sub_1000F6884(id a1, AFDeviceContext *a2)
{
  uint64_t v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AFDeviceContext alarmSnapshot](v2, "alarmSnapshot"));
  if ([v3 hasFiringAlarms])
  {
    BOOL v4 = 1;
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[AFDeviceContext timerSnapshot](v2, "timerSnapshot"));
    if ([v5 hasFiringTimers])
    {
      BOOL v4 = 1;
    }

    else
    {
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(-[AFDeviceContext playbackStateSnapshot](v2, "playbackStateSnapshot"));
      if ([v6 playbackState] == (id)1)
      {
        BOOL v4 = 1;
      }

      else
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[AFDeviceContext playbackStateSnapshot](v2, "playbackStateSnapshot"));
        if ([v7 playbackState] == (id)2)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[AFDeviceContext playbackStateSnapshot](v2, "playbackStateSnapshot"));
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 nowPlayingTimestamp]);
          if (v9)
          {
            id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            int v10 = (void *)objc_claimAutoreleasedReturnValue(-[AFDeviceContext playbackStateSnapshot](v2, "playbackStateSnapshot"));
            id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 nowPlayingTimestamp]);
            [v14 timeIntervalSinceDate:v11];
            BOOL v4 = v12 < 300.0;
          }

          else
          {
            BOOL v4 = 0;
          }
        }

        else
        {
          BOOL v4 = 0;
        }
      }
    }
  }

  LOBYTE(v3) = 0;
  return (char)v3;
}

void sub_1000F6A18(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = AFMachAbsoluteTimeGetMilliseconds(v2) - *(void *)(a1 + 104);
  BOOL v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = v4;
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v3));
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v33 = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke_7";
    __int16 v34 = 2112;
    id v35 = v21;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s #hal context fetch duration_in_ms: %@",  buf,  0x16u);
  }

  v30[0] = @"success";
  if (*(void *)(a1 + 40)) {
    BOOL v5 = 0LL;
  }
  else {
    BOOL v5 = *(void *)(*(void *)(a1 + 32) + 128LL) != 2LL;
  }
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v5));
  v31[0] = v6;
  v30[1] = @"timedOut";
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(void *)(*(void *)(a1 + 32) + 128LL) == 2LL));
  v31[1] = v7;
  v30[2] = @"duration_in_ms";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v3));
  v31[2] = v8;
  v30[3] = @"devices_count";
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  void v31[3] = v9;
  int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  4LL));

  [*(id *)(a1 + 56) logEventWithType:4526 context:v10];
  if (*(void *)(a1 + 40)) {
    [*(id *)(a1 + 32) _logContextCollectorFetchFailed:*(void *)(a1 + 64)];
  }
  else {
    objc_msgSend( *(id *)(a1 + 32),  "_logContextCollectorFetchEnded:numDeviceContextsFetched:",  *(void *)(a1 + 64),  objc_msgSend(*(id *)(a1 + 48), "count"));
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
  if (v11) {
    [*(id *)(a1 + 32) _logForceFetchWithStartTime:v11 forceFetchCount:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) forceFetchError:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) halMetricsId:*(void *)(a1 + 64)];
  }
  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  double v12 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 112LL);
    uint64_t v23 = v12;
    id v24 = [v22 count];
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v33 = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
    __int16 v34 = 2048;
    id v35 = v24;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "%s #hal dequeuing %tu snapshot completions",  buf,  0x16u);
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v13 = *(id *)(*(void *)(a1 + 32) + 112LL);
  id v14 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v26 != v16) {
          objc_enumerationMutation(v13);
        }
        objc_msgSend(*(id *)(*((void *)&v25 + 1) + 8 * (void)i), "invoke", (void)v25);
      }

      id v15 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v15);
  }

  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = *(void **)(v18 + 112);
  *(void *)(v18 + 112) = 0LL;
}

uint64_t sub_1000F6DD4(void *a1, uint64_t a2)
{
  if (a2 == -2)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3102LL));
    uint64_t v5 = *(void *)(a1[6] + 8LL);
    BOOL v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }

  return (*(uint64_t (**)(void))(a1[4] + 16LL))();
}

id sub_1000F6E3C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 136315394;
    BOOL v6 = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s #hal Timed out force fetching from %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 40) invokeWithSignal:-2];
}

void sub_1000F6F04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315650;
    __int128 v28 = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
    __int16 v29 = 2112;
    id v30 = v5;
    __int16 v31 = 2112;
    id v32 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #hal force fetched: %@, error: %@",  buf,  0x20u);
    if (v5) {
      goto LABEL_3;
    }
LABEL_15:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
    goto LABEL_16;
  }

  if (!v5) {
    goto LABEL_15;
  }
LABEL_3:
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = v5;
  id v8 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v22 + 1) + 8LL * (void)i);
        id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
        id v14 = *(void **)(a1 + 32);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_1000F7190;
        v20[3] = &unk_1004F10C0;
        void v20[4] = v12;
        id v15 = v13;
        uint64_t v21 = v15;
        [v14 enumerateObjectsUsingBlock:v20];
        if (-[NSMutableIndexSet count](v15, "count"))
        {
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472LL;
          v17[2] = sub_1000F7228;
          void v17[3] = &unk_1004F10E8;
          id v18 = *(id *)(a1 + 32);
          uint64_t v19 = v12;
          -[NSMutableIndexSet enumerateIndexesUsingBlock:](v15, "enumerateIndexesUsingBlock:", v17);
        }

        else
        {
          [*(id *)(a1 + 32) addObject:v12];
        }
      }

      id v9 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v9);
  }

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [obj count];
LABEL_16:
  [*(id *)(a1 + 40) invoke];
}

void sub_1000F7190(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v5 info]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 info]);

  LODWORD(v6) = sub_10016A850(v7, v8);
  if ((_DWORD)v6) {
    [*(id *)(a1 + 40) addIndex:a3];
  }
}

id sub_1000F7228(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) replaceObjectAtIndex:a2 withObject:*(void *)(a1 + 40)];
}

void sub_1000F7238(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 136);
  if (v2 == *(void **)(a1 + 40))
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #hal context snapshot cleared on timeout",  (uint8_t *)&v5,  0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
      uint64_t v2 = *(void **)(v1 + 136);
    }

    *(void *)(v1 + 136) = 0LL;
  }

void sub_1000F7308(id a1, AFPeerContentTuple *a2, unint64_t a3, BOOL *a4)
{
  id v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int16 v7 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerContentTuple content](a2, "content"));
    int v9 = 136315650;
    uint64_t v10 = "-[ADContextManager _fetchContextSnapshotForCurrentRequest]_block_invoke";
    __int16 v11 = 2048;
    unint64_t v12 = a3;
    __int16 v13 = 2112;
    id v14 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #hal context snapshot %tu: %@",  (uint8_t *)&v9,  0x20u);
  }

void sub_1000F73F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 200LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F74E4;
  block[3] = &unk_1004FCBB0;
  id v11 = *(id *)(a1 + 64);
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000F74D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000F74E4(uint64_t a1)
{
}

void sub_1000F7520(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  if (*(_BYTE *)(a1 + 56)
    || (id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) localPeerInfo]),
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 info]),
        unsigned int v7 = [v5 isEqual:v6],
        v6,
        v5,
        !v7))
  {
    id v14 = *(void **)(*(void *)(a1 + 32) + 24LL);
    id v15 = sub_10029CB20(v3);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1000F79C8;
    void v17[3] = &unk_1004FC770;
    id v18 = v3;
    id v19 = *(id *)(a1 + 40);
    id v20 = *(id *)(a1 + 48);
    [v14 getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:v16 includesAllReachableDevices:0 completion:v17];

    id v8 = v18;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 content]);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "af_serviceDeviceContextForKeys:excludeContextExpiredBefore:proximity:",  v9,  v10,  4000));

    unint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v23 = "-[ADContextManager getDeviceContextsForKeys:forForeignRequestID:includesNearbyDevices:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s #hal Returning service context for local device",  buf,  0xCu);
    }

    if (v11)
    {
      uint64_t v21 = v11;
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v21, 1LL));
    }

    else
    {
      __int16 v13 = &__NSArray0__struct;
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1000F7764(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000F7770(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 200);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000F78E0;
  block[3] = &unk_1004FD9E0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1000F7804(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AFPeerContentTuple);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) localPeerInfo]);
  id v6 = -[AFPeerContentTuple initWithInfo:content:](v4, "initWithInfo:content:", v5, v3);

  id v8 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000F78E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 144);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315394;
      id v7 = "-[ADContextManager getDeviceContextsForKeys:forForeignRequestID:includesNearbyDevices:completion:]_block_invoke_3";
      __int16 v8 = 2112;
      uint64_t v9 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #hal Updating contextSnapshot as read for requestId: %@",  (uint8_t *)&v6,  0x16u);
      uint64_t v2 = *(void *)(a1 + 32);
      uint64_t v3 = *(void *)(v2 + 144);
    }

    [*(id *)(v2 + 120) addObject:v3];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000F79C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v16[0] = 0LL;
  v16[1] = v16;
  void v16[2] = 0x3032000000LL;
  v16[3] = sub_1000F15F0;
  void v16[4] = sub_1000F1600;
  id v17 = 0LL;
  v14[0] = 0LL;
  v14[1] = v14;
  v14[2] = 0x3032000000LL;
  void v14[3] = sub_1000F15F0;
  void v14[4] = sub_1000F1600;
  id v15 = 0LL;
  uint64_t v4 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1000F7B10;
  v9[3] = &unk_1004F0EA8;
  unint64_t v12 = v16;
  id v5 = v3;
  id v10 = v5;
  __int16 v13 = v14;
  id v11 = *(id *)(a1 + 40);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "af_lenientMappedArray:", v9));
  (*(void (**)(void, void *, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v6,  v7,  v8);

  _Block_object_dispose(v14, 8);
  _Block_object_dispose(v16, 8);
}

void sub_1000F7AEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1000F7B10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 content]);
  unsigned int v5 = [v4 fromLocalDevice];
  char v6 = v5;
  uint64_t v7 = &off_100513240;
  if (v5) {
    uint64_t v8 = &off_100513240;
  }
  else {
    uint64_t v8 = 0LL;
  }
  uint64_t v9 = v8;
  if ((v6 & 1) != 0) {
    goto LABEL_32;
  }
  id v10 = sub_10029C604(v3);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  if (v11)
  {
    unint64_t v12 = (void *)v11;
    __int16 v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    if (!v13)
    {
      id v14 = sub_10029C7B0(*(void **)(a1 + 32));
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8LL);
      id v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      __int16 v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    }

    uint64_t v7 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v13 objectForKey:v12]);

    if (v7) {
      goto LABEL_32;
    }
  }

  id v18 = sub_10029C69C(v3);
  uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);
  if (!v19) {
    goto LABEL_37;
  }
  id v20 = (void *)v19;
  uint64_t v21 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (!v21)
  {
    id v22 = *(id *)(a1 + 32);
    __int128 v23 = v22;
    if (v22)
    {
      if ([v22 count])
      {
        id v66 = 0LL;
        v67[0] = _NSConcreteStackBlock;
        v67[1] = 3221225472LL;
        v67[2] = sub_10029C734;
        v67[3] = &unk_1004F9490;
        char v68 = 1;
        uint64_t ContentMapFromArray = AFPeerContentTupleGetContentMapFromArray(v23, v67, &stru_1004F94D0, 0LL, &v66);
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(ContentMapFromArray);
        id v61 = v66;
        id v26 = [v61 count];
        if (v26)
        {
          id v27 = v26;
          uint64_t v59 = v25;
          unsigned int v60 = v23;
          __int128 v28 = (void *)AFSiriLogContextDaemon;
          BOOL v29 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
          if (v29)
          {
            uint64_t v53 = v20;
            int v54 = v28;
            id v55 = [v60 count];
            *(_DWORD *)__int128 v75 = 136315650;
            __int128 v76 = "ADDeviceProximityGetMapByIDSDeviceUniqueIdentifierFromTuples";
            __int16 v77 = 2048;
            __int128 v78 = v27;
            __int16 v79 = 2048;
            id v80 = v55;
            _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "%s Rejected %tu/%tu device context tuples.",  v75,  0x20u);

            id v20 = v53;
          }

          __int128 v25 = v59;
          __int128 v23 = v60;
          if (AFIsInternalInstall(v29))
          {
            uint64_t v56 = v20;
            uint64_t v57 = a1;
            id v58 = v3;
            __int128 v64 = 0u;
            __int128 v65 = 0u;
            __int128 v62 = 0u;
            __int128 v63 = 0u;
            id v30 = v61;
            id v31 = [v30 countByEnumeratingWithState:&v62 objects:v75 count:16];
            if (v31)
            {
              id v32 = v31;
              uint64_t v33 = *(void *)v63;
              do
              {
                for (i = 0LL; i != v32; i = (char *)i + 1)
                {
                  if (*(void *)v63 != v33) {
                    objc_enumerationMutation(v30);
                  }
                  id v35 = (void *)AFSiriLogContextDaemon;
                  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v36 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)i);
                    uint64_t v37 = v35;
                    id v38 = (void *)objc_claimAutoreleasedReturnValue([v36 content]);
                    id v39 = (void *)objc_claimAutoreleasedReturnValue([v36 info]);
                    uint64_t CompactDescription = AFPeerInfoGetCompactDescription(v39);
                    id v41 = (void *)objc_claimAutoreleasedReturnValue(CompactDescription);
                    *(_DWORD *)__int128 buf = 136315650;
                    __int128 v70 = "ADDeviceProximityGetMapByIDSDeviceUniqueIdentifierFromTuples";
                    __int16 v71 = 2112;
                    __int128 v72 = v38;
                    __int16 v73 = 2112;
                    __int128 v74 = v41;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s Rejected %@ from %@.",  buf,  0x20u);
                  }
                }

                id v32 = [v30 countByEnumeratingWithState:&v62 objects:v75 count:16];
              }

              while (v32);
            }

            a1 = v57;
            id v3 = v58;
            id v20 = v56;
            __int128 v25 = v59;
            __int128 v23 = v60;
          }
        }
      }

      else
      {
        __int128 v25 = &__NSDictionary0__struct;
      }
    }

    else
    {
      __int128 v25 = 0LL;
    }

    uint64_t v42 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v43 = *(void **)(v42 + 40);
    *(void *)(v42 + 40) = v25;

    uint64_t v21 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  }

  uint64_t v7 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectForKey:", v20, v56, v57, v58));

  if (v7)
  {
LABEL_32:
    id v44 = [v7 integerValue];
  }

  else
  {
LABEL_37:
    id v44 = 0LL;
  }

  uint64_t v45 = *(void *)(a1 + 40);
  __int16 v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v4,  "af_serviceDeviceContextForKeys:excludeContextExpiredBefore:proximity:",  v45,  v46,  v44));

  if (v47)
  {
    __int16 v48 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v49 = v48;
      uint64_t Name = AFDeviceProximityGetName([v47 proximity]);
      id v51 = (void *)objc_claimAutoreleasedReturnValue(Name);
      *(_DWORD *)__int128 v75 = 136315650;
      __int128 v76 = "-[ADContextManager getDeviceContextsForKeys:forForeignRequestID:includesNearbyDevices:completion:]_block_invoke";
      __int16 v77 = 2112;
      __int128 v78 = v51;
      __int16 v79 = 2112;
      id v80 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "%s #hal Add device context with proximity: %@, %@",  v75,  0x20u);
    }
  }

  return v47;
}

void sub_1000F8010(uint64_t a1)
{
  uint64_t v61 = 0LL;
  __int128 v62 = &v61;
  uint64_t v63 = 0x3032000000LL;
  __int128 v64 = sub_1000F15F0;
  __int128 v65 = sub_1000F1600;
  id v66 = 0LL;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v59[0] = 0LL;
  v59[1] = v59;
  v59[2] = 0x3032000000LL;
  v59[3] = sub_1000F15F0;
  v59[4] = sub_1000F1600;
  id v60 = 0LL;
  id v3 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472LL;
  v52[2] = sub_1000F8558;
  v52[3] = &unk_1004F34C0;
  uint64_t v57 = &v61;
  id v53 = *(id *)(a1 + 32);
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(a1 + 40);
  int v54 = v4;
  uint64_t v55 = v5;
  id v58 = v59;
  id v56 = *(id *)(a1 + 64);
  char v6 = -[AFSafetyBlock initWithBlock:](v3, "initWithBlock:", v52);
  if (*(double *)(a1 + 80) > 0.0)
  {
    uint64_t v7 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
    double v8 = *(double *)(a1 + 80);
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 200LL);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_1000F8780;
    v48[3] = &unk_1004FD4C0;
    id v49 = v9;
    uint64_t v11 = v6;
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v50 = v11;
    uint64_t v51 = v12;
    __int16 v13 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v7,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v10,  v48,  v8);
    id v14 = (void *)v62[5];
    v62[5] = (uint64_t)v13;

    [(id)v62[5] start];
  }

  uint64_t v15 = dispatch_group_create();
  uint64_t v16 = v15;
  if (*(void *)(*(void *)(a1 + 40) + 248LL))
  {
    dispatch_group_enter(v15);
    id v18 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v19 = *(void **)(v17 + 248);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_1000F88C0;
    void v43[3] = &unk_1004F0E58;
    v43[4] = v17;
    id v44 = v18;
    uint64_t v45 = v4;
    id v47 = *(id *)(a1 + 72);
    __int16 v46 = v16;
    [v19 getLocalContextWithPrivacyClass:10 completion:v43];
  }

  else
  {
    id v20 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      char v68 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke";
      __int16 v69 = 2112;
      uint64_t v70 = v35;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s #hal Skip local fetch, nil context store (%@)",  buf,  0x16u);
    }
  }

  if (*(void *)(*(void *)(a1 + 40) + 256LL))
  {
    dispatch_group_enter(v16);
    if (AFSupportsHALOnDemandRapportConnection(v21, v22))
    {
      __int128 v23 = *(void **)(*(void *)(a1 + 40) + 192LL);
      if (!v23 || [v23 isInvalidated])
      {
        __int128 v24 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 136315394;
          char v68 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:complet"
                "ion:]_block_invoke";
          __int16 v69 = 2112;
          uint64_t v70 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%s #hal Resetting #on-demand connection for fetching remote contexts (%@)",  buf,  0x16u);
        }

        [*(id *)(a1 + 40) _resetContextLinkAndReconnectNow:1];
      }
    }

    id v27 = *(void **)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 40);
    __int128 v28 = *(void **)(v26 + 256);
    uint64_t v29 = *(void *)(a1 + 48);
    uint64_t v30 = *(void *)(a1 + 56);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_1000F899C;
    v38[3] = &unk_1004F3218;
    v38[4] = v26;
    id v39 = v27;
    uint64_t v42 = v59;
    __int128 v40 = v4;
    id v41 = v16;
    [v28 getContextSnapshotIncludingKeys:v29 excludingMandatoryKeys:v30 completion:v38];
  }

  else
  {
    id v31 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      char v68 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke";
      __int16 v69 = 2112;
      uint64_t v70 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s #hal Skip remote fetch, nil context store (%@)",  buf,  0x16u);
    }
  }

  uint64_t v33 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 200LL);
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_1000F8A88;
  v36[3] = &unk_1004FD940;
  uint64_t v37 = v6;
  __int16 v34 = v6;
  dispatch_group_notify(v16, v33, v36);

  _Block_object_dispose(v59, 8);
  _Block_object_dispose(&v61, 8);
}

void sub_1000F8520(_Unwind_Exception *a1)
{
}

void sub_1000F8558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v21 = 136315650;
    uint64_t v22 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke_2";
    __int16 v23 = 2112;
    uint64_t v24 = v5;
    __int16 v25 = 2112;
    uint64_t v26 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #hal safeCompletion fetchDebugID:%@, aggregatedDeviceContextTuples (%@)",  (uint8_t *)&v21,  0x20u);
  }

  kdebug_trace(722470328LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 192) configuration]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue([v7 connectionOptions]);
  id v9 = [v8 usesOnDemandConnection];

  if (v9 == (id)2)
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 192LL);
      int v21 = 136315650;
      uint64_t v22 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v11;
      __int16 v25 = 2112;
      uint64_t v26 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s #hal  invalidating #on-demand rapport link in safeCompletion for (%@): %@",  (uint8_t *)&v21,  0x20u);
    }

    [*(id *)(*(void *)(a1 + 48) + 192) invalidate];
    uint64_t v13 = *(void *)(a1 + 48);
    id v14 = *(void **)(v13 + 192);
    *(void *)(v13 + 192) = 0LL;
  }

  if (a2 == -2)
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3102LL));
    uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }

  uint64_t v18 = *(void *)(a1 + 56);
  id v19 = sub_10029C1C4(*(void **)(a1 + 40));
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  (*(void (**)(uint64_t, void *, void))(v18 + 16))( v18,  v20,  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
}

id sub_1000F8780(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 136315394;
    id v9 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s #hal timed out (%@)",  (uint8_t *)&v8,  0x16u);
  }

  id v3 = [*(id *)(a1 + 40) invokeWithSignal:-2];
  if (AFSupportsHALOnDemandRapportConnection(v3, v4))
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315138;
      id v9 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s #hal #on-demand invalidate on-demand connection on exit.",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 48) + 192) invalidate];
  }

  return [*(id *)(a1 + 40) invoke];
}

void sub_1000F88C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 200LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000F8E74;
  v7[3] = &unk_1004F7960;
  id v8 = v4;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1000F899C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v13[0] = _NSConcreteStackBlock;
  void v13[2] = sub_1000F8A90;
  v13[3] = &unk_1004F4218;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 200LL);
  v13[1] = 3221225472LL;
  id v14 = v6;
  id v15 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 64);
  id v16 = v9;
  uint64_t v19 = v10;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, v13);
}

id sub_1000F8A88(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_1000F8A90(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 || (id v8 = *(void **)(a1 + 40)) == 0LL)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void **)(v1 + 48);
      *(_DWORD *)__int128 buf = 136315650;
      id v39 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:"
            "]_block_invoke_2";
      __int16 v40 = 2112;
      id v41 = v4;
      __int16 v42 = 2112;
      id v43 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #hal Error fetching remote context (%@): %@",  buf,  0x20u);
      uint64_t v2 = *(void **)(v1 + 32);
    }

    uint64_t v5 = *(void *)(*(void *)(v1 + 72) + 8LL);
    id v6 = v2;
    uint64_t v7 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v6;
  }

  else
  {
    id v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = v9;
      id v11 = [v8 count];
      id v12 = *(void **)(v1 + 48);
      *(_DWORD *)__int128 buf = 136315650;
      id v39 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke";
      __int16 v40 = 2048;
      id v41 = v11;
      __int16 v42 = 2112;
      id v43 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s #hal Fetched %ld remote contexts (%@)",  buf,  0x20u);
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 localPeerInfo]);

    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id obj = *(id *)(v1 + 40);
    id v14 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v14)
    {
      id v16 = v14;
      uint64_t v17 = *(void *)v34;
      *(void *)&__int128 v15 = 136315650LL;
      __int128 v31 = v15;
      do
      {
        for (i = 0LL; i != v16; i = (char *)i + 1)
        {
          if (*(void *)v34 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
          id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "info", v31));
          if (sub_10016A850(v7, v20))
          {

LABEL_16:
            __int16 v25 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              uint64_t v26 = *(void **)(v1 + 48);
              *(_DWORD *)__int128 buf = v31;
              id v39 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:com"
                    "pletion:]_block_invoke";
              __int16 v40 = 2112;
              id v41 = v26;
              __int16 v42 = 2112;
              id v43 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s #hal Skip remote context (%@) because it is from local. %@",  buf,  0x20u);
            }

            continue;
          }

          int v21 = (void *)objc_claimAutoreleasedReturnValue([v19 content]);
          uint64_t v22 = v1;
          __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 deviceInfo]);
          char v24 = sub_10016A850(v7, v23);

          uint64_t v1 = v22;
          if ((v24 & 1) != 0) {
            goto LABEL_16;
          }
          id v27 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            __int128 v28 = *(void **)(v22 + 48);
            uint64_t v29 = v27;
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v19 content]);
            *(_DWORD *)__int128 buf = v31;
            id v39 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:compl"
                  "etion:]_block_invoke";
            __int16 v40 = 2112;
            id v41 = v28;
            __int16 v42 = 2112;
            id v43 = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%s #hal Remote context (%@): %@",  buf,  0x20u);

            uint64_t v1 = v22;
          }

          [*(id *)(v1 + 56) addObject:v19];
        }

        id v16 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      }

      while (v16);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(v1 + 64));
}

void sub_1000F8E74(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v8 = 136315650;
    id v9 = "-[ADContextManager getContextIncludingKeys:excludingMandatoryKeys:timeOut:localContextCompletion:completion:]_block_invoke_2";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s #hal Local context (%@): %@",  (uint8_t *)&v8,  0x20u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 16) localPeerInfo]);
  id v6 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v5,  *(void *)(a1 + 40));
  [*(id *)(a1 + 56) addObject:v6];
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    (*(void (**)(uint64_t, AFPeerContentTuple *))(v7 + 16))(v7, v6);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_1000F8F9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getNowPlayingMediaIsResumable:*(void *)(a1 + 40)];
}

id sub_1000F8FA8()
{
  if (qword_100577D30 != -1) {
    dispatch_once(&qword_100577D30, &stru_1004F15B0);
  }
  return (id)qword_100577D28;
}

void sub_1000F8FE8(uint64_t a1)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v22;
    *(void *)&__int128 v3 = 136315650LL;
    __int128 v19 = v3;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v1);
        }
        uint64_t v7 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sectionID", v19));
        [v8 isEqualToString:@"com.apple.reminders"];
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 saNotificationObject]);
        __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 type]);
        uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 date]);
        __int16 v12 = (void *)v11;
        uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
        if (v9) {
          BOOL v14 = v10 == 0LL;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14 || v11 == 0)
        {
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = v19;
            uint64_t v26 = "-[ADContextManager getAlertContextWithBulletins:externalAlarmSnapshot:timerSnapshot:nlAlertContextComp"
                  "letion:fullAlertContextCompletion:]_block_invoke";
            __int16 v27 = 2112;
            __int128 v28 = v10;
            __int16 v29 = 2114;
            uint64_t v30 = v12;
            _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Skipped sending invalid notification. display name %@, date %{public}@",  buf,  0x20u);
          }
        }

        else
        {
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315394;
            uint64_t v26 = "-[ADContextManager getAlertContextWithBulletins:externalAlarmSnapshot:timerSnapshot:nlAlertContextComp"
                  "letion:fullAlertContextCompletion:]_block_invoke";
            __int16 v27 = 2112;
            __int128 v28 = v7;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Sending notification %@", buf, 0x16u);
          }

          uint64_t v17 = *(void **)(a1 + 40);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
          [v17 setObject:v9 forKey:v18];
        }
      }

      id v4 = [v1 countByEnumeratingWithState:&v21 objects:v31 count:16];
    }

    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000F9264(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alarmsByID]);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_1000F95E8;
  void v31[3] = &unk_1004F0E08;
  __int128 v3 = *(void **)(a1 + 48);
  void v31[4] = *(void *)(a1 + 40);
  id v32 = v3;
  [v2 enumerateKeysAndObjectsUsingBlock:v31];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) timersByID]);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_1000F96F0;
  v29[3] = &unk_1004F0E30;
  v29[4] = *(void *)(a1 + 40);
  id v30 = *(id *)(a1 + 64);
  [v4 enumerateKeysAndObjectsUsingBlock:v29];

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allValues]);
  id v6 = [v5 countByEnumeratingWithState:&v25 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v5);
        }
        __int16 v10 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        uint64_t v11 = *(void **)(a1 + 72);
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
        [v11 setObject:v10 forKey:v12];
      }

      id v7 = [v5 countByEnumeratingWithState:&v25 objects:v34 count:16];
    }

    while (v7);
  }

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "allValues", 0));
  id v14 = [v13 countByEnumeratingWithState:&v21 objects:v33 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v22;
    do
    {
      for (j = 0LL; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)j);
        __int128 v19 = *(void **)(a1 + 72);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 identifier]);
        [v19 setObject:v18 forKey:v20];
      }

      id v15 = [v13 countByEnumeratingWithState:&v21 objects:v33 count:16];
    }

    while (v15);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

void sub_1000F9510(uint64_t a1)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___SASetNLAlertContext);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  [v4 setContext:v2];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_1000F957C(uint64_t a1)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___SASetAlertContext);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  [v4 setContext:v2];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_1000F95E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager getAlertContextWithBulletins:externalAlarmSnapshot:timerSnapshot:nlAlertContextCompletion:f"
          "ullAlertContextCompletion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s NLAlertContext [+] %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _alarmAceObjectFromAlarm:v6 withProximity:4000 inDeviceContext:0]);
  [*(id *)(a1 + 40) setObject:v8 forKey:v5];
}

void sub_1000F96F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "-[ADContextManager getAlertContextWithBulletins:externalAlarmSnapshot:timerSnapshot:nlAlertContextCompletion:f"
          "ullAlertContextCompletion:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s NLAlertContext [+] %@", (uint8_t *)&v9, 0x16u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _timerAceObjectFromTimer:v6 withProximity:4000 inDeviceContext:0]);
  [*(id *)(a1 + 40) setObject:v8 forKey:v5];
}

void sub_1000F97F8(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v2 = dispatch_queue_create("ADAlertContextQueue", v4);
  uint64_t v3 = (void *)qword_100577D28;
  qword_100577D28 = (uint64_t)v2;
}

void sub_1000F9848(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9 && (__int16 v10 = (os_log_s *)AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v23 = "-[ADContextManager _getCurrentUserActivityOnQueue:completion:]_block_invoke";
    __int16 v24 = 2114;
    id v25 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Error getting current user activity uuid %{public}@",  buf,  0x16u);
    if (!v7) {
      goto LABEL_7;
    }
  }

  else if (!v7)
  {
    goto LABEL_7;
  }

  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  __int16 v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    __int128 v23 = "-[ADContextManager _getCurrentUserActivityOnQueue:completion:]_block_invoke";
    __int16 v24 = 2112;
    id v25 = v8;
    __int16 v26 = 2048;
    uint64_t v27 = 0x4004000000000000LL;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Fetching NSUserActivity for %@ with %0.1g second timeout",  buf,  0x20u);
  }

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000F9A8C;
  void v17[3] = &unk_1004F0D90;
  id v18 = v8;
  id v12 = v7;
  uint64_t v13 = *(void *)(a1 + 48);
  id v19 = v12;
  uint64_t v21 = v13;
  __int128 v16 = *(_OWORD *)(a1 + 32);
  id v14 = (id)v16;
  __int128 v20 = v16;
  id v15 =  +[NSUserActivity _fetchUserActivityWithUUID:intervalToWaitForDocumentSynchronizationToComplete:completionHandler:]( &OBJC_CLASS___NSUserActivity,  "_fetchUserActivityWithUUID:intervalToWaitForDocumentSynchronizationToComplete:completionHandler:",  v12,  v17,  2.5);

LABEL_7:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1000F9A60(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(a1[5] + 8LL) + 40LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_1000F9A8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v8 = *(void **)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v23 = "-[ADContextManager _getCurrentUserActivityOnQueue:completion:]_block_invoke";
    __int16 v24 = 2112;
    id v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Got NSUserActivity for %@", buf, 0x16u);
  }

  if (v6 && (id v9 = (os_log_s *)AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v23 = "-[ADContextManager _getCurrentUserActivityOnQueue:completion:]_block_invoke";
    __int16 v24 = 2114;
    id v25 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Error getting current user activity from uuid %{public}@",  buf,  0x16u);
    if (!v5) {
      goto LABEL_14;
    }
  }

  else if (!v5)
  {
    goto LABEL_14;
  }

  id v10 = objc_alloc_init(&OBJC_CLASS___SAUserActivity);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
  [v10 setInternalGUID:v11];

  objc_msgSend(v10, "setIsEligibleForReminders:", objc_msgSend(v5, "_isEligibleForUserActivityReminders"));
  id v12 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = v12;
    unsigned int v14 = [v10 isEligibleForReminders];
    id v15 = @"NO";
    __int128 v23 = "-[ADContextManager _getCurrentUserActivityOnQueue:completion:]_block_invoke";
    *(_DWORD *)__int128 buf = 136315650;
    __int16 v24 = 2112;
    id v25 = v5;
    if (v14) {
      id v15 = @"YES";
    }
    __int16 v26 = 2112;
    uint64_t v27 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s User activity (%@) isEligibleForReminders: %@",  buf,  0x20u);
  }

  if (off_100572E38())
  {
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 externalMediaContentIdentifier]);

    if (v16)
    {
      uint64_t v21 = SAUserActivityEligibilityMediaContextValue;
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v21, 1LL));
      [v10 setEligibileFunctions:v17];
    }
  }

  objc_msgSend(v10, "setIsEligibleForDirections:", objc_msgSend(v5, "hasLocationData"));
  objc_msgSend(v10, "setIsEligibleForAppPunchout:", objc_msgSend(v5, "hasPhoneNumber"));
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v10;
  id v20 = v10;

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *(id *)(a1 + 32));
LABEL_14:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_1000F9D78()
{
  return (id)qword_100577D18;
}

id sub_1000F9D84()
{
  if (qword_100577D10 != -1) {
    dispatch_once(&qword_100577D10, &stru_1004F1590);
  }
  return (id)qword_100577D18;
}

void sub_1000F9DC4(id a1)
{
  if (!qword_100577D20)
  {
    qword_100577D20 = (uint64_t)dlopen("/System/Library/Frameworks/MediaPlayer.framework/MediaPlayer", 2);
    if (!qword_100577D20) {
      __assert_rtn("MediaPlayerLibrary", "ADContextManager.m", 126, "frameworkLibrary");
    }
  }

  qword_100577D18 = (uint64_t)objc_getClass("NSUserActivity");
  if (!qword_100577D18) {
    __assert_rtn("initNSUserActivity_block_invoke", "ADContextManager.m", 127, "classNSUserActivity");
  }
  off_100572E38 = sub_1000F9D78;
}

void sub_1000F9E68(uint64_t a1)
{
  uint64_t v45 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v44 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v39 = a1;
  group = dispatch_group_create();
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v62 objects:v71 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v63;
    uint64_t v41 = _AFContextManagerServerMessageCollateContexts;
    uint64_t v42 = _AFContextManagerCollateContextsReplyKeyContexts;
    uint64_t v43 = *(void *)v63;
    do
    {
      id v5 = 0LL;
      id v46 = v3;
      do
      {
        if (*(void *)v63 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)v5);
        id v7 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          id v8 = v7;
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
          *(_DWORD *)__int128 buf = 136315394;
          char v68 = "-[ADContextManager getAppContextForDeviceState:applicationInfos:completion:]_block_invoke";
          __int16 v69 = 2112;
          id v70 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s ApplicationInfo identifier: %@",  buf,  0x16u);
        }

        id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
        id v11 = [v6 pid];
        if ([v10 length]) {
          BOOL v12 = (int)v11 < 1;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12)
        {
          uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          unsigned int v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          uint64_t v50 = v10;
          id v15 = v10;
          if (!v15) {
            goto LABEL_22;
          }
          __int128 v16 = (void *)qword_100577D08;
          if (!qword_100577D08)
          {
            uint64_t v17 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", &off_100513000);
            uint64_t v18 = (void *)qword_100577D08;
            qword_100577D08 = (uint64_t)v17;

            __int128 v16 = (void *)qword_100577D08;
          }

          unsigned int v19 = [v16 containsObject:v15];

          if (v19)
          {
            uint64_t v20 = AFContextProviderNameForBundleId(v15);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
            __int128 v22 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              char v68 = "-[ADContextManager getAppContextForDeviceState:applicationInfos:completion:]_block_invoke";
              __int16 v69 = 2112;
              id v70 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%s Attempting AFContextProvider lookup on %@",  buf,  0x16u);
            }

            __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[CPDistributedMessagingCenter pidRestrictedCenterNamed:]( &OBJC_CLASS___CPDistributedMessagingCenter,  "pidRestrictedCenterNamed:",  v21));
            [v23 setTargetPID:v11];

            if (([v23 doesServerExist] & 1) == 0)
            {
              __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)__int128 buf = 136315394;
                char v68 = "-[ADContextManager getAppContextForDeviceState:applicationInfos:completion:]_block_invoke";
                __int16 v69 = 2112;
                id v70 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "%s No AFContextProvider server for %@",  buf,  0x16u);
              }

              id v25 = 0LL;
LABEL_27:
              __int16 v48 = v25;
              id v49 = v23;
              __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:v42]);
              __int128 v58 = 0u;
              __int128 v59 = 0u;
              __int128 v60 = 0u;
              __int128 v61 = 0u;
              id v29 = [v28 countByEnumeratingWithState:&v58 objects:v66 count:16];
              if (v29)
              {
                id v30 = v29;
                uint64_t v31 = *(void *)v59;
                do
                {
                  for (i = 0LL; i != v30; i = (char *)i + 1)
                  {
                    if (*(void *)v59 != v31) {
                      objc_enumerationMutation(v28);
                    }
                    __int128 v33 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
                    -[NSMutableArray addObjectsFromArray:](v13, "addObjectsFromArray:", v33);
                    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "af_lenientMappedArray:", &stru_1004F0D18));
                    -[NSMutableArray addObjectsFromArray:](v14, "addObjectsFromArray:", v34);
                  }

                  id v30 = [v28 countByEnumeratingWithState:&v58 objects:v66 count:16];
                }

                while (v30);
              }

              -[NSMutableDictionary setObject:forKey:](v45, "setObject:forKey:", v13, v15);
              id v35 = [[AFApplicationContext alloc] initWithAssociatedBundleIdentifier:v15 bulletin:0 aceContext:0 contextDictionary:0 aceContexts:v14];
              -[NSMutableDictionary setObject:forKey:](v44, "setObject:forKey:", v35, v15);

              id v3 = v46;
              uint64_t v4 = v43;
              id v10 = v50;
              goto LABEL_35;
            }
          }

          else
          {
LABEL_22:
            __int16 v26 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              char v68 = "-[ADContextManager getAppContextForDeviceState:applicationInfos:completion:]_block_invoke";
              __int16 v69 = 2112;
              id v70 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%s Skipping AFContextProvider lookup because %@ is not allow-listed",  buf,  0x16u);
            }

            __int128 v23 = 0LL;
            id v25 = 0LL;
          }

          id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 sendMessageAndReceiveReplyName:v41 userInfo:0]);
          uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315394;
            char v68 = "-[ADContextManager getAppContextForDeviceState:applicationInfos:completion:]_block_invoke";
            __int16 v69 = 2112;
            id v70 = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "%s Reply context from remote center: %@",  buf,  0x16u);
          }

          goto LABEL_27;
        }

void sub_1000FA4D8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000FA598;
  v6[3] = &unk_1004F0D68;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 32);
  id v9 = v4;
  uint64_t v10 = v5;
  id v11 = *(id *)(a1 + 72);
  [v2 _getCurrentUserActivityOnQueue:v3 completion:v6];
}

void sub_1000FA598(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v41 = "-[ADContextManager getAppContextForDeviceState:applicationInfos:completion:]_block_invoke_3";
    __int16 v42 = 2112;
    id v43 = v5;
    __int16 v44 = 2112;
    id v45 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Got activity for app context %@ %@", buf, 0x20u);
  }

  if (v5 && v6)
  {
    id v8 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v6]);
    if (!v8)
    {
      id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      [*(id *)(a1 + 32) setObject:v8 forKey:v6];
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 dictionary]);
    -[NSMutableArray addObject:](v8, "addObject:", v9);

    uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v6]);
    if (v10)
    {
      id v11 = (void *)v10;
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472LL;
      v35[2] = sub_1000FA978;
      v35[3] = &unk_1004F0D40;
      __int128 v36 = (void *)v10;
      id v37 = v5;
      id v12 = (id)objc_claimAutoreleasedReturnValue([v11 mutatedCopyWithMutator:v35]);

      uint64_t v13 = v36;
    }

    else
    {
      id v14 = objc_alloc(&OBJC_CLASS___AFApplicationContext);
      id v39 = v5;
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v39, 1LL));
      id v12 = [v14 initWithAssociatedBundleIdentifier:v6 bulletin:0 aceContext:0 contextDictionary:0 aceContexts:v13];
    }

    [*(id *)(a1 + 40) setObject:v12 forKey:v6];
  }

  uint64_t v27 = v6;
  __int128 v28 = v5;
  id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v29 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id obj = *(id *)(a1 + 48);
  id v16 = [obj countByEnumeratingWithState:&v31 objects:v38 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v32;
    do
    {
      for (i = 0LL; i != v17; i = (char *)i + 1)
      {
        if (*(void *)v32 != v18) {
          objc_enumerationMutation(obj);
        }
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v31 + 1) + 8 * (void)i), "identifier", v27, v28));
        if (v20)
        {
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v20]);
          __int128 v22 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  (char *)[v21 count] + 1);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _appInfoWithBundleID:v20]);
          __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 dictionary]);
          -[NSMutableArray addObject:](v22, "addObject:", v24);

          -[NSMutableArray addObjectsFromArray:](v22, "addObjectsFromArray:", v21);
          -[NSMutableArray addObject:](v15, "addObject:", v22);
          id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v20]);
          if (v25) {
            -[NSMutableArray addObject:](v29, "addObject:", v25);
          }
        }
      }

      id v17 = [obj countByEnumeratingWithState:&v31 objects:v38 count:16];
    }

    while (v17);
  }

  uint64_t v26 = *(void *)(a1 + 64);
  if (v26) {
    (*(void (**)(uint64_t, NSMutableArray *, NSMutableArray *))(v26 + 16))(v26, v15, v29);
  }
}

void sub_1000FA978(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 aceContexts]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 arrayByAddingObject:*(void *)(a1 + 40)]);
  [v4 setAceContexts:v5];
}

AceObject *__cdecl sub_1000FA9E8(id a1, NSDictionary *a2)
{
  return +[AceObject aceObjectWithDictionary:](&OBJC_CLASS___AceObject, "aceObjectWithDictionary:", a2);
}

id sub_1000FA9F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setDelegate:*(void *)(a1 + 40)];
}

id sub_1000FAA04(uint64_t a1)
{
  return [*(id *)(a1 + 32) _initialize];
}

void sub_1000FAA0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1000FAC20;
  v7[3] = &unk_1004F0C78;
  void v7[4] = *(void *)(a1 + 32);
  id v4 = +[ADRapportLinkDiscoveryOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkDiscoveryOptions,  "newWithBuilder:",  v7);
  [v3 setDiscoveryOptions:v4];

  if (*(_BYTE *)(a1 + 40))
  {
    id v5 = +[ADRapportLinkConnectionOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkConnectionOptions,  "newWithBuilder:",  &stru_1004F0C98);
    [v3 setConnectionOptions:v5];

    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[ADContextManager _configuredContextLink]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #hal #on-demand connectionOptions: %@",  buf,  0x16u);
    }
  }
}

void sub_1000FAB5C(id a1, NSError *a2)
{
  id v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADContextManager _configuredContextLink]_block_invoke";
      __int16 v6 = 2112;
      id v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s companion link activation error: %@",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_1000FAC20(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setIncludesHome:2];
  [v3 setIncludesFamily:0];
  [v3 setIncludesRemoraDevices:*(void *)(a1 + 32)];
}

void sub_1000FAC70(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_1000FAC7C(uint64_t a1, uint64_t a2, char a3)
{
  int v4 = *(void **)(a1 + 32);
  id v5 = (dispatch_queue_s *)v4[25];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000FAF24;
  v6[3] = &unk_1004FC4D0;
  id v7 = v4;
  char v8 = a3;
  dispatch_async(v5, v6);
}

void sub_1000FACF4(uint64_t a1, unint64_t a2)
{
  id v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    char v8 = "-[ADContextManager _initWithDelegate:deviceCircleManager:deviceProximityManager:]_block_invoke_3";
    __int16 v9 = 2112;
    __int16 v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1000FAE0C(uint64_t a1, unint64_t a2)
{
  id v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    char v8 = "-[ADContextManager _initWithDelegate:deviceCircleManager:deviceProximityManager:]_block_invoke";
    __int16 v9 = 2112;
    __int16 v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

id sub_1000FAF24(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _setCollectingContext:*(unsigned __int8 *)(a1 + 40)];
  if (*(_BYTE *)(a1 + 40)) {
    return [*(id *)(a1 + 32) _startPeriodicContextFetchFromNearbyDevices];
  }
  return result;
}

void sub_1000FAF64(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v3 = dispatch_queue_create("assistantd_current_home", v2);
  int v4 = (void *)qword_100577CF8;
  qword_100577CF8 = (uint64_t)v3;

  if (dword_100572E48 == -1)
  {
    int out_token = -1;
    if (notify_register_dispatch( "com.apple.homed.current-home.changed",  &out_token,  (dispatch_queue_t)qword_100577CF8,  &stru_1004F13F0))
    {
      BOOL v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        char v8 = "ADObserveCurrentHomeKitHomeChanges_block_invoke_2";
        __int16 v9 = 2080;
        __int16 v10 = "com.apple.homed.current-home.changed";
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Could not register for %s notification",  buf,  0x16u);
      }
    }

    else
    {
      dword_100572E48 = out_token;
    }
  }

  dispatch_async((dispatch_queue_t)qword_100577CF8, &stru_1004F1430);
}

void sub_1000FB0A8(id a1)
{
  id v1 = sub_1000FB0E4();
  id v4 = (id)objc_claimAutoreleasedReturnValue(v1);
  id v2 = [v4 copy];
  dispatch_queue_t v3 = (void *)qword_100577CF0;
  qword_100577CF0 = (uint64_t)v2;
}

id sub_1000FB0E4()
{
  unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[HMClientConnection siriCurrentHome](&OBJC_CLASS___HMClientConnection, "siriCurrentHome"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v0 currentHomeIdentifier]);

  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v1));
  return v2;
}

void sub_1000FB140(id a1, int a2)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    __int16 v10 = "ADObserveCurrentHomeKitHomeChanges_block_invoke_2";
    __int16 v11 = 2080;
    id v12 = "com.apple.homed.current-home.changed";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Got %s notification", (uint8_t *)&v9, 0x16u);
  }

  unint64_t v3 = (unint64_t)(id)qword_100577CF0;
  id v4 = sub_1000FB0E4();
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  unint64_t v6 = (unint64_t)[v5 copy];

  if (v3 | v6 && ([(id)v3 isEqual:v6] & 1) == 0)
  {
    objc_storeStrong((id *)&qword_100577CF0, (id)v6);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(9LL, 0LL);
    char v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    dispatch_async(v8, &stru_1004F1410);
  }
}

void sub_1000FB27C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"ADCurrentHomeKitHomeChanged" object:0];
}

uint64_t sub_1000FB368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  BOOL v5 = *(void **)(a1 + 32);
  id v6 = sub_1000F4528(*(void **)(a1 + 40), a2);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v5 logEventWithType:v4 context:v7];

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  }
  return result;
}

void sub_1000FB7D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FBF88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FC1DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FCA30(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_1000FCAA4;
  v3[3] = &unk_1004F1748;
  id v4 = *(id *)(a1 + 48);
  [v1 _fetchInEarDetectionStateAndStartObservingFromSourceForBTAddress:v2 withCompletion:v3];
}

void sub_1000FCAA4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    id v7 = v9;
    if (v5)
    {
      id v7 = 0LL;
      id v8 = v5;
    }

    else
    {
      id v8 = 0LL;
    }

    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v8);
  }
}

void sub_1000FCB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 33) && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    id v5 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      id v8 = v5;
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v4));
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v13 = "-[AFSiriHeadphonesMonitor fetchPrivateSessionStateWithCompletion:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Private session state: %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    char v6 = AFSupportsWirelessSplitter(a1, a2);
    id v7 = *(_BYTE **)(a1 + 32);
    if ((v6 & 1) != 0)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      void v10[2] = sub_1000FCCD4;
      v10[3] = &unk_1004F1720;
      void v10[4] = v7;
      id v11 = *(id *)(a1 + 40);
      [v7 _fetchWirelessSplitterSessionInfoAndStartObservingFromSourceWithCompletion:v10];
    }

    else
    {
      v7[33] = 1;
      *(void *)(*(void *)(a1 + 32) + 8LL) = 1LL;
      (*(void (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 8LL),  0LL);
    }
  }

void sub_1000FCCD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 104);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000FCD94;
  v12[3] = &unk_1004FDA30;
  void v12[4] = v7;
  id v13 = v5;
  id v14 = v6;
  id v15 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

uint64_t sub_1000FCD94(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = [*(id *)(a1 + 40) state] != (id)1;
  if (*(void *)(a1 + 48)) {
    return (*(uint64_t (**)(void, void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 0LL);
  }
  uint64_t v3 = 1LL;
  *(_BYTE *)(*(void *)(a1 + 32) + 33LL) = 1;
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 16)) {
    uint64_t v3 = 2LL;
  }
  *(void *)(v4 + _Block_object_dispose(va, 8) = v3;
  id v5 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v7 = v5;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v6));
    int v9 = 136315394;
    id v10 = "-[AFSiriHeadphonesMonitor fetchPrivateSessionStateWithCompletion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Fetched wireless splitter session, private session state: %@",  (uint8_t *)&v9,  0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_1000FCF18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000FCF28(uint64_t a1)
{
}

void sub_1000FCF30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 128);
  if (!v3)
  {
    uint64_t v4 = sub_1000FCF8C((uint64_t)[*(id *)(v2 + 80) state]);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 128);
    *(void *)(v6 + 12_Block_object_dispose(va, 8) = v5;

    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 128LL);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v3);
}

AFSiriAudioRoute *sub_1000FCF8C(uint64_t a1)
{
  uint64_t v2 = _AFPreferencesAnnounceNotificationsOnHearingAidsEnabled();
  uint64_t v4 = _AFPreferencesAnnounceNotificationsOnBuiltInSpeakerEnabled(v2, v3);
  id v5 = [sub_1000FD1CC() sharedAVSystemController];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v22 = 0LL;
  __int128 v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  uint64_t v7 = (void *)qword_100577D78;
  uint64_t v25 = qword_100577D78;
  if (!qword_100577D78)
  {
    id v8 = sub_1000FD280();
    uint64_t v7 = dlsym(v8, "AVSystemController_PickableRoutesAttribute");
    v23[3] = (uint64_t)v7;
    qword_100577D78 = (uint64_t)v7;
  }

  _Block_object_dispose(&v22, 8);
  if (!v7)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getAVSystemController_PickableRoutesAttribute(void)"));
    objc_msgSend( v16,  "handleFailureInFunction:file:lineNumber:description:",  v17,  @"AFSiriHeadphonesMonitor.m",  47,  @"%s",  dlerror());

    __break(1u);
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 attributeForKey:*v7]);

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v10 = v9;
  id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v19;
LABEL_6:
    uint64_t v13 = 0LL;
    while (1)
    {
      if (*(void *)v19 != v12) {
        objc_enumerationMutation(v10);
      }
      id v14 = -[AFSiriAudioRoute initWithRouteDescription:hearingAidsAnnounceEnabled:builtInSpeakerAnnounceEnabled:ringerSwitchState:]( objc_alloc(&OBJC_CLASS___AFSiriAudioRoute),  "initWithRouteDescription:hearingAidsAnnounceEnabled:builtInSpeakerAnnounceEnabled:ringerSwitchState:",  *(void *)(*((void *)&v18 + 1) + 8 * v13),  v2,  v4,  a1);
      if (-[AFSiriAudioRoute isRouteCurrentlyPicked](v14, "isRouteCurrentlyPicked")) {
        break;
      }

      if (v11 == (id)++v13)
      {
        id v11 = [v10 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v11) {
          goto LABEL_6;
        }
        goto LABEL_12;
      }
    }
  }

  else
  {
LABEL_12:
    id v14 = 0LL;
  }

  return v14;
}

void sub_1000FD1AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

id sub_1000FD1CC()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  unint64_t v0 = (void *)qword_100577D68;
  uint64_t v7 = qword_100577D68;
  if (!qword_100577D68)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_1000FD384;
    v3[3] = &unk_1004FDB20;
    void v3[4] = &v4;
    sub_1000FD384((uint64_t)v3);
    unint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000FD268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_1000FD280()
{
  uint64_t v4 = 0LL;
  if (!qword_100577D70)
  {
    __int128 v5 = off_1004F1768;
    uint64_t v6 = 0LL;
    qword_100577D70 = _sl_dlopen(&v5, &v4);
  }

  unint64_t v0 = (void *)qword_100577D70;
  if (!qword_100577D70)
  {
    unint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *MediaExperienceLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"AFSiriHeadphonesMonitor.m",  42,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  id v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_1000FD384(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("AVSystemController");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100577D68 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getAVSystemControllerClass(void)_block_invoke"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"AFSiriHeadphonesMonitor.m",  43,  @"Unable to find class %s",  "AVSystemController");

    __break(1u);
  }

void sub_1000FD448(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 120) copy];
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v25 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v16;
    *(void *)&__int128 v5 = 136315650LL;
    __int128 v14 = v5;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v3);
        }
        int v9 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v9, "privateAudioSessionStateDidChange:") & 1) != 0)
        {
          id v10 = (void *)AFSiriLogContextConnection;
          if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
            uint64_t v12 = v10;
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v11));
            *(_DWORD *)__int128 buf = v14;
            __int128 v20 = "-[AFSiriHeadphonesMonitor _recomputePrivateSessionStateAndBroadcast:]_block_invoke";
            __int16 v21 = 2112;
            uint64_t v22 = v9;
            __int16 v23 = 2112;
            uint64_t v24 = v13;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s Telling %@ privateSessionState:%@",  buf,  0x20u);
          }

          objc_msgSend( v9,  "privateAudioSessionStateDidChange:",  *(void *)(*(void *)(a1 + 32) + 8),  v14,  (void)v15);
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v15 objects:v25 count:16];
    }

    while (v6);
  }
}

void sub_1000FD62C(void *a1)
{
  id v2 = [*(id *)(a1[4] + 120) copy];
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v30 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v19;
    *(void *)&__int128 v5 = 136315906LL;
    __int128 v17 = v5;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(v3);
        }
        int v9 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v9, "inEarDetectionStateDidChangeForBTAddress:toState:") & 1) != 0)
        {
          id v10 = (os_log_s *)AFSiriLogContextConnection;
          if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v12 = a1[4];
            uint64_t v13 = *(void *)(v12 + 88);
            uint64_t v14 = *(void *)(v12 + 24);
            *(_DWORD *)__int128 buf = v17;
            __int16 v23 = "-[AFSiriHeadphonesMonitor _broadcastInEarDetectionStateChangesFrom:to:]_block_invoke";
            __int16 v24 = 2112;
            uint64_t v25 = v9;
            __int16 v26 = 2112;
            uint64_t v27 = v13;
            __int16 v28 = 2112;
            uint64_t v29 = v14;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Telling %@ inEarDetectionStateDidChangeForBTAddress: %@ toState:%@",  buf,  0x2Au);
          }

          objc_msgSend( v9,  "inEarDetectionStateDidChangeForBTAddress:toState:",  *(void *)(a1[4] + 88),  *(void *)(a1[4] + 24),  v17,  (void)v18);
        }

        if ((objc_opt_respondsToSelector(v9, "inEarDetectionStateDidChangeForBTAddress:fromState:toState:") & 1) != 0)
        {
          uint64_t v11 = (os_log_s *)AFSiriLogContextConnection;
          if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = a1[5];
            uint64_t v16 = *(void *)(a1[4] + 88LL);
            *(_DWORD *)__int128 buf = v17;
            __int16 v23 = "-[AFSiriHeadphonesMonitor _broadcastInEarDetectionStateChangesFrom:to:]_block_invoke";
            __int16 v24 = 2112;
            uint64_t v25 = v9;
            __int16 v26 = 2112;
            uint64_t v27 = v16;
            __int16 v28 = 2112;
            uint64_t v29 = v15;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s Telling %@ inEarDetectionStateDidChangeForBTAddress: %@ toState:%@",  buf,  0x2Au);
          }

          objc_msgSend( v9,  "inEarDetectionStateDidChangeForBTAddress:fromState:toState:",  *(void *)(a1[4] + 88),  a1[6],  a1[5],  v17);
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v18 objects:v30 count:16];
    }

    while (v6);
  }
}

void sub_1000FD88C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 120) copy];
  uint64_t v24 = a1;
  id v3 = *(void **)(*(void *)(a1 + 32) + 128LL);
  id v4 = v3;
  id v5 = [(id)qword_100577D60 hash];
  if (v5 != [v4 hash])
  {
    objc_storeStrong((id *)&qword_100577D60, v3);
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v6 = v2;
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v39 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v11, "currentAudioRouteDidChange:") & 1) != 0)
          {
            uint64_t v12 = (void *)AFSiriLogContextConnection;
            if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = *(void **)(v24 + 32);
              __int128 v21 = (void *)v14[12];
              uint64_t v22 = v14[11];
              uint64_t v19 = v14[1];
              uint64_t v15 = v12;
              __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v19));
              *(_DWORD *)__int128 buf = 136316162;
              id v30 = "-[AFSiriHeadphonesMonitor _broadcastRouteAndAuthenticationCapability]_block_invoke";
              __int16 v31 = 2112;
              __int128 v32 = v11;
              __int16 v33 = 2112;
              __int128 v34 = v21;
              __int16 v35 = 2112;
              uint64_t v36 = v22;
              __int16 v37 = 2112;
              id v38 = v20;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s Telling %@ currentAudioRouteDidChange:to %@(%@) privateSessionState:%@",  buf,  0x34u);
            }

            [v11 currentAudioRouteDidChange:v4];
          }

          if ((objc_opt_respondsToSelector(v11, "authenticationCapabilityDidChange:forBTAddress:") & 1) != 0)
          {
            uint64_t v13 = (void *)AFSiriLogContextConnection;
            if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v16 = v13;
              __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v4 hasAuthenticationCapability]));
              __int128 v17 = *(void **)(*(void *)(v24 + 32) + 88LL);
              uint64_t v18 = *(void *)(*(void *)(v24 + 32) + 96LL);
              *(_DWORD *)__int128 buf = 136316162;
              id v30 = "-[AFSiriHeadphonesMonitor _broadcastRouteAndAuthenticationCapability]_block_invoke";
              __int16 v31 = 2112;
              __int128 v32 = v11;
              __int16 v33 = 2112;
              __int128 v34 = v23;
              __int16 v35 = 2112;
              uint64_t v36 = v18;
              __int16 v37 = 2112;
              id v38 = v17;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s Telling %@ authenticationCapabilityDidChange:%@ to %@(%@)",  buf,  0x34u);
            }

            objc_msgSend( v11,  "authenticationCapabilityDidChange:forBTAddress:",  objc_msgSend(v4, "hasAuthenticationCapability"),  *(void *)(*(void *)(v24 + 32) + 88));
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v25 objects:v39 count:16];
      }

      while (v8);
    }
  }
}

id sub_1000FDBD8(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = v2;
    uint64_t Name = AFDeviceRingerSwitchStateGetName(v4);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(Name);
    int v8 = 136315394;
    uint64_t v9 = "-[AFSiriHeadphonesMonitor deviceRingerObserver:didChangeState:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Updating ringer switch state to: %@",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 32) _updateAudioRouteAvailabilityAndBroadcast:1];
}

void sub_1000FDCC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  if (v2 != v3[8])
  {
    if (v2 != v3[9])
    {
      if (v2 == v3[7])
      {
        uint64_t v4 = *(void *)(a1 + 56);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        void v19[2] = sub_1000FDFD8;
        v19[3] = &unk_1004F16F8;
        void v19[4] = v3;
        +[AFBluetoothHeadphoneInEarDetectionState decodeFromNotifyState:withCompletion:]( &OBJC_CLASS___AFBluetoothHeadphoneInEarDetectionState,  "decodeFromNotifyState:withCompletion:",  v4,  v19);
      }

      return;
    }

    __int16 v10 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void **)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v21 = "-[AFSiriHeadphonesMonitor notifyObserver:didChangeStateFrom:to:]_block_invoke";
      __int16 v22 = 2048;
      __int16 v23 = v11;
      __int16 v24 = 2048;
      uint64_t v25 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s wireless guest connection state changed from %llu to %llu",  buf,  0x20u);
      __int16 v10 = (os_log_s *)AFSiriLogContextConnection;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = v10;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v13));
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v21 = "-[AFSiriHeadphonesMonitor notifyObserver:didChangeStateFrom:to:]_block_invoke";
      __int16 v22 = 2112;
      __int16 v23 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s guestConnection: %@", buf, 0x16u);
    }

    *(_BYTE *)(*(void *)(a1 + 40) + 32LL) = *(void *)(a1 + 56) != 0LL;
LABEL_16:
    [*(id *)(a1 + 40) _recomputePrivateSessionStateAndBroadcast:1];
    return;
  }

  id v5 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 136315650;
    __int128 v21 = "-[AFSiriHeadphonesMonitor notifyObserver:didChangeStateFrom:to:]_block_invoke";
    __int16 v22 = 2048;
    __int16 v23 = v6;
    __int16 v24 = 2048;
    uint64_t v25 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s wireless splitter session state changed from %llu to %llu",  buf,  0x20u);
    id v3 = *(void **)(a1 + 40);
  }

  uint64_t v8 = *(void *)(a1 + 56);
  if (v3[2] != v8)
  {
    _DWORD v3[2] = v8;
    uint64_t v9 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 16LL);
      __int128 v17 = v9;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v16));
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v21 = "-[AFSiriHeadphonesMonitor notifyObserver:didChangeStateFrom:to:]_block_invoke";
      __int16 v22 = 2112;
      __int16 v23 = v18;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s wireless splitter session active: %@",  buf,  0x16u);
    }

    *(_BYTE *)(*(void *)(a1 + 40) + 33LL) = 0;
    goto LABEL_16;
  }

void sub_1000FDFD8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(dispatch_queue_s **)(v10 + 104);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000FE0A8;
  v15[3] = &unk_1004FD470;
  id v16 = v9;
  uint64_t v17 = v10;
  id v18 = v7;
  id v19 = v8;
  id v12 = v8;
  id v13 = v7;
  id v14 = v9;
  dispatch_async(v11, v15);
}

void *sub_1000FE0A8(void *result)
{
  uint64_t v1 = result[4];
  uint64_t v2 = result[5];
  if (v1 != *(void *)(v2 + 24))
  {
    id v3 = result;
    uint64_t v4 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = v3[6];
      uint64_t v6 = v3[7];
      int v7 = 136315906;
      id v8 = "-[AFSiriHeadphonesMonitor notifyObserver:didChangeStateFrom:to:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v1;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s In-ear detection state for %@: %@ -> %@",  (uint8_t *)&v7,  0x2Au);
      uint64_t v2 = v3[5];
    }

    uint64_t result = [(id)v3[6] isEqualToString:*(void *)(v2 + 88)];
    if ((_DWORD)result)
    {
      objc_storeStrong((id *)(v3[5] + 24LL), (id)v3[4]);
      return [(id)v3[5] _broadcastInEarDetectionStateChangesFrom:v3[7] to:v3[4]];
    }
  }

  return result;
}

void sub_1000FE1B8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[AFSiriHeadphonesMonitor _settingsConnectionDidDisconnect]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Settings connection: disconnected!",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 33LL) = 0;
  *(void *)(*(void *)(a1 + 32) + 16LL) = AFBluetoothWirelessSplitterSessionStateUnknown;
  uint64_t v5 = -[AFBluetoothHeadphoneInEarDetectionState initWithBuilder:]( objc_alloc(&OBJC_CLASS___AFBluetoothHeadphoneInEarDetectionState),  "initWithBuilder:",  &stru_1004F16D0);
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 24);
  *(void *)(v6 + 24) = v5;

  id v8 = *(id *)(*(void *)(a1 + 32) + 128LL);
  if (([v8 hasAuthenticationCapability] & 1) != 0
    || [v8 availableAnnouncementRequestTypes])
  {
    [*(id *)(a1 + 32) _updateWirelessSplitterSessionInfoAndObserve];
    [*(id *)(a1 + 32) _updateInEarDetectionStateAndObserve];
  }
}

void sub_1000FE2F0(id a1, AFBluetoothHeadphoneInEarDetectionStateMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setIsEnabled:](v2, "setIsEnabled:", 0LL);
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setPrimaryEarbudSide:](v2, "setPrimaryEarbudSide:", 0LL);
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setPrimaryInEarStatus:](v2, "setPrimaryInEarStatus:", 0LL);
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setSecondaryInEarStatus:](v2, "setSecondaryInEarStatus:", 0LL);
}

void sub_1000FE340(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (void *)a1[5];
  id v8 = *(dispatch_queue_s **)(a1[4] + 104LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000FE400;
  v13[3] = &unk_1004F1E20;
  id v9 = v7;
  id v14 = v5;
  id v15 = v6;
  uint64_t v10 = a1[6];
  id v16 = v9;
  uint64_t v17 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, v13);
}

void sub_1000FE400(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, a1[4], a1[5]);
  }
  uint64_t v3 = *(void *)(a1[7] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_1000FE440(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (void *)a1[5];
  id v8 = *(dispatch_queue_s **)(a1[4] + 104LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_1000FE500;
  v13[3] = &unk_1004F1E20;
  id v9 = v7;
  id v14 = v5;
  id v15 = v6;
  uint64_t v10 = a1[6];
  id v16 = v9;
  uint64_t v17 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, v13);
}

void sub_1000FE500(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, a1[4], a1[5]);
  }
  uint64_t v3 = *(void *)(a1[7] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_1000FE540(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(dispatch_queue_s **)(v7 + 104);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FE6B8;
  block[3] = &unk_1004FD4C0;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000FE5F0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[AFSiriHeadphonesMonitor _updateAudioRouteAvailabilityAndBroadcast:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Audio route changed to: %@",  (uint8_t *)&v4,  0x16u);
  }

  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "_audioRouteDidChange:");
  }
}

void sub_1000FE6B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      int v3 = 136315394;
      int v4 = "-[AFSiriHeadphonesMonitor _updateAudioRouteAvailabilityAndBroadcast:]_block_invoke_2";
      __int16 v5 = 2112;
      uint64_t v6 = v1;
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s %@", (uint8_t *)&v3, 0x16u);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 24LL), *(id *)(a1 + 48));
  }

id sub_1000FE780(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 120) removeObject:*(void *)(a1 + 40)];
}

id sub_1000FE78C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 120) addObject:*(void *)(a1 + 40)];
}

void sub_1000FE798(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[AFSiriHeadphonesMonitor initializeAVSystemControllerSubscriptions:]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s initializing AVSystemController's subscriptions due to: %@",  buf,  0x16u);
  }

  sub_1000FE9B8();
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v15[0] = v4;
  sub_1000FEAAC();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v15[1] = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v15, 2LL));

  id v8 = [sub_1000FD1CC() sharedAVSystemController];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  *(void *)__int128 buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  id v10 = (void *)qword_100577D98;
  uint64_t v17 = qword_100577D98;
  if (!qword_100577D98)
  {
    id v11 = sub_1000FD280();
    id v10 = dlsym(v11, "AVSystemController_SubscribeToNotificationsAttribute");
    *(void *)(*(void *)&buf[8] + 24LL) = v10;
    qword_100577D98 = (uint64_t)v10;
  }

  _Block_object_dispose(buf, 8);
  if (!v10)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getAVSystemController_SubscribeToNotificationsAttribute(void)"));
    objc_msgSend( v13,  "handleFailureInFunction:file:lineNumber:description:",  v14,  @"AFSiriHeadphonesMonitor.m",  51,  @"%s",  dlerror());

    __break(1u);
  }

  [v9 setAttribute:v7 forKey:*v10 error:0];

  [*(id *)(a1 + 40) updateAudioRouteAvailability:*(void *)(a1 + 32)];
}

void sub_1000FE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1000FE9B8()
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  unint64_t v0 = (id *)qword_100577D88;
  uint64_t v8 = qword_100577D88;
  if (!qword_100577D88)
  {
    uint64_t v1 = sub_1000FD280();
    unint64_t v0 = (id *)dlsym(v1, "AVSystemController_PickableRoutesDidChangeNotification");
    v6[3] = (uint64_t)v0;
    qword_100577D88 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    id v2 = *v0;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getAVSystemController_PickableRoutesDidChangeNotification(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"AFSiriHeadphonesMonitor.m",  50,  @"%s",  dlerror());

    __break(1u);
  }

void sub_1000FEA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1000FEAAC()
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  unint64_t v0 = (id *)qword_100577D90;
  uint64_t v8 = qword_100577D90;
  if (!qword_100577D90)
  {
    uint64_t v1 = sub_1000FD280();
    unint64_t v0 = (id *)dlsym(v1, "AVSystemController_PreferredExternalRouteDidChangeNotification");
    v6[3] = (uint64_t)v0;
    qword_100577D90 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    id v2 = *v0;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getAVSystemController_PreferredExternalRouteDidChangeNotification(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"AFSiriHeadphonesMonitor.m",  49,  @"%s",  dlerror());

    __break(1u);
  }

void sub_1000FEB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

id sub_1000FEBA0(uint64_t a1)
{
  id v2 = *(_BYTE **)(a1 + 32);
  if (!v2[33])
  {
    [v2 _updateWirelessSplitterSessionInfoAndObserve];
    id v2 = *(_BYTE **)(a1 + 32);
  }

  return [v2 _updateInEarDetectionStateAndObserve];
}

id sub_1000FEBDC(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 88LL);
  if (result)
  {
    id result = [result length];
    if (result == (id)17)
    {
      uint64_t v3 = *(void **)(a1 + 32);
      uint64_t v4 = v3[11];
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472LL;
      _DWORD v5[2] = sub_1000FEC58;
      v5[3] = &unk_1004F1660;
      void v5[4] = v3;
      return [v3 _fetchInEarDetectionStateAndStartObservingFromSourceForBTAddress:v4 withCompletion:v5];
    }
  }

  return result;
}

void sub_1000FEC58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 104);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FED04;
  block[3] = &unk_1004FD4C0;
  id v12 = v5;
  uint64_t v13 = v7;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1000FED04(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  if (v1 != *(void **)(v2 + 24))
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(v2 + 88);
      uint64_t v8 = a1[6];
      int v9 = 136315906;
      id v10 = "-[AFSiriHeadphonesMonitor _updateInEarDetectionStateAndObserve]_block_invoke_3";
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      id v14 = v1;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s In-ear detection state for %@: %@, error: %@",  (uint8_t *)&v9,  0x2Au);
      uint64_t v1 = (void *)a1[4];
      uint64_t v2 = a1[5];
    }

    objc_storeStrong((id *)(v2 + 24), v1);
    id v5 = (void *)a1[5];
    id v6 = objc_opt_new(&OBJC_CLASS___AFBluetoothHeadphoneInEarDetectionState);
    [v5 _broadcastInEarDetectionStateChangesFrom:v6 to:a1[4]];
  }

_BYTE *sub_1000FEE24(uint64_t a1, uint64_t a2)
{
  char v3 = AFSupportsWirelessSplitter(a1, a2);
  id result = *(_BYTE **)(a1 + 32);
  if ((v3 & 1) != 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_1000FEE9C;
    v5[3] = &unk_1004F1638;
    void v5[4] = result;
    return [result _fetchWirelessSplitterSessionInfoAndStartObservingFromSourceWithCompletion:v5];
  }

  else
  {
    result[33] = 1;
  }

  return result;
}

void sub_1000FEE9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 104);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000FEF48;
  block[3] = &unk_1004FD4C0;
  id v12 = v5;
  id v13 = v6;
  uint64_t v14 = v7;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_1000FEF48(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = v2;
    id v9 = [v7 state];
    uint64_t v10 = *(void *)(a1 + 40);
    int v11 = 136315650;
    id v12 = "-[AFSiriHeadphonesMonitor _updateWirelessSplitterSessionInfoAndObserve]_block_invoke_3";
    __int16 v13 = 2048;
    id v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Wireless splitter session state: %ld, error: %@",  (uint8_t *)&v11,  0x20u);
  }

  *(void *)(*(void *)(a1 + 48) + 16) = [*(id *)(a1 + 32) state] != (id)1;
  char v3 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 16LL);
    id v5 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v4));
    int v11 = 136315394;
    id v12 = "-[AFSiriHeadphonesMonitor _updateWirelessSplitterSessionInfoAndObserve]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Wireless splitter session active: %@",  (uint8_t *)&v11,  0x16u);
  }

  if (!*(void *)(a1 + 40))
  {
    *(_BYTE *)(*(void *)(a1 + 48) + 33LL) = 1;
    [*(id *)(a1 + 48) _recomputePrivateSessionStateAndBroadcast:1];
  }

id sub_1000FF100(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAudioRouteAvailabilityAndBroadcast:0];
}

id sub_1000FF10C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) initializeAVSystemControllerSubscriptions:0];
}

void sub_1000FF118(id a1, AFBluetoothHeadphoneInEarDetectionStateMutating *a2)
{
  uint64_t v2 = a2;
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setIsEnabled:](v2, "setIsEnabled:", 0LL);
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setPrimaryEarbudSide:](v2, "setPrimaryEarbudSide:", 0LL);
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setPrimaryInEarStatus:](v2, "setPrimaryInEarStatus:", 0LL);
  -[AFBluetoothHeadphoneInEarDetectionStateMutating setSecondaryInEarStatus:](v2, "setSecondaryInEarStatus:", 0LL);
}

void sub_1000FF1DC(uint64_t a1)
{
  id v1 = [objc_alloc((Class)objc_opt_class(*(void *)(a1 + 32))) _init];
  uint64_t v2 = (void *)qword_100577D58;
  qword_100577D58 = (uint64_t)v1;
}

void sub_100100904(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) announceIdToRemoteAssistantIdMap]);
  [v2 removeObjectForKey:*(void *)(a1 + 40)];

  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___ADAnnounceWorkoutReminderRequest);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) workoutReminder]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 predictionIdentifier]);

    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) predictionIdToAnnounceIdMap]);
      [v7 removeObjectForKey:v6];
    }

    else
    {
      uint64_t v8 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315138;
        uint64_t v10 = "-[ADAnnounceDeviceSelector _populateCachesForRequest:toRemoteAssistantId:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s cannot purge cache of nil prediction identifier",  (uint8_t *)&v9,  0xCu);
      }
    }
  }

void sub_100100A3C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315394;
    int v9 = "-[ADAnnounceDeviceSelector handleRemoteDismissRequest:completion:]_block_invoke";
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Deactivated announcement on phone=%d",  (uint8_t *)&v8,  0x12u);
  }

  id v5 = (Class *)&OBJC_CLASS___SACommandSucceeded_ptr;
  if (!a2) {
    id v5 = (Class *)&OBJC_CLASS___SACommandFailed_ptr;
  }
  id v6 = objc_alloc_init(*v5);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, void))(v7 + 16))(v7, v6, 0LL);
  }
}

void sub_100100B40(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    -[SACommandSucceeded setRefId:](v5, "setRefId:", v3);
  }

  else
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___SACommandFailed);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    -[SACommandSucceeded setRefId:](v5, "setRefId:", v4);

    -[SACommandSucceeded setReason:](v5, "setReason:", @"Failed to Announce");
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100100BF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      uint64_t v7 = "-[ADAnnounceDeviceSelector handleAnnouncementRequest:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Failed to announce the voice feedback request remotely, falling back to speakers",  (uint8_t *)&v6,  0xCu);
    }

    [*(id *)(a1 + 32) setPlatform:4];
    [*(id *)(a1 + 40) _populateCachesForRequest:v3 toRemoteAssistantId:0];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) externalNotificationRequestHandler]);
    [v5 handleAnnouncementRequest:v3];
  }
}

void sub_100100CF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      __int16 v22 = "-[ADAnnounceDeviceSelector handleAnnouncementRequest:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v6;
      int v9 = "%s Error sending remote announcement request: %@";
LABEL_12:
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v21, 0x16u);
      goto LABEL_13;
    }

    goto LABEL_13;
  }

  uint64_t v10 = objc_opt_class(&OBJC_CLASS___SAExecuteOnRemoteResponse);
  if ((objc_opt_isKindOfClass(v5, v10) & 1) == 0)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      __int16 v22 = "-[ADAnnounceDeviceSelector handleAnnouncementRequest:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v5;
      int v9 = "%s Error response sending remote announcement request: %@";
      goto LABEL_12;
    }

void sub_100100FD4(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v20 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Deactivated announcement on watch. Assuming announcement was only made locally",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) announceIdToRemoteAssistantIdMap]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 40)]);

    if (v5)
    {
      id v6 = objc_alloc_init(&OBJC_CLASS___SADismissRemoteAnnouncement);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
      [v6 setAnnouncementIdentifier:v7];

      id v8 = [(id)objc_opt_class(*(void *)(a1 + 32)) _requestToExecuteCommand:v6 onRemoteWithAssistantId:v5];
      int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        uint64_t v13 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 136315906;
        __int128 v20 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        uint64_t v24 = v14;
        __int16 v25 = 2112;
        __int128 v26 = v5;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Deactivating workout reminder announcement (prediction ID: %@, announce ID: %@) on remote device (assistant ID: %@)",  buf,  0x2Au);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      v17[2] = sub_100101294;
      void v17[3] = &unk_1004FC668;
      id v18 = *(id *)(a1 + 56);
      [v11 handleCommand:v9 completion:v17];
    }

    else
    {
      id v12 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v20 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
        __int16 v21 = 2112;
        uint64_t v22 = v15;
        __int16 v23 = 2112;
        uint64_t v24 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s No assistant ID found for announce ID: %@ (prediction ID: %@) - assuming announcement was not made remotely",  buf,  0x20u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }
  }

void sub_100101294(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v6;
      int v9 = "%s Received error while canceling remote announcement: %@";
      uint64_t v10 = v7;
      uint32_t v11 = 22;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v9, (uint8_t *)&v21, v11);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

  uint64_t v12 = objc_opt_class(&OBJC_CLASS___SAExecuteOnRemoteResponse);
  if ((objc_opt_isKindOfClass(v5, v12) & 1) == 0)
  {
    id v19 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315138;
      uint64_t v22 = "-[ADAnnounceDeviceSelector deactivateWorkoutReminderAnnouncementWithPredictionId:completion:]_block_invoke";
      int v9 = "%s Received unknown response while canceling remote announcement";
      uint64_t v10 = v19;
      uint32_t v11 = 12;
      goto LABEL_11;
    }

void sub_100101528(id a1, AFPeerInfoMutating *a2)
{
}

void sub_100101788(id a1)
{
  id v1 = -[ADAnnounceDeviceSelector _init](objc_alloc(&OBJC_CLASS___ADAnnounceDeviceSelector), "_init");
  uint64_t v2 = (void *)qword_100577DA8;
  qword_100577DA8 = (uint64_t)v1;
}

void sub_1001026BC(uint64_t a1)
{
  uint64_t v2 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ Invalidated",  *(void *)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:description:](&OBJC_CLASS___AFError, "errorWithCode:description:", 42LL, v2));

  [*(id *)(a1 + 32) _relinquishAssertionWithContext:0 error:v3 options:0];
  [*(id *)(a1 + 32) _finalizeWithContext:0 error:v3];
}

uint64_t sub_100102758(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(_DWORD *)(v3 + 16);
    int v6 = 136315650;
    uint64_t v7 = "-[ADAudioSessionAssertionConnection relinquishAudioSessionWithContext:error:options:completion:]_block_invoke";
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    __int16 v10 = 1024;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %p (pid = %d) done", (uint8_t *)&v6, 0x1Cu);
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100102840(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    uint64_t CurrentAcquisitionService = AFAudioSessionAssertionGetCurrentAcquisitionService();
    int v6 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue(CurrentAcquisitionService);
    if (!v6)
    {
      int v21 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = *(void *)(a1 + 32);
        int v26 = *(_DWORD *)(v25 + 16);
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v36 = "-[ADAudioSessionAssertionConnection acquireAudioSessionWithContext:relinquishmentHandler:]_block_invoke";
        __int16 v37 = 2048;
        uint64_t v38 = v25;
        __int16 v39 = 1024;
        int v40 = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s %p (pid = %d) failed to get acquisition service",  buf,  0x1Cu);
      }

      int v6 = *(void (***)(void, void, void))(a1 + 48);
      if (v6)
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  44LL,  @"Failed to get acquisition service."));
        ((void (**)(void, void, void *))v6)[2](v6, 0LL, v22);

        int v6 = 0LL;
      }

      goto LABEL_21;
    }

    objc_initWeak(&location, *(id *)(a1 + 32));
    id v8 = *(id *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v9 = *(void *)(a1 + 40);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100102CFC;
    void v31[3] = &unk_1004F1850;
    id v10 = v8;
    id v32 = v10;
    objc_copyWeak(&v33, &location);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([v6 acquireAudioSessionAssertionWithContext:v9 relinquishmentHandler:v31]);
    uint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (v11)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        int v14 = *(_DWORD *)(v13 + 16);
        *(_DWORD *)__int128 buf = 136315906;
        uint64_t v36 = "-[ADAudioSessionAssertionConnection acquireAudioSessionWithContext:relinquishmentHandler:]_block_invoke";
        __int16 v37 = 2048;
        uint64_t v38 = v13;
        __int16 v39 = 1024;
        int v40 = v14;
        __int16 v41 = 2112;
        __int16 v42 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s %p (pid = %d) assertion = %@", buf, 0x26u);
      }

      uint64_t v15 = objc_alloc(&OBJC_CLASS___AFTwoArgumentSafetyBlock);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_100102DC8;
      v29[3] = &unk_1004FA238;
      id v30 = *(id *)(a1 + 48);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:]( &OBJC_CLASS___AFError,  "errorWithCode:",  40LL,  _NSConcreteStackBlock,  3221225472LL,  sub_100102DC8,  &unk_1004FA238));
      uint64_t v17 = -[AFTwoArgumentSafetyBlock initWithBlock:defaultValue1:defaultValue2:]( v15,  "initWithBlock:defaultValue1:defaultValue2:",  v29,  0LL,  v16);
      uint64_t v18 = *(void *)(a1 + 32);
      id v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = v17;

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v11);
      __int128 v20 = v30;
    }

    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = *(void *)(a1 + 32);
        int v28 = *(_DWORD *)(v27 + 16);
        *(_DWORD *)__int128 buf = 136315906;
        uint64_t v36 = "-[ADAudioSessionAssertionConnection acquireAudioSessionWithContext:relinquishmentHandler:]_block_invoke_3";
        __int16 v37 = 2048;
        uint64_t v38 = v27;
        __int16 v39 = 1024;
        int v40 = v28;
        __int16 v41 = 2112;
        __int16 v42 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s %p (pid = %d) failed to acquire assertion from %@",  buf,  0x26u);
      }

      uint64_t v23 = *(void *)(a1 + 48);
      if (!v23) {
        goto LABEL_20;
      }
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  44LL,  @"Unable to acquire assertion from acquisition service."));
      (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0LL, v20);
    }

LABEL_20:
    objc_destroyWeak(&v33);

    objc_destroyWeak(&location);
    goto LABEL_21;
  }

  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v24 = *(_DWORD *)(v2 + 16);
    *(_DWORD *)__int128 buf = 136315906;
    uint64_t v36 = "-[ADAudioSessionAssertionConnection acquireAudioSessionWithContext:relinquishmentHandler:]_block_invoke";
    __int16 v37 = 2048;
    uint64_t v38 = v2;
    __int16 v39 = 1024;
    int v40 = v24;
    __int16 v41 = 2112;
    __int16 v42 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s %p (pid = %d) assertion %@ already acquired",  buf,  0x26u);
  }

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    int v6 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  45LL,  @"Assertion already acquired."));
    (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, 0LL, v6);
LABEL_21:
  }

void sub_100102CD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100102CFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100102DDC;
  block[3] = &unk_1004F9AA8;
  objc_copyWeak(&v13, (id *)(a1 + 40));
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);

  objc_destroyWeak(&v13);
}

uint64_t sub_100102DC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100102DDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _finalizeWithContext:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
}

CKRecord *sub_100102E18(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v5,  v7);

  id v9 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  @"AssistantKeyValueRecord",  v8);
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

  if (v10 == v6)
  {

    id v6 = 0LL;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord encryptedValuesByKey](v9, "encryptedValuesByKey"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", 1LL));
  [v11 setObject:v12 forKey:@"version"];

  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord encryptedValuesByKey](v9, "encryptedValuesByKey"));
  [v13 setObject:v5 forKey:@"key"];

  -[CKRecord _ad_setData:](v9, "_ad_setData:", v6);
  return v9;
}

NSMutableArray *sub_100102F50(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v3 count]);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", v11, (void)v16));
        id v13 = sub_100102E18(v11, v12, v4);
        int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

        if (v14) {
          -[NSMutableArray addObject:](v5, "addObject:", v14);
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v8);
  }

  return v5;
}

id sub_1001030CC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v3 count]));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v16;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        id v12 = sub_100103228(v11, v4);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        objc_msgSend(v5, "setObject:forKey:", v13, v11, (void)v15);
      }

      id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v8);
  }

  return v5;
}

CKRecordID *sub_100103228(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v4,  v3);

  return v5;
}

id sub_100103288(void *a1)
{
  id v1 = a1;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSArray);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSData);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 5LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v2, v6, v7, v8, v9));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "_ad_dataOfClasses:", v3));

  return v4;
}

void sub_100103390(void *a1, void *a2, uint64_t a3, void *a4, int a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a4;
  id v16 = a6;
  id v17 = a7;
  if ([v13 count] || objc_msgSend(v14, "count"))
  {
    __int128 v18 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation),  "initWithRecordsToSave:recordIDsToDelete:",  v13,  v14);
    -[CKModifyRecordsOperation setAtomic:](v18, "setAtomic:", 1LL);
    -[CKModifyRecordsOperation setSavePolicy:](v18, "setSavePolicy:", 1LL);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100103528;
    v22[3] = &unk_1004F3C58;
    id v23 = v17;
    -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v18, "setModifyRecordsCompletionBlock:", v22);
    -[CKModifyRecordsOperation setQualityOfService:](v18, "setQualityOfService:", a3);
    if (v16)
    {
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(-[CKModifyRecordsOperation configuration](v18, "configuration"));
      [v19 setXpcActivity:v16];
    }

    if (a5) {
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v15 privateCloudDatabase]);
    }
    else {
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v15 sharedCloudDatabase]);
    }
    int v21 = v20;
    [v20 addOperation:v18];
  }

  else if (v17)
  {
    (*((void (**)(id, void, void, void))v17 + 2))(v17, 0LL, 0LL, 0LL);
  }
}

void sub_100103528(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      id v14 = "_ad_saveRecordsWithRegisteredActivity_block_invoke";
      __int16 v15 = 2112;
      id v16 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Failed to modify records in database with error: (%@)",  (uint8_t *)&v13,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    int v13 = 136315650;
    id v14 = "_ad_saveRecordsWithRegisteredActivity_block_invoke";
    __int16 v15 = 2048;
    id v16 = [v7 count];
    __int16 v17 = 2048;
    id v18 = [v8 count];
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Saved %zd records and deleted %zd records in database",  (uint8_t *)&v13,  0x20u);
  }

  uint64_t v12 = *(void *)(a1 + 32);
  if (v12) {
    (*(void (**)(uint64_t, id, id, id))(v12 + 16))(v12, v9, v7, v8);
  }
}

id sub_100104234()
{
  return (id)qword_100577DB8;
}

id sub_100104240()
{
  if (qword_100577DB0 != -1) {
    dispatch_once(&qword_100577DB0, &stru_1004F1A00);
  }
  return (id)qword_100577DB8;
}

void sub_100104280(uint64_t a1, void *a2)
{
  id v3 = a2;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_10010464C;
  v37[3] = &unk_1004F18F0;
  void v37[4] = *(void *)(a1 + 32);
  id v4 = objc_retainBlock(v37);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) timerID]);
  uint64_t v6 = dispatch_group_create();
  v35[0] = 0LL;
  v35[1] = v35;
  v35[2] = 0x3032000000LL;
  v35[3] = sub_100104764;
  void v35[4] = sub_100104774;
  id v36 = 0LL;
  dispatch_group_enter(v6);
  id v7 = *(void **)(a1 + 32);
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472LL;
  v29[2] = sub_10010477C;
  v29[3] = &unk_1004F19E0;
  void v29[4] = v7;
  id v8 = v5;
  id v30 = v8;
  id v9 = v4;
  id v33 = v9;
  __int128 v34 = v35;
  id v10 = v3;
  id v31 = v10;
  id v11 = v6;
  id v32 = v11;
  [v7 performBlock:v29];
  v27[0] = 0LL;
  v27[1] = v27;
  v27[2] = 0x3032000000LL;
  v27[3] = sub_100104764;
  void v27[4] = sub_100104774;
  id v28 = 0LL;
  dispatch_group_enter(v11);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteTimerManager]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100104828;
  v22[3] = &unk_1004F1990;
  void v22[4] = *(void *)(a1 + 32);
  int v13 = v9;
  id v25 = v13;
  int v26 = v27;
  id v14 = v10;
  id v23 = v14;
  __int16 v15 = v11;
  int v24 = v15;
  [v12 removeTimerWithID:v8 completion:v22];

  id v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_100104924;
  v18[3] = &unk_1004F19B8;
  __int128 v20 = v35;
  int v21 = v27;
  id v19 = v14;
  id v17 = v14;
  dispatch_group_notify(v15, v16, v18);

  _Block_object_dispose(v27, 8);
  _Block_object_dispose(v35, 8);
}

void sub_10010451C(_Unwind_Exception *a1)
{
}

id sub_100104548()
{
  return (id)qword_100577DD0;
}

id sub_100104554()
{
  if (qword_100577DC8 != -1) {
    dispatch_once(&qword_100577DC8, &stru_1004F1A20);
  }
  return (id)qword_100577DD0;
}

void sub_100104594(id a1)
{
  qword_100577DD0 = (uint64_t)objc_getClass("NAScheduler");
  if (!qword_100577DD0) {
    __assert_rtn("initNAScheduler_block_invoke", "ADClockService+IntentSupport.m", 50, "classNAScheduler");
  }
  off_100573038 = sub_100104548;
}

void sub_1001045F0()
{
  if (!qword_100577DC0)
  {
    qword_100577DC0 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/NetAppsUtilities.framework/NetAppsUtilities",  2);
    if (!qword_100577DC0) {
      __assert_rtn("NetAppsUtilitiesLibrary", "ADClockService+IntentSupport.m", 47, "frameworkLibrary");
    }
  }

void sub_10010464C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v10 = "-[ADClockService(IntentSupport) removeTimer:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Update snapshot to reflect the removed timer %@.",  buf,  0x16u);
  }

  id v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100104D38;
  v7[3] = &unk_1004F18C8;
  id v8 = v3;
  id v6 = v3;
  [v5 _mutateMergedClockTimerSnapshotUsingBlock:v7];
}

uint64_t sub_100104764(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100104774(uint64_t a1)
{
}

void sub_10010477C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100104B9C;
  v6[3] = &unk_1004F1940;
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  id v9 = v4;
  uint64_t v10 = v5;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [v2 _removeTimerWithID:v3 completion:v6];
}

void sub_100104828(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100104A24;
  v12[3] = &unk_1004F19E0;
  id v13 = v5;
  id v8 = *(id *)(a1 + 56);
  id v14 = v6;
  uint64_t v9 = *(void *)(a1 + 64);
  id v17 = v8;
  uint64_t v18 = v9;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, v12);
}

void *sub_100104924(void *result)
{
  uint64_t v1 = *(void *)(*(void *)(result[5] + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(*(void *)(result[6] + 8LL) + 40LL);
    if (v3)
    {
      id v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315650;
        id v6 = "-[ADClockService(IntentSupport) removeTimer:]_block_invoke";
        __int16 v7 = 2112;
        uint64_t v8 = v1;
        __int16 v9 = 2112;
        uint64_t v10 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to update timer locally and remotely. (localError = %@, remoteError = %@)",  (uint8_t *)&v5,  0x20u);
        uint64_t v1 = *(void *)(*(void *)(v2[5] + 8LL) + 40LL);
      }

      return [(id)v2[4] finishWithError:v1];
    }
  }

  return result;
}

void sub_100104A24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = SOClockTimerCreateFromMTTimer(v2);
    int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 136315394;
      id v12 = "-[ADClockService(IntentSupport) removeTimer:]_block_invoke_2";
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s removedTimer = %@", (uint8_t *)&v11, 0x16u);
    }
  }

  uint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), v8);
    __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 136315394;
      id v12 = "-[ADClockService(IntentSupport) removeTimer:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s remoteError = %@",  (uint8_t *)&v11,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 48) finishWithNoResult];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100104B9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = SOClockTimerCreateFromMTTimer(v5);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);

    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315394;
      __int16 v13 = "-[ADClockService(IntentSupport) removeTimer:]_block_invoke_4";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s removedTimer = %@", (uint8_t *)&v12, 0x16u);
    }
  }

  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
    int v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      __int16 v13 = "-[ADClockService(IntentSupport) removeTimer:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s localError = %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 32) finishWithNoResult];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_100104D38(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 timersByID]);
  id v5 = [v4 mutableCopy];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timerID]);
  [v5 removeObjectForKey:v6];

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100104E04;
  v10[3] = &unk_1004FD6A0;
  id v11 = v5;
  id v7 = v5;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 mutatedCopyWithMutator:v10]);

  return v8;
}

id sub_100104E04(uint64_t a1, void *a2)
{
  return [a2 setTimersByID:*(void *)(a1 + 32)];
}

void sub_100104E10(id a1)
{
  qword_100577DB8 = (uint64_t)objc_getClass("NAFuture");
  if (!qword_100577DB8) {
    __assert_rtn("initNAFuture_block_invoke", "ADClockService+IntentSupport.m", 48, "classNAFuture");
  }
  off_100573030 = sub_100104234;
}

void sub_100104E6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_100105374;
  v47[3] = &unk_1004F18F0;
  v47[4] = *(void *)(a1 + 32);
  uint64_t v4 = objc_retainBlock(v47);
  unsigned int v5 = [*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___ADClockTimerIntentSupportChangeTracking];
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (v5)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke_3";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %@ has tracked changes.", buf, 0x16u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) timerID]);
    __int16 v9 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) trackedChanges]);
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2112;
      id v49 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s timerID = %@, changes = %@", buf, 0x20u);
    }

    id v11 = dispatch_group_create();
    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    id v49 = sub_100104764;
    uint64_t v50 = sub_100104774;
    id v51 = 0LL;
    dispatch_group_enter(v11);
    int v12 = *(void **)(a1 + 32);
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_10010548C;
    v40[3] = &unk_1004F1968;
    v40[4] = v12;
    id v13 = v8;
    id v41 = v13;
    __int16 v14 = v9;
    __int16 v42 = v14;
    id v15 = v4;
    id v45 = v15;
    id v46 = buf;
    id v16 = v3;
    id v43 = v16;
    id v17 = v11;
    __int16 v44 = v17;
    [v12 performBlock:v40];
    v38[0] = 0LL;
    v38[1] = v38;
    v38[2] = 0x3032000000LL;
    v38[3] = sub_100104764;
    v38[4] = sub_100104774;
    id v39 = 0LL;
    dispatch_group_enter(v17);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteTimerManager]);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_100105540;
    v33[3] = &unk_1004F1990;
    void v33[4] = *(void *)(a1 + 32);
    id v36 = v15;
    __int16 v37 = v38;
    id v19 = v16;
    id v34 = v19;
    __int128 v20 = v17;
    __int16 v35 = v20;
    [v18 updateTimerWithID:v13 changes:v14 completion:v33];

    int v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10010563C;
    block[3] = &unk_1004F19B8;
    id v31 = buf;
    id v32 = v38;
    id v30 = v19;
    dispatch_group_notify(v20, v21, block);

    _Block_object_dispose(v38, 8);
    _Block_object_dispose(buf, 8);
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v23;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s %@ does NOT have tracked changes.",  buf,  0x16u);
    }

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    void v24[2] = sub_10010573C;
    v24[3] = &unk_1004FDA30;
    uint64_t v22 = *(void **)(a1 + 40);
    id v25 = *(id *)(a1 + 32);
    id v26 = v22;
    id v28 = v4;
    id v27 = v3;
    [v25 performBlock:v24];
  }
}

void sub_100105340(_Unwind_Exception *a1)
{
}

void sub_100105374(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v10 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Update snapshot to reflect the updated timer %@.",  buf,  0x16u);
  }

  unsigned int v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100105F80;
  v7[3] = &unk_1004F18C8;
  id v8 = v3;
  id v6 = v3;
  [v5 _mutateMergedClockTimerSnapshotUsingBlock:v7];
}

void sub_10010548C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100105DE4;
  v7[3] = &unk_1004F1940;
  id v5 = *(id *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  id v10 = v5;
  uint64_t v11 = v6;
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  [v2 _updateTimerWithID:v3 changes:v4 completion:v7];
}

void sub_100105540(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100105C6C;
  v12[3] = &unk_1004F19E0;
  id v13 = v5;
  id v8 = *(id *)(a1 + 56);
  id v14 = v6;
  uint64_t v9 = *(void *)(a1 + 64);
  id v17 = v8;
  uint64_t v18 = v9;
  id v15 = *(id *)(a1 + 40);
  id v16 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, v12);
}

void *sub_10010563C(void *result)
{
  uint64_t v1 = *(void *)(*(void *)(result[5] + 8LL) + 40LL);
  if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(*(void *)(result[6] + 8LL) + 40LL);
    if (v3)
    {
      uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315650;
        id v6 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke";
        __int16 v7 = 2112;
        uint64_t v8 = v1;
        __int16 v9 = 2112;
        uint64_t v10 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to update timer locally and remotely. (localError = %@, remoteError = %@)",  (uint8_t *)&v5,  0x20u);
        uint64_t v1 = *(void *)(*(void *)(v2[5] + 8LL) + 40LL);
      }

      return [(id)v2[4] finishWithError:v1];
    }
  }

  return result;
}

void sub_10010573C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = sub_1001057E0(*(void **)(a1 + 40));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10010596C;
  v5[3] = &unk_1004FD7E0;
  id v7 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 48);
  [v2 _updateTimer:v4 completion:v5];
}

id sub_1001057E0(void *a1)
{
  id v1 = a1;
  id v2 = off_100573040();
  if (v2 && (objc_opt_isKindOfClass(v1, v2) & 1) != 0)
  {
    id v3 = v1;
  }

  else
  {
    id v4 = objc_alloc((Class)off_100573048());
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 timerID]);
    id v3 = [v4 initWithIdentifier:v5];

    if (!v3)
    {
      id v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315138;
        id v11 = "_ADClockServiceGetMTTimerFromMTTimerIntentSupportObject";
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Unable to create an instace of MTMutableTimer.",  (uint8_t *)&v10,  0xCu);
      }
    }

    objc_msgSend(v3, "setState:", objc_msgSend(v1, "state"));
    [v1 duration];
    objc_msgSend(v3, "setDuration:");
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 title]);
    [v3 setTitle:v7];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 siriContext]);
    [v3 setSiriContext:v8];
  }

  return v3;
}

void sub_10010596C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = SOClockTimerCreateFromMTTimer(v5);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);

    int v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315394;
      id v13 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke_2";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s updatedTimer = %@", (uint8_t *)&v12, 0x16u);
    }
  }

  if (v6)
  {
    id v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      id v13 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v12, 0x16u);
    }

    [*(id *)(a1 + 32) finishWithError:v6];
  }

  else
  {
    [*(id *)(a1 + 32) finishWithNoResult];
  }
}

id sub_100105AF4()
{
  return (id)qword_100577DE0;
}

id sub_100105B00()
{
  if (qword_100577DD8 != -1) {
    dispatch_once(&qword_100577DD8, &stru_1004F1A40);
  }
  return (id)qword_100577DE0;
}

id sub_100105B40()
{
  return (id)qword_100577E00;
}

id sub_100105B4C()
{
  if (qword_100577DF8 != -1) {
    dispatch_once(&qword_100577DF8, &stru_1004F1A80);
  }
  return (id)qword_100577E00;
}

void sub_100105B8C(id a1)
{
  if (qword_100577DE8 != -1) {
    dispatch_once(&qword_100577DE8, &stru_1004F1A60);
  }
  qword_100577E00 = (uint64_t)objc_getClass("MTMutableTimer");
  off_100573048 = sub_100105B40;
}

void sub_100105BE8(id a1)
{
  qword_100577DF0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer", 2);
}

void sub_100105C10(id a1)
{
  if (qword_100577DE8 != -1) {
    dispatch_once(&qword_100577DE8, &stru_1004F1A60);
  }
  qword_100577DE0 = (uint64_t)objc_getClass("MTTimer");
  off_100573040 = sub_100105AF4;
}

void sub_100105C6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = SOClockTimerCreateFromMTTimer(v2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v11 = 136315394;
      int v12 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke_2";
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s updatedTimer = %@", (uint8_t *)&v11, 0x16u);
    }
  }

  uint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), v8);
    __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 136315394;
      int v12 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s remoteError = %@",  (uint8_t *)&v11,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 48) finishWithNoResult];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100105DE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = SOClockTimerCreateFromMTTimer(v5);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);

    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315394;
      __int16 v13 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke_2";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s updatedTimer = %@", (uint8_t *)&v12, 0x16u);
    }
  }

  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
    int v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      __int16 v13 = "-[ADClockService(IntentSupport) updateTimer:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s localError = %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 32) finishWithNoResult];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_100105F80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 timersByID]);
  id v5 = [v4 mutableCopy];
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 timerID]);
  [v5 setObject:v6 forKey:v7];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10010605C;
  v11[3] = &unk_1004FD6A0;
  id v12 = v5;
  id v8 = v5;
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 mutatedCopyWithMutator:v11]);

  return v9;
}

id sub_10010605C(uint64_t a1, void *a2)
{
  return [a2 setTimersByID:*(void *)(a1 + 32)];
}

void sub_100106068(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100106100;
  v6[3] = &unk_1004FD4C0;
  uint64_t v4 = *(void **)(a1 + 40);
  id v7 = *(id *)(a1 + 32);
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  [v7 performBlock:v6];
}

void sub_100106100(uint64_t a1)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1001061E8;
  v10[3] = &unk_1004F18F0;
  void v10[4] = *(void *)(a1 + 32);
  uint64_t v2 = objc_retainBlock(v10);
  id v3 = *(void **)(a1 + 32);
  id v4 = sub_1001057E0(*(void **)(a1 + 40));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100106300;
  v7[3] = &unk_1004FD7E0;
  id v9 = v2;
  id v8 = *(id *)(a1 + 48);
  id v6 = v2;
  [v3 _addTimer:v5 completion:v7];
}

void sub_1001061E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v10 = "-[ADClockService(IntentSupport) addTimer:]_block_invoke_3";
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Update snapshot to reflect the added timer %@.",  buf,  0x16u);
  }

  id v5 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100106488;
  v7[3] = &unk_1004F18C8;
  id v8 = v3;
  id v6 = v3;
  [v5 _mutateMergedClockTimerSnapshotUsingBlock:v7];
}

void sub_100106300(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = SOClockTimerCreateFromMTTimer(v5);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v9);

    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315394;
      __int16 v13 = "-[ADClockService(IntentSupport) addTimer:]_block_invoke_3";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s addedTimer = %@", (uint8_t *)&v12, 0x16u);
    }
  }

  if (v6)
  {
    __int16 v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      __int16 v13 = "-[ADClockService(IntentSupport) addTimer:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v12, 0x16u);
    }

    [*(id *)(a1 + 32) finishWithError:v6];
  }

  else
  {
    [*(id *)(a1 + 32) finishWithNoResult];
  }
}

id sub_100106488(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 timersByID]);
  id v5 = [v4 mutableCopy];
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 timerID]);
  [v5 setObject:v6 forKey:v7];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100106564;
  v11[3] = &unk_1004FD6A0;
  id v12 = v5;
  id v8 = v5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 mutatedCopyWithMutator:v11]);

  return v9;
}

id sub_100106564(uint64_t a1, void *a2)
{
  return [a2 setTimersByID:*(void *)(a1 + 32)];
}

void sub_100106570(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_1001065F0;
  v7[3] = &unk_1004FDA80;
  id v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  void v7[4] = v5;
  id v6 = v3;
  [v5 performBlock:v7];
}

void sub_1001065F0(uint64_t a1)
{
  uint64_t v14 = 0LL;
  id v15 = &v14;
  uint64_t v16 = 0x3032000000LL;
  id v17 = sub_100104764;
  uint64_t v18 = sub_100104774;
  id v19 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _mergedClockTimerSnapshot]);
  id v3 = [objc_alloc((Class)off_100573040()) initWithState:*(void *)(a1 + 48) duration:0.0];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 timersByID]);
  id v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  uint64_t v10 = sub_1001067D4;
  __int16 v11 = &unk_1004FD420;
  id v5 = v3;
  id v12 = v5;
  __int16 v13 = &v14;
  [v4 enumerateKeysAndObjectsUsingBlock:&v8];

  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = v15[5];
    *(_DWORD *)__int128 buf = 136315394;
    int v21 = "-[ADClockService(IntentSupport) sleepTimersWithState:]_block_invoke_2";
    __int16 v22 = 2112;
    uint64_t v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s timers = %@", buf, 0x16u);
  }

  objc_msgSend(*(id *)(a1 + 40), "finishWithResult:", v15[5], v8, v9, v10, v11);

  _Block_object_dispose(&v14, 8);
}

void sub_1001067B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001067D4(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v9 = a3;
  if ([v9 type] == (id)2)
  {
    id v6 = [v9 state];
    if (v6 == (id)SOClockTimerGetTimerStateFromMTTimer(*(void *)(a1 + 32)))
    {
      uint64_t v7 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 timerProxyForIntentSupport]);
      [v7 addObject:v8];

      *a4 = 1;
    }
  }
}

void sub_10010686C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001068E8;
  v6[3] = &unk_1004FD968;
  void v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 performBlock:v6];
}

void sub_1001068E8(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _mergedClockTimerSnapshot]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 timersByID]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100106A34;
  v7[3] = &unk_1004F9CB8;
  id v5 = v2;
  id v8 = v5;
  [v4 enumerateKeysAndObjectsUsingBlock:v7];

  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v10 = "-[ADClockService(IntentSupport) timers]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s timers = %@", buf, 0x16u);
  }

  [*(id *)(a1 + 40) finishWithResult:v5];
}

void sub_100106A34(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 timerProxyForIntentSupport]);
  [v3 addObject:v4];
}

void sub_100106C64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id sub_10010710C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endSendingWithMessageSender:*(void *)(a1 + 40) replyMessage:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
}

id sub_10010711C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _beginSendingWithMessageSender:*(void *)(a1 + 40)];
}

void sub_100107128(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleWatchdogTimeout];
}

void sub_100107638(uint64_t a1)
{
  if (a1 == 2)
  {
    id v3 = +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  _AXSVoiceOverTouchEnabled(2LL));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  else
  {
    if (a1 != 1) {
      goto LABEL_7;
    }
    id v1 = objc_alloc_init(&OBJC_CLASS___RadiosPreferences);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v1 airplaneMode]));
  }

  if (v2)
  {
    id v4 = v2;
    return;
  }

void sub_100107E70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100108160(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isDelaying])
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 136315394;
      id v12 = "-[ADRequestDelayManager interceptCommand:completion:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Delaying sending command: %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___SACFProvideContext);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0
      || (uint64_t v5 = *(void *)(a1 + 40),
          uint64_t v6 = objc_opt_class(&OBJC_CLASS___SAUpdateReadingState),
          (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _delayedcontextCommandHandlers]);
    }

    else
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _delayedCommandHandlers]);
    }

    id v8 = (void *)v7;
    id v9 = objc_retainBlock(*(id *)(a1 + 48));
    [v8 enqueueObject:v9];
  }

  else
  {
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 1LL);
  }

void sub_1001082DC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v2 = (void *)qword_100577E08;
  qword_100577E08 = (uint64_t)v1;

  uint64_t v3 = (void *)qword_100577E08;
  uint64_t v6 = SACFFetchScriptCommandClassIdentifier;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v4));
  [v3 setObject:v5 forKey:SACFGroupIdentifier];
}

void sub_1001083B8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADRequestDelayManager _beginTimerForContextCommands]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Timeout reached for context commands, dropping commands",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained releaseStoredContextCommandsAndSendCommands:0];
}

id sub_100108478(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _beginTimerForContextCommands];
}

void sub_100108480(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) isDelaying];
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if ((v2 & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = "YES";
      if (!*(_BYTE *)(a1 + 48)) {
        int v4 = "NO";
      }
      int v6 = 136315394;
      uint64_t v7 = "-[ADRequestDelayManager stopDelayingAndSendCommands:completion:]_block_invoke";
      __int16 v8 = 2080;
      id v9 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Stopping request delaying and sending commands: %s",  (uint8_t *)&v6,  0x16u);
    }

    [*(id *)(a1 + 32) setIsDelaying:0];
    [*(id *)(a1 + 32) dequeueDelayedCommandsAndSend:*(unsigned __int8 *)(a1 + 48) completion:0];
    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADRequestDelayManager stopDelayingAndSendCommands:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Delaying already stopped, not sending commands",  (uint8_t *)&v6,  0xCu);
  }

void sub_1001085DC(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    __int16 v8 = "-[ADRequestDelayManager startDelaying]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v7, 0xCu);
  }

  if ([*(id *)(a1 + 32) isDelaying])
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      __int16 v8 = "-[ADRequestDelayManager startDelaying]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Can't start delaying because we are already delaying",  (uint8_t *)&v7,  0xCu);
    }
  }

  else
  {
    [*(id *)(a1 + 32) setIsDelaying:1];
    [*(id *)(a1 + 32) releaseStoredContextCommandsAndSendCommands:0];
    int v4 = *(void **)(*(void *)(a1 + 32) + 32LL);
    if (v4)
    {
      [v4 cancel];
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = 0LL;
    }
  }

void sub_10010A710(id *a1)
{
  id v2 = [a1[6] state];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] params]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantId]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] requestAceId]);
  switch((unint64_t)v2)
  {
    case 4uLL:
      int v6 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v7 = a1[5];
        __int16 v8 = v6;
        id v9 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Download errored for %{private}@",  (uint8_t *)&v53,  0x16u);
      }

      uint64_t v10 = (uint64_t)[a1[6] errorCode];
      int v11 = v5;
      goto LABEL_30;
    case 5uLL:
      uint64_t v16 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v17 = a1[5];
        uint64_t v18 = v16;
        id v19 = (__CFString *)objc_claimAutoreleasedReturnValue([v17 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s Download complete for %{private}@",  (uint8_t *)&v53,  0x16u);
      }

      if ([a1[6] batchSize])
      {
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 9) objectForKey:v4]);

        if (!v20)
        {
          int v21 = (void *)*((void *)a1[4] + 9);
          __int16 v22 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          [v21 setObject:v22 forKey:v4];
        }

        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 9) objectForKey:v4]);
        int v24 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          id v25 = a1[6];
          id v26 = v24;
          id v27 = (__CFString *)objc_claimAutoreleasedReturnValue([v25 serverGeneration]);
          int v53 = 136315394;
          int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
          __int16 v55 = 2112;
          id v56 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%s Updating client generation to %@",  (uint8_t *)&v53,  0x16u);
        }

        id v28 = (void *)objc_claimAutoreleasedReturnValue([a1[6] serverGeneration]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v3 syncType]);
        [v23 setObject:v28 forKey:v29];

        +[ADSyncControllerService _updateCachedMuxSyncStatus:]( &OBJC_CLASS___ADSyncControllerService,  "_updateCachedMuxSyncStatus:",  *((void *)a1[4] + 9));
        [*((id *)a1[4] + 12) addObject:v4];
      }

      +[ADMUXReverseSyncInstrumentationUtil logSiriVocabDataDownloadEndedRequestId:]( &OBJC_CLASS___ADMUXReverseSyncInstrumentationUtil,  "logSiriVocabDataDownloadEndedRequestId:",  v5);
      break;
    case 6uLL:
      id v30 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v31 = a1[5];
        id v32 = v30;
        id v33 = (__CFString *)objc_claimAutoreleasedReturnValue([v31 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "%s Download completed with no data on the server for %{private}@",  (uint8_t *)&v53,  0x16u);
      }

      id v34 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 9) objectForKey:v4]);

      if (!v34)
      {
        __int16 v35 = (void *)*((void *)a1[4] + 9);
        id v36 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        [v35 setObject:v36 forKey:v4];
      }

      id v14 = (id)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 9) objectForKey:v4]);
      __int16 v37 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v53 = 136315394;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2112;
        id v56 = @"NoDataOnServer";
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s Setting client generation to %@ to indicate sync occurrence",  (uint8_t *)&v53,  0x16u);
      }

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v3 syncType]);
      [v14 setObject:@"NoDataOnServer" forKey:v38];

      +[ADSyncControllerService _updateCachedMuxSyncStatus:]( &OBJC_CLASS___ADSyncControllerService,  "_updateCachedMuxSyncStatus:",  *((void *)a1[4] + 9));
      +[ADMUXReverseSyncInstrumentationUtil logSiriVocabDataDownloadEndedRequestId:]( &OBJC_CLASS___ADMUXReverseSyncInstrumentationUtil,  "logSiriVocabDataDownloadEndedRequestId:",  v5);
      goto LABEL_23;
    case 7uLL:
      id v39 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v40 = a1[5];
        id v41 = v39;
        __int16 v42 = (__CFString *)objc_claimAutoreleasedReturnValue([v40 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "%s Download timedout for %{private}@",  (uint8_t *)&v53,  0x16u);
      }

      int v11 = v5;
      uint64_t v10 = 6LL;
      goto LABEL_30;
    case 8uLL:
      id v43 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v44 = a1[5];
        id v45 = v43;
        id v46 = (__CFString *)objc_claimAutoreleasedReturnValue([v44 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_INFO,  "%s Download cancelled for %{private}@",  (uint8_t *)&v53,  0x16u);
      }

      int v11 = v5;
      uint64_t v10 = 7LL;
LABEL_30:
      +[ADMUXReverseSyncInstrumentationUtil logSiriVocabDataDownloadFailedRequestId:errorCode:]( &OBJC_CLASS___ADMUXReverseSyncInstrumentationUtil,  "logSiriVocabDataDownloadFailedRequestId:errorCode:",  v11,  v10);
      break;
    case 9uLL:
      id v47 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v48 = a1[5];
        id v49 = v47;
        uint64_t v50 = (__CFString *)objc_claimAutoreleasedReturnValue([v48 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "%s Download cancelled pending syncToken transfer from companion for %{private}@",  (uint8_t *)&v53,  0x16u);
      }

      id v51 = (void *)*((void *)a1[4] + 11);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([a1[5] params]);
      [v51 addObject:v52];

      break;
    default:
      id v12 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        id v13 = a1[5];
        id v14 = v12;
        id v15 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 params]);
        int v53 = 136315395;
        int v54 = "-[ADSyncControllerService syncDownloadTask:endedWithResult:]_block_invoke";
        __int16 v55 = 2113;
        id v56 = v15;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_ERROR,  "%s Invalid state for %{private}@",  (uint8_t *)&v53,  0x16u);

LABEL_23:
      }

      break;
  }

  [a1[4] _triggerBuildSpeechProfileIfRequiredForAssistantId:v4];
  [a1[4] _startDownloading];
}

void sub_10010AED0(id *a1)
{
  uint64_t v20 = 0LL;
  int v21 = &v20;
  uint64_t v22 = 0x3032000000LL;
  uint64_t v23 = sub_10010B1BC;
  int v24 = sub_10010B1CC;
  id v25 = 0LL;
  id v2 = a1[5];
  uint64_t v3 = (void *)*((void *)a1[4] + 10);
  v17[2] = sub_10010B1D4;
  void v17[3] = &unk_1004F8EB8;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  id v18 = v2;
  id v19 = &v20;
  [v3 enumerateKeysAndObjectsUsingBlock:v17];
  if (v21[5])
  {
    objc_msgSend(*((id *)a1[4] + 9), "removeObjectForKey:");
    [*((id *)a1[4] + 10) removeObjectForKey:v21[5]];
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[CKVocabularyAdministrator makeAdministrator]( &OBJC_CLASS___CKVocabularyAdministrator,  "makeAdministrator"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] sharedUserID]);
    uint64_t v6 = v21[5];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10010B2BC;
    v15[3] = &unk_1004FB890;
    id v16 = a1[6];
    [v4 deleteAllItemsWithUserId:v5 deviceId:v6 completion:v15];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[5] companionAssistantID]);
  if (v7)
  {
    __int16 v8 = (void *)*((void *)a1[4] + 9);
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    [v8 setObject:v9 forKey:v7];

    uint64_t v10 = (void *)*((void *)a1[4] + 10);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] sharedUserID]);
    [v10 setObject:v11 forKey:v7];

    [a1[4] _createDownloadTasksForUser:a1[5]];
  }

  else
  {
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] name]);
      id v14 = a1[5];
      *(_DWORD *)__int128 buf = 136315650;
      id v27 = "-[ADSyncControllerService _sharedUserCompanionInfoChangedNotification:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v13;
      __int16 v30 = 2112;
      id v31 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Received %@ notification with user %@ but no companion assistantID",  buf,  0x20u);
    }
  }

  _Block_object_dispose(&v20, 8);
}

void sub_10010B194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10010B1BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10010B1CC(uint64_t a1)
{
}

void sub_10010B1D4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v14 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserID]);
  id v10 = v8;
  id v11 = v9;
  if (v11 != v10)
  {
    id v12 = v11;
    if (!v10 || !v11)
    {

      goto LABEL_9;
    }

    unsigned int v13 = [v10 isEqual:v11];

    if (!v13) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }

  if (v10)
  {
LABEL_7:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }

void sub_10010B2BC(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    int v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v6 = v4;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
      uint64_t v8 = CKVocabularyAdministratorResultDescription(a2);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      int v10 = 136315650;
      id v11 = "-[ADSyncControllerService _sharedUserCompanionInfoChangedNotification:]_block_invoke_3";
      __int16 v12 = 2112;
      unsigned int v13 = v7;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to delete user data on notification: %@ with status: %@",  (uint8_t *)&v10,  0x20u);
    }
  }

void sub_10010B3C8(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) personalDomainsIsEnabled];
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(void **)(v3 + 72);
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);
    [v4 setObject:v5 forKey:v6];

    id v7 = *(void **)(*(void *)(a1 + 40) + 80LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);
    [v7 setObject:v8 forKey:v9];

    [*(id *)(a1 + 40) _createDownloadTasksForUser:*(void *)(a1 + 32)];
  }

  else
  {
    [*(id *)(v3 + 72) removeObjectForKey:*(void *)(a1 + 48)];
    [*(id *)(*(void *)(a1 + 40) + 80) removeObjectForKey:*(void *)(a1 + 48)];
    int v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 136315394;
      id v18 = "-[ADSyncControllerService _sharedUserPersonalDomainsChangedNotification:]_block_invoke";
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Deleting user data for assistantId: %@",  buf,  0x16u);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[CKVocabularyAdministrator makeAdministrator]( &OBJC_CLASS___CKVocabularyAdministrator,  "makeAdministrator"));
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserID]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10010B5F4;
    v15[3] = &unk_1004FB890;
    uint64_t v13 = *(void *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    [v11 deleteAllItemsWithUserId:v12 deviceId:v13 completion:v15];
  }

void sub_10010B5F4(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    int v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v6 = v4;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
      uint64_t v8 = CKVocabularyAdministratorResultDescription(a2);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      int v10 = 136315650;
      id v11 = "-[ADSyncControllerService _sharedUserPersonalDomainsChangedNotification:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to delete user data on notification: %@ with status: %@",  (uint8_t *)&v10,  0x20u);
    }
  }

void sub_10010B700(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);

  if (v2)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 72LL);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);
    [v3 removeObjectForKey:v4];

    uint64_t v5 = *(void **)(*(void *)(a1 + 40) + 80LL);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);
    [v5 removeObjectForKey:v6];

    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[CKVocabularyAdministrator makeAdministrator]( &OBJC_CLASS___CKVocabularyAdministrator,  "makeAdministrator"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserID]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10010B8D0;
    v13[3] = &unk_1004FB890;
    id v14 = *(id *)(a1 + 48);
    [v7 deleteAllItemsWithUserId:v8 completion:v13];
  }

  else
  {
    id v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = *(void **)(a1 + 32);
      id v11 = v9;
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedUserID]);
      *(_DWORD *)__int128 buf = 136315394;
      id v16 = "-[ADSyncControllerService _sharedUserRemovedNotification:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s No companion Assistant ID for shared user %@",  buf,  0x16u);
    }
  }

void sub_10010B8D0(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    int v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v6 = v4;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
      uint64_t v8 = CKVocabularyAdministratorResultDescription(a2);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      int v10 = 136315650;
      id v11 = "-[ADSyncControllerService _sharedUserRemovedNotification:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to delete user data on notification: %@ with status: %@",  (uint8_t *)&v10,  0x20u);
    }
  }

void sub_10010B9DC(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);

  if (v2)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 72LL);
    int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);
    [v3 setObject:v4 forKey:v5];

    uint64_t v6 = *(void **)(*(void *)(a1 + 40) + 80LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserID]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionAssistantID]);
    [v6 setObject:v7 forKey:v8];

    [*(id *)(a1 + 40) _createDownloadTasksForUser:*(void *)(a1 + 32)];
  }

  else
  {
    id v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = *(void **)(a1 + 32);
      id v11 = v9;
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedUserID]);
      int v13 = 136315394;
      __int16 v14 = "-[ADSyncControllerService _sharedUserAddedNotification:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s No companion Assistant ID for shared user %@",  (uint8_t *)&v13,  0x16u);
    }
  }

id sub_10010BB90(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionSyncMetadata]);
  +[ADSyncControllerService _logSyncNotificationLatencyFromCompanionSyncMetadata:]( &OBJC_CLASS___ADSyncControllerService,  "_logSyncNotificationLatencyFromCompanionSyncMetadata:",  v2);

  uint64_t v3 = (os_log_s *)AFSiriLogContextMUXReverseSync;
  os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextMUXReverseSync);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v5 = v4;
    if (os_signpost_enabled(v3))
    {
      int v7 = 138543362;
      uint64_t v8 = @"MUXReverseSyncDownloadTriggerNotification";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_EVENT,  v5,  "MUXReverseSyncTriggerEvent",  "ADMUXReverseSyncTriggerParamName=%{public,signpost.description.attribute}@",  (uint8_t *)&v7,  0xCu);
    }
  }

  return [*(id *)(a1 + 40) _createDownloadTasksForUser:*(void *)(a1 + 32)];
}

void sub_10010BC9C(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0) {
    os_signpost_id_t v4 = v2;
  }
  else {
    os_signpost_id_t v4 = 0LL;
  }
  id v5 = v4;
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v7 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  id v48 = v5;
  if (v5)
  {
    if (v7)
    {
      *(_DWORD *)__int128 buf = 136315395;
      __int128 v60 = "-[ADSyncControllerService _syncTokenReceivedNotification:]_block_invoke";
      __int16 v61 = 2113;
      id v62 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Received sync token for assistantId: %{private}@",  buf,  0x16u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 80) objectForKey:v5]);
    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 allUsersBySharedUserID]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v8]);

      if (v11)
      {
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 aceHost]);
        int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 componentsSeparatedByString:@":"]);
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);

        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[ADMUXSyncTokenManager sharedInstance](&OBJC_CLASS___ADMUXSyncTokenManager, "sharedInstance"));
        uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 getSyncTokenForAssistantId:v5 aceHost:v14]);

        id v46 = (void *)v16;
        if (v16)
        {
          id v40 = v14;
          id v41 = v11;
          __int16 v42 = v8;
          id v43 = v2;
          id v44 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          uint64_t v45 = a1;
          __int128 v53 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          __int128 v56 = 0u;
          uint64_t v39 = 88LL;
          id obj = *(id *)(*(void *)(a1 + 40) + 88LL);
          id v17 = [obj countByEnumeratingWithState:&v53 objects:v58 count:16];
          if (v17)
          {
            id v18 = v17;
            uint64_t v19 = *(void *)v54;
            do
            {
              for (i = 0LL; i != v18; i = (char *)i + 1)
              {
                if (*(void *)v54 != v19) {
                  objc_enumerationMutation(obj);
                }
                int v21 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)i);
                uint64_t v22 = objc_alloc(&OBJC_CLASS___ADServerSyncRequestParams);
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 assistantId]);
                int v24 = (void *)objc_claimAutoreleasedReturnValue([v21 sharedUserId]);
                id v25 = (void *)objc_claimAutoreleasedReturnValue([v21 syncType]);
                id v26 = (void *)objc_claimAutoreleasedReturnValue([v21 clientGeneration]);
                id v27 = (void *)objc_claimAutoreleasedReturnValue([v21 clusterId]);
                __int16 v28 = -[ADServerSyncRequestParams initWithAssistantId:sharedUserId:syncType:clientGeneration:clusterId:triggerType:]( v22,  "initWithAssistantId:sharedUserId:syncType:clientGeneration:clusterId:triggerType:",  v23,  v24,  v25,  v26,  v27,  2LL);

                uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[ADServerSyncRequestParams assistantId](v28, "assistantId"));
                LODWORD(v26) = [v29 isEqualToString:v48];

                if ((_DWORD)v26)
                {
                  __int16 v30 = -[ADSyncDataDownloadTask initWithParams:usingSyncToken:withDelegate:]( objc_alloc(&OBJC_CLASS___ADSyncDataDownloadTask),  "initWithParams:usingSyncToken:withDelegate:",  v28,  v46,  *(void *)(v45 + 40));
                  [*(id *)(*(void *)(v45 + 40) + 64) addObject:v30];
                  -[NSMutableSet addObject:](v44, "addObject:", v21);
                }
              }

              id v18 = [obj countByEnumeratingWithState:&v53 objects:v58 count:16];
            }

            while (v18);
          }

          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          id v31 = v44;
          id v32 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v49,  v57,  16LL);
          uint64_t v8 = v42;
          unsigned __int8 v2 = v43;
          __int16 v14 = v40;
          if (v32)
          {
            id v33 = v32;
            uint64_t v34 = *(void *)v50;
            do
            {
              for (j = 0LL; j != v33; j = (char *)j + 1)
              {
                if (*(void *)v50 != v34) {
                  objc_enumerationMutation(v31);
                }
                objc_msgSend( *(id *)(*(void *)(v45 + 40) + 88),  "removeObject:",  *(void *)(*((void *)&v49 + 1) + 8 * (void)j),  v39);
              }

              id v33 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v31,  "countByEnumeratingWithState:objects:count:",  &v49,  v57,  16LL);
            }

            while (v33);
          }

          [*(id *)(v45 + 40) _startDownloading];
          id v11 = v41;
        }

        else
        {
          uint64_t v38 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315395;
            __int128 v60 = "-[ADSyncControllerService _syncTokenReceivedNotification:]_block_invoke";
            __int16 v61 = 2113;
            id v62 = v48;
            _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%s Received sync token notification but sync token read failed for assistantId: %{private}@",  buf,  0x16u);
          }
        }
      }

      else
      {
        __int16 v37 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315395;
          __int128 v60 = "-[ADSyncControllerService _syncTokenReceivedNotification:]_block_invoke";
          __int16 v61 = 2113;
          id v62 = v8;
          _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s Found no sharedUser for userId: %{private}@. Unable to use sync token",  buf,  0x16u);
        }
      }
    }

    else
    {
      id v36 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315395;
        __int128 v60 = "-[ADSyncControllerService _syncTokenReceivedNotification:]_block_invoke";
        __int16 v61 = 2113;
        id v62 = v48;
        _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s Found no sharedUserId for assistantId: %{private}@. Unable to use sync token",  buf,  0x16u);
      }
    }
  }

  else if (v7)
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v60 = "-[ADSyncControllerService _syncTokenReceivedNotification:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Received sync token for nil assistantId",  buf,  0xCu);
  }
}

void sub_10010C280(uint64_t a1)
{
  unsigned __int8 v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 72LL);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v50 = "-[ADSyncControllerService createDownloadTasksForAllUsersWithCompletion:]_block_invoke";
    __int16 v51 = 2112;
    uint64_t v52 = v31;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Creating download tasks for all users, %@",  buf,  0x16u);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v3 allUsersBySharedUserID]);

  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 72LL);
  id v36 = [obj countByEnumeratingWithState:&v45 objects:v56 count:16];
  if (v36)
  {
    uint64_t v35 = *(void *)v46;
    *(void *)&__int128 v4 = 136315138LL;
    __int128 v32 = v4;
    do
    {
      for (i = 0LL; i != v36; i = (char *)i + 1)
      {
        if (*(void *)v46 != v35) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)i);
        BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 80), "objectForKey:", v6, v32));
        if (v7)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:v7]);
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 aceHost]);

          if (!v9)
          {
            int v10 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = v32;
              __int128 v50 = "-[ADSyncControllerService createDownloadTasksForAllUsersWithCompletion:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Found no aceHost from user object, using HomePod account settings",  buf,  0xCu);
            }

            id v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADAccount activeAccount](&OBJC_CLASS___ADAccount, "activeAccount"));
            id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 aceHost]);
          }

          id v40 = v7;
          __int16 v37 = v9;
          uint64_t v38 = i;
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v9 componentsSeparatedByString:@":"]);
          int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);

          __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[ADMUXSyncTokenManager sharedInstance](&OBJC_CLASS___ADMUXSyncTokenManager, "sharedInstance"));
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 getSyncTokenForAssistantId:v6 aceHost:v13]);

          __int128 v43 = 0u;
          __int128 v44 = 0u;
          __int128 v41 = 0u;
          __int128 v42 = 0u;
          id v39 = (id)objc_claimAutoreleasedReturnValue(+[ADSyncControllerService syncTypes](&OBJC_CLASS___ADSyncControllerService, "syncTypes"));
          id v16 = [v39 countByEnumeratingWithState:&v41 objects:v55 count:16];
          if (v16)
          {
            id v17 = v16;
            uint64_t v18 = *(void *)v42;
            do
            {
              for (j = 0LL; j != v17; j = (char *)j + 1)
              {
                if (*(void *)v42 != v18) {
                  objc_enumerationMutation(v39);
                }
                uint64_t v20 = *(void *)(*((void *)&v41 + 1) + 8LL * (void)j);
                int v21 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__int128 buf = 136315650;
                  __int128 v50 = "-[ADSyncControllerService createDownloadTasksForAllUsersWithCompletion:]_block_invoke";
                  __int16 v51 = 2112;
                  uint64_t v52 = v6;
                  __int16 v53 = 2112;
                  uint64_t v54 = v20;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s Creating download task for user: %@, SyncType: %@",  buf,  0x20u);
                }

                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) objectForKey:v6]);
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKey:v20]);

                int v24 = -[ADServerSyncRequestParams initWithAssistantId:sharedUserId:syncType:clientGeneration:clusterId:triggerType:]( objc_alloc(&OBJC_CLASS___ADServerSyncRequestParams),  "initWithAssistantId:sharedUserId:syncType:clientGeneration:clusterId:triggerType:",  v6,  v40,  v20,  v23,  v13,  1LL);
                id v25 = -[ADSyncDataDownloadTask initWithParams:usingSyncToken:withDelegate:]( objc_alloc(&OBJC_CLASS___ADSyncDataDownloadTask),  "initWithParams:usingSyncToken:withDelegate:",  v24,  v15,  *(void *)(a1 + 32));
                [*(id *)(*(void *)(a1 + 32) + 64) addObject:v25];
              }

              id v17 = [v39 countByEnumeratingWithState:&v41 objects:v55 count:16];
            }

            while (v17);
          }

          i = v38;
          BOOL v7 = v40;
        }

        else
        {
          id v26 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315395;
            __int128 v50 = "-[ADSyncControllerService createDownloadTasksForAllUsersWithCompletion:]_block_invoke";
            __int16 v51 = 2113;
            uint64_t v52 = v6;
            _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s Found no sharedUserId for assistantId: %{private}@. Unable to create sync download task",  buf,  0x16u);
          }
        }
      }

      id v36 = [obj countByEnumeratingWithState:&v45 objects:v56 count:16];
    }

    while (v36);
  }

  id v27 = (os_log_s *)AFSiriLogContextMUXReverseSync;
  os_signpost_id_t v28 = os_signpost_id_generate(AFSiriLogContextMUXReverseSync);
  if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v29 = v28;
    if (os_signpost_enabled(v27))
    {
      *(_DWORD *)__int128 buf = 138543362;
      __int128 v50 = @"MUXReverseSyncDownloadTriggerPeriodic";
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v27,  OS_SIGNPOST_EVENT,  v29,  "MUXReverseSyncTriggerEvent",  "ADMUXReverseSyncTriggerParamName=%{public,signpost.description.attribute}@",  buf,  0xCu);
    }
  }

  [*(id *)(a1 + 32) _startDownloading];
  uint64_t v30 = *(void *)(a1 + 40);
  if (v30) {
    (*(void (**)(void))(v30 + 16))();
  }
}

void sub_10010C85C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (a2 == 1)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v10 = 136315394;
      id v11 = "-[ADSyncControllerService _triggerBuildSpeechProfileIfRequiredForAssistantId:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Successfully built speech profile for user: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    BOOL v7 = v3;
    uint64_t v8 = CKVocabularyAdministratorResultDescription(a2);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    int v10 = 136315650;
    id v11 = "-[ADSyncControllerService _triggerBuildSpeechProfileIfRequiredForAssistantId:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    __int16 v15 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to build speech profile for user: %@ with status: %@",  (uint8_t *)&v10,  0x20u);
  }

void sub_10010C9B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___SASyncServerSyncDataResponse);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v4 = *(id *)(*(void *)(a1 + 40) + 64LL);
    id v5 = [v4 countByEnumeratingWithState:&v26 objects:v36 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v27;
LABEL_4:
      uint64_t v8 = 0LL;
      while (1)
      {
        if (*(void *)v27 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v26 + 1) + 8 * v8);
        int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 requestAceId]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refId]);
        unsigned __int8 v12 = [v10 isEqualToString:v11];

        if ((v12 & 1) != 0) {
          break;
        }
        if (v6 == (id)++v8)
        {
          id v6 = [v4 countByEnumeratingWithState:&v26 objects:v36 count:16];
          if (v6) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }

      id v13 = v9;

      if (!v13) {
        goto LABEL_16;
      }
      __int16 v14 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v23 = *(void **)(a1 + 32);
        int v24 = v14;
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 refId]);
        *(_DWORD *)__int128 buf = 136315394;
        id v33 = "-[ADSyncControllerService handleCommand:forDomain:executionContext:reply:]_block_invoke";
        __int16 v34 = 2112;
        uint64_t v35 = v25;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "%s Handling command SASyncServerSyncDataResponse with refId=%@",  buf,  0x16u);
      }

      [v13 handleCommand:*(void *)(a1 + 32)];
    }

    else
    {
LABEL_10:

LABEL_16:
      __int16 v15 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void **)(a1 + 32);
        int v21 = v15;
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v20 refId]);
        *(_DWORD *)__int128 buf = 136315394;
        id v33 = "-[ADSyncControllerService handleCommand:forDomain:executionContext:reply:]_block_invoke";
        __int16 v34 = 2112;
        uint64_t v35 = v22;
        _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s Task does not exist for response refId=%@",  buf,  0x16u);
      }

      NSErrorUserInfoKey v30 = NSDebugDescriptionErrorKey;
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refId]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Missing download task for request:%@, command aceId:%@",  v16,  v17,  (void)v26));
      uint64_t v31 = v18;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
      id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"ADSyncControllerError",  3LL,  v19));

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    (*(void (**)(void, void, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL, 0LL);
  }

void sub_10010CD60(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;
}

void sub_10010CD9C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10010CE10;
  v3[3] = &unk_1004F1AF0;
  id v4 = v1;
  [v2 enumerateKeysAndObjectsUsingBlock:v3];
}

void sub_10010CE10(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  id v6 = [a3 copy];
  [v4 setObject:v6 forKey:v5];
}

void sub_10010CE6C(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 72LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v8 + 1) + 8LL * (void)i);
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_10010CF8C(void *a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1[4] + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    while (2)
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * (void)i), "requestAceId", (void)v9));
        unsigned int v8 = [v7 isEqualToString:a1[5]];

        if (v8)
        {
          *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
          goto LABEL_11;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

id sub_10010D0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _loadSyncStatusAndPopulateUserIdToCompanionAssistantIdMapWithUser:a3 cachedMuxSyncStatus:*(void *)(a1 + 40)];
}

void sub_10010D7A0(id a1)
{
  v3[0] = SASyncSyncTypeContactsValue;
  v3[1] = SASyncSyncTypeAppInfoValue;
  v4[0] = @"com.apple.contact.people";
  v4[1] = @"com.apple.siri.applications";
  _DWORD v3[2] = SASyncSyncTypeAppCustomVocabValue;
  v4[2] = @"com.apple.siri.vocabularyupdates";
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL));
  id v2 = (void *)qword_100577E30;
  qword_100577E30 = v1;
}

void sub_10010D85C(id a1)
{
  v3[0] = SASyncSyncTypeContactsValue;
  v3[1] = SASyncSyncTypeAppInfoValue;
  _DWORD v3[2] = SASyncSyncTypeAppCustomVocabValue;
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v3, 3LL));
  id v2 = (void *)qword_100577E20;
  qword_100577E20 = v1;
}

id sub_10010D8F4(uint64_t a1)
{
  id v2 = SADataSharingOptInStatusUnknownValue;
  if ((unint64_t)(a1 - 1) <= 2)
  {
    id v3 = *(id *)*(&off_1004F1B50 + a1 - 1);

    id v2 = v3;
  }

  return v2;
}

void sub_10010E290( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10010E528( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

uint64_t sub_10010EEBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_10010EED0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10010EED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    int v9 = 136315650;
    __int128 v10 = "-[ADDeviceContextConnection getLocalDeviceContextWithReply:]_block_invoke";
    __int16 v11 = 2048;
    id v12 = WeakRetained;
    __int16 v13 = 2112;
    __int16 v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s %p localDeviceContext = %@",  (uint8_t *)&v9,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, id))(v8 + 16))(v8, v3);
  }
}

void sub_10010EFFC(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  if (v1[33])
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(a1 + 40);
      uint64_t v5 = v3;
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
      *(_DWORD *)__int128 buf = 136315650;
      id v12 = "-[ADDeviceContextConnection updateLocalDeviceContext:]_block_invoke";
      __int16 v13 = 2048;
      __int16 v14 = v1;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %p localDeviceContext = %@", buf, 0x20u);

      uint64_t v1 = *(_BYTE **)(a1 + 32);
    }

    objc_initWeak((id *)buf, v1);
    uint64_t v7 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_10010F19C;
    v9[3] = &unk_1004F3870;
    objc_copyWeak(&v10, (id *)buf);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _remoteServiceDelegateWithErrorHandler:v9]);
    [v8 updateLocalDeviceContext:*(void *)(a1 + 40)];

    objc_destroyWeak(&v10);
    objc_destroyWeak((id *)buf);
  }

void sub_10010F178( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10010F19C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = v4;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v7 = 136315650;
    uint64_t v8 = "-[ADDeviceContextConnection updateLocalDeviceContext:]_block_invoke";
    __int16 v9 = 2048;
    id v10 = WeakRetained;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s %p error = %@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_10010F294(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleXPCConnectionInvalidation];
}

void sub_10010F2C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleXPCConnectionInterruption];
}

void sub_1001100DC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _locationManager]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 location]);

  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315395;
      __int128 v26 = "-[ADPeerLocationRemote _getBestLocationWithCompletion:]_block_invoke";
      __int16 v27 = 2113;
      __int128 v28 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Sending unsolicited location: %{private}@",  buf,  0x16u);
    }

    uint64_t v5 = objc_alloc_init(&OBJC_CLASS____ADPBLocationSetPeerLocationRequest);
    -[_ADPBLocationSetPeerLocationRequest ad_setLocation:](v5, "ad_setLocation:", v3);
    [*(id *)(*(void *)(a1 + 32) + 16) sendRequest:v5 fireAndForget:1];
  }

  [*(id *)(a1 + 32) _startBestLocationTimer];
  unsigned __int8 v6 = [*(id *)(a1 + 32) _hasActiveBestLocationRequest];
  id v7 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 40LL));
  uint64_t v19 = _NSConcreteStackBlock;
  uint64_t v20 = 3221225472LL;
  int v21 = sub_10011033C;
  uint64_t v22 = &unk_1004F1B98;
  id v8 = v7;
  id v23 = v8;
  id v24 = *(id *)(a1 + 40);
  __int16 v9 = objc_retainBlock(&v19);
  uint64_t v10 = *(void *)(a1 + 32);
  __int16 v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  id v12 = *(void **)(a1 + 32);
  if ((v6 & 1) == 0 && !v12[6])
  {
    __int16 v13 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v26 = "-[ADPeerLocationRemote _getBestLocationWithCompletion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s ADPeerLocationRemote: looking up best location on behalf of peer",  buf,  0xCu);
    }

    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommandCenter sharedCommandCenter]( &OBJC_CLASS___ADCommandCenter,  "sharedCommandCenter",  v19,  v20,  v21,  v22,  v23));
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 _locationManager]);

    uint64_t v16 = objc_claimAutoreleasedReturnValue([v15 createLocationInUseAssertion]);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 48);
    *(void *)(v17 + 4_Block_object_dispose(va, 8) = v16;

    id v12 = *(void **)(a1 + 32);
  }

  objc_msgSend(v12, "_startUpdatingLocation", v19, v20, v21, v22);
}

void sub_10011033C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v8, v5);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1001103AC(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADPeerLocationRemote _startBestLocationTimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s ADPeerLocationRemote best location timer firing",  (uint8_t *)&v6,  0xCu);
  }

  [*(id *)(a1 + 32) _cancelBestLocationTimer];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _locationManager]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 location]);

  id v5 = *(void **)(a1 + 32);
  if (v4) {
    [v5 _executeBestLocationCompletionWithLocation:v4];
  }
  else {
    [v5 _executeBestLocationCompletionWithLocationErrorWithCode:101];
  }
}

id sub_100111358()
{
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  unint64_t v0 = (void *)qword_100577E48;
  uint64_t v7 = qword_100577E48;
  if (!qword_100577E48)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_10011140C;
    void v3[3] = &unk_1004FDB20;
    void v3[4] = &v4;
    sub_10011140C((uint64_t)v3);
    unint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001113F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10011140C(uint64_t a1)
{
  if (!qword_100577E40)
  {
    __int128 v3 = off_1004F1BB8;
    uint64_t v4 = 0LL;
    qword_100577E40 = _sl_dlopen(&v3, 0LL);
  }

  Class result = objc_getClass("USTAgentConnection");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  qword_100577E48 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_1001114C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001114D0(uint64_t a1)
{
}

void sub_1001114D8(uint64_t a1, void *a2)
{
  id v8 = a2;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL))
  {
    __int128 v3 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  *(void *)(a1 + 40));
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  uint64_t v6 = AFGradingOptInStateChangeWithHistoryEntry();
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v7];
}

void sub_100111A6C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    id v7 = v9;
    if (v9)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
      [v8 handleCloudKitError:v9 forZone:@"com.apple.assistant.account.status" mirror:1 operationType:2];

      id v7 = v9;
      uint64_t v6 = *(void *)(a1 + 32);
    }

    (*(void (**)(uint64_t, BOOL))(v6 + 16))(v6, v7 == 0LL);
  }
}

LABEL_93:
          PBReaderRecallMark(a3, v74);
LABEL_94:

LABEL_126:
          if (*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) >= *(void *)((char *)a3
                                                                                    + OBJC_IVAR___PBDataReader__length))
            goto LABEL_127;
          break;
        case 0x1Du:
          __int16 v69 = PBReaderReadString(a3);
          uint64_t v20 = objc_claimAutoreleasedReturnValue(v69);
          int v21 = 24LL;
LABEL_96:
          id v70 = *(void **)&self->PBRequest_opaque[v21];
          *(void *)&self->PBRequest_opaque[v21] = v20;

          goto LABEL_126;
        default:
          uint64_t v18 = PBReaderSkipValueWithTag(a3);
          if (!v18) {
            return v18;
          }
          goto LABEL_126;
      }
    }
  }

LABEL_127:
  LOBYTE(v1_Block_object_dispose(va, 8) = *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) == 0;
  return v18;
}

LABEL_99:
    __int16 v27 = 0;
    goto LABEL_100;
  }

  if ((*((_BYTE *)v4 + 176) & 0x10) != 0) {
    goto LABEL_99;
  }
LABEL_93:
  userAssigneduint64_t Name = self->_userAssignedName;
  if ((unint64_t)userAssignedName | *((void *)v4 + 18)
    && !-[NSString isEqual:](userAssignedName, "isEqual:"))
  {
    goto LABEL_99;
  }

  utsRequiredRequestData = self->_utsRequiredRequestData;
  if ((unint64_t)utsRequiredRequestData | *((void *)v4 + 20))
  {
    if (!-[_ADPBDeviceStringKeyValueDictionary isEqual:](utsRequiredRequestData, "isEqual:")) {
      goto LABEL_99;
    }
  }

  dataSharingOptInStatus = self->_dataSharingOptInStatus;
  else {
    __int16 v27 = 1;
  }
LABEL_100:

  return v27;
}

void sub_100115448(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setIncludesFamily:v3];
  [v4 setIncludesHome:a1[5]];
  [v4 setIncludesRemoraDevices:a1[6]];
}

id sub_100115A08(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 32) locationPeerDidChange];
}

void sub_100115A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100115A94;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100115A94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  [WeakRetained peerLocationConnection:*(void *)(a1 + 32) didReceiveUnsolicitedLocation:*(void *)(a1 + 40)];
}

void sub_100115AE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  [WeakRetained peerLocationConnectionSuggestsClearingCachedLocation:*(void *)(a1 + 32)];
}

void sub_100115B20(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____ADPBLocationGetPeerLocationRequest);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS____ADPBLocationSetPeerLocationRequest);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100115BD0;
  v6[3] = &unk_1004F1C48;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v3 sendRequest:v2 responseClass:v4 completion:v6];
}

void sub_100115BD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100115C8C;
  v12[3] = &unk_1004FDA30;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v6;
  id v16 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_100115C8C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(id *)(*(void *)(a1 + 40) + 32LL);
    id v3 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    _DWORD v7[2] = sub_100115DE4;
    v7[3] = &unk_1004F1C20;
    id v8 = v2;
    id v9 = *(id *)(a1 + 56);
    id v4 = v2;
    objc_msgSend(v3, "_ad_performForPeerLocationWithCompletion:", v7);
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 136315394;
      id v11 = "-[ADPeerLocationConnection getBestLocationWithCompletion:]_block_invoke_3";
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Unable to get best location from peer: %{public}@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_100115DE4(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) locationDataWasRecievedFromPeer];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
  }
}

void sub_100116CE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_100116EC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100116ED0(uint64_t a1)
{
}

void sub_100116ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100117058;
  block[3] = &unk_1004F1E20;
  id v10 = v3;
  uint64_t v11 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v6 = (id)v8;
  __int128 v12 = v8;
  id v7 = v3;
  dispatch_async(v5, block);
}

id sub_100116F84(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) invokeWithValue:a2];
}

id sub_100116F90(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[ADtvOSAssistantProperties _getMultiUserSetupStatusWithCompletion:]_block_invoke_2";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Timed out", (uint8_t *)&v4, 0xCu);
  }

  AnalyticsSendEvent(@"com.apple.siri.DeviceProperties.MultiUserMetricsFetchTimeout", 0LL);
  return [*(id *)(a1 + 32) invokeWithValue:0];
}

void sub_100117058(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v2)
  {
    [v2 cancel];
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
    int v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      id v10 = "-[ADtvOSAssistantProperties _getMultiUserSetupStatusWithCompletion:]_block_invoke_2";
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s Retrieved", (uint8_t *)&v9, 0xCu);
      uint64_t v5 = *(void *)(a1 + 32);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _getODDMultiUserSetupStatusFrom:v5]);
  }

  else
  {
    id v7 = 0LL;
  }

  uint64_t v8 = *(void *)(a1 + 48);
  if (v8) {
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);
  }
}

uint64_t sub_100117174(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001171B8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001171E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100117200(uint64_t a1, uint64_t a2)
{
}

void sub_10011722C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100117258(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_100117274(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100117C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_100118D78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100118FD8(uint64_t a1)
{
  id v6 = 0LL;
  if (!qword_100577E58)
  {
    __int128 v7 = off_1004F1D30;
    uint64_t v8 = 0LL;
    qword_100577E58 = _sl_dlopen(&v7, &v6);
  }

  if (!qword_100577E58)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *GenerativeModelsLibrary(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"ADAssistantProperties.m",  40,  @"%s",  v6);

    goto LABEL_10;
  }

  if (v6) {
    free(v6);
  }
  Class result = objc_getClass("GMAvailabilityWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getGMAvailabilityWrapperClass(void)_block_invoke"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v5,  @"ADAssistantProperties.m",  41,  @"Unable to find class %s",  "GMAvailabilityWrapper");

LABEL_10:
    __break(1u);
  }

  qword_100577E50 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

id sub_10011A228()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  unint64_t v0 = (void *)qword_100577E60;
  uint64_t v7 = qword_100577E60;
  if (!qword_100577E60)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_10011A2DC;
    void v3[3] = &unk_1004FDB20;
    void v3[4] = &v4;
    sub_10011A2DC((uint64_t)v3);
    unint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10011A2C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_10011A2DC(uint64_t a1)
{
  if (!qword_100577E68)
  {
    __int128 v3 = off_1004F1DB0;
    uint64_t v4 = 0LL;
    qword_100577E68 = _sl_dlopen(&v3, 0LL);
  }

  Class result = objc_getClass("UNNotificationSettingsCenter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  qword_100577E60 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

BOOL sub_10011A390(id a1, PKSecureElementPass *a2, unint64_t a3, BOOL *a4)
{
  return -[PKSecureElementPass isCarKeyPass](a2, "isCarKeyPass", a3, a4);
}

uint64_t sub_10011A398(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011A3DC(uint64_t a1, uint64_t a2)
{
}

void sub_10011A408(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10011A434(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011B1EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_10011B310(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011B320(uint64_t a1)
{
}

void sub_10011B328(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10011B4A8;
  block[3] = &unk_1004FAFF0;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  __int128 v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);
}

id sub_10011B3D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) invokeWithValue:a2];
}

id sub_10011B3E0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[ADGeneralProperties _getStoreFrontIdWithCompletion:]_block_invoke_2";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Timed out", (uint8_t *)&v4, 0xCu);
  }

  AnalyticsSendEvent(@"com.apple.siri.DeviceProperties.StoreFrontIdTimeout", 0LL);
  return [*(id *)(a1 + 32) invokeWithValue:0];
}

uint64_t sub_10011B4A8(void *a1)
{
  id v2 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  if (v2)
  {
    [v2 cancel];
    uint64_t v3 = *(void *)(a1[6] + 8LL);
    int v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

  id v5 = (void *)a1[4];
  if (v5)
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315138;
      id v9 = "-[ADGeneralProperties _getStoreFrontIdWithCompletion:]_block_invoke_2";
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s Retrieved", (uint8_t *)&v8, 0xCu);
      id v5 = (void *)a1[4];
    }

    [v5 intValue];
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

uint64_t sub_10011B5B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10011C84C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10011C890(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011C8D4(uint64_t a1, uint64_t a2)
{
}

void sub_10011C900(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10011C92C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10011C948(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10011C98C(uint64_t a1, uint64_t a2)
{
}

void sub_10011C9B8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10011C9E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10011CA00(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011CA40(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[ADDeviceProperties _populateEventMetadataForClientEvent:withCompletion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Retrieving", (uint8_t *)&buf, 0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v23 = 0x3032000000LL;
  id v24 = sub_10011CCBC;
  id v25 = sub_10011CCCC;
  id v26 = 0LL;
  id v3 = objc_alloc(&OBJC_CLASS___AFOneArgumentSafetyBlock);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_10011CCD4;
  v18[3] = &unk_1004F1E48;
  int v4 = *(void **)(a1 + 40);
  void v18[4] = *(void *)(a1 + 32);
  p___int128 buf = &buf;
  id v19 = v4;
  id v20 = *(id *)(a1 + 48);
  id v5 = [v3 initWithBlock:v18];
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[ADAnalyticsIdentifiersProvider sharedInstance]( &OBJC_CLASS___ADAnalyticsIdentifiersProvider,  "sharedInstance"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10011CD8C;
  v16[3] = &unk_1004F1E70;
  id v7 = v5;
  id v17 = v7;
  [v6 fetchDeviceAggregationIdWithCallback:v16];

  int v8 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 8);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10011CD98;
  void v14[3] = &unk_1004FD968;
  void v14[4] = v9;
  id v11 = v7;
  id v15 = v11;
  __int128 v12 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v8,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v10,  v14,  10.0);
  uint64_t v13 = *(void **)(*((void *)&buf + 1) + 40LL);
  *(void *)(*((void *)&buf + 1) + 40LL) = v12;

  [*(id *)(*((void *)&buf + 1) + 40) start];
  _Block_object_dispose(&buf, 8);
}

void sub_10011CC9C(_Unwind_Exception *a1)
{
}

uint64_t sub_10011CCBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10011CCCC(uint64_t a1)
{
}

void sub_10011CCD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_10011CE58;
  v7[3] = &unk_1004F1E20;
  uint64_t v11 = *(void *)(a1 + 56);
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_10011CD8C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) invokeWithValue:a2];
}

id sub_10011CD98(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[ADDeviceProperties _populateEventMetadataForClientEvent:withCompletion:]_block_invoke_2";
    _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s Timed out", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(a1 + 32) _triggerReportingForNullDeviceAggregationId];
  return [*(id *)(a1 + 40) invokeWithValue:0];
}

uint64_t sub_10011CE58(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v2)
  {
    [v2 cancel];
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
    int v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0LL;
  }

  if (*(void *)(a1 + 32))
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315138;
      id v10 = "-[ADDeviceProperties _populateEventMetadataForClientEvent:withCompletion:]_block_invoke_2";
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Retrieved", (uint8_t *)&v9, 0xCu);
    }

    id v6 = objc_alloc_init(&OBJC_CLASS___ODDSiriSchemaODDClientEventMetadata);
    id v7 = [[SISchemaUUID alloc] initWithNSUUID:*(void *)(a1 + 32)];
    [v6 setDeviceAggregationId:v7];

    [*(id *)(a1 + 40) setEventMetadata:v6];
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10011CF94(uint64_t a1)
{
}

void sub_10011CF9C(uint64_t a1)
{
}

void sub_10011DB0C(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _peerConnection]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10011DC2C;
  v5[3] = &unk_1004FD9E0;
  int8x16_t v4 = *((int8x16_t *)a1 + 2);
  id v3 = (id)v4.i64[0];
  int8x16_t v6 = vextq_s8(v4, v4, 8uLL);
  id v7 = a1[6];
  [v2 getAWDMetrics:v3 completion:v5];
}

void sub_10011DBD4(id a1, NSDictionary *a2)
{
  id v3 = a2;
  if (-[NSDictionary count](v3, "count"))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v2 logEventWithType:4201 context:v3];
  }
}

void sub_10011DC2C(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _peerConnection]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10011DCC4;
  void v3[3] = &unk_1004F1FB0;
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 getRemoteMetrics:v3];
}

uint64_t sub_10011DCC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10011DCF4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  int8x16_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_10011DDA8;
  v10[3] = &unk_1004F1F60;
  int v14 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = v8;
  id v9 = v5;
  dispatch_async(v6, v10);
}

void sub_10011DDA8(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = (os_log_s *)AFSiriLogContextProxy;
  if (os_log_type_enabled(AFSiriLogContextProxy, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(a1 + 56);
    int v10 = 136315650;
    id v11 = "-[ADPeerConnectionProvider _getNWConnectionWithInitialData:completion:]_block_invoke_2";
    __int16 v12 = 1024;
    int v13 = v4;
    __int16 v14 = 2112;
    id v15 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %d %@", (uint8_t *)&v10, 0x1Cu);
  }

  if (!v2)
  {
    int8x16_t v6 = (os_log_s *)AFSiriLogContextProxy;
    if (os_log_type_enabled(AFSiriLogContextProxy, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      id v11 = "-[ADPeerConnectionProvider _getNWConnectionWithInitialData:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Connection closed before opening",  (uint8_t *)&v10,  0xCu);
    }

    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SiriCoreSiriConnectionErrorDomain,  17LL,  0LL));
    if (!v2)
    {
LABEL_11:
      id v5 = (int *)(a1 + 56);
      if (*(_DWORD *)(a1 + 56) != -1) {
        goto LABEL_12;
      }
      id v9 = (os_log_s *)AFSiriLogContextProxy;
      if (os_log_type_enabled(AFSiriLogContextProxy, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        id v11 = "-[ADPeerConnectionProvider _getNWConnectionWithInitialData:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Got an invalid socket",  (uint8_t *)&v10,  0xCu);
      }

      id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SiriCoreSiriConnectionErrorDomain,  28LL,  0LL));
    }
  }

  id v5 = (int *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56) == -1)
  {
LABEL_16:
    uint64_t v7 = 0LL;
    goto LABEL_17;
  }

  if (v2)
  {
LABEL_13:
    id v8 = (os_log_s *)AFSiriLogContextProxy;
    if (os_log_type_enabled(AFSiriLogContextProxy, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      id v11 = "-[ADPeerConnectionProvider _getNWConnectionWithInitialData:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Closing valid socket due to other error before setup complete",  (uint8_t *)&v10,  0xCu);
    }

    close(*v5);
    goto LABEL_16;
  }

id sub_10011EC48(uint64_t a1)
{
  return [*(id *)(a1 + 32) retryForTypeOnRetryManagerQueue:*(void *)(a1 + 56) zoneInfo:*(void *)(a1 + 40) error:*(void *)(a1 + 48) retryAfterInterval:0.0];
}

void sub_10011EC5C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10011F024;
  void v3[3] = &unk_1004FB0E0;
  id v4 = *(id *)(a1 + 40);
  [v2 synchronizeWithCompletion:v3];
}

void sub_10011ECEC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
  id v3 = [v2 dataStoreIsOnSharedDatabase];

  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADCloudKitRetryManager retryForTypeOnRetryManagerQueue:zoneInfo:error:retryAfterInterval:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Fetch timer fired", (uint8_t *)&v6, 0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v5 _fetchChangesWithZoneInfo:*(void *)(a1 + 40) useSharedDatabase:v3];
}

void sub_10011EDE8(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCloudKitRetryManager retryForTypeOnRetryManagerQueue:zoneInfo:error:retryAfterInterval:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Zone creation timer fired",  (uint8_t *)&v4,  0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v3 _setUpMirroredZoneWithZoneInfo:*(void *)(a1 + 40)];
}

void sub_10011EEBC(uint64_t a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315138;
    int v4 = "-[ADCloudKitRetryManager retryForTypeOnRetryManagerQueue:zoneInfo:error:retryAfterInterval:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Zone share creation timer fired",  (uint8_t *)&v3,  0xCu);
  }

  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  [v2 restartSharing];
}

void sub_10011EF88(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v1 _setupSharedZoneUpdaterForOwner];
}

void sub_10011EFBC(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v1 retryShareDeletionOperation];
}

void sub_10011EFF0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v1 continueShareAcceptanceOperations];
}

void sub_10011F024(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) setRetryState:0];
  }
  int v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "-[ADCloudKitRetryManager retryForTypeOnRetryManagerQueue:zoneInfo:error:retryAfterInterval:]_block_invoke_2";
    __int16 v6 = 1024;
    int v7 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Finished synchronization with success (%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_10011F20C(id a1)
{
  id v1 = (void *)qword_100577E78;
  qword_100577E78 = (uint64_t)&off_100513A20;
}

uint64_t sub_10011F528()
{
  unint64_t v0 = sub_10011F574();
  id v1 = (uint64_t (*)())dlsym(v0, "BYSetupAssistantNeedsToRun");
  off_100573360 = v1;
  if (!v1) {
    __assert_rtn("initBYSetupAssistantNeedsToRun", "ADBuddyMonitor.m", 22, "softLinkBYSetupAssistantNeedsToRun");
  }
  return v1();
}

void *sub_10011F574()
{
  uint64_t result = (void *)qword_100577EB8;
  if (!qword_100577EB8)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
    qword_100577EB8 = (uint64_t)result;
    if (!result) {
      __assert_rtn("SetupAssistantLibrary", "ADBuddyMonitor.m", 21, "frameworkLibrary");
    }
  }

  return result;
}

void sub_10011F5D0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _checkBuddyState];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v3 + 8) != v2)
  {
    unsigned int v4 = v2;
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v6 = @"running";
      if (v4) {
        __int16 v6 = @"complete";
      }
      int v8 = 136315394;
      id v9 = "-[ADBuddyMonitor _updateBuddyState]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Buddy is now %@", (uint8_t *)&v8, 0x16u);
      uint64_t v3 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v3 + _Block_object_dispose((const void *)(v1 - 128), 8) = v4;
    int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v7 postNotificationName:@"ADBuddyStateDidChangeNotification" object:0];
  }

id sub_10011F6F0()
{
  if (qword_100577EA0 != -1) {
    dispatch_once(&qword_100577EA0, &stru_1004F20C8);
  }
  return (id)qword_100577E98;
}

id sub_10011F730()
{
  return (id)qword_100577E98;
}

id sub_10011F73C()
{
  return (id)qword_100577E90;
}

id sub_10011F748()
{
  if (qword_100577EB0 != -1) {
    dispatch_once(&qword_100577EB0, &stru_1004F20E8);
  }
  return (id)qword_100577E90;
}

void sub_10011F788(id a1)
{
  id v1 = sub_10011F574();
  unsigned int v2 = (id *)dlsym(v1, "BYSetupAssistantFinishedDarwinNotification");
  if (!v2) {
    __assert_rtn("initBYSetupAssistantFinishedDarwinNotification_block_invoke", "ADBuddyMonitor.m", 23, "constant");
  }
  objc_storeStrong((id *)&qword_100577E90, *v2);
  off_100573358 = sub_10011F73C;
}

void sub_10011F7EC(id a1)
{
  id v1 = (void *)qword_100577EA8;
  if (!qword_100577EA8)
  {
    id v1 = dlopen("/System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag", 2);
    qword_100577EA8 = (uint64_t)v1;
    if (!v1) {
      __assert_rtn("MobileKeyBagLibrary", "ADBuddyMonitor.m", 28, "frameworkLibrary");
    }
  }

  unsigned int v2 = (id *)dlsym(v1, "kMobileKeyBagLockStatusNotification");
  if (!v2) {
    __assert_rtn("initkMobileKeyBagLockStatusNotification_block_invoke", "ADBuddyMonitor.m", 29, "constant");
  }
  objc_storeStrong((id *)&qword_100577E98, *v2);
  off_100573350 = sub_10011F730;
}

void sub_10011F898(uint64_t a1, void *a2)
{
  id v2 = a2;
  [v2 _updateBuddyState];
  dispatch_time_t v3 = dispatch_time(0LL, 5000000000LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10011F934;
  block[3] = &unk_1004FD940;
  id v6 = v2;
  id v4 = v2;
  dispatch_after(v3, &_dispatch_main_q, block);
}

id sub_10011F934(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateBuddyState];
}

void sub_10011F9B0(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100577E88;
  qword_100577E88 = (uint64_t)v1;
}

void sub_100120A64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32) == 1LL)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6LL));
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v7);
    }
  }

  else
  {
    id v4 = *(void **)(v2 + 48);
    int v5 = *(unsigned __int8 *)(a1 + 64);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100120B5C;
    v8[3] = &unk_1004F2138;
    void v8[4] = v2;
    id v6 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    sub_1002FE818(v6, v4, v5, v8);
  }

void sub_100120B5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100120C30;
  block[3] = &unk_1004FCBB0;
  id v15 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v9;
  uint64_t v17 = v10;
  id v11 = *(id *)(a1 + 48);
  id v18 = v6;
  id v19 = v11;
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v8, block);
}

void sub_100120C30(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v13 = *(void **)(a1 + 40);
      __int16 v14 = v3;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 zone]);
      int v16 = 136315650;
      uint64_t v17 = "-[ADCloudKitMirroredContainer resynchronizeMirroredZone:completion:]_block_invoke_3";
      __int16 v18 = 2112;
      id v19 = v2;
      __int16 v20 = 2112;
      int v21 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Encountered error (%@) for zone (%@)",  (uint8_t *)&v16,  0x20u);

      uint64_t v2 = *(void **)(a1 + 32);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 40LL), v2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
    [v4 handleCloudKitError:v5 forZone:v6 mirror:1 operationType:3];

    uint64_t v7 = *(void *)(a1 + 64);
    if (v7)
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  6LL,  @"zone creation failure",  *(void *)(a1 + 32)));
      (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v9 = *(void **)(a1 + 56);
      int v16 = 136315394;
      uint64_t v17 = "-[ADCloudKitMirroredContainer resynchronizeMirroredZone:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_INFO,  "%s Successfully created zone (%@)",  (uint8_t *)&v16,  0x16u);
    }

    uint64_t v10 = *(void **)(a1 + 56);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zone]);
    LOBYTE(v10) = [v10 isEqual:v11];

    uint64_t v12 = *(void *)(a1 + 64);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0LL);
    }
  }

void sub_100120E64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  void v13[2] = sub_100120F28;
  v13[3] = &unk_1004FD470;
  id v14 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v15 = v9;
  uint64_t v16 = v10;
  id v17 = v6;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, v13);
}

void sub_100120F28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void **)(a1 + 40);
      int v8 = v3;
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 zone]);
      int v10 = 136315650;
      id v11 = "-[ADCloudKitMirroredContainer _createRecordZone:shared:]_block_invoke_2";
      __int16 v12 = 2112;
      id v13 = v2;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Encountered error (%@) for zone (%@)",  (uint8_t *)&v10,  0x20u);

      uint64_t v2 = *(void **)(a1 + 32);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 48) + 40LL), v2);
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = *(void **)(a1 + 56);
    int v10 = 136315394;
    id v11 = "-[ADCloudKitMirroredContainer _createRecordZone:shared:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_INFO,  "%s Successfully created zone (%@)",  (uint8_t *)&v10,  0x16u);
  }

  id v5 = *(void **)(a1 + 56);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zone]);
  LOBYTE(v5) = [v5 isEqual:v6];

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 16LL));
}

void sub_1001210D0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v16 = "-[ADCloudKitMirroredContainer createMirroredZonesWithCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 32);
  if (v4 < 1)
  {
    *(void *)(v3 + 32) = 1LL;
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0LL;

    [*(id *)(a1 + 32) _createRecordZone:*(void *)(*(void *)(a1 + 32) + 56) shared:0];
    [*(id *)(a1 + 32) _createRecordZone:*(void *)(*(void *)(a1 + 32) + 64) shared:0];
    [*(id *)(a1 + 32) _createRecordZone:*(void *)(*(void *)(a1 + 32) + 72) shared:1];
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = *(void **)(a1 + 40);
    __int16 v12 = *(dispatch_queue_s **)(v9 + 8);
    id v11 = *(dispatch_group_s **)(v9 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1001212A8;
    v13[3] = &unk_1004FD990;
    void v13[4] = v9;
    id v14 = v10;
    dispatch_group_notify(v11, v12, v13);
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v16 = "-[ADCloudKitMirroredContainer createMirroredZonesWithCompletion:]_block_invoke";
      __int16 v17 = 2048;
      uint64_t v18 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Calling mirrored zone creation again (%ld)",  buf,  0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

void sub_1001212A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 136315394;
      id v15 = "-[ADCloudKitMirroredContainer createMirroredZonesWithCompletion:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Retrying zone creation due to error (%@)",  (uint8_t *)&v14,  0x16u);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    *(void *)(v2 + 32) = 0LL;
    id v5 = *(id *)(*(void *)(a1 + 32) + 40LL);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) zoneName]);
    [v6 handleCloudKitError:v5 forZone:v7 mirror:1 operationType:3];

    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) zoneName]);
    [v8 handleCloudKitError:v5 forZone:v9 mirror:1 operationType:3];

    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) zoneName]);
    [v10 handleCloudKitError:v5 forZone:v11 mirror:1 operationType:3];

    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, *(void *)(*(void *)(a1 + 32) + 40LL));
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v14 = 136315138;
      id v15 = "-[ADCloudKitMirroredContainer createMirroredZonesWithCompletion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Zone setup complete", (uint8_t *)&v14, 0xCu);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    *(void *)(v2 + 32) = 2LL;
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0LL);
    }
  }

uint64_t sub_100121C3C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(String);
      uint64_t v15 = 24LL;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v20 |= (unint64_t)(v22 & 0x7F) << v18;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v18 += 7;
          BOOL v9 = v19++ >= 9;
          if (v9)
          {
            LODWORD(v20) = 0;
            goto LABEL_35;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v20) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 128), 8) = v20;
        continue;
      }

      if ((_DWORD)v12 != 1)
      {
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
      }

      uint64_t v13 = PBReaderReadString(a2);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
      uint64_t v15 = 16LL;
    }

    uint64_t v17 = *(void **)(a1 + v15);
    *(void *)(a1 + v15) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10012200C(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  xpc_type_t type = xpc_get_type(v2);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    unint64_t v7 = (void *)xpc_connection_copy_entitlement_value(v2, AFExternalRequestEntitlement);
    id v8 = v7;
    if (v7 && xpc_BOOL_get_value(v7))
    {
      BOOL v9 = v2;
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      xpc_connection_set_target_queue(v9, v11);

      *(void *)uint64_t v14 = _NSConcreteStackBlock;
      *(void *)&v14[8] = 3221225472LL;
      *(void *)&v14[16] = sub_100122278;
      uint64_t v15 = &unk_1004FA030;
      __int16 v16 = v9;
      unint64_t v12 = v9;
      xpc_connection_set_event_handler(v12, v14);
      xpc_connection_resume(v12);
    }

    else
    {
      uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v14 = 136315138;
        *(void *)&void v14[4] = "-[ADExternalRequestListener listen]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s External Request connection missing entitlement",  v14,  0xCu);
      }

      xpc_connection_cancel(v2);
    }

void sub_100122278(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64_t int64 = xpc_dictionary_get_int64(v3, AFExternalRequestMessageKeyType);
    switch(int64)
    {
      case 1LL:
        if (!v3) {
          goto LABEL_153;
        }
        id v10 = v3;
        xpc_object_t reply = (AFRequestInfo *)xpc_dictionary_create_reply(v10);
        int64_t v12 = xpc_dictionary_get_int64(v10, AFExternalRequestMessageKeyAction);

        if (v12 == 1)
        {
          uint64_t v13 = (id *)&SAStartDirectActionRequestAceDirectActionACOUSTIC_ID_INITIATEValue;
        }

        else
        {
          if (v12 != 2)
          {
LABEL_123:
            if (!reply) {
              goto LABEL_152;
            }
            xpc_dictionary_set_BOOL(reply, AFExternalRequestReplyKeyResult, 0);
            xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(reply);
            int v150 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
            char v18 = (NSData *)v150;
            if (v150) {
              xpc_connection_send_message(v150, reply);
            }
            goto LABEL_151;
          }

          uint64_t v13 = (id *)&SAStartDirectActionRequestAceDirectActionMUSIC_SMART_PLAY_INITIATEValue;
        }

        int v148 = (NSData *)*v13;
        if (v148)
        {
          char v18 = v148;
          unsigned int v19 = objc_alloc_init(&OBJC_CLASS___AFRequestInfo);
          -[AFRequestInfo setLegacyDirectActionIdentifier:](v19, "setLegacyDirectActionIdentifier:", v18);
          -[AFRequestInfo setActivationEvent:](v19, "setActivationEvent:", 7LL);
          __int16 v102 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_100124058;
          int v177 = &unk_1004FAE50;
          unsigned int v178 = reply;
          [v102 handleExternalActivationRequest:v19 completion:buf];
          goto LABEL_122;
        }

        goto LABEL_123;
      case 2LL:
        if (!v3) {
          goto LABEL_153;
        }
        id v17 = v3;
        xpc_object_t reply = (AFRequestInfo *)xpc_dictionary_create_reply(v17);
        id v174 = 0LL;
        id v170 = 0LL;
        id v171 = 0LL;
        sub_1001240C8(v17, &v174, &v171, (uint64_t *)v172, (int64_t *)&v175, &v170);

        char v18 = (NSData *)v174;
        unsigned int v19 = (AFRequestInfo *)v171;
        uint64_t v20 = (NSKeyedUnarchiver *)v170;
        if (v18)
        {
          if (-[AFRequestInfo length](v19, "length"))
          {
            if (v172[0] == (id)1)
            {
              unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[AFHeadphonesAnnouncementRequestCapabilityProvider provider]( &OBJC_CLASS___ADHeadphonesAnnouncementRequestCapabilityProvider,  "provider"));
              char v22 = (void *)objc_claimAutoreleasedReturnValue([v21 currentAnnouncementRoute]);
              id v23 = [v22 announcePlatformForRoute];
              v172[0] = v23;
              id v24 = (void *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v167 = v24;
                uint64_t Name = AFSiriAnnouncementPlatformGetName(v23);
                int v169 = (void *)objc_claimAutoreleasedReturnValue(Name);
                *(_DWORD *)__int128 buf = 136315394;
                *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestNotification";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v169;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEBUG,  "%s Selecting announcement platform: %@ for current route",  buf,  0x16u);
              }
            }

            id v25 = objc_alloc(&OBJC_CLASS___ADAnnounceNotificationRequest);
            id v26 = v172[0];
            id v27 = v175;
            *(void *)__int128 buf = _NSConcreteStackBlock;
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = sub_10012442C;
            int v177 = &unk_1004FB0E0;
            unsigned int v178 = reply;
            __int128 v28 = -[ADAnnounceNotificationRequest initWithNotification:appID:platform:summaryDecision:summary:completion:]( v25,  "initWithNotification:appID:platform:summaryDecision:summary:completion:",  v18,  v19,  v26,  v27,  v20,  buf);
            __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
            [v29 handleAnnouncementRequest:v28];

            goto LABEL_71;
          }

          unsigned int v143 = (os_log_s *)AFSiriLogContextDaemon;
          if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
            goto LABEL_149;
          }
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestNotification";
          int v144 = "%s non-valid sourceAppID from XPC message.";
        }

        else
        {
          unsigned int v143 = (os_log_s *)AFSiriLogContextDaemon;
          if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
            goto LABEL_149;
          }
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestNotification";
          int v144 = "%s non-valid notification from XPC message.";
        }

        goto LABEL_148;
      case 3LL:
        if (v3)
        {
          id v30 = v3;
          uint64_t v31 = (AFRequestInfo *)xpc_dictionary_create_reply(v30);
          int64_t v32 = xpc_dictionary_get_int64(v30, AFExternalRequestMessageKeyLocalRequest);

          BOOL v33 = v32 == 1;
          __int16 v34 = (void *)objc_claimAutoreleasedReturnValue( +[ADLocalRequestProvider sharedProvider]( &OBJC_CLASS___ADLocalRequestProvider,  "sharedProvider"));
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_10012449C;
          int v177 = &unk_1004F21A0;
          unsigned int v178 = v31;
          uint64_t v35 = v31;
          [v34 getLocalRequestWithType:v33 completion:buf];
        }

        goto LABEL_153;
      case 4LL:
        id v36 = (AFRequestInfo *)v3;
        xpc_object_t reply = v36;
        if (!v36) {
          goto LABEL_152;
        }
        char v18 = (NSData *)xpc_dictionary_create_reply(v36);
        xpc_object_t value = xpc_dictionary_get_value(reply, AFExternalRequestMessageKeyStartRequest);
        uint64_t v38 = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(value);
        unsigned int v19 = v38;
        if (!v38 || xpc_get_type(v38) != (xpc_type_t)&_xpc_type_data) {
          goto LABEL_38;
        }
        uint64_t v20 = v19;
        bytes_ptr = xpc_data_get_bytes_ptr(v20);
        if (!bytes_ptr) {
          goto LABEL_39;
        }
        id v40 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  bytes_ptr,  xpc_data_get_length(v20),  0LL);
        v172[0] = 0LL;
        id v41 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___SAStartRequest),  v40,  v172);
        __int128 v42 = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v41);
        id v43 = v172[0];
        if (v43)
        {
          __int128 v44 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315394;
            *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestStartRequest";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v43;
            _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "%s Archiving error %@", buf, 0x16u);
          }
        }

        if (!v42) {
          goto LABEL_39;
        }
        uint64_t uint64 = xpc_dictionary_get_uint64(reply, AFExternalRequestMessageKeyRequestOptions);
        __int128 v46 = objc_alloc_init(&OBJC_CLASS___AFRequestInfo);
        -[AFRequestInfo setStartRequest:](v46, "setStartRequest:", v42);
        -[AFRequestInfo setOptions:](v46, "setOptions:", uint64);
        -[AFRequestInfo setActivationEvent:](v46, "setActivationEvent:", 7LL);
        __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        __int128 v48 = sub_100124638;
        goto LABEL_134;
      case 5LL:
        __int128 v49 = (AFRequestInfo *)v3;
        xpc_object_t reply = v49;
        if (!v49) {
          goto LABEL_152;
        }
        char v18 = (NSData *)xpc_dictionary_create_reply(v49);
        xpc_object_t v50 = xpc_dictionary_get_value(reply, AFExternalRequestMessageKeyStartLocalRequest);
        __int16 v51 = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v50);
        unsigned int v19 = v51;
        if (v51 && xpc_get_type(v51) == (xpc_type_t)&_xpc_type_data)
        {
          uint64_t v20 = v19;
          unsigned int v151 = xpc_data_get_bytes_ptr(v20);
          if (v151)
          {
            int v152 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  v151,  xpc_data_get_length(v20),  0LL);
            v172[0] = 0LL;
            id v153 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___SAStartLocalRequest),  v152,  v172);
            __int128 v42 = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v153);
            id v154 = v172[0];
            if (v154)
            {
              unsigned int v155 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315394;
                *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestStartLocalRequest";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v154;
                _os_log_error_impl( (void *)&_mh_execute_header,  v155,  OS_LOG_TYPE_ERROR,  "%s Archiving error %@",  buf,  0x16u);
              }
            }

            if (v42)
            {
              uint64_t v156 = xpc_dictionary_get_uint64(reply, AFExternalRequestMessageKeyRequestOptions);
              __int128 v46 = objc_alloc_init(&OBJC_CLASS___AFRequestInfo);
              -[AFRequestInfo setStartLocalRequest:](v46, "setStartLocalRequest:", v42);
              -[AFRequestInfo setOptions:](v46, "setOptions:", v156);
              -[AFRequestInfo setActivationEvent:](v46, "setActivationEvent:", 7LL);
              __int128 v47 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommandCenter sharedCommandCenter]( &OBJC_CLASS___ADCommandCenter,  "sharedCommandCenter"));
              *(void *)__int128 buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472LL;
              __int128 v48 = sub_1001246A8;
LABEL_134:
              *(void *)&buf[16] = v48;
              int v177 = &unk_1004FAE50;
              unsigned int v178 = v18;
              [v47 handleExternalActivationRequest:v46 completion:buf];

              goto LABEL_91;
            }
          }
        }

        else
        {
LABEL_38:
          uint64_t v20 = 0LL;
        }

LABEL_148:
        _os_log_error_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_ERROR, v144, buf, 0xCu);
        goto LABEL_149;
      case 10LL:
        unint64_t v101 = (AFRequestInfo *)v3;
        xpc_object_t reply = v101;
        if (!v101) {
          goto LABEL_152;
        }
        char v18 = (NSData *)xpc_dictionary_create_reply(v101);
        if (!v18) {
          goto LABEL_151;
        }
        v172[0] = 0LL;
        sub_1001240C8(reply, v172, 0LL, 0LL, 0LL, 0LL);
        unsigned int v19 = (AFRequestInfo *)v172[0];
        if (v19)
        {
          __int16 v102 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_100124928;
          int v177 = &unk_1004FB0E0;
          unsigned int v178 = v18;
          [v102 withdrawalAnnouncementRequestForNotification:v19 completion:buf];
LABEL_122:
        }

        else
        {
          unsigned int v160 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315138;
            *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestNotificationWithdrawal";
            _os_log_error_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_ERROR,  "%s non-valid notification from XPC message.",  buf,  0xCu);
          }
        }

        goto LABEL_150;
      case 11LL:
        xpc_object_t reply = (AFRequestInfo *)v3;
        int8x16x4_t v103 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDropInCall";
          _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_INFO,  "%s Start handling ExternalRequestDropInCall",  buf,  0xCu);
        }

        if (!reply) {
          goto LABEL_152;
        }
        id v104 = +[SKIPhoneInvocation announceDropInCallForType:]( &OBJC_CLASS___SKIPhoneInvocation,  "announceDropInCallForType:",  xpc_dictionary_get_int64(reply, AFExternalRequestMessageKeyDropInCall));
        char v18 = (NSData *)objc_claimAutoreleasedReturnValue(v104);
        unsigned int v19 = (AFRequestInfo *)xpc_dictionary_create_reply(reply);
        if (v18)
        {
          uint64_t v20 = (NSKeyedUnarchiver *)objc_claimAutoreleasedReturnValue( +[ADCommandCenter sharedCommandCenter]( &OBJC_CLASS___ADCommandCenter,  "sharedCommandCenter"));
          __int128 v42 = objc_alloc_init(&OBJC_CLASS___AFRequestInfo);
          -[AFRequestInfo setStartLocalRequest:](v42, "setStartLocalRequest:", v18);
          -[AFRequestInfo setActivationEvent:](v42, "setActivationEvent:", 6LL);
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_100124984;
          int v177 = &unk_1004FAE50;
          unsigned int v178 = v19;
          -[NSKeyedUnarchiver handleExternalActivationRequest:completion:]( v20,  "handleExternalActivationRequest:completion:",  v42,  buf);
LABEL_90:

LABEL_91:
        }

        else
        {
          int v145 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315138;
            *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDropInCall";
            _os_log_error_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_ERROR,  "%s Couldn't get command from SKI",  buf,  0xCu);
            if (!v19) {
              goto LABEL_150;
            }
          }

          else if (!v19)
          {
            goto LABEL_150;
          }

          xpc_dictionary_set_BOOL(v19, AFExternalRequestReplyKeyResult, 0);
          xpc_connection_t v146 = xpc_dictionary_get_remote_connection(v19);
          unsigned int v147 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v146);
          uint64_t v20 = (NSKeyedUnarchiver *)v147;
          if (v147) {
            xpc_connection_send_message(v147, v19);
          }
        }

        goto LABEL_149;
      case 12LL:
        if (!v3) {
          goto LABEL_153;
        }
        id v105 = v3;
        unsigned int v106 = (AFRequestInfo *)xpc_dictionary_create_reply(v105);
        xpc_object_t v107 = xpc_dictionary_get_value(v105, AFExternalRequestMessageKeyWorkoutReminderAnnouncement);
        xpc_object_t reply = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v107);

        unsigned int v108 = objc_alloc(&OBJC_CLASS___NSData);
        int v109 = xpc_data_get_bytes_ptr(reply);
        char v18 = -[NSData initWithBytes:length:](v108, "initWithBytes:length:", v109, xpc_data_get_length(reply));
        __int128 v64 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v18,  0LL);
        id v110 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v64,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___AFSiriWorkoutReminder),  NSKeyedArchiveRootObjectKey);
        id v66 = (void *)objc_claimAutoreleasedReturnValue(v110);
        -[NSKeyedUnarchiver finishDecoding](v64, "finishDecoding");
        unsigned int v111 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315394;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestWorkoutReminderAnnouncement";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v66;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEBUG,  "%s Received request to announce %@",  buf,  0x16u);
        }

        int v112 = objc_alloc(&OBJC_CLASS___ADAnnounceWorkoutReminderRequest);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_100124B68;
        int v177 = &unk_1004FB0E0;
        unsigned int v178 = v106;
        char v68 = v106;
        __int16 v69 = -[ADAnnounceWorkoutReminderRequest initWithWorkoutReminder:completion:]( v112,  "initWithWorkoutReminder:completion:",  v66,  buf);
        id v70 = (void *)objc_claimAutoreleasedReturnValue( +[ADAnnounceDeviceSelector sharedDeviceSelector]( &OBJC_CLASS___ADAnnounceDeviceSelector,  "sharedDeviceSelector"));
LABEL_85:
        unsigned int v113 = v70;
        [v70 handleAnnouncementRequest:v69];

        goto LABEL_151;
      case 13LL:
        int v114 = (AFRequestInfo *)v3;
        xpc_object_t reply = v114;
        if (!v114) {
          goto LABEL_152;
        }
        xpc_object_t v115 = xpc_dictionary_get_value(v114, AFExternalRequestMessageKeyWorkoutReminderPredictionIdentifier);
        char v18 = (NSData *)objc_claimAutoreleasedReturnValue(v115);
        unsigned int v116 = objc_alloc(&OBJC_CLASS___NSData);
        int v117 = xpc_data_get_bytes_ptr(v18);
        unsigned int v19 = -[NSData initWithBytes:length:](v116, "initWithBytes:length:", v117, xpc_data_get_length(v18));
        uint64_t v20 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v19,  0LL);
        id v118 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v20,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___NSString),  NSKeyedArchiveRootObjectKey);
        __int128 v42 = (AFRequestInfo *)objc_claimAutoreleasedReturnValue(v118);
        -[NSKeyedUnarchiver finishDecoding](v20, "finishDecoding");
        int v119 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315394;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDeactivateWorkoutReminderAnnouncement";
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v42;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEBUG,  "%s Received request to deactivate workout reminder announcement for prediction identifier:%@",  buf,  0x16u);
        }

        int v120 = (void *)objc_claimAutoreleasedReturnValue( +[ADAnnounceDeviceSelector sharedDeviceSelector]( &OBJC_CLASS___ADAnnounceDeviceSelector,  "sharedDeviceSelector"));
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_100124BD8;
        int v177 = &unk_1004FB0E0;
        unsigned int v178 = reply;
        [v120 deactivateWorkoutReminderAnnouncementWithPredictionId:v42 completion:buf];

        goto LABEL_90;
      case 14LL:
        int v121 = (AFRequestInfo *)v3;
        xpc_object_t reply = v121;
        if (!v121) {
          goto LABEL_152;
        }
        xpc_object_t v122 = xpc_dictionary_get_value(v121, AFExternalRequestMessageKeyWorkoutVoiceFeedbackAnnouncement);
        char v18 = (NSData *)objc_claimAutoreleasedReturnValue(v122);
        unsigned int v123 = objc_alloc(&OBJC_CLASS___NSData);
        int v124 = xpc_data_get_bytes_ptr(v18);
        unsigned int v19 = -[NSData initWithBytes:length:](v123, "initWithBytes:length:", v124, xpc_data_get_length(v18));
        uint64_t v20 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v19,  0LL);
        v172[0] = 0LL;
        int v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v19,  0LL,  0LL,  v172));
        id v126 = v172[0];
        -[NSKeyedUnarchiver finishDecoding](v20, "finishDecoding");
        int v127 = (os_log_s *)AFSiriLogContextDaemon;
        if (v126 || !v125)
        {
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315394;
            *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestWorkoutVoiceFeedbackAnnouncement";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v126;
            _os_log_error_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_ERROR,  "%s Unable to deserialize workout voice feedback dictionary: %@",  buf,  0x16u);
          }

          sub_100124CA8(0, reply);
        }

        else
        {
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315394;
            *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestWorkoutVoiceFeedbackAnnouncement";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v125;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEBUG,  "%s Received request to announce workout voice feedback with options %@",  buf,  0x16u);
          }

          int v128 = objc_alloc(&OBJC_CLASS___ADAnnounceWorkoutVoiceFeedbackRequest);
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_100124D20;
          int v177 = &unk_1004FB0E0;
          unsigned int v178 = reply;
          unsigned int v129 = -[ADAnnounceWorkoutVoiceFeedbackRequest initWithVoiceFeedbackData:completion:]( v128,  "initWithVoiceFeedbackData:completion:",  v125,  buf);
          int v130 = (void *)objc_claimAutoreleasedReturnValue( +[ADAnnounceDeviceSelector sharedDeviceSelector]( &OBJC_CLASS___ADAnnounceDeviceSelector,  "sharedDeviceSelector"));
          [v130 handleAnnouncementRequest:v129];
        }

        goto LABEL_149;
      case 15LL:
        int v131 = (AFRequestInfo *)v3;
        xpc_object_t reply = v131;
        if (!v131) {
          goto LABEL_152;
        }
        char v18 = (NSData *)xpc_dictionary_create_reply(v131);
        unsigned int v132 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315138;
          *(void *)&uint8_t buf[4] = "_ADHandleExternalRequestDeactivateWorkoutVoiceFeedbackAnnouncement";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEBUG,  "%s Received request to deactivate workout voice feedback announcement",  buf,  0xCu);
          if (!v18) {
            goto LABEL_104;
          }
        }

        else if (!v18)
        {
          goto LABEL_104;
        }

        xpc_dictionary_set_BOOL(v18, AFExternalRequestReplyKeyResult, 0);
        xpc_connection_t v133 = xpc_dictionary_get_remote_connection(v18);
        unsigned int v134 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(v133);
        unsigned int v135 = v134;
        if (v134) {
          xpc_connection_send_message(v134, v18);
        }

LABEL_104:
        unsigned int v136 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_100124D30;
        int v177 = &unk_1004FB0E0;
        unsigned int v178 = reply;
        [v136 deactivateNotificationAnnouncementRequestForReason:12 notification:0 sourceAppId:0 platform:4 completion:buf];

        goto LABEL_151;
      case 16LL:
        unsigned int v137 = (AFRequestInfo *)v3;
        dispatch_time_t v138 = dispatch_time(0LL, 200000000LL);
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
        int v140 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_100124D40;
        int v177 = &unk_1004FD940;
        unsigned int v178 = v137;
        xpc_object_t reply = v137;
        dispatch_after(v138, v140, buf);

        goto LABEL_137;
      default:
        int64_t v15 = int64;
        __int16 v16 = (os_log_s *)AFSiriLogContextDaemon;
        if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
          goto LABEL_153;
        }
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = "_ADHandleNewExternalRequestPeer_block_invoke";
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v15;
        BOOL v6 = "%s Unexpected external request message type %{public}lld";
        unint64_t v7 = v16;
        uint32_t v8 = 22;
        goto LABEL_5;
    }
  }

  unsigned int v5 = (void *)AFSiriLogContextDaemon;
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = v5;
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "_ADHandleNewExternalRequestPeer_block_invoke";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = xpc_dictionary_get_string(v3, _xpc_error_key_description);
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s External Request peer error: %s", buf, 0x16u);
    }

    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = "_ADHandleNewExternalRequestPeer_block_invoke";
    BOOL v6 = "%s Ignoring unexpected type on sync connection";
    unint64_t v7 = (os_log_s *)v5;
    uint32_t v8 = 12;
LABEL_5:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v6, buf, v8);
  }

LABEL_153:
}

        unsigned int v111 = v139;
        int v112 = v92;
        unsigned int v113 = 2LL;
        goto LABEL_154;
      }

void sub_100124058(uint64_t a1, BOOL value)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    xpc_dictionary_set_BOOL(v3, AFExternalRequestReplyKeyResult, value);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    unsigned int v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v5)
    {
      BOOL v6 = v5;
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
      unsigned int v5 = v6;
    }
  }

void sub_1001240C8(void *a1, void *a2, void *a3, uint64_t *a4, int64_t *a5, void *a6)
{
  id v11 = a1;
  xpc_object_t value = xpc_dictionary_get_value(v11, AFExternalRequestMessageKeyNotification);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(value);
  uint64_t v14 = objc_alloc(&OBJC_CLASS___NSData);
  bytes_ptr = xpc_data_get_bytes_ptr(v13);
  __int16 v16 = -[NSData initWithBytes:length:](v14, "initWithBytes:length:", bytes_ptr, xpc_data_get_length(v13));
  id v17 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v16,  0LL);
  if (a2)
  {
    id v18 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v17,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___UNNotification),  NSKeyedArchiveRootObjectKey);
    *a2 = (id)objc_claimAutoreleasedReturnValue(v18);
    -[NSKeyedUnarchiver finishDecoding](v17, "finishDecoding");
  }

  string = xpc_dictionary_get_string(v11, AFExternalRequestMessageKeySourceAppId);
  if (a3 && string) {
    *a3 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", string);
  }
  int64_t int64 = xpc_dictionary_get_int64(v11, AFExternalRequestMessageKeyAnnouncementPlatform);
  char IsValidAndSpecified = AFSiriAnnouncementPlatformGetIsValidAndSpecified();
  uint64_t v22 = int64;
  if ((IsValidAndSpecified & 1) == 0)
  {
    id v23 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v34 = 136315394;
      uint64_t v35 = "_ADRetrieveAnnounceNotificationRequestParametersFromMessage";
      __int16 v36 = 2048;
      int64_t v37 = int64;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s non-valid AFSiriAnnouncementPlatform: %lli, defaulting to AFSiriAnnouncementPlatformHeadphones.",  (uint8_t *)&v34,  0x16u);
    }

    uint64_t v22 = 1LL;
  }

  if (a4) {
    *a4 = v22;
  }
  int64_t v24 = xpc_dictionary_get_int64(v11, AFExternalRequestMessageKeySummaryDecision);
  if ((AFSiriAnnouncementSummaryDecisionGetIsValidAndSpecified() & 1) == 0)
  {
    id v25 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v34 = 136315394;
      uint64_t v35 = "_ADRetrieveAnnounceNotificationRequestParametersFromMessage";
      __int16 v36 = 2048;
      int64_t v37 = int64;
      _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s non-valid AFSiriAnnouncementSummaryDecision: %lli, defaulting to AFSiriAnnouncementSummaryDecisionUnspecified.",  (uint8_t *)&v34,  0x16u);
    }

    int64_t v24 = 0LL;
  }

  if (a5) {
    *a5 = v24;
  }
  xpc_object_t v26 = xpc_dictionary_get_value(v11, AFExternalRequestMessageKeySummary);
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  __int128 v28 = objc_alloc(&OBJC_CLASS___NSData);
  __int128 v29 = xpc_data_get_bytes_ptr(v27);
  id v30 = -[NSData initWithBytes:length:](v28, "initWithBytes:length:", v29, xpc_data_get_length(v27));
  uint64_t v31 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v30,  0LL);
  id v32 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v31,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___AFSiriUserNotificationSummary),  NSKeyedArchiveRootObjectKey);
  BOOL v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  -[NSKeyedUnarchiver finishDecoding](v17, "finishDecoding");
  if (a6) {
    *a6 = v33;
  }
}

void sub_10012442C(uint64_t a1, BOOL value)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    xpc_dictionary_set_BOOL(v3, AFExternalRequestReplyKeyResult, value);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    unsigned int v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v5)
    {
      BOOL v6 = v5;
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
      unsigned int v5 = v6;
    }
  }

void sub_10012449C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    xpc_type_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v13 = "_ADHandleExternalRequestLocalRequest_block_invoke";
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s startLocalRequest = %@", buf, 0x16u);
    }

    unsigned int v5 = objc_alloc_init(&OBJC_CLASS___AFRequestInfo);
    -[_xpc_connection_s setStartLocalRequest:](v5, "setStartLocalRequest:", v3);
    -[_xpc_connection_s setActivationEvent:](v5, "setActivationEvent:", 7LL);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100125244;
    v10[3] = &unk_1004FAE50;
    id v11 = *(id *)(a1 + 32);
    [v6 handleExternalActivationRequest:v5 completion:v10];
  }

  else
  {
    unint64_t v7 = *(void **)(a1 + 32);
    if (!v7) {
      goto LABEL_6;
    }
    xpc_dictionary_set_BOOL(v7, AFExternalRequestReplyKeyResult, 0);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    BOOL v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    unsigned int v5 = v9;
    if (v9) {
      xpc_connection_send_message(v9, *(xpc_object_t *)(a1 + 32));
    }
  }

LABEL_6:
}

void sub_100124638(uint64_t a1, BOOL value)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    xpc_dictionary_set_BOOL(v3, AFExternalRequestReplyKeyResult, value);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    unsigned int v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v5)
    {
      BOOL v6 = v5;
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
      unsigned int v5 = v6;
    }
  }

void sub_1001246A8(uint64_t a1, BOOL a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    BOOL v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int64_t v12 = "_ADHandleExternalRequestStartLocalRequest_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Error handling external activation %@",  (uint8_t *)&v11,  0x16u);
    }
  }

  unint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    xpc_dictionary_set_BOOL(v7, AFExternalRequestReplyKeyResult, a2);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    BOOL v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    id v10 = v9;
    if (v9) {
      xpc_connection_send_message(v9, *(xpc_object_t *)(a1 + 32));
    }
  }
}

void sub_1001247BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t XPCDictionaryFromResult = AFSiriActivationCreateXPCDictionaryFromResult(a2);
    xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(XPCDictionaryFromResult);
    if (value) {
      xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), AFExternalRequestReplyKeyActivationResult, value);
    }
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    id v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    BOOL v6 = v5;
    if (v5) {
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
    }
  }

uint64_t sub_100124850(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10012485C(uint64_t a1, BOOL value)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    xpc_dictionary_set_BOOL(v3, AFExternalRequestReplyKeyResult, value);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    id v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v5)
    {
      BOOL v6 = v5;
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
      id v5 = v6;
    }
  }

void sub_1001248CC(uint64_t a1, BOOL value)
{
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  xpc_type_t v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  if (v4)
  {
    id v5 = v4;
    xpc_connection_send_message(v4, *(xpc_object_t *)(a1 + 32));
    xpc_type_t v4 = v5;
  }
}

void sub_100124928(uint64_t a1, BOOL value)
{
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  xpc_type_t v4 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  if (v4)
  {
    id v5 = v4;
    xpc_connection_send_message(v4, *(xpc_object_t *)(a1 + 32));
    xpc_type_t v4 = v5;
  }
}

void sub_100124984(uint64_t a1, BOOL a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (v5 || !a2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      __int16 v13 = "_ADHandleExternalRequestDropInCall_block_invoke";
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Request failed with error: %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315138;
    __int16 v13 = "_ADHandleExternalRequestDropInCall_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Background request sent successfully",  (uint8_t *)&v12,  0xCu);
  }

  unint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    xpc_dictionary_set_BOOL(v7, AFExternalRequestReplyKeyResult, a2);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    BOOL v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = "false";
      if (a2) {
        int v11 = "true";
      }
      int v12 = 136315394;
      __int16 v13 = "_ADHandleExternalRequestDropInCall_block_invoke";
      __int16 v14 = 2080;
      id v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Sending reply, success: %s",  (uint8_t *)&v12,  0x16u);
    }

    if (v9) {
      xpc_connection_send_message(v9, *(xpc_object_t *)(a1 + 32));
    }
  }
}

void sub_100124B68(uint64_t a1, BOOL value)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    xpc_dictionary_set_BOOL(v3, AFExternalRequestReplyKeyResult, value);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    id v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v5)
    {
      BOOL v6 = v5;
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
      id v5 = v6;
    }
  }

void sub_100124BD8(uint64_t a1, BOOL a2)
{
  xpc_type_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    BOOL v6 = "_ADHandleExternalRequestDeactivateWorkoutReminderAnnouncement_block_invoke";
    __int16 v7 = 1024;
    BOOL v8 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Deactivate workout reminder announcement success=%d",  (uint8_t *)&v5,  0x12u);
  }

  sub_100124CA8(a2, *(xpc_object_t *)(a1 + 32));
}

void sub_100124CA8(BOOL a1, xpc_object_t original)
{
  if (original)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      xpc_object_t xdict = reply;
      xpc_dictionary_set_BOOL(reply, AFExternalRequestReplyKeyResult, a1);
      xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(xdict);
      int v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
      BOOL v6 = v5;
      if (v5) {
        xpc_connection_send_message(v5, xdict);
      }

      xpc_object_t reply = xdict;
    }
  }

void sub_100124D20(uint64_t a1, BOOL a2)
{
}

void sub_100124D30(uint64_t a1, BOOL a2)
{
}

void sub_100124D40(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  if (v1)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v25 = "_ADHandleExternalRequestDeliverUserNotificationSummary_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Received request to deliver User Notification summary",  buf,  0xCu);
      id v1 = *(void **)(a1 + 32);
    }

    xpc_object_t value = xpc_dictionary_get_value(v1, AFExternalRequestMessageKeySummary);
    int v5 = (void *)objc_claimAutoreleasedReturnValue(value);
    BOOL v6 = objc_alloc(&OBJC_CLASS___NSData);
    bytes_ptr = xpc_data_get_bytes_ptr(v5);
    BOOL v8 = -[NSData initWithBytes:length:](v6, "initWithBytes:length:", bytes_ptr, xpc_data_get_length(v5));
    BOOL v9 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v8,  0LL);
    id v10 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v9,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___AFSiriUserNotificationSummary),  NSKeyedArchiveRootObjectKey);
    int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    -[NSKeyedUnarchiver finishDecoding](v9, "finishDecoding");
    xpc_object_t v12 = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 32), AFExternalRequestMessageKeyNotification);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    __int16 v14 = objc_alloc(&OBJC_CLASS___NSData);
    id v15 = xpc_data_get_bytes_ptr(v13);
    __int16 v16 = -[NSData initWithBytes:length:](v14, "initWithBytes:length:", v15, xpc_data_get_length(v13));
    id v17 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v16,  0LL);
    id v18 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v17,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___UNNotification),  NSKeyedArchiveRootObjectKey);
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    -[NSKeyedUnarchiver finishDecoding](v17, "finishDecoding");
    uint64_t v20 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315650;
      id v25 = "_ADHandleExternalRequestDeliverUserNotificationSummary_block_invoke";
      __int16 v26 = 2112;
      id v27 = v11;
      __int16 v28 = 2112;
      __int128 v29 = v19;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s Received summary: %@ for notification: %@",  buf,  0x20u);
    }

    unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100125050;
    v22[3] = &unk_1004FB0E0;
    id v23 = *(id *)(a1 + 32);
    [v21 deliverSummary:v11 forNotification:v19 completion:v22];
  }

void sub_100125050(uint64_t a1, BOOL a2)
{
  xpc_type_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    BOOL v6 = "_ADHandleExternalRequestDeliverUserNotificationSummary_block_invoke";
    __int16 v7 = 1024;
    BOOL v8 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Sending XPC reply for summary deliver: %d",  (uint8_t *)&v5,  0x12u);
  }

  sub_100124CA8(a2, *(xpc_object_t *)(a1 + 32));
}

void sub_100125120(id a1, BOOL a2, NSError *a3)
{
  xpc_type_t v4 = a3;
  int v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (v4 || !a2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      __int16 v7 = "_ADHandleExternalRequestHomeAutomationBackgroundRequest_block_invoke";
      __int16 v8 = 2112;
      BOOL v9 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Request failed with error: %@",  (uint8_t *)&v6,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    __int16 v7 = "_ADHandleExternalRequestHomeAutomationBackgroundRequest_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Background request sent successfully",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_100125244(uint64_t a1, BOOL value)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    xpc_dictionary_set_BOOL(v3, AFExternalRequestReplyKeyResult, value);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
    int v5 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    if (v5)
    {
      int v6 = v5;
      xpc_connection_send_message(v5, *(xpc_object_t *)(a1 + 32));
      int v5 = v6;
    }
  }

void sub_100125430(void (**a1)(void, void))
{
  uint64_t v2 = a1;
  id v3 = objc_alloc_init(&OBJC_CLASS___ADUnavailableTimerStore);
  ((void (**)(void, ADUnavailableTimerStore *))a1)[2](v2, v3);
}

void sub_100125A2C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v11 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315906;
      __int16 v26 = "-[ADDiagnosticsManager updateLatencyDiagnosticConfiguration:completion:]_block_invoke";
      __int16 v27 = 2112;
      uint64_t v28 = v12;
      __int16 v29 = 2112;
      id v30 = v8;
      __int16 v31 = 2112;
      id v32 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Could not complete %@: %@/%@", buf, 0x2Au);
    }
  }

  else
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v26 = "-[ADDiagnosticsManager updateLatencyDiagnosticConfiguration:completion:]_block_invoke";
      __int16 v27 = 2112;
      uint64_t v28 = v13;
      __int16 v29 = 2112;
      id v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Completed %@: %@", buf, 0x20u);
    }

    id v14 = objc_alloc_init(&OBJC_CLASS___SADIAGLatencyDiagnosticReportDiagnosticReport);
    [v14 setUri:*(void *)(a1 + 40)];
    [v14 setVerb:*(void *)(a1 + 48)];
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    [v15 systemUptime];
    double v17 = v16 - *(double *)(a1 + 80);

    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLong:]( &OBJC_CLASS___NSNumber,  "numberWithLong:",  (uint64_t)(v17 * 1000.0 * 1000.0)));
    [v14 setLatency:v18];

    unsigned int v19 = *(dispatch_group_s **)(a1 + 56);
    uint64_t v20 = *(dispatch_queue_s **)(*(void *)(a1 + 64) + 8LL);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100125CEC;
    v22[3] = &unk_1004FD968;
    id v23 = *(id *)(a1 + 72);
    id v24 = v14;
    id v21 = v14;
    dispatch_group_async(v19, v20, v22);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100125C94(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SADIAGLatencyDiagnosticReport);
  [v2 setDiagnosticReports:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  [*(id *)(a1 + 40) invalidateAndCancel];
}

id sub_100125CEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
}

void sub_100126AD4(uint64_t a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100126C0C;
  v8[3] = &unk_1004FD510;
  xpc_type_t v4 = *(dispatch_queue_s **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v12 = a2;
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  dispatch_async(v4, v8);
}

void sub_100126B68(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_sessionWithDeviceIdentifier:"));
    [v5 pushGenerationsByDataTypes:*(void *)(a1 + 48)];
  }

  else
  {
    xpc_type_t v4 = (void *)v2[5];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100126BFC;
    v6[3] = &unk_1004F2288;
    id v7 = *(id *)(a1 + 48);
    [v4 enumerateKeysAndObjectsUsingBlock:v6];
  }

id sub_100126BFC(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 pushGenerationsByDataTypes:*(void *)(a1 + 32)];
}

void sub_100126C0C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 56)));
  [v2 setObject:v3 forKey:*(void *)(a1 + 40)];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100126C64(uint64_t a1, uint64_t a2, void *a3)
{
  xpc_type_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  uint64_t v6 = -[ADDeviceSyncMessageSender initWithDeviceIdentifier:messagingService:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncMessageSender),  "initWithDeviceIdentifier:messagingService:",  *(void *)(a1 + 40),  v5);

  [v4 addObject:v6];
}

void sub_100126CD0(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) type]);
  xpc_type_t v4 = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
  [v1 _getGenerationsForDataTypes:v3 andPushToDeviceWithIdentifier:0];
}

void sub_100126D6C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionWithDeviceIdentifier:*(void *)(a1 + 40)]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 messageReceiver]);
  [v2 receiveMessage:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100126DC0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100126E5C;
  v5[3] = &unk_1004F2238;
  id v6 = v2;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];
  xpc_type_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) objectForKey:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 32) + 40) removeObjectForKey:*(void *)(a1 + 40)];
  [v4 invalidate];
}

id sub_100126E5C(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 finalizeForDeviceWithIdentifier:*(void *)(a1 + 32)];
}

void sub_100126E6C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100126EF8;
  v5[3] = &unk_1004F2238;
  id v6 = v2;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];
  id v4 = [*(id *)(a1 + 32) _sessionWithDeviceIdentifier:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) _getGenerationsForDataTypes:0 andPushToDeviceWithIdentifier:*(void *)(a1 + 40)];
}

id sub_100126EF8(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 prepareForDeviceWithIdentifier:*(void *)(a1 + 32)];
}

void sub_1001271D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1001276C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    id v8 = "-[ADServerFallbackConfigManager _registerUpdateHandler]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s New ADServerFallbackConfigManager client update",  (uint8_t *)&v7,  0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained[1] refresh];
    [v6 _populateConfiguration];
  }
}

uint64_t sub_1001277A4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 18LL);
  return result;
}

id sub_1001277B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _populateConfiguration];
}

void sub_100127800(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ADServerFallbackConfigManager);
  id v2 = (void *)qword_100577EC0;
  qword_100577EC0 = (uint64_t)v1;
}

void sub_1001279D8(void *a1, void *a2, int a3, void *a4)
{
  id v10 = a2;
  id v7 = a4;
  if (a3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 8LL));
    [WeakRetained appLaunchHandler:a1[4] didLaunchAppForRequestId:a1[5]];
  }

  uint64_t v9 = a1[6];
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v10, v7);
  }
}

id sub_100127D80()
{
  return (id)qword_100577EE0;
}

id sub_100127D8C()
{
  if (qword_100577ED8 != -1) {
    dispatch_once(&qword_100577ED8, &stru_1004F2340);
  }
  return (id)qword_100577EE0;
}

id sub_100127DCC()
{
  return (id)qword_100577F00;
}

id sub_100127DD8()
{
  if (qword_100577EF8 != -1) {
    dispatch_once(&qword_100577EF8, &stru_1004F2380);
  }
  return (id)qword_100577F00;
}

void sub_100127E18(uint64_t a1, void *a2, void *a3)
{
  id v17 = a2;
  id v5 = a3;
  id v6 = v5;
  if (*(void *)(a1 + 40))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
    id v8 = off_1005735B8();
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    unsigned int v10 = [v7 isEqualToString:v9];

    if (v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:NSUnderlyingErrorKey]);

      if (v12)
      {
        id v13 = v12;

        id v6 = v13;
      }
    }

    if (v6)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      id v14 = *(void **)(a1 + 32);
      id v15 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      double v16 = (void *)objc_claimAutoreleasedReturnValue([v14 createResponseWithReplyCommand:v15]);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      id v6 = 0LL;
    }
  }
}

id sub_100127F60()
{
  return (id)qword_100577ED0;
}

id sub_100127F6C()
{
  if (qword_100577F08 != -1) {
    dispatch_once(&qword_100577F08, &stru_1004F23A0);
  }
  return (id)qword_100577ED0;
}

void sub_100127FAC(id a1)
{
  if (qword_100577EE8 != -1) {
    dispatch_once(&qword_100577EE8, &stru_1004F2360);
  }
  id v1 = (id *)dlsym((void *)qword_100577EF0, "FBSOpenApplicationServiceErrorDomain");
  if (!v1) {
    __assert_rtn( "initFBSOpenApplicationServiceErrorDomain_block_invoke",  "ADSiriAppLaunchRequestHandler.m",  24,  "constant");
  }
  objc_storeStrong((id *)&qword_100577ED0, *v1);
  off_1005735B8 = sub_100127F60;
}

void sub_10012803C(id a1)
{
  qword_100577EF0 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices",  2);
}

void sub_100128064(id a1)
{
  if (qword_100577EE8 != -1) {
    dispatch_once(&qword_100577EE8, &stru_1004F2360);
  }
  qword_100577F00 = (uint64_t)objc_getClass("FBSOpenApplicationOptions");
  off_1005735B0 = sub_100127DCC;
}

void sub_1001280C0(id a1)
{
  if (qword_100577EE8 != -1) {
    dispatch_once(&qword_100577EE8, &stru_1004F2360);
  }
  qword_100577EE0 = (uint64_t)objc_getClass("FBSOpenApplicationService");
  off_1005735A8 = sub_100127D80;
}

void sub_1001287CC(uint64_t a1, void *a2)
{
  id v45 = a2;
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v45 localizedName]);
  id v3 = (void *)v2;
  id v4 = &stru_1004FECA0;
  if (v2) {
    id v4 = (__CFString *)v2;
  }
  __int128 v42 = v4;

  __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v45 appState]);
  id v43 = (void *)objc_claimAutoreleasedReturnValue([v45 applicationType]);
  if ([v44 isValid]
    && (![v43 isEqualToString:@"System"]
     || ([v45 isLaunchProhibited] & 1) == 0))
  {
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v45 appTags]);
    if ([v40 containsObject:@"hidden"])
    {
    }

    else
    {
      Unique = (__CFBundle *)_CFBundleCreateUnique(kCFAllocatorDefault, [v45 bundleURL]);
      if (Unique)
      {
        id v6 = Unique;
        CFTypeRef ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(Unique, @"INAlternativeAppNames");
        id v39 = (void *)objc_claimAutoreleasedReturnValue(ValueForInfoDictionaryKey);
        __int128 v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSArray);
        if ((objc_opt_isKindOfClass(v39, v8) & 1) != 0)
        {
          id v9 = v39;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          id v10 = [v9 countByEnumeratingWithState:&v48 objects:v59 count:16];
          if (v10)
          {
            uint64_t v11 = *(void *)v49;
            do
            {
              for (i = 0LL; i != v10; i = (char *)i + 1)
              {
                if (*(void *)v49 != v11) {
                  objc_enumerationMutation(v9);
                }
                id v13 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
                uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSDictionary);
                if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
                {
                  id v15 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"INAlternativeAppName"]);
                  uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString);
                  if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
                  {
                    CFTypeRef v17 = CFBundleGetValueForInfoDictionaryKey(v6, v15);
                    id v18 = (__CFString *)objc_claimAutoreleasedReturnValue(v17);

                    if (v18) {
                      [v46 addObject:v18];
                    }
                  }

                  else
                  {
                    id v18 = v15;
                  }
                }
              }

              id v10 = [v9 countByEnumeratingWithState:&v48 objects:v59 count:16];
            }

            while (v10);
          }
        }

        _CFBundleFlushBundleCaches(v6);
        CFRelease(v6);
        unsigned int v19 = (__CFBundle *)[v46 copy];

        Unique = v19;
      }

      __int128 v47 = Unique;
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[__CFBundle arrayByAddingObject:](Unique, "arrayByAddingObject:", v42));
      id v21 = *(void **)(a1 + 32);
      id v22 = v20;
      id v23 = v21;
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      id v24 = v22;
      id v25 = [v24 countByEnumeratingWithState:&v48 objects:v59 count:16];
      if (v25)
      {
        uint64_t v26 = *(void *)v49;
        while (2)
        {
          for (j = 0LL; j != v25; j = (char *)j + 1)
          {
            if (*(void *)v49 != v26) {
              objc_enumerationMutation(v24);
            }
            uint64_t v28 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)j);
            if ([v28 length])
            {
              id v29 = v28;
              id v30 = v23;
              uint64_t v55 = 0LL;
              __int128 v56 = &v55;
              uint64_t v57 = 0x2020000000LL;
              char v58 = 0;
              __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( [v29 stringByReplacingOccurrencesOfString:@" " withString:@" "]);

              if ([v31 localizedStandardContainsString:v30])
              {
                id v32 = [v30 length];
                if (v32 == [v31 length])
                {
                  *((_BYTE *)v56 + 24) = 1;
                  _Block_object_dispose(&v55, 8);

LABEL_38:
                  id v35 = objc_alloc_init(&OBJC_CLASS___SASyncNamedAppIdentifyingInfo);
                  __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v45 bundleIdentifier]);
                  [v35 setBundleId:v36];

                  [v35 setLocalizedBundleDisplayName:v42];
                  int64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v45 shortVersionString]);
                  [v35 setVersion:v37];

                  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v45 bundleVersion]);
                  [v35 setBuildNumber:v38];

                  [*(id *)(a1 + 40) addObject:v35];
                  goto LABEL_39;
                }
              }

              id v33 = [v31 length];
              v52[0] = _NSConcreteStackBlock;
              v52[1] = 3221225472LL;
              v52[2] = sub_100128D88;
              v52[3] = &unk_1004F23C8;
              id v34 = v30;
              id v53 = v34;
              id v54 = &v55;
              objc_msgSend(v31, "enumerateSubstringsInRange:options:usingBlock:", 0, v33, 3, v52);

              LODWORD(v33) = *((_BYTE *)v56 + 24) == 0;
              _Block_object_dispose(&v55, 8);

              if (!(_DWORD)v33) {
                goto LABEL_38;
              }
            }
          }

          id v25 = [v24 countByEnumeratingWithState:&v48 objects:v59 count:16];
          if (v25) {
            continue;
          }
          break;
        }
      }
    }
  }

void sub_100128D68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_100128D88(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  id v10 = a2;
  if ([v10 localizedStandardContainsString:*(void *)(a1 + 32)])
  {
    id v9 = [*(id *)(a1 + 32) length];
    if (v9 == [v10 length])
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
      *a7 = 1;
    }
  }
}

void sub_1001296E0(_Unwind_Exception *a1)
{
}

id sub_10012A2D4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  if (result) {
    return _[*(id *)(a1 + 32) _synchronizeSharedZones];
  }
  return result;
}

void sub_10012A310(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKey:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v11 = "-[ADCloudKitShareeOperations deleteShareForUser:markForReinvitation:completion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Found updater for share owner (%@)",  buf,  0x16u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedZone]);
    id v6 = -[ADCloudKitZoneShareCreator initWithQueue:container:sharedZone:]( objc_alloc(&OBJC_CLASS___ADCloudKitZoneShareCreator),  "initWithQueue:container:sharedZone:",  *(void *)(*(void *)(a1 + 32) + 8LL),  *(void *)(*(void *)(a1 + 32) + 16LL),  v5);
    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
    uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10012A490;
    v8[3] = &unk_1004FCC00;
    id v9 = *(id *)(a1 + 48);
    -[ADCloudKitZoneShareCreator deleteZoneShare:markForReinvitation:completion:]( v6,  "deleteZoneShare:markForReinvitation:completion:",  0LL,  v7,  v8);
  }
}

void sub_10012A490(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "-[ADCloudKitShareeOperations deleteShareForUser:markForReinvitation:completion:]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error encountered while deleting share record : (%@)",  (uint8_t *)&v6,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADCloudKitShareeOperations deleteShareForUser:markForReinvitation:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Deleted zone share - effectively removed myself as participant",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_10012A5BC(uint64_t a1)
{
  uint64_t v2 = dispatch_group_create();
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)v7);
        dispatch_group_enter(v2);
        id v9 = *(void **)(a1 + 32);
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        void v13[2] = sub_10012A764;
        v13[3] = &unk_1004FD940;
        uint64_t v14 = v2;
        [v9 deleteShareForUser:v8 markForReinvitation:0 completion:v13];

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v5);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(dispatch_queue_s **)(v10 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10012A76C;
  v12[3] = &unk_1004FD940;
  void v12[4] = v10;
  dispatch_group_notify(v2, v11, v12);
}

void sub_10012A764(uint64_t a1)
{
}

void sub_10012A76C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[ADCloudKitShareeOperations reset]_block_invoke_3";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Done clearing sharee", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 24) removeAllObjects];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = 0LL;
}

void sub_10012A830(id a1, NSException *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    int v5 = "-[ADCloudKitShareeOperations setServerChangeToken:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error encountered while encoding account status server change token: %@",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_10012A8F0(id a1, NSException *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    int v5 = "-[ADCloudKitShareeOperations serverChangeToken]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error encountered while decoding acount status server change token: %@",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_10012A9B0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedZone]);
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v2 dataStore]);
  [v1 synchronizeUsingActivity:0 completion:&stru_1004F2488];
}

void sub_10012AA04(id a1, BOOL a2)
{
  BOOL v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "-[ADCloudKitShareeOperations _synchronizeSharedZones]_block_invoke_2";
    __int16 v6 = 1024;
    BOOL v7 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Synchronization completed with (%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_10012AAB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315650;
      BOOL v7 = "-[ADCloudKitShareeOperations deleteZones:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error encountered while deleting (%@) error is (%@)",  (uint8_t *)&v6,  0x20u);
    }
  }
}

void sub_10012AB94(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedZone]);
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([v4 zone]);

  if (!v2) {
    [v4 setZone:*(void *)(a1 + 40)];
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v3 fetchChangesWithZoneInfo:v4 useSharedDatabase:1];
}

id sub_10012AC10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setupMultiUserSharedZone:*(void *)(a1 + 40)];
}

id sub_10012AC1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _synchronizeSharedZones];
}

uint64_t sub_10012AC24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10012AC34(uint64_t a1)
{
}

void sub_10012AC3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    BOOL v7 = "-[ADCloudKitShareeOperations _fetchSharedZonesIfAny]_block_invoke";
    __int16 v8 = 2112;
    id v9 = WeakRetained;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %@ zone %@ changed", (uint8_t *)&v6, 0x20u);
  }

  if (v3) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v3];
  }
}

void sub_10012AD34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    BOOL v7 = "-[ADCloudKitShareeOperations _fetchSharedZonesIfAny]_block_invoke";
    __int16 v8 = 2112;
    id v9 = WeakRetained;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %@ zone %@ deleted", (uint8_t *)&v6, 0x20u);
  }

  if (v3) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v3];
  }
}

void sub_10012AE2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    int v6 = "-[ADCloudKitShareeOperations _fetchSharedZonesIfAny]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s server token updated", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) setServerChangeToken:v3];
}

void sub_10012AEF4(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  id v9 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v10 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v8)
  {
    if (v10)
    {
      int v12 = 136315394;
      uint64_t v13 = "-[ADCloudKitShareeOperations _fetchSharedZonesIfAny]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s error is (%@)", (uint8_t *)&v12, 0x16u);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v11 handleSharedDBCloudKitError:v8 operationType:8];
  }

  else
  {
    if (v10)
    {
      int v12 = 136315394;
      uint64_t v13 = "-[ADCloudKitShareeOperations _fetchSharedZonesIfAny]_block_invoke";
      __int16 v14 = 1024;
      LODWORD(v15) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Fetching zone data on shared zones. See moreComing (%d)",  (uint8_t *)&v12,  0x12u);
    }

    [*(id *)(a1 + 32) setServerChangeToken:v7];
    [*(id *)(a1 + 32) fetchZones:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    [*(id *)(a1 + 32) deleteZones:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  }
}

id sub_10012B080(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 32) isEndpoint];
  return result;
}

void sub_10012B0BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  BOOL v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "-[ADCloudKitShareeOperations _setupSharedDatabaseView]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Zone subscription creation failed: (%@)",  (uint8_t *)&v11,  0x16u);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      int v12 = "-[ADCloudKitShareeOperations _setupSharedDatabaseView]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Zone subscription saved: (%@)",  (uint8_t *)&v11,  0x16u);
    }

    [*(id *)(a1 + 32) fetchSharedZones];
  }
}

id sub_10012B214(uint64_t a1)
{
  BOOL v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    int v5 = "-[ADCloudKitShareeOperations _setupSharedDatabase]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Start secondary user fetches",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _setupSharedDatabaseView];
}

void sub_10012BA78(_Unwind_Exception *a1)
{
}

void sub_10012C26C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10012D56C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setSequence:v3];
  [v4 setType:9];
  int v5 = -[ADDeviceSyncCommandPullSnapshotRequest initWithDataType:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPullSnapshotRequest),  "initWithDataType:",  *(void *)(a1 + 32));
  [v4 setCommandPullSnapshotRequest:v5];
}

void sub_10012D5E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (*(void *)(a1 + 40))
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10012D6AC;
    v11[3] = &unk_1004FBA38;
    id v12 = v6;
    id v14 = *(id *)(a1 + 40);
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = v9;
    uint64_t v15 = v10;
    dispatch_async(v8, v11);
  }
}

void sub_10012D6AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pullSnapshotForDataType:completion:]_block_invoke_3";
      __int16 v14 = 2112;
      uint64_t v15 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    return;
  }

  id v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2412LL,  @"There's no reply message.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      return;
    }

void sub_10012D9CC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 snapshot]);
  id v4 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    id v6 = "-[ADDeviceSyncSession _pullSnapshotForDataType:completion:]_block_invoke";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s snapshot = %@", (uint8_t *)&v5, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10012DAB0(void *a1, void *a2)
{
  uint64_t v3 = a1[5];
  id v4 = a2;
  [v4 setSequence:v3];
  [v4 setType:7];
  int v5 = -[ADDeviceSyncCommandPullDeltaRequest initWithDataType:generation:limit:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPullDeltaRequest),  "initWithDataType:generation:limit:",  a1[4],  a1[6],  a1[7]);
  [v4 setCommandPullDeltaRequest:v5];
}

void sub_10012DB2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = v6;
  if (*(void *)(a1 + 40))
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10012DBF4;
    v11[3] = &unk_1004FBA38;
    id v12 = v6;
    id v14 = *(id *)(a1 + 40);
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = v9;
    uint64_t v15 = v10;
    dispatch_async(v8, v11);
  }
}

void sub_10012DBF4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pullDeltaForDataType:generation:limit:completion:]_block_invoke_3";
      __int16 v14 = 2112;
      uint64_t v15 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    return;
  }

  id v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2412LL,  @"There's no reply message.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      return;
    }

void sub_10012DF14(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 incrementalChanges]);
  id v4 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    id v6 = "-[ADDeviceSyncSession _pullDeltaForDataType:generation:limit:completion:]_block_invoke";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s incrementalChanges = %@", (uint8_t *)&v5, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10012DFF8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setSequence:v3];
  [v4 setType:5];
  int v5 = -[ADDeviceSyncCommandPullGenerationsRequest initWithDataTypes:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPullGenerationsRequest),  "initWithDataTypes:",  *(void *)(a1 + 32));
  [v4 setCommandPullGenerationsRequest:v5];
}

void sub_10012E070(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = v6;
  if (*(void *)(a1 + 40))
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10012E138;
    v11[3] = &unk_1004FBA38;
    id v12 = v6;
    id v14 = *(id *)(a1 + 40);
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = v9;
    uint64_t v15 = v10;
    dispatch_async(v8, v11);
  }
}

void sub_10012E138(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pullGenerationsForDataTypes:completion:]_block_invoke_3";
      __int16 v14 = 2112;
      uint64_t v15 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    return;
  }

  id v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2412LL,  @"There's no reply message.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      return;
    }

void sub_10012E458(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 generationsByDataType]);
  id v4 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    id v6 = "-[ADDeviceSyncSession _pullGenerationsForDataTypes:completion:]_block_invoke";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s generationsByDataType = %@",  (uint8_t *)&v5,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10012E53C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setSequence:v3];
  [v4 setType:3];
  int v5 = -[ADDeviceSyncCommandPushGenerationsRequest initWithGenerationsByDataType:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPushGenerationsRequest),  "initWithGenerationsByDataType:",  *(void *)(a1 + 32));
  [v4 setCommandPushGenerationsRequest:v5];
}

void sub_10012E5B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = v6;
  if (*(void *)(a1 + 40))
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10012E67C;
    v11[3] = &unk_1004FBA38;
    id v12 = v6;
    id v14 = *(id *)(a1 + 40);
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = v9;
    uint64_t v15 = v10;
    dispatch_async(v8, v11);
  }
}

void sub_10012E67C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pushGenerationsByDataType:completion:]_block_invoke_3";
      __int16 v14 = 2112;
      uint64_t v15 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    return;
  }

  id v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2412LL,  @"There's no reply message.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      return;
    }

uint64_t sub_10012E990(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10012E9A0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 setSequence:v2];
  [v3 setType:1];
}

void sub_10012E9E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = v6;
  if (*(void *)(a1 + 40))
  {
    id v8 = *(dispatch_queue_s **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10012EAAC;
    v11[3] = &unk_1004FBA38;
    id v12 = v6;
    id v14 = *(id *)(a1 + 40);
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = v9;
    uint64_t v15 = v10;
    dispatch_async(v8, v11);
  }
}

void sub_10012EAAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v13 = "-[ADDeviceSyncSession _pingWithCompletion:]_block_invoke_3";
      __int16 v14 = 2112;
      uint64_t v15 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    return;
  }

  id v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2412LL,  @"There's no reply message.",  0LL));
    id v9 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (!os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

      return;
    }

uint64_t sub_10012EDC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10012EDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) endSendingWithMessageSender:*(void *)(a1 + 40) replyMessage:a2 error:a3];
}

void sub_10012EDE4(uint64_t a1, void *a2, void *a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10012EE9C;
  block[3] = &unk_1004FD9E0;
  id v9 = a2;
  id v10 = a3;
  id v5 = *(dispatch_queue_s **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  id v6 = v10;
  id v7 = v9;
  dispatch_async(v5, block);
}

uint64_t sub_10012EE9C(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      id v8 = "-[ADDeviceSyncSession _handlePullSnapshotForDataType:completion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s snapshot = %@", (uint8_t *)&v7, 0x16u);
    }
  }

  uint64_t v4 = a1[5];
  if (v4)
  {
    id v5 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      id v8 = "-[ADDeviceSyncSession _handlePullSnapshotForDataType:completion:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v7, 0x16u);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_10012EFE0(uint64_t a1, void *a2, void *a3)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10012F098;
  block[3] = &unk_1004FD9E0;
  id v9 = a2;
  id v10 = a3;
  id v5 = *(dispatch_queue_s **)(a1 + 32);
  id v11 = *(id *)(a1 + 40);
  id v6 = v10;
  id v7 = v9;
  dispatch_async(v5, block);
}

uint64_t sub_10012F098(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      id v8 = "-[ADDeviceSyncSession _handlePullDeltaForDataType:generation:limit:completion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s incrementalChanges = %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  uint64_t v4 = a1[5];
  if (v4)
  {
    id v5 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      id v8 = "-[ADDeviceSyncSession _handlePullDeltaForDataType:generation:limit:completion:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v7, 0x16u);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_10012F1DC(uint64_t a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10012F42C;
  v8[3] = &unk_1004FD510;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v12 = a2;
  uint64_t v6 = *(void *)(a1 + 48);
  int v7 = *(void **)(a1 + 56);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  dispatch_async(v4, v8);
}

void sub_10012F270(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
    {
      id v3 = *(void **)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[ADDeviceSyncSession _handlePullGenerationsForDataTypes:completion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s generationsByDataType = %@", buf, 0x16u);
    }

    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v4 + 16))(v4, v5, 0LL);
  }

  else
  {
    uint64_t v6 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"No data provider for data types %@.",  *(void *)(a1 + 40));
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2410LL,  v6,  0LL));

    int v7 = (os_log_s *)AFSiriLogContextDeviceSync;
    if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[ADDeviceSyncSession _handlePullGenerationsForDataTypes:completion:]_block_invoke_3";
      __int16 v10 = 2112;
      id v11 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s error = %@", buf, 0x16u);
    }

    (*(void (**)(void, void, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL, v5);
  }
}

void sub_10012F42C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 56)));
  [v2 setObject:v3 forKey:*(void *)(a1 + 40)];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10012F484(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a2;
  LOBYTE(a3) = objc_msgSend( v5,  "_handlePushedOrPulledGeneration:forDataType:",  objc_msgSend(a3, "unsignedLongLongValue"),  v6);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) |= a3;
}

void sub_10012F4EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  _DWORD v3[2] = sub_10012FD98;
  void v3[3] = &unk_1004FD6F0;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  [v2 _handlePingWithCompletion:v3];
}

void sub_10012F574(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 generationsByDataType]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10012FC70;
  v5[3] = &unk_1004FD6F0;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [v3 _handlePushGenerationsByDataType:v4 completion:v5];
}

void sub_10012F61C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 dataTypes]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10012FB0C;
  v5[3] = &unk_1004F4150;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [v3 _handlePullGenerationsForDataTypes:v4 completion:v5];
}

void sub_10012F6C4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dataType]);
  id v6 = [v4 generation];
  id v7 = [v4 limit];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10012F9A8;
  v8[3] = &unk_1004FD718;
  id v10 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 40);
  [v3 _handlePullDeltaForDataType:v5 generation:v6 limit:v7 completion:v8];
}

void sub_10012F79C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 dataType]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_10012F844;
  v5[3] = &unk_1004F26D0;
  id v7 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 40);
  [v3 _handlePullSnapshotForDataType:v4 completion:v5];
}

void sub_10012F844(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v5)
    {
      id v7 = 0LL;
    }

    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_10012F924;
      v9[3] = &unk_1004F25E0;
      id v10 = *(id *)(a1 + 32);
      id v11 = v8;
      id v7 = +[ADDeviceSyncMessage newWithBuilder:](&OBJC_CLASS___ADDeviceSyncMessage, "newWithBuilder:", v9);

      uint64_t v6 = *(void *)(a1 + 40);
    }

    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_10012F924(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setSequence:", objc_msgSend(v3, "sequence"));
  [v4 setType:10];
  id v5 = -[ADDeviceSyncCommandPullSnapshotResponse initWithSnapshot:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPullSnapshotResponse),  "initWithSnapshot:",  *(void *)(a1 + 40));
  [v4 setCommandPullSnapshotResponse:v5];
}

void sub_10012F9A8(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v5)
    {
      id v7 = 0LL;
    }

    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_10012FA88;
      v9[3] = &unk_1004F25E0;
      id v10 = *(id *)(a1 + 32);
      id v11 = v8;
      id v7 = +[ADDeviceSyncMessage newWithBuilder:](&OBJC_CLASS___ADDeviceSyncMessage, "newWithBuilder:", v9);

      uint64_t v6 = *(void *)(a1 + 40);
    }

    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_10012FA88(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setSequence:", objc_msgSend(v3, "sequence"));
  [v4 setType:8];
  id v5 = -[ADDeviceSyncCommandPullDeltaResponse initWithIncrementalChanges:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPullDeltaResponse),  "initWithIncrementalChanges:",  *(void *)(a1 + 40));
  [v4 setCommandPullDeltaResponse:v5];
}

void sub_10012FB0C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v5)
    {
      id v7 = 0LL;
    }

    else
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_10012FBEC;
      v9[3] = &unk_1004F25E0;
      id v10 = *(id *)(a1 + 32);
      id v11 = v8;
      id v7 = +[ADDeviceSyncMessage newWithBuilder:](&OBJC_CLASS___ADDeviceSyncMessage, "newWithBuilder:", v9);

      uint64_t v6 = *(void *)(a1 + 40);
    }

    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_10012FBEC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setSequence:", objc_msgSend(v3, "sequence"));
  [v4 setType:6];
  id v5 = -[ADDeviceSyncCommandPullGenerationsResponse initWithGenerationsByDataType:]( objc_alloc(&OBJC_CLASS___ADDeviceSyncCommandPullGenerationsResponse),  "initWithGenerationsByDataType:",  *(void *)(a1 + 40));
  [v4 setCommandPullGenerationsResponse:v5];
}

void sub_10012FC70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    id v6 = v3;
    if (v3)
    {
      id v5 = 0LL;
    }

    else
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      _DWORD v7[2] = sub_10012FD28;
      v7[3] = &unk_1004F2590;
      id v8 = *(id *)(a1 + 32);
      id v5 = +[ADDeviceSyncMessage newWithBuilder:](&OBJC_CLASS___ADDeviceSyncMessage, "newWithBuilder:", v7);

      uint64_t v4 = *(void *)(a1 + 40);
    }

    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

    id v3 = v6;
  }
}

void sub_10012FD28(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "setSequence:", objc_msgSend(v2, "sequence"));
  [v3 setType:4];
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___ADDeviceSyncCommandPushGenerationsResponse);
  [v3 setCommandPushGenerationsResponse:v4];
}

void sub_10012FD98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    id v6 = v3;
    if (v3)
    {
      id v5 = 0LL;
    }

    else
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      _DWORD v7[2] = sub_10012FE50;
      v7[3] = &unk_1004F2590;
      id v8 = *(id *)(a1 + 32);
      id v5 = +[ADDeviceSyncMessage newWithBuilder:](&OBJC_CLASS___ADDeviceSyncMessage, "newWithBuilder:", v7);

      uint64_t v4 = *(void *)(a1 + 40);
    }

    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

    id v3 = v6;
  }
}

void sub_10012FE50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "setSequence:", objc_msgSend(v2, "sequence"));
  [v3 setType:2];
}

void sub_10012FEA0(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(a1 + 32) preferredPullingModeForDeviceWithIdentifier:*(void *)(*(void *)(a1 + 40) + 56) fromGeneration:*(void *)(a1 + 72) toGeneration:a2];
  if (v4 == (id)2)
  {
    id v10 = *(dispatch_queue_s **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001300AC;
    block[3] = &unk_1004FBF48;
    id v6 = &v13;
    objc_copyWeak(&v13, (id *)(a1 + 64));
    id v7 = &v12;
    id v12 = *(id *)(a1 + 56);
    id v8 = block;
    id v9 = v10;
  }

  else
  {
    if (v4 != (id)1) {
      return;
    }
    id v5 = *(dispatch_queue_s **)(a1 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10012FFD4;
    void v14[3] = &unk_1004FB658;
    id v6 = v16;
    objc_copyWeak(v16, (id *)(a1 + 64));
    id v7 = &v15;
    id v15 = *(id *)(a1 + 56);
    v16[1] = a2;
    id v8 = v14;
    id v9 = v5;
  }

  dispatch_async(v9, v8);

  objc_destroyWeak(v6);
}

void sub_10012FFD4(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001301DC;
  v6[3] = &unk_1004F2518;
  objc_copyWeak(&v8, v2);
  id v7 = *(id *)(a1 + 32);
  [WeakRetained _pullDeltaForDataType:v4 generation:v5 limit:0 completion:v6];

  objc_destroyWeak(&v8);
}

void sub_100130098(_Unwind_Exception *a1)
{
}

void sub_1001300AC(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100130178;
  v5[3] = &unk_1004F2540;
  objc_copyWeak(&v7, v2);
  id v6 = *(id *)(a1 + 32);
  [WeakRetained _pullSnapshotForDataType:v4 completion:v5];

  objc_destroyWeak(&v7);
}

void sub_100130164(_Unwind_Exception *a1)
{
}

void sub_100130178(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    if (!a3)
    {
      uint64_t v4 = (id *)(a1 + 40);
      id v5 = a2;
      id WeakRetained = objc_loadWeakRetained(v4);
      [WeakRetained _handlePulledSnapshot:v5 forDataType:*(void *)(a1 + 32)];
    }
  }

void sub_1001301DC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!v7 || v5)
  {
    id WeakRetained = (id)objc_claimAutoreleasedReturnValue([v5 domain]);
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained _handlePulledDeltaWithIncrementalChanges:v7 forDataType:*(void *)(a1 + 32)];
  }
}

id sub_10013027C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendMessage:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_10013028C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _receiveMessage:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_10013029C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1001302A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pushGenerationsByDataType:*(void *)(a1 + 40) completion:0];
}

id sub_1001302B4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 deviceIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1001307AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
}

void sub_100130A4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
}

void sub_100130ACC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100130B94;
  block[3] = &unk_1004F2858;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  uint64_t v10 = *(void *)(a1 + 48);
  char v12 = *(_BYTE *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void sub_100130B94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    if (*(void *)(a1 + 32))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
      uint64_t v4 = AFRemoraEndpointConnectionErrorDomain;
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  4LL,  v5));

      v9[8] = *(_BYTE *)(a1 + 64);
    }

    else
    {
      id v6 = 0LL;
      *((_BYTE *)WeakRetained + _Block_object_dispose(va, 8) = 3;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, void, void *))(v8 + 16))( v8,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  v6);
    }

    goto LABEL_10;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    id v9 = 0LL;
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, *(void *)(a1 + 32) == 0LL);
LABEL_10:
    id v3 = v9;
  }
}

void sub_100130CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100130D6C;
  block[3] = &unk_1004F2858;
  objc_copyWeak(&v11, (id *)(a1 + 56));
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  uint64_t v10 = *(void *)(a1 + 48);
  char v12 = *(_BYTE *)(a1 + 64);
  id v6 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v11);
}

void sub_100130D6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v9 = WeakRetained;
    if (*(void *)(a1 + 32))
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
      uint64_t v4 = AFRemoraEndpointConnectionErrorDomain;
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  2LL,  v5));

      v9[8] = *(_BYTE *)(a1 + 64);
    }

    else
    {
      id v6 = 0LL;
      *((_BYTE *)WeakRetained + _Block_object_dispose(va, 8) = 0;
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, void, void *))(v8 + 16))( v8,  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  v6);
    }

    goto LABEL_10;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    id v9 = 0LL;
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, *(void *)(a1 + 32) == 0LL);
LABEL_10:
    id v3 = v9;
  }
}

void sub_100131F58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1001328B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_100132C94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100132CA4(uint64_t a1)
{
}

void sub_100132CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = v4;
    *(_DWORD *)__int128 buf = 136315394;
    id v23 = "-[ADSettingsService _setNoiseManagement:completion:]_block_invoke";
    __int16 v24 = 2048;
    id v25 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %lu connected devices", buf, 0x16u);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v10);
        char v12 = (void *)objc_claimAutoreleasedReturnValue( +[ADBluetoothManager sharedInstance]( &OBJC_CLASS___ADBluetoothManager,  "sharedInstance",  (void)v17));
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceWithUID:v13]);

        id v15 = sub_100132EAC(v14, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

        if (!v16) {
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) enqueueObject:v14];
        }

        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v8);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_100132EAC(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (v3)
  {
    *(void *)&__int128 v55 = 0LL;
    *((void *)&v55 + 1) = &v55;
    uint64_t v56 = 0x2020000000LL;
    char v57 = 0;
    uint64_t v47 = 0LL;
    __int128 v48 = &v47;
    uint64_t v49 = 0x2020000000LL;
    char v50 = 0;
    uint64_t v43 = 0LL;
    __int128 v44 = &v43;
    uint64_t v45 = 0x2020000000LL;
    char v46 = 0;
    uint64_t v39 = 0LL;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000LL;
    char v42 = 0;
    uint64_t v4 = dispatch_group_create();
    uint64_t v35 = 0LL;
    __int16 v36 = &v35;
    uint64_t v37 = 0x2020000000LL;
    char v38 = 1;
    dispatch_group_enter(v4);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1001335C0;
    void v31[3] = &unk_1004F29D0;
    id v33 = &v55;
    id v34 = &v35;
    id v5 = v4;
    id v32 = v5;
    [v3 getHeadphoneInEarDetectionState:v31];
    uint64_t v27 = 0LL;
    uint64_t v28 = &v27;
    uint64_t v29 = 0x2020000000LL;
    char v30 = 1;
    dispatch_group_enter(v5);
    __int128 v18 = _NSConcreteStackBlock;
    uint64_t v19 = 3221225472LL;
    __int128 v20 = sub_100133640;
    id v21 = &unk_1004F29F8;
    id v23 = &v47;
    __int16 v24 = &v43;
    id v25 = &v39;
    uint64_t v26 = &v27;
    id v6 = v5;
    id v22 = v6;
    [v3 getDeviceInfo:&v18];
    dispatch_time_t v7 = dispatch_time(0LL, 4000000000LL);
    dispatch_group_wait(v6, v7);
    if (*((_BYTE *)v36 + 24) || *((_BYTE *)v28 + 24))
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_5;
      }
      *(_DWORD *)__int128 buf = 136315138;
      xpc_connection_t v52 = "ADValidateBluetoothDeviceForNoiseManagement";
      uint64_t v14 = "%s Bluetooth device timed out when trying to query in-ear or listening mode status";
    }

    else
    {
      if (*(_BYTE *)(*((void *)&v55 + 1) + 24LL))
      {
        uint64_t v10 = 0LL;
        switch(a2)
        {
          case 0LL:
            if (*((_BYTE *)v44 + 24) || *((_BYTE *)v48 + 24)) {
              goto LABEL_24;
            }
            goto LABEL_16;
          case 3LL:
            uint64_t v13 = v48;
            goto LABEL_23;
          case 4LL:
            uint64_t v13 = v44;
            goto LABEL_23;
          case 5LL:
LABEL_16:
            uint64_t v13 = v40;
LABEL_23:
            if (*((_BYTE *)v13 + 24))
            {
LABEL_24:
              uint64_t v10 = 0LL;
              goto LABEL_7;
            }

            id v15 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              uint64_t Name = AFBluetoothHeadphoneListeningModeGetName(a2);
              __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(Name);
              *(_DWORD *)__int128 buf = 136315394;
              xpc_connection_t v52 = "ADValidateBluetoothDeviceForNoiseManagement";
              __int16 v53 = 2112;
              id v54 = v17;
              _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device does not support noise management for listening mode: %@",  buf,  0x16u);
            }

            uint64_t v9 = &SASettingConnectedHeadsetNoiseManagementUnsupportedErrorCode;
            break;
          default:
            goto LABEL_7;
        }

        goto LABEL_6;
      }

      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_5:
        uint64_t v9 = &SASettingNoHeadsetConnectedErrorCode;
LABEL_6:
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  *v9,  0LL,  v18,  v19,  v20,  v21));
LABEL_7:

        _Block_object_dispose(&v27, 8);
        _Block_object_dispose(&v35, 8);

        _Block_object_dispose(&v39, 8);
        _Block_object_dispose(&v43, 8);
        _Block_object_dispose(&v47, 8);
        _Block_object_dispose(&v55, 8);
        goto LABEL_11;
      }

      *(_DWORD *)__int128 buf = 136315138;
      xpc_connection_t v52 = "ADValidateBluetoothDeviceForNoiseManagement";
      uint64_t v14 = "%s Bluetooth device is not in-ear or not connected";
    }

    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v14, buf, 0xCu);
    goto LABEL_5;
  }

  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v55) = 136315138;
    *(void *)((char *)&v55 + 4) = "ADValidateBluetoothDeviceForNoiseManagement";
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Unable to determine noise management mode because there is no bluetooth device",  (uint8_t *)&v55,  0xCu);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  SASettingNoHeadsetConnectedErrorCode,  0LL));
LABEL_11:

  return v10;
}

void sub_10013333C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_1001333A4(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001333C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "-[ADSettingsService _setNoiseManagement:completion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to set device noise management mode, %@",  (uint8_t *)&v8,  0x16u);
    }

    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  SASettingConnectedHeadsetNoiseManagementSiriControlUnsupportedErrorCode,  0LL));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    dispatch_time_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001334E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "-[ADSettingsService _setNoiseManagement:completion:]_block_invoke";
      __int16 v7 = 2112;
      id v8 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to set device noise management mode for secondary device, %@",  (uint8_t *)&v5,  0x16u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001335C0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 primaryInEarStatus];
  id v4 = [v6 secondaryInEarStatus];
  char v5 = 1;
  if (v3 != (id)3 && v4 != (id)3) {
    char v5 = [v6 isEnabled] ^ 1;
  }
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v5;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100133640(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 supportsListeningModeANC];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 supportsListeningModeTransparency];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v3 supportsListeningModeAutomatic];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    char v5 = v4;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
    int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    int v9 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    int v10 = 136316162;
    id v11 = "ADValidateBluetoothDeviceForNoiseManagement_block_invoke_2";
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Bluetooth device %@ supportsNoiseCancellationMode:%d supportsAudioTransparencyMode:%d supportsAutomaticMode: %d",  (uint8_t *)&v10,  0x28u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001337B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    char v5 = v4;
    *(_DWORD *)__int128 buf = 136315394;
    id v23 = "-[ADSettingsService _getNoiseManagement:completion:]_block_invoke";
    __int16 v24 = 2048;
    id v25 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %lu connected devices", buf, 0x16u);
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v18;
    do
    {
      int v10 = 0LL;
      do
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v10);
        __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[ADBluetoothManager sharedInstance]( &OBJC_CLASS___ADBluetoothManager,  "sharedInstance",  (void)v17));
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceWithUID:v13]);

        id v15 = sub_100132EAC(v14, 0LL);
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

        if (!v16) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v14);
        }

        int v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v8);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001339AC(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001339CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if ([*(id *)(a1 + 32) isEqualToString:SASettingAudioCategorySIRIValue])
    {
      id v4 = @"VoiceCommand";
    }

    else
    {
      if (![*(id *)(a1 + 32) isEqualToString:SASettingAudioCategoryMUSICValue])
      {
        id v7 = 0LL;
LABEL_11:
        id v8 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v14 = 136315394;
          id v15 = "-[ADSettingsService _getPlaybackAudioRoute:completion:]_block_invoke";
          __int16 v16 = 2112;
          id v17 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s audioRoute = %@", (uint8_t *)&v14, 0x16u);
        }

        if ([v7 isEqualToString:@"Speaker"])
        {
          uint64_t v9 = (id *)&SASettingAudioRouteTypeBUILT_INValue;
        }

        else if ([v7 isEqualToString:@"MicrophoneWired"])
        {
          uint64_t v9 = (id *)&SASettingAudioRouteTypeWIRED_HEADSETValue;
        }

        else if (([v7 isEqualToString:@"HeadsetBT"] & 1) != 0 {
               || ([v7 isEqualToString:@"HeadphonesBT"] & 1) != 0)
        }
        {
          uint64_t v9 = (id *)&SASettingAudioRouteTypeBLUETOOTH_HEADSETValue;
        }

        else if ([v7 isEqualToString:@"CarAudioOutput"])
        {
          uint64_t v9 = (id *)&SASettingAudioRouteTypeCAR_AUDIOValue;
        }

        else
        {
          uint64_t v9 = (id *)&SASettingAudioRouteTypeAIRPLAYValue;
        }

        id v10 = *v9;
        if (v10)
        {
LABEL_22:
          id v11 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            int v14 = 136315394;
            id v15 = "-[ADSettingsService _getPlaybackAudioRoute:completion:]_block_invoke";
            __int16 v16 = 2112;
            id v17 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s audioRouteType = %@",  (uint8_t *)&v14,  0x16u);
          }

          id v12 = objc_alloc_init(&OBJC_CLASS___SASettingAudioRoute);
          [v12 setAudioRouteType:v10];
          id v13 = objc_alloc_init(&OBJC_CLASS___SASettingGetAudioRouteResponse);
          [v13 setAudioRoute:v12];
          (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

          goto LABEL_25;
        }

void sub_100133D0C(id a1, BOOL a2)
{
}

BOOL sub_100133D14(id a1)
{
  return _AXSVoiceOverTouchEnabled(a1) != 0;
}

id sub_100133D30(uint64_t a1)
{
  return sub_1001EBF24(*(void **)(*(void *)(a1 + 32) + 64LL));
}

void sub_100133D44(uint64_t a1, uint64_t a2)
{
}

void sub_100133F74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100134020(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v9 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s OPPSPK - Listening for voice pause", buf, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[AFHeadphonesAnnouncementRequestCapabilityProvider provider]( &OBJC_CLASS___ADHeadphonesAnnouncementRequestCapabilityProvider,  "provider"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_100134138;
  v5[3] = &unk_1004F2A88;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  [v3 fetchCurrentlyRoutedHeadphonesCBUUIDWithCompletion:v5];
}

void sub_100134138(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32LL), a2);
    char v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)__int128 buf = 136315394;
      id v22 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s OPPSPK - Chose device %@", buf, 0x16u);
    }

    __int128 v7 = objc_alloc_init(&OBJC_CLASS___CSOpportuneSpeakListenerOption);
    -[CSOpportuneSpeakListenerOption setDeviceId:](v7, "setDeviceId:", *(void *)(*(void *)(a1 + 32) + 32LL));
    -[CSOpportuneSpeakListenerOption setOpportuneSpeakListeningType:](v7, "setOpportuneSpeakListeningType:", 0LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _detector]);
    float v9 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    float v10 = *(double *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    void v19[2] = sub_1001343A0;
    v19[3] = &unk_1004F2A38;
    id v11 = *(void **)(a1 + 40);
    void v19[4] = *(void *)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    id v20 = v11;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100134470;
    void v17[3] = &unk_1004F2A60;
    id v12 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    id v18 = v12;
    *(float *)&double v13 = v9;
    *(float *)&double v14 = v10;
    [v8 listenForPauseWithOptions:v7 forPause:1 maxDelay:v19 stopOnDetection:v17 executeOnSuccess:v13 onFail:v14];
  }

  else
  {
    id v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v22 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s No preferred external headphones route found",  buf,  0xCu);
    }

    LODWORD(vmemset((void *)(v1 - 204), 50, 16) = 0;
    [*(id *)(*(void *)(a1 + 32) + 8) modelWithIdentifier:*(void *)(*(void *)(a1 + 32) + 48) didUpdateScore:*(void *)(a1 + 40) forSpeakable:v16];
  }
}