uint64_t sub_1001343A0(uint64_t a1)
{
  os_log_s *v2;
  double v3;
  uint64_t v4;
  void *v5;
  int v7;
  const char *v8;
  v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    v7 = 136315138;
    v8 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s OPPSPK - Voice pause detected",  (uint8_t *)&v7,  0xCu);
  }

  LODWORD(v3) = 1.0;
  [*(id *)(*(void *)(a1 + 32) + 8) modelWithIdentifier:*(void *)(*(void *)(a1 + 32) + 48) didUpdateScore:*(void *)(a1 + 40) forSpeakable:v3];
  v4 = *(void *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0LL;

  return 0LL;
}

uint64_t sub_100134470(uint64_t a1)
{
  v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315138;
    v8 = "-[ADOpportuneSpeakingVoiceActivityModel setSpeakable:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s OPPSPK - Voice pause not detected",  (uint8_t *)&v7,  0xCu);
  }

  LODWORD(v3) = 0;
  [*(id *)(*(void *)(a1 + 32) + 8) modelWithIdentifier:*(void *)(*(void *)(a1 + 32) + 48) didUpdateScore:*(void *)(a1 + 40) forSpeakable:v3];
  uint64_t v4 = *(void *)(a1 + 32);
  v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0LL;

  return 0LL;
}

void sub_100134B88(_Unwind_Exception *a1)
{
}

void sub_1001353E8(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  if (v2[4])
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([v2 _service]);
    [v3 reset];
    [*(id *)(a1 + 32) _configureWithCurrentASBD];
    *(void *)(*(void *)(a1 + 32) + 32LL) = 0LL;
  }

void sub_10013544C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (double)*(unint64_t *)(v2 + 32) / *(double *)(v2 + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10013550C;
  v6[3] = &unk_1004F7248;
  v6[4] = v2;
  *(double *)&v6[5] = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([(id)v2 _serviceWithErrorHandler:v6]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1001355FC;
  v5[3] = &unk_1004F2B00;
  v5[4] = *(void *)(a1 + 32);
  *(double *)&v5[5] = v3;
  [v4 getSignature:v5];
}

void sub_10013550C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    int v7 = "-[ADAcousticFingerprinter flush]_block_invoke_2";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v6, 0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:0 duration:*(double *)(a1 + 40)];
}

void sub_1001355FC(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 24LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:v4 duration:*(double *)(a1 + 40)];
}

void sub_10013565C(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) length] / *(unsigned int *)(*(void *)(a1 + 40) + 64);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _convertPCMDataForFingerprinting:*(void *)(a1 + 32)]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _service]);
  [v4 appendAcousticData:v3 sampleCount:v2 sampleRate:sub_100135848((uint64_t)*(double *)(*(void *)(a1 + 40) + 48))];

  *(void *)(*(void *)(a1 + 40) + 32LL) += (int)v2;
  v5 = *(void **)(a1 + 40);
  if (v5[4] > v5[5])
  {
    *(void *)(*(void *)(a1 + 40) + 40) += [v5 _samplesPerInterval];
    uint64_t v6 = *(void *)(a1 + 40);
    double v7 = (double)*(unint64_t *)(v6 + 32) / *(double *)(v6 + 48);
    __int16 v8 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      v13 = "-[ADAcousticFingerprinter appendPCMData:]_block_invoke";
      __int16 v14 = 2048;
      double v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Getting signature for duration %lf",  buf,  0x16u);
      uint64_t v6 = *(void *)(a1 + 40);
    }

    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100135984;
    v11[3] = &unk_1004F7248;
    v11[4] = v6;
    *(double *)&v11[5] = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([(id)v6 _serviceWithErrorHandler:v11]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100135A74;
    v10[3] = &unk_1004F2B00;
    v10[4] = *(void *)(a1 + 40);
    *(double *)&v10[5] = v7;
    [v9 getSignature:v10];
  }
}

uint64_t sub_100135848(uint64_t a1)
{
  if (a1 > 31999)
  {
    switch(a1)
    {
      case 32000LL:
        return 32000LL;
      case 44100LL:
        return 44100LL;
      case 48000LL:
        return 48000LL;
    }
  }

  else
  {
    switch(a1)
    {
      case 8000LL:
        return 8000LL;
      case 11025LL:
        return 11025LL;
      case 16000LL:
        return 16000LL;
    }
  }

  id v3 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    v5 = "ASXSampleRateFromInt";
    __int16 v6 = 2050;
    uint64_t v7 = a1;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Fingerprinter doesn't support rate %{public}ld",  (uint8_t *)&v4,  0x16u);
  }

  return 16000LL;
}

void sub_100135984(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADAcousticFingerprinter appendPCMData:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v6, 0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:0 duration:*(double *)(a1 + 40)];
}

void sub_100135A74(uint64_t a1, void *a2)
{
  id v3 = (id *)(*(void *)(a1 + 32) + 24LL);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained acousticFingerprinter:*(void *)(a1 + 32) hasFingerprint:v4 duration:*(double *)(a1 + 40)];
}

uint64_t sub_100135AD4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *a2 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)a3 = 1;
  *(_DWORD *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = [*(id *)(a1 + 32) bytes];
  *(_DWORD *)(a3 + 12) = [*(id *)(a1 + 32) length];
  return 0LL;
}

uint64_t sub_100135B28(int a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  __int16 v8 = (uint64_t (**)(id, uint64_t, uint64_t, uint64_t))objc_retainBlock(a5);
  uint64_t v9 = v8[2](v8, a2, a3, a4);

  return v9;
}

double sub_100135B80(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 88LL) = result;
  return result;
}

void sub_100135B90(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _connectionInterrupted];
}

void sub_100135BBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _connectionInvalidated];
}

void sub_100139FFC(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteQueryCriterion isQueryCriterionWithColumnName:value:negation:]( &OBJC_CLASS___SiriCoreSQLiteQueryCriterion,  "isQueryCriterionWithColumnName:value:negation:",  @"status",  &off_1005132E8,  0LL));
    v7[0] = v2;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 48)));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteQueryCriterion isQueryCriterionWithColumnName:value:negation:]( &OBJC_CLASS___SiriCoreSQLiteQueryCriterion,  "isQueryCriterionWithColumnName:value:negation:",  @"delivery_stream",  v3,  0LL));
    v7[1] = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v7, 2LL));
    int v6 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteQueryCriterion andQueryCriterionWithSubcriteria:]( &OBJC_CLASS___SiriCoreSQLiteQueryCriterion,  "andQueryCriterionWithSubcriteria:",  v5));

    [*(id *)(a1 + 32) _countQueuedEventRecordsWithCriteria:v6 withCompletion:*(void *)(a1 + 40)];
  }

void sub_10013A124(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[SiriCoreSQLiteQueryCriterion isQueryCriterionWithColumnName:value:negation:]( &OBJC_CLASS___SiriCoreSQLiteQueryCriterion,  "isQueryCriterionWithColumnName:value:negation:",  @"status",  &off_1005132E8,  0LL));
    [*(id *)(a1 + 32) _countQueuedEventRecordsWithCriteria:v2 withCompletion:*(void *)(a1 + 40)];
  }

void sub_10013A198(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = [[SiriCoreSQLiteIndexDescription alloc] initWithName:v6 tableName:@"events" columnNames:v5 options:0];

  [v4 createIndex:v7 error:0];
}

void sub_10013A220(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  id v8 = 0LL;
  id v5 = [v2 _updateRecordsWithSpeechId:v3 toUpdatedSpeechId:v4 error:&v8];
  id v6 = v8;
  uint64_t v7 = a1[7];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_10013A28C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(dispatch_queue_s **)(v1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10013A300;
  v4[3] = &unk_1004FD990;
  v4[4] = v1;
  id v5 = v2;
  dispatch_async(v3, v4);
}

void sub_10013A300(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v8 = 0LL;
  id v3 = [v2 checkpointWriteAheadLogWithError:&v8];
  id v4 = v8;
  id v5 = (os_log_s *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
    *(_DWORD *)buf = 136315394;
    v10 = "-[ADAnalyticsStore checkpointWithCompletion:]_block_invoke_2";
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Checkpointed write-ahead log (%@)...",  buf,  0x16u);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v3, v4);
  }
}

void sub_10013A404(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v8 = 0LL;
  id v3 = [v2 _resetForReason:@"Settings Client" error:&v8];
  id v4 = v8;
  id v5 = (os_log_s *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
    *(_DWORD *)buf = 136315394;
    v10 = "-[ADAnalyticsStore resetWithCompletion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Reset analytics store (%@).", buf, 0x16u);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v3, v4);
  }
}

void sub_10013A50C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned int v3 = [v2 fileExistsAtPath:*(void *)(*(void *)(a1 + 32) + 32) isDirectory:0];

  id v4 = 0LL;
  if (!v3) {
    goto LABEL_14;
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
  id v25 = 0LL;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 attributesOfItemAtPath:v6 error:&v25]);
  id v4 = v25;

  if (!v7)
  {
    v17 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)buf = 136315394;
      v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v18;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Unable to get file attributes of analytics store (%@).",  buf,  0x16u);
    }

    goto LABEL_14;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:NSFileSize]);
  uint64_t v9 = v8;
  if (!v8)
  {
    v19 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)buf = 136315394;
      v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s Unable to get file size of analytics store (%@).",  buf,  0x16u);
    }

    goto LABEL_13;
  }

  if ((unint64_t)[v8 unsignedLongLongValue] <= 0x10000000)
  {
    +[ADCoreAnalyticsSideChannel logAnalyticsLocalStorageSnapshotWithSize:]( &OBJC_CLASS___ADCoreAnalyticsSideChannel,  "logAnalyticsLocalStorageSnapshotWithSize:",  v9);
LABEL_13:

    goto LABEL_14;
  }

  v10 = *(void **)(a1 + 32);
  __int16 v11 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Large File Size (%@)",  v9);
  id v24 = v4;
  unsigned int v12 = [v10 _resetForReason:v11 error:&v24];
  id v13 = v24;

  +[ADCoreAnalyticsSideChannel logAnalyticsLocalStoragePurgedWithSize:]( &OBJC_CLASS___ADCoreAnalyticsSideChannel,  "logAnalyticsLocalStoragePurgedWithSize:",  v9);
  if (v12)
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextAnalytics;
    uint64_t v15 = 1LL;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)buf = 136315394;
      v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
      __int16 v28 = 2112;
      uint64_t v29 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Purged data from analytics store (%@)...",  buf,  0x16u);
    }

    goto LABEL_17;
  }

  id v4 = v13;
LABEL_14:
  v21 = (os_log_s *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 32LL);
    *(_DWORD *)buf = 136315650;
    v27 = "-[ADAnalyticsStore purgeWithCompletion:]_block_invoke";
    __int16 v28 = 2112;
    uint64_t v29 = v23;
    __int16 v30 = 2112;
    id v31 = v4;
    _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s Failed to purge data from analytics store (%@) due to error %@.",  buf,  0x20u);
  }

  uint64_t v15 = 0LL;
  id v13 = v4;
LABEL_17:
  uint64_t v22 = *(void *)(a1 + 40);
  if (v22) {
    (*(void (**)(uint64_t, uint64_t, id))(v22 + 16))(v22, v15, v13);
  }
}

void sub_10013A880(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  unsigned int v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v8 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 _fetchEventRecordsCreatedAfterDate:v4 error:&v8]);
  id v6 = v8;
  objc_autoreleasePoolPop(v2);
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_10013A900(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v7 = 0LL;
  id v4 = [v2 _purgeDeletedEventRecordsBeforeOrEqualToDate:v3 error:&v7];
  id v5 = v7;
  uint64_t v6 = a1[6];
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v4, v5);
  }
}

void sub_10013A96C(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v9 = 0LL;
  [v5 _deleteEventRecordsFromStartTime:v3 toEndTime:v4 eventStreamUID:v6 error:&v9];
  id v7 = v9;
  objc_autoreleasePoolPop(v2);
  uint64_t v8 = a1[6];
  if (v8) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, 0LL, v7);
  }
}

void sub_10013A9E4(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v8 = 0LL;
  id v5 = [v3 _deleteEventRecordsWithRecordIDs:v4 error:&v8];
  id v6 = v8;
  objc_autoreleasePoolPop(v2);
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_10013AA5C(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  id v11 = 0LL;
  id v8 = [v5 _deleteEventRecordsBeforeOrEqualToTimestamp:v3 deliveryStream:v4 eventStreamUID:v6 streamSpeechId:v7 error:&v11];
  id v9 = v11;
  objc_autoreleasePoolPop(v2);
  uint64_t v10 = a1[7];
  if (v10) {
    (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v8, v9);
  }
}

void sub_10013AADC(void *a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[10];
  id v12 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( [v5 _fetchEventRecords:v3 afterTimestamp:v4 eventStreamUID:v6 streamSpeechId:v7 deliveryStream:v8 error:&v12]);
  id v10 = v12;
  objc_autoreleasePoolPop(v2);
  uint64_t v11 = a1[7];
  if (v11) {
    (*(void (**)(uint64_t, void *, id))(v11 + 16))(v11, v9, v10);
  }
}

void sub_10013AB68(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void **)(a1 + 32);
  id v7 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _fetchEventStreamUIDsWithError:&v7]);
  id v5 = v7;
  objc_autoreleasePoolPop(v2);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, v4, v5);
  }
}

void sub_10013ABE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10013AC74;
  block[3] = &unk_1004FD9E0;
  block[4] = v2;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_10013AC74(void *a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v8 = 0LL;
  id v5 = [v3 _insertEventRecords:v4 error:&v8];
  id v6 = v8;
  objc_autoreleasePoolPop(v2);
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v6);
  }
}

void sub_10013B714(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADFlowServiceListener listener:shouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Flow Service Connection Invalidated (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_10013B7CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADFlowServiceListener listener:shouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Flow Service Connection Interrupted (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void *sub_10013B884(void *result)
{
  if (!*(void *)(result[4] + 8LL))
  {
    uint64_t v1 = result;
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315138;
      id v8 = "-[ADFlowServiceListener setupListener]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", (uint8_t *)&v7, 0xCu);
    }

    int v3 = objc_alloc(&OBJC_CLASS___NSXPCListener);
    int v4 = -[NSXPCListener initWithMachServiceName:](v3, "initWithMachServiceName:", kAssistantFlowServiceName);
    uint64_t v5 = v1[4];
    __int16 v6 = *(void **)(v5 + 8);
    *(void *)(v5 + 8) = v4;

    objc_msgSend(*(id *)(v1[4] + 8), "setDelegate:");
    return [*(id *)(v1[4] + 8) resume];
  }

  return result;
}

void sub_10013CB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10013D86C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10013D878(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10013D884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10013D890(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10013D89C(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_10013EB28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didLaunchAppForRequestWithIdentifier:*(void *)(a1 + 40)];
}

id sub_10013EB34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _didLaunchAppForRequestWithIdentifier:*(void *)(a1 + 40)];
}

void sub_10013EB40(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_sendCommandToServer:");
  }

  else
  {
    uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v2 = 136315138;
      int v3 = "-[ADCommandCenter(NanoServices) taskmaster:didReceivePunchoutOutcome:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s called with nil punchoutOutcome.",  (uint8_t *)&v2,  0xCu);
    }
  }

void sub_10013F828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10013F9A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10013FD80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10013FDD4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10013FDE4(uint64_t a1)
{
}

void sub_10013FDEC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (v7 || (uint64_t v8 = objc_opt_class(&OBJC_CLASS___KVFullDatasetStream), (objc_opt_isKindOfClass(v6, v8) & 1) == 0))
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      id v12 = "-[ADVocabDonationBridge _createStreamWithDonator:error:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Error Occured when creating Stream %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v9 = a1 + 40;
  }

  else
  {
    uint64_t v9 = a1 + 48;
    a3 = a2;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)v9 + 8LL) + 40LL), a3);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10013FF20(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10013FF6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v16 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 _convertObjectToItems:v3 error:&v16]);
  id v6 = v16;
  if (v5)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_100140118;
    v13[3] = &unk_1004F2BA0;
    __int128 v14 = *(_OWORD *)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 48);
    [v5 enumerateObjectsUsingBlock:v13];
  }

  else
  {
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___SAHomeMemberInfo);
    if ((objc_opt_isKindOfClass(v3, v7) & 1) != 0) {
      uint64_t v8 = v3;
    }
    else {
      uint64_t v8 = 0LL;
    }
    id v9 = v8;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 sharedUserId]);
    int v11 = (void *)AFMultiUserDefaultSharedUserId;

    if (v10 != v11)
    {
      id v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        uint64_t v18 = "-[ADVocabDonationBridge addToStream:error:]_block_invoke";
        __int16 v19 = 2112;
        id v20 = v3;
        __int16 v21 = 2112;
        id v22 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Error converting object %@ to KVItem with error %@. Skipping.",  buf,  0x20u);
      }
    }
  }
}

void sub_100140118(void *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = a1[5];
  uint64_t v7 = *(void **)(a1[4] + 8LL);
  uint64_t v8 = *(void *)(v6 + 8);
  id obj = *(id *)(v8 + 40);
  unsigned __int8 v9 = [v7 registerItem:a2 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if ((v9 & 1) == 0)
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 0;
  }

void sub_100140560(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v18 = "+[ADVocabDonationBridge bulkDonateHomeMemberInfo:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting HomeMember vocab donation.", buf, 0xCu);
  }

  id v3 = (void *)objc_opt_class(*(void *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v16 = 0LL;
  LODWORD(v4) = [v3 _bulkDonate:v4 withAppId:@"HomeMemberInfo" itemClass:objc_opt_class(SAPerson) error:&v16];
  id v5 = v16;
  uint64_t v6 = v5;
  if ((_DWORD)v4)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v18 = "+[ADVocabDonationBridge bulkDonateHomeMemberInfo:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s HomeMember vocab donation completed successfully.",  buf,  0xCu);
    }
  }

  else if ([v5 code] == (id)11 || objc_msgSend(v6, "code") == (id)13)
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "+[ADVocabDonationBridge bulkDonateHomeMemberInfo:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s HomeMember vocab donation retrying, previous donation failed with error: %@",  buf,  0x16u);
    }

    unsigned __int8 v9 = (void *)objc_opt_class(*(void *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 32);
    id v15 = 0LL;
    unsigned int v11 = [v9 _bulkDonate:v10 withAppId:@"HomeMemberInfo" itemClass:objc_opt_class(SAPerson) error:&v15];
    id v12 = v15;
    __int16 v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (v11)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v18 = "+[ADVocabDonationBridge bulkDonateHomeMemberInfo:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s HomeMember vocab donation retry donation completed successfully.",  buf,  0xCu);
      }
    }

    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "+[ADVocabDonationBridge bulkDonateHomeMemberInfo:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s HomeMember vocab donation failed retrying donation with error: %@",  buf,  0x16u);
    }
  }

  else
  {
    __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "+[ADVocabDonationBridge bulkDonateHomeMemberInfo:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s HomeMember vocab donation failed with error: %@",  buf,  0x16u);
    }
  }
}

void sub_1001408A0(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_BACKGROUND, 0);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);

  dispatch_queue_t v5 = dispatch_queue_create("ADVocabDonationBridge", v4);
  uint64_t v6 = (void *)qword_100577F10;
  qword_100577F10 = (uint64_t)v5;
}

id sub_100141054(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setAVSystemController:0];
}

void sub_100141060(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[AVSystemController sharedAVSystemController]( &OBJC_CLASS___AVSystemController,  "sharedAVSystemController"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(dispatch_queue_s **)(v3 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1001410EC;
  v6[3] = &unk_1004FD968;
  v6[4] = v3;
  id v7 = v2;
  id v5 = v2;
  dispatch_async(v4, v6);
}

id sub_1001410EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _flushPendingCompletions];
}

id sub_100141118(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_100141124(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_100141130(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10014113C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 24LL))
  {
    objc_msgSend(*(id *)(a1 + 40), "invokeWithValue:");
  }

  else
  {
    dispatch_time_t v2 = dispatch_time(0LL, (uint64_t)(*(double *)(a1 + 48) * 1000000000.0));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = *(dispatch_queue_s **)(v3 + 8);
    uint64_t v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    uint64_t v8 = sub_100141218;
    unsigned __int8 v9 = &unk_1004FD968;
    uint64_t v10 = v3;
    id v11 = v4;
    dispatch_after(v2, v5, &v6);
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "addObject:", *(void *)(a1 + 40), v6, v7, v8, v9, v10);
    [*(id *)(a1 + 32) fetchAVSystemControllerInBackground];
  }

id sub_100141218(uint64_t a1)
{
  return [*(id *)(a1 + 40) invokeWithValue:*(void *)(*(void *)(a1 + 32) + 24)];
}

void sub_100141288(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___ADAVSystemControllerLifecycleManager);
  dispatch_time_t v2 = (void *)qword_100577F28;
  qword_100577F28 = (uint64_t)v1;
}

void sub_100141748(uint64_t a1)
{
  id v11 = (id)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  dispatch_time_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue([v11 languageCode]);
  if (!-[__CFString length](v2, "length"))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v11 bestSupportedLanguageCodeForLanguageCode:0]);

    dispatch_time_t v2 = (__CFString *)v3;
  }

  if (!-[__CFString length](v2, "length"))
  {

    dispatch_time_t v2 = @"en-US";
  }

  uint64_t v4 = (AFVoiceInfo *)objc_claimAutoreleasedReturnValue([v11 outputVoice]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[AFVoiceInfo languageCode](v4, "languageCode"));
  id v6 = [v5 length];

  if (!v6)
  {
    uint64_t v7 = AFOutputVoiceLanguageForRecognitionLanguage(v2);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    unsigned __int8 v9 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( objc_alloc(&OBJC_CLASS___AFVoiceInfo),  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v8,  -[AFVoiceInfo gender](v4, "gender"),  1LL,  0LL,  0LL,  0LL,  0LL);

    uint64_t v4 = v9;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _bundle]);
  [*(id *)(a1 + 32) _getLocalRequestWithType:*(void *)(a1 + 48) bundle:v10 languageCode:v2 outputVoiceInfo:v4 completion:*(void *)(a1 + 40)];
}

void sub_1001418D8(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc_init(&OBJC_CLASS___ADLocalRequestProvider);
  dispatch_time_t v2 = (void *)qword_100577F38;
  qword_100577F38 = (uint64_t)v1;
}

void sub_100142A60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_100142E10(uint64_t a1)
{
  dispatch_time_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceProximityManager sharedManager](&OBJC_CLASS___ADDeviceProximityManager, "sharedManager"));
  [v2 performProximityScan];

  id result = *(id *)(*(void *)(a1 + 32) + 48LL);
  if (result) {
    id result = [result cancel];
  }
  if (*(void *)(a1 + 40) == 1LL)
  {
    uint64_t v4 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(v5 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100142EDC;
    v10[3] = &unk_1004FD940;
    v10[4] = v5;
    uint64_t v7 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v4,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v6,  v10,  195.0);
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned __int8 v9 = *(void **)(v8 + 48);
    *(void *)(v8 + 4_Block_object_dispose((const void *)(v63 - 240), 8) = v7;

    return [*(id *)(*(void *)(a1 + 32) + 48) start];
  }

  return result;
}

id sub_100142EDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_time_t v2 = *(void **)(v1 + 72);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100142F34;
  v4[3] = &unk_1004FB890;
  v4[4] = v1;
  return [v2 getPlaybackStateWithCompletion:v4];
}

void sub_100142F34(uint64_t a1, uint64_t a2)
{
  if (a2 == 1)
  {
    void v6[6] = v2;
    v6[7] = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(dispatch_queue_s **)(v4 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100142F98;
    v6[3] = &unk_1004FD0A0;
    v6[4] = v4;
    void v6[5] = 1LL;
    dispatch_async(v5, v6);
  }

id sub_100142F98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 _updateExpirationDateForMediaPlaybackSnapshotBasedOnDate:v3];

  return [*(id *)(a1 + 32) _updateProximityObservationsForPlayState:*(void *)(a1 + 40) afterDelay:0.0];
}

void sub_100142FEC(uint64_t a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADSpeechManager sharedManager](&OBJC_CLASS___ADSpeechManager, "sharedManager"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 audioSessionController]);
    id v6 = [v5 getAudioSessionID];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[AVAudioSession retrieveSessionWithID:](&OBJC_CLASS___AVAudioSession, "retrieveSessionWithID:", v6));
    if ([v7 lastActivationStoppedNowPlayingApp])
    {
      uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)(a1 + 64);
        int v10 = 136315394;
        id v11 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:com"
              "pletion:]_block_invoke";
        __int16 v12 = 2048;
        uint64_t v13 = v9;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu suppressing play state change caused by siri activation interruption",  (uint8_t *)&v10,  0x16u);
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = *(void *)(a1 + 72);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_10014313C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10014314C(uint64_t a1)
{
}

void sub_100143154(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = AFValidatedNowPlayingInfo(a2);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 objectForKey:kMRMediaRemoteNowPlayingInfoMediaType]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    __int16 v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      __int128 v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      int v17 = 136315650;
      uint64_t v18 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      id v22 = v14;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu mediaType = %@",  (uint8_t *)&v17,  0x20u);
    }
  }

  else
  {
    id v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      int v17 = 136315650;
      uint64_t v18 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v19 = 2048;
      uint64_t v20 = v16;
      __int16 v21 = 2112;
      id v22 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s #hal %llu Failed fetching Now Playing Info with error: %@",  (uint8_t *)&v17,  0x20u);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100143300(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v8 = 136315650;
    uint64_t v9 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:completi"
         "on:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu groupIdentifier = %@",  (uint8_t *)&v8,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100143404(uint64_t a1, AFMediaPlaybackStateSnapshot *a2)
{
  if (a2)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 104);
      int v35 = 136315650;
      v36 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v37 = 2048;
      uint64_t v38 = v23;
      __int16 v39 = 2048;
      v40 = a2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s #hal %llu Cancelling donation because signal %zd is received.",  (uint8_t *)&v35,  0x20u);
    }

    uint64_t v5 = *(void *)(a1 + 64);
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0LL);
    }
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) mediaType]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) groupIdentifier]);
    id v8 = [*(id *)(*(void *)(a1 + 40) + 24) playbackState];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) nowPlayingTimestamp]);
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a1 + 104);
      id v25 = v11;
      uint64_t Name = AFMediaPlaybackStateGetName(v8);
      v27 = (AFMediaPlaybackStateSnapshot *)objc_claimAutoreleasedReturnValue(Name);
      int v35 = 136315906;
      v36 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v37 = 2048;
      uint64_t v38 = v24;
      __int16 v39 = 2112;
      v40 = v27;
      __int16 v41 = 2112;
      id v42 = v9;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu Previous playbackState: %@, lastPlayingDate: %@",  (uint8_t *)&v35,  0x2Au);

      uint64_t v11 = (void *)AFSiriLogContextDaemon;
    }

    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = *(void *)(a1 + 104);
      uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
      __int16 v30 = v11;
      uint64_t v31 = AFMediaPlaybackStateGetName(v29);
      v32 = (AFMediaPlaybackStateSnapshot *)objc_claimAutoreleasedReturnValue(v31);
      int v35 = 136315906;
      v36 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v37 = 2048;
      uint64_t v38 = v28;
      __int16 v39 = 2112;
      v40 = v32;
      __int16 v41 = 2112;
      id v42 = v10;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "%s      #hal %llu New playbackState: %@, lastPlayingDate: %@",  (uint8_t *)&v35,  0x2Au);
    }

    if (*(void *)(*(void *)(a1 + 40) + 24LL)
      && !*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)
      && ((__int16 v12 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL)) == 0LL ? (v13 = v6 == 0LL) : (v13 = 1),
          v13
       && (!v12 || [v12 isEqualToString:v6])
       && ([v10 timeIntervalSinceDate:v9], fabs(v14) <= 0.5)
       && ((id v15 = *(void **)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL)) != 0LL || !v7)
       && (!v15 || [v15 isEqualToString:v7])
       && (uint64_t v16 = *(void *)(a1 + 40),
           int v17 = *(unsigned __int8 *)(v16 + 32),
           v17 == [*(id *)(v16 + 24) isProxyGroupPlayer])))
    {
      uint64_t v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v34 = *(void *)(a1 + 104);
        int v35 = 136315394;
        v36 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:com"
              "pletion:]_block_invoke";
        __int16 v37 = 2048;
        uint64_t v38 = v34;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu Skipped donation because there's no change.",  (uint8_t *)&v35,  0x16u);
      }

      uint64_t v19 = *(void *)(a1 + 64);
      if (v19) {
        (*(void (**)(uint64_t, void))(v19 + 16))(v19, 0LL);
      }
    }

    else
    {
      uint64_t v20 = -[AFMediaPlaybackStateSnapshot initWithPlaybackState:nowPlayingTimestamp:mediaType:groupIdentifier:isProxyGroupPlayer:]( objc_alloc(&OBJC_CLASS___AFMediaPlaybackStateSnapshot),  "initWithPlaybackState:nowPlayingTimestamp:mediaType:groupIdentifier:isProxyGroupPlayer:",  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL),  v10,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  *(unsigned __int8 *)(*(void *)(a1 + 40) + 32LL));
      __int16 v21 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = *(void *)(a1 + 104);
        int v35 = 136315650;
        v36 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:com"
              "pletion:]_block_invoke";
        __int16 v37 = 2048;
        uint64_t v38 = v33;
        __int16 v39 = 2112;
        v40 = v20;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu Donating %@...",  (uint8_t *)&v35,  0x20u);
      }

      [*(id *)(a1 + 40) _donateMediaPlaybackContextWithSnapshot:v20 date:*(void *)(a1 + 56)];
      uint64_t v22 = *(void *)(a1 + 64);
      if (v22) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v22, 1LL);
      }
    }
  }

void sub_1001438B0(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 48);
    double v13 = Current - *(double *)(a1 + 56);
    int v16 = 136315650;
    int v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:complet"
          "ion:]_block_invoke";
    __int16 v18 = 2048;
    uint64_t v19 = v12;
    __int16 v20 = 2048;
    double v21 = v13;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu Finished aggregation, took %f seconds.",  (uint8_t *)&v16,  0x20u);
  }

  unsigned int v4 = [*(id *)(a1 + 32) invokeWithSignal:0];
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v7 = *(void *)(a1 + 48);
    int v16 = 136315394;
    int v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:complet"
          "ion:]_block_invoke";
    __int16 v18 = 2048;
    uint64_t v19 = v7;
    id v8 = "%s #hal %llu Donation invoked.";
  }

  else
  {
    if (!v6) {
      goto LABEL_7;
    }
    uint64_t v14 = *(void *)(a1 + 48);
    int v16 = 136315394;
    int v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:complet"
          "ion:]_block_invoke";
    __int16 v18 = 2048;
    uint64_t v19 = v14;
    id v8 = "%s #hal %llu Donation cancelled.";
  }

  _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v16, 0x16u);
LABEL_7:
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  if (v9 == *(void **)(v10 + 80))
  {
    uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      int v16 = 136315394;
      int v17 = "-[ADMediaPlaybackContextProvider _handlePlaybackStateDidChangeToState:fromState:onDate:lastPlayingDate:compl"
            "etion:]_block_invoke";
      __int16 v18 = 2048;
      uint64_t v19 = v15;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s #hal %llu Donation cleared.",  (uint8_t *)&v16,  0x16u);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v9 = *(void **)(v10 + 80);
    }

    *(void *)(v10 + 80) = 0LL;
  }

id sub_100143AD8(uint64_t a1, void *a2)
{
  return _[a2 setIsProxyGroupPlayer:*(unsigned __int8 *)(a1 + 32)];
}

id sub_100143AE4(uint64_t a1, void *a2)
{
  return _[a2 setIsProxyGroupPlayer:*(unsigned __int8 *)(a1 + 32)];
}

id sub_100143AF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleProxyGroupPlayerDidChangeFrom:*(unsigned __int8 *)(a1 + 40) to:*(unsigned __int8 *)(a1 + 41)];
}

void sub_100143B04(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100143B8C;
  block[3] = &unk_1004FDA80;
  id v10 = v5;
  uint64_t v11 = a2;
  block[4] = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

void sub_100143B8C(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  uint64_t v3 = a1[6];
  id v4 = [v2[3] playbackState];
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 _handlePlaybackStateDidChangeToState:v3 fromState:v4 onDate:v5 lastPlayingDate:a1[5] completion:0];
}

void sub_100143C00(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100143C88;
  block[3] = &unk_1004FDA80;
  id v10 = v5;
  uint64_t v11 = a2;
  block[4] = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

void sub_100143C88(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  uint64_t v3 = a1[6];
  id v4 = [v2[3] playbackState];
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 _handlePlaybackStateDidChangeToState:v3 fromState:v4 onDate:v5 lastPlayingDate:a1[5] completion:0];
}

void sub_100143CFC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 _handlePlaybackStateDidChangeToState:v3 fromState:v4 onDate:v5 lastPlayingDate:a1[5] completion:0];
}

void sub_100143D64(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100143F08;
  block[3] = &unk_1004FDA80;
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[1] = 3221225472LL;
  uint64_t v10 = a2;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, block);
}

void sub_100143DE0(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100143E3C;
  v4[3] = &unk_1004FC4D0;
  char v5 = a2;
  v4[4] = v2;
  dispatch_async(v3, v4);
}

id sub_100143E3C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADMediaPlaybackContextProvider _fetchStateForReason:]_block_invoke_2";
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal initial fetch isProxyGroupPlayer = %d",  (uint8_t *)&v5,  0x12u);
  }

  return [*(id *)(a1 + 32) _handleProxyGroupPlayerDidChangeFrom:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32) to:*(unsigned __int8 *)(a1 + 40)];
}

void sub_100143F08(void *a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = v2;
    uint64_t Name = AFMediaPlaybackStateGetName(v8);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(Name);
    uint64_t v12 = a1[4];
    int v13 = 136315650;
    uint64_t v14 = "-[ADMediaPlaybackContextProvider _fetchStateForReason:]_block_invoke_2";
    __int16 v15 = 2112;
    int v16 = v11;
    __int16 v17 = 2112;
    uint64_t v18 = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #hal fetch playback state = %@ for reason = %@",  (uint8_t *)&v13,  0x20u);
  }

  uint64_t v3 = (id *)a1[5];
  uint64_t v4 = a1[6];
  id v5 = [v3[3] playbackState];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 24) nowPlayingTimestamp]);
  [v3 _handlePlaybackStateDidChangeToState:v4 fromState:v5 onDate:v6 lastPlayingDate:v7 completion:0];
}

LABEL_34:
}
}

  [v46 setClassifiedUser:v52];
  if (v43)
  {
    v54 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
    v55 = (NSDictionary *)objc_claimAutoreleasedReturnValue([v54 getClassifiedUser]);

    [v46 setClassifiedUser:v55];
    v56 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v81 = 136315394;
      v82 = "-[ADCommandCenter _handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:th"
            "resholdingType:assetVersion:]";
      v83 = 2112;
      v84 = v55;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "%s Overriding classifiedUser: %@", v81, 0x16u);
    }

    v57 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
    v58 = (NSDictionary *)objc_claimAutoreleasedReturnValue([v57 getUserIdentityClassification]);

    [v46 setUserIdentityClassification:v58];
    v59 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v81 = 136315394;
      v82 = "-[ADCommandCenter _handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:th"
            "resholdingType:assetVersion:]";
      v83 = 2112;
      v84 = v58;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "%s Overriding userIdentityClassification: %@",  v81,  0x16u);
    }
  }

  else
  {
    v55 = 0LL;
  }

  -[ADCommandCenter _sendCommandToServer:opportunistically:](v24, "_sendCommandToServer:opportunistically:", v46, 0LL);
  v60 = v46;

  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(buf, 8);

  return v60;
}

      goto LABEL_35;
    }

    int v13 = 0;
  }

    goto LABEL_56;
  }

  if ((v28 & 1) != 0)
  {
    localSpeechRecognizerTask = self->_localSpeechRecognizerTask;
    self->_localSpeechRecognizerTask = 0LL;

    __int16 v37 = (void *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_56;
    }
    uint64_t v38 = self->_primaryDictationLanguage;
    uint64_t v33 = v37;
    __int16 v39 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", AFOfflineDictationCapable(v33));
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    *(_DWORD *)buf = 136315906;
    v75 = "-[ADSpeechManager _startCaptureForMode:options:context:]";
    v76 = 2048;
    *(void *)v77 = a3;
    *(_WORD *)&v77[8] = 2112;
    v78 = v38;
    v79 = 2112;
    v80 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v33,  OS_LOG_TYPE_INFO,  "%s Not using local speech recognition for mode %ld, dictation language %@, dictationCapable %@",  buf,  0x2Au);

    goto LABEL_34;
  }

  if (a3 == 2 && AFOfflineDictationCapable(v28))
  {
    objc_storeStrong((id *)&self->_localSpeechRecognizerTask, CoreEmbeddedSpeechRecognizerTaskDictation);
    goto LABEL_56;
  }

  IsSiri = CSSiriSpeechRecordingModeIsSiri(a3);
  if (!(_DWORD)IsSiri) {
    goto LABEL_56;
  }
  id v42 = AFOfflineDictationCapable(IsSiri);
  if (!(_DWORD)v42) {
    goto LABEL_56;
  }
  if (a3 == 5)
  {
    v43 = AFIsNano(v42);
    v44 = (id *)&CoreEmbeddedSpeechRecognizerTaskDictation;
    if (!v43) {
      v44 = (id *)&CoreEmbeddedSpeechRecognizerTaskSearchOrMessaging;
    }
    objc_storeStrong((id *)&self->_localSpeechRecognizerTask, *v44);
    -[ADSpeechManager _tellDelegateSpeechRecognitionUpdateWillBegin]( self,  "_tellDelegateSpeechRecognitionUpdateWillBegin");
    v45 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136315138;
    v75 = "-[ADSpeechManager _startCaptureForMode:options:context:]";
    v46 = "%s Local speech recognition forced on for Siri";
  }

  else if ((_AFPreferencesSiriPersonalizedASRDisabled() & 1) != 0 {
         || (v51 = -[NSString skipPersonalizedASR](v8, "skipPersonalizedASR"), (_DWORD)v51))
  }
  {
    v52 = self->_localSpeechRecognizerTask;
    self->_localSpeechRecognizerTask = 0LL;

    v45 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136315138;
    v75 = "-[ADSpeechManager _startCaptureForMode:options:context:]";
    v46 = "%s Not using local speech recognition for Siri because the kill switch is on, or options were set";
  }

  else
  {
    v53 = AFIsNano(v51);
    v54 = (id *)&CoreEmbeddedSpeechRecognizerTaskDictation;
    if (!v53) {
      v54 = (id *)&CoreEmbeddedSpeechRecognizerTaskSearchOrMessaging;
    }
    objc_storeStrong((id *)&self->_localSpeechRecognizerTask, *v54);
    -[ADSpeechManager _tellDelegateSpeechRecognitionUpdateWillBegin]( self,  "_tellDelegateSpeechRecognitionUpdateWillBegin");
    v45 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_56;
    }
    *(_DWORD *)buf = 136315138;
    v75 = "-[ADSpeechManager _startCaptureForMode:options:context:]";
    v46 = "%s Doing local speech recognition for Siri";
  }

  _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, v46, buf, 0xCu);
LABEL_56:
  v55 = -[NSString acousticIdEnabled](v8, "acousticIdEnabled");
  if (a3 == 4) {
    v56 = 1LL;
  }
  else {
    v56 = v55;
  }
  [v15 setFingerprintingEnabled:v56];
  objc_msgSend(v15, "setAudioFileType:", -[NSString audioFileType](v8, "audioFileType"));
  v57 = (void *)objc_claimAutoreleasedReturnValue(-[NSString audioFileHandle](v8, "audioFileHandle"));
  [v15 setAudioFileHandle:v57];

  [v15 setIsDriving:self->_isDriving];
  objc_msgSend( v15,  "disableSpeechPacketGeneration:",  -[NSString skipGeneratingSpeechPacket](v8, "skipGeneratingSpeechPacket"));
  v58 = (void *)objc_claimAutoreleasedReturnValue(-[NSString speechRecordingEventListeningEndpoint](v8, "speechRecordingEventListeningEndpoint"));
  [v15 setSpeechRecordingEventListeningEndpoint:v58];

  objc_msgSend(v15, "setHybridUODEnabled:", -[NSString isHybridUODEnabled](v8, "isHybridUODEnabled"));
  -[ADSpeechManager _updateSpeechState:](self, "_updateSpeechState:", 1LL);
  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472LL;
  v68[2] = sub_10031ECE8;
  v68[3] = &unk_1004FCF60;
  id WeakRetained = v15;
  v69 = WeakRetained;
  v70 = v9;
  v71 = self;
  v59 = v8;
  v72 = v59;
  v73 = a3;
  v60 = objc_retainBlock(v68);
  v61 = -[NSString reloadSmartSiriVolume](v59, "reloadSmartSiriVolume");
  if ((v61 & 1) != 0 || self->_dirtySiriOutputVolumeHostTime)
  {
    *(_WORD *)&self->_hasFetchedSmartSiriVolume = 0;
    self->_dirtySiriOutputVolumeHostTime = 0LL;
    v62 = (os_log_s *)AFSiriLogContextSpeech;
    v61 = (id)os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO);
    if ((_DWORD)v61)
    {
      *(_DWORD *)buf = 136315650;
      v75 = "-[ADSpeechManager _startCaptureForMode:options:context:]";
      v76 = 1024;
      *(_DWORD *)v77 = 0;
      *(_WORD *)&v77[4] = 1024;
      *(_DWORD *)&v77[6] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "%s hasFetchedSmartSiriVolume = %d, hasUpdatedSiriOutputVolume = %d",  buf,  0x18u);
    }
  }

  if (!AFIsHorseman(v61))
  {
    uint64_t v63 = _NSConcreteStackBlock;
    v64 = 3221225472LL;
    v65 = sub_10031F1B4;
    v66 = &unk_1004FC838;
    v67 = v60;
    -[ADSpeechManager _updateSiriOutputVolume:completion:](self, "_updateSiriOutputVolume:completion:", 0LL, &v63);
  }

  else
  {
LABEL_65:
    ((void (*)(void *))v60[2])(v60);
  }

  objc_msgSend(WeakRetained, "suppressUtteranceGradingIfRequired", v63, v64, v65, v66);

  uint64_t v14 = v69;
LABEL_68:
}

    uint64_t v19 = 0;
    goto LABEL_35;
  }

  __int16 v20 = (id)objc_claimAutoreleasedReturnValue([v15 avscRouteDescription]);
  if (!v20)
  {
    uint64_t v38 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v59 = "-[ADVolumeService _fetchSystemVolumeForCategory:andMode:audioRoute:withName:usingSystemController:volume:]";
      v60 = 2112;
      v61 = v15;
      __int16 v39 = "%s Unable to find a pickable route matching audio route %@.";
LABEL_30:
      v40 = v38;
      __int16 v41 = 22;
LABEL_31:
      _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, v39, buf, v41);
      goto LABEL_34;
    }

    goto LABEL_34;
  }

void sub_100145810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100145ADC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1001462C4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  if ([*(id *)(a1 + 32) _isAnnounceNotificationRequest:v7 equalToRequest:*(void *)(a1 + 40)])
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315650;
      uint64_t v10 = "-[ADExternalNotificationRequestQueue removeAnnouncementRequest:]_block_invoke";
      __int16 v11 = 2112;
      id v12 = v7;
      __int16 v13 = 2048;
      uint64_t v14 = a3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s found request to remove: %@ in request queue at index: %lu",  (uint8_t *)&v9,  0x20u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }
}

uint64_t sub_1001463D0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001463E0(uint64_t a1)
{
}

void sub_1001463E8(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v5 = a3;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v21;
    *(void *)&__int128 v7 = 136315394LL;
    __int128 v18 = v7;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v5);
        }
        __int16 v11 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "notification", v18));
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 request]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
        unsigned int v15 = [v14 isEqualToString:*(void *)(a1 + 32)];

        if (v15)
        {
          int v16 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v17 = *(void *)(a1 + 32);
            *(_DWORD *)buf = v18;
            id v25 = "-[ADExternalNotificationRequestQueue notificationRequestForNotificationIdentifierInAnnouncementQueue:]_block_invoke";
            __int16 v26 = 2112;
            uint64_t v27 = v17;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s found request with notification identifier: %@ in request queue",  buf,  0x16u);
          }

          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v11);
          *a4 = 1;
        }
      }

      id v8 = [v5 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }

    while (v8);
  }
}

void sub_1001465BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v7 = v6;
  if (v6 && [v6 length])
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    -[NSMutableArray addObject:](v8, "addObject:", v5);
    [*(id *)(*(void *)(a1 + 32) + 24) setObject:v8 forKey:v7];
    [*(id *)(*(void *)(a1 + 32) + 16) enqueueObject:v7];
  }

  else
  {
    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      __int16 v11 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s unable to enqueue request, invalid identifier %@",  (uint8_t *)&v10,  0x16u);
    }
  }
}

void *sub_1001466EC(void *result, uint64_t a2)
{
  if (a2 != -1)
  {
    uint64_t v2 = result;
    [*(id *)(result[4] + 48) cancel];
    [*(id *)(v2[4] + 56) cancel];
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(v2[4] + 8LL);
      int v5 = 136315394;
      id v6 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s announcement ready to be announced: %@",  (uint8_t *)&v5,  0x16u);
    }

    return [*(id *)(v2[4] + 32) announcementRequestReadyToBeAnnounced:*(void *)(v2[4] + 8)];
  }

  return result;
}

id sub_1001467DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Max time enqueueable timer firing, announcing request: %@",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 40) invoke];
}

id sub_1001468A0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315138;
    int v5 = "-[ADExternalNotificationRequestQueue enqueueAnnouncementRequest:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Resetting burst timer firing",  (uint8_t *)&v4,  0xCu);
  }

  id result = [*(id *)(a1 + 32) summaryDecision];
  if (result != (id)2) {
    return [*(id *)(a1 + 40) invoke];
  }
  return result;
}

LABEL_64:
                  }

                  else
                  {
                    v59 = (os_log_s *)AFSiriLogContextDaemon;
                    v55 = (void *)v89;
                    __int128 v20 = v80;
                    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = v69;
                      v120 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:reco"
                             "rds:isPrimary:isNewUser:completion:]";
                      v121 = 2112;
                      v122 = v30;
                      v123 = 2112;
                      v124 = v82;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "%s Record (%@) file asset URL(%@) path is nil",  buf,  0x20u);
                    }
                  }
                }

                else
                {
                  v54 = (os_log_s *)AFSiriLogContextDaemon;
                  v55 = (void *)v89;
                  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    v120 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:record"
                           "s:isPrimary:isNewUser:completion:]";
                    v121 = 2112;
                    v122 = v30;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "%s Record (%@) has invalid file asset type",  buf,  0x16u);
                  }
                }

LABEL_67:
LABEL_68:

                __int128 v21 = v92;
LABEL_69:

                goto LABEL_70;
              }

              v53 = (os_log_s *)AFSiriLogContextDaemon;
              if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
                goto LABEL_67;
              }
              *(_DWORD *)buf = v69;
              v120 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPr"
                     "imary:isNewUser:completion:]";
              v121 = 2112;
              v122 = (os_log_s *)v27;
              v123 = 2112;
              v124 = v91;
              v50 = v53;
              v51 = "%s Record (%@) is using unsupported compression type: %@";
              v52 = 32;
            }

            else
            {
              v49 = (os_log_s *)AFSiriLogContextDaemon;
              if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
                goto LABEL_67;
              }
              *(_DWORD *)buf = 136315394;
              v120 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPr"
                     "imary:isNewUser:completion:]";
              v121 = 2112;
              v122 = v30;
              v50 = v49;
              v51 = "%s Record (%@) has invalid compression type";
              v52 = 22;
            }

            _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, v51, buf, v52);
            goto LABEL_67;
          }

          v48 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            v120 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrim"
                   "ary:isNewUser:completion:]";
            v121 = 2112;
            v122 = (os_log_s *)v27;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_INFO,  "%s Modified record is lacking a name : (%@)",  buf,  0x16u);
          }

          goto LABEL_69;
        }

  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_rxPackets));
  [v3 setObject:v38 forKey:@"rx_packets"];

  has = self->_has;
  if ((*(_BYTE *)&has & 8) == 0)
  {
LABEL_18:
    if ((*(_BYTE *)&has & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }

  PBDataWriterWriteUint64Field(v5, self->_rxDuplicateBytes, 32LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_20:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }

  *((_DWORD *)v4 + 4_Block_object_dispose(va, 8) = self->_synRetransmits;
  *((_DWORD *)v4 + 53) |= 0x1000000u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x800000) == 0)
  {
LABEL_23:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  self->_rxDuplicateBytes = *((void *)v4 + 5);
  *(_DWORD *)&self->_has |= 0x10u;
  id v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x20) == 0)
  {
LABEL_20:
    if ((v6 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }

LABEL_70:
      }

      uint64_t v24 = [v21 countByEnumeratingWithState:&v110 objects:v125 count:16];
      if (!v24)
      {
LABEL_72:

        if (-[NSMutableDictionary count](v20, "count"))
        {
          v97[0] = _NSConcreteStackBlock;
          v97[1] = 3221225472LL;
          v97[2] = sub_10014DF10;
          v97[3] = &unk_1004F2EA8;
          v98 = v77;
          v99 = self;
          v62 = v20;
          v100 = v62;
          __int16 v13 = v74;
          uint64_t v63 = v74;
          v101 = v63;
          v104 = v70;
          v105 = v71;
          int v16 = v72;
          v103 = v72;
          uint64_t v19 = v75;
          v64 = v75;
          v102 = v64;
          v65 = objc_retainBlock(v97);
          voiceProfileManager = self->_voiceProfileManager;
          v94[0] = _NSConcreteStackBlock;
          v94[1] = 3221225472LL;
          v94[2] = sub_10014E384;
          v94[3] = &unk_1004F2ED0;
          v94[4] = self;
          v95 = v62;
          v67 = v64;
          uint64_t v14 = v77;
          v96 = v67;
          -[SSRVoiceProfileManager notifyUserVoiceProfileDownloadReadyForUser:getData:completion:]( voiceProfileManager,  "notifyUserVoiceProfileDownloadReadyForUser:getData:completion:",  v63,  v94,  v65);

          v68 = v98;
        }

        else
        {
          v68 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4005LL));
          __int16 v13 = v74;
          uint64_t v19 = v75;
          uint64_t v14 = v77;
          int v16 = v72;
          if (v72) {
            ((void (**)(void, void *))v72)[2](v72, v68);
          }
        }

        unsigned int v15 = v73;
        goto LABEL_79;
      }
    }
  }

  v68 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4005LL));
  if (v16) {
    (*((void (**)(id, void *))v16 + 2))(v16, v68);
  }
LABEL_79:
}

  v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_subflowCount));
  [v3 setObject:v44 forKey:@"subflow_count"];

  if ((*(_DWORD *)&self->_has & 0x4000) != 0)
  {
LABEL_24:
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_connectedSubflowCount));
    [v3 setObject:v5 forKey:@"connected_subflow_count"];
  }

    goto LABEL_71;
  }

  v105 = (NSString *)objc_claimAutoreleasedReturnValue(+[ADSpeechManager _speechCodecError](&OBJC_CLASS___ADSpeechManager, "_speechCodecError"));
  -[ADSpeechManager _cancelRecordingWithError:suppressAlert:](self, "_cancelRecordingWithError:suppressAlert:");
LABEL_75:

LABEL_76:
  recordStartedCompletion = (void (**)(id))self->_recordStartedCompletion;
  if (recordStartedCompletion)
  {
    v75 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      speechState = self->_speechState;
      v77 = v75;
      v78 = sub_10031DA50(speechState);
      v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
      *(_DWORD *)buf = 136315394;
      v107 = "-[ADSpeechManager speechCapturingDidStartRecordingSuccessfully:error:withInfo:]";
      v108 = 2112;
      *(void *)v109 = v79;
      _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_INFO,  "%s Invoking recording started completion (state = %@)",  buf,  0x16u);

      recordStartedCompletion = (void (**)(id))self->_recordStartedCompletion;
    }

    recordStartedCompletion[2](recordStartedCompletion);
    v80 = self->_recordStartedCompletion;
    self->_recordStartedCompletion = 0LL;
  }

  if (!v6)
  {
    recordStoppedCompletion = (void (**)(id))self->_recordStoppedCompletion;
    if (recordStoppedCompletion)
    {
      v82 = (void *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
      {
        v83 = self->_speechState;
        v84 = v82;
        v85 = sub_10031DA50(v83);
        v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
        *(_DWORD *)buf = 136315394;
        v107 = "-[ADSpeechManager speechCapturingDidStartRecordingSuccessfully:error:withInfo:]";
        v108 = 2112;
        *(void *)v109 = v86;
        _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "%s Invoking recording stopped completion (state = %@)",  buf,  0x16u);

        recordStoppedCompletion = (void (**)(id))self->_recordStoppedCompletion;
      }

      recordStoppedCompletion[2](recordStoppedCompletion);
      v87 = self->_recordStoppedCompletion;
      self->_recordStoppedCompletion = 0LL;
    }
  }
}

LABEL_69:
  close(v77);
  *(void *)v99 = _NSConcreteStackBlock;
  *(void *)&v99[8] = 3221225472LL;
  *(void *)&v99[16] = sub_100071E98;
  v100 = &unk_1004F2BF0;
  v102 = &v83;
  v58 = v76;
  v101 = v58;
  [v18 finishStreamWithCompletionBlock:v99];
  v59 = dispatch_time(0LL, 10000000000LL);
  if (dispatch_semaphore_wait(v58, v59))
  {
    v60 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v103 = 136315138;
      v104 = "_ADCloudKitExtractArchiveToDirectory";
      v61 = "%s StreamingZip Error time out finishing extractor stream";
      v62 = v60;
      uint64_t v63 = 12;
      goto LABEL_86;
    }

    goto LABEL_77;
  }

  v64 = (void *)v84[5];
  if (v64)
  {
    v65 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v103 = 136315394;
      v104 = "_ADCloudKitExtractArchiveToDirectory";
      v105 = 2112;
      v106 = v64;
      v61 = "%s Failed to finish streaming extraction: %@";
      v62 = v65;
      uint64_t v63 = 22;
LABEL_86:
      _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, v61, v103, v63);
    }

            v56 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
            v80 = _NSConcreteStackBlock;
            v81 = 3221225472LL;
            v82 = sub_1002922B0;
            v83 = &unk_1004F9208;
            v84 = *(void *)(a1 + 32);
            __int128 v18 = v18;
            v85 = v18;
            v86 = *(id *)(a1 + 40);
            v87 = *(id *)(a1 + 112);
            [v56 settingsForMultiUserWithRefresh:0 completion:&v80];

            goto LABEL_83;
          }
        }

        else
        {
        }

        [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) setAceHost:*(void *)(a1 + 80)];
        *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 1;
        goto LABEL_30;
      }
    }

    else
    {
    }

    [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) setCompanionAssistantID:*(void *)(a1 + 48)];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 1;
    goto LABEL_16;
  }

  int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
  if ((AFIsATV(v16, v17) & 1) != 0)
  {
    __int128 v18 = 0LL;
LABEL_52:
    v46 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv skipping MU update since we cannot trust HomeKit settings on ATV",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) _updateVoiceProfileInfo];
    [*(id *)(a1 + 32) _updateSAMultiUserInfo];
    (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
    goto LABEL_101;
  }

  if (!v16)
  {
    __int128 v18 = 0LL;
    goto LABEL_69;
  }

  __int16 v37 = *(void *)(a1 + 112);
  if (v37) {
    (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v16);
  }
  __int128 v18 = 0LL;
LABEL_101:
}

  v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_synRetransmits));
  [v3 setObject:v43 forKey:@"syn_retransmits"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x800000) == 0)
  {
LABEL_23:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

LABEL_77:
    __int16 v30 = 0;
  }

  else
  {
    v71 = (void *)objc_claimAutoreleasedReturnValue([v80 stringByAppendingPathComponent:@"META-INF"]);
    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    if ([v72 fileExistsAtPath:v71])
    {
      if (([v72 removeItemAtPath:v71 error:0] & 1) == 0)
      {
        v73 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v103 = 136315394;
          v104 = "_ADCloudKitExtractArchiveToDirectory";
          v105 = 2112;
          v106 = v71;
          _os_log_error_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_ERROR,  "%s Error deleting meta data directory: %@",  v103,  0x16u);
        }
      }
    }

    __int16 v30 = 1;
  }

LABEL_79:
  _Block_object_dispose(&v83, 8);

LABEL_22:
  _Block_object_dispose(&v89, 8);

  _Block_object_dispose(&v95, 8);
LABEL_23:

  uint64_t v33 = (os_log_s *)AFSiriLogContextDaemon;
  if ((v30 & 1) == 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "-[ADCloudKitMultiUserSharedDataStore _extractRecord:atPath:fileManager:]";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v79;
      *(_WORD *)&buf[22] = 2112;
      v113 = v80;
      _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%s Failed to expand archive (%@) to location (%@)",  buf,  0x20u);
    }

    uint64_t v27 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4009LL));
LABEL_30:
    __int16 v12 = v27;
    goto LABEL_31;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCloudKitMultiUserSharedDataStore _extractRecord:atPath:fileManager:]";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v79;
    *(_WORD *)&buf[22] = 2112;
    v113 = v80;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "%s Expanded archive (%@) to location (%@)",  buf,  0x20u);
  }

  __int16 v12 = 0LL;
LABEL_31:

LABEL_32:
  return v12;
}

      __int128 v23 = 0LL;
      uint64_t v24 = 0;
      __int128 v22 = v94;
      v86 = v113;
LABEL_78:
      v102 = v94;

      goto LABEL_64;
    }

    v103 = ExtAudioFileDispose(outExtAudioFile);
    if ((_DWORD)v103)
    {
      v104 = v103;
      v105 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"ExtAudioFileDispose() failed to close input audio file. (status = %d)",  v103);
      v106 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v104,  0LL));
      v94 = (NSURL *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v105,  v106));

      v107 = (os_log_s *)AFSiriLogContextUtility;
      if (!os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_84:
        __int128 v23 = 0LL;
        uint64_t v24 = 0;
        __int128 v22 = v94;
        goto LABEL_78;
      }
    }

    else
    {
      v108 = ExtAudioFileDispose(inExtAudioFile);
      if (!(_DWORD)v108)
      {
        v112 = (os_log_s *)AFSiriLogContextUtility;
        uint64_t v24 = 1;
        if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v124 = 136315394;
          v125 = "ADAudioFileTrim";
          v126 = 2112;
          __int128 v23 = v115;
          v127 = v115;
          _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_INFO, "%s trimmedAudioFileURL = %@", v124, 0x16u);
          __int128 v22 = 0LL;
        }

        else
        {
          __int128 v22 = 0LL;
          __int128 v23 = v115;
        }

        v94 = v23;
        goto LABEL_78;
      }

      v109 = v108;
      v110 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"ExtAudioFileDispose() failed to close output audio file. (status = %d)",  v108);
      v111 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v109,  0LL));
      v94 = (NSURL *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v110,  v111));

      v107 = (os_log_s *)AFSiriLogContextUtility;
      if (!os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_84;
      }
    }

    *(_DWORD *)v124 = 136315394;
    v125 = "ADAudioFileTrim";
    v126 = 2112;
    v127 = v94;
    _os_log_error_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "%s error = %@", v124, 0x16u);
    goto LABEL_84;
  }

  uint64_t v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)inPropertyData = 136315394;
    *(void *)&inPropertyData[4] = "-[ADCommandCenter _trimRecordedAudioWithIdentifier:offset:duration:outputFileType:co"
                                    "mpletion:]_block_invoke";
    *(_WORD *)&inPropertyData[12] = 2112;
    *(void *)&inPropertyData[14] = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
LABEL_39:
}

void sub_100149C68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

LABEL_111:
    __int16 v11 = v133;
    id v42 = v121;
    v45 = v146;
LABEL_112:

    v92 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v69, "objectForKey:", @"profileNames"));
    v93 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
    [v93 mergeHomeProfileNamesWithNamesFromCloud:v92];

    if (!self->isATVOnly) {
      goto LABEL_115;
    }
    if (v136)
    {
      if (v144)
      {
LABEL_115:
        if (!v11)
        {
          v109 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315138;
            v181 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]";
            _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_INFO,  "%s ADHomeInfoManager is not ready",  buf,  0xCu);
          }

          __int16 v13 = v123;
          if (v9) {
            v9[2](v9, 0LL);
          }
          goto LABEL_163;
        }

        v94 = (void *)objc_claimAutoreleasedReturnValue(-[ADCloudKitMultiUserSharedDataStore zone](self, "zone"));
        v95 = (void *)objc_claimAutoreleasedReturnValue([v94 zoneID]);
        v96 = (void *)objc_claimAutoreleasedReturnValue([v95 ownerName]);

        if ([v96 isEqualToString:CKCurrentUserDefaultName])
        {
          v97 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315138;
            v181 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]";
            _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_INFO,  "%s Saving MeCard and Companion ACEHost",  buf,  0xCu);
          }

          if (v136) {
            v98 = @"meCard";
          }
          else {
            v98 = @"backupMeCard";
          }
          v99 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v69, "objectForKey:", v98, log));
          v100 = v149;
          if (v99)
          {
            v101 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v101, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              v181 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]";
              _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "%s Found valid MeCard data", buf, 0xCu);
            }

            v102 = (void *)objc_claimAutoreleasedReturnValue(+[ADLocalMeCardStore sharedStore](&OBJC_CLASS___ADLocalMeCardStore, "sharedStore"));
            [v102 storeMeCard:v99];

            v45 = v146;
          }

          if (v100)
          {
            v103 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315138;
              v181 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]";
              _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_INFO,  "%s Found valid companion ACE Host",  buf,  0xCu);
            }

            v104 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
            [v104 setSingleUserCompanionACEHost:v100];

            v45 = v146;
          }

          id v42 = v121;
        }

        if (v140 && v134 && v42 || !objc_msgSend(v135, "count", log))
        {
          if (!self->isATVOnly || v144 && v132)
          {
            v150[0] = _NSConcreteStackBlock;
            v150[1] = 3221225472LL;
            v150[2] = sub_10014C134;
            v150[3] = &unk_1004F2F48;
            v151 = v134;
            v152 = v124;
            v153 = self;
            v154 = v144;
            v155 = v132;
            v169 = v9;
            v156 = v127;
            v157 = v129;
            v158 = v128;
            v159 = v149;
            v160 = v126;
            v170 = v117;
            v171 = v120;
            v172 = v116;
            v161 = v125;
            __int16 v13 = v123;
            v162 = v123;
            v163 = v42;
            v164 = v96;
            v165 = v70;
            v166 = v130;
            v167 = v140;
            v168 = v135;
            __int16 v11 = v133;
            [v133 getCurrentHomeMemberIds:v150];

LABEL_162:
LABEL_163:

            uint64_t v8 = v135;
            goto LABEL_164;
          }

          v112 = (os_log_s *)AFSiriLogContextSession;
          __int16 v11 = v133;
          if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315651;
            v181 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]";
            v182 = 2113;
            v183 = v144;
            v184 = 2113;
            v185 = v132;
            _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_INFO,  "%s ATV companion invalid %{private}@-%{private}@",  buf,  0x20u);
          }

          __int16 v13 = v123;
          if (!v9) {
            goto LABEL_162;
          }
          v106 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1012LL));
          ((void (**)(id, void *))v9)[2](v9, v106);
        }

        else
        {
          if (![v96 isEqualToString:CKCurrentUserDefaultName])
          {
            v113 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));

            __int16 v11 = v133;
            __int16 v13 = v123;
            if (v9) {
              v9[2](v9, 0LL);
            }
            goto LABEL_162;
          }

          v105 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
          v106 = (void *)objc_claimAutoreleasedReturnValue([v105 currentOwnerSharedUserID]);

          if (v106)
          {
            -[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNewUser:completion:]( self,  "_updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNewUser:completion:",  v106,  0LL,  v135,  1LL,  0LL,  v9);
            __int16 v11 = v133;
          }

          else
          {
            __int16 v11 = v133;
            if (v9) {
              v9[2](v9, 0LL);
            }
          }
        }

        __int16 v13 = v123;
        goto LABEL_162;
      }

      v110 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v181 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]";
        _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv meDevice is not valid",  buf,  0xCu);
      }

      v107 = @"Me device companion is missing iCloud ALT DSID";
      v108 = 6018LL;
    }

    else
    {
      v107 = @"Device is not me device";
      v108 = 1012LL;
    }

    v111 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  v108,  v107,  log));
    if (v9) {
      ((void (**)(id, void *))v9)[2](v9, v111);
    }

    __int16 v13 = v123;
    goto LABEL_163;
  }

  -[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNewUser:completion:]( self,  "_updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNewUser:completion:",  0LL,  0LL,  v8,  1LL,  0LL,  v9);
LABEL_164:
}

id sub_10014C128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setValue:a3 forKey:a2];
}

void sub_10014C134(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v88 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315651;
    v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v131 = 2113;
    id v132 = v10;
    __int16 v133 = 2113;
    uint64_t v134 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s home memberships for sharedUserId = %{private}@ : %{private}@",  buf,  0x20u);
    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v131 = 2113;
    id v132 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s homeUniqueIdentifier: %{private}@", buf, 0x16u);
  }

  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v7]);
  __int16 v13 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315395;
    v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v131 = 2113;
    id v132 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s home user id: %{private}@", buf, 0x16u);
  }

  if (*(_BYTE *)(*(void *)(a1 + 48) + 64LL))
  {
    if (!*(void *)(a1 + 56)
      || (uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService")),
          [v14 saveHomeUserIdsForICloudAltDSID:*(void *)(a1 + 56) homeMemberships:*(void *)(a1 + 40)],  v14,  *(_BYTE *)(*(void *)(a1 + 48) + 64)))
    {
      if (!*(void *)(a1 + 64))
      {
        v73 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "%s Ignoring voice profile download as MU cannot be set [MultiUserInfo requires companionAssistantID] without companionAssistantID",  buf,  0xCu);
        }

        v74 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
        [v74 triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 56) homeUserID:v12 toState:3];

        v75 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
        [v75 triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 56) homeUserID:v12 toState:0];

        uint64_t v76 = *(void *)(a1 + 176);
        if (v76)
        {
          int v16 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6018LL,  @"Me device companion is missing iCloud ALT DSID"));
          (*(void (**)(uint64_t, void *))(v76 + 16))(v76, v16);
          goto LABEL_47;
        }
      }
    }
  }

  uint64_t v15 = productTypeFromUserAgentString(*(void *)(a1 + 72));
  int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  char v17 = AFDoesProductTypeSupportMUX();
  id v18 = objc_alloc(&OBJC_CLASS___AFCompanionDeviceInfo);
  BYTE3(v77) = *(_BYTE *)(a1 + 186);
  BYTE2(v77) = v17;
  LOWORD(v77) = *(_WORD *)(a1 + 184);
  id v19 = objc_msgSend( v18,  "initWithAssistantID:speechID:idsIdentifier:productPrefix:aceHost:syncMetadata:syncMetadataCapability:peerToPee rHandoffCapability:muxSupportCapability:meDevice:siriLanguage:",  *(void *)(a1 + 64),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 72),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  v77,  *(void *)(a1 + 112));
  if ([v88 isEqualToString:v12])
  {
    __int128 v20 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315651;
      v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v131 = 2113;
      id v132 = v12;
      __int16 v133 = 2113;
      uint64_t v134 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Found matching record. Adding homeUserId %{private}@ with shareUserId %{private}@ to multiuser group",  buf,  0x20u);
    }

    v86 = v16;
    id v87 = v8;
    __int128 v22 = (os_log_s *)AFSiriLogContextMultiUser;
    __int128 v23 = v22;
    os_signpost_id_t v24 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  v24,  "MultiUserService",  "Primary user synced",  buf,  2u);
    }

    id v25 = *(void **)(a1 + 32);
    __int16 v26 = *(void **)(a1 + 120);
    uint64_t v27 = *(void *)(a1 + 128);
    uint64_t v28 = *(void *)(a1 + 56);
    v116[0] = _NSConcreteStackBlock;
    v116[1] = 3221225472LL;
    v116[2] = sub_10014CD48;
    v116[3] = &unk_1004F2F20;
    id v29 = v25;
    uint64_t v30 = *(void *)(a1 + 48);
    id v117 = v29;
    uint64_t v118 = v30;
    id v119 = *(id *)(a1 + 136);
    id v120 = *(id *)(a1 + 144);
    id v121 = *(id *)(a1 + 152);
    id v122 = *(id *)(a1 + 160);
    id v31 = v19;
    id v123 = v31;
    id v124 = *(id *)(a1 + 64);
    id v125 = *(id *)(a1 + 80);
    id v126 = *(id *)(a1 + 56);
    id v127 = *(id *)(a1 + 168);
    id v128 = *(id *)(a1 + 176);
    LOBYTE(v7_Block_object_dispose(va, 8) = 0;
    [v26 addUser:v12 sharedUserId:v29 loggableSharedUserId:v27 iCloudAltDSID:v28 enrollmentName:@"primary_user" isPrimary:1 nonCloudSyncedUser:v78 completion:v116];
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
    unsigned int v33 = [v32 userProfileExistsWithiCloudAltDSID:*(void *)(a1 + 56)];

    if (!AFIsATV(v34, v35)
      || (*(_BYTE *)(*(void *)(a1 + 48) + 64LL) ? (unsigned int v36 = v33) : (unsigned int v36 = 0), v36 == 1))
    {
      __int16 v37 = *(void **)(a1 + 120);
      uint64_t v84 = *(void *)(a1 + 128);
      uint64_t v85 = *(void *)(a1 + 32);
      uint64_t v83 = *(void *)(a1 + 56);
      id v38 = v7;
      id v39 = v31;
      id v40 = v19;
      uint64_t v41 = *(void *)(a1 + 136);
      uint64_t v42 = *(void *)(a1 + 144);
      uint64_t v43 = *(void *)(a1 + 152);
      v44 = v12;
      BOOL v45 = (unint64_t)[*(id *)(a1 + 160) count] < 2;
      v114[0] = _NSConcreteStackBlock;
      v114[1] = 3221225472LL;
      v114[2] = sub_10014D0A0;
      v114[3] = &unk_1004FBD90;
      id v115 = *(id *)(a1 + 32);
      LOBYTE(v82) = v45;
      __int16 v12 = v44;
      uint64_t v80 = v41;
      uint64_t v81 = v42;
      id v19 = v40;
      id v7 = v38;
      [v37 addDeviceOwner:v44 sharedUserId:v85 loggableSharedUserId:v84 iCloudAltDSID:v83 audioAppSignals:v43 enrollmentName:@"primary_user" companionInfo:v39 shar eOwnerName:v80 homeMemberSettings:v81 loggingAllowed:v82 completion:v114];
    }
  }

  else
  {
    if (![*(id *)(a1 + 160) containsObject:v7]
      || ![v8 containsObject:v12])
    {
      v62 = v19;
      if (*(_BYTE *)(*(void *)(a1 + 48) + 64LL)
        && +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled")
        && (uint64_t v63 = *(void *)(a1 + 56)) != 0)
      {
        v64 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          v65 = *(void **)(a1 + 32);
          *(_DWORD *)buf = 136315651;
          v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
          __int16 v131 = 2113;
          id v132 = v65;
          __int16 v133 = 2113;
          uint64_t v134 = v63;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_INFO,  "%s Found a user not part of Home. Adding user with sharedUserId %{private}@ iCloudAltDSID %{private}@ to multiuser group",  buf,  0x20u);
        }

        v66 = (os_log_s *)AFSiriLogContextMultiUser;
        v67 = v66;
        os_signpost_id_t v68 = *(void *)(*(void *)(a1 + 48) + 8LL);
        if (v68 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v66))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v67,  OS_SIGNPOST_INTERVAL_END,  v68,  "MultiUserService",  "Additional user synced",  buf,  2u);
        }

        v69 = *(void **)(a1 + 32);
        v70 = *(void **)(a1 + 120);
        v89[0] = _NSConcreteStackBlock;
        v89[1] = 3221225472LL;
        v89[2] = sub_10014D4CC;
        v89[3] = &unk_1004F2F20;
        v89[4] = *(void *)(a1 + 48);
        id v90 = v69;
        id v100 = *(id *)(a1 + 176);
        id v91 = *(id *)(a1 + 136);
        id v92 = *(id *)(a1 + 144);
        id v93 = *(id *)(a1 + 152);
        id v94 = *(id *)(a1 + 160);
        id v95 = v62;
        id v96 = *(id *)(a1 + 64);
        id v97 = *(id *)(a1 + 80);
        id v98 = *(id *)(a1 + 56);
        id v99 = *(id *)(a1 + 168);
        LOBYTE(v7_Block_object_dispose(va, 8) = 0;
        id v19 = v62;
        objc_msgSend( v70,  "addUser:sharedUserId:loggableSharedUserId:iCloudAltDSID:enrollmentName:isPrimary:nonCloudSyncedUser:completion:",  v78,  v89);
      }

      else
      {
        v71 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_INFO,  "%s Found a record that does not match current home. Ignoring.",  buf,  0xCu);
        }

        uint64_t v72 = *(void *)(a1 + 176);
        id v19 = v62;
        if (v72) {
          (*(void (**)(uint64_t, void))(v72 + 16))(v72, 0LL);
        }
      }

      goto LABEL_46;
    }

    v46 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v47 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315651;
      v130 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v131 = 2113;
      id v132 = v12;
      __int16 v133 = 2113;
      uint64_t v134 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_INFO,  "%s Found a shared user. Adding homeUserId %{private}@ with sharedUserId %{private}@ to multiuser group",  buf,  0x20u);
    }

    v86 = v16;
    id v87 = v8;
    v48 = (os_log_s *)AFSiriLogContextMultiUser;
    v49 = v48;
    os_signpost_id_t v50 = *(void *)(*(void *)(a1 + 48) + 8LL);
    if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_INTERVAL_END,  v50,  "MultiUserService",  "Shared user synced",  buf,  2u);
    }

    v51 = objc_alloc(&OBJC_CLASS___NSString);
    v52 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", arc4random() % 9);
    v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    v54 = (void *)objc_claimAutoreleasedReturnValue([v53 stringValue]);
    v55 = -[NSString initWithFormat:](v51, "initWithFormat:", @"%@_%@", @"secondary", v54);

    v56 = *(void **)(a1 + 32);
    v57 = *(void **)(a1 + 120);
    uint64_t v58 = *(void *)(a1 + 128);
    uint64_t v59 = *(void *)(a1 + 56);
    v101[0] = _NSConcreteStackBlock;
    v101[1] = 3221225472LL;
    v101[2] = sub_10014D180;
    v101[3] = &unk_1004F2F20;
    id v60 = v56;
    uint64_t v61 = *(void *)(a1 + 48);
    id v102 = v60;
    uint64_t v103 = v61;
    id v104 = *(id *)(a1 + 136);
    id v105 = *(id *)(a1 + 144);
    id v106 = *(id *)(a1 + 152);
    id v107 = *(id *)(a1 + 160);
    id v108 = v19;
    id v109 = *(id *)(a1 + 64);
    id v110 = *(id *)(a1 + 80);
    id v111 = *(id *)(a1 + 56);
    id v112 = *(id *)(a1 + 168);
    id v113 = *(id *)(a1 + 176);
    LOBYTE(v79) = 0;
    [v57 addUser:v12 sharedUserId:v60 loggableSharedUserId:v58 iCloudAltDSID:v59 enrollmentName:v55 isPrimary:0 nonCloudSyncedUser:v79 completion:v101];
  }

  int v16 = v86;
  id v8 = v87;
LABEL_46:

LABEL_47:
}

void sub_10014CD48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    goto LABEL_5;
  }
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136315651;
    uint64_t v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v29 = 2113;
    uint64_t v30 = v17;
    __int16 v31 = 2112;
    id v32 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s error adding primary user with %{private}@ error (%@)",  buf,  0x20u);
  }

  if (!objc_msgSend(*(id *)(a1 + 40), "_errorIsRecoverableForPrimary:", objc_msgSend(v3, "code")))
  {
    int v10 = *(_BYTE **)(a1 + 40);
    if (v10[64] && objc_msgSend(v10, "_errorIsUserNotPresentOnTV:", objc_msgSend(v3, "code")))
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136315651;
        uint64_t v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
        __int16 v29 = 2113;
        uint64_t v30 = v12;
        __int16 v31 = 2112;
        id v32 = v3;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s error adding user with %{private}@, error: %@ as user does not have a profile on the TV",  buf,  0x20u);
      }
    }

    else
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSymptomsReporter sharedInstance]( &OBJC_CLASS___SiriCoreSymptomsReporter,  "sharedInstance"));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
      id v15 = [v14 processIdentifier];
      [v13 reportIssueWithBackOffTimerForType:@"multi_user" subType:@"add_user_to_home" context:&__NSDictionary0__struct processIdentifier:v15 walkboutStatus:byte_1005780A0];
    }

    uint64_t v16 = *(void *)(a1 + 120);
    if (v16) {
      (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0LL);
    }
  }

  else
  {
LABEL_5:
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 48LL), *(id *)(a1 + 32));
    int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    objc_msgSend( v5,  "setShareOwnerName:homeMemberSettings:audioAppSignals:loggingAllowed:forSharedUserId:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  (unint64_t)objc_msgSend(*(id *)(a1 + 72), "count") < 2,  *(void *)(a1 + 32));

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    uint64_t v7 = *(void *)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10014DA88;
    v19[3] = &unk_1004F2EF8;
    uint64_t v8 = *(void *)(a1 + 80);
    id v20 = *(id *)(a1 + 88);
    id v21 = *(id *)(a1 + 96);
    id v22 = v3;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v18.i64[0];
    int8x16_t v23 = vextq_s8(v18, v18, 8uLL);
    id v24 = *(id *)(a1 + 104);
    id v25 = *(id *)(a1 + 112);
    id v26 = *(id *)(a1 + 120);
    [v6 updateMultiUserWithSharedUserId:v7 companionInfo:v8 completion:v19];
  }
}

void sub_10014D0A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315651;
      uint64_t v7 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v8 = 2113;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s error adding home owner with %{private}@ error (%@)",  (uint8_t *)&v6,  0x20u);
    }
  }
}

void sub_10014D180(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    goto LABEL_5;
  }
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 136315651;
    uint64_t v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v29 = 2113;
    uint64_t v30 = v17;
    __int16 v31 = 2112;
    id v32 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s error adding user with %{private}@, error: %@",  buf,  0x20u);
  }

  if (!objc_msgSend(*(id *)(a1 + 40), "_errorIsRecoverableForSecondary:", objc_msgSend(v3, "code")))
  {
    __int16 v10 = *(_BYTE **)(a1 + 40);
    if (v10[64] && objc_msgSend(v10, "_errorIsUserNotPresentOnTV:", objc_msgSend(v3, "code")))
    {
      id v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 136315651;
        uint64_t v28 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
        __int16 v29 = 2113;
        uint64_t v30 = v12;
        __int16 v31 = 2112;
        id v32 = v3;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s error adding user with %{private}@, error: %@ as user does not have a profile on the TV",  buf,  0x20u);
      }
    }

    else
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSymptomsReporter sharedInstance]( &OBJC_CLASS___SiriCoreSymptomsReporter,  "sharedInstance"));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
      id v15 = [v14 processIdentifier];
      [v13 reportIssueWithBackOffTimerForType:@"multi_user" subType:@"add_user_to_home" context:&__NSDictionary0__struct processIdentifier:v15 walkboutStatus:byte_1005780A0];
    }

    uint64_t v16 = *(void *)(a1 + 120);
    if (v16) {
      (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0LL);
    }
  }

  else
  {
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    objc_msgSend( v5,  "setShareOwnerName:homeMemberSettings:audioAppSignals:loggingAllowed:forSharedUserId:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  (unint64_t)objc_msgSend(*(id *)(a1 + 72), "count") < 2,  *(void *)(a1 + 32));

    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    uint64_t v7 = *(void *)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10014D98C;
    v19[3] = &unk_1004F2EF8;
    uint64_t v8 = *(void *)(a1 + 80);
    id v20 = *(id *)(a1 + 88);
    id v21 = *(id *)(a1 + 96);
    id v22 = v3;
    int8x16_t v18 = *(int8x16_t *)(a1 + 32);
    id v9 = (id)v18.i64[0];
    int8x16_t v23 = vextq_s8(v18, v18, 8uLL);
    id v24 = *(id *)(a1 + 104);
    id v25 = *(id *)(a1 + 112);
    id v26 = *(id *)(a1 + 120);
    [v6 updateMultiUserWithSharedUserId:v7 companionInfo:v8 completion:v19];
  }
}

void sub_10014D4CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (!v3) {
    goto LABEL_9;
  }
  unsigned int v5 = objc_msgSend(*(id *)(a1 + 32), "_errorIsUserNotPresentOnTV:", objc_msgSend(v3, "code"));
  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (v5)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 136315651;
      uint64_t v30 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      __int16 v31 = 2113;
      uint64_t v32 = v7;
      __int16 v33 = 2112;
      uint64_t v34 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s error adding user with %{private}@, error: %@ as user does not have a profile on the TV",  buf,  0x20u);
    }

    goto LABEL_11;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315651;
    uint64_t v30 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v31 = 2113;
    uint64_t v32 = v19;
    __int16 v33 = 2112;
    uint64_t v34 = v4;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s error adding non home user with sharedUserID %{private}@ error (%@)",  buf,  0x20u);
  }

  if ((objc_msgSend(*(id *)(a1 + 32), "_errorIsRecoverableForPrimary:", objc_msgSend(v4, "code")) & 1) != 0
    || objc_msgSend(*(id *)(a1 + 32), "_errorIsRecoverableForSecondary:", objc_msgSend(v4, "code")))
  {
LABEL_9:
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    objc_msgSend( v8,  "setShareOwnerName:homeMemberSettings:audioAppSignals:loggingAllowed:forSharedUserId:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  (unint64_t)objc_msgSend(*(id *)(a1 + 72), "count") < 2,  *(void *)(a1 + 40));

    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    uint64_t v10 = *(void *)(a1 + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10014D81C;
    v20[3] = &unk_1004F2EF8;
    uint64_t v11 = *(void *)(a1 + 80);
    id v21 = *(id *)(a1 + 88);
    id v22 = *(id *)(a1 + 96);
    id v23 = v4;
    id v24 = *(id *)(a1 + 104);
    id v12 = *(id *)(a1 + 120);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    id v28 = v12;
    uint64_t v25 = v13;
    id v26 = v14;
    id v27 = *(id *)(a1 + 112);
    [v9 updateMultiUserWithSharedUserId:v10 companionInfo:v11 completion:v20];

    goto LABEL_13;
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[SiriCoreSymptomsReporter sharedInstance](&OBJC_CLASS___SiriCoreSymptomsReporter, "sharedInstance"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  id v17 = [v16 processIdentifier];
  [v15 reportIssueWithBackOffTimerForType:@"multi_user" subType:@"add_user_to_home" context:&__NSDictionary0__struct processIdentifier:v17 walkboutStatus:byte_1005780A0];

LABEL_11:
  uint64_t v18 = *(void *)(a1 + 120);
  if (v18) {
    (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0LL);
  }
LABEL_13:
}

void sub_10014D81C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v10 = 136315907;
    uint64_t v11 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v3;
    __int16 v14 = 2113;
    uint64_t v15 = v5;
    __int16 v16 = 2113;
    uint64_t v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Updated non home multiuser with error (%@) companionAssistantID = %{private}@ companionSpeechID = %{private}@",  (uint8_t *)&v10,  0x2Au);
  }

  uint64_t v7 = *(void *)(a1 + 48);
  if (_AFPreferencesSiriRMVSetting(*(void *)(a1 + 56)))
  {
    [*(id *)(a1 + 64) _updateVoiceIDProfilesForSharedUser:*(void *)(a1 + 72) iCloudAltDSID:*(void *)(a1 + 56) records:*(void *)(a1 + 80) isPrimary:0 isNewUser:v7 == 0 completion:*(void *)(a1 + 88)];
  }

  else
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s RMV setting is off for this user. Ignoring voice profile download.",  (uint8_t *)&v10,  0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 88);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0LL);
    }
  }
}

void sub_10014D98C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315907;
    uint64_t v8 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 2113;
    uint64_t v12 = v5;
    __int16 v13 = 2113;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Updated shared multiuser with error (%@) %{private}@/%{private}@",  (uint8_t *)&v7,  0x2Au);
  }

  [*(id *)(a1 + 56) _updateVoiceIDProfilesForSharedUser:*(void *)(a1 + 64) iCloudAltDSID:*(void *)(a1 + 72) records:*(void *)(a1 + 80) isPrimary:0 isNewUser:*(void *)(a1 + 48) == 0 completion:*(void *)(a1 + 88)];
}

void sub_10014DA88(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315907;
    uint64_t v8 = "-[ADCloudKitMultiUserSharedDataStore setKeyValueRecordsAndVoiceProfile:records:completion:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 2113;
    uint64_t v12 = v5;
    __int16 v13 = 2113;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Updated primary multiuser with error (%@) companionAssistantID = %{private}@ companionSpeechID = %{private}@",  (uint8_t *)&v7,  0x2Au);
  }

  [*(id *)(a1 + 56) _updateVoiceIDProfilesForSharedUser:*(void *)(a1 + 64) iCloudAltDSID:*(void *)(a1 + 72) records:*(void *)(a1 + 80) isPrimary:1 isNewUser:*(void *)(a1 + 48) == 0 completion:*(void *)(a1 + 88)];
}

void sub_10014DB84(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 phsAssetManifest:1]);

  if (v6)
  {
    id v3 = sub_100071EE4(v6);
    int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(void, void *, void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v4, 0LL);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4017LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v4);
  }
}

void sub_10014DC30(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 16);
  if (v3)
  {
    int v4 = *(void **)(v2 + 24);
    if (!v4)
    {
      uint64_t v5 = sub_100071EE4(v3);
      uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
      uint64_t v7 = a1[4];
      uint64_t v8 = *(void **)(v7 + 24);
      *(void *)(v7 + 24) = v6;

      int v4 = *(void **)(a1[4] + 24LL);
    }

    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v9 = v4;
    id v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v19;
      while (2)
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v19 != v12) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
          if (objc_msgSend(v14, "isEqualToString:", a1[5], (void)v18))
          {
            uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForKey:v14]);
            if (v15)
            {
              uint64_t v17 = (void *)v15;
              (*(void (**)(void))(a1[6] + 16LL))();

              return;
            }
          }
        }

        id v11 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
  }

  else
  {
    __int16 v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v24 = "-[ADCloudKitMultiUserSharedDataStore fetchDeviceTypesForLanguage:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s No assetManifestCache", buf, 0xCu);
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

id sub_10014DE04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cleanupCacheDirectory];
}

NSDictionary *sub_10014DE0C(uint64_t a1)
{
  return +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 32));
}

id sub_10014DE20(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32)) {
    uint64_t v1 = @"owner";
  }
  else {
    uint64_t v1 = @"participant";
  }
  v6[0] = @"user";
  v6[1] = @"date";
  v7[0] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:]( &OBJC_CLASS___NSDateFormatter,  "localizedStringFromDate:dateStyle:timeStyle:",  v2,  1LL,  4LL));
  v7[1] = v3;
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

void sub_10014DF10(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    id v39 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNew"
          "User:completion:]_block_invoke";
    __int16 v40 = 2112;
    id v41 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s All desired downloading done with error %@.",  buf,  0x16u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  uint64_t v30 = v3;
  [v5 triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 32) homeUserID:0 toState:v3 == 0];

  if (*(_BYTE *)(*(void *)(a1 + 40) + 64LL))
  {
    if (+[AFFeatureFlags isTVAirPodsEnabled](&OBJC_CLASS___AFFeatureFlags, "isTVAirPodsEnabled"))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      unsigned __int8 v7 = [v6 hasSetVoiceTriggerDefault];

      if ((v7 & 1) == 0)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
        [v8 getUserProfileDictionariesWithCompletion:&stru_1004F2E80];
      }
    }
  }

  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "allValues", a1));
  id v10 = [v9 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v35;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v35 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
        uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          id v39 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary"
                ":isNewUser:completion:]_block_invoke";
          __int16 v40 = 2112;
          id v41 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Removing cached CKAsset file: %@",  buf,  0x16u);
        }

        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        id v33 = 0LL;
        [v16 removeItemAtPath:v14 error:&v33];
        id v17 = v33;

        if (v17)
        {
          __int128 v18 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            id v39 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrima"
                  "ry:isNewUser:completion:]_block_invoke";
            __int16 v40 = 2112;
            id v41 = v14;
            __int16 v42 = 2112;
            id v43 = v17;
            _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Failure removing cached CKAsset file: %@ error: %@",  buf,  0x20u);
          }
        }
      }

      id v11 = [v9 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }

    while (v11);
  }

  if (v30)
  {
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_10014E39C;
    v31[3] = &unk_1004FD8D0;
    id v20 = v30;
    id v32 = v20;
    [v19 logEventWithType:6106 contextProvider:v31];

    uint64_t v21 = v29;
    uint64_t v22 = v29 + 72;
    if (!*(void *)(v29 + 72)) {
      goto LABEL_27;
    }
    id v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v20, NSUnderlyingErrorKey);
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4011LL));
  }

  else
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    [v25 updateVoiceProfiles];

    uint64_t v21 = v29;
    [*(id *)(v29 + 40) _logRelevantAnalyticsOnMultiUserVoiceProfileDownloadSuccessWithSharedUserID:*(void *)(v29 + 56) isPrimary:*(unsigned __int8 *)(v29 + 80) isNewUser:*(unsigned __int8 *)(v29 + 81)];
    uint64_t v22 = v29 + 72;
    if (!*(void *)(v29 + 72)) {
      goto LABEL_27;
    }
    uint64_t v26 = *(void *)(v29 + 40);
    id v27 = *(id *)(v29 + 64);
    id v24 = 0LL;
    id v23 = *(NSMutableDictionary **)(v26 + 16);
    *(void *)(v26 + 16) = v27;
  }

  if (([*(id *)(v21 + 40) dataStoreIsOnSharedDatabase] & 1) == 0)
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v28 postNotificationName:@"ADCloudKitOwnerFetchCompleteNotification" object:0];
  }

  (*(void (**)(void))(*(void *)v22 + 16LL))();

LABEL_27:
}

id sub_10014E384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _constructRecord:a2 fileArchives:*(void *)(a1 + 40) assetManifest:*(void *)(a1 + 48) filePath:a3];
}

uint64_t sub_10014E39C(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

void sub_10014E3A4(id a1, NSArray *a2)
{
  if ((id)-[NSArray count](a2, "count") == (id)1)
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      uint64_t v6 = "-[ADCloudKitMultiUserSharedDataStore _updateVoiceIDProfilesForSharedUser:iCloudAltDSID:records:isPrimary:isNe"
           "wUser:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Defaulting VT to 1", (uint8_t *)&v5, 0xCu);
    }

    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](&OBJC_CLASS___VTPreferences, "sharedPreferences"));
    [v3 setVoiceTriggerEnabled:1];

    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v4 setHasSetVoiceTriggerDefault:1];
  }

id sub_10014E498(uint64_t a1)
{
  return [*(id *)(a1 + 32) _mergeDataWithModifiedRecords:*(void *)(a1 + 40) deletedRecordIDs:*(void *)(a1 + 48) containsAllChanges:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
}

void sub_10014E4AC(uint64_t a1, uint64_t a2)
{
  if (!AFSupportsMultiUser(a1, a2) || *(void *)(*(void *)(a1 + 32) + 48LL))
  {
LABEL_3:
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v3 + 32))
    {
      *(_BYTE *)(v3 + 33) = 1;
      if (*(void *)(a1 + 48))
      {
        if (!*(void *)(*(void *)(a1 + 32) + 40LL))
        {
          int v4 = objc_alloc_init(&OBJC_CLASS___AFQueue);
          uint64_t v5 = *(void *)(a1 + 32);
          uint64_t v6 = *(void **)(v5 + 40);
          *(void *)(v5 + 40) = v4;
        }

        unsigned __int8 v7 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          __int16 v31 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Enqueue completion", buf, 0xCu);
        }

        uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 40LL);
        id v9 = objc_retainBlock(*(id *)(a1 + 48));
        [v8 enqueueObject:v9];
      }
    }

    else
    {
      *(_BYTE *)(v3 + 32) = 1;
      id v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        if (*(_BYTE *)(*(void *)(a1 + 32) + 65LL)) {
          uint64_t v26 = @"shared";
        }
        else {
          uint64_t v26 = @"owner";
        }
        *(_DWORD *)buf = 136315394;
        __int16 v31 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
        __int16 v32 = 2112;
        id v33 = v26;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s Upload started for %@", buf, 0x16u);
      }

      id v11 = *(void **)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10014E800;
      v27[3] = &unk_1004F57D0;
      id v13 = *(id *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void **)(a1 + 40);
      id v29 = v13;
      v27[4] = v14;
      id v28 = v15;
      [v11 _synchronizeUsingActivity:v12 completion:v27];
    }

    return;
  }

  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zone]);
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 zoneID]);
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 ownerName]);
  uint64_t v20 = objc_claimAutoreleasedReturnValue([v16 getSharedUserIdForShareOwnerName:v19]);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(v21 + 48);
  *(void *)(v21 + 4_Block_object_dispose(va, 8) = v20;

  id v23 = *(const __CFString **)(*(void *)(a1 + 32) + 48LL);
  if (v23)
  {
    id v24 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315395;
      __int16 v31 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
      __int16 v32 = 2113;
      id v33 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s SharedUserId is %{private}@", buf, 0x16u);
    }

    goto LABEL_3;
  }

  uint64_t v25 = *(void *)(a1 + 48);
  if (v25) {
    (*(void (**)(uint64_t, void))(v25 + 16))(v25, 0LL);
  }
}

void sub_10014E800(void *a1, uint64_t a2)
{
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v12 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%s Upload ended", buf, 0xCu);
  }

  uint64_t v5 = a1[6];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
  }
  uint64_t v6 = a1[4];
  unsigned __int8 v7 = (void *)a1[5];
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 80);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10014E920;
  v9[3] = &unk_1004FD968;
  v9[4] = v6;
  id v10 = v7;
  dispatch_async(v8, v9);
}

void *sub_10014E920(void *result)
{
  *(_BYTE *)(result[4] + 32LL) = 0;
  uint64_t v1 = result[4];
  if (*(_BYTE *)(v1 + 33))
  {
    *(_BYTE *)(v1 + 33) = 0;
    *(_BYTE *)(result[4] + 32LL) = 1;
    uint64_t v3 = (void *)result[4];
    uint64_t v2 = result[5];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10014E99C;
    v4[3] = &unk_1004FB0E0;
    v4[4] = v3;
    return [v3 _synchronizeUsingActivity:v2 completion:v4];
  }

  return result;
}

void sub_10014E99C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 80);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10014E9F8;
  v4[3] = &unk_1004FC4D0;
  v4[4] = v2;
  char v5 = a2;
  dispatch_async(v3, v4);
}

void sub_10014E9F8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 32LL) = 0;
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) dequeueObject]);
  if (v2)
  {
    uint64_t v3 = (void (**)(void, void))v2;
    do
    {
      int v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        id v9 = "-[ADCloudKitMultiUserSharedDataStore synchronizeUsingActivity:completion:]_block_invoke_3";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Dequeue completion", buf, 0xCu);
      }

      v3[2](v3, *(unsigned __int8 *)(a1 + 40));
      uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) dequeueObject]);

      uint64_t v3 = (void (**)(void, void))v5;
    }

    while (v5);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  unsigned __int8 v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;
}

void sub_10014EB28(id a1, NSException *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCloudKitMultiUserSharedDataStore setServerChangeToken:]_block_invoke";
    __int16 v6 = 2112;
    unsigned __int8 v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error encountered while encoding voice trigger server change token: %@",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_10014EBE8(id a1, NSException *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCloudKitMultiUserSharedDataStore serverChangeToken]_block_invoke";
    __int16 v6 = 2112;
    unsigned __int8 v7 = v2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error encountered while decoding voice trigger server change token: %@",  (uint8_t *)&v4,  0x16u);
  }
}

uint64_t sub_10014F1C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10014F204(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _availableAnnouncementRequestTypesForCarPlayConnectionWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_10014F210(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) lastKnownEligibleAnnouncementRequestTypes]);
}

id sub_10014F23C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateForCarPlaySessionConnected:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10014F24C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _isCarPlayConnectedWithCompletion:*(void *)(a1 + 40)];
}

void sub_10014F4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10014F51C()
{
  uint64_t v5 = 0LL;
  __int16 v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  v0 = (id *)qword_100577F50;
  uint64_t v8 = qword_100577F50;
  if (!qword_100577F50)
  {
    uint64_t v1 = sub_10014F610();
    v0 = (id *)dlsym(v1, "INSearchForMessagesIntentIdentifier");
    v6[3] = (uint64_t)v0;
    qword_100577F50 = (uint64_t)v0;
  }

  _Block_object_dispose(&v5, 8);
  if (v0)
  {
    id v2 = *v0;
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "NSString *getINSearchForMessagesIntentIdentifier(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"AFCarPlayAnnouncementRequestCapabilityProvider.m",  29,  @"%s",  dlerror());

    __break(1u);
  }

void sub_10014F5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void *sub_10014F610()
{
  int v4 = 0LL;
  if (!qword_100577F58)
  {
    __int128 v5 = off_1004F2F68;
    uint64_t v6 = 0LL;
    qword_100577F58 = _sl_dlopen(&v5, &v4);
  }

  v0 = (void *)qword_100577F58;
  if (!qword_100577F58)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *IntentsLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"AFCarPlayAnnouncementRequestCapabilityProvider.m",  28,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_10014F714(uint64_t a1)
{
  id v1 = objc_alloc((Class)objc_opt_class(*(void *)(a1 + 32)));
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v6 = dispatch_queue_create("com.apple.assistant.announce.carplay", v3);

  id v4 = [v1 initWithQueue:v6];
  __int128 v5 = (void *)qword_100577F48;
  qword_100577F48 = (uint64_t)v4;
}

void sub_10014FDDC(uint64_t a1)
{
  dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) frontObject]);

  if (v2)
  {
    [*(id *)(a1 + 32) _incrementAndTestExecutionCount];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) dequeueObject]);
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[ADClientLiteListener _doDelayedClientWorkIfAny:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Now executing %@",  (uint8_t *)&v7,  0x16u);
    }

    __int128 v5 = (void (**)(void))objc_claimAutoreleasedReturnValue([v3 timeout]);
    dispatch_queue_t v6 = (void (**)(void))objc_claimAutoreleasedReturnValue([v3 workItem]);
    if (v5) {
      v5[2](v5);
    }
    v6[2](v6);
  }

void sub_10014FF24(void *a1)
{
  dispatch_queue_attr_t v2 = (void *)a1[4];
  uint64_t v3 = v2[4];
  if (v3 < 1)
  {
    if (v3 || !a1[5])
    {
      dispatch_queue_t v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315138;
        __int16 v9 = "-[ADClientLiteListener doClientWork:withTimeoutBlock:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Unexpected execution count. File radar.",  (uint8_t *)&v8,  0xCu);
      }
    }

    else
    {
      [v2 _incrementAndTestExecutionCount];
      uint64_t v7 = a1[6];
      if (v7) {
        (*(void (**)(void))(v7 + 16))();
      }
      (*(void (**)(void))(a1[5] + 16LL))();
    }
  }

  else
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      __int16 v9 = "-[ADClientLiteListener doClientWork:withTimeoutBlock:]_block_invoke";
      __int16 v10 = 2048;
      uint64_t v11 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Current execution count: %ld, enqueuing work",  (uint8_t *)&v8,  0x16u);
    }

    __int128 v5 = -[ADClientLiteWorkItem initWithWork:timeout:]( objc_alloc(&OBJC_CLASS___ADClientLiteWorkItem),  "initWithWork:timeout:",  a1[5],  a1[6]);
    [*(id *)(a1[4] + 24) enqueueObject:v5];
  }

void sub_1001507DC(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, id, void))(v3 + 16))(v3, v4, 0LL);
  }
}

void sub_10015082C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1001509BC;
  v9[3] = &unk_1004FCC00;
  id v10 = *(id *)(a1 + 48);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained remoteObjectProxyWithErrorHandler:v9]);

  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1001509CC;
    v7[3] = &unk_1004F3050;
    uint64_t v4 = *(void *)(a1 + 40);
    id v8 = *(id *)(a1 + 48);
    [v3 handleCommand:v4 completion:v7];
  }

  else
  {
    __int128 v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 136315394;
      uint64_t v12 = "-[ADClientLite adRequestDidReceiveCommand:reply:]_block_invoke_2";
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s No client handler for command %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1001509BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001509CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001509D8(uint64_t a1, char a2, void *a3, int a4)
{
  id v7 = a3;
  id v8 = *(dispatch_queue_s **)(a1 + 40);
  __int16 v9 = *(dispatch_group_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100151020;
  block[3] = &unk_1004F95C8;
  id v19 = *(id *)(a1 + 56);
  char v20 = a2;
  id v10 = v7;
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(a1 + 40);
  id v16 = v10;
  uint64_t v17 = v11;
  id v18 = v12;
  dispatch_group_notify(v9, v8, block);
  if (a4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
    [WeakRetained doDelayedClientWorkIfAny];
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v14 releaseShutdownAssertion:*(void *)(a1 + 48)];
}

void sub_100150AE0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = a4;
  id v10 = a3;
  id v8 = [a2 BOOLValue];
  id v9 = [v7 BOOLValue];

  (*(void (**)(uint64_t, id, id, id))(v6 + 16))(v6, v8, v10, v9);
}

void sub_100150B5C(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0LL, 50000000000LL);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100150EC8;
  v4[3] = &unk_1004F6DB8;
  objc_copyWeak(&v6, &location);
  id v5 = *(id *)(a1 + 48);
  char v7 = *(_BYTE *)(a1 + 56);
  dispatch_after(v2, v3, v4);

  objc_destroyWeak(&v6);
  objc_destroyWeak(&location);
}

void sub_100150C30(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100150CD4;
  block[3] = &unk_1004F3000;
  dispatch_time_t v2 = *(dispatch_queue_s **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  __int16 v10 = *(_WORD *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v2, block);
}

void sub_100150CD4(uint64_t a1)
{
  dispatch_time_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  uint64_t v3 = *(unsigned __int8 *)(a1 + 64);
  BOOL v4 = *(_BYTE *)(a1 + 65) == 0;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100150DAC;
  v7[3] = &unk_1004F2FD8;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  char v10 = *(_BYTE *)(a1 + 64);
  [v2 handleAceCommand:v5 afterCurrentRequest:v3 waitForResponse:v4 withDelegate:v6 completion:v7];
}

void sub_100150DAC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100150E50;
  block[3] = &unk_1004FBEA8;
  char v11 = a2;
  uint64_t v6 = *(dispatch_queue_s **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v10 = v5;
  char v12 = *(_BYTE *)(a1 + 48);
  id v7 = v5;
  dispatch_async(v6, block);
}

void sub_100150E50(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  dispatch_time_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 49)));
  [v2 invokeWithValue:v5 andValue:v3 andValue:v4];
}

void sub_100150EC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 136315394;
      id v9 = "-[ADClientLite handleRemoteCommand:afterCurrentRequest:isOneWay:completion:]_block_invoke_7";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Timing out ClientLite command %@",  (uint8_t *)&v8,  0x16u);
    }

    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  3000LL,  &__NSDictionary0__struct));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
    [WeakRetained invokeWithValue:v5 andValue:v4 andValue:v6];
  }
}

void sub_100151020(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 32));
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 32LL));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001510C0;
  v6[3] = &unk_1004FD968;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = v4;
  uint64_t v8 = v5;
  [WeakRetained addBarrierBlock:v6];
}

void sub_1001510C0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100151118;
  block[3] = &unk_1004FD940;
  id v1 = *(dispatch_queue_s **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v1, block);
}

id sub_100151118(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  [WeakRetained invalidate];

  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 32LL), 0LL);
}

void sub_100151D98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100152708( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10015359C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001535AC(uint64_t a1)
{
}

uint64_t sub_1001535B4(uint64_t a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1001535F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

id sub_10015360C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v3 + 40);
  id v4 = [v2 _preparePerson:a2 meCardCache:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  return v4;
}

void sub_100153660(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v8 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 56LL);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100153E28;
  v5[3] = &unk_1004FC668;
  id v6 = *(id *)(a1 + 48);
  [v4 handleCommand:v3 completionHandler:v5];
}

void sub_100153774(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v7 = 2048;
    uint64_t v8 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s safetyGroup1 leave invoked with signal %ld",  (uint8_t *)&v5,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100153840(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  __int16 v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v6 _queue]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100153CD0;
  v9[3] = &unk_1004FAE98;
  id v10 = v5;
  int v13 = a2;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 40);
  id v8 = v5;
  dispatch_async(v7, v9);
}

void sub_100153924(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v7 = 2048;
    uint64_t v8 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s safetyGroup2 leave invoked with signal %ld",  (uint8_t *)&v5,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001539F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v10 _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100153B1C;
  block[3] = &unk_1004F7698;
  id v16 = v7;
  id v17 = *(id *)(a1 + 32);
  id v18 = v8;
  id v19 = v9;
  id v20 = *(id *)(a1 + 40);
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v11, block);
}

uint64_t sub_100153B10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100153B1C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v9 = 136315394;
    id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s recordRoute = %@", (uint8_t *)&v9, 0x16u);
  }

  [*(id *)(a1 + 40) _setRecordRoute:*(void *)(a1 + 32)];
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 48);
    int v9 = 136315394;
    id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s recordDeviceIdentifier = %@",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 40) _setRecordDeviceIdentifier:*(void *)(a1 + 48)];
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    int v9 = 136315394;
    id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s recordDeviceUID = %@",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 40) _setRecordDeviceUID:*(void *)(a1 + 56)];
  return [*(id *)(a1 + 64) invokeWithSignal:0];
}

id sub_100153CD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(_DWORD *)(a1 + 56);
      int v9 = 136315650;
      id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke";
      __int16 v11 = 1024;
      int v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s audioSessionID = %u, error = %@",  (uint8_t *)&v9,  0x1Cu);
    }

    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = 0LL;
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 56);
      int v9 = 136315394;
      id v10 = "-[ADExtensionService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s audioSessionID = %u",  (uint8_t *)&v9,  0x12u);
    }

    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(unsigned int *)(a1 + 56);
  }

  [v4 _setAudioSessionID:v5];
  return [*(id *)(a1 + 48) invokeWithSignal:0];
}

uint64_t sub_100153E28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001547C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_100154920(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _clearConnection];
}

void sub_10015494C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _clearConnection];
}

void sub_100154978(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100154A00;
  v4[3] = &unk_1004FCC00;
  id v5 = *(id *)(a1 + 48);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _multiUserRemoraServiceWithErrorHandler:v4]);
  [v3 setLocalMeCard:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t sub_100154A00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100154A14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100154A9C;
  v4[3] = &unk_1004FCC00;
  id v5 = *(id *)(a1 + 48);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _multiUserRemoraServiceWithErrorHandler:v4]);
  [v3 removeCommunalDeviceUserBySharedUserID:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t sub_100154A9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100154AB0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100154B3C;
  v4[3] = &unk_1004FCC00;
  id v5 = *(id *)(a1 + 56);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _multiUserRemoraServiceWithErrorHandler:v4]);
  [v3 addCommunalDeviceUser:*(void *)(a1 + 40) withAttribute:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_100154B3C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100154B50(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100154BDC;
  v4[3] = &unk_1004FCC00;
  id v5 = *(id *)(a1 + 56);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _multiUserRemoraServiceWithErrorHandler:v4]);
  [v3 addDeviceOwner:*(void *)(a1 + 40) withAttribute:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_100154BDC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001565D4(id a1)
{
  id v1 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"b73213eb-92f8-45a6-9328-6e71cdbb77d6");
  uint64_t v2 = (void *)qword_100577F68;
  qword_100577F68 = (uint64_t)v1;
}

void sub_100157674(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315651;
    int v8 = "-[ADRemoteContextStore _dumpStateForReason:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    __int16 v11 = 2113;
    id v12 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #hal [%@] remote context: %{private}@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_100157750(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 40LL))
  {
    id v2 = sub_1001659FC(*(void **)(a1 + 40), 0LL);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (v3)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        int v7 = "-[ADRemoteContextStore rapportLink:didLoseDevice:]_block_invoke";
        __int16 v8 = 2112;
        __int16 v9 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #hal Clearing context for %@",  (uint8_t *)&v6,  0x16u);
      }

      [*(id *)(*(void *)(a1 + 32) + 32) removeObjectForPeerInfo:v3];
    }

    else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v5 = *(void **)(a1 + 40);
      int v6 = 136315394;
      int v7 = "-[ADRemoteContextStore rapportLink:didLoseDevice:]_block_invoke";
      __int16 v8 = 2112;
      __int16 v9 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s #hal Unable to clear context because we can't extract peer info for %@",  (uint8_t *)&v6,  0x16u);
    }
  }

void sub_1001578A8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    unsigned __int8 v2 = [*(id *)(a1 + 32) containsObject:AFDeviceContextKeyAll];
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v4 = v3;
    id v5 = *(void **)(a1 + 40);
    if ((v2 & 1) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      v11[2] = sub_100157B1C;
      v11[3] = &unk_1004F31A0;
      int v6 = v3;
      id v12 = v6;
      [v5 _enumerateDeviceContextsUsingBlock:v11];
      int v7 = v12;
    }

    else
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_100157A78;
      v13[3] = &unk_1004F3178;
      uint64_t v14 = (NSMutableArray *)*(id *)(a1 + 48);
      id v15 = *(id *)(a1 + 32);
      int v6 = v4;
      id v16 = v6;
      [v5 _enumerateDeviceContextsUsingBlock:v13];

      int v7 = v14;
    }
  }

  else
  {
    __int16 v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v18 = "-[ADRemoteContextStore getSerializedDeviceContextSnapshotIncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s #hal No included keys specified", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    int v6 = 0LL;
  }

  (*(void (**)(void, NSMutableArray *, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v6,  v9,  v10);
}

void sub_100157A78(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if (([v5 isValid] & 1) != 0 || objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue( [v5 partialSerializedBackingStoreIncludingKeys:*(void *)(a1 + 40) excludingMandatoryKeys:*(void *)(a1 + 32)]);
    if (v6)
    {
      int v7 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v8,  v6);
      [*(id *)(a1 + 48) addObject:v7];
    }
  }
}

void sub_100157B1C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 isValid])
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 serializedBackingStore]);
    if (v6)
    {
      int v7 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v8,  v6);
      [*(id *)(a1 + 32) addObject:v7];
    }
  }
}

void sub_100157BB0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceInfo]);
  uint64_t v3 = AFPeerInfoMerge(v2, *(void *)(a1 + 40));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if ([*(id *)(a1 + 48) count])
  {
    if ([*(id *)(a1 + 48) containsObject:AFDeviceContextKeyAll])
    {
      id v5 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  *(void *)(a1 + 40),  *(void *)(a1 + 32));
      [*(id *)(*(void *)(a1 + 64) + 32) setObject:v5 forPeerInfo:v4];
    }

    else
    {
      int v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = *(void *)(a1 + 48);
        uint64_t v14 = *(void *)(a1 + 56);
        int v15 = 136315650;
        id v16 = "-[ADRemoteContextStore setDeviceContext:includedKeys:excludedKeys:forDeviceWithPeerInfo:completion:]_block_invoke";
        __int16 v17 = 2112;
        uint64_t v18 = v13;
        __int16 v19 = 2112;
        uint64_t v20 = v14;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #hal included keys = %@, excluded keys = %@, updating with partial context",  (uint8_t *)&v15,  0x20u);
      }

      id v8 = (AFPeerContentTuple *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 32) objectForPeerInfo:v4]);
      id v5 = v8;
      if (v8)
      {
        uint64_t v9 = (AFPeerContentTuple *)objc_claimAutoreleasedReturnValue(-[AFPeerContentTuple content](v8, "content"));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( -[AFPeerContentTuple partiallyUpdatedContextForDeviceContextKeys:excludingMandatoryKeys:fromDeviceContext:]( v9,  "partiallyUpdatedContextForDeviceContextKeys:excludingMandatoryKeys:fromDeviceContext:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 32)));
        __int16 v11 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  *(void *)(a1 + 40),  v10);
        [*(id *)(*(void *)(a1 + 64) + 32) setObject:v11 forPeerInfo:v4];
      }

      else
      {
        uint64_t v9 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  *(void *)(a1 + 40),  *(void *)(a1 + 32));
        [*(id *)(*(void *)(a1 + 64) + 32) setObject:v9 forPeerInfo:v4];
      }
    }
  }

  else
  {
    int v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315138;
      id v16 = "-[ADRemoteContextStore setDeviceContext:includedKeys:excludedKeys:forDeviceWithPeerInfo:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s #hal no included keys. Skipping",  (uint8_t *)&v15,  0xCu);
    }
  }

  [*(id *)(a1 + 64) _dumpStateForReason:@"deviceContextUpdate"];
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12) {
    (*(void (**)(void))(v12 + 16))();
  }
}

id sub_100157E2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "addListener:");
}

void sub_100157E68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100157F1C;
  v9[3] = &unk_1004FDA30;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_100157F1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) count];
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v4 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:comp"
                           "letion:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s #hal identified collector(s): %@", buf, 0x16u);
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "af_lenientMappedArray:", &stru_1004F3238));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "af_lenientMappedArray:", &stru_1004F3258));
    id v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if ([v22 count]) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v22, @"forceFetchingContextFrom");
    }
    if (objc_msgSend(v20, "count", v20)) {
      -[NSMutableDictionary setObject:forKey:]( v24,  "setObject:forKey:",  v21,  @"force_fetch_assistant_identifiers");
    }
    -[NSMutableDictionary setObject:forKey:]( v24,  "setObject:forKey:",  &__kCFBooleanTrue,  @"prefers_assistant_identifiers");
    id v6 = dispatch_group_create();
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    id v39 = sub_10015838C;
    __int16 v40 = sub_10015839C;
    id v41 = 0LL;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id obj = *(id *)(a1 + 32);
    id v8 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v34;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v34 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)v10);
          dispatch_group_enter(v6);
          uint64_t v12 = *(void **)(a1 + 48);
          id v13 = (void *)v12[2];
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 _contextLinkMessageOptions]);
          v29[0] = _NSConcreteStackBlock;
          v29[1] = 3221225472LL;
          v29[2] = sub_1001583A4;
          v29[3] = &unk_1004F4240;
          v29[4] = *(void *)(a1 + 48);
          v29[5] = v11;
          uint64_t v30 = v7;
          __int16 v32 = buf;
          __int16 v31 = v6;
          [v13 sendRequestID:@"com.apple.siri.rapport-link.request.generic" messageType:@"agg_context_fetch" messagePayload:v24 toDeviceWithIDSDeviceID:v11 options:v14 completion:v29];

          int v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
          [v15 logEventWithType:4585 context:0];

          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      }

      while (v8);
    }

    id v16 = *(void **)(a1 + 56);
    __int16 v17 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100158484;
    block[3] = &unk_1004FAFF0;
    uint64_t v26 = v7;
    id v27 = v16;
    id v28 = buf;
    uint64_t v18 = v7;
    dispatch_group_notify(v6, v17, block);

    _Block_object_dispose(buf, 8);
  }

  else
  {
    if (v4)
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:comp"
                           "letion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #hal Context Collector unavailable",  buf,  0xCu);
    }

    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1013LL));
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0LL, v22);
  }
}

void sub_100158364(_Unwind_Exception *a1)
{
}

uint64_t sub_10015838C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10015839C(uint64_t a1)
{
}

void sub_1001583A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001584A0;
  block[3] = &unk_1004F4218;
  block[1] = 3221225472LL;
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = *(id *)(a1 + 48);
  id v17 = v6;
  __int128 v12 = *(_OWORD *)(a1 + 56);
  id v9 = (id)v12;
  __int128 v18 = v12;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_100158484(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_1001584A0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    id v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472LL;
    id v11 = sub_100158628;
    __int128 v12 = &unk_1004F3280;
    id v3 = *(void **)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = v3;
    [v2 enumerateKeysAndObjectsUsingBlock:&v9];
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics", v9, v10, v11, v12, v13));
    [v4 logEventWithType:4588 context:0];
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 136315650;
      id v16 = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s #hal Error fetching context from device: %@, %@",  buf,  0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), *(id *)(a1 + 56));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v6 logEventWithType:4589 context:0];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100158628(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10016ABE0(v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8 || (v9 = sub_100165580(v5), (uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v9)) != 0LL))
  {
    uint64_t v10 = -[AFDeviceContext initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:]( objc_alloc(&OBJC_CLASS___AFDeviceContext),  "initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:",  v6,  0LL,  *(void *)(a1 + 32));
    id v11 = *(void **)(a1 + 40);
    __int128 v12 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v8,  v10);
    [v11 addObject:v12];
  }

  else
  {
    uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "-[ADRemoteContextStore _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:completion:]_block_invoke_5";
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s #hal Unable to get a peer info from deviceID: %@",  (uint8_t *)&v14,  0x16u);
    }
  }
}

NSString *__cdecl sub_10015878C(id a1, AFPeerInfo *a2)
{
  return (NSString *)sub_10016AC9C(a2);
}

NSString *__cdecl sub_100158794(id a1, AFPeerInfo *a2)
{
  return (NSString *)sub_10016AD0C(a2);
}

void sub_10015879C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    id v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void **)(a1 + 32);
      int v22 = 136315650;
      id v23 = "-[ADRemoteContextStore _fetchContextFromDeviceWithPeerInfo:completion:]_block_invoke";
      __int16 v24 = 2112;
      id v25 = v20;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s #hal Error fetching context from device: %@, %@",  (uint8_t *)&v22,  0x20u);
    }

    id v18 = v6;
    goto LABEL_13;
  }

  id v7 = sub_10016AC9C(*(void **)(a1 + 32));
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  if (!v8
    || (id v9 = (void *)v8,
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v8]),
        v9,
        !v10))
  {
    id v11 = sub_10016AD0C(*(void **)(a1 + 32));
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
    if (!v12
      || (uint64_t v13 = (void *)v12,
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v12]),
          v13,
          !v10))
    {
      __int16 v19 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void **)(a1 + 32);
        int v22 = 136315650;
        id v23 = "-[ADRemoteContextStore _fetchContextFromDeviceWithPeerInfo:completion:]_block_invoke";
        __int16 v24 = 2112;
        id v25 = v5;
        __int16 v26 = 2112;
        id v27 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s #hal Error no context in fetch response %@ from device: %@",  (uint8_t *)&v22,  0x20u);
      }

      id v18 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3103LL));
LABEL_13:
      __int16 v16 = v18;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      [v10 logEventWithType:4589 context:0];
      int v14 = 0LL;
      goto LABEL_14;
    }
  }

  int v14 = -[AFDeviceContext initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:]( objc_alloc(&OBJC_CLASS___AFDeviceContext),  "initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:",  v10,  0LL,  0LL);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v15 logEventWithType:4588 context:0];

  __int16 v16 = 0LL;
LABEL_14:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100158A14(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v12 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s #hal #on-demand send request to collector",  buf,  0xCu);
  }

  id v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v9 = @"prefers_assistant_identifiers";
  uint64_t v10 = &__kCFBooleanTrue;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextLinkMessageOptions]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100158B84;
  v7[3] = &unk_1004F4150;
  id v6 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v3 sendRequestToContextCollectorThroughOnDemandConnection:@"com.apple.siri.rapport-link.request.generic" messageType:@"agg_context_fetch" messagePayload:v4 options:v5 completion:v7];
}

void sub_100158B84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    id v17 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v5;
    __int16 v20 = 2112;
    id v21 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s #hal #on-demand send request to collector response: %@, error: %@",  buf,  0x20u);
  }

  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100158CD8;
  block[3] = &unk_1004FD9E0;
  id v13 = v5;
  id v14 = v6;
  id v15 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

void sub_100158CD8(void *a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = (void *)a1[4];
  if (v3)
  {
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"payload"]);
    if (v4)
    {
      uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0)
      {
        id v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v12 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s #hal #on-demand received malformed response",  buf,  0xCu);
        }

        BOOL v4 = 0LL;
      }
    }

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100158EB0;
    v9[3] = &unk_1004F43F0;
    id v10 = v2;
    [v4 enumerateKeysAndObjectsUsingBlock:v9];
  }

  else
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = a1[5];
      *(_DWORD *)buf = 136315394;
      uint64_t v12 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #hal #on-demand Error fetching context from context collector through on-demand connection: %@",  buf,  0x16u);
    }
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100158EB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10016ABE0(v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    id v9 = -[AFDeviceContext initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:]( objc_alloc(&OBJC_CLASS___AFDeviceContext),  "initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:",  v6,  0LL,  &stru_1004FECA0);
    id v10 = *(void **)(a1 + 32);
    id v11 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v8,  v9);
    [v10 addObject:v11];
  }

  else
  {
    uint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "-[ADRemoteContextStore _fetchContextFromCollectorThroughOnDemandConnection:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s #hal #on-demand Unable to get a peer info from deviceID: %@",  (uint8_t *)&v13,  0x16u);
    }
  }
}

void sub_100159008(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10015909C;
  block[3] = &unk_1004FD9E0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

id sub_10015909C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 16LL);
      int v9 = 136315650;
      uint64_t v10 = "-[ADRemoteContextStore _activateOnDemandRapportConnectionAndFetchContext:]_block_invoke_2";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal #on-demand Error activating on-demand rapportLink, invalidating: %@, %@",  (uint8_t *)&v9,  0x20u);
    }

    [*(id *)(*(void *)(a1 + 40) + 16) invalidate];
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 16LL);
      int v9 = 136315394;
      uint64_t v10 = "-[ADRemoteContextStore _activateOnDemandRapportConnectionAndFetchContext:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #hal #on-demand rapportLink activated: %@",  (uint8_t *)&v9,  0x16u);
    }

    return [*(id *)(a1 + 40) _fetchContextFromCollectorThroughOnDemandConnection:*(void *)(a1 + 48)];
  }

void sub_10015920C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "activeDevices", 0));
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = sub_1001659FC(*(void **)(*((void *)&v10 + 1) + 8LL * (void)v7), 0LL);
        int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        if (v9) {
          -[NSMutableArray addObject:](v2, "addObject:", v9);
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  [*(id *)(a1 + 32) fetchContextSnapshotFromDevicesWithPeerInfo:v2 completion:*(void *)(a1 + 40)];
}

void sub_100159348(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int16 v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if ([*(id *)(*(void *)(a1 + 32) + 16) canReachPersonalDevices])
  {
    id v3 = (NSMutableArray *)[*(id *)(a1 + 40) mutableCopy];

    uint64_t v2 = v3;
  }

  else
  {
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    id v4 = *(id *)(a1 + 40);
    id v5 = [v4 countByEnumeratingWithState:&v59 objects:v64 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v60;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v60 != v6) {
            objc_enumerationMutation(v4);
          }
          uint64_t v8 = *(void *)(*((void *)&v59 + 1) + 8LL * (void)i);
          int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) remoteDeviceForPeerInfo:v8]);
          BOOL v10 = v9 == 0LL;

          if (v10) {
            __int128 v11 = v32;
          }
          else {
            __int128 v11 = v2;
          }
          -[NSMutableArray addObject:](v11, "addObject:", v8);
        }

        id v5 = [v4 countByEnumeratingWithState:&v59 objects:v64 count:16];
      }

      while (v5);
    }
  }

  __int128 v12 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
  v57[0] = 0LL;
  v57[1] = v57;
  v57[2] = 0x3032000000LL;
  v57[3] = sub_10015838C;
  v57[4] = sub_10015839C;
  id v58 = 0LL;
  __int128 v13 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472LL;
  v52[2] = sub_10015985C;
  v52[3] = &unk_1004F31C8;
  id v53 = 0LL;
  id v55 = *(id *)(a1 + 48);
  uint64_t v14 = v12;
  v54 = v14;
  v56 = v57;
  __int16 v15 = -[AFSafetyBlock initWithBlock:](v13, "initWithBlock:", v52);
  id v16 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
  id v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  v48[2] = sub_1001598B4;
  v48[3] = &unk_1004FBE80;
  id v49 = v17;
  v51 = v57;
  __int16 v31 = v15;
  os_signpost_id_t v50 = v31;
  id v19 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v16,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v18,  v48,  0.4);
  -[AFWatchdogTimer start](v19, "start");
  uint64_t v30 = v19;
  __int16 v20 = dispatch_group_create();
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id obj = v2;
  id v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v44,  v63,  16LL);
  if (v21)
  {
    uint64_t v22 = *(void *)v45;
    do
    {
      for (j = 0LL; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v45 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void *)(*((void *)&v44 + 1) + 8LL * (void)j);
        dispatch_group_enter(v20);
        id v25 = *(void **)(a1 + 32);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_1001599A4;
        v41[3] = &unk_1004F31F0;
        v41[4] = v25;
        v41[5] = v24;
        __int16 v42 = v14;
        id v43 = v20;
        objc_msgSend(v25, "_fetchContextFromDeviceWithPeerInfo:completion:", v24, v41, v30);
      }

      id v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v44,  v63,  16LL);
    }

    while (v21);
  }

  if (-[NSMutableArray count](v32, "count"))
  {
    dispatch_group_enter(v20);
    id v27 = *(void **)(a1 + 32);
    __int16 v26 = *(void **)(a1 + 40);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_100159A7C;
    v36[3] = &unk_1004F3218;
    v36[4] = v27;
    id v37 = v26;
    __int16 v40 = v57;
    id v38 = v14;
    id v39 = v20;
    [v27 _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:v37 completion:v36];
  }

  id v28 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100159B68;
  block[3] = &unk_1004FD940;
  __int128 v35 = v31;
  id v29 = v31;
  dispatch_group_notify(v20, v28, block);

  _Block_object_dispose(v57, 8);
}

void sub_10015982C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_10015985C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id, void))(v2 + 16))( v2,  v3,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
}

id sub_1001598B4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 136315394;
    int v9 = "-[ADRemoteContextStore fetchContextSnapshotFromDevicesWithPeerInfo:completion:]_block_invoke_2";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s #hal Timed out force fetching from %@",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3102LL));
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return [*(id *)(a1 + 40) invokeWithSignal:-2];
}

void sub_1001599A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100159C78;
  block[3] = &unk_1004F7698;
  block[1] = 3221225472LL;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100159A7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v13[0] = _NSConcreteStackBlock;
  uint64_t v7 = *(void **)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v13[2] = sub_100159B70;
  v13[3] = &unk_1004F4218;
  v13[1] = 3221225472LL;
  id v14 = v6;
  id v15 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 64);
  id v16 = v9;
  uint64_t v19 = v10;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, v13);
}

id sub_100159B68(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100159B70(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 || !*(void *)(a1 + 40))
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 136315650;
      id v6 = "-[ADRemoteContextStore fetchContextSnapshotFromDevicesWithPeerInfo:completion:]_block_invoke_2";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal Error fetching context through collector for %@: %@",  (uint8_t *)&v5,  0x20u);
      uint64_t v2 = *(void **)(a1 + 32);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), v2);
  }

  else
  {
    objc_msgSend(*(id *)(a1 + 56), "addObjectsFromArray:");
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100159C78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 || !*(void *)(a1 + 40))
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v7 = 136315650;
      uint64_t v8 = "-[ADRemoteContextStore fetchContextSnapshotFromDevicesWithPeerInfo:completion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      __int16 v11 = 2112;
      uint64_t v12 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal Error fetching context from %@: %@",  (uint8_t *)&v7,  0x20u);
    }
  }

  else
  {
    int v5 = *(void **)(a1 + 56);
    id v6 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  *(void *)(a1 + 48),  *(void *)(a1 + 40));
    [v5 addObject:v6];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_100159D88(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 40LL))
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    if ([*(id *)(a1 + 40) count])
    {
      if ([*(id *)(a1 + 40) containsObject:AFDeviceContextKeyAll])
      {
        uint64_t v4 = *(void **)(a1 + 32);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_10015A0E4;
        v15[3] = &unk_1004F31A0;
        id v16 = v3;
        [v4 _enumerateDeviceContextsUsingBlock:v15];
        int v5 = v16;
      }

      else
      {
        __int16 v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = *(void *)(a1 + 40);
          uint64_t v14 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 136315650;
          uint64_t v22 = "-[ADRemoteContextStore getContextSnapshotIncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
          __int16 v23 = 2112;
          uint64_t v24 = v13;
          __int16 v25 = 2112;
          uint64_t v26 = v14;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s #hal ContextSnapshot with included keys = %@, excluded keys = %@, updating with partial context",  buf,  0x20u);
        }

        uint64_t v12 = *(void **)(a1 + 32);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_10015A03C;
        v17[3] = &unk_1004F3178;
        id v18 = (NSMutableArray *)*(id *)(a1 + 48);
        id v19 = *(id *)(a1 + 40);
        __int16 v20 = v3;
        [v12 _enumerateDeviceContextsUsingBlock:v17];

        int v5 = v18;
      }
    }

    else
    {
      __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v22 = "-[ADRemoteContextStore getContextSnapshotIncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s #hal no key included. Skipping",  buf,  0xCu);
      }
    }

    (*(void (**)(void, NSMutableArray *, void, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v3,  0LL,  v10);
  }

  else
  {
    int v6 = AFSupportsHALOnDemandRapportConnection(a1, a2);
    int v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 56);
    if (v6) {
      _objc_msgSend(v7, "_activateOnDemandRapportConnectionAndFetchContext:", *(void *)(a1 + 56), v8);
    }
    else {
      [v7 _fetchContextFromCollectorAndForceFetchingFromDevicesWithPeerInfo:0 completion:v8];
    }
  }

void sub_10015A03C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (([v5 isValid] & 1) != 0 || objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue( [v5 deviceContextForDeviceContextKeys:*(void *)(a1 + 40) excludingMandatoryKeys:*(void *)(a1 + 32)]);
    if (v6)
    {
      int v7 = *(void **)(a1 + 48);
      uint64_t v8 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v9,  v6);
      [v7 addObject:v8];
    }
  }
}

void sub_10015A0E4(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  if ([v5 isValid])
  {
    int v6 = *(void **)(a1 + 32);
    int v7 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v8,  v5);
    [v6 addObject:v7];
  }
}

void sub_10015A164(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 info]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 content]);

  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v5, v4);
}

id sub_10015A1D4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADRemoteContextStore stopCollectingContext]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s #hal", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _setContextCollectionAllowed:0];
}

id sub_10015A288(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADRemoteContextStore startCollectingContext]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s #hal", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _setContextCollectionAllowed:1];
}

void sub_10015B594(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setAceVersion:v3];
  [v4 setAssistantIdentifier:a1[5]];
  [v4 setBuildVersion:a1[6]];
  [v4 setProductType:a1[7]];
  [v4 setSharedUserIdentifier:a1[8]];
  [v4 setUserAssignedDeviceName:a1[9]];
  [v4 setUserInterfaceIdiom:a1[10]];
  [v4 setIsLocationSharingDevice:a1[11]];
  [v4 setHomeAccessoryInfo:a1[12]];
  [v4 setIsSiriCloudSyncEnabled:a1[13]];
  [v4 setMyriadTrialTreatment:a1[14]];
}

void sub_10015C860( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10015F064( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

void sub_10016150C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100161D78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

id sub_1001635A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reelectCollectorDeviceForReason:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

uint64_t sub_1001635B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001635CC(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  int v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v16 name]);
  id v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }

  else
  {
    uint64_t v10 = objc_alloc(&OBJC_CLASS___NSString);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v16 productType]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v16 idsDeviceUniqueIdentifier]);
    uint64_t v13 = (void *)v12;
    if (v12)
    {
      id v9 = -[NSString initWithFormat:](v10, "initWithFormat:", @"%@ / %@\n", v11, v12);
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v16 rapportEffectiveIdentifier]);
      id v9 = -[NSString initWithFormat:](v10, "initWithFormat:", @"%@ / %@\n", v11, v14);
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v16 buildDictionaryRepresentation]);
  -[NSMutableDictionary setValue:forKey:](v6, "setValue:forKey:", v15, v9);

  if ([v5 count])
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10016376C;
    v17[3] = &unk_1004F37F0;
    id v18 = v6;
    [v5 enumerateObjectsUsingBlock:v17];
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10016376C(uint64_t a1, void *a2)
{
  id v13 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
  id v4 = v3;
  if (v3)
  {
    id v5 = v3;
  }

  else
  {
    int v6 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 productType]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v13 idsDeviceUniqueIdentifier]);
    id v9 = (void *)v8;
    if (v8)
    {
      id v5 = -[NSString initWithFormat:](v6, "initWithFormat:", @"%@ / %@\n", v7, v8);
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v13 rapportEffectiveIdentifier]);
      id v5 = -[NSString initWithFormat:](v6, "initWithFormat:", @"%@ / %@\n", v7, v10);
    }
  }

  __int16 v11 = *(void **)(a1 + 32);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v13 buildDictionaryRepresentation]);
  [v11 setValue:v12 forKey:v5];
}

void sub_10016387C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v16 = (void *)a1[4];
      uint64_t v17 = a1[5];
      id v18 = v7;
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v6 debugDescription]);
      int v21 = 136315906;
      uint64_t v22 = "-[ADDeviceCircleManager _fetchSyncTokenFromDeviceWithCompanionAssistantId:aceHost:clientLink:completion:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v16;
      __int16 v25 = 2112;
      uint64_t v26 = v17;
      __int16 v27 = 2112;
      id v28 = v19;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Request for sync token for aceHost=%@, companion assistantId=%@ failed with error:%@",  (uint8_t *)&v21,  0x2Au);
    }

    uint64_t v8 = 0LL;
    id v9 = 0LL;
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"SiriMuxToken"]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"SiriMuxTokenHost"]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"SiriMuxSyncTokenTransferReason"]);
    id v11 = [v10 integerValue];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"SiriMuxEventTimestamp"]);
    +[ADMUXReverseSyncInstrumentationUtil logSyncTokenReceivedWithTransferReason:requestCreatedAt:]( &OBJC_CLASS___ADMUXReverseSyncInstrumentationUtil,  "logSyncTokenReceivedWithTransferReason:requestCreatedAt:",  v11,  v12);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[ADMUXSyncTokenManager sharedInstance](&OBJC_CLASS___ADMUXSyncTokenManager, "sharedInstance"));
    [v13 updateSyncTokenForAssistantId:a1[5] aceHost:v8 token:v9];

    uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = a1[5];
      int v21 = 136315650;
      uint64_t v22 = "-[ADDeviceCircleManager _fetchSyncTokenFromDeviceWithCompanionAssistantId:aceHost:clientLink:completion:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v8;
      __int16 v25 = 2112;
      uint64_t v26 = v20;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s Received sync token for aceHost=%@, companion assistantId=%@",  (uint8_t *)&v21,  0x20u);
    }
  }

  uint64_t v15 = a1[6];
  if (v15) {
    (*(void (**)(uint64_t, void *, void *))(v15 + 16))(v15, v8, v9);
  }
}

void sub_100163AEC(void *a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = *(id *)(a1[4] + 40LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v7, "localPeerInfoUpdatedFrom:to:") & 1) != 0) {
          objc_msgSend(v7, "localPeerInfoUpdatedFrom:to:", a1[5], a1[6], (void)v8);
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_100163C0C(void *a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100163C90;
  v4[3] = &unk_1004FD2E8;
  id v5 = a1;
  id v1 = v5;
  id v2 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v4);

  return v2;
}

void sub_100163C90(uint64_t a1, void *a2)
{
  id v21 = a2;
  [v21 setIsDeviceOwnedByCurrentUser:1];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 localPeerIDSDeviceUniqueIdentifier]);

  if (v4)
  {
    [v21 setIdsDeviceUniqueIdentifier:v4];
    id v5 = (void *)_IDSCopyIDForDeviceUniqueID(v4);
    [v21 setIdsIdentifier:v5];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeAccessoryInfo]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
  [v21 setHomeKitAccessoryIdentifier:v8];

  [v21 setIsCommunalDevice:1];
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeAccessoryInfo]);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 roomName]);
  [v21 setRoomName:v10];

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userAssignedDeviceName]);
  [v21 setName:v11];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) productType]);
  [v21 setProductType:v12];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) buildVersion]);
  [v21 setBuildVersion:v13];

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceVersion]);
  [v21 setAceVersion:v14];

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInterfaceIdiom]);
  [v21 setUserInterfaceIdiom:v15];

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assistantIdentifier]);
  [v21 setAssistantIdentifier:v16];

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedUserIdentifier]);
  [v21 setSharedUserIdentifier:v17];

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) isSiriCloudSyncEnabled]);
  objc_msgSend(v21, "setIsSiriCloudSyncEnabled:", objc_msgSend(v18, "BOOLValue"));

  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) isLocationSharingDevice]);
  objc_msgSend(v21, "setIsLocationSharingDevice:", objc_msgSend(v19, "BOOLValue"));

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) myriadTrialTreatment]);
  [v21 setMyriadTrialTreatment:v20];
}

void sub_100163EF0(uint64_t a1, void *a2)
{
  id v26 = a2;
  [v26 setAceVersion:SAAceVersionCurrent];
  uint64_t v3 = AFBuildVersion([v26 setAssistantIdentifier:*(void *)(*(void *)(a1 + 32) + 136)]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v26 setBuildVersion:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  unsigned int v6 = [v5 isEndpoint];

  if (v6)
  {
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 160) model]);
    [v26 setProductType:v9];

    uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 160) name]);
  }

  else
  {
    uint64_t v11 = AFProductType(v7, v8);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v26 setProductType:v12];

    uint64_t v13 = AFUserAssignedDeviceName();
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v13);
  }

  uint64_t v14 = (void *)v10;
  [v26 setUserAssignedDeviceName:v10];

  uint64_t v15 = AFCurrentUserInterfaceIdiom(objc_msgSend(v26, "setSharedUserIdentifier:", *(void *)(*(void *)(a1 + 32)
                                                                                            + 144LL)));
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  [v26 setUserInterfaceIdiom:v16];

  id v17 = [v26 setHomeAccessoryInfo:*(void *)(*(void *)(a1 + 32) + 160)];
  id v18 = &stru_1004FECA0;
  if (AFIsInternalInstall(v17))
  {
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[ADMyriadSettingsManager sharedSettingsManager]( &OBJC_CLASS___ADMyriadSettingsManager,  "sharedSettingsManager"));
    uint64_t v20 = objc_claimAutoreleasedReturnValue([v19 treatmentId]);
    id v21 = (void *)v20;
    if (v20) {
      uint64_t v22 = (__CFString *)v20;
    }
    else {
      uint64_t v22 = &stru_1004FECA0;
    }
    id v18 = v22;
  }

  [v26 setMyriadTrialTreatment:v18];
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  [v26 setIsLocationSharingDevice:v23];

  uint64_t v24 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", _AFPreferencesCloudSyncEnabled());
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  [v26 setIsSiriCloudSyncEnabled:v25];
}

void sub_1001640DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315650;
      uint64_t v7 = "-[ADDeviceCircleManager _keepAliveLinkToDevice:]_block_invoke_3";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s keepAlive link activation error for %@: %@",  (uint8_t *)&v6,  0x20u);
    }
  }
}

void sub_1001641B8(id a1, ADRapportLinkConfigurationMutating *a2)
{
  id v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkDiscoveryOptions,  "newWithBuilder:",  &stru_1004F37A0);
  -[ADRapportLinkConfigurationMutating setDiscoveryOptions:](v2, "setDiscoveryOptions:", v3);
}

void sub_100164210(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  id v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesFamily:](v2, "setIncludesFamily:", 0LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesRemoraDevices:](v2, "setIncludesRemoraDevices:", 2LL);
}

BOOL sub_100164254(id a1, ADDeviceCountAndTimestamp *a2, unint64_t a3, BOOL *a4)
{
  return -[ADDeviceCountAndTimestamp deviceCount](a2, "deviceCount", a3, a4) == 0;
}

void sub_100164274(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateStationaryScoreAndResetTimer];
}

void sub_1001642A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _syncCompanionLinkDeviceLocalPeerData]);
    [v3 _updateSiriInfoWithLocalPeerData:v2];

    id WeakRetained = v3;
  }
}

void sub_1001642F0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001643A4;
  v3[3] = &unk_1004F3720;
  v3[4] = *(void *)(a1 + 32);
  objc_copyWeak(&v4, (id *)(a1 + 40));
  [v2 getSharedDataForPeer:v3];

  objc_destroyWeak(&v4);
}

void sub_100164390(_Unwind_Exception *a1)
{
}

void sub_1001643A4(uint64_t a1)
{
  id v1 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100164420;
  block[3] = &unk_1004FAF58;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_100164420(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _updateSiriInfoWithDeviceCapabilities];
    id WeakRetained = v2;
  }
}

void sub_100164450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v19 = 136315650;
    uint64_t v20 = "-[ADDeviceCircleManager _updateAssistantIdentifierAndSharedUserIdentifier]_block_invoke";
    __int16 v21 = 2112;
    id v22 = v5;
    __int16 v23 = 2112;
    id v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s assistantIdentifier = %@, sharedUserIdentifier = %@",  (uint8_t *)&v19,  0x20u);
  }

  id v8 = *(id *)(*(void *)(a1 + 32) + 136LL);
  if (v8 == v5 || ([v8 isEqualToString:v5] & 1) != 0)
  {
    int v9 = 0;
  }

  else
  {
    id v10 = [v5 copy];
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 136);
    *(void *)(v11 + 136) = v10;

    int v9 = 1;
  }

  id v13 = *(id *)(*(void *)(a1 + 32) + 144LL);
  if (v13 == v6 || ([v13 isEqualToString:v6] & 1) != 0)
  {
    if (!v9) {
      goto LABEL_14;
    }
  }

  else
  {
    id v14 = [v6 copy];
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 144);
    *(void *)(v15 + 144) = v14;
  }

  uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _syncCompanionLinkDeviceLocalPeerData]);
  if (v17)
  {
    id v18 = (void *)v17;
    [*(id *)(a1 + 32) _updateSiriInfoWithLocalPeerData:v17];
  }

void sub_1001645D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100164664;
  v7[3] = &unk_1004FD990;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100164664(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assistantIdentifier]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedUserIdentifier]);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1001646E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

id sub_1001646E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

id sub_1001646F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

void sub_100164718(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkClient);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 232);
  *(void *)(v3 + 232) = v2;

  [*(id *)(*(void *)(a1 + 32) + 232) setDispatchQueue:*(void *)(*(void *)(a1 + 32) + 216)];
  [*(id *)(*(void *)(a1 + 32) + 232) setControlFlags:0];
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 232),  "setControlFlags:",  (unint64_t)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "controlFlags") | 0x400);
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 232),  "setControlFlags:",  (unint64_t)objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "controlFlags") | 4);
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 232),  "setFlags:",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "flags") | 1);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100164968;
  v14[3] = &unk_1004F36A8;
  objc_copyWeak(&v16, &location);
  id v15 = *(id *)(a1 + 40);
  [*(id *)(*(void *)(a1 + 32) + 232) setDeviceFoundHandler:v14];
  id v5 = *(void **)(*(void *)(a1 + 32) + 232LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100164B34;
  v11[3] = &unk_1004F36D0;
  objc_copyWeak(&v13, &location);
  id v12 = *(id *)(a1 + 40);
  [v5 activateWithCompletion:v11];
  dispatch_time_t v6 = dispatch_time(0LL, 1000000000LL);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 216LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100164C3C;
  block[3] = &unk_1004F5340;
  objc_copyWeak(&v10, &location);
  id v9 = *(id *)(a1 + 40);
  dispatch_after(v6, v7, block);

  objc_destroyWeak(&v10);
  objc_destroyWeak(&v13);

  objc_destroyWeak(&v16);
  objc_destroyWeak(&location);
}

void sub_10016493C(_Unwind_Exception *a1)
{
}

void sub_100164968(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v8 = v5;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
    int v12 = 136315394;
    id v13 = "-[ADDeviceCircleManager _checkForGuestHomePodsOnNetworkWithCompletion:]_block_invoke_2";
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s Device Name %@", (uint8_t *)&v12, 0x16u);

    id v5 = (void *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEBUG))
  {
    id v10 = v5;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 idsDeviceIdentifier]);
    int v12 = 136315394;
    id v13 = "-[ADDeviceCircleManager _checkForGuestHomePodsOnNetworkWithCompletion:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s Device ID %@", (uint8_t *)&v12, 0x16u);

    if (!WeakRetained) {
      goto LABEL_10;
    }
  }

  else if (!WeakRetained)
  {
    goto LABEL_10;
  }

  if ([v3 isGuestDevice]
    && [v3 isCompanionLinkDeviceAnAudioAccessory])
  {
    dispatch_time_t v6 = (void *)WeakRetained[29];
    if (v6)
    {
      [v6 invalidate];
      uint64_t v7 = (void *)WeakRetained[29];
      WeakRetained[29] = 0LL;
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_100164B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    dispatch_time_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      id v9 = "-[ADDeviceCircleManager _checkForGuestHomePodsOnNetworkWithCompletion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v8, 0x16u);
    }

    [v5[29] invalidate];
    id v7 = v5[29];
    v5[29] = 0LL;

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100164C3C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)WeakRetained[29];
    if (v4)
    {
      dispatch_time_t v6 = v3;
      [v4 invalidate];
      id v5 = (void *)v6[29];
      v6[29] = 0LL;

      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      id v3 = v6;
    }
  }
}

uint64_t sub_100164CA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100164CB8(uint64_t a1)
{
}

void sub_100164CC0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 userInterfaceIdiom]);
  unsigned int v8 = [v7 isEqualToString:SAUserInterfaceIdiomHORSEMANValue];

  if (v8)
  {
    id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (v9)
    {
      __int16 v10 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v16 = v10;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 name]);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v6 myriadTrialTreatment]);
        int v19 = 136315650;
        uint64_t v20 = "-[ADDeviceCircleManager _isDeviceCircleTrialTreatmentConsensusAchieved:andRemotePeerInfo:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v17;
        __int16 v23 = 2112;
        id v24 = v18;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s Name: %@ | Treatment: %@",  (uint8_t *)&v19,  0x20u);

        id v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 myriadTrialTreatment]);
      unsigned __int8 v12 = [v9 isEqualToString:v11];

      if ((v12 & 1) == 0)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
        *a4 = 1;
      }
    }

    else
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue([v6 myriadTrialTreatment]);
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8LL);
      id v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }
  }
}

void sub_100164E78(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 224LL))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[ADMyriadSettingsManager sharedSettingsManager]( &OBJC_CLASS___ADMyriadSettingsManager,  "sharedSettingsManager"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 treatmentId]);

    if (v3 && [v3 length])
    {
      id v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        __int16 v10 = "-[ADDeviceCircleManager _checkForMyriadHomePodTrialTreatmentConsensus]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Starting Trial and Network Consensus Check",  buf,  0xCu);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 224LL) = 1;
      id v5 = *(void **)(a1 + 32);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10016503C;
      v8[3] = &unk_1004F3658;
      v8[4] = v5;
      [v5 getManagedLocalAndRemotePeerInfoWithCompletion:v8];
    }

    else
    {
      id v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        __int16 v10 = "-[ADDeviceCircleManager _checkForMyriadHomePodTrialTreatmentConsensus]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s No Consensus Needed, no Trial treatment applied.",  buf,  0xCu);
      }

      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[ADMyriadSettingsManager sharedSettingsManager]( &OBJC_CLASS___ADMyriadSettingsManager,  "sharedSettingsManager"));
      [v7 setTrialTreatmentMultiDeviceConsensus:1];

      *(_BYTE *)(*(void *)(a1 + 32) + 224LL) = 0;
    }
  }

void sub_10016503C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = [*(id *)(a1 + 32) _isDeviceCircleTrialTreatmentConsensusAchieved:a2 andRemotePeerInfo:a3];
  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    id v11 = "-[ADDeviceCircleManager _checkForMyriadHomePodTrialTreatmentConsensus]_block_invoke";
    __int16 v12 = 1024;
    unsigned int v13 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Trial treatment Consensus Result %d",  (uint8_t *)&v10,  0x12u);
    if ((v4 & 1) != 0) {
      goto LABEL_3;
    }
  }

  else if ((v4 & 1) != 0)
  {
LABEL_3:
    [*(id *)(a1 + 32) _checkForGuestHomePodsOnNetworkWithCompletion:&stru_1004F3630];
    goto LABEL_9;
  }

  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315138;
    id v11 = "-[ADDeviceCircleManager _checkForMyriadHomePodTrialTreatmentConsensus]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s No need to scan for network devices. Disabling trial treatment.",  (uint8_t *)&v10,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[ADMyriadSettingsManager sharedSettingsManager]( &OBJC_CLASS___ADMyriadSettingsManager,  "sharedSettingsManager"));
  unsigned int v8 = [v7 trialTreatmentMultiDeviceConsensus];

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[ADMyriadSettingsManager sharedSettingsManager]( &OBJC_CLASS___ADMyriadSettingsManager,  "sharedSettingsManager"));
    [v9 setTrialTreatmentMultiDeviceConsensus:0];
  }

void sub_1001651C4(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "-[ADDeviceCircleManager _checkForMyriadHomePodTrialTreatmentConsensus]_block_invoke";
    __int16 v7 = 1024;
    BOOL v8 = v2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Consensus Found HomePod Outside Home: %d",  (uint8_t *)&v5,  0x12u);
  }

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue( +[ADMyriadSettingsManager sharedSettingsManager]( &OBJC_CLASS___ADMyriadSettingsManager,  "sharedSettingsManager"));
  [v4 setTrialTreatmentMultiDeviceConsensus:!v2];
}

id sub_10016529C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateCurrentAccessoryInfo:*(void *)(a1 + 40)];
}

id sub_1001652A8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 componentsSeparatedByString:@"/"]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 lastObject]);
  int v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315394;
    id v9 = "-[ADDeviceCircleManager rapportLink:didReceiveMessage:ofType:fromPeer:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback handlerMessageType:%@",  (uint8_t *)&v8,  0x16u);
  }

  id v6 = [*(id *)(a1 + 32) isEqualToString:v4];

  return v6;
}

void sub_1001653A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 136315650;
    id v11 = "-[ADDeviceCircleManager _handleExecuteCommand:fromPeer:completion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #hal Received response for forwarded execute command from: %@, error: %@",  (uint8_t *)&v10,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_1001654A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100165564;
  block[3] = &unk_1004FD9E0;
  id v13 = v6;
  id v14 = v7;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_100165564(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

id sub_100165580(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_100165630;
    v6[3] = &unk_1004FD2E8;
    id v7 = v1;
    id v2 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v6);
    id v3 = sub_10016563C(v2, 0LL);
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  else
  {
    unsigned int v4 = 0LL;
  }

  return v4;
}

id sub_100165630(uint64_t a1, void *a2)
{
  return [a2 setIdsDeviceUniqueIdentifier:*(void *)(a1 + 32)];
}

id sub_10016563C(void *a1, _BYTE *a2)
{
  id v3 = a1;
  unsigned int v4 = v3;
  if (a2) {
    *a2 = 0;
  }
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 managedPeerInfoMatchingPeerInfo:v4]);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_100165860;
    v22[3] = &unk_1004F3818;
    id v7 = v5;
    id v23 = v7;
    id v8 = v4;
    id v24 = v8;
    id v9 = v6;
    id v25 = v9;
    id v10 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v22);
    uint64_t v11 = AFPeerInfoMerge(v9, v10);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = AFPeerInfoMerge(v12, v8);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    if (([v14 isEqual:v8] & 1) == 0)
    {
      if (a2) {
        *a2 = 1;
      }
      id v15 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = v15;
        uint64_t CompactDescription = AFPeerInfoGetCompactDescription(v8);
        int v19 = (void *)objc_claimAutoreleasedReturnValue(CompactDescription);
        uint64_t v20 = AFPeerInfoGetCompactDescription(v14);
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        *(_DWORD *)buf = 136315650;
        __int16 v27 = "ADDeviceCircleGetBestPeerInfo";
        __int16 v28 = 2112;
        id v29 = v19;
        __int16 v30 = 2112;
        __int16 v31 = v21;
        _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s %@ -> %@", buf, 0x20u);
      }
    }
  }

  else
  {
    id v14 = 0LL;
  }

  return v14;
}

void sub_100165860(uint64_t a1, void *a2)
{
  id v15 = a2;
  id v3 = *(void **)(a1 + 32);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceUniqueIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantIdForDeviceWithIdsDeviceUniqueIdentifier:v4]);
  if (v5)
  {
    [v15 setAssistantIdentifier:v5];
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) idsDeviceUniqueIdentifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 assistantIdForDeviceWithIdsDeviceUniqueIdentifier:v7]);
    [v15 setAssistantIdentifier:v8];
  }

  id v9 = *(void **)(a1 + 32);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) assistantIdentifier]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 idsDeviceUniqueIdentifierForDeviceWithAssistantId:v10]);
  if (v11)
  {
    [v15 setIdsDeviceUniqueIdentifier:v11];
  }

  else
  {
    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) assistantIdentifier]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 idsDeviceUniqueIdentifierForDeviceWithAssistantId:v13]);
    [v15 setIdsDeviceUniqueIdentifier:v14];
  }
}

id sub_100165998(uint64_t a1)
{
  id v2 = [(id)objc_opt_class(*(void *)(a1 + 32)) _rapportLinkWithQueue:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;

  return [*(id *)(a1 + 32) _setupClientLink];
}

uint64_t sub_1001659E0(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 24LL)) {
    return (*(uint64_t (**)(void))(*(void *)(result + 40) + 16LL))();
  }
  return result;
}

id sub_1001659FC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100165AB4;
    v7[3] = &unk_1004F9010;
    id v8 = v3;
    id v9 = v4;
    id v5 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v7);
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

void sub_100165AB4(uint64_t a1, void *a2)
{
  id v57 = a2;
  objc_msgSend( v57,  "setIsDeviceOwnedByCurrentUser:",  ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "statusFlags") >> 19) & 1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDeviceIdentifier]);
  if (v3
    || *(void *)(a1 + 40)
    && (id v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance")),
        id v3 = (void *)objc_claimAutoreleasedReturnValue([v12 localPeerIDSDeviceUniqueIdentifier]),
        v12,
        v3))
  {
    [v57 setIdsDeviceUniqueIdentifier:v3];
    id v4 = (void *)_IDSCopyIDForDeviceUniqueID(v3);
    [v57 setIdsIdentifier:v4];
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) effectiveIdentifier]);
  [v57 setRapportEffectiveIdentifier:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaSystemIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
  [v57 setMediaSystemIdentifier:v7];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaRouteIdentifier]);
  [v57 setMediaRouteIdentifier:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeKitIdentifier]);
  [v57 setIsCommunalDevice:v9 != 0];

  id v10 = *(void **)(a1 + 32);
  if (!*(void *)(a1 + 40))
  {
    uint64_t v13 = sub_100166170(v10);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    if (v15)
    {
      [v57 setName:v15];
    }

    else
    {
      id v38 = (void *)objc_claimAutoreleasedReturnValue([v14 userAssignedDeviceName]);
      [v57 setName:v38];
    }

    id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) model]);
    if (v39)
    {
      [v57 setProductType:v39];
    }

    else
    {
      __int16 v40 = (void *)objc_claimAutoreleasedReturnValue([v14 productType]);
      [v57 setProductType:v40];
    }

    id v41 = (void *)objc_claimAutoreleasedReturnValue([v14 buildVersion]);
    [v57 setBuildVersion:v41];

    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v14 aceVersion]);
    [v57 setAceVersion:v42];

    id v43 = (void *)objc_claimAutoreleasedReturnValue([v14 userInterfaceIdiom]);
    [v57 setUserInterfaceIdiom:v43];

    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v14 assistantIdentifier]);
    __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 uppercaseString]);
    [v57 setAssistantIdentifier:v45];

    __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeKitIdentifier]);
    __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 UUIDString]);
    if (v47)
    {
      [v57 setHomeKitAccessoryIdentifier:v47];
    }

    else
    {
      v48 = (void *)objc_claimAutoreleasedReturnValue([v14 homeAccessoryInfo]);
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 uniqueIdentifier]);
      os_signpost_id_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 UUIDString]);
      [v57 setHomeKitAccessoryIdentifier:v50];
    }

    v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) roomName]);
    if (v51)
    {
      [v57 setRoomName:v51];
    }

    else
    {
      v52 = (void *)objc_claimAutoreleasedReturnValue([v14 homeAccessoryInfo]);
      id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 roomName]);
      [v57 setRoomName:v53];
    }

    v54 = (void *)objc_claimAutoreleasedReturnValue([v14 sharedUserIdentifier]);
    [v57 setSharedUserIdentifier:v54];

    id v55 = (void *)objc_claimAutoreleasedReturnValue([v14 isLocationSharingDevice]);
    objc_msgSend(v57, "setIsLocationSharingDevice:", objc_msgSend(v55, "BOOLValue"));

    v56 = (void *)objc_claimAutoreleasedReturnValue([v14 isSiriCloudSyncEnabled]);
    objc_msgSend(v57, "setIsSiriCloudSyncEnabled:", objc_msgSend(v56, "BOOLValue"));

    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v14 myriadTrialTreatment]);
    [v57 setMyriadTrialTreatment:v36];
    goto LABEL_35;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
  if (v11)
  {
    [v57 setName:v11];
  }

  else
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userAssignedDeviceName]);
    [v57 setName:v16];
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) model]);
  if (v17)
  {
    [v57 setProductType:v17];
  }

  else
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) productType]);
    [v57 setProductType:v18];
  }

  int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) buildVersion]);
  [v57 setBuildVersion:v19];

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceVersion]);
  [v57 setAceVersion:v20];

  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userInterfaceIdiom]);
  [v57 setUserInterfaceIdiom:v21];

  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) assistantIdentifier]);
  [v57 setAssistantIdentifier:v22];

  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeKitIdentifier]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 UUIDString]);
  if (v24)
  {
    [v57 setHomeKitAccessoryIdentifier:v24];
  }

  else
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) homeAccessoryInfo]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 uniqueIdentifier]);
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 UUIDString]);
    [v57 setHomeKitAccessoryIdentifier:v27];
  }

  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) roomName]);
  if (v28)
  {
    [v57 setRoomName:v28];
  }

  else
  {
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) homeAccessoryInfo]);
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 roomName]);
    [v57 setRoomName:v30];
  }

  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedUserIdentifier]);
  [v57 setSharedUserIdentifier:v31];

  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) isLocationSharingDevice]);
  objc_msgSend(v57, "setIsLocationSharingDevice:", objc_msgSend(v32, "BOOLValue"));

  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) isSiriCloudSyncEnabled]);
  objc_msgSend(v57, "setIsSiriCloudSyncEnabled:", objc_msgSend(v33, "BOOLValue"));

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) myriadTrialTreatment]);
  [v57 setMyriadTrialTreatment:v34];

  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaRouteIdentifier]);
  if (!v35)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
    if (![v14 isEndpoint])
    {
LABEL_36:

      goto LABEL_37;
    }

    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v14 endpointInfo]);
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 mediaRouteIdentifier]);
    [v57 setMediaRouteIdentifier:v37];

LABEL_35:
    goto LABEL_36;
  }

ADDeviceCirclePeerData *sub_100166170(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 siriInfo]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"peerData"]);

    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0) {
      id v6 = -[ADDeviceCirclePeerData initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___ADDeviceCirclePeerData),  "initWithDictionaryRepresentation:",  v4);
    }
    else {
      id v6 = 0LL;
    }
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[ADDeviceCirclePeerData assistantIdentifier](v6, "assistantIdentifier"));
    id v8 = [v7 length];

    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[ADDeviceCirclePeerData sharedUserIdentifier](v6, "sharedUserIdentifier"));
    id v10 = [v9 length];

    if (v8 && v10) {
      goto LABEL_26;
    }
    uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      __int16 v30 = "ADDeviceCircleGetPeerDataFromRapportDevice";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s No assistantID or shredUserIdentifier. Fetching sharedData.",  buf,  0xCu);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_ad_siriSharedData"));
    uint64_t v13 = v12;
    if (v8)
    {
      if (v10)
      {
LABEL_25:

LABEL_26:
        goto LABEL_27;
      }
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 assistantId]);
      if ([v14 length])
      {
        if (v6)
        {
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472LL;
          v27[2] = sub_1001664DC;
          v27[3] = &unk_1004F37C8;
          id v15 = &v28;
          id v28 = v14;
          uint64_t v16 = objc_claimAutoreleasedReturnValue(-[ADDeviceCirclePeerData mutatedCopyWithMutator:](v6, "mutatedCopyWithMutator:", v27));

          id v6 = (ADDeviceCirclePeerData *)v16;
        }

        else
        {
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472LL;
          v25[2] = sub_1001664D0;
          v25[3] = &unk_1004F37C8;
          id v15 = &v26;
          id v26 = v14;
          id v6 = +[ADDeviceCirclePeerData newWithBuilder:](&OBJC_CLASS___ADDeviceCirclePeerData, "newWithBuilder:", v25);
        }
      }

      if (v10) {
        goto LABEL_25;
      }
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 sharedUserId]);
    if ([v17 length])
    {
      if (v6)
      {
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_1001664F4;
        v23[3] = &unk_1004F37C8;
        id v18 = &v24;
        id v24 = v17;
        uint64_t v19 = objc_claimAutoreleasedReturnValue(-[ADDeviceCirclePeerData mutatedCopyWithMutator:](v6, "mutatedCopyWithMutator:", v23));

        id v6 = (ADDeviceCirclePeerData *)v19;
      }

      else
      {
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        v21[2] = sub_1001664E8;
        v21[3] = &unk_1004F37C8;
        id v18 = &v22;
        id v22 = v17;
        id v6 = +[ADDeviceCirclePeerData newWithBuilder:](&OBJC_CLASS___ADDeviceCirclePeerData, "newWithBuilder:", v21);
      }
    }

    goto LABEL_25;
  }

  id v6 = 0LL;
LABEL_27:

  return v6;
}

id sub_1001664D0(uint64_t a1, void *a2)
{
  return [a2 setAssistantIdentifier:*(void *)(a1 + 32)];
}

id sub_1001664DC(uint64_t a1, void *a2)
{
  return [a2 setAssistantIdentifier:*(void *)(a1 + 32)];
}

id sub_1001664E8(uint64_t a1, void *a2)
{
  return [a2 setSharedUserIdentifier:*(void *)(a1 + 32)];
}

id sub_1001664F4(uint64_t a1, void *a2)
{
  return [a2 setSharedUserIdentifier:*(void *)(a1 + 32)];
}

void sub_100166500(uint64_t a1)
{
  id v2 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", *(void *)(a1 + 32));
  -[NSMutableSet minusSet:](v2, "minusSet:", *(void *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(dispatch_queue_s **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100166C60;
  block[3] = &unk_1004F8BA0;
  block[1] = 3221225472LL;
  void block[4] = v3;
  id v8 = v2;
  uint64_t v11 = *(void *)(a1 + 72);
  id v9 = v4;
  id v10 = *(id *)(a1 + 64);
  id v6 = v2;
  dispatch_async(v5, block);
}

void sub_1001665D0(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "af_lenientMappedArray:", &stru_1004F3598));
    id v7 = (void *)*((void *)a1[7] + 3);
    __int128 v35 = @"get_capabilities_for_devices";
    __int128 v36 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
    id v9 = a1[8];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[7] _rapportLinkMessageOptions]);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_10016690C;
    v25[3] = &unk_1004F35C0;
    id v26 = a1[8];
    id v27 = a1[4];
    id v28 = a1[5];
    id v29 = a1[6];
    id v30 = a1[9];
    [v7 sendRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"device_capabilities_fetch" messagePayload:v8 toDeviceWithIDSDeviceID:v9 options:v10 completion:v25];
  }

  else
  {
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id obj = a1[4];
    id v11 = [obj countByEnumeratingWithState:&v31 objects:v43 count:16];
    if (v11)
    {
      id v13 = v11;
      uint64_t v14 = *(void *)v32;
      *(void *)&__int128 v12 = 136315650LL;
      __int128 v23 = v12;
      do
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v32 != v14) {
            objc_enumerationMutation(obj);
          }
          uint64_t v16 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "assistantIdentifier", v23));
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v17]);
          uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSArray);
          if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
          {
            id v20 = sub_10025B940(v18);
            __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
            [a1[5] setObject:v21 forKey:v17];
            [a1[6] addObject:v16];
          }

          else
          {
            id v22 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = v23;
              id v38 = "-[ADDeviceCircleManager _fetchDeviceCapabilitiesForDevices:fromCollectorWithIndex:existingCapabiliti"
                    "es:completion:]_block_invoke_4";
              __int16 v39 = 2112;
              __int16 v40 = v17;
              __int16 v41 = 2112;
              __int16 v42 = v18;
              _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s Invalid SVDCapabilities response for %@: %@",  buf,  0x20u);
            }
          }
        }

        id v13 = [obj countByEnumeratingWithState:&v31 objects:v43 count:16];
      }

      while (v13);
    }

    (*((void (**)(void))a1[9] + 2))();
  }
}

void sub_10016690C(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v7 = *(void **)(a1 + 32);
      id v8 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 136315906;
      __int128 v36 = "-[ADDeviceCircleManager _fetchDeviceCapabilitiesForDevices:fromCollectorWithIndex:existingCapabilities:compl"
            "etion:]_block_invoke_2";
      __int16 v37 = 2112;
      id v38 = v7;
      __int16 v39 = 2112;
      __int16 v40 = v8;
      __int16 v41 = 2112;
      id v42 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Error getting capabilities from %@ for %@: %@",  buf,  0x2Au);
    }
  }

  else
  {
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id obj = *(id *)(a1 + 40);
    id v9 = [obj countByEnumeratingWithState:&v29 objects:v34 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v27 = *(void *)v30;
      id v11 = &CFNotificationCenterGetDarwinNotifyCenter_ptr;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v30 != v27) {
            objc_enumerationMutation(obj);
          }
          id v13 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 idsDeviceUniqueIdentifier]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 assistantIdentifier]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKey:v14]);
          uint64_t v17 = objc_opt_class(v11[483]);
          if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
          {
            if (v15)
            {
              id v26 = [[AFDeviceCapabilities alloc] initWithSerializedBackingStore:v16];
              if ([v26 voiceTriggerEnabled]) {
                uint64_t v18 = 1LL;
              }
              else {
                uint64_t v18 = 2LL;
              }
              id v25 = *(void **)(a1 + 48);
              id v19 = [[SVDVoiceTriggerCapability alloc] initWithStatus:v18];
              id v33 = v19;
              id v20 = v11;
              uint64_t v21 = a1;
              id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v33,  1LL));
              [v25 setObject:v22 forKey:v15];

              a1 = v21;
              id v11 = v20;

              [*(id *)(a1 + 56) addObject:v13];
            }
          }

          else
          {
            __int128 v23 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              __int128 v36 = "-[ADDeviceCircleManager _fetchDeviceCapabilitiesForDevices:fromCollectorWithIndex:existingCapabiliti"
                    "es:completion:]_block_invoke";
              __int16 v37 = 2112;
              id v38 = v14;
              __int16 v39 = 2112;
              __int16 v40 = v16;
              _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s Invalid capabilities response for %@: %@",  buf,  0x20u);
            }
          }
        }

        id v10 = [obj countByEnumeratingWithState:&v29 objects:v34 count:16];
      }

      while (v10);
    }

    id v5 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

NSString *__cdecl sub_100166C50(id a1, AFPeerInfo *a2)
{
  return (NSString *)-[AFPeerInfo idsDeviceUniqueIdentifier](a2, "idsDeviceUniqueIdentifier");
}

NSString *__cdecl sub_100166C58(id a1, AFPeerInfo *a2)
{
  return (NSString *)-[AFPeerInfo assistantIdentifier](a2, "assistantIdentifier");
}

void sub_100166C60(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  [v2 _fetchDeviceCapabilitiesForDevices:v3 fromCollectorWithIndex:*(void *)(a1 + 64) + 1 existingCapabilities:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

uint64_t sub_100166CB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100166CBC(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v9 = 136315394;
    id v10 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #hal safeCompletion invoked for executing commands through #on-demand connection for %@",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 40) cancel];
  [*(id *)(a1 + 48) _cleanupOnDemandClientLinkToContextCollector:*(void *)(*(void *)(a1 + 48) + 32)];
  if (a2 == -2)
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 136315394;
      id v10 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s #hal timed-out executing commands through #on-demand connection for %@",  (uint8_t *)&v9,  0x16u);
    }
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL));
  }
  return result;
}

id sub_100166E24(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100166E50(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)buf = 136315650;
      uint64_t v18 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke";
      __int16 v19 = 2112;
      uint64_t v20 = v11;
      __int16 v21 = 2112;
      id v22 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s #hal activate on-demand connection to context collector failed. Connection: %@, Error: %@",  buf,  0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a2);
    [*(id *)(a1 + 40) invoke];
  }

  else
  {
    uint64_t v6 = mach_absolute_time();
    uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds(v6);
    uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 32LL);
    int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 48)));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _rapportLinkMessageOptions]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100167030;
    v12[3] = &unk_1004F3510;
    v12[4] = *(void *)(a1 + 32);
    uint64_t v16 = Milliseconds;
    id v13 = *(id *)(a1 + 56);
    int8x16_t v15 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    id v14 = *(id *)(a1 + 40);
    [v8 sendRequestToContextCollectorThroughOnDemandConnection:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"execute_command_request" messagePayload:v9 options:v10 completion:v12];
  }
}

void sub_100167030(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[2] = sub_10016711C;
  block[3] = &unk_1004F34E8;
  uint64_t v20 = *(void *)(a1 + 72);
  block[1] = 3221225472LL;
  id v15 = v7;
  id v16 = v6;
  uint64_t v9 = *(void *)(a1 + 64);
  id v17 = v5;
  uint64_t v19 = v9;
  __int128 v13 = *(_OWORD *)(a1 + 48);
  id v10 = (id)v13;
  __int128 v18 = v13;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, block);
}

id sub_10016711C(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds(v2);
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = Milliseconds - *(void *)(a1 + 80);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = v4;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v5));
    uint64_t v9 = *(void *)(a1 + 40);
    int v11 = 136315906;
    id v12 = "-[ADDeviceCircleManager _executeCommandThroughOnDemandClientLinkToContextCollector:onPeer:debugID:completion:]_block_invoke_2";
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%s #hal (%@) execute command request response received in %@ ms, error: %@",  (uint8_t *)&v11,  0x2Au);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), *(id *)(a1 + 40));
  return [*(id *)(a1 + 56) invoke];
}

void sub_100167268(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 originPeerInfo]);

  if (!v3)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1001675E8;
    v31[3] = &unk_1004F52F0;
    id v4 = *(void **)(a1 + 32);
    void v31[4] = *(void *)(a1 + 40);
    [v4 updateInfoUsingBlock:v31];
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) info]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 buildDictionaryRepresentation]);

  if (v6) {
    id v7 = v6;
  }
  else {
    id v7 = &__NSDictionary0__struct;
  }
  v40[0] = @"messageID";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 UUIDString]);
  v41[0] = v9;
  v41[1] = @"execute_command_request";
  v40[1] = @"type";
  v40[2] = @"serialized_command";
  uint64_t v10 = *(void *)(a1 + 48);
  v40[3] = @"execution_context";
  v41[2] = v10;
  v41[3] = v7;
  int v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v41,  v40,  4LL));

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 componentsSeparatedByString:@"-"]);
  __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);

  id v16 = (void *)AFSiriLogContextDaemon;
  BOOL v17 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v17)
  {
    uint64_t v19 = *(void **)(a1 + 56);
    uint64_t v20 = v16;
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 assistantIdentifier]);
    *(_DWORD *)buf = 136315650;
    __int128 v35 = "-[ADDeviceCircleManager _executeCommand:onPeer:executionContext:throughOnDemandConnectionToContextCollector:co"
          "mpletion:]_block_invoke";
    __int16 v36 = 2112;
    __int16 v37 = v15;
    __int16 v38 = 2112;
    __int16 v39 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s #hal (%@) execute command request to peer with assistantId: %@",  buf,  0x20u);
  }

  if (AFSupportsHALOnDemandRapportConnection(v17, v18) && *(_BYTE *)(a1 + 72))
  {
    [*(id *)(a1 + 40) _executeCommandThroughOnDemandClientLinkToContextCollector:v11 onPeer:*(void *)(a1 + 56) debugID:v15 completion:*(void *)(a1 + 64)];
  }

  else
  {
    uint64_t v22 = mach_absolute_time();
    uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds(v22);
    id v24 = *(void **)(*(void *)(a1 + 40) + 24LL);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) assistantIdentifier]);
    uint64_t v32 = RPOptionStatusFlags;
    id v33 = &off_100513330;
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL));
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100167638;
    v27[3] = &unk_1004F3498;
    void v27[4] = *(void *)(a1 + 40);
    uint64_t v30 = Milliseconds;
    id v28 = v15;
    id v29 = *(id *)(a1 + 64);
    [v24 sendRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"execute_command_request" messagePayload:v11 toDeviceWithAssistantIdentifier:v25 options:v26 completion:v27];
  }
}

void sub_1001675E8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 _localPeerInfo]);
  [v3 setOriginPeerInfo:v4];
}

void sub_100167638(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[2] = sub_10016770C;
  block[3] = &unk_1004F8BA0;
  uint64_t v17 = *(void *)(a1 + 56);
  block[1] = 3221225472LL;
  id v13 = v7;
  id v14 = v6;
  id v9 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, block);
}

uint64_t sub_10016770C(void *a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds(v2);
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = Milliseconds - a1[8];
    uint64_t v6 = a1[4];
    id v7 = v4;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v5));
    uint64_t v9 = a1[5];
    int v11 = 136315906;
    id v12 = "-[ADDeviceCircleManager _executeCommand:onPeer:executionContext:throughOnDemandConnectionToContextCollector:co"
          "mpletion:]_block_invoke_2";
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    __int16 v15 = 2112;
    id v16 = v8;
    __int16 v17 = 2112;
    uint64_t v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s #hal (%@) execute command request response received in %@ ms, error: %@",  (uint8_t *)&v11,  0x2Au);
  }

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[6], a1[5]);
  }
  return result;
}

void sub_10016783C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100167CF4;
  v7[3] = &unk_1004F3448;
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 88);
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100167950(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(a1 + 32) + 48LL))
  {
    if (v2)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:"));
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
      unsigned __int8 v5 = [v3 isEqualToSet:v4];

      if ((v5 & 1) != 0) {
        goto LABEL_4;
      }
    }

void sub_100167BB8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  int v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = a3 + 1;
    uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 48LL);
    id v9 = v6;
    id v10 = [v8 count];
    uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v5]);
    id v12 = (void *)v11;
    int v14 = 136316162;
    id v15 = "-[ADDeviceCircleManager _reelectCollectorDeviceForReason:completion:]_block_invoke_2";
    unsigned int v13 = @"?";
    __int16 v16 = 2048;
    if (v11) {
      unsigned int v13 = (const __CFString *)v11;
    }
    uint64_t v17 = v7;
    __int16 v18 = 2048;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v5;
    __int16 v22 = 2112;
    __int128 v23 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s #hal Elected collector device (%tu/%tu): %@, homeID: %@",  (uint8_t *)&v14,  0x34u);
  }
}

void sub_100167CF4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if ((objc_msgSend(*(id *)(a1 + 72), "containsObject:") & 1) == 0)
    {
      [*(id *)(a1 + 56) addObject:*(void *)(a1 + 64)];
      [*(id *)(a1 + 72) addObject:*(void *)(a1 + 32)];
      [*(id *)(a1 + 80) setObject:*(void *)(a1 + 32) forKey:*(void *)(a1 + 64)];
    }
  }

  else
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = *(void *)(a1 + 48);
      int v5 = 136315650;
      int v6 = "-[ADDeviceCircleManager _reelectCollectorDeviceForReason:completion:]_block_invoke_3";
      __int16 v7 = 2112;
      uint64_t v8 = v3;
      __int16 v9 = 2112;
      uint64_t v10 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Unable to get home id for %@ from %@",  (uint8_t *)&v5,  0x20u);
    }

    [*(id *)(a1 + 56) addObject:*(void *)(a1 + 64)];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 88));
}

int64_t sub_100167E04(id a1, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v4 = a3;
  int v5 = a2;
  int v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"idsDeviceIdentifier"));
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v4, "objectForKey:", @"idsDeviceIdentifier"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"isCollector"));
  unsigned int v9 = [v8 BOOLValue];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v4, "objectForKey:", @"isCollector"));
  LODWORD(v_Block_object_dispose((const void *)(v7 - 64), 8) = [v10 BOOLValue];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"stationaryScore"));
  [v11 floatValue];
  float v13 = v12;

  int v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v4, "objectForKey:", @"stationaryScore"));
  [v14 floatValue];
  float v16 = v15;

  if (v9 == (_DWORD)v8)
  {
    if (v13 == v16)
    {
      int64_t v17 = (int64_t)[v6 compare:v7];
    }

    else if (v13 <= v16)
    {
      int64_t v17 = 1LL;
    }

    else
    {
      int64_t v17 = -1LL;
    }
  }

  else if (v9)
  {
    int64_t v17 = -1LL;
  }

  else
  {
    int64_t v17 = 1LL;
  }

  return v17;
}

void sub_100167F64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    __int16 v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      float v12 = v7;
      float v13 = (void *)objc_claimAutoreleasedReturnValue([v6 debugDescription]);
      *(_DWORD *)buf = 136315650;
      id v19 = "-[ADDeviceCircleManager sendRequestType:data:toDeviceWithAssistantIdentifier:onQueue:completion:]_block_invoke";
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      __int128 v23 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s Error sending request to device with assistantId %@: %@",  buf,  0x20u);
    }
  }

  if (*(void *)(a1 + 48))
  {
    uint64_t v8 = *(void **)(a1 + 40);
    if (v8)
    {
      unsigned int v9 = v8;
    }

    else
    {
      unsigned int v9 = &_dispatch_main_q;
      uint64_t v10 = &_dispatch_main_q;
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100168110;
    block[3] = &unk_1004FD9E0;
    id v17 = *(id *)(a1 + 48);
    id v15 = v5;
    id v16 = v6;
    dispatch_async(v9, block);
  }
}

uint64_t sub_100168110(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_100168124(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315650;
      uint64_t v11 = "-[ADDeviceCircleManager _forwardExecuteCommandToDevice:message:from:completion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #hal Error in forwarding executeCommand to %@: error:%@",  (uint8_t *)&v10,  0x20u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

void sub_100168228(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 56))
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 24) activeDevices]);
    id v3 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v16;
      do
      {
        id v6 = 0LL;
        do
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(obj);
          }
          __int16 v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _keepAliveLinkToDevice:*(void *)(*((void *)&v15 + 1) + 8 * (void)v6)]);
          dispatch_time_t v8 = dispatch_time(0LL, 5000000000LL);
          uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10016841C;
          block[3] = &unk_1004FD940;
          id v14 = v7;
          id v10 = v7;
          dispatch_after(v8, v9, block);

          id v6 = (char *)v6 + 1;
        }

        while (v4 != v6);
        id v4 = [obj countByEnumeratingWithState:&v15 objects:v21 count:16];
      }

      while (v4);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      __int16 v20 = "-[ADDeviceCircleManager wakeUpNearbyDevices]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Current device is not context collector, skipping",  buf,  0xCu);
    }
  }

id sub_10016841C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100168424(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _localPeerInfo]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) allValues]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128LL));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001684A0(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _setUpOnDemandClientLinkToContextCollector]);
  [*((id *)a1[4] + 4) invalidate];
  objc_storeStrong((id *)a1[4] + 4, v2);
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  id v4 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_10016873C;
  v25[3] = &unk_1004F33B8;
  id v26 = 0LL;
  uint64_t v5 = v3;
  uint64_t v27 = v5;
  id v6 = a1[5];
  id v7 = a1[4];
  id v28 = v6;
  id v29 = v7;
  id v30 = a1[6];
  dispatch_time_t v8 = -[AFSafetyBlock initWithBlock:](v4, "initWithBlock:", v25);
  uint64_t v9 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
  uint64_t v10 = *((void *)a1[4] + 1);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_1001688E0;
  v23[3] = &unk_1004FD940;
  uint64_t v11 = v8;
  __int128 v24 = v11;
  __int16 v12 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v9,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v10,  v23,  1.7);
  -[AFWatchdogTimer start](v12, "start");
  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v32 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
    __int16 v33 = 2112;
    __int128 v34 = v2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s #hal activating #on-demand connection to context collector: %@",  buf,  0x16u);
  }

  id v14 = a1[4];
  uint64_t v15 = v14[4];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10016890C;
  v19[3] = &unk_1004F79D8;
  void v19[4] = v14;
  __int16 v20 = v11;
  id v16 = a1[6];
  uint64_t v21 = v5;
  id v22 = v16;
  __int128 v17 = v5;
  __int128 v18 = v11;
  [v14 _activateOnDemandClientLinkToContextCollector:v15 completion:v19];
}

uint64_t sub_10016873C(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v7 = *(void **)(a1 + 40);
    dispatch_time_t v8 = v4;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v7 count]));
    uint64_t v10 = *(void *)(a1 + 48);
    int v12 = 136315650;
    uint64_t v13 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #hal fetched %@ peerCapabilitiesTuples for %@.",  (uint8_t *)&v12,  0x20u);
  }

  [*(id *)(a1 + 56) _cleanupOnDemandClientLinkToContextCollector:*(void *)(*(void *)(a1 + 56) + 32)];
  if (a2 == -2)
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void **)(a1 + 48);
      int v12 = 136315394;
      uint64_t v13 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s #hal timed-out fetching capabilities through #on-demand connection for %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

id sub_1001688E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_10016890C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)buf = 136315650;
      uint64_t v15 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v8;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s #hal activate #on-demand connection to context collector failed. Connection: %@, Error: %@",  buf,  0x20u);
    }

    [*(id *)(a1 + 40) invoke];
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 32LL);
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s #hal sending capabilities fetch message through #on-demand connection to context collector: %@",  buf,  0x16u);
    }

    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = (void *)v5[4];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _rapportLinkMessageOptions]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100168B0C;
    v10[3] = &unk_1004F7220;
    v10[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    [v6 sendRequestToContextCollectorThroughOnDemandConnection:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"peers_svdCapabilities_fetch" messagePayload:&__NSDictionary0__struct options:v7 completion:v10];
  }
}

void sub_100168B0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100168BF4;
  block[3] = &unk_1004FCBB0;
  id v11 = v5;
  id v12 = v6;
  id v15 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

void sub_100168BF4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    id v19 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
    __int16 v20 = 2112;
    uint64_t v21 = v9;
    __int16 v22 = 2112;
    uint64_t v23 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal #on-demand getCapabilitiesAndPeersCompletion response: %@, error: %@",  buf,  0x20u);
  }

  if (*(void *)(a1 + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"payload"]);
    if (v3)
    {
      uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0)
      {
        id v5 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          id v19 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s #hal #on-demand received malformed response",  buf,  0xCu);
        }

        id v3 = 0LL;
      }
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 allKeys]);
    id v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472LL;
    id v14 = sub_100168E54;
    id v15 = &unk_1004F33E0;
    id v7 = v3;
    id v16 = v7;
    id v17 = *(id *)(a1 + 48);
    [v6 enumerateObjectsUsingBlock:&v12];

    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 136315394;
      id v19 = "-[ADDeviceCircleManager getCapabilitiesAndPeersFromContextCollectorThroughOnDemandRapportConnection:]_block_invoke_2";
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #hal #on-demand peerCapabilitiesTuples: %@",  buf,  0x16u);
    }

    objc_msgSend(*(id *)(a1 + 56), "invoke", v12, v13, v14, v15);
  }

void sub_100168E54(uint64_t a1, uint64_t a2)
{
  id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:a2]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"peerData"]);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"deviceCapabilitiesV2"]);

    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"peerData"]);
      id v7 = -[AFPeerInfo initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___AFPeerInfo),  "initWithDictionaryRepresentation:",  v6);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"deviceCapabilitiesV2"]);
      id v9 = sub_10025B940(v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = v10;
      if (v7 && [v10 count])
      {
        id v12 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v7,  v11);
        [*(id *)(a1 + 40) addObject:v12];
      }
    }
  }
}

void sub_100168F7C(uint64_t a1)
{
  __int16 v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) activeDevices]);
  id v2 = [obj countByEnumeratingWithState:&v24 objects:v34 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v25;
    *(void *)&__int128 v3 = 136315650LL;
    __int128 v21 = v3;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)v6);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "siriInfo", v21));
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"deviceCapabilitiesV2"]);

        id v10 = sub_10025B940(v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        id v12 = sub_1001659FC(v7, 0LL);
        id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _managedPeerInfoMatchingPeerInfo:v13]);
        id v15 = (void *)v14;
        if (v14) {
          id v16 = (void *)v14;
        }
        else {
          id v16 = v13;
        }
        id v17 = v16;
        __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = v21;
          id v29 = "-[ADDeviceCircleManager getCapabilitiesForReachableDevicesWithCompletion:]_block_invoke";
          __int16 v30 = 2112;
          id v31 = v17;
          __int16 v32 = 2112;
          __int16 v33 = v11;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #hal Capabilities for %@: %@",  buf,  0x20u);
          if (!v17) {
            goto LABEL_13;
          }
        }

        else if (!v17)
        {
          goto LABEL_13;
        }

        if ([v11 count])
        {
          id v19 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v17,  v11);
          -[NSMutableArray addObject:](v22, "addObject:", v19);
        }

void sub_1001691E8(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _rpDeviceMatchingPeerInfo:a1[5]]);
  __int128 v3 = v2;
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 siriInfo]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"deviceCapabilitiesV2"]);

    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    {
      id v7 = sub_10025B940(v5);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      id v9 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v15 = a1[5];
        *(_DWORD *)buf = 136315650;
        __int16 v22 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
        __int16 v23 = 2112;
        id v24 = v15;
        __int16 v25 = 2112;
        __int128 v26 = v8;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #hal Capabilities for %@: %@",  buf,  0x20u);
      }

      (*((void (**)(void))a1[6] + 2))();
    }

    else
    {
      (*((void (**)(void))a1[6] + 2))();
    }
  }

  else
  {
    id v10 = [*((id *)a1[4] + 6) count];
    uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v12 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
    if (v10)
    {
      if (v12)
      {
        id v16 = a1[5];
        *(_DWORD *)buf = 136315394;
        __int16 v22 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
        __int16 v23 = 2112;
        id v24 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s #hal Unable to reach %@ directly, fetching from collector",  buf,  0x16u);
      }

      id v13 = a1[4];
      id v27 = a1[5];
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v27, 1LL));
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      v18[2] = sub_1001694D0;
      v18[3] = &unk_1004FCA28;
      id v19 = a1[5];
      id v20 = a1[6];
      [v13 _fetchDeviceCapabilitiesForDevices:v14 completion:v18];
    }

    else
    {
      if (v12)
      {
        id v17 = a1[5];
        *(_DWORD *)buf = 136315394;
        __int16 v22 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
        __int16 v23 = 2112;
        id v24 = v17;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s #hal Unable to reach %@ directly",  buf,  0x16u);
      }

      (*((void (**)(void))a1[6] + 2))();
    }
  }
}

void sub_1001694D0(uint64_t a1, void *a2)
{
  __int128 v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);

  id v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = v7;
    uint64_t CompactDescription = AFPeerInfoGetCompactDescription(v8);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(CompactDescription);
    int v12 = 136315650;
    id v13 = "-[ADDeviceCircleManager getCapabilitiesForDevice:completion:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #hal Capabilities for %@: %@",  (uint8_t *)&v12,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100169608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 56))
  {
    if (!*(void *)(v1 + 104)
      || (__int128 v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 104)],
          double v5 = v4,
          v3,
          v5 > 86400.0))
    {
      uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315138;
        uint64_t v8 = "-[ADDeviceCircleManager reelectContextCollectorWithBestScore]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #hal Resigning collector role to trigger daily re-election based on score",  (uint8_t *)&v7,  0xCu);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 0;
      [*(id *)(a1 + 32) _updateClientLinkSiriInfo];
      [*(id *)(a1 + 32) _reelectCollectorDeviceForReason:5 completion:0];
    }
  }

id sub_100169724(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) removeObject:*(void *)(a1 + 40)];
}

id sub_100169730(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 40) addObject:*(void *)(a1 + 40)];
}

uint64_t sub_10016973C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 104);
  double v4 = (os_log_t *)&AFSiriLogContextDaemon;
  double v5 = (void *)AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v6)
    {
      int v7 = *(void **)(v2 + 48);
      uint64_t v8 = v5;
      *(_DWORD *)buf = 136315394;
      __int16 v39 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
      __int16 v40 = 2048;
      id v41 = [v7 count];
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #hal Current collector count: %zd",  buf,  0x16u);

      uint64_t v2 = *(void *)(a1 + 32);
    }

    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id obj = *(id *)(v2 + 48);
    id v9 = [obj countByEnumeratingWithState:&v34 objects:v46 count:16];
    if (v9)
    {
      id v11 = v9;
      uint64_t v12 = *(void *)v35;
      *(void *)&__int128 v10 = 136315906LL;
      __int128 v32 = v10;
      do
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v35 != v12) {
            objc_enumerationMutation(obj);
          }
          __int16 v14 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
          id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "localDevice", v32));
          __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 idsDeviceIdentifier]);
          unsigned int v17 = [v14 isEqualToString:v16];

          __int16 v18 = *(void **)(a1 + 32);
          if ((v17 & 1) != 0) {
            uint64_t v19 = objc_claimAutoreleasedReturnValue([v18 _localPeerInfo]);
          }
          else {
            uint64_t v19 = objc_claimAutoreleasedReturnValue([v18 _remotePeerInfoForIDSDeviceUniqueIdentifier:v14]);
          }
          id v20 = (void *)v19;
          os_log_t v21 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
          {
            __int16 v22 = v21;
            __int16 v23 = v4;
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v20 productType]);
            *(_DWORD *)buf = v32;
            __int16 v39 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
            __int16 v40 = 2112;
            id v41 = v14;
            __int16 v42 = 2112;
            id v43 = v24;
            __int16 v44 = 1024;
            unsigned int v45 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%s #hal Current collector: %@ (%@, isLocalDevice = %d)",  buf,  0x26u);

            double v4 = v23;
          }
        }

        id v11 = [obj countByEnumeratingWithState:&v34 objects:v46 count:16];
      }

      while (v11);
    }

    if (![*(id *)(*(void *)(a1 + 32) + 48) count] && AFIsHorseman(0, v25))
    {
      __int128 v26 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        __int16 v39 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%s Logging ABC for missing context collector on HomePod",  buf,  0xCu);
      }

      id v27 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSymptomsReporter sharedInstance]( &OBJC_CLASS___SiriCoreSymptomsReporter,  "sharedInstance"));
      id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
      id v29 = [v28 processIdentifier];
      [v27 reportIssueForType:@"hal" subType:@"homepod_without_context_collector" context:&__NSDictionary0__struct processIdentifier:v29 walkboutStatus:byte_1005780A0];
    }

    __int16 v30 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (v6)
    {
      *(_DWORD *)buf = 136315138;
      __int16 v39 = "-[ADDeviceCircleManager getContextCollectorDeviceIdentifiersWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_INFO,  "%s #hal skip fetching context collector identifiers, re-election has never occurred yet",  buf,  0xCu);
    }

    __int16 v30 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  return v30();
}

void sub_100169AFC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v8 = a2;
  if ([a3 isEqualToString:*(void *)(a1 + 32)])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_100169B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 40);
  double v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100169C1C;
  block[3] = &unk_1004FD9E0;
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_100169C1C(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[5];
      int v8 = 136315650;
      id v9 = "-[ADDeviceCircleManager _activateOnDemandClientLinkToContextCollector:completion:]_block_invoke_2";
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal activate #on-demand connection to context collector failed. Connection: %@, Error: %@",  (uint8_t *)&v8,  0x20u);
    }

    double v4 = *(uint64_t (**)(void))(a1[6] + 16LL);
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = a1[5];
      int v8 = 136315394;
      id v9 = "-[ADDeviceCircleManager _activateOnDemandClientLinkToContextCollector:completion:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal activated #on-demand connection: %@",  (uint8_t *)&v8,  0x16u);
    }

    double v4 = *(uint64_t (**)(void))(a1[6] + 16LL);
  }

  return v4();
}

void sub_100169D70(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkDiscoveryOptions,  "newWithBuilder:",  &stru_1004F3370);
  -[ADRapportLinkConfigurationMutating setDiscoveryOptions:](v2, "setDiscoveryOptions:", v3);

  id v4 = +[ADRapportLinkConnectionOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkConnectionOptions,  "newWithBuilder:",  &stru_1004F3390);
  -[ADRapportLinkConfigurationMutating setConnectionOptions:](v2, "setConnectionOptions:", v4);

  double v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADDeviceCircleManager _setUpOnDemandClientLinkToContextCollector]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #hal #on-demand connectionOptions: %@",  (uint8_t *)&v6,  0x16u);
  }
}

void sub_100169E80(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_100169E8C(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesFamily:](v2, "setIncludesFamily:", 0LL);
}

void sub_100169EC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[3];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _rapportLinkMessageOptions]);
  [v3 registerRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" options:v4];

  [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"device_capabilities_fetch"];
  [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"execute_command_request"];
  if (+[AFFeatureFlags isCrossDeviceTVControlFromWatchEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isCrossDeviceTVControlFromWatchEnabled")) {
    [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"peers_svdCapabilities_fetch"];
  }
  double v5 = *(void **)(a1 + 32);
  int v6 = (void *)v5[3];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 _rapportLinkMessageOptions]);
  [v6 registerRequestID:@"com.apple.siri.mux.token.exchange" options:v7];

  [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:@"com.apple.siri.mux.token.exchange" messageType:@"siriMux_tokenExchange"];
  __int16 v8 = *(void **)(a1 + 32);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[ADArbitrationFeedbackManager sharedManager]( &OBJC_CLASS___ADArbitrationFeedbackManager,  "sharedManager"));
  [v8 _registerRequestHandlerForRequestId:@"com.apple.siri.rapport-link.request.device-circle-manager" messageType:@"arbitration_info_push" handler:v9];

  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 208) keyEnumerator]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10016A0F8;
  v16[3] = &unk_1004F8C10;
  v16[4] = *(void *)(a1 + 32);
  [v11 enumerateObjectsUsingBlock:v16];

  objc_initWeak(&location, *(id *)(a1 + 32));
  __int16 v12 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10016A25C;
  v13[3] = &unk_1004F7620;
  objc_copyWeak(&v14, &location);
  void v13[4] = *(void *)(a1 + 32);
  [v12 activateWithCompletion:v13];
  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_10016A0DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10016A0F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 componentsSeparatedByString:@"/"]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 lastObject]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 208) objectForKey:v3]);

  if ([v5 length])
  {
    if ([v6 length])
    {
      if (v7)
      {
        [*(id *)(*(void *)(a1 + 32) + 24) setRequestHandler:*(void *)(a1 + 32) forRequestID:v5 messageType:v6];
        __int16 v8 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v9 = 136315650;
          __int16 v10 = "-[ADDeviceCircleManager _setupClientLink]_block_invoke_2";
          __int16 v11 = 2112;
          __int16 v12 = v5;
          __int16 v13 = 2112;
          id v14 = v6;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback registered handler requestId:%@, messageType:%@",  (uint8_t *)&v9,  0x20u);
        }
      }
    }
  }
}

void sub_10016A25C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "-[ADDeviceCircleManager _setupClientLink]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s #hal Error activating: %@",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    if (WeakRetained)
    {
      int v6 = WeakRetained;
      [WeakRetained _updateCollectorElectionVersion];
      [v6 _updateSiriInfoWithDeviceCapabilities];
      os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128LL));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _localPeerData]);
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 128LL));
      [v6 _updateSiriInfoWithLocalPeerData:v7];
    }
  }
}

id sub_10016A398(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updatePersonalRequestsEnabledAccessories];
}

id sub_10016A3A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateAssistantIdentifierAndSharedUserIdentifier];
}

void sub_10016A3A8(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10016A52C;
  v2[3] = &unk_1004F32D0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 getCurrentAccessoryInfoWithCompletion:v2];
}

void sub_10016A414(uint64_t a1, unint64_t a2)
{
  id v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)buf = 136315394;
    int v8 = "-[ADDeviceCircleManager _initWithQueue:rapportLink:]_block_invoke_5";
    __int16 v9 = 2112;
    __int16 v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_10016A52C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  BOOL v5 = (dispatch_queue_s *)v4[1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10016A5BC;
  v7[3] = &unk_1004FD968;
  int v8 = v4;
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_10016A5BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateCurrentAccessoryInfo:*(void *)(a1 + 40)];
}

void sub_10016A6B0(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkDiscoveryOptions,  "newWithBuilder:",  &stru_1004F3310);
  -[ADRapportLinkConfigurationMutating setDiscoveryOptions:](v2, "setDiscoveryOptions:", v3);

  id v4 = +[ADRapportLinkTransportOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkTransportOptions,  "newWithBuilder:",  &stru_1004F3330);
  -[ADRapportLinkConfigurationMutating setTransportOptions:](v2, "setTransportOptions:", v4);
}

void sub_10016A730(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  id v4 = a2;
  id v2 = (id)_AFPreferencesBLECompanionConnectionsEnabled();
  if ((_DWORD)v2) {
    id v2 = -[ADRapportLinkTransportOptionsMutating setAllowsBLE:](v4, "setAllowsBLE:", 2LL);
  }
}

void sub_10016A77C(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  id v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesFamily:](v2, "setIncludesFamily:", 0LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesRemoraDevices:](v2, "setIncludesRemoraDevices:", 2LL);
}

void sub_10016A7C0(uint64_t a1)
{
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v7 = dispatch_queue_create("ADDeviceCircleManager", v3);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _rapportLinkWithQueue:v7]);
  id v5 = [objc_alloc(*(Class *)(a1 + 32)) _initWithQueue:v7 rapportLink:v4];
  id v6 = (void *)qword_100577F78;
  qword_100577F78 = (uint64_t)v5;
}

uint64_t sub_10016A850(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 0LL;
  if (v3 && v4)
  {
    if ((sub_10016A920(v3, v4) & 1) != 0)
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      unsigned __int8 v13 = 0;
      id v7 = sub_10016563C(v3, &v13);
      int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      unsigned __int8 v12 = 0;
      id v9 = sub_10016563C(v5, &v12);
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v6 = 0LL;
      if (v13 | v12) {
        uint64_t v6 = sub_10016A920(v8, v10);
      }
    }
  }

  return v6;
}

uint64_t sub_10016A920(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 idsDeviceUniqueIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 idsDeviceUniqueIdentifier]);
  id v7 = v5;
  id v8 = v6;
  id v9 = v8;
  if (v7 == v8)
  {
    unsigned __int8 v10 = v7 != 0LL;
  }

  else
  {
    if (!v7 || !v8)
    {

      goto LABEL_9;
    }

    unsigned __int8 v10 = [v7 isEqual:v8];
  }

  if ((v10 & 1) != 0) {
    goto LABEL_23;
  }
LABEL_9:
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 rapportEffectiveIdentifier]);
  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v4 rapportEffectiveIdentifier]);
  id v13 = v11;
  id v14 = v12;
  id v15 = v14;
  if (v13 == v14)
  {
    unsigned __int8 v16 = v13 != 0LL;
  }

  else
  {
    if (!v13 || !v14)
    {

      goto LABEL_17;
    }

    unsigned __int8 v16 = [v13 isEqual:v14];
  }

  if ((v16 & 1) != 0) {
    goto LABEL_23;
  }
LABEL_17:
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v3 homeKitAccessoryIdentifier]);
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v4 homeKitAccessoryIdentifier]);
  id v19 = v17;
  id v20 = v18;
  os_log_t v21 = v20;
  if (v19 == v20)
  {
    unsigned __int8 v22 = v19 != 0LL;
  }

  else
  {
    if (!v19 || !v20)
    {

      goto LABEL_25;
    }

    unsigned __int8 v22 = [v19 isEqual:v20];
  }

  if ((v22 & 1) != 0)
  {
LABEL_23:
    uint64_t v23 = 1LL;
    goto LABEL_31;
  }

id sub_10016AB90(void *a1)
{
  uint64_t v1 = sub_100166170(a1);
  dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 assistantIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uppercaseString]);

  return v4;
}

id sub_10016ABE0(void *a1)
{
  id v1 = a1;
  if ([v1 length])
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10016AC90;
    v6[3] = &unk_1004FD2E8;
    id v7 = v1;
    id v2 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v6);
    id v3 = sub_10016563C(v2, 0LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

id sub_10016AC90(uint64_t a1, void *a2)
{
  return [a2 setAssistantIdentifier:*(void *)(a1 + 32)];
}

id sub_10016AC9C(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 assistantIdentifier]);
  if (![v2 length])
  {
    id v3 = sub_10016563C(v1, 0LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 assistantIdentifier]);

    id v2 = (void *)v5;
  }

  return v2;
}

id sub_10016AD0C(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 idsDeviceUniqueIdentifier]);
  if (![v2 length])
  {
    id v3 = sub_10016563C(v1, 0LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 idsDeviceUniqueIdentifier]);

    id v2 = (void *)v5;
  }

  return v2;
}

void sub_10016B534( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10016B768( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10016B880(_Unwind_Exception *a1)
{
}

void sub_10016BA9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[6])
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10016BB90;
    v6[3] = &unk_1004F38E8;
    id v7 = (id)objc_claimAutoreleasedReturnValue([v2 _endpointConnectionAssertion]);
    id v8 = *(id *)(a1 + 40);
    id v3 = v7;
    [v3 releaseAssertion:v6];
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AFRemoraEndpointConnectionErrorDomain,  20LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0LL, v5);
    }
  }

void sub_10016BB90(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = v6;
    int v10 = 136315394;
    id v11 = "-[ADRemoraEndpointConnection releaseEndpointConnectionAssertion:]_block_invoke_2";
    __int16 v12 = 1024;
    unsigned int v13 = [v7 assertionState];
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #ADRemoraEndpointConnection assertion release state: %d",  (uint8_t *)&v10,  0x12u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

void sub_10016BC94(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[6])
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10016BD88;
    v6[3] = &unk_1004F38E8;
    id v7 = (id)objc_claimAutoreleasedReturnValue([v2 _endpointConnectionAssertion]);
    id v8 = *(id *)(a1 + 40);
    id v3 = v7;
    [v3 acquireAssertion:v6];
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AFRemoraEndpointConnectionErrorDomain,  20LL,  0LL));
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0LL, v5);
    }
  }

void sub_10016BD88(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = v6;
    int v10 = 136315394;
    id v11 = "-[ADRemoraEndpointConnection acquireEndpointConnectionAssertion:]_block_invoke_2";
    __int16 v12 = 1024;
    unsigned int v13 = [v7 assertionState];
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #ADRemoraEndpointConnection assertion acquisition state: %d",  (uint8_t *)&v10,  0x12u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

id sub_10016BE8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _teardownEndpointConnection];
}

id sub_10016BE94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setupEndpointConnection];
}

void sub_10016BE9C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 48LL))
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 136315394;
      uint64_t v9 = "-[ADRemoraEndpointConnection sendMessage:completionHandler:]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s #ADRemoraEndpointConnection sending payload: %@",  buf,  0x16u);
    }

    id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
    id v5 = WeakRetained;
    if (WeakRetained) {
      [WeakRetained[6] sendMessageWithDictionary:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  AFRemoraEndpointConnectionErrorDomain,  20LL,  0LL));
      (*(void (**)(uint64_t))(v6 + 16))(v6);
    }
  }

void sub_10016BFEC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _didReceiveMessage:v8 error:v5];
    if (v7[3] == 2LL) {
      [v7 _readNextMessage];
    }
  }
}

void sub_10016C064(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained) {
    goto LABEL_11;
  }
  id v5 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    uint64_t v11 = "-[ADRemoraEndpointConnection _createConnection:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s #ADRemoraEndpointConnection connection invalidated with error %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  if (![v6 isEqualToString:kNWErrorDomainPOSIX])
  {

    goto LABEL_10;
  }

  id v7 = [v3 code];

  if (v7 != (id)61)
  {
LABEL_10:
    [WeakRetained _createConnection:WeakRetained[5]];
    goto LABEL_11;
  }

  id v8 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    uint64_t v11 = "-[ADRemoraEndpointConnection _createConnection:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s #ADRemoraEndpointConnection connection refused error %@",  (uint8_t *)&v10,  0x16u);
  }

  [WeakRetained _teardownEndpointConnection];
  id v9 = objc_loadWeakRetained(WeakRetained + 2);
  [v9 endpointConnectionInvalidated:WeakRetained];

LABEL_11:
}

void sub_10016C214(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (id *)(a1 + 32);
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained _endpointConnectionStateChanged:a2 error:v5];
}

LABEL_206:
  if (v42) {
LABEL_200:
  }

LABEL_201:
  __int16 v40 = v88;
  if (v88)
  {
    id v53 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary interfaceName](v88, "interfaceName"));
    id v107 = v53;
    id v108 = v88;
    v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v108,  &v107,  1LL));

    -[SiriCoreConnectionMetrics setTCPInfoMetricsByInterfaceName:](v58, "setTCPInfoMetricsByInterfaceName:", v54);
  }

LABEL_203:
  return v3;
}

LABEL_57:
  __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v71 connectionMethod]);
  if (v60) {
    -[_ADPBProxyGetMetricsResponse setConnectionMethodName:](self, "setConnectionMethodName:", v60);
  }

  __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v71 connectionEdgeType]);
  if (v61) {
    -[_ADPBProxyGetMetricsResponse setConnectionEdgeType:](self, "setConnectionEdgeType:", v61);
  }

  __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v71 connectionEdgeID]);
  if (v62) {
    -[_ADPBProxyGetMetricsResponse setConnectionEdgeIDName:](self, "setConnectionEdgeIDName:", v62);
  }

  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v71 connectionFallbackReason]);
  v64 = v63;
  if (v63) {
    -[_ADPBProxyGetMetricsResponse setHasConnectionFallbackReason:]( self,  "setHasConnectionFallbackReason:",  [v63 intValue] != 0);
  }

  v65 = (void *)objc_claimAutoreleasedReturnValue([v71 connectionDelay]);
  v66 = v65;
  if (v65)
  {
    [v65 doubleValue];
    -[_ADPBProxyGetMetricsResponse setTuscanyConnectionDelay:](self, "setTuscanyConnectionDelay:");
  }
}

  id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rttSmoothed));
  [v3 setObject:v31 forKey:@"rtt_smoothed"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x400000) == 0)
  {
LABEL_11:
    if ((*(_DWORD *)&has & 0x80000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }

  PBDataWriterWriteUint32Field(v5, self->_rttBest, 13LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x400) == 0)
  {
LABEL_13:
    if ((*(_WORD *)&has & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }

  v4[12] = self->_txRetransmitBytes;
  *((_DWORD *)v4 + 53) |= 0x800u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_59;
  }

  void v5[6] = self->_rxOooBytes;
  *((_DWORD *)v5 + 53) |= 0x20u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }

  __int16 v40 = 0LL;
  if ((*(_BYTE *)&has & 8) != 0)
  {
LABEL_41:
    __int16 v39 = 2654435761u * self->_rxBytes;
    if ((*(_BYTE *)&has & 0x10) != 0) {
      goto LABEL_42;
    }
    goto LABEL_59;
  }

  self->_rttBest = *((_DWORD *)v4 + 43);
  *(_DWORD *)&self->_has |= 0x80000u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x400) == 0)
  {
LABEL_13:
    if ((v6 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }

    goto LABEL_42;
  }

  id v15 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    v70 = "-[ADExternalNotificationRequestHandler _handleAnnounceNotificationRequest:]";
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Not announcing over device speaker, device is on silent",  buf,  0xCu);
  }

  unsigned __int8 v16 = v4;
  unsigned int v17 = 8LL;
LABEL_18:
  uint64_t v23 = 1LL;
LABEL_41:
  [v16 completeRequestWithSuccess:0 forReason:v17 shouldEmitInstrumentationEvent:v23];
LABEL_42:
}

void sub_10016DA28(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!v4)
  {
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "_ADPBProxyTCPInfoMetrics *ADConnectionTCPInfoMetricsCreateProtocolBufferProxy(SiriCoreConnectionTC PInfoMetrics *__strong)"));
    [v36 handleFailureInFunction:v37, @"ADConnectionTCPInfoMetricsUtilities.m", 106, @"Invalid parameter not satisfying: %@", @"tcpInfoMetrics != nil" file lineNumber description];
  }

  __int16 v38 = objc_alloc_init(&OBJC_CLASS____ADPBProxyTCPInfoMetrics);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 interfaceName]);
  if (v5) {
    -[_ADPBProxyTCPInfoMetrics setInterfaceName:](v38, "setInterfaceName:", v5);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 rttCurrent]);
  id v7 = v6;
  if (v6) {
    -[_ADPBProxyTCPInfoMetrics setRttCurrent:](v38, "setRttCurrent:", [v6 unsignedIntValue]);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 rttSmoothed]);
  id v9 = v8;
  if (v8) {
    -[_ADPBProxyTCPInfoMetrics setRttSmoothed:](v38, "setRttSmoothed:", [v8 unsignedIntValue]);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 rttVariance]);
  uint64_t v11 = v10;
  if (v10) {
    -[_ADPBProxyTCPInfoMetrics setRttVariance:](v38, "setRttVariance:", [v10 unsignedIntValue]);
  }

  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v4 rttBest]);
  id v13 = v12;
  if (v12) {
    -[_ADPBProxyTCPInfoMetrics setRttBest:](v38, "setRttBest:", [v12 unsignedIntValue]);
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 packetsSent]);
  id v15 = v14;
  if (v14) {
    -[_ADPBProxyTCPInfoMetrics setTxPackets:](v38, "setTxPackets:", [v14 unsignedLongLongValue]);
  }

  unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([v4 bytesSent]);
  unsigned int v17 = v16;
  if (v16) {
    -[_ADPBProxyTCPInfoMetrics setTxBytes:](v38, "setTxBytes:", [v16 unsignedLongLongValue]);
  }

  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v4 bytesRetransmitted]);
  id v19 = v18;
  if (v18) {
    -[_ADPBProxyTCPInfoMetrics setTxRetransmitBytes:]( v38,  "setTxRetransmitBytes:",  [v18 unsignedLongLongValue]);
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue([v4 bytesUnacked]);
  os_log_t v21 = v20;
  if (v20) {
    -[_ADPBProxyTCPInfoMetrics setTxUnacked:](v38, "setTxUnacked:", [v20 unsignedLongLongValue]);
  }

  unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue([v4 packetsReceived]);
  uint64_t v23 = v22;
  if (v22) {
    -[_ADPBProxyTCPInfoMetrics setRxPackets:](v38, "setRxPackets:", [v22 unsignedLongLongValue]);
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v4 bytesReceived]);
  uint64_t v25 = v24;
  if (v24) {
    -[_ADPBProxyTCPInfoMetrics setRxBytes:](v38, "setRxBytes:", [v24 unsignedLongLongValue]);
  }

  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v4 duplicateBytesReceived]);
  id v27 = v26;
  if (v26) {
    -[_ADPBProxyTCPInfoMetrics setRxDuplicateBytes:]( v38,  "setRxDuplicateBytes:",  [v26 unsignedLongLongValue]);
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue([v4 outOfOrderBytesReceived]);
  id v29 = v28;
  if (v28) {
    -[_ADPBProxyTCPInfoMetrics setRxOooBytes:](v38, "setRxOooBytes:", [v28 unsignedLongLongValue]);
  }

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v4 sendBandwidth]);
  id v31 = v30;
  if (v30) {
    -[_ADPBProxyTCPInfoMetrics setSndBandwidth:](v38, "setSndBandwidth:", [v30 unsignedLongLongValue]);
  }

  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v4 synRetransmits]);
  __int16 v33 = v32;
  if (v32) {
    -[_ADPBProxyTCPInfoMetrics setSynRetransmits:](v38, "setSynRetransmits:", [v32 unsignedIntValue]);
  }

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v4 tfoSynDataAcked]);
  __int128 v35 = v34;
  if (v34) {
    -[_ADPBProxyTCPInfoMetrics setTfoSynDataAcked:](v38, "setTfoSynDataAcked:", [v34 unsignedIntValue]);
  }

  [*(id *)(a1 + 32) addTcpInfoMetrics:v38];
}

void sub_10016DF80(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 timer]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10016E024;
  v7[3] = &unk_1004FD6F0;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 setTimer:v5 completionHandler:v7];
}

void sub_10016E024(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0LL, v3);
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
    }

    id v4 = v7;
  }
}

void sub_10016E118(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10016E190;
  v5[3] = &unk_1004F3938;
  id v4 = *(id *)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a2 getTimerWithCompletionHandler:v5];
}

void sub_10016E190(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v8)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponseWithTimer:v8]);
      (*(void (**)(uint64_t, void *, void))(v6 + 16))(v6, v7, 0LL);
    }

    else
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }
  }
}

void sub_10016E29C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 timerURLs]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10016E340;
  v7[3] = &unk_1004FD6F0;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 dismissTimersWithURLs:v5 completionHandler:v7];
}

void sub_10016E340(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0LL, v3);
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
    }

    id v4 = v7;
  }
}

void sub_10016EE4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_10016F920( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_1001725BC(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v25 objects:v34 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v26;
    *(void *)&__int128 v5 = 136315394LL;
    __int128 v20 = v5;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        int v10 = (os_log_s *)AFSiriLogContextIDS;
        if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v20;
          id v31 = "-[ADPeerCloudService service:devicesChanged:]_block_invoke";
          __int16 v32 = 2112;
          __int16 v33 = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s device: %@", buf, 0x16u);
        }

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "uniqueIDOverride", v20));
        if ([v11 length])
        {
          if (!v11) {
            goto LABEL_14;
          }
        }

        else
        {
          uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 uniqueID]);

          uint64_t v11 = (void *)v12;
          if (!v12) {
            goto LABEL_14;
          }
        }

        -[NSMutableSet addObject:](v2, "addObject:", v11);
LABEL_14:
      }

      id v6 = [v3 countByEnumeratingWithState:&v25 objects:v34 count:16];
    }

    while (v6);
  }

  [*(id *)(*(void *)(a1 + 40) + 80) intersectSet:v2];
  id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v14 = *(id *)(*(void *)(a1 + 40) + 88LL);
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      for (j = 0LL; j != v16; j = (char *)j + 1)
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)j);
      }

      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }

    while (v16);
  }

  [*(id *)(*(void *)(a1 + 40) + 88) removeObjectsForKeys:v13];
}

id sub_100172884(int a1)
{
  else {
    return (id)objc_opt_class(*off_1004F3B20[(unsigned __int16)(a1 - 1)]);
  }
}

void sub_1001728C0(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 56))
  {
    __int128 v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = a2;
    id v8 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", *(void *)(a1 + 48), 0LL);
    [v5 _sendProto:v7 ofType:a3 originalRequestId:v6 toPeers:v8 responseType:0xFFFFLL completion:0];
  }

void sub_10017296C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextIDS;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADPeerCloudService _handleRemoteExecution:peer:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s error executing remote command: %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      (*(void (**)(uint64_t, void, uint64_t, id))(v8 + 16))(v8, 0LL, 0xFFFFLL, v6);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADPeerCloudService _handleRemoteExecution:peer:completion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s got command response: %@",  (uint8_t *)&v11,  0x16u);
    }

    id v9 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceExecuteOnRemoteResponse);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 plistData]);
    -[_ADPBDeviceExecuteOnRemoteResponse setContent:](v9, "setContent:", v10);

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100172B18(uint64_t a1, char a2)
{
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100172C24;
  block[3] = &unk_1004FC188;
  id v7 = v4;
  char v9 = a2;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v5, block);
}

void sub_100172BB0(uint64_t a1)
{
  id v3 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceStartRemoteResponse);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
  -[_ADPBDeviceStartRemoteResponse setSuccess:](v3, "setSuccess:", [v2 BOOLValue]);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100172C24(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  [v2 addObject:v3];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_100172C78(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  id v3 = *(NSMapTable **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue(+[ADPeerCloudService _pointerToBlockMap](&OBJC_CLASS___ADPeerCloudService, "_pointerToBlockMap"));
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 48);
      *(void *)(v5 + 4_Block_object_dispose(va, 8) = v4;

      uint64_t v2 = *(const void **)(a1 + 40);
      id v3 = *(NSMapTable **)(*(void *)(a1 + 32) + 48LL);
    }

    NSMapInsert(v3, *(const void **)(a1 + 48), v2);
  }

  else if (v3)
  {
    NSMapRemove(v3, *(const void **)(a1 + 48));
  }

void sub_100172CF0(id a1, AFRequestInfo *a2, ADPeerInfo *a3, id a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  char v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    id v15 = "-[ADPeerCloudService startListeningForRemote]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@ %@", buf, 0x20u);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100172E44;
  v12[3] = &unk_1004FC6E0;
  id v13 = v8;
  id v11 = v8;
  [v10 handleExternalActivationRequest:v6 completion:v12];
}

uint64_t sub_100172E44(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    id v7 = "-[ADPeerCloudService startListeningForRemote]_block_invoke";
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Request success %d", (uint8_t *)&v6, 0x12u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100172F14(uint64_t a1)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100173040;
  v13[3] = &unk_1004F3A70;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 48);
  id v14 = v2;
  uint64_t v15 = v3;
  id v5 = v4;
  uint64_t v6 = *(void *)(a1 + 72);
  id v16 = v5;
  uint64_t v19 = v6;
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v7 = objc_retainBlock(v13);
  int v8 = AFSupportsAirPlayEndpointRoute(v7);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v8 && *(_BYTE *)(v9 + 72))
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100173190;
    v11[3] = &unk_1004FD990;
    int v10 = v7;
    void v11[4] = *(void *)(a1 + 40);
    id v12 = v10;
    [(id)v9 _updateAirPlayRouteIdentifierWithCompletion:v11];
  }

  else
  {
    ((void (*)(void *, void))v7[2])(v7, *(void *)(v9 + 64));
  }
}

void sub_100173040(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceExecuteOnRemoteRequest);
  -[_ADPBDeviceExecuteOnRemoteRequest setContent:](v4, "setContent:", *(void *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) firstRoutableInternetDestinationForSelf]);
  -[_ADPBDeviceExecuteOnRemoteRequest setSourceIDSFirstRoutableDestination:]( v4,  "setSourceIDSFirstRoutableDestination:",  v5);

  -[_ADPBDeviceExecuteOnRemoteRequest setSourceAirplayId:](v4, "setSourceAirplayId:", v3);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADAccount activeAccount](&OBJC_CLASS___ADAccount, "activeAccount"));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 assistantIdentifier]);
  -[_ADPBDeviceExecuteOnRemoteRequest setAssistantId:](v4, "setAssistantId:", v7);

  int v8 = *(void **)(a1 + 40);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", *(void *)(a1 + 48)));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001731A4;
  v10[3] = &unk_1004F3A48;
  uint64_t v13 = *(void *)(a1 + 72);
  id v11 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 64);
  [v8 _sendProto:v4 ofType:5 toPeers:v9 responseType:6 completion:v10];
}

uint64_t sub_100173190(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 64LL));
}

void sub_1001731A4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = mach_absolute_time();
  uint64_t Milliseconds = AFMachAbsoluteTimeGetMilliseconds(v7);
  uint64_t v9 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = Milliseconds - a1[6];
    id v11 = (void *)a1[4];
    id v12 = v9;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v10));
    *(_DWORD *)buf = 136315906;
    id v31 = "-[ADPeerCloudService startRemoteSerialzedCommandExecution:onPeer:allowsRelay:allowFallbackOnAWDL:executionCont"
          "ext:completion:]_block_invoke_3";
    __int16 v32 = 2112;
    id v33 = v11;
    __int16 v34 = 2112;
    __int128 v35 = v13;
    __int16 v36 = 2112;
    id v37 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s #hal1 (%@,) proto response received in %@ ms, error: %@",  buf,  0x2Au);
  }

  if (v6)
  {
    id v14 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v31 = "-[ADPeerCloudService startRemoteSerialzedCommandExecution:onPeer:allowsRelay:allowFallbackOnAWDL:executionCo"
            "ntext:completion:]_block_invoke";
      __int16 v32 = 2112;
      id v33 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s error: %@", buf, 0x16u);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v15 = v5;
    id v16 = [v15 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v26;
      while (2)
      {
        uint64_t v19 = 0LL;
        do
        {
          if (*(void *)v26 != v18) {
            objc_enumerationMutation(v15);
          }
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v25 + 1) + 8 * (void)v19), "proto", (void)v25));
          __int128 v21 = v20;
          if (v20 && [v20 hasContent])
          {
            __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 content]);
            __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithPlistData:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithPlistData:",  v23));

            (*(void (**)(void))(a1[5] + 16LL))();
            goto LABEL_18;
          }

          uint64_t v19 = (char *)v19 + 1;
        }

        while (v17 != v19);
        id v17 = [v15 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v17) {
          continue;
        }
        break;
      }
    }

    uint64_t v22 = a1[5];
    id v15 = (id)objc_claimAutoreleasedReturnValue( +[ADPeerCloudService _unexpectedMessageError]( &OBJC_CLASS___ADPeerCloudService,  "_unexpectedMessageError"));
    (*(void (**)(uint64_t, void, id))(v22 + 16))(v22, 0LL, v15);
LABEL_18:
  }
}

uint64_t sub_100173494(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 allValues]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
  [v4 BOOLValue];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001734F0(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceStartRemoteRequest);
  -[_ADPBDeviceStartRemoteRequest _ad_setRequestInfo:](v2, "_ad_setRequestInfo:", *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100173598;
  v5[3] = &unk_1004F3A20;
  id v6 = *(id *)(a1 + 56);
  [v3 _sendProto:v2 ofType:3 toPeers:v4 responseType:4 completion:v5];
}

void sub_100173598(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = (os_log_s *)AFSiriLogContextIDS;
  if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    __int128 v25 = "-[ADPeerCloudService _startRemoteRequest:onPeers:completion:]_block_invoke_2";
    __int16 v26 = 2112;
    id v27 = v4;
    __int16 v28 = 2114;
    id v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s %@ %{public}@", buf, 0x20u);
  }

  uint64_t v7 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v4 count]);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v8 = v4;
  id v9 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v20 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 proto]);
        id v15 = v14;
        if (v14)
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v14 success]));
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 peer]);
          -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v16, v17);
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v10);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001737C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100173918;
  block[3] = &unk_1004FD4C0;
  id v8 = v4;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10017386C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
    id v2 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceSetDataRequest);
    -[_ADPBDeviceSetDataRequest _ad_setData:](v2, "_ad_setData:", v4);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[ADPeerCloudService _unexpectedMessageError]( &OBJC_CLASS___ADPeerCloudService,  "_unexpectedMessageError"));
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, 0LL, 0xFFFFLL);
  }
}

void sub_100173918(uint64_t a1)
{
}

void sub_100173944(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 40);
  uint64_t v3 = *(NSMapTable **)(*(void *)(a1 + 32) + 40LL);
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue(+[ADPeerCloudService _pointerToBlockMap](&OBJC_CLASS___ADPeerCloudService, "_pointerToBlockMap"));
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      id v2 = *(const void **)(a1 + 40);
      uint64_t v3 = *(NSMapTable **)(*(void *)(a1 + 32) + 40LL);
    }

    NSMapInsert(v3, *(const void **)(a1 + 48), v2);
  }

  else if (v3)
  {
    NSMapRemove(v3, *(const void **)(a1 + 48));
  }

void sub_1001739BC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceGetDataRequest);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100173A60;
  v5[3] = &unk_1004F39D0;
  void v5[4] = v3;
  id v6 = *(id *)(a1 + 48);
  [v3 _sendProto:v2 ofType:2 toPeers:v4 responseType:1 completion:v5];
}

void sub_100173A60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextIDS;
    if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v32 = "-[ADPeerCloudService getSharedDataFromPeers:completion:]_block_invoke_2";
      __int16 v33 = 2114;
      id v34 = v6;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s %{public}@", buf, 0x16u);
    }
  }

  __int128 v24 = v6;
  id v8 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v5 count]);
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id obj = v5;
  id v9 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v27;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v27 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "proto", v24));
        if (v14)
        {
          id v15 = *(void **)(a1 + 32);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 peer]);
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 _uniqueIdentifierForPeer:v16]);

          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 assistantId]);
          if (v18)
          {
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[ADDeviceCircleManager sharedInstance]( &OBJC_CLASS___ADDeviceCircleManager,  "sharedInstance"));
            [v19 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v17];
          }

          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "_ad_data"));
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v13 peer]);
          -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v20, v21);
        }
      }

      id v10 = [obj countByEnumeratingWithState:&v26 objects:v30 count:16];
    }

    while (v10);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100173CFC(uint64_t a1)
{
  id v2 = *(const void **)(a1 + 40);
  uint64_t v3 = *(NSMapTable **)(*(void *)(a1 + 32) + 32LL);
  if (v2)
  {
    if (!v3)
    {
      uint64_t v4 = objc_claimAutoreleasedReturnValue(+[ADPeerCloudService _pointerToBlockMap](&OBJC_CLASS___ADPeerCloudService, "_pointerToBlockMap"));
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = *(void **)(v5 + 32);
      *(void *)(v5 + 32) = v4;

      id v2 = *(const void **)(a1 + 40);
      uint64_t v3 = *(NSMapTable **)(*(void *)(a1 + 32) + 32LL);
    }

    NSMapInsert(v3, *(const void **)(a1 + 48), v2);
  }

  else if (v3)
  {
    NSMapRemove(v3, *(const void **)(a1 + 48));
  }

void sub_100173D74(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceSetDataRequest);
  -[_ADPBDeviceSetDataRequest _ad_setData:](v2, "_ad_setData:", *(void *)(a1 + 32));
  [*(id *)(a1 + 40) _sendProto:v2 ofType:1 toPeers:*(void *)(a1 + 48)];
}

void sub_100173DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100173E58;
  block[3] = &unk_1004FD9E0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_100173E58(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 64LL);
  if (v3 == v2 || (objc_msgSend(v3, "isEqualToString:") & 1) != 0)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      id v10 = "-[ADPeerCloudService _updateAirPlayRouteIdentifierWithCompletion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s AirPlay route did not change",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    id v5 = [*(id *)(a1 + 40) copy];
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 64);
    *(void *)(v6 + 64) = v5;
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = 0;
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100173F4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAirPlayRouteIdentifierWithCompletion:0];
}

void sub_100173F58(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id obj = (id)objc_claimAutoreleasedReturnValue([v2 companionIdentifier]);

  id v3 = obj;
  id v4 = *(id *)(*(void *)(a1 + 32) + 56LL);
  if (v4 != obj)
  {
    unsigned __int8 v5 = [v4 isEqualToString:obj];
    id v3 = obj;
    if ((v5 & 1) == 0)
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 56LL), obj);
      id v3 = obj;
    }
  }
}

uint64_t sub_100173FD4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100173FE4(uint64_t a1)
{
}

void sub_100173FEC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cachedSharedDataForUniqueId:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100174028(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _peerInfoForAssistantId:*(void *)(a1 + 40) allowNonPeers:*(unsigned __int8 *)(a1 + 56)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100174068(uint64_t a1, uint64_t a2)
{
  if (AFIsHorseman(a1, a2))
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 56LL);
    if (v3)
    {
      id v4 = [v3 copy];
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;
    }
  }

void sub_1001740B8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _companionPeer]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001740F0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _peerInfoForIDSDeviceUniqueIdentifier:*(void *)(a1 + 40) allowNonPeers:*(unsigned __int8 *)(a1 + 56)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100174130(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _uniqueIdentifierForPeer:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10017416C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _peers]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001741A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService _timedOutError](&OBJC_CLASS___ADPeerCloudService, "_timedOutError"));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v2 _handleMessageResponse:0 ofType:0xFFFFLL orError:v4 fromID:0 handler:WeakRetained];
}

void sub_100174210(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    __int16 v38 = "-[ADPeerCloudService _init]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Begin setting up IDS service.", buf, 0xCu);
  }

  uint64_t v3 = -[IDSService initWithService:]( objc_alloc(&OBJC_CLASS___IDSService),  "initWithService:",  @"com.apple.private.alloy.siri.icloud");
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = v3;

  [*(id *)(*(void *)(a1 + 32) + 16) addDelegate:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 32) + 8)];
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(*(void *)(a1 + 32) + 16LL);
    *(_DWORD *)buf = 136315394;
    __int16 v38 = "-[ADPeerCloudService _init]_block_invoke";
    __int16 v39 = 2112;
    __int16 v40 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s End setting up IDS service %@.", buf, 0x16u);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) devices]);
  int v9 = (os_log_s *)AFSiriLogContextIDS;
  if (os_log_type_enabled(AFSiriLogContextIDS, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v38 = "-[ADPeerCloudService _init]_block_invoke";
    __int16 v39 = 2112;
    __int16 v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
  }

  id v10 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 80);
  *(void *)(v11 + 80) = v10;

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v13 = v8;
  id v14 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v33;
    do
    {
      id v17 = 0LL;
      do
      {
        if (*(void *)v33 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)v17);
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 uniqueIDOverride]);
        if ([v19 length])
        {
          if (!v19) {
            goto LABEL_15;
          }
LABEL_14:
          [*(id *)(*(void *)(a1 + 32) + 80) addObject:v19];
          goto LABEL_15;
        }

        uint64_t v20 = objc_claimAutoreleasedReturnValue([v18 uniqueID]);

        __int128 v19 = (void *)v20;
        if (v20) {
          goto LABEL_14;
        }
LABEL_15:

        id v17 = (char *)v17 + 1;
      }

      while (v15 != v17);
      id v21 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
      id v15 = v21;
    }

    while (v21);
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v23 = objc_claimAutoreleasedReturnValue([v22 companionIdentifier]);
  uint64_t v24 = *(void *)(a1 + 32);
  __int128 v25 = *(void **)(v24 + 56);
  *(void *)(v24 + 56) = v23;

  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  if (AFSupportsAirPlayEndpointRoute( [v26 addObserver:*(void *)(a1 + 32) selector:"_companionIdentifierDidChangeNotification:" name:@"ADPreferencesCompanionIdentifierDidChangeNotification" object:0]))
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = 1;
    [v26 addObserver:*(void *)(a1 + 32) selector:"_airplayRouteDidChange:" name:AFMediaRemoteDeviceInfoRouteIdentifierDidChangeNotification object:0];
  }

  [*(id *)(a1 + 32) _updateActiveAccountState];
  id v27 = *(id *)(*(void *)(a1 + 32) + 8LL);
  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[ADQueueMonitor sharedMonitor](&OBJC_CLASS___ADQueueMonitor, "sharedMonitor"));
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_1001745F0;
  v30[3] = &unk_1004FBBD0;
  id v31 = v27;
  id v29 = v27;
  [v28 addQueue:v29 heartBeatInterval:v30 timeoutInterval:5.0 timeoutHandler:5.0];
}

void sub_1001745F0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)buf = 136315394;
    id v8 = "-[ADPeerCloudService _init]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1001748BC(id a1)
{
  id v1 = -[ADPeerCloudService _init](objc_alloc(&OBJC_CLASS___ADPeerCloudService), "_init");
  uint64_t v2 = (void *)qword_100577F88;
  qword_100577F88 = (uint64_t)v1;
}

LABEL_63:
    id v58 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 4 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v4");
    if ((sub_1002734D8(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_67;
      }
LABEL_79:
      os_signpost_id_t v68 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 5 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v5");
      if ((sub_100273564(v29, v24) & 1) != 0) {
        goto LABEL_82;
      }
      goto LABEL_86;
    }

      uint64_t v22 = v69;
      uint64_t v23 = 0LL;
      uint64_t v24 = 0;
LABEL_64:

      goto LABEL_30;
    }

    LODWORD(v79) = *(_DWORD *)&inPropertyData[24];
    uint64_t v83 = (*(double *)inPropertyData * (double)v79 * v7);
    uint64_t v84 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      buf.mNumberBuffers = 136315394;
      *(void *)(&buf.mNumberBuffers + 1) = "ADAudioFileTrim";
      LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
      *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = v83;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "%s dataByteSize = %u",  (uint8_t *)&buf,  0x12u);
    }

    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](&OBJC_CLASS___NSMutableData, "dataWithLength:", v83));
    buf.mNumberBuffers = 1;
    buf.mBuffers[0].mNumberChannels = 1;
    buf.mBuffers[0].mDataByteSize = v83;
    v86 = v85;
    buf.mBuffers[0].mData = [v86 mutableBytes];
    id v87 = (*(double *)inPropertyData * v7);
    ioNumberFrames = v87;
    id v88 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id v124 = 136315394;
      id v125 = "ADAudioFileTrim";
      id v126 = 1024;
      LODWORD(v127) = v87;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "%s numberOfFrames = %u (read)",  v124,  0x12u);
    }

    v89 = ExtAudioFileRead(outExtAudioFile, &ioNumberFrames, &buf);
    if ((_DWORD)v89)
    {
      id v90 = v89;
      id v113 = v86;
      id v91 = objc_alloc(&OBJC_CLASS___NSString);
      id v92 = -[NSString initWithFormat:]( v91,  "initWithFormat:",  @"ExtAudioFileRead() failed to read %u frames from input audio file. (status = %d)",  ioNumberFrames,  v90);
      id v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  (int)v90,  0LL));
      id v94 = (NSURL *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v92,  v93));

      id v95 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR)) {
        goto LABEL_87;
      }
      goto LABEL_77;
    }

    id v96 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id v124 = 136315394;
      id v125 = "ADAudioFileTrim";
      id v126 = 1024;
      LODWORD(v127) = ioNumberFrames;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEBUG,  "%s numberOfFrames = %u (write)",  v124,  0x12u);
    }

    id v97 = ExtAudioFileWrite(inExtAudioFile, ioNumberFrames, &buf);
    if ((_DWORD)v97)
    {
      id v98 = v97;
      id v113 = v86;
      id v99 = objc_alloc(&OBJC_CLASS___NSString);
      id v100 = -[NSString initWithFormat:]( v99,  "initWithFormat:",  @"ExtAudioFileWrite() failed to write %u frames to output audio file. (status = %d)",  ioNumberFrames,  v98);
      v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  (int)v98,  0LL));
      id v94 = (NSURL *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  226LL,  v100,  v101));

      id v95 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
LABEL_87:
        *(_DWORD *)id v124 = 136315394;
        id v125 = "ADAudioFileTrim";
        id v126 = 2112;
        id v127 = v94;
        _os_log_error_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "%s error = %@", v124, 0x16u);
      }

  id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txUnacked));
  [v3 setObject:v37 forKey:@"tx_unacked"];

  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_17:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }

  PBDataWriterWriteUint64Field(v5, self->_rxBytes, 31LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }

  v4[8] = self->_sndBandwidth;
  *((_DWORD *)v4 + 53) |= 0x80u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x1000000) == 0)
  {
LABEL_22:
    if ((*(_DWORD *)&has & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_65;
  }

  __int128 v34 = 0LL;
LABEL_64:
  v51 = v18;
  if ((*(_WORD *)&has & 0x4000) != 0) {
    __int128 v19 = -[NSString hash](self->_primarySubflowIface, "hash", 2654435761LL * self->_connectedSubflowCount);
  }
  else {
    __int128 v19 = -[NSString hash](self->_primarySubflowIface, "hash", 0LL);
  }
  uint64_t v20 = v19;
  if ((*((_BYTE *)&self->_has + 2) & 4) != 0) {
    id v21 = 2654435761LL * self->_primarySubflowSwitchCount;
  }
  else {
    id v21 = 0LL;
  }
  uint64_t v22 = -[NSString hash](self->_connectionMethodName, "hash");
  uint64_t v23 = -[NSString hash](self->_connectionEdgeIDName, "hash");
  uint64_t v24 = -[NSString hash](self->_connectionEdgeType, "hash");
  __int128 v25 = self->_has;
  if ((*(_WORD *)&v25 & 0x8000) != 0)
  {
    __int128 v26 = 2654435761LL * self->_connectionFallbackReason;
    if ((*(_WORD *)&v25 & 0x100) != 0) {
      goto LABEL_72;
    }
LABEL_77:
    id v31 = 0LL;
    return v9 ^ v4 ^ v53 ^ v52 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v21 ^ v20 ^ v22 ^ v23 ^ v24 ^ v26 ^ v31 ^ (unint64_t)-[NSMutableArray hash](self->_tcpInfoMetrics, "hash");
  }

  __int128 v26 = 0LL;
  if ((*(_WORD *)&v25 & 0x100) == 0) {
    goto LABEL_77;
  }
LABEL_72:
  tuscanyConnectionDelay = self->_tuscanyConnectionDelay;
  __int128 v28 = -tuscanyConnectionDelay;
  if (tuscanyConnectionDelay >= 0.0) {
    __int128 v28 = self->_tuscanyConnectionDelay;
  }
  id v29 = floor(v28 + 0.5);
  __int16 v30 = (v28 - v29) * 1.84467441e19;
  id v31 = 2654435761u * (unint64_t)fmod(v29, 1.84467441e19);
  if (v30 >= 0.0)
  {
    if (v30 > 0.0) {
      v31 += (unint64_t)v30;
    }
  }

  else
  {
    v31 -= (unint64_t)fabs(v30);
  }

  return v9 ^ v4 ^ v53 ^ v52 ^ v51 ^ v50 ^ v49 ^ v48 ^ v47 ^ v46 ^ v45 ^ v44 ^ v43 ^ v42 ^ v41 ^ v40 ^ v39 ^ v38 ^ v37 ^ v36 ^ v35 ^ v34 ^ v33 ^ v21 ^ v20 ^ v22 ^ v23 ^ v24 ^ v26 ^ v31 ^ (unint64_t)-[NSMutableArray hash](self->_tcpInfoMetrics, "hash");
}

  self->_rxBytes = *((void *)v4 + 4);
  *(_DWORD *)&self->_has |= 8u;
  int v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x10) == 0)
  {
LABEL_19:
    if ((v6 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }

  if (v54)
  {
    id v58 = -[NSSet initWithArray:](objc_alloc(&OBJC_CLASS___NSSet), "initWithArray:", v54);
    -[ADService setManagedStorageDomains:](self, "setManagedStorageDomains:", v58);
  }

LABEL_71:
    uint64_t v63 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 5 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v5");
    if ((sub_100273564(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_75;
      }
LABEL_82:
      v69 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 6 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v6");
      if ((sub_1002737B0(v29, v24) & 1) != 0) {
        goto LABEL_102;
      }
      goto LABEL_94;
    }

  v65 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser companionAssistantID](self->_deviceOwner, "companionAssistantID"));
  v66 = (void *)objc_claimAutoreleasedReturnValue([v18 assistantID]);
  v67 = v65;
  os_signpost_id_t v68 = v66;
  v69 = v68;
  if (v67 == v68)
  {
    v70 = 1;
  }

  else
  {
    v70 = 0;
    if (v67 && v68) {
      v70 = [v67 isEqual:v68];
    }
  }

  if ((v70 & 1) == 0)
  {
    v71 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "%s Updating companion assistantID", buf, 0xCu);
    }

    uint64_t v72 = self->_deviceOwner;
    v73 = (void *)objc_claimAutoreleasedReturnValue([v18 assistantID]);
    -[ADCommunalDeviceUser setCompanionAssistantID:](v72, "setCompanionAssistantID:", v73);
  }

  v74 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser companionIDSIdentifier](self->_deviceOwner, "companionIDSIdentifier"));
  v75 = (void *)objc_claimAutoreleasedReturnValue([v18 idsIdentifier]);
  uint64_t v76 = v74;
  uint64_t v77 = v75;
  if (v76 == v77)
  {

LABEL_90:
    goto LABEL_91;
  }

  uint64_t v78 = v77;
  if (!v76 || !v77)
  {

    goto LABEL_87;
  }

  uint64_t v79 = [v76 isEqual:v77];

  if ((v79 & 1) == 0)
  {
LABEL_87:
    uint64_t v80 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "%s Updating companion IDSIdentifier", buf, 0xCu);
    }

    uint64_t v81 = self->_deviceOwner;
    uint64_t v76 = (id)objc_claimAutoreleasedReturnValue([v18 idsIdentifier]);
    -[ADCommunalDeviceUser setCompanionIDSIdentifier:](v81, "setCompanionIDSIdentifier:", v76);
    id v21 = 1;
    goto LABEL_90;
  }

    os_signpost_id_t v68 = (os_log_s *)AFSiriLogContextDaemon;
    __int16 v42 = v102;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      id v127 = "-[ADCloudKitKeyValueDataStore synchronizeWithCompletion:]";
      id v128 = 2112;
      v129 = v44;
      v130 = 2112;
      __int16 v131 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 2 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v108, "setObject:forKey:", v54, @"Output Voice v2");
    if ((sub_100273F08(v51, v44) & 1) != 0)
    {
      if (v104) {
        goto LABEL_75;
      }
LABEL_87:
      uint64_t v80 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        id v127 = "-[ADCloudKitKeyValueDataStore synchronizeWithCompletion:]";
        id v128 = 2112;
        v129 = v44;
        v130 = 2112;
        __int16 v131 = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 3 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v108, "removeObjectForKey:", @"Output Voice v3");
      if ((sub_100273358(v51, v44) & 1) != 0) {
        goto LABEL_90;
      }
      goto LABEL_94;
    }

LABEL_86:
    v70 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 6 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v6");
    if ((sub_1002737B0(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_90;
      }
LABEL_102:
      uint64_t v80 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 7 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v7");
      if ((sub_10027383C(v29, v24) & 1) != 0) {
        goto LABEL_105;
      }
      goto LABEL_109;
    }

LABEL_94:
    v75 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 7 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v7");
    if ((sub_10027383C(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_98;
      }
LABEL_105:
      uint64_t v81 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 8 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v8");
      if ((sub_100273904(v29, v24) & 1) != 0) {
        goto LABEL_125;
      }
      goto LABEL_117;
    }

  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"AssistantMaintenance"]);
  uint64_t v85 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v84, v85) & 1) != 0)
  {
    v86 = v84;
    if (!v84) {
      goto LABEL_101;
    }
  }

  else
  {
    v86 = 0LL;
    if (!v84) {
      goto LABEL_101;
    }
  }

  if (!v86)
  {
    id v87 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v93 = v87;
      id v94 = (void *)objc_claimAutoreleasedReturnValue(-[ADService identifier](self, "identifier"));
      *(_DWORD *)buf = 136315650;
      __int16 v131 = "-[ADBundleService _parseInfoDictionary:]";
      id v132 = 2114;
      __int16 v133 = @"AssistantMaintenance";
      uint64_t v134 = 2114;
      v135 = v94;
      _os_log_error_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_ERROR,  "%s Malformed info plist value for key %{public}@ in bundle %{public}@",  buf,  0x20u);
    }
  }

    uint64_t v82 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      id v127 = "-[ADCloudKitKeyValueDataStore synchronizeWithCompletion:]";
      id v128 = 2112;
      v129 = v44;
      v130 = 2112;
      __int16 v131 = v51;
      _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 4 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v108, "setObject:forKey:", v54, @"Output Voice v4");
    if ((sub_1002734D8(v51, v44) & 1) != 0)
    {
      if (v104)
      {
LABEL_98:
        uint64_t v83 = v48;
        uint64_t v84 = sub_1002740A8(v44);
        uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
        v86 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          id v127 = "-[ADCloudKitKeyValueDataStore synchronizeWithCompletion:]";
          id v128 = 2112;
          v129 = v44;
          v130 = 2112;
          __int16 v131 = v85;
          _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_INFO,  "%s Synching default voice for version 5 sync clients (%@) : %@",  buf,  0x20u);
        }

        id v87 = (void *)objc_claimAutoreleasedReturnValue([v85 dictionaryRepresentation]);
        -[NSMutableDictionary setObject:forKey:](v108, "setObject:forKey:", v87, @"Output Voice v5");

        v48 = v83;
        v54 = (void *)v52;
LABEL_107:

        unsigned int v45 = v103;
LABEL_108:

        goto LABEL_109;
      }

              id v55 = v34;
              goto LABEL_107;
            }

            v54 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
              v242 = 2112;
              v243 = v37;
              _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "%s Record is missing a modification date : (%@)",  buf,  0x16u);
            }

            if (v34 == v49) {
              goto LABEL_94;
            }
            id v55 = v49;
            v56 = self->_localKeychainPreferenceCache;
            if (v34) {
              -[NSMutableDictionary setObject:forKey:](v56, "setObject:forKey:", v34, v37);
            }
            else {
              -[NSMutableDictionary removeObjectForKey:](v56, "removeObjectForKey:", v37);
            }
            modificationDateCache = self->_modificationDateCache;
            v65 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);
            -[NSMutableDictionary setObject:forKey:](modificationDateCache, "setObject:forKey:", v65, v37);

            v198 = 1;
            v184 = 1;
LABEL_111:
            unsigned int v45 = 0LL;
            id v55 = v49;
            uint64_t v18 = v188;
LABEL_108:

LABEL_39:
            goto LABEL_40;
          }

          id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_localPreferenceCache, "objectForKey:", v37));
          if (!v45)
          {
            __int128 v62 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
              v242 = 2112;
              v243 = v37;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_INFO,  "%s Record is missing a local modification date : (%@)",  buf,  0x16u);
            }

            if (v34 == v49) {
              goto LABEL_94;
            }
            id v55 = v49;
            if (v34)
            {
              -[NSMutableDictionary setObject:forKey:](v190, "setObject:forKey:", v34, v37);
            }

            else
            {
              v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              -[NSMutableDictionary setObject:forKey:](v190, "setObject:forKey:", v69, v37);
            }

            v70 = self->_modificationDateCache;
            v71 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);
            -[NSMutableDictionary setObject:forKey:](v70, "setObject:forKey:", v71, v37);

            v198 = 1;
            goto LABEL_111;
          }

          id v57 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);

          if (v57)
          {
            id v58 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);
            v185 = v45;
            __int128 v59 = [v58 compare:v45];

            if (v59 == (id)1)
            {
              if (v34 != v49 && (sub_1002747C4(v34, v49, v37) & 1) == 0)
              {
                if (v34)
                {
                  -[NSMutableDictionary setObject:forKey:](v190, "setObject:forKey:", v34, v37);
                }

                else
                {
                  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
                  -[NSMutableDictionary setObject:forKey:](v190, "setObject:forKey:", v72, v37);
                }
              }

LABEL_109:
    uint64_t v82 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 8 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v8");
    if ((sub_100273904(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_113;
      }
LABEL_125:
      id v92 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 9 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v9");
      if ((sub_100273BC4(v29, v24) & 1) != 0) {
        goto LABEL_128;
      }
      goto LABEL_132;
    }

LABEL_117:
    id v87 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 9 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v9");
    if ((sub_100273BC4(v29, v24) & 1) != 0)
    {
      if (v18) {
        goto LABEL_121;
      }
LABEL_128:
      id v93 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 10 voice for language (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v10");
      if ((sub_100273C50(v29, v24) & 1) != 0)
      {
LABEL_149:
        id v110 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
          v130 = 2112;
          __int16 v131 = v24;
          id v132 = 2112;
          __int16 v133 = (AFVoiceInfo *)v29;
          _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_INFO,  "%s Skipping sync of version 11 voice for language (%@) : %@",  buf,  0x20u);
        }

        -[NSMutableDictionary removeObjectForKey:](v8, "removeObjectForKey:", @"Output Voice v11");
LABEL_152:
        __int16 v38 = v118;
LABEL_153:

LABEL_154:
LABEL_155:
        uint64_t v3 = v120;
        if (-[NSMutableDictionary count](v8, "count"))
        {
          id v111 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v8, "allKeys"));
          id v112 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315394;
            v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
            v130 = 2112;
            __int16 v131 = v111;
            _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_INFO, "%s Saving keys: %@", buf, 0x16u);
          }

          id v113 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
          v121[0] = _NSConcreteStackBlock;
          v121[1] = 3221225472LL;
          v121[2] = sub_100176FAC;
          v121[3] = &unk_1004FCEC0;
          id v122 = v111;
          v114 = v111;
          [v113 saveKeyValueRecordsWithDictionary:v8 mirror:1 completion:v121];
        }

        goto LABEL_159;
      }

LABEL_146:
      id v109 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
        v130 = 2112;
        __int16 v131 = v24;
        id v132 = 2112;
        __int16 v133 = (AFVoiceInfo *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 11 sync clients as well (%@) : %@",  buf,  0x20u);
      }

      -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v11");
      goto LABEL_152;
    }

LABEL_132:
    id v94 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
      v130 = 2112;
      __int16 v131 = v24;
      id v132 = 2112;
      __int16 v133 = (AFVoiceInfo *)v29;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_INFO,  "%s Synching voice for version 10 sync clients as well (%@) : %@",  buf,  0x20u);
    }

    -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v36, @"Output Voice v10");
    if ((sub_100273C50(v29, v24) & 1) != 0)
    {
      if (v18)
      {
LABEL_136:
        v116 = v22;
        id v95 = sub_100274684(v24);
        id v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
        id v97 = (uint64_t)[v96 gender];
        id v115 = [v96 isCustom];
        id v98 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
        id v99 = (void *)objc_claimAutoreleasedReturnValue([v96 languageCode]);
        id v100 = (void *)objc_claimAutoreleasedReturnValue([v98 voiceNamesForOutputLanguageCode:v99 gender:v97]);
        v101 = (__CFString *)objc_claimAutoreleasedReturnValue([v100 firstObject]);

        id v102 = (void *)objc_claimAutoreleasedReturnValue([v96 languageCode]);
        LODWORD(v99) = [v102 isEqualToString:@"zh-CN"];

        if ((_DWORD)v99)
        {

          uint64_t v103 = v97 == 1;
          if (v97 == 1) {
            id v97 = 1LL;
          }
          else {
            id v97 = 2LL;
          }
          if (v103) {
            v101 = @"li-mu";
          }
          else {
            v101 = @"linfei";
          }
        }

        id v104 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
        id v105 = (void *)objc_claimAutoreleasedReturnValue([v96 languageCode]);
        id v106 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v104,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v105,  v97,  v115,  v101,  0LL,  0LL,  0LL);

        id v107 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          v129 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]";
          v130 = 2112;
          __int16 v131 = v24;
          id v132 = 2112;
          __int16 v133 = v106;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_INFO,  "%s Synching default voice for version 11 sync clients (%@) : %@",  buf,  0x20u);
        }

        id v108 = (void *)objc_claimAutoreleasedReturnValue(-[AFVoiceInfo dictionaryRepresentation](v106, "dictionaryRepresentation"));
        -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v108, @"Output Voice v11");

        uint64_t v22 = v116;
        __int16 v38 = v118;
        __int16 v36 = v119;
        goto LABEL_153;
      }

      goto LABEL_149;
    }

    goto LABEL_146;
  }

        uint64_t v78 = (char *)v78 + 1;
      }

      while (v76 != v78);
      uint64_t v84 = [v196 countByEnumeratingWithState:&v223 objects:v237 count:16];
      uint64_t v76 = v84;
    }

    while (v84);
  }

  uint64_t v85 = v188;
  if ((v184 & 1) != 0)
  {
    v86 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_INFO, "%s Saving sharedUserIdentifier...", buf, 0xCu);
    }

    id v87 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_localKeychainPreferenceCache,  "objectForKey:",  @"User Identifier"));
    id v88 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_localKeychainPreferenceCache,  "objectForKey:",  @"Logging User Identifier"));
    v89 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v89 ignoreNextNotification:@"ADPreferencesSharedUserIdentifierDidChangeNotification"];

    [v191 setSharedUserIdentifier:v87 loggingSharedUserIdentifier:v88];
  }

  if (v183)
  {
    v221 = 0u;
    v222 = 0u;
    v219 = 0u;
    v220 = 0u;
    id v90 = v201;
    id v91 = [v90 countByEnumeratingWithState:&v219 objects:v236 count:16];
    id v92 = v191;
    if (!v91) {
      goto LABEL_157;
    }
    id v93 = v91;
    id v94 = *(void *)v220;
    while (1)
    {
      for (i = 0LL; i != v93; i = (char *)i + 1)
      {
        if (*(void *)v220 != v94) {
          objc_enumerationMutation(v90);
        }
        id v96 = *(void **)(*((void *)&v219 + 1) + 8LL * (void)i);
        if ([v96 isEqualToString:@"User Identifier"])
        {
          id v97 = objc_claimAutoreleasedReturnValue([v92 sharedUserIdentifier]);
        }

        else
        {
          if (![v96 isEqualToString:@"Logging User Identifier"])
          {
            id v98 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_localPreferenceCache, "objectForKey:", v96));
            goto LABEL_154;
          }

          id v97 = objc_claimAutoreleasedReturnValue([v92 loggingSharedUserIdentifier]);
        }

        id v98 = (void *)v97;
        if (!v97)
        {
          id v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          -[NSMutableDictionary setObject:forKey:](log, "setObject:forKey:", v99, v96);

          id v92 = v191;
          goto LABEL_155;
        }

LABEL_159:
  if (v3) {
    v3[2](v3, 1LL);
  }
}

void sub_100176E98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315394;
      uint64_t v11 = "-[ADCloudKitKeyValueMirroredStore synchronizeKeychainPreferencesWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to save mirror keys: %@",  (uint8_t *)&v10,  0x16u);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v8 handleCloudKitError:v5 forZone:@"com.apple.assistant.backedup" mirror:1 operationType:2];
  }
}

void sub_100176FAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315394;
      uint64_t v11 = "-[ADCloudKitKeyValueMirroredStore synchronizeWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to save mirror keys: %@",  (uint8_t *)&v10,  0x16u);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v8 handleCloudKitError:v5 forZone:@"com.apple.assistant.backedup" mirror:1 operationType:2];
  }
}

uint64_t sub_1001770C0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)qword_100577FA0;
  if (!qword_100577FA0)
  {
    uint64_t v47 = objc_opt_class(&OBJC_CLASS___SAAceDomainSignal);
    uint64_t v46 = objc_opt_class(&OBJC_CLASS___SAAddResultObjects);
    uint64_t v45 = objc_opt_class(&OBJC_CLASS___SACancelSucceeded);
    uint64_t v44 = objc_opt_class(&OBJC_CLASS___SAClientSetupInfo);
    uint64_t v43 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
    uint64_t v42 = objc_opt_class(&OBJC_CLASS___SACommandIgnored);
    uint64_t v41 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
    uint64_t v40 = objc_opt_class(&OBJC_CLASS___SADeviceConfiguration);
    uint64_t v39 = objc_opt_class(&OBJC_CLASS___SADeviceMyriadConfiguration);
    uint64_t v38 = objc_opt_class(&OBJC_CLASS___SAExecuteCallbacks);
    uint64_t v37 = objc_opt_class(&OBJC_CLASS___SAGetRequestOrigin);
    uint64_t v36 = objc_opt_class(&OBJC_CLASS___SASetClientData);
    uint64_t v35 = objc_opt_class(&OBJC_CLASS___SAWaitForCommands);
    uint64_t v34 = objc_opt_class(&OBJC_CLASS___SAGetAssistantData);
    uint64_t v33 = objc_opt_class(&OBJC_CLASS___SACFSignal);
    uint64_t v32 = objc_opt_class(&OBJC_CLASS___SAIntentGroupIntentSignal);
    uint64_t v31 = objc_opt_class(&OBJC_CLASS___SAIntentGroupSiriKitClearContext);
    uint64_t v30 = objc_opt_class(&OBJC_CLASS___SAIntentGroupSiriKitPluginSignal);
    uint64_t v29 = objc_opt_class(&OBJC_CLASS___SAMPMusicPlaybackImminent);
    uint64_t v28 = objc_opt_class(&OBJC_CLASS___SASAbortSpeechRequest);
    uint64_t v27 = objc_opt_class(&OBJC_CLASS___SASClientBoundConfusionNetwork);
    uint64_t v26 = objc_opt_class(&OBJC_CLASS___SASConfirmEndpoint);
    uint64_t v25 = objc_opt_class(&OBJC_CLASS___SASResultCandidate);
    uint64_t v24 = objc_opt_class(&OBJC_CLASS___SASMUXResultCandidate);
    uint64_t v23 = objc_opt_class(&OBJC_CLASS___SASSpeechFailure);
    uint64_t v22 = objc_opt_class(&OBJC_CLASS___SASSpeechPartialResult);
    uint64_t v21 = objc_opt_class(&OBJC_CLASS___SASSpeechRecognized);
    uint64_t v20 = objc_opt_class(&OBJC_CLASS___SASSpeechServerEndpointIdentified);
    uint64_t v19 = objc_opt_class(&OBJC_CLASS___SASSuspendClientEndpointer);
    uint64_t v18 = objc_opt_class(&OBJC_CLASS___SASServerEndpointFeatures);
    uint64_t v17 = objc_opt_class(&OBJC_CLASS___SASVoiceIdentificationSignal);
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___SASyncChunk);
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___SASyncChunkAccepted);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___SASyncChunkDenied);
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___SASyncClientVerify);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___SASyncFinished);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___SASyncGetAnchorsResponse);
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___SASyncGetCachedSyncAnchors);
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___SASyncGetAnchors);
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___SASyncServerVerifyResponse);
    __int16 v12 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v47,  v46,  v45,  v44,  v43,  v42,  v41,  v40,  v39,  v38,  v37,  v36,  v35,  v34,  v33,  v32,  v31,  v30,  v29,  v28,  v27,  v26,  v25,  v24,  v23,  v22,  v21,  v20,  v19,  v18,  v17,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  objc_opt_class(&OBJC_CLASS___SASyncSetDeepSyncVerificationNeeded),  0LL);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
    id v14 = (void *)qword_100577FA0;
    qword_100577FA0 = v13;

    uint64_t v2 = (void *)qword_100577FA0;
  }

  uint64_t v15 = [v2 containsObject:objc_opt_class(v1)] ^ 1;

  return v15;
}

void sub_100178AB4(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointUUID]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "objectForKey:"));
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) objectForKey:v2]);
    [v3 removeObject:v4];
  }

  [*(id *)(*(void *)(a1 + 40) + 24) removeObjectForKey:v4];
}

void sub_100178B48(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, AFRemoraActiveLanguagesChangedNotification, 0LL, 0LL, 1u);
}

void sub_100178B84(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSMutableSet);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) allKeys]);
  uint64_t v6 = -[NSMutableSet initWithArray:](v2, "initWithArray:", v3);

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 languageCode]);
  -[NSMutableSet addObject:](v6, "addObject:", v5);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10017910C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SiriTTSDaemonSession);
  uint64_t v2 = (void *)qword_100577FA8;
  qword_100577FA8 = (uint64_t)v1;
}

void sub_1001796AC(void (**a1)(void, void))
{
  uint64_t v2 = a1;
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___ADUnavailableAlarmStore);
  ((void (**)(void, ADUnavailableAlarmStore *))a1)[2](v2, v3);
}

void sub_100179C24(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "-[ADCloudKitZoneShareCreator saveZoneShare:completion:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Error saving shared zone (%@)",  (uint8_t *)&v12,  0x16u);
    }
  }

  uint64_t v11 = *(void *)(a1 + 32);
  if (v11) {
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v9);
  }
}

void sub_100179D30(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v2 && (uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zone]), v3, v3))
  {
    id v4 = objc_alloc(&OBJC_CLASS___CKShare);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) zone]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
    id v7 = -[CKShare initWithRecordZoneID:](v4, "initWithRecordZoneID:", v6);

    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[CKShare recordID](v7, "recordID"));
    id v9 = objc_alloc(&OBJC_CLASS___CKFetchRecordsOperation);
    uint64_t v24 = v8;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
    uint64_t v11 = -[CKFetchRecordsOperation initWithRecordIDs:](v9, "initWithRecordIDs:", v10);

    uint64_t v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    uint64_t v19 = sub_100179F84;
    uint64_t v20 = &unk_1004F68A0;
    int v12 = *(void **)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = v8;
    id v23 = v12;
    id v13 = v8;
    -[CKFetchRecordsOperation setFetchRecordsCompletionBlock:](v11, "setFetchRecordsCompletionBlock:", &v17);
    -[CKFetchRecordsOperation setQualityOfService:](v11, "setQualityOfService:", 17LL, v17, v18, v19, v20, v21);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) privateCloudDatabase]);
    [v14 addOperation:v11];
  }

  else
  {
    id v7 = (CKShare *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4020LL));
    id v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
      __int16 v27 = 2112;
      uint64_t v28 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%s %@", buf, 0x16u);
    }

    uint64_t v16 = *(void *)(a1 + 40);
    if (v16) {
      (*(void (**)(uint64_t, void, void, CKShare *))(v16 + 16))(v16, 0LL, 0LL, v7);
    }
  }
}

void sub_100179F84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      id v13 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch share with error (%@). Try creating a record.",  (uint8_t *)&v12,  0x16u);
    }

    [*(id *)(a1 + 32) _setupZoneSharing:*(void *)(a1 + 48)];
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:*(void *)(a1 + 40)]);
    id v9 = (void *)AFSiriLogContextDaemon;
    if (v8)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = v9;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 URL]);
        int v12 = 136315394;
        id v13 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
        __int16 v14 = 2112;
        id v15 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s one share record fetched with %@",  (uint8_t *)&v12,  0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v12 = 136315138;
        id v13 = "-[ADCloudKitZoneShareCreator fetchZoneShare:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEBUG,  "%s Creating zone share",  (uint8_t *)&v12,  0xCu);
      }

      [*(id *)(a1 + 32) _setupZoneSharing:*(void *)(a1 + 48)];
    }
  }
}

void sub_10017A198(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v2 && (uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zone]), v3, v3))
  {
    id v4 = objc_alloc(&OBJC_CLASS___CKShare);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) zone]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
    id v7 = -[CKShare initWithRecordZoneID:](v4, "initWithRecordZoneID:", v6);

    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[CKShare recordID](v7, "recordID"));
    id v9 = objc_alloc(&OBJC_CLASS___CKModifyRecordsOperation);
    uint64_t v19 = v8;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
    uint64_t v11 = -[CKModifyRecordsOperation initWithRecordsToSave:recordIDsToDelete:]( v9,  "initWithRecordsToSave:recordIDsToDelete:",  0LL,  v10);

    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10017A3C8;
    v17[3] = &unk_1004F3C58;
    id v18 = *(id *)(a1 + 40);
    -[CKModifyRecordsOperation setModifyRecordsCompletionBlock:](v11, "setModifyRecordsCompletionBlock:", v17);
    if (*(_BYTE *)(a1 + 48)) {
      -[CKModifyRecordsOperation setMarkAsParticipantNeedsNewInvitationToken:]( v11,  "setMarkAsParticipantNeedsNewInvitationToken:",  1LL);
    }
    -[CKModifyRecordsOperation setQualityOfService:](v11, "setQualityOfService:", 17LL);
    int v12 = *(void **)(*(void *)(a1 + 32) + 16LL);
    if (*(_BYTE *)(a1 + 49)) {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 privateCloudDatabase]);
    }
    else {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedCloudDatabase]);
    }
    id v15 = v13;
    [v13 addOperation:v11];
  }

  else
  {
    uint64_t v14 = *(void *)(a1 + 40);
    if (v14)
    {
      id v16 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4020LL));
      (*(void (**)(uint64_t))(v14 + 16))(v14);
    }
  }

void sub_10017A3C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      id v15 = "-[ADCloudKitZoneShareCreator deleteZoneShare:markForReinvitation:completion:]_block_invoke_2";
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Error deleting ckshare (%@)",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      int v12 = *(void (**)(void))(v11 + 16);
LABEL_10:
      v12();
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v14 = 136315138;
      id v15 = "-[ADCloudKitZoneShareCreator deleteZoneShare:markForReinvitation:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Deletion successful", (uint8_t *)&v14, 0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 32);
    if (v13)
    {
      int v12 = *(void (**)(void))(v13 + 16);
      goto LABEL_10;
    }
  }
}

void sub_10017A534(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (v9)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Error creating shared zone (%@)",  (uint8_t *)&v21,  0x16u);
    }

    BOOL v11 = sub_1002FF7B0(v9);
    int v12 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v13 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if (v11)
    {
      if (!v13) {
        goto LABEL_14;
      }
      int v21 = 136315394;
      id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v7;
      int v14 = "%s Zone share record exists %@";
    }

    else
    {
      if (!v13) {
        goto LABEL_14;
      }
      int v21 = 136315394;
      id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
      __int16 v23 = 2112;
      id v24 = v9;
      int v14 = "%s Zone share record creation failed with error (%@)";
    }

    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v21, 0x16u);
LABEL_14:
    uint64_t v20 = *(void *)(a1 + 40);
    if (v20) {
      (*(void (**)(uint64_t, void, void, id))(v20 + 16))(v20, 0LL, 0LL, v9);
    }
    goto LABEL_16;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v15 = v10;
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 URL]);
    int v21 = 136315394;
    id v22 = "-[ADCloudKitZoneShareCreator _setupZoneSharing:]_block_invoke";
    __int16 v23 = 2112;
    id v24 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Zone share record creation succeeded with %@",  (uint8_t *)&v21,  0x16u);
  }

  uint64_t v18 = *(void *)(a1 + 40);
  if (v18)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
    (*(void (**)(uint64_t, void *, void, void))(v18 + 16))( v18,  v19,  *(void *)(*(void *)(a1 + 32) + 16LL),  0LL);
  }

void sub_10017AC80(id a1)
{
  id v1 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"00000000-0000-0000-0000-000000000000");
  uint64_t v2 = (void *)qword_100577FC8;
  qword_100577FC8 = (uint64_t)v1;
}

void sub_10017ACB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.siri", "AnalyticsIdentifiers");
  uint64_t v2 = (void *)qword_100577FB8;
  qword_100577FB8 = (uint64_t)v1;
}

void sub_10017AFBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10017AFDC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceSegmentsReported]);
  if ([v4 count]
    && (id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:0]),
        unsigned int v6 = [v5 hasDaysWithTwoAssistantSpeechRequestsPerWeek],
        v5,
        v6))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:0]);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v7 daysWithTwoAssistantSpeechRequestsPerWeek];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 eventMetadata]);
    id v9 = [v8 eventTimestampInMSSince1970];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)v9));
    BOOL v11 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
    -[NSDateFormatter setDateFormat:](v11, "setDateFormat:", @"yyyy-MM-dd");
    int v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v11, "stringFromDate:", v10));
    BOOL v13 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
    {
      int v15 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
      int v16 = 136315906;
      id v17 = "+[ADSiriAnalyticsOnDeviceDigestProvider _fetchLatestDaysWithTwoAssistantSpeechRequestsPerWeek]_block_invoke";
      __int16 v18 = 1024;
      int v19 = v15;
      __int16 v20 = 2048;
      id v21 = v9;
      __int16 v22 = 2112;
      __int16 v23 = v12;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s DIMSchemaDIMOnDeviceDigest: Retrieved latest daysWithTwoAssistantSpeechRequestsPerWeek value: %u from Biome s tream with epoch time: %llu and date: %@",  (uint8_t *)&v16,  0x26u);
    }
  }

  else
  {
    int v14 = (os_log_s *)AFSiriLogContextAnalytics;
    if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
    {
      int v16 = 136315138;
      id v17 = "+[ADSiriAnalyticsOnDeviceDigestProvider _fetchLatestDaysWithTwoAssistantSpeechRequestsPerWeek]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s DIMSchemaDIMOnDeviceDigest: No data for daysWithTwoAssistantSpeechRequestsPerWeek available in Biome stream",  (uint8_t *)&v16,  0xCu);
    }
  }
}

void sub_10017B220(id a1, BPSCompletion *a2)
{
  uint64_t v3 = (void *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
  {
    id v4 = v3;
    id v5 = a2;
    id v6 = -[BPSCompletion state](v5, "state");
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](v5, "error"));

    int v8 = 136315650;
    id v9 = "+[ADSiriAnalyticsOnDeviceDigestProvider _fetchLatestDaysWithTwoAssistantSpeechRequestsPerWeek]_block_invoke";
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    BOOL v13 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s DIMSchemaDIMOnDeviceDigest: BMSiriOnDeviceDigestSegmentsCohorts Publisher completed with state: %ld; error: %@",
      (uint8_t *)&v8,
      0x20u);
  }

void sub_10017B7AC(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 24LL);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(*(void *)(a1 + 32) + 24LL) = -1;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v14[0] = @"path";
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) stringByStandardizingPath]);
    v14[1] = @"success";
    v15[0] = v4;
    v15[1] = &__kCFBooleanTrue;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2LL));
    [v3 logEventWithType:313 context:v5];

    id v6 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 32LL);
      int v10 = 136315394;
      id v11 = "-[ADSpeechLog endSpeechLog]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Logged speech file at path %@",  (uint8_t *)&v10,  0x16u);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 32);
    *(void *)(v8 + 32) = 0LL;
  }

void sub_10017B924(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 24LL);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(*(void *)(a1 + 32) + 24LL) = -1;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    v20[0] = @"path";
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) stringByStandardizingPath]);
    v20[1] = @"success";
    v21[0] = v4;
    v21[1] = &__kCFBooleanFalse;
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  2LL));
    [v3 logEventWithType:313 context:v5];

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 32LL);
    id v13 = 0LL;
    LOBYTE(v5) = [v6 removeItemAtPath:v7 error:&v13];
    id v8 = v13;

    if ((v5 & 1) == 0)
    {
      id v9 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32LL);
        *(_DWORD *)buf = 136315650;
        int v15 = "-[ADSpeechLog cancelCurrentSpeechLog]_block_invoke";
        __int16 v16 = 2114;
        uint64_t v17 = v12;
        __int16 v18 = 2114;
        id v19 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s error removing file at path %{public}@ %{public}@",  buf,  0x20u);
      }
    }

    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = *(void **)(v10 + 32);
    *(void *)(v10 + 32) = 0LL;
  }

ssize_t sub_10017BAEC(ssize_t result)
{
  if ((*(_DWORD *)(*(void *)(result + 32) + 24LL) & 0x80000000) == 0)
  {
    ssize_t v1 = result;
    unsigned int v2 = [*(id *)(result + 40) length];
    char v3 = v2;
    if ((v2 & 0xFF80) != 0)
    {
      char __buf = (v2 >> 7) | 0x80;
      write(*(_DWORD *)(*(void *)(v1 + 32) + 24LL), &__buf, 1uLL);
    }

    char v4 = v3 & 0x7F;
    write(*(_DWORD *)(*(void *)(v1 + 32) + 24LL), &v4, 1uLL);
    return write( *(_DWORD *)(*(void *)(v1 + 32) + 24), [*(id *)(v1 + 40) bytes], (size_t)objc_msgSend(*(id *)(v1 + 40), "length"));
  }

  return result;
}

void sub_10017BBA0(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned __int8 v3 = [v2 limitedAudioLoggingEnabled];

  if ((v3 & 1) == 0)
  {
    if (*(void *)(*(void *)(a1 + 32) + 32LL))
    {
      char v4 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        __int16 v27 = "-[ADSpeechLog beginNewSpeechLogWithFormat:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Already have a log open, ignoring",  buf,  0xCu);
      }
    }

    unsigned int v5 = [*(id *)(a1 + 40) hasPrefix:@"OPUS"];
    id v6 = @"spx";
    if (v5) {
      id v6 = @"opx";
    }
    uint64_t v7 = v6;
    id v8 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v9 = AFSpeechLogsDirectory();
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _nowString]);
    id v13 = -[NSString initWithFormat:](v8, "initWithFormat:", @"%@/%@-%@.%@", v10, v11, v12, v7);

    uint64_t v14 = *(void *)(a1 + 32);
    int v15 = *(void **)(v14 + 32);
    *(void *)(v14 + 32) = v13;

    *(_DWORD *)(*(void *)(a1 + 32) + 24) = open( (const char *)[*(id *)(*(void *)(a1 + 32) + 32) fileSystemRepresentation],  522,  384);
    uint64_t v16 = *(void *)(a1 + 32);
    if ((*(_DWORD *)(v16 + 24) & 0x80000000) != 0)
    {
      __int16 v22 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(v16 + 32);
        *(_DWORD *)buf = 136315394;
        __int16 v27 = "-[ADSpeechLog beginNewSpeechLogWithFormat:]_block_invoke";
        __int16 v28 = 2114;
        uint64_t v29 = v23;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s Couldn't open file %{public}@",  buf,  0x16u);
      }
    }

    else
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      v24[0] = @"format";
      v24[1] = @"path";
      v25[0] = v19;
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v18 + 32) stringByStandardizingPath]);
      v25[1] = v20;
      id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v24,  2LL));
      [v17 logEventWithType:312 context:v21];
    }
  }

void sub_10017CADC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10017CBC4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = AFSAERequiredAssets(v3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = AFAssetsAvailabilityMatchesRequiredAssets(v4, v6);

  if ((_DWORD)v7 != [*(id *)(a1 + 40) saeAssetsForCurrentLocaleAvailable])
  {
    char v8 = objc_opt_respondsToSelector(*(void *)(*(void *)(a1 + 40) + 8LL), "updateAvailabilityWithCompletion:");
    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v10 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if ((v8 & 1) != 0)
    {
      if (v10)
      {
        int v11 = 136315138;
        uint64_t v12 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Sending updateAvailabilityWithCompletion: to GM",  (uint8_t *)&v11,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 40) + 8) updateAvailabilityWithCompletion:&stru_1004F3D00];
    }

    else if (v10)
    {
      int v11 = 136315138;
      uint64_t v12 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s updateAvailabilityWithCompletion: is not implemented by GMAvailabilityWrapper",  (uint8_t *)&v11,  0xCu);
    }
  }

  [*(id *)(a1 + 40) setSaeAssetsForCurrentLocaleAvailable:v7];
}

void sub_10017CD40(id a1, NSError *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v4 = v3;
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError localizedDescription](v2, "localizedDescription"));
      int v6 = 136315394;
      uint64_t v7 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s updateAvailabilityWithCompletion: failed with error %@",  (uint8_t *)&v6,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADSAEAssetsAvailabilityObserver refreshAssetsAvailabilityWithAssetManager:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_INFO,  "%s Successfully sent updateAvailabilityWithCompletion: to GM",  (uint8_t *)&v6,  0xCu);
  }
}

Class sub_10017CE78(uint64_t a1)
{
  int v6 = 0LL;
  if (!qword_100577FE0)
  {
    __int128 v7 = off_1004F3D20;
    uint64_t v8 = 0LL;
    qword_100577FE0 = _sl_dlopen(&v7, &v6);
  }

  if (!qword_100577FE0)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *GenerativeModelsLibrary(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"ADSAEAssetsAvailabilityObserver.m",  18,  @"%s",  v6);

    goto LABEL_10;
  }

  if (v6) {
    free(v6);
  }
  Class result = objc_getClass("GMAvailabilityWrapper");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getGMAvailabilityWrapperClass(void)_block_invoke"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v5,  @"ADSAEAssetsAvailabilityObserver.m",  19,  @"Unable to find class %s",  "GMAvailabilityWrapper");

LABEL_10:
    __break(1u);
  }

  qword_100577FD8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10017E874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10017EAA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_10017FEBC(_Unwind_Exception *a1)
{
}

void sub_100181E44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10018372C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned int v2 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      id v4 = "-[ADLocationManager scheduleLocationUpdateSessionTeardown]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Tearing down location update session",  (uint8_t *)&v3,  0xCu);
    }

    [WeakRetained cancelLocationUpdateSessionTeardown];
    WeakRetained[23] = 0LL;
    [WeakRetained setLastShiftedLocation:0];
  }
}

uint64_t sub_1001837FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100183838(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    unsigned int v2 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADLocationManager drainRequestsWithErrorCode:clearLocationCache:dismissDialog:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Clearing location service cache",  (uint8_t *)&v4,  0xCu);
    }

    [*(id *)(a1 + 32) setLastShiftedLocation:0];
  }

  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  *(void *)(a1 + 40),  0LL));
  [*(id *)(a1 + 32) drainAuthorizationRequestCompletionsWithPossibleError:v3];
  [*(id *)(a1 + 32) drainLocationFetchRequestsWithPossibleError:v3];
  if (*(_BYTE *)(a1 + 49)) {
    [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  }
}

void sub_100183948(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) currentState];
  unint64_t v3 = HIDWORD(v2);
  if (HIDWORD(v2) >= 3)
  {
  }

  else
  {
    int v4 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      int v6 = "-[ADLocationManager prefetchCurrentLocation]_block_invoke";
      __int16 v7 = 1024;
      int v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Location prefetch is skipped due to lack of authorization, status: %d",  (uint8_t *)&v5,  0x12u);
    }
  }

void sub_100183A48(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t v34 = 136315138;
    *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", v34, 0xCu);
  }

  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  if ((v3 & 1) == 0)
  {
    int v4 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v34 = 136315138;
      *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Location fetch is skipped due to location services being completely disabled",  v34,  0xCu);
    }

    uint64_t v5 = kAFLocationServiceErrorDomain;
    uint64_t v6 = 9LL;
LABEL_11:
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  v6,  0LL));
    BOOL v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_12:
    v10();
LABEL_13:

    return;
  }

  unint64_t v7 = HIDWORD(v3);
  if (HIDWORD(v3) < 3)
  {
    int v8 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v34 = 136315394;
      *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Location fetch is skipped due to lack of authorization, status: %d",  v34,  0x12u);
    }

    uint64_t v5 = kAFLocationServiceErrorDomain;
    uint64_t v6 = 5LL;
    goto LABEL_11;
  }

  if ((HIDWORD(v3) - 3) < 2)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastShiftedLocation]);
    int v11 = *(void **)(a1 + 32);
    if (!v11[8])
    {
      uint64_t v12 = (os_log_s *)AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v34 = 136315138;
        *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Someone is fetching current location - grabbing assertion once",  v34,  0xCu);
        int v11 = *(void **)(a1 + 32);
      }

      uint64_t v13 = objc_claimAutoreleasedReturnValue([v11 createLocationInUseAssertion]);
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(void **)(v14 + 64);
      *(void *)(v14 + 64) = v13;
    }

    id v16 = [*(id *)(a1 + 40) style];
    if (v16 == (id)1)
    {
      if (!v9) {
        goto LABEL_32;
      }
      uint64_t v25 = (os_log_s *)AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v34 = 136315138;
        *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
        uint64_t v26 = "%s Cached location is not empty and request style is 'eager'";
        __int16 v27 = v25;
        uint32_t v28 = 12;
LABEL_37:
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, v26, v34, v28);
      }
    }

    else
    {
      if (v16) {
        goto LABEL_32;
      }
      if (!v9)
      {
        uint64_t v29 = (os_log_s *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t v34 = 136315138;
          *(void *)&v34[4] = "-[ADLocationManager currentLocationWithFetchRequest:completion:]_block_invoke";
          __int16 v22 = "%s No cached location and request style is 'default'";
          uint64_t v23 = v29;
          uint32_t v24 = 12;
          goto LABEL_31;
        }

id sub_100183F50(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v19 = 136315138;
    __int16 v20 = "-[ADLocationManager updateTemporaryAuthorizationForAccurateLocation:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v19, 0xCu);
  }

  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  uint64_t v5 = v4;
  [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  if ((v3 & 1) != 0
    && ((HIDWORD(v3) - 3) <= 1 ? (BOOL v6 = (v5 == 0) == (*(_BYTE *)(a1 + 56) != 0)) : (BOOL v6 = 1),
        !v6
     && (uint64_t v7 = objc_opt_respondsToSelector( &OBJC_CLASS___CLLocationManager,  "setTemporaryFullAccuracyAuthorizationGranted:forBundlePath:"),  (v7 & 1) != 0)))
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v9 = AFEffectiveSiriBundlePathForLocation(v7);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    +[CLLocationManager setTemporaryFullAccuracyAuthorizationGranted:forBundlePath:]( &OBJC_CLASS___CLLocationManager,  "setTemporaryFullAccuracyAuthorizationGranted:forBundlePath:",  v8,  v10);

    int v11 = *(void **)(*(void *)(a1 + 32) + 136LL);
    id v12 = objc_retainBlock(*(id *)(a1 + 40));
    [v11 addObject:v12];

    return [*(id *)(a1 + 32) scheduleAuthorizationRequestTimeoutForCompletionBlock:*(void *)(a1 + 40) timeout:*(double *)(a1 + 48)];
  }

  else
  {
    uint64_t v14 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v15 = v14;
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3 & 1));
      double v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", HIDWORD(v3)));
      double v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
      int v19 = 136315906;
      __int16 v20 = "-[ADLocationManager updateTemporaryAuthorizationForAccurateLocation:timeout:completion:]_block_invoke";
      __int16 v21 = 2112;
      __int16 v22 = v16;
      __int16 v23 = 2112;
      uint32_t v24 = v17;
      __int16 v25 = 2112;
      uint64_t v26 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Temporary accuracy update is not needed. Location services enabled: %@, current auth: %@, accuracy auth: %@",  (uint8_t *)&v19,  0x2Au);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_1001841D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1001841E0(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v21 = 136315138;
    __int16 v22 = "-[ADLocationManager updateAuthorizationStyleWithUserSelection:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v21, 0xCu);
  }

  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  uint64_t v5 = v4;
  id v6 = [*(id *)(a1 + 32) _dismissTCCDialogIfNeeded];
  if ((v3 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (HIDWORD(v3) == 2)
  {
    if (v12) {
      goto LABEL_13;
    }
  }

  else if (HIDWORD(v3) == 4)
  {
  }

  else if (HIDWORD(v3) != 3 || (v12 & 0xFFFFFFFFFFFFFFFDLL) != 1)
  {
LABEL_13:
    if (v12 == 1)
    {
      uint64_t v14 = AFEffectiveSiriBundleForLocation(v6);
      int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      +[CLLocationManager setTemporaryAuthorizationGranted:forBundle:]( &OBJC_CLASS___CLLocationManager,  "setTemporaryAuthorizationGranted:forBundle:",  1LL,  v15);
LABEL_23:

      int v19 = *(void **)(*(void *)(a1 + 32) + 136LL);
      id v20 = objc_retainBlock(*(id *)(a1 + 40));
      [v19 addObject:v20];

      return [*(id *)(a1 + 32) scheduleAuthorizationRequestTimeoutForCompletionBlock:*(void *)(a1 + 40) timeout:*(double *)(a1 + 56)];
    }

uint64_t sub_1001844A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001844B4(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315138;
    uint64_t v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v11, 0xCu);
  }

  unint64_t v3 = (unint64_t)[*(id *)(a1 + 32) currentState];
  if ((v3 & 1) != 0)
  {
    unint64_t v7 = HIDWORD(v3);
    if (HIDWORD(v3) >= 3)
    {
      if (v4 == 1)
      {
        [*(id *)(a1 + 32) sendTemporaryAccuracyAuthorizationRequestWithTimeout:*(void *)(a1 + 40) completion:*(double *)(a1 + 48)];
        return;
      }

      if (v4) {
        return;
      }
      BOOL v10 = (os_log_s *)AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315138;
        uint64_t v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Full accuracy is already granted",  (uint8_t *)&v11,  0xCu);
      }

      uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      uint64_t v8 = (os_log_s *)AFSiriLogContextLocation;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315394;
        uint64_t v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
        __int16 v13 = 1024;
        int v14 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Authorization status is a form of 'denied' with value: %d",  (uint8_t *)&v11,  0x12u);
      }

      uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    v9();
    return;
  }

  uint64_t v5 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v11 = 136315138;
    uint64_t v12 = "-[ADLocationManager requestTemporaryAccuracyAuthorizationWithStyle:timeout:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Not requesting temporary accuracy authorization due to location services being completely disabled",  (uint8_t *)&v11,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  9LL,  0LL));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100184738(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _locationManager]);
    objc_msgSend( v5,  "setCurrentState:",  +[CLLocationManager locationServicesEnabled](CLLocationManager, "locationServicesEnabled") | ((void)objc_msgSend(v6, "authorizationStatus") << 32),  objc_msgSend(v6, "accuracyAuthorization"));

    [v5 currentState];
    uint64_t v8 = v7;
    uint64_t v9 = (void *)v5[17];
    id v10 = objc_retainBlock(*(id *)(a1 + 40));
    LODWORD(v9) = [v9 containsObject:v10];

    if ((_DWORD)v9)
    {
      int v11 = (void *)AFSiriLogContextLocation;
      if (v3)
      {
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 136LL);
          __int16 v13 = v11;
          int v18 = 136315650;
          int v19 = "-[ADLocationManager sendTemporaryAccuracyAuthorizationRequestWithTimeout:completion:]_block_invoke";
          __int16 v20 = 2114;
          id v21 = v3;
          __int16 v22 = 2048;
          id v23 = [v12 count];
          _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Temporary full accuracy request failed and it's intentionally ignored. Error: %{public}@. Currently await ing requests count: %lu",  (uint8_t *)&v18,  0x20u);
        }
      }

      else
      {
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          int v14 = v11;
          int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v8 == 0));
          int v18 = 136315394;
          int v19 = "-[ADLocationManager sendTemporaryAccuracyAuthorizationRequestWithTimeout:completion:]_block_invoke";
          __int16 v20 = 2112;
          id v21 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Received non-error response for requestTemporaryFullAccuracyAuthorizationWithPurposeKey:completion:, prec iseLocationEnabled: %@",  (uint8_t *)&v18,  0x16u);
        }

        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        unsigned int v16 = (void *)v5[17];
        id v17 = objc_retainBlock(*(id *)(a1 + 40));
        [v16 removeObject:v17];
      }
    }
  }
}

void sub_1001849BC(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v17 = 136315138;
    int v18 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v17, 0xCu);
  }

  id v3 = [*(id *)(a1 + 32) currentState];
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _locationManager]);
    switch(HIDWORD(v3))
    {
      case 0:
        uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 136LL);
        id v8 = objc_retainBlock(*(id *)(a1 + 40));
        [v7 addObject:v8];

        [*(id *)(a1 + 32) scheduleAuthorizationRequestTimeoutForCompletionBlock:*(void *)(a1 + 40) timeout:*(double *)(a1 + 48)];
        uint64_t v9 = *(void **)(a1 + 32);
        if (!v9[8])
        {
          id v10 = (os_log_s *)AFSiriLogContextLocation;
          if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
          {
            int v17 = 136315138;
            int v18 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Will request location authorization - grabbing assertion once",  (uint8_t *)&v17,  0xCu);
            uint64_t v9 = *(void **)(a1 + 32);
          }

          uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 createLocationInUseAssertion]);
          uint64_t v12 = *(void *)(a1 + 32);
          __int16 v13 = *(void **)(v12 + 64);
          *(void *)(v12 + 64) = v11;
        }

        uint64_t v14 = *(void *)(a1 + 56);
        if (v14 == 1)
        {
          unsigned int v16 = (os_log_s *)AFSiriLogContextLocation;
          if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
          {
            int v17 = 136315138;
            int v18 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Requesting 'always' location authorization",  (uint8_t *)&v17,  0xCu);
          }

          [v5 requestAlwaysAuthorization];
        }

        else if (!v14)
        {
          int v15 = (os_log_s *)AFSiriLogContextLocation;
          if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
          {
            int v17 = 136315138;
            int v18 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Requesting 'when in use' location authorization",  (uint8_t *)&v17,  0xCu);
          }

          [v5 requestWhenInUseAuthorization];
        }

        break;
      default:
        id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
        goto LABEL_18;
    }
  }

  else
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v17 = 136315138;
      int v18 = "-[ADLocationManager requestAuthorizationWithStyle:timeout:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Not requesting location authorization due to location services being completely disabled",  (uint8_t *)&v17,  0xCu);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  9LL,  0LL));
    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_18:
    v6();
  }
}

uint64_t sub_100184CF8(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADLocationManager currentAuthorizationStyle:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Internal queue hop", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(a1 + 32) currentState];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100184DE8(id *a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 6);
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    unsigned int v4 = [WeakRetained[18] containsObject:a1[4]];
    id v3 = v8;
    if (v4)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] lastShiftedLocation]);
      if (v5) {
        id v6 = 0LL;
      }
      else {
        id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  3LL,  0LL));
      }
      uint64_t v7 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([a1[4] completion]);
      ((void (**)(void, void *, void *))v7)[2](v7, v5, v6);

      [v8[18] removeObject:a1[4]];
      id v3 = v8;
    }
  }
}

void sub_100184EC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    unsigned int v4 = (void *)WeakRetained[17];
    id v5 = objc_retainBlock(*(id *)(a1 + 32));
    LODWORD(v4) = [v4 containsObject:v5];

    if ((_DWORD)v4)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  3LL,  0LL));
      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      uint64_t v7 = (void *)v3[17];
      id v8 = objc_retainBlock(*(id *)(a1 + 32));
      [v7 removeObject:v8];
    }
  }

  else
  {
    uint64_t v9 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADLocationManager scheduleAuthorizationRequestTimeoutForCompletionBlock:timeout:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s ADLocationManager is deallocated unexpectedly when location fetch timeout was triggered",  (uint8_t *)&v10,  0xCu);
    }
  }
}

id sub_100185018(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 192LL) = 0;
  unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 136315394;
    id v6 = "-[ADLocationManager dismissedAllVisibleAssistantUIForReason:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s UI dismissed per %@, ending location update session",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) endLocationUpdateSessionIfNeeded];
}

uint64_t sub_1001850E0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 192LL) = 1;
  if (*(void *)(*(void *)(a1 + 32) + 64LL))
  {
    unint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = &stru_1004FECA0;
      if (*(void *)(a1 + 40)) {
        uint64_t v3 = *(const __CFString **)(a1 + 40);
      }
      *(_DWORD *)buf = 136315394;
      uint64_t v11 = "-[ADLocationManager showingVisibleAssistantUIForReason:completion:]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s '%@' - already have an assertion, nothing to do",  buf,  0x16u);
    }
  }

  else
  {
    unsigned int v4 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"first showed active UI per %@",  *(void *)(a1 + 40)));
    int v5 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v11 = "-[ADLocationManager showingVisibleAssistantUIForReason:completion:]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s '%@' - grabbing assertion once", buf, 0x16u);
    }

    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createLocationInUseAssertion]);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = v6;
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100185284(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (v3)
  {
    [v3 latitude];
    if (v5 == 0.0)
    {
      [v4 longitude];
      if (v6 != 0.0)
      {
        uint64_t v7 = (void *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = v7;
          [v4 latitude];
          uint64_t v13 = v12;
          [v4 longitude];
          *(_DWORD *)buf = 136315651;
          int v19 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
          __int16 v20 = 2049;
          uint64_t v21 = v13;
          __int16 v22 = 2049;
          uint64_t v23 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Zero latitude in SASetRequestOrigin. Latitude: %{private}f, Longitude: %{private}f",  buf,  0x20u);
        }
      }
    }
  }

  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10018579C;
  v15[3] = &unk_1004FD990;
  id v16 = v4;
  id v17 = v8;
  id v10 = v4;
  dispatch_async(v9, v15);
}

void sub_100185404(id *a1)
{
  unint64_t v2 = (unint64_t)[a1[4] currentState];
  if ((v2 & 1) == 0)
  {
    unsigned int v4 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      __int16 v27 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Location Services Disabled", buf, 0xCu);
    }

    [a1[4] _generateLocationDisabledResponseForGetRequestOriginCommand:a1[5] completion:a1[6]];
    return;
  }

  uint64_t v5 = v3;
  if (AFLocationStatusIsDenied(HIDWORD(v2)))
  {
    double v6 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      __int16 v27 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Location Services Denied for assistant",  buf,  0xCu);
    }

    [a1[4] _generateLocationDeniedResponseForGetRequestOriginCommand:a1[5] completion:a1[6]];
    return;
  }

  if (([a1[4] _locationUpdateIsCapableOfSucceeding] & 1) == 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    unsigned __int8 v8 = [v7 ignoreLocationWiFiStatus];

    if ((v8 & 1) == 0)
    {
      _[a1[4] _generateLocationWiFiOffResponseForGetRequestOriginCommand:a1[5] completion:a1[6]];
      return;
    }
  }

  uint64_t v9 = a1[4];
  if (!a1[5])
  {
    id v16 = (void *)v9[14];
    if (v16)
    {
      id v17 = v16;
    }

    else
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue([v9 locationForSnapshot]);
      if (!v17)
      {
        uint64_t v21 = (os_log_s *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315138;
          __int16 v27 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s No cached location, waiting for first update",  buf,  0xCu);
        }

        id v22 = objc_retainBlock(a1[6]);
        uint64_t v23 = a1[4];
        uint32_t v24 = (void *)v23[4];
        void v23[4] = v22;

        id v17 = 0LL;
        goto LABEL_27;
      }
    }

    int v18 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      __int16 v27 = "-[ADLocationManager updateLocationForCommand:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%s Using cached location", buf, 0xCu);
    }

    [a1[4] _generateResponseForGetRequestOriginCommand:a1[5] withUnshiftedLocation:v17 completion:a1[6]];
LABEL_27:
    unsigned int v19 = [(id)objc_opt_class(a1[4]) _shouldUseOneshotLocationRequest];
    __int16 v20 = (double *)a1[4];
    if (v19) {
      [v20 _requestLocationWithBestAccuracy];
    }
    else {
      [v20 _startMonitoringLocationWithDesiredAccuracy:v20[21]];
    }

    return;
  }

  id v25 = (id)objc_claimAutoreleasedReturnValue([v9 locationForSnapshot]);
  [a1[5] desiredCLAccuracy];
  if ((v5 || objc_msgSend(v25, "_af_isWithinAccuracy:"))
    && (id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[5] maxAge]),
        unsigned __int8 v11 = objc_msgSend(v25, "_af_isOlderThanAge:", v10),
        v10,
        (v11 & 1) == 0))
  {
    [a1[4] _generateResponseForGetRequestOriginCommand:a1[5] withUnshiftedLocation:v25 completion:a1[6]];
  }

  else
  {
    unsigned int v12 = [(id)objc_opt_class(a1[4]) _shouldUseOneshotLocationRequest];
    id v13 = a1[4];
    id v14 = a1[5];
    id v15 = a1[6];
    if (v12) {
      [v13 _requestLocationForGetRequestOrigin:v14 completion:v15];
    }
    else {
      [v13 _startMonitoringLocationForGetRequestOrigin:v14 completion:v15];
    }
  }
}

uint64_t sub_10018579C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1001857B8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001857F4(id a1, AFLocationSnapshotMutating *a2)
{
}

void sub_100185800(id a1, AFLocationSnapshotMutating *a2)
{
}

id sub_10018580C(uint64_t a1)
{
  v10[0] = @"newAuthorization";
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
  v11[0] = v2;
  v10[1] = @"lastAuthorization";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60)));
  v11[1] = v3;
  v10[2] = @"lastEnabled";
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  v11[2] = v4;
  v10[3] = @"refID";
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) aceId]);
  double v6 = (void *)v5;
  uint64_t v7 = @"NULL";
  if (v5) {
    uint64_t v7 = (const __CFString *)v5;
  }
  v11[3] = v7;
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  4LL));

  return v8;
}

void sub_100185944(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100185B44;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1001859C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100185B04;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100185A44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100185AC4;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100185AC4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

void sub_100185B04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

void sub_100185B44(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

id sub_100185B84(uint64_t a1)
{
  v11[0] = @"errorCode";
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) code]));
  v12[0] = v2;
  v11[1] = @"errorDomain";
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) domain]);
  uint64_t v4 = (void *)v3;
  if (v3) {
    uint64_t v5 = (const __CFString *)v3;
  }
  else {
    uint64_t v5 = @"NULL";
  }
  v12[1] = v5;
  v11[2] = @"refID";
  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) aceId]);
  uint64_t v7 = (void *)v6;
  if (v6) {
    id v8 = (const __CFString *)v6;
  }
  else {
    id v8 = @"NULL";
  }
  v12[2] = v8;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  3LL));

  return v9;
}

void sub_100185CA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  7LL,  0LL));
    [WeakRetained drainLocationFetchRequestsWithPossibleError:v3];
    [WeakRetained endLocationUpdateSessionIfNeeded];
  }

  else
  {
    uint64_t v4 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(const char **)(a1 + 40);
      uint64_t v6 = v4;
      uint64_t v7 = NSStringFromSelector(v5);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v9 = 136315394;
      id v10 = "-[ADLocationManager locationManager:didUpdateLocations:]_block_invoke";
      __int16 v11 = 2112;
      unsigned int v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@",  (uint8_t *)&v9,  0x16u);
    }
  }
}

void sub_100185DE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (v6)
    {
      NSErrorUserInfoKey v15 = NSUnderlyingErrorKey;
      id v16 = v6;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
      int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFLocationServiceErrorDomain,  8LL,  v8));
    }

    else
    {
      int v9 = 0LL;
    }

    [WeakRetained setLastShiftedLocation:v5];
    [WeakRetained updateLocationSnapshot];
    [WeakRetained drainLocationFetchRequestsWithPossibleError:v9];
    [WeakRetained endLocationUpdateSessionIfNeeded];
  }

  else
  {
    id v10 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = *(const char **)(a1 + 40);
      unsigned int v12 = v10;
      id v13 = NSStringFromSelector(v11);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      *(_DWORD *)buf = 136315394;
      int v18 = "-[ADLocationManager locationManager:didUpdateLocations:]_block_invoke";
      __int16 v19 = 2112;
      __int16 v20 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@",  buf,  0x16u);
    }
  }
}

void sub_100185F90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = 0LL;
}

void sub_100185FA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 112)) {
    goto LABEL_4;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "ad_isNewerThan:"))
  {
    uint64_t v2 = *(void *)(a1 + 32);
LABEL_4:
    objc_storeStrong((id *)(v2 + 112), *(id *)(a1 + 40));
    [*(id *)(a1 + 32) _processUpdatedLocation:*(void *)(a1 + 40)];
    return;
  }

  uint64_t v3 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADLocationManager peerLocationConnection:didReceiveUnsolicitedLocation:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Ignoring location older than _lastPeerLocation",  (uint8_t *)&v4,  0xCu);
  }

void sub_10018609C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10018611C;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_10018611C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40LL));
  [WeakRetained locationManager:*(void *)(a1 + 32) wantsToSetRequestOrigin:*(void *)(a1 + 40)];
}

void sub_10018615C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextLocation;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v5)
    {
      *(_DWORD *)buf = 136315395;
      __int16 v11 = "-[ADLocationManager _requestLocationWithBestAccuracy]_block_invoke";
      __int16 v12 = 2113;
      id v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Received location from peer: %{private}@",  buf,  0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(dispatch_queue_s **)(v6 + 8);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1001862C0;
    v8[3] = &unk_1004FD968;
    v8[4] = v6;
    id v9 = v3;
    dispatch_async(v7, v8);
  }

  else if (v5)
  {
    *(_DWORD *)buf = 136315138;
    __int16 v11 = "-[ADLocationManager _requestLocationWithBestAccuracy]_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Received empty location response from peer",  buf,  0xCu);
  }
}

id sub_1001862C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processUpdatedLocation:*(void *)(a1 + 40)];
}

void sub_1001862EC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    id v14 = "-[ADLocationManager _scheduleLocationTimerWithTimeout:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Location timer firing", buf, 0xCu);
  }

  id v3 = *(id *)(*(void *)(a1 + 32) + 24LL);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) locationForSnapshot]);
    if (v4)
    {
      [*(id *)(a1 + 32) _generateResponseForGetRequestOriginCommand:v3 withUnshiftedLocation:v4 completion:*(void *)(*(void *)(a1 + 32) + 32)];
    }

    else
    {
      BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(a1 + 40),  @"timeout"));
      v11[1] = @"refID";
      v12[0] = v6;
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 aceId]);
      id v8 = (void *)v7;
      id v9 = @"NULL";
      if (v7) {
        id v9 = (const __CFString *)v7;
      }
      v12[1] = v9;
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  2LL));
      [v5 logEventWithType:1929 context:v10];

      [*(id *)(a1 + 32) _triggerLocationABCForSubtype:@"location_timeout"];
      [*(id *)(a1 + 32) _generateLocationTimedOutResponseForGetRequestOriginCommand:v3 completion:*(void *)(*(void *)(a1 + 32) + 32)];
    }

    [*(id *)(a1 + 32) _clearCompletionState];
  }

  [*(id *)(a1 + 32) _cancelLocationTimer];
  [*(id *)(a1 + 32) endLocationUpdateSessionIfNeeded];
}

id sub_1001864D4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    BOOL v5 = "-[ADLocationManager _scheduleLocationSLATimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Location-SLA timer firing",  (uint8_t *)&v4,  0xCu);
  }

  [*(id *)(a1 + 32) _triggerLocationABCForSubtype:@"slow_location_update"];
  return [*(id *)(a1 + 32) _cancelLocationSLATimer];
}

void sub_100186594(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _generateLocationTimedOutResponseForGetRequestOriginCommand:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }

  else
  {
    int v4 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
    {
      BOOL v5 = *(const char **)(a1 + 56);
      uint64_t v6 = v4;
      uint64_t v7 = NSStringFromSelector(v5);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      int v9 = 136315394;
      id v10 = "-[ADLocationManager _generateResponseForGetRequestOriginCommand:withUnshiftedLocation:completion:]_block_invoke";
      __int16 v11 = 2112;
      __int16 v12 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@",  (uint8_t *)&v9,  0x16u);
    }
  }
}

void sub_10018669C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v7 = WeakRetained;
  if (!WeakRetained)
  {
    id v8 = (void *)AFSiriLogContextLocation;
    if (!os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    int v9 = *(const char **)(a1 + 56);
    id v10 = v8;
    __int16 v11 = NSStringFromSelector(v9);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    int v20 = 136315394;
    uint64_t v21 = "-[ADLocationManager _generateResponseForGetRequestOriginCommand:withUnshiftedLocation:completion:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v12;
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s ADLocationManager is deallocated unexpectedly while waiting for location shifting to complete. Origin %@",  (uint8_t *)&v20,  0x16u);

LABEL_11:
    goto LABEL_12;
  }

  if (!a3)
  {
    [v5 coordinate];
    if (v13 == 0.0)
    {
      [v5 coordinate];
      if (v14 != 0.0)
      {
        NSErrorUserInfoKey v15 = (os_log_s *)AFSiriLogContextLocation;
        if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
        {
          int v20 = 136315395;
          uint64_t v21 = "-[ADLocationManager _generateResponseForGetRequestOriginCommand:withUnshiftedLocation:completion:]_block_invoke";
          __int16 v22 = 2113;
          id v23 = v5;
          _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Zero latitude detected: %{private}@",  (uint8_t *)&v20,  0x16u);
        }
      }
    }

    id v10 = objc_opt_new(&OBJC_CLASS___SASetRequestOrigin);
    [v7 currentState];
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v16 == 0));
    -[os_log_s setPreciseLocationEnabled:](v10, "setPreciseLocationEnabled:", v17);

    -[os_log_s setPropertiesWithCLLocation:](v10, "setPropertiesWithCLLocation:", v5);
    int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    -[os_log_s setRefId:](v10, "setRefId:", v18);

    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) desiredAccuracy]);
    -[os_log_s setDesiredAccuracy:](v10, "setDesiredAccuracy:", v19);

    [v7[15] logLocationSend];
    [v7 setLocationSentToServer:v5];
    [v7 setNeedsToSendLocation:0];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_11;
  }

  [WeakRetained _generateLocationUnknownResponseForGetRequestOriginCommand:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
LABEL_12:
}

uint64_t sub_10018690C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8LL);
  if (!*(_BYTE *)(v1 + 24))
  {
    uint64_t v2 = result;
    *(_BYTE *)(v1 + 24) = 1;
    id v3 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADLocationManager shiftLocationWithTimeout:timeoutHandler:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Location shifting timed out",  (uint8_t *)&v4,  0xCu);
    }

    return (*(uint64_t (**)(void))(*(void *)(v2 + 32) + 16LL))();
  }

  return result;
}

uint64_t sub_1001869D8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8LL);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }

  return result;
}

void sub_100186A00(uint64_t a1, CLLocationDegrees a2, CLLocationDegrees a3, double a4)
{
  id v8 = *(id *)(a1 + 32);
  CLLocationCoordinate2D v9 = CLLocationCoordinate2DMake(a2, a3);
  id v10 = objc_alloc(&OBJC_CLASS___CLLocation);
  [v8 altitude];
  double v12 = v11;
  [v8 verticalAccuracy];
  double v14 = v13;
  NSErrorUserInfoKey v15 = (void *)objc_claimAutoreleasedReturnValue([v8 timestamp]);

  uint64_t v16 = -[CLLocation initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:referenceFrame:]( v10,  "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:referenceFrame:",  v15,  2LL,  v9.latitude,  v9.longitude,  v12,  a4,  v14);
  id v17 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315138;
    __int16 v19 = "-[ADLocationManager shiftLocation:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Successfully performed location shifting",  (uint8_t *)&v18,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100186B74(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    uint64_t v6 = "-[ADLocationManager shiftLocation:completion:]_block_invoke";
    __int16 v7 = 2114;
    id v8 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Shifting location failed due to error: %{public}@",  (uint8_t *)&v5,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100186C54(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADLocationManager shiftLocation:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Location shifter needs to fetch shifter function from network",  (uint8_t *)&v2,  0xCu);
  }

id sub_100186CF8(uint64_t a1)
{
  uint64_t IsActive = AFMapsNavigationStatusIsActive();
  return _[*(id *)(a1 + 32) setIsNavigating:IsActive];
}

void sub_100186D20(uint64_t a1, unint64_t a2)
{
  id v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)buf = 136315394;
    id v8 = "-[ADLocationManager initWithSerialQueue:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_100186E38(uint64_t a1)
{
}

uint64_t sub_100186E54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100186E68(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) currentState];
  uint64_t v4 = v3;
  BOOL v5 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v6 + 88)) {
      __int16 v7 = "WILL";
    }
    else {
      __int16 v7 = "Will NOT";
    }
    *(_DWORD *)buf = 136315650;
    int v18 = "-[ADLocationManager fetchLocationAuthorization:]_block_invoke_2";
    __int16 v19 = 2080;
    int v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s %s wait for initial location callback %p",  buf,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  __int16 v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_group_s **)(v8 + 96);
  double v11 = *(dispatch_queue_s **)(v8 + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100186FC8;
  v13[3] = &unk_1004F6B28;
  id v12 = v9;
  id v15 = v2;
  uint64_t v16 = v4;
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v12;
  dispatch_group_notify(v10, v11, v13);
}

void sub_100186FC8(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    BOOL v5 = "-[ADLocationManager fetchLocationAuthorization:]_block_invoke";
    __int16 v6 = 2048;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got initial location callback %p",  (uint8_t *)&v4,  0x16u);
  }

void sub_1001871B8(id a1)
{
  uint64_t v1 = AFEffectiveSiriBundlePathForLocation(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  unsigned int v3 = +[CLLocationManager authorizationStatusForBundlePath:]( &OBJC_CLASS___CLLocationManager,  "authorizationStatusForBundlePath:",  v2);

  if (!v3)
  {
    int v4 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      double v11 = "+[ADLocationManager prepareForAssistantEnablementInBackground]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Location authorization status for Siri is not determined, granting default authorization for Siri requests.",  (uint8_t *)&v10,  0xCu);
    }

    uint64_t v5 = AFIsMac();
    int v6 = v5;
    uint64_t v7 = AFEffectiveSiriBundleForLocation(v5);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (v6) {
      +[CLLocationManager setAuthorizationStatus:forBundle:]( &OBJC_CLASS___CLLocationManager,  "setAuthorizationStatus:forBundle:",  1LL,  v8);
    }
    else {
      +[CLLocationManager setAuthorizationStatusByType:forBundle:]( &OBJC_CLASS___CLLocationManager,  "setAuthorizationStatusByType:forBundle:",  4LL,  v8);
    }

    __int16 v9 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      double v11 = "+[ADLocationManager prepareForAssistantEnablementInBackground]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Prepared location subsystem for Siri.",  (uint8_t *)&v10,  0xCu);
    }
  }

void sub_100187D9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

id sub_100188D84(uint64_t a1)
{
  return [*(id *)(a1 + 32) setExecutionContexts:0];
}

void sub_100188DC0(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  int v6 = v5;
  if ((a3 & 1) != 0 || ![v5 count])
  {
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 136315138;
      id v15 = "-[ADArbitrationFeedbackManager _forwardToContextCollectorMessage:From:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Location Sharing Device or Context Collector not found. Returning.",  (uint8_t *)&v14,  0xCu);
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1011LL,  @"Unable to find location sharing device."));
    uint64_t v13 = *(void *)(a1 + 56);
    if (v13) {
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v10);
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 136315138;
      id v15 = "-[ADArbitrationFeedbackManager _forwardToContextCollectorMessage:From:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Forwarding arbitration request to context collector",  (uint8_t *)&v14,  0xCu);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
    id v9 = sub_100165580(v8);
    int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 assistantIdentifier]);
    [*(id *)(a1 + 32) _forwardToDevice:v11 message:*(void *)(a1 + 40) From:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
}

void sub_100188F74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315650;
      double v11 = "-[ADArbitrationFeedbackManager _forwardToDevice:message:From:completion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Error in forwarding arbitration info to %@: error:%@",  (uint8_t *)&v10,  0x20u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v5, v6);
  }
}

id sub_100189078(uint64_t a1, void *a2)
{
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([a2 idsDeviceUniqueIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_1001890B8(id a1, AFPeerInfo *a2, unint64_t a3, BOOL *a4)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo rapportEffectiveIdentifier](a2, "rapportEffectiveIdentifier", a3, a4));
  unsigned __int8 v5 = [v4 isEqualToString:@"BTPipe-Phone"];

  return v5;
}

void sub_1001890F8(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001891B4;
  block[3] = &unk_1004F95C8;
  char v15 = a3;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v14 = v7;
  void block[4] = v8;
  id v12 = v9;
  id v13 = v5;
  id v10 = v5;
  dispatch_async(v6, block);
}

void sub_1001891B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 64))
  {
    unsigned int v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) firstObject]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 _findContextCollectorIn:v4 withIDSIdentifier:v5]);

    if (v6)
    {
      id v7 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        char v15 = v7;
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 assistantIdentifier]);
        int v17 = 136315394;
        int v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
        __int16 v19 = 2112;
        int v20 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Target device is context collector: %@",  (uint8_t *)&v17,  0x16u);
      }

      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 assistantIdentifier]);
      (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v9, 0LL);
    }

    else
    {
      if (![*(id *)(a1 + 32) _shouldRouteThroughPairedPhone])
      {
        id v14 = (os_log_s *)AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
        {
          int v17 = 136315138;
          int v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Unable to find a locationSharing device or context collector. Returning.",  (uint8_t *)&v17,  0xCu);
        }

        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
        goto LABEL_10;
      }

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _findPairedPhoneIn:*(void *)(a1 + 40)]);
      id v10 = (os_log_s *)AFSiriLogContextConnection;
      BOOL v11 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG);
      if (v9)
      {
        if (v11)
        {
          int v17 = 136315138;
          int v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Unable to find a context collector. Try sending to the paired companion phone.",  (uint8_t *)&v17,  0xCu);
        }

        uint64_t v12 = *(void *)(a1 + 56);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 assistantIdentifier]);
        (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v13, 0LL);
      }

      else
      {
        if (v11)
        {
          int v17 = 136315138;
          int v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Unable to find a context collector or paired companion phone. Returning.",  (uint8_t *)&v17,  0xCu);
        }

        (*(void (**)(void, void, void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 0LL, 0LL);
      }
    }

LABEL_10:
    return;
  }

  id v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v17 = 136315138;
    int v18 = "-[ADArbitrationFeedbackManager _findTargetDeviceInDeviceCircleLocalPeer:remotePeers:completion:]_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Location sharing device not available and local device is already a context collector. returning.",  (uint8_t *)&v17,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

SCDAFDevice *__cdecl sub_1001894E8(id a1, AFPeerInfo *a2)
{
  id v2 = a2;
  unsigned int v3 = objc_opt_new(&OBJC_CLASS___SCDAFDevice);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo idsIdentifier](v2, "idsIdentifier"));
  id v5 = [v4 length];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo idsIdentifier](v2, "idsIdentifier"));
    -[SCDAFDevice setIdsIdentifier:](v3, "setIdsIdentifier:", v6);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo name](v2, "name"));
  id v8 = [v7 length];

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo name](v2, "name"));
    -[SCDAFDevice setName:](v3, "setName:", v9);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo buildVersion](v2, "buildVersion"));
  id v11 = [v10 length];

  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo buildVersion](v2, "buildVersion"));
    -[SCDAFDevice setBuild:](v3, "setBuild:", v12);
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo assistantIdentifier](v2, "assistantIdentifier"));
  id v14 = [v13 length];

  if (v14)
  {
    char v15 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo assistantIdentifier](v2, "assistantIdentifier"));
    -[SCDAFDevice setAssistantId:](v3, "setAssistantId:", v15);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo productType](v2, "productType"));
  id v17 = [v16 length];

  if (v17)
  {
    int v18 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo productType](v2, "productType"));
    id v19 = +[SCDAFDevice deviceClassFromProductTypeString:]( &OBJC_CLASS___SCDAFDevice,  "deviceClassFromProductTypeString:",  v18);

    int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v19));
    uint64_t v29 = v20;
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v29, 1LL));
    -[SCDAFDevice setDeviceClass:](v3, "setDeviceClass:", v21);

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo productType](v2, "productType"));
    uint32_t v28 = v22;
    id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));
    -[SCDAFDevice setProductTypes:](v3, "setProductTypes:", v23);
  }

  uint32_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo roomName](v2, "roomName"));
  id v25 = [v24 length];

  if (v25 && (objc_opt_respondsToSelector(v3, "setRoomName:") & 1) != 0)
  {
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerInfo roomName](v2, "roomName"));
    -[SCDAFDevice performSelector:withObject:](v3, "performSelector:withObject:", "setRoomName:", v26);
  }

  return v3;
}

void sub_100189794(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SCDAFDevice);
  uint64_t v3 = AFBuildVersion(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  -[SCDAFDevice setBuild:](v2, "setBuild:", v4);

  if (AFDeviceEnclosureRGBColor())
  {
    id v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"#%02X",  AFDeviceEnclosureRGBColor());
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    -[SCDAFDevice setEnclosureColor:](v2, "setEnclosureColor:", v6);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
  id v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 countryCode]);
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 languageCode]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 countryCode]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@_%@",  v10,  v11));
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 languageCode]);
    }

    if ([v12 length]) {
      -[SCDAFDevice setLocale:](v2, "setLocale:", v12);
    }
  }

  id v13 = sub_1000FCF8C(0LL);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  uint64_t v16 = v14;
  if (v14)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v14 connectedBTProductID]);

    if (v17)
    {
      int v18 = (void *)objc_claimAutoreleasedReturnValue([v16 connectedBTProductID]);
      uint64_t v19 = CBProductIDFromNSString();

      int v20 = (void *)objc_claimAutoreleasedReturnValue( +[CBProductInfo productInfoWithProductID:]( &OBJC_CLASS___CBProductInfo,  "productInfoWithProductID:",  v19));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v20 model]);
    }
  }

  else
  {
    id v17 = 0LL;
  }

  uint64_t v21 = AFProductType(v14, v15);
  uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
  id v23 = (void *)v22;
  if (v22 && v17)
  {
    v44[0] = v22;
    v44[1] = v17;
    uint32_t v24 = v44;
    uint64_t v25 = 2LL;
  }

  else
  {
    if (!v22) {
      goto LABEL_20;
    }
    uint64_t v43 = v22;
    uint32_t v24 = &v43;
    uint64_t v25 = 1LL;
  }

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v24, v25));
  -[SCDAFDevice setProductTypes:](v2, "setProductTypes:", v26);

LABEL_20:
  uint64_t v27 = AFUserAssignedDeviceName();
  uint32_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  -[SCDAFDevice setName:](v2, "setName:", v28);

  [*(id *)(a1 + 32) setDevice:v2];
  uint64_t v29 = dispatch_group_create();
  dispatch_group_enter(v29);
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100189B7C;
  v37[3] = &unk_1004F4080;
  id v31 = *(id *)(a1 + 32);
  uint64_t v32 = *(void *)(a1 + 40);
  id v38 = v31;
  uint64_t v39 = v32;
  uint64_t v33 = v29;
  uint64_t v40 = v33;
  [v30 fetchActiveAccount:v37];

  dispatch_time_t v34 = dispatch_time(0LL, 1000000000LL);
  uint64_t v35 = dispatch_group_wait(v33, v34);
  uint64_t v36 = (os_log_s *)AFSiriLogContextConnection;
  if (v35)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v42 = "-[ADArbitrationFeedbackManager _createDeviceInfoOperationForParticipation:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s #myriad #feedback failed to created device info",  buf,  0xCu);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v42 = "-[ADArbitrationFeedbackManager _createDeviceInfoOperationForParticipation:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback successfully created device info",  buf,  0xCu);
  }
}

void sub_100189B7C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 device]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 assistantIdentifier]);
  [v5 setAssistantId:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) device]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 speechIdentifier]);
  [v7 setSpeechId:v8];

  uint64_t v9 = *(void **)(*(void *)(a1 + 40) + 40LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 assistantIdentifier]);

  [v9 setLocalDeviceAssistantIdentifier:v10];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100189C44(uint64_t a1)
{
  id v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceCircleManager]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100189DF4;
  v8[3] = &unk_1004F4030;
  v8[4] = *(void *)(a1 + 32);
  id v4 = v2;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 40);
  [v3 getManagedLocalAndRemotePeerInfoWithCompletion:v8];

  dispatch_time_t v5 = dispatch_time(0LL, 1000000000LL);
  uint64_t v6 = dispatch_group_wait(v4, v5);
  id v7 = (os_log_s *)AFSiriLogContextConnection;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v12 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #myriad #feedback failed to publish",  buf,  0xCu);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v12 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback successfully published",  buf,  0xCu);
  }
}

void sub_100189DF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    int v18 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback About to call _findTargetDeviceInDeviceCircleLocalPeer.",  buf,  0xCu);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_100189F40;
  void v12[3] = &unk_1004F4058;
  id v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v13 = v9;
  uint64_t v14 = v10;
  id v15 = *(id *)(a1 + 48);
  id v16 = v5;
  id v11 = v5;
  [v8 _findTargetDeviceInDeviceCircleLocalPeer:v11 remotePeers:v6 completion:v12];
}

void sub_100189F40(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (![v5 length])
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v25 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Unable to find a target device to publish arbitration feedback. Returning.",  buf,  0xCu);
    }

    goto LABEL_8;
  }

  if (a3)
  {
    id v6 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v25 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Local device is location sharing device",  buf,  0xCu);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) feedbackService]);
    [v7 handleReceivedArbitrationParticipation:*(void *)(a1 + 48)];

LABEL_8:
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
    goto LABEL_17;
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) buildDictionaryRepresentation]);
  uint64_t v10 = (void *)v9;
  id v11 = &__NSDictionary0__struct;
  if (v9) {
    id v11 = (void *)v9;
  }
  id v12 = v11;

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dictionaryRepresentation]);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dictionaryRepresentation]);
    v22[0] = @"ADArbitrationParticipationMessage";
    v22[1] = @"ADArbitrationParticipationOriginDevice";
    v23[0] = v14;
    v23[1] = v12;
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  2LL));
    uint64_t v16 = *(void *)(a1 + 56);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_10018A214;
    v20[3] = &unk_1004F86D0;
    id v17 = *(void **)(a1 + 40);
    id v21 = *(id *)(a1 + 32);
    [v17 _forwardToDevice:v5 message:v15 From:v16 completion:v20];
  }

  else
  {
    int v18 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 136315394;
      uint64_t v25 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      __int16 v26 = 2112;
      uint64_t v27 = v19;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback SCDAFParticipation could not be serialized: %@",  buf,  0x16u);
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }

LABEL_17:
}

void sub_10018A214(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  if (v4)
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315394;
      id v7 = "-[ADArbitrationFeedbackManager _createPublishOperationForParticipation:]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Error in publishParticipation: %@",  (uint8_t *)&v6,  0x16u);
    }
  }
}

void sub_10018A2E4(uint64_t a1)
{
  id v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceCircleManager]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 localPeerInfo]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 idsIdentifier]);
    id v6 = [v5 length];

    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) device]);
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v4 idsIdentifier]);
      [v7 setIdsIdentifier:v8];
    }
  }

  id v9 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315394;
    id v21 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v16;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback participation:%@",  buf,  0x16u);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceCircleManager]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_10018A578;
  v17[3] = &unk_1004F4030;
  id v11 = *(void **)(a1 + 40);
  void v17[4] = *(void *)(a1 + 32);
  id v18 = v11;
  id v12 = v2;
  uint64_t v19 = v12;
  [v10 getManagedLocalAndRemotePeerInfoWithCompletion:v17];

  dispatch_time_t v13 = dispatch_time(0LL, 1000000000LL);
  uint64_t v14 = dispatch_group_wait(v12, v13);
  id v15 = (os_log_s *)AFSiriLogContextConnection;
  if (v14)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      id v21 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s #myriad #feedback failed to peer info identifiers",  buf,  0xCu);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    id v21 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback successfully peer info identifiers",  buf,  0xCu);
  }
}

void sub_10018A578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v7 = [a3 copy];
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _nearByDevicesFrom:v7]);

  id v9 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = v9;
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v8 count]));
    int v16 = 136315394;
    id v17 = "-[ADArbitrationFeedbackManager _createPeerInfoUpdateOperationForParticipation:]_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback nearByDevices count:%@",  (uint8_t *)&v16,  0x16u);
  }

  [*(id *)(a1 + 40) setNearbyDevices:v8];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 roomName]);
  id v11 = [v10 length];

  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) device]);
    dispatch_time_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 roomName]);
    [v12 setRoomName:v13];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10018A718(uint64_t a1)
{
  id v2 = dispatch_group_create();
  dispatch_group_enter(v2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10018A8C8;
  v9[3] = &unk_1004F9100;
  id v4 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v4;
  id v5 = v2;
  id v11 = v5;
  [v3 getCurrentContextSnapshotWithCompletion:v9];

  dispatch_time_t v6 = dispatch_time(0LL, 1000000000LL);
  uint64_t v7 = dispatch_group_wait(v5, v6);
  __int16 v8 = (os_log_s *)AFSiriLogContextConnection;
  if (v7)
  {
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      dispatch_time_t v13 = "-[ADArbitrationFeedbackManager _createDeviceContextUpdateOperationForParticipation:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s #myriad #feedback failed to retrieve device context info",  buf,  0xCu);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    dispatch_time_t v13 = "-[ADArbitrationFeedbackManager _createDeviceContextUpdateOperationForParticipation:]_block_invoke_2";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback successfully retrieved device context info",  buf,  0xCu);
  }
}

void sub_10018A8C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v16;
    while (2)
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v15 + 1) + 8 * (void)i) content]);
        id v11 = [v10 copy];

        if ([v11 fromLocalDevice])
        {
          -[NSMutableArray addObject:](v4, "addObject:", v11);

          goto LABEL_11;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

void sub_10018AA70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 serializedContextForKey:AFDeviceContextKeyPlaybackState]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 serializedContextForKey:AFDeviceContextKeyTimer]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 serializedContextForKey:AFDeviceContextKeyAlarm]);
  if (v4)
  {
    id v7 = -[AFMediaPlaybackStateSnapshot initWithSerializedBackingStore:]( objc_alloc(&OBJC_CLASS___AFMediaPlaybackStateSnapshot),  "initWithSerializedBackingStore:",  v4);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_mediaStateFrom:",  -[AFMediaPlaybackStateSnapshot playbackState](v7, "playbackState")));
    [*(id *)(a1 + 40) setMediaState:v8];
  }

  if (v5)
  {
    id v9 = -[AFClockTimerSnapshot initWithSerializedBackingStore:]( objc_alloc(&OBJC_CLASS___AFClockTimerSnapshot),  "initWithSerializedBackingStore:",  v5);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[AFClockTimerSnapshot notifiedFiringTimerIDs](v9, "notifiedFiringTimerIDs"));
    id v11 = [v10 count];

    if (v11)
    {
      id v12 = &off_100513378;
    }

    else
    {
      dispatch_time_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[AFClockTimerSnapshot timersByID](v9, "timersByID"));
      id v14 = [v13 count];

      id v12 = &off_100513360;
      if (v14)
      {
        uint64_t v25 = 0LL;
        __int16 v26 = &v25;
        uint64_t v27 = 0x2020000000LL;
        char v28 = 0;
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(-[AFClockTimerSnapshot timersByID](v9, "timersByID"));
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472LL;
        void v24[2] = sub_10018AD8C;
        v24[3] = &unk_1004FD3F8;
        v24[4] = &v25;
        [v15 enumerateKeysAndObjectsUsingBlock:v24];

        if (*((_BYTE *)v26 + 24)) {
          id v12 = &off_100513390;
        }
        _Block_object_dispose(&v25, 8);
      }
    }

    [*(id *)(a1 + 40) setTimerState:v12];
  }

  if (v6)
  {
    __int128 v16 = -[AFClockAlarmSnapshot initWithSerializedBackingStore:]( objc_alloc(&OBJC_CLASS___AFClockAlarmSnapshot),  "initWithSerializedBackingStore:",  v6);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(-[AFClockAlarmSnapshot notifiedFiringAlarmIDs](v16, "notifiedFiringAlarmIDs"));
    id v18 = [v17 count];

    if (v18)
    {
      uint64_t v19 = &off_100513378;
    }

    else
    {
      int v20 = (void *)objc_claimAutoreleasedReturnValue(-[AFClockAlarmSnapshot alarmsByID](v16, "alarmsByID"));
      id v21 = [v20 count];

      uint64_t v19 = &off_100513360;
      if (v21)
      {
        uint64_t v25 = 0LL;
        __int16 v26 = &v25;
        uint64_t v27 = 0x2020000000LL;
        char v28 = 0;
        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[AFClockAlarmSnapshot alarmsByID](v16, "alarmsByID"));
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        void v23[2] = sub_10018ADD0;
        v23[3] = &unk_1004FD380;
        void v23[4] = &v25;
        [v22 enumerateKeysAndObjectsUsingBlock:v23];

        if (*((_BYTE *)v26 + 24)) {
          uint64_t v19 = &off_100513390;
        }
        _Block_object_dispose(&v25, 8);
      }
    }

    [*(id *)(a1 + 40) setAlarmState:v19];
  }
}

void sub_10018AD70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

id sub_10018AD8C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 state];
  if (result == (id)3)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10018ADD0(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v8 = a3;
  if ([v8 isEnabled])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 dismissedDate]);
    if (v6)
    {
    }

    else
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 firedDate]);

      if (!v7)
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
        *a4 = 1;
      }
    }
  }
}

void sub_10018AE58(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained executionContexts]);
    if (!v4)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 rootExecutionContexts]);
    }

    [v3 setExecutionContexts:0];
    if ([v4 count])
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_10018B034;
      v8[3] = &unk_1004F3FE0;
      id v9 = a1[4];
      id v10 = a1[5];
      [v4 enumerateKeysAndObjectsUsingBlock:v8];
    }

    else
    {
      id v7 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        id v12 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #myriad #feedback no execution contexts found. User request will be missing from feedback tool.",  buf,  0xCu);
      }
    }
  }

  else
  {
    id v6 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v12 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #myriad #feedback FeedbackManager instance deallocated. Returning.",  buf,  0xCu);
    }
  }
}

void sub_10018B034(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 info]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 turnId]);
  unsigned int v11 = [v10 isEqual:*(void *)(a1 + 32)];

  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 info]);
    [*(id *)(a1 + 40) setRequestId:v7];
    dispatch_time_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 speechInfo]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 speechRecognizedCommand]);

    if (v14)
    {
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 speechInfo]);
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 speechRecognizedCommand]);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "af_bestTextInterpretation"));
      [*(id *)(a1 + 40) setUserRequestText:v17];
      id v18 = (os_log_s *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315394;
        int v20 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v17;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback _currentRequestRecognizedText: %@",  (uint8_t *)&v19,  0x16u);
        id v18 = (os_log_s *)AFSiriLogContextConnection;
      }

      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315394;
        int v20 = "-[ADArbitrationFeedbackManager _createRequestInfoUpdateOperationForParticipation:forTurnId:]_block_invoke";
        __int16 v21 = 2112;
        id v22 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback _requestID: %@",  (uint8_t *)&v19,  0x16u);
      }

      *a4 = 1;
    }
  }
}

void sub_10018B24C(id a1, SAAceCommand *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315650;
    id v8 = "-[ADArbitrationFeedbackManager handleUserFeedbackAction:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v4;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s #myriad #feedback Launch feedback app completed. Response: %@, Error: %@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_10018B3A0(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) _init];
  id v2 = (void *)qword_100577FE8;
  qword_100577FE8 = (uint64_t)v1;
}

id sub_10018CFF4(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result != *(id *)(a1 + 40))
  {
    id result = objc_msgSend(result, "isEqual:");
    if ((result & 1) == 0)
    {
      id v3 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        __int16 v11 = "-[ADLocalContextStore localPeerInfoUpdatedFrom:to:]_block_invoke";
        __int16 v12 = 2112;
        uint64_t v13 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s #hal local peer info updated: %@",  buf,  0x16u);
      }

      [*(id *)(a1 + 48) _updateLocalPeerInfo:*(void *)(a1 + 40)];
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      id v8 = @"local_context_type";
      uint64_t v5 = AFDeviceContextKeyDeviceInfo;
      uint64_t v9 = AFDeviceContextKeyDeviceInfo;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
      [v4 logEventWithType:4575 context:v6];

      return [*(id *)(a1 + 48) _pushContextToCollectorsForReason:v5 completion:0];
    }
  }

  return result;
}

void sub_10018D150(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = AFIsATV(a1, a2);
  if ((v3 & 1) != 0 || AFIsHorseman(v3, v4))
  {
    [*(id *)(a1 + 32) _pushContextToCollectorsForReason:@"ContextCollectorChanged" completion:0];
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v19 = a1;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:&off_1005133F0]);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allContextKeys]);
    id v8 = [v7 countByEnumeratingWithState:&v20 objects:v30 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v21;
      while (2)
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v20 + 1) + 8LL * (void)i);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 contextMetadataForKey:v12]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 expirationDate]);
          id v15 = [v14 compare:v5];

          if (v15 == (id)1)
          {
            __int128 v16 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              __int128 v17 = v16;
              id v18 = (void *)objc_claimAutoreleasedReturnValue([v13 expirationDate]);
              *(_DWORD *)buf = 136315650;
              uint64_t v25 = "-[ADLocalContextStore contextCollectorChangedToDevicesWithIdentifiers:localDeviceIsCollector:]_block_invoke";
              __int16 v26 = 2112;
              uint64_t v27 = v12;
              __int16 v28 = 2112;
              uint64_t v29 = v18;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s %@ context is active with expiration date: %@",  buf,  0x20u);
            }

            [*(id *)(v19 + 32) _pushContextToCollectorsForReason:@"ContextCollectorChanged" completion:0];

            goto LABEL_16;
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v20 objects:v30 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

void sub_10018D3C8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v12 = @"local_context_type";
  uint64_t v13 = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  [v2 logEventWithType:4575 context:v4];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:&off_100513420]);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:&off_100513420]);
    [*(id *)(*(void *)(a1 + 48) + 8) setSerializedContextSnapshot:v5 withMetadata:v6];
  }

  else
  {
    [*(id *)(*(void *)(a1 + 48) + 8) removeContextSnapshotForType:*(void *)(a1 + 32)];
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:&off_1005133F0]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 16) objectForKey:&off_1005133F0]);
  id v9 = v8;
  if (v7)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:&off_1005133F0]);
    [v9 setSerializedContextSnapshot:v7 withMetadata:v10];
  }

  else
  {
    [v8 removeContextSnapshotForType:*(void *)(a1 + 32)];
  }

  if (*(_BYTE *)(a1 + 72)) {
    [*(id *)(a1 + 48) _pushContextToCollectorsForReason:*(void *)(a1 + 32) completion:0];
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
  [*(id *)(a1 + 48) _didUpdateContext];
}

void sub_10018D594(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) type]);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    uint64_t v19 = @"local_context_type";
    __int128 v20 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    [v3 logEventWithType:4575 context:v4];

    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(void **)(*(void *)(a1 + 48) + 8LL);
    if (v5)
    {
      [v6 setContextSnapshot:v5 withMetadata:*(void *)(a1 + 32)];
      uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) objectForKey:v2]);
      if (v7)
      {
        id v8 = (void *)v7;
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        void v12[2] = sub_10018D7C0;
        void v12[3] = &unk_1004F4290;
        void v12[4] = *(void *)(a1 + 48);
        id v13 = v2;
        char v14 = *(_BYTE *)(a1 + 56);
        [v8 getRedactedContextForContextSnapshot:v9 metadata:v10 privacyPolicy:50 completion:v12];
      }

      else
      {
        uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          __int128 v16 = "-[ADLocalContextStore donateContext:withMetadata:pushToRemote:]_block_invoke";
          __int16 v17 = 2112;
          id v18 = v2;
          _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s #hal No transformer for %@, not pushing to remote",  buf,  0x16u);
        }

        id v8 = 0LL;
      }
    }

    else
    {
      [v6 removeContextSnapshotForType:v2];
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 16) objectForKey:&off_1005133F0]);
      [v8 removeContextSnapshotForType:v2];
      if (*(_BYTE *)(a1 + 56)) {
        [*(id *)(a1 + 48) _pushContextToCollectorsForReason:v2 completion:0];
      }
    }

    [*(id *)(a1 + 48) _didUpdateContext];
  }
}

void sub_10018D7C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10018D888;
  block[3] = &unk_1004F5690;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 48);
  block[1] = 3221225472LL;
  id v13 = v5;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v8;
  char v17 = *(_BYTE *)(a1 + 48);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

void sub_10018D888(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315651;
    id v8 = "-[ADLocalContextStore donateContext:withMetadata:pushToRemote:]_block_invoke_3";
    __int16 v9 = 2113;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal Redacted version: %{private}@ %@",  (uint8_t *)&v7,  0x20u);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 16) objectForKey:&off_1005133F0]);
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32))
  {
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v3, "setContextSnapshot:withMetadata:");
    }
  }

  else
  {
    [v3 removeContextSnapshotForType:*(void *)(a1 + 56)];
  }
}

id sub_10018D9B4(void *a1)
{
  return [*(id *)(a1[4] + 24) setObject:a1[5] forKey:a1[6]];
}

void sub_10018D9C8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (![v5 count])
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_8;
    }
    *(_DWORD *)buf = 136315138;
    uint64_t v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
    int v7 = "%s #hal Context Collector unavailable";
    goto LABEL_7;
  }

  if (!a3)
  {
    __int16 v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10018DB70;
    v13[3] = &unk_1004FDA30;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(a1 + 40);
    id v14 = v10;
    uint64_t v15 = v11;
    id v16 = v12;
    id v17 = *(id *)(a1 + 48);
    dispatch_async(v9, v13);

    goto LABEL_11;
  }

  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v19 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
    int v7 = "%s #hal Local device is Context Collector, skip pushing context";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v7, buf, 0xCu);
  }

void sub_10018DB70(uint64_t a1)
{
  id v2 = dispatch_group_create();
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v29[0] = 0LL;
  v29[1] = v29;
  v29[2] = 0x3032000000LL;
  v29[3] = sub_10018DE18;
  v29[4] = sub_10018DE28;
  id v30 = 0LL;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v26;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)v6);
        dispatch_group_enter(v2);
        uint64_t v8 = *(void **)(a1 + 40);
        uint64_t v9 = *(void *)(a1 + 48);
        id v10 = (void *)v8[5];
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 _contextLinkMessageOptions]);
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472LL;
        void v21[2] = sub_10018DE30;
        v21[3] = &unk_1004F4240;
        uint64_t v12 = *(void *)(a1 + 40);
        uint32_t v24 = v29;
        void v21[4] = v12;
        v21[5] = v7;
        __int128 v22 = v3;
        __int128 v23 = v2;
        [v10 sendRequestID:@"com.apple.siri.rapport-link.request.generic" messageType:@"context_push" messagePayload:v9 toDeviceWithIDSDeviceID:v7 options:v11 completion:v21];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }

    while (v4);
  }

  id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 48LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10018DF10;
  block[3] = &unk_1004FAFF0;
  id v14 = *(id *)(a1 + 56);
  id v18 = v3;
  id v19 = v14;
  __int128 v20 = v29;
  uint64_t v15 = v3;
  dispatch_group_notify(v2, v13, block);

  _Block_object_dispose(v29, 8);
}

void sub_10018DDF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

uint64_t sub_10018DE18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10018DE28(uint64_t a1)
{
}

void sub_10018DE30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 48LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10018DF78;
  void v11[3] = &unk_1004F4218;
  id v12 = v5;
  id v13 = v6;
  uint64_t v17 = *(void *)(a1 + 64);
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_10018DF10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v3 = [*(id *)(a1 + 32) copy];
    (*(void (**)(uint64_t, id, void))(v1 + 16))( v1,  v3,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }

void sub_10018DF78(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    uint64_t v11 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includingKeysInRe"
          "sponse:excludingMandatoryKeysInResponse:completion:]_block_invoke_3";
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal response: %@, error: %@",  buf,  0x20u);
  }

  id v3 = *(void **)(a1 + 40);
  if (v3)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), v3);
  }

  else
  {
    id v4 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10018E0B4;
    v8[3] = &unk_1004F41F0;
    id v5 = *(void **)(a1 + 56);
    void v8[4] = *(void *)(a1 + 48);
    id v9 = v5;
    [v4 enumerateKeysAndObjectsUsingBlock:v8];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_10018E0B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
  {
    id v9 = v7;

    if (v9)
    {
      id v10 = v6;
      uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary);
      if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      {
        id v12 = v10;

        if (v12)
        {
          id v13 = sub_10016ABE0(v9);
          __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          if (v14 || (v15 = sub_100165580(v9), (__int16 v14 = (void *)objc_claimAutoreleasedReturnValue(v15)) != 0LL))
          {
            id v16 = -[AFDeviceContext initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:]( objc_alloc(&OBJC_CLASS___AFDeviceContext),  "initWithSerializedBackingStore:fromLocalDevice:contextCollectorSource:",  v12,  0LL,  *(void *)(a1 + 32));
            uint64_t v17 = *(void **)(a1 + 40);
            id v18 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v14,  v16);
            [v17 addObject:v18];
          }

          else
          {
            __int128 v21 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              int v22 = 136315394;
              __int128 v23 = "-[ADLocalContextStore _pushContextToCollector:forReason:includingKeys:excludingMandatoryKeys:includi"
                    "ngKeysInResponse:excludingMandatoryKeysInResponse:completion:]_block_invoke";
              __int16 v24 = 2112;
              id v25 = v9;
              _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s #hal Unable to resolve device ID %@ to peer info. Skipping",  (uint8_t *)&v22,  0x16u);
            }
          }

void sub_10018E360(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _deviceContextToVendForPrivacyClass:50]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( [v2 partialSerializedBackingStoreIncludingKeys:*(void *)(a1 + 32) excludingMandatoryKeys:*(void *)(a1 + 48)]);
    if (v3)
    {
      [*(id *)(a1 + 40) _pushContextToCollector:v3 forReason:@"external_request" includingKeys:*(void *)(a1 + 32) excludingMandatoryKeys:*(void *)(a1 + 48) includingKeysInResponse:*(void *)(a1 + 56) excludingMandator yKeysInResponse:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
    }

    else
    {
      id v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        id v10 = "-[ADLocalContextStore pushContextToContextCollectorIncludingKeys:excludingMandatoryKeys:expectingResponseI"
              "ncludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s #hal serialized context is nil",  buf,  0xCu);
      }

      uint64_t v7 = *(void *)(a1 + 72);
      if (v7)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3100LL));
        (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
      }
    }
  }

  else
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      id v10 = "-[ADLocalContextStore pushContextToContextCollectorIncludingKeys:excludingMandatoryKeys:expectingResponseInc"
            "ludingKeys:excludingMandatoryKeys:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s #hal nothing specified in includedKeysInPush",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 72);
    if (v5) {
      (*(void (**)(uint64_t, void, void))(v5 + 16))(v5, 0LL, 0LL);
    }
  }

id sub_10018E528(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "addListener:");
}

void sub_10018E564(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _localContextWithPrivacyClass:*(void *)(a1 + 48)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10018E5A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _localContextWithPrivacyClass:*(void *)(a1 + 48)]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10018E5EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) localPeerInfo]);
  [*(id *)(a1 + 32) _updateLocalPeerInfo:v2];
}

id sub_10018E634(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _initializeBuiltInContextProviders];
}

void sub_10018E768(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:&off_1005133F0]);
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v4 = objc_alloc(&OBJC_CLASS___AFDeviceContextMetadata);
    uint64_t v5 = AFDeviceContextKeyMyriadAdvertisement;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 dateByAddingTimeInterval:15.0]);
    id v7 = [v4 initWithType:v5 deliveryDate:v3 expirationDate:v6 redactedKeyPaths:0 historyConfiguration:0];

    [*(id *)(*(void *)(a1 + 32) + 8) setSerializedContextSnapshot:*(void *)(a1 + 40) withMetadata:v7];
    [v2 setSerializedContextSnapshot:*(void *)(a1 + 40) withMetadata:v7];
  }

  else
  {
    uint64_t v5 = AFDeviceContextKeyMyriadAdvertisement;
    [*(id *)(*(void *)(a1 + 32) + 8) removeContextSnapshotForType:AFDeviceContextKeyMyriadAdvertisement];
    [v2 removeContextSnapshotForType:v5];
  }

  [*(id *)(a1 + 32) _didUpdateContext];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  uint64_t v11 = @"local_context_type";
  uint64_t v12 = v5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  [v8 logEventWithType:4575 context:v9];

  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_10018FDB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
  char isKindOfClass = objc_opt_isKindOfClass(v5, v7);
  id v9 = (os_log_s *)AFSiriLogContextDaemon;
  if ((isKindOfClass & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = "remote";
      if (*(void *)(a1 + 48) == 1LL) {
        uint64_t v10 = "local";
      }
      *(_DWORD *)buf = 136315394;
      __int128 v21 = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke_2";
      __int16 v22 = 2080;
      __int128 v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s %s MRMediaRemoteCommandPlay returned success",  buf,  0x16u);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 48);
      __int128 v21 = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
      *(_DWORD *)buf = 136315650;
      if (v14 == 1) {
        id v15 = "local";
      }
      else {
        id v15 = "remote";
      }
      __int16 v22 = 2080;
      __int128 v23 = v15;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s %s MRMediaRemoteCommandPlay did not return success %@",  buf,  0x20u);
    }

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100190444;
    v16[3] = &unk_1004FD9E0;
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 48);
    id v19 = *(id *)(a1 + 40);
    id v17 = v5;
    id v18 = v6;
    [v12 handleFailedStartPlaybackWithDestination:v13 completion:v16];
  }
}

void sub_10018FFDC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Failed to prepare for StartPlayback, failing without sending MRMediaRemoteCommandPlay",  buf,  0xCu);
    }

    uint64_t v10 = -[SACommandFailed initWithReason:]( objc_alloc(&OBJC_CLASS___SACommandFailed),  "initWithReason:",  @"Client failed to prepare for StartPlayback");
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 80);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    void v22[2] = sub_100190310;
    v22[3] = &unk_1004FD990;
    id v13 = *(id *)(a1 + 64);
    __int128 v23 = v10;
    id v24 = v13;
    uint64_t v3 = v10;
    [v11 handleFailedStartPlaybackWithDestination:v12 completion:v22];

    uint64_t v8 = v24;
    goto LABEL_9;
  }

  uint64_t v3 = (SACommandFailed *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) appId]);
  if (v3)
  {
LABEL_3:
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Sending MRMediaRemoteCommandPlay to %@",  buf,  0x16u);
    }

    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) targetQueue]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_100190330;
    v19[3] = &unk_1004F42E0;
    __int128 v21 = buf;
    id v20 = *(id *)(a1 + 72);
    char v7 = MRMediaRemoteSendCommandToApp(0LL, v5, 0LL, v3, 1LL, v6, v19);

    *(_BYTE *)(*(void *)&buf[8] + 24LL) = v7;
    _Block_object_dispose(buf, 8);
    uint64_t v8 = v20;
LABEL_9:

    goto LABEL_10;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) targetAppId]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 scheme]);
  unsigned __int8 v16 = [v15 isEqualToString:@"x-apple-siri-app"];

  if ((v16 & 1) != 0)
  {
    uint64_t v3 = (SACommandFailed *)objc_claimAutoreleasedReturnValue([v14 host]);

    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
  }

  id v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Sending MRMediaRemoteCommandPlay now",  buf,  0xCu);
  }

  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v3 = (SACommandFailed *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) targetQueue]);
  AFMediaRemoteSendCommandWithOptions(0LL, v18, v3, *(void *)(a1 + 72));
LABEL_10:
}

uint64_t sub_100190310(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(void *)(a1 + 32), 0LL);
  }
  return result;
}

void sub_100190330(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v11 = 136315906;
    uint64_t v12 = "-[SANPStartPlayback(ADMediaRemote) _ad_performWithMediaRemoteService:replyHandler:]_block_invoke";
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = a2;
    __int16 v17 = 2112;
    uint64_t v18 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Sent = %d mrError=%d statuses = %@",  (uint8_t *)&v11,  0x22u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = AFCommandOutcomeFromMediaRemoteStatuses(a3);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v10, 0LL);
  }

uint64_t sub_100190444(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_10019054C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v12 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "_ad_mediaRemoteOptions"));
  if (v12) {
    [v11 addEntriesFromDictionary:v12];
  }
  AFMediaRemoteSendCommandWithOptions(a1, v11, v9, v10);
}

void sub_100190A90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100190BAC;
  v13[3] = &unk_1004F4330;
  id v16 = *(id *)(a1 + 40);
  id v8 = v5;
  id v14 = v8;
  id v9 = v6;
  id v15 = v9;
  id v10 = -[AFSafetyBlock initWithBlock:](v7, "initWithBlock:", v13);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
  if ((objc_opt_isKindOfClass(v8, v11) & 1) != 0)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) volumeTracker]);
    [v12 setDirtySiriOutputVolumeHostTime:*(void *)(a1 + 48)];

    -[AFSafetyBlock invoke](v10, "invoke");
  }
}

uint64_t sub_100190BAC(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_100191570(void **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5
    && (int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:kMRMediaRemoteNowPlayingInfoMediaType])) != 0
    && (id v8 = v7,
        unsigned int v9 = [v7 isEqualToString:kMRMediaRemoteMediaTypeITunesRadio],
        v8,
        v9))
  {
    id v10 = (void (**)(void *, SACommandFailed *, void))a1[6];
    uint64_t v11 = objc_alloc(&OBJC_CLASS___SACommandFailed);
    id v12 = -[SACommandFailed initWithErrorCode:](v11, "initWithErrorCode:", SAMPCannotGoBackToPreviousRadioSongErrorCode);
    v10[2](v10, v12, 0LL);
  }

  else
  {
    uint64_t v13 = kMRMediaRemoteOptionPlaybackPosition;
    id v14 = &off_100513B98;
    id v12 = (SACommandFailed *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
    sub_10019054C(24LL, a1[4], v12, a1[5], a1[6]);
  }
}

void sub_100191844(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = objc_alloc_init(&OBJC_CLASS___SAMPGetStateResponse);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 listeningToItem]);
  [v9 setListeningToItem:v4];

  objc_msgSend(v9, "setState:", objc_msgSend(v3, "state"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 source]);
  [v9 setSource:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 applicationIdentifier]);
  id v7 = [v6 isEqualToString:@"com.apple.music"];

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v7));
  [v9 setListeningToMusicApplication:v8];

  [v9 setHashedGroupID:0];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100191A68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 40);
    id v9 = &stru_1004FECA0;
    if (v6) {
      id v9 = v6;
    }
    int v13 = 136315906;
    id v14 = "-[SADomainCommand(ADMediaRemote) _ad_performAudioPausingCommand:mediaRemoteService:replyHandler:]_block_invoke";
    __int16 v15 = 1024;
    int v16 = v8;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Sent MRMediaRemoteCommand %d, got %@ %@",  (uint8_t *)&v13,  0x26u);
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    if (*(_BYTE *)(a1 + 44))
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315138;
        id v14 = "-[SADomainCommand(ADMediaRemote) _ad_performAudioPausingCommand:mediaRemoteService:replyHandler:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s reporting success", (uint8_t *)&v13, 0xCu);
        uint64_t v10 = *(void *)(a1 + 32);
      }

      id v12 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      (*(void (**)(uint64_t, SACommandSucceeded *, void))(v10 + 16))(v10, v12, 0LL);
    }

    else
    {
      (*(void (**)(void, id, __CFString *))(v10 + 16))(*(void *)(a1 + 32), v5, v6);
    }
  }
}

uint64_t sub_100192C5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100192C6C(uint64_t a1)
{
}

void sub_100192C74(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void ***)(a1 + 40);
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_sessionWithUUID:"));
  }

  else
  {
    id v5 = sub_1002D7D50(v2[1], &stru_1004FAA38);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lastObject]);
    int v8 = v7;
    if (v7) {
      id v9 = v7;
    }
    else {
      id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _startedOrStartingSession]);
    }
    id v4 = v9;
  }

  uint64_t v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = v10;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
    int v17 = 136315394;
    id v18 = "-[ADDictationSessionTracker notifyAudioFileIOTransactionStoppedForReason:sessionUUID:]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v17, 0x16u);
  }

  if (v4)
  {
    [*(id *)(a1 + 40) _endAudioFileIOTransactionForReason:*(void *)(a1 + 48) session:v4];
  }

  else
  {
    int v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v14 = *(void **)(a1 + 32);
      int v17 = 136315394;
      id v18 = "-[ADDictationSessionTracker notifyAudioFileIOTransactionStoppedForReason:sessionUUID:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Can not find an active session with UUID %@",  (uint8_t *)&v17,  0x16u);
    }
  }

  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0LL;
}

void sub_100192E44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void ***)(a1 + 40);
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_sessionWithUUID:"));
  }

  else
  {
    id v5 = sub_1002D7D50(v2[1], &stru_1004FAA18);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lastObject]);
    int v8 = v7;
    if (v7) {
      id v9 = v7;
    }
    else {
      id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _startedOrStartingSession]);
    }
    id v4 = v9;
  }

  uint64_t v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = v10;
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 uuid]);
    int v17 = 136315394;
    id v18 = "-[ADDictationSessionTracker notifySpeechRecognitionTransactionStoppedForReason:sessionUUID:]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v17, 0x16u);
  }

  if (v4)
  {
    [*(id *)(a1 + 40) _endSpeechRecognitionTransactionForReason:*(void *)(a1 + 48) session:v4];
  }

  else
  {
    int v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v14 = *(void **)(a1 + 32);
      int v17 = 136315394;
      id v18 = "-[ADDictationSessionTracker notifySpeechRecognitionTransactionStoppedForReason:sessionUUID:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Can not find an active session with UUID %@",  (uint8_t *)&v17,  0x16u);
    }
  }

  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0LL;
}

void sub_100193014(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _startedOrStartingSession]);
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 uuid]);
    int v9 = 136315394;
    uint64_t v10 = "-[ADDictationSessionTracker stopSessionForReason:]_block_invoke";
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v9, 0x16u);
  }

  if (v2)
  {
    if ([v2 speechRecognitionTransactionState]) {
      [v2 _setSpeechRecognitionTransactionState:3];
    }
    if ([v2 audioFileIOTransactionState]) {
      [v2 _setAudioFileIOTransactionState:3];
    }
  }

  else
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      uint64_t v10 = "-[ADDictationSessionTracker stopSessionForReason:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Can not find an active session",  (uint8_t *)&v9,  0xCu);
    }
  }

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0LL;
}

void sub_1001931A8(uint64_t a1)
{
  id v2 = -[ADDictationSession initWithUUID:timestamp:languageCode:options:speechRequestOptions:]( objc_alloc(&OBJC_CLASS___ADDictationSession),  "initWithUUID:timestamp:languageCode:options:speechRequestOptions:",  *(void *)(a1 + 32),  *(void *)(a1 + 88),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
  uint64_t v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v4 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[ADDictationSession uuid](v2, "uuid"));
    int v8 = 136315394;
    int v9 = "-[ADDictationSessionTracker startSessionForReason:languageCode:options:speechRequestOptions:]_block_invoke";
    __int16 v10 = 2112;
    __int16 v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s sessionUUID = %@", (uint8_t *)&v8, 0x16u);
  }

  [*(id *)(a1 + 64) _beginSpeechRecognitionTransactionForReason:*(void *)(a1 + 72) session:v2];
  [*(id *)(a1 + 64) _beginAudioFileIOTransactionForReason:*(void *)(a1 + 72) session:v2];
  [*(id *)(a1 + 64) _addSession:v2];
  uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;
}

void sub_100195438(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___TRIExperimentAllocationStatus);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    id v5 = v3;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) expExperimentFromExperimentAllocationStatus:v5]);
    if (v6)
    {
      if (!*(void *)(a1 + 32)
        || (uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 date]),
            id v8 = [v7 compare:*(void *)(a1 + 32)],
            v7,
            v8 == (id)1))
      {
        int v9 = (void *)AFSiriLogContextConnection;
        if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
        {
          int v16 = *(_DWORD *)(a1 + 56);
          __int16 v10 = v9;
          __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v6 experimentId]);
          id v12 = [v6 deploymentId];
          int v13 = (void *)objc_claimAutoreleasedReturnValue([v5 treatmentId]);
          unsigned int v14 = [v6 allocationStatus];
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)[v6 lastUpdatedAtInMs] / 1000.0));
          *(_DWORD *)buf = 136316674;
          id v18 = "+[ADExperimentManager(Tracer) getAllEXPExperimentsFromProvider:cursor:environment:fromDate:retries:exper"
                "imentsEmitted:namespaceAssetSet:]_block_invoke";
          __int16 v19 = 1024;
          int v20 = v16;
          __int16 v21 = 2112;
          __int16 v22 = v11;
          __int16 v23 = 2048;
          id v24 = v12;
          __int16 v25 = 2112;
          __int128 v26 = v13;
          __int16 v27 = 1024;
          unsigned int v28 = v14;
          __int16 v29 = 2112;
          id v30 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Updated EXP experiment for environment %d. ExperimentId: %@, DeploymentId: %lld, TreatmentId: %@, Status: %d, Date: %@",  buf,  0x40u);
        }

        [*(id *)(a1 + 40) addObject:v6];
      }
    }
  }
}

void sub_100195654(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) expExperimentFromExperimentAllocationStatus:v3]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 experimentNamespace]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);

  if (!v6)
  {
    int v21 = 1;
    if (!v4) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[UAFAssetSetManager sharedManager](&OBJC_CLASS___UAFAssetSetManager, "sharedManager"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v7 retrieveAssetSet:v8 usages:0]);

  uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 experimentId]);
  if (v10
    && (__int16 v11 = (void *)v10,
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 experimentId]),
        unsigned int v13 = [v12 isEqualToString:&stru_1004FECA0],
        v12,
        v11,
        !v13))
  {
    int v21 = 1;
  }

  else
  {
    unsigned int v14 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void **)(a1 + 32);
      log = v14;
      int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v5]);
      int v30 = *(_DWORD *)(a1 + 56);
      int v17 = (void *)objc_claimAutoreleasedReturnValue([v4 experimentId]);
      id v29 = [v4 deploymentId];
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 treatmentId]);
      unsigned int v19 = [v4 allocationStatus];
      int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)[v4 lastUpdatedAtInMs] / 1000.0));
      *(_DWORD *)buf = 136317186;
      dispatch_time_t v34 = "+[ADExperimentManager(Tracer) getActiveEXPExperimentsFromProvider:environment:retries:]_block_invoke";
      __int16 v35 = 2112;
      *(void *)uint64_t v36 = v16;
      *(_WORD *)&v36[8] = 2112;
      *(void *)&v36[10] = v5;
      *(_WORD *)&v36[18] = 1024;
      *(_DWORD *)&v36[20] = v30;
      __int16 v37 = 2112;
      id v38 = v17;
      __int16 v39 = 2048;
      *(void *)uint64_t v40 = v29;
      *(_WORD *)&v40[8] = 2112;
      *(void *)&v40[10] = v18;
      __int16 v41 = 1024;
      unsigned int v42 = v19;
      __int16 v43 = 2112;
      uint64_t v44 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_INFO,  "%s Not active AB experiment for AssetSet %@ (%@), environment %d. ExperimentId: %@, DeploymentId: %lld, Treatmen tId: %@, Status: %d, Date: %@",  buf,  0x54u);
    }

    int v21 = 0;
  }

  if (v4)
  {
LABEL_11:
    if (v21)
    {
      __int16 v22 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        int loga = *(_DWORD *)(a1 + 56);
        __int16 v23 = v22;
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v4 experimentId]);
        id v25 = [v4 deploymentId];
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v3 treatmentId]);
        unsigned int v27 = [v4 allocationStatus];
        unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)[v4 lastUpdatedAtInMs] / 1000.0));
        *(_DWORD *)buf = 136316674;
        dispatch_time_t v34 = "+[ADExperimentManager(Tracer) getActiveEXPExperimentsFromProvider:environment:retries:]_block_invoke";
        __int16 v35 = 1024;
        *(_DWORD *)uint64_t v36 = loga;
        *(_WORD *)&v36[4] = 2112;
        *(void *)&v36[6] = v24;
        *(_WORD *)&v36[14] = 2048;
        *(void *)&v36[16] = v25;
        __int16 v37 = 2112;
        id v38 = v26;
        __int16 v39 = 1024;
        *(_DWORD *)uint64_t v40 = v27;
        *(_WORD *)&void v40[4] = 2112;
        *(void *)&v40[6] = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s Active EXP experiment for environment %d. ExperimentId: %@, DeploymentId: %lld, TreatmentId: %@, Status: %d, Date: %@",  buf,  0x40u);
      }

      [*(id *)(a1 + 40) addObject:v4];
    }
  }

void sub_100195A40(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 48);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 abExperimentFromExperimentAllocationStatus:v4]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 namespaces]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);

  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v8]);
  if (!v9)
  {
    int v25 = 1;
    if (!v5) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[UAFAssetSetManager sharedManager](&OBJC_CLASS___UAFAssetSetManager, "sharedManager"));
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v8]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 retrieveAssetSet:v11 usages:0]);

  uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 experimentId]);
  if (v13
    && (unsigned int v14 = (void *)v13,
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 experimentId]),
        unsigned int v16 = [v15 isEqualToString:&stru_1004FECA0],
        v15,
        v14,
        !v16))
  {
    int v25 = 1;
  }

  else
  {
    int v17 = (void *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      id v18 = *(void **)(a1 + 32);
      unsigned int v19 = v17;
      int v20 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v8]);
      int v21 = *(_DWORD *)(a1 + 56);
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v5 experimentId]);
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v5 deploymentId]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v5 treatmentId]);
      int v32 = 136316674;
      uint64_t v33 = "+[ADExperimentManager(Tracer) getActiveABExperimentsFromProvider:environment:retries:]_block_invoke";
      __int16 v34 = 2112;
      *(void *)__int16 v35 = v20;
      *(_WORD *)&v35[8] = 2112;
      *(void *)&v35[10] = v8;
      *(_WORD *)&v35[18] = 1024;
      *(_DWORD *)&v35[20] = v21;
      __int16 v36 = 2112;
      __int16 v37 = v22;
      __int16 v38 = 2112;
      __int16 v39 = v23;
      __int16 v40 = 2112;
      __int16 v41 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s Not active AB experiment for AssetSet %@ (%@), environment %d. ExperimentId: %@, DeploymentId: %@, TreatmentId: %@",  (uint8_t *)&v32,  0x44u);
    }

    int v25 = 0;
  }

  if (v5)
  {
LABEL_11:
    if (v25)
    {
      __int128 v26 = (void *)AFSiriLogContextConnection;
      if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
      {
        int v27 = *(_DWORD *)(a1 + 56);
        unsigned int v28 = v26;
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v5 experimentId]);
        int v30 = (void *)objc_claimAutoreleasedReturnValue([v5 deploymentId]);
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v5 treatmentId]);
        int v32 = 136316162;
        uint64_t v33 = "+[ADExperimentManager(Tracer) getActiveABExperimentsFromProvider:environment:retries:]_block_invoke";
        __int16 v34 = 1024;
        *(_DWORD *)__int16 v35 = v27;
        *(_WORD *)&v35[4] = 2112;
        *(void *)&v35[6] = v29;
        *(_WORD *)&v35[14] = 2112;
        *(void *)&v35[16] = v30;
        __int16 v36 = 2112;
        __int16 v37 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_INFO,  "%s Active AB experiment for environment %d. ExperimentId: %@, DeploymentId: %@, TreatmentId: %@",  (uint8_t *)&v32,  0x30u);
      }

      [*(id *)(a1 + 40) addObject:v5];
    }
  }

void sub_100195DA8(uint64_t a1)
{
  id v2 = *(dispatch_queue_s **)(a1 + 32);
  id v3 = v2;
  if (!v2)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  }

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100195E4C;
  v5[3] = &unk_1004FD0A0;
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = v2;
  dispatch_async(v3, v5);
  if (!v2) {
}
  }

void sub_100195E4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADExperimentManager assetSets](&OBJC_CLASS___ADExperimentManager, "assetSets"));
  v32[0] = 0LL;
  v32[1] = v32;
  v32[2] = 0x3032000000LL;
  v32[3] = sub_1001961EC;
  v32[4] = sub_1001961FC;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADExperimentManager assetSets](&OBJC_CLASS___ADExperimentManager, "assetSets"));
  id v33 = (id)objc_claimAutoreleasedReturnValue(+[ADExperimentManager namespaceAssetSet:](&OBJC_CLASS___ADExperimentManager, "namespaceAssetSet:", v3));

  uint64_t v26 = 0LL;
  int v27 = &v26;
  uint64_t v28 = 0x3032000000LL;
  id v29 = sub_1001961EC;
  int v30 = sub_1001961FC;
  id v31 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 experimentsUAFEmitted]);

  if (v5) {
    [(id)v27[5] addEntriesFromDictionary:v5];
  }
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  uint64_t v6 = *(void *)(a1 + 40);
  void v25[2] = sub_100196204;
  v25[3] = &unk_1004F4418;
  void v25[4] = &v26;
  void v25[5] = v32;
  v25[6] = v6;
  uint64_t v7 = objc_retainBlock(v25);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_100196570;
  v24[3] = &unk_1004F4418;
  uint64_t v8 = *(void *)(a1 + 40);
  void v24[5] = v32;
  v24[6] = v8;
  v24[4] = &v26;
  int v9 = objc_retainBlock(v24);
  ((void (*)(void *))v7[2])(v7);
  ((void (*)(void *))v9[2])(v9);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[TRIAllocationStatus defaultProvider](&OBJC_CLASS___TRIAllocationStatus, "defaultProvider"));
  __int16 v11 = *(void **)(a1 + 32);
  id v12 = v11;
  if (!v11)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  }

  id v14 = [v10 addStatusUpdateHandlerForEnvironment:3 queue:v12 block:v7];
  if (!v11) {

  }
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[TRIAllocationStatus defaultProvider](&OBJC_CLASS___TRIAllocationStatus, "defaultProvider"));
  unsigned int v16 = *(void **)(a1 + 32);
  int v17 = v16;
  if (!v16)
  {
    dispatch_queue_global_t v18 = dispatch_get_global_queue(0LL, 0LL);
    int v17 = (void *)objc_claimAutoreleasedReturnValue(v18);
  }

  id v19 = [v15 addStatusUpdateHandlerForEnvironment:0 queue:v17 block:v9];
  if (!v16) {

  }
  int v20 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    __int16 v35 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
    __int16 v36 = 2112;
    __int16 v37 = v2;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Start observing assetSets %@", buf, 0x16u);
  }

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  void v21[2] = sub_1001967B4;
  v21[3] = &unk_1004F4440;
  __int16 v23 = &v26;
  id v22 = *(id *)(a1 + 32);
  [v2 enumerateKeysAndObjectsUsingBlock:v21];

  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(v32, 8);
}

void sub_1001961B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1001961EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001961FC(uint64_t a1)
{
}

void sub_100196204(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[TRIAllocationStatus defaultProvider](&OBJC_CLASS___TRIAllocationStatus, "defaultProvider"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 getActiveABExperimentsFromProvider:v3 environment:3 retries:5]);

  id v5 = v4;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_100577A08);
  if (v5)
  {
    int v7 = AFIsInternalInstall(v6);
    id v8 = [v5 count];
    unint64_t v9 = 20LL;
    if (v7) {
      unint64_t v9 = 35LL;
    }
    else {
      id v10 = (id)v9;
    }
    uint64_t v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "subarrayWithRange:", 0, v10));
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  id v12 = (void *)qword_100577A00;
  qword_100577A00 = v11;

  uint64_t v13 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = (id)qword_100577A00;
    if (qword_100577A00) {
      id v14 = [(id)qword_100577A00 count];
    }
    *(_DWORD *)buf = 136315394;
    int v27 = "ADTrialActiveExperimentsUpdate";
    __int16 v28 = 2048;
    id v29 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Total active experiments updated: %lu",  buf,  0x16u);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_100577A08);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 lastServerExperimentCheckDate]);

  int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  dispatch_queue_global_t v18 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v27 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
    __int16 v28 = 2112;
    id v29 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s Search for server experiments from date %@",  buf,  0x16u);
  }

  id v19 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) copy];
  int v20 = *(void **)(a1 + 48);
  int v21 = (void *)objc_claimAutoreleasedReturnValue(+[TRIAllocationStatus defaultProvider](&OBJC_CLASS___TRIAllocationStatus, "defaultProvider"));
  id v22 = (void *)objc_claimAutoreleasedReturnValue( [v20 getAllEXPExperimentsFromProvider:v21 cursor:0 environment:3 fromDate:v16 retries:5 experimentsEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) namespaceAssetSet:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)]);

  if (v22)
  {
    __int16 v23 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      int v27 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
      __int16 v28 = 2112;
      id v29 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s New Server Experiment Check Date: %@",  buf,  0x16u);
    }

    [*(id *)(a1 + 48) emitUpdatedExperiments:v22];
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v24 setLastServerExperimentCheckDate:v17];

    if (([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) isEqual:v19] & 1) == 0)
    {
      int v25 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      [v25 setExperimentsUAFEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
    }
  }
}

void sub_100196570(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 lastDeviceExperimentCheckDate]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v5 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    id v14 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
    __int16 v15 = 2112;
    unsigned int v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Search for client experiments from date %@",  buf,  0x16u);
  }

  id v6 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) copy];
  int v7 = *(void **)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[TRIAllocationStatus defaultProvider](&OBJC_CLASS___TRIAllocationStatus, "defaultProvider"));
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [v7 getAllEXPExperimentsFromProvider:v8 cursor:0 environment:0 fromDate:v3 retries:5 experimentsEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) namespaceAssetSet:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)]);

  if (v9)
  {
    id v10 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      id v14 = "+[ADExperimentManager(Tracer) tracerAllocationsWithQueue:]_block_invoke";
      __int16 v15 = 2112;
      unsigned int v16 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s New Client Experiment Check Date: %@",  buf,  0x16u);
    }

    [*(id *)(a1 + 48) emitUpdatedExperiments:v9];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v11 setLastDeviceExperimentCheckDate:v4];

    if (([*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) isEqual:v6] & 1) == 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      [v12 setExperimentsUAFEmitted:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)];
    }
  }
}

void sub_1001967B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v6 copy];
  +[ADExperimentManager logAssetSetExperiment:trialData:experimentsEmitted:]( &OBJC_CLASS___ADExperimentManager,  "logAssetSetExperiment:trialData:experimentsEmitted:",  v5,  v7,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[UAFAssetSetManager sharedManager](&OBJC_CLASS___UAFAssetSetManager, "sharedManager"));
  unint64_t v9 = *(void **)(a1 + 32);
  id v10 = v9;
  if (!v9)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  }

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1001968E8;
  v15[3] = &unk_1004FBE80;
  id v16 = v5;
  id v17 = v6;
  uint64_t v18 = *(void *)(a1 + 40);
  id v12 = v6;
  id v13 = v5;
  id v14 = [v8 observeAssetSet:v13 queue:v10 handler:v15];
  if (!v9) {
}
  }

void sub_1001968E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) copy];
  +[ADExperimentManager logAssetSetExperiment:trialData:experimentsEmitted:]( &OBJC_CLASS___ADExperimentManager,  "logAssetSetExperiment:trialData:experimentsEmitted:",  v2,  v3,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
}

void sub_100196948(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"TrialNamespace"]);
  if (v5) {
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
  }
}

void sub_1001969AC(id a1)
{
  uint64_t v1 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  v5[0] = @"TrialProject";
  v5[1] = @"TrialNamespace";
  v6[0] = @"UAF_AB";
  v6[1] = @"UAF_AB_UNDERSTANDING";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v6,  v5,  2LL));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v1,  "setObject:forKeyedSubscript:",  v2,  @"com.apple.siri.understanding");
  uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v1));
  id v4 = (void *)qword_100577FF8;
  qword_100577FF8 = v3;
}

void sub_10019836C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = 136315650;
      id v13 = "-[ADCloudKitCapabilitiesDataStore synchronizeWithCompletion:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to save %@ with error: %@",  (uint8_t *)&v12,  0x20u);
    }

    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      unint64_t v9 = *(void (**)(void))(v8 + 16);
LABEL_8:
      v9();
    }
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10)
    {
      unint64_t v9 = *(void (**)(void))(v10 + 16);
      goto LABEL_8;
    }
  }
}

NSString *sub_100198480(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@_index_%@", v4, v3);

  return v5;
}

void sub_10019878C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  uint64_t v8 = sub_100198480(v7, v6);
  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = objc_alloc(&OBJC_CLASS___SiriCoreSQLiteIndexDescription);
  id v13 = v6;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));

  id v12 = [v10 initWithName:v9 tableName:v7 columnNames:v11 options:0];
  [v5 createIndex:v12 error:0];
}

void sub_100199414(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 localCryptoKeyData]);
  if (!v3)
  {
    id v19 = 0LL;
    uint64_t v6 = AFSecurityGenerateRandomData(1024LL, &v19);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v5 = v19;
    if (!v5)
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1605LL));
      if (!v5) {
        goto LABEL_6;
      }
    }

    id v4 = 0LL;
    goto LABEL_6;
  }

  id v4 = (void *)v3;
LABEL_3:
  id v5 = 0LL;
LABEL_6:
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 dataUsingEncoding:4]);

  unint64_t v9 = *(void **)(a1 + 48);
  id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100199588;
  block[3] = &unk_1004FDA30;
  id v15 = v4;
  id v16 = v8;
  id v17 = v5;
  id v18 = v9;
  id v11 = v5;
  id v12 = v8;
  id v13 = v4;
  dispatch_async(v10, block);
}

uint64_t sub_100199588(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[7] + 16LL))(a1[7], a1[4], a1[5], a1[6]);
}

uint64_t sub_10019959C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1001995B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001995C4(void *a1)
{
  char v2 = AFKeychainSetValueForAccountAndKey(a1[4], a1[5], a1[6]);
  uint64_t v3 = (void *)a1[8];
  if (v3)
  {
    char v4 = v2;
    id v5 = *(dispatch_queue_s **)(a1[7] + 24LL);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_100199654;
    v6[3] = &unk_1004FC6B8;
    id v7 = v3;
    char v8 = v4;
    dispatch_async(v5, v6);
  }

void sub_100199654(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(a1 + 40))
  {
    (*(void (**)(void, void))(v1 + 16))(*(void *)(a1 + 32), 0LL);
  }

  else
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1613LL));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_1001996C8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  uint64_t v3 = 1LL;
  switch((unint64_t)v2)
  {
    case 1uLL:
    case 3uLL:
      objc_initWeak(&location, *(id *)(a1 + 40));
      char v4 = *(void **)(a1 + 40);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_100199AE0;
      v19[3] = &unk_1004F44F0;
      id v20 = *(id *)(a1 + 32);
      v22[1] = v2;
      objc_copyWeak(v22, &location);
      id v21 = *(id *)(a1 + 48);
      [v4 _retrieveKeyAndSaltWithCompletion:v19];

      objc_destroyWeak(v22);
      objc_destroyWeak(&location);
      return;
    case 2uLL:
      goto LABEL_4;
    case 4uLL:
      uint64_t v3 = 3LL;
LABEL_4:
      objc_initWeak(&location, *(id *)(a1 + 40));
      id v5 = *(void **)(a1 + 40);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      void v15[2] = sub_100199D18;
      v15[3] = &unk_1004F44F0;
      id v16 = *(id *)(a1 + 32);
      v18[1] = (id)v3;
      objc_copyWeak(v18, &location);
      id v17 = *(id *)(a1 + 48);
      [v5 _retrieveKeyAndSaltWithCompletion:v15];

      objc_destroyWeak(v18);
      objc_destroyWeak(&location);
      return;
    case 5uLL:
      goto LABEL_8;
    case 6uLL:
      uint64_t v3 = 2LL;
LABEL_8:
      id v9 = [*(id *)(a1 + 32) count];
      id v10 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v9);
      id v11 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v9);
      id v12 = *(void **)(a1 + 32);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      void v24[2] = sub_100199A44;
      v24[3] = &unk_1004F4518;
      v24[4] = *(void *)(a1 + 40);
      int v25 = v10;
      uint64_t v26 = v11;
      uint64_t v27 = v3;
      id v13 = v11;
      __int16 v14 = v10;
      [v12 enumerateKeysAndObjectsUsingBlock:v24];
      [*(id *)(a1 + 40) _dispatchCallbackForProcessedDataMap:v14 errorMap:v13 completion:*(void *)(a1 + 48)];

      break;
    default:
      uint64_t v6 = *(void **)(a1 + 40);
      __int16 v28 = @"error";
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1600LL));
      id v29 = v7;
      char v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
      [v6 _dispatchCallbackForProcessedDataMap:0 errorMap:v8 completion:*(void *)(a1 + 48)];

      break;
  }

void sub_100199A08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id location)
{
}

void sub_100199A44(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32LL);
  uint64_t v7 = *(void *)(a1 + 56);
  id v11 = 0LL;
  uint64_t v8 = AFSecurityDigestData(a3, v6, v7, &v11);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v11;
  if (v9) {
    [*(id *)(a1 + 40) setObject:v9 forKey:v5];
  }
  if (v10) {
    [*(id *)(a1 + 48) setObject:v10 forKey:v5];
  }
}

void sub_100199AE0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (v7)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v27 = @"error";
    id v28 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    [WeakRetained _dispatchCallbackForProcessedDataMap:0 errorMap:v9 completion:*(void *)(a1 + 40)];
  }

  else
  {
    id v26 = 0LL;
    uint64_t v10 = AFSecurityDigestData(a2, a3, 2LL, &v26);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id WeakRetained = v26;
    if (WeakRetained)
    {
      id v11 = (NSMutableDictionary *)objc_loadWeakRetained((id *)(a1 + 48));
      id v29 = @"error";
      id v30 = WeakRetained;
      id v12 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
      -[NSMutableDictionary _dispatchCallbackForProcessedDataMap:errorMap:completion:]( v11,  "_dispatchCallbackForProcessedDataMap:errorMap:completion:",  0LL,  v12,  *(void *)(a1 + 40));
    }

    else
    {
      id v13 = [*(id *)(a1 + 32) count];
      __int16 v14 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v13);
      id v15 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v13);
      id v16 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_100199FEC;
      v20[3] = &unk_1004F4540;
      id v17 = v9;
      uint64_t v18 = *(void *)(a1 + 56);
      id v24 = v15;
      uint64_t v25 = v18;
      id v21 = v17;
      id v22 = v14;
      id v23 = 0LL;
      id v12 = v15;
      id v11 = v14;
      [v16 enumerateKeysAndObjectsUsingBlock:v20];
      id v19 = objc_loadWeakRetained((id *)(a1 + 48));
      [v19 _dispatchCallbackForProcessedDataMap:v11 errorMap:v12 completion:*(void *)(a1 + 40)];
    }
  }
}

void sub_100199D18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (v7)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    uint64_t v27 = @"error";
    id v28 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
    [WeakRetained _dispatchCallbackForProcessedDataMap:0 errorMap:v9 completion:*(void *)(a1 + 40)];
  }

  else
  {
    id v26 = 0LL;
    uint64_t v10 = AFSecurityDigestData(a2, a3, 2LL, &v26);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id WeakRetained = v26;
    if (WeakRetained)
    {
      id v11 = (NSMutableDictionary *)objc_loadWeakRetained((id *)(a1 + 48));
      id v29 = @"error";
      id v30 = WeakRetained;
      id v12 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
      -[NSMutableDictionary _dispatchCallbackForProcessedDataMap:errorMap:completion:]( v11,  "_dispatchCallbackForProcessedDataMap:errorMap:completion:",  0LL,  v12,  *(void *)(a1 + 40));
    }

    else
    {
      id v13 = [*(id *)(a1 + 32) count];
      __int16 v14 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v13);
      id v15 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v13);
      id v16 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_100199F50;
      v20[3] = &unk_1004F4540;
      id v17 = v9;
      uint64_t v18 = *(void *)(a1 + 56);
      id v24 = v15;
      uint64_t v25 = v18;
      id v21 = v17;
      id v22 = v14;
      id v23 = 0LL;
      id v12 = v15;
      id v11 = v14;
      [v16 enumerateKeysAndObjectsUsingBlock:v20];
      id v19 = objc_loadWeakRetained((id *)(a1 + 48));
      [v19 _dispatchCallbackForProcessedDataMap:v11 errorMap:v12 completion:*(void *)(a1 + 40)];
    }
  }
}

void sub_100199F50(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  id v11 = 0LL;
  uint64_t v8 = AFSecurityDecryptData(a3, v6, v7, &v11);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v11;
  if (v9) {
    [*(id *)(a1 + 40) setObject:v9 forKey:v5];
  }
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) setObject:v10 forKey:v5];
  }
}

void sub_100199FEC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 64);
  id v11 = 0LL;
  uint64_t v8 = AFSecurityEncryptData(a3, v6, v7, &v11);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v11;
  if (v9) {
    [*(id *)(a1 + 40) setObject:v9 forKey:v5];
  }
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) setObject:v10 forKey:v5];
  }
}

void sub_10019A088(uint64_t a1)
{
  id v2 = *(void **)(a1 + 56);
  uint64_t v3 = 1LL;
  switch((unint64_t)v2)
  {
    case 1uLL:
    case 3uLL:
      objc_initWeak(&location, *(id *)(a1 + 40));
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      id v18[2] = sub_10019A2B8;
      v18[3] = &unk_1004F44F0;
      char v4 = *(void **)(a1 + 40);
      id v19 = *(id *)(a1 + 32);
      v21[1] = v2;
      objc_copyWeak(v21, &location);
      id v20 = *(id *)(a1 + 48);
      [v4 _retrieveKeyAndSaltWithCompletion:v18];

      objc_destroyWeak(v21);
      id v5 = v19;
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 4uLL:
      uint64_t v3 = 3LL;
LABEL_4:
      objc_initWeak(&location, *(id *)(a1 + 40));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      void v14[2] = sub_10019A3B8;
      v14[3] = &unk_1004F44F0;
      uint64_t v6 = *(void **)(a1 + 40);
      id v15 = *(id *)(a1 + 32);
      v17[1] = (id)v3;
      objc_copyWeak(v17, &location);
      id v16 = *(id *)(a1 + 48);
      [v6 _retrieveKeyAndSaltWithCompletion:v14];

      objc_destroyWeak(v17);
      id v5 = v15;
LABEL_5:

      objc_destroyWeak(&location);
      return;
    case 5uLL:
      goto LABEL_8;
    case 6uLL:
      uint64_t v3 = 2LL;
LABEL_8:
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 32LL);
      id v23 = 0LL;
      uint64_t v10 = AFSecurityDigestData(v8, v9, v3, &v23);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v12 = v23;
      [*(id *)(a1 + 40) _dispatchCallbackForProcessedData:v11 error:v12 completion:*(void *)(a1 + 48)];

      break;
    default:
      uint64_t v7 = *(void **)(a1 + 40);
      id v13 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1600LL));
      [v7 _dispatchCallbackForProcessedData:0 error:v13 completion:*(void *)(a1 + 48)];

      break;
  }

void sub_10019A298(_Unwind_Exception *a1)
{
}

void sub_10019A2B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (v7)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _dispatchCallbackForProcessedData:0 error:v7 completion:*(void *)(a1 + 40)];
  }

  else
  {
    id v19 = 0LL;
    uint64_t v9 = AFSecurityDigestData(a2, a3, 2LL, &v19);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = v19;
    if (v11)
    {
      id v12 = v11;
      id v13 = 0LL;
    }

    else
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 56);
      id v18 = 0LL;
      uint64_t v16 = AFSecurityEncryptData(v14, v10, v15, &v18);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v12 = v18;
    }

    id v17 = objc_loadWeakRetained((id *)(a1 + 48));
    [v17 _dispatchCallbackForProcessedData:v13 error:v12 completion:*(void *)(a1 + 40)];
  }
}

void sub_10019A3B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (v7)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    [WeakRetained _dispatchCallbackForProcessedData:0 error:v7 completion:*(void *)(a1 + 40)];
  }

  else
  {
    id v19 = 0LL;
    uint64_t v9 = AFSecurityDigestData(a2, a3, 2LL, &v19);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = v19;
    if (v11)
    {
      id v12 = v11;
      id v13 = 0LL;
    }

    else
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 56);
      id v18 = 0LL;
      uint64_t v16 = AFSecurityDecryptData(v14, v10, v15, &v18);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v12 = v18;
    }

    id v17 = objc_loadWeakRetained((id *)(a1 + 48));
    [v17 _dispatchCallbackForProcessedData:v13 error:v12 completion:*(void *)(a1 + 40)];
  }
}

void sub_10019A4B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  char v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v8 = "-[ADSecurityService init]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_10019A5D0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  char v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v8 = "-[ADSecurityService init]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_10019A728(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADSecurityService);
  uint64_t v2 = (void *)qword_100578010;
  qword_100578010 = (uint64_t)v1;
}

void sub_10019C770(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v4 = [v2 compare:v3];

  if (v4 == (id)-1LL)
  {
    id v5 = objc_alloc(&OBJC_CLASS___AFDeviceContextMetadata);
    uint64_t v6 = AFDeviceContextKeyHeardVoiceTrigger;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 15.0));
    id v9 = [v5 initWithType:v6 deliveryDate:v7 expirationDate:v8 redactedKeyPaths:0 historyConfiguration:0];

    [*(id *)(*(void *)(a1 + 32) + 48) donateContext:&off_100513468 withMetadata:v9 pushToRemote:0];
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315138;
      id v12 = "-[ADDeviceProximityManager notifyObserver:didReceiveNotificationWithToken:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #hal Heard Voice Trigger expired",  (uint8_t *)&v11,  0xCu);
    }
  }

void sub_10019C8EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v4 = [v2 compare:v3];

  if (v4 == (id)-1LL)
  {
    id v5 = objc_alloc(&OBJC_CLASS___AFDeviceContextMetadata);
    uint64_t v6 = AFDeviceContextKeyHeardVoiceTrigger;
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 5.0));
    id v9 = [v5 initWithType:v6 deliveryDate:v7 expirationDate:v8 redactedKeyPaths:0 historyConfiguration:0];

    [*(id *)(*(void *)(a1 + 32) + 48) donateContext:&off_100513468 withMetadata:v9 pushToRemote:0];
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315138;
      id v12 = "-[ADDeviceProximityManager notifyObserver:didReceiveNotificationWithToken:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #hal Voice Trigger first pass expired",  (uint8_t *)&v11,  0xCu);
    }
  }

void sub_10019CA68(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v7 = 136315138;
    uint64_t v8 = "-[ADDeviceProximityManager requestLifecycleObserver:requestDidEndWithInfo:origin:client:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal cached proximity cleared",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = 0LL;

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 120);
  *(void *)(v5 + 120) = 0LL;
}

void sub_10019CB34(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 120);
  *(void *)(v3 + 120) = v2;
}

uint64_t sub_10019CB68(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 32LL) = *(_BYTE *)(result + 40);
  return result;
}

id sub_10019CB78(id a1, NSArray *a2)
{
  id v2 = sub_10019CBB4(a2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 buildDictionaryRepresentation]);

  return v4;
}

id sub_10019CBB4(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v22 = 0LL;
  id v23 = &v22;
  uint64_t v24 = 0x3032000000LL;
  uint64_t v25 = sub_10019CDF0;
  id v26 = sub_10019CE00;
  id v27 = 0LL;
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSCountedSet);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  id v17[2] = sub_10019CE08;
  v17[3] = &unk_1004F4630;
  id v4 = v2;
  id v18 = v4;
  id v5 = v1;
  id v19 = v5;
  id v21 = &v22;
  uint64_t v6 = v3;
  id v20 = v6;
  [v5 enumerateObjectsWithOptions:2 usingBlock:v17];
  if ((unint64_t)-[NSCountedSet count](v6, "count") >= 2)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSCountedSet allObjects](v6, "allObjects"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10019CF98;
    v15[3] = &unk_1004F4658;
    uint64_t v16 = v6;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sortedArrayUsingComparator:v15]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
    unsigned int v10 = [v9 intValue];

    if (v10 && [(id)v23[5] proximity] != v10)
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_10019D04C;
      v13[3] = &unk_1004F4680;
      unsigned int v14 = v10;
      void v13[4] = &v22;
      [v5 enumerateObjectsWithOptions:2 usingBlock:v13];
    }
  }

  id v11 = (id)v23[5];

  _Block_object_dispose(&v22, 8);
  return v11;
}

void sub_10019CDD4(_Unwind_Exception *a1)
{
}

uint64_t sub_10019CDF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10019CE00(uint64_t a1)
{
}

void sub_10019CE08(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4)
{
  id v8 = a2;
  id v9 = *(void **)(a1 + 32);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 observationDate]);
  [v9 timeIntervalSinceDate:v10];
  double v12 = v11;

  if (v12 >= 420.0)
  {
    *a4 = 1;
  }

  else
  {
    if ((char *)[*(id *)(a1 + 40) count] - 1 == a3)
    {
      id v13 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v16 = 136315394;
        id v17 = "ADProximityObservationForHistoricalProximityObservations_block_invoke";
        __int16 v18 = 2112;
        id v19 = v8;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s #hal Most recent prox observation: %@",  (uint8_t *)&v16,  0x16u);
      }

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a2);
    }

    unsigned int v14 = *(void **)(a1 + 48);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 proximity]));
    [v14 addObject:v15];
  }
}

uint64_t sub_10019CF98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) countForObject:v5];
  id v8 = [*(id *)(a1 + 32) countForObject:v6];
  if (v7 >= v8)
  {
    if (v7 > v8)
    {
      uint64_t v9 = -1LL;
    }

    else
    {
      unsigned int v10 = [v5 intValue];
      unsigned int v11 = [v6 intValue];
      if (v10) {
        int v12 = v10;
      }
      else {
        int v12 = 30;
      }
      if (v11) {
        int v13 = v11;
      }
      else {
        int v13 = 30;
      }
      BOOL v14 = v12 < v13;
      BOOL v15 = v12 > v13;
      uint64_t v16 = v14;
      uint64_t v9 = v15 - v16;
    }
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  return v9;
}

void sub_10019D04C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  if ([v7 proximity] == *(_DWORD *)(a1 + 40))
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136315394;
      unsigned int v10 = "ADProximityObservationForHistoricalProximityObservations_block_invoke_2";
      __int16 v11 = 2112;
      id v12 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s #hal Using most seen prox observation: %@",  (uint8_t *)&v9,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_10019D154(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019D1F4;
  block[3] = &unk_1004FD9E0;
  id v8 = v3;
  id v9 = v4;
  void block[4] = *(void *)(a1 + 32);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10019D1F4(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v37 = 0LL;
  __int16 v38 = &v37;
  uint64_t v39 = 0x3032000000LL;
  __int16 v40 = sub_10019CDF0;
  __int16 v41 = sub_10019CE00;
  id v42 = 0LL;
  id v3 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_10019D588;
  v33[3] = &unk_1004FC1B0;
  __int16 v36 = &v37;
  id v35 = *(id *)(a1 + 48);
  id v21 = v2;
  __int16 v34 = v21;
  id v4 = -[AFSafetyBlock initWithBlock:](v3, "initWithBlock:", v33);
  id v5 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 128LL);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_10019D5BC;
  v31[3] = &unk_1004FD940;
  id v19 = v4;
  int v32 = v19;
  id v7 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v5,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v6,  v31,  0.5);
  id v8 = (void *)v38[5];
  v38[5] = (uint64_t)v7;

  [(id)v38[5] start];
  id v9 = dispatch_group_create();
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id obj = *(id *)(a1 + 40);
  id v10 = [obj countByEnumeratingWithState:&v27 objects:v43 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v28;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v28 != v11) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v27 + 1) + 8LL * (void)v12);
        dispatch_group_enter(v9);
        BOOL v14 = *(void **)(a1 + 32);
        BOOL v15 = (void *)v14[9];
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 _rapportLinkMessageOptions]);
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472LL;
        void v24[2] = sub_10019D670;
        v24[3] = &unk_1004F4A58;
        v24[4] = *(void *)(a1 + 32);
        void v24[5] = v13;
        uint64_t v25 = v21;
        id v26 = v9;
        [v15 sendRequestID:@"com.apple.siri.rapport-link.request.device-proximity-manager" messageType:@"device_proximity_fetch" messagePayload:&__NSDictionary0__struct toDeviceWithIDSDeviceID:v13 options:v16 completion:v24];

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [obj countByEnumeratingWithState:&v27 objects:v43 count:16];
    }

    while (v10);
  }

  id v17 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019D748;
  block[3] = &unk_1004FD940;
  id v23 = v19;
  __int16 v18 = v19;
  dispatch_group_notify(v9, v17, block);

  _Block_object_dispose(&v37, 8);
}

void sub_10019D55C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46)
{
}

uint64_t sub_10019D588(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10019D5BC(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    id v5 = "-[ADDeviceProximityManager _fetchProximityObservationsFromCollectorsWithCompletion:]_block_invoke_4";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s #hal proximity fetch timed out",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) invoke];
}

void sub_10019D670(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10019D750;
  block[3] = &unk_1004F7698;
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  block[1] = 3221225472LL;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

id sub_10019D748(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_10019D750(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v8 = 136315650;
      id v9 = "-[ADDeviceProximityManager _fetchProximityObservationsFromCollectorsWithCompletion:]_block_invoke_2";
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      __int16 v12 = 2112;
      uint64_t v13 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal Error fetching proximity information from %@: %@",  (uint8_t *)&v8,  0x20u);
    }
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:@"proximity_observations"]);
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSArray);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "af_lenientMappedArray:", &stru_1004F4A30));
      if ([v7 count]) {
        [*(id *)(a1 + 56) addObjectsFromArray:v7];
      }
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

id sub_10019D894(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0) {
    uint64_t v4 = -[ADRapportProximityObservation initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___ADRapportProximityObservation),  "initWithDictionaryRepresentation:",  v2);
  }
  else {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_10019D8F8(uint64_t a1, void *a2)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)v6);
        int v8 = *(void **)(*(void *)(a1 + 32) + 72LL);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) buildDictionaryRepresentation]);
        __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _rapportLinkMessageOptions]);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        void v12[2] = sub_10019DA98;
        void v12[3] = &unk_1004FC2A0;
        void v12[4] = v7;
        id v13 = *(id *)(a1 + 40);
        [v8 sendRequestID:@"com.apple.siri.rapport-link.request.device-proximity-manager" messageType:@"device_proximity_push" messagePayload:v9 toDeviceWithIDSDeviceID:v7 options:v10 completion:v12];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v4);
  }
}

void sub_10019DA98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v12 = 136315906;
      id v13 = "-[ADDeviceProximityManager _pushProximityObservationToCollector:]_block_invoke_2";
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #hal Failed to update %@ with proximity observation: %@, error: %@",  (uint8_t *)&v12,  0x2Au);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = 136315650;
    id v13 = "-[ADDeviceProximityManager _pushProximityObservationToCollector:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #hal Received ack from %@ for sending observation: %@",  (uint8_t *)&v12,  0x20u);
  }
}

int64_t sub_10019DBF4(id a1, ADRapportProximityObservation *a2, ADRapportProximityObservation *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportProximityObservation observationDate](a2, "observationDate"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportProximityObservation observationDate](v4, "observationDate"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

BOOL sub_10019DC60(id a1, ADRapportProximityObservation *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportProximityObservation observationDate](v4, "observationDate"));

  [v5 timeIntervalSinceDate:v6];
  LOBYTE(v4) = v7 > 420.0;

  return (char)v4;
}

id sub_10019DCDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _messageLink];
}

void sub_10019DCFC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADDeviceProximityManager _proximityDiscoveryLink]_block_invoke_4";
      __int16 v6 = 2112;
      double v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal device proximity link activation error: %@",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_10019DDC0(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_10019DDCC(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  uint64_t v2 = a2;
  -[ADRapportLinkTransportOptionsMutating setAllowsBLE:](v2, "setAllowsBLE:", 2LL);
  -[ADRapportLinkTransportOptionsMutating setAllowsInfraWiFi:](v2, "setAllowsInfraWiFi:", 1LL);
}

void sub_10019DE04(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesRemoraDevices:](v2, "setIncludesRemoraDevices:", 2LL);
}

void sub_10019DE3C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADDeviceProximityManager _messageLink]_block_invoke_4";
      __int16 v6 = 2112;
      double v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s #hal message link activation error: %@",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_10019DF00(id a1, ADRapportLinkConnectionOptionsMutating *a2)
{
}

void sub_10019DF0C(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
}

void sub_10019DF18(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  uint64_t v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesRemoraDevices:](v2, "setIncludesRemoraDevices:", 2LL);
}

id sub_10019DF50(void *a1)
{
  id v1 = a1;
  if (AFIsInternalInstall(v1))
  {
    uint64_t v2 = _AFPreferencesHardCodedBluetoothProximityNumber();
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    int v4 = v3;
    if (v3)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_10019E1B0;
      v7[3] = &unk_1004F4B40;
      id v8 = v3;
      id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "af_mappedArray:", v7));
    }

    else
    {
      id v5 = v1;
    }
  }

  else
  {
    id v5 = v1;
  }

  return v5;
}

void sub_10019E00C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10019E0D8;
  v10[3] = &unk_1004F4828;
  id v11 = [v3 mutableCopy];
  id v9 = v11;
  [v4 enumerateObjectsUsingBlock:v10];

  uint64_t v5 = *(void *)(a1 + 40);
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v9 allValues]);
  id v7 = sub_10019DF50(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);
}

void sub_10019E0D8(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v9 deviceIDPair]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "adpm_sortedKeyString"));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v4]);
  if (!v5
    || [v9 proximity]
    && (__int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 observationDate]),
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 observationDate]),
        id v8 = [v6 compare:v7],
        v7,
        v6,
        v8 == (id)-1LL))
  {
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:v4];
  }
}

id sub_10019E1B0(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10019E22C;
  v5[3] = &unk_1004F4B18;
  id v6 = *(id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 mutatedCopyWithMutator:v5]);

  return v3;
}

void sub_10019E22C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  objc_msgSend(v3, "setProximity:", objc_msgSend(v2, "intValue"));
}

id sub_10019E270(id a1, NSString *a2, NSArray *a3)
{
  return sub_10019CBB4(a3);
}

void sub_10019E278(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 120LL);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10019E4E8;
  v16[3] = &unk_1004F47C0;
  id v3 = *(void **)(a1 + 40);
  void v16[4] = *(void *)(a1 + 32);
  id v17 = v3;
  id v4 = v2;
  id v18 = v4;
  char v20 = *(_BYTE *)(a1 + 56);
  id v19 = *(id *)(a1 + 48);
  uint64_t v5 = objc_retainBlock(v16);
  if ((AFSupportsHALProximityScanning(v5, v6) & 1) == 0) {
    goto LABEL_7;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v22 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDev"
            "ices:completion:]_block_invoke_3";
      id v8 = "%s #hal Using cached proximity";
      id v9 = v7;
LABEL_13:
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v8, buf, 0xCu);
      goto LABEL_7;
    }

    goto LABEL_7;
  }

  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = v10[3];
  int v12 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v13 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v11)
  {
    if (v13)
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v22 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDev"
            "ices:completion:]_block_invoke";
      id v8 = "%s #hal cached proximity is empty, re-calculating based on context...";
      id v9 = v12;
      goto LABEL_13;
    }

void sub_10019E4E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v36 = 0LL;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x3032000000LL;
  uint64_t v39 = sub_10019CDF0;
  __int16 v40 = sub_10019CE00;
  id v41 = 0LL;
  if ([*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    id v4 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
    uint64_t v5 = (void *)v37[5];
    v37[5] = (uint64_t)v4;
  }

  else
  {
    id v10 = sub_10019E964(*(void **)(a1 + 40), *(void **)(*(void *)(a1 + 32) + 40LL), v3);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
    int v12 = (void *)v37[5];
    v37[5] = v11;

    BOOL v13 = *(void **)(a1 + 48);
    if (v13 && [v13 isEqual:*(void *)(*(void *)(a1 + 32) + 120)])
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), (id)v37[5]);
      __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        id v26 = [(id)v37[5] count];
        *(_DWORD *)buf = 136315394;
        uint64_t v44 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableD"
              "evices:completion:]_block_invoke_2";
        __int16 v45 = 2048;
        id v46 = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s #hal cached %lu proximity tuples",  buf,  0x16u);
      }

      if (AFIsInternalInstall(v15))
      {
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        id v16 = (id)v37[5];
        id v17 = [v16 countByEnumeratingWithState:&v32 objects:v42 count:16];
        if (v17)
        {
          uint64_t v18 = *(void *)v33;
          do
          {
            id v19 = 0LL;
            do
            {
              if (*(void *)v33 != v18) {
                objc_enumerationMutation(v16);
              }
              char v20 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
              {
                id v21 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)v19);
                *(_DWORD *)buf = 136315394;
                uint64_t v44 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllRe"
                      "achableDevices:completion:]_block_invoke";
                __int16 v45 = 2112;
                id v46 = v21;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s #hal cached proximity tuple: %@",  buf,  0x16u);
              }

              id v19 = (char *)v19 + 1;
            }

            while (v17 != v19);
            id v17 = [v16 countByEnumeratingWithState:&v32 objects:v42 count:16];
          }

          while (v17);
        }
      }

      dispatch_time_t v22 = dispatch_time(0LL, 30000000000LL);
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = *(dispatch_queue_s **)(v23 + 128);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10019EE7C;
      block[3] = &unk_1004FCDB0;
      void block[4] = v23;
      void block[5] = &v36;
      dispatch_after(v22, v24, block);
    }
  }

  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v37[5], "af_lenientMappedDictionary:", &stru_1004F4770));
    id v7 = [v6 mutableCopy];

    id v8 = *(void **)(*(void *)(a1 + 32) + 56LL);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10019EF54;
    v27[3] = &unk_1004F4798;
    id v9 = v7;
    id v28 = v9;
    __int128 v30 = &v36;
    id v29 = *(id *)(a1 + 56);
    [v8 getManagedLocalAndRemotePeerInfoWithCompletion:v27];
  }

  else
  {
    uint64_t v25 = *(void *)(a1 + 56);
    id v9 = [(id)v37[5] copy];
    (*(void (**)(uint64_t, id))(v25 + 16))(v25, v9);
  }

  _Block_object_dispose(&v36, 8);
}

void sub_10019E8E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_10019E914(uint64_t a1, void *a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10019E964(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = 0LL;
  __int128 v35 = v6;
  uint64_t v36 = v7;
  if (v6 && v7)
  {
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    void v44[2] = sub_10019F5B0;
    v44[3] = &unk_1004F4590;
    id v45 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "af_lenientMappedDictionary:", v44));
  }

  id v9 = v5;
  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  memset(buf, 0, sizeof(buf));
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:buf objects:&v53 count:16];
  if (!v12)
  {

LABEL_18:
    id v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v4_Block_object_dispose((const void *)(v1 - 144), 8) = 136315138;
      *(void *)((char *)&v48 + 4) = "_ADProximityTuplesForDeviceContexts";
    }

    BOOL v13 = 0LL;
    goto LABEL_21;
  }

  BOOL v13 = 0LL;
  uint64_t v14 = **(void **)&buf[16];
  do
  {
    for (i = 0LL; i != v12; i = (char *)i + 1)
    {
      if (**(void **)&buf[16] != v14) {
        objc_enumerationMutation(v11);
      }
      id v16 = *(void **)(*(void *)&buf[8] + 8LL * (void)i);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 deviceInfo]);
      if ([v16 fromLocalDevice])
      {
        id v18 = v17;

        BOOL v13 = v18;
      }

      else if (v17)
      {
        -[NSMutableArray addObject:](v10, "addObject:", v17);
      }
    }

    id v12 = [v11 countByEnumeratingWithState:buf objects:&v53 count:16];
  }

  while (v12);

  if (!v13) {
    goto LABEL_18;
  }
LABEL_21:
  id v20 = sub_10019F0DC(v13, v10);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  dispatch_time_t v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_10019F6EC;
  v46[3] = &unk_1004F4AC8;
  uint64_t v23 = v22;
  uint64_t v47 = v23;
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "af_lenientMappedArray:", v46));
  *(void *)&__int128 v48 = _NSConcreteStackBlock;
  *((void *)&v48 + 1) = 3221225472LL;
  id v49 = sub_10019F760;
  os_signpost_id_t v50 = &unk_1004F4AF0;
  v51 = v23;
  id v52 = v24;
  uint64_t v25 = v23;
  id v26 = v24;
  id v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "af_mappedArray:", &v48));

  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_10019F990;
  v42[3] = &unk_1004F45B8;
  id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int16 v43 = v28;
  [v27 enumerateObjectsUsingBlock:v42];
  if ([v8 count])
  {
    id v29 = [v27 mutableCopy];
    uint64_t v53 = 0LL;
    v54 = &v53;
    uint64_t v55 = 0x2020000000LL;
    uint64_t v56 = 0LL;
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_10019FA30;
    v37[3] = &unk_1004F4608;
    uint64_t v38 = v28;
    id v30 = v27;
    id v39 = v30;
    id v41 = &v53;
    id v31 = v29;
    id v40 = v31;
    [v8 enumerateKeysAndObjectsUsingBlock:v37];
    id v27 = [v31 copy];

    __int128 v32 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v34 = v54[3];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ADProximityTuplesForProximitySignals";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v34;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&_BYTE buf[24] = v27;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "%s #hal Incorporated %lu from RP proximity: %@",  buf,  0x20u);
    }

    _Block_object_dispose(&v53, 8);
  }

  return v27;
}

void sub_10019EE5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_10019EE7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 24);
  if (v2 == *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADDeviceProximityManager getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:includesAllReachableDevi"
           "ces:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #hal cached proximity for request cleared due to timeout",  (uint8_t *)&v5,  0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
      id v2 = *(void **)(v1 + 24);
    }

    *(void *)(v1 + 24) = 0LL;
  }

void sub_10019EF54(uint64_t a1, void *a2, void *a3)
{
  id v4 = sub_10019F0DC(a2, a3);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 info]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 assistantIdentifier]);

        if (v12)
        {
          BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v12]);

          if (!v13) {
            [*(id *)(a1 + 32) setObject:v10 forKey:v12];
          }
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v7);
  }

  uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10019F0DC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v3 roomName]);
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v47 = "_ADProximityTuplesForPeerInfo";
    __int16 v48 = 2112;
    id v49 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s #hal Primary Device Room Name: %@",  buf,  0x16u);
  }

  __int128 v35 = v5;
  uint64_t v34 = v3;
  if (-[NSMutableDictionary length](v5, "length"))
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    id v8 = v4;
    id v9 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v41 != v11) {
            objc_enumerationMutation(v8);
          }
          BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v40 + 1) + 8 * (void)i) roomName]);
          if (v13)
          {
            if ((uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", v13)),
                  id v15 = [v14 integerValue],
                  v14,
                  -[NSMutableDictionary isEqual:](v35, "isEqual:", v13))
              && (uint64_t v16 = AFDeviceProximityCompare(v15, 3000LL), v17 = &off_100513498, v16 == 1)
              || (uint64_t v18 = AFDeviceProximityCompare(v15, 1000LL), v17 = &off_1005134B0, v18 == 1))
            {
              -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v17, v13);
            }
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v40 objects:v45 count:16];
      }

      while (v10);
    }

    id v3 = v34;
  }

  else
  {
    id v7 = 0LL;
  }

  __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v47 = "_ADProximityTuplesForPeerInfo";
    __int16 v48 = 2112;
    id v49 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s Proximity by Room Name: %@", buf, 0x16u);
  }

  __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (v3)
  {
    id v21 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v3,  &off_1005134C8);
    -[NSMutableArray addObject:](v20, "addObject:", v21);
  }

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v22 = v4;
  id v23 = [v22 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v37;
    do
    {
      for (j = 0LL; j != v24; j = (char *)j + 1)
      {
        if (*(void *)v37 != v25) {
          objc_enumerationMutation(v22);
        }
        id v27 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 roomName]);
        if (v28
          && (uint64_t v29 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", v28))) != 0)
        {
          id v30 = (void *)v29;
          id v31 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v27,  v29);
        }

        else
        {
          id v31 = -[AFPeerContentTuple initWithInfo:content:]( objc_alloc(&OBJC_CLASS___AFPeerContentTuple),  "initWithInfo:content:",  v27,  &off_1005134E0);
        }

        -[NSMutableArray addObject:](v20, "addObject:", v31);
      }

      id v24 = [v22 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v24);
  }

  id v32 = -[NSMutableArray copy](v20, "copy");
  return v32;
}

NSDictionary *__cdecl sub_10019F4FC(id a1, AFPeerContentTuple *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AFPeerContentTuple info](v2, "info"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantIdentifier]);

  if (v4)
  {
    id v7 = v4;
    id v8 = v2;
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
  }

  else
  {
    int v5 = 0LL;
  }

  return (NSDictionary *)v5;
}

id sub_10019F5B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceIDPair]);
  unsigned int v5 = [v4 containsObject:*(void *)(a1 + 32)];

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceIDPair]);
    uint64_t v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472LL;
    BOOL v13 = sub_10019FE78;
    uint64_t v14 = &unk_1004F4568;
    id v15 = *(id *)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectsPassingTest:&v11]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "anyObject", v11, v12, v13, v14));

    if (v8)
    {
      uint64_t v16 = v8;
      id v17 = v3;
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
    }

    else
    {
      id v9 = 0LL;
    }
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

id sub_10019F6EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(v3, "af_didHearVoiceTrigger"))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceInfo]);
    [*(id *)(a1 + 32) addObject:v4];
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 roomName]);
  }

  else
  {
    unsigned int v5 = 0LL;
  }

  return v5;
}

AFPeerContentTuple *sub_10019F760(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 info]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 roomName]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 content]);
  id v7 = [v6 integerValue];

  if ([*(id *)(a1 + 32) containsObject:v4] && AFDeviceProximityCompare(v7, 2000) == 1)
  {
    id v8 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v9 = v8;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 info]);
      int v17 = 136315394;
      uint64_t v18 = "_ADProximityTuplesForDeviceContexts_block_invoke_2";
      __int16 v19 = 2112;
      __int128 v20 = v10;
      uint64_t v11 = "%s #hal Upgrading %@ to Near because this device heard HS";
LABEL_12:
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v17, 0x16u);
    }
  }

  else
  {
    if (![*(id *)(a1 + 40) containsObject:v5]
      || AFDeviceProximityCompare(v7, 2000LL) != 1)
    {
      id v15 = (AFPeerContentTuple *)v3;
      goto LABEL_10;
    }

    uint64_t v12 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v9 = v12;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 info]);
      int v17 = 136315394;
      uint64_t v18 = "_ADProximityTuplesForDeviceContexts_block_invoke";
      __int16 v19 = 2112;
      __int128 v20 = v10;
      uint64_t v11 = "%s #hal Upgrading %@ to Near because this room has a device that heard HS";
      goto LABEL_12;
    }
  }

  BOOL v13 = objc_alloc(&OBJC_CLASS___AFPeerContentTuple);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 info]);
  id v15 = -[AFPeerContentTuple initWithInfo:content:](v13, "initWithInfo:content:", v14, &off_100513480);

LABEL_10:
  return v15;
}

void sub_10019F990(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([a2 info]);
  id v6 = sub_10016AD0C(v5);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v6);

  id v7 = (void *)v9;
  if (v9)
  {
    id v8 = (NSMutableIndexSet *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:"));
    if (!v8)
    {
      id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
      [*(id *)(a1 + 32) setObject:v8 forKey:v9];
    }

    -[NSMutableIndexSet addIndex:](v8, "addIndex:", a3);

    id v7 = (void *)v9;
  }
}

void sub_10019FA30(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 observationDate]);
  [v7 timeIntervalSinceDate:v8];
  double v10 = v9;

  if (v10 < 420.0)
  {
    unsigned int v11 = [v6 proximity];
    uint64_t v12 = 3000LL;
    if (v11 == 30) {
      uint64_t v12 = 1000LL;
    }
    if (v11) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v5]);
    if ([v14 count])
    {
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10019FCBC;
      v27[3] = &unk_1004F45E0;
      id v15 = *(id *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 56);
      id v28 = v15;
      uint64_t v31 = v16;
      uint64_t v32 = v13;
      id v29 = v5;
      id v30 = *(id *)(a1 + 48);
      [v14 enumerateIndexesUsingBlock:v27];
    }

    else
    {
      int v17 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v24 = v17;
        uint64_t Name = AFDeviceProximityGetName(v13);
        id v26 = (void *)objc_claimAutoreleasedReturnValue(Name);
        *(_DWORD *)buf = 136315650;
        uint64_t v34 = "ADProximityTuplesForProximitySignals_block_invoke";
        __int16 v35 = 2112;
        id v36 = v5;
        __int16 v37 = 2112;
        __int128 v38 = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "%s #hal Adding %@ to proximity: %@",  buf,  0x20u);
      }

      uint64_t v18 = *(void **)(a1 + 48);
      __int16 v19 = objc_alloc(&OBJC_CLASS___AFPeerContentTuple);
      id v20 = sub_100165580(v5);
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v13));
      id v23 = -[AFPeerContentTuple initWithInfo:content:](v19, "initWithInfo:content:", v21, v22);
      [v18 addObject:v23];
    }
  }
}

void sub_10019FCBC(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndex:a2]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 content]);
  uint64_t v6 = AFDeviceProximityCompare([v5 integerValue], *(void *)(a1 + 64));

  if (v6 == 1)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 64);
      id v15 = v7;
      uint64_t Name = AFDeviceProximityGetName(v14);
      int v17 = (void *)objc_claimAutoreleasedReturnValue(Name);
      int v18 = 136315650;
      __int16 v19 = "ADProximityTuplesForProximitySignals_block_invoke_5";
      __int16 v20 = 2112;
      uint64_t v21 = v13;
      __int16 v22 = 2112;
      id v23 = v17;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s #hal Upgrading %@ to proximity: %@",  (uint8_t *)&v18,  0x20u);
    }

    id v8 = *(void **)(a1 + 48);
    double v9 = objc_alloc(&OBJC_CLASS___AFPeerContentTuple);
    double v10 = (void *)objc_claimAutoreleasedReturnValue([v4 info]);
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 64)));
    uint64_t v12 = -[AFPeerContentTuple initWithInfo:content:](v9, "initWithInfo:content:", v10, v11);
    [v8 replaceObjectAtIndex:a2 withObject:v12];
  }
}

uint64_t sub_10019FE78(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

void sub_10019FE98(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10019FF08;
  v2[3] = &unk_1004FD6C8;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 _getAggregatedProximityObservationsWithCompletion:v2];
}

void sub_10019FF08(uint64_t a1, void *a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = sub_10019E964(0LL, *(void **)(*(void *)(a1 + 32) + 40LL), v4);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10019FF80(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) allValues]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001A0020;
  v6[3] = &unk_1004F4730;
  void v6[4] = *(void *)(a1 + 32);
  [v2 enumerateObjectsUsingBlock:v6];

  [*(id *)(a1 + 32) _clearProximityDiscoveryLink];
  id v3 = *(void **)(*(void *)(a1 + 32) + 80LL);
  if (v3)
  {
    [v3 cancel];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = 0LL;
  }

void sub_1001A0020(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 lastObject]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 deviceIDPair]);
  if (([v4 containsObject:*(void *)(*(void *)(a1 + 32) + 40)] & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 observationDate]);
  id v6 = [v5 compare:*(void *)(*(void *)(a1 + 32) + 88)];

  if (v6 == (id)-1LL)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceIDPair]);
    id v4 = [v7 mutableCopy];

    [v4 removeObject:*(void *)(*(void *)(a1 + 32) + 40)];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 anyObject]);
    double v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      unsigned int v11 = "-[ADDeviceProximityManager _stopScanning]_block_invoke_2";
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #hal Recording unseen device: %@ as Unknown proximity",  (uint8_t *)&v10,  0x16u);
    }

    [*(id *)(a1 + 32) _insertProximityForRemoteDeviceID:v8 rpProximity:0];

    goto LABEL_6;
  }

void sub_1001A019C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v3 = v2;
  if (*(void *)(*(void *)(a1 + 32) + 88) && (objc_msgSend(v2, "timeIntervalSinceDate:"), v4 <= 20.0))
  {
    uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      int v17 = "-[ADDeviceProximityManager performProximityScan]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s #hal Skip scan, previous scan occurred too recently",  buf,  0xCu);
    }
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      int v17 = "-[ADDeviceProximityManager performProximityScan]_block_invoke";
      __int16 v18 = 2048;
      uint64_t v19 = 0x4014000000000000LL;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #hal begin scanning for %f sec",  buf,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 88LL), v3);
    id v6 = [*(id *)(a1 + 32) _proximityDiscoveryLink];
    id v7 = *(void **)(*(void *)(a1 + 32) + 80LL);
    if (v7) {
      [v7 cancel];
    }
    id v8 = objc_alloc(&OBJC_CLASS___AFWatchdogTimer);
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(v9 + 128);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1001A0394;
    v15[3] = &unk_1004FD940;
    void v15[4] = v9;
    unsigned int v11 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( v8,  "initWithTimeoutInterval:onQueue:timeoutHandler:",  v10,  v15,  5.0);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 80);
    *(void *)(v12 + 80) = v11;

    [*(id *)(*(void *)(a1 + 32) + 80) start];
  }
}

id sub_1001A0394(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315138;
    id v5 = "-[ADDeviceProximityManager performProximityScan]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s #hal Proximity scanning stopped",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) _stopScanning];
}

void sub_1001A0448(uint64_t a1, uint64_t a2, char a3)
{
  int v4 = *(void **)(a1 + 32);
  id v5 = (dispatch_queue_s *)v4[16];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001A053C;
  v6[3] = &unk_1004FC4D0;
  id v7 = v4;
  char v8 = a3;
  dispatch_async(v5, v6);
}

void sub_1001A04C0(id a1, AFSiriActivationContextMutating *a2)
{
  id v2 = a2;
  -[AFSiriActivationContextMutating setSource:](v2, "setSource:", 1LL);
  -[AFSiriActivationContextMutating setEvent:](v2, "setEvent:", 4LL);
  -[AFSiriActivationContextMutating setOptions:](v2, "setOptions:", 1LL);
}

void sub_1001A0504(id a1, AFSiriActivationContextMutating *a2)
{
  id v2 = a2;
  -[AFSiriActivationContextMutating setSource:](v2, "setSource:", 1LL);
  -[AFSiriActivationContextMutating setEvent:](v2, "setEvent:", 15LL);
}

uint64_t sub_1001A053C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 32LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1001A058C(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___ADDeviceProximityManager);
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v8 = dispatch_queue_create("ADDeviceProximityManager", v3);

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFContextDonationService defaultService](&OBJC_CLASS___AFContextDonationService, "defaultService"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
  id v6 = -[ADDeviceProximityManager _initWithQueue:donationService:deviceCircleManager:]( v1,  "_initWithQueue:donationService:deviceCircleManager:",  v8,  v4,  v5);
  id v7 = (void *)qword_100578020;
  qword_100578020 = (uint64_t)v6;
}

void sub_1001A0CEC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setDiscoveryOptions:v3];
  [v4 setTransportOptions:a1[5]];
  [v4 setConnectionOptions:a1[6]];
  [v4 setEnablesProximityTracking:a1[7]];
}

void sub_1001A1FB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001A22A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1001A2518(_Unwind_Exception *a1)
{
}

uint64_t sub_1001A25EC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 64LL);
  if (v4 && ((*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v3) & 1) == 0)
  {
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      dispatch_queue_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 homeIdentifier]);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Ignoring item belonging to non-current Home %@",  (uint8_t *)&v9,  0xCu);
    }

    uint64_t v5 = 0LL;
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

id sub_1001A2708(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 16LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

BOOL sub_1001A2758(uint64_t a1)
{
  return *(int *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) < 1
      || *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) < 1;
}

BOOL sub_1001A278C(uint64_t a1, void *a2)
{
  id v3 = [a2 timelinePositionWithToday:*(void *)(*(void *)(a1 + 32) + 40) withCalendar:*(void *)(*(void *)(a1 + 32) + 32)];
  if (!v3) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
  return v3 != 0LL;
}

ADSynchronizedIdItemPair *sub_1001A27D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  id v4 = [v3 timelinePositionWithToday:*(void *)(*(void *)(a1 + 32) + 40) withCalendar:*(void *)(*(void *)(a1 + 32) + 32)];
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 138412546;
    id v12 = v3;
    __int16 v13 = 1024;
    int v14 = (int)v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Item %@ timelineposition %d",  (uint8_t *)&v11,  0x12u);
  }

  if (v4 == (id)2)
  {
    id v7 = v3;
    id v6 = 0LL;
    uint64_t v8 = a1 + 56;
  }

  else
  {
    if (v4 != (id)1)
    {
      id v6 = 0LL;
      id v7 = 0LL;
      goto LABEL_9;
    }

    id v6 = v3;
    id v7 = 0LL;
    uint64_t v8 = a1 + 48;
  }

  ++*(_DWORD *)(*(void *)(*(void *)v8 + 8LL) + 24LL);
LABEL_9:
  int v9 = -[ADSynchronizedIdItemPair initWithCurrent:andNext:]( objc_alloc(&OBJC_CLASS___ADSynchronizedIdItemPair),  "initWithCurrent:andNext:",  v6,  v7);

  return v9;
}

id sub_1001A2944(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _merge:a2 with:a3];
}

uint64_t sub_1001A2954(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001A2964(uint64_t a1)
{
}

void sub_1001A296C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
    int v8 = 67109120;
    LODWORD(v9) = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Devices with at least one item %d",  (uint8_t *)&v8,  8u);
  }

  if ([v3 state])
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v8 = 138412290;
      int v9 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "mergeRemotes failed %@",  (uint8_t *)&v8,  0xCu);
    }
  }
}

void sub_1001A2AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_merge:with:", *(void *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                                                  + 40LL), a2));
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1001A2B0C(uint64_t a1, void *a2)
{
}

void sub_1001A2B1C(id a1, BPSCompletion *a2)
{
  uint64_t v2 = a2;
  if (-[BPSCompletion state](v2, "state") == (id)1)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](v2, "error"));
      int v5 = 138412290;
      int v6 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Finalizing local events failed: %@",  (uint8_t *)&v5,  0xCu);
    }
  }
}

id sub_1001A2BF8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _processPerDeviceEvents:a2];
}

BOOL sub_1001A2C04(uint64_t a1, void *a2)
{
  uint64_t v3 = (char *)[a2 platform];
  return (unint64_t)(v3 - 1) <= 6
      && (*(void *)(*(void *)(a1 + 32) + 72LL) & qword_1003C9E80[(void)(v3 - 1)]) != 0LL;
}

id sub_1001A2C58(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 homeIdentifier]);
  id v4 = [v2 isEqual:v3];

  return v4;
}

id sub_1001A3298(uint64_t a1, void *a2)
{
  return [a2 toBMSiriHomeSeedWithHomeIdentifier:*(void *)(a1 + 32)];
}

ADSynchronizedIdItem *__cdecl sub_1001A32A4(id a1, BMSiriHomeSeed *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[ADSynchronizedIdItem initWithBMHomeSeed:]( objc_alloc(&OBJC_CLASS___ADSynchronizedIdItem),  "initWithBMHomeSeed:",  v2);

  return v3;
}

BMSiriUserAggregationId *__cdecl sub_1001A32E8(id a1, ADSynchronizedIdItem *a2)
{
  return (BMSiriUserAggregationId *)-[ADSynchronizedIdItem toBMSiriUserAggregationId](a2, "toBMSiriUserAggregationId");
}

ADSynchronizedIdItem *__cdecl sub_1001A32F0(id a1, BMSiriUserAggregationId *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[ADSynchronizedIdItem initWithBMUserAggregationId:]( objc_alloc(&OBJC_CLASS___ADSynchronizedIdItem),  "initWithBMUserAggregationId:",  v2);

  return v3;
}

BMSiriUserSeed *__cdecl sub_1001A3334(id a1, ADSynchronizedIdItem *a2)
{
  return (BMSiriUserSeed *)-[ADSynchronizedIdItem toBMSiriUserSeed](a2, "toBMSiriUserSeed");
}

ADSynchronizedIdItem *__cdecl sub_1001A333C(id a1, BMSiriUserSeed *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[ADSynchronizedIdItem initWithBMUserSeed:]( objc_alloc(&OBJC_CLASS___ADSynchronizedIdItem),  "initWithBMUserSeed:",  v2);

  return v3;
}

uint64_t sub_1001A5594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A55AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int128 v33 = v10;
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v9 localizedDescription]);
      *(_DWORD *)buf = 136315394;
      v54 = "-[ADExperimentManager _remoteFetchConfigMetadataWithServerConfigurationInfo:completion:]_block_invoke";
      __int16 v55 = 2114;
      uint64_t v56 = v34;
      _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%s Error downloading remote configuration plist: %{public}@",  buf,  0x16u);
    }

    int v11 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    if ([v11 isEqualToString:NSURLErrorDomain])
    {
      id v12 = [v9 code];

      if (v12 == (id)-1001LL)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v14 = 3308LL;
LABEL_26:
        id v16 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", v14));
        (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0LL, v16);
        goto LABEL_27;
      }
    }

    else
    {
    }

void sub_1001A5BE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1001A5CC8;
  void v12[3] = &unk_1004F5B98;
  id v13 = v6;
  id v17 = *(id *)(a1 + 48);
  char v18 = 1;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v14 = v5;
  uint64_t v15 = v8;
  id v16 = v9;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_1001A5CC8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void, void, void))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  0LL,  *(unsigned __int8 *)(a1 + 72));
  }

  else
  {
    id v2 = [[AFExperimentState alloc] initWithDictionaryRepresentation:*(void *)(a1 + 40)];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 mutatedCopyWithMutator:&stru_1004F4FD0]);

    id v4 = -[AFExperimentConfiguration initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___AFExperimentConfiguration),  "initWithDictionaryRepresentation:",  *(void *)(a1 + 40));
    if ([v3 didEnd]
      && (id v5 = *(void **)(a1 + 48),
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 endingGroupIdentifier]),
          LOBYTE(v5) = [v5 _isEndingGroupIdentifier:v6 validForConfiguration:v4],
          v6,
          (v5 & 1) == 0))
    {
      id v17 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        char v18 = v17;
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v3 endingGroupIdentifier]);
        *(_DWORD *)buf = 136315394;
        unsigned __int8 v26 = "-[ADExperimentManager _serverConfigurationForServerConfigurationInfo:completion:]_block_invoke_2";
        __int16 v27 = 2112;
        id v28 = v19;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Bad Ending Group Identifier Specified %@",  buf,  0x16u);
      }

      id v16 = (AFExperimentConfiguration *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3307LL));
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      unsigned int v7 = [v3 didEnd];
      uint64_t v8 = *(void *)(a1 + 64);
      if (v7)
      {
        id v9 = *(void **)(a1 + 48);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) configurationIdentifier]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue( [v9 _fallbackConfigurationForEndedExperimentWithIdentifier:v10 experimentState:v3]);
        (*(void (**)(uint64_t, void *, void, void))(v8 + 16))(v8, v11, *(unsigned __int8 *)(a1 + 72), 0LL);
      }

      else
      {
        (*(void (**)(void, AFExperimentConfiguration *, void, void))(v8 + 16))( *(void *)(a1 + 64),  v4,  *(unsigned __int8 *)(a1 + 72),  0LL);
      }

      dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
      id v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_1001A5FB4;
      v20[3] = &unk_1004FD470;
      id v14 = v4;
      uint64_t v15 = *(void *)(a1 + 48);
      id v21 = v14;
      uint64_t v22 = v15;
      id v23 = v3;
      id v24 = *(id *)(a1 + 56);
      dispatch_async(v13, v20);

      id v16 = v21;
    }
  }

void sub_1001A5FB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1001A606C;
    v4[3] = &unk_1004F7328;
    void v4[4] = v2;
    id v5 = *(id *)(a1 + 48);
    id v6 = *(id *)(a1 + 56);
    [v2 _storeServerConfig:v3 completion:v4];
  }

  else
  {
    _[*(id *)(a1 + 40) _setExperimentState:*(void *)(a1 + 48) forServerConfigurationInfo:*(void *)(a1 + 56)];
  }

id *sub_1001A606C(id *result, uint64_t a2)
{
  if (!a2) {
    return (id *)_[result[4] _setExperimentState:result[5] forServerConfigurationInfo:result[6]];
  }
  return result;
}

void sub_1001A6084(id a1, AFExperimentStateMutating *a2)
{
  id v2 = a2;
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  -[AFExperimentStateMutating setLastSyncDate:](v2, "setLastSyncDate:", v3);
}

void sub_1001A60D8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getConfigurationsByIdentifier]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getServerConfigurationInfosByIdentifier]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 objectForKey:*(void *)(a1 + 40)]);

  if (v17 | v4)
  {
    uint64_t v5 = SiriCoreUUIDStringCreate(v17);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [*(id *)(a1 + 32) _setExperimentIdentifier:v6 forConfigurationIdentifier:*(void *)(a1 + 40)];
    unsigned int v7 = *(void **)(a1 + 32);
    if (v7[4])
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _getContext]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 experimentsByConfigurationIdentifier]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v9));

      id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createExperimentForExperimentConfiguration:v17 experimentIdentifier:v6]);
      [v10 setObject:v11 forKey:*(void *)(a1 + 40)];
      id v12 = -[AFExperimentContext initWithExperimentsByConfigurationIdentifier:]( objc_alloc(&OBJC_CLASS___AFExperimentContext),  "initWithExperimentsByConfigurationIdentifier:",  v10);
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = *(void **)(v13 + 32);
      *(void *)(v13 + 32) = v12;
    }

    uint64_t v15 = *(void *)(a1 + 48);
    if (!v15) {
      goto LABEL_9;
    }
    id v16 = *(void (**)(void))(v15 + 16);
LABEL_8:
    v16();
LABEL_9:

    goto LABEL_10;
  }

  if (*(void *)(a1 + 48))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3300LL));
    id v16 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_8;
  }

void sub_1001A6264(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _experimentForExperimentConfiguration:a3]);
  if (v5) {
    [*(id *)(a1 + 40) setObject:v5 forKey:v6];
  }
}

id sub_1001A62C4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%ld",  [v3 code]));
    [v2 setObject:v4 forKey:@"errorCode"];
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configurationIdentifier]);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configurationIdentifier]);
    [v2 setObject:v6 forKey:@"configurationIdentifier"];
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deploymentGroupIdentifier]);

  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deploymentGroupIdentifier]);
    [v2 setObject:v8 forKey:@"groupIdentifier"];
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configurationVersion]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configurationVersion]);
    [v2 setObject:v10 forKey:@"version"];
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"timeToResolve"]);
  [v11 doubleValue];
  double v13 = v12;

  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v13));
  [v2 setObject:v14 forKey:@"timeToResolve"];

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"fetchedRemote"]);
  id v16 = [v15 BOOLValue];

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v16));
  [v2 setObject:v17 forKey:@"fetchedRemote"];

  return v2;
}

void sub_1001A64C4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = a2;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v9 timeIntervalSinceDate:*(void *)(a1 + 32)];
  double v11 = v10;

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  v15[0] = @"timeToResolve";
  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v11));
  v15[1] = @"fetchedRemote";
  v16[0] = v12;
  double v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  v16[1] = v13;
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  2LL));

  [*(id *)(a1 + 40) _logDidVendExperiment:v8 fetchDetails:v14 error:v7];
}

void sub_1001A6610(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getServerConfigurationInfosByIdentifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);

  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001A6758;
    v10[3] = &unk_1004F4F40;
    id v5 = *(id *)(a1 + 48);
    void v10[4] = *(void *)(a1 + 32);
    id v11 = v5;
    [v4 _serverConfigurationForServerConfigurationInfo:v3 completion:v10];
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getContext]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 experimentsByConfigurationIdentifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:*(void *)(a1 + 40)]);

    if (v8)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3301LL));
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }
}

void sub_1001A6758(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v16 = v6;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _experimentForExperimentConfiguration:v6]);
    if (v7)
    {
      id v8 = *(void **)(*(void *)(a1 + 32) + 32LL);
      if (v8)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 experimentsByConfigurationIdentifier]);
        double v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v9));

        id v11 = (void *)objc_claimAutoreleasedReturnValue([v16 identifier]);
        [v10 setObject:v7 forKey:v11];

        double v12 = -[AFExperimentContext initWithExperimentsByConfigurationIdentifier:]( objc_alloc(&OBJC_CLASS___AFExperimentContext),  "initWithExperimentsByConfigurationIdentifier:",  v10);
        uint64_t v13 = *(void *)(a1 + 32);
        id v14 = *(void **)(v13 + 32);
        *(void *)(v13 + 32) = v12;
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 3301LL));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

void sub_1001A68B4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = (void *)AFSiriLogContextDaemon;
  if (v7)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v14 = *(void **)(a1 + 32);
      uint64_t v15 = v8;
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 configurationIdentifier]);
      int v17 = 136315650;
      char v18 = "-[ADExperimentManager synchronizeExperimentConfigurationsIfApplicableWithCompletion:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v16;
      __int16 v21 = 2112;
      id v22 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Encountered error while synchronizing %@: %@",  (uint8_t *)&v17,  0x20u);
    }

    uint64_t v9 = *(void *)(a1 + 40);
    if (v9)
    {
      double v10 = *(void (**)(void))(v9 + 16);
LABEL_10:
      v10();
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v11 = v8;
      double v12 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      int v17 = 136315394;
      char v18 = "-[ADExperimentManager synchronizeExperimentConfigurationsIfApplicableWithCompletion:]_block_invoke";
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Fished synchronizing configuration  %@",  (uint8_t *)&v17,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 40);
    if (v13)
    {
      double v10 = *(void (**)(void))(v13 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1001A6A68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getContext]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1001A6AAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001A6ABC(uint64_t a1)
{
}

void sub_1001A6AC4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getContext]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001A6AFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getConfigurationsByIdentifier]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 allValues]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1001A6B50(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getConfigurationsByIdentifier]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001A6BE4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADExperimentManager);
  uint64_t v2 = (void *)qword_100578030;
  qword_100578030 = (uint64_t)v1;
}

void sub_1001AA3E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001B4A70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

LABEL_58:
  v149 = v74;
  if (-[NSString isDictation](v151, "isDictation"))
  {
    uint64_t v82 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_70;
    }
    *(_DWORD *)buf = 136315138;
    v158 = "-[ADCommandCenter _sendStartSpeechCommandWithSpeechManager:info:context:]";
    uint64_t v83 = "%s Not checking _areRequiredAssetsMissing since this is a Dictation request.";
    goto LABEL_61;
  }

  if (!-[ADCommandCenter _areRequiredAssetsMissing](self, "_areRequiredAssetsMissing"))
  {
LABEL_70:
    id v90 = objc_opt_class(v11[269]);
    v147 = v51;
    v148 = v9;
    v145 = v8;
    if ((objc_opt_isKindOfClass(v16, v90) & 1) != 0 && self->_siriUODSupported)
    {
      id v91 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _fetchComputedModeAndUpdateRequestDelegate]( self,  "_fetchComputedModeAndUpdateRequestDelegate"));
      id v92 = -[NSString speechEvent](v151, "speechEvent") == (id)17;
      id v93 = objc_alloc(&OBJC_CLASS___SMTRequestContextData);
      v152[0] = _NSConcreteStackBlock;
      v152[1] = 3221225472LL;
      v152[2] = sub_1001E0CB0;
      v152[3] = &unk_1004F5208;
      v143 = v16;
      id v94 = v16;
      v153 = v94;
      id v95 = v91;
      v154 = v95;
      v155 = self;
      v156 = v92;
      id v96 = [v93 initWithBuilder:v152];
      if (-[AFSpeechRequestOptions isTest](self->_currentSpeechRequestOptions, "isTest"))
      {
        id v97 = (void *)objc_claimAutoreleasedReturnValue( -[AFSpeechRequestOptions testRequestOptions]( self->_currentSpeechRequestOptions,  "testRequestOptions"));
        id v98 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _requestDispatcherService](self, "_requestDispatcherService"));
        v141 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _account](self, "_account"));
        id v99 = (void *)objc_claimAutoreleasedReturnValue([v141 assistantIdentifier]);
        v142 = v96;
        id v100 = (void *)objc_claimAutoreleasedReturnValue(-[NSString aceId](v149, "aceId"));
        v101 = (void *)objc_claimAutoreleasedReturnValue([v94 origin]);
        id v102 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _locationManager](self, "_locationManager"));
        uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue([v102 knownLocation]);
        v140 = v95;
        id v104 = (void *)objc_claimAutoreleasedReturnValue([v97 jitContext]);
        id v105 = (void *)objc_claimAutoreleasedReturnValue([v97 overrideModelPath]);
        [v98 startTestSpeechRequestWithAssistantId:v99 requestId:v100 enableASR:1 inputOrigin:v101 location:v103 jitContext:v104 overrideModelPath:v105 re questContextData:v142];

        id v95 = v140;
        v74 = v149;

        id v96 = v142;
        id v106 = (void *)objc_claimAutoreleasedReturnValue(-[NSString aceId](v149, "aceId"));
        -[ADCommandCenter _emitDeviceDynamicContextForRequest:](self, "_emitDeviceDynamicContextForRequest:", v106);
      }

      else
      {
        id v107 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _requestDispatcherService](self, "_requestDispatcherService"));
        id v108 = (void *)objc_claimAutoreleasedReturnValue( -[ADCommandCenter _requestDispatcherSessionConfiguration]( self,  "_requestDispatcherSessionConfiguration"));
        id v109 = (void *)objc_claimAutoreleasedReturnValue(-[NSString aceId](v149, "aceId"));
        id v110 = (void *)objc_claimAutoreleasedReturnValue([v94 origin]);
        id v111 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenter _locationManager](self, "_locationManager"));
        id v112 = (void *)objc_claimAutoreleasedReturnValue([v111 knownLocation]);
        [v107 startSpeechRequestWithConfiguration:v108 requestId:v109 inputOrigin:v110 location:v112 asrOnServer:self->_siriHybridUODSupported requestContextData:v96];

        v74 = v149;
        id v97 = (void *)objc_claimAutoreleasedReturnValue(-[NSString aceId](v149, "aceId"));
        -[ADCommandCenter _emitDeviceDynamicContextForRequest:](self, "_emitDeviceDynamicContextForRequest:", v97);
      }

      id v16 = (SASStartSpeechRequest *)v143;
      id v8 = v145;
      id v51 = v147;
      uint64_t v9 = v148;
      __int128 v50 = v150;
    }

    -[ADCommandCenter _sendRetryableRequestToServer:](self, "_sendRetryableRequestToServer:", v74);
    id v113 = (void *)objc_claimAutoreleasedReturnValue(-[SASStartSpeechRequest aceId](v16, "aceId"));
    if (v50)
    {
      v114 = v50;
    }

    else if (v51)
    {
      v114 = v51;
    }

    else
    {
      v114 = v16;
    }

    -[ADCommandCenter _setCurrentRequestWithCommand:](self, "_setCurrentRequestWithCommand:", v114);
    [v9 updateStartSpeechId:v113];
    objc_storeStrong((id *)&self->_startSpeechCommand, v16);
    if (self->_siriFullUODSupported)
    {
      v116 = SiriCoreUUIDStringCreate(v115);
      id v117 = (NSString *)objc_claimAutoreleasedReturnValue(v116);
      speechRecognitionResultUUID = self->_speechRecognitionResultUUID;
      self->_speechRecognitionResultUUID = v117;
    }

    id v119 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v120 = self->_speechRecognitionResultUUID;
      *(_DWORD *)buf = 136315650;
      v158 = "-[ADCommandCenter _sendStartSpeechCommandWithSpeechManager:info:context:]";
      v159 = 2112;
      v160 = v120;
      v161 = 2112;
      v162 = v113;
      _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_INFO,  "%s StartSpeech resultUUID : %@ AceID : %@",  buf,  0x20u);
    }

    id v121 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommandCenterCurrentRequest currentRequestId](self->_currentRequest, "currentRequestId"));
    id v122 = +[ADDaemon processLaunchMachTime](&OBJC_CLASS___ADDaemon, "processLaunchMachTime");
    id v123 = +[ADDaemon processLoadedMachTime](&OBJC_CLASS___ADDaemon, "processLoadedMachTime");
    hasReceivedFirstRequest = self->_hasReceivedFirstRequest;
    id v125 = v121;
    id v126 = sub_1000D7FD8(v125);
    id v127 = (void *)objc_claimAutoreleasedReturnValue(v126);
    if (v127)
    {
      v144 = self;
      id v128 = v113;
      v129 = v16;
      v130 = !hasReceivedFirstRequest;
      __int16 v131 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEvent);
      id v132 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEventMetadata);
      [v132 setRequestId:v127];
      [v131 setEventMetadata:v132];
      __int16 v133 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHAssistantDaemonLaunchMetadataReported);
      [v133 setAssistantDaemonSpawnTimestampInNs:v122];
      [v133 setAssistantDaemonLoadedTimestampInNs:v123];
      uint64_t v134 = v130;
      id v16 = (SASStartSpeechRequest *)v129;
      id v113 = v128;
      self = v144;
      [v133 setIsFirstRequest:v134];
      [v131 setAssistantdLaunchMetadataReported:v133];
      v135 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
      [v135 emitMessage:v131];

      id v8 = v145;
    }

    else
    {
      v136 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v158 = "_EmitDaemonLaunchMetadataReportedForRequestId";
        v159 = 2112;
        v160 = (NSString *)v125;
        _os_log_error_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_ERROR,  "%s The requestId=%@ is malformed, unable to log SELF command",  buf,  0x16u);
      }
    }

    self->_hasReceivedFirstRequest = 1;
    self->_speechHasAcceptedResultCandidate = 0;
    selectedResultCandidate = self->_selectedResultCandidate;
    self->_speechAcceptedResultCandidateDuration = 0.0;
    self->_selectedResultCandidate = 0LL;

    *(_WORD *)&self->_hasReceivedAtLeastOneResultCandidate = 0;
    [v8 setContext:v16];
    id v88 = v146;
    objc_msgSend(v8, "setIsDriving:", objc_msgSend(v146, "isDriving"));
    -[ADCommandCenter _trySendingShowRequestHandlingStatusForAsrOnDevice:startSpeechRequestId:]( self,  "_trySendingShowRequestHandlingStatusForAsrOnDevice:startSpeechRequestId:",  v150 != 0LL,  v113);
    uint64_t v9 = v148;
    if (CSSiriSpeechRecordingGetUsesServerEndpointingFromRequestOptions(self->_currentSpeechRequestOptions))
    {
      v138 = (void *)objc_claimAutoreleasedReturnValue(-[SASStartSpeechRequest aceId](v16, "aceId"));
      -[ADCommandCenter _sendEnableServerEndpointerCommandWithRefID:]( self,  "_sendEnableServerEndpointerCommandWithRefID:",  v138);

      id v51 = v147;
      v89 = v149;
    }

    else
    {
      v139 = (os_log_s *)AFSiriLogContextDaemon;
      id v51 = v147;
      v89 = v149;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v158 = "-[ADCommandCenter _sendStartSpeechCommandWithSpeechManager:info:context:]";
        _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_INFO,  "%s Skipped enable server endpointer command because ADSpeechCapturingGetUsesServerEndpointingFromRequestOptions == NO",  buf,  0xCu);
      }
    }

    -[ADCommandCenter _sendLocationIfNeededForRequest](self, "_sendLocationIfNeededForRequest");
    -[ADCommandCenter _sendGizmoSharedDataIfNeeded](self, "_sendGizmoSharedDataIfNeeded");

    __int128 v50 = v150;
    goto LABEL_94;
  }

  uint64_t v84 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v158 = "-[ADCommandCenter _sendStartSpeechCommandWithSpeechManager:info:context:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEBUG,  "%s _areRequiredAssetsMissing is true even when the device supports UOD",  buf,  0xCu);
  }

  currentUodStatus = self->_currentUodStatus;
  v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSString aceId](v74, "aceId"));
  sub_1001E0AB0(currentUodStatus, v86);

  LODWORD(v86) = -[ADCommandCenter _shouldImmediatelyDismissSiriDueToMissingRequiredAssets]( self,  "_shouldImmediatelyDismissSiriDueToMissingRequiredAssets");
  uint64_t v82 = (os_log_s *)AFSiriLogContextDaemon;
  id v87 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (!(_DWORD)v86)
  {
    v74 = v149;
    if (v87)
    {
      *(_DWORD *)buf = 136315138;
      v158 = "-[ADCommandCenter _sendStartSpeechCommandWithSpeechManager:info:context:]";
      uint64_t v83 = "%s Not dismissing Siri request due to lack of assets.";
LABEL_61:
      _os_log_debug_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, v83, buf, 0xCu);
      goto LABEL_70;
    }

    goto LABEL_70;
  }

  if (v87)
  {
    *(_DWORD *)buf = 136315138;
    v158 = "-[ADCommandCenter _sendStartSpeechCommandWithSpeechManager:info:context:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEBUG,  "%s [_sendStartSpeechCommandWithSpeechManager] Dismissing Siri with reason AFDismissalAssetsNotReady",  buf,  0xCu);
  }

  -[ADCommandCenter dismissAssistantWithReason:](self, "dismissAssistantWithReason:", 5LL);
  id v88 = v146;
  v89 = v149;
LABEL_94:
}

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rttVariance));
  [v3 setObject:v32 forKey:@"rtt_variance"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_12:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }

  PBDataWriterWriteUint64Field(v5, self->_txPackets, 20LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }

  v4[13] = self->_txUnacked;
  *((_DWORD *)v4 + 53) |= 0x1000u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_17:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_60;
  }

  v5[8] = self->_sndBandwidth;
  *((_DWORD *)v5 + 53) |= 0x80u;
  has = self->_has;
  if ((*(_DWORD *)&has & 0x1000000) == 0)
  {
LABEL_22:
    if ((*(_DWORD *)&has & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }

  uint64_t v39 = 0LL;
  if ((*(_BYTE *)&has & 0x10) != 0)
  {
LABEL_42:
    __int128 v38 = 2654435761u * self->_rxDuplicateBytes;
    if ((*(_BYTE *)&has & 0x20) != 0) {
      goto LABEL_43;
    }
    goto LABEL_60;
  }

  self->_txPackets = *((void *)v4 + 11);
  *(_DWORD *)&self->_has |= 0x400u;
  id v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x200) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }

void sub_1001BEDC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1001C376C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_1001C7418( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, id location)
{
}

void sub_1001D11C8(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _serviceManager]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allServices]);

  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v4 = dispatch_group_create();
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v5 = v2;
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v23;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v5);
        }
        double v10 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)v9);
        dispatch_group_enter(v4);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        id v18[2] = sub_1001D13D0;
        v18[3] = &unk_1004F5EA8;
        __int16 v19 = v3;
        id v20 = v10;
        __int16 v21 = v4;
        [v10 getInfoWithCompletion:v18];

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v7);
  }

  id v11 = *(void **)(a1 + 40);
  double v12 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001D1430;
  block[3] = &unk_1004FD990;
  id v16 = v3;
  id v17 = v11;
  uint64_t v13 = v3;
  dispatch_group_notify(v4, v12, block);
}

void sub_1001D13D0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = a2;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
    [v3 setObject:v5 forKey:v6];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1001D1430(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _listInstalledServicesWithCompletion:]_block_invoke_3";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Services %@", (uint8_t *)&v5, 0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1001D14F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _adviseSessionArbiterToContinueWithPreviousWinner:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001D1504(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    double v8 = *(double *)(a1 + 40);
    double v7 = *(double *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    id v10 = v5;
    char v123 = 0;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    double v12 = (void *)objc_claimAutoreleasedReturnValue([v10 path]);
    unsigned int v13 = [v11 fileExistsAtPath:v12 isDirectory:&v123];

    if (v13)
    {
      if (!v123) {
        goto LABEL_13;
      }
      id v14 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 path]);
      id v16 = -[NSString initWithFormat:]( v14,  "initWithFormat:",  @"Directory exists at path %@, but it is expected to be a file.",  v15);
    }

    else
    {
      char v18 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 path]);
      id v16 = -[NSString initWithFormat:](v18, "initWithFormat:", @"File does not exist at path %@.", v15);
    }

    __int16 v19 = v16;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  226LL,  v16));

    if (v20)
    {
      __int16 v21 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)inPropertyData = 136315394;
        *(void *)&inPropertyData[4] = "ADAudioFileTrim";
        *(_WORD *)&inPropertyData[12] = 2112;
        *(void *)&inPropertyData[14] = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s error = %@", inPropertyData, 0x16u);
      }

      __int128 v22 = v20;
      __int128 v23 = 0LL;
      int v24 = 0;
      goto LABEL_31;
    }

id sub_1001D27E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _trimRecordedAudioWithIdentifier:*(void *)(a1 + 40) offset:*(void *)(a1 + 72) duration:*(void *)(a1 + 48) outputFileType:*(double *)(a1 + 56) completion:*(double *)(a1 + 64)];
}

void sub_1001D2800(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = *(void **)(a1 + 40);
  double v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001D28BC;
  block[3] = &unk_1004FBE08;
  id v12 = v5;
  id v13 = v7;
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_1001D28BC(void *a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = a1[4];
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _accessRecordedAudioWithIdentifier:completion:]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s recordedAudioFileURL = %@",  (uint8_t *)&v5,  0x16u);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

id sub_1001D2990(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessRecordedAudioWithIdentifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001D29A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint64_t v15 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s volumeService = %@", buf, 0x16u);
  }

  if (v3)
  {
    int v5 = *(_DWORD *)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1001D2B60;
    void v12[3] = &unk_1004FCC00;
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    LODWORD(v_Block_object_dispose((const void *)(v30 - 176), 8) = v5;
    [v3 setSiriOutputVolume:0 forAudioRoute:v6 withName:v7 operationType:v12 completion:v8];
    id v9 = v13;
LABEL_9:

    goto LABEL_10;
  }

  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v15 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Volume service is unavailable.",  buf,  0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 2601LL));
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v9);
    goto LABEL_9;
  }

void sub_1001D2B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v6, 0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADCommandCenter _setSiriOutputVolume:forAudioRoute:operationType:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s success", (uint8_t *)&v6, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

id sub_1001D2C90(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(a1 + 64);
  return [*(id *)(a1 + 32) _setSiriOutputVolume:*(void *)(a1 + 40) forAudioRoute:*(void *)(a1 + 56) operationType:*(void *)(a1 + 48) completion:a2];
}

void sub_1001D2CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v12 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s volumeService = %@", buf, 0x16u);
  }

  if (v3)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001D2E50;
    v9[3] = &unk_1004FC888;
    uint64_t v5 = *(void *)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    [v3 getSiriOutputVolumeForAudioRoute:0 withName:v5 completion:v9];
    int v6 = v10;
LABEL_9:

    goto LABEL_10;
  }

  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v12 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Volume service is unavailable.",  buf,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 2601LL));
    (*(void (**)(uint64_t, void *, float))(v8 + 16))(v8, v6, 0.0);
    goto LABEL_9;
  }

void sub_1001D2E50(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  int v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (v5)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      id v9 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
      __int16 v10 = 2112;
      double v11 = *(double *)&v5;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%s error = %@", (uint8_t *)&v8, 0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[ADCommandCenter _getSiriOutputVolumeForAudioRoute:completion:]_block_invoke";
    __int16 v10 = 2048;
    double v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s volume = %f", (uint8_t *)&v8, 0x16u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id, float))(v7 + 16))(v7, v5, a3);
  }
}

id sub_1001D2FA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getSiriOutputVolumeForAudioRoute:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001D2FB0(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = v2;
    uint64_t Name = AFExternalNotificationRequestHandlerStateGetName(v3);
    int v6 = (void *)objc_claimAutoreleasedReturnValue(Name);
    int v10 = 136315394;
    double v11 = "-[ADCommandCenter announceNotificationHandlingStateUpdatedToState:]_block_invoke";
    __int16 v12 = 2112;
    __int16 v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Announce notification handling state changed to: %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 assistantIdentifier]);
  [v7 announceNotificationHandlingStateUpdatedWithAssistantId:v9 toState:*(void *)(a1 + 40)];
}

void sub_1001D30D8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  [v2 getAccessoryInfoForAccessoryWithUUID:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

void sub_1001D311C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  [v2 getSpeakerCapabilityForAccessoryWithUUID:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 40)];
}

void sub_1001D3160(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001D31F0;
  v4[3] = &unk_1004F5BC0;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 pushSCDAAdvertisementContextToContextCollector:v3 completion:v4];
}

uint64_t sub_1001D31F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001D3204(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001D3294;
  v4[3] = &unk_1004F5BC0;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 pushMyriadAdvertisementContextToContextCollector:v3 completion:v4];
}

uint64_t sub_1001D3294(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001D32A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 assistantIdentifier]);
  [v3 setAssistantId:v5];

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionManager]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 languageCode]);
  [v3 setLanguageCode:v7];

  [v3 setUnderstandingOnDevice:*(unsigned __int8 *)(*(void *)(a1 + 32) + 896)];
  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 getDeviceOwnerSharedUserId]);
  int v10 = (void *)v9;
  if (v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = AFMultiUserDefaultSharedUserId;
  }
  [v3 setSharedUserId:v11];

  __int16 v12 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (v12) {
    [v12 adClientConnectionAuditToken];
  }
  else {
    memset(v13, 0, sizeof(v13));
  }
  [v3 setClientAuditToken:v13];
}

void sub_1001D33C0(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 setAudioSource:0];
  [v6 setAudioDestination:0];
  [v6 setResponseMode:*(void *)(a1 + 32)];
  objc_msgSend(v6, "setIsEyesFree:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 280), "isEyesFree"));
  [v6 setIsVoiceTriggerEnabled:sub_1001EBF24(*(void **)(*(void *)(a1 + 40) + 680))];
  objc_msgSend( v6,  "setIsTextToSpeechEnabled:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 16), "adTextToSpeechIsMuted") ^ 1);
  [v6 setIsTriggerlessFollowup:*(unsigned __int8 *)(a1 + 48)];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _bargeInModes]);
  [v6 setBargeInModes:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _approximatePreviousTTSInterval:0]);
  [v6 setApproximatePreviousTTSInterval:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _restrictedCommands]);
  [v6 setDeviceRestrictions:v5];

  [v6 setVoiceTriggerEventInfo:0];
  objc_msgSend(v6, "setVoiceAudioSessionId:", objc_msgSend(*(id *)(a1 + 40), "_sharedVoiceAudioSessionID"));
  objc_msgSend( v6,  "setIsSystemApertureEnabled:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 280), "isSystemApertureEnabled"));
  objc_msgSend( v6,  "setIsLiveActivitiesSupported:",  objc_msgSend(*(id *)(*(void *)(a1 + 40) + 280), "isLiveActivitiesSupported"));
  objc_msgSend(v6, "setIsInAmbient:", objc_msgSend(*(id *)(*(void *)(a1 + 40) + 280), "isInAmbient"));
  [v6 setIsDeviceShowingLockScreen:*(unsigned __int8 *)(*(void *)(a1 + 40) + 505)];
  [v6 setIsDeviceLocked:*(unsigned __int8 *)(*(void *)(a1 + 40) + 504)];
}

void sub_1001D3550(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  id v3 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %{public}@", v19, 0x16u);
  }

  id v5 = *(id *)(a1 + 40);
  if (*(_BYTE *)(a1 + 64))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 40)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 interactionIdentifier]);
    uint64_t v9 = (void *)v8;
    if (v8) {
      int v10 = (const __CFString *)v8;
    }
    else {
      int v10 = &stru_1004FECA0;
    }
    [v6 setObject:v10 forKeyedSubscript:@"dictationUIInteractionIdentifier"];

    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v6));
    id v5 = (id)v11;
  }

  objc_msgSend(*(id *)(a1 + 32), "_metrics_markLocalSpeechCompletedWithStatistics:", v5);
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
  uint64_t v13 = *(void *)(a1 + 48);
  if (!v13)
  {
    if (!*(_BYTE *)(a1 + 64)) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

  if (*(_BYTE *)(*(void *)(a1 + 32) + 362LL))
  {
    id v14 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v13;
    uint64_t v15 = "%s Local speech recognition failed, and so did the session: %{public}@";
    goto LABEL_24;
  }

  id v14 = (os_log_s *)AFSiriLogContextSpeech;
  if (*(_BYTE *)(a1 + 64))
  {
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v13;
    uint64_t v15 = "%s Local speech recognition failed: %{public}@";
LABEL_24:
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, v19, 0x16u);
LABEL_16:
    *(_BYTE *)(*(void *)(a1 + 32) + 362LL) = 0;
    if (objc_msgSend(*(id *)(a1 + 56), "isEqualToString:", v12, *(_OWORD *)v19, *(void *)&v19[16])) {
      [*(id *)(a1 + 32) _endSpeechRequestForCommand:0 withError:*(void *)(a1 + 48) suppressAlert:1 secureOfflineOnlyDictation:*(unsigned __int8 *)(a1 + 64)];
    }
    goto LABEL_18;
  }

  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int16 v19 = 136315394;
    *(void *)&void v19[4] = "-[ADCommandCenter dictationRequestDidCompleteRecognitionWithError:secureOfflineOnlyRecognition:"
                         "sessionUUID:statistics:]_block_invoke";
    *(_WORD *)&v19[12] = 2114;
    *(void *)&v19[14] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Ignoring local speech recognition failure because the session is still active: %{public}@",  v19,  0x16u);
  }

void sub_1001D38A0(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _speechManager]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] recognition]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 phrases]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 utterances]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] rawRecognition]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 phrases]);
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v6 utterances]);
  unsigned int v45 = [a1[5] recognitionPaused];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  if (![v8 forceOfflineRecognition])
  {
    unsigned int v44 = 0;
    goto LABEL_5;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  unsigned int v10 = [v9 secureOfflineOnly];

  if (v10)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
    unsigned int v44 = [v8 detectUtterances];
LABEL_5:

    goto LABEL_7;
  }

  unsigned int v44 = 0;
LABEL_7:
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  unsigned int v12 = [v11 secureOfflineOnly];

  if (v12)
  {
    uint64_t v13 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int128 v62 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Phrases=<REDACTED>", buf, 0xCu);
    }
  }

  else
  {
    [v4 enumerateObjectsUsingBlock:&stru_1004F5CD0];
    [v5 enumerateObjectsUsingBlock:&stru_1004F5CF0];
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  id v15 = [v14 transcriptionMode];

  if (v15 != (id)3)
  {
    char v18 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationLanguages]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);

    id v20 = a1[4];
    if (v20[363])
    {
      if (v20[360])
      {
        __int16 v21 = (os_log_s *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          __int128 v62 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s Ignoring and canceling final local recognition because server results have arrived",  buf,  0xCu);
        }

        [v2 cancelLocalRecognitionIfActive];
        id v17 = v46;
LABEL_23:

        goto LABEL_24;
      }

      if (!v20[362])
      {
        __int128 v43 = v19;
        if (v20[640])
        {
          uint64_t v29 = _AFPreferencesMultilingualDictationTimeoutInMilliSeconds();
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          uint64_t v31 = v30;
          if (v30)
          {
            [v30 doubleValue];
            double v33 = v32;
          }

          else
          {
            double v33 = 2000.0;
          }
        }

        else
        {
          double v33 = 2000.0;
        }

        uint64_t v34 = (os_log_s *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          __int128 v62 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
          __int16 v63 = 2048;
          double v64 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s Deferring final local recognition results for %f seconds while waiting for the server",  buf,  0x16u);
        }

        id v35 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 40) currentRequestId]);
        id v36 = [v35 copy];

        dispatch_time_t v37 = dispatch_time(0LL, (uint64_t)(v33 * 1000000.0));
        id v38 = a1[4];
        __int128 v40 = (dispatch_queue_s *)*((void *)v38 + 1);
        dispatch_time_t v41 = v37;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001D3E60;
        block[3] = &unk_1004F5D40;
        id v48 = v36;
        id v49 = v38;
        __int16 v19 = v43;
        id v50 = v43;
        id v51 = v3;
        char v59 = v44;
        id v52 = v2;
        char v60 = v45;
        id v53 = v4;
        id v54 = v7;
        id v55 = v5;
        id v17 = v46;
        id v56 = v46;
        id v57 = a1[6];
        id v58 = a1[7];
        id v39 = v36;
        dispatch_after(v41, v40, block);

        goto LABEL_23;
      }
    }

    uint64_t v42 = v6;
    __int128 v22 = v19;
    [v20 _handleLocalSpeechRecognitionForOfflineSupport:v3 logText:v44 ^ 1];
    if (v45) {
      [*((id *)a1[4] + 5) adSpeechDidPauseRecognition];
    }
    id v23 = a1[4];
    int v24 = (void *)*((void *)v23 + 5);
    id v26 = a1[6];
    id v25 = a1[7];
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*((id *)v23 + 36) aceId]);
    unsigned int v28 = v24;
    id v17 = v46;
    [v28 adSpeechRecordingDidRecognizePhrases:v4 rawPhrases:v7 utterances:v5 rawUtterances:v46 nluResult:v26 sessionUUID:v25 refId:v27];

    __int16 v19 = v22;
    id v6 = v42;
    goto LABEL_23;
  }

  __int16 v16 = (os_log_s *)AFSiriLogContextSpeech;
  id v17 = v46;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    __int128 v62 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Not handling phraseRecognition because this is a phoneme transcription request",  buf,  0xCu);
  }

void sub_1001D3E60(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 320) currentRequestId]);
  LOBYTE(v2) = [v2 isEqualToString:v3];

  if ((v2 & 1) == 0)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v17 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the previous request has already finished";
    goto LABEL_7;
  }

  if (*(_BYTE *)(*(void *)(a1 + 40) + 360LL))
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v17 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the server won the race";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, buf, 0xCu);
    return;
  }

  +[AFAggregator logLocalRecognitionWonForLanguage:]( &OBJC_CLASS___AFAggregator,  "logLocalRecognitionWonForLanguage:",  *(void *)(a1 + 48));
  [*(id *)(a1 + 40) _handleLocalSpeechRecognitionForOfflineSupport:*(void *)(a1 + 56) logText:*(_BYTE *)(a1 + 120) == 0];
  if ([*(id *)(a1 + 64) isLocallyRecognizingInDictationMode])
  {
    id v6 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v17 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Giving up on final server recognition because local won the race",  buf,  0xCu);
    }

    uint64_t v7 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1001D40E0;
    v8[3] = &unk_1004F5D18;
    char v15 = *(_BYTE *)(a1 + 121);
    void v8[4] = v7;
    id v9 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 80);
    id v11 = *(id *)(a1 + 88);
    id v12 = *(id *)(a1 + 96);
    id v13 = *(id *)(a1 + 104);
    id v14 = *(id *)(a1 + 112);
    [v7 _handleSpeechRecognizedWithDelegateBlock:v8];
  }

void sub_1001D40E0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88)) {
    [*(id *)(*(void *)(a1 + 32) + 40) adSpeechDidPauseRecognition];
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v2 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 288) aceId]);
  [v4 adSpeechRecordingDidRecognizePhrases:v3 rawPhrases:v5 utterances:v6 rawUtterances:v7 nluResult:v8 sessionUUID:v9 refId:v10];
}

void sub_1001D4178(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Utterance[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001D424C(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Phrase[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001D4320(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  unsigned int v4 = [v3 secureOfflineOnly];

  if (v4)
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      unint64_t v10 = "-[ADCommandCenter dictationRequestDidRecognizeVoiceCommandCandidatePackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s VoiceCommandCandidate Phrases=<REDACTED>",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognition]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 phrases]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 utterances]);
    [v7 enumerateObjectsUsingBlock:&stru_1004F5C90];
    [v8 enumerateObjectsUsingBlock:&stru_1004F5CB0];
  }

  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidRecognizeVoiceCommandCandidatePackage:*(void *)(a1 + 40) nluResult:*(void *)(a1 + 48) sessionUUID:*(void *)(a1 + 56)];
}

void sub_1001D4474(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeVoiceCommandCandidatePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s VoiceCommandCandidate Utterance[%lu]=%@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_1001D4548(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeVoiceCommandCandidatePackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s VoiceCommandCandidate Phrase[%lu]=%@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_1001D461C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recognition]);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 phrases]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 utterances]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  unsigned int v7 = [v6 secureOfflineOnly];

  if (v7)
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      unint64_t v10 = "-[ADCommandCenter dictationRequestDidRecognizeFinalResultCandidatePackage:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s FinalResultCandidate Phrases=<REDACTED>",  (uint8_t *)&v9,  0xCu);
    }
  }

  else
  {
    [v4 enumerateObjectsUsingBlock:&stru_1004F5C50];
    [v5 enumerateObjectsUsingBlock:&stru_1004F5C70];
  }

  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidRecognizeFinalResultCandidatePackage:*(void *)(a1 + 40) sessionUUID:*(void *)(a1 + 48)];
}

void sub_1001D477C(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeFinalResultCandidatePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s FinalResultCandidate Utterance[%lu]=%@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_1001D4850(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    uint64_t v8 = "-[ADCommandCenter dictationRequestDidRecognizeFinalResultCandidatePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s FinalResultCandidate Phrase[%lu]=%@",  (uint8_t *)&v7,  0x20u);
  }
}

void sub_1001D4924(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _speechManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] recognition]);
  unsigned int v4 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 oneBestTokenList]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastObject](v4, "lastObject"));
  [v5 endTime];
  double v7 = v6;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  unsigned int v9 = [v8 secureOfflineOnly];

  if (v9)
  {
    unsigned int v10 = [a1[4] canLogWithSpeechManager:v2];
    __int16 v11 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    id v12 = @"<REDACTED>";
    if (v10) {
      id v12 = v4;
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v20 = "-[ADCommandCenter dictationRequestDidRecognizePartialPackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v21 = 2112;
    __int128 v22 = v12;
  }

  else
  {
    __int16 v11 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v20 = "-[ADCommandCenter dictationRequestDidRecognizePartialPackage:nluResult:sessionUUID:]_block_invoke";
    __int16 v21 = 2112;
    __int128 v22 = v4;
  }

  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
LABEL_9:
  objc_msgSend(a1[4], "_metrics_markLocalPartialSpeechRecognition");
  id v13 = a1[4];
  if (v13[363])
  {
    id v14 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v20 = "-[ADCommandCenter dictationRequestDidRecognizePartialPackage:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Ignoring partial local recognitions because server results have arrived",  buf,  0xCu);
    }
  }

  else
  {
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1001D4BBC;
    v15[3] = &unk_1004FD470;
    void v15[4] = v13;
    id v16 = a1[5];
    id v17 = a1[6];
    id v18 = a1[7];
    [v13 _handlePartialSpeechRecognitionForElapsedTime:v15 WithDelegateBlock:v7];
  }
}

id sub_1001D4BBC(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecordingDidRecognizePartialPackage:a1[5] nluResult:a1[6] sessionUUID:a1[7]];
}

void sub_1001D4BD0(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _speechManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[5] lastObject]);
  [v3 endTime];
  double v5 = v4;
  double v6 = (void *)objc_claimAutoreleasedReturnValue([v2 dictationOptions]);
  unsigned int v7 = [v6 secureOfflineOnly];

  if (v7)
  {
    unsigned int v8 = [a1[4] canLogWithSpeechManager:v2];
    unsigned int v9 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    if (v8) {
      unsigned int v10 = (const __CFString *)a1[5];
    }
    else {
      unsigned int v10 = @"<REDACTED>";
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v19 = "-[ADCommandCenter dictationRequestDidRecognizeTokens:nluResult:sessionUUID:]_block_invoke";
    __int16 v20 = 2112;
    __int16 v21 = v10;
  }

  else
  {
    unsigned int v9 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    __int16 v11 = (const __CFString *)a1[5];
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v19 = "-[ADCommandCenter dictationRequestDidRecognizeTokens:nluResult:sessionUUID:]_block_invoke";
    __int16 v20 = 2112;
    __int16 v21 = v11;
  }

  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
LABEL_10:
  objc_msgSend(a1[4], "_metrics_markLocalPartialSpeechRecognition");
  id v12 = a1[4];
  if (v12[363])
  {
    id v13 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v19 = "-[ADCommandCenter dictationRequestDidRecognizeTokens:nluResult:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Ignoring partial local recognitions because server results have arrived",  buf,  0xCu);
    }
  }

  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1001D4E44;
    v14[3] = &unk_1004FD470;
    void v14[4] = v12;
    id v15 = a1[5];
    id v16 = a1[6];
    id v17 = a1[7];
    [v12 _handlePartialSpeechRecognitionForElapsedTime:v14 WithDelegateBlock:v5];
  }
}

id sub_1001D4E44(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecordingDidRecognizeTokens:a1[5] nluResult:a1[6] sessionUUID:a1[7]];
}

void sub_1001D4E58(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
  [v1 notifySpeechDetectedIsUndirected];
}

void sub_1001D4E8C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = (void *)a1[5];
  id v5 = (id)objc_claimAutoreleasedReturnValue([v3 refId]);
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _rootExecutionContextForRequestID:v5]);
  [v2 _sasSpeechRecognized:v3 executionContext:v4 completion:a1[6]];
}

id sub_1001D4EFC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sasSpeechServerEndpointIdentified:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001D4F0C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sasResultCandidate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001D4F1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shutdownAfterDelay:0.0];
}

void *sub_1001D4F28(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 488), "removeObject:");
  }
  return result;
}

id sub_1001D4F40(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 488LL);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 488);
    *(void *)(v4 + 48_Block_object_dispose((const void *)(v30 - 176), 8) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 488LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

id sub_1001D4F90(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelCurrentRequestForReason:*(void *)(a1 + 40) andError:0 successorInfo:0];
}

void sub_1001D4FA4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [v2 updateSpeechSynthesisRecord:*(void *)(a1 + 40)];
}

id sub_1001D4FE4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleAceCommand:*(void *)(a1 + 40) afterCurrentRequest:*(unsigned __int8 *)(a1 + 64) waitForResponse:*(unsigned __int8 *)(a1 + 65) withDelegate:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

id sub_1001D4FFC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getDeferredObjectsWithIdentifiers:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001D500C(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    unsigned int v8 = "-[ADCommandCenter prepareForShutdown]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Canceling session for shutdown", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 560))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    void v5[2] = sub_1001D512C;
    v5[3] = &unk_1004FD940;
    uint64_t v4 = *(void **)(a1 + 32);
    id v6 = *(id *)(a1 + 40);
    [v4 _stopObservingCallStateWithCompletion:v5];

    uint64_t v3 = *(void *)(a1 + 32);
  }

  [*(id *)(v3 + 96) cancelSynchronously];
  dispatch_suspend(*(dispatch_object_t *)(*(void *)(a1 + 32) + 8LL));
}

void sub_1001D512C(uint64_t a1)
{
}

void sub_1001D5134(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [v2 getOfflineDictationStatusIgnoringCache:*(unsigned __int8 *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

void sub_1001D5178(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _hasOutstandingRequestId:*(void *)(a1 + 40)])
  {
    _[*(id *)(*(void *)(a1 + 32) + 16) adRequestDidReceiveTimeoutExtensionRequestWithDuration:*(double *)(a1 + 48)];
  }

  else
  {
    id v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter extendRequestTimeoutBy:forRequestID:]_block_invoke";
      __int16 v6 = 2112;
      uint64_t v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Received unknown requestId: %@. Ignoring.",  (uint8_t *)&v4,  0x16u);
    }
  }

uint64_t sub_1001D5274(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 526LL);
  return result;
}

void sub_1001D5288(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) refId]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 _executionContextMatchingExecutionInfo:v3 fallbackRequestID:v4]);

  __int16 v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    unsigned int v8 = "-[ADCommandCenter handleCommand:withExecutionContextMatchingInfo:completion:]_block_invoke";
    __int16 v9 = 2112;
    unsigned int v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s matchedExecutionContext = %@",  (uint8_t *)&v7,  0x16u);
  }

  [*(id *)(a1 + 32) _handleCommandAndClientReply:*(void *)(a1 + 48) executionContext:v5 commandCompletion:*(void *)(a1 + 56)];
}

uint64_t sub_1001D5388(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(*(void *)(a1 + 32) + 496) areAnnouncementRequestsPermittedByPresentationWhileActive]);
}

uint64_t sub_1001D53B8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 525LL));
}

uint64_t sub_1001D53CC(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 522LL);
  return result;
}

uint64_t sub_1001D53E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 522LL));
}

uint64_t sub_1001D53F4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 521LL);
  return result;
}

uint64_t sub_1001D5408(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 521LL));
}

uint64_t sub_1001D541C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 520LL);
  return result;
}

uint64_t sub_1001D5430(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 505LL);
  return result;
}

uint64_t sub_1001D5444(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 504LL);
  return result;
}

id sub_1001D5458(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) adRequestRequestedDismissAssistantWithReason:*(void *)(a1 + 40)];
}

id sub_1001D5464(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) adRequestRequestedDismissAssistant];
}

id sub_1001D5470(uint64_t a1)
{
  return [*(id *)(a1 + 32) _openURL:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t (**sub_1001D5480(void *a1))(id, void)
{
  if (*(void *)(a1[4] + 16LL)) {
    return (uint64_t (**)(id, void))_[*(id *)(a1[4] + 16) adRequestRequestedOpenApplicationWithBundleID:a1[5] URL:a1[6] completion:a1[7]];
  }
  uint64_t result = (uint64_t (**)(id, void))a1[7];
  if (result) {
    return (uint64_t (**)(id, void))result[2](result, 0LL);
  }
  return result;
}

void sub_1001D54B4(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _hasActiveClientOrSyncingOrInCall];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _serviceManager]);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = v3;
  if (v2) {
    [v3 pendServiceReloadNotification:v4];
  }
  else {
    [v3 reloadServiceForNotification:v4];
  }
}

void sub_1001D550C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _serviceManager]);
  [v2 removeService:*(void *)(a1 + 40)];
}

void sub_1001D554C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _serviceManager]);
  [v2 addService:*(void *)(a1 + 40)];
}

id sub_1001D558C(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
    int v36 = 136315650;
    dispatch_time_t v37 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
    __int16 v38 = 2048;
    uint64_t v39 = v3;
    __int16 v40 = 2112;
    dispatch_time_t v41 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %p %@", (uint8_t *)&v36, 0x20u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v6 + 16))
  {
    int v7 = *(void **)(v6 + 496);
    *(void *)(v6 + 496) = 0LL;

    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = *(void **)(v8 + 16);
    *(void *)(v8 + 16) = 0LL;

    [*(id *)(*(void *)(a1 + 40) + 96) setHasClient:0];
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _serviceManager]);
    [v10 setCommandCenterClient:0];

    char v13 = AFIsHorseman(v11, v12);
    uint64_t v6 = *(void *)(a1 + 40);
    if ((v13 & 1) == 0)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([(id)v6 _account]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 assistantIdentifier]);

      if (v15)
      {
        id v16 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v36 = 136315138;
          dispatch_time_t v37 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s Notify SRD to end assistant session",  (uint8_t *)&v36,  0xCu);
        }

        [*(id *)(*(void *)(a1 + 40) + 920) endSessionWithAssistantId:v15];
      }

      uint64_t v6 = *(void *)(a1 + 40);
    }
  }

  id v17 = *(void **)(a1 + 32);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 72) handle]);

  if (v17 == v18)
  {
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _serviceManager]);
    [v19 removeService:*(void *)(*(void *)(a1 + 40) + 72)];
    [*(id *)(a1 + 40) _setUIService:0];
    if (!*(void *)(*(void *)(a1 + 40) + 80LL))
    {
      __int16 v20 = objc_alloc_init(&OBJC_CLASS___ADFauxUIService);
      uint64_t v21 = *(void *)(a1 + 40);
      __int128 v22 = *(void **)(v21 + 80);
      *(void *)(v21 + 80) = v20;

      [v19 addService:*(void *)(*(void *)(a1 + 40) + 80)];
    }
  }

  uint64_t v23 = *(void *)(a1 + 40);
  if (!*(void *)(v23 + 16))
  {
    [*(id *)(v23 + 96) setHasActiveRequest:0];
    [*(id *)(a1 + 40) _stopUpdatingMotionActivity];
    [*(id *)(a1 + 40) _resetServices];
    int v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _resultObjectCache]);
    [v24 clearResultObjectsForAllRequestIdsExcept:0];

    [*(id *)(a1 + 40) _processQueuedLanguageCodeAndOutputVoice];
  }

  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v26 = [v25 assistantIsEnabled];

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v28 = [v27 dictationIsEnabled];

  if ((v26 & 1) != 0 || v28)
  {
    sub_1001EBDE4(@"session_did_finish_timestamp");
    uint64_t v30 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v36 = 136315138;
      dispatch_time_t v37 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "%s Client disconnected, sanity checking",  (uint8_t *)&v36,  0xCu);
    }

    if (v26) {
      [*(id *)(a1 + 40) sanityCheckAutodownloadedAssetsForced:0];
    }
    id v29 = [*(id *)(a1 + 40) _callIsLikely];
    if ((v29 & 1) == 0)
    {
      id v29 = [*(id *)(a1 + 40) _isInCall];
      if ((v29 & 1) == 0)
      {
        uint64_t v31 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v36 = 136315138;
          dispatch_time_t v37 = "-[ADCommandCenter clientDisconnected:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s Client disconnected and no phone call underway, syncing if needed",  (uint8_t *)&v36,  0xCu);
        }

        id v29 = objc_msgSend(*(id *)(a1 + 40), "_sync_syncIfNeeded");
      }
    }
  }

  int v32 = AFSupportsSCDAFramework(v29);
  double v33 = (id *)&OBJC_CLASS___SCDAMonitor_ptr;
  if (!v32) {
    double v33 = (id *)&OBJC_CLASS___AFMyriadMonitor_ptr;
  }
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*v33 sharedMonitor]);
  [v34 stopMonitoring];

  [*(id *)(a1 + 40) _cancelCrossDeviceRequestOperationsForRemoteRequest];
  [*(id *)(a1 + 40) _clearAllExecutionDevices];
  return [*(id *)(a1 + 40) _shutdownSessionWhenIdle];
}

void sub_1001D59B8(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
    int v28 = 136315650;
    id v29 = "-[ADCommandCenter clientConnected:]_block_invoke";
    __int16 v30 = 2048;
    uint64_t v31 = v3;
    __int16 v32 = 2112;
    double v33 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %p %@", (uint8_t *)&v28, 0x20u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 16LL), *(id *)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = *(void **)(v6 + 496);
  *(void *)(v6 + 496) = 0LL;

  uint64_t v8 = -[ADUIService initWithRequestDelegate:]( objc_alloc(&OBJC_CLASS___ADUIService),  "initWithRequestDelegate:",  *(void *)(a1 + 32));
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _serviceManager]);
  [v9 addService:v8];
  [v9 setCommandCenterClient:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _setUIService:v8];
  unsigned int v10 = *(void **)(a1 + 40);
  if (v10[10])
  {
    objc_msgSend(v9, "removeService:");
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void **)(v11 + 80);
    *(void *)(v11 + 80) = 0LL;

    unsigned int v10 = *(void **)(a1 + 40);
  }

  [v10 _startUpdatingMotionActivity];
  *(_BYTE *)(*(void *)(a1 + 40) + 520LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 40) + 521LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 40) + 522LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 40) + 524LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 40) + 525LL) = 0;
  char v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _sessionManager]);
  [v13 setHasClient:1];

  if (!*(_BYTE *)(*(void *)(a1 + 40) + 900LL))
  {
    uint64_t v14 = AFDeviceSupportsSiriUOD();
    if ((v14 & 1) != 0 || AFShouldRunAsrOnServerForUOD(v14, v15))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _sessionManager]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 languageCode]);

      id v18 = [*(id *)(a1 + 40) _updateUODAssetStatusForLanguage:v17];
    }
  }

  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 myriadMonitorTimeOutInterval]);

  else {
    id WaitTime = (id)AFMyriadMonitorDecisionGetWaitTime();
  }
  double v24 = v23;
  int v25 = AFSupportsSCDAFramework(WaitTime);
  unsigned int v26 = (id *)&OBJC_CLASS___SCDAMonitor_ptr;
  if (!v25) {
    unsigned int v26 = (id *)&OBJC_CLASS___AFMyriadMonitor_ptr;
  }
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*v26 sharedMonitor]);
  [v27 startMonitoringWithTimeoutInterval:*(void *)(*(void *)(a1 + 40) + 680) instanceContext:v24];
}

void sub_1001D5C74(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001D5D44;
  v4[3] = &unk_1004FC5F0;
  id v5 = *(id *)(a1 + 48);
  objc_msgSend(v2, "_context_fetchApplicationContextForApplicationInfos:completion:", v3, v4);
}

uint64_t sub_1001D5D44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001D5D58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setManagedStoreObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_1001D5D68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _managedStoreObjectForKey:*(void *)(a1 + 40)]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

id sub_1001D5DC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _rescheduleValidationRefresh];
}

id sub_1001D5DD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _refreshAssistantValidation];
}

id sub_1001D5DD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _destroyActiveAccount];
}

id sub_1001D5DE0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setActiveAccountIdentifier:*(void *)(a1 + 40)];
}

void sub_1001D5DEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _activeAccountIdentifier]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

uint64_t sub_1001D5E48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001D5E58(uint64_t a1)
{
}

void sub_1001D5E60(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v5 assistantIdentifier]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001D5EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

id sub_1001D5F10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _deleteAccountWithIdentifier:*(void *)(a1 + 40)];
}

void sub_1001D5F1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _accounts]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

id sub_1001D5F78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fetchSupportedLanguagesWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1001D5F84(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  [v2 checkForMetricsUploadProblem];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001D5FD4(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:purgesOversizedStorage:sc heduledActivity:completion:",  *(unsigned __int8 *)(a1 + 56),  *(unsigned __int8 *)(a1 + 57),  *(unsigned __int8 *)(a1 + 58),  *(unsigned __int8 *)(a1 + 59),  *(void *)(a1 + 40),  *(double *)(a1 + 48));
}

id sub_1001D5FF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _requestBarrierIfNecessary:*(void *)(a1 + 40)];
}

id sub_1001D6000(uint64_t a1)
{
  return [*(id *)(a1 + 32) _requestBarrier:*(void *)(a1 + 40)];
}

id sub_1001D600C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _telephonyRequestCompleted];
}

id sub_1001D6014(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _prepareForPhoneCall];
}

void sub_1001D601C(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _contextManager]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001D60B4;
  v3[3] = &unk_1004FD6C8;
  id v4 = a1[5];
  id v5 = a1[6];
  [v2 getContextSnapshotForCurrentRequestWithCompletion:v3];
}

void sub_1001D60B4(uint64_t a1, void *a2)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    while (2)
    {
      int v7 = 0LL;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * (void)v7), "content", (void)v17));
        __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        unsigned int v10 = [v9 isEqual:*(void *)(a1 + 32)];

        if (v10)
        {
          uint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v15 = *(void **)(a1 + 32);
            *(_DWORD *)AudioBufferList buf = 136315650;
            __int128 v22 = "-[ADCommandCenter getOriginDeviceInfoForContextIdentifier:completion:]_block_invoke_2";
            __int16 v23 = 2112;
            double v24 = v8;
            __int16 v25 = 2112;
            id v26 = v15;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s Found %@ given context ID %@",  buf,  0x20u);
          }

          uint64_t v13 = *(void *)(a1 + 40);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceInfo]);
          (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v14);

          goto LABEL_15;
        }

        int v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v27 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v16 = *(void **)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    __int128 v22 = "-[ADCommandCenter getOriginDeviceInfoForContextIdentifier:completion:]_block_invoke";
    __int16 v23 = 2112;
    double v24 = v16;
    __int16 v25 = 2112;
    id v26 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%s Unable to find context ID %@ in %@",  buf,  0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_15:
}

void sub_1001D630C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 320) currentRequestId]);
  else {
    id v4 = *(void **)(a1 + 32);
  }
  id v5 = v4;

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _contextManager]);
  [v6 getDeviceContextsForKeys:*(void *)(a1 + 48) forForeignRequestID:v5 includesNearbyDevices:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
}

void sub_1001D639C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
  uint64_t v6 = AFDeviceContextKeyAll;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001D6490;
  v4[3] = &unk_1004F5BC0;
  id v5 = *(id *)(a1 + 40);
  [v2 getContextIncludingKeys:v3 excludingMandatoryKeys:0 timeOut:v4 completion:0.0];
}

uint64_t sub_1001D6490(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001D64A4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
  [v2 getContextSnapshotForCurrentRequestWithCompletion:*(void *)(a1 + 40)];
}

id sub_1001D64E4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setAlertContextDirty");
}

id sub_1001D64EC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_context_setApplicationContextForApplicationInfos:withRefId:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

id sub_1001D64FC(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_context_setOverriddenApplicationContext:withContext:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

id sub_1001D650C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_context_fetchAppicationContextForApplicationInfo:supplementalContext:refID:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

id sub_1001D651C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_setApplicationContext:", *(void *)(a1 + 40));
}

id sub_1001D6528(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_willSetApplicationContextWithRefId:", *(void *)(a1 + 40));
}

id sub_1001D6534(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_context_rollbackClearContext");
}

id sub_1001D653C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clearContextAndStartAssistantSession];
}

void sub_1001D6544(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 72);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001D65F0;
  v6[3] = &unk_1004FC010;
  id v8 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 56);
  [v2 _handleGenericAceCommand:v3 withDelegate:v4 interruptOutstandingRequest:v5 reply:v6];
}

void sub_1001D65F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (***)(void, void))(a1 + 40);
  if (v3)
  {
    char v4 = a2;
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 32);
    if (v5)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      void v6[2] = sub_1001D668C;
      v6[3] = &unk_1004FC6B8;
      id v7 = v3;
      char v8 = v4;
      dispatch_async(v5, v6);
    }

    else
    {
      v3[2](v3, a2);
    }
  }

uint64_t sub_1001D668C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_1001D66A0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  [v2 _suppressLowStorageNotificationForLanguage:*(void *)(a1 + 32) suppress:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001D66E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateVoiceCommandContextWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56) disambiguationActive:*(void *)(a1 + 64) cursorInVisibleText:*(void *)(a1 + 72) fa vorCommandSuppression:*(void *)(a1 + 80) abortCommandSuppression:*(void *)(a1 + 88) undoEvent:*(void *)(a1 + 96)];
}

id sub_1001D6720(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resumeRecognitionWithPrefixText:*(void *)(a1 + 40) postfixText:*(void *)(a1 + 48) selectedText:*(void *)(a1 + 56)];
}

id sub_1001D6730(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pauseRecognition];
}

id sub_1001D6738(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendSpeechCorrectionInfo:*(void *)(a1 + 40) interactionIdentifier:*(void *)(a1 + 48)];
}

id sub_1001D6748(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendSpeechCorrectionInfo:*(void *)(a1 + 40) forCorrectionContext:*(void *)(a1 + 48)];
}

void sub_1001D6758(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v13 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(void **)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001D68E4;
    v9[3] = &unk_1004F5B48;
    uint64_t v11 = v5;
    void v9[4] = v3;
    uint64_t v6 = *(void *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    [v4 adRequestWillProcessStartPlayback:v5 intent:v6 completion:v9];
  }

  else
  {
    id v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v13 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s No client, assuming success and returning immediately",  buf,  0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, 1LL);
    }
  }

void sub_1001D68E4(void *a1, int a2, int a3)
{
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v21 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke";
    __int16 v22 = 1024;
    *(_DWORD *)__int16 v23 = a3;
    *(_WORD *)&void v23[4] = 1024;
    *(_DWORD *)&v23[6] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s success = %d, shouldSuppress= %d", buf, 0x18u);
  }

  uint64_t v7 = a1[6];
  if (v7 != 1 || a3 == 0)
  {
    __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v10 = "non-local playback destination";
      if (v7 == 1) {
        id v10 = "";
      }
      uint64_t v21 = "-[ADCommandCenter prepareForStartPlaybackWithDestination:intent:completion:]_block_invoke_2";
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int16 v22 = 2080;
      *(void *)__int16 v23 = v10;
      if (a2) {
        uint64_t v11 = "";
      }
      else {
        uint64_t v11 = "ADCommandCenterClient failure";
      }
      *(_WORD *)&v23[8] = 2080;
      double v24 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Not ending session because of %s %s",  buf,  0x20u);
    }

    uint64_t v12 = a1[5];
    if (v12)
    {
      uint64_t v13 = *(void (**)(void))(v12 + 16);
LABEL_21:
      v13();
    }
  }

  else
  {
    if (a2)
    {
      uint64_t v14 = (void *)a1[5];
      uint64_t v15 = *(void **)(a1[4] + 112LL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      id v17[2] = sub_1001D6AD8;
      v17[3] = &unk_1004FC6B8;
      id v18 = v14;
      char v19 = a3;
      [v15 suppressAudioInterruptionEndedNotificationsAndEndSessionIfIdle:v17];

      return;
    }

    uint64_t v16 = a1[5];
    if (v16)
    {
      uint64_t v13 = *(void (**)(void))(v16 + 16);
      goto LABEL_21;
    }
  }

uint64_t sub_1001D6AD8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1001D6AF4(void *a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCommandCenter handleFailedStartPlaybackWithDestination:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(a1[4] + 16) adRequestDidHandleFailedStartPlayback:a1[6]];
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001D6BBC(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = v2;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3));
    int v7 = 136315394;
    uint64_t v8 = "-[ADCommandCenter setSuppressAudioInterruptionEndedNotifications:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v7, 0x16u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 112) setSuppressAudioInterruptionEndedNotifications:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001D6CB8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateSpeechOptions:*(void *)(a1 + 40) forDelegate:*(void *)(a1 + 48)];
}

id sub_1001D6CC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelSpeechForDelegate:*(void *)(a1 + 40)];
}

id sub_1001D6CD4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopSpeechWithOptions:*(void *)(a1 + 40) forDelegate:*(void *)(a1 + 48)];
}

id sub_1001D6CE4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeDelegate:*(void *)(a1 + 40)];
}

id sub_1001D6CF0(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_metrics_sendEngagementFeedback:voiceQueryIdentifier:",  *(void *)(a1 + 48),  *(void *)(a1 + 40));
}

id sub_1001D6D00(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startDictationWithURL:*(void *)(a1 + 40) isNarrowBand:*(unsigned __int8 *)(a1 + 80) language:*(void *)(a1 + 48) options:*(void *)(a1 + 56) sessionUUID:*(void *)(a1 + 64) delegate:*(void *)(a1 + 72)];
}

id sub_1001D6D18(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addRecordedSpeechSampleData:*(void *)(a1 + 40) delegate:*(void *)(a1 + 48)];
}

id sub_1001D6D28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRecordedDictationWithLanguage:*(void *)(a1 + 40) options:*(void *)(a1 + 48) sessionUUID:*(void *)(a1 + 56) narrowband:*(unsigned __int8 *)(a1 + 72) delegate:*(void *)(a1 + 64)];
}

id sub_1001D6D40(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startDictationWithLanguageCode:*(void *)(a1 + 40) options:*(void *)(a1 + 48) speechOptions:*(void *)(a1 + 56) sessionUUID:*(void *)(a1 + 64) delegate:*(void *)(a1 + 72)];
}

id sub_1001D6D54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRecordingForPendingDictationWithLanguageCode:*(void *)(a1 + 40) options:*(void *)(a1 + 48) speechOptions:*(void *)(a1 + 56) sessionUUID:*(void *)(a1 + 64) delegate:*(void *)(a1 + 72) completion:*(void *)(a1 + 80)];
}

id sub_1001D6D6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _rollbackRequestForDelegate:*(void *)(a1 + 40)];
}

id sub_1001D6D78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelRequestForDelegate:*(void *)(a1 + 40) reason:*(void *)(a1 + 56) error:*(void *)(a1 + 48)];
}

id sub_1001D6D88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startSpeechRequestWithURL:*(void *)(a1 + 40) isNarrowBand:*(unsigned __int8 *)(a1 + 56) withDelegate:*(void *)(a1 + 48) completion:0];
}

id sub_1001D6DA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startAcousticIDRequestWithDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
}

id sub_1001D6DB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startSpeechPronunciationRequestWithDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) pronunciationContext:*(void *)(a1 + 56)];
}

void sub_1001D6DC0(void *a1)
{
  id v1 = a1;
  if (AFIsInternalInstall(v1))
  {
    if ([v1 activationEvent] == (id)1)
    {
      id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
      [v2 systemUptime];
      double v4 = v3;

      [v1 expectedActivationEventTime];
      double v6 = v5;
      [v1 activationEventTime];
      double v8 = v7;
      __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315650;
        uint64_t v11 = "_LogActivationDeltasForOptions";
        __int16 v12 = 2048;
        double v13 = v4 - v6;
        __int16 v14 = 2048;
        double v15 = v4 - v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Current delta from expected activation: %lf activation: %lf",  (uint8_t *)&v10,  0x20u);
      }
    }
  }
}

void sub_1001D6EEC(uint64_t a1)
{
  int v2 = AFSupportsSCDAFramework( [*(id *)(a1 + 32) _startRecordingForPendingSpeechRequestForDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) sessionUUID:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)]);
  double v3 = (id *)&OBJC_CLASS___SCDAMonitor_ptr;
  if (!v2) {
    double v3 = (id *)&OBJC_CLASS___AFMyriadMonitor_ptr;
  }
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*v3 sharedMonitor]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1001D6FB4;
  v5[3] = &unk_1004FB0E0;
  void v5[4] = *(void *)(a1 + 32);
  [v4 waitForMyriadDecisionForReason:AFDeviceContextKeyMultiUserState withCompletion:v5];
}

void sub_1001D6FB4(uint64_t a1)
{
  int v2 = -[AFWatchdogTimer initWithTimeoutInterval:onQueue:timeoutHandler:]( objc_alloc(&OBJC_CLASS___AFWatchdogTimer),  "initWithTimeoutInterval:onQueue:timeoutHandler:",  *(void *)(*(void *)(a1 + 32) + 8LL),  &stru_1004F5AD0,  1.7);
  -[AFWatchdogTimer start](v2, "start");
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(void **)(v3 + 752);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001D7074;
  v6[3] = &unk_1004F5AF8;
  void v6[4] = v3;
  double v7 = v2;
  double v5 = v2;
  [v4 getContextSnapshotForCurrentRequestWithCompletion:v6];
}

void sub_1001D7074(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = *(void **)(a1 + 40);
  double v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001D7114;
  block[3] = &unk_1004FD4C0;
  id v8 = v4;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_1001D7114(uint64_t a1)
{
  if ([*(id *)(a1 + 32) cancelIfNotAlreadyCanceled])
  {
    uint64_t v27 = a1;
    id v2 = *(id *)(a1 + 40);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id obj = v2;
    id v4 = [obj countByEnumeratingWithState:&v32 objects:v42 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v33;
      int v28 = v3;
      do
      {
        double v7 = 0LL;
        do
        {
          if (*(void *)v33 != v6) {
            objc_enumerationMutation(obj);
          }
          id v8 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)v7);
          id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "content", v26));
          if (([v9 fromLocalDevice] & 1) == 0)
          {
            uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 multiUserStateSnapshot]);
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 confidenceScores]);
            __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 vtSatScore]);
            [v12 floatValue];
            float v14 = v13;

            if ([v11 count])
            {
              v30[0] = _NSConcreteStackBlock;
              v30[1] = 3221225472LL;
              v30[2] = sub_10029A0B4;
              v30[3] = &unk_1004F9400;
              id v31 = v3;
              [v11 enumerateObjectsUsingBlock:v30];
              double v15 = v31;
              goto LABEL_15;
            }

            if (v14 != 0.0)
            {
              id v16 = sub_10029C604(v8);
              double v15 = (void *)objc_claimAutoreleasedReturnValue(v16);
              if (v15)
              {
                __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  (int)(float)(v14 * 100.0)));
                id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v17));
                [v28 setObject:v18 forKey:v15];
              }

              else
              {
                __int128 v17 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
                {
                  char v19 = (void *)objc_claimAutoreleasedReturnValue([v8 info]);
                  __int128 v20 = v19;
                  if (!v19)
                  {
                    id v26 = (void *)objc_claimAutoreleasedReturnValue([v9 deviceInfo]);
                    __int128 v20 = v26;
                  }

                  *(_DWORD *)AudioBufferList buf = 136315650;
                  dispatch_time_t v37 = "ADMultiUserServiceDonatedScoresFromDeviceContextTuples";
                  __int16 v38 = 1024;
                  int v39 = (int)(float)(v14 * 100.0);
                  __int16 v40 = 2112;
                  dispatch_time_t v41 = v20;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Dropped %d in donated scores from %@ because there's no Assistant identifier.",  buf,  0x1Cu);
                  if (!v19) {
                }
                  }
              }

              id v3 = v28;
LABEL_15:
            }
          }

          double v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v21 = [obj countByEnumeratingWithState:&v32 objects:v42 count:16];
        id v5 = v21;
      }

      while (v21);
    }

    id v22 = [v3 copy];
    uint64_t v23 = *(void *)(v27 + 48);
    double v24 = *(void **)(v23 + 672);
    *(void *)(v23 + 672) = v22;

    __int16 v25 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t v42 = 136315394;
      __int128 v43 = "-[ADCommandCenter startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
      __int16 v44 = 2112;
      unsigned int v45 = v3;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%s Score donation received: %@", v42, 0x16u);
    }
  }

void sub_1001D74C8(id a1)
{
  id v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    id v3 = "-[ADCommandCenter startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_4";
    _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s Timed out fetching multi user state context",  (uint8_t *)&v2,  0xCu);
  }

void sub_1001D7570(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 rawScores]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    double v7 = @"confidenceScores";
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 rawScores]);
    id v8 = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    [v3 postNotificationName:@"ADMultiUserDidReceiveScoresNotification" object:v6];
  }

id sub_1001D7674(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startSpeechRequestWithDelegate:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) sessionUUID:0];
}

id sub_1001D76B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleRemoteSpeechRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001D76C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleExternalActivationRequest:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001D76D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRequest:*(void *)(a1 + 40) withDelegate:*(void *)(a1 + 48)];
}

id sub_1001D76E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endSessionForDelegate:*(void *)(a1 + 40)];
}

id sub_1001D76F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setConfiguration:*(void *)(a1 + 40) forClient:*(void *)(a1 + 48)];
}

id sub_1001D7704(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setModesConfiguration:*(void *)(a1 + 40)];
}

id sub_1001D7710(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setCarDNDRestriction:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001D7720(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setWatchAuthenticated:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001D7730(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setHeadphonesAuthenticated:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001D7740(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setLockState:*(unsigned __int8 *)(a1 + 40) showingLockScreen:*(unsigned __int8 *)(a1 + 41)];
}

void *sub_1001D7754(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 608LL) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 616LL), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (!result[2]) {
    return _[result _processQueuedOutputVoice];
  }
  return result;
}

void *sub_1001D77A0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 592LL) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 600LL), *(id *)(a1 + 40));
  *(_BYTE *)(*(void *)(a1 + 32) + 608LL) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 616LL), *(id *)(a1 + 48));
  uint64_t result = *(void **)(a1 + 32);
  if (!result[2]) {
    return [result _processQueuedLanguageCodeAndOutputVoice];
  }
  return result;
}

void *sub_1001D7804(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 592LL) = 1;
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 600LL), *(id *)(a1 + 40));
  uint64_t result = *(void **)(a1 + 32);
  if (!result[2]) {
    return _[result _processQueuedLanguageCode];
  }
  return result;
}

void sub_1001D7850(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001D78D0;
  v3[3] = &unk_1004FC7C0;
  id v4 = *(id *)(a1 + 48);
  [v1 _setLanguageCode:@"ADLanguageCodeKeepSame" outputVoice:v2 isDefaultValue:0 withCompletion:v3];
}

uint64_t sub_1001D78D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001D78E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setLanguageCodeIfNeeded];
}

id sub_1001D78EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setLanguageCode:*(void *)(a1 + 40) outputVoice:*(void *)(a1 + 48) isDefaultValue:0 withCompletion:*(void *)(a1 + 56)];
}

void sub_1001D7900(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001D797C;
  v3[3] = &unk_1004FC7C0;
  id v4 = *(id *)(a1 + 48);
  [v1 _setLanguageCode:v2 outputVoice:0 isDefaultValue:0 withCompletion:v3];
}

uint64_t sub_1001D797C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1001D7990(uint64_t a1, void *a2)
{
  return [a2 setRemoraHostEnabled:*(unsigned __int8 *)(a1 + 32)];
}

void sub_1001D799C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v3 = [v2 assistantIsEnabled];
  id v4 = [v2 dictationIsEnabled];
  int v5 = (int)v4;
  else {
    unsigned int v7 = 0;
  }
  v1[2](v1, v2);
  [v2 synchronize];
  unsigned int v8 = [v2 assistantIsEnabled];
  unsigned int v9 = [v2 dictationIsEnabled];
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    __int128 v43 = "ModifyActivenessPreferenceWithBlock";
    __int16 v44 = 1024;
    *(_DWORD *)unsigned int v45 = v3;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s assistantIsEnabled: %d -> %d", buf, 0x18u);
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  }

  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_INFO);
  if (v11)
  {
    *(_DWORD *)AudioBufferList buf = 136315650;
    __int128 v43 = "ModifyActivenessPreferenceWithBlock";
    __int16 v44 = 1024;
    *(_DWORD *)unsigned int v45 = v5;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s dictationIsEnabled: %d -> %d", buf, 0x18u);
  }

  if (AFSupportsRemoraHost(v11, v12))
  {
    unsigned int v13 = [v2 remoraHostEnabled];
    float v14 = (os_log_s *)AFSiriLogContextDaemon;
    char v41 = v13;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      __int128 v43 = "ModifyActivenessPreferenceWithBlock";
      __int16 v44 = 1024;
      *(_DWORD *)unsigned int v45 = v7;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s remoraHostIsEnabled: %d -> %d", buf, 0x18u);
    }
  }

  else
  {
    char v41 = 0;
  }

  int v15 = v5 ^ v9;
  id v16 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v17 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (((v3 ^ v8) & 1) != 0 || v15)
  {
    if (v17)
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      __int128 v43 = "ModifyActivenessPreferenceWithBlock";
      __int16 v44 = 2112;
      *(void *)unsigned int v45 = @"ADPreferencesEnabledBitsDidChangeNotification";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%s Post (local) %@", buf, 0x16u);
    }

    char v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v19 postNotificationName:@"ADPreferencesEnabledBitsDidChangeNotification" object:0];

    if (v3 != v8)
    {
      __int128 v20 = (os_log_s *)AFSiriLogContextDaemon;
      BOOL v21 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      id v22 = (const __CFString *)AFAssistantEnablementDidChangeDarwinNotification;
      if (v21)
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int128 v43 = "ModifyActivenessPreferenceWithBlock";
        __int16 v44 = 2112;
        *(void *)unsigned int v45 = AFAssistantEnablementDidChangeDarwinNotification;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Post (darwin) %@", buf, 0x16u);
      }

      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, v22, 0LL, 0LL, 1u);
    }

    if (v15)
    {
      double v24 = (os_log_s *)AFSiriLogContextDaemon;
      BOOL v25 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      id v26 = (const __CFString *)AFDictationEnablementDidChangeDarwinNotification;
      if (v25)
      {
        *(_DWORD *)AudioBufferList buf = 136315394;
        __int128 v43 = "ModifyActivenessPreferenceWithBlock";
        __int16 v44 = 2112;
        *(void *)unsigned int v45 = AFDictationEnablementDidChangeDarwinNotification;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s Post (darwin) %@", buf, 0x16u);
      }

      uint64_t v27 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(v27, v26, 0LL, 0LL, 1u);
    }
  }

  else if (v17)
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    __int128 v43 = "ModifyActivenessPreferenceWithBlock";
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Skipped post local and darwin notifications because Siri and Dictation enablement states did not change.",  buf,  0xCu);
  }

  if (v8)
  {
    int v28 = (void *)objc_claimAutoreleasedReturnValue([v2 instanceContext]);
    unsigned __int8 v29 = [v28 isEndpoint];

    if ((v29 & 1) == 0)
    {
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      [v30 sanityCheckAutodownloadedAssetsForced:1];

      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
      [v31 _downloadMorphunAssets:v32];

LABEL_47:
    }
  }

  else if ((v9 & 1) == 0)
  {
    if (AFSupportsRemoraHost(v17, v18))
    {
      if ((v41 & 1) != 0)
      {
        int v33 = v3 | v5;
        __int128 v34 = (os_log_s *)AFSiriLogContextDaemon;
        BOOL v35 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
        if (v33 == 1)
        {
          if (v35)
          {
            *(_DWORD *)AudioBufferList buf = 136315138;
            __int128 v43 = "ModifyActivenessPreferenceWithBlock";
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s Destroy active account because Siri and Dictation are both disabled, and Remora Host is enabled.",  buf,  0xCu);
          }

          int v36 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
          [v36 destroyActiveAccount];
        }

        else if (v35)
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          __int128 v43 = "ModifyActivenessPreferenceWithBlock";
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s Skipped destroy active account because Siri and Dictation enablement states did not change, and Remora Host is enabled.",  buf,  0xCu);
        }

        __int16 v40 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          __int128 v43 = "ModifyActivenessPreferenceWithBlock";
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "%s Preheat network because Remora Host is enabled.",  buf,  0xCu);
        }

        id v31 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        [v31 preheatWithStyle:3 forOptions:0 completion:0];
      }

      else
      {
        int v39 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          __int128 v43 = "ModifyActivenessPreferenceWithBlock";
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "%s Destroy active account because Siri and Dictation are both disabled, and Remora Host is also disabled.",  buf,  0xCu);
        }

        id v31 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        [v31 destroyActiveAccount];
      }
    }

    else
    {
      dispatch_time_t v37 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        __int128 v43 = "ModifyActivenessPreferenceWithBlock";
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s Destroy active account because Siri and Dictation are both disabled.",  buf,  0xCu);
      }

      __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      [v38 destroyActiveAccount];

      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v31 postNotificationName:@"AssistantAccountRemoved" object:0];
    }

    goto LABEL_47;
  }
}

void sub_1001D8088(uint64_t a1, void *a2)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"ADSharedDataDidChangeNotification" object:0];
}

void sub_1001D80D4(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v2 setLanguageCodeIfNeeded];

  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 postNotificationName:@"ADSharedDataDidChangeNotification" object:0];
}

void sub_1001D8144(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1001D81C0;
  v2[3] = &unk_1004FAE50;
  id v3 = v1;
  +[MorphunAssets onDemandDownloadForLocale:withProgress:withCompletion:]( &OBJC_CLASS___MorphunAssets,  "onDemandDownloadForLocale:withProgress:withCompletion:",  v3,  0LL,  v2);
}

void sub_1001D81C0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (os_log_s *)AFSiriLogContextConnection;
  BOOL v7 = os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      unsigned int v8 = *(void **)(a1 + 32);
      int v16 = 136315394;
      BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke_2";
      __int16 v18 = 2112;
      char v19 = v8;
      unsigned int v9 = "%s Morphun assets for %@ downloaded successfully!";
      uint64_t v10 = v6;
      uint32_t v11 = 22;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v16, v11);
    }
  }

  else
  {
    if (v7)
    {
      uint64_t v12 = *(void **)(a1 + 32);
      int v16 = 136315394;
      BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke";
      __int16 v18 = 2112;
      char v19 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Morphun assets for %@ download failed.",  (uint8_t *)&v16,  0x16u);
      uint64_t v6 = (os_log_s *)AFSiriLogContextConnection;
    }

    BOOL v13 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
    if (v5)
    {
      if (v13)
      {
        float v14 = v6;
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
        int v16 = 136315394;
        BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke";
        __int16 v18 = 2112;
        char v19 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Morphun assets download failure reason: %@",  (uint8_t *)&v16,  0x16u);
      }
    }

    else if (v13)
    {
      int v16 = 136315138;
      BOOL v17 = "-[ADCommandCenter _downloadMorphunAssets:]_block_invoke";
      unsigned int v9 = "%s Morphun assets download failed with a nil error.";
      uint64_t v10 = v6;
      uint32_t v11 = 12;
      goto LABEL_11;
    }
  }
}

id sub_1001D83B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _forceAudioSessionInactiveWithOptions:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

id sub_1001D83C0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _forceAudioSessionActiveWithContext:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1001D83D0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _serviceManager]);
  [v2 preheatServicesForDomain:*(void *)(a1 + 40)];
}

void sub_1001D8410(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    uint32_t v11 = "_ADPreheatSpeechManagerInBackgroundWithRecordDeviceIdentifier_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADSpeechManager sharedManager](&OBJC_CLASS___ADSpeechManager, "sharedManager"));
  if (*(void *)(a1 + 32))
  {
    id v5 = -[AFSpeechRequestOptions initWithActivationEvent:]( objc_alloc(&OBJC_CLASS___AFSpeechRequestOptions),  "initWithActivationEvent:",  0LL);
    -[AFSpeechRequestOptions setRecordDeviceIdentifier:](v5, "setRecordDeviceIdentifier:", *(void *)(a1 + 32));
  }

  else
  {
    id v5 = 0LL;
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001D859C;
  v8[3] = &unk_1004FBBF8;
  unsigned int v9 = v5;
  uint64_t v6 = v5;
  id v7 = +[AFSetAudioSessionActiveContext newWithBuilder:]( &OBJC_CLASS___AFSetAudioSessionActiveContext,  "newWithBuilder:",  v8);
  [v4 prepareAudioSystemWithContext:v7 completion:0];
}

id sub_1001D8588(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preheatWithStyle:0 forOptions:0 completion:0];
}

void sub_1001D859C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setReason:1];
  [v3 setSpeechRequestOptions:*(void *)(a1 + 32)];
}

id sub_1001D85E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preheatViaRequestDispatcher];
}

id sub_1001D85E8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _preheatWithStyle:*(void *)(a1 + 56) forOptions:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1001D85F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shutdownSessionWhenIdle];
}

void sub_1001D8620(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCommandCenter startCloudKitSyncWeeklyForActivity:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v3 forceMultiUserSync:1 download:1 activity:*(void *)(a1 + 32) completion:0];
}

id sub_1001D86F4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_sync_setSyncDelegate:", *(void *)(a1 + 40));
}

id sub_1001D8700(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_sync_syncAnchorKeys:forceReset:reasons:forSyncPromise:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48),  0);
}

uint64_t sub_1001D8734(uint64_t a1)
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions(*(void *)(a1 + 32));
}

void sub_1001D873C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentToken]);
  LODWORD(v2) = [v2 isEqual:v3];

  if ((_DWORD)v2)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      unsigned int v8 = "-[ADCommandCenter _handleRemoteSpeechRequest:completion:]_block_invoke_2";
      __int16 v9 = 2048;
      uint64_t v10 = 0x4014000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Failed to handle remote speech request in %lfs",  (uint8_t *)&v7,  0x16u);
    }

    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completion]);
    uint64_t v6 = (void *)v5;
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0LL);
    }
    [*(id *)(a1 + 40) reset];
  }

uint64_t sub_1001D8854(uint64_t a1)
{
  return AFAnalyticsContextCreateWithRequestInfo(*(void *)(a1 + 32));
}

void sub_1001D885C(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001D8B68;
  v7[3] = &unk_1004F5A28;
  id v8 = *(id *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v9 = v2;
  uint64_t v10 = v3;
  id v4 = +[AFSiriActivationContext newWithBuilder:](&OBJC_CLASS___AFSiriActivationContext, "newWithBuilder:", v7);
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v12 = "-[ADCommandCenter _handleExternalActivationRequest:completion:]_block_invoke_2";
    __int16 v13 = 2112;
    id v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s context = %@", buf, 0x16u);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFSiriActivationConnection sharedConnection]( &OBJC_CLASS___AFSiriActivationConnection,  "sharedConnection"));
  [v6 activateWithRequestInfo:*(void *)(a1 + 40) context:v4 completion:&stru_1004F5A48];
}

void sub_1001D89B8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 actionIdentifier]);
  unsigned int v4 = [v3 isEqualToString:UNNotificationDefaultActionIdentifier];

  if (v4) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1001D8A20(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) remoteRequestInfo]);

  if (v2 == v3)
  {
    unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 56);
      int v9 = 136315394;
      uint64_t v10 = "-[ADCommandCenter _handleExternalActivationRequest:completion:]_block_invoke_2";
      __int16 v11 = 2048;
      uint64_t v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Failed to handle remote request in %lfs",  (uint8_t *)&v9,  0x16u);
    }

    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completion]);
    int v7 = (void *)v6;
    if (v6) {
      (*(void (**)(uint64_t, void, void))(v6 + 16))(v6, 0LL, 0LL);
    }
    [*(id *)(a1 + 40) setRemoteRequestInfo:0];
    [*(id *)(a1 + 40) setCompletion:0];
  }

  if (*(void *)(a1 + 48))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[ADUserNotificationServiceProvider personalDomainNotificationProvider]( &OBJC_CLASS___ADUserNotificationServiceProvider,  "personalDomainNotificationProvider"));
    [v8 withdrawNotificationRequestWithIdentifier:*(void *)(a1 + 48)];
  }

void sub_1001D8B68(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [*(id *)(a1 + 32) activationEventMachAbsoluteTime];
  if (!v3)
  {
    id v3 = [*(id *)(a1 + 40) timestamp];
    if (!v3) {
      id v3 = (id)mach_absolute_time();
    }
  }

  [v6 setTimestamp:v3];
  [v6 setSource:11];
  [v6 setEvent:13];
  if ([*(id *)(*(void *)(a1 + 48) + 680) isEndpoint])
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 680) endpointUUID]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 UUIDString]);
    [v6 setDeviceID:v5];
  }
}

void sub_1001D8C24(id a1, AFSiriActivationResult *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADCommandCenter _handleExternalActivationRequest:completion:]_block_invoke";
    __int16 v6 = 2112;
    int v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s uint64_t result = %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_1001D8CE0(id a1)
{
  id v1 = -[CoreEmbeddedSpeechRecognizer initWithDelegate:instanceUUID:]( objc_alloc(&OBJC_CLASS___CoreEmbeddedSpeechRecognizer),  "initWithDelegate:instanceUUID:",  0LL,  &CoreEmbeddedSpeechRecognizerInstanceUUIDInteractive);
  -[CoreEmbeddedSpeechRecognizer deleteAllDESRecordsForDictationPersonalization]( v1,  "deleteAllDESRecordsForDictationPersonalization");
  -[CoreEmbeddedSpeechRecognizer invalidate](v1, "invalidate");
}

void sub_1001D8D40(void *a1, int a2)
{
  id v3 = a1;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v10 = "_AnalyticsSendOnDeviceDeletionEventWithError";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #RPI sending event kCoreAnalyticsDeletionTelemetryKey",  buf,  0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001D8E50;
  v6[3] = &unk_1004F5EF8;
  id v7 = v3;
  int v8 = a2;
  id v5 = v3;
  AnalyticsSendEventLazy(@"com.apple.siri.history.deletion.requested", v6);
}

id sub_1001D8E50(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%ld",  [v3 code]));
    [v2 setObject:v4 forKey:@"errorCode"];
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v6 = [v5 assistantIsEnabled];

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 languageCode]);
    [v2 setObject:v8 forKey:@"siriInputLocale"];
  }

  int v9 = *(_DWORD *)(a1 + 40);
  uint64_t v10 = @"DHTTRIGGEREVENT_UNKNOWN";
  if (v9 == 1) {
    uint64_t v10 = @"DHTTRIGGEREVENT_DESTROY_ASSISTANT";
  }
  if (v9 == 2) {
    __int16 v11 = @"DHTTRIGGEREVENT_DELETE_ASSISTANT_HISTORY";
  }
  else {
    __int16 v11 = v10;
  }
  [v2 setObject:v11 forKey:@"trigger"];
  return v2;
}

void sub_1001D8F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      BOOL v17 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed with error %@.",  (uint8_t *)&v16,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315138;
    BOOL v17 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Done", (uint8_t *)&v16, 0xCu);
  }

  unsigned int v5 = +[AFFeatureFlags isOnDeviceHistoryDeletionEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isOnDeviceHistoryDeletionEnabled");
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v7 = [v6 longLivedIdentifierUploadingEnabled] ^ 1;

  int v9 = v5 & v7;
  if (v3 && v9)
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315138;
      BOOL v17 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s #RPI Skip surfacing server side deletion error as UI alert.",  (uint8_t *)&v16,  0xCu);
    }

    id v3 = 0LL;
  }

  if (AFIsNano(v8) && *(void *)(a1 + 32))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    [WeakRetained _postWatchNotificationWithContext:*(void *)(a1 + 32) withError:v3];
  }

  uint64_t v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v12)
  {
    [v12 cancel];
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0LL;
  }

  uint64_t v15 = *(void *)(a1 + 40);
  if (v15) {
    (*(void (**)(uint64_t, id))(v15 + 16))(v15, v3);
  }
  if (v9) {
    sub_1001D8D40(v3, 2);
  }
}

void sub_1001D91AC(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1LL,  @"Client timed out because no server response was received in 20 seconds."));
  [v1 invokeWithValue:v2];
}

void sub_1001D9200(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001D9278;
  v3[3] = &unk_1004FAAD0;
  id v4 = *(id *)(a1 + 48);
  [v1 _sendCommandToServer:v2 opportunistically:0 completion:v3];
}

void sub_1001D9278(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v19 = 136315650;
    __int128 v20 = "-[ADCommandCenter _deleteSiriHistoryWithContext:withCompletion:]_block_invoke_2";
    __int16 v21 = 2112;
    id v22 = v5;
    __int16 v23 = 2112;
    id v24 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s response = %@, error = %@",  (uint8_t *)&v19,  0x20u);
  }

  if (!v5)
  {
    __int16 v11 = *(void **)(a1 + 32);
    if (v6)
    {
      int v9 = v11;
      id v10 = v6;
      goto LABEL_8;
    }

    BOOL v17 = @"Server response is nil.";
LABEL_13:
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:description:](&OBJC_CLASS___AFError, "errorWithCode:description:", 8LL, v17));
    [v11 invokeWithValue:v18];

    goto LABEL_14;
  }

  uint64_t v8 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
  if ((objc_opt_isKindOfClass(v5, v8) & 1) == 0)
  {
    uint64_t v12 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
    char isKindOfClass = objc_opt_isKindOfClass(v5, v12);
    __int16 v11 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 reason]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ad_error"));
      int v16 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  2LL,  v14,  v15));
      [v11 invokeWithValue:v16];

      goto LABEL_14;
    }

    BOOL v17 = @"Server response is unexpected.";
    goto LABEL_13;
  }

  int v9 = *(void **)(a1 + 32);
  id v10 = 0LL;
LABEL_8:
  [v9 invokeWithValue:v10];
LABEL_14:
}

void sub_1001D9464(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextFides;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextFides, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter _destroyActiveAccount]_block_invoke";
      __int16 v6 = 2114;
      unsigned int v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Error disabling fides: %{public}@",  (uint8_t *)&v4,  0x16u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextFides, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCommandCenter _destroyActiveAccount]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Successfully disabled DES",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_1001D9574(id a1)
{
}

void sub_1001D9580(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___SAAddResultObjects);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    id v8 = v5;
    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([v8 refId]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "sessionRequestIdForRefId:"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _resultObjectCache]);
    int v39 = v8;
    dispatch_time_t v37 = (void *)v9;
    [v10 addResultObjects:v8 sessionRequestId:v9];

    __int16 v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id v12 = *(id *)(a1 + 40);
    id v13 = [v12 countByEnumeratingWithState:&v48 objects:v56 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v49;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v49 != v15) {
            objc_enumerationMutation(v12);
          }
          BOOL v17 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
          __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 aceId]);
          if (v18) {
            -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v17, v18);
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v48 objects:v56 count:16];
      }

      while (v14);
    }

    __int128 v46 = 0u;
    __int128 v47 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    int v19 = (void *)objc_claimAutoreleasedReturnValue([v39 objects]);
    id v20 = [v19 countByEnumeratingWithState:&v44 objects:v55 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v45;
      do
      {
        for (j = 0LL; j != v21; j = (char *)j + 1)
        {
          if (*(void *)v45 != v22) {
            objc_enumerationMutation(v19);
          }
          id v24 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)j);
          BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 aceId]);
          if (v25) {
            -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v24, v25);
          }
        }

        id v21 = [v19 countByEnumeratingWithState:&v44 objects:v55 count:16];
      }

      while (v21);
    }

    id v26 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    id v27 = *(id *)(a1 + 48);
    id v28 = [v27 countByEnumeratingWithState:&v40 objects:v54 count:16];
    if (v28)
    {
      id v29 = v28;
      uint64_t v30 = *(void *)v41;
      do
      {
        for (k = 0LL; k != v29; k = (char *)k + 1)
        {
          if (*(void *)v41 != v30) {
            objc_enumerationMutation(v27);
          }
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v11,  "objectForKey:",  *(void *)(*((void *)&v40 + 1) + 8LL * (void)k)));
          if (v32) {
            -[NSMutableArray addObject:](v26, "addObject:", v32);
          }
        }

        id v29 = [v27 countByEnumeratingWithState:&v40 objects:v54 count:16];
      }

      while (v29);
    }
  }

  else
  {
    int v33 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v53 = "-[ADCommandCenter _getDeferredObjectsWithIdentifiers:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%s Failed getting deferred objects",  buf,  0xCu);
    }

    id v26 = (NSMutableArray *)*(id *)(a1 + 40);
  }

  id v34 = [*(id *)(a1 + 48) count];
  if (v34 != -[NSMutableArray count](v26, "count"))
  {
    uint64_t v35 = objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  900LL,  0LL,  v6));

    id v6 = (id)v35;
  }

  uint64_t v36 = *(void *)(a1 + 56);
  if (v36) {
    (*(void (**)(uint64_t, NSMutableArray *, id))(v36 + 16))(v36, v26, v6);
  }
}

void sub_1001D9994(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(void *)(a1 + 32))
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v12 = 136315138;
      id v13 = "-[ADCommandCenter _fetchSupportedLanguagesWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Sending fetch supported languages completion",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v8 = objc_opt_class(&OBJC_CLASS___SASetSupportedLocales);
    char isKindOfClass = objc_opt_isKindOfClass(v5, v8);
    uint64_t v10 = *(void *)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 locales]);
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0LL);
LABEL_9:

      goto LABEL_10;
    }

    if (!v6)
    {
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 8LL));
      (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
      goto LABEL_9;
    }

    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v6);
  }

void sub_1001D9AF8(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) allServices]);
  [v1 makeObjectsPerformSelector:"clearDomainObjects"];
}

void sub_1001D9B34(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) allServices]);
  [v1 makeObjectsPerformSelector:"clearDomainObjects"];
}

void sub_1001D9B70(uint64_t a1)
{
  uint64_t v98 = 0LL;
  id v99 = &v98;
  uint64_t v100 = 0x3032000000LL;
  v101 = sub_1001D5E48;
  id v102 = sub_1001D5E58;
  id v103 = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___SASendCommands);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  id v5 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v5 commands]);
  }

  else
  {
    if (!v5)
    {
      id v6 = 0LL;
      goto LABEL_6;
    }

    uint64_t v111 = *(void *)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v111, 1LL));
  }

  id v6 = v5;
LABEL_6:
  if (*(void *)(a1 + 40))
  {
    if (AFIsInternalInstall(v5))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v7 timeIntervalSinceDate:*(void *)(a1 + 40)];
      double v9 = v8;

      int v10 = (int)(v9 / 60.0);
      if (v10 >= 6)
      {
        __int16 v11 = @"greater_than_15_min";
        int v12 = v11;
        id v13 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          v66 = *(void **)(a1 + 32);
          *(_DWORD *)AudioBufferList buf = 136315650;
          id v105 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
          __int16 v106 = 2112;
          id v107 = v66;
          __int16 v108 = 1024;
          LODWORD(v109) = (int)(v9 / 60.0);
          _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Commands %@ weren't ran for %d minutes",  buf,  0x1Cu);
        }

        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreSymptomsReporter sharedInstance]( &OBJC_CLASS___SiriCoreSymptomsReporter,  "sharedInstance"));
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
        id v16 = [v15 processIdentifier];
        [v14 reportIssueForType:@"command_stuck_in_group" subType:v12 context:0 processIdentifier:v16 walkboutStatus:byte_1005780A0];
      }
    }
  }

  BOOL v17 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v18 = *(unsigned __int8 *)(a1 + 72);
    *(_DWORD *)AudioBufferList buf = 136315650;
    id v105 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
    __int16 v106 = 2112;
    id v107 = v6;
    __int16 v108 = 1024;
    LODWORD(v109) = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Performing commands %@ after request %d",  buf,  0x1Cu);
  }

  int v19 = dispatch_group_create();
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  __int128 v97 = 0u;
  id obj = v6;
  id v20 = [obj countByEnumeratingWithState:&v94 objects:v110 count:16];
  if (v20)
  {
    uint64_t v68 = *(void *)v95;
    do
    {
      for (i = 0LL; i != v20; i = (char *)i + 1)
      {
        if (*(void *)v95 != v68) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void **)(*((void *)&v94 + 1) + 8LL * (void)i);
        uint64_t v23 = objc_opt_class(&OBJC_CLASS___SAStartRequest);
        if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0)
        {
          dispatch_group_enter(v19);
          id v24 = -[ADUIService initWithRequestDelegate:]( objc_alloc(&OBJC_CLASS___ADUIService),  "initWithRequestDelegate:",  *(void *)(a1 + 48));
          BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _serviceManager]);
          [v25 addService:v24];
          id v26 = (void *)objc_claimAutoreleasedReturnValue([v22 aceId]);
          BOOL v27 = v26 == 0LL;

          if (v27)
          {
            uint64_t v29 = SiriCoreUUIDStringCreate(v28);
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
            [v22 setAceId:v30];
          }

          id v31 = *(void **)(a1 + 56);
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v22 aceId]);
          [v31 _setFirstChanceService:v24 forAceId:v32];

          uint64_t v34 = *(void *)(a1 + 48);
          int v33 = *(void **)(a1 + 56);
          v89[0] = _NSConcreteStackBlock;
          v89[1] = 3221225472LL;
          v89[2] = sub_1001DA528;
          v89[3] = &unk_1004F5900;
          id v35 = v25;
          id v90 = v35;
          uint64_t v36 = v24;
          id v91 = v36;
          id v93 = &v98;
          id v92 = v19;
          [v33 _startNonSpeechRequest:v22 forDelegate:v34 withInfo:0 options:0 suppressAlert:0 completion:v89];
          if (!*(_BYTE *)(a1 + 73))
          {
            dispatch_time_t v37 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)AudioBufferList buf = 136315138;
              id v105 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke_2";
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s Ignoring early return flag for non interrupting request",  buf,  0xCu);
            }
          }
        }

        else
        {
          unsigned int v38 = [*(id *)(a1 + 56) _isServerBoundCommand:*(void *)(a1 + 32)];
          int v39 = *(void **)(a1 + 56);
          if (v38)
          {
            __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v39 _sessionManager]);
            __int128 v41 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Executing one-off server-bound command %@ from client %@.",  *(void *)(a1 + 32),  *(void *)(a1 + 48));
            __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v40 acquireAssertionForReason:v41]);

            __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refId]);
            LODWORD(v41) = v43 == 0LL;

            if ((_DWORD)v41)
            {
              id v50 = sub_1001DA584(*(void **)(a1 + 32));
              __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(v50);
              __int128 v51 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                uint64_t v52 = *(void *)(a1 + 32);
                *(_DWORD *)AudioBufferList buf = 136315650;
                id v105 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
                __int16 v106 = 2112;
                id v107 = v44;
                __int16 v108 = 2112;
                uint64_t v109 = v52;
                _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_INFO,  "%s Create a transient root execution context %@ for locally submitted server-bound command %@.",  buf,  0x20u);
              }

              [*(id *)(a1 + 56) _createRootExecutionContextForRequestID:v44];
            }

            else
            {
              __int128 v44 = 0LL;
            }

            dispatch_group_enter(v19);
            id v53 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
            v82[0] = _NSConcreteStackBlock;
            v82[1] = 3221225472LL;
            v82[2] = sub_1001DA5D4;
            v82[3] = &unk_1004F5928;
            uint64_t v83 = v19;
            id v54 = v44;
            id v84 = v54;
            id v55 = *(id *)(a1 + 32);
            uint64_t v56 = *(void *)(a1 + 56);
            id v85 = v55;
            uint64_t v86 = v56;
            uint64_t v36 = v40;
            UInt32 v87 = v36;
            id v57 = v42;
            id v88 = v57;
            id v58 = -[AFSafetyBlock initWithBlock:](v53, "initWithBlock:", v82);
            char v59 = *(void **)(a1 + 56);
            if (*(_BYTE *)(a1 + 73))
            {
              v78[0] = _NSConcreteStackBlock;
              v78[1] = 3221225472LL;
              v78[2] = sub_1001DA6DC;
              v78[3] = &unk_1004F5950;
              id v60 = *(id *)(a1 + 48);
              uint64_t v81 = &v98;
              uint64_t v61 = *(void *)(a1 + 56);
              v79[0] = v60;
              v79[1] = v61;
              int v80 = v58;
              [v59 _sendCommandToServer:v22 opportunistically:0 completion:v78];

              __int128 v62 = (id *)v79;
            }

            else
            {
              [*(id *)(a1 + 56) _sendCommandToServer:v22 opportunistically:0];
              __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _sessionManager]);
              v76[0] = _NSConcreteStackBlock;
              v76[1] = 3221225472LL;
              v76[2] = sub_1001DA7E4;
              v76[3] = &unk_1004F88C0;
              v77[1] = &v98;
              v77[0] = v58;
              [v63 barrier:v76];

              __int128 v62 = (id *)v77;
            }
          }

          else if ([v39 _isClientBoundCommand:*(void *)(a1 + 32)])
          {
            dispatch_group_enter(v19);
            uint64_t v36 = (ADUIService *)*(id *)(a1 + 32);
            [*(id *)(a1 + 56) _preheatCallbacksForCommand:v36];
            __int128 v45 = *(void **)(a1 + 56);
            __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) refId]);
            __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v45 _rootExecutionContextForRequestID:v46]);

            v72[0] = _NSConcreteStackBlock;
            v72[1] = 3221225472LL;
            v72[2] = sub_1001DA830;
            v72[3] = &unk_1004F5978;
            __int128 v48 = *(void **)(a1 + 56);
            id v73 = *(id *)(a1 + 48);
            v75 = &v98;
            v74 = v19;
            [v48 _handleServiceCommand:v36 executionContext:v47 completion:v72];
          }

          else
          {
            if (v99[5]) {
              continue;
            }
            uint64_t v49 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 500LL));
            uint64_t v36 = (ADUIService *)v99[5];
            v99[5] = v49;
          }
        }
      }

      id v20 = [obj countByEnumeratingWithState:&v94 objects:v110 count:16];
    }

    while (v20);
  }

  double v64 = *(void **)(a1 + 64);
  v65 = *(dispatch_queue_s **)(*(void *)(a1 + 56) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DA8A0;
  block[3] = &unk_1004FC1D8;
  id v70 = v64;
  uint64_t v71 = &v98;
  dispatch_group_notify(v19, v65, block);

  _Block_object_dispose(&v98, 8);
}

void sub_1001DA4D4(_Unwind_Exception *a1)
{
}

void sub_1001DA528(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  [*(id *)(a1 + 32) removeService:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v7 = *(void *)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  if (!v7) {
    objc_storeStrong(v6, a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_1001DA584(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 aceId]);
  if (!v2)
  {
    uint64_t v3 = SiriCoreUUIDStringCreate(0LL);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v3);
    [v1 setAceId:v2];
  }

  return v2;
}

id sub_1001DA5D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 48);
      int v6 = 136315650;
      uint64_t v7 = "-[ADCommandCenter _handleAceCommand:afterCurrentRequest:waitForResponse:withDelegate:completion:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v2;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Destroy the transient root execution context %@ for locally submitted server-bound command %@.",  (uint8_t *)&v6,  0x20u);
      uint64_t v2 = *(void *)(a1 + 40);
    }

    [*(id *)(a1 + 56) _removeHandledCommandIdsForRequestId:v2];
    [*(id *)(a1 + 56) _removePostCommandHandlingBlocksForRequestId:*(void *)(a1 + 40)];
    [*(id *)(a1 + 56) _destroyRootExecutionContextForRequestID:*(void *)(a1 + 40)];
  }

  return [*(id *)(a1 + 64) relinquishAssertion:*(void *)(a1 + 72)];
}

void sub_1001DA6DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) adRequestDidReceiveCommand:v5 reply:0];
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v9 = *(void *)(v7 + 40);
  __int16 v8 = (id *)(v7 + 40);
  if (!v9)
  {
    objc_storeStrong(v8, a3);
    if (v5) {
      goto LABEL_3;
    }
LABEL_5:
    [*(id *)(a1 + 48) invoke];
    goto LABEL_6;
  }

  if (!v5) {
    goto LABEL_5;
  }
LABEL_3:
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  _OWORD v13[2] = sub_1001DA8CC;
  v13[3] = &unk_1004FD940;
  __int16 v10 = *(void **)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 aceId]);
  int v12 = (void *)objc_claimAutoreleasedReturnValue([v5 refId]);
  [v10 _addPostCommandHandlingBlock:v13 forCommandId:v11 requestId:v12];

LABEL_6:
}

id sub_1001DA7E4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 17LL));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  return [*(id *)(a1 + 32) invoke];
}

void sub_1001DA830(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  [*(id *)(a1 + 32) adRequestDidReceiveCommand:a2 reply:0];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v7 = (id *)(v6 + 40);
  if (!v8) {
    objc_storeStrong(v7, a3);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1001DA8A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL);
  }
  return result;
}

id sub_1001DA8CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_1001DA8D4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([a1[4] _isClientBoundCommand:v5])
  {
    id v7 = a1[4];
    id v8 = v5;
    [v7 _preheatCallbacksForCommand:v8];
    id v9 = a1[4];
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([a1[5] refId]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _rootExecutionContextForRequestID:v10]);

    id v12 = a1[4];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_1001DA9E4;
    v13[3] = &unk_1004F5170;
    id v14 = v6;
    id v15 = a1[6];
    [v12 _handleServiceCommand:v8 executionContext:v11 completion:v13];
  }
}

id *sub_1001DA9E4(id *result)
{
  if (result[4]) {
    return (id *)objc_msgSend(result[5], "adRequestEncounteredIntermediateError:");
  }
  return result;
}

void sub_1001DA9F8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 context]);

  if (v6)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 aceId]);
    unsigned int v5 = [v3 isEqualToString:v4];

    if (v5) {
      [*(id *)(a1 + 32) _sendWillStopRecordingForCommand:v6];
    }
  }
}

void sub_1001DAA9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [WeakRetained _updateSpeechOptions:*(void *)(a1 + 32) forDelegate:*(void *)(a1 + 40) allowUpdateInSpeechCompletion:0];
}

void sub_1001DAAE8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 context]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 aceId]);

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
  if ([v4 isEqualToString:v5])
  {
    [*(id *)(a1 + 32) _sendEnableServerEndpointerCommandWithRefID:v4];
  }

  else
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315650;
      id v8 = "-[ADCommandCenter _updateSpeechOptions:forDelegate:allowUpdateInSpeechCompletion:]_block_invoke";
      __int16 v9 = 2112;
      __int16 v10 = v5;
      __int16 v11 = 2112;
      id v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Skipped enable server endpointer command because (_currentRequest.aceId = %@) and (_speechManager.context.ace Id = %@) mismatched.",  (uint8_t *)&v7,  0x20u);
    }
  }
}

void sub_1001DAC18(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [v2 setInitialDictationLanguage:*(void *)(a1 + 48)];
  [v2 setPrimaryDictationLanguage:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
    [v2 setDictationLanguages:v3];
  }

  else
  {
    [v2 setDictationLanguages:0];
  }

  [v2 setDictationOptions:*(void *)(a1 + 40)];
  [v2 startSpeechCaptureWithURL:*(void *)(a1 + 56) isNarrowBand:*(unsigned __int8 *)(a1 + 72) isDictation:1 sessionUUID:*(void *)(a1 + 64)];
}

void sub_1001DAD18(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [v2 setInitialDictationLanguage:*(void *)(a1 + 48)];
  [v2 setPrimaryDictationLanguage:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 48))
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
    [v2 setDictationLanguages:v3];
  }

  else
  {
    [v2 setDictationLanguages:0];
  }

  [v2 setDictationOptions:*(void *)(a1 + 40)];
  objc_msgSend( v2,  "startRecordedDictationCaptureWithSessionUUID:narrowband:secureOfflineOnly:",  *(void *)(a1 + 56),  *(unsigned __int8 *)(a1 + 64),  objc_msgSend(*(id *)(a1 + 40), "secureOfflineOnly"));
}

void sub_1001DAE28(uint64_t a1)
{
  uint64_t v2 = (dispatch_group_s *)*(id *)(*(void *)(a1 + 32) + 392LL);
  uint64_t v3 = v2;
  if (*(void *)(a1 + 56)) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)AudioBufferList buf = 136315650;
      BOOL v17 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:deleg"
            "ate:completion:]_block_invoke";
      __int16 v18 = 2112;
      int v19 = v3;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Entering speech group %@ (%@)...",  buf,  0x20u);
    }

    dispatch_group_enter(v3);
    uint64_t v6 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001DAFA4;
    v10[3] = &unk_1004F5860;
    id v7 = *(id *)(a1 + 40);
    char v15 = *(_BYTE *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v3;
    id v14 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v10);
  }
}

void sub_1001DAFA4(uint64_t a1, double a2)
{
  BOOL v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v22 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:delegat"
          "e:completion:]_block_invoke";
    __int16 v23 = 2048;
    double v24 = a2;
    __int16 v25 = 2112;
    uint64_t v26 = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Continue pending recording at %f (%@)...",  buf,  0x20u);
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1001DB24C;
  v19[3] = &unk_1004F5838;
  *(double *)&void v19[4] = a2;
  char v20 = *(_BYTE *)(a1 + 64);
  [v5 logEventWithType:307 contextProvider:v19];

  *(double *)(*(void *)(a1 + 40) + 40kdebug_trace(722470076LL, 0LL, 0LL, 0LL, 0LL) = a2;
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v22 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:deleg"
            "ate:completion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Asking to play recording start alert on prelistening continue",  buf,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(dispatch_queue_s **)(v7 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001DB318;
    block[3] = &unk_1004FD940;
    void block[4] = v7;
    dispatch_async(v8, block);
  }

  uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *(double *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v22 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:delegat"
          "e:completion:]_block_invoke_2";
    __int16 v23 = 2112;
    double v24 = v13;
    __int16 v25 = 2112;
    uint64_t v26 = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s Leaving speech group %@ (%@)...",  buf,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  __int16 v10 = *(dispatch_group_s **)(a1 + 48);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1001DB324;
  v15[3] = &unk_1004FD968;
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 32);
  dispatch_group_notify(v10, v11, v15);
}

id sub_1001DB24C(uint64_t a1)
{
  v6[0] = @"timestamp";
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32)));
  v6[1] = @"prelistening";
  v7[0] = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  v7[1] = v3;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

id sub_1001DB318(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 112) playRecordingStartAlert];
}

void sub_1001DB324(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    uint64_t v6 = "-[ADCommandCenter _startRecordingForPendingDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate"
         ":completion:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Leaving request group %@ (%@)...",  (uint8_t *)&v5,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1001DB3F0(uint64_t a1)
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions(*(void *)(a1 + 32));
}

void sub_1001DB3F8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v3 = 136315138;
    uint64_t v4 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Leaving _replaceSpeechDelegateWhenReady group",  (uint8_t *)&v3,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001DB4AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v14 = 136315138;
    char v15 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Leaving _getDictationLanguages group",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int16 v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
  id v10 = v5;

  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v6;
  id v13 = v6;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001DB5BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 24))
  {
    int v3 = *(void **)(v2 + 40);
    if (v3 == *(void **)(a1 + 40) && ([v3 adSpeechSessionEnded] & 1) == 0)
    {
      id v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
        uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
        int v36 = 136315906;
        dispatch_time_t v37 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
        __int16 v38 = 2112;
        uint64_t v39 = v6;
        __int16 v40 = 2112;
        uint64_t v41 = v7;
        __int16 v42 = 2112;
        uint64_t v43 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Dictation with session id %@ will start with primary language code %@ and dictation languages %@.",  (uint8_t *)&v36,  0x2Au);
      }

      objc_msgSend( *(id *)(a1 + 32),  "_requestWillStartWithInfo:showNetworkActivityIndicator:",  0,  objc_msgSend(*(id *)(a1 + 56), "secureOfflineOnly") ^ 1);
      __int16 v9 = *(void **)(a1 + 48);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) turnIdentifier]);
      sub_1001DBA28(v9, v10);

      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 16LL);
      if ((AFIsATVOnly(v12) & 1) != 0 || !v11) {
        [*(id *)(a1 + 32) _clearContextAndStartDictationSessionWithLanguageCode:*(void *)(a1 + 72) dictationOptions:*(void *)(a1 + 56)];
      }
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 280LL), *(id *)(a1 + 64));
      objc_msgSend( *(id *)(*(void *)(a1 + 32) + 280),  "setDictationInputOrigin:",  objc_msgSend(*(id *)(a1 + 56), "dictationInputOrigin"));
      id v13 = *(void **)(*(void *)(a1 + 32) + 280LL);
      int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) applicationDisplayName]);
      [v13 setApplicationDisplayName:v14];

      char v15 = *(void **)(*(void *)(a1 + 32) + 280LL);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) applicationName]);
      [v15 setApplicationBundleIdentifier:v16];

      objc_msgSend( *(id *)(*(void *)(a1 + 32) + 280),  "setSkipGeneratingSpeechPacket:",  objc_msgSend(*(id *)(a1 + 56), "secureOfflineOnly"));
      id v17 = *(void **)(a1 + 32);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) context]);
      objc_msgSend(v17, "_context_setSTApplicationContext:", v18);

      id v19 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
      [v19 setInitialDictationLanguage:*(void *)(a1 + 72)];
      [v19 setPrimaryDictationLanguage:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
      [v19 setDictationLanguages:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];
      [v19 setDictationOptions:*(void *)(a1 + 56)];
      [*(id *)(a1 + 32) _setSpeechCapturingContext:0];
      char v20 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v19,  "startSpeechCaptureForDictationWithOptions:sessionUUID:secureOfflineOnly:",  *(void *)(a1 + 64),  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 56), "secureOfflineOnly")));
      [*(id *)(a1 + 32) _setSpeechCapturingContext:v20];
      if ([*(id *)(a1 + 64) audioFileType]) {
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 40));
      }
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[ADDictationOfflineStatusObserver sharedDictationOfflineStatusObserver]( &OBJC_CLASS___ADDictationOfflineStatusObserver,  "sharedDictationOfflineStatusObserver"));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 offlineDictationStatus]);

      if (AFIsATV(v23, v24)
        && ([*(id *)(a1 + 56) secureOfflineOnly] & 1) != 0
        || (uint64_t v25 = AFOfflineDictationStatusForLanguage(*(void *)(a1 + 72), v22),
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25),
            v26,
            v26))
      {
        BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 assistantIdentifier]);
        [v27 startDictationRequestWithAssistantId:v29 requestId:*(void *)(a1 + 48) inputOrigin:0 dictationOptions:*(void *)(a1 + 56)];

        [*(id *)(a1 + 32) _emitDeviceDynamicContextForRequest:*(void *)(a1 + 48)];
      }

      uint64_t v30 = *(void *)(a1 + 80);
      if (v30) {
        (*(void (**)(void))(v30 + 16))();
      }

      goto LABEL_21;
    }
  }

  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v32 = *(void *)(a1 + 40);
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v33 = *(void *)(a1 + 32);
    uint64_t v34 = *(void *)(v33 + 24);
    id v35 = *(void **)(v33 + 40);
    id v19 = v4;
    char v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v35 adSpeechSessionEnded]));
    int v36 = 136316418;
    dispatch_time_t v37 = "-[ADCommandCenter _startDictationWithLanguageCode:options:speechOptions:sessionUUID:delegate:completion:]_block_invoke";
    __int16 v38 = 2112;
    uint64_t v39 = v31;
    __int16 v40 = 2112;
    uint64_t v41 = v32;
    __int16 v42 = 2112;
    uint64_t v43 = v34;
    __int16 v44 = 2112;
    __int128 v45 = v35;
    __int16 v46 = 2112;
    __int128 v47 = v20;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_ERROR,  "%s Ignored Dictation with session id %@ because the expected request delegate is nil and speech delegate is %@, bu t the actual request delegate is %@ and speech delegate is %@, delegate session ended %@.",  (uint8_t *)&v36,  0x3Eu);
LABEL_21:
  }

void sub_1001DBA28(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
  uint64_t v6 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v4);

  id v12 = [v5 initWithNSUUID:v6];
  id v7 = objc_alloc_init(&OBJC_CLASS___SISchemaRequestLinkInfo);
  [v7 setUuid:v12];
  [v7 setComponent:1];
  id v8 = [[SISchemaUUID alloc] initWithNSUUID:v3];

  id v9 = objc_alloc_init(&OBJC_CLASS___SISchemaRequestLinkInfo);
  [v9 setUuid:v8];
  [v9 setComponent:2];
  id v10 = objc_alloc_init(&OBJC_CLASS___SISchemaRequestLink);
  [v10 setSource:v7];
  [v10 setTarget:v9];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v11 emitMessage:v10];
}

uint64_t sub_1001DBB64(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [v2 startSpeechCaptureWithURL:*(void *)(a1 + 40) isNarrowBand:*(unsigned __int8 *)(a1 + 56) isDictation:0 sessionUUID:0];

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1001DBBC0(uint64_t a1)
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions(*(void *)(a1 + 32));
}

void sub_1001DBBC8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [v2 startAcousticIDCaptureWithOptions:*(void *)(a1 + 40) sessionUUID:0];
}

uint64_t sub_1001DBC24(uint64_t a1)
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions(*(void *)(a1 + 32));
}

void sub_1001DBC2C(id *a1)
{
  *((_BYTE *)a1[4] + 344) = 1;
  [a1[4] _setSpeechCapturingContext:0];
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _speechManager]);
  id v3 = a1[5];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _sessionManager]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 languageCode]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 startSpeechCaptureForRequestWithOptions:v3 sessionUUID:0 language:v5]);

  [a1[4] _setSpeechCapturingContext:v6];
}

void sub_1001DBCF8(uint64_t a1)
{
  id v2 = (dispatch_group_s *)*(id *)(*(void *)(a1 + 32) + 392LL);
  id v3 = v2;
  if (*(void *)(a1 + 56)) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)AudioBufferList buf = 136315650;
      id v17 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v3;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Entering speech group %@ (%@)...",  buf,  0x20u);
    }

    dispatch_group_enter(v3);
    uint64_t v6 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001DBE74;
    v10[3] = &unk_1004F5860;
    id v7 = *(id *)(a1 + 40);
    char v15 = *(_BYTE *)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v13 = v3;
    id v14 = *(id *)(a1 + 48);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v10);
  }
}

void sub_1001DBE74(uint64_t a1, double a2)
{
  BOOL v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v23 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke";
    __int16 v24 = 2048;
    double v25 = a2;
    __int16 v26 = 2112;
    uint64_t v27 = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Continue pending recording at %f (%@)...",  buf,  0x20u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_1001DC130;
  v20[3] = &unk_1004F5838;
  *(double *)&void v20[4] = a2;
  char v21 = *(_BYTE *)(a1 + 64);
  [v5 logEventWithType:307 contextProvider:v20];

  *(double *)(*(void *)(a1 + 40) + 40kdebug_trace(722470076LL, 0LL, 0LL, 0LL, 0LL) = a2;
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v23 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Asking to play recording start alert on prelistening continue",  buf,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(dispatch_queue_s **)(v7 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001DC1FC;
    block[3] = &unk_1004FD940;
    void block[4] = v7;
    dispatch_async(v8, block);
  }

  uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v13 = *(double *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v23 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
    __int16 v24 = 2112;
    double v25 = v13;
    __int16 v26 = 2112;
    uint64_t v27 = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s Leaving speech group %@ (%@)...",  buf,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  id v10 = *(void **)(a1 + 48);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1001DC208;
  v15[3] = &unk_1004FD4C0;
  id v16 = v10;
  id v17 = *(id *)(a1 + 32);
  id v18 = *(id *)(a1 + 56);
  dispatch_group_notify(v16, v11, v15);
}

id sub_1001DC130(uint64_t a1)
{
  v6[0] = @"timestamp";
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 32)));
  v6[1] = @"prelistening";
  v7[0] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  v7[1] = v3;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

id sub_1001DC1FC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 112) playRecordingStartAlert];
}

void sub_1001DC208(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    uint64_t v6 = "-[ADCommandCenter _startRecordingForPendingSpeechRequestForDelegate:withOptions:sessionUUID:completion:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Leaving request group %@ (%@)...",  (uint8_t *)&v5,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1001DC2D4(uint64_t a1)
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions(*(void *)(a1 + 32));
}

uint64_t sub_1001DC2DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1001DC2EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1LL);
  }
  return result;
}

void sub_1001DC304(uint64_t a1)
{
  if (AFDeviceSupportsBargeIn())
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 localContextWithPrivacyClass:10]);

    if (AFSpeechEventIsVoiceTrigger([*(id *)(a1 + 40) activationEvent]))
    {
      uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 280LL);
      unint64_t v5 = (unint64_t)[*(id *)(a1 + 40) bargeInOptions];
      id v6 = v3;
      __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v6 alarmSnapshot]);
      unsigned int v8 = [v7 hasFiringAlarms];

      if (v8) {
        uint64_t v9 = 8LL;
      }
      else {
        uint64_t v9 = 0LL;
      }
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 timerSnapshot]);
      unsigned int v11 = [v10 hasFiringTimers];

      if (v11) {
        uint64_t v12 = v9 | 0x10;
      }
      else {
        uint64_t v12 = v9;
      }
      double v13 = (void *)objc_claimAutoreleasedReturnValue([v6 playbackStateSnapshot]);
      BOOL v14 = [v13 playbackState] == (id)1;

      char v15 = (void *)objc_claimAutoreleasedReturnValue([v6 homeAnnouncementSnapshot]);
      unsigned __int8 v16 = [v15 state];

      [v4 setBargeInOptions:(v12 | v14) & 0xFFFFFFFFFFFFFFDFLL | (32 * (v16 & 1)) | v5];
    }

    id v17 = *(void **)(*(void *)(a1 + 32) + 280LL);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 playbackStateSnapshot]);
    objc_msgSend(v17, "setIsMediaPlaying:", objc_msgSend(v18, "playbackState") == (id)1);
  }

  id v19 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
  uint64_t v31 = _NSConcreteStackBlock;
  uint64_t v32 = 3221225472LL;
  uint64_t v33 = sub_1001DC5B4;
  uint64_t v34 = &unk_1004FBA60;
  id v35 = *(id *)(a1 + 48);
  id v36 = *(id *)(a1 + 56);
  __int16 v20 = -[AFSafetyBlock initWithBlock:](v19, "initWithBlock:", &v31);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(v21 + 64);
  *(void *)(v21 + 64) = v20;

  objc_msgSend(*(id *)(a1 + 32), "_acousticId_reset", v31, v32, v33, v34);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
  [*(id *)(a1 + 32) _setSpeechCapturingContext:0];
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 40);
  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionManager]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 languageCode]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v23 startSpeechCaptureForRequestWithOptions:v25 sessionUUID:v24 language:v27]);

  [*(id *)(a1 + 32) _setSpeechCapturingContext:v28];
  if ([*(id *)(a1 + 40) audioFileType]) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), *(id *)(a1 + 72));
  }
  uint64_t v29 = *(void *)(a1 + 80);
  if (v29) {
    (*(void (**)(void))(v29 + 16))();
  }
  uint64_t v30 = *(void *)(a1 + 88);
  if (v30) {
    (*(void (**)(uint64_t, uint64_t))(v30 + 16))(v30, 1LL);
  }
}

void sub_1001DC5B4(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    id v6 = "-[ADCommandCenter _startSpeechRequestWithDelegate:withOptions:sessionUUID:completion:]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Leaving request group %@ (%@)...",  (uint8_t *)&v5,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001DC680(id a1, AFSetAudioSessionActiveContextMutating *a2)
{
}

uint64_t sub_1001DC68C(uint64_t a1)
{
  return AFAnalyticsContextCreateWithSpeechRequestOptions(*(void *)(a1 + 32));
}

void sub_1001DC694(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v12 = "-[ADCommandCenter _startNonSpeechRequest:forDelegate:withInfo:options:suppressAlert:completion:]_block_invoke";
      __int16 v13 = 2112;
      BOOL v14 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s options = %@", buf, 0x16u);
      id v2 = *(void **)(a1 + 32);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 280LL), v2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _speechManager]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001DC884;
    v9[3] = &unk_1004FBBF8;
    id v10 = *(id *)(a1 + 32);
    id v5 = +[AFSetAudioSessionActiveContext newWithBuilder:]( &OBJC_CLASS___AFSetAudioSessionActiveContext,  "newWithBuilder:",  v9);
    [v4 prepareAudioSystemWithContext:v5 completion:0];
  }

  [*(id *)(a1 + 40) _sendRestrictionsInPreparationForRequest];
  objc_msgSend(*(id *)(a1 + 40), "_context_updateContext");
  [*(id *)(a1 + 40) _reallyHandleNewStartRequest:*(void *)(a1 + 48) info:*(void *)(a1 + 56)];
  [*(id *)(a1 + 40) _sendLocationIfNeededForRequest];
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    __int16 v7 = *(void **)(a1 + 64);
    uint64_t v8 = *(void *)(a1 + 72);
    *(_DWORD *)AudioBufferList buf = 136315650;
    uint64_t v12 = "-[ADCommandCenter _startNonSpeechRequest:forDelegate:withInfo:options:suppressAlert:completion:]_block_invoke_2";
    __int16 v13 = 2112;
    BOOL v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "%s Leaving request group %@ (%@)...",  buf,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1001DC884(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setReason:3];
  [v3 setSpeechRequestOptions:*(void *)(a1 + 32)];
}

uint64_t sub_1001DC8C8(uint64_t a1)
{
  return AFAnalyticsContextCreateWithRequestInfo(*(void *)(a1 + 32));
}

uint64_t sub_1001DC8D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  return result;
}

void sub_1001DC954(uint64_t a1, char a2)
{
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001DC9FC;
  block[3] = &unk_1004FCB38;
  char v7 = a2;
  id v6 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_1001DC9E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

void sub_1001DC9FC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v1 = *(void **)(a1 + 32);
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  5LL,  @"Unable to start UI with text.",  0LL));
    [v1 adRequestDidCompleteWithSuccess:0 error:v2];
  }

void sub_1001DCA78(uint64_t a1)
{
  id v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[2];
  BOOL v3 = *(void *)(a1 + 32) == v2 || v2 == 0;
  if (v3 && !v1[5])
  {
    char v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v9 = 136315138;
      id v10 = "-[ADCommandCenter _reallyEndSessionForDelegate:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Asking speech manager to release audio session...",  (uint8_t *)&v9,  0xCu);
      id v1 = *(void **)(a1 + 40);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 _speechManager]);
    [v8 endSession];
  }

  else
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = v1[5];
      int v9 = 136315650;
      id v10 = "-[ADCommandCenter _reallyEndSessionForDelegate:]_block_invoke";
      __int16 v11 = 2048;
      uint64_t v12 = v2;
      __int16 v13 = 2048;
      uint64_t v14 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Ignored releasing audio session because current client is %p and speech delegate is %p.",  (uint8_t *)&v9,  0x20u);
    }
  }

uint64_t sub_1001DCBD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001DCBE0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _reallyEndSessionForDelegate:*(void *)(a1 + 32)];
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    BOOL v3 = *(void **)(a1 + 40);
    if (v3 == (void *)WeakRetained[68])
    {
      WeakRetained[68] = 0LL;

      uint64_t v2 = WeakRetained;
    }
  }
}

void sub_1001DCC3C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 136315394;
    uint64_t v8 = "-[ADCommandCenter _prepareForAppLaunchForRequest:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v7, 0x16u);
  }

  id v4 = [*(id *)(a1 + 32) copy];
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(v5 + 544);
  *(void *)(v5 + 544) = v4;
}

uint64_t sub_1001DCD0C(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 526LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1001DCD1C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 playbackStateSnapshot]);
  objc_msgSend(v4, "setIsMediaPlaying:", objc_msgSend(v5, "playbackState") == (id)1);

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _motionManager]);
  objc_msgSend(v4, "setDeviceMotion:", objc_msgSend(v6, "deviceMotion"));
}

id sub_1001DCDA4(uint64_t a1, void *a2)
{
  return [a2 setSpeechRequestOptions:*(void *)(*(void *)(a1 + 32) + 280)];
}

id sub_1001DCDB4(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    int v7 = "-[ADCommandCenter homehubManager:didDeactivateEndpointWithContext:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s hasActiveEndpoints = %d",  (uint8_t *)&v6,  0x12u);
  }

  return [*(id *)(a1 + 32) setRemoraHostEnabled:a2];
}

id sub_1001DCE84(uint64_t a1, uint64_t a2)
{
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    int v7 = "-[ADCommandCenter homehubManager:didActivateEndpointWithContext:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s hasActiveEndpoints = %d",  (uint8_t *)&v6,  0x12u);
  }

  return [*(id *)(a1 + 32) setRemoraHostEnabled:a2];
}

void sub_1001DCF54(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) refId]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 _executionContextMatchingExecutionInfo:v3 fallbackRequestID:v4]);

  [v5 setPresentedUIResponse:1];
  unsigned int v6 = [v5 isFromRemote];
  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      int v13 = 136315650;
      uint64_t v14 = "-[ADCommandCenter UIService:didPresentUIResponseForCommand:withExecutionInfo:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s set most recent remote visible context for %@ to %@",  (uint8_t *)&v13,  0x20u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = v5;
    __int16 v11 = *(void **)(v9 + 472);
    *(void *)(v9 + 472) = v10;
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v13 = 136315138;
      uint64_t v14 = "-[ADCommandCenter UIService:didPresentUIResponseForCommand:withExecutionInfo:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Most recent remote visible context cleared",  (uint8_t *)&v13,  0xCu);
    }

    uint64_t v12 = *(void *)(a1 + 32);
    __int16 v11 = *(void **)(v12 + 472);
    *(void *)(v12 + 472) = 0LL;
  }
}

id sub_1001DD0DC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) adSpeechRecordingWillStopWithSignpostID:*(void *)(a1 + 40)];
}

void sub_1001DD0E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v47 = 0LL;
  char v46 = 0;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sharedMultiUserService]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    uint64_t v6 = *(void *)(a1 + 48);
  }
  uint64_t v7 = *(void *)(a1 + 56);
  if (!v7) {
    uint64_t v7 = *(void *)(a1 + 64);
  }
  id v45 = 0LL;
  id v40 = v3;
  uint64_t v8 = objc_claimAutoreleasedReturnValue( [v4 validateAndReturnScores:v6 classifiedUser:v7 donatedScores:v3 unknownUserSharedId:&v45 totalUsers:&v47 ghostVoiceProfileDetected:&v46]);
  id v38 = v45;
  uint64_t v9 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  __int16 v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  id v12 = *(id *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  id v13 = [v12 countByEnumeratingWithState:&v41 objects:v50 count:16];
  if (v13)
  {
    id v14 = v13;
    id v15 = 0LL;
    uint64_t v16 = *(void *)v42;
    do
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v42 != v16) {
          objc_enumerationMutation(v12);
        }
        id v18 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)i);
        __int16 v20 = v19;
        if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL)
          || (uint64_t)[v19 integerValue] > (uint64_t)v15)
        {
          id v15 = [v20 integerValue];
          id v21 = [v18 copy];
          uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8LL);
          uint64_t v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;
        }

        id v24 = objc_alloc_init(&OBJC_CLASS___SAUserConfidenceScore);
        objc_msgSend(v24, "setConfidenceScore:", objc_msgSend(v20, "integerValue"));
        [v24 setSharedUserId:v18];
        -[NSMutableArray addObject:](v11, "addObject:", v24);
      }

      id v14 = [v12 countByEnumeratingWithState:&v41 objects:v50 count:16];
    }

    while (v14);
  }

  id v25 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count];
  if (v25)
  {
    uint64_t v27 = v38;
    if ((AFIsATV(v25, v26) & 1) == 0)
    {
      id v28 = [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) count];
      if (v28 != [*(id *)(a1 + 48) count]
        || (id v29 = [*(id *)(a1 + 48) count], (unint64_t)v29 < v47)
        || v46)
      {
        uint64_t v30 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          uint64_t v49 = "-[ADCommandCenter _handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:versio"
                "n:thresholdingType:assetVersion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s Assistantd and CoreSpeech are out of sync. Attempt recovery.",  buf,  0xCu);
        }

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_sharedMultiUserService", v38));
        [v31 voiceProfilesOutOfSync];
      }
    }

    if (v27)
    {
      id v32 = objc_alloc_init(&OBJC_CLASS___SAUserConfidenceScore);
      [v32 setConfidenceScore:*(void *)(a1 + 96)];
      [v32 setSharedUserId:v27];
      -[NSMutableArray addObject:](v11, "addObject:", v32);
    }

    objc_msgSend(*(id *)(a1 + 72), "setScores:", v11, v38);
    uint64_t v33 = *(void **)(a1 + 72);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 104)));
    [v33 setScoringSchemeVersion:v34];
    id v35 = v40;
    goto LABEL_30;
  }

  id v36 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v49 = "-[ADCommandCenter _handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:thre"
          "sholdingType:assetVersion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s No scores found for tracked profiles.",  buf,  0xCu);
  }

  id v37 = objc_msgSend(*(id *)(a1 + 48), "count", v38);
  uint64_t v27 = v39;
  id v35 = v40;
  if (v37)
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sharedMultiUserService]);
    [v34 voiceProfilesOutOfSync];
LABEL_30:
  }
}

id sub_1001DD500(uint64_t a1)
{
  return  [*(id *)(a1 + 32) _handleConfidenceScores:*(void *)(a1 + 40) classification:*(void *)(a1 + 72) classifiedUser:*(void *)(a1 + 48) unknownUserScore:*(void *)(a1 + 80) duration:*(void *)(a1 + 88) version:*(void *)(a1 + 96) thresholdingType:*(void *)(a1 + 56) assetVersion:*(void *)(a1 + 64)];
}

void sub_1001DD540(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADCommandCenter speechManager:audioSessionDidBecomeActive:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %d", (uint8_t *)&v5, 0x12u);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) adAudioSessionDidBecomeActive:*(unsigned __int8 *)(a1 + 40)];
  if (!*(_BYTE *)(a1 + 40))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[ADExternalNotificationRequestHandler sharedNotificationRequestHandler]( &OBJC_CLASS___ADExternalNotificationRequestHandler,  "sharedNotificationRequestHandler"));
    [v4 audioSessionDidEnd];
  }

id sub_1001DD62C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v5 = 136315394;
    uint64_t v6 = "-[ADCommandCenter speechManager:audioSessionWillBecomeActive:]_block_invoke";
    __int16 v7 = 1024;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %d", (uint8_t *)&v5, 0x12u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 16) adAudioSessionWillBecomeActive:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001DD6F4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v4 = 136315394;
    int v5 = "-[ADCommandCenter speechManager:didChangeRecordingState:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %d", (uint8_t *)&v4, 0x12u);
  }

  *(void *)(*(void *)(a1 + 32) + 24kdebug_trace(722470076LL, 0LL, 0LL, 0LL, 0LL) = 2LL * *(unsigned __int8 *)(a1 + 40);
}

void sub_1001DD7BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    int v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v18 = 136315394;
      id v19 = "-[ADCommandCenter _saQuickStop:executionContext:completion:]_block_invoke";
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s QuickStop invocation completed with response: %@",  (uint8_t *)&v18,  0x16u);
    }

    uint64_t v8 = objc_opt_class(&OBJC_CLASS___SAGenericCommand);
    if ((objc_opt_isKindOfClass(v5, v8) & 1) != 0) {
      id v9 = (id)objc_claimAutoreleasedReturnValue(+[AceObject aceObjectWithGenericCommand:](&OBJC_CLASS___AceObject, "aceObjectWithGenericCommand:", v5));
    }
    else {
      id v9 = v5;
    }
    id v10 = v9;
  }

  else
  {
    id v10 = 0LL;
  }

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0
    || (uint64_t v12 = objc_opt_class(&OBJC_CLASS___SAIntentGroupRunSiriKitExecutorCompleted),
        (objc_opt_isKindOfClass(v10, v12) & 1) != 0))
  {
    id v13 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    -[SACommandSucceeded setRefId:](v13, "setRefId:", v14);

    id v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    uint64_t v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315650;
      id v19 = "-[ADCommandCenter _saQuickStop:executionContext:completion:]_block_invoke";
      __int16 v20 = 2112;
      id v21 = v5;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s QuickStop invocation failed with response: %@, error: %@",  (uint8_t *)&v18,  0x20u);
    }

    id v13 = objc_alloc_init(&OBJC_CLASS___SACommandFailed);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    -[SACommandSucceeded setRefId:](v13, "setRefId:", v17);

    id v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v15();
}

void sub_1001DDA18(uint64_t a1, uint64_t a2)
{
  id v7 = objc_alloc_init(&OBJC_CLASS___SAQuickStopCompleted);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
  [v7 setRefId:v4];

  if ((a2 & 1) != 0)
  {
    id v6 = &SAQuickStopCategoryAlarmValue;
LABEL_7:
    id v5 = v7;
    goto LABEL_8;
  }

  if ((a2 & 2) != 0)
  {
    id v6 = &SAQuickStopCategoryTimerValue;
    goto LABEL_7;
  }

  id v5 = v7;
  if (!a2)
  {
    id v6 = &SAQuickStopCategoryNoneValue;
LABEL_8:
    [v5 setCategoryStopped:*v6];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001DDAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001DDB64;
  v7[3] = &unk_1004FD990;
  id v8 = v3;
  id v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1001DDB64(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = *(void *)(a1 + 32);
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke_3";
    __int16 v46 = 2112;
    uint64_t v47 = v32;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s %@", buf, 0x16u);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alarmSnapshot]);
  unsigned int v4 = [v3 hasFiringAlarms];
  if (v4)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___SOClockAlarmManager);
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 alarmsByID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 allValues]);

    id v8 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v39;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v39 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
          if ([v12 isFiring])
          {
            id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 alarmID]);
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 UUIDString]);
            id v15 = -[SOClockAlarmManager dismissAlarmWithIdentifier:](v5, "dismissAlarmWithIdentifier:", v14);
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }

      while (v9);
    }

    uint64_t v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s QuickStop: Dismissed firing alarms.",  buf,  0xCu);
    }
  }

  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timerSnapshot]);
  if ([v17 hasFiringTimers])
  {
    uint64_t v33 = v3;
    int v18 = objc_alloc_init(&OBJC_CLASS___SOClockTimerManager);
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 timersByID]);
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 allValues]);

    id v21 = [v20 countByEnumeratingWithState:&v34 objects:v42 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v35;
      do
      {
        for (j = 0LL; j != v22; j = (char *)j + 1)
        {
          if (*(void *)v35 != v23) {
            objc_enumerationMutation(v20);
          }
          id v25 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)j);
          if ([v25 isFiring])
          {
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 timerID]);
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 UUIDString]);
            id v28 = -[SOClockTimerManager dismissTimerWithIdentifier:](v18, "dismissTimerWithIdentifier:", v27);
          }
        }

        id v22 = [v20 countByEnumeratingWithState:&v34 objects:v42 count:16];
      }

      while (v22);
    }

    id v29 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%s QuickStop: Dismissed firing timers.",  buf,  0xCu);
    }

    id v3 = v33;
    goto LABEL_30;
  }

  if (v4)
  {
LABEL_30:
    uint64_t v30 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_34;
  }

  uint64_t v31 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v45 = "-[ADCommandCenter _handleQuickStopCommandRoutedFromRemote:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "%s QuickStop: Nothing to stop", buf, 0xCu);
  }

  uint64_t v30 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
LABEL_34:
  v30();
}

void sub_1001DDFBC(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 40LL);
  uint64_t v3 = objc_opt_respondsToSelector(v2, "adSpeechRecordingPerformTwoShotPromptWithType:context:completion:");
  if ((v3 & 1) != 0)
  {
    int v4 = AFSupportsSCDAFramework(v3);
    id v5 = (id *)&OBJC_CLASS___SCDAMonitor_ptr;
    if (!v4) {
      id v5 = (id *)&OBJC_CLASS___AFMyriadMonitor_ptr;
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*v5 sharedMonitor]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001DE130;
    v10[3] = &unk_1004FC380;
    void v10[4] = *(void *)(a1 + 32);
    id v7 = v2;
    uint64_t v8 = *(void *)(a1 + 56);
    id v11 = v7;
    uint64_t v14 = v8;
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    [v6 waitForMyriadDecisionForReason:@"Perform two shot prompt." withCompletion:v10];

    goto LABEL_7;
  }

  if (*(void *)(a1 + 48))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ is incapable of performing fake two shot prompt.",  v2));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  15LL,  v9,  0LL));

    (*(void (**)(double, double))(*(void *)(a1 + 48) + 16LL))(0.0, 0.0);
LABEL_7:
  }
}

void sub_1001DE130(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)(a1 + 40);
  int v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1001DE1D8;
  block[3] = &unk_1004F56E0;
  block[1] = 3221225472LL;
  char v12 = a2;
  id v5 = v3;
  uint64_t v6 = *(void *)(a1 + 64);
  id v8 = v5;
  uint64_t v11 = v6;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  dispatch_async(v4, block);
}

void sub_1001DE1D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    _[*(id *)(a1 + 32) adSpeechRecordingPerformTwoShotPromptWithType:*(void *)(a1 + 56) context:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }

  else
  {
    id v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v6 = "-[ADCommandCenter speechManager:performTwoShotPromptWithType:context:completion:]_block_invoke_3";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Myriad lost, twoshot prompt dropped.",  buf,  0xCu);
    }

    if (*(void *)(a1 + 48))
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ two shot prompt was rejected.",  *(void *)(a1 + 32)));
      int v4 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  15LL,  v3,  0LL));

      (*(void (**)(double, double))(*(void *)(a1 + 48) + 16LL))(0.0, 0.0);
    }
  }

uint64_t sub_1001DE334(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 64kdebug_trace(722470076LL, 0LL, 0LL, 0LL, 0LL) = 0;
  uint64_t result = objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 32) + 40LL),  "adSpeechLanguageDetectorFailedWithError:");
  if ((result & 1) != 0) {
    return (uint64_t)[*(id *)(*(void *)(a1 + 32) + 40) adSpeechLanguageDetectorFailedWithError:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1001DE384(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 320LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v3 = *(void **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1001DE500;
    void v11[3] = &unk_1004F56B8;
    id v10 = v2;
    char v12 = v10;
    [v3 enumerateKeysAndObjectsUsingBlock:v11];
    id v4 = objc_alloc_init(&OBJC_CLASS___SASMultilingualDictationLanguageSelected);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
    [v4 setRefId:v5];

    [v4 setLanguageDetected:*(void *)(a1 + 48)];
    [v4 setConfidenceScoresByLanguage:v10];
    [*(id *)(a1 + 32) _sendCommandToServer:v4];
    if ((objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 32) + 40LL),  "adSpeechRecordingDidDetectLanguage:confidenceScores:isConfident:") & 1) != 0) {
      [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidDetectLanguage:*(void *)(a1 + 48) confidenceScores:*(void *)(a1 + 40) isConfident:*(unsigned __int8 *)(a1 + 56)];
    }
    *(_BYTE *)(*(void *)(a1 + 32) + 641LL) = 1;
    [*(id *)(a1 + 32) _stopLanguageDetectionWaitTimerIfNeeded];
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 656LL);
    if (v6)
    {
      id v7 = objc_retainBlock(v6);
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = *(void **)(v8 + 656);
      *(void *)(v8 + 656) = 0LL;

      v7[2](v7);
    }
  }

void sub_1001DE500(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  [a3 floatValue];
  id v7 = *(void **)(a1 + 32);
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (int)llroundf(v6 * 1000.0)));
  [v7 setObject:v8 forKey:v5];
}

void sub_1001DE584(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 aceId]);

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 320) currentRequestId]);
  unsigned int v4 = [v7 isEqualToString:v3];

  if (v4)
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___SASSpeechEndpointIdentified);
    float v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", (uint64_t)*(double *)(a1 + 48)));
    [v5 setEndpointTimestamp:v6];

    [v5 setRefId:v7];
    [*(id *)(a1 + 40) _sendCommandToServer:v5];
  }
}

uint64_t sub_1001DE658(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 32) + 40LL),  "adSpeechRecordingDidDetectStartPointWithContext:");
  if ((result & 1) != 0) {
    return (uint64_t)_[*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidDetectStartPointWithContext:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1001DE6A0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:se"
                         "ssionUUID:statistics:]_block_invoke";
    *(_WORD *)&v14[12] = 2114;
    *(void *)&v14[14] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %{public}@", v14, 0x16u);
  }

  id v4 = *(id *)(a1 + 32);
  if (*(_BYTE *)(a1 + 64))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 32)));
    float v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationOptions]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 interactionIdentifier]);
    id v8 = (void *)v7;
    if (v7) {
      id v9 = (const __CFString *)v7;
    }
    else {
      id v9 = &stru_1004FECA0;
    }
    [v5 setObject:v9 forKeyedSubscript:@"dictationUIInteractionIdentifier"];

    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v5));
    id v4 = (id)v10;
  }

  objc_msgSend(*(id *)(a1 + 48), "_metrics_markLocalSpeechCompletedWithStatistics:", v4);
  uint64_t v11 = *(void *)(a1 + 56);
  if (!v11)
  {
    if (!*(_BYTE *)(a1 + 64)) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  if (*(_BYTE *)(*(void *)(a1 + 48) + 362LL))
  {
    char v12 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:"
                           "sessionUUID:statistics:]_block_invoke";
      *(_WORD *)&v14[12] = 2114;
      *(void *)&v14[14] = v11;
      id v13 = "%s Local speech recognition failed, and so did the session: %{public}@";
LABEL_21:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v13, v14, 0x16u);
      goto LABEL_16;
    }

    goto LABEL_16;
  }

  char v12 = (os_log_s *)AFSiriLogContextSpeech;
  if (*(_BYTE *)(a1 + 64))
  {
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)&void v14[4] = "-[ADCommandCenter speechManager:recognitionDidCompleteWithError:secureOfflineOnlyRecognition:"
                           "sessionUUID:statistics:]_block_invoke";
      *(_WORD *)&v14[12] = 2114;
      *(void *)&v14[14] = v11;
      id v13 = "%s Local speech recognition failed: %{public}@";
      goto LABEL_21;
    }

void sub_1001DE954(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v14 = 136315138;
    id v15 = "-[ADCommandCenter speechManager:didProduceLocalLoggablePackage:sessionUUID:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v14, 0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v4 = [v3 siriDataSharingOptInStatus];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictationOptions]);
  if ([v5 forceOfflineRecognition])
  {
    float v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictationOptions]);
    unsigned int v7 = [v6 secureOfflineOnly];
  }

  else
  {
    unsigned int v7 = 0;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v9 = [v8 isDictationHIPAACompliant];

  if (!v9)
  {
    if (v7)
    {
      uint64_t v11 = *(void **)(a1 + 40);
      uint64_t v10 = *(void *)(a1 + 48);
      char v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictationOptions]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 interactionIdentifier]);
      objc_msgSend(v11, "_metrics_markLocalSpeechPackage:interactionId:optedIn:", v10, v13, v4 == (id)1);
    }
  }

void sub_1001DEAD4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recognition]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 phrases]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 utterances]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rawRecognition]);
  float v6 = (void *)objc_claimAutoreleasedReturnValue([v5 phrases]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 utterances]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationOptions]);
  if (![v8 forceOfflineRecognition])
  {
    unsigned int v11 = 0;
    goto LABEL_5;
  }

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationOptions]);
  unsigned int v10 = [v9 secureOfflineOnly];

  if (v10)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationOptions]);
    unsigned int v11 = [v8 detectUtterances];
LABEL_5:

    goto LABEL_7;
  }

  unsigned int v11 = 0;
LABEL_7:
  char v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationOptions]);
  unsigned int v13 = [v12 secureOfflineOnly];

  if (v13)
  {
    int v14 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      uint64_t v52 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Phrases=<REDACTED>", buf, 0xCu);
    }
  }

  else
  {
    [v3 enumerateObjectsUsingBlock:&stru_1004F55D8];
    [v4 enumerateObjectsUsingBlock:&stru_1004F5618];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationOptions]);
  id v16 = [v15 transcriptionMode];

  if (v16 != (id)3)
  {
    int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictationLanguages]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);

    __int16 v20 = *(_BYTE **)(a1 + 48);
    if (v20[363])
    {
      if (v20[360])
      {
        id v21 = (os_log_s *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315138;
          uint64_t v52 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s Ignoring and canceling final local recognition because server results have arrived",  buf,  0xCu);
        }

        [*(id *)(a1 + 40) cancelLocalRecognitionIfActive];
        goto LABEL_21;
      }

      if (!v20[362])
      {
        if (v20[640])
        {
          uint64_t v26 = _AFPreferencesMultilingualDictationTimeoutInMilliSeconds();
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
          id v28 = v27;
          if (v27)
          {
            [v27 doubleValue];
            double v30 = v29;
          }

          else
          {
            double v30 = 2000.0;
          }
        }

        else
        {
          double v30 = 2000.0;
        }

        uint64_t v31 = (os_log_s *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioBufferList buf = 136315394;
          uint64_t v52 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
          __int16 v53 = 2048;
          double v54 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s Deferring final local recognition results for %f seconds while waiting for the server",  buf,  0x16u);
        }

        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 320) currentRequestId]);
        id v36 = [v32 copy];

        dispatch_time_t v33 = dispatch_time(0LL, (uint64_t)(v30 * 1000000.0));
        uint64_t v34 = *(void *)(a1 + 48);
        __int128 v37 = *(dispatch_queue_s **)(v34 + 8);
        dispatch_time_t v38 = v33;
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001DF014;
        block[3] = &unk_1004F5668;
        id v40 = v36;
        uint64_t v41 = v34;
        id v42 = v19;
        id v43 = v2;
        char v50 = v11;
        id v44 = *(id *)(a1 + 40);
        id v45 = v3;
        id v46 = v6;
        id v47 = v4;
        id v48 = v7;
        id v49 = *(id *)(a1 + 56);
        id v35 = v36;
        dispatch_after(v38, v37, block);

        goto LABEL_21;
      }
    }

    [v20 _handleLocalSpeechRecognitionForOfflineSupport:v2 logText:v11 ^ 1];
    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 56);
    id v24 = *(void **)(v22 + 40);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v22 + 288) aceId]);
    [v24 adSpeechRecordingDidRecognizePhrases:v3 rawPhrases:v6 utterances:v4 rawUtterances:v7 nluResult:0 sessionUUID:v23 refId:v25];

LABEL_21:
    goto LABEL_22;
  }

  __int16 v17 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    uint64_t v52 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Not handling phraseRecognition because this is a phoneme transcription request",  buf,  0xCu);
  }

void sub_1001DF014(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 320) currentRequestId]);
  LOBYTE(v2) = [v2 isEqualToString:v3];

  if ((v2 & 1) == 0)
  {
    id v4 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v15 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the previous request has already finished";
    goto LABEL_7;
  }

  if (*(_BYTE *)(*(void *)(a1 + 40) + 360LL))
  {
    id v4 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      return;
    }
    *(_DWORD *)AudioBufferList buf = 136315138;
    id v15 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    id v5 = "%s Ignoring final local recognition because the server won the race";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, buf, 0xCu);
    return;
  }

  +[AFAggregator logLocalRecognitionWonForLanguage:]( &OBJC_CLASS___AFAggregator,  "logLocalRecognitionWonForLanguage:",  *(void *)(a1 + 48));
  [*(id *)(a1 + 40) _handleLocalSpeechRecognitionForOfflineSupport:*(void *)(a1 + 56) logText:*(_BYTE *)(a1 + 112) == 0];
  if ([*(id *)(a1 + 64) isLocallyRecognizingInDictationMode])
  {
    float v6 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      id v15 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Giving up on final server recognition because local won the race",  buf,  0xCu);
    }

    unsigned int v7 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1001DF278;
    v8[3] = &unk_1004F5640;
    void v8[4] = v7;
    id v9 = *(id *)(a1 + 72);
    id v10 = *(id *)(a1 + 80);
    id v11 = *(id *)(a1 + 88);
    id v12 = *(id *)(a1 + 96);
    id v13 = *(id *)(a1 + 104);
    [v7 _handleSpeechRecognizedWithDelegateBlock:v8];
  }

void sub_1001DF278(void *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(v1 + 40);
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 288) aceId]);
  [v3 adSpeechRecordingDidRecognizePhrases:v2 rawPhrases:v4 utterances:v5 rawUtterances:v6 nluResult:0 sessionUUID:v7 refId:v8];
}

void sub_1001DF2EC(id a1, AFSpeechUtterance *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Utterance[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001DF3C0(id a1, AFSpeechPhrase *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ADCommandCenter speechManager:didRecognizePackage:sessionUUID:]_block_invoke";
    __int16 v9 = 2048;
    unint64_t v10 = a3;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Phrase[%lu]=%@", (uint8_t *)&v7, 0x20u);
  }
}

void sub_1001DF494(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___SASServerBoundConfusionNetwork);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
  [v2 setAceId:v4];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) aceId]);
  [v2 setRefId:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceRecognition]);
  [v2 setRawRecognition:v6];

  int v7 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    __int16 v9 = "-[ADCommandCenter speechManager:didRecognizeRawEagerRecognitionCandidate:sessionUUID:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Sending raw recognition to server %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 32) _sendCommandToServer:v2];
}

void sub_1001DF5F4(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] lastObject]);
  [v2 endTime];
  double v4 = v3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] dictationOptions]);
  unsigned int v6 = [v5 secureOfflineOnly];

  if (v6)
  {
    unsigned int v7 = [a1[6] canLogWithSpeechManager:a1[5]];
    int v8 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    if (v7) {
      __int16 v9 = (const __CFString *)a1[4];
    }
    else {
      __int16 v9 = @"<REDACTED>";
    }
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v17 = "-[ADCommandCenter speechManager:didRecognizeTokens:sessionUUID:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v9;
  }

  else
  {
    int v8 = (os_log_s *)AFSiriLogContextSpeech;
    if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    __int16 v10 = (const __CFString *)a1[4];
    *(_DWORD *)AudioBufferList buf = 136315394;
    __int16 v17 = "-[ADCommandCenter speechManager:didRecognizeTokens:sessionUUID:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v10;
  }

  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
LABEL_10:
  objc_msgSend(a1[6], "_metrics_markLocalPartialSpeechRecognition");
  id v11 = a1[6];
  if (v11[363])
  {
    id v12 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioBufferList buf = 136315138;
      __int16 v17 = "-[ADCommandCenter speechManager:didRecognizeTokens:sessionUUID:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Ignoring partial local recognitions because server results have arrived",  buf,  0xCu);
    }
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_1001DF83C;
    v13[3] = &unk_1004FD4C0;
    void v13[4] = v11;
    id v14 = a1[4];
    id v15 = a1[7];
    [v11 _handlePartialSpeechRecognitionForElapsedTime:v13 WithDelegateBlock:v4];
  }
}

id sub_1001DF83C(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecordingDidRecognizeTokens:a1[5] nluResult:0 sessionUUID:a1[6]];
}

void sub_1001DF854(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:@"ModelInfo"]);
  if ((objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 40) + 40LL),  "adSpeechDidBeginLocalRecognitionWithModelInfo:sessionUUID:") & 1) != 0) {
    [*(id *)(*(void *)(a1 + 40) + 40) adSpeechDidBeginLocalRecognitionWithModelInfo:v2 sessionUUID:*(void *)(a1 + 48)];
  }
  objc_msgSend(*(id *)(a1 + 40), "_metrics_markLocalSpeechStartedWithContext:", *(void *)(a1 + 32));
}

void sub_1001DF8C4(void *a1)
{
  if ((objc_opt_respondsToSelector(*(void *)(a1[4] + 48LL), "adAudioFileFinishedWriting:error:context:") & 1) != 0)
  {
    [*(id *)(a1[4] + 48) adAudioFileFinishedWriting:a1[5] error:a1[6] context:a1[7]];
    uint64_t v2 = a1[4];
    double v3 = *(void **)(v2 + 48);
    *(void *)(v2 + 4_Block_object_dispose(&STACK[0x200], 8) = 0LL;
  }

id sub_1001DF920(void *a1)
{
  return [*(id *)(a1[4] + 40) adSpeechRecordingDidFail:a1[5] context:a1[6]];
}

void sub_1001DF934(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  double v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 320LL);
    int v14 = 136315650;
    id v15 = "-[ADCommandCenter speechManager:didFailWithError:context:]_block_invoke_2";
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    __int16 v18 = 2112;
    id v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %@ %@", (uint8_t *)&v14, 0x20u);
  }

  uint64_t v5 = *(id **)(a1 + 40);
  if (v2 || !v5[40])
  {
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5[40] currentRequestId]);
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 aceId]);
    unsigned int v8 = [v6 isEqualToString:v7];

    if (v8)
    {
      [*(id *)(a1 + 40) _sendCancelSpeechForCommand:v2];
      __int16 v9 = *(id **)(a1 + 40);
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v9[40] currentRequestId]);
      id v11 = NSStringFromSelector(*(SEL *)(a1 + 56));
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      [v9 _removeOutstandingRequestId:v10 forReason:v12];
    }

    if (v2)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _sessionManager]);
      [v13 endRetryableRequestForCommand:v2];
    }

    [*(id *)(a1 + 40) _completeRequestForCurrentDelegate:0 error:*(void *)(a1 + 48)];
    [*(id *)(a1 + 40) _setCurrentRequest:0];
    [*(id *)(a1 + 40) _requestDidEnd];
    [*(id *)(a1 + 32) setContext:0];
    uint64_t v5 = *(id **)(a1 + 40);
  }

  [v5 _clearSpeechDelegateState];
  [*(id *)(a1 + 40) _speechCaptureCompleted];
}

id sub_1001DFB10(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidCancelWithContext:*(void *)(a1 + 40)];
}

void sub_1001DFB1C(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  if (v5)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 320) currentRequestId]);
    double v3 = (void *)objc_claimAutoreleasedReturnValue([v5 aceId]);
    unsigned int v4 = [v2 isEqualToString:v3];

    if (v4)
    {
      [*(id *)(a1 + 40) _requestDidEnd];
      [*(id *)(a1 + 40) _sendCancelSpeechForCommand:v5];
    }

    [*(id *)(a1 + 32) setContext:0];
  }

  [*(id *)(a1 + 40) _clearSpeechDelegateState];
  [*(id *)(a1 + 40) _speechCaptureCompleted];
}

id sub_1001DFBD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v2 systemUptime];
  *(void *)(*(void *)(a1 + 32) + 512LL) = v3;

  return [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingDidEndWithContext:*(void *)(a1 + 40)];
}

void sub_1001DFC18(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 aceId]);

  if (v3) {
    [*(id *)(a1 + 32) setContext:0];
  }
  [*(id *)(a1 + 40) _speechCaptureCompleted];
  if (*(void *)(a1 + 48) == 4LL)
  {
    [*(id *)(a1 + 40) _requestDidEnd];
    [*(id *)(a1 + 40) _completeRequestForCurrentDelegate:1 error:0];
  }
}

void sub_1001DFCA0(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 366LL))
  {
    uint64_t v2 = AFIsInternalInstall(a1);
    if ((_DWORD)v2)
    {
      if (AFIsHorseman(v2, v3))
      {
        unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 getDebugVoiceIdScores]);

        if (v5) {
          id v6 =  objc_msgSend( *(id *)(a1 + 32),  "_handleConfidenceScores:classification:classifiedUser:unknownUserScore:duration:version:thresholdingT ype:assetVersion:",  &__NSDictionary0__struct,  3,  kCSSpeakerIdentificationVTInvocationScoreThresholdingType,  &stru_1004FECA0);
        }
      }
    }
  }

void sub_1001DFD54(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 aceId]);

  if (v3)
  {
    unsigned int v4 = objc_alloc_init(&OBJC_CLASS___SASFinishSpeech);
    -[SASFinishSpeech setPacketCount:](v4, "setPacketCount:", *(void *)(a1 + 56));
    -[SASFinishSpeech setRefId:](v4, "setRefId:", v3);
    -[SASFinishSpeech ad_setAFEndpointMode:](v4, "ad_setAFEndpointMode:", *(void *)(a1 + 64));
    -[SASFinishSpeech ad_setCSEndpointerMetrics:](v4, "ad_setCSEndpointerMetrics:", *(void *)(a1 + 40));
    id v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v6 = v5;
      id v7 = -[SASFinishSpeech packetCount](v4, "packetCount");
      -[SASFinishSpeech totalAudioRecorded](v4, "totalAudioRecorded");
      int v14 = 136315906;
      id v15 = "-[ADCommandCenter speechManager:didReceiveLastAudioBufferWithEndpointMode:totalPacketCount:endpointerMetrics"
            ":context:]_block_invoke_2";
      __int16 v16 = 2112;
      uint64_t v17 = v4;
      __int16 v18 = 2048;
      id v19 = v7;
      __int16 v20 = 2048;
      uint64_t v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Sending %@ (packetCount = %zd, totalAudioRecorded = %f)...",  (uint8_t *)&v14,  0x2Au);
    }

    [*(id *)(a1 + 48) _sendCommandToServer:v4];
    uint64_t v9 = *(void *)(a1 + 48);
    __int16 v10 = *(void **)(v9 + 304);
    *(void *)(v9 + 304) = v4;
    id v11 = v4;

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkActivityTracing sharedNetworkActivityTracing]( &OBJC_CLASS___SiriCoreNetworkActivityTracing,  "sharedNetworkActivityTracing"));
    [v12 networkActivityStop:3 withReason:2 andError:0];

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[SNNetworkActivityTracing sharedInstance](&OBJC_CLASS___SNNetworkActivityTracing, "sharedInstance"));
    [v13 networkActivityStop:3 withReason:2 andError:0 completion:0];
  }
}

id sub_1001DFF30(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_acousticId_musicWasDetected");
}

id sub_1001DFF38(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_acousticId_handleFingerprint:duration:",  *(void *)(a1 + 40),  *(double *)(a1 + 48));
}

void sub_1001DFF48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 362))
  {
    if ([*(id *)(a1 + 40) isLocallyRecognizing])
    {
      uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioBufferList buf = 136315138;
        id v15 = "-[ADCommandCenter speechManager:capturedPackets:atTimestamp:totalCount:context:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Not sending audio packet to session because it has already failed and local recognition has taken over",  buf,  0xCu);
      }

      return;
    }

    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v4 = *(void *)(a1 + 56);
  if ([*(id *)(v2 + 280) usePrelisteningMode])
  {
    double v5 = *(double *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 32);
    double v7 = *(double *)(v6 + 400);
    if (v5 < v7)
    {
      uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioBufferList buf = 136315650;
        id v15 = "-[ADCommandCenter speechManager:capturedPackets:atTimestamp:totalCount:context:]_block_invoke";
        __int16 v16 = 2048;
        double v17 = v5;
        __int16 v18 = 2048;
        double v19 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Ignoring prelistening speech data from %lf. Threshold is %lf",  buf,  0x20u);
        uint64_t v6 = *(void *)(a1 + 32);
      }

      *(void *)(v6 + 40_Block_object_dispose(&STACK[0x200], 8) = *(void *)(a1 + 56);
      return;
    }

    uint64_t v4 = *(void *)(a1 + 56) - *(void *)(v6 + 408);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  id v13 = (id)objc_claimAutoreleasedReturnValue([v9 aceId]);

  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
  unsigned int v11 = [v13 isEqualToString:v10];

  if (v11)
  {
    id v12 = objc_alloc_init(&OBJC_CLASS___SiriCoreSpeechPacket);
    [v12 setPackets:*(void *)(a1 + 48)];
    [v12 setPacketNumber:v4];
    [v12 setRefId:v13];
    [*(id *)(a1 + 32) _sendSessionObject:v12 opportunistically:0];
  }
}

void sub_1001E018C(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] context]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 aceId]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[5] + 40) currentRequestId]);
  unsigned int v5 = [v3 isEqualToString:v4];

  if (v5)
  {
    if (([a1[6] isEndAlertInfo] & 1) == 0)
    {
      uint64_t v6 = objc_alloc_init(&OBJC_CLASS___SASUpdateAudioInfo);
      -[SASUpdateAudioInfo ad_updateWithRecordingInfo:speechRequestOptions:clientConfiguration:]( v6,  "ad_updateWithRecordingInfo:speechRequestOptions:clientConfiguration:",  a1[6],  *((void *)a1[5] + 35),  *((void *)a1[5] + 62));
      -[SASUpdateAudioInfo setRefId:](v6, "setRefId:", v3);
      [a1[5] _sendCommandToServer:v6];
    }

    double v7 = [a1[6] audioSessionSetActiveEndHostTime];
    uint64_t v8 = [a1[6] firstBufferHostTime];
    int64_t v9 = v7 - v8;
    if (v7 > v8)
    {
      __int16 v10 = v8;
      if (v8)
      {
        unsigned int v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v18 = 136315650;
          double v19 = "-[ADCommandCenter speechManager:didUpdateRecordingWithInfo:context:]_block_invoke";
          __int16 v20 = 2048;
          uint64_t v21 = v10;
          __int16 v22 = 2048;
          uint64_t v23 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s firstBufferHostTime = %llu, audioSessionSetActiveEndHostTime = %llu",  (uint8_t *)&v18,  0x20u);
        }

        id v12 = objc_alloc_init(&OBJC_CLASS___SASSetAudioDuckingDelay);
        id v13 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  AFMachAbsoluteTimeGetMilliseconds(v9));
        int v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        [v12 setPreTriggerToDuckingEndDuration:v14];

        uint64_t v15 = mach_absolute_time();
        __int16 v16 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  AFMachAbsoluteTimeGetMilliseconds(v15 - (void)v7));
        double v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        [v12 setDuckingEventSyncDelay:v17];

        [v12 setRefId:v3];
        [a1[5] _sendCommandToServer:v12];
      }
    }
  }
}

void sub_1001E03B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) route]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADBluetoothManager sharedInstance](&OBJC_CLASS___ADBluetoothManager, "sharedInstance"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceWithRecordingInfo:*(void *)(a1 + 32)]);

  unsigned int v5 = [*(id *)(a1 + 32) isDucking];
  unsigned int v6 = [*(id *)(a1 + 32) triggeredTwoShotBorealis];
  id v7 = [*(id *)(a1 + 32) estimatedSpeechEndHostTime];
  uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v11 = 136316418;
    id v12 = "-[ADCommandCenter speechManager:didUpdateRecordingWithInfo:context:]_block_invoke";
    __int16 v13 = 2112;
    int v14 = v2;
    __int16 v15 = 2112;
    __int16 v16 = v4;
    __int16 v17 = 1024;
    unsigned int v18 = v5;
    __int16 v19 = 1024;
    unsigned int v20 = v6;
    __int16 v21 = 2048;
    id v22 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s recordRoute = %@, bluetoothDevice = %@, isDucking = %d, isTwoShot = %d, speechEndHostTime = %llu",  (uint8_t *)&v11,  0x36u);
  }

  int64_t v9 = *(void **)(*(void *)(a1 + 40) + 40LL);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) route]);
  objc_msgSend( v9,  "adSpeechRecordingDidChangeAVRecordRoute:bluetoothDevice:isDucking:isTwoShot:speechEndHostTime:context:",  v10,  v4,  objc_msgSend(*(id *)(a1 + 32), "isDucking"),  objc_msgSend(*(id *)(a1 + 32), "triggeredTwoShotBorealis"),  objc_msgSend(*(id *)(a1 + 32), "estimatedSpeechEndHostTime"),  *(void *)(a1 + 48));
}

void sub_1001E0560(id *a1)
{
  uint64_t v2 = (void *)*((void *)a1[4] + 5);
  id v10 = (id)objc_claimAutoreleasedReturnValue([a1[5] route]);
  id v3 = [a1[5] audioSessionID];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADBluetoothManager sharedInstance](&OBJC_CLASS___ADBluetoothManager, "sharedInstance"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceWithRecordingInfo:a1[5]]);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _sessionManager]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] sessionUUID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 sessionRequestIdForRefId:v7]);
  int64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[7] dictationOptions]);
  [v2 adSpeechRecordingDidBeginOnAVRecordRoute:v10 audioSessionID:v3 bluetoothDevice:v5 sessionRequestUUID:v8 dictationOptions:v9 context:a1[6]];
}

void sub_1001E0668(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 512LL) = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) route]);
  if ((AFRecordRouteIsHearst() & 1) != 0)
  {
  }

  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 524LL);

    if (v3)
    {
      uint64_t v4 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        unsigned int v5 = *(void **)(a1 + 40);
        unsigned int v6 = v4;
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 route]);
        int v16 = 136315394;
        __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
        __int16 v18 = 2112;
        __int16 v19 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s 🎧 Recording route %@ != BluetoothDoAP, ignoring headphones' authenticated state",  (uint8_t *)&v16,  0x16u);
      }

      [*(id *)(a1 + 32) _setHeadphonesAuthenticated:0];
    }
  }

  if ([*(id *)(a1 + 40) isFingerprintOnly])
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315138;
      __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Fingerprint only request not sending start speech",  (uint8_t *)&v16,  0xCu);
    }
  }

  else if ([*(id *)(a1 + 40) isSecureOfflineOnly])
  {
    int64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v16 = 136315138;
      __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Secure offline request not sending start speech",  (uint8_t *)&v16,  0xCu);
    }

    id v10 = *(void **)(a1 + 32);
    int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sessionUUID]);
    [v10 _setCurrentRequestWithRequestId:v11];
  }

  else
  {
    id v12 = *(void **)(a1 + 32);
    if (v12[36])
    {
      __int16 v13 = objc_alloc_init(&OBJC_CLASS___SASUpdateAudioInfo);
      -[SASUpdateAudioInfo ad_updateWithRecordingInfo:speechRequestOptions:clientConfiguration:]( v13,  "ad_updateWithRecordingInfo:speechRequestOptions:clientConfiguration:",  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 280LL),  *(void *)(*(void *)(a1 + 32) + 496LL));
      int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) aceId]);
      -[SASUpdateAudioInfo setRefId:](v13, "setRefId:", v14);

      if (-[SASUpdateAudioInfo ad_isDifferentFromStartSpeech:]( v13,  "ad_isDifferentFromStartSpeech:",  *(void *)(*(void *)(a1 + 32) + 288LL)))
      {
        [*(id *)(a1 + 32) _sendCommandToServer:v13];
      }

      else
      {
        __int16 v15 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v16 = 136315138;
          __int16 v17 = "-[ADCommandCenter speechManager:didStartRecordingWithInfo:context:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Recording Info didn't change, not sending update audio",  (uint8_t *)&v16,  0xCu);
        }
      }
    }

    else
    {
      [v12 _sendStartSpeechCommandWithSpeechManager:*(void *)(a1 + 56) info:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
    }
  }

id sub_1001E0960(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 408LL) = 0LL;
  [*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecordingWillBeginWithInputAudioPowerXPCWrapper:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
  double v2 = 0.0;
  if (!*(_BYTE *)(a1 + 64)) {
    double v2 = *(double *)(a1 + 56);
  }
  return _[*(id *)(a1 + 32) _awdRecordRecordingWillStart:v2];
}

void sub_1001E09A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = &stru_1004FECA0;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    if (v6) {
      uint64_t v8 = v6;
    }
    int v11 = 136316162;
    id v12 = "-[ADCommandCenter _trySendingShowRequestHandlingStatusForAsrOnDevice:startSpeechRequestId:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    unsigned int v20 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #AsrOnServer Sent SAUIShowRequestHandlingStatus with asrStatus = %@ for startSpeechRequestId = %@ response = %@ error = %@",  (uint8_t *)&v11,  0x34u);
  }
}

void sub_1001E0AB0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = sub_1000D7FD8(v4);
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHServerFallbackInitiated);
    [v7 setFallbackReason:1];
    if ((AFIsSpeechAssetAvailableFromUodStatus(v3) & 1) == 0) {
      [v7 addMissingAsset:1];
    }
    if ((AFIsMorphunAssetAvailableFromUodStatus(v3) & 1) == 0) {
      [v7 addMissingAsset:3];
    }
    if ((AFIsNLAssetAvailableFromUodStatus(v3) & 1) == 0) {
      [v7 addMissingAsset:2];
    }
    id v8 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHServerFallbackContext);
    [v8 setStartedOrChanged:v7];
    id v9 = v8;
    id v10 = v6;
    id v11 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEvent);
    [v11 setServerFallbackContext:v9];

    id v12 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEventMetadata);
    [v12 setRequestId:v10];

    [v11 setEventMetadata:v12];
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
    [v13 emitMessage:v11];
  }

  else
  {
    uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "_EmitServerFallbackMessageForMissingAssets";
      __int16 v17 = 2112;
      id v18 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s The requestId=%@ is malformed for request",  (uint8_t *)&v15,  0x16u);
    }
  }
}

void sub_1001E0CB0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v10 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 audioSource]);
  [v10 setAudioSource:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) audioDestination]);
  [v10 setAudioDestination:v5];

  [v10 setResponseMode:*(void *)(a1 + 40)];
  objc_msgSend(v10, "setIsEyesFree:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isEyesFree"));
  [v10 setIsVoiceTriggerEnabled:sub_1001EBF24(*(void **)(*(void *)(a1 + 48) + 680))];
  objc_msgSend( v10,  "setIsTextToSpeechEnabled:",  objc_msgSend(*(id *)(*(void *)(a1 + 48) + 16), "adTextToSpeechIsMuted") ^ 1);
  [v10 setIsTriggerlessFollowup:*(unsigned __int8 *)(a1 + 56)];
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _bargeInModes]);
  [v10 setBargeInModes:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _approximatePreviousTTSInterval:0]);
  [v10 setApproximatePreviousTTSInterval:v7];

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _restrictedCommands]);
  [v10 setDeviceRestrictions:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) voiceTriggerEventInfo]);
  [v10 setVoiceTriggerEventInfo:v9];

  objc_msgSend(v10, "setVoiceAudioSessionId:", objc_msgSend(*(id *)(a1 + 48), "_sharedVoiceAudioSessionID"));
  objc_msgSend( v10,  "setIsSystemApertureEnabled:",  objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isSystemApertureEnabled"));
  objc_msgSend( v10,  "setIsLiveActivitiesSupported:",  objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isLiveActivitiesSupported"));
  objc_msgSend(v10, "setIsInAmbient:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isInAmbient"));
  [v10 setIsDeviceShowingLockScreen:*(unsigned __int8 *)(*(void *)(a1 + 48) + 505)];
  [v10 setIsDeviceLocked:*(unsigned __int8 *)(*(void *)(a1 + 48) + 504)];
}

void sub_1001E0E84(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) codec]);

  if (v2) {
    [*(id *)(a1 + 40) _sendStartSpeechCommandWithSpeechManager:*(void *)(a1 + 48) info:*(void *)(a1 + 32) context:*(void *)(a1 + 56)];
  }
}

uint64_t sub_1001E0ECC(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 32) + 40LL),  "adSpeechRecognitionWillBeginRecognitionUpdateForTask:");
  if ((result & 1) != 0) {
    return (uint64_t)_[*(id *)(*(void *)(a1 + 32) + 40) adSpeechRecognitionWillBeginRecognitionUpdateForTask:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1001E0F14(uint64_t a1)
{
  double v2 = *(void **)(a1 + 56);
  if (v2)
  {
    id v3 = objc_retainBlock(v2);
  }

  else
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1001E10EC;
    v19[3] = &unk_1004F5170;
    id v4 = *(void **)(a1 + 40);
    void v19[4] = *(void *)(a1 + 32);
    id v20 = v4;
    id v3 = objc_retainBlock(v19);
  }

  if (!*(void *)(a1 + 48))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___SAQuickStop);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0) {
      id v7 = [*(id *)(a1 + 40) description];
    }
  }

  if (AFSupportsHALDeviceRouting())
  {
    id v8 = *(id *)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 sharedUserIdentifier]);

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceRouter]);
    id v12 = *(void **)(a1 + 48);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_1001E1100;
    v14[3] = &unk_1004F5598;
    void v14[4] = *(void *)(a1 + 32);
    id v15 = v8;
    id v16 = v12;
    id v17 = *(id *)(a1 + 40);
    id v18 = v3;
    id v13 = v8;
    [v11 getPreferredDeviceToHandleCommand:v13 logNearbyDeviceMetrics:1 executionContext:v16 sharedUserID:v10 completion:v14];
  }

  else
  {
    [*(id *)(a1 + 32) _handleCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48) completion:v3];
  }
}

id sub_1001E10EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleClientReply:a2 error:a3 forSessionCommand:*(void *)(a1 + 40)];
}

void sub_1001E1100(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 8);
  block[2] = sub_1001E11F8;
  block[3] = &unk_1004F73F0;
  block[1] = 3221225472LL;
  id v14 = v5;
  uint64_t v15 = v7;
  id v16 = v8;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v19 = v6;
  id v20 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_1001E11F8(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerInfo]);
  id v3 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) commandRelayProxyIdentifier]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1001E13DC;
    v19[3] = &unk_1004F5548;
    void v19[4] = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 56);
    id v20 = *(id *)(a1 + 64);
    id v21 = *(id *)(a1 + 56);
    id v26 = *(id *)(a1 + 80);
    id v22 = *(id *)(a1 + 48);
    id v23 = v2;
    id v24 = *(id *)(a1 + 32);
    id v25 = *(id *)(a1 + 72);
    objc_msgSend( v3,  "_remoteExecute_remoteDeviceExecuteCommand:onPeer:allowsRelay:throughProxyDevice:executionContext:completion:",  v4,  v23,  1,  v5,  v6,  v19);

    uint64_t v7 = v20;
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 64);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_1001E1514;
    v13[3] = &unk_1004F5570;
    id v18 = *(id *)(a1 + 80);
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(void **)(a1 + 48);
    id v14 = v10;
    uint64_t v15 = v11;
    id v16 = v12;
    id v17 = *(id *)(a1 + 72);
    [v3 _handleCommand:v8 executionContext:v9 completion:v13];

    uint64_t v7 = v18;
  }
}

void sub_1001E13DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  void v12[2] = sub_1001E15CC;
  void v12[3] = &unk_1004F5520;
  v12[1] = 3221225472LL;
  void v12[4] = v7;
  id v13 = v5;
  id v14 = v6;
  id v15 = v8;
  id v16 = *(id *)(a1 + 48);
  id v21 = *(id *)(a1 + 88);
  id v17 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 64);
  id v19 = *(id *)(a1 + 72);
  id v20 = *(id *)(a1 + 80);
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_1001E1514(void *a1, void *a2, void *a3)
{
  uint64_t v5 = a1[8];
  id v6 = *(void (**)(uint64_t, id, id))(v5 + 16);
  id v7 = a3;
  id v8 = a2;
  v6(v5, v8, v7);
  id v10 = (id)a1[4];
  if (v10)
  {
    id v10 = [v10 proximity];
    uint64_t v11 = (uint64_t)v10;
  }

  else
  {
    uint64_t v11 = 4000LL;
  }

  id v12 = (void *)a1[5];
  uint64_t v13 = a1[6];
  uint64_t v14 = AFProductType(v10, v9);
  id v15 = (id)objc_claimAutoreleasedReturnValue(v14);
  [v12 _logCrossDeviceCommandEndedMetricsForCommand:v13 targetProductType:v15 targetDeviceID:0 targetDeviceContextIdentifier:0 targetPr oximity:v11 coreAnalyticsEvent:a1[7] response:v8 error:v7];
}

void sub_1001E15CC(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 72);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) productType]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) idsDeviceUniqueIdentifier]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) contextIdentifier]);
  objc_msgSend( v2,  "_logCrossDeviceCommandEndedMetricsForCommand:targetProductType:targetDeviceID:targetDeviceContextIdentifier:targetPr oximity:coreAnalyticsEvent:response:error:",  v3,  v6,  v4,  v5,  objc_msgSend(*(id *)(a1 + 88), "proximity"),  *(void *)(a1 + 96),  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_1001E1684(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = objc_alloc_init(&OBJC_CLASS___SAPerformDataDetectionMatch);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v9 range]));
  [v3 setLocation:v4];

  [v9 range];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5));
  [v3 setLength:v6];

  if ([v9 resultType] == (id)32)
  {
    [v3 setDataDetectionType:SAPerformDataDetectionMatchDataDetectionTypeLinkValue];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 URL]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 absoluteString]);
    [v3 setValue:v8];
  }

  [*(id *)(a1 + 32) addObject:v3];
}

void sub_1001E1794(uint64_t a1)
{
  double v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 656LL);
    uint64_t v4 = v2;
    id v5 = objc_retainBlock(v3);
    int v10 = 136315394;
    uint64_t v11 = "-[ADCommandCenter _startLanguageDetectionWaitTimer]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s _languageDetectionWaitTimer fired. Executing _multilingualSpeechRecognizedCommandHandlerBlock %@",  (uint8_t *)&v10,  0x16u);
  }

  id v6 = *(void **)(*(void *)(a1 + 32) + 656LL);
  if (v6)
  {
    id v7 = objc_retainBlock(v6);
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 656);
    *(void *)(v8 + 656) = 0LL;

    v7[2](v7);
  }

void sub_1001E18A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___SASExtractSpeechDataCompleted);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 absoluteString]);
  -[SASExtractSpeechDataCompleted setSpeechDataUrl:](v4, "setSpeechDataUrl:", v5);

  if (*(void *)(a1 + 32) && [*(id *)(a1 + 40) isFromRemote])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](&OBJC_CLASS___NSData, "dataWithContentsOfURL:", v3));
    -[SASExtractSpeechDataCompleted setSpeechData:](v4, "setSpeechData:", v6);
  }

  id v7 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[SASExtractSpeechDataCompleted speechDataUrl](v4, "speechDataUrl"));
    int v10 = (void *)objc_claimAutoreleasedReturnValue(-[SASExtractSpeechDataCompleted speechData](v4, "speechData"));
    int v11 = 136315906;
    __int16 v12 = "-[ADCommandCenter _sasExtractSpeechData:executionContext:completion:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    __int16 v15 = 2112;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s extractSpeechDataCompleted = %@ (speechDataUrl = %@), (speechData = %@)",  (uint8_t *)&v11,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001E1A40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v8 = v3;
    if (v3)
    {
      id v5 = objc_alloc(&OBJC_CLASS___SACommandFailed);
      id v6 = (SACommandSucceeded *)objc_claimAutoreleasedReturnValue([v8 localizedDescription]);
      id v7 = -[SACommandFailed initWithReason:](v5, "initWithReason:", v6);
      (*(void (**)(uint64_t, SACommandFailed *, void))(v4 + 16))(v4, v7, 0LL);
    }

    else
    {
      id v6 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      (*(void (**)(uint64_t, SACommandSucceeded *, void))(v4 + 16))(v4, v6, 0LL);
    }

    id v3 = v8;
  }
}

void sub_1001E1AF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[ADCommandCenter _saPostUpdatePersonalRequestSettingsNotification:executionContext:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Posting update-PR notification for accessory category = %@",  (uint8_t *)&v8,  0x16u);
  }

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v3]);
  [v5 _postUpdatePersonalRequestSettingsNotification:v6 forLocalizationKey:v7 executionContext:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1001E1BF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  id v5 = &stru_1004FECA0;
  if (v3) {
    id v5 = v3;
  }
  uint64_t v6 = v5;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioBufferList buf = 136315394;
    id v18 = "-[ADCommandCenter _postPersonalDomainActivityNotificationWithBody:command:executionContext:completion:]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Posting activity notification for accessory category = %@",  buf,  0x16u);
  }

  if ([*(id *)(a1 + 32) length])
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
    id v9 = +[NSBundle bundleForClass:]( &OBJC_CLASS___NSBundle,  "bundleForClass:",  objc_opt_class(&OBJC_CLASS___AFRequestInfo));
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( [v8 localizedStringForKey:@"ASSISTANT_SERVICES_HOMEPOD_ACTIVITY_NOTIFICATION_TITLE" table:0 bundle:v10 languageCode:0]);

    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithValidatedFormat:validFormatSpecifiers:error:]( &OBJC_CLASS___NSString,  "stringWithValidatedFormat:validFormatSpecifiers:error:",  v11,  @"%@%@",  0LL,  *(void *)(a1 + 32),  v6));
    [*(id *)(a1 + 40) setTitle:v12];
  }

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[UNNotificationRequest requestWithIdentifier:content:trigger:]( &OBJC_CLASS___UNNotificationRequest,  "requestWithIdentifier:content:trigger:",  *(void *)(a1 + 48),  *(void *)(a1 + 40),  0LL));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1001E1E08;
  v15[3] = &unk_1004FCC00;
  uint64_t v14 = *(void **)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  [v14 postNotificationRequest:v13 completion:v15];
}

void sub_1001E1E08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v8 = v3;
    if (v3)
    {
      id v5 = objc_alloc(&OBJC_CLASS___SACommandFailed);
      uint64_t v6 = (SACommandSucceeded *)objc_claimAutoreleasedReturnValue([v8 localizedDescription]);
      id v7 = -[SACommandFailed initWithReason:](v5, "initWithReason:", v6);
      (*(void (**)(uint64_t, SACommandFailed *, void))(v4 + 16))(v4, v7, 0LL);
    }

    else
    {
      uint64_t v6 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      (*(void (**)(uint64_t, SACommandSucceeded *, void))(v4 + 16))(v4, v6, 0LL);
    }

    id v3 = v8;
  }
}

id sub_1001E1EC0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _completeNotificationSearch:*(void *)(a1 + 40) bulletins:a2 completion:*(void *)(a1 + 48)];
}

void sub_1001E1ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v3 count]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sourceAppId]);
  uint64_t v19 = a1;
  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) notificationType]);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v32 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      __int16 v10 = 0LL;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)v10);
        if (v5
          && (__int16 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v20 + 1)
                                                                                 + 8LL * (void)v10), "sectionID", v18)),
              unsigned __int8 v13 = [v12 isEqualToString:v5],
              v12,
              (v13 & 1) == 0))
        {
          uint64_t v14 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            __int16 v15 = v14;
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 bulletinID]);
            __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v11 sectionID]);
            *(_DWORD *)AudioBufferList buf = 136315906;
            id v25 = "-[ADCommandCenter _saNotificationSearch:completion:]_block_invoke_2";
            __int16 v26 = 2112;
            uint64_t v27 = v16;
            __int16 v28 = 2112;
            double v29 = v17;
            __int16 v30 = 2112;
            uint64_t v31 = v5;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s Filtered notification %@ due to app match %@ vs %@",  buf,  0x2Au);
          }
        }

        else
        {
          -[NSMutableArray addObject:](v4, "addObject:", v11, v18);
        }

        __int16 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v20 objects:v32 count:16];
    }

    while (v8);
  }

  [*(id *)(v19 + 40) _completeNotificationSearch:*(void *)(v19 + 32) bulletins:v4 completion:*(void *)(v19 + 48)];
}

void sub_1001E2134(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v3)
    {
      id v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        __int16 v10 = "-[ADCommandCenter _saTTSSetSpeechSynthesisVolume:completion:]_block_invoke";
        __int16 v11 = 2112;
        __int16 v12 = v4;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Error occurred while setting the volume. Error=%@",  (uint8_t *)&v9,  0x16u);
        uint64_t v5 = *(void *)(a1 + 40);
      }

      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v4);
    }

    else
    {
      id v7 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
      -[SACommandSucceeded setRefId:](v7, "setRefId:", v8);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

id sub_1001E2270(uint64_t a1, uint64_t a2, double a3)
{
  LODWORD(a3) = *(_DWORD *)(a1 + 40);
  return +[ADRemoraHomeKitSettingsManager setSiriTTSVolumeForAccessory:to:completion:]( &OBJC_CLASS___ADRemoraHomeKitSettingsManager,  "setSiriTTSVolumeForAccessory:to:completion:",  a2,  *(void *)(a1 + 32),  a3);
}

void sub_1001E228C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001E23E0;
  v7[3] = &unk_1004F5458;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v9 = v4;
  uint64_t v10 = v5;
  int v11 = *(_DWORD *)(a1 + 48);
  id v8 = v3;
  id v6 = v3;
  +[ADRemoraHomeKitSettingsManager getSiriTTSVolumeForAccessory:completion:]( &OBJC_CLASS___ADRemoraHomeKitSettingsManager,  "getSiriTTSVolumeForAccessory:completion:",  v6,  v7);
}

void sub_1001E233C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v4 + 16))(v4, 0LL, v3);
    }

    else
    {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
      -[SACommandSucceeded setRefId:](v5, "setRefId:", v6);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    id v3 = v7;
  }
}

void sub_1001E23E0(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  if (v5)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      id v9 = "-[ADCommandCenter _saTTSSetSpeechSynthesisVolume:completion:]_block_invoke_3";
      __int16 v10 = 2112;
      id v11 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error occurred while getting the volume. Error=%@",  (uint8_t *)&v8,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
    if (*(void *)(a1 + 48) != 2LL) {
      *(float *)&double v6 = -*(float *)&v6;
    }
    *(float *)&double v6 = *(float *)&v6 + a3;
    +[ADRemoraHomeKitSettingsManager setSiriTTSVolumeForAccessory:to:completion:]( &OBJC_CLASS___ADRemoraHomeKitSettingsManager,  "setSiriTTSVolumeForAccessory:to:completion:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v6);
  }
}

void sub_1001E24F8(uint64_t a1, void *a2, float a3)
{
  id v5 = a2;
  double v6 = v5;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    if (v5)
    {
      int v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "-[ADCommandCenter _saTTSGetSpeechSynthesisVolume:completion:]_block_invoke";
        __int16 v15 = 2112;
        id v16 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Error occurred while getting the volume. Error=%@",  (uint8_t *)&v13,  0x16u);
        uint64_t v7 = *(void *)(a1 + 40);
      }

      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v6);
    }

    else
    {
      id v9 = objc_alloc_init(&OBJC_CLASS___SATTSGetSpeechSynthesisVolumeResponse);
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
      [v9 setRefId:v10];

      *(float *)&double v11 = a3;
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v11));
      [v9 setVolumeLevel:v12];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

id sub_1001E2668(uint64_t a1, uint64_t a2)
{
  return +[ADRemoraHomeKitSettingsManager getSiriTTSVolumeForAccessory:completion:]( &OBJC_CLASS___ADRemoraHomeKitSettingsManager,  "getSiriTTSVolumeForAccessory:completion:",  a2,  *(void *)(a1 + 32));
}

void sub_1001E2680(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3) {
    id v3 = -[SACommandFailed initWithReason:]( objc_alloc(&OBJC_CLASS___SACommandFailed),  "initWithReason:",  @"Failed getting diagnostic report");
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t, SACommandFailed *, void))(v4 + 16))(v4, v3, 0LL);
  }
}

void sub_1001E26F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADCommandCenter _saGetAssistantData:executionContext:completion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v6, 0x16u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id, void))(v5 + 16))(v5, v3, 0LL);
  }
}

void sub_1001E27D4(uint64_t a1, void *a2)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v24;
    while (2)
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v23 + 1) + 8 * (void)v7), "content", (void)v23));
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 locationSnapshot]);
        if (v9)
        {
          __int16 v12 = v9;
          int v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ace_setRequestOrigin"));
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 locationMetadata]);
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 deliveryDate]);
          [v15 timeIntervalSinceNow];
          double v17 = fabs(v16);

          id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", (int)v17));
          [v13 setAge:v18];

          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) desiredAccuracy]);
          [v13 setDesiredAccuracy:v19];

          __int128 v20 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            __int128 v21 = v20;
            __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v13 status]);
            *(_DWORD *)AudioBufferList buf = 136315650;
            __int16 v28 = "-[ADCommandCenter _saGetRequestOrigin:executionContext:completion:]_block_invoke";
            __int16 v29 = 2112;
            __int16 v30 = v22;
            __int16 v31 = 2112;
            uint64_t v32 = v12;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s SetRequestOrigin status: %@, for %@",  buf,  0x20u);
          }

          (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

          double v11 = (SASetRequestOrigin *)v3;
          goto LABEL_15;
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v23 objects:v33 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  __int16 v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioBufferList buf = 136315138;
    __int16 v28 = "-[ADCommandCenter _saGetRequestOrigin:executionContext:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to get location from context cache",  buf,  0xCu);
  }

  double v11 = objc_alloc_init(&OBJC_CLASS___SASetRequestOrigin);
  -[SASetRequestOrigin setStatus:](v11, "setStatus:", SASetRequestOriginStatusUnknownValue);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_15:
}

void sub_1001E2ABC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3) {
    id v3 = -[SACommandFailed initWithReason:]( objc_alloc(&OBJC_CLASS___SACommandFailed),  "initWithReason:",  @"Failed getting request origin");
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    (*(void (**)(uint64_t, SACommandFailed *, void))(v4 + 16))(v4, v3, 0LL);
  }
}

uint64_t sub_1001E2B30(uint64_t a1)
{
  double v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[ADCommandCenter _endSpeechRequestForCommand:withError:suppressAlert:secureOfflineOnlyDictation:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Clearing speech delegate in recording completion",  (uint8_t *)&v5,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _clearSpeechDelegateState];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1001E2BFC(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___SASEndpointStatus);
  BOOL v7 = a2 > 0.0 && *(double *)(a1 + 40) > a2;
  __int16 v10 = v6;
  -[SASEndpointStatus setConfirmed:](v6, "setConfirmed:", v7);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a3 * 1000.0));
  -[SASEndpointStatus setEndpointConfirmationTimestamp:](v10, "setEndpointConfirmationTimestamp:", v8);

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, SASEndpointStatus *, void))(v9 + 16))(v9, v10, 0LL);
  }
}

id sub_1001E2CAC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (!v1) {
    return 0LL;
  }
  int v5 = @"bestTextInterpretation";
  double v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "af_bestTextInterpretation"));
  uint64_t v6 = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));

  return v3;
}

uint64_t sub_1001E2D4C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 currentRequestCommand]);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___SASStartSpeechDictation);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
    || (uint64_t v7 = objc_opt_class(&OBJC_CLASS___SASStartSpeechDictation), (objc_opt_isKindOfClass(v4, v7) & 1) != 0))
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v3 currentRequestId]);

    if (!v8) {
      goto LABEL_5;
    }
    if (!AFIsHorseman(v10, v11))
    {
      uint64_t v8 = 1LL;
      goto LABEL_5;
    }

    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 encodedClassName]);
    if (([v5 isEqual:@"ExecuteOnRemoteRequest"] & 1) != 0
      || ([v5 isEqual:@"StartHandoffRequest"] & 1) != 0)
    {
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v8 = (uint64_t)[v5 isEqual:@"InitiateHandoffOnCompanion"];
    }
  }

LABEL_5:
  return v8;
}

void sub_1001E2E58(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = sub_1000D7FD8(v7);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (v11)
  {
    id v12 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEvent);
    id v13 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEventMetadata);
    [v13 setRequestId:v11];
    [v12 setEventMetadata:v13];
    id v14 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHAceCommandContext);
    id v15 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHAceCommandStarted);
    [v15 setAceCommandType:a4];
    [v15 setAceCommandName:v8];
    [v14 setStartedOrChanged:v15];
    id v16 = sub_1000D7FD8(v9);
    double v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    [v14 setAceId:v17];

    [v12 setAceCommandContext:v14];
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
    [v18 emitMessage:v12];
  }

  else
  {
    uint64_t v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      __int128 v21 = "_EmitAceCommandStartedEvent";
      __int16 v22 = 2112;
      id v23 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s The requestId=%@ is malformed, unable to log SELF command",  (uint8_t *)&v20,  0x16u);
    }
  }
}

_BYTE *sub_1001E3048(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (!result[361])
  {
    uint64_t result = [result _awdRecordTimeToFirstWord];
    *(_BYTE *)(*(void *)(a1 + 32) + 361LL) = 1;
  }

  return result;
}

void sub_1001E308C(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 240LL) == 2LL)
  {
    id v4 = -[AFSpeechRequestOptions initWithActivationEvent:]( objc_alloc(&OBJC_CLASS___AFSpeechRequestOptions),  "initWithActivationEvent:",  5LL);
    double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 280) activationDeviceIdentifier]);
    -[AFSpeechRequestOptions setActivationDeviceIdentifier:](v4, "setActivationDeviceIdentifier:", v2);

    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
    [v3 stopSpeechCaptureWithOptions:v4];
  }

uint64_t sub_1001E312C(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 32) + 40LL),  "adPronunciationRecognized:usingSpeechModel:sessionUUID:");
  if ((result & 1) != 0) {
    return (uint64_t)_[*(id *)(*(void *)(a1 + 32) + 40) adPronunciationRecognized:*(void *)(a1 + 40) usingSpeechModel:0 sessionUUID:0];
  }
  return result;
}

void sub_1001E317C(uint64_t a1)
{
  double v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[ADCommandCenter _sasSpeechMultilingualSpeechRecognized:executionContext:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Dispatching SASMultilingualSpeechRecognized command",  (uint8_t *)&buf,  0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained[36], "ad_languageModel"));
    id v6 = *(id *)(a1 + 32);
    id v7 = v5;
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 speechRecognizedByLanguage]);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    __int16 v30 = sub_1001E3478;
    __int16 v31 = &unk_1004F5ED0;
    id v32 = v7;
    uint64_t v11 = v8;
    dispatch_time_t v33 = v11;
    id v12 = v9;
    uint64_t v34 = v12;
    id v13 = v7;
    [v10 enumerateKeysAndObjectsUsingBlock:&buf];

    if (-[NSMutableArray count](v12, "count")) {
      -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v12, @"secondaryLanguages");
    }
    uint64_t v16 = AFAnalyticsContextCreateWithCommand(v6, v14, v15);
    double v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v28[0] = v17;
    v28[1] = v11;
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v28, 2LL));
    uint64_t v19 = AFAnalyticsContextsMerge();
    int v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v21 logEventWithType:1102 context:v20];

    id v22 = objc_loadWeakRetained((id *)(a1 + 48));
    [v22 _setSpeechRecognizedContext:v20];

    [v4 _cancelLocalRecognitionIfRequired];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    void v25[2] = sub_1001E3518;
    v25[3] = &unk_1004FD968;
    __int128 v26 = v4;
    id v27 = *(id *)(a1 + 32);
    [v26 _handleSpeechRecognizedWithDelegateBlock:v25];
    uint64_t v23 = *(void *)(a1 + 40);
    if (v23)
    {
      __int128 v24 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      (*(void (**)(uint64_t, SACommandSucceeded *, void))(v23 + 16))(v23, v24, 0LL);
    }
  }
}

void sub_1001E3478(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  LODWORD(v5) = [v7 isEqualToString:v5];
  id v8 = sub_1001E3564(v6, v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v8);

  if ((_DWORD)v5)
  {
    id v9 = v10;
    if (v10)
    {
      [*(id *)(a1 + 40) addEntriesFromDictionary:v10];
LABEL_6:
      id v9 = v10;
    }
  }

  else
  {
    id v9 = v10;
    if (v10)
    {
      [*(id *)(a1 + 48) addObject:v10];
      goto LABEL_6;
    }
  }
}

uint64_t sub_1001E3518(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector( *(void *)(*(void *)(a1 + 32) + 40LL),  "adSpeechMultilingualSpeechRecognized:sessionUUID:");
  if ((result & 1) != 0) {
    return (uint64_t)_[*(id *)(*(void *)(a1 + 32) + 40) adSpeechMultilingualSpeechRecognized:*(void *)(a1 + 40) sessionUUID:0];
  }
  return result;
}

id sub_1001E3564(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ad_leadingSilence"));
  if (v6) {
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v6, @"leadingSilence");
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ad_trailingSilence"));
  if (v7) {
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v7, @"trailingSilence");
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ad_endTime"));
  if (v8) {
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v8, @"endTime");
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 resultId]);
  if (v9) {
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v9, @"resultId");
  }
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 eager]));
  -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v10, @"eager");

  if ((AFIsInternalInstall(v11) & 1) != 0
    || (id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences")),
        unsigned int v13 = [v12 shouldLogForQA],
        v12,
        v13))
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "af_bestTextInterpretation"));
    if (v16) {
      -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v16, @"bestTextInterpretation");
    }
  }

  if (v4) {
    -[NSMutableDictionary setObject:forKey:](v5, "setObject:forKey:", v4, @"languageCode");
  }
  uint64_t v17 = AFAnalyticsContextCreateWithCommand(v3, v14, v15);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v23[0] = v18;
  v23[1] = v5;
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL));
  uint64_t v20 = AFAnalyticsContextsMerge();
  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

  return v21;
}

void sub_1001E37A4(uint64_t a1)
{
  double v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    uint64_t v11 = "-[ADCommandCenter _sasSpeechRecognized:executionContext:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Logging audio topology", (uint8_t *)&v10, 0xCu);
  }

  id v3 = *(void **)(a1 + 32);
  id v4 = objc_alloc(&OBJC_CLASS___NSUUID);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
  id v6 = -[NSUUID initWithUUIDString:](v4, "initWithUUIDString:", v5);
  [v3 _logAudioTopologyForRequestId:v6];

  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    uint64_t v11 = "-[ADCommandCenter _sasSpeechRecognized:executionContext:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Logging nearby devices reported",  (uint8_t *)&v10,  0xCu);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
  [v8 _logPersonalDevicesDiscoveredNearbyForRequestId:v9];
}

void sub_1001E3930(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_1001E39DC;
  v5[3] = &unk_1004F52C8;
  id v6 = *(id *)(a1 + 32);
  id v3 = a2;
  id v4 = +[AFSpeechInfo newWithBuilder:](&OBJC_CLASS___AFSpeechInfo, "newWithBuilder:", v5);
  [v3 setSpeechInfo:v4];
}

id sub_1001E39C4(void *a1)
{
  return _[*(id *)(a1[4] + 40) adSpeechRecognized:a1[5] usingSpeechModel:a1[6] sessionUUID:0];
}

id sub_1001E39DC(uint64_t a1, void *a2)
{
  return _[a2 setSpeechRecognizedCommand:*(void *)(a1 + 32)];
}

void sub_1001E39E8(uint64_t a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v23 = "-[ADCommandCenter _sasResultCandidate:completion:]_block_invoke";
    __int16 v24 = 1024;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s accepted = %d, mitigated = %d", buf, 0x18u);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(dispatch_queue_s **)(v9 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E3B64;
  block[3] = &unk_1004F5278;
  char v20 = a2;
  void block[4] = v9;
  id v15 = v10;
  uint64_t v19 = *(void *)(a1 + 64);
  id v18 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 48);
  char v21 = a3;
  id v16 = v12;
  id v17 = v7;
  id v13 = v7;
  dispatch_async(v11, block);
}

id sub_1001E3B64(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v2 logEventWithType:309 context:0];

  if (*(_BYTE *)(a1 + 80) && [*(id *)(a1 + 32) _refIdIsSpeechStart:*(void *)(a1 + 40)])
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 364LL) = 1;
    *(void *)(*(void *)(a1 + 32) + 376LL) = *(void *)(a1 + 72);
    id v3 = *(_BYTE **)(a1 + 32);
    if (v3[365])
    {
      return _[v3 _acceptResultCandidate:*(void *)(a1 + 48) isMitigated:*(unsigned __int8 *)(a1 + 81) featuresToLog:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
    }

    else
    {
      id v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315138;
        id v7 = "-[ADCommandCenter _sasResultCandidate:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s This is a race between a network layer RollbackRequest retry and Speech Endpointing. Ignore the RC.",  (uint8_t *)&v6,  0xCu);
      }

      id result = *(id *)(a1 + 64);
      if (result) {
        return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
      }
    }
  }

  else
  {
    id result = *(id *)(a1 + 64);
    if (result) {
      return (id)(*((uint64_t (**)(id, void, void))result + 2))(result, 0LL, 0LL);
    }
  }

  return result;
}

void sub_1001E3CF0(uint64_t a1)
{
  int v2 = AFSupportsSCDAFramework();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 680);
  uint64_t v5 = *(void *)(v3 + 8);
  if (v2)
  {
    uint64_t v6 = SCDAPreferencesChangedNotifyStatePublisher(v4, v5);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    id v8 = (void *)qword_100578050;
    qword_100578050 = v7;
  }

  else
  {
    uint64_t v9 = AFMyriadPreferencesChangedNotifyStatePublisher(v4, v5);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
    id v8 = (void *)qword_100578048;
    qword_100578048 = v10;
  }
}

void sub_1001E3D50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 setTimestamp:v2];
  [v3 setSource:13];
  [v3 setEvent:18];
}

uint64_t sub_1001E3DA0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

uint64_t sub_1001E3DB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_1001E3DD0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v8)
    {
      (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v8, v5);
    }

    else
    {
      uint64_t v7 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      (*(void (**)(uint64_t, SACommandSucceeded *, id))(v6 + 16))(v6, v7, v5);
    }
  }
}

void sub_1001E3E64(uint64_t a1)
{
  if ([*(id *)(a1 + 32) invokeWithValue:0 andValue:0])
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter _saWaitForCommands:completion:]_block_invoke_2";
      __int16 v6 = 2112;
      uint64_t v7 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "%s %@ timed out.", (uint8_t *)&v4, 0x16u);
    }
  }

void sub_1001E3F34(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    id v5 = "-[ADCommandCenter _saWaitForCommands:completion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Stop waiting for command %@.",  (uint8_t *)&v4,  0x16u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1001E3FF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) invokeWithSignal:0];
}

void sub_1001E4000(uint64_t a1)
{
  if ([*(id *)(a1 + 40) invokeWithValue:0 andValue:0])
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 48);
      int v4 = 136315394;
      id v5 = "-[ADCommandCenter _saWaitForCommands:completion:]_block_invoke";
      __int16 v6 = 2112;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Done %@", (uint8_t *)&v4, 0x16u);
    }
  }

void sub_1001E40D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (Class *)&OBJC_CLASS___SACommandSucceeded_ptr;
  id v8 = v3;
  if (v3) {
    int v4 = (Class *)&OBJC_CLASS___SACommandFailed_ptr;
  }
  id v5 = objc_alloc_init(*v4);
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
  [v5 setRefId:v6];

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v5, v8);
  }
}

void sub_1001E416C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }
  }

  else
  {
    [*(id *)(a1 + 32) startRemoteRequest:*(void *)(a1 + 40) onTargetDevice:v7 completion:*(void *)(a1 + 48)];
  }
}

id sub_1001E41DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v6 = 136315394;
    id v7 = "-[ADCommandCenter adCallStateChangedCallIncoming:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got call state changed; call is incoming: %d",
      (uint8_t *)&v6,
      0x12u);
  }

  id result = [*(id *)(a1 + 32) _hasIncomingCall];
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 != (_DWORD)result) {
    return [*(id *)(a1 + 32) _setHasIncomingCall:v5 != 0];
  }
  return result;
}

id sub_1001E42B8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v6 = 136315394;
    id v7 = "-[ADCommandCenter adCallStateChangedCallInProcess:]_block_invoke";
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Got call state changed; call is in process: %d",
      (uint8_t *)&v6,
      0x12u);
  }

  id result = [*(id *)(a1 + 32) _isInCall];
  int v5 = *(unsigned __int8 *)(a1 + 40);
  if (v5 != (_DWORD)result)
  {
    id result = [*(id *)(a1 + 32) _setIsInCall:v5 != 0];
    if (!*(_BYTE *)(a1 + 40)) {
      return objc_msgSend(*(id *)(a1 + 32), "_sync_continueIfConditionsMet");
    }
  }

  return result;
}

id sub_1001E43A4(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 576) isEqual:*(void *)(a1 + 40)];
  if ((_DWORD)result) {
    return [*(id *)(a1 + 32) _cancelCallKeepAlive];
  }
  return result;
}

id sub_1001E43E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startObservingCallState];
}

id sub_1001E43E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelCallKeepAlive];
}

void sub_1001E43F0(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 assistantIdentifier]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentRequest]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentRequestId]);
  [v6 postMUXTestResultSelectedWithAssistantId:v3 requestId:v5 rcId:*(void *)(a1 + 40) voiceIdConfidenceScores:*(void *)(a1 + 48)];
}

void sub_1001E4494(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 assistantIdentifier]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentRequest]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentRequestId]);
  [v6 postMUXTestResultCandidateWithAssistantId:v3 requestId:v5 rcId:*(void *)(a1 + 40) sharedUserIdToSpeechRecognitionDict:*(void *)(a1 + 48) voiceIdConfidenceScores:*(void *)(a1 + 56)];
}

void sub_1001E453C(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 assistantIdentifier]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentRequest]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentRequestId]);
  [v6 postTestResultSelectedWithAssistantId:v3 requestId:v5 rcId:*(void *)(a1 + 40)];
}

void sub_1001E45E0(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _requestDispatcherService]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 assistantIdentifier]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentRequest]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 currentRequestId]);
  [v6 postTestResultCandidateWithAssistantId:v3 requestId:v5 rcId:*(void *)(a1 + 40) recognitionSausage:*(void *)(a1 + 48)];
}

void sub_1001E4684(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 setAudioSource:0];
  [v6 setAudioDestination:0];
  [v6 setResponseMode:*(void *)(a1 + 32)];
  objc_msgSend(v6, "setIsEyesFree:", objc_msgSend(*(id *)(a1 + 40), "eyesFree"));
  [v6 setIsVoiceTriggerEnabled:sub_1001EBF24(*(void **)(*(void *)(a1 + 48) + 680))];
  objc_msgSend( v6,  "setIsTextToSpeechEnabled:",  objc_msgSend(*(id *)(*(void *)(a1 + 48) + 16), "adTextToSpeechIsMuted") ^ 1);
  [v6 setIsTriggerlessFollowup:*(unsigned __int8 *)(a1 + 56)];
  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _bargeInModes]);
  [v6 setBargeInModes:v3];

  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _approximatePreviousTTSInterval:0]);
  [v6 setApproximatePreviousTTSInterval:v4];

  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _restrictedCommands]);
  [v6 setDeviceRestrictions:v5];

  [v6 setVoiceTriggerEventInfo:0];
  objc_msgSend(v6, "setVoiceAudioSessionId:", objc_msgSend(*(id *)(a1 + 48), "_sharedVoiceAudioSessionID"));
  objc_msgSend( v6,  "setIsSystemApertureEnabled:",  objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isSystemApertureEnabled"));
  objc_msgSend( v6,  "setIsLiveActivitiesSupported:",  objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isLiveActivitiesSupported"));
  objc_msgSend(v6, "setIsInAmbient:", objc_msgSend(*(id *)(*(void *)(a1 + 48) + 280), "isInAmbient"));
  [v6 setIsDeviceShowingLockScreen:*(unsigned __int8 *)(*(void *)(a1 + 48) + 505)];
  [v6 setIsDeviceLocked:*(unsigned __int8 *)(*(void *)(a1 + 48) + 504)];
}

void sub_1001E4810(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] encodedClassName]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] groupIdentifier]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _serviceManager]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceForDomain:v3 command:v2]);
  id v6 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = a1[4];
    __int16 v8 = v6;
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v19 = "-[ADCommandCenter _sendServiceCommand:completion:]_block_invoke";
    __int16 v20 = 2112;
    id v21 = v7;
    __int16 v22 = 2112;
    uint64_t v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Dispatching out of band service command %@ to service %@",  buf,  0x20u);
  }

  if (v5)
  {
    id v10 = a1[4];
    id v11 = a1[5];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 refId]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 _rootExecutionContextForRequestID:v12]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1001E4A20;
    v16[3] = &unk_1004FC668;
    id v17 = a1[6];
    [v5 handleCommand:v10 forDomain:v3 executionContext:v13 reply:v16];

    uint64_t v14 = v17;
LABEL_7:

    goto LABEL_8;
  }

  id v15 = (void (**)(id, void, void *))a1[6];
  if (v15)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 100LL));
    v15[2](v15, 0LL, v14);
    goto LABEL_7;
  }

void sub_1001E4A20(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AceObject aceObjectWithGenericCommand:](&OBJC_CLASS___AceObject, "aceObjectWithGenericCommand:", a2));
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (v6) {
      id v8 = v6;
    }
    else {
      id v8 = v5;
    }
    int v10 = 136315394;
    id v11 = "-[ADCommandCenter _sendServiceCommand:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Reply for out of band command %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v6, v5);
  }
}

void sub_1001E4B28(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _shouldIgnoreCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48)];
  int v3 = sub_1001E2D4C(*(void **)(*(void *)(a1 + 32) + 320LL), *(void **)(a1 + 40));
  if (v2)
  {
    [*(id *)(a1 + 32) _handleIgnoredCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48) completion:*(void *)(a1 + 80)];
    return;
  }

  int v4 = v3;
  if (objc_msgSend(*(id *)(a1 + 40), "ad_shouldLogToMetrics"))
  {
    uint64_t v7 = AFAnalyticsContextCreateWithCommand(*(void *)(a1 + 40), v5, v6);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v9 logEventWithType:401 context:v8 contextNoCopy:1];

    if (v4)
    {
      int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 320) currentRequestId]);
      id v11 = *(void **)(a1 + 56);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceId]);
      sub_1001E2E58(v10, v11, v12, 1LL);
    }
  }

  else
  {
    id v8 = 0LL;
  }

  id v13 = *(void **)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_1001E4FF8;
  v31[3] = &unk_1004F51E0;
  id v15 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  void v31[4] = *(void *)(a1 + 32);
  id v32 = v15;
  id v17 = v8;
  id v33 = v17;
  char v35 = v4;
  id v34 = *(id *)(a1 + 80);
  [v13 handleCommand:v32 forDomain:v14 executionContext:v16 reply:v31];
  id v18 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v30 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter _handleServiceCommand:afterMyriadDecision:executionContext:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v30;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s Dispatched command: %@", buf, 0x16u);
  }

  id v19 = *(id *)(a1 + 40);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 groupIdentifier]);
  uint64_t v21 = objc_claimAutoreleasedReturnValue([v19 encodedClassName]);
  __int16 v22 = (void *)v21;
  if (!v20 || !v21)
  {
    __int16 v29 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      *(void *)&uint8_t buf[4] = "ADRecordCoreDuetEventForServiceCommandIfNeeded";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v20;
      __int16 v40 = 2112;
      uint64_t v41 = v22;
      _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "%s Duet domain and command must be non-nil: %@, %@",  buf,  0x20u);
    }

    goto LABEL_21;
  }

  if ((objc_opt_respondsToSelector(v19, "supportsADSADOCommand") & 1) != 0)
  {
    uint64_t v23 = objc_claimAutoreleasedReturnValue([v19 domainFromSADObject]);

    __int16 v20 = (void *)v23;
  }

  if (qword_1005780D0 == -1)
  {
    if (v20) {
      goto LABEL_15;
    }
  }

  else
  {
    dispatch_once(&qword_1005780D0, &stru_1004F6020);
    if (v20)
    {
LABEL_15:
      if ([(id)qword_1005780C8 containsObject:v20])
      {
        if (qword_1005780E0 != -1) {
          dispatch_once(&qword_1005780E0, &stru_1004F6040);
        }
        uint64_t v24 = qword_1005780D8;
        uint64_t v25 = AFSiriServiceStreamName;
        __int128 v37 = @"domain";
        dispatch_time_t v38 = v20;
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
        AFRecordCoreDuetEventWithStream(v24, v22, v25, v26);

        uint64_t v27 = qword_1005780D8;
        v36[0] = @"domain";
        v36[1] = @"command";
        *(void *)__int128 buf = v20;
        *(void *)&buf[8] = v22;
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  v36,  2LL));
        AFRecordCoreDuetContext(v27, @"siri.service", v28);
      }
    }
  }

void sub_1001E4F78(uint64_t a1, int a2)
{
  if (a2)
  {
    unsigned int v2 = *(void **)(a1 + 40);
    int v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E4FEC;
    block[3] = &unk_1004FC838;
    id v5 = v2;
    dispatch_async(v3, block);
  }

uint64_t sub_1001E4FEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001E4FF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E50E8;
  block[3] = &unk_1004F73C8;
  id v14 = v7;
  id v15 = v5;
  id v16 = v6;
  id v9 = *(id *)(a1 + 48);
  char v20 = *(_BYTE *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v18 = v10;
  id v19 = *(id *)(a1 + 56);
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_1001E50E8(uint64_t a1)
{
  unsigned int v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(void **)(a1 + 32);
    int v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 encodedClassName]);
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) encodedClassName]);
    uint64_t v7 = (void *)v6;
    id v8 = *(const __CFString **)(a1 + 48);
    char v50 = "-[ADCommandCenter _handleServiceCommand:afterMyriadDecision:executionContext:completion:]_block_invoke_3";
    *(_DWORD *)__int128 buf = 136315906;
    if (!v8) {
      id v8 = &stru_1004FECA0;
    }
    __int16 v51 = 2112;
    id v52 = v5;
    __int16 v53 = 2112;
    uint64_t v54 = v6;
    __int16 v55 = 2112;
    uint64_t v56 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Service reply for %@ %@ %@", buf, 0x2Au);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "ad_shouldLogToMetrics"))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      uint64_t v12 = AFAnalyticsContextCreateWithCommand(v11, v9, v10);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    }

    else
    {
      id v13 = &__NSDictionary0__struct;
    }

    uint64_t v14 = *(void *)(a1 + 48);
    if (v14)
    {
      uint64_t v15 = AFAnalyticsContextCreateWithError(v14);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    }

    else
    {
      id v16 = &__NSDictionary0__struct;
    }

    id v17 = [*(id *)(a1 + 40) resultCallbackCode];
    if (v17)
    {
      id v47 = @"resultCallbackCode";
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v17));
      id v48 = v18;
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL));
    }

    else
    {
      id v19 = &__NSDictionary0__struct;
    }

    v46[0] = *(void *)(a1 + 56);
    v46[1] = v13;
    v46[2] = v16;
    v46[3] = v19;
    char v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v46, 4LL));
    uint64_t v21 = AFAnalyticsContextsMerge();
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v23 logEventWithType:402 context:v22 contextNoCopy:1];

    if (*(_BYTE *)(a1 + 80))
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 64) + 320) currentRequestId]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
      id v26 = v24;
      id v27 = sub_1000D7FD8(v26);
      uint64_t v28 = objc_claimAutoreleasedReturnValue(v27);
      if (v28)
      {
        id v44 = v26;
        id v29 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEvent);
        id v30 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHClientEventMetadata);
        [v30 setRequestId:v28];
        [v29 setEventMetadata:v30];
        id v31 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHAceCommandContext);
        id v43 = (void *)v28;
        id v32 = objc_alloc_init(&OBJC_CLASS___ORCHSchemaORCHAceCommandEnded);
        [v32 setExists:1];
        [v32 setAceCommandType:1];
        [v31 setEnded:v32];
        id v33 = sub_1000D7FD8(v25);
        id v45 = v25;
        id v34 = v22;
        char v35 = v19;
        id v36 = v16;
        __int128 v37 = v13;
        dispatch_time_t v38 = (void *)objc_claimAutoreleasedReturnValue(v33);
        [v31 setAceId:v38];

        [v29 setAceCommandContext:v31];
        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
        [v39 emitMessage:v29];

        id v13 = v37;
        id v16 = v36;
        id v19 = v35;
        __int16 v22 = v34;
        uint64_t v25 = v45;

        __int16 v40 = v43;
        id v26 = v44;
      }

      else
      {
        __int16 v40 = 0LL;
        uint64_t v41 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          char v50 = "_EmitAceCommandEndedEvent";
          __int16 v51 = 2112;
          id v52 = v26;
          _os_log_error_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%s The requestId=%@ is malformed, unable to log SELF command",  buf,  0x16u);
        }
      }
    }
  }

  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  }
  return result;
}

void sub_1001E5510(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(void **)(a1 + 40);
  int v4 = *(dispatch_queue_s **)(v2 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E55C4;
  block[3] = &unk_1004F7698;
  void block[4] = v2;
  id v6 = v3;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  dispatch_async(v4, block);
}

id sub_1001E55C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performCallbacksForCommand:*(void *)(a1 + 40) reply:*(void *)(a1 + 48) executionContext:*(void *)(a1 + 56) error:*(void *)(a1 + 64)];
}

id sub_1001E55D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _handleCommandResponse:a2 error:a3 forCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_1001E55F0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  [*(id *)(*(void *)(a1 + 40) + 96) delegateDidHandleCommand:*(void *)(a1 + 56)];
  id v6 = *(void **)(a1 + 40);
  id v7 = objc_msgSend(*(id *)(a1 + 56), "ad_getNetworkActivityTracingLabel");
  if (v5)
  {
    uint64_t v8 = 4LL;
    id v9 = v5;
  }

  else
  {
    uint64_t v8 = 2LL;
    id v9 = 0LL;
  }

  [v6 _addNetworkActivityTracingForLabel:v7 start:0 withCompletionReason:v8 andError:v9];
}

uint64_t sub_1001E56B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001E56C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(dispatch_queue_s **)(v2 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001E5718;
  v4[3] = &unk_1004FD0A0;
  void v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_1001E5718(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___SAUpdateRestrictions);
    uint64_t v4 = SADeviceRestrictionSPOKEN_NOTIFICATIONS_OVER_DOAPValue;
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v4, 1LL));
    [v2 setRestrictionsToAdd:v3];

    [*(id *)(a1 + 32) _sendCommandToServer:v2];
  }

id sub_1001E57D4(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_sync_setSyncVerificationNeededAndFullReportNeeded:shouldPostNotification:",  *(unsigned __int8 *)(a1 + 40),  *(unsigned __int8 *)(a1 + 41));
}

id sub_1001E57E8(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    double v3 = *(double *)(a1 + 40) * 0.5;
    int v5 = 136315394;
    id v6 = "-[ADCommandCenter _shutdownAfterDelay:]_block_invoke";
    __int16 v7 = 2048;
    double v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Start sending metrics for %f seconds before shutting down...",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 32) sendMetricsToServerWithTimeout:0 requiresUnlimitedPower:1 requiresActiveSession:0 purgesOversizedStorage:0 ignoresMet ricsSenderDisabledSetting:0 scheduledActivity:&stru_1004F5190 completion:*(double *)(a1 + 40) * 0.5];
}

id sub_1001E58D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _shutdownAfterDelay:0.0];
}

void sub_1001E58E4(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    double v3 = "-[ADCommandCenter _shutdownAfterDelay:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Done sending metrics before shutting down.",  (uint8_t *)&v2,  0xCu);
  }

void sub_1001E5988(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
  char isKindOfClass = objc_opt_isKindOfClass(v5, v6);
  double v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (a3 || (isKindOfClass & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 136315650;
      uint64_t v12 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForRemoteRequest]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed to cancel cross device request %@ on %@",  (uint8_t *)&v11,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 136315394;
    uint64_t v12 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForRemoteRequest]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s response: %@", (uint8_t *)&v11, 0x16u);
  }
}

void sub_1001E5AE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _executionDevicesForLocalRequestWithId:v3]);
  id v5 = [v4 copy];

  [*(id *)(a1 + 32) _removeExecutionDevicesForLocalRequestWithId:v3];
  if ([v5 count])
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v29 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForLocalRequestWithId:]_block_invoke";
      __int16 v30 = 2112;
      id v31 = v3;
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s %@", buf, 0x16u);
    }

    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _executionContextMatchingExecutionInfo:0 fallbackRequestID:v3]);
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v18 = v5;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v24;
      do
      {
        int v11 = 0LL;
        do
        {
          if (*(void *)v24 != v10) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)v11);
          id v13 = objc_alloc_init(&OBJC_CLASS___SACancelCrossDeviceRequest);
          id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);
          [v13 setAceId:v15];

          [v13 setRequestId:v3];
          uint64_t v16 = *(void **)(a1 + 32);
          id v17 = -[ADPeerInfo initWithAFPeerInfo:](objc_alloc(&OBJC_CLASS___ADPeerInfo), "initWithAFPeerInfo:", v12);
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472LL;
          void v20[2] = sub_1001E5D88;
          v20[3] = &unk_1004F5170;
          id v21 = v3;
          uint64_t v22 = v12;
          objc_msgSend( v16,  "_remoteExecute_remoteDeviceExecuteCommand:onPeer:allowsRelay:throughProxyDevice:executionContext:completion:",  v13,  v17,  0,  0,  v7,  v20);

          int v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v9);
    }

    id v5 = v18;
  }
}

void sub_1001E5D88(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
  char isKindOfClass = objc_opt_isKindOfClass(v5, v6);
  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (a3 || (isKindOfClass & 1) != 0)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 136315650;
      uint64_t v12 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForLocalRequestWithId:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v9;
      __int16 v15 = 2112;
      uint64_t v16 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed to cancel cross device request %@ on %@",  (uint8_t *)&v11,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 136315394;
    uint64_t v12 = "-[ADCommandCenter _cancelCrossDeviceRequestOperationsForLocalRequestWithId:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s response: %@", (uint8_t *)&v11, 0x16u);
  }
}

id sub_1001E5EE0(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    id v5 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s missing refs resolved", (uint8_t *)&v4, 0xCu);
  }

  return [*(id *)(a1 + 32) _handleNextCallbacksForReply:*(void *)(a1 + 40) forCommand:*(void *)(a1 + 48) forRequestId:*(void *)(a1 + 56) withExecutionContext:*(void *)(a1 + 64)];
}

void sub_1001E5F98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) hasBeenFulfilled])
  {
    __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v8 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      char v35 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
      __int16 v36 = 2112;
      id v37 = v8;
      id v9 = "%s missing refs for %@ have already been fulfilled";
      uint64_t v10 = v7;
      uint32_t v11 = 22;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    }
  }

  else
  {
    uint64_t v12 = objc_opt_class(&OBJC_CLASS___SAAddResultObjects);
    char isKindOfClass = objc_opt_isKindOfClass(v5, v12);
    id v14 = (os_log_s *)AFSiriLogContextDaemon;
    if ((isKindOfClass & 1) != 0)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        char v35 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s GetResultObjects Response, trying to handle callbacks again.",  buf,  0xCu);
      }

      __int16 v15 = *(void **)(a1 + 48);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 320) currentRequestId]);
      LODWORD(v15) = [v15 isEqualToString:v16];

      if ((_DWORD)v15)
      {
        uint64_t v17 = *(void *)(a1 + 48);
        id v18 = v5;
        [v18 setRefId:v17];
        id v19 = *(void **)(a1 + 56);
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472LL;
        v29[2] = sub_1001E62EC;
        v29[3] = &unk_1004F5120;
        id v30 = *(id *)(a1 + 32);
        id v20 = *(id *)(a1 + 48);
        uint64_t v21 = *(void *)(a1 + 56);
        uint64_t v22 = *(void **)(a1 + 64);
        id v31 = v20;
        uint64_t v32 = v21;
        id v33 = v22;
        [v19 _saAddResultObjects:v18 completion:v29];
      }

      else
      {
        __int128 v25 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          char v35 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
          id v9 = "%s Ignore ARO for past requests";
          uint64_t v10 = v25;
          uint32_t v11 = 12;
          goto LABEL_15;
        }
      }
    }

    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 136315650;
        char v35 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
        __int16 v36 = 2112;
        id v37 = v6;
        __int16 v38 = 2112;
        uint64_t v39 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Failed getting result objects, error %@ request Id %@",  buf,  0x20u);
      }

      uint64_t v23 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
      if ((objc_opt_isKindOfClass(v5, v23) & 1) != 0)
      {
        __int128 v24 = (SACommandFailed *)v5;
      }

      else
      {
        __int128 v24 = objc_alloc_init(&OBJC_CLASS___SACommandFailed);
        uint64_t v26 = SiriCoreUUIDStringCreate(v24);
        id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        -[SACommandFailed setAceId:](v24, "setAceId:", v27);
      }

      -[SACommandFailed setRefId:](v24, "setRefId:", *(void *)(a1 + 48));
      [*(id *)(a1 + 56) _handleCommand:v24 executionContext:*(void *)(a1 + 64) completion:0];
    }
  }
}

void sub_1001E62EC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasBeenFulfilled] & 1) == 0)
  {
    int v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315138;
      __int16 v7 = "-[ADCommandCenter _handleNextCallbacksForReply:forCommand:forRequestId:withExecutionContext:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Missing references still not fulfilled, failing",  (uint8_t *)&v6,  0xCu);
    }

    id v3 = objc_alloc_init(&OBJC_CLASS___SACommandFailed);
    uint64_t v4 = SiriCoreUUIDStringCreate(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    -[SACommandFailed setAceId:](v3, "setAceId:", v5);

    -[SACommandFailed setRefId:](v3, "setRefId:", *(void *)(a1 + 40));
    [*(id *)(a1 + 48) _handleCommand:v3 executionContext:*(void *)(a1 + 56) completion:0];
  }

void sub_1001E63F8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "_ad_speechRequestOptionsWithClientConfiguration:",  *(void *)(*(void *)(a1 + 32) + 496)));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 280);
  *(void *)(v3 + 280) = v2;

  [*(id *)(a1 + 32) _reallyHandleNewStartLocalRequest:*(void *)(a1 + 48)];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) aceId]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) turnIdentifier]);
  __int16 v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 136315394;
      uint64_t v12 = "-[ADCommandCenter _startLocalRequest:withRequestInfo:forDelegate:suppressCancelationAlertIfCapturingSpeech:c"
            "ompletion:]_block_invoke";
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Logging RequestLink for StartLocalRequest with requestId=%@",  (uint8_t *)&v11,  0x16u);
    }

    sub_1001DBA28(v5, v6);
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v11 = 136315394;
    uint64_t v12 = "-[ADCommandCenter _startLocalRequest:withRequestInfo:forDelegate:suppressCancelationAlertIfCapturingSpeech:com"
          "pletion:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s TurnId nil for local request with requestId=%@",  (uint8_t *)&v11,  0x16u);
  }

  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    id v9 = *(void **)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    int v11 = 136315650;
    uint64_t v12 = "-[ADCommandCenter _startLocalRequest:withRequestInfo:forDelegate:suppressCancelationAlertIfCapturingSpeech:com"
          "pletion:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v9;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Leaving request group %@ (%@)...",  (uint8_t *)&v11,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

uint64_t sub_1001E65FC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 504LL),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 505LL),  *(unsigned __int8 *)(*(void *)(a1 + 32) + 520LL));
}

void sub_1001E6618(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = WeakRetained;
  int v6 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _clearSpeechDelegateState];
    objc_storeStrong(v6 + 5, *(id *)(a1 + 32));
    [v6 _setSpeechCapturingContext:0];
    uint64_t v4 = v6;
  }

  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    (*(void (**)(uint64_t, id *))(v5 + 16))(v5, v4);
    uint64_t v4 = v6;
  }
}

uint64_t sub_1001E669C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1001E66CC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001E6724;
  v3[3] = &unk_1004FDAA8;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return [v1 getContextSnapshotForCurrentRequestWithCompletion:v3];
}

void sub_1001E6724(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001E67A4;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1001E67A4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceRouter]);
  [v2 updateContext:*(void *)(a1 + 40)];
}

id sub_1001E67E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 696);
  *(void *)(v2 + 696) = 0LL;

  return [*(id *)(a1 + 32) _fetchHubAccountInBackground];
}

void sub_1001E6814(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = objc_alloc(&OBJC_CLASS___ADAccount);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 messageDictionary]);

    id v6 = -[ADAccount initWithMessageDictionary:](v4, "initWithMessageDictionary:", v5);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = *(dispatch_queue_s **)(v7 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001E68E4;
    block[3] = &unk_1004FBE80;
    void block[4] = v7;
    uint64_t v12 = v6;
    uint64_t v13 = v8;
    uint64_t v10 = v6;
    dispatch_async(v9, block);
  }

void sub_1001E68E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 696LL);
    int v8 = 136315395;
    id v9 = "-[ADCommandCenter _fetchHubAccountInBackground]_block_invoke_2";
    __int16 v10 = 2113;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %{private}@", (uint8_t *)&v8, 0x16u);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 96);
  if (v5) {
    [v5 setHubAccount:*(void *)(v4 + 696)];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;
}

void sub_1001E69D4(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    uint64_t v3 = "-[ADCommandCenter _stopUpdatingMotionActivity]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "%s Motion activity manager stopped",  (uint8_t *)&v2,  0xCu);
  }

void sub_1001E6A7C(id a1, BOOL a2)
{
  BOOL v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = @"NO";
    if (v2) {
      uint64_t v4 = @"YES";
    }
    int v5 = 136315394;
    uint64_t v6 = "-[ADCommandCenter _startUpdatingMotionActivity]_block_invoke";
    __int16 v7 = 2112;
    int v8 = v4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Motion activity manager started: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_1001E6B4C(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v7 = (id)objc_claimAutoreleasedReturnValue([v2 multiUserSAObject]);

  if (v7)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)v3[115];
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 _account]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 assistantIdentifier]);
    [v4 sendMultiUserInfoWithDeviceAssistantId:v6 multiUserInfo:v7];
  }
}

void sub_1001E6BE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 136315650;
    uint64_t v12 = "-[ADCommandCenter _addCompletion:forCommand:forKey:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    __int16 v15 = 2112;
    id v16 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Calling command completion block for command %@ with error %@)",  (uint8_t *)&v11,  0x20u);
  }

  if (v6)
  {
    id v8 = 0LL;
    id v9 = v6;
  }

  else
  {
    id v8 = v5;
    id v9 = 0LL;
  }

  (*(void (**)(void, id, id))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v8, v9);
}

void sub_1001E6CEC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = WeakRetained;
  if (!WeakRetained || !WeakRetained[57])
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    int v12 = 136315138;
    __int16 v13 = "-[ADCommandCenter _createRootExecutionContextForRequestID:]_block_invoke";
    int v11 = "%s _mostRecentRootExecutionContext already nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v12, 0xCu);
    goto LABEL_12;
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2[57] creationDate]);
  [v3 timeIntervalSinceDate:v4];
  double v6 = v5;

  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v8 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v6 <= 300.0)
  {
    if (!v8) {
      goto LABEL_12;
    }
    int v12 = 136315138;
    __int16 v13 = "-[ADCommandCenter _createRootExecutionContextForRequestID:]_block_invoke";
    int v11 = "%s Not clearing _mostRecentRootExecutionContext, due to more recent request";
    goto LABEL_11;
  }

  if (v8)
  {
    id v9 = v2[57];
    int v12 = 136315394;
    __int16 v13 = "-[ADCommandCenter _createRootExecutionContextForRequestID:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Clearing _mostRecentRootExecutionContext %@",  (uint8_t *)&v12,  0x16u);
  }

  id v10 = v2[57];
  v2[57] = 0LL;

LABEL_12:
}

void sub_1001E6EB0(uint64_t a1)
{
  uint64_t v2 = AFIsNano(a1);
  if ((_DWORD)v2 && (*(_BYTE *)(a1 + 40) || *(_BYTE *)(a1 + 41)) || (uint64_t v2 = AFIsHorseman(v2, v3), (_DWORD)v2))
  {
    else {
      uint64_t v4 = 0LL;
    }
    double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
    [v5 preheatWithOptions:v4];

    double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _speechManager]);
    [v6 endSession];

    *(void *)(*(void *)(a1 + 32) + 24kdebug_trace(722470076LL, 0LL, 0LL, 0LL, 0LL) = 0LL;
    id v7 = +[CSSiriVibrationManager sharedManager](&OBJC_CLASS___CSSiriVibrationManager, "sharedManager");
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionManager]);
    [v8 preheatSessions];

    id v9 = [*(id *)(a1 + 32) _locationManager];
    id v10 = [*(id *)(a1 + 32) _preheatAllServices];
    uint64_t v12 = AFIsHorseman(v10, v11);
    if ((_DWORD)v12)
    {
      id v13 = +[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager");
      id v14 = +[ADClockService sharedService](&OBJC_CLASS___ADClockService, "sharedService");
      id v15 = +[ADHomeAnnouncementService sharedService](&OBJC_CLASS___ADHomeAnnouncementService, "sharedService");
      id v16 = [*(id *)(a1 + 32) _deviceSyncCoordinator];
    }

    else if (!AFIsNano(v12))
    {
LABEL_12:

      goto LABEL_13;
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _contextManager]);
    [v17 preheatBackgroundContext];

    goto LABEL_12;
  }

id sub_1001E72AC(uint64_t a1, void *a2)
{
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    double v6 = "_HubAccountDidChange";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  return [a2 resetHubAccount];
}

void sub_1001E735C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    BOOL v8 = "-[ADCommandCenter init]_block_invoke_2";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1001E7610(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADCommandCenter);
  uint64_t v2 = (void *)qword_100578038;
  qword_100578038 = (uint64_t)v1;
}

void sub_1001E7CE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
}

id sub_1001E8EF4()
{
  return (id)qword_100578068;
}

id sub_1001E8F00()
{
  if (qword_100578060 != -1) {
    dispatch_once(&qword_100578060, &stru_1004F5F60);
  }
  return (id)qword_100578068;
}

void sub_1001E8F40(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 languageCode]);
  int v6 = (void *)v5;
  id v7 = &stru_1004FECA0;
  if (v5) {
    id v7 = (__CFString *)v5;
  }
  BOOL v8 = v7;

  __int128 v25 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v9 = v3;
  id v10 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = 0LL;
    uint64_t v13 = *(void *)v31;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v31 != v13) {
          objc_enumerationMutation(v9);
        }
        id v15 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
        id v16 = *(void **)(a1 + 32);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 sectionID]);
        LODWORD(v16) = [v16 isFirstPartyApplicationWithBundleId:v17];

        if ((_DWORD)v16)
        {
          [*(id *)(a1 + 32) _emitAnnounceEnablementEventFromSectionInfo:v15 siriLocale:v8];
        }

        else
        {
          id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  (char *)i + v12));
          -[NSMutableArray addObject:](v25, "addObject:", v18);
        }
      }

      v12 += (uint64_t)i;
      id v11 = [v9 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }

    while (v11);
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _randomlySampleWithoutReplacementNumSamples:5 fromArray:v25]);
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v20 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v27;
    do
    {
      for (j = 0LL; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v27 != v22) {
          objc_enumerationMutation(v19);
        }
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v9,  "objectAtIndex:",  objc_msgSend(*(id *)(*((void *)&v26 + 1) + 8 * (void)j), "unsignedIntegerValue")));
        [*(id *)(a1 + 32) _emitAnnounceEnablementEventFromSectionInfo:v24 siriLocale:v8];
      }

      id v21 = [v19 countByEnumeratingWithState:&v26 objects:v34 count:16];
    }

    while (v21);
  }
}

void sub_1001E91CC(id a1)
{
  if (qword_100578070 != -1) {
    dispatch_once(&qword_100578070, &stru_1004F5F80);
  }
  qword_100578068 = (uint64_t)objc_getClass("BBSettingsGateway");
  off_1005744C8 = sub_1001E8EF4;
}

void sub_1001E9228(id a1)
{
  qword_100578078 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard", 2);
}

id sub_1001E9FE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyObservers:sub_1001EA01C()];
}

uint64_t sub_1001EA01C()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v1 = [v0 useDeviceSpeakerForTTS];

  if (v1 != (id)2)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADTTSMutingObserver sharedInstance](&OBJC_CLASS___ADTTSMutingObserver, "sharedInstance"));
    unsigned __int8 v3 = [v2 _currentRouteIsHandsFree];

    if ((v3 & 1) == 0)
    {
      if (v1 != (id)3)
      {
        int v6 = (void *)objc_claimAutoreleasedReturnValue( +[ADSystemMuteModeObserver sharedInstance]( &OBJC_CLASS___ADSystemMuteModeObserver,  "sharedInstance"));
        BOOL v4 = [v6 muteMode] != (id)1;

        return v4;
      }

      return 0LL;
    }
  }

  return 1LL;
}

uint64_t sub_1001EA0D0()
{
  if ((AFIsATVOnly() & 1) != 0) {
    return 0LL;
  }
  return 1LL;
}

id sub_1001EA104(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyObservers:sub_1001EA01C()];
}

id sub_1001EA138(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyObservers:sub_1001EA01C()];
}

void *sub_1001EA16C(uint64_t a1)
{
  uint64_t result = (void *)CFBagGetCount(*(CFBagRef *)(*(void *)(a1 + 32) + 8LL));
  if (!result)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver( DarwinNotifyCenter,  *(const void **)(a1 + 32),  kAFPreferencesDidChangeDarwinNotification,  0LL);
    uint64_t result = *(void **)(a1 + 32);
    if (result[2] == 1LL) {
      return [result _stopListeningForMuteStateChanges];
    }
  }

  return result;
}

void *sub_1001EA1DC(uint64_t a1)
{
  uint64_t result = (void *)CFBagGetCount(*(CFBagRef *)(*(void *)(a1 + 32) + 8LL));
  if (result == (void *)1)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver( DarwinNotifyCenter,  *(const void **)(a1 + 32),  (CFNotificationCallback)sub_1001EA280,  kAFPreferencesDidChangeDarwinNotification,  0LL,  CFNotificationSuspensionBehaviorDeliverImmediately);
    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    *(void *)(*(void *)(a1 + 32) + 16) = [v4 useDeviceSpeakerForTTS];

    uint64_t result = *(void **)(a1 + 32);
    if (result[2] == 1LL) {
      return [result _listenForMuteStateChanges];
    }
  }

  return result;
}

void sub_1001EA280(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001EA2D8;
  block[3] = &unk_1004FCFF8;
  void block[4] = a2;
  dispatch_async(&_dispatch_main_q, block);
}

id sub_1001EA2D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _useDeviceSpeakerForTTSPreferenceChanged];
}

id sub_1001EA2E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyObservers:sub_1001EA01C()];
}

id sub_1001EA308(void *a1, const __CFBoolean *a2)
{
  return _[a1 adShouldSpeakStateDidChange:kCFBooleanTrue == a2];
}

id sub_1001EA320(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateAudioRouteOnMainThread];
}

void sub_1001EA388(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ADTTSMutingObserver);
  uint64_t v2 = (void *)qword_100578090;
  qword_100578090 = (uint64_t)v1;
}

void sub_1001EA4EC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ADSystemLanguagePreferencesObserver);
  uint64_t v2 = (void *)qword_1005780F0;
  qword_1005780F0 = (uint64_t)v1;
}

NSURL *sub_1001EA514(uint64_t a1)
{
  uint64_t v1 = SiriCoreUUIDStringCreate(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  unsigned __int8 v3 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"amos://%@", v2);
  BOOL v4 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v3);

  return v4;
}

void sub_1001EA5CC(id a1)
{
  uint64_t v1 = AFUserSupportDirectoryPath(a1);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v2 = -[NSURL initFileURLWithPath:isDirectory:]( objc_alloc(&OBJC_CLASS___NSURL),  "initFileURLWithPath:isDirectory:",  v5,  1LL);
  unsigned __int8 v3 = (void *)qword_100578080;
  qword_100578080 = (uint64_t)v2;

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v4 createDirectoryAtURL:qword_100578080 withIntermediateDirectories:1 attributes:0 error:0];
}

id sub_1001EA650(void *a1)
{
  id v2 = AFApplicationStateUnknown;
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_alloc_init(&OBJC_CLASS___BKSApplicationStateMonitor);
    id v5 = [v4 applicationStateForApplication:v3];

    [v4 invalidate];
    uint64_t v6 = AFDescriptionOfBKSApplicationState(v5);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);

    id v2 = (id)v7;
  }

  return v2;
}

uint64_t sub_1001EA6E0(uint64_t a1)
{
  uint64_t v1 = AFIsNano(a1);
  if ((_DWORD)v1) {
    return _AFPreferencesShouldCensorSpeechInternal();
  }
  if (AFIsHorseman(v1, v2))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
    uint64_t v5 = [v4 getAllowExplicitContentSettingForRecognizedUser] ^ 1;
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
    uint64_t v5 = [v4 effectiveBoolValueForSetting:MCFeatureAssistantProfanityFilterForced] == 1;
  }

  return v5;
}

BOOL sub_1001EA768()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  BOOL v1 = [v0 effectiveBoolValueForSetting:MCFeatureAllowVoiceDialing] == 2;

  return v1;
}

BOOL sub_1001EA7B4()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  BOOL v1 = [v0 effectiveBoolValueForSetting:MCFeatureLockScreenControlCenterAllowed] == 2;

  return v1;
}

uint64_t sub_1001EA800(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = AFIsHorseman(a1, a2);
  if ((v2 & 1) != 0 || (AFIsATV(v2, v3) & 1) != 0) {
    return 0LL;
  }
  else {
    return AFIsNano() ^ 1;
  }
}

uint64_t sub_1001EA830()
{
  int IsRunningAsInstance = AFProcessIsRunningAsInstance();
  if (IsRunningAsInstance)
  {
    BOOL v1 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      id v4 = "ADCanEverAllowSync";
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Sync never allowed because this process is running as an instance of a multi-instance service.",  (uint8_t *)&v3,  0xCu);
    }
  }

  return IsRunningAsInstance ^ 1u;
}

uint64_t sub_1001EAC58()
{
  if ((AFHasUnlockedSinceBoot() & 1) == 0)
  {
    id v4 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "ADShouldAllowSync";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Sync disallowed because device has not unlocked.",  (uint8_t *)&v6,  0xCu);
    }

    return 0LL;
  }

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned int v1 = [v0 isDictationHIPAACompliant];
  if (v1)
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "ADShouldAllowSync";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Sync disallowd because we have HIPAA On-Device Dictation enabled.",  (uint8_t *)&v6,  0xCu);
    }
  }

  uint64_t v3 = v1 ^ 1;

  return v3;
}

id sub_1001EADA8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  uint64_t v6 = FBSOpenApplicationOptionKeyPromptUnlockDevice;
  uint64_t v7 = &__kCFBooleanTrue;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  id v4 = [v2 openSensitiveURL:v1 withOptions:v3];

  return v4;
}

void sub_1001EAE7C(void *a1)
{
  uint64_t v2 = @"ClientConnection";
  id v3 = a1;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(17LL, 0LL);
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001EAF34;
  v8[3] = &unk_1004FD968;
  id v9 = @"ClientConnection";
  id v10 = v3;
  id v6 = v3;
  uint64_t v7 = @"ClientConnection";
  dispatch_async(v5, v8);
}

uint64_t sub_1001EAF34(uint64_t a1)
{
  uint64_t result = PLShouldLogRegisteredEvent(38LL, @"assistantd");
  if ((_DWORD)result) {
    return PLLogRegisteredEvent(38LL, *(void *)(a1 + 32), *(void *)(a1 + 40), 0LL);
  }
  return result;
}

void sub_1001EAF7C(void *a1)
{
  id v1 = a1;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(17LL, 0LL);
  id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001EB00C;
  block[3] = &unk_1004FD940;
  id v6 = v1;
  id v4 = v1;
  dispatch_async(v3, block);
}

uint64_t sub_1001EB00C(uint64_t a1)
{
  return PLLogTimeSensitiveRegisteredEvent(38LL, @"DictationConnection", *(void *)(a1 + 32), 0LL);
}

void sub_1001EB024(id a1)
{
  id v1 = (void *)CFPreferencesCopyAppValue(@"StoreDemoMode", @"com.apple.demo-settings");
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1;
    LOBYTE(v1) = [v1 BOOLValue];
    uint64_t v2 = v3;
  }

  byte_1005780A1 = (char)v1;
}

id sub_1001EB070(uint64_t a1)
{
  v4.sched_priority = 46;
  pthread_attr_setschedpolicy(&v5, 2);
  pthread_attr_setschedparam(&v5, &v4);
  pthread_attr_setinheritsched(&v5, 2);
  uint64_t v2 = (void *)dispatch_pthread_root_queue_create(a1, 2147483650LL, &v5, 0LL);
  pthread_attr_destroy(&v5);
  return v2;
}

id sub_1001EB128()
{
  if (qword_1005780C0 != -1) {
    dispatch_once(&qword_1005780C0, &stru_1004F6000);
  }
  return (id)qword_1005780B8;
}

void sub_1001EB168(id a1)
{
  size_t v10 = 37LL;
  int v1 = sysctlbyname("kern.bootsessionuuid", v15, &v10, 0LL, 0LL);
  if (v1)
  {
    int v2 = v1;
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      BOOL v8 = v3;
      id v9 = strerror(v2);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v12 = "ADSystemGetBootSessionUUID_block_invoke";
      __int16 v13 = 2080;
      uint64_t v14 = (uint64_t)v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Failed getting kern.bootsessionuuid with sysctlbyname() %s",  buf,  0x16u);
    }

    sched_param v4 = (void *)qword_1005780B8;
    qword_1005780B8 = 0LL;
  }

  else
  {
    pthread_attr_t v5 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v15);
    id v6 = (void *)qword_1005780B8;
    qword_1005780B8 = (uint64_t)v5;

    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v12 = "ADSystemGetBootSessionUUID_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = qword_1005780B8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s kern.bootsessionuuid is %@", buf, 0x16u);
    }
  }

void sub_1001EB308(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  int v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_UTILITY, 0);
  sched_param v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);

  dispatch_queue_t v5 = dispatch_queue_create("com.apple.siri.duet", v4);
  id v6 = (void *)qword_1005780D8;
  qword_1005780D8 = (uint64_t)v5;
}

void sub_1001EB370(id a1)
{
  dispatch_queue_attr_t v1 = objc_alloc(&OBJC_CLASS___NSSet);
  int v2 = -[NSSet initWithObjects:]( v1,  "initWithObjects:",  SAAlarmGroupIdentifier,  SAPhoneGroupIdentifier,  SAReminderGroupIdentifier,  SATimerGroupIdentifier,  SAMPGroupIdentifier,  SALocalSearchGroupIdentifier,  0LL);
  dispatch_queue_attr_t v3 = (void *)qword_1005780C8;
  qword_1005780C8 = (uint64_t)v2;
}

id sub_1001EB3F8()
{
  return (id)qword_100578100;
}

id sub_1001EB404()
{
  if (qword_1005780F8 != -1) {
    dispatch_once(&qword_1005780F8, &stru_1004F60C8);
  }
  return (id)qword_100578100;
}

void sub_1001EB444(uint64_t a1, void *a2)
{
  dispatch_queue_attr_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  unsigned int v4 = [v3 isStart];
  dispatch_queue_t v5 = (os_log_s *)AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ADCarPlayHasBeenActiveInLast24Hours_block_invoke";
    __int16 v8 = 1024;
    unsigned int v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Received CarPlay event isStart: %d",  (uint8_t *)&v6,  0x12u);
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) |= v4;
}

void sub_1001EB530(id a1, BPSCompletion *a2)
{
  dispatch_queue_attr_t v3 = (void *)AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_INFO))
  {
    unsigned int v4 = v3;
    dispatch_queue_t v5 = a2;
    id v6 = -[BPSCompletion state](v5, "state");
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](v5, "error"));

    int v8 = 136315650;
    unsigned int v9 = "ADCarPlayHasBeenActiveInLast24Hours_block_invoke";
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    __int16 v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s CarPlayPublisher completed with state: %ld; error: %@",
      (uint8_t *)&v8,
      0x20u);
  }

void sub_1001EB62C(id a1)
{
  if (qword_100578108 != -1) {
    dispatch_once(&qword_100578108, &stru_1004F60E8);
  }
  qword_100578100 = (uint64_t)objc_getClass("BMStreams");
  off_1005744D0 = sub_1001EB3F8;
}

void sub_1001EB688(id a1)
{
  qword_100578110 = (uint64_t)dlopen("/System/Library/Frameworks/BiomeStreams.framework/BiomeStreams", 2);
}

void sub_1001EB6B0(void *a1)
{
  id v1 = a1;
  int v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  dispatch_queue_attr_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADBluetoothManager sharedInstance](&OBJC_CLASS___ADBluetoothManager, "sharedInstance"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1001EB76C;
  v6[3] = &unk_1004FD6C8;
  uint64_t v7 = v2;
  id v8 = v1;
  id v4 = v1;
  dispatch_queue_t v5 = v2;
  [v3 getPairedDevicesWithCompletion:v6];
}

void sub_1001EB76C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_group_create();
  dispatch_queue_attr_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v6 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v5);
  dispatch_queue_t v7 = dispatch_queue_create("com.apple.assistant.settings-client.paired-bluetooth-devices", v6);

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v8 = v3;
  id v9 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v22;
    do
    {
      __int16 v12 = 0LL;
      do
      {
        if (*(void *)v22 != v11) {
          objc_enumerationMutation(v8);
        }
        __int16 v13 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v12);
        dispatch_group_enter(v4);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        id v17[2] = sub_1001EB98C;
        v17[3] = &unk_1004FC968;
        id v18 = v7;
        id v19 = *(id *)(a1 + 32);
        id v20 = v4;
        [v13 getDeviceInfo:v17];

        __int16 v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v10);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001EBA38;
  block[3] = &unk_1004FD990;
  id v16 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 32);
  dispatch_group_notify(v4, v7, block);
}

void sub_1001EB98C(uint64_t a1, void *a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001EBA54;
  block[3] = &unk_1004FD4C0;
  id v6 = a2;
  id v3 = *(dispatch_queue_s **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v4 = v6;
  dispatch_async(v3, block);
}

uint64_t sub_1001EBA38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1001EBA54(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_1001EBA84(void *a1)
{
  id v1 = a1;
  *(void *)md = 0LL;
  uint64_t v29 = 0LL;
  int v30 = 0;
  CC_SHA1_Init(&c);
  int v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315395;
    __int128 v25 = "ADSHAAnchorForData";
    __int16 v26 = 2113;
    id v27 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Generating anchor for values %{private}@",  buf,  0x16u);
  }

  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null", (void)v18));

        if (v8 != v9)
        {
          uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString);
          if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
          {
            uint64_t v11 = (const char *)[v8 UTF8String];
          }

          else
          {
            uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSNumber);
            if ((objc_opt_isKindOfClass(v8, v12) & 1) != 0)
            {
              __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 stringValue]);
            }

            else if ((objc_opt_respondsToSelector(v8, "_ad_SADHash") & 1) != 0)
            {
              __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "_ad_SADHash"));
            }

            else
            {
              __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 description]);
            }

            id v14 = v13;
            uint64_t v11 = (const char *)[v14 UTF8String];
          }

          CC_LONG v15 = strlen(v11);
          CC_SHA1_Update(&c, v11, v15);
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
    }

    while (v5);
  }

  CC_SHA1_Final(md, &c);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString hexStringFromBytes:length:](&OBJC_CLASS___NSString, "hexStringFromBytes:length:", md, 20LL));

  return v16;
}

id sub_1001EBCFC(void *a1)
{
  id v1 = sub_1001EBD70(a1);
  int v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 attributesOfItemAtPath:v2 error:0]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 fileModificationDate]);
  return v5;
}

id sub_1001EBD70(void *a1)
{
  id v1 = a1;
  int v2 = NSHomeDirectoryForUser(@"mobile");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingPathComponent:@"Library/Assistant"]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByAppendingPathComponent:v1]);
  return v5;
}

void sub_1001EBDE4(void *a1)
{
  id v1 = sub_1001EBD70(a1);
  int v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  if ([v3 fileExistsAtPath:v2])
  {
    NSFileAttributeKey v6 = NSFileModificationDate;
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v7 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));

    [v3 setAttributes:v5 ofItemAtPath:v2 error:0];
  }

  else
  {
    [v3 createFileAtPath:v2 contents:0 attributes:0];
  }
}

id sub_1001EBEE8()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue( +[ADSystemLanguagePreferencesObserver sharedObserver]( &OBJC_CLASS___ADSystemLanguagePreferencesObserver,  "sharedObserver"));
  id v1 = [v0 systemLanguagePreferenceHasChanged];

  return v1;
}

id sub_1001EBF24(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 isEndpoint];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](&OBJC_CLASS___VTPreferences, "sharedPreferences"));
  id v4 = v3;
  if (v2)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v1 endpointUUID]);
    id v6 = [v4 voiceTriggerEnabledForEndpointId:v5];
  }

  else
  {
    id v6 = [v3 voiceTriggerEnabled];
  }

  return v6;
}

void sub_1001EBFAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](&OBJC_CLASS___VTPreferences, "sharedPreferences"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 endpointUUID]);

  [v7 setVoiceTriggerEnabled:a1 sender:0 endpointId:v8];
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  [v9 setAllowHeySiriHomeKitSetting:a1 withCompletion:v5];
}

NSUUID *sub_1001EC064(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  id v5 = 0LL;
  if (a1 && v3)
  {
    [a1 getUUIDBytes:&v9];
    [v4 getUUIDBytes:&v8];
    int8x16_t v7 = veorq_s8(v8, v9);
    id v5 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &v7);
  }

  return v5;
}

BOOL sub_1001EC114()
{
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  BOOL v1 = [v0 effectiveBoolValueForSetting:MCFeatureAppAnalyticsAllowed] == 1;

  return v1;
}

id sub_1001EC160(uint64_t a1)
{
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue( +[LSBundleProxy bundleProxyForIdentifier:]( &OBJC_CLASS___LSBundleProxy,  "bundleProxyForIdentifier:",  a1));
  CFBundleRef v2 = CFBundleCreate(0, (CFURLRef)[v1 bundleURL]);
  if (v2)
  {
    CFBundleRef cf = v2;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v3 = (id)TCCAccessCopyInformationForBundle();
    id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v17;
      while (2)
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v17 != v6) {
            objc_enumerationMutation(v3);
          }
          int8x16_t v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          int8x16_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:kTCCInfoService]);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:kTCCInfoGranted]);
          uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString);
          if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
          {
            uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSNumber);
            if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0
              && v9
              && ([v9 isEqualToString:kTCCServiceSiri] & 1) != 0)
            {
              CFRelease(cf);
              id v13 = [v10 BOOLValue];

              goto LABEL_16;
            }
          }
        }

        id v5 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }

    CFRelease(cf);
    id v13 = 0LL;
LABEL_16:
  }

  else
  {
    id v13 = 0LL;
  }

  return v13;
}

LABEL_108:
            id v84 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
              _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_INFO,  "%s #multi-user _updateHomeUserSettings- MultiUserSetupHomepodUserAddedToHome secondary user",  buf,  0xCu);
            }

            -[ADHomeInfoManager _logRelevantAnalyticsOnHomeUserSettingsUpdateForCurrentSettings:allowVoiceIdSettingValue:isPrimaryUser:]( v2,  "_logRelevantAnalyticsOnHomeUserSettingsUpdateForCurrentSettings:allowVoiceIdSettingValue:isPrimaryUser:",  v20,  v67,  0LL);
            if (v64) {
              id v85 = 0;
            }
            else {
              id v85 = v67 == (id)1;
            }
            uint64_t v86 = v85;
            v147 |= v86;
            v142 = 1;
          }

          UInt32 v87 = v2->_homeUserSettings;
          id v88 = -[NSMutableDictionary mutableCopy](v20, "mutableCopy");
          -[NSMutableDictionary setObject:forKey:](v87, "setObject:forKey:", v88, v61);

          uint64_t v54 = (char *)v54 + 1;
          uint64_t v38 = v149;
          id v37 = v152;
          __int16 v55 = v149;
          uint64_t v56 = v20;
          id v57 = v152;
          id v58 = v154;
        }

        while (v145 != v54);
        uint64_t v89 = [v140 countByEnumeratingWithState:&v155 objects:v163 count:16];
        v145 = v89;
      }

      while (v89);
LABEL_126:
      v150 = v38;
      v153 = v37;

      id v90 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome currentUser](v146, "currentUser"));
      id v91 = (void *)objc_claimAutoreleasedReturnValue([v90 uniqueIdentifier]);
      id v92 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v91 UUIDString]);

      id v93 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome currentUser](v146, "currentUser"));
      [v93 setDelegate:v2];

      __int128 v94 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome currentUser](v146, "currentUser"));
      __int128 v95 = (void *)objc_claimAutoreleasedReturnValue(-[ADHomeInfoManager _settingsForHomeUser:forHome:](v2, "_settingsForHomeUser:forHome:", v94, v146));

      __int128 v96 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v2->_homeUserSettings, "objectForKey:", v92));
      if (v96)
      {
        __int128 v97 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315651;
          v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
          v166 = 2113;
          v167 = v96;
          v168 = 2112;
          v169 = v146;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEBUG,  "%s currentUserSettings %{private}@ for home (%@)",  buf,  0x20u);
        }
      }

      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v95 objectForKey:@"allowVoiceID"]);
      id v99 = [v98 integerValue];

      uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v96, "objectForKey:", @"allowVoiceID"));
      v101 = [v100 integerValue];

      id v103 = v99 == (id)2 || v101 == v99;
      int v104 = -[NSMutableDictionary isEqualToDictionary:](v96, "isEqualToDictionary:", v95);
      if ((v104 & 1) != 0)
      {
        uint64_t v10 = v134;
        goto LABEL_166;
      }

      if (AFIsMultiUserCompanion(v104))
      {
        if (v99 == (id)1)
        {
          id v105 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315395;
            v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
            v166 = 2113;
            v167 = v92;
            _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "%s Voice ID setting is ON for current user %{private}@",  buf,  0x16u);
          }

          __int16 v106 = 1LL;
        }

        else
        {
          __int16 v106 = v136;
          if (!v99) {
            __int16 v106 = 0LL;
          }
        }

        v136 = v106;
        id v115 = v99 == (id)1 && v101 == 0LL;
        v147 |= v115;
LABEL_164:
        uint64_t v10 = v134;
        goto LABEL_165;
      }

      if (!v2->isATVOnly) {
        goto LABEL_164;
      }
      if (v96) {
        id v107 = v103;
      }
      else {
        id v107 = 1;
      }
      if (v107 != 1 || v2->_allowATVRmVHomeSettingSync)
      {
        if (v99 == (id)1)
        {
          __int16 v108 = (os_log_s *)AFSiriLogContextDaemon;
          uint64_t v10 = v134;
          if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315395;
            v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
            v166 = 2113;
            v167 = v92;
            uint64_t v109 = v108;
            id v110 = "%s #multi-user-atv Voice ID setting is ON for %{private}@";
            goto LABEL_152;
          }

          goto LABEL_153;
        }

        uint64_t v10 = v134;
        if ([v139 isRmVEnabledForHomeUser:v92] && v2->_allowATVRmVHomeSettingSync)
        {
          uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue(-[HMHome uniqueIdentifier](v146, "uniqueIdentifier"));
          id v119 = (void *)objc_claimAutoreleasedReturnValue([v118 UUIDString]);
          [v139 syncToCloudATVRmVSetting:1 homeID:v119 homeUserID:v92 notifyClients:v2->_allowATVRmVHomeSettingSync];

          goto LABEL_165;
        }

        if (v99) {
          goto LABEL_165;
        }
        uint64_t v111 = v139;
        id v112 = v92;
        id v113 = 3LL;
LABEL_154:
        [v111 triggerATVRmVStateChangeForiCloudAltDSID:0 homeUserID:v112 toState:v113];
        goto LABEL_165;
      }

      if (v96) {
        goto LABEL_164;
      }
      uint64_t v10 = v134;
      if ([v139 userProfileExistsWithHomeUserID:v92] && v99 == (id)1)
      {
        __int16 v108 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315395;
          v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
          v166 = 2113;
          v167 = v92;
          uint64_t v109 = v108;
          id v110 = "%s #multi-user-atv No previous settings but user profiles exists and Voice ID setting is ON for %{private}@";
LABEL_152:
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_INFO, v110, buf, 0x16u);
        }

LABEL_165:
      v142 = 1;
      -[ADHomeInfoManager _logRelevantAnalyticsOnHomeUserSettingsUpdateForCurrentSettings:allowVoiceIdSettingValue:isPrimaryUser:]( v2,  "_logRelevantAnalyticsOnHomeUserSettingsUpdateForCurrentSettings:allowVoiceIdSettingValue:isPrimaryUser:",  v95,  v99,  1LL);
LABEL_166:
      v116 = v2->_homeUserSettings;
      id v117 = [v95 mutableCopy];
      -[NSMutableDictionary setObject:forKey:](v116, "setObject:forKey:", v117, v92);

LABEL_167:
      uint64_t v10 = (char *)v10 + 1;
    }

    while (v10 != v133);
    int8x16_t v8 = [obj countByEnumeratingWithState:&v159 objects:v170 count:16];
    __int16 v133 = v8;
  }

  while (v8);
LABEL_190:

  if (AFIsMultiUserCompanion(v121))
  {
    if (v136 != 2)
    {
      id v122 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      [v122 setMultiUserVoiceIdentification:v136 == 1];

      if ((v147 & 1) != 0)
      {
        char v123 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(v123, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
          _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_INFO, "%s Start sharing", buf, 0xCu);
        }

        -[ADHomeInfoManager restartSharing](v2, "restartSharing");
      }
    }
  }

  if (v2->_allowATVRmVHomeSettingSync)
  {
    id v124 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v124, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
      _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv resetting allowatvreset to no",  buf,  0xCu);
    }

    v2->_allowATVRmVHomeSettingSynCC_SHA1_CTX c = 0;
  }

  if ((v142 & 1) == 0)
  {
LABEL_204:
    id v127 = 0;
    goto LABEL_205;
  }

  id v125 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(v125, OS_LOG_TYPE_INFO))
  {
    __int16 v126 = v2->_homeUserSettings;
    *(_DWORD *)__int128 buf = 136315394;
    v165 = "-[ADHomeInfoManager _updateHomeUserSettings]";
    v166 = 2112;
    v167 = v126;
    _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_INFO, "%s Settings (%@)", buf, 0x16u);
  }

  id v127 = 1;
LABEL_205:
  id v4 = v130;
LABEL_209:

  return v127;
}

void sub_1001F2B38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1001F5AB0(uint64_t a1)
{
  BOOL v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _homeManager]);
  CFBundleRef v2 = (void *)objc_claimAutoreleasedReturnValue([v1 currentHome]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);

  if (v3)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___HOMESchemaHOMEClientEventMetadata);
    id v5 = objc_alloc(&OBJC_CLASS___SISchemaUUID);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    id v7 = [v5 initWithNSUUID:v6];
    [v4 setHomeComponentId:v7];

    int8x16_t v8 = (void *)objc_claimAutoreleasedReturnValue([@"com.apple.assistant.homemetric.seed.value" dataUsingEncoding:4]);
    int8x16_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID hmf_UUIDWithNamespace:data:](&OBJC_CLASS___NSUUID, "hmf_UUIDWithNamespace:data:", v3, v8));

    id v10 = [[SISchemaUUID alloc] initWithNSUUID:v9];
    id v11 = objc_alloc_init(&OBJC_CLASS___HOMESchemaHOMEAssistantInfoReported);
    [v11 setHashedHomeId:v10];
    id v12 = objc_alloc_init(&OBJC_CLASS___HOMESchemaHOMEClientEvent);
    [v12 setEventMetadata:v4];
    [v12 setAssistantInfoReported:v11];
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedAnalytics](&OBJC_CLASS___AssistantSiriAnalytics, "sharedAnalytics"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 defaultMessageStream]);
    CC_LONG v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    [v14 emitMessage:v12 isolatedStreamUUID:v15];
  }

  else
  {
    __int128 v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v17 = 136315138;
      __int128 v18 = "-[ADHomeInfoManager emitHomeMetricInvocationEvent]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Current Home UUID is nil, so not emiting home metric SELF event",  (uint8_t *)&v17,  0xCu);
    }
  }
}

id sub_1001F5CF0(uint64_t a1, void *a2)
{
  return _[a2 setActivityNotificationsEnabledForPersonalRequests:*(unsigned __int8 *)(a1 + 32)];
}

void sub_1001F5CFC(uint64_t a1)
{
  CFBundleRef v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getAccessoryCategoryForExecutionInfo:*(void *)(a1 + 40)]);
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 categoryType]);

  if ([v5 isEqualToString:HMAccessoryCategoryTypeHomePod])
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_5:
    v3();
    goto LABEL_10;
  }

  if ([v5 isEqualToString:HMAccessoryCategoryTypeSpeaker])
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_5;
  }

  else {
    id v4 = @"ADHomeKitAccessoryCategoryTypeRemoraOtherDevice";
  }
  (*(void (**)(void, const __CFString *))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v4);
LABEL_10:
}

void sub_1001F5DE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getAccessoryCategoryForExecutionInfo:*(void *)(a1 + 40)]);
  CFBundleRef v2 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1001F5E3C(uint64_t a1)
{
  CFBundleRef v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v16 = a1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessories]);
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v4) {
    goto LABEL_12;
  }
  id v5 = v4;
  uint64_t v6 = *(void *)v21;
  uint64_t v7 = HMAccessoryCategoryTypeHomePod;
  do
  {
    for (i = 0LL; i != v5; i = (char *)i + 1)
    {
      if (*(void *)v21 != v6) {
        objc_enumerationMutation(v3);
      }
      int8x16_t v9 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 siriEndpointProfile]);
      if (v10)
      {
      }

      else
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 category]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 categoryType]);
        unsigned int v13 = [v12 isEqualToString:v7];

        if (!v13) {
          continue;
        }
      }

      [v2 addObject:v9];
    }

    id v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  }

  while (v5);
LABEL_12:

  id v14 = [v2 copy];
  CC_LONG v15 = *(dispatch_queue_s **)(v16 + 40);
  if (v15)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001F6044;
    block[3] = &unk_1004FD990;
    id v19 = *(id *)(v16 + 48);
    id v18 = v14;
    dispatch_async(v15, block);
  }

  else
  {
    (*(void (**)(void))(*(void *)(v16 + 48) + 16LL))();
  }
}

uint64_t sub_1001F6044(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001F6054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _homeManager]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001F6098(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315650;
      uint64_t v7 = "-[ADHomeInfoManager _startAcceptingCloudSharesForMultiUserService]_block_invoke";
      __int16 v8 = 2112;
      id v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Container registration unsuccessful with error (%@) for (%@)",  (uint8_t *)&v6,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    uint64_t v7 = "-[ADHomeInfoManager _startAcceptingCloudSharesForMultiUserService]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Container registration successful",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_1001F61C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1001F6278;
  v4[3] = &unk_1004F6338;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 32);
  [v2 shareWithOwner:v3 addShare:1 homes:0 completion:v4];
}

void sub_1001F6278(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int16 v10 = v9;
  if (!v7)
  {
    if (v9)
    {
      [*(id *)(*(void *)(a1 + 32) + 80) setObject:&off_100513540 forKey:*(void *)(a1 + 48)];
      id v18 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      *(_DWORD *)__int128 buf = 136315394;
      int v30 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      __int16 v31 = 2112;
      __int128 v32 = v10;
      id v19 = "%s Failed to create a share with error (%@)";
      __int128 v20 = v18;
      uint32_t v21 = 22;
    }

    else
    {
      __int128 v22 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_9;
      }
      *(_DWORD *)__int128 buf = 136315138;
      int v30 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      id v19 = "%s Share already exists";
      __int128 v20 = v22;
      uint32_t v21 = 12;
    }

    _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, v19, buf, v21);
    goto LABEL_9;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 participants]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v11));

  unsigned int v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    int v30 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke_2";
    __int16 v31 = 2112;
    __int128 v32 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s participants are (%@)", buf, 0x16u);
  }

  id v14 = *(void **)(a1 + 40);
  CC_LONG v15 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F6508;
  block[3] = &unk_1004F7698;
  id v24 = v14;
  id v25 = v7;
  id v26 = v8;
  id v16 = *(id *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  id v27 = v16;
  uint64_t v28 = v17;
  dispatch_async(v15, block);

LABEL_9:
}

void sub_1001F6508(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001F65A4;
  v7[3] = &unk_1004F6310;
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v8 = v5;
  uint64_t v9 = v6;
  id v10 = *(id *)(a1 + 40);
  [v2 establishShareWithHomeOwner:v3 container:v4 completionHandler:v7];
}

void sub_1001F65A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 ownerUser]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 participant]);

  uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136316163;
    id v24 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke_2";
    __int16 v25 = 2113;
    id v26 = v8;
    __int16 v27 = 2113;
    uint64_t v28 = v7;
    __int16 v29 = 2112;
    id v30 = v5;
    __int16 v31 = 2113;
    uint64_t v32 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s participant is (%{private}@) ownerUser is (%{private}@) error is (%@) ownerID (%{private}@)",  buf,  0x34u);
  }

  uint64_t v11 = *(void **)(a1 + 48);
  id v12 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F6754;
  block[3] = &unk_1004F7698;
  id v18 = v5;
  id v19 = v8;
  id v20 = v11;
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v21 = v13;
  uint64_t v22 = v14;
  id v15 = v8;
  id v16 = v5;
  dispatch_async(v12, block);
}

void sub_1001F6754(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      id v8 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Encountered error (%@)",  (uint8_t *)&v7,  0x16u);
    }

    [*(id *)(a1[8] + 80) setObject:&off_100513540 forKey:a1[7]];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v4 handleSharingError:a1[4]];
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = a1[5];
      int v7 = 136315395;
      id v8 = "-[ADHomeInfoManager _startCloudSharingForMultiUserService:]_block_invoke";
      __int16 v9 = 2113;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s This participant was added %{private}@",  (uint8_t *)&v7,  0x16u);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v6 saveParticipantsOnShare:a1[6] forOwner:a1[7] participants:a1[5]];

    [*(id *)(a1[8] + 80) setObject:&off_100513588 forKey:a1[7]];
  }

void sub_1001F68E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentAccessory]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueIdentifier]);
  unsigned int v5 = [v3 isEqual:v4];

  if (v5) {
    [*(id *)(a1 + 32) _updateCurrentAccessoryInfoWithAccessory:*(void *)(a1 + 40)];
  }
}

id sub_1001F6974(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startCloudSharingForMultiUserService:*(void *)(a1 + 40)];
}

void sub_1001F6980(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentAccessory]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueIdentifier]);
  unsigned int v5 = [v3 isEqual:v4];

  if (v5) {
    [*(id *)(a1 + 32) _updateCurrentAccessoryInfoWithAccessory:*(void *)(a1 + 40)];
  }
}

void sub_1001F6A10(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 136) preferredMediaUserSharedUserIDByAccessoryUUID]);
  [v2 removeObjectForKey:v4];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 136) preferredMediaUserHomeUserIDByAccessoryUUID]);
  [v3 removeObjectForKey:v4];
}

void sub_1001F6A88(uint64_t a1)
{
  if (([*(id *)(*(void *)(a1 + 32) + 88) isEndpoint] & 1) == 0)
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315138;
      id v6 = "-[ADHomeInfoManager home:didAddAccessory:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Checking if new accessory is a remora device",  (uint8_t *)&v5,  0xCu);
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) siriEndpointProfile]);

    if (v3)
    {
      id v4 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v5 = 136315138;
        id v6 = "-[ADHomeInfoManager home:didAddAccessory:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Found remora device", (uint8_t *)&v5, 0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) subscribeToSettingsForPendingEndpoints];
    }
  }

void sub_1001F6BBC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    int v5 = "-[ADHomeInfoManager home:didRemoveUser:]_block_invoke";
    __int16 v6 = 2112;
    int v7 = v2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s User deletion status (%@)",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_1001F6C7C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userSettingsForHome:*(void *)(a1 + 48)]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 settings]);

  [v3 setDelegate:*(void *)(a1 + 40)];
}

void sub_1001F6CE0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v14 = "-[ADHomeInfoManager homeDidUpdateName:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "homes", 0));
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        if (*(void *)(*((void *)&v8 + 1) + 8LL * (void)i) == *(void *)(a1 + 40))
        {
          [*(id *)(a1 + 32) _updateHomeContext:*(void *)(*(void *)(a1 + 32) + 16)];
          goto LABEL_13;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

id sub_1001F6E44(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 settings]);
  id v6 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v26;
    while (2)
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v5);
        }
        __int128 v10 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 keyPath]);
        unsigned __int8 v12 = [v11 isEqualToString:v3];

        if ((v12 & 1) != 0)
        {
          id v18 = v10;
          goto LABEL_19;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v25 objects:v30 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "groups", 0));
  id v13 = [v5 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v22;
LABEL_11:
    uint64_t v16 = 0LL;
    while (1)
    {
      if (*(void *)v22 != v15) {
        objc_enumerationMutation(v5);
      }
      uint64_t v17 = sub_1001F6E44(v3, *(void *)(*((void *)&v21 + 1) + 8 * v16));
      id v18 = (id)objc_claimAutoreleasedReturnValue(v17);
      if (v18) {
        break;
      }
      if (v14 == (id)++v16)
      {
        id v14 = [v5 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v14) {
          goto LABEL_11;
        }
        goto LABEL_17;
      }
    }

void sub_1001F7028(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 136315651;
      __int128 v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
      __int16 v10 = 2113;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to set opt-in status for accessory (%{private}@), with error %@",  (uint8_t *)&v8,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 136315651;
    __int128 v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2113;
    id v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Success setting Siri data sharing status (%ld) for accessory (%{private}@)",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_1001F7170(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 136315651;
      __int128 v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
      __int16 v10 = 2113;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to set opt-in status for accessory (%{private}@), with error %@",  (uint8_t *)&v8,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 136315651;
    __int128 v9 = "-[ADHomeInfoManager _propagateSiriDataSharingOptInStatus:toAccessory:]_block_invoke";
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    __int16 v12 = 2113;
    id v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Success setting Siri data sharing status (%ld) for accessory (%{private}@)",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_1001F72B8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 48LL);
    int v11 = 136315650;
    __int16 v12 = "-[ADHomeInfoManager user:didUpdateAssistantAccessControl:forHome:]_block_invoke";
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s _currentHome (%@) home (%@)",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueIdentifier]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) uniqueIdentifier]);
  unsigned int v7 = objc_msgSend(v5, "hmf_isEqualToUUID:", v6);

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    __int128 v9 = *(void **)(v8 + 56);
    *(void *)(v8 + 56) = 0LL;

    id v10 = [*(id *)(a1 + 32) _currentHomeInfo];
  }

void sub_1001F73E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _updateHomeUserSettings];
  if ((_DWORD)v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];
  }

  if (AFIsHorseman(v2, v3))
  {
    id v26 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _homeManager]);
    if ([v26 hasOptedToHH2])
    {

      return;
    }

    char IsHomePodInHH2Mode = _AFPreferencesIsHomePodInHH2Mode();

    if ((IsHomePodInHH2Mode & 1) == 0)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) rootGroup]);
      id v7 = sub_1001F6E44(@"root.general.analytics.shareSiriAnalytics", v6);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

      __int128 v9 = (os_log_s *)AFSiriLogContextDaemon;
      BOOL v10 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      if (!v8)
      {
        if (v10)
        {
          *(_DWORD *)__int128 buf = 136315394;
          id v30 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
          __int16 v31 = 2112;
          uint64_t v32 = @"root.general.analytics.shareSiriAnalytics";
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s %@ setting not found for this HomePod, ignoring",  buf,  0x16u);
        }

        goto LABEL_26;
      }

      if (v10)
      {
        int v11 = v9;
        __int16 v12 = (__CFString *)objc_claimAutoreleasedReturnValue([v8 value]);
        *(_DWORD *)__int128 buf = 136315394;
        id v30 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
        __int16 v31 = 2112;
        uint64_t v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s Siri data sharing status: %@", buf, 0x16u);
      }

      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 value]);

      if (v13)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 value]);
        unsigned int v15 = [v14 BOOLValue];

        if (v15)
        {
          uint64_t v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
          uint64_t v17 = v16;
          uint64_t v18 = 1LL;
        }

        else
        {
          __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v8 value]);
          int v25 = [v24 BOOLValue];

          if ((v25 & 1) != 0)
          {
LABEL_26:

            return;
          }

          uint64_t v16 = (__CFString *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
          uint64_t v17 = v16;
          uint64_t v18 = 2LL;
        }

        -[__CFString setSiriDataSharingOptInStatus:propagateToHomeAccessories:source:reason:completion:]( v16,  "setSiriDataSharingOptInStatus:propagateToHomeAccessories:source:reason:completion:",  v18,  0LL,  4LL,  0LL,  0LL);
      }

      else
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
        id v20 = (char *)[v19 siriDataSharingOptInStatus];

        __int128 v21 = &off_100513528;
        __int128 v22 = v21;
        __int128 v23 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315394;
          id v30 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
          __int16 v31 = 2112;
          uint64_t v32 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s Siri Data Sharing value is null in HomeKit. Setting to %@",  buf,  0x16u);
        }

        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_1001F77A4;
        v27[3] = &unk_1004FBD90;
        __int128 v28 = v22;
        uint64_t v17 = v22;
        [v8 updateValue:v17 completionHandler:v27];
      }

      goto LABEL_26;
    }
  }

void sub_1001F77A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315650;
      uint64_t v8 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to initialize HomeKit Siri Data Sharing status to %@ with error: %@",  (uint8_t *)&v7,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315394;
    uint64_t v8 = "-[ADHomeInfoManager settingsDidUpdate:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Success initializing HomeKit Siri Data Sharing status to %@",  (uint8_t *)&v7,  0x16u);
  }
}

void sub_1001F78DC(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADHomeInfoManager homeManagerDidUpdateAssistantIdentifiers:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 16LL))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v3 postNotificationName:@"ADHomeInfoSidekickDeviceIdentifierDidChangeNotification" object:0];

    [*(id *)(a1 + 40) _updateHomeContext:*(void *)(a1 + 32)];
  }

void sub_1001F79C4(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    __int16 v9 = "-[ADHomeInfoManager homeManagerDidUpdateDataSyncState:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v8, 0xCu);
  }

  id v3 = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == v3[2])
  {
    id v4 = [v3 _currentAccessory];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentAccessoryInfo]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentHome]);
    id v7 = [*(id *)(a1 + 40) _currentHomeInfo];
    [*(id *)(a1 + 40) _updateVoiceTriggerPhrase];
    [*(id *)(a1 + 40) _checkAndDisableVoiceIDIfRequired];
  }

void *sub_1001F7AD8(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADHomeInfoManager homeManagerDidUpdateCurrentHome:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  uint64_t result = *(void **)(a1 + 40);
  if (*(void *)(a1 + 32) == result[2]) {
    return objc_msgSend(result, "_updateHomeContext:");
  }
  return result;
}

id sub_1001F7B94(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    uint64_t v10 = "-[ADHomeInfoManager homeManager:didUpdateStatus:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v9, 0xCu);
  }

  id result = *(id *)(a1 + 32);
  if (result == *(id *)(*(void *)(a1 + 40) + 16LL))
  {
    id v4 = [result status];
    if (!v4)
    {
      [*(id *)(a1 + 40) _startCloudKitActivityForHomes:*(void *)(a1 + 32) homesToDelete:0];
      id v6 = [*(id *)(a1 + 40) _currentHomeInfo];
      [*(id *)(a1 + 40) _checkAndDisableVoiceIDIfRequired];
      [*(id *)(a1 + 40) _resolveSiriDataSharingStatusMismatch:*(void *)(a1 + 32)];
      id v4 = [*(id *)(a1 + 40) _updateHomeContext:*(void *)(a1 + 32)];
    }

    id result = (id)AFIsHorseman(v4, v5);
    if ((_DWORD)result)
    {
      if (((unint64_t)[*(id *)(*(void *)(a1 + 40) + 16) status] & 0x31) == 0)
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) currentHome]);
        int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 accessories]);

        [*(id *)(a1 + 40) _setPreferredMediaUserForAccessories:v8];
      }

      return [*(id *)(a1 + 40) _updateVoiceTriggerPhrase];
    }
  }

  return result;
}

void sub_1001F7CEC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) owner]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);

  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315395;
    id v19 = "-[ADHomeInfoManager homeManager:didRemoveHome:]_block_invoke";
    __int16 v20 = 2113;
    __int128 v21 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s homeOwner is (%{private}@)", buf, 0x16u);
    if (!v4) {
      goto LABEL_8;
    }
  }

  else if (!v4)
  {
    goto LABEL_8;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _homesWithMultiUserEnabled]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 80) objectForKey:v4]);
  if (v7)
  {
    int v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315395;
      id v19 = "-[ADHomeInfoManager homeManager:didRemoveHome:]_block_invoke";
      __int16 v20 = 2113;
      __int128 v21 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Resetting home sharing state for (%{private}@)",  buf,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 40) + 80) setObject:&off_100513540 forKey:v4];
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
  [v9 shareWithOwner:v4 addShare:0 homes:v6 completion:&stru_1004F62C8];

  uint64_t v10 = *(void *)(a1 + 40);
  __int16 v11 = *(void **)(v10 + 56);
  *(void *)(v10 + 56) = 0LL;

  uint64_t v12 = *(void *)(a1 + 40);
  __int16 v13 = *(void **)(v12 + 48);
  *(void *)(v12 + 4_Block_object_dispose((const void *)(v27 - 128), 8) = 0LL;

  unsigned int v15 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  [v15 _homeManagerUpdatedHomes:v14 homesToDelete:v16];

LABEL_8:
}

void sub_1001F7F28(id a1, CKShare *a2, CKContainer *a3, NSError *a4)
{
  id v4 = a4;
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    id v7 = "-[ADHomeInfoManager homeManager:didRemoveHome:]_block_invoke";
    __int16 v8 = 2112;
    int v9 = v4;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s error is (%@)", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1001F7FE8(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentUser]);
  [v4 setDelegate:*(void *)(a1 + 40)];
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v4 userSettingsForHome:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 settings]);

  [v3 setDelegate:*(void *)(a1 + 40)];
  [*(id *)(a1 + 40) _homeManagerUpdatedHomes:*(void *)(a1 + 48)];
}

NSDictionary *__cdecl sub_1001F8078(id a1)
{
  uint64_t v5 = @"date";
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:]( &OBJC_CLASS___NSDateFormatter,  "localizedStringFromDate:dateStyle:timeStyle:",  v1,  1LL,  4LL));
  int v6 = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));

  return (NSDictionary *)v3;
}

void *sub_1001F8140(void *result)
{
  uint64_t v1 = (void *)result[4];
  id v2 = (void *)result[5];
  if (v1 == (void *)v2[2])
  {
    id v3 = result;
    id v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = v4;
      int v6 = 136315394;
      id v7 = "-[ADHomeInfoManager homeManagerDidUpdateHomes:]_block_invoke";
      __int16 v8 = 1024;
      unsigned int v9 = [v1 status];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s status is %d", (uint8_t *)&v6, 0x12u);

      uint64_t v1 = (void *)v3[4];
      id v2 = (void *)v3[5];
    }

    return [v2 _homeManagerUpdatedHomes:v1];
  }

  return result;
}

void sub_1001F8230(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v17 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s Got metrics from homed %@", buf, 0x16u);
    }

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v6 numSharedUsers]);
    if (((unint64_t)[v8 integerValue] & 0x8000000000000000) != 0)
    {
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0LL;
    }

    else
    {
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 numSharedUsers]);
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v9 integerValue];
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 numUsersCloudShareTrustNotConfigured]);
    if (((unint64_t)[v10 integerValue] & 0x8000000000000000) != 0)
    {
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 0LL;
    }

    else
    {
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v6 numUsersCloudShareTrustNotConfigured]);
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v11 integerValue];
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_1001F87D0;
    v13[3] = &unk_1004FD4E8;
    uint64_t v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    id v15 = *(id *)(a1 + 48);
    [v12 getVoiceSettingsForHomeMembers:v13];
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v17 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Could not fetch multiuser metrics due to error %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1001F8488(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allUsersBySharedUserID]);

  __int16 v20 = v3;
  id v4 = [v3 count];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v6 = [v5 countVoiceProfiles];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v8 = [v7 countUsersWithPersonalRequestsEnabled];

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v10 = [v9 countUsersWithSiriCloudSyncEnabled];

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v12 = [v11 countUsersWithMatchingSiriLanguage];

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v14 = [v13 countUsersWithLocationServicesEnabled];

  [*(id *)(a1 + 32) setNumGuestsAccepted:*(unsigned int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)];
  id v15 = *(NSString **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  if ((uint64_t)v15 <= v16)
  {
    uint64_t v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v22 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
      __int16 v23 = 2048;
      __int128 v24 = v15;
      __int16 v25 = 2048;
      uint64_t v26 = v16;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s Invalid participant data %ld/%ld",  buf,  0x20u);
    }
  }

  else
  {
    [*(id *)(a1 + 32) setNumParticipantsWithTrust:((_DWORD)v15 - v16)];
  }

  [*(id *)(a1 + 32) setNumUsersWithRecognizeMyVoiceEnabled:v4];
  [*(id *)(a1 + 32) setNumVoiceProfilesAvailable:v6];
  [*(id *)(a1 + 32) setNumUsersWithPersonalRequestsEnabled:v8];
  [*(id *)(a1 + 32) setNumUsersWithSiriCloudSyncEnabled:v10];
  [*(id *)(a1 + 32) setNumUsersWithMatchingSiriLanguage:v12];
  [*(id *)(a1 + 32) setNumUsersWithLocationServicesEnabled:v14];
  __int16 v18 = -[NSString initWithFormat:]( [NSString alloc],  "initWithFormat:",  @"{numGuestsAccepted = %d, numParticipantsWithTrust = %d, numUsersWhoSyncedRecognizeMyVoice = %d, numUsersWithRecognizeMyVoiceEnabled = %d, numVoiceProfilesAvailable = %d, numUsersWithPersonalRequestEnabled = %d, numUsersWithSiriCloudSyncEnabled = %d, numUsersWithMatchingSiriLanguage = %d, numUsersWithLocationServicesEnabled = %d}",  [*(id *)(a1 + 32) numGuestsAccepted],  objc_msgSend(*(id *)(a1 + 32), "numParticipantsWithTrust"),  objc_msgSend(*(id *)(a1 + 32), "numUsersWhoSyncedRecognizeMyVoice"),  objc_msgSend(*(id *)(a1 + 32), "numUsersWithRecognizeMyVoiceEnabled"),  objc_msgSend(*(id *)(a1 + 32), "numVoiceProfilesAvailable"),  objc_msgSend(*(id *)(a1 + 32), "numUsersWithPersonalRequestsEnabled"),  objc_msgSend(*(id *)(a1 + 32), "numUsersWithSiriCloudSyncEnabled"),  objc_msgSend(*(id *)(a1 + 32), "numUsersWithMatchingSiriLanguage"),  objc_msgSend(*(id *)(a1 + 32), "numUsersWithLocationServicesEnabled"));
  id v19 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v22 = "-[ADHomeInfoManager fetchMultiUserMetricsWithCompletion:]_block_invoke";
    __int16 v23 = 2112;
    __int128 v24 = v18;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s MultiUserSetup SELF metrics: %@",  buf,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001F87D0(uint64_t a1, void *a2)
{
  if (a2) {
    id v3 = [a2 count];
  }
  else {
    id v3 = 0LL;
  }
  [*(id *)(a1 + 32) setNumUsersWhoSyncedRecognizeMyVoice:v3];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_1001F8810(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 120) removeObject:*(void *)(a1 + 40)];
}

id sub_1001F881C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 120) addObject:*(void *)(a1 + 40)];
}

void sub_1001F8828(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentAccessoryInfo]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1001F886C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001F887C(uint64_t a1)
{
}

void sub_1001F8884(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentAccessoryInfo]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001F88BC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _accessoryLoggingSalt]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001F88F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "homeInfoManager:didUpdateCurrentAccessoryInfo:") & 1) != 0) {
    [v3 homeInfoManager:*(void *)(a1 + 32) didUpdateCurrentAccessoryInfo:*(void *)(a1 + 40)];
  }
}

void sub_1001F8940(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v20 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
  [v20 setUniqueIdentifier:v4];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  [v20 setName:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) model]);
  [v20 setModel:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) room]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);
  [v20 setRoomName:v8];

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assistantIdentifier]);
  [v20 setAssistantIdentifier:v9];

  [v20 setIsSpeaker:*(unsigned __int8 *)(a1 + 56)];
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) manufacturer]);
  [v20 setManufacturer:v10];

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) category]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 categoryType]);
  [v20 setCategoryType:v12];

  [v20 setSchemaCategoryType:*(void *)(a1 + 48)];
  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) uniqueIdentifier]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _accessoryLoggingSalt]);
  id v15 = sub_1001EC064(v13, v14);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  [v20 setLoggingUniqueIdentifier:v16];

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[MediaServiceConfiguration sharedInstance](&OBJC_CLASS___MediaServiceConfiguration, "sharedInstance"));
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) home]);
  id v19 = [v17 thirdPartyMusicAvailable:v18];

  [v20 setHasActiveThirdPartyMusicSubscription:v19];
}

uint64_t sub_1001F8B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 32) + 128LL));
}

void sub_1001F8B40(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) currentHome]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accessories]);

  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        unsigned int v9 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        if ([v9 supportsJustSiri])
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _accessoryInfoForAccessory:v9]);
          [v2 addObject:v10];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v6);
  }

  id v11 = [v2 copy];
  id v12 = *(dispatch_queue_s **)(a1 + 40);
  if (v12)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_1001F8D1C;
    v13[3] = &unk_1004FD990;
    id v15 = *(id *)(a1 + 48);
    id v14 = v11;
    dispatch_async(v12, v13);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1001F8D1C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1001F8D2C(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 16) status];
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v3 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
  if (v1)
  {
    if (v3)
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v36 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s HMHomeManager not ready", buf, 0xCu);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = *(_BYTE *)(a1 + 40) ^ 1;
  }

  else
  {
    if (v3)
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v36 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", buf, 0xCu);
    }

    id v4 = *(id *)(*(void *)(a1 + 32) + 16LL);
    id obj = (id)objc_claimAutoreleasedReturnValue([v4 homes]);
    uint64_t v27 = *(unsigned __int8 *)(a1 + 40);
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id v5 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v5)
    {
      id v6 = v5;
      id v25 = v4;
      uint64_t v7 = 0LL;
      id v8 = 0LL;
      uint64_t v9 = *(void *)v32;
      uint64_t v10 = 2LL;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          id v12 = v8;
          __int16 v13 = v7;
          if (*(void *)v32 != v9) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 currentUser]);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 userSettingsForHome:v14]);
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v16 settings]);

          __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v7 rootGroup]);
          id v18 = sub_1001F6E44(@"root.siri.identifyVoice", v17);
          id v8 = (void *)objc_claimAutoreleasedReturnValue(v18);

          if (v8)
          {
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v8 value]);
            uint64_t v10 = [v19 BOOLValue];
          }

          id v20 = (os_log_s *)AFSiriLogContextDaemon;
          BOOL v21 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
          if (v10 == v27)
          {
            if (v21)
            {
              int v22 = *(unsigned __int8 *)(a1 + 40);
              *(_DWORD *)__int128 buf = 136315394;
              uint64_t v36 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
              __int16 v37 = 1024;
              int v38 = v22;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Setting is already VoiceID=%d",  buf,  0x12u);
            }
          }

          else
          {
            if (v21)
            {
              int v23 = *(unsigned __int8 *)(a1 + 40);
              *(_DWORD *)__int128 buf = 136315394;
              uint64_t v36 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
              __int16 v37 = 1024;
              int v38 = v23;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%s Setting VoiceID=%d", buf, 0x12u);
            }

            if (*(_BYTE *)(a1 + 40)) {
              __int128 v24 = &__kCFBooleanTrue;
            }
            else {
              __int128 v24 = &__kCFBooleanFalse;
            }
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472LL;
            v29[2] = sub_1001F90F8;
            v29[3] = &unk_1004FBD90;
            id v30 = v8;
            [v30 updateValue:v24 completionHandler:v29];
          }
        }

        id v6 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
      }

      while (v6);

      id v4 = v25;
    }
  }

void sub_1001F90F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) value]);
  unsigned int v5 = [v4 BOOLValue];

  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315650;
    id v8 = "-[ADHomeInfoManager setRecognizeMyVoiceEnabled:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 1024;
    unsigned int v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Settings operation completed with (%@) value (%d)",  (uint8_t *)&v7,  0x1Cu);
  }
}

void sub_1001F91E8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 multiUserHomeUUIDsForDeletion]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _homesWithMultiUserEnabled]);
  if ([v3 count])
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id obj = v3;
    id v5 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
          id v10 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315395;
            __int128 v19 = "-[ADHomeInfoManager restartShareDeletion]_block_invoke";
            __int16 v20 = 2113;
            uint64_t v21 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Retrying deletion for UUID (%{private}@)",  buf,  0x16u);
          }

          __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
          v13[0] = _NSConcreteStackBlock;
          v13[1] = 3221225472LL;
          _OWORD v13[2] = sub_1001F9400;
          v13[3] = &unk_1004F61F0;
          void v13[4] = v9;
          [v11 shareWithOwner:v9 addShare:0 homes:v4 completion:v13];
        }

        id v6 = [obj countByEnumeratingWithState:&v14 objects:v22 count:16];
      }

      while (v6);
    }
  }
}

void sub_1001F9400(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    __int16 v13 = "-[ADHomeInfoManager restartShareDeletion]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v9;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s error is (%@)", (uint8_t *)&v12, 0x16u);
    if (v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (!v9)
  {
LABEL_3:
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v11 removeMultiUserHomeUUID:*(void *)(a1 + 32)];
  }

id sub_1001F951C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startCloudKitActivityForHomes:*(void *)(*(void *)(a1 + 32) + 16) homesToDelete:0];
}

uint64_t sub_1001F952C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a4);
  }
  return result;
}

void sub_1001F9544(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
  {
    __int128 v17 = *(void **)(a1 + 32);
    int v19 = 136315394;
    __int16 v20 = "-[ADHomeInfoManager getAccessoryInfoForAccessoryWithUUID:completionHandler:]_block_invoke";
    __int16 v21 = 2112;
    int v22 = v17;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s accessory id: %@",  (uint8_t *)&v19,  0x16u);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _currentHome]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accessoryWithUniqueIdentifier:*(void *)(a1 + 32)]);
  id v5 = v4;
  if (v3) {
    BOOL v6 = v4 == 0LL;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = 136315906;
      __int16 v20 = "-[ADHomeInfoManager getAccessoryInfoForAccessoryWithUUID:completionHandler:]_block_invoke";
      __int16 v21 = 2048;
      int v22 = v3;
      __int16 v23 = 2048;
      __int128 v24 = v5;
      __int16 v25 = 2112;
      uint64_t v26 = v18;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s home: %p, accessory: %p, accessory id: %@",  (uint8_t *)&v19,  0x2Au);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  44LL,  0LL));
    __int16 v13 = 0LL;
    id v14 = 0LL;
    id v9 = 0LL;
    id v10 = 0LL;
    BOOL v11 = 0LL;
  }

  else
  {
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v4 category]);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 categoryType]);

    id v14 = HMAccessoryCategoryTypeSpeaker;
    id v15 = HMAccessoryCategoryTypeAudioReceiver;
    id v9 = v15;
    BOOL v11 = v13
       && (v14 && ([v13 isEqualToString:v14] & 1) != 0
        || v9 && [v13 isEqualToString:v9]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 model]);
    id v8 = 0LL;
  }

  uint64_t v16 = *(void *)(a1 + 48);
  if (v16) {
    (*(void (**)(uint64_t, BOOL, void *, void *))(v16 + 16))(v16, v11, v10, v8);
  }
}

void sub_1001F97D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentAccessory]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1001F9814(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  BOOL v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001F99F4;
  block[3] = &unk_1004FD4C0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1001F98A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315651;
      id v8 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      __int16 v9 = 2049;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error while migrating Siri Data Sharing status from %{private}ld, error=%@",  (uint8_t *)&v7,  0x20u);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 136315395;
      id v8 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      __int16 v9 = 2049;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Successfully migrated Siri Data Sharing status to %{private}ld",  (uint8_t *)&v7,  0x16u);
    }

    _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated();
  }
}

id sub_1001F99E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onceSiriDataSharingAdjustment:*(void *)(a1 + 40)];
}

void sub_1001F99F4(uint64_t a1)
{
  if ((_AFPreferencesHomePodPriorOptInValue2021IsPresentWithContext(*(void *)(*(void *)(a1 + 32) + 88LL)) & 1) == 0)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v3 = [v2 siriDataSharingOptInStatus];

    _AFPreferencesSetHomePodPriorOptInValue2021WithContext(v3, *(void *)(*(void *)(a1 + 32) + 88LL));
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  void v24[2] = sub_1001F9D10;
  v24[3] = &unk_1004FBD90;
  id v25 = *(id *)(a1 + 40);
  [v4 setSiriDataSharingOptInStatus:2 propagateToHomeAccessories:0 source:11 reason:@"One-time adjustment" completion:v24];

  if (*(void *)(a1 + 40))
  {
    if ((unint64_t)++qword_100578130 > 0x13)
    {
      id v15 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = *(void **)(a1 + 32);
        __int128 v17 = v15;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 _currentAccessory]);
        int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 uniqueIdentifier]);
        __int16 v20 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 136315651;
        uint64_t v27 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
        __int16 v28 = 2113;
        uint64_t v29 = (uint64_t)v19;
        __int16 v30 = 2112;
        __int128 v31 = v20;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Error setting siriDataSharing for accessory %{private}@ in HomeKit: %@ - maximum retries reached",  buf,  0x20u);
      }
    }

    else
    {
      dispatch_time_t v5 = dispatch_time(0LL, 30000000000LL);
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = *(void **)(a1 + 40);
      id v8 = *(dispatch_queue_s **)(v6 + 8);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      id v21[2] = sub_1001F9E48;
      v21[3] = &unk_1004FD4C0;
      void v21[4] = v6;
      id v22 = v7;
      id v23 = *(id *)(a1 + 48);
      dispatch_after(v5, v8, v21);
    }
  }

  else
  {
    __int16 v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = qword_100578130;
      __int16 v11 = *(void **)(a1 + 32);
      id v12 = v9;
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 _currentAccessory]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueIdentifier]);
      *(_DWORD *)__int128 buf = 136315651;
      uint64_t v27 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      __int16 v28 = 2048;
      uint64_t v29 = v10;
      __int16 v30 = 2113;
      __int128 v31 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Success (%lu retries) setting siriDataSharing for accessory %{private}@ in HomeKit",  buf,  0x20u);
    }

    _AFPreferencesSetHomePodOptIn2021AdjustedWithContext(*(void *)(*(void *)(a1 + 32) + 88LL));
  }
}

void sub_1001F9D10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 136315394;
      int v7 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke_3";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error performing one-time adjustment to local value, error=%@",  (uint8_t *)&v6,  0x16u);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      int v7 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Successfully performed one-time adjustment on local value",  (uint8_t *)&v6,  0xCu);
    }

    _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated();
  }

  if (+[AFFeatureFlags isSiriDataSharingRepromptEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isSiriDataSharingRepromptEnabled")) {
    _AFPreferencesSetSiriDataSharingHomeAccessoryMigrated();
  }
}

id sub_1001F9E48(uint64_t a1)
{
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = v2;
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 _currentAccessory]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueIdentifier]);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = 136315907;
    uint64_t v10 = "-[ADHomeInfoManager _onceSiriDataSharingAdjustment:]_block_invoke";
    __int16 v11 = 2113;
    id v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2048;
    uint64_t v16 = qword_100578130;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Error setting siriDataSharing for accessory %{private}@ in HomeKit: %@ - attempting retry %lu",  (uint8_t *)&v9,  0x2Au);
  }

  return [*(id *)(a1 + 32) _onceSiriDataSharingAdjustment:*(void *)(a1 + 48)];
}

id sub_1001F9F6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onceSiriDataSharingAdjustment:*(void *)(a1 + 40)];
}

void sub_1001F9F78(uint64_t a1)
{
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v20 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) currentHome]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 accessories]);

  id v4 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v23;
    do
    {
      int v7 = 0LL;
      do
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v22 + 1) + 8 * (void)v7) settings]);
        int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 rootGroup]);
        id v10 = sub_1001F6E44(@"root.siri.language", v9);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        if (v11)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 value]);
          __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 title]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 componentsSeparatedByString:@","]);

          if ([v14 count])
          {
            __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);
          }

          else
          {
            __int128 v17 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315138;
              uint64_t v27 = "-[ADHomeInfoManager availableLanguagesInTheHome:]_block_invoke";
              _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s Language component is empty",  buf,  0xCu);
            }
          }
        }

        else
        {
          uint64_t v16 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315138;
            uint64_t v27 = "-[ADHomeInfoManager availableLanguagesInTheHome:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s Siri language setting is nil",  buf,  0xCu);
          }
        }

        int v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v5);
  }

  uint64_t v18 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v27 = "-[ADHomeInfoManager availableLanguagesInTheHome:]_block_invoke";
    __int16 v28 = 2112;
    uint64_t v29 = v21;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Retrieved input language codes %@",  buf,  0x16u);
  }

  id v19 = [v21 copy];
  (*(void (**)(void))(*(void *)(v20 + 40) + 16LL))();
}

void sub_1001FA2BC(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v8 = 0LL;
  id v4 = [v2 _accessoryForIdentifier:v3 inHome:&v8];
  id v5 = v8;
  uint64_t v6 = a1[6];
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueIdentifier]);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

void sub_1001FA338(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v10, (void)v13));
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:@"allowVoiceID"]);
        if (v12) {
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v12, v10);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001FA4A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 48))
  {
    if (*(_BYTE *)(a1 + 48) || (id v4 = [*(id *)(v2 + 64) count], v2 = *(void *)(a1 + 32), !v4))
    {
      [(id)v2 _updateHomeUserSettings];
      uint64_t v3 = *(void *)(a1 + 40);
      id v6 = [*(id *)(*(void *)(a1 + 32) + 64) mutableCopy];
      (*(void (**)(uint64_t, id))(v3 + 16))(v3, v6);
    }

    else
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(v2 + 64) mutableCopy];
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1001FA554(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 48LL);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v28 = "-[ADHomeInfoManager getCurrentHomeMemberIds:]_block_invoke";
    __int16 v29 = 2112;
    uint64_t v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s currentHome:%@", buf, 0x16u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentHome]);

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentHome]);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v5 owner]);
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 users]);
    id v8 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v23;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v22 + 1) + 8 * (void)i) uniqueIdentifier]);
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);
          id v14 = [v13 copy];
          -[NSMutableArray addObject:](v6, "addObject:", v14);
        }

        id v9 = [v7 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }

      while (v9);
    }

    if (v21)
    {
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v21 uniqueIdentifier]);
      id v16 = [v15 copy];
    }

    else
    {
      id v16 = 0LL;
    }

    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 UUIDString]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueIdentifier]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 UUIDString]);
    (*(void (**)(uint64_t, void *, void *, NSMutableArray *))(v17 + 16))(v17, v18, v20, v6);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_1001FA7E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  block[2] = sub_1001FABC0;
  block[3] = &unk_1004F7698;
  block[1] = 3221225472LL;
  id v14 = v6;
  id v15 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v9;
  uint64_t v17 = v10;
  id v18 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, block);
}

void sub_1001FA8BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v13[0] = _NSConcreteStackBlock;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  _OWORD v13[2] = sub_1001FA97C;
  v13[3] = &unk_1004FD470;
  v13[1] = 3221225472LL;
  id v14 = v6;
  id v15 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v9;
  uint64_t v17 = v10;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, v13);
}

void sub_1001FA97C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1[5];
      uint64_t v9 = a1[6];
      int v14 = 136315651;
      id v15 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke_2";
      __int16 v16 = 2113;
      uint64_t v17 = v8;
      __int16 v18 = 2113;
      uint64_t v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Found sharedUserID (%{private}@) for homeUserID (%{private}@)",  (uint8_t *)&v14,  0x20u);
    }

    [*(id *)(a1[7] + 136) setPreferredMediaUserHomeUserID:a1[6]];
    id v5 = *(void **)(a1[7] + 136LL);
    uint64_t v6 = a1[5];
    goto LABEL_9;
  }

  if ([v2 code] == (id)6001)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = a1[6];
      int v14 = 136315651;
      id v15 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke";
      __int16 v16 = 2113;
      uint64_t v17 = v4;
      __int16 v18 = 2113;
      uint64_t v19 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s sharedUserID not found for homeUserID (%{private}@), likely not enrolled in MultiUser, setting homeUserID (%{ private}@) as preferred media user",  (uint8_t *)&v14,  0x20u);
    }

    [*(id *)(a1[7] + 136) setPreferredMediaUserHomeUserID:a1[6]];
    id v5 = *(void **)(a1[7] + 136LL);
    uint64_t v6 = 0LL;
LABEL_9:
    [v5 setPreferredMediaUserSharedUserID:v6];
    goto LABEL_12;
  }

  [*(id *)(a1[7] + 136) setPreferredMediaUserHomeUserID:a1[6]];
  [*(id *)(a1[7] + 136) setPreferredMediaUserSharedUserID:0];
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = a1[4];
    uint64_t v13 = a1[6];
    int v14 = 136315651;
    id v15 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    __int16 v18 = 2113;
    uint64_t v19 = v13;
    _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Error (%@) looking up sharedUserID for homeUserID (%{private}@). We will only set homeUserID",  (uint8_t *)&v14,  0x20u);
  }

void sub_1001FABC0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1[5];
      uint64_t v9 = a1[6];
      int v17 = 136315651;
      __int16 v18 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke_2";
      __int16 v19 = 2113;
      uint64_t v20 = v8;
      __int16 v21 = 2113;
      uint64_t v22 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Found sharedUserID (%{private}@) for homeUserID (%{private}@)",  (uint8_t *)&v17,  0x20u);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[7] + 136) preferredMediaUserHomeUserIDByAccessoryUUID]);
    [v10 setObject:a1[6] forKey:a1[8]];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[7] + 136) preferredMediaUserSharedUserIDByAccessoryUUID]);
    [v6 setObject:a1[5] forKey:a1[8]];
    goto LABEL_9;
  }

  if ([v2 code] == (id)6001)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = a1[6];
      int v17 = 136315651;
      __int16 v18 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke";
      __int16 v19 = 2113;
      uint64_t v20 = v4;
      __int16 v21 = 2113;
      uint64_t v22 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s sharedUserID not found for homeUserID (%{private}@), likely not enrolled in MultiUser, setting homeUserID (%{ private}@) as preferred media user",  (uint8_t *)&v17,  0x20u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[7] + 136) preferredMediaUserHomeUserIDByAccessoryUUID]);
    [v5 setObject:a1[6] forKey:a1[8]];

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[7] + 136) preferredMediaUserSharedUserIDByAccessoryUUID]);
    [v6 removeObjectForKey:a1[8]];
LABEL_9:

    goto LABEL_12;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[7] + 136) preferredMediaUserHomeUserIDByAccessoryUUID]);
  [v11 setObject:a1[6] forKey:a1[8]];

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[7] + 136) preferredMediaUserSharedUserIDByAccessoryUUID]);
  [v12 removeObjectForKey:a1[8]];

  uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[6];
    int v17 = 136315651;
    __int16 v18 = "-[ADHomeInfoManager _setPreferredMediaUserForAccessory:]_block_invoke";
    __int16 v19 = 2112;
    uint64_t v20 = v15;
    __int16 v21 = 2113;
    uint64_t v22 = v16;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Error (%@) looking up sharedUserID for homeUserID (%{private}@). We will only set homeUserID",  (uint8_t *)&v17,  0x20u);
  }

void sub_1001FAE80(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 136) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001FAEB8(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentHomeInfo]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

ADHomeInfo *sub_1001FAF08(void *a1, void *a2)
{
  id v3 = a1;
  if (v3)
  {
    id v4 = a2;
    id v5 = objc_alloc_init(&OBJC_CLASS___ADHomeInfo);
    int v6 = sub_1001FB040(v4, v3);

    if (v6)
    {
      -[ADHomeInfo setPersonalDomainsIsEnabled:](v5, "setPersonalDomainsIsEnabled:", [v3 isEnabled]);
      -[ADHomeInfo setSecurePersonalDomainsRequireAuth:]( v5,  "setSecurePersonalDomainsRequireAuth:",  [v3 allowUnauthenticatedRequests] ^ 1);
    }

    else
    {
      id v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v9 = 136315138;
        uint64_t v10 = "_ADHomeGetInfoFromAccessControl";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Current accessory is not found in the access control list.",  (uint8_t *)&v9,  0xCu);
      }

      -[ADHomeInfo setPersonalDomainsIsEnabled:](v5, "setPersonalDomainsIsEnabled:", 0LL);
    }
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

uint64_t sub_1001FB040(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = 0LL;
  if (v3 && a2)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "accessories", 0));
    uint64_t v4 = (uint64_t)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v6 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0LL; i != v4; ++i)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v5);
          }
          uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueIdentifier]);
          unsigned __int8 v11 = [v9 isEqual:v10];

          if ((v11 & 1) != 0)
          {
            uint64_t v4 = 1LL;
            goto LABEL_13;
          }
        }

        uint64_t v4 = (uint64_t)[v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }

void sub_1001FB438(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = _AFPreferencesSiriDataSharingOptInStatus(a1, a2);
  uint64_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = v4;
    uint64_t Name = AFSiriDataSharingOptInStatusGetName(v3);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(Name);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v39 = "-[ADHomeInfoManager _siriDataSharingOptInStatusDidChange:]_block_invoke";
    __int16 v40 = 2112;
    uint64_t v41 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s Opt-in status: %@", buf, 0x16u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _homeManager]);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 homes]);

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id obj = v9;
  id v26 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v26)
  {
    uint64_t v25 = *(void *)v33;
    do
    {
      for (uint64_t i = 0LL; i != v26; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v25) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v11 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 owner]);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueIdentifier]);
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 UUIDString]);
        uint64_t v27 = v11;
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 currentUser]);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueIdentifier]);
        int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 UUIDString]);
        unsigned int v18 = [v14 isEqualToString:v17];

        if (v18)
        {
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v27 accessories]);
          id v20 = [v19 countByEnumeratingWithState:&v28 objects:v36 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v29;
            do
            {
              for (j = 0LL; j != v21; j = (char *)j + 1)
              {
                if (*(void *)v29 != v22) {
                  objc_enumerationMutation(v19);
                }
                [*(id *)(a1 + 32) _propagateSiriDataSharingOptInStatus:v3 toAccessory:*(void *)(*((void *)&v28 + 1) + 8 * (void)j)];
              }

              id v21 = [v19 countByEnumeratingWithState:&v28 objects:v36 count:16];
            }

            while (v21);
          }
        }
      }

      id v26 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
    }

    while (v26);
  }
}

id sub_1001FB708(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1001FB710(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _currentHome]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_1001FB754(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startAcceptingCloudSharesForMultiUserService];
}

void sub_1001FB75C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _homeManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 homes]);

  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v35 objects:v41 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v36;
LABEL_3:
    uint64_t v8 = 0LL;
    while (1)
    {
      if (*(void *)v36 != v7) {
        objc_enumerationMutation(v4);
      }
      int v9 = *(void **)(*((void *)&v35 + 1) + 8 * v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueIdentifier]);
      unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
      unsigned int v12 = [v11 isEqualToString:*(void *)(a1 + 40)];

      if (v12) {
        break;
      }
      if (v6 == (id)++v8)
      {
        id v6 = [v4 countByEnumeratingWithState:&v35 objects:v41 count:16];
        if (v6) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }

    __int128 v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v40 = "-[ADHomeInfoManager updateCurrentUserRMVSettingForHome:enabled:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%s Found Home", buf, 0xCu);
    }

    id v14 = v9;

    if (v14)
    {
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 currentUser]);
      __int128 v16 = v15;
      if (v15)
      {
        int v17 = (void *)objc_claimAutoreleasedReturnValue([v15 userSettingsForHome:v14]);
        unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 settings]);

        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 rootGroup]);
        id v20 = sub_1001F6E44(@"root.siri.identifyVoice", v19);
        id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 rootGroup]);
        id v23 = sub_1001F6E44(@"root.home.dismissedIdentifyVoiceOnboarding", v22);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 56)));
        __int128 v29 = _NSConcreteStackBlock;
        uint64_t v30 = 3221225472LL;
        __int128 v31 = sub_1001FBAC8;
        __int128 v32 = &unk_1004FD6F0;
        uint64_t v33 = *(void *)(a1 + 32);
        id v34 = *(id *)(a1 + 48);
        [v21 updateValue:v25 completionHandler:&v29];

        id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  1LL,  v29,  v30,  v31,  v32,  v33));
        [v24 updateValue:v26 completionHandler:&stru_1004F6150];
      }

      else
      {
        uint64_t v28 = *(void *)(a1 + 48);
        unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6001LL,  @"No current user found"));
        (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v18);
      }

      goto LABEL_18;
    }
  }

  else
  {
LABEL_9:
  }

  uint64_t v27 = *(void *)(a1 + 48);
  id v14 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6002LL,  @"Invalid Home unique ID for this user"));
  (*(void (**)(uint64_t, id))(v27 + 16))(v27, v14);
LABEL_18:
}

void sub_1001FBAC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3 && [*(id *)(a1 + 32) _updateHomeUserSettings])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];
  }

  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADHomeInfoManager updateCurrentUserRMVSettingForHome:enabled:completion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Updated RMV setting with error %@",  (uint8_t *)&v6,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001FBBD8(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "-[ADHomeInfoManager updateCurrentUserRMVSettingForHome:enabled:completion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Updated dismissed onboarding setting with error %@",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_1001FBC94(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 users]);
    id v4 = [v3 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v33;
LABEL_4:
      uint64_t v7 = 0LL;
      while (1)
      {
        if (*(void *)v33 != v6) {
          objc_enumerationMutation(v3);
        }
        __int16 v8 = *(void **)(*((void *)&v32 + 1) + 8 * v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueIdentifier]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 UUIDString]);
        unsigned __int8 v11 = [v10 isEqualToString:*(void *)(a1 + 40)];

        if ((v11 & 1) != 0) {
          break;
        }
        if (v5 == (id)++v7)
        {
          id v5 = [v3 countByEnumeratingWithState:&v32 objects:v40 count:16];
          if (v5) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }

      id v12 = v8;

      if (v12) {
        goto LABEL_16;
      }
    }

    else
    {
LABEL_10:
    }

    __int128 v13 = *(void **)(a1 + 40);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) owner]);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 uniqueIdentifier]);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 UUIDString]);
    LODWORD(v13) = [v13 isEqualToString:v16];

    if (!(_DWORD)v13) {
      goto LABEL_19;
    }
    int v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v37 = "-[ADHomeInfoManager updateRMVSettingForUser:enabled:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s User is home owner", buf, 0xCu);
    }

    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) owner]);
    if (v12)
    {
LABEL_16:
      unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v12 userSettingsForHome:*(void *)(*(void *)(a1 + 32) + 48)]);
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 settings]);

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 rootGroup]);
      id v21 = sub_1001F6E44(@"root.siri.identifyVoice", v20);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

      if (v22)
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 56)));
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_1001FC0B8;
        v30[3] = &unk_1004FD6F0;
        void v30[4] = *(void *)(a1 + 32);
        id v31 = *(id *)(a1 + 48);
        [v22 updateValue:v23 completionHandler:v30];
      }

      else
      {
        id v26 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315394;
          __int128 v37 = "-[ADHomeInfoManager updateRMVSettingForUser:enabled:completion:]_block_invoke";
          __int16 v38 = 2112;
          id v39 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s No RmV setting found for user: %@",  buf,  0x16u);
        }

        uint64_t v27 = *(void *)(a1 + 48);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 6008LL));
        (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v28);
      }
    }

    else
    {
LABEL_19:
      uint64_t v25 = *(void *)(a1 + 48);
      id v12 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6001LL,  @"No home user specified"));
      (*(void (**)(uint64_t, id))(v25 + 16))(v25, v12);
    }
  }

  else
  {
    uint64_t v24 = *(void *)(a1 + 48);
    id v29 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  31LL,  @"No Current Home"));
    (*(void (**)(uint64_t))(v24 + 16))(v24);
  }

void sub_1001FC0B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3 && [*(id *)(a1 + 32) _updateHomeUserSettings])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 postNotificationName:@"ADHomeInfoForThisDeviceDidChangeNotification" object:0];
  }

  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "-[ADHomeInfoManager updateRMVSettingForUser:enabled:completion:]_block_invoke";
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Updated RMV setting with error %@",  (uint8_t *)&v6,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001FC1C8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = v2;
  if (!v2) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext defaultContext](&OBJC_CLASS___AFInstanceContext, "defaultContext"));
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 88LL), v3);
  if (!v2) {

  }
  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 120);
  *(void *)(v5 + 120) = v4;

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___ADPreferredMediaUserInfo);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 136);
  *(void *)(v8 + 136) = v7;

  id v10 = [*(id *)(a1 + 32) _homeManager];
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[TRIClient clientWithIdentifier:](&OBJC_CLASS___TRIClient, "clientWithIdentifier:", 124LL));
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[TRINamespace namespaceNameFromId:](&OBJC_CLASS___TRINamespace, "namespaceNameFromId:", 874LL));
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 levelForFactor:@"ByPassServerFlow" withNamespaceName:v12]);
  id v14 = v13;
  __int128 v15 = @"NO";
  if (v13)
  {
    id v16 = [v13 BOOLeanValue];
    int v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    [v17 setHomeAutomationServerFlowBypassed:v16];

    if ((_DWORD)v16) {
      __int128 v15 = @"YES";
    }
  }

  unsigned int v18 = (os_log_s *)AFSiriLogContextUtility;
  if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
  {
    int v22 = 136315394;
    id v23 = "fetchHomeContextTrialFactor";
    __int16 v24 = 2112;
    uint64_t v25 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Home Automation server flow by pass enabled: %@",  (uint8_t *)&v22,  0x16u);
  }

  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id v20 = [v19 addObserver:*(void *)(a1 + 32) selector:"_siriDataSharingOptInStatusDidChange:" name:@"ADPreferencesSiriDataSharingOptInStatusDidChangeNotification" object:0];
  *(_BYTE *)(*(void *)(a1 + 32) + 145LL) = AFIsATV(v20, v21);
}

void sub_1001FC3FC(uint64_t a1, unint64_t a2)
{
  id v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v8 = "-[ADHomeInfoManager _initWithContext:]_block_invoke_2";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1001FC7C4(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___ADHomeInfoManager);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  id v2 = -[ADHomeInfoManager _initWithContext:](v1, "_initWithContext:", v4);
  id v3 = (void *)qword_100578118;
  qword_100578118 = (uint64_t)v2;
}

unint64_t sub_1001FD0BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFFELL | *(unsigned __int8 *)(a1 + 32);
  id v4 = (os_log_s *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "-[ADOpportuneSpeakingStateManager _listeningEdgeDetectorIDsChanged]_block_invoke";
    __int16 v8 = 2048;
    uint64_t v9 = a2;
    __int16 v10 = 2048;
    unint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s state: %llu -> %llu", (uint8_t *)&v6, 0x20u);
  }

  return v3;
}

id sub_1001FD190(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _listeningEdgeDetectorIDsChanged];
}

id sub_1001FD1BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _listeningEdgeDetectorIDsChanged];
}

void sub_1001FDD54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void **)(v2 + 864);
  *(void *)(v2 + 864) = 0LL;

  if (([*(id *)(a1 + 32) _speechDelegateHasReceivedPartialResult] & 1) == 0)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      __int16 v8 = "-[ADCommandCenter(AcousticId) _saAISearchCompleted:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Canceling speech request because we have an acoustic identification but no partial results",  (uint8_t *)&v7,  0xCu);
    }

    BOOL v5 = *(void **)(a1 + 32);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 _speechDelegate]);
    [v5 cancelSpeechForDelegate:v6];
  }

uint64_t sub_1001FE9B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1001FE9C0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1001FE9D4(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "requestLifecycleObserver:requestDidEndWithInfo:origin:client:") & 1) != 0) {
    [v3 requestLifecycleObserver:a1[4] requestDidEndWithInfo:a1[5] origin:a1[7] client:a1[6]];
  }
}

void sub_1001FEA28(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "requestLifecycleObserver:requestWasCancelledWithInfo:forReason:origin:client:successorInfo:") & 1) != 0) {
    [v3 requestLifecycleObserver:a1[4] requestWasCancelledWithInfo:a1[5] forReason:a1[8] origin:a1[9] client:a1[6] successorInfo:a1[7]];
  }
}

void sub_1001FEA80(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "requestLifecycleObserver:requestWillBeginWithInfo:origin:client:") & 1) != 0) {
    [v3 requestLifecycleObserver:a1[4] requestWillBeginWithInfo:a1[5] origin:a1[7] client:a1[6]];
  }
}

void sub_1001FEB14(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADRequestLifecycleObserver);
  uint64_t v2 = (void *)qword_100578140;
  qword_100578140 = (uint64_t)v1;
}

id sub_1001FEEB4(uint64_t a1, void *a2)
{
  return _[a2 setGenerationsByDataType:*(void *)(a1 + 32)];
}

void sub_1002007E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUIDString]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) objectForKey:v2]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[AFPreferences sharedPreferencesWithInstanceContext:]( &OBJC_CLASS___AFPreferences,  "sharedPreferencesWithInstanceContext:"));
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 languageCode]);
  if (v5) {
    int v6 = (__CFString *)objc_claimAutoreleasedReturnValue([v4 languageCode]);
  }
  else {
    int v6 = @"NIL";
  }

  int v7 = objc_alloc_init(&OBJC_CLASS___NSSet);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet setByAddingObject:](v7, "setByAddingObject:", v6));

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) allValues]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v8 setByAddingObjectsFromArray:v9]);

  unint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v28 = "-[ADRemoraLanguageManager didChangeInputLanguageCodeForEndpoint:newLanguageCode:]_block_invoke";
    __int16 v29 = 2112;
    uint64_t v30 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Hub is currently set to locale: %@",  buf,  0x16u);
    unint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v28 = "-[ADRemoraLanguageManager didChangeInputLanguageCodeForEndpoint:newLanguageCode:]_block_invoke";
    __int16 v29 = 2112;
    uint64_t v30 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s languagesCurrentlyOnHub: %@", buf, 0x16u);
  }

  unsigned int v12 = [v10 containsObject:*(void *)(a1 + 48)];
  id v26 = (void *)v3;
  if (v3)
  {
    if (v3 == *(void *)(a1 + 48)) {
      __int128 v13 = "N";
    }
    else {
      __int128 v13 = "Y";
    }
  }

  else
  {
    __int128 v13 = "N";
  }

  id v14 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (v12) {
      __int128 v15 = "N";
    }
    else {
      __int128 v15 = "Y";
    }
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v28 = "-[ADRemoraLanguageManager didChangeInputLanguageCodeForEndpoint:newLanguageCode:]_block_invoke";
    __int16 v29 = 2080;
    uint64_t v30 = (void *)v15;
    __int16 v31 = 2080;
    __int128 v32 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s newLanguageAddedToHub = (%s),languageChangedForEndpoint = (%s) ",  buf,  0x20u);
  }

  [*(id *)(*(void *)(a1 + 40) + 8) setObject:*(void *)(a1 + 48) forKey:v2];
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v17 = [*(id *)(*(void *)(a1 + 40) + 8) copy];
  [v16 setLanguagesForEndpoints:v17];

  AFBackedUpPreferencesSynchronize(v18);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, AFLanguageCodeDidChangeDarwinNotification, 0LL, 0LL, 1u);
  if ((v12 & 1) == 0)
  {
    [0 setObject:*(void *)(a1 + 48) forKey:v2];
    DistributedCenter = CFNotificationCenterGetDistributedCenter();
    uint64_t v21 = (const __CFString *)AFActiveLanguageChangedNotification;
    int v22 = (const __CFDictionary *)[0 copy];
    CFNotificationCenterPostNotification(DistributedCenter, v21, 0LL, v22, 1u);
  }

  id v23 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __int16 v24 = *(void **)(a1 + 48);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v28 = "-[ADRemoraLanguageManager didChangeInputLanguageCodeForEndpoint:newLanguageCode:]_block_invoke";
    __int16 v29 = 2112;
    uint64_t v30 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s LanguageDidChange Notification sent newLanguageAddedToHub: %@",  buf,  0x16u);
  }
}

void sub_100200BC4(uint64_t a1, void *a2)
{
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id obj = a2;
  id v2 = [obj countByEnumeratingWithState:&v18 objects:v28 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v19;
    *(void *)&__int128 v3 = 136315650LL;
    __int128 v15 = v3;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        int v7 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString", v15));
        uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315394;
          id v23 = "-[ADRemoraLanguageManager syncCurrentEndpointLanguages]_block_invoke";
          __int16 v24 = 2112;
          uint64_t v25 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Checking locale for endpoint with UUID: %@",  buf,  0x16u);
        }

        __int16 v10 = -[AFInstanceContext initWithEndpointUUID:]( objc_alloc(&OBJC_CLASS___AFInstanceContext),  "initWithEndpointUUID:",  v7);
        unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[AFPreferences sharedPreferencesWithInstanceContext:]( &OBJC_CLASS___AFPreferences,  "sharedPreferencesWithInstanceContext:",  v10));
        unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 languageCode]);
        if (v12) {
          __int128 v13 = (__CFString *)objc_claimAutoreleasedReturnValue([v11 languageCode]);
        }
        else {
          __int128 v13 = @"NIL";
        }

        id v14 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = v15;
          id v23 = "-[ADRemoraLanguageManager syncCurrentEndpointLanguages]_block_invoke";
          __int16 v24 = 2112;
          uint64_t v25 = v8;
          __int16 v26 = 2112;
          uint64_t v27 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Endpoint %@ has language code: %@",  buf,  0x20u);
        }

        [*(id *)(*(void *)(a1 + 32) + 8) setObject:v13 forKey:v8];
      }

      id v4 = [obj countByEnumeratingWithState:&v18 objects:v28 count:16];
    }

    while (v4);
  }
}

void sub_100201958(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  id v4 = a2;
  [v4 setTimestamp:v3];
  [v4 setReason:*(void *)(a1 + 32)];
  [v4 setEffectiveDate:*(void *)(a1 + 40)];
  [v4 setExpirationDuration:*(double *)(a1 + 64)];
  [v4 setUserInfo:*(void *)(a1 + 48)];
}

id sub_1002022F0(uint64_t a1, void *a2)
{
  return [a2 setExpirationDuration:*(double *)(a1 + 32)];
}

void sub_100202888( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1002028F0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateRingerMuteState:a2];
}

uint64_t sub_10020292C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 16LL);
  return result;
}

id sub_100202940(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateRingerMuteState:", objc_msgSend(*(id *)(a1 + 32), "_ringerStateToken"));
}

void sub_1002029AC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADSystemMuteModeObserver);
  id v2 = (void *)qword_100578148;
  qword_100578148 = (uint64_t)v1;
}

void sub_100202E3C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    id v4 = a2;
    id v5 = objc_alloc_init(&OBJC_CLASS___SISchemaLocation);
    [v3 setLocation:v5];

    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) location]);
    [v4 coordinate];
    *(float *)&double v7 = v7;
    [v6 setLatitude:v7];

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) location]);
    [v4 coordinate];
    *(float *)&double v10 = v9;
    [v8 setLongitude:v10];

    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) location]);
    [v4 horizontalAccuracy];
    double v13 = v12;

    *(float *)&double v14 = v13;
    [v11 setHorizontalAccuracyInMeters:v14];
  }

  __int128 v15 = *(void **)(a1 + 48);
  id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100202F9C;
  block[3] = &unk_1004FD9E0;
  id v18 = v15;
  id v19 = *(id *)(a1 + 32);
  id v20 = *(id *)(a1 + 56);
  dispatch_async(v16, block);
}

void sub_100202F9C(void *a1)
{
  if (a1[4])
  {
    id v2 = -[AFInstanceContext initWithEndpointUUID:loadsEndpointOnDemand:]( objc_alloc(&OBJC_CLASS___AFInstanceContext),  "initWithEndpointUUID:loadsEndpointOnDemand:",  a1[4],  1LL);
    id v5 = -[ADPreferences initWithInstanceContext:]( objc_alloc(&OBJC_CLASS___ADPreferences),  "initWithInstanceContext:",  v2);
  }

  else
  {
    id v5 = (ADPreferences *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  }

  uint64_t v3 = (void *)a1[5];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[ADPreferences countryCode](v5, "countryCode"));
  [v3 setCountryCode:v4];

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100203054(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v4 logInstrumentation:v3 machAbsoluteTime:*(void *)(a1 + 40) turnIdentifier:*(void *)(a1 + 32)];
  }

void sub_1002037F8(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  [v4 setPeerInfo:v3];
  [v4 setContextIdentifier:a1[5]];
  [v4 setProximity:a1[8]];
  [v4 setCommandRelayProxyIdentifier:a1[6]];
  [v4 setError:a1[7]];
}

id sub_100204B3C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) deleteAllMetrics];
}

void sub_100204B48(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100204BB4;
  v3[3] = &unk_1004F65E8;
  id v4 = v1;
  [v2 fetchNextMetricsUsingBlock:v3];
}

void sub_100204BB4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [v5 setOfflineIdentifier:a3];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100204C00(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) deleteMetricsWithOfflineIdentifier:*(void *)(a1 + 40)];
}

void sub_100204C0C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v1 offlineIdentifier]);
  id v6 = (id)v3;
  if (v3)
  {
    [v2 insertMetrics:v1 withOfflineIdentifier:v3];
  }

  else
  {
    uint64_t v4 = SiriCoreUUIDStringCreate(0LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    [v2 insertMetrics:v1 withOfflineIdentifier:v5];
  }
}

void sub_100204C8C(uint64_t a1)
{
  id v2 = [(id)objc_opt_class(*(void *)(a1 + 32)) _buildOfflineMetricsMap];
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = v3;
}

id sub_100207E48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (*(uint64_t (**)(void))(v2 + 16))();
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  if ((objc_opt_respondsToSelector(v4, "setTimestamp:") & 1) != 0)
  {
    [v4 setTimestamp:*(void *)(a1 + 40)];
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      int v8 = 136315394;
      double v9 = "-[AFDiagnostics _submitMetricWithIdentifier:hotShipIdentifier:hotShipTimestamp:generation:]_block_invoke";
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Hot-ship metric 0x%lx does not respond to -setTimestamp:. Will not set timestamp.",  (uint8_t *)&v8,  0x16u);
    }
  }

  return v4;
}

id sub_100207F54(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100207FC8;
  v4[3] = &unk_1004F6800;
  void v4[4] = v2;
  void v4[5] = a1[6];
  return [v2 _submitMetricWithIdentifier:1769481 hotShipIdentifier:1769490 hotShipTimestamp:v1 generation:v4];
}

id sub_100207FC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_new(&OBJC_CLASS___AWDSiriSpeechRecognized);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _voiceRecordingEndTime]);
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend( v2,  "setDurationFromVoiceRecordingEnd:",  objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[AFDiagnostics logSpeechRecognized]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Received -logSpeechRecognized with no corresponding -logVoiceRecordingEnd. Unable to determine duration since voice recording completed.",  (uint8_t *)&v10,  0xCu);
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _voiceSendEndTime]);
  uint64_t v7 = v6;
  if (v6)
  {
    [v6 doubleValue];
    objc_msgSend( v2,  "setDurationFromVoiceSendEnd:",  objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }

  else
  {
    int v8 = (os_log_s *)AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[AFDiagnostics logSpeechRecognized]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Received -logSpeechRecognized with no corresponding -logVoiceSendEnd. Unable to determine duration since voic e send completed.",  (uint8_t *)&v10,  0xCu);
    }
  }

  return v2;
}

void sub_100208164(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002081EC;
  v3[3] = &unk_1004F67D8;
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  [v1 _submitMetricWithIdentifier:1769480 hotShipIdentifier:1769489 hotShipTimestamp:v2 generation:v3];
}

id sub_1002081EC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) metricValue];
}

id sub_1002081F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  [v2 _setVoiceSendEndTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002082A8;
  v7[3] = &unk_1004F67B0;
  void v7[4] = v4;
  void v7[5] = *(void *)(a1 + 40);
  return [v4 _submitMetricWithIdentifier:1769477 hotShipIdentifier:1769486 hotShipTimestamp:v5 generation:v7];
}

id sub_1002082A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_new(&OBJC_CLASS___AWDSiriVoiceSendEnd);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _voiceSendStartTime]);
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDuration:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }

  else
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      int v8 = "-[AFDiagnostics logVoiceSendEnd]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Received -logVoiceSendEnd with no corresponding -logVoiceSendStart. Unable to determine how long voice transfer lasted.",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v2;
}

id sub_1002083AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  [v2 _setVoiceSendStartTime:v3];

  return [*(id *)(a1 + 32) _submitMetricWithIdentifier:1769476 hotShipIdentifier:1769485 hotShipTimestamp:*(void *)(a1 + 48) generation:&stru_1004F6788];
}

AWDSiriVoiceSendStart *__cdecl sub_100208424(id a1)
{
  return objc_opt_new(&OBJC_CLASS___AWDSiriVoiceSendStart);
}

id sub_100208440(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  [v2 _setVoiceRecordingEndTime:v3];

  id v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002084F4;
  v7[3] = &unk_1004F6748;
  void v7[4] = v4;
  void v7[5] = *(void *)(a1 + 40);
  return [v4 _submitMetricWithIdentifier:1769475 hotShipIdentifier:1769484 hotShipTimestamp:v5 generation:v7];
}

id sub_1002084F4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_new(&OBJC_CLASS___AWDSiriVoiceRecordingEnd);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _voiceRecordingStartTime]);
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDuration:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }

  else
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      int v8 = "-[AFDiagnostics logVoiceRecordingEnd]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Received -logVoiceRecordingEnd with no corresponding -logVoiceRecordingStart. Unable to determine how long vo ice recording lasted.",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v2;
}

id sub_1002085F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  [v2 _setVoiceRecordingStartTime:v3];

  return [*(id *)(a1 + 32) _submitMetricWithIdentifier:1769474 hotShipIdentifier:1769483 hotShipTimestamp:*(void *)(a1 + 48) generation:&stru_1004F6720];
}

AWDSiriVoiceRecordingStart *__cdecl sub_100208670(id a1)
{
  return objc_opt_new(&OBJC_CLASS___AWDSiriVoiceRecordingStart);
}

void sub_10020868C(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100208724;
  v6[3] = &unk_1004F66E0;
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  id v7 = v4;
  uint64_t v8 = v5;
  [v2 _submitMetricWithIdentifier:1769479 hotShipIdentifier:1769488 hotShipTimestamp:v3 generation:v6];
}

id sub_100208724(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_new(&OBJC_CLASS___AWDSiriServerConnectionFailed);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) domain]);
  [v2 setErrorDomain:v3];

  objc_msgSend(v2, "setErrorCode:", objc_msgSend(*(id *)(a1 + 32), "code"));
  [v2 setConnectionType:*(unsigned int *)(a1 + 40)];
  return v2;
}

id sub_10020879C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v1 = a1[5];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100208818;
  v5[3] = &unk_1004F6690;
  uint64_t v3 = a1[6];
  void v5[4] = v2;
  void v5[5] = v3;
  void v5[6] = a1[7];
  return [v2 _submitMetricWithIdentifier:1769478 hotShipIdentifier:1769487 hotShipTimestamp:v1 generation:v5];
}

id sub_100208818(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_new(&OBJC_CLASS___AWDSiriServerConnectionOpen);
  [v2 setConnectionType:*(unsigned int *)(a1 + 40)];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _connectionStartTime]);
  id v4 = v3;
  if (v3)
  {
    [v3 doubleValue];
    objc_msgSend(v2, "setDuration:", objc_msgSend(*(id *)(a1 + 32), "_durationInMillisecondsFromTime:toTime:"));
  }

  else
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextAnalysis;
    if (os_log_type_enabled(AFSiriLogContextAnalysis, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[AFDiagnostics logConnectionOpenWithConnectionType:]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Received -logConnectionOpenWithConnectionType: with no corresponding -logConnectionStart. Unable to determine how long it took to open the connection.",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v2;
}

id sub_100208924(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 40)));
  [v2 _setConnectionStartTime:v3];

  return [*(id *)(a1 + 32) _submitMetricWithIdentifier:1769473 hotShipIdentifier:1769482 hotShipTimestamp:*(void *)(a1 + 48) generation:&stru_1004F6668];
}

AWDSiriServerConnectionStart *__cdecl sub_100208998(id a1)
{
  return objc_opt_new(&OBJC_CLASS___AWDSiriServerConnectionStart);
}

void sub_1002089B8(uint64_t a1)
{
  uint64_t v2 = -[AWDServerConnection initWithComponentId:andBlockOnConfiguration:]( objc_alloc(&OBJC_CLASS___AWDServerConnection),  "initWithComponentId:andBlockOnConfiguration:",  27LL,  0LL);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose((const void *)(v27 - 128), 8) = v2;
}

void sub_100208A38(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AFDiagnostics);
  uint64_t v2 = (void *)qword_100578158;
  qword_100578158 = (uint64_t)v1;
}

void sub_10020A1D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10020A2D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v23 = 0LL;
  __int16 v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  char v26 = 0;
  uint64_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  __int128 v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  id v17 = sub_10020A40C;
  id v18 = &unk_1004F68C8;
  id v12 = v7;
  id v19 = v12;
  id v13 = v8;
  uint64_t v14 = *(void *)(a1 + 32);
  id v20 = v13;
  uint64_t v21 = v14;
  int v22 = &v23;
  dispatch_async(v11, &v15);
  if (*((_BYTE *)v24 + 24)) {
    objc_msgSend(WeakRetained, "clearUnsavedRecords", v15, v16, v17, v18, v19);
  }

  _Block_object_dispose(&v23, 8);
}

void sub_10020A3F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10020A40C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
    if (v3)
    {
      if (v5)
      {
        int v7 = 136315394;
        id v8 = "-[ADCloudKitSharedZoneUpdater _retryRecordSave]_block_invoke_2";
        __int16 v9 = 2112;
        uint64_t v10 = v2;
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Partial failure unhandled. File a bug for error (%@).",  (uint8_t *)&v7,  0x16u);
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    }

    else
    {
      if (v5)
      {
        int v7 = 136315394;
        id v8 = "-[ADCloudKitSharedZoneUpdater _retryRecordSave]_block_invoke";
        __int16 v9 = 2112;
        uint64_t v10 = v2;
        _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error even during retry (%@)",  (uint8_t *)&v7,  0x16u);
      }

      [*(id *)(a1 + 48) _startRetryTimer];
    }
  }

  else
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      id v8 = "-[ADCloudKitSharedZoneUpdater _retryRecordSave]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Success in retry", (uint8_t *)&v7, 0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
  }

id sub_10020A5B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  return _[*(id *)(a1 + 32) _retryRecordSave];
}

void sub_10020A5E4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v38 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 56) zone]);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);
  id v6 = sub_1001030CC(v3, v5);
  int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allValues]);
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v7 count]));
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v10 = v7;
  id v11 = [v10 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v33;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)i);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:v15]);
        [v9 setObject:v15 forKey:v16];
      }

      id v12 = [v10 countByEnumeratingWithState:&v32 objects:v36 count:16];
    }

    while (v12);
  }

  id v17 = -[CKFetchRecordsOperation initWithRecordIDs:]( objc_alloc(&OBJC_CLASS___CKFetchRecordsOperation),  "initWithRecordIDs:",  v8);
  __int16 v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3221225472LL;
  char v26 = sub_10020A8B8;
  uint64_t v27 = &unk_1004F7220;
  id v28 = *(id *)(a1 + 32);
  id v31 = *(id *)(a1 + 48);
  id v18 = v8;
  id v29 = v18;
  id v19 = v9;
  id v30 = v19;
  -[CKFetchRecordsOperation setFetchRecordsCompletionBlock:](v17, "setFetchRecordsCompletionBlock:", &v24);
  -[CKFetchRecordsOperation setQualityOfService:](v17, "setQualityOfService:", *(void *)(a1 + 56), v24, v25, v26, v27);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v21 = *(void **)(v20 + 24);
  if (*(_BYTE *)(v20 + 16)) {
    int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 privateCloudDatabase]);
  }
  else {
    int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 sharedCloudDatabase]);
  }
  uint64_t v23 = v22;
  [v22 addOperation:v17];
}

void sub_10020A8B8(uint64_t a1, void *a2, void *a3)
{
  id v24 = a2;
  id v5 = a3;
  if (v5)
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      id v31 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
      __int16 v32 = 2112;
      uint64_t v33 = v22;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch values for keys: (%@)",  buf,  0x16u);
    }

    if (sub_1002FF294(v5))
    {
      int v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_20:
        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
        goto LABEL_23;
      }

      *(_DWORD *)__int128 buf = 136315138;
      id v31 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
    }

    else
    {
      int v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)__int128 buf = 136315138;
      id v31 = "-[ADCloudKitSharedZoneUpdater fetchValuesForKeysFromSharedStore:withQOS:completion:]_block_invoke";
    }

    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%s Keychain sync error", buf, 0xCu);
    goto LABEL_20;
  }

  uint64_t v23 = 0LL;
  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v9 = a1;
  id v10 = *(id *)(a1 + 40);
  id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = 0LL;
    uint64_t v14 = *(void *)v26;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v14) {
          objc_enumerationMutation(v10);
        }
        uint64_t v16 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKey:", v16, v23));
        id v18 = v17;
        if (v17)
        {
          id v19 = sub_100103288(v17);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 48) objectForKey:v16]);
          -[NSMutableDictionary setObject:forKey:](v8, "setObject:forKey:", v20, v21);
        }

        else
        {
          uint64_t v20 = v13;
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4012LL));
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v12);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  (*(void (**)(void))(*(void *)(v9 + 56) + 16LL))();
  id v5 = v23;
LABEL_23:
}

void sub_10020ABC4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v26 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) zone]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 zoneID]);

  if (v4)
  {
    id v5 = sub_100103228(*(void **)(a1 + 40), v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    int v7 = objc_alloc(&OBJC_CLASS___CKFetchRecordsOperation);
    id v24 = v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
    uint64_t v9 = -[CKFetchRecordsOperation initWithRecordIDs:](v7, "initWithRecordIDs:", v8);

    id v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    id v19 = sub_10020AE4C;
    uint64_t v20 = &unk_1004F68A0;
    id v21 = *(id *)(a1 + 40);
    id v23 = *(id *)(a1 + 48);
    id v10 = v6;
    id v22 = v10;
    -[CKFetchRecordsOperation setFetchRecordsCompletionBlock:](v9, "setFetchRecordsCompletionBlock:", &v17);
    -[CKFetchRecordsOperation setQualityOfService:]( v9,  "setQualityOfService:",  *(void *)(a1 + 56),  v17,  v18,  v19,  v20);
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(v11 + 24);
    if (*(_BYTE *)(v11 + 16)) {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 privateCloudDatabase]);
    }
    else {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedCloudDatabase]);
    }
    uint64_t v16 = v13;
    [v13 addOperation:v9];
  }

  else
  {
    uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v26 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s Zone ID is nil. Bailing.", buf, 0xCu);
    }

    uint64_t v15 = *(void *)(a1 + 48);
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  4021LL,  @"Zone ID is nil."));
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v10);
  }
}

void sub_10020AE4C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = a1[4];
      int v15 = 136315394;
      uint64_t v16 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch value for key: (%@)",  (uint8_t *)&v15,  0x16u);
    }

    if (sub_1002FF294(v6))
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        (*(void (**)(void))(a1[6] + 16LL))();
        goto LABEL_14;
      }

      int v15 = 136315138;
      uint64_t v16 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
    }

    else
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR)) {
        goto LABEL_11;
      }
      int v15 = 136315138;
      uint64_t v16 = "-[ADCloudKitSharedZoneUpdater fetchValueForKeyFromSharedStore:withQOS:completion:]_block_invoke";
    }

    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Keychain sync error",  (uint8_t *)&v15,  0xCu);
    goto LABEL_11;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:a1[5]]);
  id v10 = v9;
  if (v9)
  {
    id v11 = sub_100103288(v9);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    (*(void (**)(void, void *, void))(a1[6] + 16LL))(a1[6], v12, 0LL);
  }

  else
  {
    uint64_t v13 = a1[6];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4012LL));
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
  }

LABEL_14:
}

void sub_10020B070(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) zone]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneID]);

  if (v3)
  {
    id v4 = *(id *)(a1 + 40);
    __int128 v28 = v3;
    id v5 = v3;
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id v7 = v4;
    id v8 = [v7 countByEnumeratingWithState:&v32 objects:buf count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v33;
      do
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v33 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v12, v28));
          uint64_t v14 = sub_100102E18(v12, v13, v5);
          int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

          if (v15)
          {
            id v16 = [v12 copy];
            -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v15, v16);
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v32 objects:buf count:16];
      }

      while (v9);
    }

    id v17 = sub_1001030CC(*(void **)(a1 + 48), v5);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 allValues]);
    if (-[NSMutableDictionary count](v6, "count") || [v19 count])
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v6, "allValues", v28));
      uint64_t v21 = *(void *)(a1 + 32);
      id v22 = *(void **)(v21 + 24);
      int v23 = *(unsigned __int8 *)(v21 + 16);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_10020B3F4;
      v29[3] = &unk_1004F6878;
      void v29[4] = v21;
      id v30 = v6;
      id v31 = *(id *)(a1 + 56);
      sub_100103390(v20, v19, 25LL, v22, v23, 0LL, v29);
    }

    else
    {
      __int128 v26 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int128 v37 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%s Zero records created, and zero records deleted",  buf,  0xCu);
      }

      uint64_t v27 = *(void *)(a1 + 56);
      if (v27) {
        (*(void (**)(uint64_t, void))(v27 + 16))(v27, 0LL);
      }
    }

    uint64_t v3 = v28;
    goto LABEL_19;
  }

  id v24 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v37 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "%s zoneID is nil. Abort", buf, 0xCu);
  }

  uint64_t v25 = *(void *)(a1 + 56);
  if (v25)
  {
    id v6 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 4020LL));
    (*(void (**)(uint64_t, NSMutableDictionary *))(v25 + 16))(v25, v6);
LABEL_19:
  }
}

void sub_10020B3F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 8);
  v8[2] = sub_10020B4A4;
  v8[3] = &unk_1004FDA30;
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

uint64_t sub_10020B4A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      id v6 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke_2";
      __int16 v7 = 2112;
      uint64_t v8 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Failed to save key,value pairs with error (%@)",  (uint8_t *)&v5,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 40) + 32) addEntriesFromDictionary:*(void *)(a1 + 48)];
    [*(id *)(a1 + 40) _notifyFailure:*(void *)(a1 + 32)];
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315138;
    id v6 = "-[ADCloudKitSharedZoneUpdater addDictionaryToSharedStore:recordKeysForDeletion:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Successfully uploaded",  (uint8_t *)&v5,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10020B5E4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) zone]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneID]);

  uint64_t v4 = sub_100102E18(*(void **)(a1 + 40), *(void **)(a1 + 48), v3);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v17 = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(void **)(v7 + 24);
  int v10 = *(unsigned __int8 *)(v7 + 16);
  v12[0] = _NSConcreteStackBlock;
  void v12[2] = sub_10020B74C;
  void v12[3] = &unk_1004F6850;
  v12[1] = 3221225472LL;
  void v12[4] = v7;
  id v13 = v8;
  id v14 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = *(id *)(a1 + 56);
  id v11 = v5;
  sub_100103390(v6, 0LL, 17LL, v9, v10, 0LL, v12);
}

void sub_10020B74C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  int v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10020B828;
  v9[3] = &unk_1004F7960;
  id v10 = v3;
  id v11 = v4;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v8 = v3;
  dispatch_async(v5, v9);
}

uint64_t sub_10020B828(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (v2)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      int v10 = 136315906;
      id v11 = "-[ADCloudKitSharedZoneUpdater addKeyToSharedStore:value:completion:]_block_invoke_3";
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Failed to save key (%@) value (%@) with error (%@)",  (uint8_t *)&v10,  0x2Au);
    }

    uint64_t v4 = *(void *)(a1 + 64);
    int v5 = *(void **)(*(void *)(a1 + 56) + 32LL);
    id v6 = [*(id *)(a1 + 40) copy];
    [v5 setObject:v4 forKey:v6];

    [*(id *)(a1 + 56) _notifyFailure:*(void *)(a1 + 32)];
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315138;
    id v11 = "-[ADCloudKitSharedZoneUpdater addKeyToSharedStore:value:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s Successfully uploaded",  (uint8_t *)&v10,  0xCu);
  }

  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_10020E184(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0
    || (uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString), (objc_opt_isKindOfClass(v5, v7) & 1) != 0))
  {
    id v8 = v5;
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSNumber);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
    {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v8 stringValue]);

      id v8 = (id)v10;
    }

    [*(id *)(a1 + 32) setObject:v8 forKey:v11];
  }
}

void sub_10020E250(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0
    && (uint64_t v8 = objc_opt_class(&OBJC_CLASS___AFSpeechRecognition), (objc_opt_isKindOfClass(v6, v8) & 1) != 0))
  {
    [*(id *)(a1 + 32) setObject:v6 forKey:v5];
  }

  else
  {
    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      id v11 = "-[ADRequestDispatcherService postMUXTestResultCandidateWithAssistantId:requestId:rcId:sharedUserIdToSpeechRe"
            "cognitionDict:voiceIdConfidenceScores:]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Skipping sharedUserIdToSpeechRecognitionDict key: %@",  (uint8_t *)&v10,  0x16u);
    }
  }
}

id sub_10020E378(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendMultiUserInfoWithDeviceAssistantId:*(void *)(a1 + 40) multiUserInfo:a2];
}

uint64_t sub_10020E388(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10020E3C0(id a1, AFExperimentConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  -[AFExperimentConfigurationMutating setType:](v2, "setType:", 1LL);
  -[AFExperimentConfigurationMutating setIdentifier:]( v2,  "setIdentifier:",  AFInvocationFeedbacksExperimentConfigurationIdentifier);
  -[AFExperimentConfigurationMutating setVersion:](v2, "setVersion:", @"1.0.0");
  -[AFExperimentConfigurationMutating setSalt:](v2, "setSalt:", @"DE3507E9-7F1D-4BC9-A2B1-E32FB56890D1");
  id v3 = +[AFExperimentGroup newWithBuilder:](&OBJC_CLASS___AFExperimentGroup, "newWithBuilder:", &stru_1004F6998);
  -[AFExperimentConfigurationMutating setControlGroup:](v2, "setControlGroup:", v3);

  id v4 = +[AFExperimentGroup newWithBuilder:](&OBJC_CLASS___AFExperimentGroup, "newWithBuilder:", &stru_1004F69B8);
  v9[0] = v4;
  id v5 = +[AFExperimentGroup newWithBuilder:](&OBJC_CLASS___AFExperimentGroup, "newWithBuilder:", &stru_1004F69D8);
  v9[1] = v5;
  id v6 = +[AFExperimentGroup newWithBuilder:](&OBJC_CLASS___AFExperimentGroup, "newWithBuilder:", &stru_1004F69F8);
  v9[2] = v6;
  id v7 = +[AFExperimentGroup newWithBuilder:](&OBJC_CLASS___AFExperimentGroup, "newWithBuilder:", &stru_1004F6A18);
  v9[3] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v9, 4LL));
  -[AFExperimentConfigurationMutating setExperimentGroups:](v2, "setExperimentGroups:", v8);
}

void sub_10020E528(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  -[AFExperimentGroupMutating setIdentifier:](v2, "setIdentifier:", @"phase_four");
  -[AFExperimentGroupMutating setAllocation:](v2, "setAllocation:", 0LL);
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100513618;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  -[AFExperimentGroupMutating setProperties:](v2, "setProperties:", v3);
}

void sub_10020E5E0(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  -[AFExperimentGroupMutating setIdentifier:](v2, "setIdentifier:", @"phase_three");
  -[AFExperimentGroupMutating setAllocation:](v2, "setAllocation:", 0LL);
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_100513600;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  -[AFExperimentGroupMutating setProperties:](v2, "setProperties:", v3);
}

void sub_10020E698(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  -[AFExperimentGroupMutating setIdentifier:](v2, "setIdentifier:", @"phase_two");
  -[AFExperimentGroupMutating setAllocation:](v2, "setAllocation:", 0LL);
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_1005135E8;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  -[AFExperimentGroupMutating setProperties:](v2, "setProperties:", v3);
}

void sub_10020E750(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  -[AFExperimentGroupMutating setIdentifier:](v2, "setIdentifier:", @"phase_one");
  -[AFExperimentGroupMutating setAllocation:](v2, "setAllocation:", 0LL);
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_1005135D0;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  -[AFExperimentGroupMutating setProperties:](v2, "setProperties:", v3);
}

void sub_10020E808(id a1, AFExperimentGroupMutating *a2)
{
  uint64_t v2 = a2;
  -[AFExperimentGroupMutating setIdentifier:](v2, "setIdentifier:", @"control");
  -[AFExperimentGroupMutating setAllocation:](v2, "setAllocation:", 100LL);
  uint64_t v4 = AFInvocationFeedbacksExperimentGroupPropertyKeyFeatureGroups;
  id v5 = &off_1005135B8;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v5,  &v4,  1LL));
  -[AFExperimentGroupMutating setProperties:](v2, "setProperties:", v3);
}

void sub_10020F290( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_10020F314(void *a1)
{
  id v5 = 0LL;
  if (!qword_100578170)
  {
    __int128 v6 = off_1004F6A38;
    uint64_t v7 = 0LL;
    qword_100578170 = _sl_dlopen(&v6, &v5);
  }

  uint64_t v2 = (void *)qword_100578170;
  if (!qword_100578170)
  {
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *BulletinBoardLibrary(void)"));
    objc_msgSend( a1,  "handleFailureInFunction:file:lineNumber:description:",  v2,  @"AFBulletin+SANotificationObject.m",  18,  @"%s",  v5);

    __break(1u);
    goto LABEL_7;
  }

  id v3 = v5;
  if (v5) {
LABEL_7:
  }
    free(v3);
  uint64_t result = dlsym(v2, "BBBulletinContentTypeIncomingCall");
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = result;
  qword_100578168 = *(void *)(*(void *)(a1[4] + 8LL) + 24LL);
  return result;
}

void *sub_1002114D4(void *result)
{
  if (*(void *)(result[4] + 72LL)) {
    return [*(id *)(result[4] + 72) removeObject:result[5]];
  }
  return result;
}

id sub_1002114F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

void sub_100211540(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v5)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      int v23 = "-[ADRemoraHomeKitSettingsManager _subscribeToSettingsForInstanceContext:]_block_invoke";
      __int16 v24 = 2112;
      uint64_t v25 = v14;
      __int16 v26 = 2112;
      id v27 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to subscribe to accessory settings for endpoint=%@ due to error=%@",  buf,  0x20u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(a1 + 48);
    uint64_t v8 = *(dispatch_queue_s **)(v6 + 8);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10021174C;
    v19[3] = &unk_1004FD4C0;
    void v19[4] = v6;
    uint64_t v9 = &v20;
    id v20 = v7;
    int v10 = &v21;
    id v21 = *(id *)(a1 + 32);
    id v11 = v19;
  }

  else
  {
    if (v5)
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      int v23 = "-[ADRemoraHomeKitSettingsManager _subscribeToSettingsForInstanceContext:]_block_invoke";
      __int16 v24 = 2112;
      uint64_t v25 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Successfully subscribed to accessory settings for endpoint=%@",  buf,  0x16u);
    }

    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = *(void **)(a1 + 48);
    uint64_t v8 = *(dispatch_queue_s **)(v12 + 8);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100211840;
    v16[3] = &unk_1004FD4C0;
    void v16[4] = v12;
    uint64_t v9 = &v17;
    id v17 = v13;
    int v10 = &v18;
    id v18 = *(id *)(a1 + 32);
    id v11 = v16;
  }

  dispatch_async(v8, v11);
}

void sub_10021174C(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForKey:a1[5]]);
  id v3 = (void *)a1[6];

  if (v2 == v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = a1[6];
      int v6 = 136315394;
      uint64_t v7 = "-[ADRemoraHomeKitSettingsManager _subscribeToSettingsForInstanceContext:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Adding %@ to pending list.",  (uint8_t *)&v6,  0x16u);
    }

    [*(id *)(a1[4] + 64) addObject:a1[6]];
  }

void sub_100211840(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) objectForKey:a1[5]]);
  id v3 = (void *)a1[6];

  if (v2 == v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = a1[6];
      int v6 = 136315394;
      uint64_t v7 = "-[ADRemoraHomeKitSettingsManager _subscribeToSettingsForInstanceContext:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Removing %@ from pending list.",  (uint8_t *)&v6,  0x16u);
    }

    [*(id *)(a1[4] + 64) removeObject:a1[6]];
  }

void sub_100211934(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5)
  {
    __int16 v8 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = v8;
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
      *(_DWORD *)__int128 buf = 136315394;
      id v17 = "-[ADRemoraHomeKitSettingsManager _fetchSettingsForKeyPaths:endpointID:]_block_invoke";
      __int16 v18 = 2112;
      id v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s error:%@", buf, 0x16u);
    }
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(dispatch_queue_s **)(v11 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100211A9C;
    block[3] = &unk_1004FD4C0;
    void block[4] = v11;
    id v14 = v6;
    id v15 = *(id *)(a1 + 40);
    dispatch_async(v12, block);
  }
}

id sub_100211A9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleSettings:*(void *)(a1 + 40) forAccessoryIdentifier:*(void *)(a1 + 48)];
}

id sub_100211AAC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleSettings:*(void *)(a1 + 40) forAccessoryIdentifier:*(void *)(a1 + 48)];
}

id sub_100211ABC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchSettingsForKeyPaths:*(void *)(*(void *)(a1 + 32) + 40) endpointID:*(void *)(a1 + 40)];
}

void sub_100211ACC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointUUID]);
  [*(id *)(*(void *)(a1 + 40) + 24) removeObjectForKey:v2];
  [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:v2];
  id v3 = [*(id *)(*(void *)(a1 + 40) + 64) copy];
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v27 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v20;
    *(void *)&__int128 v6 = 136315394LL;
    __int128 v18 = v6;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v4);
        }
        int v10 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "endpointUUID", v18, (void)v19));
        id v12 = v2;
        id v13 = v11;
        if (v12 == v13)
        {

          if (!v2) {
            continue;
          }
LABEL_12:
          __int16 v16 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            uint64_t v17 = *(void *)(a1 + 32);
            *(_DWORD *)__int128 buf = v18;
            __int16 v24 = "-[ADRemoraHomeKitSettingsManager homehubManager:didDeactivateEndpointWithContext:]_block_invoke";
            __int16 v25 = 2112;
            uint64_t v26 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Endpoint deactivated, remove %@ from pending list.",  buf,  0x16u);
          }

          [*(id *)(*(void *)(a1 + 40) + 64) removeObject:v10];
          continue;
        }

        id v14 = v13;
        if (!v2 || !v13)
        {

          continue;
        }

        unsigned int v15 = [v12 isEqual:v13];

        if (v15) {
          goto LABEL_12;
        }
      }

      id v7 = [v4 countByEnumeratingWithState:&v19 objects:v27 count:16];
    }

    while (v7);
  }
}

id sub_100211CF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _subscribeToSettingsForInstanceContext:*(void *)(a1 + 40)];
}

void sub_100211D04(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        objc_msgSend( *(id *)(a1 + 32),  "_subscribeToSettingsForInstanceContext:",  *(void *)(*((void *)&v8 + 1) + 8 * (void)v7),  (void)v8);
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

uint64_t sub_100212570(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_100212584(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) invokeWithValue:a2];
}

void sub_100212590(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v10 = 136316418;
      __int128 v11 = "+[ADRemoraHomeKitSettingsManager setAllowHeySiriHomeKitSettingForAccessory:forHomeId:homeManager:value:compl"
            "etion:]_block_invoke";
      __int16 v12 = 2112;
      id v13 = @"root.siri.allowHeySiri";
      __int16 v14 = 1024;
      int v15 = v5;
      __int16 v16 = 2112;
      id v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v6;
      __int16 v20 = 2112;
      uint64_t v21 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Update of setting %@ with value %{BOOL}d completed with error: %@. accessoryId=%@, homeId=%@",  (uint8_t *)&v10,  0x3Au);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = *(unsigned __int8 *)(a1 + 56);
    int v10 = 136315650;
    __int128 v11 = "+[ADRemoraHomeKitSettingsManager setAllowHeySiriHomeKitSettingForAccessory:forHomeId:homeManager:value:complet"
          "ion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = @"root.siri.allowHeySiri";
    __int16 v14 = 1024;
    int v15 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Update of setting %@ with value %{BOOL}d completed",  (uint8_t *)&v10,  0x1Cu);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v3);
  }
}

void sub_1002139D0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AFAnalyticsConnection);
  id v2 = (void *)qword_100578190;
  qword_100578190 = (uint64_t)v1;
}

id sub_1002139F8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _speechIdUpdatedForEndpointUUID:*(void *)(a1 + 40)];
}

uint64_t sub_100213A04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100213A10(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stageEvents:*(void *)(a1 + 40)];
}

id sub_100213A1C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _stageEvent:*(void *)(a1 + 40)];
}

void sub_100213A28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(dispatch_queue_s **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100213D84;
  v7[3] = &unk_1004FCB88;
  __int128 v10 = *(_OWORD *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100213AB0(uint64_t a1)
{
  id v2 = sub_100213AFC(*(void *)(a1 + 40), *(void *)(a1 + 48), 0LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  [*(id *)(a1 + 32) _stageEvent:v3];
}

AFAnalyticsEvent *sub_100213AFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  if (v5)
  {
    id v16 = 0LL;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v5,  0LL,  &v16));
    id v8 = v16;
    if (v8)
    {
      uint64_t v9 = (os_log_s *)AFSiriLogContextAnalytics;
      if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int16 v18 = "_AFAnalyticsEventCreate";
        __int16 v19 = 2112;
        id v20 = v5;
        __int16 v21 = 2112;
        id v22 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Failed to serialize context %@ to JSON due to error %@.",  buf,  0x20u);
      }

      uint64_t v7 = 0LL;
    }

    if ([v7 length])
    {
      __int128 v10 = objc_alloc(&OBJC_CLASS___NSData);
      id v11 = v7;
      __int16 v12 = -[NSData initWithBytes:length:]( v10,  "initWithBytes:length:",  [v11 bytes],  objc_msgSend(v11, "length"));
      uint64_t v13 = 2LL;
    }

    else
    {
      __int16 v12 = 0LL;
      uint64_t v13 = 0LL;
    }
  }

  else
  {
    __int16 v12 = 0LL;
    uint64_t v13 = 0LL;
  }

  objc_autoreleasePoolPop(v6);
  __int16 v14 = -[AFAnalyticsEvent initWithDeliveryStream:type:timestamp:contextDataType:contextData:]( objc_alloc(&OBJC_CLASS___AFAnalyticsEvent),  "initWithDeliveryStream:type:timestamp:contextDataType:contextData:",  0LL,  a1,  AFMachAbsoluteTimeGetNanoseconds(a2),  v13,  v12);

  return v14;
}

void sub_100213D84(uint64_t a1)
{
  id v2 = sub_100213AFC(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  [*(id *)(a1 + 40) _stageEvent:v3];
}

void sub_100213DD0(uint64_t a1)
{
  id v2 = sub_100213EC4(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10021403C;
  v7[3] = &unk_1004FCB88;
  __int128 v10 = *(_OWORD *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100213E64(uint64_t a1)
{
  id v2 = sub_100213EC4(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 40));
  id v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = sub_100213AFC(*(void *)(a1 + 48), *(void *)(a1 + 56), v5);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [*(id *)(a1 + 32) _stageEvent:v4];
}

id sub_100213EC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (*((uint64_t (**)(id))v3 + 2))(v3);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

void sub_100214024(_Unwind_Exception *a1)
{
}

void sub_10021403C(uint64_t a1)
{
  id v2 = sub_100213AFC(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  [*(id *)(a1 + 40) _stageEvent:v3];
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 16LL));
}

void sub_100214094(uint64_t a1)
{
  id v2 = sub_100213AFC(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void **)(a1 + 32));
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  [*(id *)(a1 + 40) _stageEvent:v3];
}

void sub_1002140E0(uint64_t a1)
{
}

uint64_t sub_1002140EC(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
    int v5 = 136315394;
    id v6 = "-[AFAnalytics boostQueuedEvents:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Completed boosting event producer queue %@",  (uint8_t *)&v5,  0x16u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002141B8(uint64_t a1)
{
  id v2 = NSStringFromClass(*(Class *)(a1 + 48));
  id v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _service:1]);
  [v3 logInstrumentationOfType:v4 machAbsoluteTime:*(void *)(a1 + 56) endpointUUID:*(void *)(*(void *)(a1 + 32) + 32) turnIdentifier:*(void *)(a1 + 40)];
}

void sub_10021421C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _service:1]);
  [v1 endEventsGrouping];
}

void sub_100214250(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _service:1]);
  [v1 beginEventsGrouping];
}

void sub_100214284(uint64_t a1)
{
  id v7 = objc_alloc_init(&OBJC_CLASS___SISchemaClientEvent);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) turnID]);
  id v3 = objc_alloc_init(&OBJC_CLASS___SISchemaClientEventMetadata);
  [v7 setEventMetadata:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v7 eventMetadata]);
  [v4 setTurnID:v2];

  [v7 setEventType:*(void *)(a1 + 40)];
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _service:1]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 data]);
  [v5 stageUEIEventData:v6 timestamp:*(void *)(a1 + 56) completion:0];
}

void sub_1002143A0(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___AFAnalytics);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  id v2 = -[AFAnalytics initWithInstanceContext:](v1, "initWithInstanceContext:", v4);
  id v3 = (void *)qword_100578180;
  qword_100578180 = (uint64_t)v2;
}

uint64_t sub_100214B7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100214BD0(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___ADLocationService);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedQueue](&OBJC_CLASS___ADCommandCenter, "sharedQueue"));
  id v2 = -[ADLocationService initWithDispatchQueue:](v1, "initWithDispatchQueue:", v4);
  id v3 = (void *)qword_1005781A0;
  qword_1005781A0 = (uint64_t)v2;
}

void sub_100215F64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_100215FCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_100216034(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_10021609C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (v3) {
    BOOL v4 = xpc_dictionary_get_BOOL(v3, AFExternalRequestReplyKeyResult);
  }
  else {
    BOOL v4 = 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
}

void sub_1002165BC(_Unwind_Exception *a1)
{
}

void sub_10021696C(_Unwind_Exception *a1)
{
}

void sub_100216D50(uint64_t a1)
{
}

id sub_100216D58(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a2;
  return [*(id *)(a1 + 32) invoke];
}

void sub_100216D6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100216DDC;
  v3[3] = &unk_1004F6BB8;
  id v4 = v1;
  [v2 fetchAvailableAnnouncementRequestTypesWithCompletion:v3];
}

uint64_t sub_100216DDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100216DEC(uint64_t a1)
{
}

id sub_100216DF4(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a2;
  id result = [*(id *)(a1 + 32) invoke];
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v4 != *(unsigned __int8 *)(a1 + 56))
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextConnection;
    if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      id v7 = "-[AFSiriUserNotificationRequestCapabilityManager hasEligibleSetup]_block_invoke_2";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Eligible capabilities changed, notifying observers",  (uint8_t *)&v6,  0xCu);
      int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    }

    return objc_msgSend( *(id *)(a1 + 40),  "notifyObserversOfCurrentEligibleSetupState:onPlatform:",  v4 != 0,  objc_msgSend((id)objc_opt_class(*(void *)(*(void *)(a1 + 40) + 24)), "platform"));
  }

  return result;
}

void sub_100216F08(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100216F78;
  v3[3] = &unk_1004F6BB8;
  id v4 = v1;
  [v2 fetchEligibleAnnouncementRequestTypesWithCompletion:v3];
}

uint64_t sub_100216F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100217264(uint64_t a1)
{
  id v1 = [objc_alloc((Class)objc_opt_class(*(void *)(a1 + 32))) _initWithPlatform:1];
  id v2 = (void *)qword_1005781B0;
  qword_1005781B0 = (uint64_t)v1;
}

id sub_100217B74(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained peerLocationPolicySuggestsClearingCachedLocation:*(void *)(a1 + 32)];

  return [*(id *)(a1 + 32) _cancelTimer];
}

void sub_100217BB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained peerLocationPolicySuggestsClearingCachedLocation:*(void *)(a1 + 32)];
}

id sub_100217BF8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetTimer];
}

void sub_10021891C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc_init(&OBJC_CLASS___SAUserState);
  [v7 setUserToken:v5];

  [v7 setSharedUserId:v6];
  [*(id *)(a1 + 32) addObject:v6];
  [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v6];
}

void sub_1002189AC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
  id v7 = v6;
  if (v6)
  {
    [v6 setUserTokenStatus:v5];
  }

  else
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___SAUserState);
    [v8 setUserTokenStatus:v5];
    [v8 setSharedUserId:v9];
    [*(id *)(a1 + 40) addObject:v9];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v9];
  }
}

void sub_100218A64(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:a2]);
  if (v5) {
    [v6 setSyncSharedUserId:v5];
  }
  [*(id *)(a1 + 40) addObject:v6];
}

void sub_10021A58C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10021B010( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10021B190( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10021B5F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

uint64_t sub_10021B71C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10021B72C(uint64_t a1)
{
}

void sub_10021B734(uint64_t a1)
{
}

void sub_10021B770(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v3 = 136315138;
      id v4 = "-[ADUserProfileService _startProfileStoreMonitoring]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s ADUserProfileService observered UserProfile changes",  (uint8_t *)&v3,  0xCu);
    }

    [WeakRetained _fetchProfiles];
  }
}

void sub_10021B830(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 88) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10021B868(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 80LL);
  id v2 = objc_retainBlock(*(id *)(a1 + 40));
  [v1 addObject:v2];
}

uint64_t sub_10021B8A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10021B8B4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;

  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  id result = [*(id *)(a1 + 32) _setUserProfileAceCommand];
  if (*(_BYTE *)(a1 + 48)) {
    return [*(id *)(a1 + 32) _addProfileNamesToSharedStore:*(void *)(a1 + 40)];
  }
  return result;
}

id sub_10021B92C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 65))
  {
    [*(id *)(v2 + 40) intersectSet:*(void *)(v2 + 32)];
    uint64_t v2 = *(void *)(a1 + 32);
  }

  uint64_t v3 = *(void **)(v2 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 40)));
  [v3 unionSet:v4];

  id result = [*(id *)(*(void *)(a1 + 32) + 40) count];
  if (result) {
    return [*(id *)(a1 + 32) _setUserProfileAceCommand];
  }
  return result;
}

id sub_10021B9B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _loadProfileNamesFromCloudWithCompletion:*(void *)(a1 + 40)];
}

void sub_10021B9C4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10021B9FC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (v2)
  {
    id v3 = [v2 copy];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

void sub_10021BA44(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[PBSUserProfileManager sharedInstance](&OBJC_CLASS___PBSUserProfileManager, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 userProfilesSnapshot]);
  [v3 _updateUserProfilesFromSnapshot:v5];

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "allValues", 0));
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      __int128 v10 = 0LL;
      do
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) dictionaryFromPBSUserProfile:*(void *)(*((void *)&v14 + 1) + 8 * (void)v10)]);
        [v2 addObject:v11];

        __int128 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v8);
  }

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = [v2 copy];
  (*(void (**)(uint64_t, id))(v12 + 16))(v12, v13);
}

void sub_10021BBD0(void *a1)
{
  id v2 = (void *)a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[PBSUserProfileManager sharedInstance](&OBJC_CLASS___PBSUserProfileManager, "sharedInstance"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userProfilesSnapshot]);
  [v2 _updateUserProfilesFromSnapshot:v4];

  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 56), "allValues", 0));
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v12 + 1) + 8 * (void)i) iCloudAltDSID]);
        unsigned int v11 = [v10 isEqualToString:a1[5]];

        if (v11)
        {
          *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
          goto LABEL_11;
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

void sub_10021BD34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = [[PBSUserProfileAccountInfo alloc] initWithUserProfile:v5];
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setValue:v5 forKey:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 overrideName]);
  if (v7) {
    [*(id *)(a1 + 32) addObject:v7];
  }
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v10 personNameComponents]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 givenName]);

  if (v9) {
    [*(id *)(a1 + 32) addObject:v9];
  }
}

id sub_10021BE0C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userProfilesSnapshot]);
  [v2 _updateUserProfilesFromSnapshot:v3];

  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    id v7 = "-[ADUserProfileService userProfileManagerDidUpdate:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Syncing names due to profile update.",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(a1 + 32) syncProfileNamesToCloudWithCompletion:&stru_1004F6CE0];
}

void sub_10021BEEC(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "-[ADUserProfileService userProfileManagerDidUpdate:]_block_invoke";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Profile names synced with error %@.",  (uint8_t *)&v4,  0x16u);
  }
}

void sub_10021BFA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10021C064;
  void v12[3] = &unk_1004FDA30;
  void v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

uint64_t sub_10021C064(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 0;
  id v2 = *(void **)(a1 + 40);
  if (!v2) {
    goto LABEL_27;
  }
  id v3 = v2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  unsigned __int8 v5 = [v4 isEqualToString:CKErrorDomain];

  if ((v5 & 1) == 0)
  {

LABEL_24:
    __int16 v21 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      __int128 v32 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315395;
      id v43 = "-[ADUserProfileService _loadProfileNamesFromCloudWithCompletion:]_block_invoke_2";
      __int16 v44 = 2113;
      uint64_t v45 = v32;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s Error loading profile names from cloud (%{private}@)",  buf,  0x16u);
    }

    id v22 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL);
    return v22();
  }

  id v6 = [v3 code];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:NSUnderlyingErrorKey]);

  BOOL v9 = v6 == (id)11;
  if (v6 != (id)11 && [v3 code] == (id)2)
  {
LABEL_7:
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:CKPartialErrorsByItemIDKey]);

    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 allValues]);
    id v14 = [v13 countByEnumeratingWithState:&v38 objects:buf count:16];
    if (v14)
    {
      id v15 = v14;
      __int128 v37 = v10;
      BOOL v36 = v9;
      uint64_t v16 = *(void *)v39;
      do
      {
        for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v16) {
            objc_enumerationMutation(v13);
          }
          __int16 v18 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
          __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 domain]);
          if ([v19 isEqualToString:CKErrorDomain])
          {
            id v20 = [v18 code];

            if (v20 == (id)11)
            {
              BOOL v9 = 1;
              goto LABEL_20;
            }
          }

          else
          {
          }
        }

        id v15 = [v13 countByEnumeratingWithState:&v38 objects:buf count:16];
      }

      while (v15);
      BOOL v9 = v36;
LABEL_20:
      id v10 = v37;
    }

    goto LABEL_22;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  if ([v10 isEqualToString:CKErrorDomain])
  {
    id v11 = [v8 code];

    if (v11 != (id)2) {
      goto LABEL_23;
    }
    goto LABEL_7;
  }

void sub_10021C4B0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v8 = "-[ADUserProfileService syncProfileNamesToCloudWithCompletion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10021C5A8;
  v4[3] = &unk_1004FD6F0;
  id v3 = *(void **)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  id v6 = v3;
  [v5 _loadProfileNamesFromCloudWithCompletion:v4];
}

void sub_10021C5A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && !*(_BYTE *)(*(void *)(a1 + 32) + 24LL)) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  [*(id *)(a1 + 32) _addProfileNamesToSharedStore:*(void *)(a1 + 40)];
}

void *sub_10021C600(void *result)
{
  id v1 = (_BYTE *)result[4];
  if (v1[64])
  {
    id v2 = result;
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v7 = "-[ADUserProfileService syncUserProfileNamesIfNeeded]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Needs Profile Name sync. ", buf, 0xCu);
      id v1 = (_BYTE *)v2[4];
    }

    if (v1[65])
    {
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472LL;
      void v5[2] = sub_10021C744;
      v5[3] = &unk_1004FBD90;
      void v5[4] = v1;
      return [v1 syncProfileNamesToCloudWithCompletion:v5];
    }

    else
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472LL;
      v4[2] = sub_10021C810;
      v4[3] = &unk_1004FBD90;
      void v4[4] = v1;
      return [v1 refreshUserProfilesWithCompletion:v4];
    }
  }

  return result;
}

void sub_10021C744(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 0;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315395;
    id v6 = "-[ADUserProfileService syncUserProfileNamesIfNeeded]_block_invoke";
    __int16 v7 = 2113;
    id v8 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Sync profile names to cloud with error %{private}@",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_10021C810(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(a1 + 32) + 64LL) = 0;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315395;
    id v6 = "-[ADUserProfileService syncUserProfileNamesIfNeeded]_block_invoke";
    __int16 v7 = 2113;
    id v8 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Refreshed profile names with error %{private}@",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_10021C8DC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[PBSUserProfileManager sharedInstance](&OBJC_CLASS___PBSUserProfileManager, "sharedInstance"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userProfilesSnapshot]);
  [v2 _updateUserProfilesFromSnapshot:v4];

  id v5 = (id)objc_claimAutoreleasedReturnValue(+[PBSUserProfileManager sharedInstance](&OBJC_CLASS___PBSUserProfileManager, "sharedInstance"));
  [v5 addObserver:*(void *)(a1 + 32)];
}

void sub_10021C964(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    id v5 = "-[ADUserProfileService _init]_block_invoke_2";
    __int16 v6 = 2112;
    __int16 v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v4, 0x16u);
  }
}

void sub_10021CA60(id a1)
{
  id v1 = -[ADUserProfileService _init](objc_alloc(&OBJC_CLASS___ADUserProfileService), "_init");
  id v2 = (void *)qword_1005781B8;
  qword_1005781B8 = (uint64_t)v1;

  _[(id)qword_1005781B8 _start];
}

SAStartRequest *sub_10021CF28(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v1 text]);
  if (v2)
  {
    id v3 = (void *)v2;
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v1 expectedSpeakerSharedUserID]);

    if (!v4)
    {
      __int128 v12 = objc_alloc_init(&OBJC_CLASS___SAStartRequest);
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v1 text]);
      -[SAStartRequest setUtterance:](v12, "setUtterance:", v37);

      if ([v1 activationEvent] == (id)5 || objc_msgSend(v1, "activationEvent") == (id)11)
      {
        -[SAStartRequest setOrigin:](v12, "setOrigin:", SAInputOriginAssistantTextInputValue);
        goto LABEL_33;
      }

      if ([v1 activationEvent] != (id)8) {
        goto LABEL_33;
      }
      __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v1 speechRequestOptions]);
      id v56 = [v55 activationEvent];

      if (v56)
      {
        id v57 = sub_100344298((uint64_t)v56);
        id v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
        -[SAStartRequest setOrigin:](v12, "setOrigin:", v58);
      }

      char v59 = (void *)objc_claimAutoreleasedReturnValue([v1 testRequestOptions]);
      __int128 v35 = v59;
      if (v59)
      {
        id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 inputOrigin]);
        id v61 = [v60 length];

        if (v61)
        {
          __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v35 inputOrigin]);
          -[SAStartRequest setOrigin:](v12, "setOrigin:", v62);
        }

        __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v35 isEyesFree]);

        if (v63)
        {
          double v64 = (void *)objc_claimAutoreleasedReturnValue([v35 isEyesFree]);
          -[SAStartRequest setEyesFree:](v12, "setEyesFree:", [v64 BOOLValue]);
        }
      }

      goto LABEL_32;
    }
  }

  uint64_t v5 = objc_claimAutoreleasedReturnValue([v1 text]);
  if (!v5)
  {
LABEL_23:
    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v1 legacyDirectActionIdentifier]);

    if (v34)
    {
      __int128 v12 = (SAStartRequest *)objc_alloc_init(&OBJC_CLASS___SAStartDirectActionRequest);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v1 legacyDirectActionIdentifier]);
      -[SAStartRequest setDirectAction:](v12, "setDirectAction:", v35);
    }

    else
    {
      BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([v1 handoffRequestData]);

      if (v36)
      {
        __int128 v12 = (SAStartRequest *)objc_alloc_init(&OBJC_CLASS___SAStartHandoffRequest);
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v1 handoffRequestData]);
        -[SAStartRequest setHandoffData:](v12, "setHandoffData:", v35);
      }

      else
      {
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v1 correctedSpeech]);

        if (!v38)
        {
          v65 = (void *)objc_claimAutoreleasedReturnValue([v1 startRequest]);

          if (v65) {
            __int128 v12 = (SAStartRequest *)objc_claimAutoreleasedReturnValue([v1 startRequest]);
          }
          else {
            __int128 v12 = 0LL;
          }
          goto LABEL_33;
        }

        __int128 v12 = objc_alloc_init(&OBJC_CLASS___SASStartCorrectedSpeechRequest);
        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v1 correctedSpeech]);
        -[SAStartRequest setUtterance:](v12, "setUtterance:", v39);

        __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v1 correctedSpeechContext]);
        -[SAStartRequest ad_setAFCorrectionContext:](v12, "ad_setAFCorrectionContext:", v40);

        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v1 combinedRank]);
        -[SAStartRequest setCombinedRank:](v12, "setCombinedRank:", [v41 integerValue]);

        id v42 = (void *)objc_claimAutoreleasedReturnValue([v1 combinedScore]);
        [v42 doubleValue];
        -[SAStartRequest setCombinedScore:](v12, "setCombinedScore:");

        id v43 = (void *)objc_claimAutoreleasedReturnValue([v1 interactionId]);
        -[SAStartRequest setInteractionId:](v12, "setInteractionId:", v43);

        __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v1 onDeviceUtterancesPresent]);
        -[SAStartRequest setOnDeviceUtterancesPresent:]( v12,  "setOnDeviceUtterancesPresent:",  [v44 BOOLValue]);

        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v1 originalRank]);
        -[SAStartRequest setOriginalRank:](v12, "setOriginalRank:", [v45 integerValue]);

        id v46 = (void *)objc_claimAutoreleasedReturnValue([v1 originalScore]);
        [v46 doubleValue];
        -[SAStartRequest setOriginalScore:](v12, "setOriginalScore:");

        id v47 = (void *)objc_claimAutoreleasedReturnValue([v1 previousUtterance]);
        -[SAStartRequest setPreviousUtterance:](v12, "setPreviousUtterance:", v47);

        id v48 = (void *)objc_claimAutoreleasedReturnValue([v1 sessionId]);
        -[SAStartRequest setSessionId:](v12, "setSessionId:", v48);

        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v1 utteranceSource]);
        -[SAStartRequest setUtteranceSource:](v12, "setUtteranceSource:", v35);
      }
    }

void sub_10021E1C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

id sub_10021F0A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_10021F0BC(uint64_t a1, uint64_t a2)
{
}

void sub_10021F0C8(uint64_t a1)
{
}

uint64_t sub_10021F0D0(void *a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = a1[4];
    int v7 = 136315394;
    id v8 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s command timed out: %@",  (uint8_t *)&v7,  0x16u);
  }

  id v3 = (void *)a1[5];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1[8] + 8LL) + 40LL));
  [v3 _removeTimer:WeakRetained];

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[6], 0LL);
  }
  return result;
}

void sub_10021F1D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  __int16 v9 = *(dispatch_queue_s **)(v7 + 56);
  v12[0] = _NSConcreteStackBlock;
  void v12[2] = sub_10021F2C0;
  void v12[3] = &unk_1004F7960;
  v12[1] = 3221225472LL;
  void v12[4] = v7;
  id v13 = v8;
  id v14 = v6;
  id v15 = *(id *)(a1 + 48);
  id v16 = v5;
  id v17 = *(id *)(a1 + 56);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10021F2C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 && ([v2 cancelIfNotAlreadyCanceled] & 1) == 0)
  {
    id v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v17 = *(void **)(a1 + 48);
      int v18 = 136315394;
      __int16 v19 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke_2";
      __int16 v20 = 2112;
      __int16 v21 = v17;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s command timed out, ignoring error %@",  (uint8_t *)&v18,  0x16u);
    }
  }

  else
  {
    id v3 = *(id *)(a1 + 56);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) objectForKey:@"response"]);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SAGenericCommand aceObjectWithDictionary:]( &OBJC_CLASS___SAGenericCommand,  "aceObjectWithDictionary:",  v4));
      uint64_t v7 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v8 = v7;
        __int16 v9 = (objc_class *)objc_opt_class(v6);
        id v10 = NSStringFromClass(v9);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        int v18 = 136315394;
        __int16 v19 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke";
        __int16 v20 = 2112;
        __int16 v21 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Received response: %@",  (uint8_t *)&v18,  0x16u);
      }

      uint64_t v12 = objc_opt_class(&OBJC_CLASS___SAPhoneHangUpResponse);
      if ((objc_opt_isKindOfClass(v6, v12) & 1) != 0)
      {
        id v13 = v6;

        id v3 = v13;
      }
    }

    else
    {
      id v14 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315138;
        __int16 v19 = "-[ADCompanionRoutingPhoneService _hangUpHandler:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Received bad response",  (uint8_t *)&v18,  0xCu);
      }
    }

    uint64_t v15 = *(void *)(a1 + 72);
    if (v15) {
      (*(void (**)(uint64_t, id, void))(v15 + 16))(v15, v3, 0LL);
    }
  }

void sub_10021F53C(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) encodedClassName]);
  if ([v6 isEqualToString:SAPhoneAnswerClassIdentifier])
  {
    [*(id *)(a1 + 40) _answerHandler:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }

  else if ([v6 isEqualToString:SAPhoneHangUpClassIdentifier])
  {
    [*(id *)(a1 + 40) _hangUpHandler:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
  }

  else
  {
    unsigned int v2 = [v6 isEqualToString:SAPhoneIncomingCallSearchClassIdentifier];
    uint64_t v4 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    if (v2) {
      [v3 _incomingCallSearchHandler:v4 completion:v5];
    }
    else {
      [v3 _unhandledCommand:v4 completion:v5];
    }
  }
}

void sub_1002200F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002219B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

uint64_t sub_100222794(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1002227A8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (v5)
    {
      uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 136315650;
        id v16 = "-[ADAssetManager _subscribeToMorphunAssetStatusForLanguage:]_block_invoke";
        __int16 v17 = 2112;
        id v18 = v5;
        __int16 v19 = 2112;
        uint64_t v20 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error getting Morphun asset status: %@ for language %@",  buf,  0x20u);
      }
    }

    id v8 = (dispatch_queue_s *)WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100222980;
    block[3] = &unk_1004F6DB8;
    objc_copyWeak(&v13, (id *)(a1 + 40));
    char v14 = a2;
    id v12 = *(id *)(a1 + 32);
    dispatch_async(v8, block);

    objc_destroyWeak(&v13);
  }

  else
  {
    __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v16 = "-[ADAssetManager _subscribeToMorphunAssetStatusForLanguage:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s ADAssetManager is already deallocated, cannot update asset status",  buf,  0xCu);
    }
  }
}

void sub_100222980(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    if (AFIsInternalInstall(WeakRetained))
    {
      uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v5 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled(v4))
        {
          LOWORD(v11) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "MorphunAssetCallback",  (const char *)&unk_1004B87EF,  (uint8_t *)&v11,  2u);
        }
      }
    }

    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v8 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      if (*(_BYTE *)(a1 + 48)) {
        uint64_t v10 = @"succeeded";
      }
      else {
        uint64_t v10 = @"failed";
      }
      int v11 = 136315650;
      id v12 = "-[ADAssetManager _subscribeToMorphunAssetStatusForLanguage:]_block_invoke";
      __int16 v13 = 2112;
      char v14 = v10;
      __int16 v15 = 2112;
      uint64_t v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Morphun assets subscribe %@ for %@",  (uint8_t *)&v11,  0x20u);
    }

    _AFPreferencesSiriXAssetsDidChange(v8);
    [v3 _checkAssetsStatusForIntervalRecording];
    [v3 notifyObserversAssetAvailabilityChanged];
  }
}

void sub_100222B04(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = os_signpost_id_generate(AFSiriLogContextDaemon);
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    uint64_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v2,  "RegisterAssetASR",  (const char *)&unk_1004B87EF,  (uint8_t *)&v10,  2u);
    }

    if (!WeakRetained[9])
    {
      os_signpost_id_t v5 = objc_alloc_init(&OBJC_CLASS___SFEntitledAssetManager);
      id v6 = WeakRetained[9];
      WeakRetained[9] = v5;
    }

    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      int v11 = "-[ADAssetManager _registerAssetStatusTrackers]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Registering ASR delegate",  (uint8_t *)&v10,  0xCu);
    }

    [WeakRetained[9] registerAssetDelegate:WeakRetained assetType:3];
    BOOL v8 = (os_log_s *)AFSiriLogContextDaemon;
    uint64_t v9 = v8;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v2,  "RegisterAssetASR",  (const char *)&unk_1004B87EF,  (uint8_t *)&v10,  2u);
    }
  }
}

void sub_100222CBC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = os_signpost_id_generate(AFSiriLogContextDaemon);
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    uint64_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v2,  "RegisterAssetAttention",  (const char *)&unk_1004B87EF,  (uint8_t *)&v10,  2u);
    }

    if (!WeakRetained[13])
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___CSAttSiriAttentionAssetsStatusProvider);
      id v6 = WeakRetained[13];
      WeakRetained[13] = v5;

      uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        int v11 = "-[ADAssetManager _registerAssetStatusTrackers]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Registering Attention delegate",  (uint8_t *)&v10,  0xCu);
      }

      [WeakRetained[13] setDelegate:WeakRetained];
    }

    BOOL v8 = (os_log_s *)AFSiriLogContextDaemon;
    uint64_t v9 = v8;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v2,  "RegisterAssetAttention",  (const char *)&unk_1004B87EF,  (uint8_t *)&v10,  2u);
    }
  }
}

void sub_100222E70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _registerCDMStatusTracker];
    id WeakRetained = v2;
  }
}

void sub_100222EA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = os_signpost_id_generate(AFSiriLogContextDaemon);
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    uint64_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v11) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_INTERVAL_BEGIN,  v2,  "RegisterAssetMorphun",  (const char *)&unk_1004B87EF,  (uint8_t *)&v11,  2u);
    }

    if (!WeakRetained[15])
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue(+[MorphunAssets get](&OBJC_CLASS___MorphunAssets, "get"));
      id v6 = (void *)WeakRetained[15];
      WeakRetained[15] = v5;
    }

    uint64_t v7 = WeakRetained[1];
    if (v7)
    {
      BOOL v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v11 = 136315138;
        id v12 = "-[ADAssetManager _registerAssetStatusTrackers]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Registering morphun delegate",  (uint8_t *)&v11,  0xCu);
        uint64_t v7 = WeakRetained[1];
      }

      [WeakRetained _subscribeToMorphunAssetStatusForLanguage:v7];
    }

    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    int v10 = v9;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      LOWORD(v11) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_END,  v2,  "RegisterAssetMorphun",  (const char *)&unk_1004B87EF,  (uint8_t *)&v11,  2u);
    }
  }
}

void sub_100223064(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  os_signpost_id_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if (AFIsInternalInstall(WeakRetained))
    {
      id v3 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        if (os_signpost_enabled(v3))
        {
          LOWORD(v7) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_EVENT,  v5,  "NLAssetCallbackUnavailable",  (const char *)&unk_1004B87EF,  (uint8_t *)&v7,  2u);
        }
      }
    }

    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      BOOL v8 = "-[ADAssetManager assetsUnavailableWithType:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s NL asset became unavailable for all locales",  (uint8_t *)&v7,  0xCu);
    }

    _AFPreferencesSiriXAssetsDidChange([v2[10] removeAllObjects]);
    [v2 notifyObserversAssetAvailabilityChanged];
  }
}

void sub_1002231A8(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  os_signpost_id_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if (AFIsInternalInstall(WeakRetained))
    {
      id v3 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v4 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v5 = v4;
        if (os_signpost_enabled(v3))
        {
          LOWORD(v7) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_EVENT,  v5,  "NLRouterAssetCallbackUnavailable",  (const char *)&unk_1004B87EF,  (uint8_t *)&v7,  2u);
        }
      }
    }

    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315138;
      BOOL v8 = "-[ADAssetManager assetsUnavailableWithType:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s NL router asset became unavailable for all locales",  (uint8_t *)&v7,  0xCu);
    }

    _AFPreferencesSiriXAssetsDidChange([v2[11] removeAllObjects]);
    [v2 notifyObserversAssetAvailabilityChanged];
  }
}

void sub_1002232EC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localeIdentifier]);
    os_signpost_id_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByReplacingOccurrencesOfString:@"_" withString:@"-"]);

    if (AFIsInternalInstall(v5))
    {
      id v6 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v7 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v8 = v7;
        if (os_signpost_enabled(v6))
        {
          LOWORD(v10) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  v8,  "NLAssetCallbackAvailable",  (const char *)&unk_1004B87EF,  (uint8_t *)&v10,  2u);
        }
      }
    }

    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      int v11 = "-[ADAssetManager assetsAvailableForLocale:withType:]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s NL asset became available for %@",  (uint8_t *)&v10,  0x16u);
    }

    _AFPreferencesSiriXAssetsDidChange([WeakRetained[10] setObject:&__kCFBooleanTrue forKeyedSubscript:v4]);
    [WeakRetained _checkAssetsStatusForIntervalRecording];
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_100223490(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localeIdentifier]);
    os_signpost_id_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByReplacingOccurrencesOfString:@"_" withString:@"-"]);

    if (AFIsInternalInstall(v5))
    {
      id v6 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v7 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v8 = v7;
        if (os_signpost_enabled(v6))
        {
          LOWORD(v10) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_EVENT,  v8,  "NLRouterAssetCallbackAvailable",  (const char *)&unk_1004B87EF,  (uint8_t *)&v10,  2u);
        }
      }
    }

    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      int v11 = "-[ADAssetManager assetsAvailableForLocale:withType:]_block_invoke";
      __int16 v12 = 2112;
      __int16 v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s NL router asset became available for %@",  (uint8_t *)&v10,  0x16u);
    }

    _AFPreferencesSiriXAssetsDidChange([WeakRetained[11] setObject:&__kCFBooleanTrue forKeyedSubscript:v4]);
    [WeakRetained notifyObserversAssetAvailabilityChanged];
  }
}

void sub_10022362C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    if (AFIsInternalInstall(WeakRetained))
    {
      os_signpost_id_t v4 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v5 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled(v4))
        {
          LOWORD(v9) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "AttentionAssetCallback",  (const char *)&unk_1004B87EF,  (uint8_t *)&v9,  2u);
        }
      }
    }

    objc_storeStrong(v3 + 12, *(id *)(a1 + 32));
    _AFPreferencesSiriXAssetsDidChange();
    os_signpost_id_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 136315394;
      int v10 = "-[ADAssetManager attentionAssetStatus:]_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Updating Attention asset status: %@",  (uint8_t *)&v9,  0x16u);
    }

    [v3 _checkAssetsStatusForIntervalRecording];
    [v3 notifyObserversAssetAvailabilityChanged];
  }
}

void sub_100223798(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    if (AFIsInternalInstall(WeakRetained))
    {
      os_signpost_id_t v4 = (os_log_s *)AFSiriLogContextDaemon;
      os_signpost_id_t v5 = os_signpost_id_generate(AFSiriLogContextDaemon);
      if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v6 = v5;
        if (os_signpost_enabled(v4))
        {
          LOWORD(v14) = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "ASRAssetCallback",  (const char *)&unk_1004B87EF,  (uint8_t *)&v14,  2u);
        }
      }
    }

    objc_storeStrong(v3 + 7, *(id *)(a1 + 32));
    uint64_t v8 = AFIsNano(v7);
    if ((_DWORD)v8 && AFDeviceSupportsFullSiriUOD(v8, v9))
    {
      uint64_t v10 = objc_claimAutoreleasedReturnValue( +[SFEntitledAssetManager modelTasksForLocaleWithInstallationStatus:]( &OBJC_CLASS___SFEntitledAssetManager,  "modelTasksForLocaleWithInstallationStatus:",  *(void *)(a1 + 32)));
      id v11 = v3[8];
      v3[8] = (id)v10;
    }

    _AFPreferencesSiriXAssetsDidChange();
    uint64_t v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 136315394;
      __int16 v15 = "-[ADAssetManager assetStatus:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Updating speech asset status: %@",  (uint8_t *)&v14,  0x16u);
    }

    [v3 _checkAssetsStatusForIntervalRecording];
    [v3 notifyObserversAssetAvailabilityChanged];
  }
}

void sub_100223934(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "assetManager:didChangeLanguageCode:",  WeakRetained,  *(void *)(a1 + 40),  (void)v8);
          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }

      while (v5);
    }
  }
}

void sub_100223A44(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    id v3 = *(id *)(a1 + 32);
    id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v9;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v9 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v7),  "assetManagerDidChangeAssetAvailability:",  WeakRetained,  (void)v8);
          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }

      while (v5);
    }
  }
}

void sub_100223B48(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [WeakRetained[16] removeObject:*(void *)(a1 + 32)];
    id WeakRetained = v3;
  }
}

void sub_100223B8C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = WeakRetained;
    unsigned __int8 v4 = [WeakRetained[16] containsObject:*(void *)(a1 + 32)];
    id v3 = v5;
    if ((v4 & 1) == 0)
    {
      [v5[16] addObject:*(void *)(a1 + 32)];
      [*(id *)(a1 + 32) assetManagerDidChangeAssetAvailability:v5];
      id v3 = v5;
    }
  }
}

void sub_100223BF4(uint64_t a1)
{
  os_signpost_id_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained _registerCDMStatusTracker];
    [v4 _subscribeToMorphunAssetStatusForLanguage:*(void *)(a1 + 32)];
    objc_storeStrong((id *)v4 + 1, *(id *)(a1 + 32));
    id v5 = (dispatch_queue_s *)*((void *)v4 + 2);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100223CB0;
    block[3] = &unk_1004FAF58;
    objc_copyWeak(&v7, v2);
    dispatch_async(v5, block);
    objc_destroyWeak(&v7);
  }
}

void sub_100223CB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    os_signpost_id_t v2 = WeakRetained;
    [WeakRetained _recordAssetsNeededForLanguage:WeakRetained[1] resetPrevious:1];
    [v2 notifyObserversLanguageCodeChanged:v2[1]];
    id WeakRetained = v2;
  }
}

uint64_t sub_100223CF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100223D0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100223D20(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _fetchAssetStatusForLanguage:*(void *)(a1 + 32)]);
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

    id WeakRetained = v4;
  }
}

uint64_t sub_100223D7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100223D8C(uint64_t a1)
{
}

void sub_100223D94(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchAssetStatusForLanguage:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100223E10(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ADAssetManager);
  uint64_t v2 = (void *)qword_1005781C8;
  qword_1005781C8 = (uint64_t)v1;
}

void sub_100224430(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setEffectiveDate:v3];
  [v4 setExpirationDuration:*(double *)(a1 + 40)];
}

void sub_100225C60(_Unwind_Exception *a1)
{
}

void sub_1002263C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _continueSync];
}

void sub_1002263F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int128 v10 = *(void **)(a1 + 40);
  __int128 v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100226504;
  block[3] = &unk_1004F73F0;
  id v12 = v10;
  uint64_t v13 = *(void *)(a1 + 32);
  id v18 = v12;
  uint64_t v19 = v13;
  id v24 = v9;
  id v20 = *(id *)(a1 + 48);
  id v21 = v8;
  id v22 = *(id *)(a1 + 56);
  id v23 = v7;
  id v14 = v7;
  id v15 = v8;
  id v16 = v9;
  dispatch_async(v11, block);
}

uint64_t (**sub_100226504(void *a1))(id, void)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = *(void *)(v2 + 72);
  if (v3 != v4)
  {
    id v5 = (os_log_s *)AFSiriLogContextSync;
    if (!os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    int v12 = 136315650;
    uint64_t v13 = "-[ADSyncManager _continueSync]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    uint64_t v6 = "%s Ignoring sync chunk for service %@ that's not our current service %@";
    goto LABEL_9;
  }

  if (([*(id *)(v2 + 96) isEqual:a1[6]] & 1) == 0)
  {
    id v5 = (os_log_s *)AFSiriLogContextSync;
    if (!os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    uint64_t v9 = a1[6];
    uint64_t v10 = *(void *)(a1[5] + 96LL);
    int v12 = 136315650;
    uint64_t v13 = "-[ADSyncManager _continueSync]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2112;
    uint64_t v17 = v10;
    uint64_t v6 = "%s Ignoring sync chunk for ID %@ that's not our current ID %@";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v12, 0x20u);
LABEL_10:
    uint64_t result = (uint64_t (**)(id, void))a1[10];
    if (result) {
      return (uint64_t (**)(id, void))result[2](result, 0LL);
    }
    return result;
  }

  uint64_t v8 = a1[4];
  id v7 = (void *)a1[5];
  if (a1[10]) {
    return (uint64_t (**)(id, void))_objc_msgSend( v7,  "_syncingService:withSyncInfo:receivedChunk:continueBlock:",  v8,  a1[8]);
  }
  else {
    return (uint64_t (**)(id, void))_[v7 _syncFinishedForService:v8 error:a1[7]];
  }
}

void sub_1002266CC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v8 = "-[ADSyncManager initWithServiceManager:queue:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

id sub_10022920C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleAceObject:*(void *)(a1 + 40)];
}

void sub_100229218(uint64_t a1)
{
  uint64_t v2 = (void *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    int v15 = 136315394;
    __int16 v16 = "-[ADSession assistantDataManager:didUpdateAssistantData:]_block_invoke";
    __int16 v17 = 1024;
    unsigned int v18 = [v3 sessionType];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Got updated assistant data for session %d!",  (uint8_t *)&v15,  0x12u);
  }

  unsigned int v5 = [*(id *)(a1 + 32) _waitingForAssistantData];
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 112LL), *(id *)(a1 + 40));
  int v6 = *(uint64_t **)(a1 + 32);
  if (v6[11] >= 8)
  {
    if (v6[15])
    {
      objc_msgSend(v6, "_sendAssistantDataChangedSinceAnchor:refId:", 0);
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void **)(v7 + 120);
      *(void *)(v7 + 120) = 0LL;
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void **)(v9 + 40);
      if (v10) {
        id v11 = v10;
      }
      else {
        id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 16) lastAssistantDataAnchor]);
      }
      uint64_t v8 = v11;
      [*(id *)(a1 + 32) _sendAssistantDataChangedSinceAnchor:v11 refId:0];
    }

LABEL_12:
    if (v5)
    {
      int v12 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315138;
        __int16 v16 = "-[ADSession assistantDataManager:didUpdateAssistantData:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Sending pending commands after SAD update",  (uint8_t *)&v15,  0xCu);
      }

      [*(id *)(a1 + 32) _sendPendingCommands];
      uint64_t v13 = *(void **)(a1 + 32);
      if (v13[11] == 11LL)
      {
        __int16 v14 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          int v15 = 136315138;
          __int16 v16 = "-[ADSession assistantDataManager:didUpdateAssistantData:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Session is active, clearing limbo now.",  (uint8_t *)&v15,  0xCu);
          uint64_t v13 = *(void **)(a1 + 32);
        }

        [v13 _clearLimbo];
      }
    }
  }

id sub_100229EB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _createDictationSampledPlistIfItDoesNotExist];
}

void sub_10022A090(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ADDictationOnDeviceSampling);
  uint64_t v2 = (void *)qword_1005781D8;
  qword_1005781D8 = (uint64_t)v1;
}

uint64_t sub_10022A6CC(void *a1)
{
  id v1 = a1;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = 0LL;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v1);
        }
        switch(SAAlarmDayOfWeekForString(*(void *)(*((void *)&v8 + 1) + 8LL * (void)i)))
        {
          case 2u:
            v4 |= 0x40uLL;
            break;
          case 3u:
            v4 |= 1uLL;
            break;
          case 4u:
            v4 |= 2uLL;
            break;
          case 5u:
            v4 |= 4uLL;
            break;
          case 6u:
            v4 |= 8uLL;
            break;
          case 7u:
            v4 |= 0x10uLL;
            break;
          case 8u:
            v4 |= 0x20uLL;
            break;
          default:
            continue;
        }
      }

      id v3 = [v1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

NSURL *sub_10022AC38(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet URLPathAllowedCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "URLPathAllowedCharacterSet"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAddingPercentEncodingWithAllowedCharacters:v2]);

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([@"siri-alarm-internal:" stringByAppendingString:v3]);
    uint64_t v5 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v4);
    if (!v5)
    {
      int v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        __int128 v9 = "AFAlarmURLForAlarmIdentifier";
        __int16 v10 = 2112;
        id v11 = v1;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed constructing URL identifier for %@",  (uint8_t *)&v8,  0x16u);
      }
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id sub_10022AD80(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 absoluteString]);
  if ([v1 hasPrefix:@"siri-alarm-internal:"])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "substringFromIndex:", objc_msgSend(@"siri-alarm-internal:", "length")));
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByRemovingPercentEncoding]);
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

void sub_10022ADFC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10022AE88;
  v6[3] = &unk_1004F6F00;
  void v6[4] = v4;
  id v5 = *(id *)(a1 + 48);
  void v6[5] = *(void *)(a1 + 40);
  id v7 = v5;
  [a2 fetchAlarmsWithIdentifiers:v4 completionHandler:v6];
}

void sub_10022AE88(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v26 = v6;
    int v8 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v5 count]);
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v27 = v5;
    id obj = v5;
    id v9 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v34;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v34 != v11) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
          __int16 v14 = (void *)a1[5];
          int v15 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
          __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:v15]);

          id v17 = [v13 copy];
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          id v18 = v16;
          id v19 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v30;
            do
            {
              for (j = 0LL; j != v20; j = (char *)j + 1)
              {
                if (*(void *)v30 != v21) {
                  objc_enumerationMutation(v18);
                }
                objc_msgSend(v17, "_ad_updateWithModification:", *(void *)(*((void *)&v29 + 1) + 8 * (void)j));
              }

              id v20 = [v18 countByEnumeratingWithState:&v29 objects:v37 count:16];
            }

            while (v20);
          }

          -[NSMutableArray addObject:](v8, "addObject:", v17);
        }

        id v10 = [obj countByEnumeratingWithState:&v33 objects:v38 count:16];
      }

      while (v10);
    }

    id v23 = objc_alloc_init(&OBJC_CLASS___AFUpdateAlarmRequest);
    -[AFUpdateAlarmRequest setAlarms:](v23, "setAlarms:", v8);
    (*(void (**)(void))(a1[6] + 16LL))();

    id v7 = v26;
    id v5 = v27;
  }

  else
  {
    id v24 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = a1[4];
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v40 = "-[SAAlarmUpdate(ADAlarmTransformer) _ad_getAlarmRequestRepresentationWithCompletionHandler:]_block_invoke_2";
      __int16 v41 = 2112;
      uint64_t v42 = v25;
      __int16 v43 = 2114;
      __int16 v44 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Unable to fetch alarms with identifiers %@: %{public}@",  buf,  0x20u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

NSMutableArray *sub_10022B378(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = v2;
  if ((a1 & 1) != 0)
  {
    -[NSMutableArray addObject:](v2, "addObject:", SAAlarmDayOfWeekMondayValue);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }

  -[NSMutableArray addObject:](v3, "addObject:", SAAlarmDayOfWeekTuesdayValue);
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

void sub_10022C194(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_ad_internalAlarmIdentifiers"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10022C238;
  v7[3] = &unk_1004FD718;
  id v6 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 fetchAlarmsWithIdentifiers:v5 completionHandler:v7];
}

void sub_10022C238(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___AFShowAlarmRequest);
    [v7 setAlarms:v5];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v8 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 32);
      id v10 = v8;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_ad_internalAlarmIdentifiers"));
      int v12 = 136315650;
      uint64_t v13 = "-[SAAlarmAlarmShow(ADAlarmTransformer) _ad_getAlarmRequestRepresentationWithCompletionHandler:]_block_invoke_2";
      __int16 v14 = 2112;
      int v15 = v11;
      __int16 v16 = 2114;
      id v17 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to fetch alarms with identifiers %@: %{public}@",  (uint8_t *)&v12,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10022D894(uint64_t a1, void *a2)
{
  BOOL v3 = *(_DWORD *)(a1 + 56) != 7;
  id v4 = a2;
  [v4 setIsEnabled:v3];
  [v4 setPrimaryInEarStatus:*(void *)(a1 + 32)];
  [v4 setSecondaryInEarStatus:*(void *)(a1 + 40)];
  [v4 setPrimaryEarbudSide:*(void *)(a1 + 48)];
}

uint64_t sub_10022D8FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10022D908(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDevice:deviceInfoDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothDevice:a1[4] deviceInfoDidChangeFrom:a1[5] to:a1[6]];
  }
}

id sub_10022D958(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 coreBluetoothDevice]);
  id v3 = v2;
  if (!v2)
  {
    id v16 = 0LL;
    goto LABEL_10;
  }

  unsigned int v4 = [v2 vendorID];
  id v5 = [v3 productID];
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](&OBJC_CLASS___CBProductInfo, "productInfoWithProductID:", v5));
  char v7 = (_BYTE)v5 - 10;
  char v8 = 1;
  if (((1 << v7) & 0x20033F) == 0)
  {
    if (((1 << v7) & 0x45A8400) != 0)
    {
LABEL_5:
      v8 |= (((_DWORD)v5 - 8210) < 0x14) & (0x300261u >> ((_BYTE)v5 - 17));
      goto LABEL_6;
    }

id sub_10022DC28(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 bobbleCapability];
  unsigned int v3 = [v1 headGestureToggle];
  unsigned int v4 = [v1 acceptReplyPlayPauseConfig];
  unsigned int v5 = [v1 declineDismissSkipConfig];

  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    if (v2 > 2) {
      char v7 = "?";
    }
    else {
      char v7 = (&off_1004F70B8)[v2];
    }
    if (v3 > 2) {
      char v8 = "?";
    }
    else {
      char v8 = (&off_1004F70D0)[v3];
    }
    if (v4 - 1 > 2) {
      unsigned int v9 = "?";
    }
    else {
      unsigned int v9 = (&off_1004F70E8)[(v4 - 1)];
    }
    if (v5 - 1 > 2) {
      unsigned int v10 = "?";
    }
    else {
      unsigned int v10 = (&off_1004F70E8)[(v5 - 1)];
    }
    *(_DWORD *)__int128 buf = 136316162;
    uint64_t v21 = "ADHeadGestureConfigurationForAA";
    __int16 v22 = 2080;
    id v23 = v7;
    __int16 v24 = 2080;
    unsigned int v25 = v8;
    __int16 v26 = 2080;
    char v27 = v9;
    __int16 v28 = 2080;
    char v29 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s [AAD States] bobbleCapability: %s, headGestureToggle: %s, acceptReplyPlayPauseConfig: %s, declineDismissSkipConfig: %s",  buf,  0x34u);
  }

  int32x2_t v11 = vceq_s32((int32x2_t)__PAIR64__(v5, v4), (int32x2_t)0x200000002LL);
  v12.i64[0] = v11.u32[0];
  v12.i64[1] = v11.u32[1];
  int8x16_t v13 = v12;
  int32x2_t v14 = vceq_s32((int32x2_t)__PAIR64__(v5, v4), (int32x2_t)0x100000001LL);
  v12.i64[0] = v14.i32[0];
  v12.i64[1] = v14.i32[1];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_10022DFC8;
  v16[3] = &unk_1004F7058;
  char v18 = v2;
  char v19 = v3;
  int64x2_t v17 = vsubw_s32((int64x2_t)vandq_s8(vbicq_s8(v13, v12), (int8x16_t)vdupq_n_s64(2uLL)), v14);
  return  +[AFBluetoothHeadGestureConfiguration newWithBuilder:]( &OBJC_CLASS___AFBluetoothHeadGestureConfiguration,  "newWithBuilder:",  v16);
}

void sub_10022DE40(uint64_t a1, void *a2)
{
  id v8 = a2;
  unsigned int v3 = objc_alloc(&OBJC_CLASS___NSUUID);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  unsigned int v5 = -[NSUUID initWithUUIDString:](v3, "initWithUUIDString:", v4);
  [v8 setDeviceUID:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  [v8 setName:v6];

  [v8 setIsAdvancedAppleAudioDevice:*(unsigned __int8 *)(a1 + 64)];
  [v8 setVendorID:*(unsigned int *)(a1 + 56)];
  [v8 setProductID:*(unsigned int *)(a1 + 60)];
  [v8 setIsAdvancedAppleAudioDevice:*(unsigned __int8 *)(a1 + 64)];
  objc_msgSend(v8, "setSupportsInEarDetection:", (objc_msgSend(*(id *)(a1 + 40), "flags") >> 8) & 1);
  [v8 setSupportsVoiceTrigger:*(unsigned __int8 *)(a1 + 65)];
  [v8 setSupportsJustSiri:*(unsigned __int8 *)(a1 + 66)];
  [v8 setSupportsListeningModeANC:*(unsigned __int8 *)(a1 + 67)];
  [v8 setSupportsListeningModeTransparency:*(unsigned __int8 *)(a1 + 68)];
  [v8 setSupportsListeningModeAutomatic:*(unsigned __int8 *)(a1 + 69)];
  objc_msgSend( v8,  "setSupportsConversationAwareness:",  objc_msgSend(*(id *)(a1 + 32), "conversationDetectCapability") == 1);
  objc_msgSend( v8,  "setSupportsPersonalVolume:",  objc_msgSend(*(id *)(a1 + 32), "adaptiveVolumeCapability") == 1);
  [v8 setSupportsSpokenNotification:*(unsigned __int8 *)(a1 + 65)];
  if (*(_BYTE *)(a1 + 65)) {
    uint64_t v7 = ([*(id *)(a1 + 40) flags] >> 8) & 1;
  }
  else {
    uint64_t v7 = 0LL;
  }
  [v8 setSupportsAnnounceCall:v7];
  [v8 setHeadGestureConfiguration:*(void *)(a1 + 48)];
}

void sub_10022DFC8(uint64_t a1, void *a2)
{
  BOOL v3 = *(unsigned __int8 *)(a1 + 48) == 2;
  id v4 = a2;
  [v4 setIsSupported:v3];
  [v4 setIsEnabled:*(unsigned __int8 *)(a1 + 49) == 1];
  [v4 setAcceptGesture:*(void *)(a1 + 32)];
  [v4 setRejectGesture:*(void *)(a1 + 40)];
}

void sub_10022E038(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  unsigned __int8 v3 = [v2 isEqualToString:*(void *)(*(void *)(a1 + 40) + 64)];

  if ((v3 & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bluetoothAddress]);
    unsigned int v5 = [v4 isEqualToString:*(void *)(*(void *)(a1 + 40) + 56)];

    if (!v5) {
      return;
    }
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = v6;
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bluetoothAddress]);
  uint64_t v10 = *(void *)(a1 + 40);
  int32x2_t v11 = *(void **)(v10 + 56);
  *(void *)(v10 + 56) = v9;
}

void sub_10022E0F0(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDevice:headphoneInEarDetectionStateDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothDevice:a1[4] headphoneInEarDetectionStateDidChangeFrom:a1[5] to:a1[6]];
  }
}

void sub_10022E140(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDevice:headphoneListeningModeDidChangeFrom:to:") & 1) != 0) {
    [v3 bluetoothDevice:a1[4] headphoneListeningModeDidChangeFrom:a1[5] to:a1[6]];
  }
}

id sub_10022E190(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateDevice:*(void *)(a1 + 40)];
}

uint64_t sub_10022E19C(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) _headphoneListeningModeFromDevice:*(void *)(*(void *)(a1 + 32) + 48)]);
}

void sub_10022E1CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _inEarDetectionStateFromCBDevice:*(void *)(*(void *)(a1 + 32) + 48)]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10022E214(uint64_t a1)
{
  id v2 = objc_alloc_init(off_100574F58());
  id v3 = v2;
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = 2LL;
  }
  [v2 setHeadGestureToggle:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 48LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10022E410;
  v8[3] = &unk_1004F6FA0;
  id v9 = v6;
  char v10 = *(_BYTE *)(a1 + 48);
  [WeakRetained sendDeviceConfig:v3 device:v7 completion:v8];
}

id sub_10022E2E0()
{
  return (id)qword_1005781E8;
}

Class sub_10022E2EC()
{
  uint64_t v4 = 0LL;
  if (!qword_1005781F0)
  {
    __int128 v5 = off_1004F7078;
    uint64_t v6 = 0LL;
    qword_1005781F0 = _sl_dlopen(&v5, &v4);
  }

  if (!qword_1005781F0)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *AudioAccessoryServicesLibrary(void)"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCoreBluetoothV2Device.m",  14,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  v0 = v4;
  if (v4) {
LABEL_7:
  }
    free(v0);
  Class result = objc_getClass("AADeviceConfig");
  qword_1005781E8 = (uint64_t)result;
  off_100574F58 = (uint64_t (*)(void))sub_10022E2E0;
  return result;
}

void sub_10022E410(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 2LL;
  }

  else
  {
    if (*(_BYTE *)(a1 + 40)) {
      uint64_t v5 = 2LL;
    }
    else {
      uint64_t v5 = 1LL;
    }
    uint64_t v6 = 1LL;
  }

  id v7 = [v4 initWithValue:v5 status:v6];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  id v8 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    char v10 = "-[ADCoreBluetoothV2Device setHeadGestures:completion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Set head gestures response %@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10022E524(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  if (!v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      __int16 v11 = "-[ADCoreBluetoothV2Device getHeadGestures:]_block_invoke";
      __int16 v12 = 2048;
      id v13 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s AADevice is unavailable to get head gestures state %p",  (uint8_t *)&v10,  0x16u);
      id v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
    }

    else
    {
      id v2 = 0LL;
    }
  }

  if ([v2 bobbleCapability] == 2)
  {
    unsigned int v4 = [*(id *)(*(void *)(a1 + 32) + 48) headGestureToggle];
    if (v4 == 1)
    {
      uint64_t v5 = 1LL;
      uint64_t v6 = 2LL;
    }

    else if (v4 == 2)
    {
      uint64_t v5 = 1LL;
      uint64_t v6 = 1LL;
    }

    else
    {
      id v7 = (os_log_s *)AFSiriLogContextLocation;
      uint64_t v5 = 1LL;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v10 = 136315138;
        __int16 v11 = "-[ADCoreBluetoothV2Device getHeadGestures:]_block_invoke";
        uint64_t v5 = 1LL;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Head gestures state is unknown",  (uint8_t *)&v10,  0xCu);
      }

      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 3LL;
  }

  id v8 = [[AFBluetoothDeviceBooleanSettingResponse alloc] initWithValue:v6 status:v5];
  int v9 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    __int16 v11 = "-[ADCoreBluetoothV2Device getHeadGestures:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Get head gestures response %@",  (uint8_t *)&v10,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10022E734(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)off_100574F58());
  id v3 = v2;
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = 2LL;
  }
  [v2 setAdaptiveVolumeConfig:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 48LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10022E800;
  v8[3] = &unk_1004F6FA0;
  id v9 = v6;
  char v10 = *(_BYTE *)(a1 + 48);
  [WeakRetained sendDeviceConfig:v3 device:v7 completion:v8];
}

void sub_10022E800(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 2LL;
  }

  else
  {
    if (*(_BYTE *)(a1 + 40)) {
      uint64_t v5 = 2LL;
    }
    else {
      uint64_t v5 = 1LL;
    }
    uint64_t v6 = 1LL;
  }

  id v7 = [v4 initWithValue:v5 status:v6];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  id v8 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    char v10 = "-[ADCoreBluetoothV2Device setPersonalVolume:completion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Set personal volume response %@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10022E914(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice]);

  if (!v2)
  {
    id v3 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(*(void *)(a1 + 32) + 48LL);
      uint64_t v5 = v3;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 coreBluetoothDevice]);
      int v16 = 136315650;
      int64x2_t v17 = "-[ADCoreBluetoothV2Device getPersonalVolume:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = v4;
      __int16 v20 = 2048;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s CBDevice is unavailable to get personal volume state %p %p",  (uint8_t *)&v16,  0x20u);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice]);
  unsigned int v8 = [v7 adaptiveVolumeCapability];

  if (v8 == 1)
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice]);
    unsigned int v10 = [v9 adaptiveVolumeConfig];

    if (v10 == 1)
    {
      uint64_t v11 = 2LL;
      uint64_t v12 = 1LL;
    }

    else
    {
      id v13 = (os_log_s *)AFSiriLogContextLocation;
      uint64_t v12 = 1LL;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v16 = 136315138;
        int64x2_t v17 = "-[ADCoreBluetoothV2Device getPersonalVolume:]_block_invoke";
        uint64_t v12 = 1LL;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Personal volume state is unknown",  (uint8_t *)&v16,  0xCu);
      }

      uint64_t v11 = 0LL;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 3LL;
  }

  id v14 = [[AFBluetoothDeviceBooleanSettingResponse alloc] initWithValue:v11 status:v12];
  id v15 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    int64x2_t v17 = "-[ADCoreBluetoothV2Device getPersonalVolume:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Get personal volume response %@",  (uint8_t *)&v16,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10022EB74(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)off_100574F58());
  id v3 = v2;
  if (*(_BYTE *)(a1 + 48)) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = 2LL;
  }
  [v2 setConversationDetectConfig:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 48LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10022EC40;
  v8[3] = &unk_1004F6FA0;
  id v9 = v6;
  char v10 = *(_BYTE *)(a1 + 48);
  [WeakRetained sendDeviceConfig:v3 device:v7 completion:v8];
}

void sub_10022EC40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc(&OBJC_CLASS___AFBluetoothDeviceBooleanSettingResponse);
  if (v3)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 2LL;
  }

  else
  {
    if (*(_BYTE *)(a1 + 40)) {
      uint64_t v5 = 2LL;
    }
    else {
      uint64_t v5 = 1LL;
    }
    uint64_t v6 = 1LL;
  }

  id v7 = [v4 initWithValue:v5 status:v6];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  unsigned int v8 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315394;
    char v10 = "-[ADCoreBluetoothV2Device setConversationAwareness:completion:]_block_invoke_2";
    __int16 v11 = 2112;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Set conversation awareness response %@",  (uint8_t *)&v9,  0x16u);
  }
}

void sub_10022ED54(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice]);

  if (!v2)
  {
    id v3 = (void *)AFSiriLogContextLocation;
    if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(*(void *)(a1 + 32) + 48LL);
      uint64_t v5 = v3;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 coreBluetoothDevice]);
      int v16 = 136315650;
      int64x2_t v17 = "-[ADCoreBluetoothV2Device getConversationAwareness:]_block_invoke";
      __int16 v18 = 2048;
      id v19 = v4;
      __int16 v20 = 2048;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s CBDevice is unavailable to get conversation awareness state %p %p",  (uint8_t *)&v16,  0x20u);
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice]);
  unsigned int v8 = [v7 conversationDetectCapability];

  if (v8 == 1)
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) coreBluetoothDevice]);
    unsigned int v10 = [v9 conversationDetectConfig];

    if (v10 == 1)
    {
      uint64_t v11 = 2LL;
      uint64_t v12 = 1LL;
    }

    else
    {
      id v13 = (os_log_s *)AFSiriLogContextLocation;
      uint64_t v12 = 1LL;
      if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
      {
        int v16 = 136315138;
        int64x2_t v17 = "-[ADCoreBluetoothV2Device getConversationAwareness:]_block_invoke";
        uint64_t v12 = 1LL;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Conversation awareness state is unknown",  (uint8_t *)&v16,  0xCu);
      }

      uint64_t v11 = 0LL;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 3LL;
  }

  id v14 = [[AFBluetoothDeviceBooleanSettingResponse alloc] initWithValue:v11 status:v12];
  id v15 = (os_log_s *)AFSiriLogContextLocation;
  if (os_log_type_enabled(AFSiriLogContextLocation, OS_LOG_TYPE_INFO))
  {
    int v16 = 136315394;
    int64x2_t v17 = "-[ADCoreBluetoothV2Device getConversationAwareness:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Get conversation awareness response %@",  (uint8_t *)&v16,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10022EFB4(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)off_100574F58());
  id v3 = v2;
  else {
    uint64_t v4 = 0LL;
  }
  [v2 setListeningMode:v4];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 48LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10022F078;
  v8[3] = &unk_1004FCC00;
  id v9 = v6;
  [WeakRetained sendDeviceConfig:v3 device:v7 completion:v8];
}

uint64_t sub_10022F078(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10022F084(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_10022F0C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10022F0D8(uint64_t a1)
{
}

void sub_10022F0E0(uint64_t a1)
{
}

void sub_10022F0F4(uint64_t a1)
{
}

void sub_10022F108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 56);
  if (!v2) {
    id v2 = *(void **)(v1 + 64);
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = v2;
  uint64_t v5 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v4;
}

void sub_10022F144(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceInfo]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10022F188(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _deviceInfo]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10022F1C0(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));

    uint64_t v3 = *(id **)(a1 + 32);
    if (WeakRetained)
    {
      id v6 = objc_loadWeakRetained(v3 + 1);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) address]);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
      [v6 invalidateDeviceWithAddress:v4 cbuuid:v5];
    }

    else
    {
      [v3 _invalidate];
    }
  }

id sub_10022F284(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable"));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  return [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10022F2D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "bluetoothDeviceDidInvalidate:") & 1) != 0) {
    [v3 bluetoothDeviceDidInvalidate:*(void *)(a1 + 32)];
  }
}

id sub_10022F324(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_10022F32C(uint64_t a1)
{
}

void sub_10022F360(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained address]);

  if (v3)
  {
    id v4 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained address]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    void v14[2] = sub_10022F4E4;
    v14[3] = &unk_1004F6F50;
    id v15 = *(id *)(a1 + 32);
    id v16 = WeakRetained;
    [v4 fetchAudioAccessoryDeviceForBTAddress:v5 completion:v14];

    id v6 = v15;
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cbuuid]);

    uint64_t v8 = *(void *)(a1 + 32);
    if (!v7)
    {
      dispatch_group_leave(*(dispatch_group_t *)(v8 + 40));
      goto LABEL_6;
    }

    id v9 = objc_loadWeakRetained((id *)(v8 + 8));
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained cbuuid]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10022F59C;
    void v11[3] = &unk_1004F6F50;
    id v12 = *(id *)(a1 + 32);
    id v13 = WeakRetained;
    [v9 fetchAudioAccessoryDeviceForCBUUID:v10 completion:v11];

    id v6 = v12;
  }

LABEL_6:
}

void sub_10022F4E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = (dispatch_queue_s *)v4[4];
    uint64_t v7 = _NSConcreteStackBlock;
    uint64_t v8 = 3221225472LL;
    id v9 = sub_10022F6C8;
    unsigned int v10 = &unk_1004FD968;
    uint64_t v11 = v4;
    id v6 = v3;
    id v12 = v6;
    dispatch_async(v5, &v7);
    objc_msgSend(*(id *)(a1 + 40), "updateDevice:", v6, v7, v8, v9, v10);
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40LL));
}

void sub_10022F59C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10022F65C;
    block[3] = &unk_1004FD4C0;
    id v7 = v3;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    dispatch_async(v5, block);
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40LL));
}

id sub_10022F65C(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([result bluetoothAddress]);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = v3;

    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(v7 + 64);
    *(void *)(v7 + 64) = v6;

    return [*(id *)(a1 + 48) updateDevice:*(void *)(a1 + 32)];
  }

  return result;
}

void sub_10022F6C8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 64);
  *(void *)(v3 + 64) = v2;
}

id sub_10022FB98()
{
  if (qword_100578200 != -1) {
    dispatch_once(&qword_100578200, &stru_1004F7120);
  }
  return (id)qword_1005781F8;
}

void sub_10022FBD8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 136315394;
    id v8 = "-[ADManagedStorageConnection resetKnowledgeStoreWithName:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v7, 0x16u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _defaultStoreSpecificKeyPrefixForName:*(void *)(a1 + 32)]);
  id v5 = [[CKGenericCondition alloc] initWithMatchType:0 value:v4 negated:0];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _storeWithName:*(void *)(a1 + 32)]);
  [v6 removeValuesMatching:v5 completionHandler:&stru_1004F7100];

  [*(id *)(*(void *)(a1 + 40) + 8) removeObjectForKey:*(void *)(a1 + 32)];
}

void sub_10022FD0C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      id v5 = "-[ADManagedStorageConnection resetKnowledgeStoreWithName:completion:]_block_invoke";
      __int16 v6 = 2112;
      int v7 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%s %@", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_10022FDD0(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_t v3 = dispatch_queue_create("_ADGlobalKnowledgeStoreQueue_block_invoke", v2);

  int v4 = (void *)qword_1005781F8;
  qword_1005781F8 = (uint64_t)v3;
}

void sub_10022FE20(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_defaultStoreSpecificKeyForName:key:", *(void *)(a1 + 48)));
    dispatch_queue_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _storeWithName:*(void *)(a1 + 48)]);
    int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKey:v2]);
  }

  else
  {
    int v4 = 0LL;
  }

  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 136315650;
    id v8 = "-[ADManagedStorageConnection getKnowledgeStoreDataForKey:inStoreWithName:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %@ %@", (uint8_t *)&v7, 0x20u);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10022FF44(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 136315394;
    __int16 v9 = "-[ADManagedStorageConnection setKnowledgeStoreData:forKey:inStoreWithName:completion:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", (uint8_t *)&v8, 0x16u);
  }

  if (*(void *)(a1 + 40))
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_defaultStoreSpecificKeyForName:key:", *(void *)(a1 + 32)));
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _storeWithName:*(void *)(a1 + 32)]);
    int v7 = v6;
    if (v5) {
      [v6 setValue:*(void *)(a1 + 56) forKey:v4];
    }
    else {
      [v6 removeValueForKey:v4 error:0];
    }
  }

LABEL_88:
                uint64_t v11 = v124;
              }

              id v61 = v113;
            }

            else
            {
              __int128 v84 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315138;
                v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
                _os_log_error_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_ERROR,  "%s received malformed route identifier container",  buf,  0xCu);
              }

              id obj = 0LL;
            }

            __int128 v83 = (os_log_s *)obj;
          }

          else
          {
            __int128 v83 = 0LL;
          }

          obja = v83;
          -[ADPeerInfo setAirPlayRouteIdentifiers:](v61, "setAirPlayRouteIdentifiers:");
          __int128 v86 = objc_claimAutoreleasedReturnValue([v11 objectForKey:RPOptionSenderIDSDeviceID]);
          if (v86)
          {
            __int128 v87 = (void *)objc_claimAutoreleasedReturnValue( -[ADCompanionService _companionLinkDeviceForUniqueIDSIdentifier:allowsAWDLFallback:]( self,  "_companionLinkDeviceForUniqueIDSIdentifier:allowsAWDLFallback:",  v86,  v126));
            id v88 = v87;
            if (v87)
            {
              uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v87 effectiveIdentifier]);
              -[ADPeerInfo setRapportEffectiveIdentifier:](v61, "setRapportEffectiveIdentifier:", v89);

              -[ADPeerInfo setDeviceOwnedByCurrentUser:]( v61,  "setDeviceOwnedByCurrentUser:",  ((unint64_t)[v88 statusFlags] >> 19) & 1);
            }

            else
            {
              id v91 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315394;
                v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
                v158 = 2112;
                v159 = (NSMutableDictionary *)v86;
                _os_log_error_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_ERROR,  "%s unable to find sender with id: (%@)",  buf,  0x16u);
              }
            }

            id v61 = v113;
          }

          else
          {
            id v90 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 136315138;
              v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
              _os_log_error_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "%s sender has no IDS identifier",  buf,  0xCu);
            }
          }

          id v92 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"userInterfaceIdiom"]);
          if (v92)
          {
            id v93 = objc_opt_class(&OBJC_CLASS___NSString);
            if ((objc_opt_isKindOfClass(v92, v93) & 1) == 0)
            {
              __int128 v94 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315138;
                v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
                _os_log_error_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "%s received malformed User Interface Idiom",  buf,  0xCu);
              }

              id v92 = 0LL;
            }
          }

          -[ADPeerInfo setUserInterfaceIdiom:](v61, "setUserInterfaceIdiom:", v92);
          __int128 v95 = objc_claimAutoreleasedReturnValue([v9 objectForKey:@"aceVersion"]);
          if (v95 && (__int128 v96 = objc_opt_class(&OBJC_CLASS___NSString), (objc_opt_isKindOfClass(v95, v96) & 1) == 0))
          {
            __int128 v97 = (void *)v86;
            id v127 = (void *)v95;
            uint64_t v98 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 136315138;
              v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
              _os_log_error_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_ERROR,  "%s received malformed ACE Version",  buf,  0xCu);
            }

            __int128 v95 = 0LL;
          }

          else
          {
            __int128 v97 = (void *)v86;
          }

          -[ADPeerInfo setAceVersion:](v61, "setAceVersion:", v95);
          id v99 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"mediaSystemId"]);
          id v125 = v97;
          id v128 = (void *)v95;
          if (v99)
          {
            uint64_t v100 = objc_opt_class(&OBJC_CLASS___NSString);
            if ((objc_opt_isKindOfClass(v99, v100) & 1) == 0)
            {
              v101 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315138;
                v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
                _os_log_error_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_ERROR,  "%s received malformed Media System ID",  buf,  0xCu);
              }

              id v99 = 0LL;
            }
          }

          -[ADPeerInfo setMediaSystemIdentifier:](v61, "setMediaSystemIdentifier:", v99);
          id v102 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"executionContext"]);
          char v123 = v92;
          if (v102)
          {
            id v103 = objc_opt_class(&OBJC_CLASS___NSDictionary);
            if ((objc_opt_isKindOfClass(v102, v103) & 1) == 0)
            {
              int v104 = (os_log_s *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 136315138;
                v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
                _os_log_error_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "%s received malformed execution context",  buf,  0xCu);
              }

              id v102 = 0LL;
            }
          }

          if (v133)
          {
            incomingRequestLog = self->_incomingRequestLog;
            __int16 v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
            [v106 systemUptime];
            id v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
            -[NSMutableDictionary setObject:forKey:](incomingRequestLog, "setObject:forKey:", v107, v133);
          }

          __int16 v108 = (void *)objc_claimAutoreleasedReturnValue( -[ADCompanionService _setUpNewIntermediateIDsSetForPeer:]( self,  "_setUpNewIntermediateIDsSetForPeer:",  v113));
          -[ADCompanionService _prepAWDLClientLinkIfMessageReceivedOverAWDL:]( self,  "_prepAWDLClientLinkIfMessageReceivedOverAWDL:",  v9);
          uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
          v134[0] = _NSConcreteStackBlock;
          v134[1] = 3221225472LL;
          v134[2] = sub_1002441D8;
          v134[3] = &unk_1004F7300;
          v134[4] = self;
          v135 = v108;
          v136 = v113;
          v137 = v133;
          v138 = v119;
          v139 = spid;
          id v110 = v113;
          uint64_t v111 = v108;
          [v109 executeCommand:v29 fromPeer:v110 remoteExecutionInfo:v102 reply:v134];

          id v12 = v119;
          id v19 = v130;
          __int16 v51 = v132;
          id v76 = v115;
          uint64_t v73 = v116;
          uint64_t v78 = v112;
        }

        else
        {
          uint64_t v77 = (os_log_s *)AFSiriLogContextDaemon;
          uint64_t v73 = v116;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315394;
            v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
            v158 = 2112;
            v159 = v116;
            _os_log_error_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_ERROR,  "%s validation error %@",  buf,  0x16u);
          }

          uint64_t v78 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
          unint64_t v79 = objc_alloc_init(&OBJC_CLASS___SACommandIgnored);
          __int128 v80 = (void *)objc_claimAutoreleasedReturnValue([v79 dictionary]);
          -[NSMutableDictionary setObject:forKey:](v78, "setObject:forKey:", v80, @"commandResponse");

          ((void (**)(void, NSMutableDictionary *, void, NSMutableDictionary *))v119)[2]( v119,  v78,  0LL,  v116);
          __int128 v81 = (os_log_s *)AFSiriLogContextPerformance;
          obja = v81;
          if (v56 > 0xFFFFFFFFFFFFFFFDLL)
          {
            id v12 = v119;
            __int16 v51 = v132;
          }

          else
          {
            __int128 v82 = v81;
            __int16 v51 = v132;
            if (os_signpost_enabled(v81))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v82,  OS_SIGNPOST_INTERVAL_END,  spid,  "CompanionService",  "Validation error, rejected request",  buf,  2u);
            }

            id v12 = v119;
          }

          id v76 = v115;
        }
      }

      else
      {
        id v72 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315138;
          v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
          _os_log_error_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_ERROR,  "%s received malformed command",  buf,  0xCu);
        }

        uint64_t v73 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
        v74 = objc_alloc_init(&OBJC_CLASS___SACommandIgnored);
        v75 = (void *)objc_claimAutoreleasedReturnValue([v74 dictionary]);
        -[NSMutableDictionary setObject:forKey:](v73, "setObject:forKey:", v75, @"commandResponse");

        id v76 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
        (*((void (**)(id, NSMutableDictionary *, void, void *))v12 + 2))(v12, v73, 0LL, v76);
        __int16 v51 = v132;
      }

      goto LABEL_126;
    }

    __int16 v28 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s Lost mode is active, rejecting incoming request",  buf,  0xCu);
    }

    char v29 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1003LL));
    (*((void (**)(id, void, void, id))v12 + 2))(v12, 0LL, 0LL, v29);
LABEL_44:
    __int16 v51 = v132;
LABEL_126:

    __int16 v10 = v133;
    goto LABEL_127;
  }

  id v16 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "%s Received message via AWDL", buf, 0xCu);
  }

  if ((+[AFFeatureFlags isAWDLFallbackForPersonalRequestsEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isAWDLFallbackForPersonalRequestsEnabled") & 1) != 0)
  {
    __int16 v126 = 1;
    goto LABEL_10;
  }

  uint64_t v45 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    v157 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%s Received message via AWDL but AWDL is not enabled. Return the companion mismatched error dialog.",  buf,  0xCu);
  }

  id v19 = objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1019LL));
  (*((void (**)(id, void, void, uint64_t))v12 + 2))(v12, 0LL, 0LL, v19);
LABEL_127:
}

LABEL_56:
        char v27 = 0;
        goto LABEL_57;
      }

      if ([v19 length])
      {
LABEL_47:
        if (a6) {
          *a6 = v19;
        }
        if (a7) {
          *a7 = (id) v14;
        }
        id v23 = 0LL;
        if (a8) {
          *a8 = (id) v16;
        }
        char v27 = 1;
        goto LABEL_57;
      }
    }

    if (!(v14 | v16))
    {
      uint64_t v21 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        __int16 v35 = 136315138;
        id v36 = "-[ADCompanionService _validateIncomingRequest:options:error:assistantId:idsDeviceId:homeKitId:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s no IDS, HomeKit or Assistant id specified",  (uint8_t *)&v35,  0xCu);
      }

      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  11LL,  @"No IDS, HomeKit or Assistant ID specified."));
      id v23 = v22;
      if (a5)
      {
        __int16 v24 = v22;
        id v23 = v24;
        id v19 = 0LL;
LABEL_44:
        char v27 = 0;
        *a5 = v24;
LABEL_57:

LABEL_58:
LABEL_59:

        goto LABEL_60;
      }

      id v19 = 0LL;
      goto LABEL_56;
    }

    id v19 = 0LL;
    goto LABEL_47;
  }

  unsigned int v25 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    __int16 v35 = 136315138;
    id v36 = "-[ADCompanionService _validateIncomingRequest:options:error:assistantId:idsDeviceId:homeKitId:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s malformed request dictionary",  (uint8_t *)&v35,  0xCu);
  }

  __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  11LL,  @"Malformed request dictionary."));
  id v23 = v26;
  if (a5)
  {
    id v23 = v26;
    char v27 = 0;
    *a5 = v23;
  }

  else
  {
    char v27 = 0;
  }

  char v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_rttCurrent));
  [v3 setObject:v30 forKey:@"rtt_current"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x200000) == 0)
  {
LABEL_10:
    if ((*(_DWORD *)&has & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_58;
  }

  PBDataWriterWriteUint32Field(v5, self->_rttVariance, 12LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x80000) == 0)
  {
LABEL_12:
    if ((*(_WORD *)&has & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }

  v4[10] = self->_txBytes;
  *((_DWORD *)v4 + 53) |= 0x200u;
  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_WORD *)&has & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_58;
  }

  void v5[5] = self->_rxDuplicateBytes;
  *((_DWORD *)v5 + 53) |= 0x10u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_20:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }

  __int16 v41 = 0LL;
  if ((*(_BYTE *)&has & 0x40) != 0)
  {
LABEL_40:
    __int128 v40 = 2654435761u * self->_rxPackets;
    if ((*(_BYTE *)&has & 8) != 0) {
      goto LABEL_41;
    }
    goto LABEL_58;
  }

  self->_rttVariance = *((_DWORD *)v4 + 46);
  *(_DWORD *)&self->_has |= 0x400000u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x80000) == 0)
  {
LABEL_12:
    if ((v6 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }

LABEL_60:
  return v27;
}

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txPackets));
  [v3 setObject:v34 forKey:@"tx_packets"];

  has = self->_has;
  if ((*(_WORD *)&has & 0x200) == 0)
  {
LABEL_14:
    if ((*(_WORD *)&has & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }

  PBDataWriterWriteUint64Field(v5, self->_txRetransmitBytes, 22LL);
  has = self->_has;
  if ((*(_WORD *)&has & 0x1000) == 0)
  {
LABEL_16:
    if ((*(_BYTE *)&has & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }

  void v4[4] = self->_rxBytes;
  *((_DWORD *)v4 + 53) |= 8u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x10) == 0)
  {
LABEL_19:
    if ((*(_BYTE *)&has & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_62;
  }

  *((_DWORD *)v5 + 47) = self->_subflowCount;
  *((_DWORD *)v5 + 53) |= 0x800000u;
  if ((*(_DWORD *)&self->_has & 0x4000) != 0)
  {
LABEL_24:
    *((_DWORD *)v5 + 29) = self->_connectedSubflowCount;
    *((_DWORD *)v5 + 53) |= 0x4000u;
  }

  __int128 v37 = 0LL;
  if ((*(_BYTE *)&has & 0x80) != 0)
  {
LABEL_44:
    id v36 = 2654435761u * self->_sndBandwidth;
    if ((*(_DWORD *)&has & 0x1000000) != 0) {
      goto LABEL_45;
    }
LABEL_62:
    __int16 v35 = 0LL;
    if ((*(_DWORD *)&has & 0x800000) != 0) {
      goto LABEL_46;
    }
    goto LABEL_63;
  }

  self->_txRetransmitBytes = *((void *)v4 + 12);
  *(_DWORD *)&self->_has |= 0x800u;
  uint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }

void sub_100234188( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100236720(_Unwind_Exception *a1)
{
}

void sub_1002376C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_100238784( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location, char a23)
{
}

void sub_1002394D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id location)
{
}

LABEL_105:
    if (v81 == (id)++v83)
    {
      __int128 v81 = [v79 countByEnumeratingWithState:&v136 objects:v149 count:16];
      if (v81) {
        goto LABEL_87;
      }
      goto LABEL_107;
    }
  }

  if ([v84 isDiscoveredOverWifiP2P])
  {
    if (v127)
    {
      id v91 = v84;
      id v92 = (void *)v128;
      id v128 = (unint64_t)v91;
      goto LABEL_104;
    }

    goto LABEL_105;
  }

  id v57 = v84;

  if (v57) {
    goto LABEL_130;
  }
  uint64_t v11 = v123;
  self = v38;
  int64x2_t v17 = v126;
LABEL_109:
  __int128 v96 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    v153 = "-[ADCompanionService _companionLinkDeviceForPeer:allowsDeviceCircleLookup:allowsAWDLFallback:error:logDiscoveryContextFor:]";
    _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_INFO,  "%s Searching using uniqueIdentifierForPeer",  buf,  0xCu);
  }

  __int128 v97 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance"));
  uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 uniqueIdentifierForPeer:v11]);

  if ([v98 length])
  {
    uint64_t v134 = 0u;
    v135 = 0u;
    id v132 = 0u;
    __int16 v133 = 0u;
    id v99 = v17;
    id v57 = (uint64_t)[v99 countByEnumeratingWithState:&v132 objects:v148 count:16];
    if (v57)
    {
      uint64_t v100 = *(void *)v133;
      while (2)
      {
        for (j = 0LL; j != v57; ++j)
        {
          if (*(void *)v133 != v100) {
            objc_enumerationMutation(v99);
          }
          id v102 = *(void **)(*((void *)&v132 + 1) + 8 * j);
          id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 idsDeviceIdentifier]);
          int v104 = [v103 isEqualToString:v98];

          if (v104)
          {
            objc_msgSend(v130, "setDiscoveryType:", objc_msgSend(v102, "getHALDiscoveryType"));
            id v105 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              v153 = "-[ADCompanionService _companionLinkDeviceForPeer:allowsDeviceCircleLookup:allowsAWDLFallback:error:"
                     "logDiscoveryContextFor:]";
              _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "%s Found the matching device using uniqueIdentifier",  buf,  0xCu);
            }

            __int16 v106 = (void *)objc_claimAutoreleasedReturnValue(-[ADRapportLink localDevice](v38->_clientLink, "localDevice"));
            id v107 = [v102 hasValidDiscoveryTypeForLocalDevice:v106];

            if (v107)
            {
              if (![v102 isDiscoveredOverWifiP2P])
              {
                id v57 = v102;
                goto LABEL_134;
              }

              if (v127)
              {
                __int16 v108 = v102;

                id v128 = (unint64_t)v108;
              }
            }
          }
        }

        id v57 = (uint64_t)[v99 countByEnumeratingWithState:&v132 objects:v148 count:16];
        if (v57) {
          continue;
        }
        break;
      }

              v66 = self->_modificationDateCache;
              v67 = (void *)objc_claimAutoreleasedReturnValue([v27 modificationDate]);
              id v68 = v66;
              __int16 v55 = v49;
              -[NSMutableDictionary setObject:forKey:](v68, "setObject:forKey:", v67, v37);

              v198 = 1;
              goto LABEL_106;
            }

            if (v34 == v49) {
              goto LABEL_100;
            }
            __int16 v55 = v49;
            id v61 = sub_1002747C4(v34, v49, v37);
LABEL_97:
            uint64_t v45 = v185;
            if ((v61 & 1) != 0)
            {
LABEL_107:
              __int16 v18 = v188;
              goto LABEL_108;
            }

            __int16 v18 = v188;
            if (!v55) {
              goto LABEL_99;
            }
          }

          else
          {
            if (v34 == v49) {
              goto LABEL_94;
            }
            __int16 v55 = v49;
            id v60 = sub_1002747C4(v34, v49, v37);
LABEL_91:
            __int16 v18 = v188;
            if ((v60 & 1) != 0) {
              goto LABEL_108;
            }
            if (!v55)
            {
LABEL_99:
              __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              -[NSMutableDictionary setObject:forKey:](log, "setObject:forKey:", v63, v37);

              __int16 v55 = 0LL;
              goto LABEL_108;
            }
          }

          -[NSMutableDictionary setObject:forKey:](log, "setObject:forKey:", v55, v37);
          goto LABEL_108;
        }

        __int128 v37 = AFSiriLogContextDaemon;
        if (os_log_type_enabled((os_log_t)v37, OS_LOG_TYPE_INFO))
        {
          __int128 v38 = (id)objc_claimAutoreleasedReturnValue([v27 recordType]);
          *(_DWORD *)__int128 buf = 136315394;
          v241 = "-[ADCloudKitKeyValueDataStore _mergeDataWithModifiedRecords:deletedRecordIDs:containsAllChanges:completion:]";
          v242 = 2112;
          v243 = v38;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v37,  OS_LOG_TYPE_INFO,  "%s Unsupported record type : (%@)",  buf,  0x16u);
        }

LABEL_134:
      uint64_t v11 = v123;
      self = v38;
      int64x2_t v17 = v126;
    }
  }

  else
  {
    id v57 = 0LL;
  }

  id v14 = v130;

  id v12 = v125;
  if (!v57 && v122)
  {
    buf[0] = 0;
    uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue([v11 afPeerInfo]);
    id v110 = sub_10016563C(v109, buf);
    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(v110);

    if (buf[0])
    {
      id v112 = -[ADPeerInfo initWithAFPeerInfo:](objc_alloc(&OBJC_CLASS___ADPeerInfo), "initWithAFPeerInfo:", v111);
      __int16 v131 = v129;
      id v57 = objc_claimAutoreleasedReturnValue( -[ADCompanionService _companionLinkDeviceForPeer:allowsDeviceCircleLookup:allowsAWDLFallback:error:logDiscoveryContextFor:]( self,  "_companionLinkDeviceForPeer:allowsDeviceCircleLookup:allowsAWDLFallback:error:logDiscoveryContextFor:",  v112,  0LL,  v127,  &v131,  0LL));
      id v113 = v131;

      id v12 = v125;
      v129 = v113;
    }

    else
    {
      id v57 = 0LL;
    }
  }

  id v58 = v57 != 0;
  if (v57 | v128)
  {
    if (v57)
    {
LABEL_145:
      id v115 = [(id)v57 isMeDevice];
    }

    else
    {
      id v115 = [(id)v128 isMeDevice];
      id v58 = 0;
    }

    [v14 setIsMeDevice:v115];
  }

  else
  {
    id v119 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      v153 = "-[ADCompanionService _companionLinkDeviceForPeer:allowsDeviceCircleLookup:allowsAWDLFallback:error:logDisco"
             "veryContextFor:]";
      v154 = 2112;
      v155 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_ERROR,  "%s unable to find device with peer: %@",  buf,  0x16u);
    }

    id v120 = v129;
    if (!v129) {
      id v120 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1011LL));
    }
    if (v121)
    {
      id v58 = 0;
      id v57 = 0LL;
      id v128 = 0LL;
      v129 = v120;
      *id v121 = v129;
    }

    else
    {
      id v128 = 0LL;
      v129 = v120;
      id v58 = 0;
      id v57 = 0LL;
    }
  }

  if (v124) {
    -[ADCompanionService _logCompanionDeviceDiscoveryContextFor:executionId:]( self,  "_logCompanionDeviceDiscoveryContextFor:executionId:",  v14,  v12);
  }
  if (v58)
  {
    v116 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      v153 = "-[ADCompanionService _companionLinkDeviceForPeer:allowsDeviceCircleLookup:allowsAWDLFallback:error:logDisco"
             "veryContextFor:]";
      _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_INFO,  "%s Device found over iWifi will be favored.",  buf,  0xCu);
    }
  }

  if (v57) {
    id v117 = (void *)v57;
  }
  else {
    id v117 = (void *)v128;
  }
  __int128 v34 = v117;

LABEL_157:
  return v34;
}

void sub_10023E2E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_10023E870(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:*(void *)(a1 + 40)]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v2 != 0LL;
}

id sub_10023E8B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 48) forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_10023E8C0(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:*(void *)(a1 + 32)])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10023EA50;
    block[3] = &unk_1004FD4C0;
    uint64_t v3 = *(dispatch_queue_s **)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    id v4 = *(id *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    id v8 = v4;
    uint64_t v9 = v5;
    dispatch_async(v3, block);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

uint64_t sub_10023E960(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10023E970(uint64_t a1)
{
}

void sub_10023E978(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315394;
    id v8 = "-[ADCompanionService getDevicesDiscoveredNearbyForUserID:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s user specific devices: %@",  (uint8_t *)&v7,  0x16u);
  }

id sub_10023EA50(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 48) forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_10023EA60(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADCompanionService _scheduleOrExtendAWDLClientLinkTimer]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s timer went off in _scheduleAWDLClientLinkTimer",  (uint8_t *)&v4,  0xCu);
  }

  return [*(id *)(a1 + 32) invalidateClientAWDLTransportLink];
}

void sub_10023EB10(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = v2[18];
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3 == v4)
  {
    if (v6)
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v15 = "-[ADCompanionService rapportLinkDidInvalidate:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s AWDL client link invalidated", buf, 0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }

    [v2 invalidateClientAWDLTransportLink];
  }

  else
  {
    if (v6)
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v15 = "-[ADCompanionService rapportLinkDidInvalidate:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s companion service connection invalidated",  buf,  0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 playbackDeviceIDs]);
    [v7 removeAllObjects];

    [*(id *)(a1 + 32) removeListener:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = *(void **)(v8 + 168);
    *(void *)(v8 + 16_Block_object_dispose(va, 8) = 0LL;

    dispatch_time_t v10 = dispatch_time(0LL, 20000000000LL);
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(dispatch_queue_s **)(v11 + 160);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10023ECB0;
    block[3] = &unk_1004FD940;
    void block[4] = v11;
    dispatch_after(v10, v12, block);
  }

id sub_10023ECB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setupClientLink];
}

id sub_10023ECB8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = v2[18];
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v6 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v3 == v4)
  {
    if (v6)
    {
      int v11 = 136315138;
      id v12 = "-[ADCompanionService rapportLinkDidInterrupt:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s AWDL client link interrupted",  (uint8_t *)&v11,  0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }

    return [v2 invalidateClientAWDLTransportLink];
  }

  else
  {
    if (v6)
    {
      int v11 = 136315138;
      id v12 = "-[ADCompanionService rapportLinkDidInterrupt:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s companion service connection interrupted",  (uint8_t *)&v11,  0xCu);
      uint64_t v2 = *(void **)(a1 + 40);
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 playbackDeviceIDs]);
    [v7 removeAllObjects];

    [*(id *)(a1 + 32) removeListener:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = *(void **)(v8 + 168);
    *(void *)(v8 + 16_Block_object_dispose(va, 8) = 0LL;

    return [*(id *)(a1 + 40) _setupClientLink];
  }

void sub_10023EE0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id obj = *(id *)(a1 + 32);
  id v6 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v26;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(obj);
        }
        dispatch_time_t v10 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        dispatch_group_enter(v4);
        int v11 = *(void **)(a1 + 40);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 homeKitIdentifier]);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        void v20[2] = sub_10023F050;
        v20[3] = &unk_1004F76C0;
        void v20[4] = *(void *)(a1 + 48);
        id v21 = v3;
        __int16 v22 = v5;
        id v23 = v10;
        __int16 v24 = v4;
        [v11 getHomeIdForAccessoryId:v12 completion:v20];
      }

      id v7 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v7);
  }

  id v13 = *(void **)(a1 + 56);
  id v14 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10023F114;
  block[3] = &unk_1004FD990;
  __int16 v18 = v5;
  id v19 = v13;
  id v15 = v5;
  dispatch_group_notify(v4, v14, block);
}

void sub_10023F050(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10023F124;
  block[3] = &unk_1004F7698;
  id v11 = v3;
  id v12 = v4;
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void **)(a1 + 64);
  id v13 = v6;
  uint64_t v14 = v7;
  id v15 = v8;
  id v9 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_10023F114(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10023F124(uint64_t a1)
{
}

id sub_10023F15C(uint64_t a1, void *a2)
{
  return [a2 setHomeKitAccessoryIdentifier:*(void *)(a1 + 32)];
}

id sub_10023F168(uint64_t a1, void *a2)
{
  return [a2 setIdsDeviceUniqueIdentifier:*(void *)(a1 + 32)];
}

void sub_10023F174(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1007LL));
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10023F1D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  dispatch_time_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 32);
    int v14 = 136316162;
    id v15 = "-[ADCompanionService _sendHeartbeatMessage:targetDeviceIdentifier:timeout:completion:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v11;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2112;
    id v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s heartbeat request response : %@ %@ %@ %@",  (uint8_t *)&v14,  0x34u);
  }

  if (*(_BYTE *)(a1 + 56)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      id v15 = "-[ADCompanionService _sendHeartbeatMessage:targetDeviceIdentifier:timeout:completion:]_block_invoke";
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring error %@",  (uint8_t *)&v14,  0x16u);
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, id))(v12 + 16))(v12, v9);
    }
  }
}

void sub_10023F370(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    id v19 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
    __int16 v20 = 2112;
    uint64_t v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s heartbeat fired: %@", buf, 0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timerInfo]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:*(void *)(a1 + 32)]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 requestTimer]);

  if (v7 && ([v7 isStopped] & 1) == 0)
  {
    double v10 = *(double *)(a1 + 64);
    double v11 = *(double *)(a1 + 72);
    id v12 = [*(id *)(a1 + 40) _newRequestDictionary];
    [v12 setObject:*(void *)(a1 + 32) forKey:@"hbMessageID"];
    id v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10023F6D4;
    v15[3] = &unk_1004F7620;
    objc_copyWeak(&v17, (id *)(a1 + 56));
    id v16 = *(id *)(a1 + 32);
    [v13 _sendHeartbeatMessage:v12 targetDeviceIdentifier:v14 timeout:v15 completion:(v10 - v11) * 0.949999988];

    objc_destroyWeak(&v17);
  }

  else
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315394;
      id v19 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%s timer already fired: %@", buf, 0x16u);
    }
  }
}

void sub_10023F5BC(_Unwind_Exception *a1)
{
}

uint64_t sub_10023F5D8(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315394;
    id v8 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s request timed out: %@",  (uint8_t *)&v7,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timerInfo]);
  [v4 removeObjectForKey:*(void *)(a1 + 32)];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10023F6D4(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timerInfo]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 32)]);

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 requestTimer]);
    int v7 = v6;
    if (v6 && ([v6 isStopped] & 1) == 0)
    {
      double v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
      [v11 systemUptime];
      double v13 = v12;
      [v5 startTime];
      double v15 = vabdd_f64(v13, v14);

      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      BOOL v16 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
      if (v15 < 300.0)
      {
        if (v16)
        {
          uint64_t v17 = *(void *)(a1 + 32);
          int v23 = 136315394;
          __int16 v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
          __int16 v25 = 2112;
          uint64_t v26 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s resetting timer: %@",  (uint8_t *)&v23,  0x16u);
        }

        [v7 reset];
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v5 heartbeatTimer]);
        if (v18)
        {
          id v19 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            uint64_t v20 = *(void *)(a1 + 32);
            int v23 = 136315394;
            __int16 v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
            __int16 v25 = 2112;
            uint64_t v26 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s resetting heartbeat timer: %@",  (uint8_t *)&v23,  0x16u);
          }

          id v21 = [v18 copy];
          [v5 setHeartbeatTimer:v21];
          [v21 start];
        }

        goto LABEL_17;
      }

      if (v16)
      {
        uint64_t v22 = *(void *)(a1 + 32);
        int v23 = 136315394;
        __int16 v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
        __int16 v25 = 2112;
        uint64_t v26 = v22;
        uint64_t v10 = "%s timer exceeded max timeout: %@";
        goto LABEL_6;
      }
    }

    else
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v23 = 136315394;
        __int16 v24 = "-[ADCompanionService _startTimerForMessage:targetDevice:timeout:heartbeat:completion:]_block_invoke";
        __int16 v25 = 2112;
        uint64_t v26 = v9;
        uint64_t v10 = "%s timer already stopped: %@";
LABEL_6:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v23, 0x16u);
      }
    }

void sub_10023F990(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 168))
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 96) dictionaryRepresentation]);
    (*(void (**)(uint64_t, id, void))(v2 + 16))(v2, v3, 0LL);
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1009LL));
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
  }
}

void sub_10023FA10(uint64_t a1)
{
  BOOL v16 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) activeDevices]);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v8 = *(void **)(*(void *)(a1 + 32) + 88LL);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
        uint64_t v10 = objc_claimAutoreleasedReturnValue([v8 objectForKey:v9]);
        if (v10)
        {
          double v11 = (void *)v10;
          double v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) localDevice]);
          unsigned int v13 = [v7 hasValidDiscoveryTypeForLocalDevice:v12];

          if (!v13) {
            continue;
          }
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _remotePlaybackDeviceForDevice:v7]);
          if (v9) {
            -[NSMutableArray addObject:](v16, "addObject:", v9);
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }

    while (v4);
  }

  double v14 = (SARemotePlaybackDeviceList *)-[NSMutableArray count](v16, "count");
  double v15 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v22 = "-[ADCompanionService getPlaybackDeviceListWithCompletion:]_block_invoke";
    __int16 v23 = 2048;
    __int16 v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%s Found %lu playback device(s)", buf, 0x16u);
  }

  if (v14)
  {
    double v14 = objc_alloc_init(&OBJC_CLASS___SARemotePlaybackDeviceList);
    -[SARemotePlaybackDeviceList setRemotePlaybackDevices:](v14, "setRemotePlaybackDevices:", v16);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10023FC54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int128 v19 = "-[ADCompanionService _updateHashedRouteIDForDevice:]_block_invoke";
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s unable to hash route id: %@",  buf,  0x16u);
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 base64EncodedStringWithOptions:0]);
    if (v8)
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      double v11 = *(dispatch_queue_s **)(v9 + 160);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      void v14[2] = sub_10023FE40;
      v14[3] = &unk_1004FD470;
      void v14[4] = v9;
      id v15 = v10;
      id v16 = *(id *)(a1 + 48);
      id v17 = v8;
      dispatch_async(v11, v14);
    }

    else
    {
      double v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        unsigned int v13 = *(void **)(a1 + 32);
        *(_DWORD *)__int128 buf = 136315394;
        __int128 v19 = "-[ADCompanionService _updateHashedRouteIDForDevice:]_block_invoke";
        __int16 v20 = 2112;
        id v21 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%s unable to hash route id for device: %@",  buf,  0x16u);
      }
    }
  }
}

void sub_10023FE40(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 168LL))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_ad_siriSharedDataProtobuf"));
    id v3 = *(void **)(a1 + 48);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 airplayRouteId]);
    LODWORD(v3) = [v3 isEqualToString:v4];

    if ((_DWORD)v3)
    {
      id v5 = *(void **)(*(void *)(a1 + 32) + 88LL);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v6]);

      if (v7)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:*(void *)(a1 + 48)]);

        if (!v8)
        {
          uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            uint64_t v10 = *(void *)(a1 + 40);
            int v12 = 136315394;
            unsigned int v13 = "-[ADCompanionService _updateHashedRouteIDForDevice:]_block_invoke";
            __int16 v14 = 2112;
            uint64_t v15 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Updated hashed route id for device: %@",  (uint8_t *)&v12,  0x16u);
          }

          [v7 setObject:*(void *)(a1 + 56) forKey:*(void *)(a1 + 48)];
          double v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
          [v11 postNotificationName:@"ADCompanionServicePlaybackDevicesDidChangeNotification" object:0];
        }
      }
    }
  }

void sub_10023FFCC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  int v7 = a3;
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    if (WeakRetained[14] != v6 && (objc_msgSend(v6, "isEqual:") & 1) == 0)
    {
      int v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315138;
        __int16 v14 = "-[ADCompanionService _updateWatchListKitDataWithCompletion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%s UTS data updated", (uint8_t *)&v13, 0xCu);
      }

      objc_storeStrong(v9 + 14, a2);
      uint64_t v11 = 1LL;
      if (v7) {
        goto LABEL_8;
      }
      goto LABEL_9;
    }

    if (!v6)
    {
      uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v13 = 136315138;
        __int16 v14 = "-[ADCompanionService _updateWatchListKitDataWithCompletion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s UTS data is empty", (uint8_t *)&v13, 0xCu);
      }
    }
  }

  uint64_t v11 = 0LL;
  if (v7) {
LABEL_8:
  }
    v7[2](v7, v11);
LABEL_9:
}

void sub_10024015C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("WLKStoredConfigurationManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100578240 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getWLKStoredConfigurationManagerClass(void)_block_invoke"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCompanionService.m",  75,  @"Unable to find class %s",  "WLKStoredConfigurationManager");

    __break(1u);
  }

void sub_100240220(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("WLKConfigurationManager");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_100578248 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getWLKConfigurationManagerClass(void)_block_invoke"));
    objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCompanionService.m",  73,  @"Unable to find class %s",  "WLKConfigurationManager");

    __break(1u);
  }

void sub_1002402E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002403C0;
  block[3] = &unk_1004F75A8;
  id v14 = v6;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v15 = v10;
  id v18 = *(id *)(a1 + 48);
  id v16 = v5;
  id v11 = v5;
  id v12 = v6;
  dispatch_async(v8, block);
}

void sub_1002403C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v9 = "-[ADCompanionService _updateWatchListKitDataWithCompletion:]_block_invoke_2";
      __int16 v10 = 2112;
      uint64_t v11 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s error fetching watchlist kit configuration: %@",  buf,  0x16u);
    }

    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0LL);
    }
  }

  else if (*(void *)(*(void *)(a1 + 40) + 168LL))
  {
    uint64_t v5 = *(void *)(a1 + 64);
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) requiredRequestKeyValuePairsDictionary]);
    (*(void (**)(uint64_t))(v5 + 16))(v5);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

void *sub_10024053C()
{
  uint64_t v4 = 0LL;
  if (!qword_100578228)
  {
    __int128 v5 = off_1004F7750;
    uint64_t v6 = 0LL;
    qword_100578228 = _sl_dlopen(&v5, &v4);
  }

  v0 = (void *)qword_100578228;
  if (!qword_100578228)
  {
    v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *WatchListKitLibrary(void)"));
    objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"ADCompanionService.m",  72,  @"%s",  v4);

    __break(1u);
    goto LABEL_7;
  }

  uint64_t v1 = v4;
  if (v4) {
LABEL_7:
  }
    free(v1);
  return v0;
}

void sub_100240640(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002406D4;
  block[3] = &unk_1004FD9E0;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

uint64_t sub_1002406D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 168))
  {
    id v3 = *(void **)(a1 + 40);
    if (v3 != *(void **)(v2 + 104))
    {
      if (!objc_msgSend(v3, "isEqualToString:"))
      {
        uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v11 = 136315138;
          id v12 = "-[ADCompanionService _updateStoreFrontIdentifierWithCompletion:]_block_invoke_2";
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s store front identifier updated",  (uint8_t *)&v11,  0xCu);
        }

        uint64_t v7 = *(void *)(a1 + 32);
        id v8 = *(id *)(a1 + 40);
        id v9 = *(void **)(v7 + 104);
        *(void *)(v7 + 104) = v8;
        uint64_t v4 = 1LL;
        goto LABEL_15;
      }

      uint64_t v2 = *(void *)(a1 + 32);
      id v3 = *(void **)(v2 + 104);
    }

    if (v3)
    {
      uint64_t v4 = 0LL;
      goto LABEL_16;
    }

    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315138;
      id v12 = "-[ADCompanionService _updateStoreFrontIdentifierWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s store front identifier with empty identifier",  (uint8_t *)&v11,  0xCu);
      uint64_t v2 = *(void *)(a1 + 32);
    }

    uint64_t v4 = 0LL;
    id v9 = *(void **)(v2 + 104);
    *(void *)(v2 + 104) = &stru_1004FECA0;
LABEL_15:

LABEL_16:
    uint64_t result = *(void *)(a1 + 48);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v4);
    }
    return result;
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_100240898(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  __int128 v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 160);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10024092C;
  block[3] = &unk_1004FD9E0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_10024092C(void *a1)
{
  id obj = objc_alloc_init(&OBJC_CLASS____ADPBDeviceSetDataRequest);
  -[_ADPBDeviceSetDataRequest _ad_setData:](obj, "_ad_setData:", a1[4]);
  objc_storeStrong((id *)(a1[5] + 96LL), obj);
  uint64_t v2 = a1[6];
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1LL);
  }
}

void sub_100240990(uint64_t a1)
{
  if (AFIsInternalInstall(a1))
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextPerformance;
    os_signpost_id_t v3 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v4 = v3;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)id v7 = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v2,  OS_SIGNPOST_EVENT,  v4,  "CompanionCouldNotReach",  "_getSharedDataFromCompanionLinkDevice",  v7,  2u);
      }
    }
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1000LL));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);
  }

void sub_100240A6C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 32);
    int v20 = 136316162;
    id v21 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v11;
    __int16 v24 = 2112;
    id v25 = v7;
    __int16 v26 = 2112;
    id v27 = v8;
    __int16 v28 = 2112;
    id v29 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s request response : %@ %@ %@ %@",  (uint8_t *)&v20,  0x34u);
  }

  if (*(_BYTE *)(a1 + 56)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      id v21 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring error %@",  (uint8_t *)&v20,  0x16u);
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12)
    {
      if (v9)
      {
        int v13 = 0LL;
      }

      else
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"sharedDataProtoBuf"]);
        uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSData);
        if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0)
        {
          id v17 = -[_ADPBDeviceSetDataRequest initWithData:]( objc_alloc(&OBJC_CLASS____ADPBDeviceSetDataRequest),  "initWithData:",  v15);
          int v13 = (void *)objc_claimAutoreleasedReturnValue(-[_ADPBDeviceSetDataRequest _ad_data](v17, "_ad_data"));
          if (v13)
          {
            id v9 = 0LL;
          }

          else
          {
            __int128 v19 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              int v20 = 136315138;
              id v21 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s received malformed protobuf",  (uint8_t *)&v20,  0xCu);
            }

            id v9 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
          }
        }

        else
        {
          id v18 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            int v20 = 136315138;
            id v21 = "-[ADCompanionService _getSharedDataFromCompanionLinkDevice:completion:]_block_invoke";
            _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s received malformed data",  (uint8_t *)&v20,  0xCu);
          }

          id v9 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
          int v13 = 0LL;
        }

        uint64_t v12 = *(void *)(a1 + 48);
      }

      (*(void (**)(uint64_t, void *, id))(v12 + 16))(v12, v13, v9);
    }
  }
}

id sub_100240D6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startListening];
}

uint64_t sub_100240D74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_100240D8C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 32);
    int v14 = 136316162;
    uint64_t v15 = "-[ADCompanionService _startRemoteRequest:onPeer:completion:]_block_invoke";
    __int16 v16 = 2112;
    id v17 = v11;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2112;
    id v23 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s remote request response : %@ %@ %@ %@",  (uint8_t *)&v14,  0x34u);
  }

  if (*(_BYTE *)(a1 + 56)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    int v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "-[ADCompanionService _startRemoteRequest:onPeer:completion:]_block_invoke";
      __int16 v16 = 2112;
      id v17 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring error %@",  (uint8_t *)&v14,  0x16u);
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      (*(void (**)(uint64_t, BOOL))(v12 + 16))(v12, v9 == 0LL);
    }
  }
}

id sub_100240F28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startRemoteRequest:*(void *)(a1 + 40) onPeer:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
}

void sub_100240F38(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v17 = "-[ADCompanionService _waitForMessageIDs:withContext:timeout:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s MessageWaitContext timing out", buf, 0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  os_signpost_id_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained waitingOnMessageIDs]);
  id v5 = [v4 copy];

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend( *(id *)(a1 + 32),  "_unblockWaitContext:forMessageID:",  WeakRetained,  *(void *)(*((void *)&v11 + 1) + 8 * (void)v10),  (void)v11);
        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v8);
  }
}

void sub_1002410B4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"messageID"]);
  id v7 = objc_alloc_init(&OBJC_CLASS___HALSchemaHALCompanionDeviceCommunicationEnded);
  id v8 = v7;
  if (a3) {
    uint64_t v9 = 2LL;
  }
  else {
    uint64_t v9 = 1LL;
  }
  [v7 setConnectionType:v9];
  uint64_t v10 = *(void **)(a1 + 40);
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  v56[2] = sub_100241CA0;
  v56[3] = &unk_1004FCBB0;
  id v11 = v6;
  id v57 = v11;
  id v46 = v8;
  id v58 = v46;
  int8x16_t v44 = *(int8x16_t *)(a1 + 32);
  id v12 = (id)v44.i64[0];
  int8x16_t v59 = vextq_s8(v44, v44, 8uLL);
  id v60 = *(id *)(a1 + 56);
  unsigned __int8 v45 = [v10 _startTimerForMessage:v11 targetDevice:v5 heartbeat:1 completion:v56];
  [*(id *)(a1 + 40) _recordIntermediateMessageID:v11 forPeer:*(void *)(a1 + 48)];
  __int128 v13 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    __int128 v14 = v13;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 168) localDevice]);
    id v17 = v5;
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 identifier]);
    *(_DWORD *)__int128 buf = 136315906;
    double v64 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    __int16 v65 = 2112;
    id v66 = v11;
    __int16 v67 = 2112;
    id v68 = v15;
    __int16 v69 = 2112;
    id v70 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s sending message: %@ to destination: %@ (local: %@)",  buf,  0x2Au);

    id v5 = v17;
  }

  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"command"]);
  if (!v19)
  {
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"serializedCommand"]);
    uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSData);
    if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
    {
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[AceObject aceObjectWithPlistData:](&OBJC_CLASS___AceObject, "aceObjectWithPlistData:", v20));
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v22 dictionary]);
    }

    else
    {
      id v19 = 0LL;
    }
  }

  os_signpost_id_t v23 = os_signpost_id_generate(AFSiriLogContextPerformance);
  __int16 v24 = (os_log_s *)AFSiriLogContextPerformance;
  id v25 = v24;
  if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
  {
    __int16 v26 = (char *)objc_claimAutoreleasedReturnValue([v19 valueForKey:@"$class"]);
    *(_DWORD *)__int128 buf = 138412546;
    double v64 = v26;
    __int16 v65 = 2112;
    id v66 = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_INTERVAL_BEGIN,  v23,  "CompanionService",  "Sending Execute Remote Request: Class=%@, MessageID=%@",  buf,  0x16u);
  }

  uint64_t v27 = 168LL;
  if (a3) {
    uint64_t v27 = 144LL;
  }
  __int16 v28 = *(void **)(a1 + 32);
  id v29 = *(void **)(*(void *)(a1 + 40) + v27);
  char v30 = @"iWifi";
  if (a3) {
    char v30 = @"AWDL";
  }
  char v31 = v30;
  id v32 = v29;
  id v33 = [v28 mutableCopy];
  [v33 setObject:v31 forKey:@"messageLinkType"];
  uint64_t v42 = v19;
  id v34 = [v33 copy];
  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _initializeNewMessageWaitContext]);
  id v36 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  uint64_t v61 = RPOptionStatusFlags;
  __int128 v62 = &off_100513678;
  __int16 v43 = v5;
  __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v62,  &v61,  1LL));
  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_100241E4C;
  v47[3] = &unk_1004F7418;
  unsigned __int8 v55 = v45;
  uint64_t v38 = *(void *)(a1 + 40);
  id v48 = v11;
  uint64_t v49 = v38;
  os_signpost_id_t v54 = v23;
  id v53 = *(id *)(a1 + 56);
  id v50 = v35;
  id v51 = v46;
  id v52 = *(id *)(a1 + 32);
  id v39 = v46;
  id v40 = v35;
  id v41 = v11;
  [v32 sendRequestID:@"com.apple.siri.request.execute.ace.command" request:v34 destinationID:v36 options:v37 responseHandler:v47];
}

void sub_1002415C8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315138;
    id v7 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completion:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s setStateUpdateHandler checking if client link is using on demand connection.",  (uint8_t *)&v6,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  os_signpost_id_t v4 = WeakRetained;
  if (WeakRetained && [WeakRetained usingOnDemandConnection])
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      id v7 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completi"
           "on:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s setStateUpdateHandler message link is usingOnDemandConnection. Sending message.",  (uint8_t *)&v6,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100241700(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    os_signpost_id_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int128 v14 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to activate message link. error: %@",  (uint8_t *)&v13,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 152);
    *(void *)(v6 + 152) = v5;

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(v9 + 144);
    *(void *)(v9 + 144) = WeakRetained;

    id v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v12 = *(void **)(*(void *)(a1 + 32) + 152LL);
      int v13 = 136315394;
      __int128 v14 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s _clientAWDLTransportLinkDestinationId set value:%@ ",  (uint8_t *)&v13,  0x16u);
    }

    [*(id *)(a1 + 32) _scheduleOrExtendAWDLClientLinkTimer];
  }
}

void sub_100241890(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v16 = 136315138;
    id v17 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s unable to find remote device for execution",  (uint8_t *)&v16,  0xCu);
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  }

  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (*(_BYTE *)(a1 + 48)) {
      uint64_t v10 = @"YES";
    }
    else {
      uint64_t v10 = @"NO";
    }
    id v11 = v2;
    if (+[AFFeatureFlags isAWDLFallbackForPersonalRequestsEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isAWDLFallbackForPersonalRequestsEnabled")) {
      id v12 = @"YES";
    }
    else {
      id v12 = @"NO";
    }
    int v13 = *(unsigned __int8 *)(a1 + 50);
    if (*(_BYTE *)(a1 + 49)) {
      __int128 v14 = @"YES";
    }
    else {
      __int128 v14 = @"NO";
    }
    int v16 = 136316162;
    id v17 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    if (v13) {
      __int16 v15 = @"YES";
    }
    else {
      __int16 v15 = @"NO";
    }
    __int16 v18 = 2112;
    id v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v12;
    __int16 v22 = 2112;
    os_signpost_id_t v23 = v14;
    __int16 v24 = 2112;
    id v25 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s allowFallbackOnAWDL: %@, isAWDLFallbackForPersonalRequestsEnabled: %@, isPeerIdsIDMatchingAWDLClientLinkDestina tionId: %@, isDestinationDeviceDiscoveredOverWifiP2P:%@",  (uint8_t *)&v16,  0x34u);
  }

  if (AFIsInternalInstall(v3))
  {
    os_signpost_id_t v4 = (os_log_s *)AFSiriLogContextPerformance;
    os_signpost_id_t v5 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v6 = v5;
      if (os_signpost_enabled(v4))
      {
        LOWORD(v16) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "CompanionDeviceNotFound",  "ADCompanionService _executeRemoteRequest",  (uint8_t *)&v16,  2u);
      }
    }
  }

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0LL);
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1000LL));
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
  }

void sub_100241AE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100241B98;
  block[3] = &unk_1004F74E0;
  uint64_t v4 = *(void *)(a1 + 32);
  os_signpost_id_t v5 = *(void **)(a1 + 40);
  os_signpost_id_t v6 = *(dispatch_queue_s **)(v4 + 160);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  char v12 = *(_BYTE *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_100241B98(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _companionLinkDeviceForUniqueIDSIdentifier:v3]);

  if (v4)
  {
    os_signpost_id_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v6 = 136315138;
      id v7 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completi"
           "on:]_block_invoke_2";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #hal Sending command via context collector",  (uint8_t *)&v6,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_100241CA0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v3 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    int v13 = 136315394;
    __int128 v14 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke_2";
    __int16 v15 = 2112;
    uint64_t v16 = v12;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s heartbeat timeout for message %@",  (uint8_t *)&v13,  0x16u);
  }

  if (AFIsInternalInstall(v3))
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextPerformance;
    os_signpost_id_t v5 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v6 = v5;
      if (os_signpost_enabled(v4))
      {
        LOWORD(v13) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "CompanionCouldNotReach",  "_executeRemoteRequest",  (uint8_t *)&v13,  2u);
      }
    }
  }

  [*(id *)(a1 + 40) setDidConnectionTimeOut:1];
  uint64_t v8 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 _getExecutionIdFromRequest:*(void *)(a1 + 56)]);
  [v7 _logCompanionDeviceCommunicationContextFor:v8 executionId:v9];

  uint64_t v10 = *(void *)(a1 + 64);
  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1007LL));
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
  }

void sub_100241E4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 32);
    *(_DWORD *)__int128 buf = 136316162;
    id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:completio"
          "n:]_block_invoke";
    __int16 v57 = 2112;
    id v58 = v11;
    __int16 v59 = 2112;
    id v60 = v7;
    __int16 v61 = 2112;
    id v62 = v8;
    __int16 v63 = 2112;
    id v64 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s request response : %@ %@ %@ %@", buf, 0x34u);
  }

  if (*(_BYTE *)(a1 + 88)
    && ([*(id *)(a1 + 40) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    __int16 v20 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      __int16 v57 = 2112;
      id v58 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring error %@",  buf,  0x16u);
    }

    uint64_t v21 = (os_log_s *)AFSiriLogContextPerformance;
    __int16 v22 = v21;
    os_signpost_id_t v23 = *(void *)(a1 + 80);
    if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_INTERVAL_END,  v23,  "CompanionService",  "Message timed out",  buf,  2u);
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)AFSiriLogContextPerformance;
    int v13 = v12;
    os_signpost_id_t v14 = *(void *)(a1 + 80);
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_INTERVAL_END,  v14,  "CompanionService",  "Received response",  buf,  2u);
    }

    if (*(void *)(a1 + 72))
    {
      if (v9)
      {
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
        unsigned int v16 = [v15 isEqualToString:RPErrorDomain];

        if (v16)
        {
          id v17 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            id v47 = *(void **)(a1 + 32);
            *(_DWORD *)__int128 buf = 136315650;
            id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:c"
                  "ompletion:]_block_invoke";
            __int16 v57 = 2112;
            id v58 = v9;
            __int16 v59 = 2112;
            id v60 = v47;
            _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s rapport error %@ for message %@",  buf,  0x20u);
          }

          id v18 = [v9 code];
          if (v18 == (id)-6714LL)
          {
            uint64_t v19 = 1018LL;
          }

          else
          {
            if (AFIsInternalInstall(v18))
            {
              char v31 = (os_log_s *)AFSiriLogContextPerformance;
              os_signpost_id_t v32 = os_signpost_id_generate(AFSiriLogContextPerformance);
              if (v32 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                os_signpost_id_t v33 = v32;
                if (os_signpost_enabled(v31))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_EVENT,  v33,  "CompanionRapportTransportError",  "ADCompanionService _executeRemoteRequest",  buf,  2u);
                }
              }
            }

            uint64_t v19 = 1000LL;
          }

          id v30 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  v19,  0LL,  v9));
        }

        else
        {
          id v30 = v9;
        }
      }

      else
      {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"commandResponse"]);
        if (!v27 || (uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v27, v28) & 1) != 0))
        {
          id v29 = 0LL;
          goto LABEL_38;
        }

        id v34 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315138;
          id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:com"
                "pletion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%s received malformed response",  buf,  0xCu);
        }

        id v30 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
      }

      id v29 = v30;
      uint64_t v27 = 0LL;
LABEL_38:
      __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"waitForMessageIDs"]);
      if (v35)
      {
        uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSArray);
        if ((objc_opt_isKindOfClass(v35, v36) & 1) != 0)
        {
          __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v35 firstObject]);
          uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSString);
          char isKindOfClass = objc_opt_isKindOfClass(v37, v38);

          if ((isKindOfClass & 1) != 0)
          {
            id v40 = v35;
            id v41 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315394;
              id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice"
                    ":completion:]_block_invoke";
              __int16 v57 = 2112;
              id v58 = v40;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s Waiting for IDs %@", buf, 0x16u);
            }

            goto LABEL_46;
          }
        }

        uint64_t v42 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315138;
          id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:com"
                "pletion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "%s Malformed waitfor IDs. dispatching invoking completion immediately",  buf,  0xCu);
        }
      }

      id v40 = 0LL;
LABEL_46:
      int8x16_t v44 = *(void **)(a1 + 40);
      __int16 v43 = *(void **)(a1 + 48);
      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472LL;
      v48[2] = sub_100242538;
      v48[3] = &unk_1004F73F0;
      void v48[4] = v44;
      id v49 = v43;
      id v50 = v29;
      id v51 = *(id *)(a1 + 56);
      id v52 = *(id *)(a1 + 64);
      id v45 = *(id *)(a1 + 72);
      id v53 = v27;
      id v54 = v45;
      id v46 = v27;
      __int16 v22 = v29;
      [v44 _waitForMessageIDs:v40 withContext:v49 timeout:v48 completion:3.0];

      goto LABEL_47;
    }

    __int16 v24 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v56 = "-[ADCompanionService _executeRemoteRequest:onPeer:allowsRelay:allowFallbackOnAWDL:throughProxyDevice:complet"
            "ion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%s No completion returning", buf, 0xCu);
    }

    [*(id *)(a1 + 40) _cleanUpMessageWaitContext:*(void *)(a1 + 48)];
    id v25 = *(void **)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 56);
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([v25 _getExecutionIdFromRequest:*(void *)(a1 + 64)]);
    [v25 _logCompanionDeviceCommunicationContextFor:v26 executionId:v22];
  }

uint64_t sub_100242538(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) setDidConnectionTimeOut:1];
  }
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 _getExecutionIdFromRequest:*(void *)(a1 + 64)]);
  [v2 _logCompanionDeviceCommunicationContextFor:v3 executionId:v4];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_1002425B4(uint64_t a1)
{
  id v8 = [*(id *)(a1 + 32) _newRequestDictionary];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionary]);
  [v8 setObject:v2 forKey:@"command"];

  if (*(_BYTE *)(a1 + 80))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) assistantIdentifier]);
    if ([v3 length]) {
      [v8 setObject:v3 forKey:@"forwardsToAssistantId"];
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) idsDeviceUniqueIdentifier]);
    if ([v4 length]) {
      [v8 setObject:v4 forKey:@"forwardsToIDSDeviceId"];
    }
  }

  os_signpost_id_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) info]);
  os_signpost_id_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 buildDictionaryRepresentation]);

  id v7 = v8;
  if (v6)
  {
    [v8 setObject:v6 forKey:@"executionContext"];
    id v7 = v8;
  }

  [*(id *)(a1 + 32) _executeRemoteRequest:v7 onPeer:*(void *)(a1 + 48) allowsRelay:*(unsigned __int8 *)(a1 + 80) allowFallbackOnAWDL:0 throughProxyDevice:*(void *)(a1 + 64) completion:*(void *)(a1 + 72)];
}

void sub_1002426E0(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) _newRequestDictionary];
  [v7 setObject:*(void *)(a1 + 40) forKey:@"serializedCommand"];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) info]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 buildDictionaryRepresentation]);

  if (v3) {
    [v7 setObject:v3 forKey:@"executionContext"];
  }
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) assistantIdentifier]);
    if ([v4 length]) {
      [v7 setObject:v4 forKey:@"forwardsToAssistantId"];
    }
    os_signpost_id_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) idsDeviceUniqueIdentifier]);
    if ([v5 length]) {
      [v7 setObject:v5 forKey:@"forwardsToIDSDeviceId"];
    }

    BOOL v6 = *(_BYTE *)(a1 + 72) != 0;
  }

  else
  {
    BOOL v6 = 0LL;
  }

  [*(id *)(a1 + 32) _executeRemoteRequest:v7 onPeer:*(void *)(a1 + 56) allowsRelay:v6 allowFallbackOnAWDL:*(unsigned __int8 *)(a1 + 73) throughProxyDevice:0 completion:*(void *)(a1 + 64)];
}

void sub_1002427FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 72LL);
  if (v1)
  {
    [*(id *)(a1 + 32) sendMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) toDeviceWithIDSIdentifier:v1 completion:*(void *)(a1 + 56)];
  }

  else
  {
    uint64_t v2 = *(void *)(a1 + 56);
    if (v2)
    {
      id v3 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1000LL));
      (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
    }
  }

void sub_10024288C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

id sub_1002428D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _removeMessageHandler:*(void *)(a1 + 40) forMessageType:*(void *)(a1 + 48)];
}

id sub_1002428E0(void *a1)
{
  id v2 = *(void **)(a1[4] + 80LL);
  if (!v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSMapTable strongToWeakObjectsMapTable](&OBJC_CLASS___NSMapTable, "strongToWeakObjectsMapTable"));
    uint64_t v4 = a1[4];
    os_signpost_id_t v5 = *(void **)(v4 + 80);
    *(void *)(v4 + 80) = v3;

    id v2 = *(void **)(a1[4] + 80LL);
  }

  return [v2 setObject:a1[5] forKey:a1[6]];
}

void sub_100242934(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v3 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 136315394;
    id v11 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s heartbeat timeout for message %@",  (uint8_t *)&v10,  0x16u);
  }

  if (AFIsInternalInstall(v3))
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextPerformance;
    os_signpost_id_t v5 = os_signpost_id_generate(AFSiriLogContextPerformance);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v6 = v5;
      if (os_signpost_enabled(v4))
      {
        LOWORD(v10) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "CompanionCouldNotReach",  "_sendMessage",  (uint8_t *)&v10,  2u);
      }
    }
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1000LL));
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

void sub_100242AA8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  int v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = *(void **)(a1 + 32);
    int v32 = 136316162;
    os_signpost_id_t v33 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
    __int16 v34 = 2112;
    id v35 = v11;
    __int16 v36 = 2112;
    id v37 = v7;
    __int16 v38 = 2112;
    id v39 = v8;
    __int16 v40 = 2112;
    id v41 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s generic request response : %@ %@ %@ %@",  (uint8_t *)&v32,  0x34u);
  }

  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"assistantId"]);
  if (v12)
  {
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0
      && (os_signpost_id_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]),
          v14,
          v14))
    {
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]);
      [v15 _setAssistantId:v12 forDeviceWithIdsDeviceUniqueIdentifier:v16];
    }

    else
    {
      id v17 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v32 = 136315138;
        os_signpost_id_t v33 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s received malformed assistant id",  (uint8_t *)&v32,  0xCu);
      }
    }
  }

  if (*(_BYTE *)(a1 + 64)
    && ([*(id *)(a1 + 48) _cancelTimerForMessage:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v26 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v32 = 136315394;
      os_signpost_id_t v33 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
      __int16 v34 = 2112;
      id v35 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring error %@",  (uint8_t *)&v32,  0x16u);
    }
  }

  else if (*(void *)(a1 + 56))
  {
    if (v9)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
      unsigned int v19 = [v18 isEqualToString:RPErrorDomain];

      if (v19)
      {
        __int16 v20 = (os_log_s *)AFSiriLogContextDaemon;
        BOOL v21 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
        if (v21)
        {
          char v31 = *(void **)(a1 + 32);
          int v32 = 136315650;
          os_signpost_id_t v33 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
          __int16 v34 = 2112;
          id v35 = v9;
          __int16 v36 = 2112;
          id v37 = v31;
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s rapport error %@ for message %@",  (uint8_t *)&v32,  0x20u);
        }

        if (AFIsInternalInstall(v21))
        {
          __int16 v22 = (os_log_s *)AFSiriLogContextPerformance;
          os_signpost_id_t v23 = os_signpost_id_generate(AFSiriLogContextPerformance);
          if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            os_signpost_id_t v24 = v23;
            if (os_signpost_enabled(v22))
            {
              LOWORD(v32) = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_EVENT,  v24,  "CompanionRapportTransportError",  "ADCompanionService _sendMessage",  (uint8_t *)&v32,  2u);
            }
          }
        }

        id v25 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  1000LL,  0LL,  v9));
      }

      else
      {
        id v25 = v9;
      }
    }

    else
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"payload"]);
      if (!v27 || (uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v27, v28) & 1) != 0))
      {
        id v29 = 0LL;
LABEL_32:
        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

        goto LABEL_33;
      }

      id v30 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v32 = 136315138;
        os_signpost_id_t v33 = "-[ADCompanionService _sendMessage:messageType:toTargetDevice:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s received malformed response",  (uint8_t *)&v32,  0xCu);
      }

      id v25 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
    }

    id v29 = v25;
    uint64_t v27 = 0LL;
    goto LABEL_32;
  }

void sub_100242F30(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _companionLinkDeviceForHkIdentifier:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 32) _sendMessage:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) toTargetDevice:v2 completion:*(void *)(a1 + 64)];
}

void sub_100242F80(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _companionLinkDeviceForUniqueIDSIdentifier:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 32) _sendMessage:*(void *)(a1 + 48) messageType:*(void *)(a1 + 56) toTargetDevice:v2 completion:*(void *)(a1 + 64)];
}

void sub_100242FD0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) activeDevices]);
  if ([v2 count])
  {
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v2 count]));
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v17 = v2;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v19;
      do
      {
        for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
          uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 idsDeviceIdentifier]);
          if (v10)
          {
            id v11 = (void *)v10;
            __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) localDevice]);
            unsigned int v13 = [v9 hasValidDiscoveryTypeForLocalDevice:v12];

            if (v13)
            {
              os_signpost_id_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 idsDeviceIdentifier]);
              [v3 addObject:v14];
            }
          }
        }

        id v6 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v6);
    }

    id v2 = v17;
  }

  else
  {
    BOOL v3 = 0LL;
  }

  uint64_t v15 = *(void *)(a1 + 40);
  if ([v3 count])
  {
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v3 allObjects]);
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v15 + 16))(v15, 0LL);
  }
}

id sub_1002431C8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopListening];
}

void sub_1002431D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _musicPersonalizationTokenChanged];
}

void sub_1002431FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _watchListKitStoredConfigurationTokenChanged];
}

id *sub_100243228(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _updateSiriInfoDictionary];
  }
  return result;
}

id *sub_100243238(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _updateSiriInfoDictionary];
  }
  return result;
}

id sub_100243248(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _resetHashedRouteIDs];
}

id *sub_100243250(id *result, int a2)
{
  if (a2) {
    return (id *)[result[4] _updateSiriInfoDictionary];
  }
  return result;
}

void sub_100243260(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 168))
  {
    if (*(_BYTE *)(v1 + 13))
    {
      BOOL v3 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v11 = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s initializing Siri Info dictionary",  buf,  0xCu);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      *(_BYTE *)(v1 + 13) = 0;
      [*(id *)(a1 + 32) _startObservingDataChangedNotifications];
      uint64_t v1 = *(void *)(a1 + 32);
    }

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002433D4;
    v9[3] = &unk_1004FD940;
    void v9[4] = v1;
    id v4 = objc_retainBlock(v9);
    id v5 = v4;
    id v6 = *(void **)(a1 + 32);
    if (v6[12])
    {
      ((void (*)(void *))v4[2])(v4);
    }

    else
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      void v7[2] = sub_100243738;
      v7[3] = &unk_1004FDA58;
      id v8 = v4;
      [v6 _updateSharedDataWithCompletion:v7];
    }
  }

void sub_1002433D4(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 168LL))
  {
    id v2 = dispatch_group_create();
    if (AFSupportsAirPlayEndpointRoute(v2))
    {
      BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) localDevice]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 mediaRouteIdentifier]);

      if (v4)
      {
        [*(id *)(*(void *)(a1 + 32) + 96) setAirplayRouteId:v4];
      }

      else
      {
        id v5 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s unable to retrieve AirPlay route identifier",  (uint8_t *)&buf,  0xCu);
        }
      }
    }

    if (AFSupportsPlayThisOnThatPlayback())
    {
      dispatch_group_enter(v2);
      uint64_t v25 = 0LL;
      uint64_t v26 = &v25;
      uint64_t v27 = 0x2050000000LL;
      id v6 = (void *)qword_100578230;
      uint64_t v28 = qword_100578230;
      if (!qword_100578230)
      {
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        id v30 = sub_100243744;
        char v31 = &unk_1004FDB20;
        int v32 = &v25;
        sub_100243744((uint64_t)&buf);
        id v6 = (void *)v26[3];
      }

      id v7 = v6;
      _Block_object_dispose(&v25, 8);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sharedProvider]);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      void v23[2] = sub_1002438E0;
      v23[3] = &unk_1004F7350;
      void v23[4] = *(void *)(a1 + 32);
      id v9 = v2;
      os_signpost_id_t v24 = v9;
      [v8 getTokenForcingRefresh:0 completion:v23];

      if (AFSupportsWatchListKit())
      {
        uint64_t v10 = *(void *)(a1 + 32);
        if (*(void *)(v10 + 112))
        {
          id v11 = *(void **)(v10 + 96);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[_ADPBDeviceStringKeyValueDictionary _ad_keyValueDictionaryWithDictionary:]( &OBJC_CLASS____ADPBDeviceStringKeyValueDictionary,  "_ad_keyValueDictionaryWithDictionary:"));
          [v11 setUtsRequiredRequestData:v12];
        }

        else
        {
          dispatch_group_enter(v9);
          unsigned int v13 = *(void **)(a1 + 32);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472LL;
          id v21[2] = sub_1002439A0;
          v21[3] = &unk_1004FC160;
          void v21[4] = v13;
          __int16 v22 = v9;
          [v13 _updateWatchListKitDataWithCompletion:v21];
        }
      }

      uint64_t v14 = *(void *)(a1 + 32);
      if (*(void *)(v14 + 104))
      {
        objc_msgSend(*(id *)(v14 + 96), "setStoreFrontId:");
      }

      else
      {
        dispatch_group_enter(v9);
        uint64_t v15 = *(void **)(a1 + 32);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        v19[2] = sub_1002439F8;
        v19[3] = &unk_1004FC160;
        void v19[4] = v15;
        __int128 v20 = v9;
        [v15 _updateStoreFrontIdentifierWithCompletion:v19];
      }
    }

    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = *(dispatch_queue_s **)(v16 + 160);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100243A24;
    block[3] = &unk_1004FD940;
    void block[4] = v16;
    dispatch_group_notify(v2, v17, block);
  }

void sub_100243718(_Unwind_Exception *a1)
{
}

uint64_t sub_100243738(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

Class sub_100243744(uint64_t a1)
{
  id v6 = 0LL;
  if (!qword_100578238)
  {
    __int128 v7 = off_1004F7768;
    uint64_t v8 = 0LL;
    qword_100578238 = _sl_dlopen(&v7, &v6);
  }

  if (!qword_100578238)
  {
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *iTunesCloudLibrary(void)"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v4,  @"ADCompanionService.m",  81,  @"%s",  v6);

    goto LABEL_10;
  }

  if (v6) {
    free(v6);
  }
  Class result = objc_getClass("ICLibraryAuthServiceClientTokenProvider");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getICLibraryAuthServiceClientTokenProviderClass(void)_block_invoke"));
    objc_msgSend( v3,  "handleFailureInFunction:file:lineNumber:description:",  v5,  @"ADCompanionService.m",  82,  @"Unable to find class %s",  "ICLibraryAuthServiceClientTokenProvider");

LABEL_10:
    __break(1u);
  }

  qword_100578230 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_1002438E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 160);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_100243B00;
  void v12[3] = &unk_1004FD470;
  id v13 = v5;
  id v14 = v6;
  uint64_t v15 = v7;
  id v16 = v8;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, v12);
}

void sub_1002439A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(void **)(v2 + 96);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[_ADPBDeviceStringKeyValueDictionary _ad_keyValueDictionaryWithDictionary:]( &OBJC_CLASS____ADPBDeviceStringKeyValueDictionary,  "_ad_keyValueDictionaryWithDictionary:",  *(void *)(v2 + 112)));
  [v3 setUtsRequiredRequestData:v4];

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1002439F8(uint64_t a1)
{
}

void sub_100243A24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 168))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 96) data]);
    BOOL v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke_3";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Siri Info updated", (uint8_t *)&v4, 0xCu);
    }

    +[ADRapportLink updateSiriInfoWithObject:forKey:]( &OBJC_CLASS___ADRapportLink,  "updateSiriInfoWithObject:forKey:",  v2,  @"sharedDataProtoBuf");
  }

void sub_100243B00(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 136315650;
    id v6 = "-[ADCompanionService _updateSiriInfoDictionary]_block_invoke_2";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s userToken: %@, error: %@",  (uint8_t *)&v5,  0x20u);
  }

  [*(id *)(*(void *)(a1 + 48) + 96) setUserToken:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_100243BD8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v8 = "-[ADCompanionService _activateAWDLMessageLink:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Activating client", buf, 0xCu);
  }

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100243CD8;
  v4[3] = &unk_1004FBD68;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  [v3 activateWithCompletion:v4];
}

void sub_100243CD8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      id v14 = "-[ADCompanionService _activateAWDLMessageLink:completion:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s message link activation error: %@",  (uint8_t *)&v13,  0x16u);
    }

    if (*(void *)(a1 + 40))
    {
      id v5 = (os_log_s *)AFSiriLogContextPerformance;
      uint64_t v6 = v5;
      os_signpost_id_t v7 = *(void *)(a1 + 40);
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
      {
        int v13 = 138412290;
        id v14 = v3;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "CompanionServiceAWDLClientLink",  "AWDL companion link activation failed with error: %@",  (uint8_t *)&v13,  0xCu);
      }
    }

    uint64_t v8 = *(void *)(a1 + 32);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1021LL));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v13 = 136315138;
      id v14 = "-[ADCompanionService _activateAWDLMessageLink:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s message link activated successfully.",  (uint8_t *)&v13,  0xCu);
    }

    if (*(void *)(a1 + 40))
    {
      uint64_t v10 = (os_log_s *)AFSiriLogContextPerformance;
      id v11 = v10;
      os_signpost_id_t v12 = *(void *)(a1 + 40);
      if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
      {
        LOWORD(v13) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "CompanionServiceAWDLClientLink",  "AWDL companion link activated successfully",  (uint8_t *)&v13,  2u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100243F24(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "-[ADCompanionService _prepAWDLClientLinkIfMessageReceivedOverAWDL:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed to activate message link in advance. error: %@",  (uint8_t *)&v7,  0x16u);
    }
  }

  else
  {
    objc_storeStrong((id *)a1[4] + 19, a1[5]);
    objc_storeStrong((id *)a1[4] + 18, a1[6]);
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = (void *)*((void *)a1[4] + 19);
      int v7 = 136315394;
      uint64_t v8 = "-[ADCompanionService _prepAWDLClientLinkIfMessageReceivedOverAWDL:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s _clientAWDLTransportLinkDestinationId set value:%@ ",  (uint8_t *)&v7,  0x16u);
    }

    [a1[4] _scheduleOrExtendAWDLClientLinkTimer];
  }
}

void sub_100244084(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setIdsDeviceUniqueIdentifier:v3];
  [v4 setAssistantIdentifier:*(void *)(a1 + 40)];
}

void sub_1002440CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 136315394;
    os_signpost_id_t v12 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke";
    __int16 v13 = 2112;
    id v14 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Forwarding response: %@",  (uint8_t *)&v11,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002441D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v15[0] = _NSConcreteStackBlock;
  void v15[2] = sub_1002442D8;
  v15[3] = &unk_1004F72D8;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v15[1] = 3221225472LL;
  id v16 = v6;
  id v17 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v18 = v9;
  uint64_t v19 = v10;
  id v20 = *(id *)(a1 + 48);
  id v21 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  id v22 = v11;
  uint64_t v23 = v12;
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v8, v15);
}

void sub_1002442D8(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      id v13 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke_2";
      __int16 v14 = 2112;
      uint64_t v15 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s error executing remote command: %@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v12 = 136315394;
      id v13 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s got command response: %@",  (uint8_t *)&v12,  0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v6, @"commandResponse");
    }
  }

  if ([*(id *)(a1 + 48) count])
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      int v12 = 136315394;
      id v13 = "-[ADCompanionService _handleAceCommandRequest:messageID:options:responseHandler:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s intermediateMessageIDs set: %@",  (uint8_t *)&v12,  0x16u);
    }

    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", *(void *)(a1 + 48), @"waitForMessageIDs");
  }

  [*(id *)(a1 + 56) _tearDownIntermediateMessageIDs:*(void *)(a1 + 48) forPeer:*(void *)(a1 + 64)];
  if (!-[NSMutableDictionary count](v2, "count"))
  {

    uint64_t v2 = 0LL;
  }

  if (*(void *)(a1 + 72)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 56) + 56), "removeObjectForKey:");
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  id v8 = (os_log_s *)AFSiriLogContextPerformance;
  id v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 88);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    LOWORD(v12) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "CompanionService",  "Finished processing message",  (uint8_t *)&v12,  2u);
  }
}

void sub_100244564(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  os_signpost_id_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"messageID"]);
  uint64_t v11 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = RPOptionSenderID;
    id v13 = v11;
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v12]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 144) localDevice]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
    int v17 = 136315906;
    id v18 = "-[ADCompanionService _setupClientAWDLTransportLinkForDestination:]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v10;
    __int16 v21 = 2112;
    id v22 = v14;
    __int16 v23 = 2112;
    os_signpost_id_t v24 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s received message: %@ from source: %@ (local: %@)",  (uint8_t *)&v17,  0x2Au);
  }

  [*(id *)(a1 + 32) _handleAceCommandRequest:v9 messageID:v10 options:v7 responseHandler:v8];

  [*(id *)(a1 + 32) _unblockWaitingForMessageIDs:v10];
}

void sub_100244708(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkTransportOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkTransportOptions,  "newWithBuilder:",  &stru_1004F7288);
  -[ADRapportLinkConfigurationMutating setTransportOptions:](v2, "setTransportOptions:", v3);
}

void sub_100244760(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  uint64_t v2 = a2;
  -[ADRapportLinkTransportOptionsMutating setAllowsForceAWDL:](v2, "setAllowsForceAWDL:", 2LL);
  -[ADRapportLinkTransportOptionsMutating setNoL2Cap:](v2, "setNoL2Cap:", 2LL);
}

void sub_100244798(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  os_signpost_id_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"messageID"]);
  uint64_t v11 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = RPOptionSenderID;
    id v13 = v11;
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v12]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) localDevice]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
    int v17 = 136315906;
    id v18 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v19 = 2112;
    id v20 = v10;
    __int16 v21 = 2112;
    id v22 = v14;
    __int16 v23 = 2112;
    os_signpost_id_t v24 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s received message: %@ from source: %@ (local: %@)",  (uint8_t *)&v17,  0x2Au);
  }

  [*(id *)(a1 + 32) _handleAceCommandRequest:v9 messageID:v10 options:v7 responseHandler:v8];

  [*(id *)(a1 + 32) _unblockWaitingForMessageIDs:v10];
}

void sub_10024493C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"messageID"]);
  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315906;
    uint64_t v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v43 = 2112;
    id v44 = v10;
    __int16 v45 = 2112;
    id v46 = v7;
    __int16 v47 = 2112;
    id v48 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%s incoming remote request: %@ %@ %@", buf, 0x2Au);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADFMDMonitor sharedManager](&OBJC_CLASS___ADFMDMonitor, "sharedManager"));
  unsigned int v13 = [v12 isLostModeActive];

  if (v13)
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Lost mode is active, rejecting incoming request",  buf,  0xCu);
    }

    id v15 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1003LL));
    (*((void (**)(id, void, void, id))v9 + 2))(v9, 0LL, 0LL, v15);
  }

  else
  {
    id v16 = *(void **)(a1 + 32);
    id v39 = 0LL;
    id v40 = 0LL;
    id v37 = 0LL;
    id v38 = 0LL;
    unsigned __int8 v17 = [v16 _validateIncomingRequest:v7 options:v8 error:&v40 assistantId:&v39 idsDeviceId:&v38 homeKitId:&v37];
    id v15 = v40;
    id v18 = v39;
    id v19 = v38;
    id v32 = v37;
    if ((v17 & 1) != 0)
    {
      id v20 = [*(id *)(a1 + 32) _newRequestInfoWithRequestDictionary:v7];
      if (v20)
      {
        if (v18 && v19)
        {
          __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
          [v21 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v19];
        }

        id v31 = v18;
        if (v10)
        {
          id v30 = *(void **)(*(void *)(a1 + 32) + 56LL);
          id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
          [v22 systemUptime];
          __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
          [v30 setObject:v23 forKey:v10];
        }

        os_signpost_id_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472LL;
        v33[2] = sub_100245FD8;
        v33[3] = &unk_1004F71F8;
        id v25 = v10;
        uint64_t v26 = *(void *)(a1 + 32);
        id v34 = v25;
        uint64_t v35 = v26;
        id v36 = v9;
        [v24 handleExternalActivationRequest:v20 completion:v33];

        uint64_t v27 = v34;
        id v18 = v31;
      }

      else
      {
        id v29 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%s malformed remote request", buf, 0xCu);
        }

        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 0LL));
        (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0LL, 0LL, v27);
      }
    }

    else
    {
      uint64_t v28 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v42 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v43 = 2112;
        id v44 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s validation error %@", buf, 0x16u);
      }

      (*((void (**)(id, void, void, id))v9 + 2))(v9, 0LL, 0LL, v15);
    }
  }
}

void sub_100244DA4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"messageID"]);
  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315906;
    id v39 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v40 = 2112;
    id v41 = v10;
    __int16 v42 = 2112;
    id v43 = v7;
    __int16 v44 = 2112;
    id v45 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s incoming shared data request: %@ %@ %@",  buf,  0x2Au);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADFMDMonitor sharedManager](&OBJC_CLASS___ADFMDMonitor, "sharedManager"));
  unsigned int v13 = [v12 isLostModeActive];

  if (v13)
  {
    __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v39 = "-[ADCompanionService _setupClientLink]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Lost mode is active, rejecting incoming request",  buf,  0xCu);
    }

    id v15 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1003LL));
    (*((void (**)(id, void, void, id))v9 + 2))(v9, 0LL, 0LL, v15);
  }

  else
  {
    id v16 = *(void **)(a1 + 32);
    id v36 = 0LL;
    id v37 = 0LL;
    id v34 = 0LL;
    id v35 = 0LL;
    unsigned __int8 v17 = [v16 _validateIncomingRequest:v7 options:v8 error:&v37 assistantId:&v36 idsDeviceId:&v35 homeKitId:&v34];
    id v15 = v37;
    id v18 = v36;
    id v19 = v35;
    id v29 = v34;
    if ((v17 & 1) != 0)
    {
      if (v18 && v19)
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
        [v20 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v19];
      }

      id v28 = v18;
      if (v10)
      {
        __int16 v21 = *(void **)(*(void *)(a1 + 32) + 56LL);
        id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
        [v22 systemUptime];
        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
        [v21 setObject:v23 forKey:v10];
      }

      os_signpost_id_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_100245EB0;
      v30[3] = &unk_1004F77F8;
      id v25 = v10;
      uint64_t v26 = *(void *)(a1 + 32);
      id v31 = v25;
      uint64_t v32 = v26;
      id v33 = v9;
      [v24 getSharedDataForPeer:v30];

      id v18 = v28;
    }

    else
    {
      uint64_t v27 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        id v39 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v40 = 2112;
        id v41 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%s validation error %@", buf, 0x16u);
      }

      (*((void (**)(id, void, void, id))v9 + 2))(v9, 0LL, 0LL, v15);
    }
  }
}

void sub_100245168(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"messageID"]);
  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315906;
    id v53 = "-[ADCompanionService _setupClientLink]_block_invoke_2";
    __int16 v54 = 2112;
    id v55 = v10;
    __int16 v56 = 2112;
    id v57 = v7;
    __int16 v58 = 2112;
    id v59 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s incoming generic request: %@ %@ %@",  buf,  0x2Au);
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADFMDMonitor sharedManager](&OBJC_CLASS___ADFMDMonitor, "sharedManager"));
  unsigned int v13 = [v12 isLostModeActive];

  if (!v13)
  {
    id v15 = [*(id *)(a1 + 32) _newRequestDictionary];
    [v15 removeObjectForKey:@"messageID"];
    id v16 = *(void **)(a1 + 32);
    id v50 = 0LL;
    id v51 = 0LL;
    id v48 = 0LL;
    id v49 = 0LL;
    int v17 = [v16 _validateIncomingRequest:v7 options:v8 error:&v51 assistantId:&v50 idsDeviceId:&v49 homeKitId:&v48];
    id v43 = v51;
    id v18 = v50;
    id v19 = v49;
    id v42 = v48;
    if ((v17 & 1) == 0)
    {
      id v35 = (os_log_s *)AFSiriLogContextDaemon;
      id v34 = v43;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v54 = 2112;
        id v55 = v43;
        _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%s validation error %@", buf, 0x16u);
      }

      v9[2](v9, v15, 0LL, v43);
      goto LABEL_36;
    }

    if (v18 && v19)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
      [v20 _setAssistantId:v18 forDeviceWithIdsDeviceUniqueIdentifier:v19];
    }

    uint64_t v21 = objc_claimAutoreleasedReturnValue([v7 objectForKey:@"type"]);
    uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString);
    id v41 = (void *)v21;
    char isKindOfClass = objc_opt_isKindOfClass(v21, v22);
    os_signpost_id_t v24 = (os_log_s *)AFSiriLogContextDaemon;
    if ((isKindOfClass & 1) == 0)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s received malformed message type",  buf,  0xCu);
      }

      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
      v9[2](v9, v15, 0LL, v33);
      id v34 = v43;
      goto LABEL_35;
    }

    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
      __int16 v54 = 2112;
      id v55 = v41;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%s incoming request type: %@", buf, 0x16u);
    }

    uint64_t v25 = objc_claimAutoreleasedReturnValue([v7 objectForKey:@"payload"]);
    uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    __int16 v40 = (void *)v25;
    char v27 = objc_opt_isKindOfClass(v25, v26);
    id v28 = (os_log_s *)AFSiriLogContextDaemon;
    if ((v27 & 1) != 0)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        id v29 = *(void **)(*(void *)(a1 + 32) + 80LL);
        *(_DWORD *)__int128 buf = 136315394;
        id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
        __int16 v54 = 2112;
        id v55 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "%s _handlerForMessageType: %@", buf, 0x16u);
      }

      uint64_t v30 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) objectForKey:v41]);
      if (v30)
      {
        id v31 = (void *)v30;
        if (v10)
        {
          id v39 = *(void **)(*(void *)(a1 + 32) + 56LL);
          id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
          [v38 systemUptime];
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
          [v39 setObject:v32 forKey:v10];
        }

        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472LL;
        void v44[2] = sub_100245D70;
        v44[3] = &unk_1004F7220;
        void v44[4] = *(void *)(a1 + 32);
        id v45 = v15;
        id v46 = v10;
        __int16 v47 = v9;
        id v33 = v40;
        [v31 handleMessage:v40 messageType:v41 fromDeviceWithIdentifier:v19 completion:v44];

        id v34 = v43;
        goto LABEL_34;
      }

      id v36 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%s unsupported message type",  buf,  0xCu);
      }

      id v37 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1004LL));
      v9[2](v9, v15, 0LL, v37);

      id v31 = 0LL;
    }

    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s received malformed message payload",  buf,  0xCu);
      }

      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 11LL));
      v9[2](v9, v15, 0LL, v31);
    }

    id v34 = v43;
    id v33 = v40;
LABEL_34:

LABEL_35:
LABEL_36:

    goto LABEL_37;
  }

  __int16 v14 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v53 = "-[ADCompanionService _setupClientLink]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Lost mode is active, rejecting incoming request",  buf,  0xCu);
  }

  id v15 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1003LL));
  v9[2](v9, 0LL, 0LL, v15);
LABEL_37:
}

void sub_10024585C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_signpost_id_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"messageID"]);
  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v21 = 136315906;
    uint64_t v22 = "-[ADCompanionService _setupClientLink]_block_invoke_3";
    __int16 v23 = 2112;
    os_signpost_id_t v24 = v10;
    __int16 v25 = 2112;
    id v26 = v7;
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s incoming heartbeat request: %@ %@ %@",  (uint8_t *)&v21,  0x2Au);
  }

  if (v10)
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 56LL);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    [v13 systemUptime];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [v12 setObject:v14 forKey:v10];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"hbMessageID"]);
  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) objectForKey:v15]);

    if (v16)
    {
      int v17 = 0LL;
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }

    id v20 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v21 = 136315394;
      uint64_t v22 = "-[ADCompanionService _setupClientLink]_block_invoke";
      __int16 v23 = 2112;
      os_signpost_id_t v24 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s unknown message id: %@",  (uint8_t *)&v21,  0x16u);
    }

    uint64_t v19 = 1008LL;
  }

  else
  {
    id v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315138;
      uint64_t v22 = "-[ADCompanionService _setupClientLink]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s received malformed response",  (uint8_t *)&v21,  0xCu);
    }

    uint64_t v19 = 11LL;
  }

  int v17 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", v19));
  if (v10) {
LABEL_16:
  }
    [*(id *)(*(void *)(a1 + 32) + 56) removeObjectForKey:v10];
LABEL_17:
  (*((void (**)(id, void, void, void *))v9 + 2))(v9, 0LL, 0LL, v17);
}

void sub_100245B28(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v19 = "-[ADCompanionService _setupClientLink]_block_invoke";
      __int16 v20 = 2112;
      int v21 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s companion link activation error: %@",  buf,  0x16u);
    }

    uint64_t v5 = (os_log_s *)AFSiriLogContextPerformance;
    uint64_t v6 = v5;
    os_signpost_id_t v7 = *(void *)(a1 + 40);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v19 = v3;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "CompanionServiceClientLink",  "companion link activation failed with error: %@",  buf,  0xCu);
    }
  }

  else
  {
    id v8 = (os_log_s *)AFSiriLogContextPerformance;
    id v9 = v8;
    os_signpost_id_t v10 = *(void *)(a1 + 40);
    if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "CompanionServiceClientLink",  "companion link activated successfully",  buf,  2u);
    }

    if (AFIsHorseman(v11, v12))
    {
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
      if (*(_BYTE *)(*(void *)(a1 + 32) + 11LL)) {
        __int16 v14 = &off_100513690;
      }
      else {
        __int16 v14 = &off_1005136A8;
      }
      id v16 = @"deviceCount";
      int v17 = v14;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      [v13 logEventWithType:5101 context:v15];
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 13LL) = 1;
  }
}

void sub_100245D70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_signpost_id_t v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 160LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100245E58;
  v14[3] = &unk_1004F7960;
  id v15 = v5;
  id v16 = v7;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v18 = v10;
  id v11 = *(id *)(a1 + 56);
  id v19 = v6;
  id v20 = v11;
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v8, v14);
}

uint64_t sub_100245E58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    [*(id *)(a1 + 40) setObject:v2 forKey:@"payload"];
  }
  if (*(void *)(a1 + 48)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 56) + 56), "removeObjectForKey:");
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_100245EB0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS____ADPBDeviceSetDataRequest);
  -[_ADPBDeviceSetDataRequest _ad_setData:](v4, "_ad_setData:", v3);

  uint64_t v5 = objc_claimAutoreleasedReturnValue(-[_ADPBDeviceSetDataRequest data](v4, "data"));
  id v6 = (void *)v5;
  if (v5)
  {
    id v9 = @"sharedDataProtoBuf";
    uint64_t v10 = v5;
    os_signpost_id_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    id v8 = 0LL;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 0LL));
    os_signpost_id_t v7 = 0LL;
  }

  if (a1[4]) {
    objc_msgSend(*(id *)(a1[5] + 56), "removeObjectForKey:");
  }
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_100245FD8(void *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315650;
    id v9 = "-[ADCompanionService _setupClientLink]_block_invoke";
    __int16 v10 = 1024;
    int v11 = a2;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s remote request success %d, error: %@",  (uint8_t *)&v8,  0x1Cu);
  }

  if (a1[4]) {
    objc_msgSend(*(id *)(a1[5] + 56), "removeObjectForKey:");
  }
  if (!v5 && (a2 & 1) == 0) {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 0LL));
  }
  if (a2) {
    id v7 = 0LL;
  }
  else {
    id v7 = v5;
  }
  (*(void (**)(void, void, void, id))(a1[6] + 16LL))(a1[6], 0LL, 0LL, v7);
}

void sub_100246100(id a1, ADRapportLinkConfigurationMutating *a2)
{
  uint64_t v2 = a2;
  id v3 = +[ADRapportLinkDiscoveryOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkDiscoveryOptions,  "newWithBuilder:",  &stru_1004F7188);
  -[ADRapportLinkConfigurationMutating setDiscoveryOptions:](v2, "setDiscoveryOptions:", v3);

  id v4 = +[ADRapportLinkTransportOptions newWithBuilder:]( &OBJC_CLASS___ADRapportLinkTransportOptions,  "newWithBuilder:",  &stru_1004F71A8);
  -[ADRapportLinkConfigurationMutating setTransportOptions:](v2, "setTransportOptions:", v4);
}

void sub_100246180(id a1, ADRapportLinkTransportOptionsMutating *a2)
{
  id v4 = a2;
  id v2 = (id)_AFPreferencesBLECompanionConnectionsEnabled();
  if ((_DWORD)v2) {
    id v2 = -[ADRapportLinkTransportOptionsMutating setAllowsBLE:](v4, "setAllowsBLE:", 2LL);
  }
  if (AFIsHorseman(v2, v3)
    && +[AFFeatureFlags isForceBLEDiscoveryForCompanionLinkEnabled]( &OBJC_CLASS___AFFeatureFlags,  "isForceBLEDiscoveryForCompanionLinkEnabled"))
  {
    -[ADRapportLinkTransportOptionsMutating setAllowsForceBLE:](v4, "setAllowsForceBLE:", 2LL);
  }
}

void sub_1002461DC(id a1, ADRapportLinkDiscoveryOptionsMutating *a2)
{
  id v2 = a2;
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesHome:](v2, "setIncludesHome:", 2LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesFamily:](v2, "setIncludesFamily:", 0LL);
  -[ADRapportLinkDiscoveryOptionsMutating setIncludesRemoraDevices:](v2, "setIncludesRemoraDevices:", 2LL);
}

void sub_100246220(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (!v10 || v5)
  {
    if (*(_BYTE *)(a1 + 72))
    {
      id v8 = [*(id *)(a1 + 32) _updateSharedDataFromIDSWithIdentifier:*(void *)(a1 + 48)];
      goto LABEL_7;
    }
  }

  else
  {
    [*(id *)(a1 + 32) _updateSharedData:v10 forDevice:*(void *)(a1 + 40)];
    id v6 = *(void **)(*(void *)(a1 + 32) + 64LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 64)));
    [v6 setObject:v7 forKey:*(void *)(a1 + 48)];
  }

  id v8 = 0LL;
LABEL_7:
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v8);
  }
}

id sub_1002462E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSharedDataForCompanionDeviceWithRemoteFetchAllowed:*(unsigned __int8 *)(a1 + 40)];
}

void *sub_1002462F8(void *result, int a2)
{
  if (a2)
  {
    id v2 = result;
    uint64_t v3 = (void *)result[4];
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v3 setLastCompanionRemoteDataFetchDate:v4];

    return [(id)v2[4] synchronize];
  }

  return result;
}

uint64_t sub_100246350()
{
  return qword_100578220;
}

uint64_t sub_10024635C()
{
  if (qword_100578218 != -1) {
    dispatch_once(&qword_100578218, &stru_1004F7730);
  }
  return qword_100578220;
}

void sub_10024639C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v8 = "-[ADCompanionService init]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_1002464B4(id a1)
{
  uint64_t v1 = sub_10024053C();
  id v2 = (uint64_t *)dlsym(v1, "WLKStoredConfigurationDidChangeDispatchNotification");
  if (!v2) {
    __assert_rtn( "initWLKStoredConfigurationDidChangeDispatchNotification_block_invoke",  "ADCompanionService.m",  76,  "constant");
  }
  qword_100578220 = *v2;
  off_100575020 = sub_100246350;
}

void sub_100246588(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100578208;
  qword_100578208 = (uint64_t)v1;
}

void sub_1002468DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100246AE0(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    id v2 = +[AFFeatureFlags isSCDATrialEnabled](&OBJC_CLASS___AFFeatureFlags, "isSCDATrialEnabled");
    if ((v2 & 1) != 0)
    {
      int v3 = AFIsInternalInstall(v2);
      uint64_t v4 = *(void *)(a1 + 32);
      if (!v3 || *(_BYTE *)(v4 + 24))
      {
        BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v4 + 16) levelForFactor:@"SIDEKICK_BOOSTS_FILE" withNamespaceName:@"MYRIAD_BOOSTS"]);
        int v6 = v5;
        if (v5)
        {
          id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 fileValue]);
          id v8 = v7;
          if (v7
            && [v7 hasPath]
            && (__int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 path]), v9, v9))
          {
            id v10 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              int v11 = v10;
              __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
              int v19 = 136315394;
              id v20 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
              __int16 v21 = 2112;
              uint64_t v22 = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s #myriad Trial Myriad Sidekick Boosts File path read from Trial: %@",  (uint8_t *)&v19,  0x16u);
            }

            uint64_t v13 = *(void *)(a1 + 40);
            __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
            (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v14, 0LL);
          }

          else
          {
            id v17 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              int v19 = 136315138;
              id v20 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s #myriad Trial Myriad Sidekick Boosts File value undefined.",  (uint8_t *)&v19,  0xCu);
            }

            __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  31LL,  0LL));
            (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  v14);
          }
        }

        else
        {
          uint64_t v18 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            int v19 = 136315138;
            id v20 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
            _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s #myriad Error reading Myriad Sidekick Boosts File from Trial framework",  (uint8_t *)&v19,  0xCu);
          }

          id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  44LL,  0LL));
          (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        }

        return;
      }

      id v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    else
    {
      id v16 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    }

    v16();
    return;
  }

  id v15 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v19 = 136315138;
    id v20 = "-[ADMyriadSettingsManager getSidekickBoostsFileWithCompletion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s #myriad sidekick boosts file value read without completion",  (uint8_t *)&v19,  0xCu);
  }

void sub_100246E7C(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    if ((+[AFFeatureFlags isSCDATrialEnabled](&OBJC_CLASS___AFFeatureFlags, "isSCDATrialEnabled") & 1) != 0)
    {
      if ([*(id *)(a1 + 32) count] || objc_msgSend(*(id *)(a1 + 40), "count"))
      {
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v20 = 0x3032000000LL;
        __int16 v21 = sub_100247254;
        uint64_t v22 = sub_100247264;
        __int16 v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        id v18[2] = sub_10024726C;
        v18[3] = &unk_1004F77A8;
        id v2 = *(void **)(a1 + 40);
        void v18[4] = *(void *)(a1 + 48);
        v18[5] = &buf;
        [v2 enumerateObjectsUsingBlock:v18];
        int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 48) trialTreatmentMultiDeviceConsensus]));
        [*(id *)(*((void *)&buf + 1) + 40) setObject:v3 forKeyedSubscript:@"MULTI_DEVICE_TRIAL_TREATMENT_CONSENSUS"];

        uint64_t v12 = 0LL;
        uint64_t v13 = &v12;
        uint64_t v14 = 0x3032000000LL;
        id v15 = sub_100247254;
        id v16 = sub_100247264;
        id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v4 = *(void **)(a1 + 32);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        void v11[2] = sub_1002473A4;
        void v11[3] = &unk_1004F77A8;
        void v11[4] = *(void *)(a1 + 48);
        void v11[5] = &v12;
        if (AFIsInternalInstall([v4 enumerateObjectsUsingBlock:v11]))
        {
          if (!*(_BYTE *)(*(void *)(a1 + 48) + 24LL)) {
            [(id)v13[5] setObject:&off_1005136D8 forKeyedSubscript:@"HOMEPOD_BOOST"];
          }
        }

        uint64_t v5 = *(void *)(a1 + 56);
        int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  *(void *)(*((void *)&buf + 1) + 40LL)));
        id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  v13[5]));
        (*(void (**)(uint64_t, void *, void *, void))(v5 + 16))(v5, v6, v7, 0LL);

        _Block_object_dispose(&v12, 8);
        _Block_object_dispose(&buf, 8);
      }

      else
      {
        __int16 v9 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s #myriad Trial fetch with no factors to query",  (uint8_t *)&buf,  0xCu);
        }

        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  47LL,  0LL));
        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      }
    }

    else
    {
      (*(void (**)(void, void, void, void))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  0LL,  0LL,  0LL);
    }
  }

  else
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s #myriad Trial fetch with nil completion",  (uint8_t *)&buf,  0xCu);
    }
  }

void sub_10024721C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_100247254(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100247264(uint64_t a1)
{
}

void sub_10024726C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) levelForFactor:v3 withNamespaceName:@"MYRIAD_BOOSTS"]);
  uint64_t v5 = v4;
  if (v4)
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v4 BOOLeanValue]));
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:v3];
  }

  else
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      __int16 v9 = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #myriad Trial BOOLean factor not found: %@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1002473A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) levelForFactor:v3 withNamespaceName:@"MYRIAD_BOOSTS"]);
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 doubleValue];
    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v6 forKeyedSubscript:v3];
  }

  else
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v8 = 136315394;
      __int16 v9 = "-[ADMyriadSettingsManager getTrialEnables:doubleFactors:withCompletion:]_block_invoke";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s #myriad Trial double factor not found: %@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void sub_1002474D8(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    int v6 = "-[ADMyriadSettingsManager refreshTrial]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Refreshing Trial Myriad Boosts",  (uint8_t *)&v5,  0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) refresh];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 16) factorLevelsWithNamespaceName:@"MYRIAD_BOOSTS"];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v4 postNotificationName:@"AFMyriadTrialBoostsUpdatedNotification" object:0];
}

void sub_1002475D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    int v8 = "-[ADMyriadSettingsManager _setupTrialRefresh]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Myriad Trial boosts updated: %@",  (uint8_t *)&v7,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained refreshTrial];
  }
}

void sub_1002476F4(id a1)
{
  id v1 = -[ADMyriadSettingsManager _init](objc_alloc(&OBJC_CLASS___ADMyriadSettingsManager), "_init");
  id v2 = (void *)qword_100578250;
  qword_100578250 = (uint64_t)v1;
}

uint64_t sub_100247930(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

NSString *sub_100248DE4(void *a1)
{
  id v1 = a1;
  id v2 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@.plist", v1);

  return v2;
}

void sub_100248ED0(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___ADSharedData);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v4 = [v3 assistantIsEnabled];
  -[ADSharedData setSiriEnabled:](v2, "setSiriEnabled:", v4);
  -[ADSharedData setDictationEnabled:](v2, "setDictationEnabled:", [v3 dictationIsEnabled]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
  -[ADSharedData setLanguageCode:](v2, "setLanguageCode:", v5);

  int v6 = (void *)objc_claimAutoreleasedReturnValue([v3 outputVoice]);
  -[ADSharedData setOutputVoice:](v2, "setOutputVoice:", v6);

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sharedUserIdentifier]);
  -[ADSharedData setSharedUserId:](v2, "setSharedUserId:", v8);

  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 loggingSharedUserIdentifier]);
  -[ADSharedData setLoggingSharedUserId:](v2, "setLoggingSharedUserId:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 productTypePrefix]);
  uint64_t v11 = SiriCoreUserAgentStringCreate();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  -[ADSharedData setUserAgent:](v2, "setUserAgent:", v12);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 speechIdentifier]);
  -[ADSharedData setSpeechId:](v2, "setSpeechId:", v14);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 assistantIdentifier]);
  -[ADSharedData setAssistantId:](v2, "setAssistantId:", v15);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 loggingAssistantIdentifier]);
  -[ADSharedData setLoggingAssistantId:](v2, "setLoggingAssistantId:", v16);

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 hostname]);
  -[ADSharedData setHostname:](v2, "setHostname:", v17);

  id v18 = -[ADSharedData setCloudSyncEnabled:](v2, "setCloudSyncEnabled:", _AFPreferencesCloudSyncEnabled());
  -[ADSharedData setShouldCensorSpeech:](v2, "setShouldCensorSpeech:", sub_1001EA6E0((uint64_t)v18));
  int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](&OBJC_CLASS___NSLocale, "currentLocale"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "af_aceTemperatureUnit"));
  -[ADSharedData setTemperatureUnit:](v2, "setTemperatureUnit:", v20);

  id v21 = sub_10010D8F4((uint64_t)[v7 siriDataSharingOptInStatus]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  -[ADSharedData setDataSharingOptInStatus:](v2, "setDataSharingOptInStatus:", v22);

  uint64_t v23 = AFUserAssignedDeviceName();
  os_signpost_id_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  -[ADSharedData setUserAssignedName:](v2, "setUserAssignedName:", v24);

  -[ADSharedData setIsRemotePlaybackDevice:](v2, "setIsRemotePlaybackDevice:", AFSupportsPlayThisOnThatPlayback(v25));
  if ((_DWORD)v4 && !v15)
  {
    id v26 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v29 = 136315138;
      uint64_t v30 = "-[ADCommandCenter(SharedDataRemote) getSharedDataForPeer:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "%s requesting preheat because assistantId is not configured",  (uint8_t *)&v29,  0xCu);
    }

    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionManager]);
    [v27 preheatAndMakeQuiet:0];
  }

  uint64_t v28 = *(void *)(a1 + 40);
  if (v28) {
    (*(void (**)(uint64_t, ADSharedData *))(v28 + 16))(v28, v2);
  }
}

void sub_10024AAAC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 && a2)
  {
    int v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10024AB54;
    v7[3] = &unk_1004FD968;
    void v7[4] = *(void *)(a1 + 32);
    id v8 = v5;
    dispatch_async(v6, v7);
  }
}

void sub_10024AB54(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sessionManager]);
  [v2 sendRemoteGizmoDeviceToServer:*(void *)(a1 + 40)];
}

void sub_10024AB94(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v3 = AFIsNano(v2);
  if ((v3 & 1) == 0)
  {
    uint64_t v3 = AFIsMac();
    if ((v3 & 1) == 0)
    {
      uint64_t v3 = AFIsHorseman(v3, v4);
      if ((v3 & 1) == 0) {
        uint64_t v3 = (uint64_t)[v2 setSharedUserIdentifier:0 loggingSharedUserIdentifier:0];
      }
    }
  }

  id v5 = (id)AFIsNano(v3);
  if ((_DWORD)v5)
  {
    id v5 = (id)_AFPreferencesCloudSyncEnabled();
    if ((_DWORD)v5)
    {
      id v5 = [*(id *)(a1 + 32) cloudSyncEnabled];
      if ((_DWORD)v5)
      {
        int ShouldCensorSpeechInternal = _AFPreferencesShouldCensorSpeechInternal();
        id v5 = [*(id *)(a1 + 32) shouldCensorSpeech];
        if (ShouldCensorSpeechInternal != (_DWORD)v5)
        {
          uint64_t v8 = _AFPreferencesSetShouldCensorSpeechInternal();
          AFBackedUpPreferencesSynchronize(v8);
          __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
          [v9 postNotificationName:@"ADShouldCensorSpeechDidChangeNotification" object:0];
        }
      }
    }
  }

  if (AFIsHorseman(v5, v6))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v2 companionIdentifier]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueIdentifierForPeer:*(void *)(a1 + 40)]);

    uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v15 = 136315394;
      id v16 = "-[ADCommandCenter(SharedDataClient) updateSharedDataWithCloudData:fromPeer:]_block_invoke";
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s unique device id for peer: %@",  (uint8_t *)&v15,  0x16u);
    }

    if (v10 && ![v10 caseInsensitiveCompare:v12])
    {
      uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v15 = 136315138;
        id v16 = "-[ADCommandCenter(SharedDataClient) updateSharedDataWithCloudData:fromPeer:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s resetting peer account...",  (uint8_t *)&v15,  0xCu);
      }

      [*(id *)(a1 + 48) _resetPeerAccountSettingsWithSharedData:*(void *)(a1 + 32)];
    }
  }
}

void sub_10024ADB4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    void v6[2] = sub_10024AEF4;
    v6[3] = &unk_1004FCA28;
    uint64_t v3 = *(void *)(a1 + 32);
    void v6[4] = *(void *)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    [v2 getSharedDataFromPeers:v3 completion:v6];
  }

  else
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v9 = "-[ADCommandCenter(SharedDataClient) _updateSharedDataFromPeers:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s unable to sync data from empty peer set",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }

void sub_10024AEF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)i);
        __int16 v9 = *(void **)(a1 + 32);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v8]);
        [v9 updateSharedDataWithCloudData:v10 fromPeer:v8];
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v5);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

id sub_10024B024(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _updateSharedDataFromPeers:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_10024B034(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 companionIdentifier]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPeerCloudService sharedInstance](&OBJC_CLASS___ADPeerCloudService, "sharedInstance"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 assistantIdForDeviceWithIdsDeviceUniqueIdentifier:v3]);

    if (v6
      && (id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]),
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 peerAssistantIdentifier]),
          unsigned int v9 = [v6 isEqualToString:v8],
          v8,
          v7,
          v9))
    {
      id v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v17 = 136315138;
        id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s companion identifier is already set in account",  (uint8_t *)&v17,  0xCu);
      }

      uint64_t v11 = 0LL;
    }

    else
    {
      __int128 v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v17 = 136315138;
        id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s resetting peer account...",  (uint8_t *)&v17,  0xCu);
      }

      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v4 cachedSharedDataForUniqueId:v3]);
      if (v13)
      {
        __int128 v14 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          int v17 = 136315138;
          id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s using cached data for companion identifier",  (uint8_t *)&v17,  0xCu);
        }
      }

      [*(id *)(a1 + 32) _resetPeerAccountSettingsWithSharedData:v13];

      uint64_t v11 = 1LL;
    }

    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
    [v15 updateSharedDataForCompanionDeviceWithRemoteFetchAllowed:v11];
  }

  else
  {
    id v16 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v17 = 136315138;
      id v18 = "-[ADCommandCenter(SharedDataClient) updateSharedDataFromCompanion]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s unable to sync because there is no configured companion device",  (uint8_t *)&v17,  0xCu);
    }

    [*(id *)(a1 + 32) _resetPeerAccountSettingsWithSharedData:0];
  }
}

void sub_10024B304(id a1)
{
  uint64_t v1 = AFIsHorseman(a1);
  if (((v1 & 1) != 0 || AFIsATV(v1, v2)) && (_AFPreferencesCloudSyncEnabled() & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 infoForThisDevice]);
    unsigned __int8 v5 = [v4 personalDomainsIsEnabled];

    if ((v5 & 1) == 0)
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
      [v6 setSharedUserIdentifier:0 loggingSharedUserIdentifier:0];
    }
  }

id sub_10024B3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) updateSharedDataWithCloudData:a2 fromPeer:a3];
}

id sub_10024B3C0(uint64_t a1, void *a2)
{
  return _[a2 _cloudSyncPreferenceDidChange];
}

void sub_10024B3C8(id a1, ADPeerInfo *a2, id a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    unsigned int v9 = "-[ADCommandCenter(SharedDataClient) listenForSharedDataFromCloud]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s %@ is requesting shared data",  (uint8_t *)&v8,  0x16u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v7 getSharedDataForPeer:v5];
}

id sub_10024B4BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateSharedDataWithPairedPeerData:*(void *)(a1 + 40)];
}

void sub_10024B4C8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sharedDataService]);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 57);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10024B594;
    v8[3] = &unk_1004F77F8;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 32);
    id v9 = v5;
    uint64_t v10 = v6;
    id v11 = *(id *)(a1 + 48);
    [v2 getSharedDataFromPeerUseCache:v3 allowCloudMessaging:v4 completion:v8];
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }
}

void sub_10024B594(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10024B630;
  block[3] = &unk_1004FD9E0;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  id v7 = v3;
  id v8 = *(id *)(a1 + 48);
  id v5 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_10024B630(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10024B670(id *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] _queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10024B734;
    block[3] = &unk_1004FD4C0;
    id v8 = a1[5];
    id v9 = a1[6];
    id v10 = v5;
    dispatch_async(v6, block);
  }
}

id sub_10024B734(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateGizmoData:*(void *)(a1 + 40) forUniqueId:*(void *)(a1 + 48)];
}

void sub_10024CAEC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!v5)
  {
    int v10 = 1;
    if (!a2) {
      goto LABEL_43;
    }
    goto LABEL_15;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
  if ([v7 isEqualToString:kSiriAnalyticsErrorDomain])
  {
    id v8 = [v6 code];

    if (v8 == (id)3)
    {
      id v9 = (os_log_s *)AFSiriLogContextSpeech;
      int v10 = 1;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32LL);
        int v40 = 136315906;
        id v41 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]_block_invoke";
        __int16 v42 = 2112;
        uint64_t v43 = v12;
        __int16 v44 = 2112;
        uint64_t v45 = v11;
        __int16 v46 = 2112;
        __int16 v47 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s %@ Sampling: Suppression requested while uploading audio: %@, error: %@",  (uint8_t *)&v40,  0x2Au);
      }

      goto LABEL_12;
    }
  }

  else
  {
  }

  __int128 v13 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v37 = *(void *)(a1 + 40);
    uint64_t v38 = *(void *)(*(void *)(a1 + 32) + 32LL);
    int v40 = 136315906;
    id v41 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]_block_invoke";
    __int16 v42 = 2112;
    uint64_t v43 = v38;
    __int16 v44 = 2112;
    uint64_t v45 = v37;
    __int16 v46 = 2112;
    __int16 v47 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Failed while uploading audio: %@, error: %@",  (uint8_t *)&v40,  0x2Au);
  }

  int v10 = 0;
LABEL_12:
  __int128 v14 = *(void **)(a1 + 48);
  id v15 = *(id *)(*(void *)(a1 + 32) + 32LL);
  id v16 = v14;
  id v17 = v6;
  id v18 = objc_alloc_init(&OBJC_CLASS___ASRSchemaASRSampledAudioFileEnqueueFailed);
  id v19 = [[SISchemaUUID alloc] initWithNSUUID:v16];

  [v18 setOriginalAsrId:v19];
  objc_msgSend(v18, "setErrorCode:", objc_msgSend(v17, "code"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v17 domain]);
  [v18 setErrorDomain:v20];

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v17 userInfo]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:NSUnderlyingErrorKey]);

  if (v22)
  {
    objc_msgSend(v18, "setUnderlyingErrorCode:", objc_msgSend(v22, "code"));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 domain]);
    [v18 setUnderlyingErrorDomain:v23];
  }

  sub_10024D078(v18, v15);

  if (a2)
  {
LABEL_15:
    os_signpost_id_t v24 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = *(void *)(*(void *)(a1 + 32) + 32LL);
      uint64_t v36 = *(void *)(a1 + 56);
      int v40 = 136315650;
      id v41 = "-[ADSpeechSamplingSendAudioData enqueueAudioDataWithAudioFileName:audioMetadataDict:folderPath:]_block_invoke";
      __int16 v42 = 2112;
      uint64_t v43 = v35;
      __int16 v44 = 2112;
      uint64_t v45 = v36;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "%s %@ Sampling: Successfully enqueued: %@",  (uint8_t *)&v40,  0x20u);
    }

    uint64_t v25 = *(void **)(a1 + 48);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) codec]);
    __int16 v27 = *(void **)(*(void *)(a1 + 32) + 32LL);
    id v28 = v26;
    id v29 = v27;
    id v30 = v25;
    id v31 = objc_alloc_init(&OBJC_CLASS___ASRSchemaASRSampledAudioFileEnqueued);
    id v32 = [[SISchemaUUID alloc] initWithNSUUID:v30];

    [v31 setOriginalAsrId:v32];
    id v33 = v28;
    if ([v33 isEqualToString:@"MHASRAUDIOCODEC_UNKNOWN"])
    {
      uint64_t v34 = 0LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_8000HZ_VALUE"])
    {
      uint64_t v34 = 1LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_11025HZ_VALUE"])
    {
      uint64_t v34 = 2LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_16000HZ_VALUE"])
    {
      uint64_t v34 = 3LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_22050HZ_VALUE"])
    {
      uint64_t v34 = 4LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_PCM_MONO_16BIT_32000HZ_VALUE"])
    {
      uint64_t v34 = 5LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_SPEEX_NB_QUALITY7_VALUE"])
    {
      uint64_t v34 = 6LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_SPEEX_WB_QUALITY8_VALUE"])
    {
      uint64_t v34 = 7LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_ALAC_MONO_8000HZ_VALUE"])
    {
      uint64_t v34 = 8LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_ALAC_MONO_16000HZ_VALUE"])
    {
      uint64_t v34 = 9LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_OPUS_MONO_8000HZ_VALUE"])
    {
      uint64_t v34 = 10LL;
    }

    else if ([v33 isEqualToString:@"MHASRAUDIOCODEC_OPUS_MONO_16000HZ_VALUE"])
    {
      uint64_t v34 = 11LL;
    }

    else
    {
      uint64_t v34 = 0LL;
    }

    [v31 setAudioCodec:v34];
    sub_10024D078(v31, v29);
  }

void sub_10024D078(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_alloc_init(&OBJC_CLASS___ASRSchemaASRClientEventMetadata);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v7 = [[SISchemaUUID alloc] initWithNSUUID:v6];
  [v5 setAsrId:v7];
  id v8 = objc_alloc_init(&OBJC_CLASS___ASRSchemaASRClientEvent);
  [v8 setEventMetadata:v5];
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___ASRSchemaASRSampledAudioFileEnqueued);
  if ((objc_opt_isKindOfClass(v3, v9) & 1) != 0)
  {
    [v8 setSampledAudioFileEnqueued:v3];
LABEL_9:
    __int128 v13 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
    {
      id v16 = v13;
      id v17 = (objc_class *)objc_opt_class(v3);
      id v18 = NSStringFromClass(v17);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
      int v21 = 136315906;
      uint64_t v22 = "wrapAndEmitTopLevelSelfEvent";
      __int16 v23 = 2112;
      id v24 = v4;
      __int16 v25 = 2112;
      id v26 = v19;
      __int16 v27 = 2112;
      id v28 = v20;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s %@ Sampling: Wrapping and logging an ASR SELF event of type %@ with asrId %@",  (uint8_t *)&v21,  0x2Au);
    }

    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
    [v14 emitMessage:v8];

    goto LABEL_12;
  }

  uint64_t v10 = objc_opt_class(&OBJC_CLASS___ASRSchemaASRSampledAudioFileEnqueueFailed);
  if ((objc_opt_isKindOfClass(v3, v10) & 1) != 0)
  {
    [v8 setSampledAudioFileEnqueueFailed:v3];
    goto LABEL_9;
  }

  uint64_t v11 = objc_opt_class(&OBJC_CLASS___ASRSchemaASRSampledAudioFileDeleted);
  if ((objc_opt_isKindOfClass(v3, v11) & 1) != 0)
  {
    [v8 setSampledAudioFileDeleted:v3];
    goto LABEL_9;
  }

  uint64_t v12 = objc_opt_class(&OBJC_CLASS___ASRSchemaASRSampledAudioFileDeletionFailed);
  if ((objc_opt_isKindOfClass(v3, v12) & 1) != 0)
  {
    [v8 setSampledAudioFileDeletionFailed:v3];
    goto LABEL_9;
  }

  id v15 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v21 = 136315394;
    uint64_t v22 = "wrapAndEmitTopLevelSelfEvent";
    __int16 v23 = 2112;
    id v24 = v4;
    _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Failed trying to wrap and emit top-level ASR SELF event because event type was not mapped to logga ble message type in the ASR SELF schema.",  (uint8_t *)&v21,  0x16u);
  }

void sub_10024D354(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v5 stringByAppendingPathComponent:v6]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 lastPathComponent]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByDeletingPathExtension]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@.plist", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByAppendingPathComponent:v9]);

  if (a1) {
    uint64_t v11 = (id *)&OBJC_CLASS___AFAssistantSamplingUtilities_ptr;
  }
  else {
    uint64_t v11 = (id *)&OBJC_CLASS___AFDictationSamplingUtilities_ptr;
  }
  id v12 = [*v11 deleteItemAtFilePath:v14];
  id v13 = [*v11 deleteItemAtFilePath:v10];
}

void sub_10024D460(uint64_t a1)
{
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v23 = [obj countByEnumeratingWithState:&v30 objects:v43 count:16];
  if (v23)
  {
    uint64_t v22 = *(void *)v31;
    do
    {
      uint64_t v2 = 0LL;
      do
      {
        if (*(void *)v31 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = v2;
        id v3 = *(void **)(*((void *)&v30 + 1) + 8 * v2);
        id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 contentsOfDirectoryAtPath:v3 error:0]);

        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        id v25 = v5;
        id v6 = [v25 countByEnumeratingWithState:&v26 objects:v42 count:16];
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = *(void *)v27;
          do
          {
            for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v27 != v8) {
                objc_enumerationMutation(v25);
              }
              uint64_t v10 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 pathExtension]);
              unsigned int v12 = [v11 isEqual:@"pcm"];

              if (v12)
              {
                id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingPathComponent:v10]);
                if (+[AFSamplingUtilities isFileOlderThanAgeInSeconds:filePath:samplingComponent:]( &OBJC_CLASS___AFSamplingUtilities,  "isFileOlderThanAgeInSeconds:filePath:samplingComponent:",  v13,  *(void *)(*(void *)(a1 + 32) + 32LL),  900.0))
                {
                  id v14 = v10;
                  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 lastPathComponent]);
                  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stringByDeletingPathExtension]);

                  id v17 = sub_10024D7B0(v3, (uint64_t)v16, *(void *)(*(void *)(a1 + 32) + 24LL));
                  id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
                  if (v18)
                  {
                    [*(id *)(a1 + 32) enqueueAudioDataWithAudioFileName:v14 audioMetadataDict:v18 folderPath:v3];
                  }

                  else
                  {
                    id v19 = (os_log_s *)AFSiriLogContextSpeech;
                    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 32LL);
                      *(_DWORD *)__int128 buf = 136315906;
                      uint64_t v35 = "-[ADSpeechSamplingSendAudioData sendAudioDataToServer]_block_invoke";
                      __int16 v36 = 2112;
                      uint64_t v37 = v20;
                      __int16 v38 = 2112;
                      id v39 = v3;
                      __int16 v40 = 2112;
                      id v41 = v16;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Audio metadata dict is nil for %@ - %@. It will be purged.",  buf,  0x2Au);
                    }

                    sub_10024D354(*(void *)(*(void *)(a1 + 32) + 24LL), v14, v3);
                  }
                }
              }
            }

            id v7 = [v25 countByEnumeratingWithState:&v26 objects:v42 count:16];
          }

          while (v7);
        }

        uint64_t v2 = v24 + 1;
      }

      while ((id)(v24 + 1) != v23);
      id v23 = [obj countByEnumeratingWithState:&v30 objects:v43 count:16];
    }

    while (v23);
  }
}

id sub_10024D7B0(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@.plist", a2));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByAppendingPathComponent:v6]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v7));
  id v17 = 0LL;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithContentsOfURL:error:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfURL:error:",  v8,  &v17));
  id v10 = v17;
  if (v10)
  {
    uint64_t v11 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
    {
      id v14 = v11;
      id v15 = sub_10024D968(a3);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      *(_DWORD *)__int128 buf = 136315906;
      id v19 = "_ADReadAudioMetadataPlist";
      __int16 v20 = 2112;
      int v21 = v16;
      __int16 v22 = 2112;
      id v23 = v7;
      __int16 v24 = 2112;
      id v25 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Error while reading metadata plist at location %@ - %@",  buf,  0x2Au);
    }

    id v12 = 0LL;
  }

  else
  {
    id v12 = v9;
  }

  return v12;
}

__CFString *sub_10024D968(uint64_t a1)
{
  switch(a1)
  {
    case 2LL:
      uint64_t v1 = &OBJC_CLASS___AFLocalSpeechRecognitionSamplingUtilities;
      return (__CFString *)(id)objc_claimAutoreleasedReturnValue([v1 component]);
    case 1LL:
      uint64_t v1 = &OBJC_CLASS___AFAssistantSamplingUtilities;
      return (__CFString *)(id)objc_claimAutoreleasedReturnValue([v1 component]);
    case 0LL:
      uint64_t v1 = &OBJC_CLASS___AFDictationSamplingUtilities;
      return (__CFString *)(id)objc_claimAutoreleasedReturnValue([v1 component]);
  }

  id v3 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    id v5 = "_ADSamplingComponentFromSamplingType";
    __int16 v6 = 2112;
    id v7 = @"Unknown";
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Unsupported ADSpeechSamplingType",  (uint8_t *)&v4,  0x16u);
  }

  return @"Unknown";
}

void sub_10024E5FC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v6 = 136315650;
    id v7 = "-[ADSpeechSamplingDictationAudioDataHandler adSpeechRecordingDidFail:context:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Dictation Sampling: adSpeechRecordingDidFail for folder - %@ - %@",  (uint8_t *)&v6,  0x20u);
  }

  [*(id *)(a1 + 32) setShouldStopAddingSamples:1];
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"dictationUIInteractionIdentifier"]);
  sub_10024E720(1LL, v3, *(void **)(a1 + 40));

  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  sub_10024EA20(*(void **)(*(void *)(a1 + 32) + 16LL), 0LL);
}

void sub_10024E720(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
  __int16 v8 = &stru_1004FECA0;
  if (v5) {
    uint64_t v9 = v5;
  }
  else {
    uint64_t v9 = &stru_1004FECA0;
  }
  v28[0] = @"dictationUIInteractionIdentifier";
  v28[1] = @"applicationName";
  v29[0] = v9;
  v29[1] = @"OnDeviceDictationAudioData";
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  2LL));
  uint64_t v11 = -[NSMutableDictionary initWithDictionary:](v7, "initWithDictionary:", v10);

  switch(a1)
  {
    case 2LL:
      __int16 v8 = @"success";
      break;
    case 1LL:
      if (v6)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v6 code]));
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v12,  @"errorCode");

        uint64_t v13 = objc_claimAutoreleasedReturnValue([v6 domain]);
        id v14 = (void *)v13;
        if (v13) {
          id v15 = (const __CFString *)v13;
        }
        else {
          id v15 = &stru_1004FECA0;
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v15,  @"errorDomain");

        uint64_t v16 = objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
        id v17 = (void *)v16;
        if (v16) {
          id v18 = (const __CFString *)v16;
        }
        else {
          id v18 = @"UNDEFINED";
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v18,  @"description");

        id v19 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:NSUnderlyingErrorKey]);

        if (v20)
        {
          int v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v20 code]));
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v21,  @"underlyingErrorCode");

          uint64_t v22 = objc_claimAutoreleasedReturnValue([v20 domain]);
          id v23 = (void *)v22;
          if (v22) {
            __int16 v24 = (const __CFString *)v22;
          }
          else {
            __int16 v24 = &stru_1004FECA0;
          }
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v24,  @"underlyingErrorDomain");
        }
      }

      __int16 v8 = @"failed";
      break;
    case 0LL:
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  @"Data older than maximum retention period.",  @"description");
      __int16 v8 = @"deleted";
      break;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v8, @"status");
  id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v25 timeIntervalSince1970];
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v26, @"unixTime");

  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v27 logEventWithType:2223 context:v11];
}

void sub_10024EA20(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = sub_10024D968(a2);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
  {
    __int16 v36 = v6;
    *(_DWORD *)__int128 buf = 136315650;
    id v52 = "_ADStartSendingAudioDataToServer";
    __int16 v53 = 2112;
    __int16 v54 = v5;
    __int16 v55 = 2048;
    __int16 v56 = (__CFString *)[v3 count];
    _os_log_debug_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "%s %@ Sampling: Number of audioDataFoldersToBeSentToServer: %ld",  buf,  0x20u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v8 = [v7 siriDataSharingOptInStatus];

  if (v8 == (id)1)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v10 = [v9 siriDataSharingOptInStatus];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 siriDataSharingOptInStatusHistory]);
    if (qword_1005780A8 != -1) {
      dispatch_once(&qword_1005780A8, &stru_1004F5FE0);
    }
    int v13 = byte_1005780A1;
    id v14 = v12;
    id v15 = v14;
    BOOL v16 = v10 == (id)2 || v13 == 0;
    int v17 = !v16;
    if (v16)
    {
      int v50 = v17;
      id v22 = v14;
      id v23 = [v22 count];
      if (!v10 || v23)
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 firstObject]);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKey:kAFSiriDataSharingOptInStatusHistoryNewOptInStatusKey]);

        __int128 v27 = v26;
        uint64_t v28 = AFSiriDataSharingOptInStatusGetFromName(v26);
        if ((id)v28 == v10)
        {

          char v18 = 1;
        }

        else
        {
          uint64_t v29 = v28;
          id v49 = v27;
          __int128 v30 = (void *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
          {
            log = v30;
            uint64_t Name = AFSiriDataSharingOptInStatusGetName(v10);
            __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(Name);
            uint64_t v45 = AFSiriDataSharingOptInStatusGetName(v29);
            __int16 v46 = (__CFString *)objc_claimAutoreleasedReturnValue(v45);
            id v47 = [v22 count];
            *(_DWORD *)__int128 buf = 136315906;
            id v52 = "_ADIsOptInStatusExplainable";
            __int16 v53 = 2112;
            __int16 v54 = v44;
            __int16 v55 = 2112;
            __int16 v56 = v46;
            __int16 v57 = 2048;
            id v58 = v47;
            _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s Inconsistent opt-in status change history. Opt-in status = %@; mostRecentOptInStatusChangeValue = %@; o"
              "ptInStatusHistory size = %lu",
              buf,
              0x2Au);
          }

          char v18 = 0;
        }
      }

      else
      {
        __int16 v24 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          __int16 v40 = v24;
          uint64_t v41 = AFSiriDataSharingOptInStatusGetName(v10);
          __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          *(_DWORD *)__int128 buf = 136315394;
          id v52 = "_ADIsOptInStatusExplainable";
          __int16 v53 = 2112;
          __int16 v54 = v42;
          _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "%s Inconsistent opt-in status change history. optInStatusHistory is empty and currentOptInStatus is not Unspecified (%@)",  buf,  0x16u);
        }

        char v18 = 0;
      }

      uint64_t v19 = 3LL;
      int v17 = v50;
    }

    else
    {
      char v18 = 0;
      uint64_t v19 = 2LL;
    }

    if ((v18 & 1) == 0)
    {
      __int128 v32 = (void *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = v32;
        __int16 v38 = @"ADOptInStateInconsistencyConditionUnexplainable";
        if (v17) {
          __int16 v38 = @"ADOptInStateInconsistencyConditionDemoModeWatch";
        }
        id v39 = v38;
        *(_DWORD *)__int128 buf = 136315650;
        id v52 = "_ADStartSendingAudioDataToServer";
        __int16 v53 = 2112;
        __int16 v54 = v5;
        __int16 v55 = 2112;
        __int16 v56 = v39;
        _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Cancelling audio upload due to inconsistent condition: %@.",  buf,  0x20u);
      }

      __int128 v33 = (ADSpeechSamplingSendAudioData *)objc_alloc_init(&OBJC_CLASS___OPTINSchemaOPTINClientEvent);
      id v34 = objc_alloc_init(&OBJC_CLASS___OPTINSchemaOPTINInconsistentStateDetected);
      [v34 setInconsistencyTrigger:1];
      [v34 setInconsistencyCondition:v19];
      -[ADSpeechSamplingSendAudioData setInconsistentStateDetected:](v33, "setInconsistentStateDetected:", v34);
      -[ADSpeechSamplingSendAudioData setHasInconsistentStateDetected:](v33, "setHasInconsistentStateDetected:", 1LL);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
      [v35 emitMessage:v33];

      goto LABEL_38;
    }

    if ([v3 count])
    {
      if (a2) {
        __int128 v31 = -[ADSpeechSamplingSendAudioData initWithAudioDataFolders:samplingType:]( objc_alloc(&OBJC_CLASS___ADSpeechSamplingSendAudioData),  "initWithAudioDataFolders:samplingType:",  v3,  1LL);
      }
      else {
        __int128 v31 = -[ADSpeechSamplingDictationAudioDataHandler initWithAudioDataFolders:]( objc_alloc(&OBJC_CLASS___ADSpeechSamplingDictationAudioDataHandler),  "initWithAudioDataFolders:",  v3);
      }
      __int128 v33 = v31;
      -[ADSpeechSamplingSendAudioData sendAudioDataToServer](v31, "sendAudioDataToServer");
LABEL_38:

      goto LABEL_39;
    }

    __int16 v20 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v52 = "_ADStartSendingAudioDataToServer";
      __int16 v53 = 2112;
      __int16 v54 = v5;
      int v21 = "%s %@ Sampling: Done with sending audio data to server.";
      goto LABEL_16;
    }
  }

  else
  {
    __int16 v20 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v52 = "_ADStartSendingAudioDataToServer";
      __int16 v53 = 2112;
      __int16 v54 = v5;
      int v21 = "%s %@ Sampling: Cancelling audio upload due to opt in status";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, v21, buf, 0x16u);
    }
  }

void sub_10024EFE0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24LL);
    int v6 = 136315394;
    id v7 = "-[ADSpeechSamplingDictationAudioDataHandler adSpeechRecognized:usingSpeechModel:sessionUUID:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Dictation Sampling: Done with sending audio to server. Deleting %@",  (uint8_t *)&v6,  0x16u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"dictationUIInteractionIdentifier"]);
  sub_10024E720(2LL, v4, 0LL);

  id v5 =  +[AFDictationSamplingUtilities deleteItemAtFilePath:]( &OBJC_CLASS___AFDictationSamplingUtilities,  "deleteItemAtFilePath:",  *(void *)(*(void *)(a1 + 32) + 24LL));
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  sub_10024EA20(*(void **)(*(void *)(a1 + 32) + 16LL), 0LL);
}

void sub_10024F108(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24LL);
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 136315906;
    __int16 v8 = "-[ADSpeechSamplingDictationAudioDataHandler adSpeechRecognitionDidFail:sessionUUID:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Dictation Sampling: Error while sending audio to server %@ - %@ - %@",  (uint8_t *)&v7,  0x2Au);
  }

  [*(id *)(a1 + 32) setShouldStopAddingSamples:1];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"dictationUIInteractionIdentifier"]);
  sub_10024E720(1LL, v3, *(void **)(a1 + 48));

  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  sub_10024EA20(*(void **)(*(void *)(a1 + 32) + 16LL), 0LL);
}

id sub_10024F238(uint64_t a1)
{
  return [*(id *)(a1 + 32) addAudioSamplesOnQueue:*(void *)(a1 + 40)];
}

void sub_10024F244(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 56);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v16 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v4,  0LL,  &v16));
  if (v16) {
    uint64_t v6 = &stru_1004FECA0;
  }
  else {
    uint64_t v6 = -[NSString initWithData:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithData:encoding:", v5, 4LL);
  }

  [v3 setSamplingInfo:v6];
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"language"]);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) valueForKey:@"samplingRate"]);
  id v9 = [v8 integerValue];

  BOOL v10 = v9 == (id)8000;
  *(void *)(*(void *)(a1 + 32) + 72LL) = (uint64_t)((double)(unint64_t)v9 * 5.0
                                                     + (double)(unint64_t)v9 * 5.0);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 48) startSessionForReason:@"send on device dictation audio data" languageCode:v7 options:*(void *)(*(void *)(a1 + 32) + 56) speechRequestOptions:0]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  objc_msgSend( v12,  "startRecordedDictationWithLanguage:options:sessionUUID:narrowband:delegate:",  v7,  *(void *)(*(void *)(a1 + 32) + 56),  v11,  v10);

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  uint64_t v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10024F418;
  v15[3] = &unk_1004FD940;
  void v15[4] = *(void *)(a1 + 32);
  dispatch_async(v14, v15);
}

void sub_10024F418(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSFileHandle fileHandleForReadingAtPath:]( &OBJC_CLASS___NSFileHandle,  "fileHandleForReadingAtPath:",  *(void *)(*(void *)(a1 + 32) + 32LL)));
  [*(id *)(a1 + 32) addAudioSamplesOnQueue:v2];
}

void sub_10024F468(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = sub_10024D968(a1);
  __int128 v97 = (void *)objc_claimAutoreleasedReturnValue(v2);
  switch(v1)
  {
    case 2LL:
      uint64_t v3 = (objc_class *)&OBJC_CLASS___AFLocalSpeechRecognitionSamplingUtilities;
      goto LABEL_7;
    case 1LL:
      uint64_t v3 = (objc_class *)&OBJC_CLASS___AFAssistantSamplingUtilities;
      goto LABEL_7;
    case 0LL:
      uint64_t v3 = (objc_class *)&OBJC_CLASS___AFDictationSamplingUtilities;
LABEL_7:
      id v4 = objc_alloc_init(v3);
      goto LABEL_11;
  }

  uint64_t v5 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v125 = "_ADSpeechSamplingDeleteOldData";
    __int16 v126 = 2112;
    id v127 = v97;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling - Deletion: Unsupported ADSpeechSamplingType",  buf,  0x16u);
  }

  id v4 = 0LL;
LABEL_11:
  id v6 = [(id)objc_opt_class(v4) sampledLibraryDirectoryPath];
  id v90 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v90)
  {
    int v7 = (os_log_s *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v125 = "_ADSpeechSamplingDeleteOldData";
      __int16 v126 = 2112;
      id v127 = v97;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s %@ Sampling - Deletion: Start deleting old On Device sampled audio data",  buf,  0x16u);
    }

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v114 = 0LL;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 contentsOfDirectoryAtPath:v90 error:&v114]);
    id v10 = v114;

    if (!v10 && [v9 count])
    {
      __int128 v82 = 0LL;
      __int128 v84 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v110 = 0u;
      __int128 v111 = 0u;
      __int128 v112 = 0u;
      __int128 v113 = 0u;
      __int128 v83 = v9;
      id v11 = v9;
      id v12 = [v11 countByEnumeratingWithState:&v110 objects:v123 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v111;
        do
        {
          for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v111 != v14) {
              objc_enumerationMutation(v11);
            }
            uint64_t v16 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)i);
            if ([(id)objc_opt_class(v4) isFileNameValid:v16]
              && sub_10024FF40(v16, (uint64_t)v4))
            {
              -[NSMutableArray addObject:](v84, "addObject:", v16);
            }
          }

          id v13 = [v11 countByEnumeratingWithState:&v110 objects:v123 count:16];
        }

        while (v13);
      }

      if (-[NSMutableArray count](v84, "count"))
      {
        int v17 = (void *)AFSiriLogContextSpeech;
        if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
        {
          char v18 = v17;
          id v19 = -[NSMutableArray count](v84, "count");
          *(_DWORD *)__int128 buf = 136315906;
          id v125 = "_ADSpeechSamplingDeleteOldData";
          __int16 v126 = 2112;
          id v127 = v97;
          __int16 v128 = 2048;
          uint64_t v129 = 7LL;
          __int16 v130 = 2048;
          id v131 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s %@ Sampling - Deletion: Number of data older than %ld days that will be purged: %ld",  buf,  0x2Au);
        }

        __int128 v108 = 0u;
        __int128 v109 = 0u;
        __int128 v106 = 0u;
        __int128 v107 = 0u;
        id obj = v84;
        id v89 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v106,  v122,  16LL);
        if (v89)
        {
          uint64_t v88 = *(void *)v107;
          uint64_t v86 = v1;
          id v87 = v4;
          do
          {
            for (j = 0LL; j != v89; j = (char *)j + 1)
            {
              if (*(void *)v107 != v88) {
                objc_enumerationMutation(obj);
              }
              int v21 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v90,  "stringByAppendingPathComponent:",  *(void *)(*((void *)&v106 + 1) + 8 * (void)j),  v82));
              id v22 = v21;
              if (v1)
              {
                id v91 = v21;
                id v93 = j;
                id v23 = v21;
                __int128 v95 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                __int16 v24 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
                id v25 = (void *)objc_claimAutoreleasedReturnValue( -[NSFileManager contentsOfDirectoryAtPath:error:]( v24,  "contentsOfDirectoryAtPath:error:",  v23,  0LL));
                __int128 v116 = 0u;
                __int128 v117 = 0u;
                __int128 v118 = 0u;
                __int128 v119 = 0u;
                id v26 = [v25 countByEnumeratingWithState:&v116 objects:buf count:16];
                if (v26)
                {
                  id v27 = v26;
                  uint64_t v28 = *(void *)v117;
                  do
                  {
                    for (k = 0LL; k != v27; k = (char *)k + 1)
                    {
                      if (*(void *)v117 != v28) {
                        objc_enumerationMutation(v25);
                      }
                      __int128 v30 = *(void **)(*((void *)&v116 + 1) + 8LL * (void)k);
                      if ([v30 hasSuffix:@".plist"])
                      {
                        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 lastPathComponent]);
                        __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 stringByDeletingPathExtension]);

                        id v33 = sub_10024D7B0(v23, (uint64_t)v32, v1);
                        id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
                        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 valueForKey:@"asrSelfComponentIdentifier"]);
                        if (v35) {
                          -[NSMutableArray addObject:](v95, "addObject:", v35);
                        }
                      }
                    }

                    id v27 = [v25 countByEnumeratingWithState:&v116 objects:buf count:16];
                  }

                  while (v27);
                }

                __int16 v36 = (void *)objc_claimAutoreleasedReturnValue( +[AFAssistantSamplingUtilities deleteItemAtFilePath:]( &OBJC_CLASS___AFAssistantSamplingUtilities,  "deleteItemAtFilePath:",  v23));
                if (v36)
                {
                  __int128 v100 = 0uLL;
                  __int128 v101 = 0uLL;
                  __int128 v98 = 0uLL;
                  __int128 v99 = 0uLL;
                  __int128 v96 = v95;
                  id v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v96,  "countByEnumeratingWithState:objects:count:",  &v98,  v120,  16LL);
                  if (v37)
                  {
                    id v38 = v37;
                    uint64_t v39 = *(void *)v99;
                    do
                    {
                      for (m = 0LL; m != v38; m = (char *)m + 1)
                      {
                        if (*(void *)v99 != v39) {
                          objc_enumerationMutation(v96);
                        }
                        uint64_t v41 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *(void *)(*((void *)&v98 + 1) + 8LL * (void)m));
                        id v42 = v97;
                        uint64_t v43 = v41;
                        id v44 = v36;
                        id v45 = objc_alloc_init(&OBJC_CLASS___ASRSchemaASRSampledAudioFileDeletionFailed);
                        id v46 = [[SISchemaUUID alloc] initWithNSUUID:v43];

                        [v45 setOriginalAsrId:v46];
                        objc_msgSend(v45, "setErrorCode:", objc_msgSend(v44, "code"));
                        id v47 = (void *)objc_claimAutoreleasedReturnValue([v44 domain]);
                        [v45 setErrorDomain:v47];

                        id v48 = (void *)objc_claimAutoreleasedReturnValue([v44 userInfo]);
                        id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 objectForKey:NSUnderlyingErrorKey]);

                        if (v49)
                        {
                          objc_msgSend(v45, "setUnderlyingErrorCode:", objc_msgSend(v49, "code"));
                          int v50 = (void *)objc_claimAutoreleasedReturnValue([v49 domain]);
                          [v45 setUnderlyingErrorDomain:v50];
                        }

                        sub_10024D078(v45, v42);
                      }

                      id v38 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v96,  "countByEnumeratingWithState:objects:count:",  &v98,  v120,  16LL);
                    }

                    while (v38);
                  }
                }

                else
                {
                  __int128 v104 = 0uLL;
                  __int128 v105 = 0uLL;
                  __int128 v102 = 0uLL;
                  __int128 v103 = 0uLL;
                  __int16 v56 = v95;
                  id v57 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v56,  "countByEnumeratingWithState:objects:count:",  &v102,  v121,  16LL);
                  if (v57)
                  {
                    id v58 = v57;
                    uint64_t v59 = *(void *)v103;
                    do
                    {
                      for (n = 0LL; n != v58; n = (char *)n + 1)
                      {
                        if (*(void *)v103 != v59) {
                          objc_enumerationMutation(v56);
                        }
                        __int16 v61 =  -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *(void *)(*((void *)&v102 + 1) + 8LL * (void)n));
                        id v62 = v97;
                        id v63 = objc_alloc_init(&OBJC_CLASS___ASRSchemaASRSampledAudioFileDeleted);
                        id v64 = [[SISchemaUUID alloc] initWithNSUUID:v61];

                        [v63 setOriginalAsrId:v64];
                        sub_10024D078(v63, v62);
                      }

                      id v58 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v56,  "countByEnumeratingWithState:objects:count:",  &v102,  v121,  16LL);
                    }

                    while (v58);
                  }
                }

                __int16 v55 = (__CFString *)v95;

                uint64_t v1 = v86;
                id v4 = v87;
                id v22 = v91;
                j = v93;
              }

              else
              {
                id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
                id v115 = 0LL;
                id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 contentsOfDirectoryAtPath:v22 error:&v115]);
                id v53 = v115;

                if (v53 || ![v52 count])
                {
                  __int16 v54 = (os_log_s *)AFSiriLogContextSpeech;
                  __int16 v55 = &stru_1004FECA0;
                  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 136315394;
                    id v125 = "_ADGetDictationUIInteractionIdentifier";
                    __int16 v126 = 2112;
                    id v127 = v22;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "%s Dictation Sampling: Empty folderPath %@ or could not get contents.",  buf,  0x16u);
                  }
                }

                else
                {
                  __int128 v118 = 0u;
                  __int128 v119 = 0u;
                  __int128 v116 = 0u;
                  __int128 v117 = 0u;
                  id v65 = v52;
                  id v66 = [v65 countByEnumeratingWithState:&v116 objects:buf count:16];
                  if (v66)
                  {
                    id v67 = v66;
                    id v92 = v22;
                    __int128 v94 = j;
                    uint64_t v68 = *(void *)v117;
                    while (2)
                    {
                      for (iuint64_t i = 0LL; ii != v67; iuint64_t i = (char *)ii + 1)
                      {
                        if (*(void *)v117 != v68) {
                          objc_enumerationMutation(v65);
                        }
                        id v70 = *(void **)(*((void *)&v116 + 1) + 8LL * (void)ii);
                        id v71 = (void *)objc_claimAutoreleasedReturnValue([v70 pathExtension]);
                        unsigned int v72 = [v71 isEqual:@"pcm"];

                        if (v72)
                        {
                          v74 = (void *)objc_claimAutoreleasedReturnValue([v70 lastPathComponent]);
                          v75 = (void *)objc_claimAutoreleasedReturnValue([v74 stringByDeletingPathExtension]);

                          id v76 = sub_10024D7B0(v92, (uint64_t)v75, 0LL);
                          uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v76);
                          uint64_t v78 = objc_claimAutoreleasedReturnValue( [v77 objectForKeyedSubscript:@"dictationUIInteractionIdentifier"]);
                          unint64_t v79 = (void *)v78;
                          __int128 v80 = &stru_1004FECA0;
                          if (v78) {
                            __int128 v80 = (__CFString *)v78;
                          }
                          uint64_t v73 = v80;

                          id v22 = v92;
                          id v4 = v87;
                          j = v94;
                          goto LABEL_82;
                        }
                      }

                      id v67 = [v65 countByEnumeratingWithState:&v116 objects:buf count:16];
                      if (v67) {
                        continue;
                      }
                      break;
                    }

                    uint64_t v73 = &stru_1004FECA0;
                    id v4 = v87;
                    id v22 = v92;
                    j = v94;
                  }

                  else
                  {
                    uint64_t v73 = &stru_1004FECA0;
                  }

LABEL_82:
                  __int16 v55 = v73;
                }

                sub_10024E720(0LL, v55, 0LL);
                id v81 =  +[AFDictationSamplingUtilities deleteItemAtFilePath:]( &OBJC_CLASS___AFDictationSamplingUtilities,  "deleteItemAtFilePath:",  v22);
              }
            }

            id v89 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v106,  v122,  16LL);
          }

          while (v89);
        }
      }

      id v10 = v82;
      id v9 = v83;
    }
  }
}

BOOL sub_10024FF40(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = (uint64_t)[(id)objc_opt_class(a2) calculateFileNameAgeInDays:v3];

  return v4 > 7;
}

void sub_10024FF84(uint64_t a1, char a2)
{
  id v3 = sub_10024D968(a1);
  id v64 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v4 = (os_log_s *)AFSiriLogContextSpeech;
  if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
    __int16 v90 = 2112;
    id v91 = v64;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s %@ Sampling - Send to server: Start processing On Device sampled audio data",  buf,  0x16u);
  }

  if (a1)
  {
    if (a1 != 1)
    {
      uint64_t v14 = (os_log_s *)AFSiriLogContextSpeech;
      if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315394;
        id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
        __int16 v90 = 2112;
        id v91 = v64;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling - Send to server: Unsupported ADSpeechSamplingType",  buf,  0x16u);
      }

      int v7 = 0LL;
      id v6 = 0LL;
      goto LABEL_72;
    }

    uint64_t v5 = (Class *)&OBJC_CLASS___AFAssistantSamplingUtilities_ptr;
  }

  else
  {
    uint64_t v5 = (Class *)&OBJC_CLASS___AFDictationSamplingUtilities_ptr;
  }

  id v6 = objc_alloc_init(*v5);
  int v7 = (void *)objc_claimAutoreleasedReturnValue(-[objc_class sampledLibraryDirectoryPath](*v5, "sampledLibraryDirectoryPath"));
  if (!v7) {
    goto LABEL_72;
  }
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v80 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 contentsOfDirectoryAtPath:v7 error:&v80]);
  id v10 = v80;

  if (v10 || ![v9 count])
  {
    id v11 = (void *)AFSiriLogContextSpeech;
    if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO))
    {
      id v12 = v11;
      id v13 = [v9 count];
      *(_DWORD *)__int128 buf = 136315906;
      id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
      __int16 v90 = 2112;
      id v91 = v64;
      __int16 v92 = 2112;
      id v93 = v10;
      __int16 v94 = 2048;
      id v95 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s %@ Sampling - Send to server: No data to be pushed to server. error: %@, listOfFiles=%lu",  buf,  0x2Au);
    }

    goto LABEL_71;
  }

  id v65 = v7;
  id v67 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  id v62 = v9;
  id v15 = v9;
  id v16 = [v15 countByEnumeratingWithState:&v76 objects:v87 count:16];
  id v71 = v6;
  if (!v16) {
    goto LABEL_32;
  }
  id v17 = v16;
  uint64_t v18 = *(void *)v77;
  do
  {
    for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v77 != v18) {
        objc_enumerationMutation(v15);
      }
      __int16 v20 = *(void **)(*((void *)&v76 + 1) + 8LL * (void)i);
      if (![(id)objc_opt_class(v6) isFileNameValid:v20])
      {
        __int16 v24 = (os_log_s *)AFSiriLogContextSpeech;
        if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG)) {
          continue;
        }
        *(_DWORD *)__int128 buf = 136315650;
        id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
        __int16 v90 = 2112;
        id v91 = v64;
        __int16 v92 = 2112;
        id v93 = v20;
        id v22 = v24;
        id v23 = "%s %@ Sampling - invalid filename %@";
        goto LABEL_26;
      }

      if (sub_10024FF40(v20, (uint64_t)v6)
        || (a2 & 1) == 0
        && (id v25 = v20,
            uint64_t v26 = (uint64_t)[(id)objc_opt_class(v6) calculateFileNameAgeInDays:v25],
            v25,
            BOOL v27 = v26 < 1,
            id v6 = v71,
            v27))
      {
        int v21 = (os_log_s *)AFSiriLogContextSpeech;
        if (!os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG)) {
          continue;
        }
        *(_DWORD *)__int128 buf = 136315650;
        id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
        __int16 v90 = 2112;
        id v91 = v64;
        __int16 v92 = 2112;
        id v93 = v20;
        id v22 = v21;
        id v23 = "%s %@ Sampling - not to be pushed %@";
LABEL_26:
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, v23, buf, 0x20u);
        continue;
      }

      -[NSMutableArray addObject:](v67, "addObject:", v20);
    }

    id v17 = [v15 countByEnumeratingWithState:&v76 objects:v87 count:16];
  }

  while (v17);
LABEL_32:

  id v28 = -[NSMutableArray count](v67, "count");
  uint64_t v29 = (void *)AFSiriLogContextSpeech;
  BOOL v30 = os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_INFO);
  if (v28)
  {
    if (v30)
    {
      __int128 v31 = v29;
      id v32 = -[NSMutableArray count](v67, "count");
      *(_DWORD *)__int128 buf = 136315650;
      id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
      __int16 v90 = 2112;
      id v91 = v64;
      __int16 v92 = 2048;
      id v93 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "%s %@ Sampling - Send to server: Number of audio folders that needs to be pushed to server: %ld",  buf,  0x20u);
    }

    id v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    id obj = v67;
    int v7 = v65;
    uint64_t v33 = a1;
    id v34 = &CFNotificationCenterGetDarwinNotifyCenter_ptr;
    id v70 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v72,  v86,  16LL);
    if (v70)
    {
      uint64_t v69 = *(void *)v73;
      do
      {
        uint64_t v35 = 0LL;
        do
        {
          if (*(void *)v73 != v69) {
            objc_enumerationMutation(obj);
          }
          id v36 = (id)objc_claimAutoreleasedReturnValue( [v7 stringByAppendingPathComponent:*(void *)(*((void *)&v72 + 1) + 8 * (void)v35)]);
          id v37 = sub_10024D968(v33);
          id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v34[489] defaultManager]);
          id v85 = 0LL;
          __int16 v40 = (void *)objc_claimAutoreleasedReturnValue([v39 contentsOfDirectoryAtPath:v36 error:&v85]);
          id v41 = v85;

          if (v41 || ![v40 count])
          {
            id v42 = (os_log_s *)AFSiriLogContextSpeech;
            if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 v96 = 136315650;
              __int128 v97 = "_ADIsAudioDataFolderValidForProcessing";
              __int16 v98 = 2112;
              __int128 v99 = v38;
              __int16 v100 = 2112;
              id v101 = v36;
              _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "%s %@ Sampling: Empty folderPath %@ or could not get contents.",  v96,  0x20u);
            }
          }

          else
          {
            __int128 v83 = 0u;
            __int128 v84 = 0u;
            __int128 v81 = 0u;
            __int128 v82 = 0u;
            id v45 = v40;
            id v46 = [v45 countByEnumeratingWithState:&v81 objects:buf count:16];
            if (v46)
            {
              id v47 = v46;
              uint64_t v48 = *(void *)v82;
LABEL_51:
              uint64_t v49 = 0LL;
              while (1)
              {
                if (*(void *)v82 != v48) {
                  objc_enumerationMutation(v45);
                }
                int v50 = *(void **)(*((void *)&v81 + 1) + 8 * v49);
                id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 pathExtension]);
                unsigned int v52 = [v51 isEqual:@"pcm"];

                if (v52) {
                  break;
                }
                if (v47 == (id)++v49)
                {
                  id v47 = [v45 countByEnumeratingWithState:&v81 objects:buf count:16];
                  if (v47) {
                    goto LABEL_51;
                  }
                  goto LABEL_57;
                }
              }

              __int16 v54 = (void *)objc_claimAutoreleasedReturnValue([v50 lastPathComponent]);
              __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v54 stringByDeletingPathExtension]);

              uint64_t v33 = a1;
              id v56 = sub_10024D7B0(v36, (uint64_t)v55, a1);
              id v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
              id v58 = (void *)objc_claimAutoreleasedReturnValue([v57 valueForKey:@"language"]);
              uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v57 valueForKey:@"samplingRate"]);
              id v60 = [v59 integerValue];

              int v7 = v65;
              id v34 = &CFNotificationCenterGetDarwinNotifyCenter_ptr;
              if (v57 && v58 && v60)
              {
                [v63 addObject:v36];
                id v6 = v71;
                goto LABEL_60;
              }
            }

            else
            {
LABEL_57:

              int v7 = v65;
              uint64_t v33 = a1;
              id v34 = &CFNotificationCenterGetDarwinNotifyCenter_ptr;
            }
          }

          uint64_t v43 = (os_log_s *)AFSiriLogContextSpeech;
          if (os_log_type_enabled(AFSiriLogContextSpeech, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
            __int16 v90 = 2112;
            id v91 = v64;
            __int16 v92 = 2112;
            id v93 = v36;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEBUG,  "%s %@ Sampling - Send to server: audioDataFolderPath %@ does not contain valid contents. It will be purged.",  buf,  0x20u);
          }

          id v6 = v71;
          if (v33) {
            id v44 = &OBJC_CLASS___AFAssistantSamplingUtilities;
          }
          else {
            id v44 = &OBJC_CLASS___AFDictationSamplingUtilities;
          }
          id v53 = [v44 deleteItemAtFilePath:v36];
LABEL_60:

          uint64_t v35 = (char *)v35 + 1;
        }

        while (v35 != v70);
        id v61 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v72,  v86,  16LL);
        id v70 = v61;
      }

      while (v61);
    }

    sub_10024EA20(v63, v33);
  }

  else
  {
    int v7 = v65;
    if (v30)
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v89 = "_ADSpeechSamplingSendSampledAudioDataToServer";
      __int16 v90 = 2112;
      id v91 = v64;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  OS_LOG_TYPE_INFO,  "%s %@ Sampling - Send to server: No data to be pushed to server.",  buf,  0x16u);
    }
  }

  id v10 = 0LL;
  id v9 = v62;
LABEL_71:

LABEL_72:
}

void sub_10025243C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isTimeoutSuspended]);
}

void sub_10025249C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v5);
  }
}

void sub_100252500(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v2 isWatchAuthenticatedWithCompletion:*(void *)(a1 + 40)];
}

void sub_100252550(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isInStarkMode]);
}

void sub_1002525B0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v2 isInCarDNDModeWithCompletion:*(void *)(a1 + 40)];
}

void sub_100252600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, [v3 isDeviceLocked]);
}

uint64_t sub_100252660(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100252698(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002526A8(uint64_t a1)
{
}

void sub_1002526B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) allKeys]);
  id v3 = [v2 copy];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v6 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v23;
    *(void *)&__int128 v8 = 136315394LL;
    __int128 v21 = v8;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void *)(*((void *)&v22 + 1) + 8LL * (void)v11);
        id v13 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "countForObject:", v12, v21);
        uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
        BOOL v15 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
        if (v13)
        {
          if (!v15) {
            goto LABEL_10;
          }
          *(_DWORD *)__int128 buf = 136315650;
          BOOL v27 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke";
          __int16 v28 = 2112;
          uint64_t v29 = v12;
          __int16 v30 = 2048;
          id v31 = v13;
          id v16 = v14;
          id v17 = "%s Timer %@ was already stopped %lu times, add one more time.";
          uint32_t v18 = 32;
        }

        else
        {
          if (!v15) {
            goto LABEL_10;
          }
          *(_DWORD *)__int128 buf = v21;
          BOOL v27 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke";
          __int16 v28 = 2112;
          uint64_t v29 = v12;
          id v16 = v14;
          id v17 = "%s Stopping timer %@ now...";
          uint32_t v18 = 22;
        }

        _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v17, buf, v18);
LABEL_10:
        id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) objectForKey:v12]);
        [v19 stop];

        [*(id *)(*(void *)(a1 + 32) + 112) addObject:v12];
        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v20 = [v6 countByEnumeratingWithState:&v22 objects:v32 count:16];
      id v9 = v20;
    }

    while (v20);
  }
}

void sub_1002528FC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  __int128 v1 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v3[1] = 3221225472LL;
  v3[2] = sub_100252958;
  v3[3] = &unk_1004FCDB0;
  __int128 v4 = v1;
  dispatch_async(v2, v3);
}

void sub_100252958(uint64_t a1)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v2 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v15;
    *(void *)&__int128 v4 = 136315394LL;
    __int128 v13 = v4;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 112), "removeObject:", v8, v13);
        id v9 = [*(id *)(*(void *)(a1 + 32) + 112) countForObject:v8];
        uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
        BOOL v11 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
        if (v9)
        {
          if (v11)
          {
            *(_DWORD *)__int128 buf = 136315650;
            id v19 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke";
            __int16 v20 = 2112;
            uint64_t v21 = v8;
            __int16 v22 = 2048;
            id v23 = v9;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Timer %@ was still stopped %lu times.",  buf,  0x20u);
          }
        }

        else
        {
          if (v11)
          {
            *(_DWORD *)__int128 buf = v13;
            id v19 = "-[ADServiceConnection _stopTimersWithContinuation]_block_invoke_2";
            __int16 v20 = 2112;
            uint64_t v21 = v8;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Resetting timer %@ now...",  buf,  0x16u);
          }

          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) objectForKey:v8]);
          [v12 reset];
        }
      }

      id v5 = [v2 countByEnumeratingWithState:&v14 objects:v24 count:16];
    }

    while (v5);
  }
}

id sub_100252B78(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_100252B80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100252B94(void *a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (os_log_s *)AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v7 = 136315906;
    uint64_t v8 = "-[ADServiceConnection sendFetchSyncSnapshotForInfo:completion:]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    id v14 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s %@ failed to fetch sync snapshot for info %@: %@",  (uint8_t *)&v7,  0x2Au);
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_100252C84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100252C90(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315394;
    int v7 = "-[ADServiceConnection sendBeginSyncWithInfo:chunkHandler:completion:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Plugin timed out for sync with info %@",  (uint8_t *)&v6,  0x16u);
  }

  [*(id *)(a1 + 40) clearSyncRequestWithUUID:*(void *)(a1 + 48)];
  [*(id *)(a1 + 56) serviceConnectionTimedoutForSync];
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3)
  {
    __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 103LL));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }

id sub_100252D90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setSyncRequest:*(void *)(a1 + 40) forUUID:*(void *)(a1 + 48)];
}

void sub_100252DA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100252F88;
  v8[3] = &unk_1004FDA30;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v11 = v3;
  id v12 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100252E60(void *a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (os_log_s *)AFSiriLogContextSync;
  if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    int v9 = 136315906;
    id v10 = "-[ADServiceConnection sendBeginSyncWithInfo:chunkHandler:completion:]_block_invoke";
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v8;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s %@ Sync failed for info %@: %@",  (uint8_t *)&v9,  0x2Au);
  }

  uint64_t v5 = a1[6];
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  101LL,  0LL,  v3));
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

uint64_t sub_100252F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100252F88(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) syncRequestForUUID:*(void *)(a1 + 40)]);
  if ([v2 timedout])
  {
    id v3 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      id v6 = "-[ADServiceConnection sendBeginSyncWithInfo:chunkHandler:completion:]_block_invoke_3";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Plugin already timed out for sync",  (uint8_t *)&v5,  0xCu);
    }
  }

  else
  {
    [*(id *)(a1 + 32) clearSyncRequestWithUUID:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4) {
      (*(void (**)(uint64_t, void))(v4 + 16))(v4, *(void *)(a1 + 48));
    }
  }
}

void sub_100253070(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    id v10 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
    __int16 v11 = 2114;
    uint64_t v12 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Plugin timed out for message %{public}@",  buf,  0x16u);
  }

  [*(id *)(a1 + 40) _removeTimerForUUID:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 103LL));
  (*(void (**)(uint64_t, void, void, void *))(v3 + 16))(v3, 0LL, 0LL, v4);

  if (AFIsInternalInstall(v5))
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v10 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Taking stackshot for timedout plugin",  buf,  0xCu);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Siri plugin timed out for plugin: %@ %@",  *(void *)(*(void *)(a1 + 40) + 32LL),  *(void *)(a1 + 32)));
    WriteStackshotReport_async(v7, 1359171905LL);
  }

void sub_100253208(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1002535FC;
  v8[3] = &unk_1004F7960;
  void v8[4] = v4;
  id v9 = v5;
  id v10 = *(id *)(a1 + 48);
  id v11 = v3;
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v7 = v3;
  dispatch_async(v6, v8);
}

void sub_1002532E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v12 = *(dispatch_queue_s **)(v10 + 8);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  id v17[2] = sub_100253400;
  v17[3] = &unk_1004F7A78;
  void v17[4] = v10;
  id v18 = v11;
  id v19 = *(id *)(a1 + 48);
  id v20 = v7;
  id v21 = *(id *)(a1 + 56);
  id v22 = v9;
  id v13 = *(id *)(a1 + 64);
  id v23 = v8;
  id v24 = v13;
  id v14 = v8;
  id v15 = v9;
  id v16 = v7;
  dispatch_async(v12, v17);
}

void sub_100253400(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (!v2 || ([v2 cancelIfNotAlreadyCanceled] & 1) != 0)
  {
    [*(id *)(*(void *)(a1 + 32) + 56) markResponseForCommand:*(void *)(a1 + 64)];
    id v3 = *(void **)(a1 + 72);
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = 0LL;
LABEL_16:
      (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();

      return;
    }

    id v8 = *(id *)(a1 + 56);
    if (v8)
    {
      uint64_t v5 = -[SAGenericCommand initWithDictionary:]( objc_alloc(&OBJC_CLASS___SAGenericCommand),  "initWithDictionary:",  v8);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(-[SAGenericCommand className](v5, "className"));

      if (v9)
      {
        id v4 = 0LL;
LABEL_15:

        goto LABEL_16;
      }

      uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        id v12 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
        __int16 v13 = 2112;
        id v14 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Bad plugin response %@",  (uint8_t *)&v11,  0x16u);
      }

      id v4 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 102LL));
    }

    else
    {
      id v4 = 0LL;
    }

    uint64_t v5 = 0LL;
    goto LABEL_15;
  }

  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    id v7 = *(void **)(a1 + 56);
    int v11 = 136315394;
    id v12 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke_2";
    __int16 v13 = 2112;
    id v14 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring plugin reply %@",  (uint8_t *)&v11,  0x16u);
  }

void sub_1002535FC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2 && ([v2 cancelIfNotAlreadyCanceled] & 1) == 0)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 56);
      int v8 = 136315394;
      id v9 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke_2";
      __int16 v10 = 2114;
      uint64_t v11 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s message timed out, ignoring provider service error %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }

  else
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 56);
      uint64_t v5 = *(void *)(a1 + 64);
      int v8 = 136315650;
      id v9 = "-[ADServiceConnection sendClientBoundCommand:domain:executionContext:reply:]_block_invoke";
      __int16 v10 = 2114;
      uint64_t v11 = v5;
      __int16 v12 = 2114;
      uint64_t v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Plugin failed for message %{public}@: %{public}@",  (uint8_t *)&v8,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

id sub_100253764(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 104) removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_100253770(void *a1)
{
  return [*(id *)(a1[4] + 104) setObject:a1[5] forKey:a1[6]];
}

void sub_100253784(id a1)
{
  __int128 v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADServiceConnection _connection]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Assistant Service Connection Invalidated",  (uint8_t *)&v2,  0xCu);
  }

void sub_100253828(id a1)
{
  __int128 v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = 136315138;
    id v4 = "-[ADServiceConnection _connection]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Assistant Service Connection Interrupted",  (uint8_t *)&v3,  0xCu);
  }

  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v2 logEventWithType:4002 context:0];
}

uint64_t sub_10025420C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100254218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100254224(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKey:*(void *)(a1 + 40)]);
  [v2 invalidateTimer];
  int v3 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v2 syncChunkHandler]);
  if (v3)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___ADSyncChunkInfo);
    -[ADSyncChunkInfo setPre:](v4, "setPre:", *(void *)(a1 + 48));
    -[ADSyncChunkInfo setPost:](v4, "setPost:", *(void *)(a1 + 56));
    -[ADSyncChunkInfo setToAdd:](v4, "setToAdd:", *(void *)(a1 + 64));
    -[ADSyncChunkInfo setToRemove:](v4, "setToRemove:", *(void *)(a1 + 72));
    -[ADSyncChunkInfo setValidity:](v4, "setValidity:", *(void *)(a1 + 80));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1002543F4;
    void v11[3] = &unk_1004FDA58;
    id v12 = *(id *)(a1 + 88);
    ((void (**)(void, ADSyncChunkInfo *, void *))v3)[2](v3, v4, v11);
  }

  else
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextSync;
    if (os_log_type_enabled(AFSiriLogContextSync, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 56);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(a1 + 80);
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)__int128 buf = 136316418;
      id v14 = "-[ADServiceConnectionProviderServiceDelegate syncChunksWithPreAnchor:postAnchor:updates:deletes:validity:for"
            "RequestUUID:reply:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v6;
      __int16 v17 = 2112;
      uint64_t v18 = v7;
      __int16 v19 = 2112;
      uint64_t v20 = v8;
      __int16 v21 = 2112;
      uint64_t v22 = v10;
      __int16 v23 = 2112;
      uint64_t v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Ignoring sync chunks as we have no chunk handler. (pre=%@, post=%@, validity=%@, updates=%@, deletes=%@)",  buf,  0x3Eu);
    }

    (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  }
}

uint64_t sub_1002543F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100255F50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

void sub_100256B68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100256CEC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1002581A4(uint64_t a1)
{
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _keychainCache]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:*(void *)(a1 + 40)]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v2 != v3 || (id v4 = v2, *(void *)(a1 + 48)))
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v2, v5) & 1) != 0)
    {
      unsigned __int8 v6 = [*(id *)(a1 + 48) isEqualToString:v2];

      if ((v6 & 1) != 0) {
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      [v10 setValue:v7 forKey:*(void *)(a1 + 40)];
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      [v10 setValue:v8 forKey:*(void *)(a1 + 40)];
    }

    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataUsingEncoding:4]);
    AFKeychainSetValueForAccountAndKey(v4, AFSiriGlobalKeychainAccountIdentifier, *(void *)(a1 + 40));
    uint64_t v9 = *(void *)(a1 + 56);
    if (v9) {
      (*(void (**)(void))(v9 + 16))();
    }
  }

LABEL_13:
}

void sub_1002582DC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [v3 postNotificationName:@"ADPreferencesCompanionIdentifierDidChangeNotification" object:WeakRetained];
}

uint64_t sub_10025833C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10025834C(uint64_t a1)
{
}

void sub_100258354(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cachedKeychainStringForKey:@"Companion Identifier"]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100258394(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [v3 postNotificationName:@"ADPreferencesSharedUserIdentifierDidChangeNotification" object:WeakRetained];
}

void sub_1002583F4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cachedKeychainStringForKey:@"Logging User Identifier"]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100258434(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cachedKeychainStringForKey:@"User Identifier"]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_100258474(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 17LL) = 1;
  return result;
}

uint64_t sub_100258484(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 16LL) = 1;
  return result;
}

void sub_100258494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 16) || *(_BYTE *)(v2 + 17)) {
    AFBackedUpPreferencesSynchronize(a1);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification( DarwinNotifyCenter,  AFInternalPreferencesDidChangeDarwinNotification,  0LL,  0LL,  1u);
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v6 + 16))
  {
    if (AFIsATV(v4, v5)
      && +[AFFeatureFlags isTVAirPodsEnabled](&OBJC_CLASS___AFFeatureFlags, "isTVAirPodsEnabled"))
    {
      uint64_t v7 = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(v7, AFLanguageCodeDidChangeDarwinNotification, 0LL, 0LL, 1u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 0;
    uint64_t v6 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v6 + 17))
  {
    uint64_t v8 = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(v8, AFOutputLanguageDidChangeDarwinNotification, 0LL, 0LL, 1u);
    *(_BYTE *)(*(void *)(a1 + 32) + 17LL) = 0;
  }

void sub_1002585A8(id a1)
{
  __int128 v1 = objc_alloc(&OBJC_CLASS___ADPreferences);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  uint64_t v2 = -[ADPreferences initWithInstanceContext:](v1, "initWithInstanceContext:", v4);
  uint64_t v3 = (void *)qword_100578278;
  qword_100578278 = (uint64_t)v2;
}

void sub_100258CD0(void *a1, void *a2)
{
  uint64_t v3 = a1[7];
  id v4 = a2;
  [v4 setGeneration:v3];
  [v4 setDate:a1[4]];
  [v4 setInsertedOrUpdatedItems:a1[5]];
  [v4 setDeletedItemUUIDs:a1[6]];
}

void sub_100259918(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002599AC;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_1002599AC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v25 = "-[ADRemoraCleanupManager cleanupUntilDate:]_block_invoke_2";
    __int16 v26 = 2112;
    id v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s activeEndpointUUIDs = %@", buf, 0x16u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences storedRemoraEndpointUUIDs](&OBJC_CLASS___AFPreferences, "storedRemoraEndpointUUIDs"));
  uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v25 = "-[ADRemoraCleanupManager cleanupUntilDate:]_block_invoke";
    __int16 v26 = 2112;
    id v27 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s storedEndpointUUIDs = %@", buf, 0x16u);
  }

  id v6 = [v4 mutableCopy];
  [v6 minusSet:*(void *)(a1 + 32)];
  id v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v25 = "-[ADRemoraCleanupManager cleanupUntilDate:]_block_invoke";
    __int16 v26 = 2112;
    id v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s endpointUUIDsToDelete = %@", buf, 0x16u);
  }

  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v20;
    do
    {
      uint64_t v13 = 0LL;
      do
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v13);
        __int16 v15 = objc_alloc(&OBJC_CLASS___AFInstanceContext);
        uint64_t v16 = -[AFInstanceContext initWithEndpointUUID:loadsEndpointOnDemand:]( v15,  "initWithEndpointUUID:loadsEndpointOnDemand:",  v14,  1LL,  (void)v19);
        [*(id *)(a1 + 40) _deletePreferencesForInstanceContext:v16];
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);
        -[NSMutableSet addObject:](v8, "addObject:", v17);

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v11);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  [v18 cleanUpCachedAccessoriesLanguages:v8];

  [*(id *)(a1 + 40) _removeUserSupportDirectoryOfInactiveAcccessories:v8];
  [*(id *)(*(void *)(a1 + 40) + 16) processAccountDeletionsUntilDate:*(void *)(a1 + 48)];
}

void sub_100259C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v3);
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v4, "UUIDString"));
    LOBYTE(v6) = [v6 containsObject:v7];

    if ((v6 & 1) == 0)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stringByAppendingPathComponent:v3]);
      id v9 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v16 = "-[ADRemoraCleanupManager _removeUserSupportDirectoryOfInactiveAcccessories:]_block_invoke";
        __int16 v17 = 2112;
        uint64_t v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%s Removing item at path: %@", buf, 0x16u);
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v14 = 0LL;
      [v10 removeItemAtPath:v8 error:&v14];
      id v11 = v14;

      uint64_t v12 = *(void *)(a1 + 48);
      if (v12)
      {
        uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315650;
          uint64_t v16 = "-[ADRemoraCleanupManager _removeUserSupportDirectoryOfInactiveAcccessories:]_block_invoke";
          __int16 v17 = 2112;
          uint64_t v18 = v8;
          __int16 v19 = 2112;
          uint64_t v20 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%s Unable to remove User Support Directory of Endpoint (%@) due to error: %@",  buf,  0x20u);
        }
      }
    }
  }
}

id sub_100259E60(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _deleteLanguagePreferenceForInstanceContext:*(void *)(a1 + 40)];
}

id sub_100259E8C()
{
  if (qword_100578288 != -1) {
    dispatch_once(&qword_100578288, &stru_1004F7B30);
  }
  return (id)qword_100578280;
}

dispatch_queue_t sub_100259ECC(const char *a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_attr_t v6 = dispatch_queue_attr_make_with_qos_class(v5, QOS_CLASS_DEFAULT, 0);
  id v7 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v6);

  if (v3) {
    dispatch_queue_t v8 = dispatch_queue_create_with_target_V2(a1, v7, v3);
  }
  else {
    dispatch_queue_t v8 = dispatch_queue_create(a1, v7);
  }
  dispatch_queue_t v9 = v8;

  return v9;
}

void sub_100259F50(id a1)
{
  dispatch_workloop_t v1 = dispatch_workloop_create("com.apple.assistant.remora-cleanup");
  uint64_t v2 = (void *)qword_100578280;
  qword_100578280 = (uint64_t)v1;
}

id sub_10025B588(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _writeTokensToFile];
}

id sub_10025B590(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadContentsOfFileIfExists];
}

id sub_10025B598(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 40);
  if (v3)
  {
    dispatch_queue_attr_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v17 = "-[ADMUXCompanionSyncTokenContainer _removeFilePostAccountRemoval:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Closing open file during account removal",  buf,  0xCu);
      id v3 = *(void **)(*(void *)(a1 + 32) + 40LL);
    }

    [v3 closeFile];
    uint64_t v5 = *(void *)(a1 + 32);
    dispatch_queue_attr_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  if (*(void *)(v2 + 48))
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v17 = "-[ADMUXCompanionSyncTokenContainer _removeFilePostAccountRemoval:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Removing the token file during account removal",  buf,  0xCu);
    }

    dispatch_queue_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 48LL);
    id v15 = 0LL;
    [v8 removeItemAtPath:v9 error:&v15];
    id v10 = v15;

    if (v10)
    {
      id v11 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = v11;
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
        *(_DWORD *)__int128 buf = 136315394;
        __int16 v17 = "-[ADMUXCompanionSyncTokenContainer _removeFilePostAccountRemoval:]_block_invoke";
        __int16 v18 = 2112;
        __int16 v19 = v14;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s Failed to delete the token file: %@",  buf,  0x16u);
      }
    }

    uint64_t v2 = *(void *)(a1 + 32);
  }

  [*(id *)(v2 + 8) removeAllObjects];
  return [*(id *)(*(void *)(a1 + 32) + 64) removeAllObjects];
}

id sub_10025B7B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _loadContentsOfFileIfExists];
}

void sub_10025B800(id a1)
{
  dispatch_workloop_t v1 = objc_alloc_init(&OBJC_CLASS___ADMUXCompanionSyncTokenContainer);
  uint64_t v2 = (void *)qword_100578298;
  qword_100578298 = (uint64_t)v1;
}

NSData *__cdecl sub_10025B828(id a1, SVDCapability *a2)
{
  uint64_t v2 = a2;
  id v8 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v2,  1LL,  &v8));
  id v4 = v8;
  if (v4)
  {
    uint64_t v5 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v10 = "ADSerializedSVDCapabilities_block_invoke";
      __int16 v11 = 2112;
      uint64_t v12 = v2;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s #hal Failed to serialize %@",  buf,  0x16u);
    }

    id v6 = 0LL;
  }

  else
  {
    id v6 = v3;
  }

  return (NSData *)v6;
}

id sub_10025B940(void *a1)
{
  id v17 = a1;
  uint64_t v1 = objc_opt_class(&OBJC_CLASS___SVDAppLaunchCapability);
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___SVDVideoPlaybackCapability);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___SVDSeymourRoutingCapability);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___SVDAudioPlaybackCapability);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___SVDSpeakerCapability);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___SVDVoiceTriggerCapability);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___SVDAlarmTimerIntentsHandlingCapability);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___SVDMUXCapability);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___SVDAssistantEnabledCapability);
  id v10 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v1,  v2,  v3,  v4,  v5,  v6,  v7,  v8,  v9,  objc_opt_class(&OBJC_CLASS___SVDCustomTimerIntentHandlingCapability),  0LL);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (+[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled"))
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v11));
    [v12 addObject:objc_opt_class(SVDProfileSwitchingCapability)];
    id v13 = [v12 copy];

    __int16 v11 = v13;
  }

  uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSArray);
  if ((objc_opt_isKindOfClass(v17, v14) & 1) != 0)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    id v18[2] = sub_10025BB30;
    v18[3] = &unk_1004F7B98;
    id v19 = v11;
    id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "af_lenientMappedArray:", v18));
  }

  else
  {
    id v15 = 0LL;
  }

  return v15;
}

id sub_10025BB30(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSData);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v11 = 0LL;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v5,  v3,  &v11));
    id v7 = v11;
    if (v7 || !v6)
    {
      uint64_t v9 = (os_log_s *)AFSiriLogContextUtility;
      if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        id v13 = "ADDeserializedSVDCapabilities_block_invoke";
        __int16 v14 = 2112;
        id v15 = v3;
        __int16 v16 = 2112;
        id v17 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s #hal Unable to deserialize %@: %@",  buf,  0x20u);
      }

      id v8 = 0LL;
    }

    else
    {
      id v8 = v6;
    }
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void *sub_10025C460(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 32), "removeObject:");
  }
  return result;
}

void *sub_10025C478(void *result)
{
  if (result[4]) {
    return objc_msgSend(*(id *)(result[5] + 32), "addObject:");
  }
  return result;
}

void sub_10025C490(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    uint64_t v5 = "-[ADLocalMeCardStore meCard:]_block_invoke";
    __int16 v6 = 2112;
    id v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Returning MeCard:%@", (uint8_t *)&v4, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10025C570(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 16);
  if (v3)
  {
    uint64_t v2 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(v2 + 16), *(id *)(a1 + 40));
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[AceObject aceObjectWithPlistData:]( &OBJC_CLASS___AceObject,  "aceObjectWithPlistData:",  *(void *)(a1 + 40)));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v4);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  [v5 setSingleUserMeCard:*(void *)(a1 + 40)];
  __int16 v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 24LL);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v21 = "-[ADLocalMeCardStore storeMeCard:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Saved MeCard:%@", buf, 0x16u);
  }

  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "allObjects", 0));
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)v12);
        id v14 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
        [v13 localMeCardDidUpdate:v14];

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v10);
  }
}

void sub_10025C774(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 singleUserMeCard]);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 16LL), v3);
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AceObject aceObjectWithPlistData:](&OBJC_CLASS___AceObject, "aceObjectWithPlistData:"));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 24LL), v4);
    uint64_t v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[ADLocalMeCardStore _init]_block_invoke";
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Reading stored MeCard: (%@)",  (uint8_t *)&v10,  0x16u);
    }
  }

  else
  {
    __int16 v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      uint64_t v11 = "-[ADLocalMeCardStore _init]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s No stored MeCard found",  (uint8_t *)&v10,  0xCu);
    }
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 32);
  *(void *)(v8 + 32) = v7;
}

void sub_10025C95C(id a1)
{
  id v1 = -[ADLocalMeCardStore _init](objc_alloc(&OBJC_CLASS___ADLocalMeCardStore), "_init");
  uint64_t v2 = (void *)qword_1005782A0;
  qword_1005782A0 = (uint64_t)v1;
}

void sub_10025D068(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  int v4 = *(void **)(v2 + 72);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10025D120;
  v5[3] = &unk_1004F7C30;
  void v5[4] = v2;
  id v6 = v3;
  id v8 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 48);
  [v4 getSiriRequestForClientBoundAceCommand:v6 completionHandler:v5];
}

void sub_10025D120(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
    [v4 _prepareForAppLaunchForRequest:v5];

    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___SAAppsLaunchApp);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    {
      id v8 = *(void **)(a1 + 32);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 _informCommandCenter:v9 willPerformLaunchApp:*(void *)(a1 + 40)]);
    }

    else
    {
      int v10 = 0LL;
    }

    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
    [v3 _setRefId:v16];

    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) info]);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 turnId]);
    [v3 _setTurnId:v18];

    id v19 = *(void **)(a1 + 40);
    uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 88LL);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_10025D3AC;
    v23[3] = &unk_1004F7C08;
    id v21 = v19;
    uint64_t v22 = *(void *)(a1 + 32);
    id v24 = v21;
    uint64_t v25 = v22;
    id v26 = *(id *)(a1 + 56);
    id v27 = v10;
    id v15 = v10;
    [v20 handleSiriRequest:v3 deliveryHandler:0 completionHandler:v23];

    goto LABEL_10;
  }

  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 72LL);
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v29 = "-[ADSiriTaskService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
    __int16 v30 = 2112;
    uint64_t v31 = v13;
    __int16 v32 = 2112;
    uint64_t v33 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s No transformed requests returned from request transformer %@ for command %@",  buf,  0x20u);
  }

  uint64_t v14 = *(void *)(a1 + 56);
  if (v14)
  {
    id v15 = (id)objc_claimAutoreleasedReturnValue( +[NSError ad_siriTaskHandlerAceTranslationFailureError]( &OBJC_CLASS___NSError,  "ad_siriTaskHandlerAceTranslationFailureError"));
    (*(void (**)(uint64_t, void, id))(v14 + 16))(v14, 0LL, v15);
LABEL_10:
  }
}

void sub_10025D3AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)AFSiriLogContextConnection;
  if (os_log_type_enabled(AFSiriLogContextConnection, OS_LOG_TYPE_INFO))
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = v7;
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 aceId]);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 136316162;
    id v24 = "-[ADSiriTaskService handleCommand:forDomain:executionContext:reply:]_block_invoke";
    __int16 v25 = 2112;
    id v26 = v5;
    __int16 v27 = 2112;
    id v28 = v6;
    __int16 v29 = 2112;
    __int16 v30 = v10;
    __int16 v31 = 2112;
    uint64_t v32 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Got response %@ (error=%@) for command: %@, handled by service: %@",  buf,  0x34u);
  }

  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v14 = *(dispatch_queue_s **)(v12 + 56);
  v17[0] = _NSConcreteStackBlock;
  id v17[2] = sub_10025D574;
  v17[3] = &unk_1004F7BE0;
  v17[1] = 3221225472LL;
  void v17[4] = v12;
  id v18 = v5;
  id v19 = v6;
  id v20 = v13;
  id v21 = *(id *)(a1 + 48);
  id v22 = *(id *)(a1 + 56);
  id v15 = v6;
  id v16 = v5;
  dispatch_async(v14, v17);
}

void sub_10025D574(void *a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 80) aceCommandForSiriResponse:a1[5] responseError:a1[6] forRequestCommand:a1[7]]);
  if (v5) {
    uint64_t v2 = 0LL;
  }
  else {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSError ad_siriTaskHandlerAceTranslationFailureError]( &OBJC_CLASS___NSError,  "ad_siriTaskHandlerAceTranslationFailureError"));
  }
  uint64_t v3 = a1[8];
  if (v3) {
    (*(void (**)(uint64_t, id, void *))(v3 + 16))(v3, v5, v2);
  }
  uint64_t v4 = a1[9];
  if (v4) {
    (*(void (**)(uint64_t, id, void *))(v4 + 16))(v4, v5, v2);
  }
}

void sub_10025D614(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 encodedClassName]),
        unsigned int v7 = [v6 isEqualToString:SACommandFailedClassIdentifier],
        v6,
        v7))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained failedToLaunchAppWithBundleIdentifier:*(void *)(a1 + 32)];
  }
}

id sub_10025DA10(uint64_t a1, void *a2)
{
  return _[a2 setUsesOnDemandConnection:*(void *)(a1 + 32)];
}

void sub_10025E7F8(uint64_t a1)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10025E9DC;
  v15[3] = &unk_1004F7CB8;
  id v16 = *(id *)(a1 + 64);
  uint64_t v2 = objc_retainBlock(v15);
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3[7])
  {
    if ([v3 _shouldWakeSystemForHandlingCommand:*(void *)(a1 + 40) executionContext:*(void *)(a1 + 48)]) {
      [*(id *)(a1 + 32) _wakeSystemForHandlingCommand];
    }
    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = *(void **)(*(void *)(a1 + 32) + 56LL);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10025E9F8;
    v8[3] = &unk_1004F7CE0;
    id v9 = v4;
    id v10 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 48);
    id v6 = *(id *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = v6;
    uint64_t v14 = v2;
    [v5 adRequestDidReceiveCommand:v9 reply:v8];
  }

  else
  {
    unsigned int v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v18 = "-[ADUIService handleCommand:forDomain:executionContext:reply:]_block_invoke_2";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s No request delegate to handle command",  buf,  0xCu);
    }

    ((void (*)(void *, void, void))v2[2])(v2, *(void *)(a1 + 40), 0LL);
  }
}

uint64_t sub_10025E9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a3, 0LL);
  }
  return result;
}

void sub_10025E9F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = v6;
  if (v6 && [v6 code] == (id)26)
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int16 v27 = "-[ADUIService handleCommand:forDomain:executionContext:reply:]_block_invoke_3";
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Request delegate unable to handle command. Allowing fallback handler a chance",  buf,  0xCu);
    }

    id v9 = objc_alloc_init(&OBJC_CLASS___ADFauxUIService);
    -[ADFauxUIService handleCommand:forDomain:executionContext:reply:]( v9,  "handleCommand:forDomain:executionContext:reply:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64));
  }

  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 64LL));
    if (WeakRetained)
    {
      id v11 = WeakRetained;
      unsigned int v12 = objc_msgSend(*(id *)(a1 + 32), "_adui_presentsUIResponseInTranscript");

      if (v12)
      {
        uint64_t v14 = *(void **)(a1 + 48);
        uint64_t v13 = *(void *)(a1 + 56);
        id v15 = *(dispatch_queue_s **)(v13 + 80);
        id v20 = _NSConcreteStackBlock;
        id v22 = sub_10025EBF4;
        uint64_t v23 = &unk_1004FD968;
        uint64_t v21 = 3221225472LL;
        uint64_t v24 = v13;
        id v25 = v14;
        dispatch_async(v15, &v20);
        id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 64LL));
        uint64_t v17 = *(void *)(a1 + 32);
        uint64_t v18 = *(void *)(a1 + 56);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "info", v20, v21, v22, v23, v24));
        [v16 UIService:v18 didPresentUIResponseForCommand:v17 withExecutionInfo:v19];
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }
}

void sub_10025EBF4(uint64_t a1)
{
}

id sub_10025EC08()
{
  return (id)qword_1005782C0;
}

id sub_10025EC14()
{
  if (qword_1005782B8 != -1) {
    dispatch_once(&qword_1005782B8, &stru_1004F7DC8);
  }
  return (id)qword_1005782C0;
}

id sub_10025EC54()
{
  return (id)qword_1005782B0;
}

id sub_10025EC60()
{
  if (qword_1005782D0 != -1) {
    dispatch_once(&qword_1005782D0, &stru_1004F7DE8);
  }
  return (id)qword_1005782B0;
}

void sub_10025ECA0(id a1)
{
  id v1 = sub_10025ED04();
  uint64_t v2 = (id *)dlsym(v1, "PBSWakeReasonSiriCommand");
  if (!v2) {
    __assert_rtn("initPBSWakeReasonSiriCommand_block_invoke", "ADUIService.m", 59, "constant");
  }
  objc_storeStrong((id *)&qword_1005782B0, *v2);
  off_100575210 = sub_10025EC54;
}

void *sub_10025ED04()
{
  uint64_t result = (void *)qword_1005782C8;
  if (!qword_1005782C8)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices", 2);
    qword_1005782C8 = (uint64_t)result;
    if (!result) {
      __assert_rtn("PineBoardServicesLibrary", "ADUIService.m", 58, "frameworkLibrary");
    }
  }

  return result;
}

void sub_10025ED60(id a1)
{
  qword_1005782C0 = (uint64_t)objc_getClass("PBSSystemService");
  if (!qword_1005782C0) {
    __assert_rtn("initPBSSystemService_block_invoke", "ADUIService.m", 60, "classPBSSystemService");
  }
  off_100575208 = sub_10025EC08;
}

void sub_10025EDBC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v12 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 72LL);
    int v15 = 136315906;
    id v16 = "-[ADUIService cancelOperationsForRequestID:forAssistantID:fromRemote:reason:]_block_invoke";
    __int16 v17 = 2112;
    uint64_t v18 = v13;
    __int16 v19 = 1024;
    LODWORD(v20[0]) = v12;
    WORD2(v20[0]) = 2112;
    *(void *)((char *)v20 + 6) = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s RequestId: %@, fromRemote: %d, Last handled context: %@",  (uint8_t *)&v15,  0x26u);
  }

  if ([*(id *)(*(void *)(a1 + 40) + 72) isFromRemote])
  {
    if (*(_BYTE *)(a1 + 48))
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 72) info]);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 requestID]);
      unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

      if (v5)
      {
        id v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 72LL);
          int v15 = 136315650;
          id v16 = "-[ADUIService cancelOperationsForRequestID:forAssistantID:fromRemote:reason:]_block_invoke";
          __int16 v17 = 2112;
          uint64_t v18 = v7;
          __int16 v19 = 2112;
          v20[0] = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Dismissing UI for remote request %@: %@",  (uint8_t *)&v15,  0x20u);
        }

        id v9 = objc_alloc_init(&OBJC_CLASS___SAUICloseAssistant);
        id v10 = *(void **)(a1 + 40);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 groupIdentifier]);
        [v10 handleCommand:v9 forDomain:v11 executionContext:*(void *)(*(void *)(a1 + 40) + 72) reply:&stru_1004F7C90];
      }
    }
  }

void sub_10025EFB0(id a1, SAAceCommand *a2, NSError *a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = a3;
  if (v5)
  {
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315650;
      uint64_t v8 = "-[ADUIService cancelOperationsForRequestID:forAssistantID:fromRemote:reason:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v4;
      __int16 v11 = 2112;
      int v12 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s response: %@, error: %@",  (uint8_t *)&v7,  0x20u);
    }
  }
}

void sub_10025F874(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 136315906;
    __int16 v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Handled command %@ with response %@ and error %@.",  (uint8_t *)&v10,  0x2Au);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_10025F978(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setItemURL:v3];
  [v4 setNumberOfLoops:0];
  LODWORD(v5) = 1.0;
  [v4 setVolume:v5];
  [v4 setFadeInDuration:0.0];
  [v4 setFadeOutDuration:0.0];
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
  [v4 setUUID:v6];
}

void sub_10025FA0C(uint64_t a1)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_10025FB20;
  void v12[3] = &unk_1004FBBF8;
  uint64_t v2 = *(void **)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  id v3 = +[AFSetAudioSessionActiveContext newWithBuilder:]( &OBJC_CLASS___AFSetAudioSessionActiveContext,  "newWithBuilder:",  v12);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10025FB70;
  v6[3] = &unk_1004F7D80;
  id v4 = *(id *)(a1 + 48);
  char v11 = *(_BYTE *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 64);
  id v7 = v4;
  uint64_t v10 = v5;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 56);
  [v2 forceAudioSessionActiveWithContext:v3 completion:v6];
}

uint64_t sub_10025FB14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10025FB20(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setOptions:2];
  [v3 setReason:3];
  [v3 setSpeechRequestOptions:*(void *)(a1 + 32)];
}

void sub_10025FB70(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 error]);
  if (v7)
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v37 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke_3";
      __int16 v38 = 2112;
      uint64_t v39 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Error activating audio session: %@",  buf,  0x16u);
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
    unsigned int v10 = [v9 isEndpoint];

    if (v10) {
      uint64_t v11 = 4LL;
    }
    else {
      uint64_t v11 = 0LL;
    }
    __int16 v12 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v13 = *(void **)(a1 + 32);
      __int16 v14 = v12;
      uint64_t Names = AFAudioPlaybackOptionsGetNames(v11);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(Names);
      *(_DWORD *)__int128 buf = 136315650;
      id v37 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
      __int16 v38 = 2112;
      uint64_t v39 = v13;
      __int16 v40 = 2112;
      id v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%s Enqueued playback %@ with %@", buf, 0x20u);
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[ADSpeechManager sharedManager](&OBJC_CLASS___ADSpeechManager, "sharedManager"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 audioPlaybackService]);
    __int16 v19 = *(void **)(a1 + 32);
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_10025FE98;
    v34[3] = &unk_1004FD940;
    id v35 = v19;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    void v28[2] = sub_10025FF50;
    v28[3] = &unk_1004F7D30;
    id v20 = *(id *)(a1 + 32);
    char v33 = *(_BYTE *)(a1 + 64);
    uint64_t v21 = *(void *)(a1 + 56);
    id v29 = v20;
    uint64_t v32 = v21;
    id v30 = *(id *)(a1 + 40);
    id v31 = *(id *)(a1 + 48);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    id v22[2] = sub_1002600F4;
    v22[3] = &unk_1004F7D58;
    id v23 = *(id *)(a1 + 32);
    id v24 = *(id *)(a1 + 48);
    id v25 = v6;
    char v27 = *(_BYTE *)(a1 + 64);
    id v26 = *(id *)(a1 + 40);
    [v18 startRequest:v35 options:v11 preparationHandler:v34 executionHandler:v28 finalizationHandler:v22];
  }
}

void sub_10025FE98(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315394;
    uint64_t v5 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v6 = 2112;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Starting playback %@", (uint8_t *)&v4, 0x16u);
  }

void sub_10025FF50(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v14 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v15 = 2112;
    uint64_t v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Started playback %@", buf, 0x16u);
  }

  if (*(_BYTE *)(a1 + 64))
  {
    int v4 = *(void **)(a1 + 48);
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
    [v4 invokeWithValue:v5 andValue:0];
  }

  else
  {
    if (*(void *)(a1 + 56) == 3LL) {
      float v6 = 2.0;
    }
    else {
      float v6 = 1.0;
    }
    dispatch_time_t v7 = dispatch_time(0LL, (uint64_t)(float)(v6 * 1000000000.0));
    id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002602D8;
    block[3] = &unk_1004FAF80;
    float v12 = v6;
    unsigned int v10 = (SACommandSucceeded *)*(id *)(a1 + 32);
    id v11 = *(id *)(a1 + 48);
    dispatch_after(v7, v8, block);

    uint64_t v5 = v10;
  }
}

void sub_1002600F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 136315650;
      id v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Failed playback %@: %@",  (uint8_t *)&v10,  0x20u);
    }

    uint64_t v5 = *(void **)(a1 + 40);
    float v6 = objc_alloc_init(&OBJC_CLASS___SACommandFailed);
    [v5 invokeWithValue:v6 andValue:v3];
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v10 = 136315394;
    id v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Finished playback %@", (uint8_t *)&v10, 0x16u);
  }

  [*(id *)(a1 + 48) relinquishWithContext:0 options:0];
  if (*(_BYTE *)(a1 + 64))
  {
    id v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315138;
      id v11 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Forcing Audio session inactive",  (uint8_t *)&v10,  0xCu);
    }

    [*(id *)(a1 + 56) forceAudioSessionInactiveWithOptions:0 completion:0];
  }
}

void sub_1002602D8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 136315650;
    id v8 = "-[SAUIPlayNotificationSound(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v9 = 2048;
    double v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Calling completion %f second after playback started: %@",  (uint8_t *)&v7,  0x20u);
  }

  id v3 = *(void **)(a1 + 40);
  int v4 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
  [v3 invokeWithValue:v4 andValue:0];
}

void sub_100260594(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v10 = 136315906;
    __int16 v11 = "-[SAUIPerformNotificationAction(ADUIService) _adui_handleWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Handled command %@ with response %@ and error %@.",  (uint8_t *)&v10,  0x2Au);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_100260698(uint64_t a1, int a2)
{
  uint64_t v2 = (Class *)&OBJC_CLASS___SACommandSucceeded_ptr;
  id v3 = *(void **)(a1 + 32);
  if (!a2) {
    uint64_t v2 = (Class *)&OBJC_CLASS___SACommandFailed_ptr;
  }
  id v4 = objc_alloc_init(*v2);
  [v3 invokeWithValue:v4 andValue:0];
}

void sub_100260950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315138;
    uint64_t v9 = "ADRegisterSyncNowActivity_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s sync now xpc activity handled",  (uint8_t *)&v8,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if (v6) {
    v6[2](v6);
  }
}

void sub_100260A3C(const char *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (a2)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100260AF4;
    v10[3] = &unk_1004F7E38;
    id v11 = v8;
    id v12 = v7;
    xpc_activity_register(a1, a2, v10);
  }

  else
  {
    xpc_activity_unregister(a1);
  }
}

void sub_100260AF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state)
  {
    if (state == 2)
    {
      if (!*(void *)(a1 + 32)) {
        goto LABEL_12;
      }
      if (!xpc_activity_set_state(v3, 4LL))
      {
        id v5 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int16 v14 = "_RegisterXPCActivity_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to continue",  buf,  0xCu);
        }
      }

      uint64_t v6 = *(void *)(a1 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_100260CEC;
      void v11[3] = &unk_1004FD940;
      id v12 = v3;
      (*(void (**)(uint64_t, _xpc_activity_s *, void *))(v6 + 16))(v6, v12, v11);
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, _xpc_activity_s *))(v7 + 16))(v7, v3);
    }
  }

  if (xpc_activity_should_defer(v3))
  {
    BOOL v8 = xpc_activity_set_state(v3, 3LL);
    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v10 = @"No";
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v14 = "_RegisterXPCActivity_block_invoke";
      __int16 v15 = 2112;
      __int16 v16 = v3;
      if (v8) {
        int v10 = @"Yes";
      }
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Deferring activity:%@ deferred:%@",  buf,  0x20u);
    }
  }

void sub_100260CEC(uint64_t a1)
{
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5LL))
  {
    id v1 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315138;
      id v3 = "_RegisterXPCActivity_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%s Failed setting activity state to done",  (uint8_t *)&v2,  0xCu);
    }
  }

void sub_100260DA4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 taskFromActivity:a2]);
  [v6 runWithCompletion:v5];
}

void sub_100260E00(uint64_t a1, void *a2)
{
  activity = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(activity);
  if (!v3) {
    xpc_activity_set_criteria(activity, *(xpc_object_t *)(a1 + 32));
  }
}

void sub_100260E4C(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  if (AFDeviceSupportsSiriMUX(v5))
  {
    xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _syncControllerService]);
    [v4 createDownloadTasksForAllUsersWithCompletion:v5];
  }
}

void sub_100260EB0(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, 2 * XPC_ACTIVITY_INTERVAL_1_HOUR);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_DELAY, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 300LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100260FAC(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[ADSiriAnalyticsServiceHost sharedSiriAnalyticsServiceHost]( &OBJC_CLASS___ADSiriAnalyticsServiceHost,  "sharedSiriAnalyticsServiceHost"));
  [v3 writeLogViewerIdentifierDefaults];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100261008(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_POST_INSTALL, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_1002610E0(id a1, OS_xpc_object *a2, id a3)
{
  id v6 = a3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(9LL, 0LL);
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  dispatch_async(v4, &stru_1004F83B8);

  id v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    id v5 = v6;
  }
}

void sub_100261144(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 URLsForDirectory:13 inDomains:1]);
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 URLByAppendingPathComponent:@"com.apple.pommes" isDirectory:1]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v8 = 0LL;
    [v5 removeItemAtURL:v4 error:&v8];
    id v6 = v8;

    if (v6)
    {
      uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315650;
        int v10 = "_clearSiriInformationCache";
        __int16 v11 = 2112;
        id v12 = v4;
        __int16 v13 = 2112;
        id v14 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Failure while deleting POMMES cache at %@ with error %@",  buf,  0x20u);
      }
    }
  }
}

void sub_1002612A0(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_POST_INSTALL, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_5_MIN);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261398(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a2;
  id v5 = (void (**)(void))a3;
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    uint64_t v9 = "_RegisterRemoraStatusCheckActivity_block_invoke_2";
    __int16 v10 = 2080;
    __int16 v11 = "com.apple.siri.xpc_activity.remora.status.check";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Running '%s' activity", (uint8_t *)&v8, 0x16u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
  [v7 _xpcActivityRemoraStatusCheck];

  if (v5) {
    v5[2](v5);
  }
}

void sub_1002614A0(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261550(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = a3;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v10 = "_RegisterMultiUserMetricsActivity_block_invoke_2";
    __int16 v11 = 2080;
    id v12 = "com.apple.siri.apc_activity.multi-user.metrics";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Running '%s' activity", buf, 0x16u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100261678;
  v7[3] = &unk_1004FCC00;
  id v8 = v3;
  id v6 = v3;
  [v5 triggerMultiUserMetricsWithCompletion:v7];
}

void sub_100261678(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315650;
      uint64_t v7 = "_RegisterMultiUserMetricsActivity_block_invoke";
      __int16 v8 = 2080;
      uint64_t v9 = "com.apple.siri.apc_activity.multi-user.metrics";
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s %s activity error: %@",  (uint8_t *)&v6,  0x20u);
    }
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_10026176C(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261834(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
  [v3 reelectContextCollectorWithBestScore];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100261890(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261978(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  sub_10024FF84(0LL, 0);
  sub_10024FF84(1LL, 0);
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_1002619C8(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261AD8(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  sub_10024F468(0LL);
  sub_10024F468(1LL);
  sub_10024F468(2LL);
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_100261B28(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 0);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261C20(id a1, OS_xpc_object *a2, id a3)
{
  id v8 = a3;
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  if ([v3 assistantIsEnabled])
  {
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    unsigned __int8 v5 = [v4 dictationIsEnabled];

    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v6 runBootTimeServiceMaintenanceWithCompletion:0];

LABEL_5:
  uint64_t v7 = v8;
  if (v8)
  {
    (*((void (**)(id))v8 + 2))(v8);
    uint64_t v7 = v8;
  }
}

void sub_100261CD0(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 0);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_DELAY, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 300LL);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261D90(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  +[ADExternalNotificationInstrumentationEmitter emitCoreAnalyticsAnnounceNotificationApplicationEnablementEvents]( &OBJC_CLASS___ADExternalNotificationInstrumentationEmitter,  "emitCoreAnalyticsAnnounceNotificationApplicationEnablementEvents");
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_100261DD4(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261E84(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  notify_post((const char *)[@"AFSiriUserNotificationRequestCapabilityForceUpdate" UTF8String]);
  xpc_object_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    xpc_object_t v3 = v4;
  }
}

void sub_100261ECC(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100261FB4(id a1, OS_xpc_object *a2, id a3)
{
  int v6 = (void (**)(void))a3;
  id v4 = a2;
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v5 startCloudKitSyncWeeklyForActivity:v4];

  v6[2]();
}

void sub_100262020(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_7_DAYS);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100262118(id a1, OS_xpc_object *a2, id a3)
{
  id v6 = a3;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(9LL, 0LL);
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  dispatch_async(v4, &stru_1004F8118);

  unsigned __int8 v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    unsigned __int8 v5 = v6;
  }
}

void sub_100262180(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_100262230(id a1, OS_xpc_object *a2, id a3)
{
  id v3 = a3;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v10 = "_RegisterMetricsActivity_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Running 'com.apple.siri.xpc_activity.metrics-sender' activity",  buf,  0xCu);
  }

  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100262360;
  v7[3] = &unk_1004FC838;
  id v8 = v3;
  id v6 = v3;
  [v5 sendMetricsToServerWithTimeout:1 requiresUnlimitedPower:0 requiresActiveSession:1 purgesOversizedStorage:1 ignoresMetricsSen derDisabledSetting:1 scheduledActivity:v7 completion:600.0];
}

uint64_t sub_100262360(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100262374(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_10026246C(id a1, OS_xpc_object *a2, id a3)
{
  id v8 = a3;
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  if ([v3 assistantIsEnabled])
  {
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    unsigned __int8 v5 = [v4 dictationIsEnabled];

    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v6 runServiceMaintenanceWithCompletion:0];

LABEL_5:
  uint64_t v7 = v8;
  if (v8)
  {
    (*((void (**)(id))v8 + 2))(v8);
    uint64_t v7 = v8;
  }
}

void sub_10026251C(id a1, OS_xpc_object *a2)
{
  activity = a2;
  xpc_object_t v2 = xpc_activity_copy_criteria(activity);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v3, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v3, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
    xpc_dictionary_set_BOOL(v3, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_activity_set_criteria(activity, v3);
  }
}

void sub_1002625FC(id a1, OS_xpc_object *a2, id a3)
{
  xpc_object_t v3 = (void (**)(void))a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  if (([v4 assistantIsEnabled] & 1) == 0)
  {
    unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
    id v6 = [v5 dictationIsEnabled];
    if (!(_DWORD)v6)
    {
      if (AFSupportsRemoraHost(v6, v7))
      {
        __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
        unsigned __int8 v11 = [v10 remoraHostEnabled];

        if ((v11 & 1) != 0) {
          goto LABEL_5;
        }
      }

      else
      {
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
      [v12 keepAlive];

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
      [v9 destroyActiveAccount];
      goto LABEL_8;
    }
  }

LABEL_5:
  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v13 = 136315138;
    id v14 = "_RegisterDestroyActivity_block_invoke_2";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Assistant is now enabled, clearing destroy job",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
  [v9 unscheduleDestroyJob];
LABEL_8:

  if (v3) {
    v3[2](v3);
  }
}

void sub_10026279C(id a1, OS_xpc_object *a2, id a3)
{
  id v4 = a3;
  sub_100262808(a2, XPC_ACTIVITY_INTERVAL_15_MIN, 2 * XPC_ACTIVITY_INTERVAL_1_HOUR);
  sub_100262938(v4);
}

void sub_100262808(void *a1, int64_t a2, int64_t a3)
{
  unsigned __int8 v5 = a1;
  xpc_object_t v6 = xpc_activity_copy_criteria(v5);
  int64_t int64 = xpc_dictionary_get_int64(v6, XPC_ACTIVITY_INTERVAL);
  if (int64 < a3)
  {
    int64_t v8 = int64;
    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v10 = 136315650;
      unsigned __int8 v11 = "_BackoffFromShortInterval";
      __int16 v12 = 2048;
      int64_t v13 = a2;
      __int16 v14 = 2048;
      int64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Backing off to new interval %lld from %lld",  (uint8_t *)&v10,  0x20u);
    }

    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, a2);
    xpc_activity_set_criteria(v5, v6);
  }
}

void sub_100262938(void *a1)
{
  id v1 = a1;
  xpc_object_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315138;
    unsigned __int8 v11 = "_RefreshValidationWithCompletion";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v10, 0xCu);
  }

  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  id v5 = [v4 dictationIsEnabled];
  if ((v5 & 1) != 0)
  {

LABEL_6:
    goto LABEL_7;
  }

  if ((AFSupportsRemoraHost(v5, v6) & 1) == 0)
  {

    goto LABEL_8;
  }

  int64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  unsigned __int8 v9 = [v8 remoraHostEnabled];

  if ((v9 & 1) != 0)
  {
LABEL_7:
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
    [v7 keepAlive];

    xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    [v3 refreshAssistantValidation];
LABEL_8:
  }

  if (v1) {
    v1[2](v1);
  }
}

void sub_100262AB8(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = xpc_activity_copy_criteria(a2);
  if (!v2)
  {
    xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    [v3 rescheduleValidationRefresh];

    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
    [v4 scheduleUnlockedWork:&stru_1004F7FB8];

    xpc_object_t v2 = 0LL;
  }
}

void sub_100262B2C(id a1)
{
}

void sub_100262B34(id a1, OS_xpc_object *a2, id a3)
{
  id v6 = a3;
  sub_100262808(a2, XPC_ACTIVITY_INTERVAL_1_DAY, XPC_ACTIVITY_INTERVAL_1_DAY);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v4 updateSharedDataFromCompanion];

  id v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    id v5 = v6;
  }
}

void sub_100262BAC(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  id v4 = v3;
  if (!v3 || xpc_dictionary_get_int64(v3, XPC_ACTIVITY_INTERVAL))
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      unsigned __int8 v9 = "_RegisterCompanionFetchActivity_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s setting new companion fetch interval on initial checkin",  (uint8_t *)&v8,  0xCu);
    }

    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(v2, v6);

    if (!v4)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
      [v7 scheduleUnlockedWork:&stru_1004F7F58];
    }
  }
}

void sub_100262D54(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v1 updateSharedDataFromCompanion];
}

void sub_100262D88(id a1, OS_xpc_object *a2, id a3)
{
  id v6 = a3;
  sub_100262808(a2, XPC_ACTIVITY_INTERVAL_1_DAY, XPC_ACTIVITY_INTERVAL_1_DAY);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v4 updateSharedDataFromPeerUseCache:1 completion:0];

  id v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    id v5 = v6;
  }
}

void sub_100262E08(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  id v4 = v3;
  if (!v3 || xpc_dictionary_get_int64(v3, XPC_ACTIVITY_INTERVAL))
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      unsigned __int8 v9 = "_RegisterPeerFetchActivity_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s setting new peer fetch interval on initial checkin",  (uint8_t *)&v8,  0xCu);
    }

    xpc_object_t v6 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v6, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    xpc_activity_set_criteria(v2, v6);

    if (!v4)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
      [v7 scheduleUnlockedWork:&stru_1004F7EF8];
    }
  }
}

void sub_100262FB0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  [v1 updateSharedDataFromPeerUseCache:1 completion:0];
}

void sub_100262FEC(id a1, OS_xpc_object *a2, id a3)
{
  id v5 = a3;
  xpc_object_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADDaemon sharedDaemon](&OBJC_CLASS___ADDaemon, "sharedDaemon"));
  [v3 syncForReason:@"daily_sync" withCoalescing:0];

  id v4 = v5;
  if (v5)
  {
    (*((void (**)(id))v5 + 2))(v5);
    id v4 = v5;
  }
}

void sub_100263054(id a1, OS_xpc_object *a2)
{
  xpc_object_t v2 = a2;
  xpc_object_t v3 = xpc_activity_copy_criteria(v2);
  xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_dictionary_set_int64(v4, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_string(v4, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v4, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  if (!v3 || !xpc_equal(v3, v4))
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v6 = 136315138;
      uint64_t v7 = "_RegisterDailySyncActivity_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s setting new daily criteria due to difference from checkin criteria",  (uint8_t *)&v6,  0xCu);
    }

    xpc_activity_set_criteria(v2, v4);
  }
}

void sub_10026345C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100263A60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100264194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002643C0(uint64_t a1, void *a2)
{
  xpc_object_t v3 = *(void **)(a1 + 32);
  xpc_object_t v4 = (void *)objc_claimAutoreleasedReturnValue([a2 eventBody]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 json]);
  [v3 appendData:v5];

  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10026442C(id a1, BPSCompletion *a2)
{
  xpc_object_t v3 = (void *)AFSiriLogContextAnalytics;
  if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_DEBUG))
  {
    xpc_object_t v4 = v3;
    id v5 = a2;
    id v6 = -[BPSCompletion state](v5, "state");
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[BPSCompletion error](v5, "error"));

    int v8 = 136315650;
    unsigned __int8 v9 = "-[ADCommandCenter(ServiceMaintenance) _getEventsDataForStream:numEvents:]_block_invoke";
    __int16 v10 = 2048;
    id v11 = v6;
    __int16 v12 = 2112;
    int64_t v13 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Publisher completed with state: %ld; error: %@",
      (uint8_t *)&v8,
      0x20u);
  }

uint64_t sub_10026452C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10026453C(uint64_t a1)
{
}

void sub_100264544(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    xpc_object_t v4 = (objc_class *)objc_opt_class(v3);
    id v5 = NSStringFromClass(v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      __int16 v14 = "-[ADCommandCenter(ServiceMaintenance) _dumpAssistantState]_block_invoke";
      __int16 v15 = 2112;
      __int16 v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Calling %@ provider for a state chunk",  buf,  0x16u);
    }

    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002646F4;
    v9[3] = &unk_1004F84D8;
    uint64_t v12 = *(void *)(a1 + 40);
    id v8 = v6;
    id v10 = v8;
    id v11 = *(id *)(a1 + 32);
    [v3 dumpAssistantStateChunk:v9];
  }
}

void sub_1002646F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_object_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = v4;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    int v7 = 136315394;
    id v8 = "-[ADCommandCenter(ServiceMaintenance) _dumpAssistantState]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s State chunk retrieved: %@",  (uint8_t *)&v7,  0x16u);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setValue:v3 forKey:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1002647FC(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v1 _serviceManager]);
  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 servicesThatRequireBootMaintenance]);
  [v1 _runMaintenanceForServices:v2 completion:0];
}

void sub_100264854(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v1 _serviceManager]);
  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 allServices]);
  [v1 _runMaintenanceForServices:v2 completion:0];
}

void sub_1002648AC(uint64_t a1, uint64_t a2)
{
}

void sub_1002648B8(uint64_t a1)
{
}

void sub_1002648C0(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 64) > a2)
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
    xpc_object_t v4 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100264BF8;
    v27[3] = &unk_1004F8460;
    uint64_t v29 = *(void *)(a1 + 56);
    int v30 = a2;
    id v28 = *(id *)(a1 + 32);
    id v5 = -[AFSafetyBlock initWithBlock:](v4, "initWithBlock:", v27);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndex:a2]);
    int v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v8 = v7;
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)__int128 buf = 136315906;
      uint64_t v32 = "-[ADCommandCenter(ServiceMaintenance) _runMaintenanceForServices:completion:]_block_invoke";
      __int16 v33 = 2112;
      id v34 = v9;
      __int16 v35 = 1024;
      int v36 = a2;
      __int16 v37 = 1024;
      int v38 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s service %@ at index %d of count %d",  buf,  0x22u);
    }

    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    id v21[2] = sub_100264C5C;
    v21[3] = &unk_1004F8488;
    id v11 = v6;
    int v26 = a2;
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 48);
    id v22 = v11;
    uint64_t v23 = v12;
    int64_t v13 = v5;
    id v24 = v13;
    [v11 runMaintenanceWorkWithCompletion:v21];
    objc_initWeak((id *)buf, v13);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
    dispatch_time_t v15 = dispatch_time(0LL, 30000000000LL);
    __int16 v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _queue]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    id v18[2] = sub_100264DB8;
    v18[3] = &unk_1004FBF48;
    objc_copyWeak(&v20, (id *)buf);
    id v19 = v14;
    id v17 = v14;
    dispatch_after(v15, v16, v18);

    objc_destroyWeak(&v20);
    objc_destroyWeak((id *)buf);
  }

void sub_100264B84(_Unwind_Exception *a1)
{
}

uint64_t sub_100264BA0(uint64_t a1)
{
  xpc_object_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v2 logEventWithType:1205 context:0];

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100264BF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));

  if (WeakRetained)
  {
    id v3 = (void (**)(id, void))objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
    v3[2](v3, (*(_DWORD *)(a1 + 48) + 1));
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100264C5C(uint64_t a1)
{
  xpc_object_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    xpc_object_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    int v6 = *(_DWORD *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 136315906;
    uint64_t v12 = "-[ADCommandCenter(ServiceMaintenance) _runMaintenanceForServices:completion:]_block_invoke";
    __int16 v13 = 2112;
    __int16 v14 = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s service %@ at index %d of count %d complete",  buf,  0x22u);
  }

  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100264EA4;
  block[3] = &unk_1004FD940;
  id v10 = *(id *)(a1 + 48);
  dispatch_async(v8, block);
}

void sub_100264DB8(uint64_t a1)
{
  xpc_object_t v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    xpc_object_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315394;
      id v8 = "-[ADCommandCenter(ServiceMaintenance) _runMaintenanceForServices:completion:]_block_invoke_2";
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Service %@ still has safety block, timing out",  (uint8_t *)&v7,  0x16u);
    }
  }

  id v6 = objc_loadWeakRetained(v2);
  [v6 invoke];
}

id sub_100264EA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_100264FC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100265FC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1002665B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:5];
  [v3 setPayloadEndAudioSessionRequest:*(void *)(a1 + 32)];
}

void sub_100266610(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }

    else if ([v14 type] == (id)6)
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v14 payloadEndAudioSessionResponse]);
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___ADAudioSessionCoordinationMessageEndAudioSessionResponse);
      char isKindOfClass = objc_opt_isKindOfClass(v7, v8);
      uint64_t v10 = *(void *)(a1 + 32);
      if ((isKindOfClass & 1) != 0)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1015LL,  @"Unexpected response in reply message."));
        (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
      }

      else
      {
        (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v7, 0LL);
      }
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 32);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1014LL,  @"Unexpected reply message type."));
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v13);
    }
  }
}

void sub_10026674C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:3];
  [v3 setPayloadKeepAudioSessionAliveRequest:*(void *)(a1 + 32)];
}

void sub_1002667A4(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }

    else if ([v14 type] == (id)4)
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v14 payloadKeepAudioSessionAliveResponse]);
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___ADAudioSessionCoordinationMessageKeepAudioSessionAliveResponse);
      char isKindOfClass = objc_opt_isKindOfClass(v7, v8);
      uint64_t v10 = *(void *)(a1 + 32);
      if ((isKindOfClass & 1) != 0)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1015LL,  @"Unexpected response in reply message."));
        (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
      }

      else
      {
        (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v7, 0LL);
      }
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 32);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1014LL,  @"Unexpected reply message type."));
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v13);
    }
  }
}

void sub_1002668E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:1];
  [v3 setPayloadBeginAudioSessionRequest:*(void *)(a1 + 32)];
}

void sub_100266938(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }

    else if ([v14 type] == (id)2)
    {
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v14 payloadBeginAudioSessionResponse]);
      uint64_t v8 = objc_opt_class(&OBJC_CLASS___ADAudioSessionCoordinationMessageBeginAudioSessionResponse);
      char isKindOfClass = objc_opt_isKindOfClass(v7, v8);
      uint64_t v10 = *(void *)(a1 + 32);
      if ((isKindOfClass & 1) != 0)
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1015LL,  @"Unexpected response in reply message."));
        (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0LL, v11);
      }

      else
      {
        (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v7, 0LL);
      }
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 32);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1014LL,  @"Unexpected reply message type."));
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v13);
    }
  }
}

uint64_t sub_100266A74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100266A84(uint64_t a1)
{
}

void sub_100266A8C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(*(void *)(a1[6] + 8) + 40) cancel];
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0LL;

  if (v5 && (__int16 v9 = (os_log_s *)AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)))
  {
    uint64_t v12 = a1[4];
    int v14 = 136315650;
    __int16 v15 = "-[ADAudioSessionCoordinator(Messaging) _sendMessage:toDeviceWithID:replyHandler:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%s %@ ---> %@", (uint8_t *)&v14, 0x20u);
    if (!v6) {
      goto LABEL_6;
    }
  }

  else if (!v6)
  {
    goto LABEL_6;
  }

  uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = a1[4];
    int v14 = 136315650;
    __int16 v15 = "-[ADAudioSessionCoordinator(Messaging) _sendMessage:toDeviceWithID:replyHandler:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s %@ ---> %@", (uint8_t *)&v14, 0x20u);
  }

void sub_100266C30(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1007LL));
  [v1 invokeWithValue:0 andValue:v2];
}

void sub_100266C80(uint64_t a1, void *a2, uint64_t a3)
{
  id v13 = a2;
  if (!a3)
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
    if ((objc_opt_isKindOfClass(v13, v5) & 1) != 0)
    {
      id v6 = -[ADAudioSessionCoordinationMessage initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___ADAudioSessionCoordinationMessage),  "initWithDictionaryRepresentation:",  v13);
      uint64_t v7 = *(void **)(a1 + 32);
      if (!v6)
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  30LL,  @"Unable to create reply message from response dictionary."));
        [v7 invokeWithValue:0 andValue:v12];

        goto LABEL_9;
      }

      uint64_t v8 = v7;
      __int16 v9 = v6;
      uint64_t v10 = 0LL;
    }

    else
    {
      uint64_t v11 = *(void **)(a1 + 32);
      id v6 = (ADAudioSessionCoordinationMessage *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  30LL,  @"Unexpected response dictionary."));
      uint64_t v8 = v11;
      __int16 v9 = 0LL;
      uint64_t v10 = v6;
    }

    [v8 invokeWithValue:v9 andValue:v10];
LABEL_9:

    goto LABEL_10;
  }

  [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
LABEL_10:
}

void sub_100266D90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon, os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v12 = 136315650;
    id v13 = "-[ADAudioSessionCoordinator(Messaging) _handleMessage:fromDeviceWithID:replyHandler:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v10;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s %@ <--- %@", (uint8_t *)&v12, 0x20u);
    if (!v6) {
      goto LABEL_6;
    }
  }

  else if (!v6)
  {
    goto LABEL_6;
  }

  uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 136315650;
    id v13 = "-[ADAudioSessionCoordinator(Messaging) _handleMessage:fromDeviceWithID:replyHandler:]_block_invoke";
    __int16 v14 = 2112;
    uint64_t v15 = v11;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%s %@ <--- %@", (uint8_t *)&v12, 0x20u);
  }

void sub_100266F10(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
  }

  else
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___ADAudioSessionCoordinationMessageBeginAudioSessionResponse);
    char isKindOfClass = objc_opt_isKindOfClass(v10, v5);
    uint64_t v7 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_1002672F0;
      void v11[3] = &unk_1004F8608;
      id v12 = v10;
      id v8 = +[ADAudioSessionCoordinationMessage newWithBuilder:]( &OBJC_CLASS___ADAudioSessionCoordinationMessage,  "newWithBuilder:",  v11);
      [v7 invokeWithValue:v8 andValue:0];
    }

    else
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1015LL,  @"Unexpected response for reply message."));
      [v7 invokeWithValue:0 andValue:v9];
    }
  }
}

void sub_100267020(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
  }

  else
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___ADAudioSessionCoordinationMessageKeepAudioSessionAliveResponse);
    char isKindOfClass = objc_opt_isKindOfClass(v10, v5);
    uint64_t v7 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_100267298;
      void v11[3] = &unk_1004F8608;
      id v12 = v10;
      id v8 = +[ADAudioSessionCoordinationMessage newWithBuilder:]( &OBJC_CLASS___ADAudioSessionCoordinationMessage,  "newWithBuilder:",  v11);
      [v7 invokeWithValue:v8 andValue:0];
    }

    else
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1015LL,  @"Unexpected response for reply message."));
      [v7 invokeWithValue:0 andValue:v9];
    }
  }
}

void sub_100267130(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  if (a3)
  {
    [*(id *)(a1 + 32) invokeWithValue:0 andValue:a3];
  }

  else
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___ADAudioSessionCoordinationMessageEndAudioSessionResponse);
    char isKindOfClass = objc_opt_isKindOfClass(v10, v5);
    uint64_t v7 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      void v11[2] = sub_100267240;
      void v11[3] = &unk_1004F8608;
      id v12 = v10;
      id v8 = +[ADAudioSessionCoordinationMessage newWithBuilder:]( &OBJC_CLASS___ADAudioSessionCoordinationMessage,  "newWithBuilder:",  v11);
      [v7 invokeWithValue:v8 andValue:0];
    }

    else
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  1015LL,  @"Unexpected response for reply message."));
      [v7 invokeWithValue:0 andValue:v9];
    }
  }
}

void sub_100267240(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:6];
  [v3 setPayloadEndAudioSessionResponse:*(void *)(a1 + 32)];
}

void sub_100267298(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:4];
  [v3 setPayloadKeepAudioSessionAliveResponse:*(void *)(a1 + 32)];
}

void sub_1002672F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHostTime:mach_absolute_time()];
  [v3 setType:2];
  [v3 setPayloadBeginAudioSessionResponse:*(void *)(a1 + 32)];
}

void sub_100267348(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v7, v10) & 1) != 0)
  {
    uint64_t v11 = -[ADAudioSessionCoordinationMessage initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___ADAudioSessionCoordinationMessage),  "initWithDictionaryRepresentation:",  v7);
    if (v11)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      void v14[2] = sub_1002674C0;
      v14[3] = &unk_1004F8590;
      id v15 = v9;
      [WeakRetained _handleMessage:v11 fromDeviceWithID:v8 replyHandler:v14];
    }

    else if (v9)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  30LL,  @"Unable to create message from request dictionary."));
      (*((void (**)(id, void, void *))v9 + 2))(v9, 0LL, v13);
    }

    goto LABEL_8;
  }

  if (v9)
  {
    uint64_t v11 = (ADAudioSessionCoordinationMessage *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  30LL,  @"Unexpected request dictionary."));
    (*((void (**)(id, void, ADAudioSessionCoordinationMessage *))v9 + 2))(v9, 0LL, v11);
LABEL_8:
  }
}

void sub_1002674C0(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    if (v5)
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }

    else
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v10 buildDictionaryRepresentation]);
      uint64_t v8 = *(void *)(a1 + 32);
      if (v7)
      {
        (*(void (**)(uint64_t, void *, void))(v8 + 16))(v8, v7, 0LL);
      }

      else
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  30LL,  @"Unable to create response dictionary from reply message."));
        (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
      }
    }
  }
}

id sub_10026A748(uint64_t a1)
{
  return [*(id *)(a1 + 32) _awdRequestEnd:0];
}

void sub_10026A754(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_object_t v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = v4;
    *(_DWORD *)__int128 buf = 136315394;
    __int16 v37 = "-[ADCommandCenter(Metrics) _metrics_recordSNNetworkSnapshotForEvent:completion:]_block_invoke";
    __int16 v38 = 1024;
    unsigned int v39 = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s SN Connection metrics count %d", buf, 0x12u);
  }

  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id obj = v3;
  id v6 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v32;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v32 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_10026AA6C;
        v30[3] = &unk_1004FD8F8;
        uint64_t v12 = *(void *)(a1 + 40);
        void v30[4] = v10;
        void v30[5] = v12;
        [v11 logEventWithType:902 contextProvider:v30];

        unint64_t v13 = *(void *)(a1 + 40);
        __int16 v14 = @"(unknown)";
        if (v13 <= 3) {
          __int16 v14 = *(&off_1004FAD18 + v13);
        }
        id v15 = v14;
        id v16 = +[SiriCoreNetworkingAnalytics snapshotStateFromStringEvent:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "snapshotStateFromStringEvent:",  v15);

        id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 connectionSnapshot]);
        [v17 setSnapshotTriggerReason:v16];
        if (v17)
        {
          __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( +[SNNetworkAnalytics sharedSNNetworkAnalytics]( &OBJC_CLASS___SNNetworkAnalytics,  "sharedSNNetworkAnalytics"));
          [v18 logSessionConnectionSnapshotCaptured:v17];
        }

        id v19 = (void *)objc_claimAutoreleasedReturnValue([v10 debugConnectionSnapshot]);
        if (v19)
        {
          id v20 = (void *)objc_claimAutoreleasedReturnValue( +[SNNetworkAnalytics sharedSNNetworkAnalytics]( &OBJC_CLASS___SNNetworkAnalytics,  "sharedSNNetworkAnalytics"));
          [v20 logDebugSessionConnectionSnapshotCaptured:v19];
        }

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v10 remoteMetrics]);
        if (v21)
        {
          id v22 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472LL;
          v27[2] = sub_10026AB7C;
          v27[3] = &unk_1004FD8F8;
          id v23 = v21;
          uint64_t v24 = *(void *)(a1 + 40);
          id v28 = v23;
          uint64_t v29 = v24;
          [v22 logEventWithType:903 contextProvider:v27];
        }

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [obj countByEnumeratingWithState:&v31 objects:v35 count:16];
    }

    while (v7);
  }

  uint64_t v25 = *(void *)(a1 + 32);
  if (v25) {
    (*(void (**)(void))(v25 + 16))();
  }
}

id sub_10026AA6C(uint64_t a1)
{
  id v2 = sub_1000BAAC4(*(void **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v14[0] = v3;
  uint64_t v12 = @"snapshotEvent";
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 > 3) {
    id v5 = @"(unknown)";
  }
  else {
    id v5 = *(&off_1004FAD18 + v4);
  }
  id v6 = v5;
  unint64_t v13 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  v14[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  uint64_t v9 = AFAnalyticsContextsMerge();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

id sub_10026AB7C(uint64_t a1)
{
  id v2 = sub_1000BAAC4(*(void **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v14[0] = v3;
  uint64_t v12 = @"snapshotEvent";
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 > 3) {
    id v5 = @"(unknown)";
  }
  else {
    id v5 = *(&off_1004FAD18 + v4);
  }
  id v6 = v5;
  unint64_t v13 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  v14[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  uint64_t v9 = AFAnalyticsContextsMerge();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

void sub_10026AC8C(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    unint64_t v4 = v3;
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v48 = "-[ADCommandCenter(Metrics) _metrics_recordNetworkSnapshotForEvent:completion:]_block_invoke";
    __int16 v49 = 1024;
    unsigned int v50 = [v2 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s metrics count %d", buf, 0x12u);
  }

  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id obj = v2;
  id v34 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v43;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v43 != v33) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)v5);
        id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_10026B11C;
        v41[3] = &unk_1004FD8F8;
        uint64_t v8 = *(void *)(a1 + 40);
        void v41[4] = v6;
        v41[5] = v8;
        [v7 logEventWithType:902 contextProvider:v41];

        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
        id v10 = [v9 getSequenceNumber];

        unint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = @"(unknown)";
        if (v11 <= 3) {
          uint64_t v12 = *(&off_1004FAD18 + v11);
        }
        unint64_t v13 = v12;
        id v14 = +[SiriCoreNetworkingAnalytics snapshotStateFromStringEvent:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "snapshotStateFromStringEvent:",  v13);

        uint64_t v15 = objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sessionConnectionNetworkFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sessionConnectionNetworkFromSiriCoreConnectionMetrics:",  v6));
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v6 flowNetworkInterfaceType]);
        uint64_t v17 = objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics networkInterfacesFromDictionary:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "networkInterfacesFromDictionary:",  v16));

        id v18 = objc_alloc_init(&OBJC_CLASS___NETSchemaNETSessionConnectionSnapshotCaptured);
        [v18 setSequenceNumber:v10];
        [v18 setSnapshotTriggerReason:v14];
        __int16 v37 = (void *)v15;
        [v18 setNetwork:v15];
        int v36 = (void *)v17;
        [v18 setNetworkInterfaces:v17];
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v6 providerStyle]);
        objc_msgSend( v18,  "setProvider:",  +[SiriCoreNetworkingAnalytics providerFromString:]( SiriCoreNetworkingAnalytics,  "providerFromString:",  v19));

        id v20 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
        [v20 logSessionConnectionSnapshotCaptured:v18];

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics debugSessionConnectionNetworkFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "debugSessionConnectionNetworkFromSiriCoreConnectionMetrics:",  v6));
        id v22 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics debugNetworkInterfacesFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "debugNetworkInterfacesFromSiriCoreConnectionMetrics:",  v6));
        id v23 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics pingInfoFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "pingInfoFromSiriCoreConnectionMetrics:",  v6));
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sessionConnectionQualityFromSiriCoreConnectionMetrics:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sessionConnectionQualityFromSiriCoreConnectionMetrics:",  v6));
        id v25 = objc_alloc_init(&OBJC_CLASS___NETSchemaNETDebugSessionConnectionSnapshotCaptured);
        [v25 setSequenceNumber:v10];
        [v25 setNetwork:v21];
        [v25 setNetworkInterfaces:v22];
        [v25 setPingInfo:v23];
        [v25 setQuality:v24];
        int v26 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
        [v26 logDebugSessionConnectionSnapshotCaptured:v25];

        char v27 = (void *)objc_claimAutoreleasedReturnValue([v6 remoteMetrics]);
        if (v27)
        {
          id v28 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472LL;
          v38[2] = sub_10026B22C;
          v38[3] = &unk_1004FD8F8;
          id v29 = v27;
          uint64_t v30 = *(void *)(a1 + 40);
          id v39 = v29;
          uint64_t v40 = v30;
          [v28 logEventWithType:903 contextProvider:v38];
        }

        id v5 = (char *)v5 + 1;
      }

      while (v34 != v5);
      id v34 = [obj countByEnumeratingWithState:&v42 objects:v46 count:16];
    }

    while (v34);
  }

  uint64_t v31 = *(void *)(a1 + 32);
  if (v31) {
    (*(void (**)(void))(v31 + 16))();
  }
}

id sub_10026B11C(uint64_t a1)
{
  id v2 = sub_1000B99EC(*(void **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v14[0] = v3;
  uint64_t v12 = @"snapshotEvent";
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 > 3) {
    id v5 = @"(unknown)";
  }
  else {
    id v5 = *(&off_1004FAD18 + v4);
  }
  id v6 = v5;
  unint64_t v13 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  v14[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  uint64_t v9 = AFAnalyticsContextsMerge();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

id sub_10026B22C(uint64_t a1)
{
  id v2 = sub_1000B99EC(*(void **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v14[0] = v3;
  uint64_t v12 = @"snapshotEvent";
  unint64_t v4 = *(void *)(a1 + 40);
  if (v4 > 3) {
    id v5 = @"(unknown)";
  }
  else {
    id v5 = *(&off_1004FAD18 + v4);
  }
  id v6 = v5;
  unint64_t v13 = v6;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  v14[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 2LL));
  uint64_t v9 = AFAnalyticsContextsMerge();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

uint64_t sub_10026B33C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10026B350(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10026B35C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_metrics_publishDailyDeviceStatus:completion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_10026B36C(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10026BDF8;
  v6[3] = &unk_1004F8988;
  id v5 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  char v9 = a2;
  [v5 countQueuedEventRecordsForDeliveryStream:v4 withCompletion:v6];
}

void sub_10026B408(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v25 = *(void **)(a1 + 96);
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke_3";
      __int16 v39 = 2048;
      id v40 = v25;
      __int16 v41 = 2112;
      id v42 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch analytics events in delivery stream %tu due to error %@",  buf,  0x20u);
    }

    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = 2LL;
LABEL_5:
    [v8 markFailedWithType:v9];
    uint64_t v10 = *(void *)(a1 + 72);
LABEL_6:
    (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0LL);
    goto LABEL_7;
  }

  if ([v5 count])
  {
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    [v11 systemUptime];
    double v13 = v12;
    double v14 = *(double *)(a1 + 104);

    uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (v13 >= v14)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:strea"
              "mSpeechId:untilLimit:uploadRecords:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%s Attempted to send analytics event stream when time limit is reached.",  buf,  0xCu);
      }

      id v8 = *(void **)(a1 + 32);
      uint64_t v9 = 1LL;
      goto LABEL_5;
    }

    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v16 = v15;
      id v17 = [v5 count];
      id v18 = *(void **)(a1 + 40);
      uint64_t v19 = *(void *)(a1 + 96);
      *(_DWORD *)__int128 buf = 136315906;
      __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke";
      __int16 v39 = 2048;
      id v40 = v17;
      __int16 v41 = 2112;
      id v42 = v18;
      __int16 v43 = 2048;
      uint64_t v44 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%s Fetched %tu analytics events from event stream with UID %@ in delivery stream %tu.",  buf,  0x2Au);
    }

    id v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10026B7C4;
    block[3] = &unk_1004F8A50;
    uint64_t v35 = *(void *)(a1 + 104);
    id v28 = *(id *)(a1 + 32);
    id v33 = *(id *)(a1 + 72);
    id v34 = *(id *)(a1 + 88);
    id v29 = v5;
    id v30 = *(id *)(a1 + 56);
    id v31 = *(id *)(a1 + 64);
    int8x16_t v26 = *(int8x16_t *)(a1 + 40);
    id v21 = (id)v26.i64[0];
    int8x16_t v32 = vextq_s8(v26, v26, 8uLL);
    uint64_t v36 = *(void *)(a1 + 96);
    dispatch_async(v20, block);
  }

  else
  {
    id v22 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      id v23 = *(void **)(a1 + 40);
      uint64_t v24 = *(void **)(a1 + 96);
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v38 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke";
      __int16 v39 = 2112;
      id v40 = v23;
      __int16 v41 = 2048;
      id v42 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%s No analytics events was fetched from event stream with UID %@ in delivery stream %tu.",  buf,  0x20u);
    }

    uint64_t v10 = *(void *)(a1 + 80);
    if (v10) {
      goto LABEL_6;
    }
  }

void sub_10026B7C4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v2 systemUptime];
  double v4 = v3;
  double v5 = *(double *)(a1 + 96);

  if (v4 >= v5)
  {
    double v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v24 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamS"
            "peechId:untilLimit:uploadRecords:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Attempted to send analytics event stream when time limit is reached.",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) markFailedWithType:1];
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10026B984;
    v15[3] = &unk_1004F8A28;
    id v16 = *(id *)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    id v21 = *(id *)(a1 + 80);
    id v9 = *(id *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    unint64_t v11 = *(void **)(a1 + 72);
    id v18 = v9;
    uint64_t v19 = v10;
    id v12 = v11;
    uint64_t v13 = *(void *)(a1 + 104);
    id v20 = v12;
    uint64_t v22 = v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v6 + 16))(v6, v8, v7, v15);
  }

void sub_10026B984(uint64_t a1, char a2)
{
  double v4 = *(void **)(a1 + 32);
  if ((a2 & 1) != 0)
  {
    [v4 markSucceeded];
    double v5 = -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v6 = *(id *)(a1 + 40);
    id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v21;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v20 + 1) + 8 * (void)v10) recordId]);
          -[NSMutableSet addObject:](v5, "addObject:", v11);

          uint64_t v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }

      while (v8);
    }

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10026BBBC;
    v15[3] = &unk_1004F8A00;
    id v12 = *(void **)(a1 + 48);
    void v15[4] = *(void *)(a1 + 56);
    id v18 = *(id *)(a1 + 72);
    id v16 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 80);
    id v17 = v13;
    uint64_t v19 = v14;
    [v12 deleteEventRecordsWithRecordIDs:v5 completion:v15];
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(a1 + 72) + 16LL))(*(void *)(a1 + 72), 0LL);
  }

void sub_10026BBBC(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10026BCA0;
  v10[3] = &unk_1004F89D8;
  char v16 = a2;
  id v11 = v5;
  id v14 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 64);
  id v13 = v7;
  uint64_t v15 = v8;
  id v9 = v5;
  dispatch_async(v6, v10);
}

uint64_t sub_10026BCA0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) && !*(void *)(a1 + 32)) {
    return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 1LL);
  }
  id v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    double v4 = *(void **)(a1 + 40);
    id v5 = v2;
    id v6 = [v4 count];
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 136316162;
    id v11 = "-[ADCommandCenter(Metrics) _metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpe"
          "echId:untilLimit:uploadRecords:completion:]_block_invoke_3";
    __int16 v12 = 2048;
    id v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed to delete %tu sent analytics events from event stream with UID %@ in delivery stream %tu due to error %@.",  (uint8_t *)&v10,  0x34u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_10026BDF8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 48));
  }
  return result;
}

uint64_t sub_10026BE54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10026BE68(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v21 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Fetching analytics event stream UIDs...",  buf,  0xCu);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10026BFE4;
  v8[3] = &unk_1004F8938;
  void v8[4] = *(void *)(a1 + 32);
  id v11 = *(id *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 64);
  id v5 = *(id *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 120);
  char v18 = *(_BYTE *)(a1 + 128);
  __int128 v6 = *(_OWORD *)(a1 + 88);
  __int128 v14 = *(_OWORD *)(a1 + 72);
  __int128 v15 = v6;
  __int128 v16 = *(_OWORD *)(a1 + 104);
  id v9 = v5;
  id v10 = v3;
  __int16 v19 = *(_WORD *)(a1 + 129);
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  [v7 fetchEventStreamUIDsWithCompletion:v8];
}

void sub_10026BFE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v125[0] = _NSConcreteStackBlock;
  v125[1] = 3221225472LL;
  v125[2] = sub_10026CBA8;
  v125[3] = &unk_1004F8848;
  id v7 =  -[NSMutableSet initWithCapacity:]( [NSMutableSet alloc],  "initWithCapacity:",  [v5 count]);
  __int16 v126 = v7;
  [v5 enumerateObjectsUsingBlock:v125];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v7, "allObjects"));
  id v9 = v8;
  if (v6)
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Failed to fetch analytics event stream UIDs due to error %@",  buf,  0x16u);
    }

    id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10026CBEC;
    block[3] = &unk_1004FC838;
    id v12 = block;
    void block[4] = *(id *)(a1 + 56);
    dispatch_async(v11, block);

LABEL_5:
    uint64_t v13 = (void *)v12[4];
    goto LABEL_6;
  }

  id v14 = [v8 count];
  __int128 v15 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v16 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s No analytics event stream UIDs was fetched.",  buf,  0xCu);
    }

    uint64_t v24 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    v123[0] = _NSConcreteStackBlock;
    v123[1] = 3221225472LL;
    v123[2] = sub_10026CBF8;
    v123[3] = &unk_1004FC838;
    id v12 = v123;
    v123[4] = *(id *)(a1 + 56);
    dispatch_async(v24, v123);

    goto LABEL_5;
  }

  if (v16)
  {
    uint64_t v17 = v15;
    id v18 = [v9 count];
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke_2";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v18;
    *(_WORD *)&_BYTE buf[22] = 2112;
    __int16 v128 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Fetched %tu analytics event stream UIDs %@",  buf,  0x20u);
  }

  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v19 systemUptime];
  BOOL v21 = v20 < *(double *)(a1 + 72);

  if (!v21)
  {
    id v25 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s Attempted to send analytics event stream when time limit is reached.",  buf,  0xCu);
    }

    int8x16_t v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    v122[0] = _NSConcreteStackBlock;
    v122[1] = 3221225472LL;
    v122[2] = sub_10026CC04;
    v122[3] = &unk_1004FC838;
    id v12 = v122;
    v122[4] = *(id *)(a1 + 56);
    dispatch_async(v26, v122);

    goto LABEL_5;
  }

  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v22 currentEventStreamUID]);

  id v76 = [v9 mutableCopy];
  [v76 removeObject:v13];
  if (*(void *)(a1 + 40) && objc_msgSend(v9, "containsObject:"))
  {
    __int128 v23 = *(void **)(a1 + 40);
  }

  else
  {
    id v27 = [v76 count];
    __int128 v23 = v13;
    if (v27)
    {
      id v28 = (id)objc_claimAutoreleasedReturnValue([v76 firstObject]);
      goto LABEL_23;
    }
  }

  id v28 = v23;
LABEL_23:
  id v29 = v28;
  unsigned int v30 = [v28 isEqualToString:*(void *)(a1 + 40)];
  unsigned int v31 = [v29 isEqualToString:v13];
  unsigned int v77 = v30;
  if (v30)
  {
    int8x16_t v32 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke_2";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "%s Using prioritized event stream UID %@",  buf,  0x16u);
    }
  }

  if (v31)
  {
    id v34 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUn"
                           "limitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:sche"
                           "duledActivity:completion:]_block_invoke";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s Using current event stream UID %@",  buf,  0x16u);
    }
  }

  uint64_t v116 = 0LL;
  __int128 v117 = &v116;
  uint64_t v118 = 0x3032000000LL;
  __int128 v119 = sub_10026CC10;
  id v120 = sub_10026CC20;
  id v121 = 0LL;
  v113[0] = _NSConcreteStackBlock;
  v113[1] = 3221225472LL;
  v113[2] = sub_10026CC28;
  v113[3] = &unk_1004F8870;
  id v75 = v29;
  id v114 = v75;
  id v115 = &v116;
  [v5 enumerateObjectsUsingBlock:v113];
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
  __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([v35 speechIdentifier]);

  *(void *)__int128 buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x5810000000LL;
  __int16 v128 = &unk_100423CCB;
  if (v77)
  {
    __int128 v36 = *(_OWORD *)(a1 + 96);
    __int128 v129 = *(_OWORD *)(a1 + 80);
    __int128 v130 = v36;
    __int128 v131 = *(_OWORD *)(a1 + 112);
    uint64_t v37 = *(void *)(a1 + 128);
  }

  else
  {
    __int128 v129 = xmmword_1003C9FB0;
    __int128 v130 = unk_1003C9FC0;
    __int128 v131 = xmmword_1003C9FD0;
    uint64_t v37 = 100LL;
  }

  uint64_t v132 = v37;
  __int16 v38 = dispatch_group_create();
  __int16 v39 = v38;
  uint64_t v40 = *(void *)&buf[8];
  __int128 v78 = v38;
  if (*(_BYTE *)(*(void *)&buf[8] + 32LL))
  {
    dispatch_group_enter(v38);
    __int16 v41 = -[ADAnalyticsDeliveryBatch initWithDeliveryStream:]( objc_alloc(&OBJC_CLASS___ADAnalyticsDeliveryBatch),  "initWithDeliveryStream:",  0LL);
    -[ADAnalyticsDeliveryBatch markStartTime](v41, "markStartTime");
    id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v42 hostname]);
    -[ADAnalyticsDeliveryBatch setServerEnvironment:](v41, "setServerEnvironment:", v43);

    -[ADAnalyticsDeliveryBatch setScheduledActivity:](v41, "setScheduledActivity:", *(unsigned __int8 *)(a1 + 136));
    uint64_t v68 = *(void *)(a1 + 48);
    id v71 = *(void **)(a1 + 32);
    uint64_t v44 = v117[5];
    double v45 = *(double *)(a1 + 72);
    v107[0] = _NSConcreteStackBlock;
    v107[1] = 3221225472LL;
    v107[2] = sub_10026CCAC;
    v107[3] = &unk_1004F8898;
    id v108 = v74;
    id v109 = v75;
    id v46 = v41;
    uint64_t v47 = *(void *)(a1 + 32);
    __int128 v110 = v46;
    uint64_t v111 = v47;
    char v112 = *(_BYTE *)(a1 + 137);
    v104[0] = _NSConcreteStackBlock;
    v104[1] = 3221225472LL;
    v104[2] = sub_10026D680;
    v104[3] = &unk_1004F88C0;
    __int128 v106 = buf;
    __int128 v105 = v78;
    objc_msgSend( v71,  "_metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpeechId:untilLimit:uploadRecords:completion:",  v68,  v46,  0,  v109,  v44,  v107,  v45,  v104);

    uint64_t v40 = *(void *)&buf[8];
    __int16 v39 = v78;
  }

  if (*(_BYTE *)(v40 + 48))
  {
    dispatch_group_enter(v39);
    uint64_t v48 = -[ADAnalyticsDeliveryBatch initWithDeliveryStream:]( objc_alloc(&OBJC_CLASS___ADAnalyticsDeliveryBatch),  "initWithDeliveryStream:",  1LL);
    -[ADAnalyticsDeliveryBatch markStartTime](v48, "markStartTime");
    __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
    unsigned int v50 = (void *)objc_claimAutoreleasedReturnValue([v49 hostname]);
    -[ADAnalyticsDeliveryBatch setServerEnvironment:](v48, "setServerEnvironment:", v50);

    -[ADAnalyticsDeliveryBatch setScheduledActivity:](v48, "setScheduledActivity:", *(unsigned __int8 *)(a1 + 136));
    uint64_t v69 = *(void *)(a1 + 48);
    __int128 v72 = *(void **)(a1 + 32);
    uint64_t v51 = v117[5];
    double v52 = *(double *)(a1 + 72);
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472LL;
    v99[2] = sub_10026D7A0;
    v99[3] = &unk_1004F88E8;
    id v100 = v75;
    id v53 = v48;
    id v101 = v53;
    id v54 = v13;
    uint64_t v55 = *(void *)(a1 + 32);
    id v102 = v54;
    uint64_t v103 = v55;
    v96[0] = _NSConcreteStackBlock;
    v96[1] = 3221225472LL;
    v96[2] = sub_10026DA98;
    v96[3] = &unk_1004F88C0;
    __int16 v98 = buf;
    __int128 v97 = v78;
    objc_msgSend( v72,  "_metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpeechId:untilLimit:uploadRecords:completion:",  v69,  v53,  1,  v100,  v51,  v99,  v52,  v96);

    uint64_t v40 = *(void *)&buf[8];
    __int16 v39 = v78;
  }

  if (*(_BYTE *)(v40 + 64))
  {
    dispatch_group_enter(v39);
    id v56 = -[ADAnalyticsDeliveryBatch initWithDeliveryStream:]( objc_alloc(&OBJC_CLASS___ADAnalyticsDeliveryBatch),  "initWithDeliveryStream:",  2LL);
    -[ADAnalyticsDeliveryBatch markStartTime](v56, "markStartTime");
    id v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _account]);
    id v58 = (void *)objc_claimAutoreleasedReturnValue([v57 hostname]);
    -[ADAnalyticsDeliveryBatch setServerEnvironment:](v56, "setServerEnvironment:", v58);

    -[ADAnalyticsDeliveryBatch setScheduledActivity:](v56, "setScheduledActivity:", *(unsigned __int8 *)(a1 + 136));
    uint64_t v70 = *(void *)(a1 + 48);
    __int128 v73 = *(void **)(a1 + 32);
    uint64_t v59 = v117[5];
    double v60 = *(double *)(a1 + 72);
    v91[0] = _NSConcreteStackBlock;
    v91[1] = 3221225472LL;
    v91[2] = sub_10026DBC0;
    v91[3] = &unk_1004F88E8;
    id v92 = v75;
    id v61 = v56;
    id v93 = v61;
    id v62 = v13;
    uint64_t v63 = *(void *)(a1 + 32);
    id v94 = v62;
    uint64_t v95 = v63;
    v88[0] = _NSConcreteStackBlock;
    v88[1] = 3221225472LL;
    v88[2] = sub_10026DECC;
    v88[3] = &unk_1004F88C0;
    __int16 v90 = buf;
    id v89 = v78;
    objc_msgSend( v73,  "_metrics_processEventRecordsFromStore:batch:deliveryStream:eventStreamUID:streamSpeechId:untilLimit:uploadRecords:completion:",  v70,  v61,  2,  v92,  v59,  v91,  v60,  v88);

    __int16 v39 = v78;
  }

  id v64 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  v79[0] = _NSConcreteStackBlock;
  v79[1] = 3221225472LL;
  void v79[2] = sub_10026DFF4;
  v79[3] = &unk_1004F8910;
  __int128 v83 = buf;
  id v65 = *(id *)(a1 + 56);
  uint64_t v66 = *(void *)(a1 + 32);
  uint64_t v84 = *(void *)(a1 + 72);
  char v85 = *(_BYTE *)(a1 + 138);
  char v86 = *(_BYTE *)(a1 + 137);
  v79[4] = v66;
  id v80 = v75;
  id v81 = v65;
  char v87 = *(_BYTE *)(a1 + 136);
  id v82 = *(id *)(a1 + 64);
  id v67 = v75;
  dispatch_group_notify(v39, v64, v79);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v116, 8);

LABEL_6:
}

void sub_10026CB64(_Unwind_Exception *a1)
{
}

void sub_10026CBA8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 streamUID]);
  [v2 addObject:v3];
}

uint64_t sub_10026CBEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10026CBF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10026CC04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10026CC10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10026CC20(uint64_t a1)
{
}

void sub_10026CC28(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v11 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v11 streamUID]);
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7)
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v11 speechId]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    *a4 = 1;
  }
}

void sub_10026CCAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v96 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requ"
          "iresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke_2";
    __int16 v97 = 2048;
    id v98 = [v7 count];
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Converting %tu analytics events to Events metrics...",  buf,  0x16u);
  }

  id v12 = v8;
  uint64_t v13 = v12;
  if (!v12 || (id v14 = v12, [v12 isEqualToString:@"unknown"]))
  {
    __int128 v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      BOOL v16 = *(SAMetrics **)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v96 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:re"
            "quiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v97 = 2112;
      id v98 = v13;
      __int16 v99 = 2112;
      id v100 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Recorded speechId was %@, using current %@",  buf,  0x20u);
    }

    id v14 = *(id *)(a1 + 32);
  }

  id v76 = v13;
  uint64_t v17 = *(void **)(a1 + 40);
  id v75 = v14;
  id v18 = v17;
  id v19 = v7;
  __int128 v74 = objc_autoreleasePoolPush();
  id v77 = v18;
  id v20 = v19;
  id v21 = [v20 count];
  if (v21)
  {
    id v22 = v21;
    id v72 = v9;
    uint64_t v73 = a1;
    __int128 v23 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v21);
    uint64_t v24 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v22);
    id v71 = v22;
    uint64_t v88 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v22);
    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    id obj = v20;
    id v25 = [obj countByEnumeratingWithState:&v89 objects:buf count:16];
    if (!v25)
    {
      __int128 v83 = 0LL;
      goto LABEL_55;
    }

    id v26 = v25;
    __int128 v83 = 0LL;
    uint64_t v27 = *(void *)v90;
    id v81 = v20;
    id v82 = v23;
    uint64_t v84 = *(void *)v90;
    char v85 = v24;
    while (1)
    {
      id v28 = 0LL;
      id v86 = v26;
      do
      {
        if (*(void *)v90 != v27) {
          objc_enumerationMutation(obj);
        }
        id v29 = *(void **)(*((void *)&v89 + 1) + 8LL * (void)v28);
        unsigned int v30 = objc_autoreleasePoolPush();
        unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue([v29 event]);
        id v32 = [v31 type];
        if (AFAnalyticsEventTypeIsValid())
        {
          Legacyuint64_t Name = AFAnalyticsEventTypeGetLegacyName(v32);
          id v34 = (void *)objc_claimAutoreleasedReturnValue(LegacyName);
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v88, "objectForKey:", v34));
          __int128 v36 = (char *)[v35 unsignedIntegerValue];

          if (v36 == (char *)1)
          {
            __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v23, "objectForKey:", v34));
            __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v24, "objectForKey:", v34));
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@.%u",  v34,  0LL));
            -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v38, v40);
            -[NSMutableDictionary removeObjectForKey:](v23, "removeObjectForKey:", v34);

            if (v39)
            {
              -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v39, v40);
              -[NSMutableDictionary removeObjectForKey:](v24, "removeObjectForKey:", v34);
            }

            id v20 = v81;
          }

          else
          {
            if (!v36)
            {
              id v37 = v34;
              goto LABEL_23;
            }

            uint64_t v40 = 0LL;
          }

          id v37 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@.%tu",  v34,  v36));

LABEL_23:
          __int16 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v31 timestamp]));
          -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v41, v37);

          id v42 = v31;
          if (v42)
          {
            __int16 v43 = v42;
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v42 contextData]);
            if (!v44) {
              goto LABEL_32;
            }
            id v45 = [v43 contextDataType];
            if (v45 == (id)2)
            {
              uint64_t v51 = -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  v44,  4LL);
              goto LABEL_39;
            }

            if (v45 != (id)1)
            {
LABEL_32:
              uint64_t v51 = 0LL;
              goto LABEL_39;
            }

            context = objc_autoreleasePoolPush();
            id v94 = 0LL;
            uint64_t v46 = objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v44,  0LL,  0LL,  &v94));
            id v47 = v94;
            __int128 v79 = (void *)v46;
            if (v47 || (uint64_t v48 = objc_opt_class(&OBJC_CLASS___NSDictionary), (objc_opt_isKindOfClass(v46, v48) & 1) == 0))
            {
              double v52 = (os_log_s *)AFSiriLogContextAnalytics;
              if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v101 = 136315394;
                id v102 = "_ADAnalyticsMetricsGetEventInformationValue";
                __int16 v103 = 2114;
                id v104 = v47;
                _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "%s %{public}@", v101, 0x16u);
              }

              uint64_t v51 = 0LL;
LABEL_37:
              id v20 = v81;
            }

            else
            {
              id v93 = 0LL;
              uint64_t v49 = objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v46,  0LL,  &v93));
              id v50 = v93;

              uint64_t v44 = (void *)v49;
              if (v49 && !v50)
              {
                uint64_t v51 = -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  v49,  4LL);
                goto LABEL_37;
              }

              __int128 v78 = (void *)v49;
              uint64_t v55 = (os_log_s *)AFSiriLogContextAnalytics;
              id v20 = v81;
              if (os_log_type_enabled(AFSiriLogContextAnalytics, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)id v101 = 136315394;
                id v102 = "_ADAnalyticsMetricsGetEventInformationValue";
                __int16 v103 = 2114;
                id v104 = v50;
                _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "%s %{public}@", v101, 0x16u);
              }

              uint64_t v51 = 0LL;
              uint64_t v44 = v78;
            }

            objc_autoreleasePoolPop(context);
LABEL_39:

            if (v51)
            {
              uint64_t v24 = v85;
              -[NSMutableDictionary setObject:forKey:](v85, "setObject:forKey:", v51, v37);
              id v53 = (char *)[v37 lengthOfBytesUsingEncoding:4];
              __int128 v83 = (char *)-[NSString lengthOfBytesUsingEncoding:](v51, "lengthOfBytesUsingEncoding:", 4LL)
                  + (void)v83
                  + (unint64_t)v53;

              __int128 v23 = v82;
LABEL_43:
              id v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v36 + 1));
              -[NSMutableDictionary setObject:forKey:](v88, "setObject:forKey:", v54, v34);

              uint64_t v27 = v84;
              id v26 = v86;
              goto LABEL_44;
            }

            __int128 v23 = v82;
          }

          uint64_t v24 = v85;
          goto LABEL_43;
        }

void sub_10026D680(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 0LL;
      double v4 = "%s Event record process complete for delivery stream %lu, moving on to next iteration";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v5, 0x16u);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 32LL) = 0;
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 0LL;
      double v4 = "%s Ceasing to process events from delivery stream %tu.";
      goto LABEL_6;
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10026D7A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = [v7 count];
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Converting %tu analytics events to SendInstrumentation...",  buf,  0x16u);
  }

  uint64_t v31 = 0LL;
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v15 = objc_autoreleasePoolPush();
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_1000B971C;
  uint64_t v33 = (SASendInstrumentation *)&unk_1004F0148;
  BOOL v16 = v14;
  id v34 = v16;
  uint64_t v35 = &v31;
  [v13 enumerateObjectsUsingBlock:buf];
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___SASendInstrumentation);
  -[SASendInstrumentation setInstrumentationBatch:](v17, "setInstrumentationBatch:", v16);

  objc_autoreleasePoolPop(v15);
  [*(id *)(a1 + 40) setPayloadSize:v31];
  id v18 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v19 = v18;
    id v20 = [v13 count];
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v20;
    *(_WORD *)&_BYTE buf[22] = 2112;
    uint64_t v33 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s Converted %tu analytics events to SendInstrumentation metrics %@",  buf,  0x20u);
  }

  uint64_t v21 = mach_absolute_time();
  id v22 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  AFMachAbsoluteTimeGetNanoseconds(v21));
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  -[SASendInstrumentation setEventTransmittedRelativeToBootTimeTimestampNs:]( v17,  "setEventTransmittedRelativeToBootTimeTimestampNs:",  v23);

  -[SASendInstrumentation setEventTransmittedTimestampRefId:]( v17,  "setEventTransmittedTimestampRefId:",  *(void *)(a1 + 48));
  uint64_t v24 = *(void **)(a1 + 56);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10026E320;
  v27[3] = &unk_1004FABE8;
  id v28 = *(id *)(a1 + 40);
  id v29 = v17;
  id v30 = v9;
  id v25 = v9;
  id v26 = v17;
  [v24 handleCommand:v26 completion:v27];
}

void sub_10026DA98(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 1LL;
      double v4 = "%s Event record process complete for delivery stream %lu, moving on to next iteration";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v5, 0x16u);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 48LL) = 0;
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 1LL;
      double v4 = "%s Ceasing to process events from delivery stream %tu.";
      goto LABEL_6;
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_10026DBC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v11 = v10;
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = [v7 count];
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s Converting %tu analytics events to SendInstrumentation(Generic)...",  buf,  0x16u);
  }

  uint64_t v31 = 0LL;
  id v12 = *(id *)(a1 + 32);
  id v13 = v7;
  id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v15 = objc_autoreleasePoolPush();
  *(void *)__int128 buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_1000B9694;
  uint64_t v33 = (SASendInstrumentation *)&unk_1004F0148;
  BOOL v16 = v14;
  id v34 = v16;
  uint64_t v35 = &v31;
  [v13 enumerateObjectsUsingBlock:buf];
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___SASendInstrumentation);
  -[SASendInstrumentation setPayloadVersion:]( v17,  "setPayloadVersion:",  SASendInstrumentationPayloadVersionGENERIC_WRAPPER_SUPPORTValue);
  -[SASendInstrumentation setInstrumentationBatch:](v17, "setInstrumentationBatch:", v16);

  objc_autoreleasePoolPop(v15);
  [*(id *)(a1 + 40) setPayloadSize:v31];
  id v18 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v19 = v18;
    id v20 = [v13 count];
    *(_DWORD *)__int128 buf = 136315650;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnli"
                         "mitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:schedule"
                         "dActivity:completion:]_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v20;
    *(_WORD *)&_BYTE buf[22] = 2112;
    uint64_t v33 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "%s Converted %tu analytics events to SendInstrumentation(Generic) %@",  buf,  0x20u);
  }

  uint64_t v21 = mach_absolute_time();
  id v22 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  AFMachAbsoluteTimeGetNanoseconds(v21));
  __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  -[SASendInstrumentation setEventTransmittedRelativeToBootTimeTimestampNs:]( v17,  "setEventTransmittedRelativeToBootTimeTimestampNs:",  v23);

  -[SASendInstrumentation setEventTransmittedTimestampRefId:]( v17,  "setEventTransmittedTimestampRefId:",  *(void *)(a1 + 48));
  uint64_t v24 = *(void **)(a1 + 56);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10026E158;
  v27[3] = &unk_1004FABE8;
  id v28 = *(id *)(a1 + 40);
  id v29 = v17;
  id v30 = v9;
  id v25 = v9;
  id v26 = v17;
  [v24 handleCommand:v26 completion:v27];
}

void sub_10026DECC(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 2LL;
      double v4 = "%s Event record process complete for delivery stream %lu, moving on to next iteration";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, v4, (uint8_t *)&v5, 0x16u);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 64LL) = 0;
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315394;
      id v6 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:req"
           "uiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v7 = 2048;
      uint64_t v8 = 2LL;
      double v4 = "%s Ceasing to process events from delivery stream %tu.";
      goto LABEL_6;
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

id sub_10026DFF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 8LL);
  if (!*(void *)(v2 + 80)
    || (!*(_BYTE *)(v2 + 32) ? (BOOL v3 = *(_BYTE *)(v2 + 48) == 0) : (BOOL v3 = 0),
        v3 ? (BOOL v4 = *(_BYTE *)(v2 + 64) == 0) : (BOOL v4 = 0),
        v4))
  {
    uint64_t v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      LODWORD(v18[0]) = 136315138;
      *(void *)((char *)v18 + 4) = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:"
                                     "requiresUnlimitedPower:requiresActiveSession:prioritizedEventStreamUID:deliveryStre"
                                     "amContinuations:scheduledActivity:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s Ceasing to process events from all delivery streams.",  (uint8_t *)v18,  0xCu);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v5 setLastMetricsUploadDate:v6];

    double v7 = *(double *)(a1 + 72);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 81);
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 82);
    __int128 v15 = *(_OWORD *)(v13 + 48);
    v18[0] = *(_OWORD *)(v13 + 32);
    v18[1] = v15;
    id v18[2] = *(_OWORD *)(v13 + 64);
    uint64_t v19 = *(void *)(v13 + 80);
    return objc_msgSend( v10,  "_metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:priori tizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:",  v8,  v9,  v11,  v18,  v14,  v12,  v7);
  }

void sub_10026E158(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) markFailedWithType:6];
    double v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v13 = 136315650;
      uint64_t v14 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:re"
            "quiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s SendInstrumentation(Generic) command %@ failed due to error: %@",  (uint8_t *)&v13,  0x20u);
    }
  }

  else
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) == 0) {
      [*(id *)(a1 + 32) markFailedWithType:6];
    }
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
    if ((objc_opt_isKindOfClass(v5, v10) & 1) == 0)
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = 136315650;
        uint64_t v14 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:"
              "requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
        __int16 v15 = 2112;
        uint64_t v16 = v12;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s SendInstrumentation(Generic) command %@ failed due to response: %@",  (uint8_t *)&v13,  0x20u);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10026E320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [*(id *)(a1 + 32) markFailedWithType:6];
    double v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v13 = 136315650;
      uint64_t v14 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:re"
            "quiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s SendInstrumentation command %@ failed due to error: %@",  (uint8_t *)&v13,  0x20u);
    }
  }

  else
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) == 0) {
      [*(id *)(a1 + 32) markFailedWithType:6];
    }
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___SACommandSucceeded);
    if ((objc_opt_isKindOfClass(v5, v10) & 1) == 0)
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = 136315650;
        uint64_t v14 = "-[ADCommandCenter(Metrics) _metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:"
              "requiresActiveSession:prioritizedEventStreamUID:deliveryStreamContinuations:scheduledActivity:completion:]_block_invoke";
        __int16 v15 = 2112;
        uint64_t v16 = v12;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s SendInstrumentation command %@ failed due to response: %@",  (uint8_t *)&v13,  0x20u);
      }
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_10026E4E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10026E4FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 offlineIdentifier]);
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315650;
      id v22 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]_block_invoke";
      __int16 v23 = 2112;
      uint64_t v24 = v5;
      __int16 v25 = 2112;
      id v26 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Fetched next offline metrics. (offlineIdentifier = %@, metrics = %@)",  buf,  0x20u);
    }

    double v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10026E754;
    block[3] = &unk_1004F87F8;
    uint64_t v19 = *(void *)(a1 + 56);
    void block[4] = *(void *)(a1 + 32);
    id v8 = v4;
    __int16 v20 = *(_WORD *)(a1 + 64);
    id v15 = v8;
    id v16 = v5;
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 48);
    id v9 = v5;
    dispatch_async(v7, block);
  }

  else
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v22 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s No next offline metrics was fetched.",  buf,  0xCu);
    }

    uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_10026E8F0;
    void v12[3] = &unk_1004FC838;
    id v13 = *(id *)(a1 + 48);
    dispatch_async(v11, v12);

    id v9 = v13;
  }
}

void sub_10026E754(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v2 systemUptime];
  double v4 = v3;
  double v5 = *(double *)(a1 + 72);

  if (v4 >= v5)
  {
    id v9 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v18 = "-[ADCommandCenter(Metrics) _metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requires"
            "ActiveSession:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%s Attempted to send offline metrics when time limit is reached.",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 80);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10026E8FC;
    v10[3] = &unk_1004F87D0;
    void v10[4] = v6;
    id v11 = *(id *)(a1 + 48);
    uint64_t v14 = *(void *)(a1 + 72);
    char v15 = *(_BYTE *)(a1 + 81);
    char v16 = *(_BYTE *)(a1 + 80);
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    [v6 _sendMetrics:v7 requiresActiveSession:v8 batch:0 completion:v10];
  }

uint64_t sub_10026E8F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10026E8FC(uint64_t a1, int a2)
{
  if (!a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
  double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _offlineMetricsManager]);
  [v3 deleteMetricsWithOfflineIdentifier:*(void *)(a1 + 40)];

  return objc_msgSend( *(id *)(a1 + 32),  "_metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:completion:",  *(unsigned __int8 *)(a1 + 72),  *(unsigned __int8 *)(a1 + 73),  *(void *)(a1 + 48),  *(double *)(a1 + 64));
}

void sub_10026E960(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
    [v2 accessStoreUsingBlock:&stru_1004F8738];
  }

  double v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -86400.0));
  double v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10026EF78;
  v9[3] = &unk_1004FAD88;
  id v5 = v3;
  id v10 = v5;
  [v4 accessStoreUsingBlock:v9];

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsService sharedService](&OBJC_CLASS___ADAnalyticsService, "sharedService"));
  [v6 resumeEventsStaging];

  *(_BYTE *)(*(void *)(a1 + 32) + 72kdebug_trace(722470076LL, 0LL, 0LL, 0LL, 0LL) = 0;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v12 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession"
          ":purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Done sending metrics to server.", buf, 0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

void sub_10026EAEC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v19 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession"
          ":purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    __int16 v20 = 1024;
    int v21 = a2;
    __int16 v22 = 2112;
    id v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Deleted events related to sensitive conditions with success: %d, error: %@",  buf,  0x1Cu);
    id v6 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v19 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession"
          ":purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Begin sending offline metrics...", buf, 0xCu);
  }

  double v7 = *(double *)(a1 + 48);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 57);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_10026EC98;
  void v11[3] = &unk_1004F8780;
  double v14 = v7;
  id v10 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  char v15 = v8;
  char v16 = v9;
  char v17 = *(_BYTE *)(a1 + 58);
  id v13 = v10;
  objc_msgSend( v12,  "_metrics_sendNextOfflineMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:completion:",  v8,  v9,  v11,  v7);
}

void sub_10026EC98(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requir"
                         "esActiveSession:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s End sending offline metrics.", buf, 0xCu);
  }

  double v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v3 systemUptime];
  double v5 = v4;
  double v6 = *(double *)(a1 + 48);

  double v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (v5 >= v6)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requ"
                           "iresActiveSession:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Skipped sending analytics event streams to server because time limit is reached.",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      *(void *)&uint8_t buf[4] = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requ"
                           "iresActiveSession:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Begin sending analytics event streams...",  buf,  0xCu);
    }

    double v8 = *(double *)(a1 + 48);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v10 = *(unsigned __int8 *)(a1 + 57);
    uint64_t v11 = *(unsigned __int8 *)(a1 + 58);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_10026EEC4;
    v13[3] = &unk_1004FC838;
    id v12 = *(void **)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    *(_OWORD *)__int128 buf = xmmword_1003C9FB0;
    __int128 v16 = unk_1003C9FC0;
    __int128 v17 = xmmword_1003C9FD0;
    uint64_t v18 = 100LL;
    objc_msgSend( v12,  "_metrics_sendNextAnalyticsEventStreamToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:prioritizedEv entStreamUID:deliveryStreamContinuations:scheduledActivity:completion:",  v9,  v10,  0,  buf,  v11,  v13,  v8);
  }

uint64_t sub_10026EEC4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    double v5 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSession:"
         "purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s End sending analytics event streams.",  (uint8_t *)&v4,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10026EF78(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10026F008;
  v6[3] = &unk_1004FC278;
  id v7 = v4;
  id v8 = v3;
  id v5 = v3;
  [v5 purgeDeletedEventRecordsBeforeOrEqualToDate:v7 completion:v6];
}

void sub_10026F008(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    double v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 136315650;
      uint64_t v9 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSessio"
           "n:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke_4";
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Failed to purge deleted analytics events with timestamp before [%@] due to error %@.",  (uint8_t *)&v8,  0x20u);
    }
  }

  [*(id *)(a1 + 40) checkpointWithCompletion:&stru_1004F8758];
}

void sub_10026F0F8(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (!a2)
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "-[ADCommandCenter(Metrics) _metrics_sendMetricsToServerUntilLimit:requiresUnlimitedPower:requiresActiveSessio"
           "n:purgesOversizedStorage:scheduledActivity:completion:]_block_invoke";
      __int16 v8 = 2112;
      uint64_t v9 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed to checkpoint analytics store due to error %@.",  (uint8_t *)&v6,  0x16u);
    }
  }
}

void sub_10026F1C0(id a1, ADAnalyticsStore *a2)
{
}

id sub_10026F1CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    int v6 = "-[ADCommandCenter(Metrics) _metrics_recordCancellationMetrics]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v3 logEventWithType:1701 context:0];

  return [*(id *)(a1 + 32) _awdRequestEnd:0];
}

id sub_10026F2A4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v9 = "-[ADCommandCenter(Metrics) _metrics_recordFailureMetricsForError:]_block_invoke";
    __int16 v10 = 2112;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s %@", buf, 0x16u);
  }

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_10026F3CC;
  v6[3] = &unk_1004FD8D0;
  id v7 = *(id *)(a1 + 32);
  [v4 logEventWithType:1702 contextProvider:v6];

  return [*(id *)(a1 + 40) _awdRequestEnd:*(void *)(a1 + 32)];
}

uint64_t sub_10026F3CC(uint64_t a1)
{
  return AFAnalyticsContextCreateWithError(*(void *)(a1 + 32));
}

id sub_10026F3D4(uint64_t a1)
{
  if (AFIsInternalInstall(a1) && (uint64_t v2 = *(void *)(a1 + 32)) != 0)
  {
    v11[0] = @"bestTextInterpretation";
    v11[1] = @"resultId";
    uint64_t v3 = *(void *)(a1 + 40);
    v12[0] = v2;
    v12[1] = v3;
    int v4 = v12;
    int v5 = (const __CFString **)v11;
    uint64_t v6 = 2LL;
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v9 = @"resultId";
    uint64_t v10 = v7;
    int v4 = &v10;
    int v5 = &v9;
    uint64_t v6 = 1LL;
  }

  return (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v5,  v6));
}

__CFString *sub_10026F494(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 utterances]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);

  id v28 = v1;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 phrases]);
  id v6 = 0LL;
  if ([v5 count])
  {
    unint64_t v7 = 0LL;
    id v29 = v5;
    id v30 = v4;
    do
    {
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v4 interpretationIndices]);
      id v9 = [v8 count];

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndex:v7]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 interpretationIndices]);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndex:v7]);
      id v13 = [v12 unsignedIntegerValue];

      id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 interpretations]);
      id v15 = [v14 count];

      if (v13 >= v15)
      {

        id v26 = &stru_1004FECA0;
        goto LABEL_19;
      }

      id v32 = v10;
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v10 interpretations]);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectAtIndex:v13]);

      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      uint64_t v31 = v17;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 tokens]);
      id v19 = [v18 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v34;
        do
        {
          for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
          {
            id v23 = v6;
            if (*(void *)v34 != v21) {
              objc_enumerationMutation(v18);
            }
            uint64_t v24 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
            if (([v24 removeSpaceBefore] & 1) == 0
              && ([v23 removeSpaceAfter] & 1) == 0
              && v23)
            {
              -[NSMutableString appendString:](v2, "appendString:", @" ");
            }

            __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 text]);
            -[NSMutableString appendString:](v2, "appendString:", v25);
            id v6 = v24;
          }

          id v20 = [v18 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }

        while (v20);
      }

      ++v7;
      int v5 = v29;
      int v4 = v30;
    }

    while (v7 < (unint64_t)[v29 count]);
  }

  id v26 = v2;
LABEL_19:

  return v26;
}

double sub_10026F764(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 phrases]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 firstObject]);

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 interpretations]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);

  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 tokens]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);

  [v6 silenceStartTime];
  double v8 = v7;

  return v8;
}

void sub_10026F804(id *a1, char a2)
{
  int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] _queue]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_10026F8C0;
  v5[3] = &unk_1004FBFC0;
  char v9 = a2;
  id v6 = a1[5];
  id v7 = a1[6];
  id v8 = a1[7];
  dispatch_async(v4, v5);
}

uint64_t sub_10026F8C0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (!v2)
  {
    if (v3)
    {
      if (!v5) {
        goto LABEL_15;
      }
      uint64_t v8 = *(void *)(a1 + 40);
      int v14 = 136315650;
      id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v8;
      id v7 = "%s Failed to send metrics (%@:%@).";
      goto LABEL_8;
    }

    if (!v5) {
      goto LABEL_15;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    int v14 = 136315394;
    id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v12;
    id v7 = "%s Failed to send metrics (%@).";
LABEL_13:
    char v9 = v4;
    uint32_t v10 = 22;
    goto LABEL_14;
  }

  if (!v3)
  {
    if (!v5) {
      goto LABEL_15;
    }
    uint64_t v11 = *(void *)(a1 + 40);
    int v14 = 136315394;
    id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke";
    __int16 v16 = 2112;
    uint64_t v17 = v11;
    id v7 = "%s Sent metrics (%@).";
    goto LABEL_13;
  }

  if (!v5) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  int v14 = 136315650;
  id v15 = "-[ADCommandCenter(Metrics) _sendMetrics:requiresActiveSession:batch:completion:]_block_invoke_2";
  __int16 v16 = 2112;
  uint64_t v17 = v3;
  __int16 v18 = 2112;
  uint64_t v19 = v6;
  id v7 = "%s Sent metrics (%@:%@).";
LABEL_8:
  char v9 = v4;
  uint32_t v10 = 32;
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, v10);
LABEL_15:
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 56));
  }
  return result;
}

void sub_10026FA88(uint64_t a1, uint64_t a2)
{
  int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10026FB3C;
  block[3] = &unk_1004FDA80;
  uint64_t v10 = a2;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, block);
}

id sub_10026FB20(uint64_t a1, int a2)
{
  int v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 invokeWithSignal:1];
  }
  else {
    return [v2 invoke];
  }
}

id sub_10026FB34(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_10026FB3C(uint64_t a1)
{
  if (*(void *)(a1 + 48) != 1LL)
  {
    int v2 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(void **)(a1 + 32);
      id v5 = v2;
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 category]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
      int v8 = 136315650;
      uint64_t v9 = "-[ADCommandCenter(Metrics) _reallyCommitOrSaveMetrics:]_block_invoke_2";
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%s Failed to send live metrics (%@:%@), adding to offline metrics manager.",  (uint8_t *)&v8,  0x20u);
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _offlineMetricsManager]);
    [v3 insertMetrics:*(void *)(a1 + 32)];
  }

id sub_100270284(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 872) || *((_BYTE *)result + 40))
  {
    *(_BYTE *)(v1 + 872) = 1;
    return [*((id *)result + 4) _updateAutoDownloadedVoiceAssetsForOutputVoice];
  }

  return result;
}

void sub_1002702AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = v4;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedDescription]);
      int v8 = 136315650;
      uint64_t v9 = "-[ADCommandCenter(OutputVoice) _updateAutoDownloadedVoiceAssetsForOutputVoice]_block_invoke";
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Unable to subscribe voice %@, error: %@",  (uint8_t *)&v8,  0x20u);
    }
  }
}

void sub_100270970(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___ADMUXSyncTokenManager);
  int v2 = (void *)qword_1005782E0;
  qword_1005782E0 = (uint64_t)v1;
}

void sub_100270C04(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_ad_finalMetricsContextWithResponse:error:", v8, v5));
  [*(id *)(a1 + 40) logEventWithType:507 context:v6 contextNoCopy:0];
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1002720A8(_Unwind_Exception *a1)
{
}

void sub_10027234C(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) speakableIdentifier]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) speakableIdentifier]);
  unsigned int v4 = [v2 isEqualToString:v3];

  if (v4)
  {
    [*(id *)(*(void *)(a1 + 40) + 8) cancel];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(v5 + 8);
    *(void *)(v5 + _Block_object_dispose(&STACK[0x220], 8) = 0LL;

    if (*(void *)(*(void *)(a1 + 40) + 64LL) == 3LL) {
      float v8 = 0.4;
    }
    else {
      float v8 = 0.0;
    }
    float v9 = *(float *)(a1 + 56);
    if (v9 <= v8) {
      uint64_t v10 = 1LL;
    }
    else {
      uint64_t v10 = 2LL;
    }
    if (AFIsInternalInstall(v7))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _remoteOSMService]);
      __int16 v12 = @"Minimal Alert";
      if (v9 > v8) {
        __int16 v12 = @"Speak Verbosely";
      }
      id v13 = *(void **)(a1 + 32);
      int v14 = v12;
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 speakableIdentifier]);
      [v11 recordRecommendedAction:v14 forSpeakableId:v15 withModelIdentifier:*(void *)(a1 + 48)];
    }
  }

void sub_1002724A8(id a1, NSError *a2)
{
  int v2 = a2;
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "-[ADOpportuneSpeakingModule _remoteOSMService]_block_invoke";
      __int16 v6 = 2112;
      uint64_t v7 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Failed to communicate with Opportune Speaking Model Service: %@",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_10027256C(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADOpportuneSpeakingModule _connectionToOSMService]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Connection to Opportune Speaking Model Service interrupted",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetConnectionToOSMService];
}

void sub_10027262C(uint64_t a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADOpportuneSpeakingModule _connectionToOSMService]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Connection to Opportune Speaking Model Service invalidated",  (uint8_t *)&v4,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _resetConnectionToOSMService];
}

void sub_1002726E8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  float v8 = (void *)a1[5];
  float v9 = *(dispatch_queue_s **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10027291C;
  block[3] = &unk_1004F8BA0;
  block[1] = 3221225472LL;
  id v14 = v5;
  uint64_t v15 = v7;
  uint64_t v10 = a1[6];
  id v16 = v6;
  uint64_t v18 = v10;
  id v17 = v8;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v9, block);
}

void sub_1002727B0(void *a1)
{
  int v2 = -[ADOpportuneSpeakingVoiceActivityModel initWithQueue:stateManager:]( objc_alloc(&OBJC_CLASS___ADOpportuneSpeakingVoiceActivityModel),  "initWithQueue:stateManager:",  *(void *)(a1[4] + 16LL),  *(void *)(a1[4] + 104LL));
  uint64_t v3 = *(void **)(a1[4] + 72LL);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(-[ADOpportuneSpeakingVoiceActivityModel modelIdentifier](v2, "modelIdentifier"));
  [v3 setObject:v2 forKey:v4];

  id v5 = *(void **)(a1[4] + 80LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[ADOpportuneSpeakingVoiceActivityModel modelIdentifier](v2, "modelIdentifier"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[6]));
  [v5 setObject:v6 forKey:v7];

  float v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    id v11 = "-[ADOpportuneSpeakingModule _loadModelWithType:completion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Loaded model into assistantd: %@",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v9 = a1[5];
  if (v9) {
    (*(void (**)(void))(v9 + 16))();
  }
}

uint64_t sub_10027291C(void *a1)
{
  int v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[4];
    int v8 = 136315394;
    uint64_t v9 = "-[ADOpportuneSpeakingModule _loadModelWithType:completion:]_block_invoke_2";
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Loaded model on remote: %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1[5] + 72) setObject:a1[4] forKey:a1[6]];
  uint64_t v3 = a1[6];
  int v4 = *(void **)(a1[5] + 80LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[8]));
  [v4 setObject:v3 forKey:v5];

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100272A34(uint64_t a1)
{
  unint64_t v2 = _AFPreferencesOpportuneSpeakingModelUsed();
  if (v2 <= 1) {
    uint64_t v3 = 1LL;
  }
  else {
    uint64_t v3 = v2;
  }
  *(void *)(*(void *)(a1 + 32) + 64LL) = v3;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 80);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(v4 + 64)));
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 objectForKey:v6]);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 56);
  *(void *)(v8 + 56) = v7;

  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 72), "allValues", 0));
  uint64_t v11 = (char *)[v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v11)
  {
    __int16 v12 = v11;
    uint64_t v13 = *(void *)v16;
    do
    {
      id v14 = 0LL;
      do
      {
        if (*(void *)v16 != v13) {
          objc_enumerationMutation(v10);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        ++v14;
      }

      while (v12 != v14);
      __int16 v12 = (char *)[v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v12);
  }
}

void sub_100272B88(uint64_t a1)
{
}

void sub_100272B94(uint64_t a1)
{
}

uint64_t sub_100272BA0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 88LL) = 0;
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100272BB4(id *a1)
{
  unint64_t v2 = (void *)*((void *)a1[4] + 6);
  id v3 = objc_retainBlock(a1[6]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] speakableIdentifier]);
  [v2 setObject:v3 forKey:v4];

  [*((id *)a1[4] + 5) addObject:a1[5]];
  return [a1[4] _processEnqueuedSpeakables];
}

id sub_100272C24(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 136315394;
    uint64_t v8 = "-[ADOpportuneSpeakingModule _processEnqueuedSpeakables]_block_invoke";
    __int16 v9 = 2048;
    uint64_t v10 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "%s Timeout: could not execute opportune speaking models in time (%f sec)",  (uint8_t *)&v7,  0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 8) cancel];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose(&STACK[0x220], 8) = 0LL;

  return [*(id *)(a1 + 32) _finishRunningCurrentSpeakableWithResult:0 error:0];
}

void sub_100272D0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(*(void *)(a1 + 32) + 32LL))
  {
    objc_msgSend(v3, "startWithDelegate:");
    [v4 setSpeakable:*(void *)(*(void *)(a1 + 32) + 32)];
  }

  else
  {
    id v5 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 136315394;
      uint64_t v8 = "-[ADOpportuneSpeakingModule _processEnqueuedSpeakables]_block_invoke";
      __int16 v9 = 2048;
      uint64_t v10 = v6;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s _currentSpeakable is nil while executing opportune speaking models, this is likely cause by timeout (length: %f sec)",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_100272E04(void *a1, int a2, int a3)
{
  uint64_t v3 = a1[6];
  if (v3 == 1)
  {
    if (!a2) {
      uint64_t v3 = 2LL;
    }
    if (a3) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = 0LL;
    }
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 72) objectForKey:*(void *)(a1[4] + 56)]);
    [v6 recordFeedbackOfType:v5 forSpeakable:a1[5]];
  }

void sub_100272EBC(id a1)
{
  id v1 = -[ADOpportuneSpeakingModule _init](objc_alloc(&OBJC_CLASS___ADOpportuneSpeakingModule), "_init");
  unint64_t v2 = (void *)qword_1005782F0;
  qword_1005782F0 = (uint64_t)v1;
}

AFVoiceInfo *sub_100272EE8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0) {
    id v6 = -[AFVoiceInfo initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___AFVoiceInfo),  "initWithDictionaryRepresentation:",  v3);
  }
  else {
    id v6 = 0LL;
  }
  if ((-[AFVoiceInfo isValidForSiriSessionLanguage:](v6, "isValidForSiriSessionLanguage:", v4) & 1) == 0)
  {

    id v6 = 0LL;
  }

  return v6;
}

id sub_100272F7C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSString);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0) {
    id v3 = v1;
  }
  else {
    id v3 = 0LL;
  }
  id v4 = v3;

  return v4;
}

AFVoiceInfo *sub_100272FD0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v1, v2) & 1) != 0) {
    id v3 = -[AFVoiceInfo initWithDictionaryRepresentation:]( objc_alloc(&OBJC_CLASS___AFVoiceInfo),  "initWithDictionaryRepresentation:",  v1);
  }
  else {
    id v3 = 0LL;
  }

  return v3;
}

AFVoiceInfo *sub_100273034(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 languageCode]);
    id v4 = [v1 gender];
    id v5 = [v1 isCustom];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v1 name]);
    id v7 = [v1 footprint];

    uint64_t v8 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v2,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v3,  v4,  v5,  v6,  v7,  0LL,  0LL);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

uint64_t sub_100273110(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = sub_1002732F0(v4);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"da-DK",  @"en-IE",  @"en-ZA",  @"fi-FI",  @"ko-KR",  @"nb-NO",  @"tr-TR",  @"zh-HK",  @"zh-TW",  0LL));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"en-AU",  @"en-US",  @"en-CA",  @"en-GB",  0LL));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    if (([v11 isEqualToString:@"en-IN"] & 1) != 0
      || ([v9 containsObject:v8] & 1) != 0)
    {
      goto LABEL_14;
    }

    if ([v10 containsObject:v8])
    {
      if ([v11 isEqualToString:@"en-ZA"])
      {
LABEL_14:

        goto LABEL_15;
      }
    }

    else if (![v8 isEqualToString:@"en-ZA"])
    {
      if ([v8 isEqualToString:@"en-IE"]
        && ![v11 isEqualToString:@"en-IE"])
      {
        goto LABEL_14;
      }

id sub_1002732F0(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = objc_claimAutoreleasedReturnValue([&off_100513AC0 objectForKey:v1]);
    id v3 = (void *)v2;
    if (v2) {
      id v4 = (void *)v2;
    }
    else {
      id v4 = v1;
    }
    id v5 = v4;
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

uint64_t sub_100273358(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned int v8 = [v7 isEqualToString:@"en-US"];

    if (!v8) {
      goto LABEL_9;
    }
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 voiceNamesForOutputLanguageCode:@"en-US" gender:1]);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 voiceNamesForOutputLanguageCode:@"en-US" gender:2]);
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);

    if (v12) {
      [v9 addObject:v12];
    }
    if (v15) {
      [v9 addObject:v15];
    }
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
    unsigned int v17 = [v9 containsObject:v16];

    if (!v17) {
      uint64_t v6 = 1LL;
    }
    else {
LABEL_9:
    }
      uint64_t v6 = sub_1002734D8(v3, v5);
  }

  return v6;
}

uint64_t sub_1002734D8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned __int8 v8 = [v7 isEqualToString:@"fi-FI"];

    if ((v8 & 1) != 0) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = sub_100273564(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_100273564(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3)
  {
    if (v4)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
      unsigned int v8 = [v7 isEqualToString:@"en-US"];

      if (!v8) {
        goto LABEL_5;
      }
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v6 = 1LL;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 voiceNamesForOutputLanguageCode:@"en-US" gender:1]);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      void v23[2] = sub_100273738;
      v23[3] = &unk_1004F8C10;
      id v12 = v9;
      id v24 = v12;
      [v11 enumerateObjectsUsingBlock:v23];

      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 voiceNamesForOutputLanguageCode:@"en-US" gender:2]);
      __int128 v18 = _NSConcreteStackBlock;
      uint64_t v19 = 3221225472LL;
      id v20 = sub_100273774;
      uint64_t v21 = &unk_1004F8C10;
      id v22 = v12;
      id v15 = v12;
      [v14 enumerateObjectsUsingBlock:&v18];

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name", v18, v19, v20, v21));
      LODWORD(v14) = [v15 containsObject:v16];

      if ((_DWORD)v14) {
LABEL_5:
      }
        uint64_t v6 = sub_1002737B0(v3, v5);
    }
  }

  return v6;
}

id sub_100273738(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 32) addObject:a2];
  if (a3 == 1) {
    *a4 = 1;
  }
  return result;
}

id sub_100273774(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id result = [*(id *)(a1 + 32) addObject:a2];
  if (a3 == 1) {
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1002737B0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned __int8 v8 = [v7 isEqualToString:@"ja-JP"];

    if ((v8 & 1) != 0) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = sub_10027383C(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_10027383C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObjects:](&OBJC_CLASS___NSSet, "setWithObjects:", @"ar-SA", @"he-IL", 0LL));
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned __int8 v9 = [v7 containsObject:v8];

    if ((v9 & 1) != 0) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = sub_100273904(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_100273904(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned int v8 = [v7 isEqualToString:@"de-DE"];

    if (v8)
    {
      unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v6 = 1LL;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 voiceNamesForOutputLanguageCode:@"de-DE" gender:1]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);

      [v9 addObject:v12];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 voiceNamesForOutputLanguageCode:@"de-DE" gender:2]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([(id)v14 firstObject]);

      [v9 addObject:v15];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
      LOBYTE(v14) = [v9 containsObject:v16];

      if ((v14 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }

    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned int v18 = [v17 isEqualToString:@"en-GB"];

    if (v18)
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 voiceNamesForOutputLanguageCode:@"en-GB" gender:1]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);

      [v19 addObject:v22];
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v24 = objc_claimAutoreleasedReturnValue([v23 voiceNamesForOutputLanguageCode:@"en-GB" gender:2]);
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([(id)v24 firstObject]);

      [v19 addObject:v25];
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
      LOBYTE(v24) = [v19 containsObject:v26];

      uint64_t v6 = 1LL;
      if ((v24 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }

    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    int v28 = [v27 isEqualToString:@"th-TH"];

    if ((v28 & 1) == 0)
    {
LABEL_11:
      uint64_t v6 = sub_100273BC4(v3, v5);
      goto LABEL_12;
    }

    uint64_t v6 = 1LL;
  }

uint64_t sub_100273BC4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned __int8 v8 = [v7 isEqualToString:@"ms-MY"];

    if ((v8 & 1) != 0) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = sub_100273C50(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_100273C50(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3)
  {
    if (v4)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
      unsigned int v8 = [v7 isEqualToString:@"zh-CN"];

      if (!v8) {
        goto LABEL_5;
      }
      unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 voiceNamesForOutputLanguageCode:@"zh-CN" gender:2]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);

      [v9 addObject:v12];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
      uint64_t v6 = 1LL;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 voiceNamesForOutputLanguageCode:@"zh-CN" gender:1]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);

      [v9 addObject:v15];
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
      LODWORD(v13) = [v9 containsObject:v16];

      if ((_DWORD)v13)
      {
LABEL_5:
        id v17 = v3;
        unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 languageCode]);
        if ([v18 isEqualToString:@"vi-VN"])
        {
          uint64_t v6 = 1LL;
        }

        else
        {
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 languageCode]);
          uint64_t v6 = (uint64_t)[v19 isEqualToString:@"vi-VN-u-sd-vnct"];
        }
      }
    }
  }

  return v6;
}

uint64_t sub_100273E0C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"fi-FI",  @"ko-KR",  @"tr-TR",  0LL));
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned __int8 v9 = [v8 isEqualToString:@"en-IN"];

    if ((v9 & 1) != 0
      || (uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]),
          unsigned __int8 v11 = [v7 containsObject:v10],
          v10,
          (v11 & 1) != 0))
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      uint64_t v6 = sub_100273358(v3, v5);
    }
  }

  return v6;
}

uint64_t sub_100273F08(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  uint64_t v6 = 1LL;
  if (v3 && v4)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"fi-FI",  @"ko-KR",  @"tr-TR",  0LL));
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 languageCode]);
    unsigned __int8 v9 = [v7 containsObject:v8];

    if ((v9 & 1) != 0) {
      uint64_t v6 = 1LL;
    }
    else {
      uint64_t v6 = sub_100273358(v3, v5);
    }
  }

  return v6;
}

AFVoiceInfo *sub_100273FDC(void *a1)
{
  id v1 = sub_1002732F0(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = v2;
  if (v2)
  {
    id v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"ar-SA",  @"en-GB",  @"fr-FR",  @"nl-NL",  0LL));
    else {
      uint64_t v6 = 2LL;
    }
    id v7 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:]( objc_alloc(&OBJC_CLASS___AFVoiceInfo),  "initWithLanguageCode:gender:isCustom:",  v4,  v6,  1LL);
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

AFVoiceInfo *sub_1002740A8(void *a1)
{
  id v1 = sub_100273FDC(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (uint64_t)[v2 gender];
  id v4 = [v2 isCustom];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 voiceNamesForOutputLanguageCode:v6 gender:v3]);
  unsigned int v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 firstObject]);

  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  LODWORD(v6) = [v9 isEqualToString:@"fi-FI"];

  if ((_DWORD)v6)
  {

    id v4 = 0LL;
    unsigned int v8 = @"satu";
    uint64_t v3 = 2LL;
  }

  uint64_t v10 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v12 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v10,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v11,  v3,  v4,  v8,  0LL,  0LL,  0LL);

  return v12;
}

AFVoiceInfo *sub_1002741E8(void *a1)
{
  id v1 = sub_1002740A8(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (uint64_t)[v2 gender];
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 voiceNamesForOutputLanguageCode:v5 gender:v3]);
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 firstObject]);

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  LODWORD(v5) = [v8 isEqualToString:@"ja-JP"];

  if ((_DWORD)v5)
  {

    BOOL v9 = v3 == 2;
    if (v3 == 2) {
      uint64_t v3 = 2LL;
    }
    else {
      uint64_t v3 = 1LL;
    }
    if (v9) {
      id v7 = @"oren";
    }
    else {
      id v7 = @"hattori";
    }
  }

  uint64_t v10 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v12 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v10,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v11,  v3,  [v2 isCustom],  v7,  0,  0,  0);

  return v12;
}

AFVoiceInfo *sub_10027432C(void *a1)
{
  id v1 = sub_1002741E8(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (uint64_t)[v2 gender];
  id v4 = [v2 isCustom];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 voiceNamesForOutputLanguageCode:v6 gender:v3]);
  unsigned int v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 firstObject]);

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  LOBYTE(v6) = [v9 isEqualToString:@"ar-SA"];

  if ((v6 & 1) != 0)
  {
    uint64_t v10 = @"maged";
    uint64_t v3 = 1LL;
LABEL_5:

    id v4 = 0LL;
    unsigned int v8 = (__CFString *)v10;
    goto LABEL_6;
  }

  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  unsigned int v12 = [v11 isEqualToString:@"he-IL"];

  if (v12)
  {
    uint64_t v10 = @"carmit";
    uint64_t v3 = 2LL;
    goto LABEL_5;
  }

AFVoiceInfo *sub_1002744A8(void *a1)
{
  id v1 = sub_10027432C(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (uint64_t)[v2 gender];
  id v4 = [v2 isCustom];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 voiceNamesForOutputLanguageCode:v6 gender:v3]);
  unsigned int v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 firstObject]);

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  LODWORD(v6) = [v9 isEqualToString:@"de-DE"];

  if ((_DWORD)v6)
  {

    BOOL v10 = v3 == 1;
    if (v3 == 1) {
      uint64_t v3 = 1LL;
    }
    else {
      uint64_t v3 = 2LL;
    }
    unsigned __int8 v11 = @"helena";
    unsigned int v12 = @"martin";
LABEL_11:
    if (v10) {
      unsigned int v8 = (__CFString *)v12;
    }
    else {
      unsigned int v8 = (__CFString *)v11;
    }
    goto LABEL_14;
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  unsigned int v14 = [v13 isEqualToString:@"en-GB"];

  if (v14)
  {

    BOOL v10 = v3 == 2;
    if (v3 == 2) {
      uint64_t v3 = 2LL;
    }
    else {
      uint64_t v3 = 1LL;
    }
    unsigned __int8 v11 = @"arthur";
    unsigned int v12 = @"martha";
    goto LABEL_11;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  unsigned int v20 = [v19 isEqualToString:@"th-TH"];

  if (v20)
  {

    id v4 = 0LL;
    unsigned int v8 = @"kanya";
    uint64_t v3 = 2LL;
  }

AFVoiceInfo *sub_100274684(void *a1)
{
  id v1 = sub_1002744A8(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = (uint64_t)[v2 gender];
  id v4 = [v2 isCustom];
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AFLocalization sharedInstance](&OBJC_CLASS___AFLocalization, "sharedInstance"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 voiceNamesForOutputLanguageCode:v6 gender:v3]);
  unsigned int v8 = (__CFString *)objc_claimAutoreleasedReturnValue([v7 firstObject]);

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  LODWORD(v6) = [v9 isEqualToString:@"ms-MY"];

  if ((_DWORD)v6)
  {

    id v4 = 0LL;
    unsigned int v8 = @"amira";
    uint64_t v3 = 2LL;
  }

  BOOL v10 = objc_alloc(&OBJC_CLASS___AFVoiceInfo);
  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);
  unsigned int v12 = -[AFVoiceInfo initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:]( v10,  "initWithLanguageCode:gender:isCustom:name:footprint:contentVersion:masteredVersion:",  v11,  v3,  v4,  v8,  0LL,  0LL,  0LL);

  return v12;
}

id sub_1002747C4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = kAFOutputVoice;
  id v7 = a1;
  if ([a3 isEqualToString:v6])
  {
    unsigned int v8 = sub_100272FD0(v7);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    BOOL v10 = sub_100272FD0(v5);
    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v9 languageCode]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 languageCode]);
    if ([v12 isEqualToString:v13])
    {
      id v14 = [v9 gender];
      BOOL v15 = v14 == [v11 gender];
    }

    else
    {
      BOOL v15 = 0LL;
    }

    uint64_t v17 = objc_claimAutoreleasedReturnValue([v9 name]);
    if (v17)
    {
      unsigned int v18 = (void *)v17;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v11 name]);

      if (v19) {
        id v16 = 0LL;
      }
      else {
        id v16 = (id)v15;
      }
      if (v19 && v15)
      {
        unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v11 name]);
        id v16 = [v20 isEqualToString:v21];
      }
    }

    else
    {
      id v16 = (id)v15;
    }
  }

  else
  {
    id v16 = [v7 isEqual:v5];
    BOOL v9 = v7;
  }

  return v16;
}

void sub_100274948(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = sub_100274B08(a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v12 = 136315394;
    uint64_t v13 = "_ADCloudKitKeyValueStoreSaveValueForKey";
    __int16 v14 = 2112;
    BOOL v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Saving key to local prefs: %@",  (uint8_t *)&v12,  0x16u);
  }

  if ([v5 isEqualToString:kAFSessionLanguage])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    [v7 setQueuedLanguageCode:v3];

    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v8 logEventWithType:3201 context:&off_100513AE8];
  }

  else
  {
    if (![v5 isEqualToString:kAFOutputVoice])
    {
      _AFBackedUpPreferencesSetValueForKey(v3, v5);
      goto LABEL_9;
    }

    BOOL v9 = sub_100272FD0(v3);
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(v9);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    [v10 setQueuedOutputVoice:v8];

    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
    [v11 logEventWithType:3202 context:&off_100513B10];
  }

LABEL_9:
}

id sub_100274B08(void *a1)
{
  id v1 = a1;
  else {
    uint64_t v2 = v1;
  }
  id v3 = v2;

  return v3;
}

id sub_100274B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = AFIsHorseman(a1, a2);
  if ((v2 & 1) != 0 || AFIsATV(v2, v3))
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    if (!AFIsVision())
    {
      id v4 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  kAFOutputVoice,  kAFSessionLanguage,  @"User Identifier",  @"Logging User Identifier",  kAFSpokenNotificationTemporaryMuteEndDateKey,  kAFSpokenNotificationSkipTriggerlessReplyConfirmation,  @"MultiUser VoiceIdentification Enabled",  0LL);
      return (id)objc_claimAutoreleasedReturnValue(v4);
    }

    uint64_t v7 = kAFSpokenNotificationSkipTriggerlessReplyConfirmation;
    uint64_t v8 = 0LL;
    uint64_t v6 = kAFSpokenNotificationTemporaryMuteEndDateKey;
  }

  id v4 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"User Identifier",  @"Logging User Identifier",  v6,  v7,  v8,  v9,  v10,  v11);
  return (id)objc_claimAutoreleasedReturnValue(v4);
}

NSMutableDictionary *sub_100274C40()
{
  uint64_t v0 = _AFBackedUpPreferencesKeyList();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v1 count]));
  id v4 = sub_100274B58((uint64_t)v2, v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v6 = v1;
  id v7 = [v6 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v28;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v27 + 1) + 8LL * (void)i);
      }

      id v8 = [v6 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }

    while (v8);
  }

  int v12 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v2 count]);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v13 = v2;
  id v14 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v24;
    do
    {
      for (j = 0LL; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v24 != v16) {
          objc_enumerationMutation(v13);
        }
        unsigned int v18 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)j);
        id v19 = sub_100274B08(v18);
        uint64_t v20 = _AFBackedUpPreferencesValueForKey(v19);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        if (v21) {
          -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v21, v18, (void)v23);
        }
      }

      id v15 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
    }

    while (v15);
  }

  return v12;
}

NSMutableDictionary *sub_100274E6C()
{
  uint64_t v0 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 2LL);
  id v2 = sub_100274B58((uint64_t)v0, v1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if ([v3 containsObject:@"User Identifier"])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 sharedUserIdentifier]);

    if (v5) {
      -[NSMutableDictionary setObject:forKey:](v0, "setObject:forKey:", v5, @"User Identifier");
    }
  }

  if ([v3 containsObject:@"Logging User Identifier"])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 loggingSharedUserIdentifier]);

    if (v7) {
      -[NSMutableDictionary setObject:forKey:](v0, "setObject:forKey:", v7, @"Logging User Identifier");
    }
  }

  return v0;
}

NSMutableDictionary *sub_100274F5C()
{
  uint64_t v0 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  id v2 = sub_100274B58((uint64_t)v0, v1);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_100274B08(kAFModificationDates);
  uint64_t v5 = _AFBackedUpPreferencesValueForKey(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSDictionary);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
  {
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v18;
      do
      {
        for (uint64_t i = 0LL; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)i);
          if (objc_msgSend(v3, "containsObject:", v13, (void)v17))
          {
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v13]);
            uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSDate);
            if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0) {
              -[NSMutableDictionary setObject:forKey:](v0, "setObject:forKey:", v14, v13);
            }
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v17 objects:v21 count:16];
      }

      while (v10);
    }
  }

  return v0;
}

id sub_100275420(uint64_t a1, void *a2)
{
  return _[a2 setSnapshot:*(void *)(a1 + 32)];
}

uint64_t sub_100275A04(void *a1)
{
  uint64_t v2 = a1[4];
  if ((*(_BYTE *)(v2 + 32) & 9) != 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
    [WeakRetained sensitiveCondition:2 startedAt:a1[6]];
  }

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100275A68(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 32LL) = *(void *)(result + 40);
  return result;
}

void sub_10027613C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v4 = a2;
  objc_msgSend(v4, "setCallState:", objc_msgSend(v3, "callState"));
  [v4 setOnSpeaker:*(unsigned __int8 *)(a1 + 40)];
  objc_msgSend(v4, "setIsDropInCall:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "isDropInCall"));
}

void sub_1002761AC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setCallState:v3];
  objc_msgSend(v4, "setOnSpeaker:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "onSpeaker"));
  objc_msgSend(v4, "setIsDropInCall:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "isDropInCall"));
}

void sub_100276218(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 setCallState:v3];
  objc_msgSend(v4, "setOnSpeaker:", objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "onSpeaker"));
  [v4 setIsDropInCall:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1002762B8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___AFHomeAnnouncementObserver);
  uint64_t v2 = (void *)qword_100578300;
  qword_100578300 = (uint64_t)v1;
}

void sub_10027640C(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___ActivityDispatcher);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
}

void sub_100278158(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectPunchOut:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_1002781D0(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectCommit:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_100278248(uint64_t a1, void *a2, int a3)
{
  uint64_t v5 = a2;
  id v6 = v5;
  if (!a3)
  {
    if ([*(id *)(a1 + 32) isAMOSIdentifier])
    {
      id v7 = *(void **)(a1 + 32);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[SADomainObjectCommitCompleted identifier](v5, "identifier"));
      LODWORD(v7) = [v7 isEqual:v8];

      if ((_DWORD)v7)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) absoluteString]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 stringByAppendingString:@"?committed=yes"]);

        uint64_t v11 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v10);
        -[SADomainObjectCommitCompleted setIdentifier:](v5, "setIdentifier:", v11);
        [*(id *)(a1 + 40) setIdentifier:v11];
        int v12 = *(void **)(a1 + 48);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionary]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL absoluteString](v11, "absoluteString"));
        [v12 setDomainObject:v13 forKey:v14];

        uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = *(void *)(a1 + 40);
          int v20 = 136315394;
          uint64_t v21 = "-[ADCommandCenter(AMOS) _amosSADomainObjectCommit:completion:]_block_invoke";
          __int16 v22 = 2112;
          uint64_t v23 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "%s Keeping committed object around %@",  (uint8_t *)&v20,  0x16u);
        }
      }
    }

    [*(id *)(a1 + 48) setDomainObject:0 forKey:*(void *)(a1 + 56)];
    id v6 = objc_alloc_init(&OBJC_CLASS___SADomainObjectCommitCompleted);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(-[SADomainObjectCommitCompleted identifier](v5, "identifier"));
    -[SADomainObjectCommitCompleted setIdentifier:](v6, "setIdentifier:", v17);

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) aceId]);
    -[SADomainObjectCommitCompleted setRefId:](v6, "setRefId:", v18);
  }

  uint64_t v19 = *(void *)(a1 + 72);
  if (v19) {
    (*(void (**)(uint64_t, SADomainObjectCommitCompleted *, void))(v19 + 16))(v19, v6, 0LL);
  }
}

void sub_100278478(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectDelete:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_1002784F0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    id v4 = -[SACommandFailed initWithReason:]( objc_alloc(&OBJC_CLASS___SACommandFailed),  "initWithReason:",  @"Failed to receive object from service");
  }
  else {
    id v4 = objc_alloc_init(&OBJC_CLASS___SADomainObjectDeleteCompleted);
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    id v7 = v5;
    (*(void (**)(void))(v6 + 16))();
    uint64_t v5 = v7;
  }
}

void sub_100278560(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectCancel:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_1002785D8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectUpdate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_100278650(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      __int128 v27 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
      __int16 v28 = 1026;
      LODWORD(v29) = a3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Failed to retrieve object from service. status: %{public}d",  (uint8_t *)&v26,  0x12u);
    }

    uint64_t v8 = -[SACommandFailed initWithReason:]( objc_alloc(&OBJC_CLASS___SACommandFailed),  "initWithReason:",  @"Failed to retrieve object from service");
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objects]);
    if ([v9 count] == (id)1)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 lastObject]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 absoluteString]);

      uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v26 = 136315394;
        __int128 v27 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
        __int16 v28 = 2112;
        __int128 v29 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Successfully retrieved object from service %@",  (uint8_t *)&v26,  0x16u);
      }

      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) setFields]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addFields]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) removeFields]);
      [v10 updateUsingSet:v14 add:v15 remove:v16];

      __int128 v18 = sub_1001EA514(v17);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      [v10 setIdentifier:v19];
      int v20 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        int v26 = 136315394;
        __int128 v27 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
        __int16 v28 = 2112;
        __int128 v29 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "%s Updated retrieved object to %@",  (uint8_t *)&v26,  0x16u);
      }

      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _domainObjectCache]);
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v10 dictionary]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v19 absoluteString]);
      [v21 setDomainObject:v22 withOldId:v12 forKey:v23];

      uint64_t v8 = (SACommandFailed *)objc_alloc_init(&OBJC_CLASS___SADomainObjectUpdateCompleted);
      -[SACommandFailed setIdentifier:](v8, "setIdentifier:", v19);
    }

    else
    {
      __int128 v24 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v26 = 136315394;
        __int128 v27 = "-[ADCommandCenter(AMOS) _updateObjectFromService:sadIdentifier:completion:]_block_invoke";
        __int16 v28 = 2112;
        __int128 v29 = v9;
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Unexpected count of retrieved objects: %@",  (uint8_t *)&v26,  0x16u);
      }

      uint64_t v8 = -[SACommandFailed initWithReason:]( objc_alloc(&OBJC_CLASS___SACommandFailed),  "initWithReason:",  @"Error retrieving object from service");
    }
  }

  uint64_t v25 = *(void *)(a1 + 48);
  if (v25) {
    (*(void (**)(uint64_t, SACommandFailed *, void))(v25 + 16))(v25, v8, 0LL);
  }
}

void sub_1002789E8(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectRetrieve:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_100278A60(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v10 = v5;
  if (a3)
  {
    id v6 = v5;
  }

  else
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objects]);
    [v7 addObjectsFromArray:v8];

    id v6 = objc_alloc_init(&OBJC_CLASS___SADomainObjectRetrieveCompleted);
    [v6 setObjects:*(void *)(a1 + 32)];
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v6, 0LL);
  }
}

void sub_100278B00(uint64_t a1, char a2, void *a3, void *a4)
{
  id v9 = a3;
  id v7 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, id, id))(v8 + 16))(v8, v9, v7);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _amosSADomainObjectCreate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
}

void sub_100278B78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 encodedClassName]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) expectedResponseClassName]);
  unsigned int v9 = [v7 isEqualToString:v8];

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[AceObject aceObjectWithGenericCommand:]( &OBJC_CLASS___AceObject,  "aceObjectWithGenericCommand:",  v5));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    [v10 setRefId:v11];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    int v12 = objc_alloc_init(&OBJC_CLASS___SACommandFailed);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[SACommandFailed encodedClassName](v12, "encodedClassName"));
    unsigned int v14 = [v7 isEqualToString:v13];

    if (v14)
    {
      uint64_t v15 = (SACommandFailed *)v5;
    }

    else
    {
      uint64_t v16 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void **)(a1 + 32);
        __int128 v24 = v16;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 expectedResponseClassName]);
        int v26 = 136315906;
        __int128 v27 = "-[ADCommandCenter(AMOS) _sendAMOSCommandToService:responseHandler:]_block_invoke";
        __int16 v28 = 2114;
        __int128 v29 = v25;
        __int16 v30 = 2114;
        uint64_t v31 = v7;
        __int16 v32 = 2114;
        id v33 = v6;
        _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%s Unexpected response from service. Expecting %{public}@, got %{public}@ error: %{public}@",  (uint8_t *)&v26,  0x2Au);
      }

      uint64_t v15 = v12;
      uint64_t v17 = objc_opt_class(&OBJC_CLASS___SACommandFailed);
      if ((objc_opt_isKindOfClass(v15, v17) & 1) != 0) {
        __int128 v18 = v15;
      }
      else {
        __int128 v18 = 0LL;
      }

      -[SACommandFailed setReason:](v18, "setReason:", @"Unexpected response from service");
    }

    uint64_t v19 = v15;
    uint64_t v20 = objc_opt_class(&OBJC_CLASS___AceObject);
    if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = 0LL;
    }

    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) aceId]);
    -[SACommandFailed setRefId:](v21, "setRefId:", v22);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100278E2C(void *a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 1) != 0)
  {
    id v9 = v7;
  }

  else
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[5];
      int v15 = 136315650;
      uint64_t v16 = "-[ADCommandCenter(AMOS) _handleSADOCommandIfServiceDoesNotUseAMOS:allowInterposing:completion:]_block_invoke";
      __int16 v17 = 2112;
      uint64_t v18 = v13;
      __int16 v19 = 2114;
      uint64_t v20 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Couldn't send SADOCommand %@ to service %{public}@",  (uint8_t *)&v15,  0x20u);
    }

    id v9 = objc_alloc_init(&OBJC_CLASS___SACommandIgnored);
  }

  uint64_t v11 = v9;
  uint64_t v12 = a1[6];
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, void *, id))(v12 + 16))(v12, 1LL, v11, v8);
  }
}

void sub_100278F58(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = a3;
  if (v5 | v6)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, unint64_t))(v7 + 16))(v7, 1LL, v5, v6);
    }
  }

  else
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100279024;
    v10[3] = &unk_1004FC668;
    id v11 = *(id *)(a1 + 48);
    [v8 _handleCommandInAMOS:v9 completion:v10];
  }
}

uint64_t sub_100279024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, 1LL, a2, a3);
  }
  return result;
}

void sub_10027A0A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10027CBB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

LABEL_67:
        id v42 = (char *)v42 + 1;
      }

      while (v40 != v42);
      id v67 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v88,  v92,  16LL);
      uint64_t v40 = v67;
    }

    while (v67);
  }

  return v85;
}

  __int16 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_rxOooBytes));
  [v3 setObject:v41 forKey:@"rx_ooo_bytes"];

  has = self->_has;
  if ((*(_BYTE *)&has & 0x80) == 0)
  {
LABEL_21:
    if ((*(_DWORD *)&has & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }

  PBDataWriterWriteUint32Field(v5, self->_synRetransmits, 41LL);
  has = self->_has;
  if ((*(_DWORD *)&has & 0x800000) == 0)
  {
LABEL_23:
    if ((*(_WORD *)&has & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

  self->_synRetransmits = *((_DWORD *)v4 + 48);
  *(_DWORD *)&self->_has |= 0x1000000u;
  unint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x800000) == 0)
  {
LABEL_23:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

void sub_1002800EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

LABEL_91:
  id v82 = v70 ^ 1;
  __int128 v83 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser productPrefix](self->_deviceOwner, "productPrefix"));
  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v18 productPrefix]);
  char v85 = v83;
  id v86 = v84;
  if (v85 == v86)
  {

LABEL_101:
    goto LABEL_102;
  }

  char v87 = v86;
  if (!v85 || !v86)
  {

    goto LABEL_98;
  }

  uint64_t v88 = [v85 isEqual:v86];

  if ((v88 & 1) == 0)
  {
LABEL_98:
    __int128 v89 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_INFO,  "%s Updating companion product prefix",  buf,  0xCu);
    }

    __int128 v90 = self->_deviceOwner;
    char v85 = (id)objc_claimAutoreleasedReturnValue([v18 productPrefix]);
    -[ADCommunalDeviceUser setProductPrefix:](v90, "setProductPrefix:", v85);
    uint64_t v21 = 1;
    goto LABEL_101;
  }

LABEL_102:
  __int128 v91 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser aceHost](self->_deviceOwner, "aceHost"));
  __int128 v92 = (void *)objc_claimAutoreleasedReturnValue([v18 aceHost]);
  id v93 = v91;
  id v94 = v92;
  if (v93 == v94)
  {

LABEL_112:
    goto LABEL_113;
  }

  uint64_t v95 = v94;
  if (!v93 || !v94)
  {

    goto LABEL_109;
  }

  __int128 v96 = [v93 isEqual:v94];

  if ((v96 & 1) == 0)
  {
LABEL_109:
    __int16 v97 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_INFO, "%s Updating companion aceHost", buf, 0xCu);
    }

    id v98 = self->_deviceOwner;
    id v93 = (id)objc_claimAutoreleasedReturnValue([v18 aceHost]);
    -[ADCommunalDeviceUser setAceHost:](v98, "setAceHost:", v93);
    id v82 = 1;
    goto LABEL_112;
  }

LABEL_113:
  __int16 v99 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser companionSyncMetadata](self->_deviceOwner, "companionSyncMetadata"));
  id v100 = (void *)objc_claimAutoreleasedReturnValue([v18 syncMetadata]);
  id v101 = v99;
  id v102 = v100;
  if (v101 == v102)
  {
  }

  else
  {
    __int16 v103 = v102;
    if (v101 && v102)
    {
      id v104 = [v101 isEqual:v102];

      if ((v104 & 1) != 0) {
        goto LABEL_124;
      }
    }

    else
    {
    }

    __int128 v105 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
    {
      __int128 v106 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_deviceOwner, "sharedUserID"));
      *(_DWORD *)__int128 buf = 136315395;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      id v121 = 2113;
      id v122 = v106;
      _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "%s Posting notification and updating companion sync metadata for deviceOwner (%{private}@)",  buf,  0x16u);
    }

    __int128 v107 = self->_deviceOwner;
    id v108 = (void *)objc_claimAutoreleasedReturnValue([v18 syncMetadata]);
    -[ADCommunalDeviceUser setCompanionSyncMetadata:](v107, "setCompanionSyncMetadata:", v108);

    id v101 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v101 postNotificationName:@"ADMultiUserSyncMetadataDidChangeNotification" object:self->_deviceOwner];
    uint64_t v21 = 1;
  }

LABEL_124:
  id v109 = -[ADCommunalDeviceUser companionSyncMetadataCapable](self->_deviceOwner, "companionSyncMetadataCapable");
  __int16 v17 = v117;
  uint64_t v16 = v118;
  if (v109 != [v18 syncMetadataCapability])
  {
    __int128 v110 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_INFO,  "%s Updating companion sync metadata capability",  buf,  0xCu);
    }

    -[ADCommunalDeviceUser setCompanionSyncMetadataCapable:]( self->_deviceOwner,  "setCompanionSyncMetadataCapable:",  [v18 syncMetadataCapability]);
    id v82 = 1;
  }

  uint64_t v111 = -[ADCommunalDeviceUser companionPeerToPeerHandoffCapable]( self->_deviceOwner,  "companionPeerToPeerHandoffCapable");
  if (v111 == [v18 peerToPeerHandoffCapability])
  {
    if (!v82) {
      goto LABEL_3;
    }
  }

  else
  {
    char v112 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMember"
             "Settings:loggingAllowed:]";
      _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_INFO,  "%s Updating companion sync metadata capability",  buf,  0xCu);
    }

    -[ADCommunalDeviceUser setCompanionPeerToPeerHandoffCapable:]( self->_deviceOwner,  "setCompanionPeerToPeerHandoffCapable:",  [v18 peerToPeerHandoffCapability]);
  }

  __int128 v113 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
  {
    id v114 = (id)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](self->_deviceOwner, "sharedUserID"));
    *(_DWORD *)__int128 buf = 136315395;
    id v120 = "-[ADMultiUserService _updateDeviceOwner:sharedUserId:enrollmentName:companionInfo:shareOwnerName:homeMemberSe"
           "ttings:loggingAllowed:]";
    id v121 = 2113;
    id v122 = v114;
    _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_INFO,  "%s Posting notification that companion device information/capabilities changed for deviceOwner: (%{private}@)",  buf,  0x16u);
  }

  id v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v115 postNotificationName:@"ADMultiUserSharedUserCompanionInfoChangedNotification" object:self->_deviceOwner];

  uint64_t v21 = 1;
LABEL_3:

  return v21;
}

LABEL_61:
        goto LABEL_71;
      }

      if (!v21)
      {
        __int128 v110 = 0;
        goto LABEL_68;
      }
    }

    else
    {
      id v86 = 0LL;
      if (!v21)
      {
        __int128 v110 = 0;
        goto LABEL_69;
      }
    }

    char v87 = v7;
    uint64_t v88 = v34;
    __int128 v89 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](self->_primaryUser, "iCloudAltDSID"));
    __int128 v110 = [v89 isEqualToString:v21];

    __int128 v34 = v88;
    uint64_t v7 = v87;
    if (!v86)
    {
LABEL_69:
      if (v84)
      {

        uint64_t v14 = v86;
        uint64_t v13 = v84;
        if ((v110 & 1) != 0) {
          goto LABEL_71;
        }
      }

      else
      {
        uint64_t v14 = v86;
        uint64_t v13 = 0LL;
        if (v110) {
          goto LABEL_71;
        }
      }

      id v104 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        __int128 v105 = v104;
        __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([0 homeUserUUID]);
        __int128 v107 = (void *)objc_claimAutoreleasedReturnValue([0 sharedUserID]);
        id v108 = (void *)objc_claimAutoreleasedReturnValue([0 iCloudAltDSID]);
        *(_DWORD *)__int128 buf = 136315907;
        uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
        __int128 v117 = 2113;
        uint64_t v118 = v106;
        __int128 v119 = 2113;
        id v120 = (uint64_t)v107;
        id v121 = 2113;
        id v122 = (uint64_t)v108;
        _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "%s Multi user not found for home User ID (%{private}@) shared User ID (%{private}@) iCloud AltDSID (%{private}@)",  buf,  0x2Au);
      }

      __int16 v17 = v112;
      __int16 v38 = a7;
      if (a7)
      {
        __int16 v39 = kAFAssistantErrorDomain;
        uint64_t v40 = 6001LL;
        goto LABEL_86;
      }

  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_txBytes));
  [v3 setObject:v35 forKey:@"tx_bytes"];

  has = self->_has;
  if ((*(_WORD *)&has & 0x800) == 0)
  {
LABEL_15:
    if ((*(_WORD *)&has & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }

  PBDataWriterWriteUint64Field(v5, self->_txUnacked, 23LL);
  has = self->_has;
  if ((*(_BYTE *)&has & 0x40) == 0)
  {
LABEL_17:
    if ((*(_BYTE *)&has & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }

  void v4[5] = self->_rxDuplicateBytes;
  *((_DWORD *)v4 + 53) |= 0x10u;
  has = self->_has;
  if ((*(_BYTE *)&has & 0x20) == 0)
  {
LABEL_20:
    if ((*(_BYTE *)&has & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_63;
  }

  __int128 v36 = 0LL;
  if ((*(_DWORD *)&has & 0x1000000) == 0) {
    goto LABEL_62;
  }
LABEL_45:
  __int128 v35 = 2654435761LL * self->_synRetransmits;
  if ((*(_DWORD *)&has & 0x800000) != 0)
  {
LABEL_46:
    __int128 v34 = 2654435761LL * self->_subflowCount;
    goto LABEL_64;
  }

  self->_txUnacked = *((void *)v4 + 13);
  *(_DWORD *)&self->_has |= 0x1000u;
  unint64_t v6 = *((_DWORD *)v4 + 53);
  if ((v6 & 0x40) == 0)
  {
LABEL_17:
    if ((v6 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }

LABEL_87:
      __int128 v83 = 0;
      goto LABEL_88;
    }

LABEL_68:
    goto LABEL_69;
  }

  id v114 = v13;
  __int16 v41 = (void *)AFSiriLogContextDaemon;
  id v42 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v42)
  {
    uint64_t v44 = v41;
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v12 homeUserUUID]);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedUserID]);
    id v47 = objc_claimAutoreleasedReturnValue([v12 iCloudAltDSID]);
    uint64_t v48 = v12;
    uint64_t v49 = v21;
    id v50 = self;
    uint64_t v51 = v17;
    double v52 = v34;
    id v53 = v14;
    id v54 = (void *)v47;
    *(_DWORD *)__int128 buf = 136315907;
    uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
    __int128 v117 = 2113;
    uint64_t v118 = v45;
    __int128 v119 = 2113;
    id v120 = (uint64_t)v46;
    id v121 = 2113;
    id v122 = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "%s Deleting shared user with home User ID (%{private}@) shared User ID (%{private}@) iCloud AltDSID: (%{private}@)",  buf,  0x2Au);

    uint64_t v14 = v53;
    __int128 v34 = v52;
    __int16 v17 = v51;
    self = v50;
    uint64_t v21 = v49;
    uint64_t v12 = v48;
  }

  if (AFIsATV(v42, v43)
    && +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled")
    && (uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService")),
        id v56 = [v55 userProfileExistsWithiCloudAltDSID:v21],
        v55,
        v56))
  {
    id v57 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
      _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "%s PB User profile still exists, preserve home member info.",  buf,  0xCu);
    }
  }

  else
  {
    id v58 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "%s PB User profile does not exist.", buf, 0xCu);
    }

    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v12 homeUserUUID]);

    if (v59)
    {
      sharedUsersByHomeUserUUID = self->_sharedUsersByHomeUserUUID;
      id v61 = (void *)objc_claimAutoreleasedReturnValue([v12 homeUserUUID]);
      -[NSMutableDictionary removeObjectForKey:](sharedUsersByHomeUserUUID, "removeObjectForKey:", v61);
    }

    id v62 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedUserID]);

    if (v62)
    {
      sharedUsersBySharedUserID = self->_sharedUsersBySharedUserID;
      id v64 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedUserID]);
      -[NSMutableDictionary removeObjectForKey:](sharedUsersBySharedUserID, "removeObjectForKey:", v64);
    }

    id v65 = (void *)objc_claimAutoreleasedReturnValue([v12 iCloudAltDSID]);

    if (v65)
    {
      sharedUsersByiCloudAltDSID = self->_sharedUsersByiCloudAltDSID;
      id v67 = (void *)objc_claimAutoreleasedReturnValue([v12 iCloudAltDSID]);
      -[NSMutableDictionary removeObjectForKey:](sharedUsersByiCloudAltDSID, "removeObjectForKey:", v67);
    }
  }

  -[ADMultiUserService _untrackUUIDsForUser:](self, "_untrackUUIDsForUser:", v12);
  uint64_t v68 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v69 = v68;
    id v70 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedUserID]);
    *(_DWORD *)__int128 buf = 136315395;
    uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
    __int128 v117 = 2113;
    uint64_t v118 = v70;
    _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "%s Posting notification that shared user with sharedUserId: (%{private}@) has been removed",  buf,  0x16u);
  }

  id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v71 postNotificationName:@"ADMultiUserSharedUserRemovedNotification" object:v12];

  id v72 = self->_voiceProfileManager;
  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedUserID]);
  __int128 v74 =  -[SSRVoiceProfileManager discardSiriEnrollmentForProfileId:forLanguageCode:]( v72,  "discardSiriEnrollmentForProfileId:forLanguageCode:",  v73,  0LL);

  id v75 = (void *)objc_claimAutoreleasedReturnValue([v12 sharedUserID]);
  id v76 = [v75 copy];
  -[ADMultiUserService _notifyRemoraClientsOfDeletedUser:](self, "_notifyRemoraClientsOfDeletedUser:", v76);

  uint64_t v13 = v114;
LABEL_48:
  if (AFIsATV(v77, v78)
    && +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled"))
  {
    __int128 v79 = v13;
    id v80 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136316163;
      uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
      __int128 v117 = 2113;
      uint64_t v118 = v14;
      __int128 v119 = 2113;
      id v120 = (uint64_t)v21;
      id v121 = 2113;
      id v122 = (uint64_t)v79;
      char v123 = 2048;
      id v124 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Tracking for OFF user with sharedUserID %{private}@, iCloudAltDSID %{private}@, homeUserID %{ private}@ Current state %ld.",  buf,  0x34u);
    }

    -[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]( self,  "triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:",  v21,  0LL,  0LL);
    id v81 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v116 = "-[ADMultiUserService _removeUser:homeUserID:sharedUserID:iCloudAltDSID:error:]";
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "%s Posting notification as RMV setting changed",  buf,  0xCu);
    }

    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification( DarwinNotifyCenter,  kAFRecognizeMyVoiceSettingChangedDarwinNotification,  0LL,  0LL,  1u);
    uint64_t v13 = v79;
  }

  notify_post(AFCachedFusePersonalizationTokenChanged);
  __int128 v83 = 1;
LABEL_88:

  return v83;
}

  id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  self->_sndBandwidth));
  [v3 setObject:v42 forKey:@"snd_bandwidth"];

  has = self->_has;
  if ((*(_DWORD *)&has & 0x1000000) == 0)
  {
LABEL_22:
    if ((*(_DWORD *)&has & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }

  PBDataWriterWriteUint32Field(v5, self->_subflowCount, 50LL);
  if ((*(_DWORD *)&self->_has & 0x4000) != 0) {
LABEL_24:
  }
    PBDataWriterWriteUint32Field(v5, self->_connectedSubflowCount, 51LL);
LABEL_25:
  primarySubflowIface = self->_primarySubflowIface;
  if (primarySubflowIface) {
    PBDataWriterWriteStringField(v5, primarySubflowIface, 52LL);
  }
  if ((*((_BYTE *)&self->_has + 2) & 4) != 0) {
    PBDataWriterWriteUint32Field(v5, self->_primarySubflowSwitchCount, 53LL);
  }
  connectionMethoduint64_t Name = self->_connectionMethodName;
  if (connectionMethodName) {
    PBDataWriterWriteStringField(v5, connectionMethodName, 54LL);
  }
  connectionEdgeIDuint64_t Name = self->_connectionEdgeIDName;
  if (connectionEdgeIDName) {
    PBDataWriterWriteStringField(v5, connectionEdgeIDName, 55LL);
  }
  connectionEdgeType = self->_connectionEdgeType;
  if (connectionEdgeType) {
    PBDataWriterWriteStringField(v5, connectionEdgeType, 56LL);
  }
  id v11 = self->_has;
  if ((*(_WORD *)&v11 & 0x8000) != 0)
  {
    PBDataWriterWriteUint32Field(v5, self->_connectionFallbackReason, 57LL);
    id v11 = self->_has;
  }

  if ((*(_WORD *)&v11 & 0x100) != 0) {
    PBDataWriterWriteDoubleField(v5, 58LL, self->_tuscanyConnectionDelay);
  }
  __int16 v19 = 0u;
  uint64_t v20 = 0u;
  __int16 v17 = 0u;
  uint64_t v18 = 0u;
  uint64_t v12 = self->_tcpInfoMetrics;
  uint64_t v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
  if (v13)
  {
    uint64_t v14 = v13;
    int v15 = *(void *)v18;
    do
    {
      uint64_t v16 = 0LL;
      do
      {
        if (*(void *)v18 != v15) {
          objc_enumerationMutation(v12);
        }
        PBDataWriterWriteSubmessage(v5, *(void *)(*((void *)&v17 + 1) + 8LL * (void)v16), 60LL);
        uint64_t v16 = (char *)v16 + 1;
      }

      while (v14 != v16);
      uint64_t v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
    }

    while (v14);
  }
}

  self->_subflowCount = *((_DWORD *)v4 + 47);
  *(_DWORD *)&self->_has |= 0x800000u;
  if ((*((_DWORD *)v4 + 53) & 0x4000) != 0)
  {
LABEL_24:
    self->_connectedSubflowCount = *((_DWORD *)v4 + 29);
    *(_DWORD *)&self->_has |= 0x4000u;
  }

void sub_1002868D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1002885E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10028C05C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _languageCodeDidChange:*(void *)(a1 + 40) forEndpointUUID:*(void *)(a1 + 48)];
}

void sub_10028C06C(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2[29] objectForKey:a1[5]]);
  uint64_t v4 = a1[5];
  id v7 = 0LL;
  [v2 _removeUser:v3 homeUserID:0 sharedUserID:v4 iCloudAltDSID:0 error:&v7];
  id v5 = v7;

  uint64_t v6 = a1[6];
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_10028C0F4(uint64_t a1)
{
  signed int v2 = [*(id *)(a1 + 32) intValue];
  uint64_t v3 = -[ADCommunalDeviceUser initWithDictionary:attribute:]( objc_alloc(&OBJC_CLASS___ADCommunalDeviceUser),  "initWithDictionary:attribute:",  *(void *)(a1 + 40),  v2);
  if (v2 == 4 || v2 == 1)
  {
    id v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v3, "sharedUserID"));
      *(_DWORD *)__int128 buf = 136315395;
      id v47 = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke";
      __int16 v48 = 2113;
      uint64_t v49 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s Shared User = %{private}@", buf, 0x16u);
    }

    id v8 = *(void **)(a1 + 48);
    if (!v8[29])
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v10 = *(void *)(a1 + 48);
      id v11 = *(void **)(v10 + 232);
      *(void *)(v10 + 232) = v9;

      id v8 = *(void **)(a1 + 48);
    }

    if (!v8[37])
    {
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void **)(v13 + 296);
      *(void *)(v13 + 296) = v12;

      id v8 = *(void **)(a1 + 48);
    }

    if (!v8[38])
    {
      uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v16 = *(void *)(a1 + 48);
      __int16 v17 = *(void **)(v16 + 304);
      *(void *)(v16 + 304) = v15;

      id v8 = *(void **)(a1 + 48);
    }

    if (!v8[36])
    {
      uint64_t v18 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void **)(v19 + 288);
      *(void *)(v19 + 28_Block_object_dispose(va, 8) = v18;

      id v8 = *(void **)(a1 + 48);
    }

    uint64_t v21 = (void *)v8[29];
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v3, "sharedUserID"));
    [v21 setObject:v3 forKey:v22];

    uint64_t v23 = *(void **)(*(void *)(a1 + 48) + 296LL);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser homeUserUUID](v3, "homeUserUUID"));
    [v23 setObject:v3 forKey:v24];

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](v3, "iCloudAltDSID"));
    if (v25)
    {
      int v26 = *(void **)(*(void *)(a1 + 48) + 304LL);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser iCloudAltDSID](v3, "iCloudAltDSID"));
      [v26 setObject:v3 forKey:v27];
    }

    goto LABEL_18;
  }

  if (v2)
  {
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6002LL,  @"Unsupported attribute type"));
    if (v35) {
      goto LABEL_23;
    }
    goto LABEL_20;
  }

  __int128 v36 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v47 = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "%s Primary User", buf, 0xCu);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 48) + 240LL), v3);
  objc_storeStrong((id *)(*(void *)(a1 + 48) + 248LL), *(id *)(*(void *)(a1 + 48) + 240LL));
  id v37 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v3, "sharedUserID"));

  if (v37)
  {
    __int16 v38 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      __int16 v39 = v38;
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v3, "sharedUserID"));
      *(_DWORD *)__int128 buf = 136315395;
      id v47 = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke";
      __int16 v48 = 2113;
      uint64_t v49 = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "%s %{private}@", buf, 0x16u);
    }

    __int16 v28 = *(void **)(*(void *)(a1 + 48) + 288LL);
    if (v28) {
      goto LABEL_19;
    }
    __int16 v41 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v42 = *(void *)(a1 + 48);
    __int16 v43 = *(void **)(v42 + 288);
    *(void *)(v42 + 28_Block_object_dispose(va, 8) = v41;

LABEL_18:
    __int16 v28 = *(void **)(*(void *)(a1 + 48) + 288LL);
LABEL_19:
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(-[ADCommunalDeviceUser sharedUserID](v3, "sharedUserID"));
    [v28 addObject:v29];
  }

void sub_10028C5A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 280);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10028C63C;
  block[3] = &unk_1004FD4C0;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v7 = v3;
  dispatch_async(v6, block);
}

id sub_10028C63C(uint64_t a1)
{
  signed int v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)&void v14[4] = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke_2";
    *(_WORD *)&v14[12] = 2112;
    *(void *)&v14[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s userSettings:\n%@", v14, 0x16u);
  }

  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 32LL), v6);
    id v7 = *(void **)(a1 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) homeUserUUID]);
    unsigned int v9 = [v7 _updateHomeKitSettings:v8];

    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v11 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
    if (v9)
    {
      if (v11)
      {
        *(_DWORD *)uint64_t v14 = 136315138;
        *(void *)&void v14[4] = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke";
        uint64_t v12 = "%s update succeeded";
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, v12, v14, 0xCu);
      }
    }

    else if (v11)
    {
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)&void v14[4] = "-[ADMultiUserService addCommunalDeviceUser:withAttribute:completion:]_block_invoke";
      uint64_t v12 = "%s update failed";
      goto LABEL_9;
    }
  }

  objc_msgSend(*(id *)(a1 + 40), "_saveSharedUsers", *(_OWORD *)v14);
  return [*(id *)(a1 + 40) _updateSAMultiUserInfo];
}

void sub_10028C7F0(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 240LL)) {
    goto LABEL_2;
  }
  if (![*(id *)(a1 + 40) intValue])
  {
    id v3 = -[ADCommunalDeviceUser initWithDictionary:attribute:]( objc_alloc(&OBJC_CLASS___ADCommunalDeviceUser),  "initWithDictionary:attribute:",  *(void *)(a1 + 48),  0LL);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 248);
    *(void *)(v4 + 24_Block_object_dispose(va, 8) = v3;

    [*(id *)(*(void *)(a1 + 32) + 248) setVoiceIDAllowedByUser:0];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) dictionaryRepresentation]);
    [v6 setDeviceOwner:v7];

LABEL_2:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    return;
  }

  uint64_t v2 = *(void *)(a1 + 56);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6002LL,  @"User is not a device owner"));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v8);
}

void sub_10028C904(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _refreshClientsWithMeCard:]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

id sub_10028C9F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _refreshClientsWithMeCard:*(void *)(a1 + 40)];
}

void sub_10028C9FC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _refreshClientWithMultiUserData:]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10028CAE8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _refreshClientWithMultiUserData:]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10028CBD4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _refreshClientWithMultiUserData:]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10028CCC0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _notifyRemoraClientsOfDeletedUser:]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10028CDAC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _notifyRemoraClientsOfUpdatedUser:]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_10028CE98(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    id v3 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = v3;
      id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v2, "description"));
      int v6 = 136315394;
      id v7 = "-[ADMultiUserService _notifyRemoraClientsOfDeviceOwner]_block_invoke";
      __int16 v8 = 2112;
      unsigned int v9 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s Error:%@", (uint8_t *)&v6, 0x16u);
    }
  }
}

id sub_10028CF84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _refreshClientWithMultiUserData:*(void *)(a1 + 40)];
}

void sub_10028CF90(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointUUID]);
  id v3 = *(void **)(*(void *)(a1 + 40) + 184LL);
  if (v3) {
    [v3 removeObjectForKey:v2];
  }
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v10 = 136315394;
    BOOL v11 = "-[ADMultiUserService homehubManager:didDeactivateEndpointWithContext:]_block_invoke";
    __int16 v12 = 2112;
    uint64_t v13 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Remove languageCode for endpointUUID %@",  (uint8_t *)&v10,  0x16u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accessoriesLanguages]);
  id v7 = [v6 mutableCopy];

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);
  [v7 removeObjectForKey:v8];

  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  [v9 setAccessoriesLangauges:v7];
}

void sub_10028D0EC(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 184LL))
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 184);
    *(void *)(v3 + 184) = v2;
  }

  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) endpointUUID]);
  id v5 = *(void **)(*(void *)(a1 + 32) + 184LL);
  id v6 = [[SHAFMultiUserRemoraConnection alloc] initWithInstanceContext:*(void *)(a1 + 40)];
  [v5 setObject:v6 forKey:v7];
}

uint64_t sub_10028D180(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10028D190(uint64_t a1)
{
}

void sub_10028D198(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2[3] sharedUserId]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [v2 _confidenceScoreForSharedUserID:v3 expectedSpeakerSharedUserID:*(void *)(a1 + 40) expectedSpeakerConfidenceScore:*(void *)(a1 + 64) confidenceScores:*(void *)(a1 + 48)]);

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v4];
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 240);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedUserID]);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue( [(id)v5 _confidenceScoreForSharedUserID:v7 expectedSpeakerSharedUserID:*(void *)(a1 + 40) expectedSpeakerConfidenceScore:*(void *)(a1 + 64) confidenceScores:*(void *)(a1 + 48)]);

    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v8];
    uint64_t v5 = *(void *)(a1 + 32);
  }

  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v9 = *(id *)(v5 + 232);
  id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      uint64_t v13 = 0LL;
      do
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_confidenceScoreForSharedUserID:expectedSpeakerSharedUserID:expectedSpeakerConfidenceScore:confidenceScores:",  *(void *)(*((void *)&v15 + 1) + 8 * (void)v13),  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(a1 + 48),  (void)v15));
        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v14];

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v11);
  }
}

void sub_10028D358(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315394;
    id v9 = "-[ADMultiUserService getSharedUserIdForiCloudAltDSID:completion:]_block_invoke";
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Looked up user in ADMultiUserService %@",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedUserId]);

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedUserId]);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADCloudKitManager sharedManager](&OBJC_CLASS___ADCloudKitManager, "sharedManager"));
    [v7 fetchSharedUserIdForiCloudAltDSID:*(void *)(a1 + 32) completion:*(void *)(a1 + 40)];
  }
}

void sub_10028D484(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 240) iCloudAltDSID]);
    unsigned int v4 = [v2 isEqualToString:v3];

    if (v4)
    {
      id v5 = *(id *)(a1[5] + 240LL);
      id v6 = *(id *)(a1[5] + 152LL);
      if (v5)
      {
LABEL_4:
        id v7 = sub_10028D5DC(v5, v6);
        id v16 = (id)objc_claimAutoreleasedReturnValue(v7);
LABEL_11:

        id v8 = v16;
        goto LABEL_12;
      }
    }

    else
    {
      id v9 = (void *)a1[4];
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 248) iCloudAltDSID]);
      LODWORD(v9) = [v9 isEqualToString:v10];

      uint64_t v11 = a1[5];
      if ((_DWORD)v9)
      {
        id v5 = *(id *)(v11 + 248);
        uint64_t v12 = a1[5];
        uint64_t v13 = *(void **)(v12 + 160);
        uint64_t v14 = *(void **)(v12 + 248);
      }

      else
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 304) objectForKeyedSubscript:a1[4]]);
        id v5 = v14;
        uint64_t v13 = *(void **)(a1[5] + 160LL);
      }

      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sharedUserID]);
      id v6 = (id)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v15]);

      if (v5) {
        goto LABEL_4;
      }
    }

    id v16 = 0LL;
    goto LABEL_11;
  }

  id v8 = 0LL;
LABEL_12:
  id v17 = v8;
  (*(void (**)(void))(a1[6] + 16LL))();
}

id sub_10028D5DC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = sub_10028D6F8(v3, a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
  id v7 = [v6 isReady];

  id v8 = objc_alloc(&OBJC_CLASS___AFSharedUserInfo);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedUserID]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v3 loggableSharedUserID]);
  id v11 = [v3 personalDomainsIsEnabled];
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 homeUserUUID]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 iCloudAltDSID]);

  id v14 = [v8 initWithSharedUserId:v9 loggableSharedUserId:v10 companionDeviceInfo:v5 personalRequestsEnabled:v11 companionLinkReady:v7 homeU serId:v12 iCloudAltDSID:v13];
  return v14;
}

id sub_10028D6F8(void *a1, void *a2)
{
  id v19 = a2;
  id v3 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 productPrefix]);
  uint64_t v5 = productTypeFromUserAgentString(v4);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v5);

  char v18 = AFDoesProductTypeSupportMUX(v20);
  id v6 = objc_alloc(&OBJC_CLASS___AFCompanionDeviceInfo);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 companionAssistantID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 companionSpeechID]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 companionIDSIdentifier]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v3 productPrefix]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 aceHost]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 companionSyncMetadata]);
  unsigned __int8 v13 = [v3 companionSyncMetadataCapable];
  unsigned __int8 v14 = [v3 companionPeerToPeerHandoffCapable];

  BYTE3(v17) = 1;
  BYTE2(v17) = v18;
  BYTE1(v17) = v14;
  LOBYTE(v17) = v13;
  id v15 = objc_msgSend( v6,  "initWithAssistantID:speechID:idsIdentifier:productPrefix:aceHost:syncMetadata:syncMetadataCapability:peerToPee rHandoffCapability:muxSupportCapability:meDevice:siriLanguage:",  v7,  v8,  v9,  v10,  v11,  v12,  v17,  v19);

  return v15;
}

void sub_10028D870(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 240) sharedUserID]);
    unsigned int v4 = [v2 isEqualToString:v3];

    if (v4)
    {
      id v5 = *(id *)(a1[5] + 240LL);
      id v6 = *(id *)(a1[5] + 152LL);
    }

    else
    {
      id v8 = (void *)a1[4];
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 248) sharedUserID]);
      LODWORD(v_Block_object_dispose(va, 8) = [v8 isEqualToString:v9];

      uint64_t v10 = a1[5];
      if ((_DWORD)v8) {
        id v11 = *(id *)(v10 + 248);
      }
      else {
        id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v10 + 232) objectForKeyedSubscript:a1[4]]);
      }
      id v5 = v11;
      id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 160) objectForKeyedSubscript:a1[4]]);
    }

    uint64_t v12 = v6;
    if (v5)
    {
      id v13 = sub_10028D5DC(v5, v6);
      id v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    }

    else
    {
      id v14 = 0LL;
    }

    id v7 = v14;
  }

  else
  {
    id v7 = 0LL;
  }

  id v15 = v7;
  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_10028D99C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  unsigned int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10028D9D8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uppercaseString]);
  uint64_t v3 = *(void *)(a1 + 40);
  unsigned int v4 = *(void **)(v3 + 240);
  if (!v4) {
    goto LABEL_6;
  }
  id v5 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v29 = "-[ADMultiUserService getIDSIdentifierForAssistantId:completion:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s Primary user present", buf, 0xCu);
    unsigned int v4 = *(void **)(*(void *)(a1 + 40) + 240LL);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 companionAssistantID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uppercaseString]);
  unsigned int v8 = [v7 isEqualToString:v2];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 240) companionIDSIdentifier]);
    (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v10, 0LL);
  }

  else
  {
LABEL_6:
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v10 = *(id *)(v3 + 232);
    id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v24;
      while (2)
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 40) + 232),  "objectForKey:",  *(void *)(*((void *)&v23 + 1) + 8 * (void)i),  (void)v23));
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 companionAssistantID]);
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 uppercaseString]);
          unsigned int v18 = [v17 isEqualToString:v2];

          if (v18)
          {
            uint64_t v20 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315138;
              __int128 v29 = "-[ADMultiUserService getIDSIdentifierForAssistantId:completion:]_block_invoke";
              _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s Second user match found",  buf,  0xCu);
            }

            uint64_t v21 = *(void *)(a1 + 48);
            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v15 companionIDSIdentifier]);
            (*(void (**)(uint64_t, void *, void))(v21 + 16))(v21, v22, 0LL);

            goto LABEL_20;
          }
        }

        id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    id v19 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v29 = "-[ADMultiUserService getIDSIdentifierForAssistantId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%s Primary user not present or home user not found",  buf,  0xCu);
    }

    id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct,  (void)v23));
    (*(void (**)(void, void, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL, v10);
  }

void sub_10028DD38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 preferredMediaUserInfo]);

  if (*(void *)(a1 + 32))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 preferredMediaUserSharedUserIDByAccessoryUUID]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:*(void *)(a1 + 32)]);

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 preferredMediaUserHomeUserIDByAccessoryUUID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:*(void *)(a1 + 32)]);
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 preferredMediaUserSharedUserID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 preferredMediaUserHomeUserID]);
  }

  unsigned int v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315651;
    unsigned int v18 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
    __int16 v19 = 2113;
    uint64_t v20 = v7;
    __int16 v21 = 2113;
    __int16 v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s preferredMediaUserHomeUserID: (%{private}@), preferredMediaUserSharedUserID: (%{private}@)",  buf,  0x20u);
  }

  if (v5)
  {
    uint64_t v9 = *(void **)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _OWORD v13[2] = sub_10028E030;
    v13[3] = &unk_1004FAC58;
    void v13[4] = v9;
    id v14 = v5;
    id v16 = *(id *)(a1 + 48);
    id v15 = v7;
    [v9 getHomeUserIdForSharedUserId:v14 completion:v13];
  }

  else
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (v7)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315395;
        unsigned int v18 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
        __int16 v19 = 2113;
        uint64_t v20 = v7;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Not setup for MultiUser, preferredMediaUserHomeUserID is (%{private}@)",  buf,  0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        unsigned int v18 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to determine preferred media user, missing sharedUserID and homeUserID",  buf,  0xCu);
      }

      uint64_t v11 = *(void *)(a1 + 48);
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6200LL,  @"Missing sharedUserID and homeUserID"));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);
    }
  }
}

void sub_10028E030(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  unsigned int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 280LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10028E114;
  block[3] = &unk_1004FCBB0;
  id v12 = v6;
  id v13 = v7;
  id v14 = v5;
  id v16 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 48);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_10028E114(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (!v2)
  {
    id v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = a1[5];
      uint64_t v11 = a1[6];
      int v14 = 136315651;
      id v15 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke_2";
      __int16 v16 = 2113;
      uint64_t v17 = v10;
      __int16 v18 = 2113;
      uint64_t v19 = v11;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s preferredMediaUserSharedUserID (%{private}@) enrolled in MultiUser. Preferred user is (%{private}@)",  (uint8_t *)&v14,  0x20u);
    }

    id v6 = *(void (**)(void))(a1[8] + 16LL);
    goto LABEL_15;
  }

  id v3 = [v2 code];
  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3 != (id)6001)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      int v14 = 136315394;
      id v15 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
      __int16 v16 = 2112;
      uint64_t v17 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unexpected error %@",  (uint8_t *)&v14,  0x16u);
    }

    id v6 = *(void (**)(void))(a1[8] + 16LL);
    goto LABEL_15;
  }

  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = a1[5];
    int v14 = 136315395;
    id v15 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
    __int16 v16 = 2113;
    uint64_t v17 = v12;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s preferredMediaUserSharedUserID is (%{private}@) and is not enrolled in MultiUser",  (uint8_t *)&v14,  0x16u);
    unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  }

  uint64_t v5 = a1[7];
  if (v5)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v14 = 136315395;
      id v15 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
      __int16 v16 = 2113;
      uint64_t v17 = v5;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s preferredMediaUserHomeUserID is (%{private}@)",  (uint8_t *)&v14,  0x16u);
    }

    id v6 = *(void (**)(void))(a1[8] + 16LL);
LABEL_15:
    v6();
    return;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v14 = 136315138;
    id v15 = "-[ADMultiUserService getPreferredMediaUserHomeUserIDForAccessoryUUID:completion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to determine preferred media user",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v8 = a1[8];
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6200LL,  @"Unable to determine the preferred media user for either MultiUser or SingleUser mode"));
  (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
}

void sub_10028E3F8(void *a1)
{
  id v2 = [*(id *)(a1[4] + 296) count];
  uint64_t v3 = a1[4];
  unsigned int v4 = *(void **)(v3 + 240);
  if (v2)
  {
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }

  if (v4)
  {
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 sharedUserID]);
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v3 = a1[4];
    if (v6)
    {
      id v7 = *(id *)(v3 + 240);
LABEL_8:
      uint64_t v8 = v7;
      if (v7)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 audioAppSignals]);
        uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136315394;
          uint64_t v17 = "-[ADMultiUserService getMultiUserAudioAppSignalsForSharedUserID:completion:]_block_invoke";
          __int16 v18 = 2112;
          uint64_t v19 = v9;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s User found, returning bag: %@",  (uint8_t *)&v16,  0x16u);
        }

        (*(void (**)(void))(a1[6] + 16LL))();
      }

      else
      {
        uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          int v16 = 136315138;
          uint64_t v17 = "-[ADMultiUserService getMultiUserAudioAppSignalsForSharedUserID:completion:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s User not found",  (uint8_t *)&v16,  0xCu);
        }

        uint64_t v12 = a1[6];
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6001LL,  0LL));
        (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v13);

        id v9 = 0LL;
      }

      goto LABEL_16;
    }

void sub_10028E684(void *a1)
{
  id v2 = [*(id *)(a1[4] + 296) count];
  uint64_t v3 = a1[4];
  unsigned int v4 = *(void **)(v3 + 240);
  if (v2)
  {
    if (!v4) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }

  if (v4)
  {
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 sharedUserID]);
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v3 = a1[4];
    if (v6)
    {
      id v7 = *(id *)(v3 + 240);
      goto LABEL_8;
    }

void sub_10028EA30(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _selectedSharedUserID]);

  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v19 = 136315395;
    uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
    __int16 v21 = 2113;
    __int16 v22 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Found currently recognized user sharedUserID: %{private}@",  (uint8_t *)&v19,  0x16u);
  }

  if ([v3 length])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = *(void **)(v5 + 240);
    if (!v6) {
      goto LABEL_9;
    }
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = v7;
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedUserID]);
      int v19 = 136315395;
      uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
      __int16 v21 = 2113;
      __int16 v22 = v18;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s Checking if it matches that of primary user: %{private}@",  (uint8_t *)&v19,  0x16u);

      unsigned int v6 = *(void **)(*(void *)(a1 + 32) + 240LL);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedUserID]);
    unsigned int v9 = [v8 isEqualToString:v3];

    uint64_t v5 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 240) companionAssistantID]);
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0LL);
    }

    else
    {
LABEL_9:
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 232) objectForKey:v3]);
      uint64_t v11 = v12;
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 companionAssistantID]);
        (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v14, 0LL);
      }

      else
      {
        int v16 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315138;
          uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s companionAssistantID not found",  (uint8_t *)&v19,  0xCu);
        }

        int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL, v14);
      }
    }
  }

  else
  {
    uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getCompanionAssistantIdForRecognizedUser:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s No selectedSharedUserID found, returning nil",  (uint8_t *)&v19,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10028ED5C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _selectedSharedUserID]);

  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315395;
    uint64_t v11 = "-[ADMultiUserService getMultiUserSettingsForRecognizedUserWithCompletion:]_block_invoke";
    __int16 v12 = 2113;
    uint64_t v13 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Found currently recognized user sharedUserID: %{private}@",  (uint8_t *)&v10,  0x16u);
    if (v3) {
      goto LABEL_7;
    }
  }

  else if (v3)
  {
    goto LABEL_7;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
  unsigned int v6 = [v5 hasTestUserSelectionScores];

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v7 getClassifiedUser]);

    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 136315394;
      uint64_t v11 = "-[ADMultiUserService getMultiUserSettingsForRecognizedUserWithCompletion:]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Overriding selectedSharedUserID using debug voice id scores: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

void sub_10028EF5C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _selectedSharedUserID]);

  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v19 = 136315395;
    uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
    __int16 v21 = 2113;
    __int16 v22 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Found currently recognized user sharedUserID: %{private}@",  (uint8_t *)&v19,  0x16u);
  }

  if ([v3 length])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    unsigned int v6 = *(void **)(v5 + 240);
    if (!v6) {
      goto LABEL_9;
    }
    id v7 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = v7;
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedUserID]);
      int v19 = 136315395;
      uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
      __int16 v21 = 2113;
      __int16 v22 = v18;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s Checking if it matches that of primary user: %{private}@",  (uint8_t *)&v19,  0x16u);

      unsigned int v6 = *(void **)(*(void *)(a1 + 32) + 240LL);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedUserID]);
    unsigned int v9 = [v8 isEqualToString:v3];

    uint64_t v5 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 240) iCloudAltDSID]);
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0LL);
    }

    else
    {
LABEL_9:
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 232) objectForKey:v3]);
      uint64_t v11 = v12;
      if (v12)
      {
        uint64_t v13 = *(void *)(a1 + 40);
        int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 iCloudAltDSID]);
        (*(void (**)(uint64_t, void *, void))(v13 + 16))(v13, v14, 0LL);
      }

      else
      {
        int v16 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315138;
          uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%s iCloudAltDSID not found",  (uint8_t *)&v19,  0xCu);
        }

        int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL, v14);
      }
    }
  }

  else
  {
    uint64_t v15 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getiCloudAltDSIDOfRecognizedUserWithCompletion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s No selectedSharedUserID found, returning nil",  (uint8_t *)&v19,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10028F288(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _selectedSharedUserID]);

  unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v28 = 136315395;
    __int128 v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
    __int16 v30 = 2113;
    uint64_t v31 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Found currently recognized user sharedUserID: %{private}@",  (uint8_t *)&v28,  0x16u);
    if (v3) {
      goto LABEL_13;
    }
  }

  else if (v3)
  {
    goto LABEL_13;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
  unsigned int v6 = [v5 hasTestUserSelectionScores];

  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserTestSupport sharedService](&OBJC_CLASS___ADMultiUserTestSupport, "sharedService"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v7 getClassifiedUser]);

    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v28 = 136315394;
      __int128 v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
      __int16 v30 = 2112;
      uint64_t v31 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Overriding selectedSharedUserID using debug voice id scores: %@",  (uint8_t *)&v28,  0x16u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (!*(void *)(v9 + 240))
    {
      uint64_t v10 = *(void **)(v9 + 248);
      if (v10)
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedUserID]);
        unsigned int v12 = [v11 isEqualToString:v3];

        if (v12)
        {
          uint64_t v13 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            int v28 = 136315138;
            __int128 v29 = "-[ADMultiUserService getHomeUserIdOfRecognizedUserWithCompletion:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s Primary user not present, falling back to use _deviceOwner",  (uint8_t *)&v28,  0xCu);
          }

          uint64_t v14 = *(void *)(a1 + 40);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) homeUserUUID]);
          (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v15, 0LL);

          goto LABEL_29;
        }
      }
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

void sub_10028F6F0(uint64_t a1)
{
  id v37 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 240);
  if (v3)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 iCloudAltDSID]);
    uint64_t v5 = objc_alloc(&OBJC_CLASS___NSDictionary);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
    uint64_t v7 = kAFMultiUserSharedUserIdKey;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) loggableMusicSyncSharedUserID]);
    uint64_t v9 = -[NSDictionary initWithObjectsAndKeys:]( v5,  "initWithObjectsAndKeys:",  v6,  v7,  v8,  kAFMultiUserConformingSharedUserIdKey,  0LL);

    if (!v4) {
      goto LABEL_12;
    }
    if (!AFIsHorseman(v10))
    {
      uint64_t v11 = _AFPreferencesSiriRMVSetting(v4);
      unsigned int v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_10;
      }
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v46 = "-[ADMultiUserService getRecognizableUsersConfromingSharedUserIds:]_block_invoke";
      __int16 v47 = 2048;
      uint64_t v48 = v11;
      uint64_t v13 = "%s Primary user present. RmV enabled: %ld";
      goto LABEL_29;
    }

    goto LABEL_11;
  }

  uint64_t v14 = *(void **)(v2 + 248);
  if (v14)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v14 iCloudAltDSID]);
    uint64_t v15 = objc_alloc(&OBJC_CLASS___NSDictionary);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) sharedUserID]);
    uint64_t v17 = kAFMultiUserSharedUserIdKey;
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) loggableMusicSyncSharedUserID]);
    uint64_t v9 = -[NSDictionary initWithObjectsAndKeys:]( v15,  "initWithObjectsAndKeys:",  v16,  v17,  v18,  kAFMultiUserConformingSharedUserIdKey,  0LL);

    if (!v4) {
      goto LABEL_12;
    }
    if (!AFIsHorseman(v19))
    {
      uint64_t v11 = _AFPreferencesSiriRMVSetting(v4);
      unsigned int v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_10;
      }
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v46 = "-[ADMultiUserService getRecognizableUsersConfromingSharedUserIds:]_block_invoke";
      __int16 v47 = 2048;
      uint64_t v48 = v11;
      uint64_t v13 = "%s Device Owner present. RmV enabled: %ld";
LABEL_29:
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v13, buf, 0x16u);
LABEL_10:
      if (v11 == 1) {
        goto LABEL_11;
      }
LABEL_12:

      uint64_t v2 = *(void *)(a1 + 32);
      goto LABEL_13;
    }

void sub_10028FB74(uint64_t a1)
{
  id v36 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 240))
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      __int128 v42 = "-[ADMultiUserService getConformingSharedUserIds:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Primary user present", buf, 0xCu);
    }

    unsigned int v4 = objc_alloc(&OBJC_CLASS___NSDictionary);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
    uint64_t v6 = kAFMultiUserSharedUserIdKey;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) loggableMusicSyncSharedUserID]);
    uint64_t v8 = -[NSDictionary initWithObjectsAndKeys:]( v4,  "initWithObjectsAndKeys:",  v5,  v6,  v7,  kAFMultiUserConformingSharedUserIdKey,  0LL);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) homeUserUUID]);
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 240LL);
    goto LABEL_11;
  }

  if (!*(void *)(v2 + 248)) {
    goto LABEL_13;
  }
  uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int128 v42 = "-[ADMultiUserService getConformingSharedUserIds:]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%s Device owner present", buf, 0xCu);
  }

  unsigned int v12 = objc_alloc(&OBJC_CLASS___NSDictionary);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) sharedUserID]);
  uint64_t v14 = kAFMultiUserSharedUserIdKey;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) loggableMusicSyncSharedUserID]);
  uint64_t v8 = -[NSDictionary initWithObjectsAndKeys:]( v12,  "initWithObjectsAndKeys:",  v13,  v14,  v15,  kAFMultiUserConformingSharedUserIdKey,  0LL);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 248) homeUserUUID]);
  if (v16)
  {
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 248LL);
LABEL_11:
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v10 homeUserUUID]);
    -[NSMutableDictionary setObject:forKey:](v36, "setObject:forKey:", v8, v17);
  }

void sub_10028FFD8(void *a1)
{
  uint64_t v2 = (id *)a1[4];
  id v3 = v2[30];
  if (v3)
  {
    unsigned int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getConformingSharedUserIdForHomeUserId:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Primary user present",  (uint8_t *)&v19,  0xCu);
      id v3 = *(id *)(a1[4] + 240LL);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 homeUserUUID]);
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v2 = (id *)a1[4];
    if (v6)
    {
      uint64_t v7 = a1[6];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2[30] sharedUserID]);
      uint64_t v9 = *(void **)(a1[4] + 240LL);
LABEL_11:
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 loggableMusicSyncSharedUserID]);
      (*(void (**)(uint64_t, void *, void *, void))(v7 + 16))(v7, v8, v14, 0LL);
      goto LABEL_17;
    }
  }

  else
  {
    id v10 = v2[31];
    if (v10)
    {
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v19 = 136315138;
        uint64_t v20 = "-[ADMultiUserService getConformingSharedUserIdForHomeUserId:completion:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s Device owner present",  (uint8_t *)&v19,  0xCu);
        id v10 = *(id *)(a1[4] + 248LL);
      }

      unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v10 homeUserUUID]);
      unsigned int v13 = [v12 isEqualToString:a1[5]];

      uint64_t v2 = (id *)a1[4];
      if (v13)
      {
        uint64_t v7 = a1[6];
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2[31] sharedUserID]);
        uint64_t v9 = *(void **)(a1[4] + 248LL);
        goto LABEL_11;
      }
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v2[37] objectForKey:a1[5]]);
  if (v15)
  {
    uint64_t v8 = v15;
    uint64_t v16 = a1[6];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v15 sharedUserID]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 loggableMusicSyncSharedUserID]);
    (*(void (**)(uint64_t, void *, void *, void))(v16 + 16))(v16, v14, v17, 0LL);
  }

  else
  {
    id v18 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315138;
      uint64_t v20 = "-[ADMultiUserService getConformingSharedUserIdForHomeUserId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%s Primary user not present or sharedUserId not found",  (uint8_t *)&v19,  0xCu);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
    (*(void (**)(void))(a1[6] + 16LL))();
    uint64_t v8 = 0LL;
  }

void sub_1002902C4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 240) sharedUserID]);
  LODWORD(v2) = [v2 isEqualToString:v3];

  uint64_t v4 = a1[5];
  if ((_DWORD)v2) {
    id v5 = *(id *)(v4 + 240);
  }
  else {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 232) objectForKey:a1[4]]);
  }
  id v14 = v5;
  if (v5)
  {
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommunalDeviceUser saHomeMemberInfo:]( &OBJC_CLASS___ADCommunalDeviceUser,  "saHomeMemberInfo:",  v5));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 homeMemberSettings]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 meCard]);

    if (v8 && (uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 firstName]), v9, v9))
    {
      uint64_t v10 = a1[6];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 firstName]);
      (*(void (**)(uint64_t, void *, void))(v10 + 16))(v10, v11, 0LL);
    }

    else
    {
      uint64_t v13 = a1[6];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6008LL,  &__NSDictionary0__struct));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v11);
    }
  }

  else
  {
    uint64_t v12 = a1[6];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v8);
  }
}

void sub_10029045C(uint64_t a1)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v24;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "iTunesAltDSID", (void)v23));
        unsigned int v9 = [v8 isEqualToString:*(void *)(a1 + 40)];

        if (v9)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 iCloudAltDSID]);
          if (v10)
          {
            uint64_t v11 = *(void *)(a1 + 48);
            uint64_t v12 = *(void **)(v11 + 240);
            if (v12)
            {
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 iCloudAltDSID]);
              unsigned int v14 = [v13 isEqualToString:v10];

              uint64_t v11 = *(void *)(a1 + 48);
              if (v14)
              {
                uint64_t v15 = *(void **)(a1 + 56);
                uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 240) sharedUserID]);
                id v17 = [v16 copy];
                [v15 addObject:v17];
                goto LABEL_13;
              }
            }

            id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v11 + 304) objectForKey:v10]);
            uint64_t v16 = v18;
            if (v18)
            {
              int v19 = *(void **)(a1 + 56);
              id v17 = (id)objc_claimAutoreleasedReturnValue([v18 sharedUserID]);
              id v20 = [v17 copy];
              [v19 addObject:v20];

LABEL_13:
            }
          }

          continue;
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v23 objects:v29 count:16];
    }

    while (v4);
  }

  if ([*(id *)(a1 + 56) count])
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    uint64_t v21 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      int v28 = "-[ADMultiUserService getSharedUserIdsForiTunesAltDSID:completion:]_block_invoke";
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s SharedUserIds not found", buf, 0xCu);
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct,  (void)v23));
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

void sub_1002906F8(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 240);
  if (v3)
  {
    id v4 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      id v18 = v4;
      int v19 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedUserID]);
      int v22 = 136315395;
      __int128 v23 = "-[ADMultiUserService getSharedUserIdForHomeUserId:completion:]_block_invoke";
      __int16 v24 = 2113;
      __int128 v25 = v19;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s Primary user present with sharedUserId = %{private}@",  (uint8_t *)&v22,  0x16u);

      id v3 = *(void **)(a1[4] + 240LL);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 homeUserUUID]);
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    uint64_t v2 = a1[4];
    if (v6)
    {
      uint64_t v7 = a1[6];
      uint64_t v8 = *(void **)(v2 + 240);
LABEL_11:
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 sharedUserID]);
      (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v13, 0LL);
      goto LABEL_18;
    }
  }

  else
  {
    unsigned int v9 = *(void **)(v2 + 248);
    if (v9)
    {
      uint64_t v10 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        id v20 = v10;
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v9 sharedUserID]);
        int v22 = 136315395;
        __int128 v23 = "-[ADMultiUserService getSharedUserIdForHomeUserId:completion:]_block_invoke";
        __int16 v24 = 2113;
        __int128 v25 = v21;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s Device owner present with sharedUserId = %{private}@",  (uint8_t *)&v22,  0x16u);

        unsigned int v9 = *(void **)(a1[4] + 248LL);
      }

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 homeUserUUID]);
      unsigned int v12 = [v11 isEqualToString:a1[5]];

      uint64_t v2 = a1[4];
      if (v12)
      {
        uint64_t v7 = a1[6];
        uint64_t v8 = *(void **)(v2 + 248);
        goto LABEL_11;
      }
    }
  }

  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 296) objectForKey:a1[5]]);
  uint64_t v13 = v14;
  if (v14)
  {
    uint64_t v15 = a1[6];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 sharedUserID]);
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v16, 0LL);
  }

  else
  {
    id v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315138;
      __int128 v23 = "-[ADMultiUserService getSharedUserIdForHomeUserId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Primary user not present or sharedUserId not found",  (uint8_t *)&v22,  0xCu);
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
    (*(void (**)(void, void, void *))(a1[6] + 16LL))(a1[6], 0LL, v16);
  }

LABEL_18:
}

void sub_1002909F0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _allUsersBySharedUserID]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:*(void *)(a1 + 40)]);

  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 iCloudAltDSID]);
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0LL);
  }

  else
  {
    unsigned int v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      uint64_t v8 = "-[ADMultiUserService getiCloudUserIdForSharedUserId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%s Primary user not present or shared userId not found",  (uint8_t *)&v7,  0xCu);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
    (*(void (**)(void, void, void *))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL, v5);
  }
}

void sub_100290B3C(void *a1, uint64_t a2)
{
  id v3 = *(void **)(a1[4] + 240LL);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v18 = 136315138;
      int v19 = "-[ADMultiUserService getHomeUserIdForSharedUserId:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Primary user present",  (uint8_t *)&v18,  0xCu);
      id v3 = *(void **)(a1[4] + 240LL);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 sharedUserID]);
    unsigned int v6 = [v5 isEqualToString:a1[5]];

    if (v6)
    {
      uint64_t v7 = a1[6];
      uint64_t v8 = *(void **)(a1[4] + 240LL);
LABEL_12:
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 homeUserUUID]);
      (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v13, 0LL);
      goto LABEL_19;
    }
  }

  if (AFIsATV(a1, a2))
  {
    unsigned int v9 = *(void **)(a1[4] + 248LL);
    if (v9)
    {
      uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v18 = 136315138;
        int v19 = "-[ADMultiUserService getHomeUserIdForSharedUserId:completion:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s Platform is ATV and not primary user. Checking device owner",  (uint8_t *)&v18,  0xCu);
        unsigned int v9 = *(void **)(a1[4] + 248LL);
      }

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 sharedUserID]);
      unsigned int v12 = [v11 isEqualToString:a1[5]];

      if (v12)
      {
        uint64_t v7 = a1[6];
        uint64_t v8 = *(void **)(a1[4] + 248LL);
        goto LABEL_12;
      }
    }
  }

  if (a1[5]
    && (unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 232), "objectForKey:"))) != 0)
  {
    uint64_t v13 = v14;
    uint64_t v15 = a1[6];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 homeUserUUID]);
    (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v16, 0LL);
  }

  else
  {
    id v17 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315138;
      int v19 = "-[ADMultiUserService getHomeUserIdForSharedUserId:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Primary user not present or home userId not found",  (uint8_t *)&v18,  0xCu);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6001LL,  &__NSDictionary0__struct));
    (*(void (**)(void, void, void *))(a1[6] + 16LL))(a1[6], 0LL, v13);
  }

void sub_100290DEC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _selectedSharedUserID]);

  if (![v3 length]) {
    goto LABEL_10;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
  unsigned int v5 = [v4 isEqualToString:v3];

  uint64_t v6 = *(void *)(a1 + 32);
  if (!v5)
  {
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 232) objectForKey:v3]);
    uint64_t v10 = v9;
    if (v9)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v9 allowExplicitContent];
      uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
        int v17 = 136315651;
        int v18 = "-[ADMultiUserService getAllowExplicitContentSettingForRecognizedUser]_block_invoke";
        __int16 v19 = 1024;
        LODWORD(v20[0]) = v12;
        WORD2(v20[0]) = 2113;
        *(void *)((char *)v20 + 6) = v3;
        uint64_t v13 = "%s AllowExplicitContent=%i for Shared user with sharedUserId=%{private}@";
        unsigned int v14 = v11;
        uint32_t v15 = 28;
LABEL_12:
        _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&v17, v15);
      }
    }

    else
    {
      uint64_t v16 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        int v17 = 136315395;
        int v18 = "-[ADMultiUserService getAllowExplicitContentSettingForRecognizedUser]_block_invoke";
        __int16 v19 = 2113;
        v20[0] = v3;
        uint64_t v13 = "%s Shared user with sharedUserId=%{private}@ not found";
        unsigned int v14 = v16;
        uint32_t v15 = 22;
        goto LABEL_12;
      }
    }

    goto LABEL_10;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [*(id *)(v6 + 240) allowExplicitContent];
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    int v17 = 136315651;
    int v18 = "-[ADMultiUserService getAllowExplicitContentSettingForRecognizedUser]_block_invoke";
    __int16 v19 = 1024;
    LODWORD(v20[0]) = v8;
    WORD2(v20[0]) = 2113;
    *(void *)((char *)v20 + 6) = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s AllowExplicitContent=%i for Primary user with sharedUserId=%{private}@",  (uint8_t *)&v17,  0x1Cu);
  }

void sub_10029104C(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 240);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 homeUserUUID]);
    unsigned int v5 = [v4 isEqualToString:a1[5]];

    uint64_t v2 = a1[4];
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = *(void **)(v2 + 240);
    goto LABEL_7;
  }

  uint64_t v7 = *(void **)(v2 + 248);
  if (v7)
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 homeUserUUID]);
    unsigned int v9 = [v8 isEqualToString:a1[5]];

    uint64_t v2 = a1[4];
    if (v9)
    {
      uint64_t v6 = *(void **)(v2 + 248);
LABEL_7:
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 sharedUserID]);
      id v11 = [v10 copy];
      uint64_t v12 = *(void *)(a1[6] + 8LL);
      uint64_t v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;

      uint64_t v2 = a1[4];
    }
  }

void sub_100291150(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1002911F4;
  v8[3] = &unk_1004F9280;
  id v3 = (void *)a1[4];
  void v8[4] = a1[5];
  id v9 = v2;
  id v7 = v2;
  [v3 enumerateObjectsUsingBlock:v8];
  id v4 = [v7 copy];
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1002911F4(uint64_t a1, void *a2)
{
  id v12 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
  unsigned int v4 = [v12 isEqualToString:v3];

  uint64_t v5 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v6 = *(void **)(v5 + 240);
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 248) sharedUserID]);
    unsigned int v8 = [v12 isEqualToString:v7];

    uint64_t v9 = *(void *)(a1 + 32);
    if (!v8)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 232) objectForKey:v12]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 loggableMusicSyncSharedUserID]);
      [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v12];

      goto LABEL_7;
    }

    uint64_t v6 = *(void **)(v9 + 248);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v6 loggableMusicSyncSharedUserID]);
  [*(id *)(a1 + 40) setObject:v10 forKeyedSubscript:v12];
LABEL_7:
}

void sub_1002912EC(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  if (v1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 240) sharedUserID]);
    unsigned int v4 = [v1 isEqualToString:v3];

    if (v4)
    {
      uint64_t v5 = *(void **)(a1[5] + 240LL);
    }

    else
    {
      uint64_t v6 = (void *)a1[4];
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 248) sharedUserID]);
      LODWORD(v6) = [v6 isEqualToString:v7];

      uint64_t v8 = a1[5];
      if (!(_DWORD)v6)
      {
        uint32_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 232) objectForKey:a1[4]]);
        uint64_t v12 = objc_claimAutoreleasedReturnValue([v15 loggableMusicSyncSharedUserID]);
        uint64_t v13 = *(void *)(a1[6] + 8LL);
        unsigned int v14 = *(void **)(v13 + 40);
        *(void *)(v13 + 40) = v12;

        id v11 = v15;
        goto LABEL_9;
      }

      uint64_t v5 = *(void **)(v8 + 248);
    }

    uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 loggableMusicSyncSharedUserID]);
    uint64_t v10 = *(void *)(a1[6] + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
LABEL_9:
  }

void sub_1002913F0(void *a1)
{
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 240);
  if (v3)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 shareOwnerName]);
    unsigned int v5 = [v4 isEqualToString:a1[5]];
    uint64_t v2 = a1[4];
    if (v5)
    {
      uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(v2 + 240) sharedUserID]);
      uint64_t v7 = *(void *)(a1[6] + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      uint64_t v2 = a1[4];
    }
  }

  else
  {
    unsigned int v4 = 0LL;
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v9 = *(id *)(v2 + 232);
  id v10 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v18;
    while (2)
    {
      uint64_t v13 = 0LL;
      unsigned int v14 = v4;
      do
      {
        if (*(void *)v18 != v12) {
          objc_enumerationMutation(v9);
        }
        uint32_t v15 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v13);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 232), "objectForKey:", v15, (void)v17));
        unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v16 shareOwnerName]);

        if ([v4 isEqualToString:a1[5]])
        {
          objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v15);

          goto LABEL_15;
        }

        uint64_t v13 = (char *)v13 + 1;
        unsigned int v14 = v4;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

void sub_1002915A0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) objectForKey:*(void *)(a1 + 40)]);
  id v10 = v2;
  if (v2)
  {
    [v2 setShareOwnerName:*(void *)(a1 + 48)];
    [v10 testAndSetLoggingIsAllowed:*(unsigned __int8 *)(a1 + 72)];
    id v3 = *(void **)(a1 + 56);
    if (v3)
    {
      unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dictionary]);
      [v10 setSettings:v4];
    }

    if (*(void *)(a1 + 64)) {
      objc_msgSend(v10, "setAudioAppSignals:");
    }
  }

  else
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
    unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 40)];

    if (v6)
    {
      [*(id *)(*(void *)(a1 + 32) + 240) setShareOwnerName:*(void *)(a1 + 48)];
      uint64_t v7 = *(void **)(a1 + 56);
      if (v7)
      {
        uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 240LL);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 dictionary]);
        [v8 setSettings:v9];
      }

      if (*(void *)(a1 + 64)) {
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 240), "setAudioAppSignals:");
      }
      [*(id *)(*(void *)(a1 + 32) + 240) testAndSetLoggingIsAllowed:*(unsigned __int8 *)(a1 + 72)];
    }
  }
}

void sub_1002916BC(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 296) objectForKey:a1[5]]);
  if (v2)
  {
    id v3 = v2;
    [v2 setEnrollmentName:a1[6]];
    uint64_t v2 = v3;
  }
}

void sub_100291704(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) objectForKey:*(void *)(a1 + 40)]);
  id v3 = v2;
  if (!v2)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
    unsigned int v5 = [v4 isEqualToString:*(void *)(a1 + 40)];

    if (!v5) {
      goto LABEL_5;
    }
    id v3 = *(void **)(*(void *)(a1 + 32) + 240LL);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 120) + 8LL);
  id v7 = v3;
  uint64_t v8 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v7;

LABEL_5:
  id v9 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL);
  if (v9)
  {
    id v10 = *(void **)(a1 + 48);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 companionAssistantID]);
    id v12 = v10;
    id v13 = v11;
    if (v12 == v13)
    {

      goto LABEL_16;
    }

    unsigned int v14 = v13;
    if (v12 && v13)
    {
      unsigned __int8 v15 = [v12 isEqual:v13];

      if ((v15 & 1) != 0)
      {
LABEL_16:
        if (*(void *)(a1 + 56)) {
          objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setCompanionSpeechID:");
        }
        if (*(void *)(a1 + 64)) {
          objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setCompanionIDSIdentifier:");
        }
        if (*(void *)(a1 + 72)) {
          objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40), "setProductPrefix:");
        }
        __int128 v19 = *(void **)(a1 + 80);
        id v21 = v19;
        id v22 = v20;
        if (v21 == v22)
        {

          goto LABEL_30;
        }

        __int128 v23 = v22;
        if (v21 && v22)
        {
          unsigned __int8 v24 = [v21 isEqual:v22];

          if ((v24 & 1) != 0)
          {
LABEL_30:
            uint64_t v25 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) companionSyncMetadata]);
            uint64_t v26 = *(void *)(*(void *)(a1 + 136) + 8LL);
            uint64_t v27 = *(void **)(v26 + 40);
            *(void *)(v26 + 40) = v25;

            [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) setCompanionSyncMetadata:*(void *)(a1 + 88)];
            unsigned int v28 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) companionSyncMetadataCapable];
            if (v28 != [*(id *)(a1 + 96) syncMetadataCapability])
            {
              objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40),  "setCompanionSyncMetadataCapable:",  objc_msgSend(*(id *)(a1 + 96), "syncMetadataCapability"));
              *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 1;
            }

            unsigned int v29 = [*(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40) companionPeerToPeerHandoffCapable];
            if (v29 != [*(id *)(a1 + 96) peerToPeerHandoffCapability])
            {
              objc_msgSend( *(id *)(*(void *)(*(void *)(a1 + 120) + 8) + 40),  "setCompanionPeerToPeerHandoffCapable:",  objc_msgSend(*(id *)(a1 + 96), "peerToPeerHandoffCapability"));
              *(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL) = 1;
            }

            id v18 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 120) + 8)
                                                                           + 40LL), "homeUserUUID"));
            __int16 v30 = *(void **)(a1 + 32);
            if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL) == v30[30])
            {
              [v30 _savePrimaryAndDeviceOwner];
              id v36 = *(void **)(a1 + 32);
              if (*(void *)(a1 + 104))
              {
                objc_msgSend(*(id *)(a1 + 32), "_setPrimaryUserSiriLanguage:");
              }

              else
              {
                __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
                __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 languageCode]);
                [v36 _setPrimaryUserSiriLanguage:v42];

                __int16 v43 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 buf = 136315138;
                  __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                  _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_INFO,  "%s siriLanguage unavailable. Setting it to the same language as HomePod.",  buf,  0xCu);
                }
              }

              [*(id *)(a1 + 32) _setPrimaryUserMeDevice:*(unsigned __int8 *)(a1 + 144)];
            }

            else
            {
              [v30 _saveSharedUsers];
              uint64_t v31 = *(void *)(a1 + 104);
              uint64_t v32 = *(void **)(a1 + 32);
              if (v31)
              {
                [*(id *)(a1 + 32) _setSharedUserSiriLanguage:v31 forSharedUser:*(void *)(a1 + 40)];
                uint64_t v33 = (void *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                {
                  id v34 = *(void **)(*(void *)(a1 + 32) + 160LL);
                  __int128 v35 = v33;
                  *(_DWORD *)__int128 buf = 136315394;
                  __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                  __int16 v90 = 2048;
                  id v91 = [v34 count];
                  _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "%s _sharedUsersSiriLanguageBySharedUserID: %lu",  buf,  0x16u);
                }
              }

              else
              {
                __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
                __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 languageCode]);
                [v32 _setSharedUserSiriLanguage:v39 forSharedUser:*(void *)(a1 + 40)];

                __int128 v40 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 buf = 136315138;
                  __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                  _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_INFO,  "%s siriLanguage unavailable for shared user. Setting it to the same language as HomePod.",  buf,  0xCu);
                }
              }

              [*(id *)(a1 + 32) _setSharedUserMeDevice:*(unsigned __int8 *)(a1 + 144) forSharedUser:*(void *)(a1 + 40)];
            }

            id v44 = [*(id *)(a1 + 32) _notifyRemoraClientsOfUpdatedUser:*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)];
            if (AFIsATV(v44, v45))
            {
              id v16 = 0LL;
              goto LABEL_52;
            }

            __int16 v47 = *(void **)(a1 + 32);
            if (v47[4] && v18)
            {
              id v48 = [v47 _updateHomeKitSettings:v18];
              if ((_DWORD)v48)
              {
                id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKey:v18]);
                uint64_t v51 = v50;
                if (v50)
                {
                  double v52 = (void *)objc_claimAutoreleasedReturnValue([v50 objectForKey:@"allowVoiceID"]);
                  if ([v52 integerValue] == (id)1)
                  {
                    uint64_t v53 = *(void *)(a1 + 112);
                    if (v53) {
                      (*(void (**)(uint64_t, void))(v53 + 16))(v53, 0LL);
                    }
                  }

                  else
                  {
                    id v61 = (os_log_s *)AFSiriLogContextDaemon;
                    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)__int128 buf = 136315138;
                      __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                      _os_log_error_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "%s VoiceID disabled for existing user and we did not get a homeinfo change notification",  buf,  0xCu);
                    }

                    [*(id *)(a1 + 32) removeUserWithHomeUUID:v18 completion:&stru_1004F91C0];
                    uint64_t v62 = *(void *)(a1 + 112);
                    if (v62)
                    {
                      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6010LL,  &__NSDictionary0__struct));
                      (*(void (**)(uint64_t, void *))(v62 + 16))(v62, v63);
                    }
                  }
                }

                else
                {
                  uint64_t v59 = (os_log_s *)AFSiriLogContextDaemon;
                  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 136315138;
                    __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                    _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "%s We should have a user setting. File a bug.",  buf,  0xCu);
                  }

                  uint64_t v60 = *(void *)(a1 + 112);
                  if (v60) {
                    (*(void (**)(uint64_t, void))(v60 + 16))(v60, 0LL);
                  }
                }
              }

              else if (AFIsATV(v48, v49) {
                     && [*(id *)(a1 + 32) _updateNonHomeUserSettings:*(void *)(a1 + 40)])
              }
              {
                id v54 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 buf = 136315138;
                  __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                  _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_INFO,  "%s Updated settings for user on ATV but not part of same home.",  buf,  0xCu);
                }

                uint64_t v55 = *(void *)(a1 + 112);
                if (v55) {
                  (*(void (**)(uint64_t, void))(v55 + 16))(v55, 0LL);
                }
              }

              else
              {
                uint64_t v57 = *(void *)(a1 + 112);
                if (v57)
                {
                  id v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6008LL,  &__NSDictionary0__struct));
                  (*(void (**)(uint64_t, void *))(v57 + 16))(v57, v58);
                }
              }

              [*(id *)(a1 + 32) _updateVoiceProfileInfo];
              [*(id *)(a1 + 32) _updateSAMultiUserInfo];
LABEL_83:
              id v64 = (void *)objc_claimAutoreleasedReturnValue( +[AFInstanceContext currentContext]( &OBJC_CLASS___AFInstanceContext,  "currentContext",  v80,  v81,  v82,  v83,  v84));
              unsigned __int8 v65 = [v64 isEndpoint];

              if ((v65 & 1) != 0 || !*(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL))
              {
LABEL_100:
                id v16 = 0LL;
                goto LABEL_101;
              }

              uint64_t v66 = *(void **)(a1 + 88);
              id v67 = *(id *)(*(void *)(*(void *)(a1 + 136) + 8LL) + 40LL);
              id v68 = v66;
              if (v67 == v68)
              {
              }

              else
              {
                uint64_t v69 = v68;
                if (v67 && v68)
                {
                  unsigned __int8 v70 = [v67 isEqual:v68];

                  if ((v70 & 1) != 0)
                  {
LABEL_96:
                    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 128) + 8LL) + 24LL))
                    {
                      id v75 = (void *)AFSiriLogContextDaemon;
                      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                      {
                        id v76 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL);
                        id v77 = v75;
                        __int128 v78 = (void *)objc_claimAutoreleasedReturnValue([v76 sharedUserID]);
                        *(_DWORD *)__int128 buf = 136315395;
                        __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                        __int16 v90 = 2113;
                        id v91 = v78;
                        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_INFO,  "%s Posting notification that companion device information/capabilities changed for sharedUserI d: (%{private}@)",  buf,  0x16u);
                      }

                      __int128 v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNotificationCenter defaultCenter]( &OBJC_CLASS___NSNotificationCenter,  "defaultCenter"));
                      [v79 postNotificationName:@"ADMultiUserSharedUserCompanionInfoChangedNotification" object:*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)];
                    }

                    goto LABEL_100;
                  }
                }

                else
                {
                }

                id v71 = (void *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
                {
                  id v72 = *(void **)(*(void *)(*(void *)(a1 + 120) + 8LL) + 40LL);
                  uint64_t v73 = v71;
                  __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([v72 sharedUserID]);
                  *(_DWORD *)__int128 buf = 136315395;
                  __int128 v89 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
                  __int16 v90 = 2113;
                  id v91 = v74;
                  _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_INFO,  "%s Posting notification that sync information changed for sharedUserId: (%{private}@)",  buf,  0x16u);
                }

                id v67 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
                [v67 postNotificationName:@"ADMultiUserSyncMetadataDidChangeNotification" object:*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)];
              }

              goto LABEL_96;
            }

void sub_1002922B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100292374;
  block[3] = &unk_1004FCBB0;
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 280);
  block[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_100292374(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6009LL,  &__NSDictionary0__struct));
    if (AFIsATV(v9, v10) && !*(void *)(a1 + 48))
    {

      [*(id *)(a1 + 40) _updateNonHomeUserSettings:*(void *)(a1 + 56)];
      unsigned int v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
        goto LABEL_17;
      }
      *(_DWORD *)id v16 = 136315138;
      *(void *)&void v16[4] = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
LABEL_16:
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Updated settings for user on ATV but not part of same home.",  v16,  0xCu);
LABEL_17:
      uint64_t v11 = *(void *)(a1 + 64);
      if (v11) {
        (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0LL);
      }
      goto LABEL_19;
    }

void sub_100292670(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      unsigned int v5 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
      __int16 v6 = 2112;
      id v7 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Error when removing user (%@)",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_100292730(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      unsigned int v5 = "-[ADMultiUserService updateMultiUserWithSharedUserId:companionInfo:completion:]_block_invoke";
      __int16 v6 = 2112;
      id v7 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Error when removing user (%@)",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_1002927F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    unsigned int v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 280LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100292958;
    block[3] = &unk_1004FD9E0;
    id v6 = v3;
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 40);
    id v12 = v6;
    uint64_t v13 = v7;
    id v14 = v8;
    dispatch_async(v5, block);

    id v9 = v12;
  }

  else
  {
    uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v16 = "-[ADMultiUserService triggerMultiUserMetricsWithCompletion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to gather multi-user metrics. Unable to determine home users and their voice settings",  buf,  0xCu);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6014LL,  &__NSDictionary0__struct));
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_100292958(uint64_t a1)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v35 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)v22;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "objectForKey:",  *(void *)(*((void *)&v21 + 1) + 8 * (void)i),  (void)v21));
      }

      id v4 = [v2 countByEnumeratingWithState:&v21 objects:v35 count:16];
    }

    while (v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v9 = [*(id *)(a1 + 40) _countVoiceProfiles];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) homeMembers]);
  uint64_t v11 = (char *)[v10 count];

  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) homeMembers]);
  unsigned int v13 = [v12 containsObject:*(void *)(*(void *)(a1 + 40) + 24)];

  id v14 = (os_log_s *)AFSiriLogContextDaemon;
  if (v13)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      unsigned int v28 = "-[ADMultiUserService triggerMultiUserMetricsWithCompletion:]_block_invoke_2";
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Unknown user will be substracted from multiuser count",  buf,  0xCu);
      id v14 = (os_log_s *)AFSiriLogContextDaemon;
    }

    --v11;
  }

  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315906;
    unsigned int v28 = "-[ADMultiUserService triggerMultiUserMetricsWithCompletion:]_block_invoke";
    __int16 v29 = 2048;
    uint64_t v30 = v5;
    __int16 v31 = 2048;
    uint64_t v32 = v11;
    __int16 v33 = 2048;
    id v34 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%s Voice Recognition enabled users count: %ld, multi-user members count: %ld, voice profiles count: %ld",  buf,  0x2Au);
  }

  unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics", (void)v21));
  v25[0] = @"voice recognition enabled users count";
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
  v26[0] = v16;
  v25[1] = @"multi users count";
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v11));
  v26[1] = v17;
  void v25[2] = @"voice profiles count";
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
  v26[2] = v18;
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v26,  v25,  3LL));
  [v15 logEventWithType:6114 context:v19];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_100292C6C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _updateVoiceProfileInfo];
  if ((_DWORD)result)
  {
    [*(id *)(a1 + 32) _notifyRemoraClientsOfAllUsers];
    return [*(id *)(a1 + 32) _updateSAMultiUserInfo];
  }

  return result;
}

void sub_100292CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315395;
    uint64_t v7 = "-[ADMultiUserService _removeGhostVoiceProfiles]_block_invoke";
    __int16 v8 = 2113;
    id v9 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s removing ghost voice profile for sharedUserID %{private}@",  (uint8_t *)&v6,  0x16u);
  }

  id v5 =  [*(id *)(*(void *)(a1 + 32) + 272) discardSiriEnrollmentForProfileId:v3 forLanguageCode:0];
}

void sub_100292D94(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 200) objectForKey:a1[5]]);
  if (v2)
  {
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v5 = 136315395;
      int v6 = "-[ADMultiUserService userProfileExistsWithHomeUserID:]_block_invoke";
      __int16 v7 = 2113;
      __int16 v8 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Matched -> %{private}@",  (uint8_t *)&v5,  0x16u);
    }

    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
    *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = [v4 userProfileExistsWithiCloudAltDSID:v2];
  }
}

void sub_100292E98(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) objectForKey:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getCloudKitManager]);
    uint64_t v4 = *(unsigned __int8 *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100292FF8;
    v8[3] = &unk_1004F9178;
    id v9 = v2;
    char v10 = *(_BYTE *)(a1 + 56);
    [v3 syncSiriRMVSetting:v4 iCloudAltDSID:v9 homeUniqueIdentifier:v5 completion:v8];
  }

  else
  {
    int v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315395;
      id v12 = "-[ADMultiUserService syncToCloudATVRmVSetting:homeID:homeUserID:notifyClients:]_block_invoke";
      __int16 v13 = 2113;
      uint64_t v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv No iCloud ID found for home user %{private}@",  buf,  0x16u);
    }
  }
}

void sub_100292FF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315651;
    id v12 = "-[ADMultiUserService syncToCloudATVRmVSetting:homeID:homeUserID:notifyClients:]_block_invoke_2";
    __int16 v13 = 2113;
    uint64_t v14 = v5;
    __int16 v15 = 2112;
    id v16 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv OOB setting sync to companion device for %{private}@ completed with error %@",  buf,  0x20u);
  }

  if (!v3)
  {
    int v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v12 = "-[ADMultiUserService syncToCloudATVRmVSetting:homeID:homeUserID:notifyClients:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv notifying clients of RmV setting change to Home",  buf,  0xCu);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100293190;
    v8[3] = &unk_1004F9150;
    char v10 = *(_BYTE *)(a1 + 40);
    id v9 = *(id *)(a1 + 32);
    [v7 getUserProfileDictionariesWithCompletion:v8];
  }
}

void sub_100293190(uint64_t a1, void *a2)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v21 objects:v33 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v22;
    *(void *)&__int128 v4 = 136315651LL;
    __int128 v19 = v4;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(obj);
        }
        __int16 v8 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", @"ADUserProfileKeyICloudIdentifier", v19));
        char v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"ADUserProfileKeyPBSIdentifier"]);
        uint64_t v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = v19;
          unsigned int v28 = "-[ADMultiUserService syncToCloudATVRmVSetting:homeID:homeUserID:notifyClients:]_block_invoke";
          __int16 v29 = 2113;
          uint64_t v30 = v9;
          __int16 v31 = 2112;
          uint64_t v32 = v10;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s Found profile %{private}@ %@",  buf,  0x20u);
        }

        if (*(_BYTE *)(a1 + 40)
          && v9
          && [*(id *)(a1 + 32) isEqualToString:v9]
          && v10 != 0LL)
        {
          __int16 v13 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            id v18 = *(void **)(a1 + 32);
            *(_DWORD *)__int128 buf = 136315395;
            unsigned int v28 = "-[ADMultiUserService syncToCloudATVRmVSetting:homeID:homeUserID:notifyClients:]_block_invoke";
            __int16 v29 = 2113;
            uint64_t v30 = v18;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv Posting Home Update notification: %{private}@",  buf,  0x16u);
          }

          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
          uint64_t v16 = kAFHomeUpdateNotification;
          uint64_t v25 = @"profileID";
          uint64_t v26 = v10;
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
          [v15 postNotificationName:v16 object:0 userInfo:v17 deliverImmediately:1];

          goto LABEL_21;
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v21 objects:v33 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_100293450(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v7 = "-[ADMultiUserService syncATVRmVSettingIfAvailable]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  if (*(void *)(*(void *)(a1 + 32) + 88LL))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    void v5[2] = sub_1002935B4;
    v5[3] = &unk_1004F9128;
    void v5[4] = *(void *)(a1 + 32);
    [v3 currentHomeWithCompletion:v5];
  }

  else
  {
    __int128 v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v7 = "-[ADMultiUserService syncATVRmVSettingIfAvailable]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv No OOB user being tracked for RmV",  buf,  0xCu);
    }
  }

void sub_1002935B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    unint64_t v4 = _AFPreferencesSiriRMVSetting(*(void *)(*(void *)(a1 + 32) + 88LL)) - 1;
    id v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = v5;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
      __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v17 = "-[ADMultiUserService syncATVRmVSettingIfAvailable]_block_invoke";
      __int16 v18 = 2112;
      __int128 v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv syncing OOB setting for %@ to companion device",  buf,  0x16u);
    }

    BOOL v9 = v4 < 2;
    char v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getCloudKitManager]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 88LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1002937C4;
    v15[3] = &unk_1004FBD90;
    void v15[4] = *(void *)(a1 + 32);
    [v10 syncSiriRMVSetting:v9 iCloudAltDSID:v11 homeUniqueIdentifier:v13 completion:v15];
  }

  else
  {
    uint64_t v14 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v17 = "-[ADMultiUserService syncATVRmVSettingIfAvailable]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s #multi-user-atv No Current Home found... HomeKit might not be ready and we can end up being out of sync later.",  buf,  0xCu);
    }
  }
}

void sub_1002937C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    __int16 v8 = "-[ADMultiUserService syncATVRmVSettingIfAvailable]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv OOB setting sync to companion device completed with error %@",  (uint8_t *)&v7,  0x16u);
  }

  if (!v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 88);
    *(void *)(v5 + 8_Block_object_dispose(va, 8) = 0LL;
  }
}

void sub_1002938A0(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  id v3 = *(id *)(a1 + 32);
  if (v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void **)(a1 + 40);
    int v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (!v6)
    {
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s #multi-user-atv no identifier received to transition",  buf,  0xCu);
      }

      uint64_t v5 = 0LL;
      goto LABEL_39;
    }

    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Using home user ID",  buf,  0xCu);
      uint64_t v6 = *(void **)(a1 + 40);
    }

    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 240) homeUserUUID]);
    unsigned int v9 = [v6 isEqualToString:v8];

    if (v9)
    {
      id v10 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv home user id is primary user",  buf,  0xCu);
      }

      id v11 = *(id *)(*(void *)(a1 + 48) + 240LL);
    }

    else
    {
      id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 296) objectForKey:*(void *)(a1 + 40)]);
    }

    uint64_t v5 = v11;
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 iCloudAltDSID]);
    if (!v12)
    {
      __int16 v13 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 200LL);
        *(_DWORD *)__int128 buf = 136315395;
        id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        __int16 v49 = 2113;
        uint64_t v50 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv checking atv locally tracked identifier mapping.. %{private}@",  buf,  0x16u);
      }

      uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 200) objectForKey:*(void *)(a1 + 40)]);
    }

    unint64_t v4 = (void *)v12;
  }

  if (*(void *)(a1 + 40) && *(void *)(a1 + 56) != 2LL) {
    objc_msgSend(*(id *)(*(void *)(a1 + 48) + 216), "removeObject:");
  }
  if (!v4)
  {
    uint64_t v20 = *(void *)(a1 + 40);
    if (v20 && *(void *)(a1 + 56) == 2LL)
    {
      __int128 v21 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv onboarding homeUser",  buf,  0xCu);
        uint64_t v20 = *(void *)(a1 + 40);
      }

      [*(id *)(*(void *)(a1 + 48) + 216) addObject:v20];
    }

    __int128 v22 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v23 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 136315394;
      id v48 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
      __int16 v49 = 2112;
      uint64_t v50 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv No iCloud identifier found for %@",  buf,  0x16u);
    }

void sub_10029411C(uint64_t a1, void *a2)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v21 objects:v33 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v22;
    *(void *)&__int128 v4 = 136315651LL;
    __int128 v19 = v4;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(obj);
        }
        __int16 v8 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", @"ADUserProfileKeyICloudIdentifier", v19));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"ADUserProfileKeyPBSIdentifier"]);
        id v11 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = v19;
          unsigned int v28 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
          __int16 v29 = 2113;
          uint64_t v30 = v9;
          __int16 v31 = 2112;
          uint64_t v32 = v10;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s Found profile %{private}@ %@",  buf,  0x20u);
        }

        if (*(void *)(*(void *)(a1 + 32) + 208LL)) {
          BOOL v12 = v9 == 0LL;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12 && v10 != 0LL)
        {
          if ([*(id *)(a1 + 40) isEqualToString:v9])
          {
            if (([*(id *)(*(void *)(a1 + 32) + 208) containsObject:v9] & 1) == 0)
            {
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) homeUserUUID]);

              if (v14)
              {
                __int16 v15 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__int128 buf = 136315395;
                  unsigned int v28 = "-[ADMultiUserService triggerATVRmVStateChangeForiCloudAltDSID:homeUserID:toState:]_block_invoke";
                  __int16 v29 = 2113;
                  uint64_t v30 = v9;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv Posting Bulletin notification: %{private}@",  buf,  0x16u);
                }

                uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
                uint64_t v17 = kAFHomeBulletinAllowedNotification;
                uint64_t v25 = @"profileID";
                uint64_t v26 = v10;
                __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
                [v16 postNotificationName:v17 object:0 userInfo:v18 deliverImmediately:1];

                goto LABEL_24;
              }
            }
          }
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v21 objects:v33 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

id sub_100294414(void *a1)
{
  id result = *(id *)(a1[4] + 216LL);
  if (result) {
    id result = [result containsObject:a1[5]];
  }
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_100294450(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 200) objectForKey:a1[5]]);
  if (!v2)
  {
    uint64_t v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    uint64_t v7 = a1[5];
    int v12 = 136315395;
    __int16 v13 = "-[ADMultiUserService isRmVEnabledForHomeUser:]_block_invoke";
    __int16 v14 = 2113;
    uint64_t v15 = v7;
    __int16 v8 = "%s No iCloud ID found for home user %{private}@";
    unsigned int v9 = v6;
    uint32_t v10 = 22;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
    goto LABEL_12;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
  unsigned int v4 = [v3 userProfileExistsWithiCloudAltDSID:v2];

  if (!v4)
  {
    id v11 = (os_log_s *)AFSiriLogContextDaemon;
    if (!os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    int v12 = 136315138;
    __int16 v13 = "-[ADMultiUserService isRmVEnabledForHomeUser:]_block_invoke";
    __int16 v8 = "%s User profile does not exist";
    unsigned int v9 = v11;
    uint32_t v10 = 12;
    goto LABEL_9;
  }

  BOOL v5 = _AFPreferencesSiriRMVSetting(v2) == 1 || _AFPreferencesSiriRMVSetting(v2) == 2;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = v5;
LABEL_12:
}

void sub_1002945E4(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 200LL))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v3 = *(void *)(a1 + 32);
    unsigned int v4 = *(void **)(v3 + 200);
    *(void *)(v3 + 200) = v2;
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      unsigned int v9 = 0LL;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        uint32_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "objectForKey:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v9),  (void)v11));
        [*(id *)(*(void *)(a1 + 32) + 200) setObject:*(void *)(a1 + 48) forKey:v10];

        unsigned int v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }
}

void sub_100294728(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v26 = "-[ADMultiUserService updateRmVForUserProfilesWithLanguageCode:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _allUsersBySharedUserID]);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v22;
    *(void *)&__int128 v6 = 136315395LL;
    __int128 v18 = v6;
    while (2)
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)i);
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v10, v18));
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[SSRVoiceProfileManager sharedInstance](&OBJC_CLASS___SSRVoiceProfileManager, "sharedInstance"));
        if (([v12 isSATEnrolledForSiriProfileId:v10 forLanguageCode:*(void *)(a1 + 40)] & 1) == 0)
        {
          __int128 v13 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = v18;
            uint64_t v26 = "-[ADMultiUserService updateRmVForUserProfilesWithLanguageCode:]_block_invoke";
            __int16 v27 = 2113;
            uint64_t v28 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "%s Asking for RmV to be diabled for shared User %{private}@",  buf,  0x16u);
          }

          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v11 iCloudAltDSID]);

          if (!v14)
          {
            uint64_t v17 = (os_log_s *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__int128 buf = 136315138;
              uint64_t v26 = "-[ADMultiUserService updateRmVForUserProfilesWithLanguageCode:]_block_invoke";
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "%s iCloudAltDSID is nil", buf, 0xCu);
            }

            goto LABEL_19;
          }

          uint64_t v15 = *(void **)(a1 + 32);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v11 iCloudAltDSID]);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472LL;
          v19[2] = sub_100294A1C;
          v19[3] = &unk_1004FBD90;
          id v20 = v11;
          [v15 setSiriRMVState:0 foriCloudAltDSID:v16 completion:v19];
        }
      }

      id v7 = [v4 countByEnumeratingWithState:&v21 objects:v29 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }

void sub_100294A1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    __int128 v6 = v4;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 iCloudAltDSID]);
    int v8 = 136315651;
    unsigned int v9 = "-[ADMultiUserService updateRmVForUserProfilesWithLanguageCode:]_block_invoke";
    __int16 v10 = 2113;
    __int128 v11 = v7;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Triggered RmV disabling successfully for iCloudAltDSID %{private}@ with error %@",  (uint8_t *)&v8,  0x20u);
  }
}

void sub_100294B14(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) iCloudAltDSID]);
  unsigned int v3 = [v2 isEqualToString:*(void *)(a1 + 40)];

  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = *(void **)(v4 + 240);
LABEL_5:
    id v9 = v5;
    goto LABEL_7;
  }

  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 248) iCloudAltDSID]);
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 40)];

  uint64_t v8 = *(void *)(a1 + 32);
  if (v7)
  {
    id v5 = *(void **)(v8 + 248);
    goto LABEL_5;
  }

  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v8 + 304) objectForKey:*(void *)(a1 + 40)]);
LABEL_7:
  __int16 v10 = v9;
  [*(id *)(a1 + 32) _isTrackingUUIDForInFlightVoiceProfile:v9];
  __int128 v11 = *(void **)(*(void *)(a1 + 32) + 272LL);
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedUserID]);
  unsigned int v13 = [v11 isSATEnrolledForSiriProfileId:v12 forLanguageCode:*(void *)(*(void *)(a1 + 32) + 96)];

  uint64_t v14 = _AFPreferencesSiriRMVSetting(*(void *)(a1 + 40));
  if (v13) {
    BOOL v15 = v14 == 2;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    __int128 v21 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      int v22 = 136315138;
      __int128 v23 = "-[ADMultiUserService getSiriRMVStateForiCloudAltDSID:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv transition to ON has already completed",  (uint8_t *)&v22,  0xCu);
    }

    _AFPreferencesSetSiriRMVSetting(*(void *)(a1 + 40), 1LL);
    id v20 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    uint64_t v16 = v14;
    if (v14 == 3) {
      char v17 = v13;
    }
    else {
      char v17 = 1;
    }
    __int128 v18 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v19 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
    if ((v17 & 1) != 0)
    {
      if (v19)
      {
        int v22 = 136315394;
        __int128 v23 = "-[ADMultiUserService getSiriRMVStateForiCloudAltDSID:completion:]_block_invoke";
        __int16 v24 = 2048;
        uint64_t v25 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv State is %ld",  (uint8_t *)&v22,  0x16u);
      }

      id v20 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    }

    else
    {
      if (v19)
      {
        int v22 = 136315138;
        __int128 v23 = "-[ADMultiUserService getSiriRMVStateForiCloudAltDSID:completion:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv transition to OFF has already completed",  (uint8_t *)&v22,  0xCu);
      }

      _AFPreferencesSetSiriRMVSetting(*(void *)(a1 + 40), 0LL);
      id v20 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    }
  }

  v20();
}

void sub_100294DAC(uint64_t a1)
{
  uint64_t v2 = _AFPreferencesSiriRMVSetting(*(void *)(a1 + 32));
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[ADBuddyMonitor sharedManager](&OBJC_CLASS___ADBuddyMonitor, "sharedManager"));
  unsigned __int8 v4 = [v3 isPastBuddy];

  if ((v4 & 1) != 0)
  {
    [*(id *)(*(void *)(a1 + 40) + 208) addObject:*(void *)(a1 + 32)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 240) iCloudAltDSID]);
    unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

    uint64_t v7 = *(void *)(a1 + 40);
    if (v6)
    {
      uint64_t v8 = *(void **)(v7 + 240);
    }

    else
    {
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v7 + 248) iCloudAltDSID]);
      unsigned int v11 = [v10 isEqualToString:*(void *)(a1 + 32)];

      uint64_t v12 = *(void *)(a1 + 40);
      if (!v11)
      {
        id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v12 + 304) objectForKey:*(void *)(a1 + 32)]);
        goto LABEL_11;
      }

      uint64_t v8 = *(void **)(v12 + 248);
    }

    id v13 = v8;
LABEL_11:
    uint64_t v14 = v13;
    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([v13 sharedUserID]);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_10029515C;
    v31[3] = &unk_1004F9060;
    id v32 = *(id *)(a1 + 32);
    id v16 = v14;
    id v33 = v16;
    char v38 = *(_BYTE *)(a1 + 56);
    id v36 = *(id *)(a1 + 48);
    uint64_t v37 = v2;
    uint64_t v34 = *(void *)(a1 + 40);
    id v17 = v15;
    id v35 = v17;
    __int128 v18 = objc_retainBlock(v31);
    if (v17)
    {
      BOOL v19 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100295564;
      void v26[3] = &unk_1004F90D8;
      v26[4] = *(void *)(a1 + 40);
      id v27 = v17;
      char v30 = *(_BYTE *)(a1 + 56);
      id v28 = *(id *)(a1 + 32);
      __int16 v29 = v18;
      [v19 getCurrentAccessoryWithCompletion:v26];
    }

    else
    {
      id v20 = (void *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        __int128 v23 = *(void **)(*(void *)(a1 + 40) + 304LL);
        __int16 v24 = v20;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 allKeys]);
        *(_DWORD *)__int128 buf = 136315651;
        __int128 v40 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
        __int16 v41 = 2112;
        uint64_t v42 = v22;
        __int16 v43 = 2113;
        id v44 = v25;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEBUG,  "%s Did not find shared user with iCloud ID %@ %{private}@. Saving locally..",  buf,  0x20u);
      }

      objc_storeStrong((id *)(*(void *)(a1 + 40) + 88LL), *(id *)(a1 + 32));
      ((void (*)(void *))v18[2])(v18);
    }

    return;
  }

  id v9 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v40 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
    __int16 v41 = 2112;
    uint64_t v42 = v21;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s Still in buddy. Saving iCloudAltDSID %@ to enable RMV for user after buddy and sync finishes",  buf,  0x16u);
  }

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 88LL), *(id *)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10029515C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
  unsigned int v3 = [v2 userProfileExistsWithiCloudAltDSID:*(void *)(a1 + 32)];

  if (!v3)
  {
    uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v27 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
      _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s No ATV user profile found.", buf, 0xCu);
    }

    [*(id *)(a1 + 48) triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 32) homeUserID:0 toState:*(void *)(a1 + 72)];
    uint64_t v9 = *(void *)(a1 + 64);
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:]( &OBJC_CLASS___AFError,  "errorWithCode:description:",  6001LL,  @"No shared user or PB profile user found"));
    (*(void (**)(uint64_t, id))(v9 + 16))(v9, v10);
    goto LABEL_8;
  }

  [*(id *)(a1 + 40) setVoiceIDAllowedByUser:*(unsigned __int8 *)(a1 + 80)];
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) enrollmentName]);
  unsigned int v5 = [v4 isEqualToString:@"sample user"];

  if (v5)
  {
    unsigned int v6 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v27 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
      uint64_t v7 = "%s User's enrolment is sample";
LABEL_27:
      _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, v7, buf, 0xCu);
      goto LABEL_15;
    }

    goto LABEL_15;
  }

  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    if (v11 == 1)
    {
      if (!*(_BYTE *)(a1 + 80)) {
        goto LABEL_20;
      }
LABEL_14:
      unsigned int v6 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v27 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
        uint64_t v7 = "%s No change in RMV state.";
        goto LABEL_27;
      }

void sub_100295564(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v18 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Current accessory is not nil... this tv is in a home..",  buf,  0xCu);
    }

    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v8 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1002956A8;
    void v12[3] = &unk_1004F90B0;
    id v10 = v8;
    uint64_t v11 = *(void *)(a1 + 32);
    id v13 = v10;
    uint64_t v14 = v11;
    char v16 = *(_BYTE *)(a1 + 64);
    id v15 = *(id *)(a1 + 48);
    [v9 getHomeUserIdForSharedUserId:v10 completion:v12];
  }

  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v3,  v4,  v5);
}

void sub_1002956A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315650;
    char v16 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
    __int16 v17 = 2112;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s Home User ID: %@ error: (%@)",  buf,  0x20u);
    if (!v5) {
      goto LABEL_6;
    }
  }

  else if (!v5)
  {
    goto LABEL_6;
  }

  uint64_t v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315395;
    char v16 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
    __int16 v17 = 2113;
    id v18 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s User with sharedUserID %{private}@ is a home member",  buf,  0x16u);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  v12[0] = _NSConcreteStackBlock;
  void v12[2] = sub_10029586C;
  void v12[3] = &unk_1004F9088;
  uint64_t v11 = *(void **)(a1 + 48);
  void v12[4] = *(void *)(a1 + 40);
  v12[1] = 3221225472LL;
  char v14 = *(_BYTE *)(a1 + 56);
  id v13 = v11;
  [v10 currentHomeWithCompletion:v12];

LABEL_6:
}

void sub_10029586C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getCloudKitManager]);
    uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1002959DC;
    void v11[3] = &unk_1004FC2C8;
    uint64_t v9 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v9;
    [v4 syncSiriRMVSetting:v5 iCloudAltDSID:v6 homeUniqueIdentifier:v8 completion:v11];
  }

  else
  {
    id v10 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315138;
      char v14 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s HomeUserID Exists but TV is not part of a current home.",  buf,  0xCu);
    }
  }
}

void sub_1002959DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    uint64_t v6 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke_2";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s #multi-user-atv Syncing completed with error %@",  (uint8_t *)&v5,  0x16u);
  }

  if (v3) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 88LL), *(id *)(a1 + 40));
  }
}

void sub_100295AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    uint64_t v6 = "-[ADMultiUserService setSiriRMVState:foriCloudAltDSID:completion:]_block_invoke";
    __int16 v7 = 2112;
    id v8 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv Attempted to turn on RmV with error: %@",  (uint8_t *)&v5,  0x16u);
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (v3)
  {
LABEL_3:
    [*(id *)(a1 + 32) triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 40) homeUserID:0 toState:3];
    [*(id *)(a1 + 32) triggerATVRmVStateChangeForiCloudAltDSID:*(void *)(a1 + 40) homeUserID:0 toState:0];
  }

void sub_100295BB8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getUserAgentStringForSharedUserID:*(void *)(a1 + 40)]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100295C04(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getUserAgentStringForSharedUserID:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100295C40(uint64_t a1)
{
}

void sub_100295C4C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
  [v2 systemUptime];
  double v4 = v3;

  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = *(double *)(v5 + 104);
  if ((v6 == 0.0 || v4 - v6 >= 3600.0) && *(void *)(v5 + 112) <= 2uLL)
  {
    *(double *)(v5 + 104) = v4;
    dispatch_time_t v7 = dispatch_time(0LL, 60000000000LL);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(dispatch_queue_s **)(v8 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100295D20;
    block[3] = &unk_1004FD940;
    void block[4] = v8;
    dispatch_after(v7, v9, block);
  }

id sub_100295D20(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    dispatch_time_t v7 = "-[ADMultiUserService voiceProfilesOutOfSync]_block_invoke_2";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Starting a download.", buf, 0xCu);
  }

  ++*(void *)(*(void *)(a1 + 32) + 112LL);
  double v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100295E20;
  v5[3] = &unk_1004FB0E0;
  void v5[4] = v3;
  return [v3 _forceCloudSyncedUserDownload:v5];
}

void sub_100295E20(uint64_t a1, int a2)
{
  double v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    double v6 = "-[ADMultiUserService voiceProfilesOutOfSync]_block_invoke";
    __int16 v7 = 1024;
    int v8 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s download status is (%d)",  (uint8_t *)&v5,  0x12u);
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  if (a2) {
LABEL_3:
  }
    *(void *)(*(void *)(a1 + 32) + 112LL) = 0LL;
LABEL_4:
  *(void *)(*(void *)(a1 + 32) + 104LL) = 0LL;
}

id sub_100295EFC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v7 = "-[ADMultiUserService resetAllUsers]_block_invoke";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s ", buf, 0xCu);
  }

  [*(id *)(a1 + 32) _resetAllUsers];
  [*(id *)(a1 + 32) _updateSAMultiUserInfo];
  double v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100295FF4;
  v5[3] = &unk_1004FB0E0;
  void v5[4] = v3;
  return [v3 _forceCloudSyncedUserDownload:v5];
}

void sub_100295FF4(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_time_t v3 = dispatch_time(0LL, 30000000000LL);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(dispatch_queue_s **)(v4 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100296070;
    block[3] = &unk_1004FD940;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }

id sub_100296070(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshUsersAndVoiceProfiles:0];
}

void sub_10029607C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  if (v2)
  {
    dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 homeMembers]);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v3 count];

    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v5 = *(void *)(v4 + 24);
    if (v5) {
      *(void *)(v4 + 24) = v5 - 1;
    }
  }

  if (*(void *)(a1 + 40))
  {
    double v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "objectForKey:"));
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
    unsigned __int8 v8 = [v7 isEqualToString:*(void *)(a1 + 40)];

    uint64_t v9 = (os_log_s *)AFSiriLogContextDaemon;
    BOOL v10 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
    if ((v8 & 1) != 0 || v6)
    {
      if (v10)
      {
        uint64_t v62 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 136315395;
        id v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUsers:g"
              "hostVoiceProfileDetected:]_block_invoke";
        __int16 v73 = 2113;
        __int128 v74 = v62;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s classifiedUser %{private}@ is enrolled, no cleanup needed",  buf,  0x16u);
      }
    }

    else
    {
      if (v10)
      {
        id v61 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 136315395;
        id v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalUsers:g"
              "hostVoiceProfileDetected:]_block_invoke";
        __int16 v73 = 2113;
        __int128 v74 = v61;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s classifiedUser %{private}@ is not enrolled, its voice profile will be removed",  buf,  0x16u);
      }

      [*(id *)(a1 + 32) _trackGhostVoiceProfile:*(void *)(a1 + 40)];
      uint64_t v11 = *(_BYTE **)(a1 + 96);
      if (v11) {
        *uint64_t v11 = 1;
      }
    }
  }

  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  id obj = *(id *)(a1 + 48);
  id v66 = [obj countByEnumeratingWithState:&v67 objects:v77 count:16];
  if (v66)
  {
    uint64_t v65 = *(void *)v68;
    *(void *)&__int128 v12 = 136315651LL;
    __int128 v63 = v12;
    do
    {
      id v13 = 0LL;
      do
      {
        if (*(void *)v68 != v65) {
          objc_enumerationMutation(obj);
        }
        char v14 = *(void **)(*((void *)&v67 + 1) + 8LL * (void)v13);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 232), "objectForKey:", v14, v63));
        if (v15)
        {

LABEL_22:
          id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
          __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) objectForKey:v14]);
          id v20 = (void *)AFSiriLogContextDaemon;
          BOOL v21 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG);
          if (v19)
          {
            id v22 = v19;
            if (v21)
            {
              __int128 v23 = v20;
              id v24 = (void *)objc_claimAutoreleasedReturnValue([v19 sharedUserID]);
              *(_DWORD *)__int128 buf = 136315394;
              id v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalU"
                    "sers:ghostVoiceProfileDetected:]_block_invoke";
              __int16 v73 = 2112;
              __int128 v74 = v24;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "%s Using shared user %@.",  buf,  0x16u);

              id v22 = v19;
            }
          }

          else
          {
            if (v21)
            {
              uint64_t v50 = *(void **)(*(void *)(a1 + 32) + 240LL);
              __int16 v51 = v20;
              uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v50 sharedUserID]);
              *(_DWORD *)__int128 buf = 136315394;
              id v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalU"
                    "sers:ghostVoiceProfileDetected:]_block_invoke";
              __int16 v73 = 2112;
              __int128 v74 = v52;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEBUG,  "%s Using primary user %@.",  buf,  0x16u);
            }

            id v22 = *(id *)(*(void *)(a1 + 32) + 240LL);
          }

          id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 iCloudAltDSID]);
          uint64_t v26 = _AFPreferencesSiriRMVSetting(v25);

          if (*(_BYTE *)(*(void *)(a1 + 32) + 224LL)
            && ((v27 = (void *)objc_claimAutoreleasedReturnValue( +[ADUserProfileService sharedService]( ADUserProfileService,  "sharedService")),  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v22 iCloudAltDSID]),  v29 = objc_msgSend(v27, "userProfileExistsWithiCloudAltDSID:", v28),  v28,  v27,  !v29)
             || (unint64_t)(v26 - 1) >= 2))
          {
            char v38 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
            {
              __int16 v53 = v38;
              id v54 = (void *)objc_claimAutoreleasedReturnValue([v22 iCloudAltDSID]);
              *(_DWORD *)__int128 buf = 136315395;
              id v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:totalU"
                    "sers:ghostVoiceProfileDetected:]_block_invoke";
              __int16 v73 = 2113;
              __int128 v74 = v54;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "%s Score found for user not on TV. Sanitizing %{private}@",  buf,  0x16u);
            }

            __int128 v39 = *(void **)(a1 + 32);
            __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v22 iCloudAltDSID]);
            [v39 triggerATVRmVStateChangeForiCloudAltDSID:v40 homeUserID:0 toState:3];

            __int16 v41 = *(void **)(a1 + 32);
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v22 homeUserUUID]);
            __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v22 sharedUserID]);
            id v44 = (void *)objc_claimAutoreleasedReturnValue([v22 iCloudAltDSID]);
            [v41 _removeUser:v19 homeUserID:v42 sharedUserID:v43 iCloudAltDSID:v44 error:0];
          }

          else
          {
            if (v22)
            {
              __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v22 companionAssistantID]);

              if (v30)
              {
                uint64_t v31 = *(void **)(a1 + 56);
                id v32 = (void *)objc_claimAutoreleasedReturnValue([v22 companionAssistantID]);
                id v33 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKey:v32]);

                if (v33) {
                  goto LABEL_59;
                }
              }

              uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v22 companionIDSIdentifier]);

              if (v34
                && (id v35 = *(void **)(a1 + 56),
                    id v36 = (void *)objc_claimAutoreleasedReturnValue([v22 companionIDSIdentifier]),
                    id v33 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:v36]),
                    v36,
                    v33))
              {
LABEL_59:
                if ([v33 count])
                {
                  uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue([v33 objectAtIndex:0]);
                  [v18 setObject:v37 forKey:@"companion_device_score"];
                  goto LABEL_38;
                }

                id v48 = (void *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v37 = v48;
                  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v22 companionAssistantID]);
                  id v56 = (void *)objc_claimAutoreleasedReturnValue([v22 companionIDSIdentifier]);
                  *(_DWORD *)__int128 buf = v63;
                  id v72 = "-[ADMultiUserService validateAndReturnScores:classifiedUser:donatedScores:unknownUserSharedId:to"
                        "talUsers:ghostVoiceProfileDetected:]_block_invoke";
                  __int16 v73 = 2113;
                  __int128 v74 = v55;
                  __int16 v75 = 2113;
                  id v76 = v56;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "%s Empty Score array from assistantId %{private}@ idsIdentifier %{private}@",  buf,  0x20u);

LABEL_38:
                }

void sub_1002968AC(uint64_t a1)
{
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 232LL);
  id v2 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v19;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v19 != v4) {
          objc_enumerationMutation(obj);
        }
        double v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 232) objectForKey:*(void *)(*((void *)&v18 + 1) + 8 * (void)v5)]);
        __int16 v7 = (void *)objc_claimAutoreleasedReturnValue( +[ADCommunalDeviceUser saRemoteDeviceForHomeMember:]( &OBJC_CLASS___ADCommunalDeviceUser,  "saRemoteDeviceForHomeMember:",  v6));
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        void v15[2] = sub_100296ACC;
        v15[3] = &unk_1004F9010;
        id v8 = v7;
        id v16 = v8;
        id v9 = v6;
        id v17 = v9;
        id v10 = +[AFPeerInfo newWithBuilder:](&OBJC_CLASS___AFPeerInfo, "newWithBuilder:", v15);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[ADCompanionService sharedInstance](&OBJC_CLASS___ADCompanionService, "sharedInstance"));
        __int128 v12 = -[ADPeerInfo initWithAFPeerInfo:](objc_alloc(&OBJC_CLASS___ADPeerInfo), "initWithAFPeerInfo:", v10);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 discoveryTypeForPeer:v12]);

        if (v13) {
          [v8 setDiscoveryMode:v13];
        }

        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v3);
  }
}

void sub_100296ACC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantId]);
  [v4 setAssistantIdentifier:v5];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) companionIDSIdentifier]);
  [v4 setIdsDeviceUniqueIdentifier:v6];
}

void sub_100296B48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100296BF8;
  v7[3] = &unk_1004F8FC0;
  uint64_t v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 getCurrentHomeMemberIds:v7];
}

void sub_100296BF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 sharedUserIdentifier]);
  id v6 = (void *)v5;
  __int16 v7 = (void *)AFMultiUserDefaultSharedUserId;
  if (v5) {
    id v8 = (void *)v5;
  }
  else {
    id v8 = (void *)AFMultiUserDefaultSharedUserId;
  }
  id v17 = v8;

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 loggingSharedUserIdentifier]);
  uint64_t v11 = (void *)v10;
  if (v10) {
    __int128 v12 = (void *)v10;
  }
  else {
    __int128 v12 = v7;
  }
  id v13 = v12;

  char v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _generateDeviceUserWithHomeUserUUID:v3 sharedUserId:v17 loggableSharedUserId:v13 adaccount:*(void *)(a1 + 40)]);
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommunalDeviceUser saMultiUserInfo:](&OBJC_CLASS___ADCommunalDeviceUser, "saMultiUserInfo:", v14));
  (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
}

void sub_100296D0C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_100296D44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100296D58(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 240LL);
  if (v2) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedUserID]);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v5 = *(id *)(*(void *)(a1 + 32) + 232LL);
  id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v13;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v13 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 232),  "objectForKey:",  *(void *)(*((void *)&v12 + 1) + 8 * (void)v9),  (void)v12));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedUserID]);

        if (v11) {
          -[NSMutableArray addObject:](v4, "addObject:", v11);
        }

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v7);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100296ED8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 240);
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = (id)v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100296F38(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 240);
  if (v4)
  {
    id v5 = sub_10028D6F8(v4, *(void **)(v3 + 152));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = *(void **)(*(void *)(a1 + 32) + 240LL);
  }

  else
  {
    uint64_t v8 = *(void **)(v3 + 248);
    if (!v8) {
      goto LABEL_6;
    }
    id v9 = *(void **)(v3 + 160);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 248) sharedUserID]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);
    id v12 = sub_10028D6F8(v8, v11);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v12);

    id v7 = *(void **)(*(void *)(a1 + 32) + 248LL);
  }

  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 sharedUserID]);
  -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v6, v13);

  uint64_t v3 = *(void *)(a1 + 32);
LABEL_6:
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v14 = *(id *)(v3 + 232);
  id v15 = [v14 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v28;
    do
    {
      __int128 v18 = 0LL;
      do
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(v14);
        }
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 232),  "objectForKey:",  *(void *)(*((void *)&v27 + 1) + 8 * (void)v18),  (void)v27));
        __int128 v20 = v19;
        if (v19)
        {
          __int128 v21 = *(void **)(*(void *)(a1 + 32) + 160LL);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v19 sharedUserID]);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v22]);
          id v24 = sub_10028D6F8(v20, v23);
          id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v20 sharedUserID]);
          -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v25, v26);
        }

        __int128 v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v27 objects:v31 count:16];
    }

    while (v16);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100297184(uint64_t a1)
{
  uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v2 = (void *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 240LL);
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 dictionaryRepresentation]);
    *(_DWORD *)__int128 buf = 136315395;
    uint64_t v52 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
    __int16 v53 = 2113;
    id v54 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s primaryUser:%{private}@:", buf, 0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (*(void *)(v6 + 240))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_augmentUserPropertiesWithHomeInfoForUser:"));
    -[NSMutableArray addObject:](v42, "addObject:", v7);

    uint64_t v6 = *(void *)(a1 + 32);
  }

  uint64_t v8 = *(void **)(v6 + 248);
  if (v8 && !*(void *)(v6 + 240))
  {
    id v9 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = v9;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 dictionaryRepresentation]);
      *(_DWORD *)__int128 buf = 136315395;
      uint64_t v52 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
      __int16 v53 = 2113;
      id v54 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%s Device Owner:%{private}@:", buf, 0x16u);

      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v8 = *(void **)(v6 + 248);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue([(id)v6 _augmentUserPropertiesWithHomeInfoForUser:v8]);
    -[NSMutableArray addObject:](v42, "addObject:", v12);

    uint64_t v6 = *(void *)(a1 + 32);
  }

  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  id v13 = *(id *)(v6 + 232);
  id v14 = [v13 countByEnumeratingWithState:&v47 objects:v58 count:16];
  if (v14)
  {
    id v16 = v14;
    uint64_t v17 = *(void *)v48;
    *(void *)&__int128 v15 = 136315395LL;
    __int128 v40 = v15;
    do
    {
      __int128 v18 = 0LL;
      do
      {
        if (*(void *)v48 != v17) {
          objc_enumerationMutation(v13);
        }
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 232),  "objectForKey:",  *(void *)(*((void *)&v47 + 1) + 8 * (void)v18),  v40));
        __int128 v20 = (void *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          __int128 v21 = v20;
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v19 dictionaryRepresentation]);
          *(_DWORD *)__int128 buf = v40;
          uint64_t v52 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
          __int16 v53 = 2113;
          id v54 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%s sharedUser:%{private}@:", buf, 0x16u);
        }

        if (v19)
        {
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _augmentUserPropertiesWithHomeInfoForUser:v19]);
          -[NSMutableArray addObject:](v42, "addObject:", v23);
        }

        __int128 v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v13 countByEnumeratingWithState:&v47 objects:v58 count:16];
    }

    while (v16);
  }

  if (AFIsATV(v24, v25))
  {
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id v26 = *(id *)(*(void *)(a1 + 32) + 304LL);
    id v27 = [v26 countByEnumeratingWithState:&v43 objects:v57 count:16];
    if (v27)
    {
      id v29 = v27;
      uint64_t v30 = *(void *)v44;
      *(void *)&__int128 v28 = 136315651LL;
      __int128 v41 = v28;
      do
      {
        uint64_t v31 = 0LL;
        do
        {
          if (*(void *)v44 != v30) {
            objc_enumerationMutation(v26);
          }
          id v32 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 304),  "objectForKey:",  *(void *)(*((void *)&v43 + 1) + 8 * (void)v31),  v41));
          id v33 = v32;
          if (v32)
          {
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v32 sharedUserID]);

            if (!v34)
            {
              id v35 = (void *)AFSiriLogContextDaemon;
              if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
              {
                id v36 = v35;
                uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v33 dictionaryRepresentation]);
                char v38 = (void *)objc_claimAutoreleasedReturnValue([v33 iCloudAltDSID]);
                *(_DWORD *)__int128 buf = v41;
                uint64_t v52 = "-[ADMultiUserService showMultiUsersWithCompletion:]_block_invoke";
                __int16 v53 = 2113;
                id v54 = v37;
                __int16 v55 = 2112;
                id v56 = v38;
                _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_INFO,  "%s [cloud-only]sharedUser:%{private}@ %@",  buf,  0x20u);
              }

              __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _augmentUserPropertiesWithHomeInfoForUser:v33]);
              -[NSMutableArray addObject:](v42, "addObject:", v39);
            }
          }

          uint64_t v31 = (char *)v31 + 1;
        }

        while (v29 != v31);
        id v29 = [v26 countByEnumeratingWithState:&v43 objects:v57 count:16];
      }

      while (v29);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10029769C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 232) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = 0LL;
  [v3 _removeUser:v2 homeUserID:0 sharedUserID:v4 iCloudAltDSID:0 error:&v7];
  id v5 = v7;
  if (!v5) {
    [*(id *)(a1 + 32) _postRemovalStateCleanup];
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

void sub_10029772C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v7 = 0LL;
  [v3 _removeUser:v2 homeUserID:v4 sharedUserID:0 iCloudAltDSID:0 error:&v7];
  id v5 = v7;
  if (!v5) {
    [*(id *)(a1 + 32) _postRemovalStateCleanup];
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v5);
  }
}

id sub_1002977BC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32)) {
    uint64_t v1 = @"owner";
  }
  else {
    uint64_t v1 = @"participant";
  }
  v6[0] = @"user";
  v6[1] = @"timestamp";
  v7[0] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 timeIntervalSince1970];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  v7[1] = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  2LL));

  return v4;
}

void sub_1002978A4(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  uint64_t v24 = a1;
  id obj = *(id *)(*(void *)(a1 + 32) + 296LL);
  id v23 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v23)
  {
    uint64_t v3 = 0LL;
    uint64_t v22 = *(void *)v35;
    do
    {
      uint64_t v4 = 0LL;
      id v5 = v3;
      do
      {
        if (*(void *)v35 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v25 = v4;
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(v24 + 32) + 296) objectForKey:*(void *)(*((void *)&v34 + 1) + 8 * v4)]);

        __int128 v32 = 0u;
        __int128 v33 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        id v6 = *(id *)(v24 + 40);
        id v7 = [v6 countByEnumeratingWithState:&v30 objects:v43 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v31;
          do
          {
            uint64_t v10 = 0LL;
            do
            {
              if (*(void *)v31 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)v10);
              id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 shareOwnerName]);
              unsigned int v13 = [v12 isEqualToString:v11];

              if (v13)
              {
                id v14 = (os_log_s *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__int128 buf = 136315394;
                  __int128 v40 = "-[ADMultiUserService removeUserWithShareOwnerNames:completion:]_block_invoke";
                  __int16 v41 = 2112;
                  uint64_t v42 = v11;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%s Adding (%@) for removal",  buf,  0x16u);
                }

                -[NSMutableArray addObject:](v2, "addObject:", v3);
              }

              uint64_t v10 = (char *)v10 + 1;
            }

            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v30 objects:v43 count:16];
          }

          while (v8);
        }

        uint64_t v4 = v25 + 1;
        id v5 = v3;
      }

      while ((id)(v25 + 1) != v23);
      id v23 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
    }

    while (v23);
  }

  if (-[NSMutableArray count](v2, "count"))
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v15 = v2;
    id v16 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v26,  v38,  16LL);
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v27;
      do
      {
        for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v18) {
            objc_enumerationMutation(v15);
          }
          [*(id *)(v24 + 32) _removeUser:*(void *)(*((void *)&v26 + 1) + 8 * (void)i) homeUserID:0 sharedUserID:0 iCloudAltDSID:0 error:0];
        }

        id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v26,  v38,  16LL);
      }

      while (v17);
    }

    [*(id *)(v24 + 32) _postRemovalStateCleanup];
  }

  uint64_t v20 = *(void *)(v24 + 48);
  if (v20) {
    (*(void (**)(uint64_t, void))(v20 + 16))(v20, 0LL);
  }
}

id sub_100297BFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 248);
  *(void *)(v2 + 24_Block_object_dispose(va, 8) = 0LL;

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  [v4 setDeviceOwner:0];

  return [*(id *)(a1 + 32) _saveDeviceOwnerToKeychainCache];
}

void sub_100297C4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(_BYTE *)(a1 + 88))
  {
    LOBYTE(v_Block_object_dispose(va, 8) = 1;
    [v2 _addUser:v3 sharedUserId:*(void *)(a1 + 48) loggableSharedUserId:*(void *)(a1 + 56) iCloudAltDSID:*(void *)(a1 + 64) enrollmentName:*(void *)(a1 + 72) isPrimary:*(unsigned __int8 *)(a1 + 89) nonCloudSyncedUser:v8 completion:*(void *)(a1 + 80)];
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100297D80;
    v9[3] = &unk_1004F8F50;
    id v5 = *(id *)(a1 + 80);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    id v15 = v5;
    void v9[4] = v6;
    id v10 = v7;
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    id v13 = *(id *)(a1 + 64);
    id v14 = *(id *)(a1 + 72);
    char v16 = *(_BYTE *)(a1 + 89);
    char v17 = *(_BYTE *)(a1 + 88);
    [v2 _allowVoiceIdentificationForThisUser:v3 iCloudAltDSID:v4 completion:v9];
  }

void sub_100297D80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    LOBYTE(v5) = *(_BYTE *)(a1 + 89);
    id v6 = 0LL;
    [*(id *)(a1 + 32) _addUser:*(void *)(a1 + 40) sharedUserId:*(void *)(a1 + 48) loggableSharedUserId:*(void *)(a1 + 56) iCloudAltDSID:*(void *)(a1 + 64) enrollmentName:*(void *)(a1 + 72) isPrimary:*(unsigned __int8 *)(a1 + 88) nonCloudSyncedUser:v5 completion:*(void *)(a1 + 80)];
    goto LABEL_5;
  }

  uint64_t v4 = *(void *)(a1 + 80);
  if (v4)
  {
    id v6 = v3;
    (*(void (**)(void))(v4 + 16))();
LABEL_5:
    id v3 = v6;
  }
}

id sub_100297DF4(uint64_t a1)
{
  LOBYTE(v2) = *(_BYTE *)(a1 + 120);
  return [*(id *)(a1 + 32) _addDeviceOwner:*(void *)(a1 + 40) sharedUserId:*(void *)(a1 + 48) loggableSharedUserId:*(void *)(a1 + 56) iCloudAltDSID:*(void *)(a1 + 64) audioAppSignals:*(void *)(a1 + 72) enrollmentName:*(void *)(a1 + 80) companionInfo:*(void *)(a1 + 88)  shareOwnerName:*(void *)(a1 + 96) homeMemberSettings:*(void *)(a1 + 104) loggingAllowed:v2 completion:*(void *)(a1 + 112)];
}

void sub_100297E40(id a1)
{
  uint64_t v1 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v2 = 136315138;
    id v3 = "-[ADMultiUserService _deleteShareForUser:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_INFO,  "%s Share removal operation complete.",  (uint8_t *)&v2,  0xCu);
  }

void sub_100297EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100297FA8;
  block[3] = &unk_1004FCBB0;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 280);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v9 = v3;
  id v10 = v5;
  id v12 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_100297FA8(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2 && [v2 count])
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:*(void *)(a1 + 48)]);
    if (v3)
    {
      uint64_t v5 = (void *)v3;
      if (AFIsATV(v3, v4)
        && +[AFFeatureFlags isLassoEnabled](&OBJC_CLASS___AFFeatureFlags, "isLassoEnabled")
        && [*(id *)(*(void *)(a1 + 32) + 88) isEqualToString:*(void *)(a1 + 56)])
      {
        id v6 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v7 = *(void *)(a1 + 56);
          int v23 = 136315394;
          uint64_t v24 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke";
          __int16 v25 = 2112;
          uint64_t v26 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Set RMV enabled for the user requested during buddy flow with iCloudAltDSID%@",  (uint8_t *)&v23,  0x16u);
        }

        id v8 = [v5 mutableCopy];
        [v8 setObject:&off_100513720 forKey:@"allowVoiceID"];
        [*(id *)(a1 + 40) setObject:v8 forKey:*(void *)(a1 + 48)];

        uint64_t v5 = v8;
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"allowVoiceID"]);
      id v10 = v9;
      if (v9 && [v9 integerValue] == (id)1)
      {
        uint64_t v11 = *(void *)(a1 + 64);
        if (v11) {
          (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0LL);
        }
      }

      else
      {
        char v17 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          uint64_t v18 = *(void *)(a1 + 48);
          int v23 = 136315394;
          uint64_t v24 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke";
          __int16 v25 = 2112;
          uint64_t v26 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%s VoiceID disallowed on fresh retrieval for (%@)",  (uint8_t *)&v23,  0x16u);
        }

        uint64_t v19 = *(void *)(a1 + 64);
        if (v19)
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  6010LL,  &__NSDictionary0__struct));
          (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v20);
        }
      }

      goto LABEL_24;
    }

    __int128 v21 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(a1 + 48);
      int v23 = 136315394;
      uint64_t v24 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke";
      __int16 v25 = 2112;
      uint64_t v26 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%s Missing setting even on fresh retrieval (%@)",  (uint8_t *)&v23,  0x16u);
    }

    uint64_t v14 = *(void *)(a1 + 64);
    if (v14)
    {
      uint64_t v15 = kAFAssistantErrorDomain;
      uint64_t v16 = 6008LL;
      goto LABEL_18;
    }
  }

  else
  {
    id v12 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      int v23 = 136315394;
      uint64_t v24 = "-[ADMultiUserService _allowVoiceIdentificationForThisUser:iCloudAltDSID:completion:]_block_invoke_2";
      __int16 v25 = 2112;
      uint64_t v26 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s Missing all settings for (%@)",  (uint8_t *)&v23,  0x16u);
    }

    uint64_t v14 = *(void *)(a1 + 64);
    if (v14)
    {
      uint64_t v15 = kAFAssistantErrorDomain;
      uint64_t v16 = 6009LL;
LABEL_18:
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v15,  v16,  &__NSDictionary0__struct));
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v5);
LABEL_24:
    }
  }

void sub_100298338(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 homeMemberSettings]);
  if (!v3) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }
}

id sub_100298378(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _countVoiceProfiles];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1002983A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [*(id *)(a1 + 32) containsObject:v6];
  id v8 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v9 = @"is not";
    int v12 = 136315906;
    uint64_t v13 = "-[ADMultiUserService _isHubHostingMultiUserLanguage]_block_invoke";
    if (v7) {
      id v9 = @"is";
    }
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    id v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%s Remora device (%@) with language (%@) %@ MultiUser compatible",  (uint8_t *)&v12,  0x2Au);
  }

  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v10 + 24)) {
    char v11 = 1;
  }
  else {
    char v11 = v7;
  }
  *(_BYTE *)(v10 + 24) = v11;
}

id sub_1002984D8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isHostingMultiUserLanguage];
  if ((_DWORD)result)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 288) count];
    BOOL v3 = result != 0LL;
  }

  else
  {
    BOOL v3 = 0;
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v3;
  return result;
}

void sub_100298528(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    id v5 = @"failed";
    int v7 = 136315650;
    id v8 = "-[ADMultiUserService _forceCloudSyncedUserDownload:]_block_invoke";
    __int16 v9 = 2112;
    if (!v3) {
      id v5 = @"succeeded";
    }
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Download %@ with error: %@",  (uint8_t *)&v7,  0x20u);
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, BOOL))(v6 + 16))(v6, v3 == 0LL);
  }
}

void sub_100298628(uint64_t a1)
{
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v29;
    *(void *)&__int128 v3 = 136315395LL;
    __int128 v23 = v3;
LABEL_3:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v29 != v5) {
        objc_enumerationMutation(obj);
      }
      int v7 = *(void **)(*((void *)&v28 + 1) + 8 * v6);
      id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", @"ADUserProfileKeyICloudIdentifier", v23));
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void **)(v9 + 240);
      if (v10)
      {
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 iCloudAltDSID]);
        unsigned int v12 = [v11 isEqualToString:v8];

        uint64_t v9 = *(void *)(a1 + 40);
        if (v12)
        {
          id v13 = *(id *)(v9 + 240);
          if (v13) {
            goto LABEL_11;
          }
          uint64_t v9 = *(void *)(a1 + 40);
        }
      }

      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v9 + 304) objectForKey:v8]);
LABEL_11:
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 sharedUserID]);
      if (v8)
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue(+[ADUserProfileService sharedService](&OBJC_CLASS___ADUserProfileService, "sharedService"));
        unsigned __int8 v16 = [v15 userProfileExistsWithiCloudAltDSID:v8];

        if ((v16 & 1) == 0)
        {
          uint64_t v19 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315138;
            __int128 v33 = "-[ADMultiUserService _handleATVUserProfilesRemoved:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%s #multi-user-atv Force clearing the ATV RmV state of user who no longer exists on TV",  buf,  0xCu);
          }

          _AFPreferencesSetSiriRMVSetting(v8, 0LL);
          uint64_t v20 = *(void **)(a1 + 40);
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v13 homeUserUUID]);
          id v27 = 0LL;
          [v20 _removeUser:v13 homeUserID:v21 sharedUserID:v14 iCloudAltDSID:v8 error:&v27];
          id v22 = v27;

          if (!v22) {
            [*(id *)(a1 + 40) _postRemovalStateCleanup];
          }

          return;
        }
      }

      if (v14)
      {
        id v17 = *(void **)(a1 + 40);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        void v25[2] = sub_100298984;
        void v25[3] = &unk_1004FBD90;
        id v26 = v14;
        [v17 removeUserWithSharedUserID:v26 completion:v25];
      }

      else
      {
        __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = v23;
          __int128 v33 = "-[ADMultiUserService _handleATVUserProfilesRemoved:]_block_invoke";
          __int16 v34 = 2113;
          __int128 v35 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s No shared user found for removal with dictionary %{private}@",  buf,  0x16u);
        }
      }

      if (v4 == (id)++v6)
      {
        id v4 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  [*(id *)(a1 + 40) _postRemovalStateCleanup];
}

void sub_100298984(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    int v7 = "-[ADMultiUserService _handleATVUserProfilesRemoved:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s Removing user with shared user ID %@ with error %@",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_100298A5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 136315650;
    int v7 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Removed (%@) with error (%@)",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_100298B30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 136315650;
      __int16 v8 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
      __int16 v9 = 2112;
      id v10 = v3;
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s There was an error %@ adding %@",  (uint8_t *)&v7,  0x20u);
    }
  }

  else if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v6 = *(void **)(a1 + 32);
    int v7 = 136315394;
    __int16 v8 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Added %@", (uint8_t *)&v7, 0x16u);
  }
}

id sub_100298C68(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADMultiUserService _refreshUsersAndVoiceProfiles:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Configured LiveOn Users.",  (uint8_t *)&v4,  0xCu);
    }
  }

  return [*(id *)(a1 + 40) _updateSAMultiUserInfo];
}

id sub_100298D24(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315138;
    __int16 v8 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 312);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_100298E10;
  v6[3] = &unk_1004F8E90;
  void v6[4] = v3;
  return [v4 settingsForMultiUserWithRefresh:1 completion:v6];
}

void sub_100298E10(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315395;
    uint64_t v12 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
    __int16 v13 = 2113;
    id v14 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s userSettings = %{private}@", buf, 0x16u);
  }

  id v5 = [*(id *)(*(void *)(a1 + 32) + 88) copy];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(dispatch_queue_s **)(v6 + 280);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100298F40;
  v9[3] = &unk_1004FD968;
  void v9[4] = v6;
  id v10 = v3;
  id v8 = v3;
  dispatch_async(v7, v9);
}

void sub_100298F40(uint64_t a1)
{
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  [*(id *)(a1 + 32) _updateHomeKitSettingsForDeviceOwner];
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v2 = *(id *)(a1 + 40);
  id v3 = [v2 countByEnumeratingWithState:&v35 objects:v41 count:16];
  if (!v3) {
    goto LABEL_42;
  }
  id v5 = v3;
  char v6 = 0;
  char v32 = 0;
  uint64_t v7 = *(void *)v36;
  *(void *)&__int128 v4 = 136315138LL;
  __int128 v30 = v4;
  id obj = v2;
  do
  {
    id v8 = 0LL;
    do
    {
      if (*(void *)v36 != v7) {
        objc_enumerationMutation(obj);
      }
      uint64_t v9 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)v8);
      id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 296), "objectForKey:", v9, v30));
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKey:v9]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:@"allowVoiceID"]);
      unsigned __int8 v13 = [*(id *)(a1 + 32) personalDomainSettingsDidChange:v10 newUserSettings:v11];
      id v14 = [*(id *)(a1 + 32) _updateHomeKitSettings:v9];
      if ((v14 & 1) == 0 && !AFIsATV(v14, v15))
      {
        __int16 v18 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = v30;
          __int128 v40 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "%s New user participating in multi-user",  buf,  0xCu);
        }

        [*(id *)(a1 + 32) _trackHomeUserUUIDForInFlightVoiceProfile:v9];
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
        [v19 logEventWithType:6109 contextProvider:&stru_1004F8E68];

        goto LABEL_21;
      }

      if (!v11) {
        goto LABEL_27;
      }
      if ([v12 integerValue] == (id)1)
      {
        if ((v6 & 1) != 0 || [v12 integerValue] != (id)1)
        {
          v32 |= v13;
          goto LABEL_27;
        }

        if (([v10 nonCloudSyncedUser] & 1) != 0
          || (unsigned __int8 v16 = *(void **)(*(void *)(a1 + 32) + 272LL),
              id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedUserID]),
              LOBYTE(v16) = [v16 isSATEnrolledForSiriProfileId:v17 forLanguageCode:*(void *)(*(void *)(a1 + 32) + 96)],  v17,  (v16 & 1) != 0))
        {
          char v6 = 0;
          goto LABEL_27;
        }

        id v22 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = v30;
          __int128 v40 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "%s newUsersJoined", buf, 0xCu);
        }

        os_signpost_id_t v23 = os_signpost_id_generate(AFSiriLogContextMultiUser);
        uint64_t v24 = (os_log_s *)AFSiriLogContextMultiUser;
        __int16 v25 = v24;
        if (v23 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v25,  OS_SIGNPOST_INTERVAL_BEGIN,  v23,  "MultiUserService",  "New user was added",  buf,  2u);
        }

        *(void *)(*(void *)(a1 + 32) + 16LL) = v23;
LABEL_21:
        char v6 = 1;
        goto LABEL_27;
      }

void sub_10029942C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(dispatch_queue_s **)(v2 + 280);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100299488;
  v4[3] = &unk_1004FC4D0;
  char v5 = a2;
  void v4[4] = v2;
  dispatch_async(v3, v4);
}

void sub_100299488(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(unsigned __int8 *)(a1 + 40);
    int v10 = 136315394;
    __int16 v11 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke_2";
    __int16 v12 = 1024;
    int v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Download completed, success: %{BOOL}d",  (uint8_t *)&v10,  0x12u);
  }

  [*(id *)(a1 + 32) _untrackAllHomeUserUUIDsForInFlightVoiceProfile];
  __int128 v4 = (os_log_s *)AFSiriLogContextMultiUser;
  char v5 = v4;
  os_signpost_id_t v6 = *(void *)(*(void *)(a1 + 32) + 16LL);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    LOWORD(v10) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_INTERVAL_END,  v6,  "MultiUserService",  "Cloud sync finished",  (uint8_t *)&v10,  2u);
  }

  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextMultiUser;
    id v8 = v7;
    os_signpost_id_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_END,  v9,  "MultiUserService",  "MultiUser is ready",  (uint8_t *)&v10,  2u);
    }

    [*(id *)(a1 + 32) _updateSAMultiUserInfo];
  }

NSDictionary *__cdecl sub_100299630(id a1)
{
  char v5 = @"date";
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:]( &OBJC_CLASS___NSDateFormatter,  "localizedStringFromDate:dateStyle:timeStyle:",  v1,  1LL,  4LL));
  os_signpost_id_t v6 = v2;
  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));

  return (NSDictionary *)v3;
}

void sub_1002996F8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    int v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315394;
      char v5 = "-[ADMultiUserService refreshHomeKitOnboardedUsers]_block_invoke_2";
      __int16 v6 = 2112;
      uint64_t v7 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Error when removing user (%@)",  (uint8_t *)&v4,  0x16u);
    }
  }
}

void sub_1002997B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  int v3 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v4 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO);
  if (v4)
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v15 = "-[ADMultiUserService _primaryUserSharedUserIdentifierDidChangeNotification:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s ", buf, 0xCu);
  }

  int v5 = AFIsInternalInstall(v4);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v5 || !*(_BYTE *)(v6 + 84))
  {
    if (!*(void *)(v6 + 240))
    {
LABEL_15:
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      _OWORD v13[2] = sub_1002999E0;
      v13[3] = &unk_1004FB0E0;
      void v13[4] = v6;
      [(id)v6 _forceCloudSyncedUserDownload:v13];
      goto LABEL_17;
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedUserIdentifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v2 loggingSharedUserIdentifier]);
    os_signpost_id_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) sharedUserID]);
    if ([v7 isEqualToString:v9])
    {
      int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 240) loggableSharedUserID]);
      unsigned __int8 v11 = [v8 isEqualToString:v10];

      if ((v11 & 1) != 0 || !v7) {
        goto LABEL_16;
      }
    }

    else
    {

      if (!v7) {
        goto LABEL_16;
      }
    }

    if (v8)
    {
      __int16 v12 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v15 = "-[ADMultiUserService _primaryUserSharedUserIdentifierDidChangeNotification:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%s SharedUserId of primary user changed. Resetting primary user.",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) _resetPrimaryUser];

      uint64_t v6 = *(void *)(a1 + 32);
      goto LABEL_15;
    }

void sub_1002999E0(uint64_t a1, int a2)
{
  if (a2)
  {
    dispatch_time_t v3 = dispatch_time(0LL, 30000000000LL);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(dispatch_queue_s **)(v4 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100299A5C;
    block[3] = &unk_1004FD940;
    void block[4] = v4;
    dispatch_after(v3, v5, block);
  }

id sub_100299A5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _refreshUsersAndVoiceProfiles:0];
}

void sub_100299A68(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADMultiUserService _multiUserRemoraListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s MultiUserRemora Connection Invalidated (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_100299B20(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADMultiUserService _multiUserRemoraListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s MultiUserRemora Connection Interrupted (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_100299BD8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADMultiUserService _multiUserListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s MultiUser Connection Invalidated (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_100299C90(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 32);
    int v4 = 136315394;
    int v5 = "-[ADMultiUserService _multiUserListenerShouldAcceptNewConnection:]_block_invoke";
    __int16 v6 = 1024;
    int v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s MultiUser Connection Interrupted (pid=%d)",  (uint8_t *)&v4,  0x12u);
  }

void sub_100299D48(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _allUsersBySharedUserID]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100299D80(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFPreferences sharedPreferences](&OBJC_CLASS___AFPreferences, "sharedPreferences"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 languageCode]);

  if (v3 && ([v3 isEqualToString:*(void *)(*(void *)(a1 + 32) + 96)] & 1) == 0)
  {
    int v4 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v7 = 136315394;
      id v8 = "-[ADMultiUserService _languageCodeDidChange]_block_invoke";
      __int16 v9 = 2112;
      int v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Language changed to %@",  (uint8_t *)&v7,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 96LL), v3);
    unsigned int v5 = [*(id *)(a1 + 32) _isHostingMultiUserLanguage];
    __int16 v6 = *(void **)(a1 + 32);
    if (v5)
    {
      [v6 _refreshUsersAndVoiceProfiles:1];
      [*(id *)(a1 + 32) refreshHomeKitOnboardedUsers];
    }

    else
    {
      [v6 resetAllUsers];
    }
  }
}

void sub_100299EB8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    unsigned int v5 = "-[ADMultiUserService _initWithPreferences:ssrManager:homeInfoManager:]_block_invoke";
    __int16 v6 = 2080;
    int v7 = "com.apple.siri.corespeech.voiceprofilelist.change";
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s Handling %s notification",  (uint8_t *)&v4,  0x16u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _refreshUsersAndVoiceProfiles:1];
}

void sub_100299FE0(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 endpointUUID]);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[SSRVoiceProfileManager sharedInstanceWithEndpointId:]( &OBJC_CLASS___SSRVoiceProfileManager,  "sharedInstanceWithEndpointId:",  v2));

  uint64_t v3 = objc_alloc(&OBJC_CLASS___ADMultiUserService);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[ADHomeInfoManager sharedInfoManager](&OBJC_CLASS___ADHomeInfoManager, "sharedInfoManager"));
  id v6 = -[ADMultiUserService _initWithPreferences:ssrManager:homeInfoManager:]( v3,  "_initWithPreferences:ssrManager:homeInfoManager:",  v4,  v8,  v5);
  int v7 = (void *)qword_100578310;
  qword_100578310 = (uint64_t)v6;
}

void sub_10029A0B4(uint64_t a1, void *a2)
{
  id v11 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v11 sharedUserId]);

  if (v3)
  {
    int v4 = *(void **)(a1 + 32);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v11 sharedUserId]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);
    id v7 = [v6 mutableCopy];

    if (!v7) {
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    }
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  [v11 confidenceScore]));
    [v7 addObject:v8];

    __int16 v9 = *(void **)(a1 + 32);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v11 sharedUserId]);
    [v9 setObject:v7 forKey:v10];
  }
}

void sub_10029AF30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 32))
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
    {
      int v11 = 136315394;
      __int16 v12 = "-[ADCoreBluetoothManager peripheral:didReadRSSI:error:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "%s %@ already invalidated",  (uint8_t *)&v11,  0x16u);
    }
  }

  else
  {
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) objectForKey:v4]);

    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6)
      {
        id v7 = (os_log_s *)AFSiriLogContextDaemon;
        if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
        {
          uint64_t v9 = *(void *)(a1 + 40);
          int v11 = 136315650;
          __int16 v12 = "-[ADCoreBluetoothManager peripheral:didReadRSSI:error:]_block_invoke";
          __int16 v13 = 2112;
          uint64_t v14 = v9;
          __int16 v15 = 2112;
          uint64_t v16 = v6;
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error reading RSSI for %@: %@",  (uint8_t *)&v11,  0x20u);
        }
      }

      [*(id *)(a1 + 32) _didReadRSSI:*(void *)(a1 + 56) forPeripheral:*(void *)(a1 + 40)];
    }

    else
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v11 = 136315394;
        __int16 v12 = "-[ADCoreBluetoothManager peripheral:didReadRSSI:error:]_block_invoke";
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s Read RSSI for peripheral that we didn't sign up for: %@",  (uint8_t *)&v11,  0x16u);
      }
    }
  }

void sub_10029B128(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 64LL));
  [WeakRetained invoke];
}

void sub_10029B158(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 24))
  {
    uint64_t v3 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      os_signpost_id_t v23 = "-[ADCoreBluetoothManager _retrieveConnectedDevicesInfoOnServices:completion:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "%s Fatal error: ADCoreBluetoothManager is designed for one-time use!",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    objc_storeStrong((id *)(v2 + 56), *(id *)(a1 + 40));
    int v4 = objc_alloc(&OBJC_CLASS___AFSafetyBlock);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    id v18[2] = sub_10029B3A0;
    _OWORD v18[3] = &unk_1004F9450;
    void v18[4] = *(void *)(a1 + 32);
    id v19 = *(id *)(a1 + 48);
    unsigned int v5 = -[AFSafetyBlock initWithBlock:](v4, "initWithBlock:", v18);
    objc_storeWeak((id *)(*(void *)(a1 + 32) + 64LL), v5);
    dispatch_time_t v6 = dispatch_time(0LL, 5000000000LL);
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10029B5A4;
    block[3] = &unk_1004FD940;
    id v17 = v5;
    id v8 = v5;
    dispatch_after(v6, v7, block);
    uint64_t v9 = objc_alloc(&OBJC_CLASS___CBCentralManager);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v20 = CBCentralManagerOptionShowPowerAlertKey;
    uint64_t v21 = &__kCFBooleanFalse;
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
    __int16 v13 = -[CBCentralManager initWithDelegate:queue:options:](v9, "initWithDelegate:queue:options:", v10, v11, v12);
    uint64_t v14 = *(void *)(a1 + 32);
    __int16 v15 = *(void **)(v14 + 24);
    *(void *)(v14 + 24) = v13;
  }

void sub_10029B3A0(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  [*(id *)(*(void *)(a1 + 32) + 24) setDelegate:v2];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v12 = v2;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 40) allValues]);
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
          uint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315394;
            __int16 v18 = "-[ADCoreBluetoothManager _retrieveConnectedDevicesInfoOnServices:completion:]_block_invoke";
            __int16 v19 = 2112;
            uint64_t v20 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%s Unable to read RSSI for peripheral %@ before timeout",  buf,  0x16u);
          }

          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _adCoreBluetoothDeviceForPeripheral:v9 RSSI:0]);
          [*(id *)(*(void *)(a1 + 32) + 48) addObject:v11];
          [*(id *)(*(void *)(a1 + 32) + 24) cancelPeripheralConnection:v9];
        }

        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v21 count:16];
      }

      while (v6);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v2 = v12;
  }
}

id sub_10029B5A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) invoke];
}

void sub_10029B5AC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Queue %s did not respond to watchdog and is likely blocked.",  dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 32)));
  int v4 = (os_log_s *)AFSiriLogContextDaemon;
  BOOL v5 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_FAULT);
  if (v5)
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v8 = "-[ADCoreBluetoothManager _init]_block_invoke";
    __int16 v9 = 2112;
    uint64_t v10 = v3;
    _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "%s %@", buf, 0x16u);
  }

  int v6 = AFIsInternalInstall(v5);
  if (a2 <= 3 && v6) {
    WriteStackshotReport_async(v3, 1359171905LL);
  }
}

void sub_10029B8F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 136315394;
      id v12 = "+[ADCoreBluetoothManager fetchCBUUIDForConnectedDeviceWithAddress:completion:]_block_invoke";
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s CBController failed to find CBUUID for device with address: %@",  (uint8_t *)&v11,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
}

id sub_10029C004(void *a1)
{
  id v1 = a1;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v2)
  {
    id v3 = v2;
    int v4 = 0LL;
    id v5 = 0LL;
    uint64_t v6 = *(void *)v21;
    uint64_t v19 = AFDeviceContextKeyFlowContextUpdateCommand;
    do
    {
      for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v1);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if (([v8 fromLocalDevice] & 1) == 0)
        {
          __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceInfo]);
          unsigned int v10 = [v9 isCommunalDevice];

          if (v10)
          {
            int v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "af_validFlowContext"));
            if (v11)
            {
              id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 contextMetadataForKey:v19]);
              __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deliveryDate]);
              uint64_t v14 = v13;
              if (!v4 || [v13 compare:v4] == (id)1)
              {
                id v15 = v14;

                id v16 = v11;
                id v17 = v5;
                id v5 = v16;

                int v4 = v15;
              }
            }
          }
        }
      }

      id v3 = [v1 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v3);
  }

  else
  {
    int v4 = 0LL;
    id v5 = 0LL;
  }

  return v5;
}

id sub_10029C1C4(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
    id v4 = 0LL;
    goto LABEL_48;
  }

  id v3 = [v1 count];
  if ((unint64_t)v3 <= 1)
  {
    id v4 = [v2 copy];
    goto LABEL_48;
  }

  id v5 = v3;
  __int128 v44 = -[NSMutableSet initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithCapacity:", v3);
  uint64_t v6 = -[NSMutableSet initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithCapacity:", v5);
  __int128 v40 = v2;
  uint64_t v42 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", v5);
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  id obj = v2;
  id v7 = [obj countByEnumeratingWithState:&v49 objects:v60 count:16];
  if (!v7)
  {
    __int16 v9 = 0LL;
    goto LABEL_33;
  }

  id v8 = v7;
  __int16 v9 = 0LL;
  uint64_t v10 = *(void *)v50;
  do
  {
    for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v50 != v10) {
        objc_enumerationMutation(obj);
      }
      id v12 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)i);
      id v13 = sub_10029C604(v12);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      id v15 = sub_10029C69C(v12);
      uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
      id v17 = (void *)v16;
      if (v14)
      {
        unsigned int v18 = -[NSMutableSet containsObject:](v44, "containsObject:", v14);
        if (v17) {
          goto LABEL_12;
        }
      }

      else
      {
        unsigned int v18 = 0;
        if (v16)
        {
LABEL_12:
          unsigned int v19 = -[NSMutableSet containsObject:](v6, "containsObject:", v17, v40);
          goto LABEL_15;
        }
      }

      unsigned int v19 = 0;
LABEL_15:
      if ((v18 | v19) == 1)
      {
        __int128 v20 = v9;
        if (!v9)
        {
          __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int16 v9 = v20;
        }
      }

      else
      {
        __int128 v20 = v42;
      }

      -[NSMutableArray addObject:](v20, "addObject:", v12, v40);
      if (v14) {
        char v21 = v18;
      }
      else {
        char v21 = 1;
      }
      if ((v21 & 1) == 0) {
        -[NSMutableSet addObject:](v44, "addObject:", v14);
      }
      if (v17) {
        char v22 = v19;
      }
      else {
        char v22 = 1;
      }
      if ((v22 & 1) == 0) {
        -[NSMutableSet addObject:](v6, "addObject:", v17);
      }
    }

    id v8 = [obj countByEnumeratingWithState:&v49 objects:v60 count:16];
  }

  while (v8);
LABEL_33:

  id v23 = -[NSMutableArray count](v9, "count");
  if (v23)
  {
    id v24 = v23;
    __int16 v25 = (void *)AFSiriLogContextDaemon;
    BOOL v26 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
    if (v26)
    {
      __int128 v38 = v25;
      id v39 = [obj count];
      *(_DWORD *)__int128 buf = 136315650;
      __int16 v55 = "ADDeviceContextDeduplicateTuples";
      __int16 v56 = 2048;
      id v57 = v24;
      __int16 v58 = 2048;
      id v59 = v39;
      _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "%s Rejected %tu/%tu device context tuples.",  buf,  0x20u);
    }

    if (AFIsInternalInstall(v26))
    {
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      id v27 = v9;
      id v28 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v27,  "countByEnumeratingWithState:objects:count:",  &v45,  v53,  16LL);
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v46;
        do
        {
          for (j = 0LL; j != v29; j = (char *)j + 1)
          {
            if (*(void *)v46 != v30) {
              objc_enumerationMutation(v27);
            }
            char v32 = (void *)AFSiriLogContextDaemon;
            if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
            {
              __int128 v33 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)j);
              __int16 v34 = v32;
              __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v33 content]);
              __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v33 info]);
              *(_DWORD *)__int128 buf = 136315650;
              __int16 v55 = "ADDeviceContextDeduplicateTuples";
              __int16 v56 = 2112;
              id v57 = v35;
              __int16 v58 = 2112;
              id v59 = v36;
              _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%s Rejected %@ from %@.",  buf,  0x20u);
            }
          }

          id v29 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v27,  "countByEnumeratingWithState:objects:count:",  &v45,  v53,  16LL);
        }

        while (v29);
      }
    }
  }

  id v4 = -[NSMutableArray copy](v42, "copy", v40);

  id v2 = v41;
LABEL_48:

  return v4;
}

id sub_10029C604(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 content]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);
  id v4 = sub_10016AC9C(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    id v6 = v5;
    id v7 = v6;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v1 info]);
    id v9 = sub_10016AC9C(v8);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v9);

    id v6 = 0LL;
  }

  return v7;
}

id sub_10029C69C(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 content]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceInfo]);
  id v4 = sub_10016AD0C(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    id v6 = v5;
    id v7 = v6;
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v1 info]);
    id v9 = sub_10016AD0C(v8);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v9);

    id v6 = 0LL;
  }

  return v7;
}

id sub_10029C734(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    id v2 = sub_10016AD0C(a2);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 idsDeviceUniqueIdentifier]);
  }

  return v3;
}

BOOL sub_10029C768(id a1, id a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

id sub_10029C7B0(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 count])
    {
      id v32 = 0LL;
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_10029CAA4;
      v33[3] = &unk_1004F9490;
      char v34 = 1;
      uint64_t ContentMapFromArray = AFPeerContentTupleGetContentMapFromArray(v2, v33, &stru_1004F94F0, 0LL, &v32);
      id v4 = (void *)objc_claimAutoreleasedReturnValue(ContentMapFromArray);
      id v5 = v32;
      id v6 = [v5 count];
      if (v6)
      {
        id v7 = v6;
        id v8 = (void *)AFSiriLogContextDaemon;
        BOOL v9 = os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR);
        if (v9)
        {
          id v23 = v8;
          id v24 = [v2 count];
          *(_DWORD *)__int128 buf = 136315650;
          __int128 v37 = "ADDeviceProximityGetMapByAssistantIdentifierFromTuples";
          __int16 v38 = 2048;
          id v39 = v7;
          __int16 v40 = 2048;
          id v41 = v24;
          _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%s Rejected %tu/%tu device context tuples.",  buf,  0x20u);
        }

        if (AFIsInternalInstall(v9))
        {
          BOOL v26 = v4;
          id v27 = v2;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          id v25 = v5;
          id v10 = v5;
          id v11 = [v10 countByEnumeratingWithState:&v28 objects:v35 count:16];
          if (v11)
          {
            id v12 = v11;
            uint64_t v13 = *(void *)v29;
            do
            {
              for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v29 != v13) {
                  objc_enumerationMutation(v10);
                }
                id v15 = (void *)AFSiriLogContextDaemon;
                if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v16 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
                  id v17 = v15;
                  unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v16 content]);
                  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v16 info]);
                  uint64_t CompactDescription = AFPeerInfoGetCompactDescription(v19);
                  char v21 = (void *)objc_claimAutoreleasedReturnValue(CompactDescription);
                  *(_DWORD *)__int128 buf = 136315650;
                  __int128 v37 = "ADDeviceProximityGetMapByAssistantIdentifierFromTuples";
                  __int16 v38 = 2112;
                  id v39 = v18;
                  __int16 v40 = 2112;
                  id v41 = v21;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%s Rejected %@ from %@.",  buf,  0x20u);
                }
              }

              id v12 = [v10 countByEnumeratingWithState:&v28 objects:v35 count:16];
            }

            while (v12);
          }

          id v4 = v26;
          id v2 = v27;
          id v5 = v25;
        }
      }
    }

    else
    {
      id v4 = &__NSDictionary0__struct;
    }
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

id sub_10029CAA4(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 32))
  {
    id v2 = sub_10016AC9C(a2);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 assistantIdentifier]);
  }

  return v3;
}

BOOL sub_10029CAD8(id a1, id a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v3);

  return isKindOfClass & 1;
}

id sub_10029CB20(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 count]) {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "af_lenientMappedArray:", &stru_1004F9530));
    }
    else {
      uint64_t v3 = &__NSArray0__struct;
    }
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return v3;
}

AFDeviceContext *__cdecl sub_10029CB84(id a1, AFPeerContentTuple *a2)
{
  return (AFDeviceContext *)-[AFPeerContentTuple content](a2, "content");
}

id sub_10029CB8C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 count];
  id v6 = 0LL;
  if (v4 && v5)
  {
    id v7 = sub_10016AC9C(v4);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ([v8 length])
    {
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v8]);

      if (v9)
      {
LABEL_11:
        id v6 = [v9 integerValue];

        goto LABEL_12;
      }
    }

    else
    {
    }

    id v10 = sub_10016AD0C(v4);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if ([v11 length]) {
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v11]);
    }
    else {
      BOOL v9 = 0LL;
    }

    goto LABEL_11;
  }

AFPeerContentTuple *sub_10029CC64(uint64_t a1, void *a2)
{
  id v18 = a2;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v18 content]);
  __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unsigned int v19 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([v2 allContextKeys]);
  id v3 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v30;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v2 contextMetadataForKey:v7]);
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v2 serializedHistoricalContextForKey:v7]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v2 historicalContextMetadataForKey:v7]);
        if ([v9 count])
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 deliveryDate]);
          id v12 = [v11 compare:*(void *)(a1 + 32)];

          if (v12 == (id)1)
          {
            v23[0] = _NSConcreteStackBlock;
            v23[1] = 3221225472LL;
            void v23[2] = sub_10029CF38;
            v23[3] = &unk_1004F9558;
            id v24 = *(id *)(a1 + 32);
            id v25 = v9;
            BOOL v26 = v20;
            uint64_t v27 = v7;
            __int128 v28 = v19;
            [v10 enumerateObjectsWithOptions:2 usingBlock:v23];
          }
        }
      }

      id v4 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }

    while (v4);
  }

  if (-[NSMutableDictionary count](v20, "count"))
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v2 updatedContextWithSerializedContextByKey:v20 metadata:v19]);

    id v2 = (void *)v13;
  }

  uint64_t v14 = objc_alloc(&OBJC_CLASS___AFPeerContentTuple);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v18 info]);
  uint64_t v16 = -[AFPeerContentTuple initWithInfo:content:](v14, "initWithInfo:content:", v15, v2);

  return v16;
}

void sub_10029CF38(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 deliveryDate]);
  id v9 = [v8 compare:*(void *)(a1 + 32)];

  if (v9 != (id)1)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndex:a3]);
    [*(id *)(a1 + 48) setObject:v10 forKey:*(void *)(a1 + 56)];
    [*(id *)(a1 + 64) addObject:v7];
    id v11 = (os_log_s *)AFSiriLogContextUtility;
    if (os_log_type_enabled(AFSiriLogContextUtility, OS_LOG_TYPE_DEBUG))
    {
      int v12 = 136315394;
      uint64_t v13 = "ADDeviceContextTuplesAdjustedForDate_block_invoke_2";
      __int16 v14 = 2112;
      id v15 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s #hal Adjusted context for %@",  (uint8_t *)&v12,  0x16u);
    }

    *a4 = 1;
  }
}

uint64_t sub_10029DC6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10029DC7C(uint64_t a1)
{
}

void sub_10029DC84(uint64_t a1)
{
  id v2 = sub_10029DE90(*(void **)(*(void *)(a1 + 32) + 16LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v22 = v3;
  id v5 = v4;
  id v6 = SAUserIdentityClassificationUnknownValue;
  if ([v22 count] == (id)1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 allKeys]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v8]);
    uint64_t v10 = (uint64_t)[v9 integerValue];

    if (v10 < 46)
    {
LABEL_18:

      goto LABEL_19;
    }

    id v11 = (id *)&SAUserIdentityClassificationConfidentValue;
    int v12 = (id *)&SAUserIdentityClassificationKnownValue;
    uint64_t v13 = v6;
    id v6 = *v11;
LABEL_17:

    goto LABEL_18;
  }

  if ((unint64_t)[v22 count] >= 2)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v22 firstObject]);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v8]);
    uint64_t v15 = (uint64_t)[v14 integerValue];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v22 objectAtIndex:1]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v13]);
    id v17 = [v16 integerValue];

    if (v15 >= 46)
    {
      if (v15 - (uint64_t)v17 >= 16)
      {
        if ((unint64_t)v15 <= 0x59)
        {
          id v18 = (id *)&SAUserIdentityClassificationUnsure1Value;
        }

        else
        {
          id v18 = (id *)&SAUserIdentityClassificationConfidentValue;
        }
      }

      else
      {
        id v18 = (id *)&SAUserIdentityClassificationUnsureNValue;
      }

      id v19 = *v18;

      id v6 = v19;
    }

    goto LABEL_17;
  }

id sub_10029DE90(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 keysSortedByValueUsingComparator:&stru_1004F9608]);
  id v3 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "_ADMultiUserTestSupportSortSharedIDsByScoresDescending";
    __int16 v7 = 2112;
    id v8 = v2;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%s Sorted IDs: %@", (uint8_t *)&v5, 0x16u);
    id v3 = (os_log_s *)AFSiriLogContextDaemon;
  }

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    int v5 = 136315394;
    id v6 = "_ADMultiUserTestSupportSortSharedIDsByScoresDescending";
    __int16 v7 = 2112;
    id v8 = v1;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "%s sharedIDs dict: %@",  (uint8_t *)&v5,  0x16u);
  }

  return v2;
}

int64_t sub_10029DFD0(id a1, NSNumber *a2, NSNumber *a3)
{
  id v4 = a3;
  NSInteger v5 = -[NSNumber integerValue](a2, "integerValue");
  NSInteger v6 = -[NSNumber integerValue](v4, "integerValue");

  if (v5 > v6) {
    return -1LL;
  }
  else {
    return v5 < v6;
  }
}

void sub_10029E024(uint64_t a1)
{
  id v2 = sub_10029DE90(*(void **)(*(void *)(a1 + 32) + 16LL));
  id v13 = (id)objc_claimAutoreleasedReturnValue(v2);
  if ([v13 count])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKey:v3]);
    uint64_t v5 = (uint64_t)[v4 integerValue];

    if (v5 > 45)
    {
      id v11 = [v3 copy];
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v8 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    else
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v7 = AFMultiUserDefaultSharedUserId;
      id v8 = *(void **)(v6 + 40);
      *(void *)(v6 + 40) = v7;
    }
  }

  else
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v10 = AFMultiUserDefaultSharedUserId;
    id v3 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v10;
  }
}

void sub_10029E114(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

uint64_t sub_10029E14C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (*(_BYTE *)(a1 + 64))
  {
    [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = 0LL;
  }

  else
  {
    if (!v2)
    {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = *(void **)(v6 + 16);
      *(void *)(v6 + 16) = v5;

      id v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
    }

    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 40) integerValue]));
    [v2 setObject:v4 forKey:*(void *)(a1 + 48)];
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_10029E26C(id a1)
{
  id v1 = -[ADMultiUserTestSupport _init](objc_alloc(&OBJC_CLASS___ADMultiUserTestSupport), "_init");
  id v2 = (void *)qword_100578320;
  qword_100578320 = (uint64_t)v1;
}

void sub_10029E4C8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 alarms]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10029E56C;
  v7[3] = &unk_1004FD718;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 updateAlarms:v5 completionHandler:v7];
}

void sub_10029E56C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v3 count]);
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        uint64_t v9 = 0LL;
        do
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v9), "identifier", (void)v12));
          -[NSMutableArray addObject:](v4, "addObject:", v10);

          uint64_t v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v7);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
    [v11 setAlarmIdentifiers:v4];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10029E86C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 criteria]);
  id v6 = [*(id *)(a1 + 32) options];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10029E920;
  v8[3] = &unk_1004FD718;
  id v7 = *(id *)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  [v4 fetchAlarmsMeetingCriteria:v5 searchOptions:v6 completionHandler:v8];
}

void sub_10029E920(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v8)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
      [v7 setResults:v8];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }
  }
}

void sub_10029EA2C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 alarmURLs]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10029EAD0;
  v7[3] = &unk_1004FD6F0;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 dismissAlarmsWithURLs:v5 completionHandler:v7];
}

void sub_10029EAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0LL, v3);
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
    }

    id v4 = v7;
  }
}

void sub_10029EBC4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 alarmIdentifiers]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10029EC68;
  v7[3] = &unk_1004FD6F0;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 deleteAlarmsWithIdentifiers:v5 completionHandler:v7];
}

void sub_10029EC68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    id v7 = v3;
    if (v3)
    {
      (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0LL, v3);
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
      (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v6, 0LL);
    }

    id v4 = v7;
  }
}

void sub_10029ED5C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 alarm]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10029EE00;
  v7[3] = &unk_1004F9630;
  id v6 = *(id *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v6;
  [v4 addAlarm:v5 completionHandler:v7];
}

void sub_10029EE00(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v9)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createResponse]);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
      [v7 setAlarmIdentifier:v8];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }
  }
}

id sub_10029EEC8(int a1)
{
  if (a1 == 1)
  {
    id v1 = off_1004E7038;
  }

  else
  {
    if (a1 != 2) {
      return 0LL;
    }
    id v1 = off_1004E7040;
  }

  return (id)objc_opt_class(*v1);
}

id sub_10029F4E8()
{
  return (id)qword_100578368;
}

id sub_10029F4F4()
{
  if (qword_100578360 != -1) {
    dispatch_once(&qword_100578360, &stru_1004F9720);
  }
  return (id)qword_100578368;
}

id sub_10029F534()
{
  return (id)qword_100578330;
}

id sub_10029F540()
{
  if (qword_100578378 != -1) {
    dispatch_once(&qword_100578378, &stru_1004F9740);
  }
  return (id)qword_100578330;
}

void sub_10029F580(id a1)
{
  id v1 = sub_10029F5E4();
  id v2 = (id *)dlsym(v1, "PBSWakeReasonSiriCommand");
  if (!v2) {
    __assert_rtn("initPBSWakeReasonSiriCommand_block_invoke", "ADFauxUIService.m", 35, "constant");
  }
  objc_storeStrong((id *)&qword_100578330, *v2);
  off_100575650 = sub_10029F534;
}

void *sub_10029F5E4()
{
  uint64_t result = (void *)qword_100578370;
  if (!qword_100578370)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices", 2);
    qword_100578370 = (uint64_t)result;
    if (!result) {
      __assert_rtn("PineBoardServicesLibrary", "ADFauxUIService.m", 34, "frameworkLibrary");
    }
  }

  return result;
}

void sub_10029F640(id a1)
{
  qword_100578368 = (uint64_t)objc_getClass("PBSSystemService");
  if (!qword_100578368) {
    __assert_rtn("initPBSSystemService_block_invoke", "ADFauxUIService.m", 36, "classPBSSystemService");
  }
  off_100575648 = sub_10029F4E8;
}

void sub_10029F69C(id *a1)
{
  id v2 = a1[4];
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___SAUIAppPunchOut);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    _[a1[5] _appPunchOutHandler:a1[4] forDomain:a1[6] completion:a1[8]];
  }

  else
  {
    id v4 = a1[4];
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___SAUIPlayAudio);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
    {
      id v20 = a1[4];
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v20 toneLibraryAlertType]);
      id v7 = [v6 integerValue];

      id v8 = (void *)objc_claimAutoreleasedReturnValue([v20 itemURL]);
      if (v8)
      {
        id v9 = [objc_alloc((Class)off_100575638()) initWithType:v7];
        id v10 = objc_alloc(&OBJC_CLASS___NSURL);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v20 itemURL]);
        __int128 v12 = -[NSURL initWithString:](v10, "initWithString:", v11);
        [v9 setExternalToneFileURL:v12];

        [v9 setShouldIgnoreRingerSwitch:1];
        id v13 = [off_100575640() alertWithConfiguration:v9];
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        [v14 play];
      }

      else
      {
        [off_100575640() playAlertForType:v7];
      }

      id v18 = (void (**)(id, SACommandSucceeded *, void))a1[8];
      id v19 = objc_alloc_init(&OBJC_CLASS___SACommandSucceeded);
      v18[2](v18, v19, 0LL);
    }

    else if ([a1[7] isFromRemote])
    {
      id v15 = +[AFSiriActivationContext newWithBuilder:]( &OBJC_CLASS___AFSiriActivationContext,  "newWithBuilder:",  &stru_1004F9698);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[AFSiriActivationConnection sharedConnection]( &OBJC_CLASS___AFSiriActivationConnection,  "sharedConnection"));
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      id v22[2] = sub_10029F9EC;
      v22[3] = &unk_1004F96C0;
      *(_OWORD *)char v21 = *((_OWORD *)a1 + 2);
      id v17 = v21[0];
      int8x16_t v23 = vextq_s8(*(int8x16_t *)v21, *(int8x16_t *)v21, 8uLL);
      id v24 = a1[6];
      id v26 = a1[8];
      id v25 = a1[7];
      [v16 activateWithRequestInfo:0 context:v15 completion:v22];
    }

    else
    {
      [a1[5] _unhandledCommand:a1[4] forDomain:a1[6] completion:a1[8]];
    }
  }

id sub_10029F954()
{
  return (id)qword_100578340;
}

id sub_10029F960()
{
  if (qword_100578338 != -1) {
    dispatch_once(&qword_100578338, &stru_1004F96E0);
  }
  return (id)qword_100578340;
}

id sub_10029F9A0()
{
  return (id)qword_100578358;
}

id sub_10029F9AC()
{
  if (qword_100578350 != -1) {
    dispatch_once(&qword_100578350, &stru_1004F9700);
  }
  return (id)qword_100578358;
}

void sub_10029F9EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    uint64_t v5 = (void *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      id v10 = v5;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v12 = 136315394;
      id v13 = "-[ADFauxUIService handleCommand:forDomain:executionContext:reply:]_block_invoke_3";
      __int16 v14 = 2112;
      id v15 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%s Unable to bring up UI: %@",  (uint8_t *)&v12,  0x16u);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[AFError errorWithCode:description:underlyingError:]( &OBJC_CLASS___AFError,  "errorWithCode:description:underlyingError:",  12LL,  0LL,  v6));

    [*(id *)(a1 + 32) _unhandledCommand:*(void *)(a1 + 40) error:v7 forDomain:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ADCommandCenter sharedCommandCenter](&OBJC_CLASS___ADCommandCenter, "sharedCommandCenter"));
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) info]);
    [v7 handleCommand:v8 withExecutionContextMatchingInfo:v9 completion:*(void *)(a1 + 64)];
  }
}

void sub_10029FB88(id a1, AFSiriActivationContextMutating *a2)
{
  uint64_t v5 = a2;
  -[AFSiriActivationContextMutating setTimestamp:](v5, "setTimestamp:", mach_absolute_time());
  -[AFSiriActivationContextMutating setSource:](v5, "setSource:", 13LL);
  -[AFSiriActivationContextMutating setEvent:](v5, "setEvent:", 18LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[AFInstanceContext currentContext](&OBJC_CLASS___AFInstanceContext, "currentContext"));
  if ([v2 isEndpoint])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 endpointUUID]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
    -[AFSiriActivationContextMutating setDeviceID:](v5, "setDeviceID:", v4);
  }
}

void sub_10029FC34(id a1)
{
  qword_100578358 = (uint64_t)objc_getClass("TLAlert");
  if (!qword_100578358) {
    __assert_rtn("initTLAlert_block_invoke", "ADFauxUIService.m", 30, "classTLAlert");
  }
  off_100575640 = sub_10029F9A0;
}

void sub_10029FC90()
{
  if (!qword_100578348)
  {
    qword_100578348 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary", 2);
    if (!qword_100578348) {
      __assert_rtn("ToneLibraryLibrary", "ADFauxUIService.m", 28, "frameworkLibrary");
    }
  }

void sub_10029FCEC(id a1)
{
  qword_100578340 = (uint64_t)objc_getClass("TLAlertConfiguration");
  if (!qword_100578340) {
    __assert_rtn("initTLAlertConfiguration_block_invoke", "ADFauxUIService.m", 29, "classTLAlertConfiguration");
  }
  off_100575638 = sub_10029F954;
}

void sub_1002A0774( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002A20F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002A2100(uint64_t a1)
{
}

void sub_1002A2108(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) aggregationIds]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 current]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 value]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[ADAnalyticsDeviceAndUserIds deviceAggregationIdWithDeviceId:forUserAggregationId:]( &OBJC_CLASS___ADAnalyticsDeviceAndUserIds,  "deviceAggregationIdWithDeviceId:forUserAggregationId:",  *(void *)(*(void *)(a1 + 32) + 32LL),  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
  (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
}

void sub_1002A21C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[ADMultiUserService sharedService](&OBJC_CLASS___ADMultiUserService, "sharedService"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allUsersBySharedUserID]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:*(void *)(a1 + 32)]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 iCloudAltDSID]);
  if (!v5)
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v9) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Will be using the default user for the device as iCloudAltDSId could not be looked up for sharedUser",  (uint8_t *)&v9,  2u);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 40) defaultUserId]);
  }

  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    int v12 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Mapped sharedUserID %@ to iCloudAltDSId %@",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 40) fetchDeviceAndUserIdsForiCloudAltDSId:v5 withCallback:*(void *)(a1 + 48)];
}

void sub_1002A234C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 40) multiUserDevice]
    && (id v2 = *(void **)(a1 + 40),
        id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) defaultUserId]),
        LODWORD(v2) = [v2 isEqualToString:v3],
        v3,
        !(_DWORD)v2))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _fetchIdsForUser:*(void *)(a1 + 40) creationTime:v7]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 currentEphemeralSeed]);
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[ADAnalyticsIdentifiersProvider _createUserEphemeralIdWithUserSeed:withCreationTime:]( &OBJC_CLASS___ADAnalyticsIdentifiersProvider,  "_createUserEphemeralIdWithUserSeed:withCreationTime:",  v8,  v7));
  }

  else
  {
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v21) = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Using same identifiers as DIM event as this is either not a multi-user device or the provided user is same as th e default user for the device",  (uint8_t *)&v21,  2u);
    }

    id v5 = *(id *)(*(void *)(a1 + 32) + 48LL);
    id v6 = *(id *)(*(void *)(a1 + 32) + 72LL);
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 aggregationIds]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 current]);

  __int16 v11 = objc_alloc(&OBJC_CLASS___ADAnalyticsDeviceAndUserIds);
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 32LL);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 value]);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 effectiveFrom]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 expirationDate]);
  uint64_t v16 = -[ADAnalyticsDeviceAndUserIds initWithFixedDeviceId:withUserEphemeralId:withUserAggregationId:withUserAggregationIdEffectiveFrom:withUserAggregationIdExpiration:]( v11,  "initWithFixedDeviceId:withUserEphemeralId:withUserAggregationId:withUserAggregationIdEffectiveFrom:withUserAgg regationIdExpiration:",  v12,  v6,  v13,  v14,  v15);

  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a1 + 40);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(-[ADAnalyticsDeviceAndUserIds userAggregationId](v16, "userAggregationId"));
    id v20 = (void *)objc_claimAutoreleasedReturnValue(-[ADAnalyticsDeviceAndUserIds deviceAggregationId](v16, "deviceAggregationId"));
    int v21 = 138413058;
    uint64_t v22 = v18;
    __int16 v23 = 2112;
    id v24 = v6;
    __int16 v25 = 2112;
    id v26 = v19;
    __int16 v27 = 2112;
    __int128 v28 = v20;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Created user ephemeral identifiers user:%@ ephemeralId:%@ userAggregationId:%@ deviceAggregationId:%@",  (uint8_t *)&v21,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1002A2628(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Preparing to log Analytics Identifiers DIM events",  v12,  2u);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_createDIMEphemeralIdentifiersEvent:",  objc_msgSend(*(id *)(a1 + 32), "_refreshEphemeralIdentifiers:", 1)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v4 emitMessage:v3];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createDIMEphemeralToAggregationIdentifierMapEvent]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v6 emitMessage:v5];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[ADSiriAnalyticsExperimentIdentifiersProvider createExperimentContextEventWithBucketId:]( &OBJC_CLASS___ADSiriAnalyticsExperimentIdentifiersProvider,  "createExperimentContextEventWithBucketId:",  *(unsigned int *)(*(void *)(a1 + 32) + 16LL)));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v8 emitMessage:v7];

  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[ADSiriAnalyticsOnDeviceDigestProvider createOnDeviceDigestEvent]( &OBJC_CLASS___ADSiriAnalyticsOnDeviceDigestProvider,  "createOnDeviceDigestEvent"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[AssistantSiriAnalytics sharedStream](&OBJC_CLASS___AssistantSiriAnalytics, "sharedStream"));
  [v10 emitMessage:v9];

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, void *, void *))(v11 + 16))(v11, v3, v5);
  }
}

void sub_1002A27A8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = v2;
    id v5 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v4;
  }

  else
  {
    int v6 = AFIsHorseman(a1);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _fetchOrCreateFixedDeviceId]);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = *(void **)(v8 + 32);
    *(void *)(v8 + 32) = v7;

    if (v6)
    {
      uint64_t v12 = &OBJC_CLASS___ADSyncCoordinatorCommunalDevices;
    }

    else if (AFIsATV(v10, v11))
    {
      uint64_t v12 = &OBJC_CLASS___ADSyncCoordinatorATV;
    }

    else
    {
      uint64_t v12 = &OBJC_CLASS___ADSyncCoordinatorPersonalDevices;
    }

    id v13 = objc_alloc_init(v12);
    uint64_t v14 = *(void *)(a1 + 40);
    id v5 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
  }
}

void sub_1002A2BDC(id a1)
{
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[ADAnalyticsIdentifiersUtils logger](&OBJC_CLASS___ADAnalyticsIdentifiersUtils, "logger"));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v4 = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "Initializing sharedInstance of ADAnalyticsIdentifiersProvider",  v4,  2u);
  }

  id v2 = objc_alloc_init(&OBJC_CLASS___ADAnalyticsIdentifiersProvider);
  uint64_t v3 = (void *)qword_1005783B0;
  qword_1005783B0 = (uint64_t)v2;
}

void sub_1002A2C68(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSISO8601DateFormatter);
  id v2 = (void *)qword_1005783A0;
  qword_1005783A0 = (uint64_t)v1;
}

void sub_1002A2C90(id a1)
{
  id v1 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"19cd0db1-af0c-40c1-89ca-ae40361b5fe6");
  id v2 = (void *)qword_100578390;
  qword_100578390 = (uint64_t)v1;
}

void sub_1002A2CC4(id a1)
{
  id v1 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"7cc79b2d-e953-4e2f-95cd-5af8a4e707fe");
  id v2 = (void *)qword_100578380;
  qword_100578380 = (uint64_t)v1;
}

void sub_1002A3A18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
}

uint64_t sub_1002A3BE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002A3BF0(uint64_t a1)
{
}

void sub_1002A3BF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    id v4 = (void *)WeakRetained[4];
    if (v4 && [v4 isEqual:*(void *)(a1 + 32)])
    {
      [v3 _processAndEvaluateSnapshot:*(void *)(a1 + 32)];
    }

    else
    {
      id v5 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = v3[4];
        uint64_t v9 = *(void *)(a1 + 32);
        int v10 = 136315650;
        uint64_t v11 = "-[ADHomeAnnouncementContextAdaptor _processAndEvaluateSnapshot:]_block_invoke";
        __int16 v12 = 2112;
        uint64_t v13 = v8;
        __int16 v14 = 2112;
        uint64_t v15 = v9;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s Ignored expiration timer based reevaluation because snapshot was changed. (current = %@, expected = %@)",  (uint8_t *)&v10,  0x20u);
      }
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) cancel];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0LL;
}

void sub_1002A3D24(id a1, AFHomeAnnouncementSnapshotMutating *a2)
{
}

id sub_1002A3D30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAndEvaluateSnapshot:*(void *)(a1 + 40)];
}

id sub_1002A3D3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_1002A3D44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 40)) {
    return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(v2 + 32));
  }
  id v4 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315138;
    uint64_t v6 = "-[ADHomeAnnouncementContextAdaptor getSnapshotWithCompletion:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Unable to get home announcement snapshot until a snapshot updater is registered.",  (uint8_t *)&v5,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002A3E40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = 0LL;

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 16LL));
}

id sub_1002A3E90(uint64_t a1)
{
  id v2 = objc_retainBlock(*(id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "addListener:");
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 24);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1002A3F18;
  v8[3] = &unk_1004F9810;
  void v8[4] = v5;
  return [v6 getSnapshotWithCompletion:v8];
}

void sub_1002A3F18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A3F98;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002A3F98(uint64_t a1)
{
}

void sub_1002A475C(_Unwind_Exception *a1)
{
}

id sub_1002A5000(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMessage:*(void *)(a1 + 40) messageType:*(void *)(a1 + 48) fromDeviceWithIdentifier:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
}

void sub_1002A5014(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A5094;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1002A5094(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setStereoPartnerIdentifier:*(void *)(a1 + 40)];
}

void sub_1002A50A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1002A5188;
  v10[3] = &unk_1004F98A0;
  id v11 = v6;
  id v12 = v5;
  id v8 = v5;
  id v9 = v6;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  id v13 = *(id *)(a1 + 40);
  dispatch_async(v7, v10);

  objc_destroyWeak(&v14);
}

void sub_1002A5188(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = (os_log_s *)AFSiriLogContextDaemon;
    if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      id v11 = "-[ADMyriadService _syncLastWinWithStereoPartner]_block_invoke";
      __int16 v12 = 2112;
      uint64_t v13 = v1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "%s Request failed: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"lastWin"]);
    if (v4 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDate), (objc_opt_isKindOfClass(v4, v5) & 1) == 0))
    {
      id v8 = (os_log_s *)AFSiriLogContextDaemon;
      if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315138;
        id v11 = "-[ADMyriadService _syncLastWinWithStereoPartner]_block_invoke_2";
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%s Received malformed lastWin data",  (uint8_t *)&v10,  0xCu);
      }
    }

    else
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      if (WeakRetained)
      {
        if ([*(id *)(a1 + 48) isEqualToString:WeakRetained[4]])
        {
          id v7 = objc_loadWeakRetained((id *)(a1 + 56));
          [v7 _setLastTimeStereoPartnerWon:v4];
        }

        else
        {
          id v9 = (os_log_s *)AFSiriLogContextDaemon;
          if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_INFO))
          {
            int v10 = 136315138;
            id v11 = "-[ADMyriadService _syncLastWinWithStereoPartner]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%s Stereo partner changed since request initiated",  (uint8_t *)&v10,  0xCu);
          }
        }
      }
    }
  }

void sub_1002A5384(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v1 + 32))
  {
    (*(void (**)(void, void, void))(v2 + 16))(*(void *)(a1 + 40), *(void *)(v1 + 24), 0LL);
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 1006LL));
    (*(void (**)(uint64_t, void, id))(v2 + 16))(v2, 0LL, v3);
  }

void sub_1002A5400(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v1 _setLastMyriadWin:v2];
}

void sub_1002A5448(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (dispatch_queue_s *)v4[1];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A54D8;
  v7[3] = &unk_1004FD968;
  id v8 = v4;
  id v9 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1002A54D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setStereoPartnerIdentifier:*(void *)(a1 + 40)];
}

void sub_1002A5558(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1005783C8;
  qword_1005783C8 = (uint64_t)v1;
}

void sub_1002A79F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id location)
{
}

LABEL_89:
          __int128 v92 = (os_log_s *)AFSiriLogContextSession;
          if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 136315138;
            __int128 v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInfo:"
                   "siriNetworkAnalysisInfo:]";
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "%s Retrying", buf, 0xCu);
          }

          __int16 v12 = v104;
          if (self->_siriNetworkEnablementExperimentActivated)
          {
            -[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]( self,  "_retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:",  v103,  v101,  v14);
          }

          else
          {
            id v93 = (void *)objc_claimAutoreleasedReturnValue([v100 connectionType]);
            -[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]( self,  "_retryForFailedConnection:withType:onError:",  v104,  v93,  v14);
          }

          __int16 v90 = v102;
          goto LABEL_95;
        }

        __int128 v67 = (void *)objc_claimAutoreleasedReturnValue( +[SNNetworkAnalytics sharedSNNetworkAnalytics]( &OBJC_CLASS___SNNetworkAnalytics,  "sharedSNNetworkAnalytics"));
      }

      else
      {
        __int16 v55 = v16;
        id v61 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession connectionMode](self, "connectionMode"));
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _adSessionTypeString](self, "_adSessionTypeString"));
        __int128 v63 = -[ADSession state](self, "state");
        id v59 = v15;
        if (v63 > 0xB) {
          id v64 = @"unknown";
        }
        else {
          id v64 = *(&off_1004F6E78 + v63);
        }
        __int128 v68 = v64;
        id v66 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sessionConnectionFailedError:connectionMode:sessionType:sessionState:dormant:analysisInfo:]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sessionConnectionFailedError:connectionMode:sessionType:sessionState:dormant:analysisInfo:",  v14,  v61,  v62,  v68,  -[ADSession dormant](self, "dormant"),  v100));

        __int128 v67 = (void *)objc_claimAutoreleasedReturnValue( +[SiriCoreNetworkingAnalytics sharedSiriCoreNetworkingAnalytics]( &OBJC_CLASS___SiriCoreNetworkingAnalytics,  "sharedSiriCoreNetworkingAnalytics"));
      }

      __int128 v69 = v67;
      [v67 logSessionConnectionFailed:v66];

      goto LABEL_57;
    }

    __int16 v25 = (char *)-[NSString code](v14, "code");
    id v26 = (void *)objc_claimAutoreleasedReturnValue(-[ADSession _account](self, "_account"));
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 predefinedServer]);

    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSString domain](v14, "domain"));
    if ([v28 isEqualToString:kCFErrorDomainCFNetwork])
    {
      if ((unint64_t)(v25 - 1) < 2)
      {

LABEL_16:
        if (v27)
        {
LABEL_36:

          goto LABEL_37;
        }

        __int128 v29 = (os_log_s *)AFSiriLogContextSession;
        if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO)) {
          goto LABEL_32;
        }
        *(_DWORD *)__int128 buf = 136315138;
        __int128 v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInfo:siri"
               "NetworkAnalysisInfo:]";
        __int128 v30 = "%s Not using a predefined server.";
        __int128 v31 = v29;
        __int128 v32 = 12;
        goto LABEL_31;
      }
    }

    else
    {
    }

    __int128 v33 = v15;
    char v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSString domain](v14, "domain"));
    __int128 v35 = [v34 isEqualToString:SiriCoreSiriConnectionErrorDomain];

    if (v35 && v25 == (char *)16)
    {
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[NSString userInfo](v14, "userInfo"));
      __int128 v37 = (NSString *)objc_claimAutoreleasedReturnValue([v36 objectForKey:NSUnderlyingErrorKey]);

      __int16 v38 = (NSString *)objc_claimAutoreleasedReturnValue(-[NSString domain](v37, "domain"));
      if (-[NSString isEqualToString:](v38, "isEqualToString:", kNWErrorDomainDNS))
      {
        id v39 = (char *)-[NSString code](v37, "code");

        __int16 v40 = v39 + 0x10000;
        uint64_t v15 = v33;
        id v41 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 136315138;
          __int128 v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInfo:si"
                 "riNetworkAnalysisInfo:]";
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%s Server Unreachable", buf, 0xCu);
        }

        __int16 v38 = v14;
        id v14 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  14LL,  0LL));
      }

      else
      {
        uint64_t v15 = v33;
      }

LABEL_35:
      goto LABEL_36;
    }

    uint64_t v15 = v33;
    uint64_t v42 = (os_log_s *)AFSiriLogContextSession;
    if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
LABEL_32:
      __int128 v37 = v14;
      id v14 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kAFAssistantErrorDomain,  14LL,  0LL));
      goto LABEL_35;
    }

    *(_DWORD *)__int128 buf = 136315394;
    __int128 v113 = "-[ADSessionRemoteServer _siriConnection:siriNetworkConnection:didEncounterError:siriCoreAnalysisInfo:siriNetw"
           "orkAnalysisInfo:]";
    id v114 = 2112;
    id v115 = (SNConnection *)v14;
    __int128 v30 = "%s Server Unreachable: %@";
    __int128 v31 = v42;
    __int128 v32 = 22;
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, v30, buf, v32);
    goto LABEL_32;
  }

void sub_1002AFB9C(_Unwind_Exception *a1)
{
}

void sub_1002B00BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id location)
{
}

void sub_1002B1E0C(_Unwind_Exception *a1)
{
}

void sub_1002B3034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1002B3214( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_1002B35CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002B35DC(uint64_t a1)
{
}

void sub_1002B35E4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    uint64_t v13 = "-[ADSessionRemoteServer getSNConnectionMetrics:]_block_invoke";
    __int16 v14 = 2112;
    id v15 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s SNConnectionMetric: %@",  (uint8_t *)&v12,  0x16u);
    if (!v3) {
      goto LABEL_6;
    }
  }

  else if (!v3)
  {
    goto LABEL_6;
  }

  uint64_t v5 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
  if (!v5)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v7 = *(void *)(a1[5] + 8LL);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    uint64_t v5 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
  }

  [v5 addObject:v3];
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v3 symptomsBasedNetworkQuality]);
  uint64_t v10 = *(void *)(a1[6] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

LABEL_6:
  dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 488LL));
}

uint64_t sub_1002B3730(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if ([*(id *)(a1[4] + 472) count])
  {
    if (!v2)
    {
      id v3 = [*(id *)(a1[4] + 472) mutableCopy];
      uint64_t v4 = *(void *)(a1[6] + 8LL);
      uint64_t v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = v3;
    }

    [*(id *)(a1[4] + 472) removeAllObjects];
  }

  id v6 = (char *)[*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) objectAtIndexedSubscript:v6 - 1]);
    [v7 setSymptomsBasedNetworkQuality:*(void *)(*(void *)(a1[7] + 8) + 40)];
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_1002B3808(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    if (!v3)
    {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v6 = *(void **)(v5 + 40);
      *(void *)(v5 + 40) = v4;

      id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    [v3 addObject:v7];
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 488LL));
}

uint64_t sub_1002B3894(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if ([*(id *)(a1[4] + 464) count])
  {
    if (!v2)
    {
      id v3 = [*(id *)(a1[4] + 464) mutableCopy];
      uint64_t v4 = *(void *)(a1[6] + 8LL);
      uint64_t v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = v3;
    }

    [*(id *)(a1[4] + 464) removeAllObjects];
  }

  id v6 = (char *)[*(id *)(*(void *)(a1[6] + 8) + 40) count];
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) objectAtIndexedSubscript:v6 - 1]);
    [v7 setSymptomsBasedNetworkQuality:*(void *)(*(void *)(a1[7] + 8) + 40)];
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_1002B396C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v1 assistantSessionDictationHIPAAMDMStatusDidChange];
}

void sub_1002B399C(id a1)
{
}

void sub_1002B39A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v1 + 315))
  {
    id v3 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      uint64_t v5 = "-[ADSessionRemoteServer networkManagerLostNonWWANConnectivity:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Clearing flag to switch to WiFi on request end",  (uint8_t *)&v4,  0xCu);
      uint64_t v1 = *(void *)(a1 + 32);
    }

    *(_BYTE *)(v1 + 315) = 0;
  }

void sub_1002B3A74(uint64_t a1)
{
  if ((uint64_t)[*(id *)(a1 + 32) state] >= 4
    && [*(id *)(a1 + 32) _connectionIsWWAN])
  {
    id v2 = *(_BYTE **)(a1 + 32);
    if (v2[362]
      || (id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 delegate]),
          unsigned int v4 = [v3 assistantSessionShouldRestartConnectionOnWiFi:*(void *)(a1 + 32)],
          v3,
          !v4))
    {
      id v6 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315138;
        id v8 = "-[ADSessionRemoteServer networkManagerNonWWANDidBecomeAvailable:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s We're in a request, we'll check for a wifi transition afterward",  (uint8_t *)&v7,  0xCu);
      }

      *(_BYTE *)(*(void *)(a1 + 32) + 315LL) = 1;
    }

    else
    {
      uint64_t v5 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v7 = 136315138;
        id v8 = "-[ADSessionRemoteServer networkManagerNonWWANDidBecomeAvailable:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s WiFi became available and we're not on a request restarting connection",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(a1 + 32) _resetServerConnection];
      [*(id *)(a1 + 32) _startConnection];
    }
  }

id sub_1002B3BF4(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    uint64_t v5 = "-[ADSessionRemoteServer _multiUsersDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  [*(id *)(a1 + 32) _sendMultiUserInfo];
  return [*(id *)(a1 + 32) _sendUserProfiles];
}

void sub_1002B3CAC(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    id v6 = "-[ADSessionRemoteServer _companionServiceStateDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  id v3 = *(void **)(a1 + 32);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _account]);
  [v3 _sendSetRemoteDevicesWithAccount:v4];
}

id sub_1002B3D78(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315138;
    int v5 = "-[ADSessionRemoteServer _sidekickDeviceIdentifierDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v4, 0xCu);
  }

  id result = [*(id *)(a1 + 32) state];
  if (result == (id)11)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 504) isEndpoint];
    if ((_DWORD)result) {
      return [*(id *)(a1 + 32) _sendSidekickHubDeviceInfo];
    }
  }

  return result;
}

void sub_1002B3E50(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315138;
    int v7 = "-[ADSessionRemoteServer _homeContextDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v6, 0xCu);
  }

  if ([*(id *)(a1 + 32) state] == (id)11)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) object]);
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___SASetHomeContext);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0) {
      int v5 = v3;
    }
    else {
      int v5 = 0LL;
    }
    [*(id *)(a1 + 32) _sendHomeContext:v5];
  }

void sub_1002B3F44(uint64_t a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315138;
    int v6 = "-[ADSessionRemoteServer _homeInfoDidChange:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v5, 0xCu);
  }

  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _account]);
  [v3 _sendSetRemoteDevicesWithAccount:v4];
}

void sub_1002B4010(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 520LL);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v6 = WeakRetained;
  if (v4)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _siriNetworkServerConnection]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    id v17[2] = sub_1002B411C;
    v17[3] = &unk_1004FB0E0;
    id v8 = &v18;
    id v18 = v3;
    id v9 = v3;
    uint64_t v10 = (void ***)v17;
  }

  else
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _serverConnection]);
    int v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472LL;
    __int16 v14 = sub_1002B4128;
    id v15 = &unk_1004FB0E0;
    id v8 = &v16;
    id v16 = v3;
    id v11 = v3;
    uint64_t v10 = &v12;
  }

  objc_msgSend(v7, "barrier:", v10, v12, v13, v14, v15);
}

id sub_1002B411C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) barrierResultReturnedWithSuccess:a2];
}

id sub_1002B4128(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) barrierResultReturnedWithSuccess:a2];
}

void sub_1002B4134(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(dispatch_queue_s **)(v4 + 240);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002B41BC;
  v7[3] = &unk_1004FD968;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_1002B41BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendHomeContext:*(void *)(a1 + 40)];
}

id sub_1002B41C8(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 name]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 absoluteString]);
        [v2 appendFormat:@"\n    %@/%@", v9, v11, (void)v14];
      }

      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v5);
  }

  id v12 = [v2 copy];
  return v12;
}

void sub_1002B433C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 assistantId]);
  [v3 setAssistantIdentifier:v4];

  id v6 = (id)objc_claimAutoreleasedReturnValue(+[ADPreferences sharedPreferences](&OBJC_CLASS___ADPreferences, "sharedPreferences"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 companionIdentifier]);
  [v3 setIdsDeviceUniqueIdentifier:v5];
}

void sub_1002B43C0(id a1)
{
}

void sub_1002B43CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (os_log_s *)AFSiriLogContextSession;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error sending command %@ %{public}@",  buf,  0x20u);
    }

    id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 240LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B47D0;
    block[3] = &unk_1004F9AA8;
    objc_copyWeak(&v12, (id *)(a1 + 40));
    id v10 = v6;
    id v11 = v5;
    dispatch_async(v8, block);

    objc_destroyWeak(&v12);
  }

  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke_2";
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002B45A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (os_log_s *)AFSiriLogContextSession;
  if (v6)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315650;
      __int128 v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke";
      __int16 v15 = 2112;
      id v16 = v5;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Error sending command %@ %{public}@",  buf,  0x20u);
    }

    id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 240LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B4774;
    block[3] = &unk_1004F9AA8;
    objc_copyWeak(&v12, (id *)(a1 + 40));
    id v10 = v6;
    id v11 = v5;
    dispatch_async(v8, block);

    objc_destroyWeak(&v12);
  }

  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    __int128 v14 = "-[ADSessionRemoteServer _sendServerCommands:]_block_invoke_2";
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002B4774(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)]);
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

void sub_1002B47D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)]);
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

void sub_1002B482C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextSession;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error sending command %@ %{public}@",  buf,  0x20u);
    }

    id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 240LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B4C18;
    block[3] = &unk_1004F9AA8;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    id v9 = v3;
    id v10 = *(id *)(a1 + 32);
    dispatch_async(v5, block);

    objc_destroyWeak(&v11);
  }

  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002B49F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)AFSiriLogContextSession;
  if (v3)
  {
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 136315650;
      uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke";
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%s Error sending command %@ %{public}@",  buf,  0x20u);
    }

    id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 240LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B4BBC;
    block[3] = &unk_1004F9AA8;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    id v9 = v3;
    id v10 = *(id *)(a1 + 32);
    dispatch_async(v5, block);

    objc_destroyWeak(&v11);
  }

  else if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 136315394;
    uint64_t v13 = "-[ADSessionRemoteServer _sendServerCommand:]_block_invoke_2";
    __int16 v14 = 2112;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s %@ sent or buffered", buf, 0x16u);
  }
}

void sub_1002B4BBC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)]);
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

void sub_1002B4C18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _generateAnalyticsContextWithError:*(void *)(a1 + 32)]);
    [v4 _sendServerCommandLogErrorForCommand:*(void *)(a1 + 40) withContext:v3];

    id WeakRetained = v4;
  }
}

NSMutableDictionary *sub_1002B4C74(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = (NSMutableDictionary *)[v2 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  id v4 = v3;
  if ([*(id *)(a1 + 40) conformsToProtocol:&OBJC_PROTOCOL___AceObject])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) groupIdentifier]);
    if (v5) {
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v5, @"groupIdentifier");
    }
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) encodedClassName]);
    if (v6) {
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v6, @"classIdentifier");
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceId]);
  if (v7) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v7, @"aceId");
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
  if (v8) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v8, @"refId");
  }

  return v4;
}

id sub_1002B4D80(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v4 = 136315138;
      id v5 = "-[ADSessionRemoteServer _assistantFailedForReason:error:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Retrying after assistant failure",  (uint8_t *)&v4,  0xCu);
    }

    return [*(id *)(a1 + 32) _startConnection];
  }

  return result;
}

NSMutableDictionary *sub_1002B4E40(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = (NSMutableDictionary *)[v2 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  int v4 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceId]);
  if (v5) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v5, @"aceId");
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
  if (v6) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v6, @"refId");
  }

  return v4;
}

NSMutableDictionary *sub_1002B4EE0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v3 = (NSMutableDictionary *)[v2 mutableCopy];
  }
  else {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  int v4 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) aceId]);
  if (v5) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v5, @"aceId");
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) refId]);
  if (v6) {
    -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v6, @"refId");
  }

  return v4;
}

id sub_1002B4F80(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _authenticator]);
  [v2 reset];

  [*(id *)(a1 + 32) _clearLimbo];
  return [*(id *)(a1 + 32) _informDelegateOfError:*(void *)(a1 + 40)];
}

uint64_t sub_1002B4FC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1002B4FCC(uint64_t a1, char a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 48) != *(void *)(v4 + 248) && *(void *)(a1 + 56) != *(void *)(v4 + 256)) {
    return [*(id *)(a1 + 40) reset];
  }
  if (!a3)
  {
    if ((a2 & 1) != 0) {
      goto LABEL_12;
    }
LABEL_9:
    uint64_t v7 = (os_log_s *)AFSiriLogContextSession;
    if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR)) {
      return objc_msgSend((id)v4, "_authenticationFailed", *(_OWORD *)v11);
    }
    *(_DWORD *)id v11 = 136315138;
    *(void *)&void v11[4] = "-[ADSessionRemoteServer _continueAuthWithCertificateData:]_block_invoke";
    id v8 = "%s Exceeded NAC cert retry attempts, failing authentication";
    goto LABEL_20;
  }

  if (*(_BYTE *)(v4 + 312))
  {
    unint64_t v6 = *(void *)(v4 + 448);
    if (v6 <= 2)
    {
      *(void *)(v4 + 44_Block_object_dispose((const void *)(v17 - 112), 8) = v6 + 1;
      [*(id *)(a1 + 32) _setCachedServerCertificate:0];
LABEL_17:
      id v9 = *(void **)(a1 + 32);
      return [v9 _continueAuthentication];
    }

    uint64_t v7 = (os_log_s *)AFSiriLogContextSession;
    if (!os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR)) {
      return objc_msgSend((id)v4, "_authenticationFailed", *(_OWORD *)v11);
    }
    *(_DWORD *)id v11 = 136315138;
    *(void *)&void v11[4] = "-[ADSessionRemoteServer _continueAuthWithCertificateData:]_block_invoke";
    id v8 = "%s Exceeded bad cached cert retry attempts, failing authentication";
LABEL_20:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, v11, 0xCu);
    uint64_t v4 = *(void *)(a1 + 32);
    return objc_msgSend((id)v4, "_authenticationFailed", *(_OWORD *)v11);
  }

  if ((a2 & 1) == 0)
  {
    unint64_t v10 = *(void *)(v4 + 456);
    if (v10 <= 1)
    {
      *(void *)(v4 + 456) = v10 + 1;
      goto LABEL_17;
    }

    goto LABEL_9;
  }

void sub_1002B51EC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 385LL) = 0;
  id v2 = *(void **)(a1 + 32);
  if (v2[32] == *(void *)(a1 + 40))
  {
    if ([v2 _shouldRetry]
      && ((uint64_t)[*(id *)(a1 + 32) state] < 11
       || (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]),
           unsigned int v5 = [v4 assistantSessionShouldAttemptRetry:*(void *)(a1 + 32)],
           v4,
           v5)))
    {
      unint64_t v6 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Retrying after backoff",  (uint8_t *)&v8,  0xCu);
      }

      [*(id *)(a1 + 32) _retryWithParameters:*(unsigned __int8 *)(a1 + 64) skipPeer:*(unsigned __int8 *)(a1 + 65) skipPeerError:*(void *)(a1 + 48) causedByError:*(void *)(a1 + 56) useSecondary:*(unsigned __int8 *)(a1 + 66)];
    }

    else
    {
      uint64_t v7 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s State has changed, not proceeding with retry.",  (uint8_t *)&v8,  0xCu);
      }

      [*(id *)(a1 + 32) _clearLimbo];
      [*(id *)(a1 + 32) _resetServerConnection];
      [*(id *)(a1 + 32) _informDelegateOfError:*(void *)(a1 + 56)];
    }
  }

  else
  {
    id v3 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "-[ADSessionRemoteServer _retrySiriNetworkForFailedConnection:siriNetworkAnalysisInfo:onError:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Server connection is no longer current. ignoring backoff",  (uint8_t *)&v8,  0xCu);
    }
  }

void sub_1002B53F0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 385LL) = 0;
  id v2 = *(void **)(a1 + 32);
  if (v2[31] == *(void *)(a1 + 40))
  {
    if ([v2 _shouldRetry]
      && ((uint64_t)[*(id *)(a1 + 32) state] < 11
       || (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]),
           unsigned int v5 = [v4 assistantSessionShouldAttemptRetry:*(void *)(a1 + 32)],
           v4,
           v5)))
    {
      unint64_t v6 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%s Retrying after backoff",  (uint8_t *)&v8,  0xCu);
      }

      [*(id *)(a1 + 32) _retryWithParameters:*(unsigned __int8 *)(a1 + 64) skipPeer:*(unsigned __int8 *)(a1 + 65) skipPeerError:*(void *)(a1 + 48) causedByError:*(void *)(a1 + 56) useSecondary:*(unsigned __int8 *)(a1 + 66)];
    }

    else
    {
      uint64_t v7 = (os_log_s *)AFSiriLogContextSession;
      if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
      {
        int v8 = 136315138;
        id v9 = "-[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s State has changed, not proceeding with retry.",  (uint8_t *)&v8,  0xCu);
      }

      [*(id *)(a1 + 32) _clearLimbo];
      [*(id *)(a1 + 32) _resetServerConnection];
      [*(id *)(a1 + 32) _informDelegateOfError:*(void *)(a1 + 56)];
    }
  }

  else
  {
    id v3 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = "-[ADSessionRemoteServer _retryForFailedConnection:withType:onError:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%s Server connection is no longer current. ignoring backoff",  (uint8_t *)&v8,  0xCu);
    }
  }

id sub_1002B55F4(uint64_t a1)
{
  v3[0] = @"oldId";
  v3[1] = @"newId";
  uint64_t v1 = *(void *)(a1 + 40);
  v4[0] = *(void *)(a1 + 32);
  v4[1] = v1;
  return (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  2LL));
}

id sub_1002B5670(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _siriConnection:0 didEncounterIntermediateError:*(void *)(a1 + 40)];
}

id sub_1002B5680(uint64_t a1)
{
  return [*(id *)(a1 + 32) _siriConnection:0 siriNetworkConnection:*(void *)(a1 + 40) didEncounterError:*(void *)(a1 + 48) siriCoreAnalysisInfo:0 siriNetworkAnalysisInfo:*(void *)(a1 + 56)];
}

void sub_1002B5698(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 256);
  if (v2 == *(void *)(a1 + 40))
  {
    int v4 = *(unsigned __int8 *)(v1 + 385);
    unsigned int v5 = (os_log_s *)AFSiriLogContextSession;
    BOOL v6 = os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO);
    if (v4)
    {
      if (v6)
      {
        int v12 = 136315138;
        uint64_t v13 = "-[ADSessionRemoteServer didCloseConnection:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Ignoring connection close since we have an incoming retry",  (uint8_t *)&v12,  0xCu);
      }
    }

    else
    {
      if (v6)
      {
        int v12 = 136315394;
        uint64_t v13 = "-[ADSessionRemoteServer didCloseConnection:]_block_invoke";
        __int16 v14 = 2112;
        uint64_t v15 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Connection closed %@",  (uint8_t *)&v12,  0x16u);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      if (*(_BYTE *)(v1 + 362))
      {
        uint64_t v7 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315138;
          uint64_t v13 = "-[ADSessionRemoteServer didCloseConnection:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Connection closed with active request, treating as error",  (uint8_t *)&v12,  0xCu);
          uint64_t v1 = *(void *)(a1 + 32);
        }

        uint64_t v8 = *(void *)(a1 + 40);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 9LL));
        [(id)v1 _siriConnection:0 siriNetworkConnection:v8 didEncounterError:v9 siriCoreAnalysisInfo:0 siriNetworkAnalysisInfo:0];
      }

      else
      {
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v1 delegate]);
        [v10 assistantSessionConnectionDidClose:*(void *)(a1 + 32)];

        [*(id *)(a1 + 32) _clearLimbo];
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _siriNetworkManager]);
        [v11 releaseWiFiAssertion];

        [*(id *)(a1 + 32) _resetServerConnection];
      }
    }
  }

void *sub_1002B58BC(void *result)
{
  uint64_t v1 = (void *)result[4];
  if (v1[32] == result[5])
  {
    uint64_t v2 = result;
    id v3 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = v2[6];
      int v5 = 136315394;
      BOOL v6 = "-[ADSessionRemoteServer didReceiveAceObject:object:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Received object %@", (uint8_t *)&v5, 0x16u);
      uint64_t v1 = (void *)v2[4];
    }

    return [v1 _handleAceObject:v2[6]];
  }

  return result;
}

void *sub_1002B59A4(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[32] == *(void *)(a1 + 40))
  {
    [result _setSNCurrentConnectionType:*(void *)(a1 + 48)];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v3 assistantSession:*(void *)(a1 + 32) didOpenConnectionWithPolicyId:*(void *)(a1 + 56) routeId:*(void *)(a1 + 64) connectionDelay:*(double *)(a1 + 80)];

    [*(id *)(a1 + 32) _connectionOpened];
    return _[*(id *)(a1 + 32) _generateAWDMetricsForOpenedConnectionFromSiriNetwork:*(void *)(a1 + 72) type:*(void *)(a1 + 48)];
  }

  return result;
}

NSMutableDictionary *sub_1002B5A28(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v4, @"policyId");
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v5, @"routeId");
  }
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v6, @"delay");

  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) technologyDescription]);
  if (v7) {
    -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v7, @"connectionType");
  }

  return v3;
}

id sub_1002B5AEC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) canUseWiFiDirectly];
  if ((_DWORD)v2 && (sub_100071C58((uint64_t)v2) & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _siriNetworkManager]);
    [v3 acquireWiFiAssertion:1];
  }

  return _[*(id *)(a1 + 40) _generateAWDMetricsForWillStartConnectionFromSNConnectionType:*(void *)(a1 + 32)];
}

id sub_1002B5B3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _siriConnection:*(void *)(a1 + 40) didEncounterIntermediateError:*(void *)(a1 + 48)];
}

NSMutableDictionary *sub_1002B5B4C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(void **)(a1 + 40);
    if (v2) {
      id v3 = (NSMutableDictionary *)[v2 mutableCopy];
    }
    else {
      id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    BOOL v6 = v3;
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionType]);
    uint64_t Description = SiriCoreConnectionTechnologyGetDescription([v7 technology]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(Description);

    if (v9) {
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v9, @"connectionType");
    }
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionURL]);
    id v11 = v10;
    if (v10)
    {
      int v12 = (void *)objc_claimAutoreleasedReturnValue([v10 absoluteString]);
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v12, @"connectionURL");
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 32) interfaceIndex]));
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v13, @"interfaceIndex");

    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendBufferSize]);
    if (v14) {
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v14, @"sendBufferSize");
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) wwanPreferred]));
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v15, @"wwanPreferred");

    __int16 v16 = *(void **)(a1 + 32);
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 40);
    if (!*(void *)(a1 + 48))
    {
      BOOL v6 = v4;
      return v6;
    }

    if (v4) {
      uint64_t v5 = (NSMutableDictionary *)[v4 mutableCopy];
    }
    else {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    BOOL v6 = v5;
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _currentSNConnectionType]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v17 technologyDescription]);

    if (v9) {
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v9, @"connectionType");
    }
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) connectionURL]);
    id v11 = v18;
    if (v18)
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 absoluteString]);
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v19, @"connectionURL");
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 48) interfaceIndex]));
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v20, @"interfaceIndex");

    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sendBufferSize]);
    if (v14) {
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v14, @"sendBufferSize");
    }
    int v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 48) wwanPreferred]));
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v21, @"wwanPreferred");

    __int16 v16 = *(void **)(a1 + 48);
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v16 policyId]);
  if (v22) {
    -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v22, @"policyId");
  }

  return v6;
}

id sub_1002B5E38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _siriConnection:*(void *)(a1 + 40) didEncounterError:*(void *)(a1 + 48) analysisInfo:*(void *)(a1 + 56)];
}

void sub_1002B5E48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 248);
  if (v2 == *(void *)(a1 + 40))
  {
    int v4 = *(unsigned __int8 *)(v1 + 385);
    uint64_t v5 = (os_log_s *)AFSiriLogContextSession;
    BOOL v6 = os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO);
    if (v4)
    {
      if (v6)
      {
        int v12 = 136315138;
        uint64_t v13 = "-[ADSessionRemoteServer siriConnectionDidClose:]_block_invoke";
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Ignoring connection close since we have an incoming retry",  (uint8_t *)&v12,  0xCu);
      }
    }

    else
    {
      if (v6)
      {
        int v12 = 136315394;
        uint64_t v13 = "-[ADSessionRemoteServer siriConnectionDidClose:]_block_invoke";
        __int16 v14 = 2112;
        uint64_t v15 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%s Connection closed %@",  (uint8_t *)&v12,  0x16u);
        uint64_t v1 = *(void *)(a1 + 32);
      }

      if (*(_BYTE *)(v1 + 362))
      {
        __int16 v7 = (os_log_s *)AFSiriLogContextSession;
        if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_ERROR))
        {
          int v12 = 136315138;
          uint64_t v13 = "-[ADSessionRemoteServer siriConnectionDidClose:]_block_invoke";
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%s Connection closed with active request, treating as error",  (uint8_t *)&v12,  0xCu);
          uint64_t v1 = *(void *)(a1 + 32);
        }

        uint64_t v8 = *(void *)(a1 + 40);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[AFError errorWithCode:](&OBJC_CLASS___AFError, "errorWithCode:", 9LL));
        [(id)v1 _siriConnection:v8 didEncounterError:v9 analysisInfo:0];
      }

      else
      {
        unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([(id)v1 delegate]);
        [v10 assistantSessionConnectionDidClose:*(void *)(a1 + 32)];

        [*(id *)(a1 + 32) _clearLimbo];
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _networkManager]);
        [v11 releaseWiFiAssertion];

        [*(id *)(a1 + 32) _resetServerConnection];
      }
    }
  }

void *sub_1002B6064(void *result)
{
  uint64_t v1 = (void *)result[4];
  if (v1[31] == result[5])
  {
    uint64_t v2 = result;
    id v3 = (os_log_s *)AFSiriLogContextSession;
    if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = v2[6];
      int v5 = 136315394;
      BOOL v6 = "-[ADSessionRemoteServer siriConnection:didReceiveAceObject:]_block_invoke";
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%s Received object %@", (uint8_t *)&v5, 0x16u);
      uint64_t v1 = (void *)v2[4];
    }

    return [v1 _handleAceObject:v2[6]];
  }

  return result;
}

void *sub_1002B614C(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[31] == *(void *)(a1 + 40))
  {
    [result _setCurrentConnectionType:*(void *)(a1 + 48)];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v3 assistantSession:*(void *)(a1 + 32) didOpenConnectionWithPolicyId:*(void *)(a1 + 56) routeId:*(void *)(a1 + 64) connectionDelay:*(double *)(a1 + 80)];

    [*(id *)(a1 + 32) _connectionOpened];
    return _[*(id *)(a1 + 32) _generateAWDMetricsForOpenedConnection:*(void *)(a1 + 72) type:*(void *)(a1 + 48)];
  }

  return result;
}

NSMutableDictionary *sub_1002B61D0(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v4, @"policyId");
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v5, @"routeId");
  }
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 56)));
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v6, @"delay");

  uint64_t Description = SiriCoreConnectionTechnologyGetDescription([*(id *)(a1 + 48) technology]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(Description);
  if (v8) {
    -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v8, @"connectionType");
  }

  return v3;
}

id sub_1002B6298(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) canUseWiFiDirectly];
  if ((_DWORD)v2 && (sub_100071C58((uint64_t)v2) & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _networkManager]);
    [v3 acquireWiFiAssertion:1];
  }

  return _[*(id *)(a1 + 40) _generateAWDMetricsForWillStartConnection:*(void *)(a1 + 32)];
}

id sub_1002B62E8(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 312LL) = 1;
  }

  else if (a3)
  {
    [*(id *)(a1 + 32) _setCachedServerCertificate:0];
  }

  return _[*(id *)(a1 + 32) _eagerAuthDidComplete];
}

id sub_1002B6334(uint64_t a1, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 312LL) = 1;
  }

  else if (a3)
  {
    [*(id *)(a1 + 32) _setCachedServerCertificate:0];
  }

  return _[*(id *)(a1 + 32) _eagerAuthDidComplete];
}

void sub_1002B6380(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  BOOL v6 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    unint64_t v10 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v9, 0xCu);
  }

  [v5 cancelSynchronously:*(unsigned __int8 *)(a1 + 48) onQueue:a3 completion:*(void *)(a1 + 40)];
  kdebug_trace(722470264LL, 0LL, 0LL, 0LL, 0LL);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v7 logEventWithType:913 context:0];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _networkManager]);
  [v8 releaseWiFiAssertion];
}

void sub_1002B64AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  BOOL v6 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v9 = 136315138;
    unint64_t v10 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%s ", (uint8_t *)&v9, 0xCu);
  }

  [v5 cancelSynchronously:*(unsigned __int8 *)(a1 + 48) isOnConnectionQueue:a3 completion:*(void *)(a1 + 40)];
  kdebug_trace(722470264LL, 0LL, 0LL, 0LL, 0LL);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue(+[AFAnalytics sharedAnalytics](&OBJC_CLASS___AFAnalytics, "sharedAnalytics"));
  [v7 logEventWithType:913 context:0];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _siriNetworkManager]);
  [v8 releaseWiFiAssertion];
}

void sub_1002B65D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    BOOL v6 = (dispatch_queue_s *)WeakRetained[30];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B68F4;
    block[3] = &unk_1004FCBB0;
    unint64_t v10 = WeakRetained;
    id v7 = v3;
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v14 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 488LL));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1002B66E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (v3 && WeakRetained)
  {
    BOOL v6 = (dispatch_queue_s *)WeakRetained[30];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B67E8;
    block[3] = &unk_1004FCBB0;
    unint64_t v10 = WeakRetained;
    id v7 = v3;
    uint64_t v8 = *(void *)(a1 + 32);
    id v11 = v7;
    uint64_t v12 = v8;
    id v14 = *(id *)(a1 + 48);
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }

  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 488LL));
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

uint64_t sub_1002B67E8(void *a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    int v9 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Adding metrics", (uint8_t *)&v8, 0xCu);
  }

  id v3 = *(void **)(a1[4] + 472LL);
  if (!v3)
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v5 = a1[4];
    BOOL v6 = *(void **)(v5 + 472);
    *(void *)(v5 + 472) = v4;

    id v3 = *(void **)(a1[4] + 472LL);
  }

  [v3 addObject:a1[5]];
  dispatch_group_leave(*(dispatch_group_t *)(a1[6] + 488LL));
  return (*(uint64_t (**)(void))(a1[8] + 16LL))();
}

uint64_t sub_1002B68F4(void *a1)
{
  id v2 = (os_log_s *)AFSiriLogContextSession;
  if (os_log_type_enabled(AFSiriLogContextSession, OS_LOG_TYPE_INFO))
  {
    int v8 = 136315138;
    int v9 = "-[ADSessionRemoteServer _resetServerConnectionSynchronously:completion:]_block_invoke_2";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%s Adding metrics", (uint8_t *)&v8, 0xCu);
  }

  id v3 = *(void **)(a1[4] + 464LL);
  if (!v3)
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v5 = a1[4];
    BOOL v6 = *(void **)(v5 + 464);
    *(void *)(v5 + 464) = v4;

    id v3 = *(void **)(a1[4] + 464LL);
  }

  [v3 addObject:a1[5]];
  dispatch_group_leave(*(dispatch_group_t *)(a1[6] + 488LL));
  return (*(uint64_t (**)(void))(a1[8] + 16LL))();
}

void sub_1002B6A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a3;
  [*(id *)(a1 + 32) _startConnectionPreferringWWAN:*(unsigned __int8 *)(*(void *)(a1 + 32) + 316) skipPeer:a2 skipPeerError:*(void *)(*(void *)(a1 + 32) + 320) useWiFiHint:a3 forceReconnect:*(unsigned __int8 *)(*(void *)(a1 + 32) + 328)];
  *(_BYTE *)(*(void *)(a1 + 32) + 317LL) = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  BOOL v6 = *(void **)(v5 + 320);
  *(void *)(v5 + 320) = 0LL;

  *(_BYTE *)(*(void *)(a1 + 32) + 328LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 361LL) = v3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[AFDiagnostics sharedDiagnostics](&OBJC_CLASS___AFDiagnostics, "sharedDiagnostics"));
  [v7 logConnectionStart];
}

void sub_1002B6AB8(uint64_t a1)
{
}

void sub_1002B6B5C(uint64_t a1, void *a2)
{
  id v12 = a2;
  char v3 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 4LL);
  unint64_t v4 = (unint64_t)[v12 cellularInstant];
  if (v4 > 2) {
    uint64_t v5 = @"Unknown";
  }
  else {
    uint64_t v5 = off_1004F9C70[v4];
  }
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v5, @"CellularInstant");
  unint64_t v6 = (unint64_t)[v12 cellularHistorical];
  if (v6 > 2) {
    id v7 = @"Unknown";
  }
  else {
    id v7 = off_1004F9C70[v6];
  }
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v7, @"CellularHistorical");
  unint64_t v8 = (unint64_t)[v12 wifiInstant];
  if (v8 > 2) {
    int v9 = @"Unknown";
  }
  else {
    int v9 = off_1004F9C70[v8];
  }
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v9, @"WiFiInstant");
  unint64_t v10 = (unint64_t)[v12 wifiHistorical];
  if (v10 > 2) {
    id v11 = @"Unknown";
  }
  else {
    id v11 = off_1004F9C70[v10];
  }
  -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v11, @"WiFiHistorical");
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002B9068(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v11 = "-[ADDeviceSyncTimerProvider getSnapshotWithCompletion:]_block_invoke";
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%s Fetched local timer snapshot %@.", buf, 0x16u);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1002B9200;
  v8[3] = &unk_1004F9CE0;
  id v5 = v3;
  id v9 = v5;
  id v6 = +[ADDeviceSyncSnapshot newWithBuilder:](&OBJC_CLASS___ADDeviceSyncSnapshot, "newWithBuilder:", v8);
  id v7 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 136315394;
    id v11 = "-[ADDeviceSyncTimerProvider getSnapshotWithCompletion:]_block_invoke_3";
    __int16 v12 = 2112;
    id v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%s Converted to device sync snapshot %@.",  buf,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002B9200(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "setGeneration:", objc_msgSend(v3, "generation"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) date]);
  [v4 setDate:v5];

  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timersByID]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002B92F0;
  v9[3] = &unk_1004F9CB8;
  unint64_t v10 = v6;
  unint64_t v8 = v6;
  [v7 enumerateKeysAndObjectsUsingBlock:v9];

  [v4 setItems:v8];
}

void sub_1002B92F0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  void v6[2] = sub_1000B46BC;
  v6[3] = &unk_1004F0020;
  id v7 = a3;
  id v4 = v7;
  id v5 = +[ADDeviceSyncItem newWithBuilder:](&OBJC_CLASS___ADDeviceSyncItem, "newWithBuilder:", v6);

  [v3 addObject:v5];
}

uint64_t sub_1002B938C(uint64_t a1, void *a2)
{
  id v3 = [a2 generation];
  id v4 = (os_log_s *)AFSiriLogContextDeviceSync;
  if (os_log_type_enabled(AFSiriLogContextDeviceSync, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    id v7 = "-[ADDeviceSyncTimerProvider getGenerationWithCompletion:]_block_invoke";
    __int16 v8 = 2048;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%s Loaded local timer generation %llu.",  (uint8_t *)&v6,  0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002BA7A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1002BACC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceProximityManager sharedManager](&OBJC_CLASS___ADDeviceProximityManager, "sharedManager"));
  id v5 = sub_10029CB20(v3);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1002BAD94;
  v10[3] = &unk_1004FD6C8;
  id v8 = *(id *)(a1 + 32);
  id v11 = v3;
  id v12 = v8;
  id v9 = v3;
  [v4 getDeviceProximityRelativeToLocalDeviceWithDeviceContexts:v6 includesAllReachableDevices:v7 completion:v10];
}

uint64_t sub_1002BAD94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2);
}

void sub_1002BADA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000LL;
  __int16 v16 = sub_1002BAF70;
  id v17 = sub_1002BAF80;
  id v18 = 0LL;
  if ([v5 isLocationSharingDevice])
  {
    uint64_t v7 = sub_1002BAF88(v5, 4000LL);
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)v14[5];
    void v14[5] = v8;
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1002BB218;
    void v12[3] = &unk_1004F9F68;
    void v12[4] = &v13;
    [v6 enumerateObjectsUsingBlock:v12];
  }

  unint64_t v10 = (os_log_s *)AFSiriLogContextDaemon;
  if (os_log_type_enabled(AFSiriLogContextDaemon, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = v14[5];
    *(_DWORD *)__int128 buf = 136315394;
    id v20 = "-[ADDeviceResolutionServiceListener meDeviceWithCompletion:]_block_invoke";
    __int16 v21 = 2112;
    uint64_t v22 = v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s #hal meDevice: %@", buf, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  _Block_object_dispose(&v13, 8);
}

void sub_1002BAF50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002BAF70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002BAF80(uint64_t a1)
{
}

SVDDeviceUnit *sub_1002BAF88(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ADDeviceCircleManager sharedInstance](&OBJC_CLASS___ADDeviceCircleManager, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 managedPeerInfoMatchingPeerInfo:v3]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 idsDeviceUniqueIdentifier]);
  uint64_t v7 = v6;
  if (v6) {
    id v8 = v6;
  }
  else {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v5 idsDeviceUniqueIdentifier]);
  }
  id v9 = v8;

  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 assistantIdentifier]);
  uint64_t v11 = v10;
  if (v10) {
    id v12 = v10;
  }
  else {
    id v12 = (id)objc_claimAutoreleasedReturnValue([v5 assistantIdentifier]);
  }
  uint64_t v13 = v12;

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 name]);
  uint64_t v15 = v14;
  if (v14) {
    id v16 = v14;
  }
  else {
    id v16 = (id)objc_claimAutoreleasedReturnValue([v5 name]);
  }
  id v17 = v16;

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 roomName]);
  id v19 = v18;
  if (v18) {
    id v20 = v18;
  }
  else {
    id v20 = (id)objc_claimAutoreleasedReturnValue([v5 roomName]);
  }
  __int16 v21 = v20;

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 mediaRouteIdentifier]);
  __int16 v23 = v22;
  if (v22) {
    id v24 = v22;
  }
  else {
    id v24 = (id)objc_claimAutoreleasedReturnValue([v5 mediaRouteIdentifier]);
  }
  __int16 v25 = v24;

  id v26 = v9;
  uint64_t v27 = a2;
  else {
    unsigned __int8 v28 = [v5 isCommunalDevice];
  }
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v3 homeKitAccessoryIdentifier]);
  __int128 v30 = v29;
  __int16 v40 = v5;
  if (v29) {
    id v31 = v29;
  }
  else {
    id v31 = (id)objc_claimAutoreleasedReturnValue([v5 homeKitAccessoryIdentifier]);
  }
  __int128 v32 = v31;

  __int128 v33 = objc_alloc(&OBJC_CLASS___SVDDeviceUnit);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_1002BB280;
  v41[3] = &unk_1004F9FE0;
  id v42 = v17;
  id v43 = v21;
  id v45 = v32;
  uint64_t v46 = v27;
  unsigned __int8 v47 = v28;
  id v44 = v25;
  id v34 = v32;
  id v35 = v25;
  id v36 = v21;
  id v37 = v17;
  __int16 v38 = -[SVDDeviceUnit initWithIdentifier:assistantId:builder:]( v33,  "initWithIdentifier:assistantId:builder:",  v26,  v13,  v41);

  return v38;
}