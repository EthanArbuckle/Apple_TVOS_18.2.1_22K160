BOOL sub_10000447C(void *a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  int v10;
  uint64_t String;
  uint64_t v13;
  PSChannelUpdate *v14;
  _BYTE v16[16];
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      v4 = 0;
      v5 = 0;
      v6 = 0LL;
      while (1)
      {
        v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          v6 = 0LL;
          v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        String = PBReaderReadString(a2);
        v13 = objc_claimAutoreleasedReturnValue(String);
        v14 = (PSChannelUpdate *)a1[1];
        a1[1] = v13;
LABEL_23:

        goto LABEL_25;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_25:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    v14 = objc_alloc_init(&OBJC_CLASS___PSChannelUpdate);
    [a1 addChannelUpdates:v14];
    if (!PBReaderPlaceMark(a2, v16) || (sub_10003C7DC((uint64_t)v14, a2) & 1) == 0)
    {

      return 0LL;
    }

    PBReaderRecallMark(a2, v16);
    goto LABEL_23;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10000512C(void *a1)
{
  v2 = *(void **)(a1[4] + 8LL);
  if (!v2)
  {
    id v3 = objc_msgSend( objc_alloc((Class)CUTWeakLinkClass(@"SDRDiagnosticReporter", @"SymptomDiagnosticReporter")),  "initWithQueue:",  *(void *)(a1[4] + 16));
    uint64_t v4 = a1[4];
    v5 = *(void **)(v4 + 8);
    *(void *)(v4 + 8) = v3;

    BOOL v6 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG);
    if (v6) {
      sub_1000BC4A0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    v2 = *(void **)(a1[4] + 8LL);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue( [v2 signatureWithDomain:@"ApplePushService" type:a1[5] subType:a1[6] detectedProcess:@"apsd" triggerThresholdValues:0]);
  unsigned __int8 v15 = [*(id *)(a1[4] + 8) snapshotWithSignature:v14 duration:0 event:0 payload:&stru_10011DA90 reply:0.0];
  BOOL v16 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG);
  if ((v15 & 1) != 0)
  {
    if (v16) {
      sub_1000BC438(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

  else if (v16)
  {
    sub_1000BC46C(v16, v17, v18, v19, v20, v21, v22, v23);
  }
}

void sub_100005228(id a1, NSDictionary *a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
    sub_1000BC4D4((uint64_t)a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1000052B8(uint64_t a1)
{
  if (qword_10014E710 != -1) {
    dispatch_once(&qword_10014E710, &stru_10011DAF8);
  }
  if (qword_10014E718 != -1) {
    dispatch_once(&qword_10014E718, &stru_10011DB18);
  }
  if (qword_10014E720 != -1) {
    dispatch_once(&qword_10014E720, &stru_10011DB38);
  }
  if (off_10014E768 && off_10014E770 && off_10014E778)
  {
    uint64_t v2 = off_10014E768("com.apple.apsd.connection-failure");
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (unint64_t *)(a1 + 32);
    off_10014E770(v2, v4, 0LL);
    off_10014E778(v2);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000BC578(v3);
    }
    if (notify_post("com.apple.apsd.connection-failure-notification"))
    {
      BOOL v5 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (v5) {
        sub_1000BC544(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[apsd]: posted a connection failure notification",  v13,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000BC600();
  }
}

void sub_10000545C(id a1)
{
  off_10014E768 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_create", @"SymptomReporter");
}

void sub_100005488(id a1)
{
  off_10014E770 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_set_qualifier", @"SymptomReporter");
}

void sub_1000054B4(id a1)
{
  off_10014E778 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_send", @"SymptomReporter");
}

void sub_100005534(uint64_t a1)
{
  if (qword_10014E728 != -1) {
    dispatch_once(&qword_10014E728, &stru_10011DB78);
  }
  if (qword_10014E730 != -1) {
    dispatch_once(&qword_10014E730, &stru_10011DB98);
  }
  if (qword_10014E738 != -1) {
    dispatch_once(&qword_10014E738, &stru_10011DBB8);
  }
  if (off_10014E780 && off_10014E788 && off_10014E790)
  {
    uint64_t v2 = off_10014E780("com.apple.apsd.connection-ok");
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = (unint64_t *)(a1 + 32);
    off_10014E788(v2, v4, 0LL);
    off_10014E790(v2);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000BC6AC(v3);
    }
    if (notify_post("com.apple.apsd.connection-ok-notification"))
    {
      BOOL v5 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (v5) {
        sub_1000BC678(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[apsd]: posted a connection ok notification",  v13,  2u);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000BC734();
  }

void sub_1000056D8(id a1)
{
  off_10014E780 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_create", @"SymptomReporter");
}

void sub_100005704(id a1)
{
  off_10014E788 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_set_qualifier", @"SymptomReporter");
}

void sub_100005730(id a1)
{
  off_10014E790 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_send", @"SymptomReporter");
}

void sub_100005804(uint64_t a1)
{
  if (qword_10014E740 != -1) {
    dispatch_once(&qword_10014E740, &stru_10011DBD8);
  }
  if (qword_10014E748 != -1) {
    dispatch_once(&qword_10014E748, &stru_10011DBF8);
  }
  if (qword_10014E758 != -1) {
    dispatch_once(&qword_10014E758, &stru_10011DC18);
  }
  if (qword_10014E760 != -1) {
    dispatch_once(&qword_10014E760, &stru_10011DC38);
  }
  uint64_t v2 = (uint64_t (*)(const char *))off_10014E798;
  if (off_10014E798 && off_10014E7A0 && off_10014E7A8 && off_10014E750)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = (nw_interface *)nw_interface_create_with_name([v3 UTF8String]);
      nw_interface_type_t type = nw_interface_get_type(v4);
      else {
        uint64_t v6 = qword_100102548[type];
      }

      uint64_t v2 = (uint64_t (*)(const char *))off_10014E798;
    }

    else
    {
      uint64_t v6 = 1000LL;
    }

    uint64_t v7 = v2("com.apple.apsd.public-ip");
    off_10014E7A0(v7, v6, 0LL);
    ((void (*)(uint64_t, void, id, id))off_10014E750)( v7, 0, [*(id *)(a1 + 40) length], objc_msgSend(*(id *)(a1 + 40), "bytes"));
    off_10014E7A8(v7);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG)) {
      sub_1000BC7AC((uint64_t *)(a1 + 32), v6);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000BC838();
  }

void sub_1000059F8(id a1)
{
  off_10014E798 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_create", @"SymptomReporter");
}

void sub_100005A24(id a1)
{
  off_10014E7A0 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_set_qualifier", @"SymptomReporter");
}

void sub_100005A50(id a1)
{
  off_10014E750 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_set_additional_qualifier", @"SymptomReporter");
}

void sub_100005A7C(id a1)
{
  off_10014E7A8 = (_UNKNOWN *)CUTWeakLinkSymbol("symptom_send", @"SymptomReporter");
}

void sub_100005AF8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100005B08( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100005B20( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100005B30( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

__CFString *sub_100005B48(unint64_t a1)
{
  if (a1 >= 3) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UnknownConnectionType %ld",  a1));
  }
  else {
    return off_10011DC80[a1];
  }
}

BOOL sub_100005B98(unint64_t a1)
{
  return a1 < 3;
}

CFStringRef sub_100005BA4(uint64_t a1)
{
  v1 = @"<unknown>";
  if (a1 == 1) {
    v1 = @"Sent";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"NotSent";
  }
}

CFStringRef sub_100005BD0(unint64_t a1)
{
  if (a1 > 2) {
    return @"<unknown>";
  }
  else {
    return off_10011DCC0[a1];
  }
}

CFStringRef sub_100005BF4(unint64_t a1)
{
  if (a1 > 4) {
    return @"<unknown>";
  }
  else {
    return off_10011DC98[a1];
  }
}

LABEL_11:
  return (char)v3;
}

  return (char)v3;
}

  return (char)v3;
}

  return (char)v3;
}

  return (char)v3;
}

  return (char)v3;
}

  return v6;
}

  return (char)v3;
}

  return (char)v4;
}

  return (char)v5;
}

  if (self->_isPackedFormat) {
    uint64_t v20 = -[APNSPackEncoder copyMessage](self->_encoderWrapper, "copyMessage");
  }
  else {
    uint64_t v20 = -[APSProtocolMessage copyMessageData](v18, "copyMessageData");
  }
  uint64_t v21 = v20;
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog protocolParser](&OBJC_CLASS___APSLog, "protocolParser"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    identifier = self->_identifier;
    v24 = (void *)objc_claimAutoreleasedReturnValue([v16 debugDescription]);
    v27 = [v15 length];
    if (v9) {
      v25 = @"YES";
    }
    else {
      v25 = @"NO";
    }
    v26 = objc_msgSend(v21, "length", v27);
    *(_DWORD *)buf = 134219522;
    v31 = identifier;
    v32 = 2112;
    v33 = v24;
    v34 = 2112;
    v35 = v14;
    v36 = 2048;
    v37 = a4;
    v38 = 2048;
    v39 = v28;
    v40 = 2112;
    v41 = v25;
    v42 = 2048;
    v43 = v26;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "P%04llu <out:msg> token: %@ topicHash: %@ messageID: %llu payload.len: %llu isPlistFormat: %@ -- data.len: %llu",  buf,  0x48u);
  }

  return v21;
}
}

  return (char)v4;
}

  isConnected = self->_isConnected;
  if (isConnected != (_DWORD)v7 || v3)
  {
    self->_isConnected = v7;
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog proxy](&OBJC_CLASS___APSLog, "proxy"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = @"connected";
      if (!self->_isConnected) {
        uint64_t v12 = @"disconnected";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v21 = self;
      uint64_t v22 = 2112;
      uint64_t v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%@ broadcasting to client device it's now %@",  buf,  0x16u);
    }

    proxyManager = self->_proxyManager;
    guid = self->_guid;
    unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(-[APSEnvironment name](self->_environment, "name"));
    -[APSIDSProxyManager sendProxyIsConnected:guid:environmentName:]( proxyManager,  "sendProxyIsConnected:guid:environmentName:",  v7,  guid,  v15);
  }

  if (isConnected != (_DWORD)v7) {
    -[APSRateLimiter clear](self->_connectedNotesSentLimiter, "clear");
  }
}
}

  return v4;
}

  uint64_t v18 = (id)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
  if (!v19) {
    goto LABEL_12;
  }
LABEL_5:
  if (v20) {
    goto LABEL_6;
  }
LABEL_13:
  uint64_t v20 = (id)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
LABEL_6:
  if (!v21) {
    uint64_t v21 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
  }
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  &off_10012B560,  @"c",  v16,  @"pG",  v15,  @"e",  v17,  @"eT",  v18,  @"iT",  v19,  @"oT",  v20,  @"nT",  v21,  @"tSal",  0LL));
  -[APSIDSProxyManager sendProxyMessage:](self, "sendProxyMessage:", v22);
}

uint64_t sub_100008890(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100008A90(uint64_t a1)
{
  uint64_t v4 = 0LL;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100008B30;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  v3[5] = a1;
  sub_10009DB24(v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100008B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100008B30(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40))
  {
    uint64_t v3 = result;
    CSDBRecordStoreAddRecord(a2);
    uint64_t result = CSDBRecordSaveStore(a2);
    *(_BYTE *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL) = result;
  }

  return result;
}

void *sub_100008B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t valuePtr = a6;
  pthread_once(&stru_10014D1F0, (void (*)(void))sub_100009964);
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_10014E7B0, 16LL, 0LL);
  uint64_t v12 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + 24) = 0LL;
    *(_DWORD *)(Instance + 16) = 0;
    sub_10009D8AC();
    uint64_t v13 = CSDBRecordCreate(&off_10011DD28);
    if (v13)
    {
      v14 = (const void *)v13;
      CFNumberRef v15 = CFNumberCreate(0LL, kCFNumberSInt64Type, &valuePtr);
      uint64_t v16 = 0LL;
      v24[0] = a2;
      v24[1] = a3;
      v24[2] = a4;
      v24[3] = a5;
      v24[4] = v15;
      do
      {
        CSDBRecordSetProperty(v14, dword_10014E7B8[v16], v24[v16]);
        ++v16;
      }

      while (v16 != 5);
      if (sub_100008A90((uint64_t)v14))
      {
        v12[3] = (int)CSDBRecordGetID(v14);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = v12[3];
          *(_DWORD *)buf = 138412546;
          uint64_t v21 = v12;
          __int16 v22 = 2048;
          uint64_t v23 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - New message record [%@] has ID [%lld].",  buf,  0x16u);
        }
      }

      else
      {
        CFRelease(v12);
        uint64_t v12 = 0LL;
      }

      CFRelease(v14);
      if (v15) {
        CFRelease(v15);
      }
    }

    else
    {
      CFRelease(v12);
      return 0LL;
    }
  }

  return v12;
}

void sub_100008D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    uint64_t v10 = a1;
    __int16 v11 = 2112;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = a3;
    __int16 v15 = 2112;
    uint64_t v16 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APSChannelRecordDeleteMessageForChannelID %@ channelTopic %@ environment %@ tokenName %@",  buf,  0x2Au);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100008E50;
  v8[3] = &unk_10011DDC8;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  v8[7] = a4;
  sub_10009DC94( (uint64_t)@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE channel_id = ? AND channel_topic = ? AND environment = ? AND token_name = ? ORDER BY ROWID ASC",  v8);
}

uint64_t sub_100008E50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_10011DD28, a4, 0LL, 0LL);
  CFIndex Count = CFArrayGetCount(v7);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    for (CFIndex i = 0LL; i != v9; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
      CSDBRecordStoreRemoveRecord(a2, ValueAtIndex);
    }
  }

  if (v7) {
    CFRelease(v7);
  }
  CSDBRecordSaveStore(a2);
  return CSDBRecordStoreInvalidateCachesWithStore(a2);
}

uint64_t sub_100008F1C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100008FBC;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  v3[5] = a1;
  sub_10009DB24(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100008FA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100008FBC(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_10011DD28, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100008FFC(uint64_t a1)
{
  uint64_t v4 = 0LL;
  BOOL v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10000909C;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  v3[5] = a1;
  sub_10009DB80(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100009084( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10000909C(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_10011DD28, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

const void *sub_1000090DC(uint64_t a1, uint64_t a2)
{
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_10014E7B0, 16LL, 0LL);
  if (!Instance) {
    return 0LL;
  }
  BOOL v5 = (const void *)Instance;
  *(void *)(Instance + 16) = 0LL;
  *(void *)(Instance + 24) = a2;
  *(_DWORD *)(Instance + 16) = 0;
  uint64_t v6 = (const void *)sub_100008FFC(a2);
  if (v6)
  {
    uint64_t v7 = v5;
  }

  else
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0LL;
  }

  CFRelease(v6);
  return v7;
}

uint64_t sub_10000915C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = a2;
    *(_WORD *)&buf[22] = 2112;
    uint64_t v12 = a3;
    __int16 v13 = 2112;
    uint64_t v14 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APSChannelRecordCopyChannelForChannelIDAndPushTopic %@ %@ environment %@ tokenName %@",  buf,  0x2Au);
  }

  *(void *)buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x2020000000LL;
  uint64_t v12 = 0LL;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000092B8;
  v10[3] = &unk_10011DDF0;
  v10[6] = a2;
  v10[7] = a3;
  v10[8] = a4;
  v10[4] = buf;
  v10[5] = a1;
  sub_10009DC94( (uint64_t)@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE channel_id = ? AND channel_topic = ? AND environment = ? AND token_name = ? ORDER BY ROWID ASC",  v10);
  uint64_t v8 = *(void *)(*(void *)&buf[8] + 24LL);
  _Block_object_dispose(buf, 8);
  return v8;
}

void sub_1000092A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1000092B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_10011DD28, a4, 0LL, 0LL);
  CFIndex Count = CFArrayGetCount(v7);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    for (CFIndex i = 0LL; i != v9; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, i);
      int ID = CSDBRecordGetID(ValueAtIndex);
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = sub_1000090DC((uint64_t)kCFAllocatorDefault, ID);
    }
  }

  if (v7) {
    CFRelease(v7);
  }
}

CFMutableArrayRef sub_1000093AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0LL, &kCFTypeArrayCallBacks);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100009440;
  v9[3] = &unk_10011DDC8;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = Mutable;
  sub_10009DC94( (uint64_t)@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE channel_topic = ? AND environment = ? AND token_name = ? ORDER BY ROWID ASC",  v9);
  return Mutable;
}

void sub_100009440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_10011DD28, a4, 0LL, 0LL);
  if (v7)
  {
    uint64_t v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      for (CFIndex i = 0LL; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v14 = sub_1000090DC((uint64_t)kCFAllocatorDefault, ID);
        if (v14)
        {
          __int16 v15 = v14;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v14);
          CFRelease(v15);
        }
      }
    }

    CFRelease(v8);
  }

CFMutableArrayRef sub_100009538(uint64_t a1, uint64_t a2)
{
  Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0LL, &kCFTypeArrayCallBacks);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000095C8;
  v7[3] = &unk_10011DE10;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = Mutable;
  sub_10009DC94( (uint64_t)@"SELECT ROWID, channel_id, channel_topic, environment, token_name, checkpoint FROM channel WHERE environment = ? AND token_name = ? ORDER BY ROWID ASC",  v7);
  return Mutable;
}

void sub_1000095C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_10011DD28, a4, 0LL, 0LL);
  if (v7)
  {
    uint64_t v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      for (CFIndex i = 0LL; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v14 = sub_1000090DC((uint64_t)kCFAllocatorDefault, ID);
        if (v14)
        {
          __int16 v15 = v14;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v14);
          CFRelease(v15);
        }
      }
    }

    CFRelease(v8);
  }

CFMutableArrayRef sub_1000096B4()
{
  Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0LL, &kCFTypeArrayCallBacks);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100009730;
  v3[3] = &unk_10011DE30;
  v3[4] = Mutable;
  sub_10009DC94((uint64_t)@"select * from channel", v3);
  return Mutable;
}

void sub_100009730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v5 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_10011DD28, a4, 0LL, 0LL);
  if (v5)
  {
    uint64_t v6 = v5;
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v8 = Count;
      for (CFIndex i = 0LL; i != v8; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v12 = sub_1000090DC((uint64_t)kCFAllocatorDefault, ID);
        if (v12)
        {
          __int16 v13 = v12;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v12);
          CFRelease(v13);
        }
      }
    }

    CFRelease(v6);
  }

void sub_100009800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100009884;
    v6[3] = &unk_10011DE50;
    v6[4] = a1;
    v6[5] = a2;
    v6[6] = a3;
    v6[7] = a4;
    v6[8] = a5;
    v6[9] = a6;
    sub_10009DA68(a1 + 16, v6);
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000BC8D0();
  }

void sub_100009884(uint64_t a1)
{
  uint64_t v2 = sub_100008FFC(*(void *)(*(void *)(a1 + 32) + 24LL));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = CSDBRecordCopyProperty(v2, dword_10014E7B8[0]);
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = CSDBRecordCopyProperty(v3, dword_10014E7BC);
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty(v3, dword_10014E7C0);
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty(v3, dword_10014E7C4);
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty(v3, dword_10014E7C8);
    }
    CFRelease(v3);
  }

uint64_t sub_100009964()
{
  uint64_t v0 = 0LL;
  qword_10014E7B0 = _CFRuntimeRegisterClass(&unk_10011DE70);
  uint64_t v1 = &off_10011DED0;
  do
  {
    uint64_t v2 = *v1;
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed(&off_10011DED0, 5LL, v2);
    dword_10014E7B8[v0++] = result;
  }

  while (v0 != 5);
  return result;
}

uint64_t sub_1000099D0(uint64_t result)
{
  *(void *)(result + 24) = -1LL;
  return result;
}

void sub_1000099DC(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + 24) = -1LL;
  os_unfair_lock_unlock(v2);
}

BOOL sub_100009A10(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_100009A24(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_100009A2C(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0LL, @"<APSChannelRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

CFDataRef *sub_100009AA0(CFDataRef *a1, const UInt8 *a2, CFIndex a3)
{
  *a1 = CFDataCreate(0LL, a2, a3);
  return a1;
}

CFDataRef sub_100009ACC(UInt8 *bytes, CFIndex length)
{
  return CFDataCreate(0LL, bytes, length);
}

CFDataRef *sub_100009ADC(CFDataRef *a1, uint64_t a2)
{
  *a1 = CFDataCreate(0LL, *(const UInt8 **)a2, *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

CFStringRef *sub_100009B14(CFStringRef *a1, const UInt8 *a2)
{
  CFIndex v3 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v4 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v4 = v3;
  }

  *a1 = CFStringCreateWithBytes(0LL, a2, v4, 0x8000100u, 0);
  return a1;
}

CFStringRef sub_100009B64(UInt8 *bytes, CFIndex numBytes)
{
  return CFStringCreateWithBytes(0LL, bytes, numBytes, 0x8000100u, 0);
}

CFStringRef *sub_100009B80(CFStringRef *a1, char *__s)
{
  *a1 = 0LL;
  CFIndex v4 = strlen(__s);
  *a1 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  return a1;
}

CFNumberRef *sub_100009BD0(CFNumberRef *a1, uint64_t a2)
{
  uint64_t valuePtr = a2;
  *a1 = CFNumberCreate(0LL, kCFNumberSInt64Type, &valuePtr);
  return a1;
}

CFNumberRef sub_100009C10(uint64_t a1)
{
  uint64_t valuePtr = a1;
  return CFNumberCreate(0LL, kCFNumberSInt64Type, &valuePtr);
}

CFBooleanRef *sub_100009C3C(CFBooleanRef *result, int a2)
{
  uint64_t v2 = &kCFBooleanTrue;
  if (!a2) {
    uint64_t v2 = &kCFBooleanFalse;
  }
  *uint64_t result = *v2;
  return result;
}

__CFDictionary **sub_100009C60(__CFDictionary **a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFStringRef v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
  {
    while (1)
    {
      int v6 = *((char *)v5 + 39);
      uint64_t v7 = v6 >= 0 ? (const UInt8 *)(v5 + 2) : (const UInt8 *)v5[2];
      CFIndex v8 = v6 >= 0 ? *((unsigned __int8 *)v5 + 39) : (CFIndex)v5[3];
      CFStringRef v9 = CFStringCreateWithBytes(0LL, v7, v8, 0x8000100u, 0);
      CFStringRef v12 = v9;
      if (!v9) {
        break;
      }
      CFIndex v10 = v5[5];
      if (!v10) {
        break;
      }
      CFDictionaryAddValue(Mutable, v9, v10);
      sub_10000A5E8((const void **)&v12);
      CFStringRef v5 = (uint64_t **)*v5;
      if (!v5) {
        goto LABEL_13;
      }
    }

    CFRelease(Mutable);
    sub_10000A5E8((const void **)&v12);
    CFMutableArrayRef Mutable = 0LL;
  }

LABEL_13:
  *a1 = Mutable;
  return a1;
}

      ++v9;
    }

    while (v9 < v8);
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v15 = -[NSMutableArray count](v5, "count");
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = self;
    uint64_t v19 = 2048;
    uint64_t v20 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@: Moving %lu unsent messages to the end of queue",  buf,  0x16u);
  }

  -[NSMutableArray addObjectsFromArray:](self->_queue, "addObjectsFromArray:", v5);
  -[APSOutgoingMessageQueue _queueChanged](self, "_queueChanged");
}

  return v7;
}

    __int16 v22 = 0;
    goto LABEL_14;
  }

  WeakRetained = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v24 = a7;
  sub_100062FF4(v25, v13, WeakRetained);
  sub_100062A54((uint64_t)v25, *v15);
  uint64_t v19 = v26;
  uint64_t v18 = v27;
  uint64_t v20 = [v14 length];
  uint64_t v21 = v19 + v18 + 1;
  __int16 v22 = v21 <= (unint64_t)v20;
  if (v21 > (unint64_t)v20)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = self;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ we don't have entire frame data yet when parsing",  buf,  0xCu);
    }

    goto LABEL_8;
  }

  if (!sub_10000FAC0((uint64_t)self->_decoder, (uint64_t)v25, (uint64_t)&v16[v26], v27))
  {
    sub_100063258((uint64_t)v25);

    goto LABEL_10;
  }

  *a5 = WeakRetained;
  *v24 = v26 + v27 + 1;
LABEL_8:
  sub_100063258((uint64_t)v25);
LABEL_12:

LABEL_14:
  return v22;
}
}

    if (*(_BYTE *)(v3 + 17)) {
      uint64_t result = sub_1000B3C94((void *)v3, a2);
    }
    goto LABEL_15;
  }

  if ((v4 & 0x1C00000000LL) == 0) {
    goto LABEL_15;
  }
  uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&MFi4RootSpki);
  if ((_DWORD)result) {
    goto LABEL_13;
  }
  CFStringRef v5 = *(void *)(a2 + 240) | 0x1C00000000LL;
LABEL_11:
  *(void *)(a2 + 240) = v5;
LABEL_15:
  if (*(_BYTE *)(v3 + 16))
  {
    if (*(_BYTE *)(v3 + 17))
    {
      uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootCASPKI);
      if (!(_DWORD)result
        || (uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG2SPKI), !(_DWORD)result)
        || (uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootG3SPKI), !(_DWORD)result))
      {
        *(void *)(a2 + 240) |= 0x58E30653FFF8uLL;
      }
    }

    if (*(_BYTE *)(v3 + 16) && *(_BYTE *)(v3 + 17))
    {
      uint64_t result = compare_octet_string(a2 + 88, (uint64_t)&TestAppleRootECCSPKI);
      if (!(_DWORD)result) {
        *(void *)(a2 + 240) |= 0x6400000uLL;
      }
    }
  }

  return result;
}

  CFIndex v10 = 0LL;
LABEL_23:
  if (v10 == a2) {
    return 0LL;
  }
  else {
    return 589829LL;
  }
}

  __break(0x5513u);
  return result;
}

void sub_100009D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFMutableArrayRef *sub_100009D54(CFMutableArrayRef *a1, const void ***a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0LL, a2[1] - *a2, &kCFTypeArrayCallBacks);
  for (CFIndex i = *a2; i != a2[1]; ++i)
  {
    if (!*i)
    {
      CFRelease(Mutable);
      CFMutableArrayRef Mutable = 0LL;
      break;
    }

    CFArrayAppendValue(Mutable, *i);
  }

  *a1 = Mutable;
  return a1;
}

void sub_100009DDC(CFDataRef *a1, void *a2, uint64_t a3)
{
  CFDataRef v5 = *a1;
  if (!v5)
  {
    CFIndex v10 = "<<null>>";
    __int16 v11 = a2;
    uint64_t v12 = 8LL;
    goto LABEL_7;
  }

  CFTypeID v7 = CFGetTypeID(v5);
  if (v7 == CFDataGetTypeID())
  {
    BytePtr = CFDataGetBytePtr(*a1);
    CFIndex Length = CFDataGetLength(*a1);
    if (Length <= 0)
    {
      memset(&valuePtr, 0, sizeof(valuePtr));
      sub_100020FD8(a2, (uint64_t)&valuePtr);
    }

    else
    {
      if (!BytePtr)
      {
        sub_10000A62C(a2, (uint64_t)"<<invalid data>>", 16LL);
        return;
      }

      memset(&valuePtr, 0, sizeof(valuePtr));
      sub_10000AA78(&valuePtr, BytePtr, (uint64_t)&BytePtr[Length], Length);
      std::string::size_type size = valuePtr.__r_.__value_.__l.__size_;
      values[0] = (void **)valuePtr.__r_.__value_.__l.__data_;
      sub_100020B24(a2, (unsigned __int8 **)values, &size, a3);
    }

    goto LABEL_22;
  }

  if (v7 != CFStringGetTypeID())
  {
    if (v7 == CFNumberGetTypeID())
    {
      valuePtr.__r_.__value_.__r.__words[0] = 0LL;
      if (CFNumberGetValue(*a1, kCFNumberSInt64Type, &valuePtr))
      {
        std::ostream::operator<<(a2, valuePtr.__r_.__value_.__r.__words[0]);
        return;
      }

      uint64_t v21 = "<<invalid number>>";
      __int16 v22 = a2;
      uint64_t v23 = 18LL;
      goto LABEL_60;
    }

    if (v7 == CFBooleanGetTypeID())
    {
      int Value = CFBooleanGetValue(*a1);
      if (Value) {
        CFIndex v10 = "true";
      }
      else {
        CFIndex v10 = "false";
      }
      if (Value) {
        uint64_t v12 = 4LL;
      }
      else {
        uint64_t v12 = 5LL;
      }
      __int16 v11 = a2;
    }

    else
    {
      if (v7 == CFDictionaryGetTypeID())
      {
        sub_10000A62C(a2, (uint64_t)"{ ", 2LL);
        CFIndex Count = CFDictionaryGetCount(*a1);
        values[0] = 0LL;
        sub_10000AAF0(&valuePtr, Count, values);
        std::string::size_type size = 0LL;
        sub_10000AAF0(values, Count, &size);
        CFDictionaryGetKeysAndValues(*a1, (const void **)valuePtr.__r_.__value_.__l.__data_, (const void **)values[0]);
        if (Count >= 1)
        {
          for (CFIndex i = 0LL; i != Count; ++i)
          {
            uint64_t v19 = *(const void **)(valuePtr.__r_.__value_.__r.__words[0] + 8 * i);
            std::string::size_type size = (std::string::size_type)v19;
            if (v19) {
              CFRetain(v19);
            }
            sub_100009DDC(&size, a2, a3);
            sub_10000A5E8((const void **)&size);
            sub_10000A62C(a2, (uint64_t)": ", 2LL);
            uint64_t v20 = values[0][i];
            std::string::size_type size = (std::string::size_type)v20;
            if (v20) {
              CFRetain(v20);
            }
            sub_100009DDC(&size, a2, a3);
            sub_10000A5E8((const void **)&size);
            if (Count - 1 > i) {
              sub_10000A62C(a2, (uint64_t)", ", 2LL);
            }
          }
        }

        sub_10000A62C(a2, (uint64_t)" }", 2LL);
        if (values[0])
        {
          values[1] = values[0];
          operator delete(values[0]);
        }

LABEL_22:
        __int16 v15 = (void *)valuePtr.__r_.__value_.__r.__words[0];
        if (!valuePtr.__r_.__value_.__r.__words[0]) {
          return;
        }
        valuePtr.__r_.__value_.__l.__size_ = valuePtr.__r_.__value_.__r.__words[0];
        goto LABEL_35;
      }

      if (v7 == CFArrayGetTypeID())
      {
        sub_10000A62C(a2, (uint64_t)"[ ", 2LL);
        CFIndex v24 = CFArrayGetCount(*a1);
        CFIndex v25 = v24 - 1;
        if (v24 >= 1)
        {
          CFIndex v26 = v24;
          for (CFIndex j = 0LL; j != v26; ++j)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*a1, j);
            valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)ValueAtIndex;
            if (ValueAtIndex) {
              CFRetain(ValueAtIndex);
            }
            sub_100009DDC(&valuePtr, a2, a3);
            sub_10000A5E8((const void **)&valuePtr.__r_.__value_.__l.__data_);
            if (v25 > j) {
              sub_10000A62C(a2, (uint64_t)", ", 2LL);
            }
          }
        }

        uint64_t v21 = " ]";
        __int16 v22 = a2;
        uint64_t v23 = 2LL;
LABEL_60:
        sub_10000A62C(v22, (uint64_t)v21, v23);
        return;
      }

      v29 = sub_10000A62C(a2, (uint64_t)"<<unknown type ", 15LL);
      __int16 v11 = (void *)std::ostream::operator<<(v29, v7);
      CFIndex v10 = ">>";
      uint64_t v12 = 2LL;
    }

  JUMPOUT(0x100011100LL);
}
}

    CFStringRef v9 = 0;
    goto LABEL_23;
  }

      __break(0x5519u);
    }
  }

  else if (a2)
  {
    if (a3) {
      *a3 = 0;
    }
    return 1LL;
  }

  return 0LL;
}

LABEL_7:
    sub_10000A62C(v11, (uint64_t)v10, v12);
    return;
  }

  memset(&valuePtr, 0, sizeof(valuePtr));
  if (sub_10000A280((CFStringRef *)a1, &valuePtr))
  {
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_std::string valuePtr = &valuePtr;
    }
    else {
      p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
    }
    if ((valuePtr.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v14 = valuePtr.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v14 = valuePtr.__r_.__value_.__l.__size_;
    }
    sub_10000A62C(a2, (uint64_t)p_valuePtr, v14);
  }

  else
  {
    sub_10000A62C(a2, (uint64_t)"<<invalid string>>", 18LL);
  }

  if ((char)valuePtr.__r_.__value_.__s.__size_ < 0)
  {
    __int16 v15 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_35:
    operator delete(v15);
  }

    largeMessageSize = self->_largeMessageSize;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10005180C;
    v12[3] = &unk_10011F370;
    v12[4] = a3;
    v12[5] = largeMessageSize;
    -[APSConnectionServer _enqueueXPCMessage:wakingClient:highPriority:]( self,  "_enqueueXPCMessage:wakingClient:highPriority:",  v12,  0LL,  0LL);
  }

    messageSize = self->_messageSize;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000519A8;
    v12[3] = &unk_10011F370;
    v12[4] = messageSize;
    v12[5] = a3;
    -[APSConnectionServer _enqueueXPCMessage:wakingClient:highPriority:]( self,  "_enqueueXPCMessage:wakingClient:highPriority:",  v12,  0LL,  0LL);
  }

  return v6;
}

  uint64_t v17 = 0LL;
LABEL_8:
  v28 = v10;
  if (v14) {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v14, v10));
  }
  else {
    uint64_t v18 = 0LL;
  }
  objc_msgSend(v7, "setEnabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:", v15, v16, v17, v18, v28);
  uint64_t v19 = (void *)v15;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 enabledTopics]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 allObjects]);
  APSInsertEnabledTopicsToXPCDictionary(v5, v21);

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v7 ignoredTopics]);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 allObjects]);
  APSInsertIgnoredTopicsToXPCDictionary(v5, v23);

  CFIndex v24 = (void *)objc_claimAutoreleasedReturnValue([v7 opportunisticTopics]);
  CFIndex v25 = (void *)objc_claimAutoreleasedReturnValue([v24 allObjects]);
  APSInsertOpportunisticTopicsToXPCDictionary(v5, v25);

  CFIndex v26 = (void *)objc_claimAutoreleasedReturnValue([v7 nonWakingTopics]);
  v27 = (void *)objc_claimAutoreleasedReturnValue([v26 allObjects]);
  APSInsertNonWakingTopicsToXPCDictionary(v5, v27);
}

      -[APSCourierConnectionManager _adjustConnectionWithInterfacePreference:]( v18,  "_adjustConnectionWithInterfacePreference:",  v19);
      goto LABEL_80;
    case 7:
      CFIndex v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v68 = self;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@: Persistent interface went up",  buf,  0xCu);
      }

      goto LABEL_20;
    case 8:
LABEL_20:
      v27 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager pcPersistentInterfaceManager](self, "pcPersistentInterfaceManager"));
      v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v29 = "inactive";
        if (a5 == 7) {
          v29 = "active";
        }
        v64 = v29;
        v30 = sub_10003CEE4(a7);
        v63 = (void *)objc_claimAutoreleasedReturnValue(v30);
        courierConnection = self->_courierConnection;
        v65 = v12;
        v66 = v14;
        v32 = @"YES";
        if (-[APSCourierConnection hasConnectionEstablishTimerOnInterface:]( courierConnection,  "hasConnectionEstablishTimerOnInterface:",  a7))
        {
          v33 = @"YES";
        }

        else
        {
          v33 = @"NO";
        }

        else {
          v34 = @"NO";
        }
        if (!-[APSNetworkMonitor shouldUseDualMode](self->_networkMonitor, "shouldUseDualMode")) {
          v32 = @"NO";
        }
        v35 = sub_10003CEE4(a7);
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        *(_DWORD *)buf = 138414082;
        v68 = self;
        v69 = 2080;
        *(void *)v70 = v64;
        *(_WORD *)&v70[8] = 2112;
        *(void *)&v70[10] = v63;
        v71 = 2112;
        v72 = courierConnection;
        v73 = 2112;
        v74 = v62;
        v75 = 2112;
        v76 = v34;
        v77 = 2112;
        v78 = v32;
        uint64_t v12 = v65;
        uint64_t v14 = v66;
        v79 = 2112;
        v80 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@: Persistent interface went %s. onInterface: %@ conn %@ connectTimer %@ reachable? %@ shouldUseDualChannel? %@  onInterface: %@",  buf,  0x52u);
      }

      v37 = 0;
      if (a7 || !self->_remainsConnectedWhenWWANSuspends) {
        goto LABEL_57;
      }
      v38 = [v27 isWWANInterfaceUp];
      if (a5 != 8)
      {
        if (v38) {
          -[APSCourierConnectionManager _handleConnectionRecoverFromSuspensionOnInterface:]( self,  "_handleConnectionRecoverFromSuspensionOnInterface:",  0LL);
        }
        goto LABEL_56;
      }

      if ((v38 & 1) != 0 || ![v27 isWWANInterfaceSuspended])
      {
        if (([v27 isWWANInterfaceUp] & 1) == 0
          && ([v27 isWWANInterfaceSuspended] & 1) == 0)
        {
          if (![v27 hasWWANStatusIndicator]
            || (v58 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager pcInterfaceMonitorWWAN](self, "pcInterfaceMonitorWWAN")),
                v59 = [v58 isInterfaceUsable],
                v58,
                !v59))
          {
            v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Cellular interface is not suspended, ignore transition",  buf,  2u);
            }

            goto LABEL_91;
          }

          -[APSCourierConnectionManager _disconnectStreamForInterface:withReason:]( self,  "_disconnectStreamForInterface:withReason:",  0LL,  12LL);
        }

void sub_10000A200( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000A280(CFStringRef *a1, std::string *a2)
{
  CFStringRef v3 = *a1;
  if (!v3) {
    return 0LL;
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFStringGetTypeID()) {
    return 0LL;
  }
  int v6 = *a1;
  unint64_t Length = CFStringGetLength(*a1);
  if (Length > 0x4000) {
    return 0LL;
  }
  CFIndex v10 = Length;
  CFIndex usedBufLen = 0LL;
  std::string::resize(a2, 4 * Length, 0);
  int size = (char)a2->__r_.__value_.__s.__size_;
  if (size >= 0) {
    uint64_t v12 = (UInt8 *)a2;
  }
  else {
    uint64_t v12 = (UInt8 *)a2->__r_.__value_.__r.__words[0];
  }
  if (size >= 0) {
    CFIndex v13 = a2->__r_.__value_.__s.__size_;
  }
  else {
    CFIndex v13 = a2->__r_.__value_.__l.__size_;
  }
  v16.location = 0LL;
  v16.length = v10;
  BOOL v14 = CFStringGetBytes(v6, v16, 0x8000100u, 0, 0, v12, v13, &usedBufLen) == v10;
  BOOL v8 = v14;
  if (v14) {
    std::string::resize(a2, usedBufLen, 0);
  }
  return v8;
}

void *sub_10000A360(void *a1, CFDataRef *a2)
{
  return a1;
}

CFDataRef sub_10000A390(CFPropertyListRef *a1, CFTypeRef *a2)
{
  if (!*a1) {
    return 0LL;
  }
  CFDataRef result = CFPropertyListCreateData(0LL, *a1, kCFPropertyListBinaryFormat_v1_0, 0LL, 0LL);
  if (result)
  {
    CFIndex v4 = result;
    int v6 = result;
    CFRetain(result);
    if (&v6 != a2)
    {
      CFTypeID v5 = v4;
      if (*a2)
      {
        CFRelease(*a2);
        CFTypeID v5 = v6;
      }

      *a2 = v5;
      int v6 = 0LL;
    }

    sub_10000A5E8(&v6);
    CFRelease(v4);
    return (CFDataRef)1;
  }

  return result;
}

void sub_10000A424(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10000A438(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t result = *a1;
  if (result)
  {
    CFTypeID v5 = CFGetTypeID((CFTypeRef)result);
    if (v5 == CFDataGetTypeID()
      && (int v6 = (const __CFData *)*a1, CFDataGetLength(v6) >= 8)
      && *(void *)CFDataGetBytePtr(v6) == 0x30307473696C7062LL)
    {
      uint64_t result = (uint64_t)CFPropertyListCreateWithData(0LL, v6, 0LL, 0LL, 0LL);
      if (result)
      {
        CFTypeID v7 = (const void *)result;
        CFStringRef v9 = (const void *)result;
        CFRetain((CFTypeRef)result);
        if (&v9 != a2)
        {
          BOOL v8 = v7;
          if (*a2)
          {
            CFRelease(*a2);
            BOOL v8 = v9;
          }

          *a2 = v8;
          CFStringRef v9 = 0LL;
        }

        sub_10000A5E8(&v9);
        CFRelease(v7);
        return 1LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void sub_10000A528(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

const void **sub_10000A53C@<X0>(CFPropertyListRef *a1@<X0>, void *a2@<X8>)
{
  CFDataRef theData = 0LL;
  if ((sub_10000A390(a1, (CFTypeRef *)&theData) & 1) == 0
    || ((CFStringRef v3 = theData, BytePtr = CFDataGetBytePtr(theData), Length = CFDataGetLength(v3), Length >= 1)
      ? (BOOL v6 = BytePtr == 0LL)
      : (BOOL v6 = 1),
        v6))
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
  }

  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    sub_10000AA78(a2, BytePtr, (uint64_t)&BytePtr[Length], Length);
  }

  return sub_10000A5E8((const void **)&theData);
}

void sub_10000A5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

const void **sub_10000A5E8(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0LL;
  }

  return a1;
}

void sub_10000A61C(void *a1)
{
}

void *sub_10000A62C(void *a1, uint64_t a2, uint64_t a3)
{
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24LL);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
      CFIndex v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32LL);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }

    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_10000A790(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear( (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)),  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + 32) | 5);
    }
  }

  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_10000A734( void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

void sub_10000A77C(_Unwind_Exception *a1)
{
}

uint64_t sub_10000A790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0LL;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (v12 >= 1)
    {
      sub_10000A8CC(__p, v12, __c);
      CFIndex v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96LL))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0LL;
      }
    }

    uint64_t v15 = a4 - a3;
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_10000A8B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000A8CC(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000A974();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000LL;
    *__b = v6;
  }

  else
  {
    *((_BYTE *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }

  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_10000A974()
{
}

void sub_10000A988(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10000A9D8(exception, a1);
}

void sub_10000A9C4(_Unwind_Exception *a1)
{
}

std::logic_error *sub_10000A9D8(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_10000A9FC()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

char *sub_10000AA24(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000LL) != 0) {
    sub_10000AA64();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_10000AA64()
{
}

void *sub_10000AA78(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10000AA24(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10000AAD4(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void *sub_10000AAF0(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_10000AB70(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8LL;
    }

    while (v8);
    a1[1] = v7;
  }

  return a1;
}

void sub_10000AB54(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_10000AB70(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000AA64();
  }
  uint64_t result = (char *)sub_10000ABB0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_10000ABB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_10000A9FC();
  }
  return operator new(8 * a2);
}

void sub_10000AC58(uint64_t a1, uint64_t a2)
{
  id v3 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), a2), "_getMultiUserMode");
  CFTypeID v5 = -[APSMultiUserMode initWithIsMultiUserMode:loggedInUser:]( [APSMultiUserMode alloc],  "initWithIsMultiUserMode:loggedInUser:",  v3,  objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v4), "_getIsCurrentlyLoggedIn"));
  uint64_t v6 = (void *)qword_10014E7D8;
  qword_10014E7D8 = (uint64_t)v5;
}

void *sub_10000AD48(void *result)
{
  *uint64_t result = 0LL;
  result[1] = 0LL;
  result[2] = 0LL;
  return result;
}

void *sub_10000AD54(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  result[2] = 0LL;
  return result;
}

BOOL sub_10000AD60(void *a1, _BYTE *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 + 1 <= v2) {
    *a2 = *(_BYTE *)(*a1 + v3);
  }
  return v3 + 1 <= v2;
}

BOOL sub_10000AD88(uint64_t *a1, _BYTE *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 1;
  if (v3 + 1 <= v2)
  {
    uint64_t v5 = *a1;
    a1[2] = v4;
    *a2 = *(_BYTE *)(v5 + v3);
  }

  return v4 <= v2;
}

BOOL sub_10000ADB4(void *a1, _WORD *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 2;
  if (v3 + 2 <= v2)
  {
    *a2 = bswap32(*(unsigned __int16 *)(*a1 + v3)) >> 16;
    a1[2] = v4;
  }

  return v4 <= v2;
}

BOOL sub_10000ADE8(void *a1, _DWORD *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 + 4;
  if (v3 + 4 <= v2)
  {
    *a2 = bswap32(*(_DWORD *)(*a1 + v3));
    a1[2] = v4;
  }

  return v4 <= v2;
}

BOOL sub_10000AE18(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16) + a2;
  if (v3 <= v2) {
    *(void *)(a1 + 16) = v3;
  }
  return v3 <= v2;
}

LABEL_38:
    }

    v31 = [v29 countByEnumeratingWithState:&v57 objects:v62 count:16];
  }

  while (v31);
LABEL_40:

  if (result) {
    CFRelease(result);
  }
  CFRelease(cf);

  return v28;
}

void sub_10000DDFC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

uint64_t sub_10000DE18(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v4;
  sub_1000204C4((void *)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void *)a1 = off_10011DFD8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return a1;
}

void sub_10000DE88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10000DEB0(uint64_t a1)
{
  *(void *)a1 = off_10011DFD8;
  *(_DWORD *)(*(void *)(a1 + 16) + 4LL) -= *(_DWORD *)(a1 + 64);
  sub_10000E114((void *)a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8), a1);
  sub_10000E338((void *)(a1 + 24));
  return sub_1000204E0((void *)a1);
}

void sub_10000DF18(uint64_t a1)
{
  uint64_t v1 = sub_10000DEB0(a1);
  operator delete(v1);
}

unint64_t sub_10000DF2C(void *a1, unint64_t a2)
{
  if (a1[8] <= a2) {
    return 0LL;
  }
  else {
    return *(void *)(a1[4] + 8 * ((a1[7] + a2) / 0xAA)) + 24 * ((a1[7] + a2) % 0xAA);
  }
}

uint64_t sub_10000DF74(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

double sub_10000DF7C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = sub_10000DF84(a1 + 24, a2).u64[0];
  return result;
}

int64x2_t sub_10000DF84(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10000E4C8((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }

  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  unint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 == *v6) {
    uint64_t v8 = *(v6 - 1) + 4080LL;
  }
  *(void *)(v8 - 24) = 0LL;
  *(void *)(v8 - 16) = 0LL;
  int v9 = (void *)(v8 - 24);
  v9[2] = 0LL;
  sub_10000EB24(v9, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1001025B0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

BOOL sub_10000E024(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    unint64_t v3 = a1 + 3;
    sub_10000EB9C( a2,  (__n128 *)(*(void *)(a1[4] + 8 * ((v2 + a1[7] - 1) / 0xAAuLL)) + 24 * ((v2 + a1[7] - 1) % 0xAAuLL)));
    sub_10000E098(v3);
  }

  return v2 != 0;
}

uint64_t sub_10000E098(void *a1)
{
  uint64_t v2 = a1[5] - 1LL;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = *(void *)(a1[1] + 8 * (v3 / 0xAA));
  unint64_t v5 = v3 % 0xAA;
  uint64_t v6 = *(void **)(v4 + 24 * v5);
  if (v6)
  {
    *(void *)(v4 + 24 * v5 + _Block_object_dispose(va, 8) = v6;
    operator delete(v6);
    uint64_t v2 = a1[5] - 1LL;
  }

  a1[5] = v2;
  return sub_10000EBEC(a1, 1);
}

void sub_10000E114(void *a1)
{
  uint64_t v2 = (void **)a1[4];
  unint64_t v3 = (void **)a1[5];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 8;
    unint64_t v3 = (void **)a1[4];
  }

  else
  {
    uint64_t v4 = a1 + 8;
    unint64_t v5 = a1[7];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[8] + v5) / 0xAA] + 24 * ((a1[8] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        CFIndex v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + _Block_object_dispose(va, 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 24LL;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[4];
      unint64_t v3 = (void **)a1[5];
    }
  }

  *uint64_t v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v13 = a1[5];
      uint64_t v2 = (void **)(a1[4] + 8LL);
      a1[4] = v2;
      unint64_t v12 = v13 - (void)v2;
    }

    while (v12 > 0x10);
  }

  if (v12 >> 3 == 1)
  {
    uint64_t v14 = 85LL;
  }

  else
  {
    if (v12 >> 3 != 2) {
      return;
    }
    uint64_t v14 = 170LL;
  }

  a1[7] = v14;
}

uint64_t sub_10000E238(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[7];
  uint64_t v5 = a1[4];
  uint64_t v6 = (char ***)(v5 + 8 * (v4 / 0xAA));
  if (a1[5] == v5)
  {
    unint64_t v7 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = a1[8];
    unint64_t v8 = a1 + 8;
    unint64_t v11 = (void *)(v5 + 8 * ((v13 + v4) / 0xAA));
  }

  else
  {
    unint64_t v7 = (char **)(*(void *)(v5 + 8 * (v4 / 0xAA)) + 24 * (v4 % 0xAA));
    uint64_t v9 = a1[8];
    unint64_t v8 = a1 + 8;
    unint64_t v10 = v9 + v4;
    unint64_t v11 = (void *)(v5 + 8 * (v10 / 0xAA));
    uint64_t v12 = *v11 + 24 * (v10 % 0xAA);
  }

  sub_10000E2E8((uint64_t *)a2, *(__n128 **)(a2 + 8), v6, v7, v11, v12);
  return *v8;
}

__n128 *sub_10000E2E8(uint64_t *a1, __n128 *a2, char ***a3, char **a4, void *a5, uint64_t a6)
{
  else {
    uint64_t v6 = 170 * ((char ***)a5 - a3) - 0x5555555555555555LL * ((a6 - *a5) >> 3) + 0x5555555555555555LL * (a4 - *a3);
  }
  return sub_10000ECB4(a1, a2, a3, a4, (int)a5, a6, v6);
}

uint64_t sub_10000E338(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    unint64_t v3 = (void **)a1[1];
  }

  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(void **)v8;
        if (*(void *)v8)
        {
          *(void *)(v8 + _Block_object_dispose(va, 8) = v10;
          operator delete(v10);
          unint64_t v7 = (unint64_t)*v6;
        }

        v8 += 24LL;
        if (v8 - v7 == 4080)
        {
          unint64_t v11 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v11;
          unint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      unint64_t v3 = (void **)a1[2];
    }
  }

  *unint64_t v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8LL);
      a1[1] = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 85LL;
  }

  else
  {
    if (v13 != 2) {
      goto LABEL_18;
    }
    uint64_t v14 = 170LL;
  }

  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v15 = *v2++;
    operator delete(v15);
  }

  return sub_10000E47C((uint64_t)a1);
}

uint64_t sub_10000E47C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_10000E4C8(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1LL;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      v46 = a1 + 3;
      __p = sub_10000ABB0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFF0uLL);
      sub_10000EA10(&__p, &v41);
      unint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }

      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1LL;
              }
              else {
                unint64_t v23 = (v14 - (_BYTE *)__p) >> 2;
              }
              CFIndex v24 = (char *)sub_10000ABB0((uint64_t)v46, v23);
              CFIndex v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8LL)];
                uint64_t v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)v29 = v30;
                  v29 += 8;
                  v28 -= 8LL;
                }

                while (v28);
              }

              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }

            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }

              __int16 v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }

          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }

        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }

      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85LL;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      }
      if (v36) {
        operator delete(v36);
      }
    }

    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFF0uLL);
        sub_10000E8FC(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }

      else
      {
        __p = operator new(0xFF0uLL);
      }

      sub_10000E7E0((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8) {
        uint64_t v35 = 85LL;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }

  else
  {
    a1[4] = v6 + 170;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_10000E7E0((uint64_t)a1, &__p);
  }

void sub_10000E794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10000E7E0(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(_BYTE **)(a1 + 24);
    unint64_t v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1LL;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_10000ABB0(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v16 = *(uint64_t **)(a1 + 8);
      BOOL v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        BOOL v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8LL;
        }

        while (v19);
      }

      __int16 v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }

    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }

      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }

  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }

  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8LL;
}

void sub_10000E8FC(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_10000ABB0(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      __int16 v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v24 = 8 * (v23 >> 3);
        uint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)uint64_t v25 = v26;
          v25 += 8;
          v24 -= 8LL;
        }

        while (v24);
      }

      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }

      BOOL v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }

  *(void *)uint64_t v6 = *a2;
  a1[2] += 8LL;
}

void sub_10000EA10(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      BOOL v17 = (char *)sub_10000ABB0(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8LL;
        }

        while (v22);
      }

      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }

    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }

      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }

  *(void *)uint64_t v4 = *a2;
  a1[2] += 8LL;
}

void *sub_10000EB24(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    int64x2_t result = sub_10000AA24(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      int64x2_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_10000EB80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

__n128 sub_10000EB9C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0LL;
    *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
  }

  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0LL;
  a2->n128_u64[1] = 0LL;
  a2[1].n128_u64[0] = 0LL;
  return result;
}

uint64_t sub_10000EBEC(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8LL;
  }

  return v7 ^ 1u;
}

void sub_10000EC60(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24LL;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
}

__n128 *sub_10000ECB4(uint64_t *a1, __n128 *a2, char ***a3, char **a4, int a5, uint64_t a6, uint64_t a7)
{
  int v7 = a2;
  if (a7 >= 1)
  {
    uint64_t v13 = (uint64_t)(a1 + 2);
    uint64_t v12 = a1[2];
    unint64_t v14 = a1[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3)) >= a7)
    {
      uint64_t v27 = a3;
      uint64_t v28 = a4;
      sub_10000F074(&v27, a7);
      uint64_t v24 = a1[1] - (void)v7;
      uint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
      if (v25 >= a7
        || (uint64_t v27 = a3,
            uint64_t v28 = a4,
            sub_10000F074(&v27, v25),
            a1[1] = (uint64_t)sub_10000F110(v13, v27, (uint64_t)v28, a5, a6, (void *)a1[1]),
            v24 >= 1))
      {
        sub_10000EEC8((uint64_t)a1, v7, v14, (uint64_t)v7 + 24 * a7);
        uint64_t v32 = v7;
        sub_10000F2B0(a3, a4, v27, v28, (char ***)&v32);
      }
    }

    else
    {
      uint64_t v15 = *a1;
      unint64_t v16 = a7 - 0x5555555555555555LL * ((uint64_t)(v14 - *a1) >> 3);
      if (v16 > 0xAAAAAAAAAAAAAAALL) {
        sub_10000AA64();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v15) >> 3);
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v15) >> 3);
      uint64_t v19 = 2 * v18;
      if (2 * v18 <= v16) {
        uint64_t v19 = v16;
      }
      if (v18 >= 0x555555555555555LL) {
        unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v20 = v19;
      }
      v31 = a1 + 2;
      if (v20) {
        uint64_t v21 = (char ***)sub_10000F4CC((uint64_t)(a1 + 2), v20);
      }
      else {
        uint64_t v21 = 0LL;
      }
      uint64_t v27 = v21;
      uint64_t v28 = (char **)&v21[3 * v17];
      v29 = v28;
      uint64_t v30 = &v21[3 * v20];
      sub_10000EF2C(&v27, a3, (uint64_t)a4, a7);
      int v7 = (__n128 *)sub_10000EFC4(a1, &v27, v7);
      sub_10000F6B4((uint64_t)&v27);
    }
  }

  return v7;
}

void sub_10000EEA8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + _Block_object_dispose(va, 8) = v2;
  _Unwind_Resume(exception_object);
}

__n128 *sub_10000EEC8(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (__n128 *)((char *)a2 + v6 - a4);
  size_t v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    size_t v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0LL;
      v8->n128_u64[1] = 0LL;
      v8[1].n128_u64[0] = 0LL;
      *size_t v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0LL;
      v9->n128_u64[1] = 0LL;
      v9[1].n128_u64[0] = 0LL;
      size_t v8 = (__n128 *)((char *)v8 + 24);
      uint64_t v9 = (__n128 *)((char *)v9 + 24);
    }

    while ((unint64_t)v9 < a3);
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
  return sub_10000F254(a2, v7, v6);
}

void *sub_10000EF2C(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = result;
  unint64_t v5 = (void *)result[2];
  if (a4)
  {
    size_t v8 = &v5[3 * a4];
    uint64_t v9 = 24 * a4;
    do
    {
      void *v5 = 0LL;
      v5[1] = 0LL;
      v5[2] = 0LL;
      __n128 result = sub_10000EB24(v5, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
      a3 += 24LL;
      if (a3 - *a2 == 4080)
      {
        uint64_t v10 = a2[1];
        ++a2;
        a3 = v10;
      }

      v5 += 3;
      v9 -= 24LL;
    }

    while (v9);
    unint64_t v5 = v8;
  }

  v4[2] = v5;
  return result;
}

void sub_10000EFBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_10000EFC4(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_10000F510((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_10000F5B0(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_10000F074(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 - 0x5555555555555555LL * ((uint64_t)(result[1] - *(void *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 169 - v3;
      uint64_t v6 = &v2[-(v5 / 0xAA)];
      *__n128 result = v6;
      unint64_t v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }

    else
    {
      *__n128 result = &v2[v3 / 0xAA];
      unint64_t v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }

    result[1] = v4;
  }

  return result;
}

void *sub_10000F110(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, void *a6)
{
  uint64_t v6 = a6;
  unint64_t v14 = a6;
  uint64_t v15 = a6;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 != a5)
  {
    uint64_t v8 = a3;
    do
    {
      *uint64_t v6 = 0LL;
      v6[1] = 0LL;
      v6[2] = 0LL;
      sub_10000EB24(v6, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
      v8 += 24LL;
      if (v8 - *a2 == 4080)
      {
        uint64_t v10 = a2[1];
        ++a2;
        uint64_t v8 = v10;
      }

      uint64_t v6 = v15 + 3;
      v15 += 3;
    }

    while (v8 != a5);
  }

  char v13 = 1;
  sub_10000F1D4((uint64_t)v12);
  return v6;
}

void sub_10000F1C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10000F1D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10000F208(a1);
  }
  return a1;
}

void sub_10000F208(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 24);
      v3 -= 24LL;
      unint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }

      uint64_t v1 = v3;
    }

    while (v3 != v2);
  }

__n128 *sub_10000F254(__n128 *a1, __n128 *a2, uint64_t a3)
{
  if (a2 != a1)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24LL;
      sub_10000EB9C(a3, v6);
    }

    while (v6 != a1);
  }

  return a2;
}

char **sub_10000F2B0(char ***a1, char **a2, char ***a3, char **a4, char ***a5)
{
  uint64_t v7 = *a5;
  if (a1 == a3)
  {
    unint64_t v14 = &v17;
  }

  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = *a1 + 510;
    for (CFIndex i = &v18; ; CFIndex i = &v19)
    {
      sub_10000F358((int)i, a2, v10, v7);
      uint64_t v7 = v12;
      *a5 = v12;
      if (v9 == a3) {
        break;
      }
      char v13 = *v9++;
      a2 = v13;
      uint64_t v10 = v13 + 510;
    }

    a2 = *a3;
    unint64_t v14 = &v20;
  }

  __n128 result = sub_10000F358((int)v14, a2, a4, v7);
  *a5 = v16;
  return result;
}

char **sub_10000F358(int a1, char **a2, char **a3, char **a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4) {
        sub_10000F3C0(a4, *v5, v5[1], v5[1] - *v5);
      }
      v5 += 3;
      a4 += 3;
    }

    while (v5 != a3);
    return a3;
  }

  return v5;
}

void *sub_10000F3C0(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0LL;
      *uint64_t v7 = 0LL;
      v7[1] = 0LL;
      v7[2] = 0LL;
    }

    if ((a4 & 0x8000000000000000LL) != 0) {
      sub_10000AA64();
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    __n128 result = sub_10000AA24(v7, v11);
    uint64_t v9 = (char *)v7[1];
    goto LABEL_17;
  }

  uint64_t v12 = (_BYTE *)result[1];
  size_t v13 = v12 - v9;
  if (v12 - v9 >= a4)
  {
LABEL_17:
    size_t v16 = a3 - __src;
    if (v16) {
      __n128 result = memmove(v9, __src, v16);
    }
    uint64_t v15 = &v9[v16];
    goto LABEL_20;
  }

  unint64_t v14 = &__src[v13];
  if (v12 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v13);
    uint64_t v9 = (char *)v7[1];
  }

  if (a3 != v14) {
    __n128 result = memmove(v9, v14, a3 - v14);
  }
  uint64_t v15 = &v9[a3 - v14];
LABEL_20:
  v7[1] = v15;
  return result;
}

void *sub_10000F4CC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_10000A9FC();
  }
  return operator new(24 * a2);
}

uint64_t sub_10000F510(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&__int128 v14 = a6;
  *((void *)&v14 + 1) = a7;
  __int128 v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }

  else
  {
    do
    {
      *(void *)(v7 - 24) = 0LL;
      *(void *)(v7 - 16) = 0LL;
      *(void *)(v7 - _Block_object_dispose(va, 8) = 0LL;
      __int128 v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - _Block_object_dispose(va, 8) = a3[2];
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      uint64_t v7 = *((void *)&v14 + 1) - 24LL;
      *((void *)&v14 + 1) -= 24LL;
    }

    while (a3 != a5);
    uint64_t v9 = v14;
  }

  char v12 = 1;
  sub_10000F63C((uint64_t)v11);
  return v9;
}

void *sub_10000F5B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v9 = a4;
  __int128 v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = 0LL;
      v4[1] = 0LL;
      v4[2] = 0LL;
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0LL;
      *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
      *(void *)(a2 + 16) = 0LL;
      v4 += 3;
      a2 += 24LL;
    }

    while (a2 != a3);
    uint64_t v9 = v4;
  }

  char v7 = 1;
  sub_10000F1D4((uint64_t)v6);
  return v4;
}

uint64_t sub_10000F63C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24)) {
    sub_10000F670(a1);
  }
  return a1;
}

void sub_10000F670(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8LL);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8LL);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + _Block_object_dispose(va, 8) = v3;
      operator delete(v3);
    }

    v1 += 24LL;
  }

uint64_t sub_10000F6B4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10000F6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    unint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 24LL;
    }
  }

void *sub_10000F740(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_10000F78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8 = sub_100011D6C((void *)a1);
  sub_100011EFC(v8 + 9, a2);
  *(void *)(a1 + 144) = 0LL;
  *(void *)(a1 + 152) = 0LL;
  *(void *)(a1 + 160) = 0LL;
  *(void *)(a1 + 16_Block_object_dispose(va, 8) = a3;
  *(void *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  return a1;
}

void sub_10000F7E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10000F804(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void *a5)
{
  if (*(_DWORD *)(a1 + 184)) {
    return 0LL;
  }
  sub_10000AD54(v14, a2, a3);
  unint64_t v13 = 0LL;
  int v9 = sub_10000F93C(v14, 8, &v13);
  if (v9 == 1) {
    return 0LL;
  }
  if (v9 == 2)
  {
    sub_100012960(&__str, "invalid frame size");
    sub_10000F998(a1, 8, &__str);
    if ((char)__str.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v10 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_11:
      operator delete(v10);
    }
  }

  else
  {
    if (v13 <= *(void *)(a1 + 168))
    {
      *a4 = v13;
      *a5 = v14[2];
      return 1LL;
    }

    sub_100012960(&__p, "frame is too large");
    sub_10000F998(a1, 2, &__p);
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
  }

  return 0LL;
}

void sub_10000F8F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000F92C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 184) != 0;
}

uint64_t sub_10000F93C(uint64_t *a1, char a2, void *a3)
{
  if (sub_10000AD88(a1, &v7)) {
    return sub_100010F08(a1, v7, a2, a3);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_10000F998(uint64_t result, int a2, std::string *__str)
{
  if (!*(_DWORD *)(result + 184))
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 184) = a2;
    uint64_t v4 = result + 192;
    std::string::operator=((std::string *)(result + 192), __str);
    if (qword_10014ED10)
    {
      v12.__locale_ = *(std::locale::__imp **)(v3 + 216);
      return (*(uint64_t (**)(uint64_t, uint64_t, std::locale *))(*(void *)qword_10014ED10 + 48LL))( qword_10014ED10,  v3,  &v12);
    }

    else
    {
      unint64_t v5 = sub_10000A62C(&std::cerr, (uint64_t)"Decoder error: ", 15LL);
      int v6 = *(char *)(v3 + 215);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)(v3 + 192);
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v3 + 215);
      }
      else {
        uint64_t v8 = *(void *)(v3 + 200);
      }
      int v9 = sub_10000A62C(v5, v7, v8);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
      uint64_t v10 = std::locale::use_facet(&v12, &std::ctype<char>::id);
      uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
      std::locale::~locale(&v12);
      std::ostream::put(v9, v11);
      return std::ostream::flush(v9);
    }
  }

  return result;
}

BOOL sub_10000FAC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (*(_DWORD *)(a1 + 184)) {
    return 0LL;
  }
  sub_10000AD54(&v32, a3, a4);
  unint64_t v9 = 0LL;
  while (1)
  {
    BOOL v4 = v33 == v34;
    if (v33 == v34) {
      break;
    }
    if (!sub_10000FD78(a1, &v32, &v31)) {
      return v4;
    }
    std::string __p = 0LL;
    v29 = 0LL;
    uint64_t v30 = 0LL;
    if (v29 - (_BYTE *)__p == 1)
    {
      char v10 = *(_BYTE *)__p;
      uint64_t v23 = &off_10011E218;
      uint64_t v24 = a2;
      char v25 = v10;
      unint64_t v26 = 0LL;
      sub_1000102C8(a1, (uint64_t)&v32, v31);
      if ((v11 & 1) != 0)
      {
        if (v26 <= *(void *)(a1 + 176))
        {
          v9 += v26 + 3;
          if (v9 <= *(void *)(a1 + 168))
          {
            int v14 = 0;
            goto LABEL_21;
          }

          sub_100012960(&v21, "unpacked frame is too large");
          sub_10000F998(a1, 2, &v21);
          if ((char)v21.__r_.__value_.__s.__size_ < 0)
          {
            p_str = &v21;
LABEL_18:
            unint64_t v13 = (void *)p_str->__r_.__value_.__r.__words[0];
LABEL_19:
            operator delete(v13);
          }
        }

        else
        {
          sub_100012960(&__str, "unpacked attribute is too large");
          sub_10000F998(a1, 1, &__str);
          if ((char)__str.__r_.__value_.__s.__size_ < 0)
          {
            p_str = &__str;
            goto LABEL_18;
          }
        }
      }
    }

    else
    {
      sub_100012960(&v27, "top-level key is longer than 1 byte");
      sub_10000F998(a1, 3, &v27);
      if ((char)v27.__r_.__value_.__s.__size_ < 0)
      {
        unint64_t v13 = (void *)v27.__r_.__value_.__r.__words[0];
        goto LABEL_19;
      }
    }

LABEL_20:
    int v14 = 1;
LABEL_21:
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }

    if (v14) {
      return v4;
    }
  }

  unint64_t v15 = v9 + 5;
  uint64_t v16 = 2LL;
  uint64_t v17 = 3LL;
  uint64_t v18 = 4LL;
  if (a4 >= 0x40FE) {
    uint64_t v18 = 5LL;
  }
  if (a4 >= 0x17E) {
    uint64_t v17 = v18;
  }
  if (a4 >= 0xFF) {
    uint64_t v16 = v17;
  }
  unint64_t v19 = v16 + a4;
  unint64_t v20 = *(void *)(a1 + 152) + v15;
  ++*(void *)(a1 + 144);
  *(void *)(a1 + 152) = v20;
  *(void *)(a1 + 160) += v19;
  ++qword_10014ECC0;
  *(void *)algn_10014ECC8 += v15;
  qword_10014ECD0 += v19;
  return v4;
}

  return 0LL;
}
}

  return v8;
}

void sub_10000FD18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *a32, uint64_t a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10000FD78(uint64_t a1, uint64_t *a2, _BYTE *a3)
{
  BOOL v4 = sub_10000AD88(a2, a3);
  if (!v4)
  {
    sub_100012960(&__p, "read overflow while reading attribute metadata");
    sub_10000F998(a1, 11, &__p);
  }

  return v4;
}

void sub_10000FDE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000FE00(void *a1, uint64_t *a2, unsigned int a3, uint64_t a4, int a5)
{
  int v8 = (a3 >> 4) & 3;
  if ((v8 - 2) < 2)
  {
    if (a5)
    {
      std::to_string(&v37, a3 & 0x1F);
      unint64_t v9 = std::string::insert(&v37, 0LL, "KEY[");
      __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__l.__cap_ = v9->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0LL;
      v9->__r_.__value_.__l.__cap_ = 0LL;
      v9->__r_.__value_.__r.__words[0] = 0LL;
      char v11 = std::string::append(&v38, "]");
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      int64_t cap = v11->__r_.__value_.__l.__cap_;
      __int128 v44 = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        unint64_t v13 = (char *)&v44;
      }
      else {
        unint64_t v13 = (char *)v44;
      }
      if (cap >= 0) {
        uint64_t v14 = HIBYTE(cap);
      }
      else {
        uint64_t v14 = *((void *)&v44 + 1);
      }
      sub_100012CC8((char **)a4, *(char **)(a4 + 8), v13, &v13[v14], v14);
      if ((SHIBYTE(cap) & 0x80000000) == 0) {
        return 1LL;
      }
      unint64_t v15 = (void *)v44;
      goto LABEL_22;
    }

    uint64_t v18 = (char **)sub_10000DF2C(a1, a3 & 0x1F);
    if (v18)
    {
      return 1LL;
    }

    sub_100012960(&v39, "key not found");
    sub_10000F998((uint64_t)a1, 4, &v39);
    if ((char)v39.__r_.__value_.__s.__size_ < 0)
    {
      char v25 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_37:
      operator delete(v25);
    }

    return 0LL;
  }

  if (v8 == 1)
  {
    if (sub_100010F08(a2, a3, 4, &v38))
    {
      sub_100012960(&__str, "read overflow while reading key length");
      sub_10000F998((uint64_t)a1, 11, &__str);
      p_str = &__str;
    }

    else
    {
      std::string::size_type v19 = v38.__r_.__value_.__r.__words[0] + 1;
      if (sub_100016B60(v38.__r_.__value_.__r.__words[0] + 1))
      {
        uint64_t v20 = a2[2];
        if (a2[1] - v20 >= v19)
        {
          if (a5)
          {
            uint64_t v33 = (const void *)(*a2 + v20);
            int64_t cap = 0LL;
            __int128 v44 = 0uLL;
            sub_10000AA78(&v44, v33, (uint64_t)v33 + v19, v19);
            sub_100010D88((char **)a4, (char **)&v44);
            if ((void)v44)
            {
              *((void *)&v44 + 1) = v44;
              operator delete((void *)v44);
            }
          }

          else
          {
            sub_100012F38(a4, *(char **)(a4 + 8), (char *)(*a2 + v20), (char *)(*a2 + v20 + v19), v19);
            if ((sub_100010FC0((uint64_t)a1, a4) & 1) == 0)
            {
              sub_100012960(&v40, "key indexing failed");
              sub_10000F998((uint64_t)a1, 5, &v40);
              p_str = &v40;
              goto LABEL_36;
            }
          }

          sub_10000AE18((uint64_t)a2, v19);
          return 1LL;
        }

        sub_100012960(&v41, "read overflow while reading key");
        sub_10000F998((uint64_t)a1, 11, &v41);
        p_str = &v41;
      }

      else
      {
        sub_100012960(&v42, "key length is invalid");
        sub_10000F998((uint64_t)a1, 3, &v42);
        p_str = &v42;
      }
    }

LABEL_36:
    char v25 = (void *)p_str->__r_.__value_.__r.__words[0];
    goto LABEL_37;
  }

  if (!a5)
  {
    char v21 = a3 & 0xF;
    uint64_t v23 = *(char **)(a4 + 8);
    unint64_t v22 = *(void *)(a4 + 16);
    if ((unint64_t)v23 >= v22)
    {
      std::string v27 = *(char **)a4;
      uint64_t v28 = &v23[-*(void *)a4];
      unint64_t v29 = (unint64_t)(v28 + 1);
      unint64_t v30 = v22 - (void)v27;
      if (2 * v30 > v29) {
        unint64_t v29 = 2 * v30;
      }
      if (v30 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v31 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v31 = v29;
      }
      if (v31) {
        uint64_t v32 = (char *)operator new(v31);
      }
      else {
        uint64_t v32 = 0LL;
      }
      uint64_t v34 = &v32[v31];
      v28[(void)v32] = v21;
      uint64_t v24 = (uint64_t)&v28[(void)v32 + 1];
      if (v23 == v27)
      {
        uint64_t v32 = &v28[(void)v32];
      }

      else
      {
        uint64_t v35 = &v23[~(unint64_t)v27];
        do
        {
          char v36 = *--v23;
          (v35--)[(void)v32] = v36;
        }

        while (v23 != v27);
        uint64_t v23 = *(char **)a4;
      }

      *(void *)a4 = v32;
      *(void *)(a4 + _Block_object_dispose(va, 8) = v24;
      *(void *)(a4 + 16) = v34;
      if (v23) {
        operator delete(v23);
      }
    }

    else
    {
      *uint64_t v23 = v21;
      uint64_t v24 = (uint64_t)(v23 + 1);
    }

    *(void *)(a4 + _Block_object_dispose(va, 8) = v24;
    return 1LL;
  }

  v38.__r_.__value_.__s.__data_[0] = a3 & 0xF;
  sub_100012EBC(&v44, 1uLL, &v38);
  sub_100010D88((char **)a4, (char **)&v44);
  unint64_t v15 = (void *)v44;
  if ((void)v44)
  {
    *((void *)&v44 + 1) = v44;
LABEL_22:
    operator delete(v15);
  }

  return 1LL;
}
}
}

        goto LABEL_37;
      case 5:
        -[APSNWTCPStream close](self, "close");
        goto LABEL_38;
      default:
        goto LABEL_38;
    }
  }

  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1000BF380();
  }
LABEL_37:

LABEL_38:
}

void sub_100010204( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000102C8(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }

BOOL sub_100010310( uint64_t a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::string *a7, std::string *a8, std::string *a9, std::string *__str, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t __stra, uint64_t __str_8, uint64_t __str_16, void *__pa, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  return (sub_100011030(v34, v35) & 1) != 0;
}

void sub_1000105F8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *__p, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, uint64_t a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000106C0(unint64_t a1)
{
  if (a1 < 0x40FE) {
    int v1 = 3;
  }
  else {
    int v1 = 4;
  }
  if (a1 >= 0x17E) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (a1 >= 0xFF) {
    return v2;
  }
  else {
    return 1LL;
  }
}

uint64_t sub_1000106EC(void *a1, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  if (a3 <= 1)
  {
    int v8 = sub_10000A62C(a1, (uint64_t)"Error: not enough bytes", 23LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24LL)));
    unint64_t v9 = std::locale::use_facet(&v36, &std::ctype<char>::id);
    uint64_t v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10LL);
    std::locale::~locale(&v36);
    std::ostream::put(v8, v10);
    std::ostream::flush(v8);
LABEL_8:
    uint64_t v28 = 0LL;
    goto LABEL_9;
  }

  char v11 = a2 + 1;
  if ((sub_10000F804((uint64_t)v32, (uint64_t)(a2 + 1), a3 - 1, (unint64_t *)&v31, &v30) & 1) == 0)
  {
    uint64_t v23 = sub_10000A62C(a1, (uint64_t)"Error: cannot decode frame size", 31LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24LL)));
    unint64_t v26 = std::locale::use_facet(&v36, &std::ctype<char>::id);
    uint64_t v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10LL);
    std::locale::~locale(&v36);
    std::ostream::put(v23, v27);
    goto LABEL_7;
  }

  __int128 v12 = sub_10000A62C(a1, (uint64_t)"command = ", 10LL);
  unint64_t v13 = (void *)std::ostream::operator<<(v12, *a2);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24LL)));
  uint64_t v14 = std::locale::use_facet(&v36, &std::ctype<char>::id);
  uint64_t v15 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10LL);
  std::locale::~locale(&v36);
  std::ostream::put(v13, v15);
  std::ostream::flush(v13);
  uint64_t v16 = sub_10000A62C(a1, (uint64_t)"frame size = ", 13LL);
  uint64_t v17 = v31;
  uint64_t v18 = (void *)std::ostream::operator<<(v16, v31);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24LL)));
  std::string::size_type v19 = std::locale::use_facet(&v36, &std::ctype<char>::id);
  uint64_t v20 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10LL);
  std::locale::~locale(&v36);
  std::ostream::put(v18, v20);
  std::ostream::flush(v18);
  uint64_t v21 = v30;
  unint64_t v22 = v17 + v30 + 1;
  if (v22 > a3)
  {
    uint64_t v23 = sub_10000A62C(a1, (uint64_t)"Error: frame data does not have enough bytes", 44LL);
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24LL)));
    uint64_t v24 = std::locale::use_facet(&v36, &std::ctype<char>::id);
    uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
    std::locale::~locale(&v36);
    std::ostream::put(v23, v25);
LABEL_7:
    std::ostream::flush(v23);
    goto LABEL_8;
  }

  *a4 = v22;
  uint64_t v28 = sub_100010A30(a1, (uint64_t)&v11[v21], v17);
LABEL_9:
  if (v35 < 0) {
    operator delete(__p);
  }
  sub_10000DEB0((uint64_t)&v33);
  sub_10000DEB0((uint64_t)v32);
  return v28;
}

void sub_1000109F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_100010A30(void *a1, uint64_t a2, uint64_t a3)
{
  if (v24 == v25)
  {
LABEL_14:
    uint64_t v15 = 1LL;
  }

  else
  {
    while (1)
    {
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
      uint64_t v22 = 0LL;
      uint64_t v18 = off_10011E280;
      std::string::size_type v19 = 0LL;
      sub_100010CD4(v26, &v23, (uint64_t)&v20, (uint64_t)&v18, 1);
      if ((v6 & 1) == 0) {
        break;
      }
      memset(&__p, 0, sizeof(__p));
      sub_100012A10(&__p, (uint64_t)&__p, (char *)v20, v21, v21 - (_BYTE *)v20);
      uint64_t v7 = sub_10000A62C(a1, (uint64_t)"  ", 2LL);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t size = __p.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v10 = sub_10000A62C(v7, (uint64_t)p_p, size);
      char v11 = sub_10000A62C(v10, (uint64_t)": ", 2LL);
      __int128 v12 = sub_10000A360(v11, (CFDataRef *)&v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
      unint64_t v13 = std::locale::use_facet(&v30, &std::ctype<char>::id);
      uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
      std::locale::~locale(&v30);
      std::ostream::put(v12, v14);
      std::ostream::flush(v12);
      uint64_t v18 = off_10011E280;
      sub_10000A5E8(&v19);
      if (v20)
      {
        uint64_t v21 = (char *)v20;
        operator delete(v20);
      }

      if (v24 == v25) {
        goto LABEL_14;
      }
    }

    uint64_t v18 = off_10011E280;
    sub_10000A5E8(&v19);
    if (v20)
    {
      uint64_t v21 = (char *)v20;
      operator delete(v20);
    }

    uint64_t v15 = 0LL;
  }

  if (v29 < 0) {
    operator delete(v28);
  }
  sub_10000DEB0((uint64_t)&v27);
  sub_10000DEB0((uint64_t)v26);
  return v15;
}

void sub_100010C38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void *sub_100010C9C(uint64_t a1)
{
  return sub_10000DEB0(a1);
}

void sub_100010CD4(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (sub_10000FD78((uint64_t)a1, a2, &v9))
  {
  }

uint64_t sub_100010D58(uint64_t a1)
{
  *(void *)a1 = off_10011E280;
  sub_10000A5E8((const void **)(a1 + 8));
  return a1;
}

char *sub_100010D88(char **a1, char **a2)
{
  uint64_t v3 = a2[1];
  unint64_t v4 = v3 - *a2;
  if (v3 == *a2) {
    return sub_100012784((uint64_t)a1, a1[1], *a2, v3, v4);
  }
  if (v4 <= 1) {
    uint64_t v6 = 1LL;
  }
  else {
    uint64_t v6 = v3 - *a2;
  }
  uint64_t v7 = *a2;
  while (1)
  {
    int v8 = *v7++;
    if (!--v6) {
      return sub_100012784((uint64_t)a1, a1[1], *a2, v3, v4);
    }
  }

  sub_100012614((uint64_t)&v15);
  uint64_t v10 = a2[1];
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)*a2;
  uint64_t v14 = v10;
  sub_100020B24(&v15, (unsigned __int8 **)&v13, &v14, 64LL);
  std::stringbuf::str(&v13, &v16);
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v11 = &v13;
  }
  else {
    char v11 = (std::stringbuf::string_type *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t size = v13.__r_.__value_.__s.__size_;
  }
  else {
    uint64_t size = v13.__r_.__value_.__l.__size_;
  }
  sub_100012CC8(a1, a1[1], (char *)v11, (char *)v11 + size, size);
  std::streambuf::~streambuf(&v16);
  return (char *)std::ios::~ios(&v17);
}

void sub_100010ED8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100012700((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100010F08(uint64_t *a1, int a2, char a3, void *a4)
{
  uint64_t v5 = 0xFFu >> (8 - a3);
  uint64_t v6 = v5 & a2;
  if ((_DWORD)v5 == (_DWORD)v6)
  {
    uint64_t v8 = 0LL;
    unsigned int v9 = -7;
    while (1)
    {
      if (!sub_10000AD88(a1, &v11)) {
        return 1LL;
      }
      v8 |= (v11 & 0x7F) << (v9 + 7);
      if ((v11 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      if (v9 >= 0x39) {
        return 2LL;
      }
    }

    uint64_t result = 0LL;
    uint64_t v6 = v8 + v5;
  }

  else
  {
    uint64_t result = 0LL;
  }

  *a4 = v6;
  return result;
}

uint64_t sub_100010FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), a1, a2);
  if ((_DWORD)v4)
  {
    ++*(_DWORD *)(*(void *)(a1 + 16) + 4LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2);
  }

  return v4;
}

uint64_t sub_100011030(uint64_t a1, void *a2)
{
  if (sub_10000AD60(a2, v5)) {
    __asm { BR              X10 }
  }

  sub_100012960(&v4, "read overflow while reading value's first byte");
  sub_10000F998(a1, 11, &v4);
  return 0LL;
}

void sub_10001112C( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, std::string *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, unint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, std::string *a37, std::string *a38, std::string *__str, int __val, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t __stra,uint64_t __str_8)
{
  if ((a1 & 0x20) != 0)
  {
    std::to_string((std::string *)&a29, a1);
    v76 = std::string::insert((std::string *)&a29, 0LL, "invalid value prefix ");
    __int128 v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    *(void *)(v75 - 224) = v76->__r_.__value_.__l.__cap_;
    *(_OWORD *)(v75 - 240) = v77;
    v76->__r_.__value_.__l.__size_ = 0LL;
    v76->__r_.__value_.__l.__cap_ = 0LL;
    v76->__r_.__value_.__r.__words[0] = 0LL;
    sub_10000F998(v72, 12, (std::string *)(v75 - 240));
    if ((SHIBYTE(a31) & 0x80000000) == 0) {
      goto LABEL_23;
    }
  }

  else
  {
    if (sub_10000F93C(v74, 5, &a26))
    {
      sub_100012960(&__vala, "invalid string length");
      sub_10000F998(v72, 8, (std::string *)&__vala);
      if (a72 < 0) {
        goto LABEL_22;
      }
LABEL_23:
      JUMPOUT(0x100011104LL);
    }

    if (a26 <= *(void *)(v72 + 176))
    {
      uint64_t v78 = v74[2];
      if (v74[1] - v78 >= a26)
      {
        sub_100013120(&a29, (char *)(*v74 + v78), (char *)(*v74 + v78 + a26), a26);
        char v79 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v73 + 24LL))(v73, &a29);
        if (SHIBYTE(a31) < 0) {
          operator delete(a29);
        }
        if ((v79 & 1) != 0) {
          JUMPOUT(0x100011874LL);
        }
        sub_100012960(&a50, "invalid string value");
        sub_10000F998(v72, 8, (std::string *)&a50);
        if ((a55 & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }

      else
      {
        sub_100012960(&a56, "read overflow while reading string");
        sub_10000F998(v72, 11, (std::string *)&a56);
        if ((a61 & 0x80000000) == 0) {
          goto LABEL_23;
        }
      }
    }

    else
    {
      sub_100012960(&__stra, "string is too large");
      sub_10000F998(v72, 9, (std::string *)&__stra);
      if ((__str_23 & 0x80000000) == 0) {
        goto LABEL_23;
      }
    }
  }

void sub_100011174( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, std::string *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::string *__str, std::string *a29, std::string *a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t __stra, uint64_t __str_8, int __str_16, __int16 __str_20, char __str_22, char __str_23, __int128 a47, std::string::size_type cap, uint64_t a49, uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  char v58 = *(_BYTE *)(v57 - 90);
  if ((v58 & 0x20) != 0)
  {
    if ((v58 & 0x30) == 0x20)
    {
      unint64_t v60 = 0LL;
      int v61 = (v58 & 7) + 2;
      while (sub_10000AD88(v56, &a29))
      {
        unint64_t v60 = a29 | (v60 << 8);
        if (--v61 <= 1)
        {
          if ((v58 & 8) != 0) {
            uint64_t v59 = -(uint64_t)v60;
          }
          else {
            uint64_t v59 = v60;
          }
          goto LABEL_3;
        }
      }

      sub_100012960(&a49, "read overflow while reading integer");
      sub_10000F998(v54, 11, (std::string *)&a49);
      if (a54 < 0) {
LABEL_21:
      }
        JUMPOUT(0x100011100LL);
    }

    else
    {
      std::to_string((std::string *)&a29, *(unsigned __int8 *)(v57 - 90));
      v62 = std::string::insert((std::string *)&a29, 0LL, "invalid value prefix ");
      __int128 v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      int64_t cap = v62->__r_.__value_.__l.__cap_;
      a47 = v63;
      v62->__r_.__value_.__l.__size_ = 0LL;
      v62->__r_.__value_.__l.__cap_ = 0LL;
      v62->__r_.__value_.__r.__words[0] = 0LL;
      sub_10000F998(v54, 12, (std::string *)&a47);
      if (SHIBYTE(cap) < 0) {
        operator delete((void *)a47);
      }
      if (a34 < 0) {
        goto LABEL_21;
      }
    }
  }

  else
  {
    uint64_t v59 = v58 & 0x1F;
LABEL_3:
    sub_100012960(&__stra, "invalid number value");
    sub_10000F998(v54, 8, (std::string *)&__stra);
    if (__str_23 < 0) {
      goto LABEL_21;
    }
  }

  JUMPOUT(0x100011104LL);
}

void sub_1000118B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, void *__p, uint64_t a48, int a49, __int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFTypeRef *sub_100011AD8(CFTypeRef *a1, CFTypeRef *a2)
{
  if (a2 != a1)
  {
    if (*a2) {
      CFRetain(*a2);
    }
    if (*a1) {
      CFRelease(*a1);
    }
    *a1 = *a2;
  }

  return a1;
}

uint64_t sub_100011B24(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_10000AA64();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_10000ABB0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 8 * v6;
    sub_100013E68(a1, v7);
    return sub_100013F74((uint64_t)v7);
  }

  return result;
}

void sub_100011BA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

std::string *sub_100011BB4(void *a1)
{
  int v1 = a1;
  *(_DWORD *)(a1[2] + 4LL) -= (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  (*(void (**)(void *))(*v1 + 48LL))(v1);
  (*(void (**)(void, void *))(*(void *)v1[1] + 32LL))(v1[1], v1);
  uint64_t v2 = v1[9];
  v1 += 9;
  *(_DWORD *)(v1[2] + 4LL) -= (*(uint64_t (**)(void *))(v2 + 16))(v1);
  (*(void (**)(void *))(*v1 + 48LL))(v1);
  (*(void (**)(void, void *))(*(void *)v1[1] + 32LL))(v1[1], v1);
  v1[9] = 0LL;
  v1[10] = 0LL;
  v1[11] = 0LL;
  *((_DWORD *)v1 + 2_Block_object_dispose(va, 8) = 0;
  return std::string::assign((std::string *)v1 + 5, "");
}

uint64_t sub_100011C6C(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_100011C74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

void *sub_100011C7C(uint64_t a1)
{
  return sub_100011C8C(qword_10014ECF8, a1);
}

void *sub_100011C8C(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t sub_100011D24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

uint64_t sub_100011D30(uint64_t a1)
{
  return a1 + 72;
}

uint64_t sub_100011D38(uint64_t a1)
{
  return a1 + 144;
}

uint64_t *sub_100011D40()
{
  return &qword_10014ECC0;
}

void *sub_100011D4C()
{
  return &unk_10014ECD8;
}

void *sub_100011D58()
{
  return &unk_10014ECE8;
}

void *sub_100011D6C(void *a1)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = off_10011E108;
  uint64_t v5 = v2;
  sub_10000DE18((uint64_t)a1, (uint64_t *)&v5, (uint64_t)&unk_10014ECD8);
  uint64_t v3 = (uint64_t)v5;
  uint64_t v5 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *a1 = &off_10011E0A8;
  return a1;
}

void sub_100011DE4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100011E08(uint64_t a1)
{
  int v1 = sub_10000DEB0(a1);
  operator delete(v1);
}

void sub_100011E20()
{
  uint64_t v0 = (void *)nullsub_2();
  operator delete(v0);
}

uint64_t sub_100011E34(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  std::string __p = 0LL;
  if ((*(unsigned int (**)(uint64_t, void **))(*(void *)a2 + 40LL))(a2, &__p))
  {
    --*(_DWORD *)(*(void *)(a2 + 16) + 4LL);
    (*(void (**)(void, uint64_t, void **))(**(void **)(a2 + 8) + 24LL))(*(void *)(a2 + 8), a2, &__p);
LABEL_4:
    uint64_t v3 = 1LL;
    goto LABEL_6;
  }

  uint64_t v3 = 0LL;
LABEL_6:
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }

  return v3;
}

void sub_100011ED8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100011EFC(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x18uLL);
  *uint64_t v4 = off_10011E1C8;
  v4[1] = 0LL;
  v4[2] = a2;
  uint64_t v7 = v4;
  sub_10000DE18((uint64_t)a1, (uint64_t *)&v7, (uint64_t)&unk_10014ECE8);
  uint64_t v5 = (uint64_t)v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *a1 = &off_10011E168;
  return a1;
}

void sub_100011F7C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100011FA4(uint64_t a1)
{
  int v1 = sub_10000DEB0(a1);
  operator delete(v1);
}

void sub_100011FBC()
{
  uint64_t v0 = (void *)nullsub_2();
  operator delete(v0);
}

uint64_t sub_100011FD0(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = a3[1] - *a3 + 32LL;
  if (v3 > *(void *)(a1 + 16)) {
    return 0LL;
  }
  while (1)
  {
    unint64_t v6 = *(void *)(a1 + 8) + v3;
    if (v6 <= *(void *)(a1 + 16)) {
      break;
    }
    std::string __p = 0LL;
    char v11 = 0LL;
    uint64_t v12 = 0LL;
    int v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)a2 + 40LL))(a2, &__p);
    char v8 = v7;
    if (v7)
    {
      --*(_DWORD *)(*(void *)(a2 + 16) + 4LL);
      (*(void (**)(void, uint64_t, void **))(**(void **)(a2 + 8) + 24LL))(*(void *)(a2 + 8), a2, &__p);
    }

    if (__p)
    {
      char v11 = __p;
      operator delete(__p);
    }

    if ((v8 & 1) == 0) {
      return 0LL;
    }
  }

  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  **(_DWORD **)(a2 + 16) += v3;
  return 1LL;
}

void sub_1000120A8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000120C4(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[1] - *a3 + 32LL;
  **(_DWORD **)(a2 + 16) -= v3;
  *(void *)(result + 8) -= v3;
  return result;
}

uint64_t sub_1000120F0(uint64_t result, uint64_t a2)
{
  **(_DWORD **)(a2 + 16) -= *(_DWORD *)(result + 8);
  *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
  return result;
}

uint64_t sub_100012110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = a3;
  return 1LL;
}

uint64_t sub_100012154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0LL) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  *(void *)(a1 + 24) = v4;
  return 1LL;
}

uint64_t sub_1000121A8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 8LL;
  return 1LL;
}

uint64_t sub_1000121E8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 8LL;
  return 1LL;
}

CFDataRef sub_100012228(uint64_t a1, uint64_t a2)
{
  if (v9)
  {
    CFDataRef theData = 0LL;
    CFDataRef v3 = sub_10000A390((CFPropertyListRef *)&v9, (CFTypeRef *)&theData);
    if ((v3 & 1) != 0)
    {
      uint64_t v4 = theData;
      BytePtr = CFDataGetBytePtr(theData);
      CFIndex Length = CFDataGetLength(v4);
      *(void *)(a1 + 24) = Length;
      (*(void (**)(void, void, const UInt8 *, CFIndex))(**(void **)(a1 + 8) + 32LL))( *(void *)(a1 + 8),  *(unsigned __int8 *)(a1 + 16),  BytePtr,  Length);
    }

    sub_10000A5E8((const void **)&theData);
  }

  else
  {
    CFDataRef v3 = 0LL;
  }

  sub_10000A5E8((const void **)&v9);
  return v3;
}

void sub_1000122D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_1000122F4()
{
  return 0LL;
}

void sub_1000122FC(const void **a1)
{
  *a1 = off_10011E280;
  sub_10000A5E8(a1 + 1);
  operator delete(a1);
}

BOOL sub_10001232C(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  uint64_t v4 = (CFTypeRef *)(a1 + 8);
  if (&v6 != v4)
  {
    if (*v4) {
      CFRelease(*v4);
    }
    *uint64_t v4 = v6;
    unint64_t v6 = 0LL;
  }

  sub_10000A5E8(&v6);
  return *v4 != 0LL;
}

void sub_100012394(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000123A8(uint64_t a1, const UInt8 *a2)
{
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0LL;
  }

  sub_10000A5E8(&v5);
  return *v3 != 0LL;
}

void sub_100012410(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100012424(uint64_t a1, uint64_t a2)
{
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0LL;
  }

  sub_10000A5E8(&v5);
  return *v3 != 0LL;
}

void sub_10001248C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_1000124A0(uint64_t a1, int a2)
{
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0LL;
  }

  sub_10000A5E8(&v5);
  return *v3 != 0LL;
}

void sub_100012508(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_10001251C(uint64_t a1, uint64_t a2)
{
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != (__CFDictionary **)v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0LL;
  }

  sub_10000A5E8((const void **)&v5);
  return *v3 != 0LL;
}

void sub_100012584(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_100012598(uint64_t a1, const void ***a2)
{
  CFDataRef v3 = (CFTypeRef *)(a1 + 8);
  if (&v5 != v3)
  {
    if (*v3) {
      CFRelease(*v3);
    }
    *CFDataRef v3 = v5;
    uint64_t v5 = 0LL;
  }

  sub_10000A5E8(&v5);
  return *v3 != 0LL;
}

void sub_100012600(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_100012614(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v4;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24LL));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0LL;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1000126D8(_Unwind_Exception *a1)
{
}

uint64_t sub_100012700(uint64_t a1)
{
  uint64_t v3 = a1 + 8;
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

char *sub_100012784(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  int v7 = __src;
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    char v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10000AA64();
    }
    std::stringbuf::string_type v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      std::stringbuf v16 = operator new(v15);
    }
    else {
      std::stringbuf v16 = 0LL;
    }
    unint64_t v26 = &v13[(void)v16];
    uint64_t v27 = &v13[(void)v16 + v6];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }

    while (v6);
    std::locale v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      uint64_t v32 = v26;
    }

    else
    {
      uint64_t v31 = v5;
      uint64_t v32 = v26;
      do
      {
        char v33 = *--v31;
        *--uint64_t v32 = v33;
      }

      while (v31 != v30);
      uint64_t v10 = *(char **)(a1 + 8);
    }

    uint64_t v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    char v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }

  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v18 = &__src[a5];
    uint64_t v20 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v21 = &v5[v6];
    uint64_t v22 = &v20[-v6];
    uint64_t v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      uint64_t v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }

      while (v24);
    }

    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }

  uint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  uint64_t v20 = &v10[v19];
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *sub_100012960(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000A974();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000LL;
    *a1 = v6;
  }

  else
  {
    *((_BYTE *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }

  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_100012A10(std::string *this, uint64_t a2, char *a3, char *a4, std::string::size_type __n_add)
{
  uint64_t v6 = this;
  if (((char)this->__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    std::string::size_type v7 = a2 - (void)this;
    if (__n_add)
    {
      std::string::size_type size = this->__r_.__value_.__s.__size_;
      uint64_t v9 = this;
      goto LABEL_6;
    }

    return (uint64_t)v6 + v7;
  }

  uint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  std::string::size_type v7 = a2 - this->__r_.__value_.__r.__words[0];
  if (!__n_add)
  {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    return (uint64_t)v6 + v7;
  }

  std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
  sub_100012C44(&__p, a3, a4);
  std::string::size_type v10 = __p.__r_.__value_.__s.__size_;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = sub_100012B2C(v6, __n_add, v7, (char *)p_p, (char *)p_p + v10);
  return v12;
}

void sub_100012B10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100012B2C( std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  uint64_t v9 = this;
  if ((char)this->__r_.__value_.__s.__size_ < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__l.__cap_ & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      uint64_t v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }

  else
  {
    std::string::size_type size = this->__r_.__value_.__s.__size_;
    std::string::size_type v11 = 22LL;
    uint64_t v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }

  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0LL, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  uint64_t v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  else {
    v9->__r_.__value_.__s.__size_ = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    size_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }

    while (a4 != a5);
  }

  return (uint64_t)v9 + __n_copy;
}

void sub_100012C44(std::string *this, std::string::value_type *a2, std::string::value_type *a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__l.__cap_ = 0LL;
  if (a2 != a3)
  {
    size_t v4 = a2;
    do
      std::string::push_back(this, *v4++);
    while (v4 != a3);
  }

void sub_100012C98(void *a1)
{
}

void sub_100012CB4(_Unwind_Exception *a1)
{
}

char *sub_100012CC8(char **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  std::string::size_type v7 = __src;
  std::string::size_type v10 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    uint64_t v17 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      uint64_t v18 = &__src[a5];
      uint64_t v20 = a1[1];
    }

    else
    {
      uint64_t v18 = &__src[v17];
      if (&__src[v17] == a4)
      {
        uint64_t v20 = a1[1];
      }

      else
      {
        int64_t v19 = __src - __dst;
        uint64_t v20 = a1[1];
        uint64_t v21 = v20;
        do
          *v21++ = (v20++)[v19];
        while (&v20[v19] != a4);
      }

      a1[1] = v20;
      if (v17 < 1) {
        return v5;
      }
    }

    uint64_t v32 = &__dst[a5];
    char v33 = &v20[-a5];
    uint64_t v34 = v20;
    if (&v20[-a5] < v10)
    {
      uint64_t v35 = &v10[a5] - v20;
      uint64_t v34 = v20;
      do
      {
        char v36 = *v33++;
        *v34++ = v36;
        --v35;
      }

      while (v35);
    }

    a1[1] = v34;
    if (v20 != v32) {
      memmove(&__dst[a5], __dst, v20 - v32);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
  }

  else
  {
    std::string::size_type v11 = *a1;
    uint64_t v12 = v10 - *a1 + a5;
    if (v12 < 0) {
      sub_10000AA64();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      char v16 = operator new(v15);
    }
    else {
      char v16 = 0LL;
    }
    uint64_t v22 = &v13[(void)v16];
    uint64_t v23 = &v13[(void)v16 + v6];
    int64_t v24 = v22;
    do
    {
      char v25 = *v7++;
      *v24++ = v25;
      --v6;
    }

    while (v6);
    unint64_t v26 = *a1;
    if (*a1 == v5)
    {
      uint64_t v28 = v22;
    }

    else
    {
      uint64_t v27 = v5;
      uint64_t v28 = v22;
      do
      {
        char v29 = *--v27;
        *--uint64_t v28 = v29;
      }

      while (v27 != v26);
      std::string::size_type v10 = a1[1];
    }

    std::locale v30 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v23, v5, v10 - v5);
    }
    uint64_t v31 = *a1;
    *a1 = v28;
    a1[1] = &v23[v10 - v5];
    a1[2] = v30;
    if (v31) {
      operator delete(v31);
    }
    return v22;
  }

  return v5;
}

void *sub_100012EBC(void *a1, size_t a2, _BYTE *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    size_t v5 = a2;
    sub_10000AA24(a1, a2);
    uint64_t v6 = (_BYTE *)a1[1];
    std::string::size_type v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }

    while (v5);
    a1[1] = v7;
  }

  return a1;
}

void sub_100012F1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

char *sub_100012F38(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  size_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  std::string::size_type v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    std::string::size_type v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      sub_10000AA64();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      uint64_t v17 = (char *)operator new(v15);
    }

    else
    {
      size_t v16 = 0LL;
      uint64_t v17 = 0LL;
    }

    uint64_t v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    uint64_t v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }

      while (v13);
      std::string::size_type v10 = *(char **)(a1 + 8);
      uint64_t v28 = v17;
    }

    std::locale v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }

  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    int64_t v19 = &__src[a5];
    uint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    uint64_t v22 = &v5[a5];
    uint64_t v23 = &v21[-a5];
    int64_t v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      int64_t v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }

      while (v25);
    }

    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }

  int64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  uint64_t v21 = &v10[v20];
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void *sub_100013120(void *result, char *a2, char *a3, unint64_t a4)
{
  size_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8LL) {
    sub_10000A974();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000LL;
    *size_t v4 = result;
    size_t v4 = result;
  }

  else
  {
    *((_BYTE *)result + 23) = a4;
  }

  while (a2 != a3)
  {
    char v10 = *a2++;
    *(_BYTE *)size_t v4 = v10;
    size_t v4 = (void *)((char *)v4 + 1);
  }

  *(_BYTE *)size_t v4 = 0;
  return result;
}

uint64_t sub_1000131C4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1000131FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_100013238((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

void sub_100013238(uint64_t a1)
{
}

void sub_100013274(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_100013350(a1, prime);
  }

void sub_100013350(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10000A9FC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vstd::ostream::~ostream(v2, v3 + 8) = a1 + 16;
      std::string::size_type v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }

          else
          {
            v12 &= a2 - 1;
          }

          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }

            *uint64_t v7 = *v11;
            *std::string::size_type v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            std::string::size_type v11 = v7;
          }

          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          std::string::size_type v11 = (void *)*v11;
          unint64_t v8 = v12;
        }

        while (v11);
      }
    }
  }

  else
  {
    char v10 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  }

unsigned __int8 *sub_1000134A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_1000137DC(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }

    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (CFIndex i = *v14; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ((sub_100013C84(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }

          else
          {
            v16 &= v11 - 1;
          }

          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }

  sub_100013740(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1LL;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_100013274(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }

    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }

  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }

  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8LL);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }

      else
      {
        v24 &= v11 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }

  CFIndex i = (unsigned __int8 *)v26[0];
  v26[0] = 0LL;
  ++*v8;
  sub_100013DB4((uint64_t)v26, 0LL);
  return i;
}

void sub_100013728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

_BYTE *sub_100013740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::ostream::~ostream(v2, v3 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_100013D28(result, *(void **)v10, *((void *)v10 + 1));
  }

  else
  {
    __int128 v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }

  v8[5] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1000137C4(_Unwind_Exception *a1)
{
}

unint64_t sub_1000137DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }

  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }

  return sub_100013818((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_100013818(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69LL
          * (v6 ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69LL * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69LL * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297LL * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      size_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0LL);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273LL * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273LL * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64LL;
      }

      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69LL * (v21 ^ ((0x9DDFEA08EB382D69LL * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69LL
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297LL
                  * ((0x9DDFEA08EB382D69LL
                    * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69LL * (v20 ^ ((0x9DDFEA08EB382D69LL * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69LL * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }

    else
    {
      return sub_100013BC4(a2, a3);
    }
  }

  else if (a3 > 0x10)
  {
    return sub_100013B18(a2, a3);
  }

  else
  {
    return sub_100013A20(a2, a3);
  }

unint64_t sub_100013A20(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557LL * (a2 + 4LL * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }

    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69LL * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69LL * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }

  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69LL * (v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69LL * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }

  return result;
}

unint64_t sub_100013B18(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273LL * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557LL, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69LL * (v5 ^ (v4 - 0x3C5A37A36834CED9LL * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69LL
       * ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69LL * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_100013BC4(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9LL * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9LL * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127LL * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1LL
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9LL * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_100013C84(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }

  while (v9 == v11 && v14);
  return result;
}

void *sub_100013D28(_BYTE *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8LL) {
      sub_10000A974();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8LL) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000LL;
    void *v5 = v8;
    uint64_t v5 = v8;
  }

  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_100013DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_100013238((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }

void sub_100013DF8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_10000A5E8(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_100013E68(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100013EDC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100013EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      int v12 = *(const void **)(a3 + v11 - 8);
      *(void *)(a7 - 8 + v11) = v12;
      if (v12) {
        CFRetain(v12);
      }
      v11 -= 8LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_100013F54(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 8LL)
    sub_10000A5E8((const void **)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100013F74(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_10000A5E8((const void **)(i - 8));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100013FC0(uint64_t *a1, const void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_10000ABB0(v7, v9);
  }
  else {
    int v10 = 0LL;
  }
  uint64_t v11 = (const void **)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  uint64_t v17 = &v10[8 * v9];
  int v12 = *a2;
  *uint64_t v11 = *a2;
  if (v12)
  {
    CFRetain(v12);
    uint64_t v11 = v16;
  }

  unint64_t v16 = v11 + 1;
  sub_100013E68(a1, v15);
  uint64_t v13 = a1[1];
  sub_100013F74((uint64_t)v15);
  return v13;
}

void sub_100014094(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000140A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24LL))(*(void *)(a2 + 24), a1);
    }

    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16LL))(v3);
    }
  }

  else
  {
    *(void *)(a1 + 24) = 0LL;
  }

  return a1;
}

void *sub_10001410C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100014274(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000A61C(a1);
}

uint64_t sub_100014280()
{
  qword_10014ED10 = 0LL;
  return __cxa_atexit((void (*)(void *))sub_10000F740, qword_10014ECF8, (void *)&_mh_execute_header);
}

uint64_t sub_1000142A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a2 = 0LL;
  uint64_t v7 = v4;
  sub_1000204C4((void *)a1, &v7, a3);
  uint64_t v5 = v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *(void *)a1 = off_10011E2E8;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_10000EB24((void *)(a1 + 24), 0LL, 0LL, 0LL);
  *(void *)(a1 + 4std::ostream::~ostream(v2, v3 + 8) = 0xFFFFFFFF00000000LL;
  *(void *)(a1 + 56) = a1 + 24;
  *(void *)(a1 + 64) = a1 + 24;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 16std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0LL;
  return a1;
}

void sub_100014358(_Unwind_Exception *a1)
{
}

void *sub_100014390(uint64_t a1)
{
  *(void *)a1 = off_10011E2E8;
  *(_DWORD *)(*(void *)(a1 + 16) + 4LL) -= *(_DWORD *)(a1 + 216);
  sub_100014798(a1);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 8) + 32LL))(*(void *)(a1 + 8), a1);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  return sub_1000204E0((void *)a1);
}

void sub_100014400(uint64_t a1)
{
  uint64_t v1 = sub_100014390(a1);
  operator delete(v1);
}

uint64_t sub_100014414(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    unsigned int v5 = 0;
  }

  else
  {
    unsigned int v5 = 0;
    do
    {
      int v6 = *v3++;
      unsigned int v5 = v6 - v5 + 32 * v5;
    }

    while (v3 != v4);
  }

  uint64_t v7 = sub_1000144D0(a1, (uint64_t)a2, v5);
  if (!v7)
  {
    uint64_t result = 0xFFFFFFFFLL;
    goto LABEL_10;
  }

  int v8 = *(_DWORD *)(v7 + 28);
  int v9 = *(_DWORD *)(*(void *)(a1 + 56) + 28LL);
  uint64_t result = (v8 - v9);
  if (v8 - v9 < 0)
  {
LABEL_10:
    uint64_t v11 = (_DWORD *)(*(void *)(a1 + 16) + 12LL);
    goto LABEL_11;
  }

  uint64_t v11 = (_DWORD *)(*(void *)(a1 + 16) + 8LL);
LABEL_11:
  ++*v11;
  return result;
}

uint64_t sub_1000144A0(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0LL;
  }
  LODWORD(result) = 0;
  do
  {
    int v4 = *v1++;
    uint64_t result = (v4 - result + 32 * result);
  }

  while (v1 != v2);
  return result;
}

uint64_t sub_1000144D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 8LL * (a3 % 0x11) + 80);
  if (v3)
  {
    unsigned int v5 = *(const void **)a2;
    size_t v6 = *(void *)(a2 + 8) - *(void *)a2;
    do
    {
      if (*(_DWORD *)(v3 + 24) == a3
        && *(void *)(v3 + 8) - *(void *)v3 == v6
        && !memcmp(*(const void **)v3, v5, v6))
      {
        break;
      }

      uint64_t v3 = *(void *)(v3 + 48);
    }

    while (v3);
  }

  return v3;
}

uint64_t sub_100014558(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(_DWORD *)(a2 + 28) - *(_DWORD *)(*(void *)(a1 + 56) + 28LL));
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100014578(uint64_t a1)
{
  return *(void *)(a1 + 216);
}

void *sub_100014580(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (uint64_t)a2[1];
  if (*a2 == (unsigned __int8 *)v4)
  {
    unsigned int v5 = 0;
  }

  else
  {
    unsigned int v5 = 0;
    size_t v6 = *a2;
    do
    {
      int v7 = *v6++;
      unsigned int v5 = v7 - v5 + 32 * v5;
    }

    while (v6 != (unsigned __int8 *)v4);
  }

  int v8 = operator new(0x38uLL);
  int v9 = *(_DWORD *)(*(void *)(a1 + 56) + 28LL);
  uint64_t v10 = a1 + 8LL * (v5 % 0x11);
  uint64_t v11 = *(void *)(v10 + 80);
  v8[1] = 0LL;
  v8[2] = 0LL;
  *int v8 = 0LL;
  uint64_t result = sub_10000EB24(v8, v3, v4, v4 - (void)v3);
  *((_DWORD *)v8 + 6) = v5;
  *((_DWORD *)v8 + 7) = v9 - 1;
  *(void *)(v10 + 80) = v8;
  uint64_t v13 = *(void *)(a1 + 56);
  v8[5] = a1 + 24;
  v8[6] = v11;
  v8[4] = v13;
  *(void *)(v13 + 40) = v8;
  *(void *)(v8[5] + 32LL) = v8;
  ++*(void *)(a1 + 216);
  return result;
}

void sub_100014664(_Unwind_Exception *a1)
{
}

uint64_t sub_100014678(unsigned int a1)
{
  return a1 % 0x11;
}

uint64_t sub_100014694(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  *(void *)(result + 32) = v2;
  *(void *)(result + 40) = a2;
  *(void *)(v2 + 40) = result;
  *(void *)(*(void *)(result + 40) + 32LL) = result;
  return result;
}

uint64_t sub_1000146AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 216);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = a1 + 8LL * (*(_DWORD *)(v4 + 24) % 0x11u);
    uint64_t v8 = *(void *)(v5 + 80);
    size_t v6 = (void *)(v5 + 80);
    uint64_t v7 = v8;
    uint64_t v9 = v8;
    while (v9)
    {
      uint64_t v10 = v7;
      uint64_t v11 = *(void *)(v9 + 48);
      uint64_t v7 = v9;
      BOOL v12 = v9 == v4;
      uint64_t v9 = v11;
      if (v12)
      {
        if (v10 != v4) {
          size_t v6 = (void *)(v10 + 48);
        }
        *size_t v6 = v11;
        uint64_t v13 = *(void *)(v4 + 32);
        *(void *)(v13 + 40) = *(void *)(v4 + 40);
        *(void *)(*(void *)(v4 + 40) + 32LL) = v13;
        if ((void *)v4 != a2)
        {
          sub_10000F3C0(a2, *(char **)v4, *(char **)(v4 + 8), *(void *)(v4 + 8) - *(void *)v4);
          uint64_t v2 = *(void *)(a1 + 216);
        }

        *(void *)(a1 + 216) = v2 - 1;
        BOOL v14 = *(char **)v4;
        if (*(void *)v4)
        {
          *(void *)(v4 + std::ostream::~ostream(v2, v3 + 8) = v14;
          operator delete(v14);
        }

        operator delete((void *)v4);
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100014784(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(void *)(v1 + 40) = *(void *)(result + 40);
  *(void *)(*(void *)(result + 40) + 32LL) = v1;
  return result;
}

void sub_100014798(uint64_t a1)
{
  *(void *)(a1 + 20std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12std::ostream::~ostream(v2, v3 + 8) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  uint64_t v2 = (void **)(a1 + 24);
  for (uint64_t i = *(void ***)(a1 + 64); i != v2; uint64_t i = *(void ***)(a1 + 64))
  {
    uint64_t v4 = i[4];
    v4[5] = i[5];
    *((void *)i[5] + 4) = v4;
    uint64_t v5 = *i;
    if (*i)
    {
      i[1] = v5;
      operator delete(v5);
    }

    operator delete(i);
  }

  *(void *)(a1 + 216) = 0LL;
}

uint64_t sub_100014818(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4 != a1 + 24)
  {
    unint64_t v5 = a2[1];
    do
    {
      if (v5 >= a2[2])
      {
        unint64_t v5 = sub_1000148EC(a2, v4);
      }

      else
      {
        sub_1000148A0((uint64_t)a2, v4);
        v5 += 24LL;
      }

      a2[1] = v5;
      uint64_t v4 = *(void *)(v4 + 32);
    }

    while (v4 != a1 + 24);
  }

  return *(void *)(a1 + 216);
}

void *sub_1000148A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0LL;
  v3[1] = 0LL;
  v3[2] = 0LL;
  uint64_t result = sub_10000EB24(v3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v3 + 3;
  return result;
}

void sub_1000148E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::ostream::~ostream(v2, v3 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000148EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10000AA64();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10000F4CC(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0LL;
  *((void *)v11 + 1) = 0LL;
  *((void *)v11 + 2) = 0LL;
  sub_10000EB24(v11, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v15 += 24;
  sub_1000149FC(a1, v14);
  uint64_t v12 = a1[1];
  sub_10000F6B4((uint64_t)v14);
  return v12;
}

void sub_1000149E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1000149FC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10000F510((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100014D20(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___PSAppChannelSubscriptionResponse);
      [a1 addAppChannelSubscriptionResponse:v12];
      if (!PBReaderPlaceMark(a2, v14) || !sub_10006CBEC(v12, a2))
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_23:
        uint64_t v3 = v27;
        goto LABEL_24;
      }

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", v16));
      uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSData, v19);
      isKindOfClass = objc_opt_isKindOfClass(v18, v20);

      if ((isKindOfClass & 1) == 0)
      {
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_FAULT))
        {
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v10, "objectForKeyedSubscript:", v16));
          *(_DWORD *)buf = 138412546;
          uint64_t v34 = v25;
          uint64_t v35 = 2112;
          uint64_t v3 = v27;
          uint64_t v36 = v27;
          _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  OS_LOG_TYPE_FAULT,  "KeychainDict value not a data %@ - _deserializeSaltStoreKeychainData %@",  buf,  0x16u);

          goto LABEL_24;
        }

        goto LABEL_23;
      }

      uint64_t v15 = (char *)v15 + 1;
    }

    while (v13 != v15);
    uint64_t v13 = -[os_log_s countByEnumeratingWithState:objects:count:]( v10,  "countByEnumeratingWithState:objects:count:",  &v28,  v37,  16LL);
    unint64_t v7 = v26;
    uint64_t v3 = v27;
    if (v13) {
      continue;
    }
    break;
  }
          }

          else
          {
            BOOL v14 = (id)objc_claimAutoreleasedReturnValue([v9 sendTimeoutTime]);
            if ([v9 isEager])
            {
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 eagernessTimeoutTime]);
              unint64_t v16 = [v15 compare:v14] == (id)-1;

              if (v16)
              {
                uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 eagernessTimeoutTime]);
                goto LABEL_23;
              }
            }

            uint64_t v12 = v14;
          }

          if (v4)
          {
            if ([v12 compare:v4] != (id)-1 || v4 == v12) {
              goto LABEL_31;
            }
LABEL_29:
            uint64_t v17 = v12;

            char v4 = v17;
          }

          else
          {
            if (v12) {
              goto LABEL_29;
            }
            char v4 = 0LL;
          }

  return v9;
}

  return v7;
}

      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    goto LABEL_12;
  }

  uint64_t v21 = ((uint64_t (*)(void))Date.init())();
  uint64_t v0 = v8;
  size_t v22 = Date.timeIntervalSince1970.getter(v21);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  uint64_t v23 = v22 * 1000000000.0;
  if ((~COERCE__INT64(v22 * 1000000000.0) & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }

  if (v23 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v23 < 1.84467441e19) {
    return (unint64_t)v23;
  }
  __break(1u);
LABEL_12:
  sub_1000AC284();
  unint64_t v24 = v0;
  uint64_t v25 = (os_log_s *)static OS_os_log.default.getter();
  uint64_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v27 = 134218240;
    uint64_t v33 = v1;
    uint64_t v28 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v27 + 4, v27 + 12);
    *(_WORD *)(v27 + 12) = 2048;
    uint64_t v32 = v27 + 14;
    uint64_t v33 = ((uint64_t (*)(uint64_t))v2)(v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v32, v27 + 22);

    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Monotonic time has rolled back -- reverting to system clock time! {currentMonotonicTimeInNanoSeconds: %llu, aligne dMonotonicTimeInNanoSeconds: %llu}",  (uint8_t *)v27,  0x16u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(void))((swift_isaMask & *(void *)v24) + 0x80LL))(0LL);
  uint64_t v29 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v24) + 0x98LL))(0LL);
  uint64_t v30 = Date.init()(v29);
  uint64_t v31 = Date.timeIntervalSince1970.getter(v30);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  uint64_t v23 = v31 * 1000000000.0;
  if ((~COERCE__INT64(v31 * 1000000000.0) & 0x7FF0000000000000LL) == 0) {
    goto LABEL_25;
  }
  if (v23 <= -1.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v23 < 1.84467441e19) {
    return (unint64_t)v23;
  }
LABEL_27:
  __break(1u);
  return result;
}

  __break(0x5519u);
LABEL_24:
  __break(1u);
  return result;
}

LABEL_17:
  size_t v22 = -[os_log_s mutableCopy](v10, "mutableCopy");
LABEL_26:

  return v22;
}

    uint64_t v15 = 1;
    goto LABEL_18;
  }

  CFDictionaryAddValue(Mutable, kSecAttrAccessible, kSecAttrAccessibleAlwaysThisDeviceOnly);
  CFDictionaryAddValue(Mutable, kSecValueData, v6);
  uint64_t v11 = SecItemAdd(Mutable, 0LL);
  if (v11 == -25299)
  {
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = 138412290;
      uint64_t v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "SecResult shows duplicate item, trying to update it. _saveSaltStoreKeychainData %@",  (uint8_t *)&v17,  0xCu);
    }

    CFDictionaryRemoveValue(Mutable, kSecValueData);
    uint64_t v13 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v13, kSecValueData, v6);
    uint64_t v11 = SecItemUpdate(Mutable, v13);
    CFRelease(v13);
  }

  if (!v11) {
    goto LABEL_17;
  }
  BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_1000BCDE4();
  }
LABEL_16:

  uint64_t v15 = 0;
LABEL_18:
  CFRelease(Mutable);

  return v15;
}
  }

  return v7;
}

    char v8 = 0LL;
    goto LABEL_18;
  }

  unint64_t v9 = objc_alloc(&OBJC_CLASS___NSMutableArray);
  char v8 = -[NSMutableArray initWithCapacity:](v9, "initWithCapacity:", v16);
  if (v16)
  {
    int v10 = 0LL;
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = (unint64_t)&v21[v10];
      if (!*(void *)v12 || !*(void *)(v12 + 8)) {
        break;
      }
      uint64_t v13 = -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  *(void *)v12,  *(void *)(v12 | 8));
      -[os_log_s setObject:atIndexedSubscript:](v8, "setObject:atIndexedSubscript:", v13, v10);

      int v10 = ++v11;
    }

    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Invalid certData", buf, 2u);
    }

    goto LABEL_17;
  }

  if (cf2) {
    CFRelease(cf2);
  }
  return v5;
}

    __break(0x5519u);
  }

  unint64_t v7 = a1[1];
  if (*a1 > v7) {
    goto LABEL_17;
  }
  uint64_t v11 = *a1;
  uint64_t v12 = v7;
  char v8 = ccder_blob_decode_tl(&v11, 24LL, &v13);
  uint64_t result = 0LL;
  if (v8)
  {
    unint64_t v6 = v13;
    if (v13 == 15) {
      goto LABEL_8;
    }
  }

  return result;
}

        __break(0x5513u);
        goto LABEL_18;
      }
    }
  }

  return result;
}

void sub_100016754( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100016764(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void *sub_100016788(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = a1;
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

uint64_t sub_1000167D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = sub_1000190C4((void *)a1);
  sub_100019174(v8 + 28, a2);
  *(void *)(a1 + 44std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *(void *)(a1 + 456) = 0LL;
  *(void *)(a1 + 464) = 0LL;
  *(void *)(a1 + 472) = a3;
  *(void *)(a1 + 480) = a4;
  *(_DWORD *)(a1 + 48std::ostream::~ostream(v2, v3 + 8) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  return a1;
}

void sub_100016834(_Unwind_Exception *a1)
{
}

void sub_100016850(uint64_t a1)
{
  if ((__int128 *)a1 != &xmmword_10014ED70)
  {
    dword_10014ED90 = *(_DWORD *)(a1 + 32);
    sub_1000192AC(&xmmword_10014ED70, *(uint64_t **)(a1 + 16), 0LL);
  }

void *sub_10001687C(uint64_t a1)
{
  return sub_10001688C(qword_10014ED50, a1);
}

void *sub_10001688C(void *a1, uint64_t a2)
{
  uint64_t v3 = v7;
  if (v7 == v6)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v6;
    goto LABEL_5;
  }

  if (v7)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

uint64_t sub_100016924(uint64_t result, uint64_t a2)
{
  *(void *)(result + 520) = a2;
  return result;
}

uint64_t sub_10001692C(uint64_t result, int a2, std::string *__str)
{
  if (!*(_DWORD *)(result + 488))
  {
    uint64_t v3 = result;
    *(_DWORD *)(result + 48std::ostream::~ostream(v2, v3 + 8) = a2;
    uint64_t v4 = result + 496;
    std::string::operator=((std::string *)(result + 496), __str);
    if (qword_10014ED68)
    {
      v12.__locale_ = *(std::locale::__imp **)(v3 + 520);
      return (*(uint64_t (**)(uint64_t, uint64_t, std::locale *))(*(void *)qword_10014ED68 + 48LL))( qword_10014ED68,  v3,  &v12);
    }

    else
    {
      unsigned int v5 = sub_10000A62C(&std::cerr, (uint64_t)"Encoder error: ", 15LL);
      int v6 = *(char *)(v3 + 519);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)(v3 + 496);
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v3 + 519);
      }
      else {
        uint64_t v8 = *(void *)(v3 + 504);
      }
      unint64_t v9 = sub_10000A62C(v5, v7, v8);
      std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24LL)));
      int v10 = std::locale::use_facet(&v12, &std::ctype<char>::id);
      uint64_t v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10LL);
      std::locale::~locale(&v12);
      std::ostream::put(v9, v11);
      return std::ostream::flush(v9);
    }
  }

  return result;
}

uint64_t sub_100016A54(uint64_t a1)
{
  return a1 + 496;
}

uint64_t sub_100016A5C(uint64_t a1)
{
  return a1 + 448;
}

uint64_t *sub_100016A64()
{
  return &qword_10014ED18;
}

void *sub_100016A70()
{
  return &unk_10014ED30;
}

void *sub_100016A7C()
{
  return &unk_10014ED40;
}

BOOL sub_100016A88(uint64_t a1)
{
  return *(_DWORD *)(a1 + 488) != 0;
}

uint64_t sub_100016A98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 488);
}

uint64_t sub_100016AA0(uint64_t a1)
{
  return a1 + 224;
}

std::string *sub_100016AA8(void *a1)
{
  uint64_t v1 = a1;
  *(_DWORD *)(a1[2] + 4LL) -= (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  (*(void (**)(void *))(*v1 + 48LL))(v1);
  (*(void (**)(void, void *))(*(void *)v1[1] + 32LL))(v1[1], v1);
  uint64_t v2 = v1[28];
  v1 += 28;
  *(_DWORD *)(v1[2] + 4LL) -= (*(uint64_t (**)(void *))(v2 + 16))(v1);
  (*(void (**)(void *))(*v1 + 48LL))(v1);
  (*(void (**)(void, void *))(*(void *)v1[1] + 32LL))(v1[1], v1);
  v1[28] = 0LL;
  v1[29] = 0LL;
  v1[30] = 0LL;
  *((_DWORD *)v1 + 66) = 0;
  return std::string::assign((std::string *)(v1 + 34), "");
}

BOOL sub_100016B60(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x40;
}

void sub_100016B70(uint64_t a1, uint64_t a2, char *a3, unint64_t a4)
{
  if (a4) {
    sub_100012F38(a2, *(char **)(a2 + 8), a3, &a3[a4], a4);
  }
}

void sub_100016BD8(unint64_t *a1, char a2, unint64_t a3, char a4)
{
  unint64_t v5 = 0xFFu >> (8 - a4);
  uint64_t v7 = (_BYTE *)a1[1];
  unint64_t v6 = a1[2];
  unint64_t v8 = a3 - v5;
  if (a3 >= v5)
  {
    char v11 = v5 | a2;
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v19 = *a1;
      uint64_t v20 = &v7[-*a1];
      unint64_t v21 = (unint64_t)(v20 + 1);
      unint64_t v22 = v6 - v19;
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v23 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v23 = v21;
      }
      if (v23) {
        unint64_t v24 = (unint64_t)operator new(v23);
      }
      else {
        unint64_t v24 = 0LL;
      }
      uint64_t v29 = (char *)(v24 + v23);
      v20[v24] = v11;
      std::locale v12 = &v20[v24 + 1];
      if (v7 == (_BYTE *)v19)
      {
        v24 += (unint64_t)v20;
      }

      else
      {
        uint64_t v30 = &v7[~v19];
        do
        {
          char v31 = *--v7;
          (v30--)[v24] = v31;
        }

        while (v7 != (_BYTE *)v19);
        uint64_t v7 = (_BYTE *)*a1;
      }

      *a1 = v24;
      a1[1] = (unint64_t)v12;
      a1[2] = (unint64_t)v29;
      if (v7) {
        operator delete(v7);
      }
    }

    else
    {
      *uint64_t v7 = v11;
      std::locale v12 = v7 + 1;
    }

    a1[1] = (unint64_t)v12;
    if (v8 < 0x80)
    {
      uint64_t v7 = v12;
      LOBYTE(v32) = v8;
LABEL_57:
      unint64_t v45 = a1[2];
      if ((unint64_t)v7 < v45)
      {
        *uint64_t v7 = v32;
        int v10 = v7 + 1;
        goto LABEL_59;
      }

      unint64_t v46 = *a1;
      v47 = &v7[-*a1];
      unint64_t v48 = (unint64_t)(v47 + 1);
      if ((uint64_t)(v47 + 1) >= 0)
      {
        unint64_t v49 = v45 - v46;
        if (2 * v49 > v48) {
          unint64_t v48 = 2 * v49;
        }
        if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v50 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v50 = v48;
        }
        if (v50) {
          unint64_t v18 = (unint64_t)operator new(v50);
        }
        else {
          unint64_t v18 = 0LL;
        }
        uint64_t v25 = (char *)(v18 + v50);
        v47[v18] = v32;
        uint64_t v26 = (uint64_t)&v47[v18 + 1];
        if (v7 == (_BYTE *)v46)
        {
          *a1 = (unint64_t)&v47[v18];
          a1[1] = v26;
          a1[2] = (unint64_t)v25;
LABEL_76:
          operator delete(v7);
          goto LABEL_77;
        }

        v51 = &v7[~v46];
        do
        {
          char v52 = *--v7;
          (v51--)[v18] = v52;
        }

        while (v7 != (_BYTE *)v46);
        goto LABEL_72;
      }

LABEL_78:
      sub_10000AA64();
    }

    while (1)
    {
      char v33 = v8 | 0x80;
      unint64_t v34 = a1[2];
      if ((unint64_t)v12 >= v34)
      {
        unint64_t v35 = *a1;
        uint64_t v36 = &v12[-*a1];
        unint64_t v37 = (unint64_t)(v36 + 1);
        unint64_t v38 = v34 - v35;
        if (2 * v38 > v37) {
          unint64_t v37 = 2 * v38;
        }
        if (v38 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v39 = v37;
        }
        if (v39) {
          unint64_t v40 = (unint64_t)operator new(v39);
        }
        else {
          unint64_t v40 = 0LL;
        }
        unint64_t v41 = (char *)(v40 + v39);
        v36[v40] = v33;
        uint64_t v7 = &v36[v40 + 1];
        if (v12 == (_BYTE *)v35)
        {
          *a1 = (unint64_t)&v36[v40];
          a1[1] = (unint64_t)v7;
          a1[2] = (unint64_t)v41;
        }

        else
        {
          std::string v42 = &v12[~v35];
          do
          {
            char v43 = *--v12;
            (v42--)[v40] = v43;
          }

          while (v12 != (_BYTE *)v35);
          std::locale v12 = (_BYTE *)*a1;
          *a1 = v40;
          a1[1] = (unint64_t)v7;
          a1[2] = (unint64_t)v41;
          if (!v12) {
            goto LABEL_56;
          }
        }

        operator delete(v12);
      }

      else
      {
        *std::locale v12 = v33;
        uint64_t v7 = v12 + 1;
      }

LABEL_56:
      a1[1] = (unint64_t)v7;
      unint64_t v32 = v8 >> 7;
      std::locale v12 = v7;
      BOOL v44 = v8 >= 0x4000;
      v8 >>= 7;
      if (!v44) {
        goto LABEL_57;
      }
    }
  }

  char v9 = a3 | a2;
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v13 = *a1;
    BOOL v14 = &v7[-*a1];
    unint64_t v15 = (unint64_t)(v14 + 1);
    if ((uint64_t)(v14 + 1) >= 0)
    {
      unint64_t v16 = v6 - v13;
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v15;
      }
      if (v17) {
        unint64_t v18 = (unint64_t)operator new(v17);
      }
      else {
        unint64_t v18 = 0LL;
      }
      uint64_t v25 = (char *)(v18 + v17);
      v14[v18] = v9;
      uint64_t v26 = (uint64_t)&v14[v18 + 1];
      if (v7 == (_BYTE *)v13)
      {
        v18 += (unint64_t)v14;
        goto LABEL_73;
      }

      uint64_t v27 = &v7[~v13];
      do
      {
        char v28 = *--v7;
        (v27--)[v18] = v28;
      }

      while (v7 != (_BYTE *)v13);
LABEL_72:
      uint64_t v7 = (_BYTE *)*a1;
LABEL_73:
      *a1 = v18;
      a1[1] = v26;
      a1[2] = (unint64_t)v25;
      if (!v7) {
        goto LABEL_77;
      }
      goto LABEL_76;
    }

    goto LABEL_78;
  }

  *uint64_t v7 = v9;
  int v10 = v7 + 1;
LABEL_59:
  uint64_t v26 = (uint64_t)v10;
LABEL_77:
  a1[1] = v26;
}

        unint64_t v37 = 0;
        goto LABEL_57;
      }

      size_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Cellular interface is suspended", buf, 2u);
      }

      -[APSCourierConnectionManager _handleConnectionSuspendedOnInterface:]( self,  "_handleConnectionSuspendedOnInterface:",  0LL);
LABEL_91:
      unint64_t v37 = 1;
LABEL_57:
      unint64_t v49 = -[APSNetworkMonitor shouldUseDualMode](self->_networkMonitor, "shouldUseDualMode");
      size_t v50 = self->_courierConnection;
      if (v49)
      {
        if (-[APSCourierConnection hasOpenConnectionOnInterface:](v50, "hasOpenConnectionOnInterface:", a7)
          || !-[APSCourierConnectionManager _isInternetReachableOnInterface:]( self,  "_isInternetReachableOnInterface:",  a7))
        {
          goto LABEL_79;
        }

        v51 = self;
        char v52 = a7;
        goto LABEL_71;
      }

      if (!-[APSCourierConnection hasOpenConnection](v50, "hasOpenConnection")
        && [v27 isInternetReachable])
      {
        v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v68 = self;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "%@: Reconnecting because of an interface change while disconnected.",  buf,  0xCu);
        }

        -[APSCourierConnectionManager _adjustConnection](self, "_adjustConnection");
        goto LABEL_79;
      }

      if (-[APSCourierConnection hasOpenConnectionOnInterface:]( self->_courierConnection,  "hasOpenConnectionOnInterface:",  0LL)
        && ((v37 | [v27 isWWANInterfaceUp]) & 1) == 0)
      {
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v68 = self;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "%@: WWAN interface went down. Attempting to switch to WiFi.",  buf,  0xCu);
        }

        v51 = self;
        char v52 = 1LL;
LABEL_71:
        -[APSCourierConnectionManager _adjustConnectionWithInterfacePreference:]( v51,  "_adjustConnectionWithInterfacePreference:",  v52);
      }

uint64_t sub_100016F20( uint64_t a1, unint64_t *a2, unsigned __int8 **a3, char *a4, unint64_t a5, int a6)
{
  uint64_t v11 = sub_100016FA0(a1, (uint64_t)a2, a3, &v15, &v14);
  uint64_t v12 = v11;
  if ((_DWORD)v11)
  {
    sub_100016B70(v11, (uint64_t)a2, a4, a5);
    if (a6) {
      sub_1000173A8(a1, a2, v15, v14);
    }
  }

  return v12;
}

uint64_t sub_100016FA0(uint64_t a1, uint64_t a2, unsigned __int8 **a3, void *a4, void *a5)
{
  unint64_t v7 = *(void *)a2;
  unint64_t v6 = *(_BYTE **)(a2 + 8);
  unint64_t v8 = &v6[-*(void *)a2];
  *a4 = v8;
  unint64_t v9 = a3[1] - *a3;
  if (v9 - 1 >= 0x40)
  {
    std::to_string(&v49, v9);
    unint64_t v16 = std::string::insert(&v49, 0LL, "key has invalid length ");
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    sub_10001692C(a1, 1, &__p);
    unint64_t v18 = (void *)v49.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }

  if (v9 != 1 || (unsigned int v13 = **a3, v13 > 0xF))
  {
    unsigned int v19 = sub_100014414(a1, a3);
    if ((v19 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(void, uint64_t, unsigned __int8 **))(**(void **)(a1 + 8) + 16LL))( *(void *)(a1 + 8),  a1,  a3))
      {
        ++*(_DWORD *)(*(void *)(a1 + 16) + 4LL);
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a1 + 32LL))(a1, a3);
      }

      sub_100016BD8((unint64_t *)a2, 16, (unint64_t)&a3[1][~(unint64_t)*a3], 4);
      sub_100012784(a2, *(char **)(a2 + 8), (char *)*a3, (char *)a3[1], a3[1] - *a3);
      uint64_t v15 = *(void *)(a2 + 8);
      goto LABEL_59;
    }

    if (v19 < 0x20)
    {
      char v25 = v19 | 0x20;
      uint64_t v27 = *(_BYTE **)(a2 + 8);
      unint64_t v26 = *(void *)(a2 + 16);
      if ((unint64_t)v27 < v26)
      {
        *uint64_t v27 = v25;
        uint64_t v15 = (uint64_t)(v27 + 1);
        goto LABEL_58;
      }

      unint64_t v32 = *(void *)a2;
      char v33 = &v27[-*(void *)a2];
      unint64_t v34 = (unint64_t)(v33 + 1);
      if ((uint64_t)(v33 + 1) >= 0)
      {
        unint64_t v35 = v26 - v32;
        if (2 * v35 > v34) {
          unint64_t v34 = 2 * v35;
        }
        if (v35 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v36 = v34;
        }
        if (v36) {
          unint64_t v37 = operator new(v36);
        }
        else {
          unint64_t v37 = 0LL;
        }
        std::string v42 = &v33[(void)v37];
        char v43 = (char *)v37 + v36;
        BOOL v44 = &v33[(void)v37];
        _BYTE *v44 = v25;
        uint64_t v15 = (uint64_t)(v44 + 1);
        if (v27 == (_BYTE *)v32)
        {
          unint64_t v37 = v42;
        }

        else
        {
          unint64_t v45 = &v27[~v32];
          do
          {
            char v46 = *--v27;
            (v45--)[(void)v37] = v46;
          }

          while (v27 != (_BYTE *)v32);
          uint64_t v27 = *(_BYTE **)a2;
        }

        *(void *)a2 = v37;
        *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v15;
        *(void *)(a2 + 16) = v43;
        if (!v27) {
          goto LABEL_58;
        }
        unint64_t v41 = v27;
LABEL_57:
        operator delete(v41);
        goto LABEL_58;
      }

LABEL_61:
      sub_10000AA64();
    }

    std::to_string(&v47, v19);
    uint64_t v20 = std::string::insert(&v47, 0LL, "key index ");
    __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0LL;
    v20->__r_.__value_.__l.__cap_ = 0LL;
    v20->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v22 = std::string::append(&v49, " is greater than 32");
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    sub_10001692C(a1, 6, &__str);
    unint64_t v18 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_10:
    operator delete(v18);
    return 0LL;
  }

  unint64_t v14 = *(void *)(a2 + 16);
  if ((unint64_t)v6 >= v14)
  {
    unint64_t v28 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) >= 0)
    {
      unint64_t v29 = v14 - v7;
      if (2 * v29 > v28) {
        unint64_t v28 = 2 * v29;
      }
      if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v30 = v28;
      }
      if (v30) {
        char v31 = operator new(v30);
      }
      else {
        char v31 = 0LL;
      }
      unint64_t v38 = &v31[v30];
      v8[(void)v31] = v13;
      uint64_t v15 = (uint64_t)&v8[(void)v31 + 1];
      if (v6 == (_BYTE *)v7)
      {
        char v31 = &v8[(void)v31];
      }

      else
      {
        size_t v39 = &v6[~v7];
        do
        {
          char v40 = *--v6;
          (v39--)[(void)v31] = v40;
        }

        while (v6 != (_BYTE *)v7);
        unint64_t v6 = *(_BYTE **)a2;
      }

      *(void *)a2 = v31;
      *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v15;
      *(void *)(a2 + 16) = v38;
      if (!v6) {
        goto LABEL_58;
      }
      unint64_t v41 = v6;
      goto LABEL_57;
    }

    goto LABEL_61;
  }

  *unint64_t v6 = v13;
  uint64_t v15 = (uint64_t)(v6 + 1);
LABEL_58:
  *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v15;
LABEL_59:
  *a5 = v15 - *(void *)a2;
  return 1LL;
}

void sub_100017330( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000173A8(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5 = (char *)a2[1];
  unint64_t v6 = (char *)(*a2 + a4);
  if ((unint64_t)(v5 - v6) >= 2)
  {
    std::string __p = 0LL;
    unsigned int v13 = 0LL;
    uint64_t v14 = 0LL;
    sub_100012784((uint64_t)&__p, 0LL, v6, v5, v5 - v6);
    unsigned int v10 = sub_100014414(a1 + 224, (unsigned __int8 **)&__p);
    if ((v10 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(void, uint64_t, void **))(**(void **)(a1 + 232) + 16LL))( *(void *)(a1 + 232),  a1 + 224,  &__p))
      {
        ++*(_DWORD *)(*(void *)(a1 + 240) + 4LL);
        (*(void (**)(uint64_t, void **))(*(void *)(a1 + 224) + 32LL))(a1 + 224, &__p);
        *(_BYTE *)(*a2 + a3) |= 0x40u;
      }
    }

    else
    {
      *(_BYTE *)(*a2 + a3) |= 0x80u;
      unint64_t v11 = a2[1] - *a2;
      if (a4 <= v11)
      {
        if (a4 < v11) {
          a2[1] = *a2 + a4;
        }
      }

      else
      {
        sub_100019CD8(a2, a4 - v11);
      }

      sub_100016BD8(a2, 0, v10, 8);
    }

    if (__p)
    {
      unsigned int v13 = __p;
      operator delete(__p);
    }
  }

void sub_1000174DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000174FC(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a3;
  if (a3[23] >= 0) {
    unint64_t v5 = a3[23];
  }
  else {
    unint64_t v5 = *((void *)a3 + 1);
  }
  sub_100016BD8((unint64_t *)a2, 64, v5, 5);
  if (v3[23] < 0)
  {
    uint64_t v6 = *((void *)v3 + 1);
    if (!v6) {
      return;
    }
    uint64_t v3 = *(char **)v3;
    goto LABEL_9;
  }

  uint64_t v6 = v3[23];
  if (v3[23]) {
LABEL_9:
  }
    sub_100012CC8((char **)a2, *(char **)(a2 + 8), v3, &v3[v6], v6);
}

uint64_t sub_10001757C(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, char *a4, int a5)
{
  uint64_t v9 = sub_100016FA0(a1, (uint64_t)a2, a3, &v13, &v12);
  uint64_t v10 = v9;
  if ((_DWORD)v9)
  {
    sub_1000174FC(v9, (uint64_t)a2, a4);
    if (a5) {
      sub_1000173A8(a1, a2, v13, v12);
    }
  }

  return v10;
}

void sub_1000175F4(int a1, void *a2, uint64_t a3)
{
  if ((unint64_t)a3 <= 0x1F)
  {
    char v4 = a3 | 0x80;
    uint64_t v6 = (char *)a2[1];
    unint64_t v5 = a2[2];
    if ((unint64_t)v6 < v5)
    {
      *uint64_t v6 = v4;
      uint64_t v7 = (uint64_t)(v6 + 1);
LABEL_45:
      a2[1] = v7;
      return;
    }

    unint64_t v16 = (char *)*a2;
    __int128 v17 = &v6[-*a2];
    unint64_t v18 = (unint64_t)(v17 + 1);
    if ((uint64_t)(v17 + 1) >= 0)
    {
      unint64_t v19 = v5 - (void)v16;
      if (2 * v19 > v18) {
        unint64_t v18 = 2 * v19;
      }
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v20 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v20 = v18;
      }
      if (v20) {
        __int128 v21 = (char *)operator new(v20);
      }
      else {
        __int128 v21 = 0LL;
      }
      unint64_t v28 = &v21[v20];
      v17[(void)v21] = v4;
      uint64_t v7 = (uint64_t)&v17[(void)v21 + 1];
      if (v6 == v16)
      {
        __int128 v21 = &v17[(void)v21];
      }

      else
      {
        unint64_t v29 = &v6[~(unint64_t)v16];
        do
        {
          char v30 = *--v6;
          (v29--)[(void)v21] = v30;
        }

        while (v6 != v16);
        uint64_t v6 = (char *)*a2;
      }

      *a2 = v21;
      a2[1] = v7;
      a2[2] = v28;
      if (v6) {
        operator delete(v6);
      }
      goto LABEL_45;
    }

LABEL_51:
    sub_10000AA64();
  }

  uint64_t v8 = 0LL;
  if (a3 >= 0) {
    unint64_t v9 = a3;
  }
  else {
    unint64_t v9 = -a3;
  }
  if (a3 >= 0) {
    char v10 = -96;
  }
  else {
    char v10 = -88;
  }
  while (1)
  {
    v34[v8 + 7] = v9;
    if (v9 < 0x100) {
      break;
    }
    v9 >>= 8;
    if (--v8 == -8)
    {
      int v11 = 8;
      goto LABEL_14;
    }
  }

  int v11 = -(int)v8;
LABEL_14:
  char v12 = v11 | v10;
  uint64_t v14 = (char *)a2[1];
  unint64_t v13 = a2[2];
  if ((unint64_t)v14 >= v13)
  {
    unint64_t v22 = (char *)*a2;
    __int128 v23 = &v14[-*a2];
    unint64_t v24 = (unint64_t)(v23 + 1);
    unint64_t v25 = v13 - (void)v22;
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v26 = v24;
    }
    if (v26) {
      uint64_t v27 = (char *)operator new(v26);
    }
    else {
      uint64_t v27 = 0LL;
    }
    char v31 = &v27[v26];
    v23[(void)v27] = v12;
    uint64_t v15 = &v23[(void)v27 + 1];
    if (v14 == v22)
    {
      uint64_t v27 = &v23[(void)v27];
    }

    else
    {
      unint64_t v32 = &v14[~(unint64_t)v22];
      do
      {
        char v33 = *--v14;
        (v32--)[(void)v27] = v33;
      }

      while (v14 != v22);
      uint64_t v14 = (char *)*a2;
    }

    *a2 = v27;
    a2[1] = v15;
    a2[2] = v31;
    if (v14) {
      operator delete(v14);
    }
  }

  else
  {
    char *v14 = v12;
    uint64_t v15 = v14 + 1;
  }

  a2[1] = v15;
  sub_100012F38((uint64_t)a2, v15, &v34[-v11 + 7], (char *)&v35, (char *)&v35 - &v34[-v11 + 7]);
}

  __break(0x5515u);
  return result;
}

uint64_t sub_10001784C(uint64_t a1, unint64_t *a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  uint64_t v9 = sub_100016FA0(a1, (uint64_t)a2, a3, &v13, &v12);
  uint64_t v10 = v9;
  if ((_DWORD)v9)
  {
    sub_1000175F4(v9, a2, a4);
    if (a5) {
      sub_1000173A8(a1, a2, v13, v12);
    }
  }

  return v10;
}

void sub_1000178C4(uint64_t a1, void *a2, int a3)
{
  if (a3) {
    char v4 = -31;
  }
  else {
    char v4 = -32;
  }
  uint64_t v6 = (char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)*a2;
    uint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    unint64_t v11 = v5 - (void)v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      uint64_t v13 = (char *)operator new(v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = &v13[v12];
    v9[(void)v13] = v4;
    uint64_t v7 = (uint64_t)&v9[(void)v13 + 1];
    if (v6 == v8)
    {
      uint64_t v13 = &v9[(void)v13];
    }

    else
    {
      uint64_t v15 = &v6[~(unint64_t)v8];
      do
      {
        char v16 = *--v6;
        (v15--)[(void)v13] = v16;
      }

      while (v6 != v8);
      uint64_t v6 = (char *)*a2;
    }

    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    *uint64_t v6 = v4;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }

  a2[1] = v7;
}

uint64_t sub_1000179B8(uint64_t a1, void *a2, unsigned __int8 **a3, int a4)
{
  uint64_t v6 = sub_100016FA0(a1, (uint64_t)a2, a3, &v10, &v9);
  uint64_t v7 = v6;
  if ((_DWORD)v6) {
    sub_1000178C4(v6, a2, a4);
  }
  return v7;
}

uint64_t sub_100017A0C(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  CFIndex Length = CFDataGetLength(theData);
  BytePtr = (char *)CFDataGetBytePtr(theData);
  if (Length < 0 || !BytePtr && Length)
  {
    sub_100012960(&__p, "invalid CFData value");
    sub_10001692C(a1, 2, &__p);
    return 0LL;
  }

  else
  {
    sub_100016B70((uint64_t)BytePtr, a2, BytePtr, Length);
    return 1LL;
  }

void sub_100017AAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100017AC8(uint64_t a1, uint64_t a2, CFTypeRef cf)
{
  unint64_t v11 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (sub_10000A280((CFStringRef *)&v11, &v12))
  {
    if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v12.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v12.__r_.__value_.__l.__size_;
    }
    std::string::size_type v6 = *(void *)(a1 + 480);
    uint64_t v7 = sub_10000A5E8(&v11);
    if (size <= v6)
    {
      sub_1000174FC((uint64_t)v7, a2, (char *)&v12);
      uint64_t v8 = 1LL;
      goto LABEL_13;
    }
  }

  else
  {
    sub_10000A5E8(&v11);
  }

  sub_100012960(&__p, "invalid CFString value");
  sub_10001692C(a1, 2, &__p);
  uint64_t v8 = 0LL;
LABEL_13:
  return v8;
}

void sub_100017BAC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100017BF4(uint64_t a1, void *a2, CFNumberRef number)
{
  if (CFNumberIsFloatType(number) || (int Value = CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr)) == 0)
  {
    sub_100012960(&__p, "invalid number");
    sub_10001692C(a1, 2, &__p);
    return 0LL;
  }

  else
  {
    sub_1000175F4(Value, a2, valuePtr);
    return 1LL;
  }

void sub_100017C90( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100017CAC(int a1, void *a2, CFBooleanRef BOOLean)
{
  uint64_t Value = CFBooleanGetValue(BOOLean);
  sub_1000178C4(Value, a2, Value != 0);
  return 1LL;
}

BOOL sub_100017CE4(uint64_t a1, unint64_t *a2, CFDictionaryRef theDict, int a4)
{
  if (a4 >= 5)
  {
    sub_100012960(&__str, "dictionary is too deep");
    sub_10001692C(a1, 3, &__str);
    if ((char)__str.__r_.__value_.__s.__size_ < 0)
    {
      unint64_t v5 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_7:
      operator delete(v5);
      return 0;
    }

    return 0;
  }

  unint64_t Count = CFDictionaryGetCount(theDict);
  if (Count >= 0x401)
  {
    sub_100012960(&v33, "dictionary is too large");
    sub_10001692C(a1, 2, &v33);
    if ((char)v33.__r_.__value_.__s.__size_ < 0)
    {
      unint64_t v5 = (void *)v33.__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }

    return 0;
  }

  int64_t v12 = Count;
  sub_100016BD8(a2, 192, Count, 4);
  values[0] = 0LL;
  sub_10000AAF0(keys, v12, values);
  v29.__r_.__value_.__r.__words[0] = 0LL;
  sub_10000AAF0(values, v12, &v29);
  CFDictionaryGetKeysAndValues(theDict, (const void **)keys[0], (const void **)values[0]);
  if (!v12)
  {
    BOOL v10 = 1;
    goto LABEL_40;
  }

  uint64_t v13 = 0LL;
  BOOL v10 = 0;
  uint64_t v14 = (a4 + 1);
  while (1)
  {
    CFTypeID v15 = CFGetTypeID(keys[0][v13]);
    if (v15 != CFStringGetTypeID()) {
      break;
    }
    memset(&v29, 0, sizeof(v29));
    char v16 = keys[0][v13];
    std::string __p = v16;
    if (v16) {
      CFRetain(v16);
    }
    if (!sub_10000A280((CFStringRef *)&__p, &v29))
    {
      sub_10000A5E8((const void **)&__p);
LABEL_29:
      sub_100012960(&v28, "dictionary has invalid key");
      sub_10001692C(a1, 2, &v28);
      int v24 = 1;
      goto LABEL_32;
    }

    std::string::size_type size = v29.__r_.__value_.__s.__size_;
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v29.__r_.__value_.__l.__size_;
    }
    unint64_t v18 = size - 1;
    sub_10000A5E8((const void **)&__p);
    if (v18 >= 0x40) {
      goto LABEL_29;
    }
    std::string __p = 0LL;
    size_t v26 = 0LL;
    uint64_t v27 = 0LL;
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v19 = &v29;
    }
    else {
      unint64_t v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    if ((v29.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v20 = v29.__r_.__value_.__s.__size_;
    }
    else {
      uint64_t v20 = v29.__r_.__value_.__l.__size_;
    }
    sub_100012CC8((char **)&__p, 0LL, (char *)v19, (char *)v19 + v20, v20);
    __int128 v21 = values[0][v13];
    BOOL v22 = sub_100019BD8(&xmmword_10014ED70, (unsigned __int8 *)&v29) != 0LL;
    int v23 = sub_1000180A8(a1, a2, &__p, v21, v14, v22);
    if (__p)
    {
      size_t v26 = __p;
      operator delete(__p);
    }

    int v24 = v23 ^ 1;
LABEL_32:
    if (!v24)
    {
      BOOL v10 = v12 <= ++v13;
      if (v12 != v13) {
        continue;
      }
    }

    goto LABEL_40;
  }

  sub_100012960(&v30, "dictionary has non-string key");
  sub_10001692C(a1, 2, &v30);
LABEL_40:
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }

  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }

  return v10;
}

void sub_100017FD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, void *a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000180A8( uint64_t a1, unint64_t *a2, unsigned __int8 **a3, const void *a4, int a5, int a6)
{
  char v13 = 0;
  uint64_t v11 = sub_1000182D4(a1, a2, a4, a5, &v13);
  if ((_DWORD)v11 && v13 && a6) {
    sub_1000173A8(a1, a2, v15, v14);
  }
  return v11;
}

uint64_t sub_100018148(uint64_t a1, unint64_t *a2, CFArrayRef theArray, int a4)
{
  if (a4 >= 5)
  {
    sub_100012960(&__str, "array is too deep");
    sub_10001692C(a1, 3, &__str);
    if ((char)__str.__r_.__value_.__s.__size_ < 0)
    {
      p_str = &__str;
LABEL_7:
      operator delete(p_str->__r_.__value_.__l.__data_);
      return 0LL;
    }

    return 0LL;
  }

  unint64_t Count = CFArrayGetCount(theArray);
  if (Count >= 0x401)
  {
    sub_100012960(&v16, "array is too large");
    sub_10001692C(a1, 2, &v16);
    if ((char)v16.__r_.__value_.__s.__size_ < 0)
    {
      p_str = &v16;
      goto LABEL_7;
    }

    return 0LL;
  }

  int64_t v10 = Count;
  sub_100016BD8(a2, 208, Count, 4);
  if (!v10) {
    return 1LL;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0LL);
  uint64_t result = sub_1000182D4(a1, (int)a2, ValueAtIndex);
  if ((_DWORD)result)
  {
    CFIndex v12 = 1LL;
    do
    {
      CFIndex v13 = v12;
      if (v10 == v12) {
        break;
      }
      unint64_t v14 = CFArrayGetValueAtIndex(theArray, v12);
      char v15 = sub_1000182D4(a1, (int)a2, v14);
      CFIndex v12 = v13 + 1;
    }

    while ((v15 & 1) != 0);
    return v13 >= v10;
  }

  return result;
}

void sub_1000182A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000182D4(uint64_t a1, unint64_t *a2, CFTypeRef cf, int a4, _BYTE *a5)
{
  if (!cf)
  {
    sub_100012960(&__p, "value is null");
    sub_10001692C(a1, 6, &__p);
    CFIndex v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_6:
    operator delete(v12);
    return 0LL;
  }

  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 == CFDataGetTypeID())
  {
    *a5 = 1;
    return sub_100017A0C(a1, (uint64_t)a2, (CFDataRef)cf);
  }

  if (v10 == CFStringGetTypeID())
  {
    *a5 = 1;
    return sub_100017AC8(a1, (uint64_t)a2, cf);
  }

  if (v10 == CFNumberGetTypeID())
  {
    *a5 = 1;
    return sub_100017BF4(a1, a2, (CFNumberRef)cf);
  }

  if (v10 == CFBooleanGetTypeID())
  {
    uint64_t v13 = 1LL;
    *a5 = 1;
    uint64_t Value = CFBooleanGetValue((CFBooleanRef)cf);
    sub_1000178C4(Value, a2, Value != 0);
    return v13;
  }

  if (v10 == CFArrayGetTypeID())
  {
    *a5 = 0;
    return sub_100018148(a1, a2, (CFArrayRef)cf, a4);
  }

  if (v10 != CFDictionaryGetTypeID())
  {
    std::to_string(&v17, v10);
    char v15 = std::string::insert(&v17, 0LL, "CoreFoundation value with unsupported type ");
    __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0LL;
    v15->__r_.__value_.__l.__cap_ = 0LL;
    v15->__r_.__value_.__r.__words[0] = 0LL;
    sub_10001692C(a1, 2, &__str);
    CFIndex v12 = (void *)v17.__r_.__value_.__r.__words[0];
    goto LABEL_6;
  }

  *a5 = 0;
  return sub_100017CE4(a1, a2, (CFDictionaryRef)cf, a4);
}

void sub_100018510( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018558(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_BYTE *)(result + std::ostream::~ostream(v2, v3 + 8) = -1;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 40) = 5LL;
  return result;
}

uint64_t sub_100018574(uint64_t result, char a2)
{
  *(_BYTE *)(result + std::ostream::~ostream(v2, v3 + 8) = a2;
  return result;
}

uint64_t sub_10001857C(uint64_t *a1, unint64_t __val)
{
  uint64_t v3 = *a1;
  if (*(void *)(*a1 + 480) < __val)
  {
    std::to_string(&v25, __val);
    char v4 = std::string::insert(&v25, 0LL, "attribute is too large, ");
    __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0LL;
    v4->__r_.__value_.__l.__cap_ = 0LL;
    v4->__r_.__value_.__r.__words[0] = 0LL;
    std::string::size_type v6 = std::string::append(&v26, " > ");
    __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0LL;
    v6->__r_.__value_.__l.__cap_ = 0LL;
    v6->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v24, *(void *)(*a1 + 480));
    if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v8 = &v24;
    }
    else {
      uint64_t v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = v24.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = v24.__r_.__value_.__l.__size_;
    }
    CFTypeID v10 = std::string::append(&v27, (const std::string::value_type *)v8, size);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    sub_10001692C(v3, 5, &__str);
    CFIndex v12 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_19;
  }

  unint64_t v13 = __val + a1[5] + 3;
  a1[5] = v13;
  if (v13 <= *(void *)(v3 + 472)) {
    return 1LL;
  }
  std::to_string(&v25, v13);
  unint64_t v14 = std::string::insert(&v25, 0LL, "frame is too large, ");
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v16 = std::string::append(&v26, " > ");
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v24, *(void *)(*a1 + 472));
  if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v18 = &v24;
  }
  else {
    unint64_t v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v19 = v24.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v19 = v24.__r_.__value_.__l.__size_;
  }
  uint64_t v20 = std::string::append(&v27, (const std::string::value_type *)v18, v19);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  sub_10001692C(v3, 4, &__p);
  if ((char)__p.__r_.__value_.__s.__size_ < 0)
  {
    CFIndex v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_19:
    operator delete(v12);
  }

void sub_1000187AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001884C(uint64_t a1, char a2, char *a3, unint64_t __val, int a5)
{
  char v12 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488LL))
  {
    if (sub_10001857C((uint64_t *)a1, __val))
    {
      uint64_t v9 = *(void *)a1;
      sub_100012EBC(__p, 1uLL, &v12);
      sub_100016F20(v9, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, __val, a5);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_1000188F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018910(uint64_t a1, char a2, uint64_t a3, int a4)
{
  char v11 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488LL))
  {
    else {
      unint64_t v7 = *(void *)(a3 + 8);
    }
    if (sub_10001857C((uint64_t *)a1, v7))
    {
      uint64_t v8 = *(void *)a1;
      sub_100012EBC(__p, 1uLL, &v11);
      sub_10001757C(v8, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, (char *)a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_1000189C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000189DC(uint64_t a1, char a2, char a3, int a4)
{
  return sub_1000189E4(a1, a2, a3, a4);
}

uint64_t sub_1000189E4(uint64_t a1, char a2, int a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488LL))
  {
    if (sub_10001857C((uint64_t *)a1, 1uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_100012EBC(__p, 1uLL, &v10);
      sub_10001784C(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_100018A84( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018AA0(uint64_t a1, char a2, __int16 a3, int a4)
{
  return sub_100018AA8(a1, a2, a3, a4);
}

uint64_t sub_100018AA8(uint64_t a1, char a2, int a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488LL))
  {
    if (sub_10001857C((uint64_t *)a1, 2uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_100012EBC(__p, 1uLL, &v10);
      sub_10001784C(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_100018B48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018B68(uint64_t a1, char a2, int a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488LL))
  {
    if (sub_10001857C((uint64_t *)a1, 4uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_100012EBC(__p, 1uLL, &v10);
      sub_10001784C(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_100018C08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100018C28(uint64_t a1, char a2, uint64_t a3, int a4)
{
  char v10 = a2;
  if (!*(_DWORD *)(*(void *)a1 + 488LL))
  {
    if (sub_10001857C((uint64_t *)a1, 8uLL))
    {
      uint64_t v7 = *(void *)a1;
      sub_100012EBC(__p, 1uLL, &v10);
      sub_10001784C(v7, (unint64_t *)(a1 + 16), (unsigned __int8 **)__p, a3, a4);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_100018CC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100018CE4(uint64_t *a1, char a2, int a3)
{
  char v8 = a2;
  if (!*(_DWORD *)(*a1 + 488))
  {
    if (sub_10001857C(a1, 1uLL))
    {
      uint64_t v5 = *a1;
      sub_100012EBC(__p, 1uLL, &v8);
      sub_1000179B8(v5, a1 + 2, (unsigned __int8 **)__p, a3);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }

  return a1;
}

void sub_100018D74( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_100018D90(unint64_t *a1, char a2, const UInt8 *a3, unint64_t __val)
{
  char v19 = a2;
  if (!*(_DWORD *)(*a1 + 488) && sub_10001857C((uint64_t *)a1, __val))
  {
    uint64_t v7 = (uint64_t *)sub_100009AA0(&v18, a3, __val);
    __int128 v17 = 0LL;
    if ((sub_10000A438(v7, &v17) & 1) != 0)
    {
      CFTypeID v8 = CFGetTypeID(v17);
      Typeint ID = CFDictionaryGetTypeID();
      uint64_t v10 = *a1;
      if (v8 == TypeID)
      {
        sub_100012EBC(v14, 1uLL, &v19);
        sub_1000180A8(v10, a1 + 2, v14, v17, 0, 0);
        char v11 = v14[0];
        if (v14[0])
        {
          v14[1] = v14[0];
LABEL_11:
          operator delete(v11);
        }
      }

      else
      {
        sub_100012960(&__p, "bplist is not a dictionary");
        sub_10001692C(v10, 2, &__p);
        if ((char)__p.__r_.__value_.__s.__size_ < 0)
        {
          char v11 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
          goto LABEL_11;
        }
      }
    }

    else
    {
      uint64_t v12 = *a1;
      sub_100012960(&__str, "invalid bplist");
      sub_10001692C(v12, 2, &__str);
      if ((char)__str.__r_.__value_.__s.__size_ < 0)
      {
        char v11 = (unsigned __int8 *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_11;
      }
    }

    sub_10000A5E8(&v17);
    sub_10000A5E8((const void **)&v18);
  }

  return a1;
}

void sub_100018ED4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10000A5E8((const void **)(v23 - 56));
  sub_10000A5E8((const void **)(v23 - 48));
  _Unwind_Resume(a1);
}

BOOL sub_100018F34(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)a1 + 488LL);
  if (!v2)
  {
    unint64_t v6 = *(void *)a2;
    uint64_t v5 = *(_BYTE **)(a2 + 8);
    uint64_t v7 = &v5[-*(void *)a2];
    unint64_t v8 = *(void *)(a2 + 16);
    if ((unint64_t)v5 >= v8)
    {
      unint64_t v10 = (unint64_t)(v7 + 1);
      unint64_t v11 = v8 - v6;
      if (2 * v11 > v10) {
        unint64_t v10 = 2 * v11;
      }
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v10;
      }
      if (v12) {
        unint64_t v13 = operator new(v12);
      }
      else {
        unint64_t v13 = 0LL;
      }
      unint64_t v14 = &v13[v12];
      v7[(void)v13] = *(_BYTE *)(a1 + 8);
      uint64_t v9 = (uint64_t)&v7[(void)v13 + 1];
      if (v5 == (_BYTE *)v6)
      {
        unint64_t v13 = &v7[(void)v13];
      }

      else
      {
        __int128 v15 = &v5[~v6];
        do
        {
          char v16 = *--v5;
          (v15--)[(void)v13] = v16;
        }

        while (v5 != (_BYTE *)v6);
        uint64_t v5 = *(_BYTE **)a2;
      }

      *(void *)a2 = v13;
      *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v9;
      *(void *)(a2 + 16) = v14;
      if (v5) {
        operator delete(v5);
      }
    }

    else
    {
      _BYTE *v5 = *(_BYTE *)(a1 + 8);
      uint64_t v9 = (uint64_t)(v5 + 1);
    }

    *(void *)(a2 + std::ostream::~ostream(v2, v3 + 8) = v9;
    sub_100016BD8((unint64_t *)a2, 0, *(void *)(a1 + 24) - *(void *)(a1 + 16), 8);
    sub_100012784( a2,  *(char **)(a2 + 8),  *(char **)(a1 + 16),  *(char **)(a1 + 24),  *(void *)(a1 + 24) - *(void *)(a1 + 16));
    __int128 v17 = *(void **)a1;
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a2 + 8) - (void)&v7[*(void *)a2];
    uint64_t v20 = *(void *)(*(void *)a1 + 456LL) + v18;
    v17[56] = *(void *)(*(void *)a1 + 448LL) + 1LL;
    v17[57] = v20;
    v17[58] += v19;
    ++qword_10014ED18;
    unk_10014ED20 += v18;
    qword_10014ED28 += v19;
  }

  return v2 == 0;
}

void *sub_1000190C4(void *a1)
{
  int v2 = operator new(8uLL);
  void *v2 = off_10011E108;
  uint64_t v5 = v2;
  sub_1000142A0((uint64_t)a1, (uint64_t *)&v5, (uint64_t)&unk_10014ED30);
  uint64_t v3 = (uint64_t)v5;
  uint64_t v5 = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  *a1 = &off_10011E348;
  return a1;
}

void sub_10001913C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100019160(uint64_t a1)
{
  uint64_t v1 = sub_100014390(a1);
  operator delete(v1);
}

void *sub_100019174(void *a1, uint64_t a2)
{
  char v4 = operator new(0x18uLL);
  *char v4 = off_10011E1C8;
  v4[1] = 0LL;
  v4[2] = a2;
  uint64_t v7 = v4;
  sub_1000142A0((uint64_t)a1, (uint64_t *)&v7, (uint64_t)&unk_10014ED40);
  uint64_t v5 = (uint64_t)v7;
  uint64_t v7 = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  *a1 = &off_10011E3A8;
  return a1;
}

void sub_1000191F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8LL))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10001921C(uint64_t a1)
{
  uint64_t v1 = sub_100014390(a1);
  operator delete(v1);
}

uint64_t sub_100019230(uint64_t a1)
{
  int v2 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100019268(int a1, void **__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      operator delete(v2);
      int v2 = v3;
    }

    while (v3);
  }

void sub_1000192AC(void *a1, uint64_t *a2, uint64_t *a3)
{
  char v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0LL; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0LL;
    unint64_t v8 = (void **)a1[2];
    a1[2] = 0LL;
    a1[3] = 0LL;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }

    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 2), (const std::string *)(v4 + 2));
        unint64_t v10 = (void **)*v8;
        sub_1000193A4(a1, v8);
        char v4 = (uint64_t *)*v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }

      while (!v11);
    }

    sub_100019268((int)a1, v10);
  }

  while (v4 != a3)
  {
    sub_100019904(a1, (uint64_t)(v4 + 2));
    char v4 = (uint64_t *)*v4;
  }

void sub_100019374(void *a1)
{
}

void sub_100019390(_Unwind_Exception *a1)
{
}

void *sub_1000193A4(void *a1, void *a2)
{
  char v4 = (unsigned __int8 *)(a2 + 2);
  unint64_t v5 = sub_1000137DC((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  uint64_t v6 = sub_100019404((uint64_t)a1, v5, v4);
  sub_100019574(a1, a2, v6);
  return a2;
}

unsigned __int8 *sub_100019404(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1LL;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_10001965C(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }

  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }

  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }

  __int128 v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    uint64_t v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }

        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }

        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? sub_100013C84(v6, v18 + 16, a3) : 0;
        if ((v19 & (v22 ^ 1) & 1) != 0) {
          break;
        }
        v19 |= v22;
        __int128 v17 = *(unsigned __int8 **)v17;
        uint64_t v18 = *(unsigned __int8 **)v17;
      }

      while (*(void *)v17);
    }
  }

  return v17;
}

void *sub_100019574(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }

  else
  {
    v4 &= *(void *)&v3 - 1LL;
  }

  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }

  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8LL);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }

    else
    {
      v6 &= *(void *)&v3 - 1LL;
    }

    if (v6 != v4) {
      goto LABEL_18;
    }
  }

LABEL_19:
  }
}

  return v8;
}

  float v9 = (*((_BYTE *)v4 + 44) & 2) == 0;
  if ((has & 2) != 0)
  {
    if ((*((_BYTE *)v4 + 44) & 2) == 0 || self->_messageReplayCount != *((void *)v4 + 2)) {
      goto LABEL_22;
    }
    float v9 = 1;
  }

    __break(0x5519u);
    goto LABEL_19;
  }

  return result;
}

          __break(0x5519u);
          return result;
        }

LABEL_19:
  ++result[3];
  return result;
}

  return v17;
}
}

    __break(0x5519u);
LABEL_20:
    __break(0x5513u);
  }

  return v9 == v10 + v11;
}

void sub_10001965C(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2LL;
  }

  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }

  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }

    else
    {
      uint64_t v7 = 1LL << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }

    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4) {
LABEL_16:
    }
      sub_100019738(a1, prime);
  }

void sub_100019738(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_10000A9FC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0LL;
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0LL;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }

      else
      {
        v8 &= a2 - 1;
      }

      *(void *)(*(void *)a1 + 8 * vstd::ostream::~ostream(v2, v3 + 8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }

          else
          {
            v13 &= a2 - 1;
          }

          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }

          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = sub_100013C84(a1 + 32, v12 + 16, v14 + 16);
                __int128 v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }

              uint8x8_t v14 = *(unsigned __int8 **)v15;
              __int128 v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }

            else
            {
              __int128 v17 = v12;
            }

            *uint64_t v7 = v14;
            *(void *)__int128 v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }

          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }

          unint64_t v12 = *v7;
        }

        while (*v7);
      }
    }
  }

  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0LL;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  }

void *sub_100019904(void *a1, uint64_t a2)
{
  return sub_1000193A4(a1, v4);
}

void sub_10001993C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100019A18((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_100019960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x28uLL);
  unint64_t v8 = v7;
  *(void *)(a3 + std::ostream::~ostream(v2, v3 + 8) = v6;
  *(void *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  uint8x8_t v9 = v7 + 16;
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_100013D28(v7 + 16, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *uint8x8_t v9 = *(_OWORD *)a2;
    *((void *)v7 + 4) = *(void *)(a2 + 16);
  }

  *(_BYTE *)(a3 + 16) = 1;
  unint64_t result = sub_1000137DC(a1 + 24, (uint64_t)v9);
  *((void *)v8 + 1) = result;
  return result;
}

void sub_1000199FC(_Unwind_Exception *a1)
{
  void *v2 = 0LL;
  sub_100019A18(v3, v1);
  _Unwind_Resume(a1);
}

void sub_100019A18(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_100019A64(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int8x8_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = 0LL;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24LL))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
        a2[3] = 0LL;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24LL))(v6, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32LL))(v6);
      }

      else
      {
        (*(void (**)(void *, void *))(*result + 24LL))(result, a2);
        unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32LL))(v3[3]);
        v3[3] = a2[3];
      }

      a2[3] = a2;
    }

    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24LL))(a2, result);
      unint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32LL))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }

    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }

  return result;
}

void sub_100019BCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10000A61C(a1);
}

unsigned __int8 *sub_100019BD8(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_1000137DC((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0LL;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }

  else
  {
    unint64_t v9 = (*(void *)&v5 - 1LL) & v4;
  }

  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0LL;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_100013C84(v12, v11 + 16, a2) & 1) != 0) {
          return v11;
        }
      }

      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }

        else
        {
          v13 &= *(void *)&v5 - 1LL;
        }

        if (v13 != v9) {
          return 0LL;
        }
      }

      unint64_t v11 = *(unsigned __int8 **)v11;
    }

    while (v11);
  }

  return v11;
}

void sub_100019CD8(unint64_t *a1, size_t a2)
{
  int8x8_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }

    a1[1] = (unint64_t)v5;
  }

  else
  {
    unint64_t v6 = *a1;
    uint8x8_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0LL;
    }
    uint64_t v12 = &v7[v11];
    unint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }

    else
    {
      uint8x8_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }

      while (v5 != (char *)v6);
      int8x8_t v5 = (char *)*a1;
    }

    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }

uint64_t sub_100019E00()
{
  qword_10014ED68 = 0LL;
  __cxa_atexit((void (*)(void *))sub_100016788, qword_10014ED50, (void *)&_mh_execute_header);
  xmmword_10014ED70 = 0u;
  unk_10014ED80 = 0u;
  dword_10014ED90 = 1065353216;
  return __cxa_atexit((void (*)(void *))sub_1000167D4, &xmmword_10014ED70, (void *)&_mh_execute_header);
}

uint64_t sub_100019E60(uint64_t result)
{
  *(_BYTE *)unint64_t result = -1;
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  return result;
}

uint64_t sub_100019E74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    if (v5 - v4 == *((void *)a2 + 2) - *((void *)a2 + 1))
    {
      if (v5 == v4) {
        return 1LL;
      }
      uint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      while (1)
      {
        uint64_t v8 = *((void *)a2 + 1);
        if (*(unsigned __int8 *)(v4 + v6) != *(unsigned __int8 *)(v8 + v6)
          || (*(_BYTE *)(v4 + v6 + 16) != 0) != (*(_BYTE *)(v8 + v6 + 16) != 0))
        {
          break;
        }

        if (*(_BYTE *)(v4 + v6 + 16))
        {
          unint64_t v11 = 0LL;
          uint64_t v12 = 0LL;
          if (!sub_10000A438((uint64_t *)(v4 + v6 + 8), &v12)
            || (sub_10000A438((uint64_t *)(*((void *)a2 + 1) + v6 + 8), &v11) & 1) == 0)
          {
            sub_10000A5E8(&v11);
            sub_10000A5E8(&v12);
            return 0LL;
          }

          int v9 = CFEqual(v12, v11);
          sub_10000A5E8(&v11);
          sub_10000A5E8(&v12);
          if (!v9) {
            return 0LL;
          }
        }

        else
        {
          uint64_t result = CFEqual(*(CFTypeRef *)(v4 + v6 + 8), *(CFTypeRef *)(v8 + v6 + 8));
          if (!(_DWORD)result) {
            return result;
          }
        }

        ++v7;
        uint64_t v4 = *((void *)a1 + 1);
        v6 += 24LL;
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a1 + 2) - v4) >> 3) <= v7) {
          return 1LL;
        }
      }
    }
  }

  return 0LL;
}

void sub_100019FD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_100019FF0(unsigned __int8 *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000A62C(a2, (uint64_t)"command ", 8LL);
  unint64_t v7 = (void *)std::ostream::operator<<(v6, *a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
  uint64_t v8 = std::locale::use_facet(&v18, &std::ctype<char>::id);
  uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
  std::locale::~locale(&v18);
  std::ostream::put(v7, v9);
  uint64_t result = std::ostream::flush(v7);
  if (*((void *)a1 + 2) != *((void *)a1 + 1))
  {
    uint64_t v11 = 0LL;
    unint64_t v12 = 0LL;
    do
    {
      unint64_t v13 = sub_10000A62C(a2, (uint64_t)"  [", 3LL);
      uint8x8_t v14 = (void *)std::ostream::operator<<(v13, *(unsigned __int8 *)(*((void *)a1 + 1) + v11));
      sub_10000A62C(v14, (uint64_t)"] ", 2LL);
      uint64_t v15 = *((void *)a1 + 1) + v11;
      if (*(_BYTE *)(v15 + 16))
      {
        v18.__locale_ = 0LL;
        else {
          sub_10000A62C(a2, (uint64_t)"[invalid bplist]", 16LL);
        }
        sub_10000A5E8((const void **)&v18.__locale_);
      }

      else
      {
        sub_100009DDC((CFDataRef *)(v15 + 8), a2, a3);
      }

      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24LL)));
      int v16 = std::locale::use_facet(&v18, &std::ctype<char>::id);
      uint64_t v17 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10LL);
      std::locale::~locale(&v18);
      std::ostream::put(a2, v17);
      uint64_t result = std::ostream::flush(a2);
      ++v12;
      v11 += 24LL;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 3) > v12);
  }

  return result;
}

void sub_10001A1E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_10001A208(void *a1, unsigned __int8 *a2)
{
  return a1;
}

void *sub_10001A238(void *a1)
{
  *a1 = off_10011E408;
  a1[1] = 0LL;
  int v2 = (void ***)(a1 + 1);
  uint64_t v3 = (void **)operator new(0x20uLL);
  *(_BYTE *)uint64_t v3 = -1;
  v3[2] = 0LL;
  v3[3] = 0LL;
  v3[1] = 0LL;
  uint64_t v5 = 0LL;
  sub_10001A658(v2, v3);
  sub_10001A658(&v5, 0LL);
  return a1;
}

void sub_10001A2A8(_Unwind_Exception *a1)
{
}

uint64_t sub_10001A2C4(uint64_t result, char a2)
{
  **(_BYTE **)(result + std::ostream::~ostream(v2, v3 + 8) = a2;
  return result;
}

uint64_t sub_10001A2D0(uint64_t a1, char a2, const void **a3, char a4)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v8 = *(uint64_t **)(a1 + 8);
    unint64_t v12 = *a3;
    *a3 = 0LL;
    v13[0] = a2;
    uint8x8_t v14 = v5;
    CFRetain(v5);
    char v15 = a4;
    unint64_t v9 = v8[2];
    if (v9 >= v8[3])
    {
      uint64_t v10 = sub_10001A710(v8 + 1, v13);
    }

    else
    {
      *(_BYTE *)unint64_t v9 = a2;
      *(void *)(v9 + std::ostream::~ostream(v2, v3 + 8) = v5;
      CFRetain(v5);
      *(_BYTE *)(v9 + 16) = v15;
      uint64_t v10 = v9 + 24;
      v8[2] = v9 + 24;
    }

    v8[2] = v10;
    sub_10000A5E8(&v14);
    sub_10000A5E8(&v12);
  }

  return a1;
}

void sub_10001A390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_10001A3C0(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  return a1;
}

void sub_10001A418(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001A42C(uint64_t a1, char a2, const UInt8 *a3)
{
  return a1;
}

void sub_10001A480(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001A494(uint64_t a1, char a2, uint64_t a3)
{
  return a1;
}

void sub_10001A4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001A4FC(uint64_t a1, char a2, int a3)
{
  return a1;
}

void sub_10001A550(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001A564(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  return a1;
}

void sub_10001A5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001A5D0(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  return 1LL;
}

uint64_t sub_10001A5E8(uint64_t a1, char a2, const UInt8 *a3)
{
  return 1LL;
}

uint64_t sub_10001A600(uint64_t a1, char a2, uint64_t a3)
{
  return 1LL;
}

uint64_t sub_10001A618(uint64_t a1, char a2, int a3)
{
  return 1LL;
}

uint64_t sub_10001A630(uint64_t a1, char a2, const UInt8 *a3, CFIndex a4)
{
  return 1LL;
}

uint64_t sub_10001A648@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + std::ostream::~ostream(v2, v3 + 8) = 0LL;
  *a2 = v2;
  return result;
}

void sub_10001A658(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2 + 1;
    sub_10001A69C(&v3);
    operator delete(v2);
  }

void sub_10001A69C(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        sub_10000A5E8(v4 - 2);
        uint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

uint64_t sub_10001A710(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10000AA64();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555LL) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  std::locale v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = sub_10000F4CC(v7, v9);
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  int v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  *uint64_t v11 = *a2;
  unint64_t v12 = (const void *)*((void *)a2 + 1);
  *((void *)v11 + 1) = v12;
  if (v12)
  {
    CFRetain(v12);
    uint64_t v11 = v16;
  }

  v10[24 * v4 + 16] = a2[16];
  int v16 = v11 + 24;
  sub_10001A834(a1, v15);
  uint64_t v13 = a1[1];
  sub_10001A95C((uint64_t)v15);
  return v13;
}

void sub_10001A820(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_10001A834(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10001A8A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10001A8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = a7 + v11;
      *(_BYTE *)(v12 - 24) = *(_BYTE *)(a3 + v11 - 24);
      uint64_t v13 = *(const void **)(a3 + v11 - 16);
      *(void *)(v12 - 16) = v13;
      if (v13) {
        CFRetain(v13);
      }
      *(_BYTE *)(v12 - std::ostream::~ostream(v2, v3 + 8) = *(_BYTE *)(a3 + v11 - 8);
      v11 -= 24LL;
    }

    while (a3 + v11 != a5);
  }

  return a6;
}

void sub_10001A938(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 + 8;
    do
    {
      sub_10000A5E8((const void **)(v4 + v2));
      v2 += 24LL;
    }

    while (v2);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_10001A95C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_10000A5E8((const void **)(i - 16));
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10001B318( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10001B344(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 first]);
  id v19 = [v8 copy];

  unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 second]);
  id v10 = [v9 copy];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 second]);

  if (!v12)
  {
    id v13 = v11;

    id v10 = v13;
  }

  [v11 timeIntervalSinceDate:v10];
  if (v14 <= 86400.0)
  {
    [v11 timeIntervalSinceDate:v19];
    if (v15 <= 86400.0)
    {
      id v17 = v19;
    }

    else
    {
      uint64_t v16 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeInterval:sinceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeInterval:sinceDate:",  v11,  -86400.0));

      id v17 = (id)v16;
    }

    id v19 = v17;
    [v10 timeIntervalSinceDate:v17];
    *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v18
  }

  else
  {
    *a4 = 1;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  }
}

id sub_10001B6A4()
{
  if (qword_10014E7E8 != -1) {
    dispatch_once(&qword_10014E7E8, &stru_10011E480);
  }
  return (id)qword_10014E7E0;
}

void sub_10001B7A8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v2 = (void *)qword_10014E7E0;
  qword_10014E7E0 = (uint64_t)v1;

  [(id)qword_10014E7E0 setDateStyle:2];
  _[(id)qword_10014E7E0 setTimeStyle:2];
}

uint64_t sub_10001D678(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = 0LL;
      *(_BYTE *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 == -1LL || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          goto LABEL_38;
        }
        v16 += 7;
        BOOL v9 = v17++ >= 9;
        if (v9)
        {
          uint64_t v18 = 0LL;
          goto LABEL_40;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v18 = 0LL;
      }
LABEL_40:
      *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v18;
    }

    else if ((_DWORD)v12 == 2)
    {
      char v21 = 0;
      unsigned int v22 = 0;
      uint64_t v23 = 0LL;
      *(_BYTE *)(a1 + 28) |= 2u;
      while (1)
      {
        unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
        v23 |= (unint64_t)(v25 & 0x7F) << v21;
        if ((v25 & 0x80) == 0) {
          goto LABEL_42;
        }
        v21 += 7;
        BOOL v9 = v22++ >= 9;
        if (v9)
        {
          LODWORD(v23) = 0;
          goto LABEL_44;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v23) = 0;
      }
LABEL_44:
      *(_DWORD *)(a1 + 24) = v23;
    }

    else if ((_DWORD)v12 == 1)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(Data);
      double v15 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_14:
  return v7;
}

  return v7;
}

  __break(1u);
  return result;
}

  char v20 = v66;
  unint64_t v19 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  char v21 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 136) = v66;
  *(void *)(a1 + 144) = v21;
  if (__CFADD__(v20, v21)) {
    goto LABEL_187;
  }
  unsigned int v22 = v20 + v21;
  if (v20 > v22 || v22 > v19) {
    goto LABEL_186;
  }
  v66 = v22;
  unint64_t v24 = v66;
  uint64_t v23 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  char v25 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 120) = v66;
  *(void *)(a1 + 12std::ostream::~ostream(v2, v3 + 8) = v25;
  if (__CFADD__(v24, v25)) {
    goto LABEL_187;
  }
  std::string v26 = v24 + v25;
  if (v24 > v26 || v26 > v23) {
    goto LABEL_186;
  }
  v66 = v26;
  std::string v28 = v66;
  std::string v27 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  std::string v29 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 72) = v66;
  *(void *)(a1 + 80) = v29;
  if (__CFADD__(v28, v29)) {
    goto LABEL_187;
  }
  std::string v30 = v28 + v29;
  if (v28 > v30 || v30 > v27) {
    goto LABEL_186;
  }
  v66 = v30;
  char v31 = v66;
  unint64_t v32 = v67;
  if (v67 < v66) {
    goto LABEL_186;
  }
  uint64_t v33 = v70;
  if (v70 > v67 - v66) {
    goto LABEL_186;
  }
  *(void *)(a1 + 104) = v66;
  *(void *)(a1 + 112) = v33;
  if (__CFADD__(v31, v33)) {
    goto LABEL_187;
  }
  unint64_t v34 = v31 + v33;
  if (v31 > v31 + v33 || v34 > v32) {
    goto LABEL_186;
  }
  v66 = v31 + v33;
  uint64_t result = ccder_blob_decode_tl(&v66, 0x2000000000000010LL, &v70);
  if (!(_DWORD)result) {
    return 720922LL;
  }
  uint64_t v35 = v66;
  size_t v36 = v70;
  unint64_t v37 = v66 - v34 + v70;
  if (!__CFADD__(v66 - v34, v70))
  {
    if (v37 > v32 - v34) {
      goto LABEL_186;
    }
    *(void *)(a1 + 8std::ostream::~ostream(v2, v3 + 8) = v34;
    *(void *)(a1 + 96) = v37;
    if (__CFADD__(v35, v36)) {
      goto LABEL_187;
    }
    unint64_t v38 = v35 + v36;
    if (v35 > v38 || v38 > v67) {
      goto LABEL_186;
    }
    v65 = v67;
    v66 = v38;
    v64 = v38;
    if ((ccder_blob_decode_tl(&v64, 0x8000000000000001LL, &v70) & 1) != 0) {
      return 720923LL;
    }
    if (v66 > v67) {
      goto LABEL_186;
    }
    v64 = v66;
    v65 = v67;
    if ((ccder_blob_decode_tl(&v64, 0x8000000000000002LL, &v70) & 1) != 0) {
      return 720924LL;
    }
    if (v66 > v67) {
      goto LABEL_186;
    }
    v64 = v66;
    v65 = v67;
    if (ccder_blob_decode_tl(&v64, 0xA000000000000003LL, &v70))
    {
      v62 = 0xAAAAAAAAAAAAAAAALL;
      __int128 v63 = 0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v64, v70)) {
        goto LABEL_187;
      }
      if (v64 > v64 + v70 || v64 + v70 > v65) {
        goto LABEL_186;
      }
      v62 = v64;
      __int128 v63 = v64 + v70;
      size_t v39 = v62;
      if (__CFADD__(v62, v70)) {
LABEL_187:
      }
        __break(0x5513u);
      char v40 = v62 + v70;
      if (v62 > v62 + v70 || v40 > v63) {
        goto LABEL_186;
      }
      __int128 v63 = v62 + v70;
      *(_BYTE *)(a1 + 266) = 0;
      memset(&v72[2], 0, 128);
      if (a3) {
        unint64_t v41 = a4 == 0;
      }
      else {
        unint64_t v41 = 1;
      }
      std::string v42 = !v41;
      memset(v72, 0, 32);
      if (v39 < v40)
      {
        uint64_t v55 = 0;
        char v43 = 0;
        do
        {
          unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
          int v61 = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v59 = 0;
          char v58 = 0LL;
          if ((ccder_blob_decode_tl(&v62, 0x2000000000000010LL, &v58) & 1) == 0) {
            return 720926LL;
          }
          v56 = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v57 = 0xAAAAAAAAAAAAAAAALL;
          if (__CFADD__(v62, v58)) {
            goto LABEL_187;
          }
          if (v62 > v62 + v58 || v62 + v58 > v63) {
            goto LABEL_186;
          }
          v56 = v62;
          uint64_t v57 = v62 + v58;
          if (v57 < v56 || v70 > v57 - v56) {
            goto LABEL_186;
          }
          unint64_t v60 = v56;
          int v61 = v70;
          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v56 > v56 + v70 || v56 + v70 > v57) {
            goto LABEL_186;
          }
          v56 += v70;
          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v57 != v56 + v70) {
            return 720929LL;
          }
          if (v42 && !compare_octet_string_raw((uint64_t)&v60, a3, a4))
          {
            if (v57 < v56) {
              goto LABEL_186;
            }
            unint64_t v45 = v70;
            if (v70 > v57 - v56) {
              goto LABEL_186;
            }
            *(void *)(a1 + 24std::ostream::~ostream(v2, v3 + 8) = v56;
            *(void *)(a1 + 256) = v45;
          }

          if (v61 == 3)
          {
            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 15)
            {
              uint64_t v18 = 720930LL;
              v43 |= 1u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 19)
            {
              uint64_t v18 = 720931LL;
              v43 |= 2u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 35)
            {
              uint64_t v18 = 720932LL;
              if ((v43 & 4) != 0
                || (sub_1000B9388(&v56, (unint64_t *)(a1 + 168), (unint64_t *)(a1 + 176)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 4u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 14)
            {
              uint64_t v18 = 720933LL;
              if ((v43 & 8) != 0
                || (sub_1000B94AC(&v56, (unint64_t *)(a1 + 184), (unint64_t *)(a1 + 192)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 8u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 37)
            {
              uint64_t v18 = 720934LL;
              if ((v43 & 0x10) != 0
                || (sub_1000B956C(&v56, (unint64_t *)(a1 + 208), (unint64_t *)(a1 + 216)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 0x10u;
              goto LABEL_155;
            }

            if (*(_WORD *)v60 == 7509 && *(_BYTE *)(v60 + 2) == 17)
            {
              uint64_t v18 = 720935LL;
              if ((v43 & 0x20) != 0
                || (sub_1000B9678(&v56, (unint64_t *)(a1 + 224), (unint64_t *)(a1 + 232)) & 1) == 0)
              {
                return v18;
              }

              v43 |= 0x20u;
              goto LABEL_155;
            }
          }

          else if (v61 >= 8 && *(_DWORD *)v60 == -2042067414 && *(_DWORD *)(v60 + 3) == 1684273030)
          {
            uint64_t v18 = 720936LL;
            uint64_t result = sub_1000B97D0( (uint64_t)&v56,  v60,  v61,  (unint64_t *)(a1 + 240),  (unint64_t *)(a1 + 248),  v42);
            if (!(_DWORD)result) {
              return v18;
            }
            if (v55 == 0xFF) {
              goto LABEL_189;
            }
            ++v55;
            goto LABEL_155;
          }

          if (__CFADD__(v56, v70)) {
            goto LABEL_187;
          }
          if (v56 > v56 + v70 || v56 + v70 > v57) {
            goto LABEL_186;
          }
          v56 += v70;
          if (v59) {
            *(_BYTE *)(a1 + 266) = 1;
          }
LABEL_155:
          if (v56 != v57) {
            return 720926LL;
          }
          if (__CFADD__(v62, v58)) {
            goto LABEL_187;
          }
          size_t v39 = v62 + v58;
          if (v62 > v62 + v58) {
            goto LABEL_186;
          }
          char v40 = v63;
          if (v39 > v63) {
            goto LABEL_186;
          }
          v62 += v58;
        }

        while (v39 < v63);
      }

      if (v39 != v40) {
        return 720925LL;
      }
      if (v39 > v67 || v66 > v39) {
        goto LABEL_186;
      }
      v66 = v39;
    }

    if (*(void *)(a1 + 32) < 3uLL)
    {
      uint64_t v18 = 720915LL;
      if (v66 != v67) {
        return v18;
      }
LABEL_170:
      if (__CFADD__(v68, v71)) {
        goto LABEL_187;
      }
      if (v68 > v68 + v71 || v68 + v71 > v69) {
        goto LABEL_186;
      }
      v68 += v71;
      *(void *)&v72[0] = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v72[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v62 = 0LL;
      uint64_t result = ccder_blob_decode_bitstring(&v68, v72, &v62);
      if (!(_DWORD)result) {
        return 720938LL;
      }
      if (v62 < 0xFFFFFFFFFFFFFFF9LL)
      {
        if (*((void *)&v72[0] + 1) >= *(void *)&v72[0])
        {
          v53 = (v62 + 7) >> 3;
          if (v53 <= *((void *)&v72[0] + 1) - *(void *)&v72[0])
          {
            *(void *)(a1 + 56) = *(void *)&v72[0];
            *(void *)(a1 + 64) = v53;
            uint64_t v54 = v69;
            if (v68 <= v69)
            {
              uint64_t v18 = 0LL;
              *a2 = v68;
              a2[1] = v54;
              return v18;
            }
          }
        }

        goto LABEL_186;
      }

      goto LABEL_188;
    }

    if (v67 <= a2[1] && *a2 <= v67)
    {
      *a2 = v67;
      goto LABEL_170;
    }

uint64_t sub_10001EBAC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_34;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_36;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_36:
        *(_DWORD *)(a1 + 32) = v14;
        goto LABEL_37;
      case 2u:
        uint64_t v18 = objc_alloc_init(&OBJC_CLASS___TASKIPAddress);
        [(id)a1 addIpv4:v18];
        goto LABEL_29;
      case 3u:
        uint64_t v18 = objc_alloc_init(&OBJC_CLASS___TASKIPAddress);
        [(id)a1 addIpv6:v18];
LABEL_29:
        if (PBReaderPlaceMark(a2, v22) && (sub_10009F768((uint64_t)v18, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v22);

LABEL_37:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 4u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v20 = objc_claimAutoreleasedReturnValue(String);
        char v21 = *(void **)(a1 + 8);
        *(void *)(a1 + std::ostream::~ostream(v2, v3 + 8) = v20;

        goto LABEL_37;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_37;
    }
  }

void sub_10001FC14(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", &off_10012B8B8));
  uint64_t v2 = (void *)qword_10014E7F0;
  qword_10014E7F0 = v1;
}

void sub_10001FFB0(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _performEvictionSweep];
}

void sub_100020330(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 evictionDate]);
  id v7 = [v6 compare:*(void *)(a1 + 32)];

  if (v7 == (id)-1LL)
  {
    char v8 = (void *)objc_claimAutoreleasedReturnValue(+[APSTTLCollection suppressedTTRTopics](&OBJC_CLASS___APSTTLCollection, "suppressedTTRTopics"));
    if (v8
      && (uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 topic])) != 0
      && (int v10 = (void *)v9,
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 topic]),
          unsigned int v12 = [v8 containsObject:v11],
          v11,
          v10,
          v12))
    {
      [*(id *)(a1 + 40) addObject:v15];
    }

    else
    {
      [*(id *)(a1 + 48) addObject:v15];
      unsigned int v13 = *(void **)(a1 + 56);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v5 itemState]));
      [v13 addObject:v14];
    }
  }
}

void *sub_1000204C4(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  *a2 = 0LL;
  *uint64_t result = &off_10011E548;
  result[1] = v3;
  result[2] = a3;
  return result;
}

void *sub_1000204E0(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &off_10011E548;
  a1[1] = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  return a1;
}

void sub_100020524(uint64_t a1, void *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 24LL))(a1, v17);
  uint64_t v4 = *(void *)(*a2 - 24LL);
  int v5 = *(_DWORD *)((char *)a2 + v4 + 8);
  if (v3)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    do
    {
      uint64_t v8 = v17[0];
      uint64_t v9 = sub_10000A62C(a2, (uint64_t)"  [", 3LL);
      int v10 = (void *)std::ostream::operator<<(v9, v7);
      uint64_t v11 = sub_10000A62C(v10, (uint64_t)"]: ", 3LL);
      unsigned int v12 = sub_100020FD8(v11, v8 + v6);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24LL)));
      unsigned int v13 = std::locale::use_facet(&v18, &std::ctype<char>::id);
      uint64_t v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10LL);
      std::locale::~locale(&v18);
      std::ostream::put(v12, v14);
      std::ostream::flush(v12);
      ++v7;
      v6 += 24LL;
    }

    while (v3 != v7);
    uint64_t v4 = *(void *)(*a2 - 24LL);
  }

  std::ios_base::getloc((const std::ios_base *)((char *)a2 + v4));
  id v15 = std::locale::use_facet(&v18, &std::ctype<char>::id);
  uint64_t v16 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10LL);
  std::locale::~locale(&v18);
  std::ostream::put(a2, v16);
  std::ostream::flush(a2);
  *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24LL) + std::ostream::~ostream(v2, v3 + 8) = v5;
  v18.__locale_ = (std::locale::__imp *)v17;
  sub_100020724((void ***)&v18);
}

void sub_1000206C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, std::locale a14)
{
  a13 = &a10;
  sub_100020724((void ***)&a13);
  _Unwind_Resume(a1);
}

void *sub_1000206F8(void *a1, uint64_t a2)
{
  return a1;
}

void sub_100020724(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10000EC60((uint64_t *)v2);
    operator delete(**a1);
  }

void *sub_100020B24(void *a1, unsigned __int8 **a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 3;
  uint64_t v9 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v10 = *((_DWORD *)v9 + 2);
  *((_DWORD *)v9 + 2) = v10 & 0xFFFFFFB5 | 8;
  char v15 = 48;
  sub_100020CB0(a1, &v15);
  sub_10000A62C(a1, (uint64_t)"( ", 2LL);
  uint64_t v11 = *a2;
  if (*a3 <= (unint64_t)*a2)
  {
LABEL_4:
    uint64_t result = sub_10000A62C(a1, (uint64_t)")", 1LL);
  }

  else
  {
    while (v11 < &(*a2)[a4])
    {
      *(void *)((char *)v8 + *(void *)(*a1 - 24LL)) = 2LL;
      unsigned int v12 = *v11++;
      std::ostream::operator<<(a1, v12);
      sub_10000A62C(a1, (uint64_t)" ", 1LL);
    }

    sub_10000A62C(a1, (uint64_t)"... ", 4LL);
    sub_10000A62C(a1, (uint64_t)")", 1LL);
    uint64_t v14 = sub_10000A62C(a1, (uint64_t)" sz=", 4LL);
    *(_DWORD *)((char *)v14 + *(void *)(*v14 - 24LL) + std::ostream::~ostream(v2, v3 + 8) = *(_DWORD *)((_BYTE *)v14 + *(void *)(*v14 - 24LL) + 8) & 0xFFFFFFB5 | 2;
    uint64_t result = (void *)std::ostream::operator<<();
  }

  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24LL) + std::ostream::~ostream(v2, v3 + 8) = v10;
  return result;
}

void *sub_100020CB0(void *a1, char *a2)
{
  uint64_t v3 = (char *)a1 + *(void *)(*a1 - 24LL);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24LL)));
    int v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32LL);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }

  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_100020D3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_100020D50(void *result, uint64_t *a2, void *a3)
{
  uint64_t v3 = result;
  int v4 = result + 3;
  uint64_t v5 = *(void *)(*result - 24LL);
  int v6 = *(_DWORD *)((char *)result + v5 + 8);
  uint64_t v7 = *a3 - *a2;
  if (v7 >= 1)
  {
    int v26 = *(_DWORD *)((char *)result + v5 + 8);
    uint64_t v8 = 0LL;
    uint64_t v27 = *a3 - *a2;
    std::string v28 = result + 1;
    uint64_t v9 = 16LL;
    do
    {
      uint64_t v31 = v9;
      if (v9 >= v7) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v11 = *a2;
      uint64_t v12 = v8 + 16;
      uint64_t v30 = v8 + 16;
      if (v7 < v8 + 16) {
        uint64_t v12 = v7;
      }
      uint64_t v32 = v12;
      unint64_t v13 = v11 + v12;
      uint64_t v14 = *v3;
      *(_DWORD *)((char *)v28 + *(void *)(*v3 - 24LL)) = *(_DWORD *)((_BYTE *)v28 + *(void *)(*v3 - 24LL)) & 0xFFFFFFB5 | 8;
      *(void *)((char *)v4 + *(void *)(v14 - 24)) = 8LL;
      char v33 = 48;
      char v15 = sub_100020CB0(v3, &v33);
      uint64_t v16 = (void *)std::ostream::operator<<(v15, v8);
      sub_10000A62C(v16, (uint64_t)"   ", 3LL);
      uint64_t v17 = 0LL;
      uint64_t v18 = v11 + v8;
      do
      {
        if (v18 + v17 >= v13)
        {
          unint64_t v19 = v3;
          uint64_t v20 = "   ";
          uint64_t v21 = 3LL;
        }

        else
        {
          *(void *)((char *)v4 + *(void *)(*v3 - 24LL)) = 2LL;
          unint64_t v19 = (void *)std::ostream::operator<<(v3, *(unsigned __int8 *)(v18 + v17));
          uint64_t v20 = " ";
          uint64_t v21 = 1LL;
        }

        sub_10000A62C(v19, (uint64_t)v20, v21);
        if ((~(_BYTE)v17 & 7) == 0) {
          sub_10000A62C(v3, (uint64_t)" ", 1LL);
        }
        ++v17;
      }

      while (v17 != 16);
      sub_10000A62C(v3, (uint64_t)" |", 2LL);
      if (v8 != v32)
      {
        do
        {
          int v22 = *(unsigned __int8 *)(v11 + v8);
          char v34 = v22;
          sub_10000A62C(v3, (uint64_t)&v34, 1LL);
          ++v11;
          --v10;
        }

        while (v8 != v10);
      }

      uint64_t v23 = sub_10000A62C(v3, (uint64_t)"|", 1LL);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24LL)));
      unint64_t v24 = std::locale::use_facet(&v35, &std::ctype<char>::id);
      uint64_t v25 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10LL);
      std::locale::~locale(&v35);
      std::ostream::put(v23, v25);
      uint64_t result = (void *)std::ostream::flush(v23);
      uint64_t v9 = v31 + 16;
      uint64_t v8 = v30;
      uint64_t v7 = v27;
    }

    while (v30 < v27);
    uint64_t v5 = *(void *)(*v3 - 24LL);
    int v6 = v26;
  }

  *(_DWORD *)((char *)v3 + v5 + std::ostream::~ostream(v2, v3 + 8) = v6;
  return result;
}

void sub_100020FC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18)
{
}

void *sub_100020FD8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int v6 = v3;
  sub_100020B24(a1, &v6, &v5, 64LL);
  return a1;
}

uint64_t sub_100021018()
{
  if (qword_10014E808 != -1) {
    dispatch_once(&qword_10014E808, &stru_10011E698);
  }
  return byte_10014E800;
}

void sub_100021058(id a1)
{
  byte_10014E800 = CFPreferencesGetAppBooleanValue( @"supportsCriticalReliabilityFlushes",  @"com.apple.apsd.overrides",  0LL) != 0;
}

void sub_100021AE4(_Unwind_Exception *a1)
{
}

void sub_100021B1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _processPotentialIdentityChanged];
    id WeakRetained = v2;
  }
}

id sub_100021B4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) rollTokensForAllBAAEnvironments];
}

void sub_100021EEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100021F04(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateForProtocolConnection:a2]);
  id v5 = [v4 userState];

  else {
    unint64_t v6 = v3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v6;
}

void sub_100022A30(id a1)
{
  id v1 = (const void *)MGCopyAnswer(@"DeviceClass", 0LL);
  if (v1)
  {
    id v2 = v1;
    if (CFEqual(v1, @"AudioAccessory")) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFEqual(v2, @"AppleTV") != 0;
    }
    byte_10014E818 = v3;
    CFRelease(v2);
  }

void sub_100024B90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100024BCC(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if ([v5 isPowerEfficientToUse] && objc_msgSend(v5, "linkQuality") == -2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

void sub_100024C2C(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if ([v5 isPowerEfficientToUse] && objc_msgSend(v5, "linkQuality") == -2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

id sub_100025A4C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "__performIdleCheck");
}

id sub_100025FB8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _sendPresenceMessageOnProtocolConnection:a2 serverTime:0];
}

LABEL_8:
}

    uint64_t v7 = 0;
  }

    uint64_t v7 = 0;
  }

    unint64_t v6 = 1LL;
    goto LABEL_10;
  }

  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v6 = (uint64_t)[v3 isEqualToSet:v4];
LABEL_10:

  return v6;
}

    unint64_t v6 = 1LL;
    goto LABEL_10;
  }

  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v6 = (uint64_t)[v3 isEqualToArray:v4];
LABEL_10:

  return v6;
}

    unint64_t v6 = 1LL;
    goto LABEL_10;
  }

  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v6 = (uint64_t)[v3 isEqualToDictionary:v4];
LABEL_10:

  return v6;
}

    unint64_t v6 = 1LL;
    goto LABEL_10;
  }

  if (!v4) {
    goto LABEL_9;
  }
  unint64_t v6 = (uint64_t)[v3 isEqualToData:v4];
LABEL_10:

  return v6;
}

    if (_os_feature_enabled_impl("APS", "EmperorPenguin"))
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_ultraConstrainedProvider);
      if ([WeakRetained isConnectedOnUltraConstrainedInterface])
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 attributes]);
        uint64_t v12 = [v11 isUltraConstrainedEnabled];

        if ((v12 & 1) == 0)
        {
          unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog topicManager](&OBJC_CLASS___APSLog, "topicManager"));
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 topicName]);
            uint64_t v21 = 138412546;
            int v22 = self;
            uint64_t v23 = 2112;
            unint64_t v24 = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%@ downgrading %@ to ignored, not eligible for requested ultra constrained filter",  (uint8_t *)&v21,  0x16u);
          }

          uint64_t v15 = 3LL;
          goto LABEL_20;
        }
      }

      else
      {
      }

      uint64_t v16 = objc_loadWeakRetained((id *)&self->_ultraConstrainedProvider);
      uint64_t v17 = [v16 isConnectedOnUltraConstrainedInterface];

      if (v17)
      {
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog topicManager](&OBJC_CLASS___APSLog, "topicManager"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          sub_1000C09FC();
        }
      }
    }

    unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 attributes]);
    uint64_t v15 = (int64_t)-[os_log_s filter](v13, "filter");
    goto LABEL_20;
  }

  unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog topicManager](&OBJC_CLASS___APSLog, "topicManager"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v4 topicName]);
    uint64_t v21 = 138412546;
    int v22 = self;
    uint64_t v23 = 2112;
    unint64_t v24 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%@ downgrading %@ to non-waking, not eligible for requested filter",  (uint8_t *)&v21,  0x16u);
  }

  uint64_t v15 = 4LL;
LABEL_20:

  return v15;
}

void sub_10002882C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

uint64_t sub_100028890(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000288A0(uint64_t a1)
{
}

void sub_1000288A8(void *a1, void *a2, _BYTE *a3)
{
  BOOL v3 = a2;
  id v5 = a2;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id v6 = *(id *)(a1[4] + 280LL);
  id v7 = [v6 countByEnumeratingWithState:&v31 objects:v41 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v32;
    id v30 = v6;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 280) objectForKey:*(void *)(*((void *)&v31 + 1) + 8 * (void)i)]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
        unsigned int v13 = [v11 needsToConnectOnInterface:v12];

        if (v13)
        {
          if (!*(void *)(*(void *)(a1[5] + 8LL) + 40LL))
          {
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 lastPresence]);
            [v14 timeIntervalSinceNow];
            double v16 = fabs(v15);

            if (v16 > 240.0)
            {
              unint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v25 = v3;
                uint64_t v26 = a1[4];
                uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v11 publicToken]);
                *(_DWORD *)buf = 138412802;
                uint64_t v36 = v26;
                BOOL v3 = v25;
                id v6 = v30;
                __int16 v37 = 2112;
                unint64_t v38 = v27;
                __int16 v39 = 2048;
                double v40 = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%@: Cannot send client connect message with token '%@' presence age %f because it is too old. Instead, tell the client to retry by sending a expired nonce message",  buf,  0x20u);
              }

              [v11 handleExpiredNonceWithServerTime:0 shouldRollToken:0];
            }

            else
            {
              objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v3);
              objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), v11);
            }
          }
        }

        else
        {
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
          unsigned int v18 = [v11 needsToDisconnectOnInterface:v17];

          if (v18)
          {
            uint64_t v19 = *(void *)(a1[7] + 8LL);
            if (!*(void *)(v19 + 40))
            {
              *(void *)(v19 + 40) = v11;
              id v28 = v11;

              objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v3);
              *a3 = 1;
              goto LABEL_22;
            }
          }

          else
          {
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
            unsigned int v21 = [v11 isConnectedOnInterface:v20];

            if (v21)
            {
              int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v23 = a1[4];
                *(_DWORD *)buf = 138412546;
                uint64_t v36 = v23;
                __int16 v37 = 2112;
                unint64_t v38 = v11;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%@: Client device may think its disconnected, sending a note that its connected.  Client %@",  buf,  0x16u);
              }

              [v11 noteIsConnected];
            }
          }
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v31 objects:v41 count:16];
    }

    while (v8);
  }

id sub_100028C30(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_100028C48(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_1000291F4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedFilterResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_1000294BC(uint64_t a1, void *a2)
{
  id v12 = a2;
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) preferredProtocolConnection]);
  unsigned __int8 v4 = [v12 isEqual:v3];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) filterVersionStateMachine]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
  unsigned __int8 v7 = [v5 everSentFilterOn:v6];

  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) preferredProtocolConnection]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  id v11 = [v8 stateOnInterface:v10];

  if ((v4 & 1) == 0 && (v7 & 1) == 0 && v11 == (id)2) {
    [*(id *)(a1 + 32) _sendClientFilter:*(void *)(a1 + 40) onProtocolConnection:v12];
  }
}

void sub_1000295A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = *(void **)(a1 + 32);
  id v7 = v3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = [v4 stateOnInterface:v5];

  if (v6 == (id)2) {
    [*(id *)(a1 + 40) _sendClientFilter:*(void *)(a1 + 32) onProtocolConnection:v7];
  }
}

void sub_1000298BC(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  unsigned int v6 = [v5 generationMatches:*(void *)(a1 + 72)];
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = [*(id *)(a1 + 48) integerValue];
      uint64_t v12 = *(void *)(a1 + 56);
      int v15 = 138413058;
      uint64_t v16 = v9;
      __int16 v17 = 2112;
      uint64_t v18 = v10;
      __int16 v19 = 2048;
      id v20 = v11;
      __int16 v21 = 2112;
      uint64_t v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@: Sending %@ proxied acknowledgement message with response %ld and messageId %@",  (uint8_t *)&v15,  0x2Au);
    }

    objc_msgSend( v5,  "sendMessageAcknowledgeMessageWithResponse:messageId:generation:token:",  objc_msgSend(*(id *)(a1 + 48), "integerValue"),  *(void *)(a1 + 56),  *(void *)(a1 + 72),  *(void *)(a1 + 64));
  }

  else
  {
    if (v8)
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      uint64_t v18 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@: ignoring a proxied push ack response that is no longer relevant. (generation) %@",  (uint8_t *)&v15,  0x16u);
    }
  }

  *a3 = 1;
}

id sub_10002A024(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) preferredProtocolConnection]);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    unsigned __int16 v5 = (unsigned __int16)[*(id *)(a1 + 56) unsignedIntegerValue];
    id v6 = [*(id *)(a1 + 64) unsignedIntValue];
    uint64_t v7 = *(void *)(a1 + 72);
    id v8 = [*(id *)(a1 + 80) unsignedIntegerValue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10002A11C;
    void v11[3] = &unk_10011E7D0;
    v11[4] = *(void *)(a1 + 32);
    id v12 = v2;
    [v12 sendTokenGenerateMessageWithTopicHash:v3 baseToken:v4 appId:v5 expirationTTL:v6 vapidPublicKeyHash:v7 type:v8 withCompletion:v11];
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);

  return v9;
}

id sub_10002A11C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleAppTokenGenerateResponse:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_10002A12C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    int v14 = 138413570;
    uint64_t v15 = v8;
    __int16 v16 = 2112;
    id v17 = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    __int16 v20 = 2112;
    uint64_t v21 = v9;
    __int16 v22 = 2112;
    uint64_t v23 = v10;
    __int16 v24 = 2112;
    uint64_t v25 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@ Received response %@ and error %@ for token request for %@ topic %@ appId %@",  (uint8_t *)&v14,  0x3Eu);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"APSProtocolAppTokenGenerateResponseToken"]);
  if (!v12)
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      sub_1000BCE44((void *)a1, v13);
    }
  }

  [*(id *)(a1 + 40) handleAppTokenGenerateResponse:v5 error:v6];
}

void sub_10002A508(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateByInterfaceIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);
  id v7 = [v6 unsignedIntegerValue];

  if (v7 == (id)2)
  {
    objc_msgSend( *(id *)(a1 + 40),  "_sendProxyChannelList:onConnectionType:",  *(void *)(a1 + 48),  objc_msgSend(v3, "connectionType"));
  }

  else
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
      int v11 = 138412802;
      uint64_t v12 = v9;
      __int16 v13 = 2048;
      int v14 = v10;
      __int16 v15 = 2048;
      id v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@ Received a pubsub channel list and client isnt connected on interface %ld.  Client State: %ld",  (uint8_t *)&v11,  0x20u);
    }
  }
}

void sub_10002A880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10002A89C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    BOOL v10 = [v12 count] && objc_msgSend(v7, "length") && objc_msgSend(v8, "length") != 0;
    [WeakRetained setCertificates:v12];
    [WeakRetained setNonce:v7];
    [WeakRetained setSignature:v8];
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      (*(void (**)(uint64_t, BOOL))(v11 + 16))(v11, v10);
    }
  }
}

void sub_10002AAF8(uint64_t a1, __SecKey *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2 && v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    [v7 addObjectsFromArray:v6];
    id v17 = 0LL;
    id v18 = 0LL;
    BOOL v8 = sub_100077FD4(0LL, a2, 0LL, (uint64_t *)&v18, &v17, *(void **)(a1 + 32), 0);
    id v9 = v18;
    BOOL v10 = v17;
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = @"NO";
      uint64_t v13 = *(void *)(a1 + 40);
      if (v8) {
        id v12 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      __int16 v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%@ generate nonce and sig success? %@",  buf,  0x16u);
    }

    if (!v8) {
      [*(id *)(a1 + 40) _deleteClientIdentityRequestingReplacement];
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(uint64_t, void *, id, void *))(v14 + 16))(v14, v7, v9, v10);
    }
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    (*(void (**)(uint64_t, void *, void, void))(v15 + 16))(v15, v16, 0LL, 0LL);
  }
}

uint64_t sub_10002AD68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002AECC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ - systemDidLock and we're connected via noncellular, sending inactive ping to the server",  (uint8_t *)&v6,  0xCu);
  }

  [v3 sendSetActiveState:0 forInterval:0];
}

void sub_10002AFF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ - systemDidUnlock and we're connected via noncellular, sending active ping to the server",  (uint8_t *)&v6,  0xCu);
  }

  [v3 sendSetActiveState:1 forInterval:600];
}

void sub_10002B208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10002B224(uint64_t a1, void *a2, _BYTE *a3)
{
  id result = [a2 interfaceConstraint];
  if (result == (id)1)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

  return result;
}

void sub_10002B394(_Unwind_Exception *a1)
{
}

id sub_10002B3C4(uint64_t a1, void *a2, _BYTE *a3)
{
  id result = [a2 isPowerEfficientToUse];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

  return result;
}

id sub_10002B404(uint64_t a1, void *a2, _BYTE *a3)
{
  id result = [a2 isPowerEfficientToUse];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

  return result;
}

void sub_10002BD18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10002BD98;
  void v6[3] = &unk_10011E7F8;
  v6[4] = v4;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateConnectedProtocolConnectionsOfType:2 block:v6];
}

id sub_10002BD98(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id result = [*(id *)(a1 + 32) _sendOutgoingMessage:*(void *)(a1 + 40) onProtocolConnection:a2];
  *a3 = 1;
  return result;
}

void sub_10002BDCC(id a1, APSProtocolConnection *a2, BOOL *a3)
{
}

void sub_10002BDD8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 432LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 identifier]);
  [v2 handleConnectionClosedOnInterface:v3];
}

void sub_10002BEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
      [v4 courierIdentityBecameAvailable:*(void *)(a1 + 32)];
    }
  }

void sub_10002C4DC(id a1, APSProtocolConnection *a2, BOOL *a3)
{
}

id sub_10002D0B4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _disconnectTokenWithReason:100 onProtocolConnection:a2];
}

id sub_10002D664(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _sendPresenceMessageOnProtocolConnection:a2 serverTime:0];
}

LABEL_35:
  return v30;
}

LABEL_44:
}

void sub_10002FAA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10002FAB8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "stateForProtocolConnection:"));
  if ([v5 filterMode] == (id)2
    || (int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) filterVersionStateMachine]),
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]),
        unsigned __int8 v8 = [v6 everHadAckOn:v7],
        v7,
        v6,
        (v8 & 1) == 0))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    *a3 = 1;
  }
}

void sub_10002FCF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002FD08(uint64_t a1, void *a2, _BYTE *a3)
{
  id v9 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  unsigned __int8 v7 = [v5 isEqualToString:v6];

  if ((v7 & 1) == 0)
  {
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateForProtocolConnection:v9]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 filterMode] == (id)2;

    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
      *a3 = 1;
    }
  }
}

void sub_10002FF00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10002FF18(uint64_t a1, void *a2, _BYTE *a3)
{
  id v10 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  unsigned __int8 v7 = [v5 isEqualToString:v6];

  if ((v7 & 1) == 0)
  {
    unsigned __int8 v8 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v8 filterModeOnInterface:v9] == (id)2;

    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
      *a3 = 1;
    }
  }
}

void sub_100030218(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) filterVersionStateMachine]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  unsigned int v5 = [v3 isOutOfDateOn:v4];

  if (v5) {
    [*(id *)(a1 + 32) _sendFilterMessageOnProtocolConnection:v6 withReason:7];
  }
}

LABEL_66:
        v70 = (__CFString *)objc_claimAutoreleasedReturnValue(-[APSUserCourier protocolConnectionEstablisher](self, "protocolConnectionEstablisher"));
        if ((-[__CFString allowedToHaveMultipleOpenInterfaces]( v70,  "allowedToHaveMultipleOpenInterfaces") & 1) == 0)
        {
          v71 = -[APSUserCourier countOfConnectedInterface](self, "countOfConnectedInterface");

          if (v71 < 1)
          {
LABEL_70:
            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(-[APSUserCourier stateForProtocolConnection:](self, "stateForProtocolConnection:", v8));
            v106 = v44;
            [v72 setFilterMode:v44];

            v107 = v6;
            uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"APSProtocolReportLastReversePushRTT"]);
            v74 = [v73 BOOLValue];

            uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              v76 = @"NO";
              *(_DWORD *)buf = 138412802;
              v119 = self;
              v120 = 2112;
              if ((_DWORD)v74) {
                v76 = @"YES";
              }
              v121 = (uint64_t)v76;
              v122 = 2112;
              v123 = v8;
              _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "%@: Setting reportLastReversePushRTT: %@ on %@",  buf,  0x20u);
            }

            outgoingMessageQueue = self->_outgoingMessageQueue;
            uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v8, "identifier"));
            -[APSOutgoingMessageQueue setShouldReportLastReversePushRTT:onInterface:]( outgoingMessageQueue,  "setShouldReportLastReversePushRTT:onInterface:",  v74,  v78);

            v116[0] = @"ConnectionType";
            char v79 = (void *)objc_claimAutoreleasedReturnValue( -[APSUserCourier getConnectionTypeFromProtocolConnection:]( self,  "getConnectionTypeFromProtocolConnection:",  v8));
            v117[0] = v79;
            v116[1] = @"ServerHostname";
            v80 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serverHostname](v8, "serverHostname"));
            v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v80));
            v117[1] = v81;
            v116[2] = @"ServerIP";
            v82 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serverIPAddress](v8, "serverIPAddress"));
            v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v82));
            v117[2] = v83;
            v116[3] = @"LinkQuality";
            v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[__CFString linkQuality](v8, "linkQuality")));
            v117[3] = v84;
            v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v117,  v116,  4LL));
            v86 = [v85 mutableCopy];

            id v6 = v107;
            v87 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKey:@"APSProtocolExperimentIDKey"]);
            if (v87) {
              [v86 setObject:v87 forKeyedSubscript:@"ExperimentID"];
            }
            APSPowerLog(@"Connected", v86);

            uint64_t v11 = v109;
            BOOL v44 = v106;
            goto LABEL_77;
          }

          v113[0] = _NSConcreteStackBlock;
          v113[1] = 3221225472LL;
          v113[2] = sub_100031688;
          v113[3] = &unk_10011E7F8;
          v114 = v8;
          v115 = self;
          -[APSUserCourier enumerateConnectedProtocolConnections:](self, "enumerateConnectedProtocolConnections:", v113);
          v70 = v114;
        }

        goto LABEL_70;
      }
    }

    BOOL v44 = 1LL;
    if (!v11) {
      goto LABEL_77;
    }
    goto LABEL_66;
  }

  __int16 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v119 = self;
    v120 = 1024;
    LODWORD(v121) = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "%@: Received unsucessful connected response: %i. Terminating connection.",  buf,  0x12u);
  }

  if (v11)
  {
    -[__CFString noteConnectionFailureWithReason:](v8, "noteConnectionFailureWithReason:", 20LL);
  }

  else
  {
    unint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      char v46 = self->_proxyClientWithOutstandingPresence;
      *(_DWORD *)buf = 138412546;
      v119 = self;
      v120 = 2112;
      v121 = (uint64_t)v46;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%@ Deactivating client after unsuccessful presence attempt %@",  buf,  0x16u);
    }

    -[APSProxyClient setActive:](self->_proxyClientWithOutstandingPresence, "setActive:", 0LL);
    std::string v47 = self->_proxyClientWithOutstandingPresence;
    unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v8, "identifier"));
    -[APSProxyClient setState:onInterface:](v47, "setState:onInterface:", 0LL, v48);

    std::string v49 = self->_proxyClientWithOutstandingPresence;
    size_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v8, "identifier"));
    -[APSProxyClient setFilterMode:onInterface:](v49, "setFilterMode:onInterface:", 0LL, v50);

    -[APSUserCourier _clearPendingProxyPresence](self, "_clearPendingProxyPresence");
    -[APSUserCourier _performIdleCheck](self, "_performIdleCheck");
  }

LABEL_109:
  -[APSUserCourier _processPendingProxyPresences](self, "_processPendingProxyPresences");
  -[APSUserCourier processIsPowerEfficientToSendChange](self, "processIsPowerEfficientToSendChange");
  block[0] = _NSConcreteStackBlock;
  block[1] = *((void *)v16 + 164);
  block[2] = sub_1000317B8;
  block[3] = &unk_10011DC60;
  block[4] = self;
  v112 = v8;
  v105 = v8;
  dispatch_async(&_dispatch_main_q, block);
}

void sub_100031688(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(id *)(a1 + 32) != v3)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    unsigned __int8 v7 = [v5 isEqualToString:v6];

    if ((v7 & 1) == 0)
    {
      unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        int v11 = 138412802;
        uint64_t v12 = v9;
        __int16 v13 = 2112;
        uint64_t v14 = v10;
        __int16 v15 = 2112;
        id v16 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Got connect message for new interface %@, disconnecting from old interface %@",  (uint8_t *)&v11,  0x20u);
      }

      [v4 disconnectWithReason:7];
    }
  }
}

void sub_1000317B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained didConnectOrDisconnectTokenForCourier:*(void *)(a1 + 32) onProtocolConnection:*(void *)(a1 + 40)];
}

id sub_100031A60(uint64_t a1, void *a2)
{
  return [a2 noteConnectionFailureWithReason:*(unsigned int *)(a1 + 32)];
}

LABEL_60:
      v153 = 0LL;
      v51 = 0;
LABEL_61:
      char v52 = 1;
      goto LABEL_74;
    }

    if (v12)
    {
      tokenStore = self->_tokenStore;
      uint64_t v54 = objc_claimAutoreleasedReturnValue(-[APSUserCourier courierUser](self, "courierUser"));
      uint64_t v55 = v12;
      v56 = (void *)v54;
      v177 = 0LL;
      uint64_t v57 = v55;
      LOBYTE(tokenStore) = -[APSTokenStore isMatchingTokenInKeychain:user:error:]( tokenStore,  "isMatchingTokenInKeychain:user:error:");
      v153 = 0LL;

      if ((tokenStore & 1) != 0)
      {
        v51 = 0;
        uint64_t v12 = v57;
        goto LABEL_67;
      }

      uint64_t v12 = v57;
    }

    else
    {
      v153 = 0LL;
    }

    uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
      sub_1000BD07C();
    }

    v51 = 1;
LABEL_67:
    size_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[APSPushHistory timestampForTopic:token:](self->_pushHistory, "timestampForTopic:token:", v41, v12));
    if (v12)
    {
      unint64_t v60 = self->_pushHistory;
      int v61 = v12;
      v191 = v12;
      v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v191, 1LL));
      LODWORD(v60) = -[APSPushHistory hasPayload:forTopic:tokens:](v60, "hasPayload:forTopic:tokens:", v162, v41, v62);

      char v52 = 0;
      if (!(_DWORD)v60 || !v50)
      {
        uint64_t v12 = v61;
        goto LABEL_73;
      }

      uint64_t v12 = v61;
      if (![v159 compare:v50])
      {
        v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        std::string v47 = 0;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138413058;
          v179 = self;
          v180 = 2112;
          *(void *)v181 = v12;
          *(_WORD *)&v181[8] = 2112;
          v182 = (uint64_t)v41;
          v183 = 2112;
          v184 = (uint64_t)v159;
          _os_log_error_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_ERROR,  "%@ Received duplicate push for token %@ and topic %@ - message timestamp %@",  buf,  0x2Au);
        }

        goto LABEL_61;
      }
    }

    char v52 = 0;
LABEL_73:
    std::string v47 = 0;
    goto LABEL_74;
  }

  uint64_t v26 = (void *)v12;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
  id v28 = [v21 isConnectedOnInterface:v27];

  std::string v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  id v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if (v28)
  {
    if (v30)
    {
      *(_DWORD *)buf = 138412546;
      v179 = v165;
      v180 = 2112;
      *(void *)v181 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%@ passing this message off to the client device %@ to handle.",  buf,  0x16u);
    }

    objc_msgSend(v21, "receivedPush:onConnectionType:withGeneration:", v10, objc_msgSend(v11, "connectionType"), a5);
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v179 = v165;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%@: Sending transport acknowledgement message.",  buf,  0xCu);
    }

    [v11 sendMessageTransportAcknowledgeMessage];
    __int128 v32 = v163;
  }

  else
  {
    if (v30)
    {
      *(_DWORD *)buf = 138412546;
      v179 = v165;
      v180 = 2112;
      *(void *)v181 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "%@ ignoring message to a disconnected client %@.",  buf,  0x16u);
    }

    __int128 v32 = v163;
  }

  id v19 = v21;
LABEL_142:
}

void sub_100033550(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    unsigned int v5 = *(void **)(a1 + 64);
    id v6 = *(void **)(a1 + 72);
    int v20 = 138413058;
    uint64_t v21 = v3;
    __int16 v22 = 2048;
    uint64_t v23 = v5;
    __int16 v24 = 2112;
    uint64_t v25 = v4;
    __int16 v26 = 2048;
    uint64_t v27 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%@: Sending acknowledgement message with response %ld and messageId %@ (%lu)",  (uint8_t *)&v20,  0x2Au);
  }

  [*(id *)(a1 + 48) sendMessageAcknowledgeMessageWithResponse:*(void *)(a1 + 64) messageId:*(void *)(a1 + 40) generation:*(void *)(a1 + 80) token:0];
  if ([*(id *)(a1 + 56) isTracingEnabled])
  {
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) tracingUUID]);

    if (v7)
    {
      unsigned __int8 v8 = *(void **)(*(void *)(a1 + 32) + 480LL);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) tracingUUID]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) topic]);
      [v8 addItem:v9 withInitialState:3 withTopic:v10];

      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        __int16 v13 = *(void **)(v12 + 480);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) tracingUUID]);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 3LL));
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) topic]);
        int v20 = 138413314;
        uint64_t v21 = v12;
        __int16 v22 = 2112;
        uint64_t v23 = v13;
        __int16 v24 = 2112;
        uint64_t v25 = v14;
        __int16 v26 = 2112;
        uint64_t v27 = v15;
        __int16 v28 = 2112;
        std::string v29 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%@ Added tracing enabled message into collection. {Collection:%@; UUID:%@; State:%@; topic:%@}",
          (uint8_t *)&v20,
          0x34u);
      }
    }
  }

  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog PUSHTRACE](&OBJC_CLASS___APSLog, "PUSHTRACE"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) tracingUUID]);
    int v20 = 138412546;
    uint64_t v21 = v18;
    __int16 v22 = 2112;
    uint64_t v23 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%@: Sending Push ACK. UUID: %@",  (uint8_t *)&v20,  0x16u);
  }
}

id sub_1000337F0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void (**)(uint64_t))(v3 + 16);
  id v5 = a2;
  v4(v3);
  [*(id *)(a1 + 32) setGuid:v5];

  return [*(id *)(a1 + 40) _notifyForIncomingMessage:*(void *)(a1 + 32)];
}

void sub_100033A18(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);

    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1000BD5F0();
    }

    objc_end_catch();
    JUMPOUT(0x1000339D0LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100034234(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  unsigned __int8 v5 = [v3 isEqualToString:v4];

  if ((v5 & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) filterVersionStateMachine]);
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    unsigned int v9 = [v6 hasStaleStateOn:v7 comparedTo:v8];

    if (v9)
    {
      [*(id *)(a1 + 40) logStateWithReason:@"DroppedInterfaceFilter"];
      [*(id *)(a1 + 40) _sendFilterMessageOnProtocolConnection:v10 withReason:8];
    }
  }
}

void sub_100034320(id a1, APSOutgoingMessage *a2, APSOutgoingMessageOriginator *a3)
{
  id v4 = a3;
  unsigned __int8 v5 = a2;
  -[APSOutgoingMessage setCancelled:](v5, "setCancelled:", 1LL);
  uint64_t v6 = APSError(5LL, @"Proxy connection died");
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  -[APSOutgoingMessageOriginator handleResult:forSendingOutgoingMessage:]( v4,  "handleResult:forSendingOutgoingMessage:",  v7,  v5);
}

void sub_1000345EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = [v4 connectionType];
  if (v3 != [*(id *)(a1 + 32) connectionType]) {
    [*(id *)(a1 + 40) _sendFilterMessageOnProtocolConnection:v4 withReason:1];
  }
}

void sub_100034884(uint64_t a1, char a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateForProtocolConnection:*(void *)(a1 + 40)]);
  [v4 setUserState:1];

  if ((a2 & 1) != 0)
  {
    else {
      uint64_t v5 = 0x2000LL;
    }
    if (sub_1000784BC() && (uint64_t v5 = v5 | 0x5000, sub_100078424()))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientIdentityProvider]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nonce]);
      id v27 = 0LL;
      unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([v6 fetchHostVMCertAndSignNonce:v7 error:&v27]);
      id v9 = v27;

      if (v9)
      {
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          uint64_t v29 = v11;
          __int16 v30 = 2112;
          id v31 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@ Host identity signing failed!: %@",  buf,  0x16u);
        }

        [*(id *)(a1 + 40) disconnectWithReason:14];
LABEL_31:

        return;
      }
    }

    else
    {
      unsigned __int8 v8 = 0LL;
    }

    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSDate);
    [*(id *)(a1 + 32) setLastPresence:v14];

    uint64_t v23 = *(void *)(a1 + 48);
    __int16 v24 = *(void **)(a1 + 40);
    int v15 = *(unsigned __int8 *)(a1 + 56);
    if (*(_BYTE *)(a1 + 56))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) certificates]);
      if (*(_BYTE *)(a1 + 56))
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nonce]);
        if (*(_BYTE *)(a1 + 56))
        {
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
          char v19 = 0;
          char v20 = 0;
          uint64_t v21 = v8;
          if (!*(_BYTE *)(a1 + 56)) {
            unsigned __int8 v8 = 0LL;
          }
        }

        else
        {
          uint64_t v21 = v8;
          unsigned __int8 v8 = 0LL;
          char v20 = 0;
          uint64_t v18 = 0LL;
          char v19 = 1;
        }

        goto LABEL_24;
      }

      uint64_t v21 = v8;
      unsigned __int8 v8 = 0LL;
      id v17 = 0LL;
    }

    else
    {
      uint64_t v21 = v8;
      unsigned __int8 v8 = 0LL;
      id v17 = 0LL;
      id v16 = 0LL;
    }

    uint64_t v18 = 0LL;
    char v19 = 1;
    char v20 = 1;
LABEL_24:
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_100034BE4;
    v25[3] = &unk_10011E7D0;
    __int16 v22 = *(void **)(a1 + 40);
    v25[4] = *(void *)(a1 + 32);
    id v26 = v22;
    [v24 sendConnectMessageWithToken:v23 presenceFlags:v5 certificates:v16 nonce:v17 signature:v18 hostCertificateInfo:v8 withCompletion:v25];
    if ((v19 & 1) == 0) {

    }
    unsigned __int8 v8 = v21;
    if ((v20 & 1) == 0) {

    }
    if (v15) {
    goto LABEL_31;
    }
  }

  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v29 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%@ Refreshing cert/nonce/sig failed, not sending a presence",  buf,  0xCu);
  }

  [*(id *)(a1 + 40) disconnectWithReason:14];
}

id sub_100034BE4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_100034CBC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setReason:2];
  [*(id *)(a1 + 40) _sendFilterMessageOnProtocolConnection:v4 withChange:*(void *)(a1 + 32)];
}

void sub_1000352DC(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  context = objc_autoreleasePoolPush();
  char v19 = objc_autoreleasePoolPush();
  v69 = v13;
  v70 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _topicsByHashFromTopicStateDictionary:v13]);
  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _topicsByHashFromTopicStateDictionary:v14]);
  v74 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _topicsByHashFromTopicStateDictionary:v15]);
  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _topicsByHashFromTopicStateDictionary:v16]);
  v76 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _topicsByHashFromTopicStateDictionary:v17]);
  objc_autoreleasePoolPop(v19);
  char v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] filterVersionStateMachine]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1[5] identifier]);
  id v79 = 0LL;
  id v22 = [v20 versionToSendFor:v21 error:&v79];
  id v23 = v79;

  if (v23)
  {
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v81 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Error fetching filter version; disconnecting {versionError: %@}",
        buf,
        0xCu);
    }

    [a1[5] disconnectWithReason:6];
  }

  else
  {
    id v66 = v22;
    id v67 = v18;
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courierOversized](&OBJC_CLASS___APSLog, "courierOversized"));
    id v65 = v17;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v60 = a1[4];
      unint64_t v26 = (unint64_t)[a1[6] reason];
      id v63 = v15;
      id v64 = v14;
      id v62 = v16;
      if (v26 > 8) {
        uint64_t v59 = 0LL;
      }
      else {
        uint64_t v59 = off_10011EB58[v26];
      }
      id v27 = (void *)objc_claimAutoreleasedReturnValue([a1[6] triggeringTopic]);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([a1[7] debugDescription]);
      id v58 = a1[5];
      uint64_t v29 = APSPrettyPrintCollection(v70, 1LL, 0LL, 1LL);
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      uint64_t v31 = APSPrettyPrintCollection(v74, 1LL, 0LL, 1LL);
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      uint64_t v33 = APSPrettyPrintCollection(v75, 1LL, 0LL, 1LL);
      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v35 = APSPrettyPrintCollection(v76, 1LL, 0LL, 1LL);
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      uint64_t v37 = APSPrettyPrintCollection(v72, 1LL, 0LL, 1LL);
      unint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      *(_DWORD *)buf = 138414850;
      id v81 = v60;
      __int16 v82 = 2048;
      id v83 = v66;
      __int16 v84 = 2112;
      v85 = v59;
      __int16 v86 = 2112;
      v87 = v27;
      __int16 v88 = 2112;
      v89 = v28;
      __int16 v90 = 2114;
      id v91 = v58;
      __int16 v92 = 2112;
      v93 = v30;
      __int16 v94 = 2112;
      v95 = v32;
      __int16 v96 = 2112;
      v97 = v34;
      __int16 v98 = 2112;
      v99 = v36;
      __int16 v100 = 2112;
      v101 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%@: Sending filter message for version: %llu reason %@ triggeringTopic %@ with token %@ on interface %{public}@ with enabled topics = %@, opportunistic topics = %@, non-waking topics = %@, paused topics = %@, ignored topics = %@",  buf,  0x70u);

      id v15 = v63;
      id v14 = v64;
      id v16 = v62;
      id v17 = v65;
    }

    unsigned int v39 = [a1[5] isConnected];
    id v40 = a1[4];
    if (v39)
    {
      unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 filterVersionStateMachine]);
      std::string v42 = (void *)objc_claimAutoreleasedReturnValue([a1[5] identifier]);
      unsigned __int8 v43 = [v41 everSentFilterOn:v42];

      if ((v43 & 1) == 0)
      {
        ++*((void *)a1[4] + 25);
        [*((id *)a1[4] + 28) hold];
      }

      unsigned __int8 v44 = [a1[4] expectsResponseForFilterMessageOnProtocolConnection:a1[5]];
      id v45 = v66;
      if (_os_feature_enabled_impl("APS", "EmperorPenguin")
        && [a1[5] interfaceConstraint] == (id)1)
      {
        uint64_t v61 = objc_claimAutoreleasedReturnValue([a1[4] _ultraConstrainedTopicsFromTopicDictionary:v70]);

        uint64_t v71 = objc_claimAutoreleasedReturnValue([a1[4] _ultraConstrainedTopicsFromTopicDictionary:v72]);
        uint64_t v73 = objc_claimAutoreleasedReturnValue([a1[4] _ultraConstrainedTopicsFromTopicDictionary:v74]);

        id v46 = v15;
        uint64_t v47 = objc_claimAutoreleasedReturnValue([a1[4] _ultraConstrainedTopicsFromTopicDictionary:v75]);

        id v48 = v16;
        uint64_t v49 = objc_claimAutoreleasedReturnValue([a1[4] _ultraConstrainedTopicsFromTopicDictionary:v76]);

        uint64_t v75 = (void *)v47;
        v76 = (void *)v49;
        id v16 = v48;
        id v45 = v66;
        id v15 = v46;
        size_t v50 = (void *)v73;
        uint64_t v72 = (void *)v71;
        v74 = v50;
        v70 = (void *)v61;
      }

      id v17 = v65;
      id v51 = a1[7];
      v77[0] = _NSConcreteStackBlock;
      v77[1] = 3221225472LL;
      v77[2] = sub_100035980;
      v77[3] = &unk_10011E7D0;
      id v52 = a1[5];
      v77[4] = a1[4];
      id v78 = v52;
      LOBYTE(v57) = v44;
      [v78 sendFilterMessageWithEnabledTopicsByHash:v70 ignoredTopicsByHash:v72 opportunisticTopicsByHash:v74 nonWakingTopicsByHash:v75 pau sedTopicsByHash:v76 saltsByTopic:v67 token:v51 version:v45 expectsResponse:v57 withCompletion:v77];
      if ((v44 & 1) == 0)
      {
        v53 = (void *)objc_claimAutoreleasedReturnValue([a1[4] filterVersionStateMachine]);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([a1[5] identifier]);
        [v53 noteAckedWithVersion:v45 on:v54];
      }

      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([a1[4] filterVersionStateMachine]);
      v56 = (void *)objc_claimAutoreleasedReturnValue([a1[5] identifier]);
      [v55 noteSentWithVersion:v45 on:v56];

      [a1[4] logStateWithReason:0];
      [a1[4] setHasFilterChanged:0];
      +[APSMetricLogger filterSent:connectionType:]( APSMetricLogger,  "filterSent:connectionType:",  a1[6],  [a1[5] connectionType]);
    }

    else
    {
      [v40 logStateWithReason:0];
    }

    id v18 = v67;
  }

  objc_autoreleasePoolPop(context);
}

id sub_100035980(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedFilterResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

id sub_100035C20(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) receivedConnectedResponseWithParameters:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

id sub_100035F84(uint64_t a1, void *a2)
{
  return [a2 sendSetActiveState:1 forInterval:*(unsigned int *)(a1 + 32)];
}

id sub_100036500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return [*(id *)(*(void *)(a1 + 32) + 424) handleErrorSendingOutgoingMessage:*(void *)(a1 + 40) error:a3];
  }
  else {
    return _[*(id *)(a1 + 32) _handleOutgoingMessageAcknowledgment:a2 onProtocolConnection:*(void *)(a1 + 48)];
  }
}

void sub_100036F44(uint64_t a1, uint64_t a2)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateForProtocolConnection:a2]);
  [v2 setTrackingState:0];
}

id sub_100036F7C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendPresenceTrackingRequestOnProtocolConnection:a2];
}

uint64_t sub_100037878(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___TASKRequest);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark(a2, v14) || (sub_100068EB8((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100037D28(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(&OBJC_CLASS___TASKEdgeDnsInput);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark(a2, v14) || (sub_10006FF64((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000381B4(_Unwind_Exception *a1)
{
}

void sub_1000381D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = @"YES";
      if (!v3) {
        uint64_t v11 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      id v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Got called to checkpoint app token cleanup run state with non null activity %@",  buf,  0xCu);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10003840C;
    block[3] = &unk_10011E4F0;
    block[4] = WeakRetained;
    dispatch_async(&_dispatch_main_q, block);
  }

  else if (!state)
  {
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Told to check in for app token cleanup activity",  buf,  2u);
    }

    xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_4_HOURS);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, 43200LL);
    xpc_object_t v8 = xpc_activity_copy_criteria(v3);
    id v9 = v8;
    if (!v8 || !xpc_equal(v8, v7)) {
      xpc_activity_set_criteria(v3, v7);
    }
  }
}

id sub_10003840C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performAppTokenCleanup];
}

void sub_100038F4C(id *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] publicToken]);
    [a1[4] setBaseToken:v4];

    [a1[5] saveToken:v3 forInfo:a1[4] connection:a1[6]];
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = a1[4];
      id v6 = a1[5];
      int v8 = 138412802;
      id v9 = v6;
      __int16 v10 = 2112;
      id v11 = v3;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@ handleReceivedToken: %@ forInfo %@",  (uint8_t *)&v8,  0x20u);
    }

    [a1[6] handleReceivedToken:v3 forInfo:a1[4]];
  }
}

id sub_100039064(id *a1, void *a2)
{
  char v4 = a1 + 4;
  id v5 = [a1[4] type];
  id v6 = v4[1];
  id v7 = (void *)v6[5];
  int v8 = (void *)v6[39];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*v4 topic]);
  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([v4[1] courierUser]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 createTopicHashForTopic:v9 user:v10 shouldSalt:0]);
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 hasTopicHash:v11 includeRecentlyRemoved:0]);

  if (v5 != (id)2 || !v12)
  {
    id v17 = (void *)*((void *)a1[5] + 39);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([a1[4] topic]);
    char v19 = (void *)objc_claimAutoreleasedReturnValue([a1[5] courierUser]);
    id v15 = (id)objc_claimAutoreleasedReturnValue([v17 createTopicHashForTopic:v18 user:v19 shouldSalt:v5 == (id)2]);

    char v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] vapidPublicKey]);
    if (v20)
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*v4 vapidPublicKey]);
      id v22 = sub_100077CD0(v21);
      char v20 = (void *)objc_claimAutoreleasedReturnValue(v22);

      BOOL v23 = v20 == 0LL;
      if (!v15) {
        goto LABEL_15;
      }
    }

    else
    {
      BOOL v23 = 0;
      if (!v15) {
        goto LABEL_15;
      }
    }

    if (!v23)
    {
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([*v4 identifier]);

      if (v24)
      {
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([a1[5] userAppIDManager]);
        unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[5] + 2) name]);
        id v27 = (void *)objc_claimAutoreleasedReturnValue([a1[4] topic]);
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([a1[4] identifier]);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v25 loadOrCreateAppIdForEnvironmentName:v26 topic:v27 identifier:v28]);

        if (!v29)
        {
          unsigned __int8 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
          if (os_log_type_enabled(v44, OS_LOG_TYPE_FAULT)) {
            sub_1000BD72C(v4, v44);
          }

          if (a2)
          {
            uint64_t v45 = APSError(2LL, @"Failed to create per-app token appID");
            id v16 = 0LL;
            *a2 = (id)objc_claimAutoreleasedReturnValue(v45);
          }

          else
          {
            id v16 = 0LL;
          }

          goto LABEL_30;
        }

        id v30 = [v29 unsignedShortValue];
      }

      else
      {
        id v30 = 0LL;
      }

      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*v4 expirationDate]);
      if (v33)
      {
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([*v4 expirationDate]);
        [v34 timeIntervalSinceNow];
        uint64_t v36 = v35;
      }

      else
      {
        uint64_t v36 = 0LL;
      }

      unint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        id v39 = a1[5];
        id v40 = (void *)objc_claimAutoreleasedReturnValue([a1[4] identifier]);
        *(_DWORD *)buf = 138412802;
        id v55 = v39;
        __int16 v56 = 1024;
        int v57 = (int)v30;
        __int16 v58 = 2112;
        uint64_t v59 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "%@ generated appId %d for identifier %@",  buf,  0x1Cu);
      }

      id v32 = (id)objc_claimAutoreleasedReturnValue([a1[5] preferredProtocolConnection]);
      if (v32)
      {
        unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([a1[6] publicToken]);
        id v42 = [a1[4] type];
        id v48 = _NSConcreteStackBlock;
        uint64_t v49 = 3221225472LL;
        size_t v50 = sub_1000395B0;
        id v51 = &unk_10011E7D0;
        id v52 = a1[5];
        id v32 = v32;
        id v53 = v32;
        [v32 sendTokenGenerateMessageWithTopicHash:v15 baseToken:v41 appId:v30 expirationTTL:v36 vapidPublicKeyHash:v20 type:v42 withCompletion:&v48];
      }

LABEL_29:
      id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "identifier", v46, v47, v48, v49, v50, v51, v52));
LABEL_30:

      goto LABEL_31;
    }

  return (__SecIdentity *)*p_cachedClientIdentity;
}

                    __break(1u);
                    goto LABEL_30;
                  }
                }

                __break(0x5500u);
                goto LABEL_29;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

LABEL_15:
    if (a2)
    {
      if (v5 == (id)2)
      {
        uint64_t v31 = APSURLTokenError(102LL, &stru_100123240);
        id v32 = 0LL;
        *a2 = (id)objc_claimAutoreleasedReturnValue(v31);
        goto LABEL_29;
      }

      id v46 = (void *)objc_claimAutoreleasedReturnValue([*v4 topic]);
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([*v4 identifier]);
      uint64_t v37 = APSError(1LL, @"Unable to copy hash for topic %@ identifier %@");
      *a2 = (id)objc_claimAutoreleasedReturnValue(v37);
    }

    id v32 = 0LL;
    goto LABEL_29;
  }

  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
    sub_1000BD6B8((uint64_t *)v4, v13);
  }

  uint64_t v14 = APSURLTokenError(103LL, &stru_100123240);
  id v15 = (id)objc_claimAutoreleasedReturnValue(v14);
  [a1[6] handleReceivedTokenError:v15 forInfo:a1[4]];
  if (a2)
  {
    id v15 = v15;
    id v16 = 0LL;
    *a2 = v15;
  }

  else
  {
    id v16 = 0LL;
  }

  id v18 = @"No eligible topics, will not send or receive push notifications";
LABEL_35:

LABEL_39:
  if (self->_connectionPortName)
  {
    objc_msgSend(v4, "appendDescription:stringValue:", @"application port name");
    [v4 pushIndent];
    if (self->_processName) {
      objc_msgSend(v4, "appendDescription:stringValue:", @"process");
    }
    [v4 appendDescription:@"persistent connection status" stringValue:v18];
    double v35 = @"persistent connection created";
  }

  else if (self->_processName)
  {
    objc_msgSend(v4, "appendDescription:stringValue:", @"process");
    [v4 pushIndent];
    [v4 appendDescription:@"process connection status" stringValue:v18];
    double v35 = @"process connected";
  }

  else
  {
    [v4 appendDescription:@"name" stringValue:self->_name];
    [v4 pushIndent];
    double v35 = @"created";
  }

  [v4 appendDescription:v35 timeIntervalValue:self->_dateCreated];
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[APSConnectionServer user](self, "user"));
  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 name]);
  [v4 appendDescription:@"user" stringValue:v37];

  unint64_t v38 = self->_publicToken;
  if (v38 && -[NSData length](v38, "length"))
  {
    id v39 = -[NSData length](self->_publicToken, "length");
    id v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSData debugDescription](self->_publicToken, "debugDescription"));
    unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@, {length = %lu, bytes=%@}",  @"Yes",  v39,  v40));
    [v4 appendDescription:@"token" stringValue:v41];
  }

  else
  {
    [v4 appendDescription:@"token" stringValue:@"Missing"];
  }

  [v4 appendDescription:@"status change notifications" enabledValue:self->_enableStatusChangeNotifications];
  [v4 appendDescription:@"track acitivity presence" enabledValue:self->_trackActivityPresence];
  id v42 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
  [v42 appendPrettyStatusToStatusPrinter:v4 total:1 direction:@"incoming"];

  unsigned __int8 v43 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats outgoingCounts](self->_payloadMessageStats, "outgoingCounts"));
  [v43 appendPrettyStatusToStatusPrinter:v4 total:1 direction:@"reverse"];

  -[APSConnectionServer appendPrettyStatusToStatusPrinter:forTopics:type:]( self,  "appendPrettyStatusToStatusPrinter:forTopics:type:",  v4,  self->_enabledTopics,  @"enabled topics");
  -[APSConnectionServer appendPrettyStatusToStatusPrinter:forTopics:type:]( self,  "appendPrettyStatusToStatusPrinter:forTopics:type:",  v4,  self->_opportunisticTopics,  @"opportunistic topics");
  -[APSConnectionServer appendPrettyStatusToStatusPrinter:forTopics:type:]( self,  "appendPrettyStatusToStatusPrinter:forTopics:type:",  v4,  self->_nonWakingTopics,  @"nonwaking topics");
  numberNotificationsSent = self->_numberNotificationsSent;
  if (numberNotificationsSent)
  {
    numberNotificationsAcknowledged = self->_numberNotificationsAcknowledged;
    if (numberNotificationsSent < 1 || numberNotificationsAcknowledged)
    {
      if (numberNotificationsSent <= numberNotificationsAcknowledged) {
        id v46 = @"Ok";
      }
      else {
        id v46 = @"Application possibly slow or failing to acknowledge some ipc messages";
      }
    }

    else
    {
      id v46 = @"Application possibly not responding to ipc messages";
    }
  }

  else
  {
    id v46 = @"No ipc messages have been sent";
  }

  [v4 appendDescription:@"ipc message queue status" stringValue:v46];
  if (self->_numberNotifications >= 1)
  {
    [v4 pushIndent];
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
    id v48 = (void *)objc_claimAutoreleasedReturnValue([v47 total]);
    objc_msgSend(v4, "appendDescription:unsignedIntegerValue:", @"push notifications", objc_msgSend(v48, "count"));

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
    size_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 total]);
    [v50 lastMessageTime];
    id v52 = v51;

    if (v52 != 0.0)
    {
      id v53 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 total]);
      [v54 lastMessageTime];
      objc_msgSend(v4, "appendDescription:timeIntervalValue:", @"last push notification");
    }

    id v55 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
    __int16 v56 = (void *)objc_claimAutoreleasedReturnValue([v55 total]);
    int v57 = (void *)objc_claimAutoreleasedReturnValue([v56 lastMessageTopic]);

    if (v57)
    {
      __int16 v58 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 total]);
      id v60 = (void *)objc_claimAutoreleasedReturnValue([v59 lastMessageTopic]);
      [v4 appendDescription:@"last push notification topic" stringValue:v60];
    }

    numberNotifications = (double)self->_numberNotifications;
    id v62 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCounts](self->_payloadMessageStats, "incomingCounts"));
    id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 total]);
    [v63 lastMessageTime];
    [v4 appendDescription:@"non-push ipc messages" unsignedIntegerValue:(unint64_t)(numberNotifications - v64)];

    if (self->_lastNotificationTime != 0.0) {
      objc_msgSend(v4, "appendDescription:timeIntervalValue:", @"last ipc action");
    }
    if (self->_numberNotificationsLost >= 1) {
      objc_msgSend(v4, "appendDescription:unsignedIntegerValue:", @"ipc messages lost");
    }
    [v4 appendDescription:@"ipc messages sent" unsignedIntegerValue:self->_numberNotificationsSent];
    if (self->_lastNotificationSentTime != 0.0) {
      objc_msgSend(v4, "appendDescription:timeIntervalValue:", @"last ipc message sent");
    }
    if (self->_numberNotificationsQueued >= 1) {
      objc_msgSend(v4, "appendDescription:unsignedIntegerValue:", @"ipc messages queued");
    }
    if (self->_enqueuedBlockCount || self->_numberNotificationsQueued >= 1) {
      objc_msgSend(v4, "appendDescription:unsignedIntegerValue:", @"ipc messages waiting in queue");
    }
    if (self->_numberNotificationsDropped >= 1) {
      objc_msgSend(v4, "appendDescription:unsignedIntegerValue:", @"ipc messages skipped");
    }
    [v4 appendDescription:@"ipc messages acknowledged" unsignedIntegerValue:self->_numberNotificationsAcknowledged];
    if (self->_lastNotificationAcknowledgedTime != 0.0) {
      objc_msgSend(v4, "appendDescription:timeIntervalValue:", @"last ack from application");
    }
    id v65 = self->_numberNotificationsSent;
    if (v65 >= 1) {
      [v4 appendDescription:@"ipc delivery success rate" successRateWithSuccessCount:self->_numberNotificationsAcknowledged failureCount:v65 - self->_numberNotificationsAcknowledged];
    }
    [v4 popIndent];
  }

  __int16 v98 = 0u;
  v99 = 0u;
  __int16 v96 = 0u;
  v97 = 0u;
  id v66 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet allObjects](self->_ignoredTopics, "allObjects"));
  id v67 = (void *)objc_claimAutoreleasedReturnValue([v66 sortedArrayUsingSelector:"compare:"]);

  v68 = [v67 countByEnumeratingWithState:&v96 objects:v105 count:16];
  if (v68)
  {
    v69 = v68;
    v70 = *(void *)v97;
    do
    {
      for (CFIndex j = 0LL; j != v69; CFIndex j = (char *)j + 1)
      {
        if (*(void *)v97 != v70) {
          objc_enumerationMutation(v67);
        }
        [v4 appendDescription:@"ignored topic" stringValue:*(void *)(*((void *)&v96 + 1) + 8 * (void)j)];
      }

      v69 = [v67 countByEnumeratingWithState:&v96 objects:v105 count:16];
    }

    while (v69);
  }

  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats incomingCountsByTopic](self->_payloadMessageStats, "incomingCountsByTopic"));
  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v72 allKeys]);
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](&OBJC_CLASS___NSMutableSet, "setWithArray:", v73));

  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[APSPayloadMessageStats outgoingCountsByTopic](self->_payloadMessageStats, "outgoingCountsByTopic"));
  v76 = (void *)objc_claimAutoreleasedReturnValue([v75 allKeys]);
  [v74 addObjectsFromArray:v76];

  __int128 v77 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v74 count]));
  [v77 unionSet:self->_enabledTopics];
  [v77 unionSet:self->_opportunisticTopics];
  [v77 unionSet:self->_nonWakingTopics];
  [v77 unionSet:self->_ignoredTopics];
  id v78 = [v74 mutableCopy];
  [v78 minusSet:v77];
  if ([v78 count])
  {
    v89 = v77;
    __int16 v90 = v74;
    __int16 v94 = 0u;
    v95 = 0u;
    __int16 v92 = 0u;
    v93 = 0u;
    __int16 v88 = v78;
    id v79 = (void *)objc_claimAutoreleasedReturnValue([v78 allObjects]);
    v80 = (void *)objc_claimAutoreleasedReturnValue([v79 sortedArrayUsingSelector:"compare:"]);

    obCFIndex j = v80;
    id v81 = [v80 countByEnumeratingWithState:&v92 objects:v104 count:16];
    if (v81)
    {
      __int16 v82 = v81;
      id v83 = *(void *)v93;
      do
      {
        for (k = 0LL; k != v82; k = (char *)k + 1)
        {
          if (*(void *)v93 != v83) {
            objc_enumerationMutation(obj);
          }
          v85 = *(void *)(*((void *)&v92 + 1) + 8LL * (void)k);
          [v4 appendDescription:@"disabled topic" stringValue:v85];
          [v4 pushIndent];
          objc_msgSend( v4,  "appendDescription:stringValue:",  @"status",  @"Topic disabled, unable to send or receive push notifications");
          __int16 v86 = (void *)objc_claimAutoreleasedReturnValue( -[APSPayloadMessageStats incomingCountsForTopic:]( self->_payloadMessageStats,  "incomingCountsForTopic:",  v85));
          [v86 appendPrettyStatusToStatusPrinter:v4 total:0 direction:@"incoming"];
          v87 = (void *)objc_claimAutoreleasedReturnValue( -[APSPayloadMessageStats outgoingCountsForTopic:]( self->_payloadMessageStats,  "outgoingCountsForTopic:",  v85));
          [v87 appendPrettyStatusToStatusPrinter:v4 total:0 direction:@"reverse"];
          [v4 popIndent];
        }

        __int16 v82 = [obj countByEnumeratingWithState:&v92 objects:v104 count:16];
      }

      while (v82);
    }

    __int128 v77 = v89;
    v74 = v90;
    id v78 = v88;
  }

  [v4 popIndent];
}
}

  if (v6) {
    (*((void (**)(id, void, void))v6 + 2))(v6, 0LL, 0LL);
  }
LABEL_33:
}

  __break(0x5519u);
  return result;
}

    __break(0x5519u);
  }

  return result;
}

    __break(0x5519u);
  }

  return result;
}

LABEL_31:
  return v16;
}
        }

        objc_autoreleasePoolPop(v10);
        int v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v26,  v30,  16LL);
    }

    while (v6);
  }

  id v18 = self;
  objc_sync_enter(v18);
  if (v4)
  {
    char v19 = (NSTimer *)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:1.0]);
    timer = v18->_timer;
    uint64_t v21 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
    if (timer)
    {
      if (v21)
      {
        *(_DWORD *)buf = 138412546;
        id v32 = v18;
        uint64_t v33 = 2112;
        __int128 v34 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@: Setting outgoing message timer fire date %@",  buf,  0x16u);
      }

      -[NSTimer setFireDate:](v18->_timer, "setFireDate:", v19);
    }

    else
    {
      if (v21)
      {
        *(_DWORD *)buf = 138412546;
        id v32 = v18;
        uint64_t v33 = 2112;
        __int128 v34 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@: Creating outgoing message timer with fire date %@",  buf,  0x16u);
      }

      id v22 = -[NSTimer initWithFireDate:interval:target:selector:userInfo:repeats:]( objc_alloc(&OBJC_CLASS___NSTimer),  "initWithFireDate:interval:target:selector:userInfo:repeats:",  v19,  v18,  "_timerFired:",  0LL,  0LL,  0.0);
      BOOL v23 = v18->_timer;
      v18->_timer = v22;

      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
      [v24 addTimer:v18->_timer forMode:NSDefaultRunLoopMode];
    }

                __break(0x5513u);
                goto LABEL_32;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

                            __break(0x5513u);
                            return result;
                          }

                          if (ccec_verify(v18, a4, a3, v21, v22, &v24)) {
LABEL_24:
                          }
                            __int16 v24 = 0;
                        }

                        return v24 != 0;
                      }

id sub_1000395B0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleAppTokenGenerateResponse:a2 onProtocolConnection:*(void *)(a1 + 40)];
}

void sub_1000395C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) topic]);
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    int v20 = 138413314;
    uint64_t v21 = v8;
    __int16 v22 = 2112;
    id v23 = v5;
    __int16 v24 = 2112;
    id v25 = v6;
    __int16 v26 = 2112;
    id v27 = v9;
    __int16 v28 = 2112;
    uint64_t v29 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@ Received response %@ and error %@ for token request for topic %@ identifier %@",  (uint8_t *)&v20,  0x34u);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"APSProtocolAppTokenGenerateResponse"]);
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"APSProtocolAppTokenGenerateResponseToken"]);
  if (v11)
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"APSProtocolAppTokenGenerateResponseTopicHash"]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"APSProtocolAppTokenGenerateResponseAppId"]);
    if (!v14) {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL));
    }
    switch([v11 intValue])
    {
      case 0u:
        if ((int)[v14 intValue] >= 0x10000 || v13 == 0 || v12 == 0)
        {
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            sub_1000BD8C4((uint64_t)v5, v17);
          }
          goto LABEL_29;
        }

        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
        goto LABEL_30;
      case 1u:
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000BD934();
        }
        goto LABEL_29;
      case 2u:
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000BD960();
        }
        goto LABEL_29;
      case 4u:
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000BD98C();
        }
        goto LABEL_29;
      case 5u:
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000BD9B8();
        }
        goto LABEL_29;
      default:
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_1000BD898();
        }
LABEL_29:

LABEL_30:
        break;
    }
  }

  else
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      sub_1000BD860();
    }
  }

  if (!v12)
  {
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT)) {
      sub_1000BD7E8(a1, v18, v19);
    }

    [*(id *)(a1 + 48) handleReceivedTokenError:v6 forInfo:*(void *)(a1 + 40)];
  }
}

void sub_10003A134(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

APSProcessModeUserTracker *sub_10003A140()
{
  uint64_t v0 = objc_alloc(&OBJC_CLASS___APSProcessModeUserTracker);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  uint64_t v2 = -[APSProcessModeUserTracker initWithMultiUserMode:](v0, "initWithMultiUserMode:", v1);

  return v2;
}

BOOL sub_10003A230(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
      return v3 == 0;
    }
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      int v3 = 1;
      return v3 == 0;
    }

    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LOBYTE(v6) = 0;
    }
LABEL_13:
    if (v3) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = (v6 & 7) == 4;
    }
    if (v10) {
      return v3 == 0;
    }
    if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
      return 0LL;
    }
  }

void sub_10003A62C(id a1, NSString *a2, BOOL a3, BOOL a4, NSNumber *a5, NSNumber *a6)
{
  BOOL v7 = a4;
  BOOL v8 = a3;
  id v9 = a5;
  BOOL v10 = a6;
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog telemetry](&OBJC_CLASS___APSLog, "telemetry"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v12 = @"NO";
    int v14 = 138413058;
    if (v8) {
      id v13 = @"YES";
    }
    else {
      id v13 = @"NO";
    }
    id v15 = v13;
    __int16 v16 = 2112;
    if (v7) {
      __int16 v12 = @"YES";
    }
    id v17 = v12;
    __int16 v18 = 2112;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    uint64_t v21 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Reporting wake-to-live metric {connectedOnWake: %@, everConnected: %@, timeToFullyConnect: %@, timeToLastFromStorage: %@}",  (uint8_t *)&v14,  0x2Au);
  }
}

uint64_t sub_10003B274(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v28 = 28LL;
        goto LABEL_52;
      case 2u:
        __int16 v18 = objc_alloc_init(&OBJC_CLASS___PSAppChannelSubscriptions);
        [(id)a1 addAppChannelSubscriptions:v18];
        if (PBReaderPlaceMark(a2, v29) && sub_100064A38(v18, a2))
        {
          PBReaderRecallMark(a2, v29);

LABEL_57:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v14 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v28 = 24LL;
LABEL_52:
        *(_DWORD *)(a1 + v2_Block_object_dispose(va, 8) = v14;
        goto LABEL_57;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0LL;
                goto LABEL_56;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_56:
        *(void *)(a1 + _Block_object_dispose(va, 8) = v25;
        goto LABEL_57;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_57;
    }
  }

uint64_t sub_10003C7DC(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = 0LL;
      *(_BYTE *)(a1 + 28) |= 1u;
      while (1)
      {
        unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 == -1LL || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          goto LABEL_38;
        }
        v16 += 7;
        BOOL v9 = v17++ >= 9;
        if (v9)
        {
          uint64_t v18 = 0LL;
          goto LABEL_40;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v18 = 0LL;
      }
LABEL_40:
      *(void *)(a1 + _Block_object_dispose(va, 8) = v18;
    }

    else if ((_DWORD)v12 == 2)
    {
      char v21 = 0;
      unsigned int v22 = 0;
      uint64_t v23 = 0LL;
      *(_BYTE *)(a1 + 28) |= 2u;
      while (1)
      {
        unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
        v23 |= (unint64_t)(v25 & 0x7F) << v21;
        if ((v25 & 0x80) == 0) {
          goto LABEL_42;
        }
        v21 += 7;
        BOOL v9 = v22++ >= 9;
        if (v9)
        {
          LODWORD(v23) = 0;
          goto LABEL_44;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v23) = 0;
      }
LABEL_44:
      *(_DWORD *)(a1 + memset(v17, 0, 24) = v23;
    }

    else if ((_DWORD)v12 == 1)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(Data);
      unint64_t v15 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10003CEE4(unint64_t a1)
{
  if (a1 >= 4) {
    return (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UnknownInterface %ld",  a1));
  }
  else {
    return *((id *)&off_10011EC80 + a1);
  }
}

void sub_10003CF34()
{
  uint64_t v0 = (void *)qword_10014ED98;
  qword_10014ED98 = (uint64_t)&off_10012B818;

  uint64_t v1 = (void *)qword_10014EDA0;
  qword_10014EDA0 = (uint64_t)&off_10012B840;

  uint64_t v2 = (void *)qword_10014EDA8;
  qword_10014EDA8 = (uint64_t)&off_10012B868;

  int v3 = (void *)qword_10014EDB0;
  qword_10014EDB0 = (uint64_t)&off_10012B890;

  char v4 = objc_alloc_init(&OBJC_CLASS___APSWakeStateManager);
  unsigned int v5 = (void *)qword_10014E840;
  qword_10014E840 = (uint64_t)v4;
}

uint64_t start()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  _set_user_dir_suffix("com.apple.apsd");
  uint64_t v1 = objc_autoreleasePoolPush();
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___APSDaemon);
  objc_autoreleasePoolPop(v1);
  if (v2)
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
    [v3 run];
  }

  objc_autoreleasePoolPop(v0);
  return 0LL;
}

NSMutableSet *sub_10003DA64(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  int v3 = objc_autoreleasePoolPush();
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  char v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allValues", 0));
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      char v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) topicName]);
        -[NSMutableSet addObject:](v2, "addObject:", v9);

        char v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }

  objc_autoreleasePoolPop(v3);
  return v2;
}

__CFString *sub_10003F9C8(unint64_t a1)
{
  if (a1 >= 0xC) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UnknownChange %ld",  a1));
  }
  else {
    return *(&off_10011ECC0 + a1);
  }
}

LABEL_21:
}

    id v60 = v16;
    if (!v16 && !a4)
    {
      v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
      if (os_log_type_enabled(v74, OS_LOG_TYPE_FAULT)) {
        sub_1000C0144();
      }
      goto LABEL_77;
    }

    if (a4)
    {
      unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(-[APSUserCourier courierUser](self, "courierUser"));
      v74 = (os_log_s *)objc_claimAutoreleasedReturnValue([v22 pubSubName]);
    }

    else
    {
      -[APSUserCourier _cancelRequest:](self, "_cancelRequest:", v16);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[APSUserCourier subscriptionRequests](self, "subscriptionRequests"));
      [v23 removeObject:v16];

      v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s userName](v16, "userName"));
    }

    unint64_t v24 = -[APSUserCourier _isResponseForProxyDevice:](self, "_isResponseForProxyDevice:", v66);
    char v25 = [v65 intValue];
    if (v24)
    {
      if (v25 == 3)
      {
        unint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          char v27 = -[os_log_s retryCount](v16, "retryCount");
          *(_DWORD *)buf = 138412802;
          __int16 v90 = self;
          id v91 = 2112;
          __int16 v92 = (uint64_t)v16;
          v93 = 2048;
          __int16 v94 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@ The PubSub request %@ was told to retry.  Retry attempts left %lu",  buf,  0x20u);
        }

        uint64_t v28 = v64;
        if (v64) {
          goto LABEL_50;
        }
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (!os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_FAULT))
        {
LABEL_49:

          -[APSUserCourier _retryRequestAfterDelay:](self, "_retryRequestAfterDelay:", v16);
          uint64_t v28 = 0LL;
LABEL_50:
          [v28 doubleValue];
          __int128 v13 = v16;
          -[APSUserCourier _retryRequestAfterDelay:withDelay:](self, "_retryRequestAfterDelay:withDelay:", v16);
LABEL_78:

          goto LABEL_79;
        }

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[PCPersistentInterfaceManager sharedInstance]( &OBJC_CLASS___PCPersistentInterfaceManager,  "sharedInstance"));
  [v11 enableWiFiAutoAssociation:0 forDelegate:self];
LABEL_22:

  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[PCInterfaceMonitor sharedInstanceForIdentifier:]( &OBJC_CLASS___PCInterfaceMonitor,  "sharedInstanceForIdentifier:",  1LL));
  __int128 v13 = [v12 interfaceConstraint];

  __int128 v14 = v10 | _os_feature_enabled_impl("APS", "EmperorPenguin") ^ 1;
  if (v13 != (id)1) {
    __int128 v14 = 1;
  }
  unint64_t v15 = serverSupportsDualMode & v14;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    criticalReliability = self->_criticalReliability;
    unsigned int v17 = @"disabling";
    uint64_t v18 = self->_serverSupportsDualMode;
    unint64_t v19 = self->_dualMode;
    if ((v15 & v8) != 0) {
      unsigned int v17 = @"enabling";
    }
    disableCostDrivenDualMode = self->_disableCostDrivenDualMode;
    char v21 = @"YES";
    isPiggybacking = self->_isPiggybacking;
    isWoWEnabled = self->_isWoWEnabled;
    if (v3 >= 0x3E9) {
      unint64_t v24 = @"YES";
    }
    else {
      unint64_t v24 = @"NO";
    }
    if (v5) {
      char v25 = @"YES";
    }
    else {
      char v25 = @"NO";
    }
    *(_DWORD *)uint64_t v37 = 138415362;
    if (shouldThrottleConnection) {
      unint64_t v26 = @"NO";
    }
    else {
      unint64_t v26 = @"YES";
    }
    *(void *)&v37[4] = self;
    *(_WORD *)&v37[12] = 2112;
    if (criticalReliability) {
      char v27 = @"YES";
    }
    else {
      char v27 = @"NO";
    }
    *(void *)&v37[14] = v17;
    if (v18) {
      uint64_t v28 = @"YES";
    }
    else {
      uint64_t v28 = @"NO";
    }
    *(_WORD *)&v37[22] = 2112;
    if (v15) {
      uint64_t v29 = @"YES";
    }
    else {
      uint64_t v29 = @"NO";
    }
    unint64_t v38 = v24;
    if (disableCostDrivenDualMode) {
      id v30 = @"YES";
    }
    else {
      id v30 = @"NO";
    }
    *(_WORD *)id v39 = 2112;
    if (isPiggybacking) {
      uint64_t v31 = @"YES";
    }
    else {
      uint64_t v31 = @"NO";
    }
    *(void *)&v39[2] = v25;
    if (isWoWEnabled) {
      id v32 = @"YES";
    }
    else {
      id v32 = @"NO";
    }
    *(_WORD *)&v39[10] = 2112;
    if (v13 != (id)1) {
      char v21 = @"NO";
    }
    *(void *)&v39[12] = v26;
    id v40 = 2112;
    unint64_t v41 = v27;
    id v42 = 2112;
    unsigned __int8 v43 = v28;
    unsigned __int8 v44 = 2048;
    uint64_t v45 = v19;
    id v46 = 2112;
    uint64_t v47 = v29;
    id v48 = 2112;
    uint64_t v49 = v30;
    size_t v50 = 2112;
    id v51 = v31;
    id v52 = 2112;
    id v53 = v32;
    uint64_t v54 = 2112;
    id v55 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ _toggleWiFiAutoAssociateIfNecessary %@ wifi auto association highEnoughPushCost %@  wifiHistoricallyOK %@  serv erLoadIsOK %@ criticalReliability %@  serverSupportsDualMode %@  _dualMode %ld enableDualMode %@ disableCostDriven DualMode %@ isPiggybacking %@ isWoWEnabled %@ isUltraConstrained %@",  v37,  0x84u);
  }

  if (self->_shouldUseDualMode == v15)
  {
    if (self->_disableDualModePiggybackTimer) {
      return;
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = @"NO";
      if (v15) {
        uint64_t v33 = @"YES";
      }
      *(_DWORD *)uint64_t v37 = 138412546;
      *(void *)&v37[4] = self;
      *(_WORD *)&v37[12] = 2112;
      *(void *)&v37[14] = v33;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ should use dual mode changed to %@!",  v37,  0x16u);
    }

    self->_shouldUseDualMode = v15;
  }

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( -[APSNetworkMonitor delegate]( self,  "delegate",  *(_OWORD *)v37,  *(void *)&v37[16],  v38,  *(_OWORD *)v39));
  if ((objc_opt_respondsToSelector(v34, "networkMonitor:evaluateDualModeState:") & 1) != 0) {
    [v34 networkMonitor:self evaluateDualModeState:self->_shouldUseDualMode];
  }
}

void sub_1000425B8(id a1)
{
}

void sub_1000425C8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
    char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _connectionsDebuggingState]);
    int v5 = 138412290;
    id v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Printing all couriers and connection servers in response to USR1 signal: %@",  (uint8_t *)&v5,  0xCu);
  }
}

id sub_10004269C(uint64_t a1, void *a2)
{
  return _[a2 _receivedShutdownNotification];
}

void sub_1000426A4(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received waking signal from IDS.", v3, 2u);
  }
}

void sub_100042710(id a1, OS_xpc_object *a2, OS_xpc_object *a3, OS_xpc_object *a4)
{
  __int128 v11 = a2;
  id v6 = a3;
  uint64_t v7 = a4;
  char v8 = objc_autoreleasePoolPush();
  uint64_t v9 = APSGetXPCConnectionContext(v11);
  int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  aps_peer_event_handler(v6, v7, v10, 0);

  objc_autoreleasePoolPop(v8);
}

void sub_10004279C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = pthread_main_thread_np();
  pthread_dependency_init_np(v23, v10, 0LL);
  qos_class_t v11 = qos_class_self();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000428C8;
  block[3] = &unk_10011EDC8;
  id v12 = *(id *)(a1 + 32);
  id v18 = v7;
  id v19 = v8;
  id v20 = v9;
  id v21 = v12;
  unsigned int v22 = v23;
  id v13 = v9;
  id v14 = v8;
  id v15 = v7;
  dispatch_block_t v16 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v11, 0, block);
  dispatch_async(&_dispatch_main_q, v16);

  pthread_dependency_wait_np(v23);
}

uint64_t sub_1000428C8(uint64_t a1)
{
  return pthread_dependency_fulfill_np(*(void *)(a1 + 64), 0LL);
}

void sub_100042F84(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 updateSafeToSendFilterForce:0];
}

id sub_100042FB8(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateSafeToSendFilterForce:1];
}

LABEL_39:
    if (v61) {
      *uint64_t v61 = 1;
    }
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[APSDaemon userTracker](self, "userTracker"));
    unsigned __int8 v43 = (void *)objc_claimAutoreleasedReturnValue([v45 dependenciesForUser:v65]);

    id v46 = objc_alloc(&OBJC_CLASS___APSConnectionServer);
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( -[APSDaemon connectionServerDelegateForUser:dependencies:]( v29,  "connectionServerDelegateForUser:dependencies:",  v65,  v43));
    id v48 = (void *)objc_claimAutoreleasedReturnValue([v43 userPreferences]);
    uint64_t v49 = v46;
    size_t v50 = v14;
    id v20 = -[APSConnectionServer initWithDelegate:user:userPreferences:enableDarkWake:environmentName:connectionPortName:processName:connection:]( v49,  "initWithDelegate:user:userPreferences:enableDarkWake:environmentName:connectionPortName:processName:connection:",  v47,  v65,  v48,  0LL,  v63,  v14,  v62,  v64);

    -[APSDaemon addConnection:forUser:dependencies:](v29, "addConnection:forUser:dependencies:", v20, v65, v43);
    id v51 = (void *)objc_claimAutoreleasedReturnValue(-[APSDaemon publicTokenForUser:](v29, "publicTokenForUser:", v65));

    id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      id v53 = @"NO";
      if (v51) {
        uint64_t v54 = @"YES";
      }
      else {
        uint64_t v54 = @"NO";
      }
      if (self->_hasEnabledCouriers) {
        id v53 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v75 = (APSDaemon *)v54;
      v76 = 2112;
      __int128 v77 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Do we need to enable the courier? needToken %@  _hasEnabledCouriers %@",  buf,  0x16u);
    }

    id v14 = v50;
    id v15 = v62;
    unsigned int v17 = v64;
    if (self->_hasEnabledCouriers || v51)
    {
      if (v51)
      {
        __int16 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v75 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Connecting courier %@ immediately to get public token",  buf,  0xCu);
        }
      }

      id v55 = -[APSDaemon setEnabled:](v29, "setEnabled:", 1LL);
    }

    sub_1000445EC((uint64_t)v55, v20, v64);
    unsigned __int8 v44 = v65;
    goto LABEL_56;
  }

  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v75 = self;
    id v19 = "%@: Ignoring call to getConnectionServerForEnvironment - system is shutting down";
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
  }

LABEL_5:
  id v20 = 0LL;
LABEL_58:

  return v20;
}

  return v9 ^ 1u;
}

void sub_1000445EC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  int v5 = a3;
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412546;
    id v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Setting connection %@ on peer: %@",  (uint8_t *)&v7,  0x16u);
  }

  xpc_connection_set_context(v5, v4);
}

void sub_100045670(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 _performPeriodicSignal];
}

id sub_100045908(uint64_t a1)
{
  return [*(id *)(a1 + 32) _performPeriodicSignal];
}

BOOL sub_1000467EC(_OWORD *a1, void *a2)
{
  int v3 = a2;
  __int128 v4 = a1[1];
  *(_OWORD *)cf.val = *a1;
  *(_OWORD *)&cf.val[4] = v4;
  int v5 = SecTaskCreateWithAuditToken(0LL, &cf);
  if (v5)
  {
    id v6 = v5;
    *(void *)cf.val = 0LL;
    int v7 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v5, v3, (CFErrorRef *)&cf);
    if (v7)
    {
      id v8 = v7;
      CFTypeID v9 = CFGetTypeID(v7);
      BOOL v10 = v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) != 0;
      CFRelease(v8);
    }

    else
    {
      BOOL v10 = 0LL;
    }

    if (*(void *)cf.val)
    {
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT)) {
        sub_1000BDB80((uint64_t *)&cf, v12);
      }

      CFRelease(*(CFTypeRef *)cf.val);
    }

    CFRelease(v6);
  }

  else
  {
    qos_class_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog daemon](&OBJC_CLASS___APSLog, "daemon"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_1000BDB40(v11);
    }

    BOOL v10 = 0LL;
  }

  return v10;
}

uint64_t sub_100047034(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        BOOL v9 = v5++ >= 9;
        if (v9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((_DWORD)v12 != 3)
      {
        if ((_DWORD)v12 != 2)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_46;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 20LL;
        goto LABEL_45;
      }

      uint64_t String = PBReaderReadString(a2);
      uint64_t v23 = objc_claimAutoreleasedReturnValue(String);
      unint64_t v24 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v23;

LABEL_46:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v18 = 0;
    unsigned int v19 = 0;
    uint64_t v15 = 0LL;
    while (1)
    {
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_42;
      }
      v18 += 7;
      BOOL v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_44:
    uint64_t v26 = 16LL;
LABEL_45:
    *(_DWORD *)(a1 + v26) = v15;
    goto LABEL_46;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_81:
      uint64_t v29 = v98;
      uint64_t v26 = v94;
    }

    char v27 = v95;
    if (v95)
    {
      [v95 timeIntervalSince1970];
      v85 = (unint64_t)(v84 * 1000.0);
      -[APSProtocolMessage appendEightByteItem:bytes:](v28, "appendEightByteItem:bytes:", 22LL, v85);
      -[APNSPackEncoder addInt64WithAttributeId:number:isIndexable:]( self->_encoderWrapper,  "addInt64WithAttributeId:number:isIndexable:",  22LL,  v85,  0LL);
    }

    if (a20 != 1000)
    {
      -[APSProtocolMessage appendFourByteItem:bytes:](v28, "appendFourByteItem:bytes:", 26LL, a20);
      -[APNSPackEncoder addInt32WithAttributeId:number:isIndexable:]( self->_encoderWrapper,  "addInt32WithAttributeId:number:isIndexable:",  26LL,  a20,  0LL);
    }
  }

  if (self->_isPackedFormat) {
    __int16 v86 = -[APNSPackEncoder copyMessage](self->_encoderWrapper, "copyMessage");
  }
  else {
    __int16 v86 = -[APSProtocolMessage copyMessageData](v28, "copyMessageData");
  }
  v87 = v86;
  __int16 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog protocolParser](&OBJC_CLASS___APSLog, "protocolParser"));
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
  {
    __int16 v90 = v27;
    identifier = self->_identifier;
    __int16 v92 = (void *)objc_claimAutoreleasedReturnValue([v29 debugDescription]);
    v93 = [v87 length];
    buf = 134219266;
    v121 = (APSProtocolParser *)identifier;
    char v27 = v90;
    v122 = 2112;
    v123 = v92;
    v124 = 1024;
    v125 = 12;
    v126 = 1024;
    v127 = a5;
    v128 = 2048;
    v129 = a6;
    v130 = 2048;
    v131 = v93;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEBUG,  "P%04llu <out:connect> token: %@ version: %hu flags: %x interface: %lld -- data.len: %llu",  (uint8_t *)&buf,  0x36u);
  }

  return v87;
}

void sub_1000492A4(_Unwind_Exception *a1)
{
}

BOOL sub_100049364(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 72) + 8LL);
  unint64_t v2 = *(void *)(v1 + 24);
  *(void *)(v1 + memset(v17, 0, 24) = v2 + 1;
  unint64_t v3 = *(void *)(a1 + 88);
  if (v2 >= v3)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 8LL);
    if (!*(_BYTE *)(v5 + 24))
    {
      *(_BYTE *)(v5 + memset(v17, 0, 24) = 1;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) - 1LL;
        uint64_t v7 = *(void *)(a1 + 32);
        id v8 = [*(id *)(a1 + 40) count];
        id v9 = [*(id *)(a1 + 48) count];
        id v10 = [*(id *)(a1 + 56) count];
        id v11 = [*(id *)(a1 + 64) count];
        int v13 = 134219266;
        uint64_t v14 = v6;
        __int16 v15 = 2112;
        uint64_t v16 = v7;
        __int16 v17 = 2048;
        id v18 = v8;
        __int16 v19 = 2048;
        id v20 = v9;
        __int16 v21 = 2048;
        id v22 = v10;
        __int16 v23 = 2048;
        id v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Stopped indexing hashes at index %lu {token: %@, enabledHashes.count: %lu, ignoredHashes.count: %lu, opportuni sticHashes.count: %lu, pausedHashes.count: %lu}",  (uint8_t *)&v13,  0x3Eu);
      }
    }
  }

  return v2 < v3;
}

void sub_1000494C4(uint64_t a1, void *a2, unsigned __int8 a3, void *a4)
{
  id v8 = a2;
  id v7 = a4;
  if ((unint64_t)[v8 length] > 0x1F)
  {
    [v7 addObject:v8];
  }

  else
  {
    [*(id *)(a1 + 32) appendItem:a3 data:v8];
    [*(id *)(*(void *)(a1 + 40) + 16) addDataWithAttributeId:a3 data:v8 isIndexable:(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))()];
  }
}

void sub_100049568(void *a1, void *a2, unsigned __int8 a3)
{
  uint64_t v5 = (void *)a1[4];
  id v6 = a2;
  [v5 appendItem:a3 data:v6];
  [*(id *)(a1[5] + 16) addDataWithAttributeId:a3 data:v6 isIndexable:(*(uint64_t (**)(void))(a1[6] + 16))()];
}

LABEL_95:
      if (v10)
      {
        [v9 setObject:v10 forKey:v11];
      }

LABEL_97:
      return;
    default:
      goto LABEL_97;
  }

LABEL_102:
      if (v11)
      {
        [v17 setObject:v11 forKey:v12];
      }

LABEL_104:
      return;
    default:
      goto LABEL_104;
  }

void sub_10004DE4C(uint64_t a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  unint64_t v3 = v2;
  if (v2)
  {
    objc_sync_enter(v2);
    --v3[34];
    objc_sync_exit(v3);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10004DFA8;
  v10[3] = &unk_10011F240;
  id v11 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 48);
  char v15 = *(_BYTE *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = v4;
  id v14 = *(id *)(a1 + 56);
  uint64_t v5 = objc_retainBlock(v10);
  id v6 = v5;
  if (*(_BYTE *)(a1 + 65))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10004E1AC;
    v8[3] = &unk_10011F268;
    id v9 = v5;
    dispatch_block_t v7 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INITIATED, 0, v8);
    dispatch_async(&_dispatch_main_q, v7);
  }

  else
  {
    ((void (*)(void *))v5[2])(v5);
  }
}

void sub_10004DFA8(uint64_t a1)
{
  unint64_t v2 = (unint64_t *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  unint64_t v3 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([v2 connection]);
  if (v3)
  {
    xpc_object_t v4 = xpc_dictionary_create(0LL, 0LL, 0LL);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    int v5 = *(unsigned __int8 *)(a1 + 64);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v16 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dispatching high priority message on server: %@",  buf,  0xCu);
      }

      if (*(void *)(a1 + 56))
      {
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472LL;
        handler[2] = sub_10004E1A0;
        handler[3] = &unk_10011F218;
        id v14 = *(id *)(a1 + 56);
        xpc_connection_send_message_with_reply(v3, v4, &_dispatch_main_q, handler);
      }

      else
      {
        xpc_connection_send_message(v3, v4);
      }
    }

    else
    {
      if (v7)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v16 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Dispatching low priority message on server: %@",  buf,  0xCu);
      }

      xpc_connection_send_notification(v3, v4);
    }

    id v10 = v2 + 23;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    v2[24] = v12;
  }
}

uint64_t sub_10004E1A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004E1AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10004E1B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_9:
  objc_storeStrong((id *)&v17->_user, a4);
  objc_storeWeak((id *)&v17->_delegate, obj);
  objc_storeStrong((id *)&v17->_environmentName, a7);
  id v24 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  char v25 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v24);
  uint64_t v26 = dispatch_queue_create("com.apple.apsd-apsconnectionserver", v25);
  queue = v17->_queue;
  v17->_queue = (OS_dispatch_queue *)v26;

  objc_storeStrong((id *)&v17->_processName, a9);
  v17->_publicTokenDeliveryRetries = 0LL;
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v28 timeIntervalSinceReferenceDate];
  v17->_dateCreated = v29;

  v17->_enableDarkWake = a6;
  if (v15)
  {
    objc_storeStrong((id *)&v17->_connectionPortName, a8);
    -[APSConnectionServer _lookUpMachPort](v17, "_lookUpMachPort");
  }

  if (v16)
  {
    v17->_clientPint ID = xpc_connection_get_pid(v16);
    objc_storeStrong((id *)&v17->_connection, a10);
    -[APSConnectionServer _migratePersistentTopicsIfNeeded](v17, "_migratePersistentTopicsIfNeeded");
  }

  else
  {
    connectionPortName = v17->_connectionPortName;
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
    id v32 = v31;
    if (connectionPortName)
    {
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = (APSConnectionServer *)v17->_connectionPortName;
        *(_DWORD *)buf = 138412290;
        unsigned __int8 v43 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "nil _connection but we have a port name: %@",  buf,  0xCu);
      }
    }

    else if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
    {
      sub_1000BDC94(v32);
    }
  }

  -[APSConnectionServer _suspendQueue](v17, "_suspendQueue");
LABEL_20:

  return v17;
}

  return v7;
}

  return v7;
}

      id v6 = [v3 count] == 0;
      goto LABEL_10;
    }

      id v6 = [v3 count] == 0;
      goto LABEL_10;
    }

      id v6 = [v3 count] == 0;
      goto LABEL_10;
    }

      id v6 = [v3 length] == 0;
      goto LABEL_10;
    }

  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[APSPubSubRequest messageID](v15, "messageID"));
  id v20 = [v19 unsignedIntValue];

  objc_msgSend( *(id *)(a1 + 32),  "_writePubSubMessagetoConnection:messageID:token:connectionType:",  v15,  v20,  *(void *)(a1 + 56),  -[APSPubSubRequest connectionType](v15, "connectionType"));
  [*(id *)(a1 + 32) _retryRequestAfterDelay:v15];
}

id sub_10004EBCC(uint64_t a1, void *a2, void *a3)
{
  id v23 = a2;
  id v4 = a3;
  char v25 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  obCFIndex j = v4;
  id v26 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v26)
  {
    uint64_t v24 = *(void *)v29;
    do
    {
      for (uint64_t i = 0LL; i != v26; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v24) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)i);
        BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([obj objectForKeyedSubscript:v6]);
        v34[0] = @"total";
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 total]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v8 count]));
        v35[0] = v9;
        v34[1] = @"prevHour";
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 total]);
        unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v10 sumOfBucketType:0]));
        v35[1] = v11;
        v34[2] = @"prevDay";
        unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 total]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v12 sumOfBucketType:1]));
        v35[2] = v13;
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v35,  v34,  3LL));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v25, "setObject:forKeyedSubscript:", v14, v6);
      }

      id v26 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
    }

    while (v26);
  }

  v32[0] = @"lastMsg";
  char v15 = (void *)objc_claimAutoreleasedReturnValue([v23 total]);
  [v15 lastMessageTime];
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[APSDatePrinter dateStringFromInterval:](&OBJC_CLASS___APSDatePrinter, "dateStringFromInterval:"));
  v33[0] = v16;
  v32[1] = @"prevHour";
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v23 total]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v17 sumOfBucketType:0]));
  v33[1] = v18;
  v32[2] = @"prevDay";
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v23 total]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v19 sumOfBucketType:1]));
  v32[3] = @"byTopic";
  v33[2] = v20;
  v33[3] = v25;
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v33,  v32,  4LL));

  return v21;
}

void sub_10004F560(uint64_t a1, void *a2)
{
  unint64_t v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  APSInsertIntsToXPCDictionary(v3, [v2 UTF8String]);
  APSInsertBoolsToXPCDictionary(v3, "isConnected");
}

void sub_10004F820(uint64_t a1)
{
  int v2 = sub_1000ABD2C(*(_DWORD *)(a1 + 40), 0x3A98u);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10004F898;
  v3[3] = &unk_10011F2D8;
  int v4 = v2;
  v3[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, v3);
}

void sub_10004F898(uint64_t a1)
{
  int v2 = (mach_error_t *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 40);
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
  id WeakRetained = v4;
  if (!v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_DEFAULT,  "Successfully pinged client",  (uint8_t *)&v17,  2u);
    }

    goto LABEL_10;
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1000BDD9C(a1, v2, WeakRetained);
  }

  if (*v2 == 268435460)
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@ ping client timed out",  (uint8_t *)&v17,  0xCu);
    }

    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    [v8 setEnabledTopics:v9 ignoredTopics:v10 opportunisticTopics:v11 nonWakingTopics:v12];

    id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    -[os_log_s connectionWasClosed:](WeakRetained, "connectionWasClosed:", *(void *)(a1 + 32));
LABEL_10:

    return;
  }

  if (!*(_BYTE *)(*(void *)(a1 + 32) + 283LL))
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%@: Forcing a fresh mach port",  (uint8_t *)&v17,  0xCu);
    }

    char v15 = *(_DWORD **)(a1 + 32);
    mach_port_name_t v16 = v15[8];
    if (v16)
    {
      mach_port_deallocate(mach_task_self_, v16);
      *(_DWORD *)(*(void *)(a1 + 32) + 32LL) = 0;
      char v15 = *(_DWORD **)(a1 + 32);
    }

    [v15 _initiateConnectionIfNecessary];
  }

void sub_10004FB00(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  int v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  [v2 setEnabledTopics:v3 ignoredTopics:v4 opportunisticTopics:v5 nonWakingTopics:v6];

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained connectionWasClosed:*(void *)(a1 + 32)];
}

void sub_10004FD00(uint64_t a1, void *a2)
{
  id v3 = a2;
  APSInsertIntsToXPCDictionary(v3, [APSXPCMessageTypeKey UTF8String]);
  int v5 = *(void **)(a1 + 32);
  int v4 = (id *)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "dictionaryRepresentation", 43, 0));
  uint64_t v7 = APSCreateXPCObjectFromDictionary();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if (v8)
  {
    xpc_dictionary_set_value(v3, "message", v8);
  }

  else
  {
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1000BDE34(v4, v9);
    }
  }
}

void sub_10004FF00(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  APSInsertIntsToXPCDictionary(v4, [v3 UTF8String]);
  objc_msgSend(*(id *)(a1 + 32), "code", 41, 0);
  APSInsertIntsToXPCDictionary(v4, "messageID");
  APSInsertNSUIntegersToXPCDictionary(v4, "ackTimestamp");
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localizedDescription]);
  APSInsertNSStringsToXPCDictionary(v4, "errorDescription");
}

void sub_10005056C(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  APSInsertIntsToXPCDictionary(v4, [v3 UTF8String]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryRepresentation", 54, 0));
  uint64_t v6 = APSCreateXPCObjectFromDictionary();
  xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v6);

  xpc_dictionary_set_value(v4, "info", value);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  *(void *)(a1 + 40),  1LL,  0LL));
  APSInsertDatasToXPCDictionary(v4, "error");
}

void sub_10005089C(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v6 = a2;
  APSInsertIntsToXPCDictionary(v6, [v3 UTF8String]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier", 46, 0));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) topic]);
  APSInsertNSStringsToXPCDictionary(v6, "identifier");

  APSInsertDatasToXPCDictionary(v6, "token");
}

void sub_10005095C(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  APSInsertIntsToXPCDictionary(v4, [v3 UTF8String]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryRepresentation", 47, 0));
  uint64_t v6 = APSCreateXPCObjectFromDictionary();
  xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v6);

  xpc_dictionary_set_value(v4, "info", value);
  APSInsertDatasToXPCDictionary(v4, "token");
}

void sub_100050A0C(uint64_t a1, void *a2)
{
  id v3 = (void *)APSXPCMessageTypeKey;
  id v4 = a2;
  APSInsertIntsToXPCDictionary(v4, [v3 UTF8String]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dictionaryRepresentation", 48, 0));
  uint64_t v6 = APSCreateXPCObjectFromDictionary();
  xpc_object_t value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v6);

  xpc_dictionary_set_value(v4, "info", value);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dictionaryRepresentation]);
  uint64_t v8 = APSCreateXPCObjectFromDictionary();
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  xpc_dictionary_set_value(v4, "token", v9);
}

void sub_1000510B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  APSInsertIntsToXPCDictionary(v3, [APSXPCMessageTypeKey UTF8String]);
  if (*(void *)(a1 + 32)) {
    APSInsertDatasToXPCDictionary(v3, "publicToken");
  }
}

void sub_100051128(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 object]);
  [v4 handlePublicTokenDeliveryReply:v3];
}

void sub_10005180C(uint64_t a1, void *a2)
{
  int v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  APSInsertIntsToXPCDictionary(v3, [v2 UTF8String]);
  APSInsertIntsToXPCDictionary(v3, "messageSize");
  APSInsertIntsToXPCDictionary(v3, "largeMessageSize");
}

void sub_1000519A8(uint64_t a1, void *a2)
{
  int v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  APSInsertIntsToXPCDictionary(v3, [v2 UTF8String]);
  APSInsertIntsToXPCDictionary(v3, "messageSize");
  APSInsertIntsToXPCDictionary(v3, "largeMessageSize");
}

void sub_100051B6C(uint64_t a1, void *a2)
{
  int v2 = (void *)APSXPCMessageTypeKey;
  id v3 = a2;
  APSInsertIntsToXPCDictionary(v3, [v2 UTF8String]);
  APSInsertNSStringsToXPCDictionary(v3, "topic");
  APSInsertNSArraysToXPCDictionary(v3, "failures");
}

LABEL_47:
  id v32 = 0;
  uint64_t v33 = 0LL;
  if (!v13)
  {
LABEL_64:
    unsigned __int8 v44 = 0LL;
    goto LABEL_69;
  }

  objc_sync_exit(v18);
}

LABEL_48:
  if ((sub_1000773F0(v13, self->_nonWakingTopics) & 1) != 0)
  {
    unsigned __int8 v44 = v13;
  }

  else
  {
    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      id v46 = APSPrettyPrintCollection(v13, 0LL, 0LL, 0LL);
      uint64_t v47 = (NSSet *)objc_claimAutoreleasedReturnValue(v46);
      *(_DWORD *)buf = 138412546;
      id v60 = self;
      uint64_t v61 = 2112;
      id v62 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%@: connection set nonWaking topics %@",  buf,  0x16u);
    }

    id v55 = 0LL;
    unsigned __int8 v44 = (void *)objc_claimAutoreleasedReturnValue( -[APSConnectionServer entitledTopicsFromSet:unentitledTopics:]( self,  "entitledTopicsFromSet:unentitledTopics:",  v13,  &v55));
    id v48 = v55;

    if (![v44 count] && objc_msgSend(v48, "count")
      || -[APSConnectionServer _containsInvalidTopic:](self, "_containsInvalidTopic:", v44))
    {
      nonWakingTopics = (NSSet *)objc_claimAutoreleasedReturnValue(+[APSLog connectionServer](&OBJC_CLASS___APSLog, "connectionServer"));
      if (os_log_type_enabled((os_log_t)nonWakingTopics, OS_LOG_TYPE_FAULT)) {
        sub_1000BDF24((uint64_t)v44);
      }
    }

    else
    {
      -[APSConnectionServer _informTopicManagerOfChangedFilter:newTopics:oldTopics:]( self,  "_informTopicManagerOfChangedFilter:newTopics:oldTopics:",  4LL,  v44,  self->_nonWakingTopics);
      uint64_t v49 = v44;
      nonWakingTopics = self->_nonWakingTopics;
      self->_nonWakingTopics = v49;
      mach_port_name_t v16 = 1;
    }
  }

        sub_1000C0024();
        goto LABEL_49;
      }

      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue( -[APSUserCourier _findConnectedClientWithToken:onProtocolConnection:]( self,  "_findConnectedClientWithToken:onProtocolConnection:",  v66,  v62));
      [v30 sendPubSubChannelListResponse:v63];
      goto LABEL_43;
    }

    switch(v25)
    {
      case 4u:
        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_FAULT)) {
          sub_1000C0084();
        }
        goto LABEL_43;
      case 3u:
        __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          id v32 = -[os_log_s retryCount](v16, "retryCount");
          *(_DWORD *)buf = 138412802;
          __int16 v90 = self;
          id v91 = 2112;
          __int16 v92 = (uint64_t)v16;
          v93 = 2048;
          __int16 v94 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%@ The PubSub request %@ was told to retry.  Retry attempts left %lu",  buf,  0x20u);
        }

        __int128 v28 = v64;
        if (v64) {
          goto LABEL_50;
        }
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (!os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_FAULT)) {
          goto LABEL_49;
        }
        goto LABEL_48;
      case 1u:
        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_FAULT)) {
          sub_1000C00E4();
        }
LABEL_43:

LABEL_77:
        id v13 = v60;
        goto LABEL_78;
    }

    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v90 = self;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%@ Received a response message for PubSub request",  buf,  0xCu);
    }

    uint64_t v59 = -[PSChannelSubscriptionsResponsePayload initWithData:]( objc_alloc(&OBJC_CLASS___PSChannelSubscriptionsResponsePayload),  "initWithData:",  v61);
    id v81 = 0u;
    __int16 v82 = 0u;
    id v83 = 0u;
    __int16 v84 = 0u;
    obCFIndex j = (id)objc_claimAutoreleasedReturnValue( -[PSChannelSubscriptionsResponsePayload appChannelSubscriptionResponses]( v59,  "appChannelSubscriptionResponses"));
    v70 = [obj countByEnumeratingWithState:&v81 objects:v100 count:16];
    if (!v70)
    {
LABEL_76:

      goto LABEL_77;
    }

    v69 = *(void *)v82;
    __int128 v34 = &OBJC_CLASS___APSOutgoingQueue;
LABEL_55:
    double v35 = 0LL;
    while (1)
    {
      if (*(void *)v82 != v69) {
        objc_enumerationMutation(obj);
      }
      uint64_t v71 = v35;
      uint64_t v36 = *(void **)(*((void *)&v81 + 1) + 8 * v35);
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 appId]);
      unint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v36 subscriptionChannelResponses]);
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v36 unsubscriptionChannelResponses]);
      [v38 addObjectsFromArray:v39];

      uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      __int128 v77 = 0u;
      id v78 = 0u;
      id v79 = 0u;
      v80 = 0u;
      uint64_t v73 = v38;
      id v40 = [v73 countByEnumeratingWithState:&v77 objects:v99 count:16];
      if (v40) {
        break;
      }
LABEL_72:

      if ([v72 count]) {
        -[APSUserCourier sendFailuresToClient:pushTopic:](self, "sendFailuresToClient:pushTopic:", v72, v37);
      }

      double v35 = v71 + 1;
      if ((id)(v71 + 1) == v70)
      {
        v70 = [obj countByEnumeratingWithState:&v81 objects:v100 count:16];
        if (!v70) {
          goto LABEL_76;
        }
        goto LABEL_55;
      }
    }

    unint64_t v41 = v40;
    id v42 = *(void *)v78;
LABEL_60:
    unsigned __int8 v43 = 0LL;
    while (1)
    {
      if (*(void *)v78 != v42) {
        objc_enumerationMutation(v73);
      }
      unsigned __int8 v44 = *(void **)(*((void *)&v77 + 1) + 8 * v43);
      uint64_t v45 = [v44 channelStatus];
      if (v45 == 1) {
        break;
      }
      if (!v45)
      {
        id v46 = -[APSUserCourier _protoSubscriptionFailureToReadableFailure:]( self,  "_protoSubscriptionFailureToReadableFailure:",  [v44 channelStatus]);
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v44 channelId]);
        id v48 = objc_claimAutoreleasedReturnValue([v47 base64EncodedStringWithOptions:0]);

        v76 = (void *)v48;
        v97[0] = @"channelID";
        v97[1] = @"reason";
        v98[0] = v48;
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v46));
        v98[1] = v49;
        size_t v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v98,  v97,  2LL));

        [v72 addObject:v50];
        id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138413058;
          __int16 v90 = self;
          id v91 = 2112;
          __int16 v92 = v48;
          v93 = 2112;
          __int16 v94 = v37;
          v95 = 1024;
          __int16 v96 = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "%@ The channel %@ on topic %@ failed to subscribe with reason %u Removing subscription...",  buf,  0x26u);
        }

        id v52 = (void *)objc_claimAutoreleasedReturnValue([&v34[5] sharedInstance]);
        id v53 = (void *)objc_claimAutoreleasedReturnValue(-[APSUserCourier environment](self, "environment"));
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 name]);
        [v52 deleteChannelID:v76 forTopic:v37 environment:v54 userName:v74];

        goto LABEL_69;
      }

      uint64_t result = 0LL;
      *(_BYTE *)(a3 + 16) = 1;
      return result;
    }

LABEL_69:
  id v52 = (void *)objc_claimAutoreleasedReturnValue(-[APSConnectionServer delegate](self, "delegate"));
  id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 topicManager]);
  [v53 endTransaction];

  if (self->_enableDarkWake && !self->_hasChosenDarkWakeTopics)
  {
    uint64_t v54 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    -[NSMutableSet unionSet:](v54, "unionSet:", self->_enabledTopics);
    -[NSMutableSet unionSet:](v54, "unionSet:", self->_opportunisticTopics);
    -[NSMutableSet unionSet:](v54, "unionSet:", self->_ignoredTopics);
    -[NSMutableSet unionSet:](v54, "unionSet:", self->_nonWakingTopics);
  }

  if ((v32 | v16) == 1) {
    -[APSConnectionServer saveAndUpdateDelegate](self, "saveAndUpdateDelegate");
  }
}

void sub_100054F30(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100054F3C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100054F5C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10005507C(_Unwind_Exception *a1)
{
}

void sub_100055150(_Unwind_Exception *a1)
{
}

void sub_1000558A8(uint64_t a1, void *a2, void *a3)
{
  int v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v8 + 58)) {
      uint64_t v9 = @"YES";
    }
    else {
      uint64_t v9 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    __int128 v31 = (const __CFString *)v8;
    __int16 v32 = 2112;
    uint64_t v33 = v5;
    __int16 v34 = 2112;
    double v35 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "APSTCPStream %@ got config %@  -- opened? %@",  buf,  0x20u);
  }

  if (*(_BYTE *)(*(void *)(a1 + 32) + 58LL))
  {
    if (v5 && !v6)
    {
      if (!+[APSSimulatorSupport isSimulator](&OBJC_CLASS___APSSimulatorSupport, "isSimulator")
        || (id v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString simulatorConnectionEnabled](v5, "simulatorConnectionEnabled")),
            v10,
            v10))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
        [WeakRetained tcpStream:*(void *)(a1 + 32) receivedServerBag:v5];

        unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString nagleEnabled](v5, "nagleEnabled"));
        id v13 = v12;
        if (v12)
        {
          *(_BYTE *)(*(void *)(a1 + 32) + 132) = [v12 BOOLValue];
          uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = *(void *)(a1 + 32);
            mach_port_name_t v16 = @"YES";
            if (!*(_BYTE *)(v15 + 132)) {
              mach_port_name_t v16 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            __int128 v31 = (const __CFString *)v15;
            __int16 v32 = 2112;
            uint64_t v33 = v16;
            int v17 = "%@: nagleEnabled is %@ from config bag";
LABEL_27:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
          }
        }

        else
        {
          uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(void *)(a1 + 32);
            uint64_t v24 = @"YES";
            if (!*(_BYTE *)(v23 + 132)) {
              uint64_t v24 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            __int128 v31 = (const __CFString *)v23;
            __int16 v32 = 2112;
            uint64_t v33 = v24;
            int v17 = "%@: nagleEnabled is not available from config bag, default %@";
            goto LABEL_27;
          }
        }

        [*(id *)(a1 + 32) _connectToServerWithConfiguration:v5];
LABEL_35:

        goto LABEL_36;
      }

      char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString simulatorConnectionEnabled](v5, "simulatorConnectionEnabled"));
        char v27 = @"YES";
        if (!v26) {
          char v27 = @"NO";
        }
        *(_DWORD *)buf = 138412290;
        __int128 v31 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Simulator connection not enabled {simulatorConnectionEnabled:%@} - disconnecting",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = @"Simulator Connection Not Enabled - closing stream";
LABEL_34:
      uint64_t v28 = APSError(1LL, v20);
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      [v13 tcpStream:v19 errorOccured:v29];

      goto LABEL_35;
    }

    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to load config bag: %@", buf, 0xCu);
    }

    if (+[APSSimulatorSupport isSimulator](&OBJC_CLASS___APSSimulatorSupport, "isSimulator"))
    {
      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48LL));
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = @"Failed to load config bag on simulator: %@ - closing stream";
      goto LABEL_34;
    }

    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) name]);
      *(_DWORD *)buf = 138412290;
      __int128 v31 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Using DNS TXT record lookup to determine load balance count for %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) _openWithTXTLookup];
  }

id sub_100056010( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, void *a11)
{
  return _[a11 _queryRecordReply:a9 length:a8 ttl:a10 errorCode:a4];
}

void *sub_100057CD0(char *a1, unsigned int a2)
{
  if (inet_pton(2, a1, (char *)v8 + 4))
  {
    LOWORD(v8[0]) = 528;
    WORD1(v8[0]) = __rev16(a2);
    uint64_t v4 = 16LL;
LABEL_5:
    int v5 = malloc(0x80uLL);
    __memcpy_chk(v5, v8, v4, 128LL);
    return v5;
  }

  if (inet_pton(30, a1, (char *)v8 + 8))
  {
    LOWORD(v8[0]) = 7708;
    WORD1(v8[0]) = __rev16(a2);
    uint64_t v4 = 28LL;
    goto LABEL_5;
  }

  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream", *(void *)&v8[0]));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1000BE7B4();
  }

  return 0LL;
}

id sub_1000581FC(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 stream:a1 handleEvent:a2];
}

void sub_1000589F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100058A0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100058A1C(uint64_t a1)
{
}

void sub_100058A24(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v11 = a2;
  id v8 = a3;
  if (v11) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 136LL), a2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a4 = 1;
}

int64_t sub_100059154(id a1, APSPushRecord *a2, APSPushRecord *a3)
{
  uint64_t v4 = a3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue(-[APSPushRecord timestamp](a2, "timestamp"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[APSPushRecord timestamp](v4, "timestamp"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10005993C(_Unwind_Exception *a1)
{
}

LABEL_12:
          -[NSMutableArray removeObjectAtIndex:](self->_queue, "removeObjectAtIndex:", v9--);
          --v8;
          goto LABEL_13;
        }

        if ([v10 wasSent])
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = [v10 messageID];
            *(_DWORD *)buf = v16;
            uint64_t v18 = self;
            uint64_t v19 = 2048;
            id v20 = v14;
            __int16 v21 = 2112;
            id v22 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@: Clearing sent flag for outgoing message %lu that had been sent on %@",  buf,  0x20u);
          }

          [v10 setSent:0];
          [v10 setSendInterfaceIdentifier:0];
          -[NSMutableArray addObject:](v5, "addObject:", v10);
          goto LABEL_12;
        }
      }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10007D908;
  v10[3] = &unk_10011FCB0;
  void v10[4] = self;
  id v11 = (char)v6;
  dispatch_async(&_dispatch_main_q, v10);
}

  if (v6) {
    goto LABEL_13;
  }
  uint64_t v18 = (NSDictionary *)objc_claimAutoreleasedReturnValue(-[APSEnvironment name](self->_environment, "name"));
  -[NSMutableDictionary removeObjectForKey:](v15, "removeObjectForKey:", v18);
LABEL_14:

  if (-[NSMutableDictionary count](v15, "count")) {
    id v20 = v15;
  }
  else {
    id v20 = 0LL;
  }
  sub_10007792C(v10, v20, 0);
  sub_100077A2C(0);
  -[APSCourierConnection setUsingCachedIPAddress:onInterface:]( self->_courierConnection,  "setUsingCachedIPAddress:onInterface:",  0LL,  a4);
}

  id v8 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v8,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(0x5519u);
  return result;
}

LABEL_46:
    goto LABEL_47;
  }

  if (v18->_timer)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v32 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@: Invalidating outgoing message timer",  buf,  0xCu);
    }

    -[NSTimer invalidate](v18->_timer, "invalidate");
    uint64_t v19 = v18->_timer;
    v18->_timer = 0LL;
    goto LABEL_46;
  }

void sub_10005B844(_Unwind_Exception *a1)
{
}

LABEL_37:
        unint64_t v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v37 objects:v51 count:16];
      if (!v9)
      {
        uint64_t v4 = v34;
        if ((v35 & 1) != 0) {
          -[APSOutgoingMessageQueueDelegate outgoingMessageQueueShortMessageTimeoutExceeded:]( v5->_delegate,  "outgoingMessageQueueShortMessageTimeoutExceeded:",  v5);
        }
        break;
      }
    }
  }

  -[APSOutgoingMessageQueue _queueChanged](v5, "_queueChanged");
}

          __break(0x5519u);
LABEL_38:
          __break(0x5500u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(0x550Cu);
          goto LABEL_41;
        }

        goto LABEL_13;
      }
    }

LABEL_4:
  return v9;
}

void sub_10005C814( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10005C82C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 isEager];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10005CDC4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

uint64_t sub_10005D048(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v28 = 24LL;
        goto LABEL_52;
      case 2u:
        uint64_t v18 = objc_alloc_init(&OBJC_CLASS___TASKOutput);
        objc_storeStrong((id *)(a1 + 16), v18);
        if (PBReaderPlaceMark(a2, v29) && (sub_100071950((uint64_t)v18, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v29);

LABEL_57:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
            v14 |= (unint64_t)(v22 & 0x7F) << v19;
            if (v22 < 0)
            {
              v19 += 7;
              BOOL v9 = v20++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v28 = 8LL;
LABEL_52:
        *(_DWORD *)(a1 + v2_Block_object_dispose(va, 8) = v14;
        goto LABEL_57;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0LL;
                goto LABEL_56;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_56:
        *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v25 != 0;
        goto LABEL_57;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_57;
    }
  }

void sub_10005DA64(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  [v1 clear];
}

id sub_10005DB20(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clear];
}

id sub_10005DB80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _hold];
}

id sub_10005E124(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clear];
}

void sub_10005E320( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10005E348(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_10005E354( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10005E364( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

CFStringRef sub_10005E38C(unint64_t a1)
{
  if (a1 > 3) {
    return @"unknown";
  }
  else {
    return off_10011F528[a1];
  }
}

void sub_10005F30C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10005F324(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result = [a3 unsignedIntegerValue];
  if (result == (id)2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }

  return result;
}

void sub_100060114(id a1, NSDictionary *a2, NSMutableSet *a3)
{
  char v4 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary allValues](a2, "allValues", 0LL));
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      BOOL v9 = 0LL;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v11 + 1) + 8 * (void)v9) topicName]);
        -[NSMutableSet addObject:](v4, "addObject:", v10);

        BOOL v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }
}

void sub_100060230(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 32);
  __int128 v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  id v14 = a5;
  id v12 = a4;
  id v13 = a3;
  v11(v9, a2, v10);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000602F0(void *a1, void *a2)
{
  id v3 = a2;
  [v3 removeTopics:a1[4] connectionServer:0 filter:1];
  [v3 removeTopics:a1[5] connectionServer:0 filter:3];
  [v3 removeTopics:a1[6] connectionServer:0 filter:2];
  [v3 removeTopics:a1[7] connectionServer:0 filter:4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100060410;
  void v6[3] = &unk_10011F4E0;
  id v7 = v3;
  id v4 = v3;
  unsigned int v5 = objc_retainBlock(v6);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 1LL, a1[8]);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 3LL, a1[9]);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 2LL, a1[10]);
  ((void (*)(void *, uint64_t, void))v5[2])(v5, 4LL, a1[11]);
}

void sub_100060410(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v15 = a1;
    uint64_t v10 = 0LL;
    uint64_t v11 = *(void *)v17;
    do
    {
      id v12 = 0LL;
      id v13 = v10;
      do
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v14 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)v12);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[APSTopicAttributes topicAttributesWithFilter:darkWakeEnabled:pushWakeEnabled:criticalWakeEnabled:ultraConstrainedEnabled:]( &OBJC_CLASS___APSTopicAttributes,  "topicAttributesWithFilter:darkWakeEnabled:pushWakeEnabled:criticalWakeEnabled:ultraConstrainedEnabled:",  a2,  0LL,  0LL,  0LL,  0LL));

        [v6 setObject:v10 forKey:v14];
        id v12 = (char *)v12 + 1;
        id v13 = v10;
      }

      while (v9 != v12);
      id v9 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v9);

    a1 = v15;
  }

  [*(id *)(a1 + 32) addTopicsAndAttributes:v6 connectionServer:0];
}

CFStringRef sub_1000619A4(unint64_t a1)
{
  if (a1 > 5) {
    return @"UNKNOWN";
  }
  else {
    return off_10011F548[a1];
  }
}

void sub_100061E48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_100061F9C(_Unwind_Exception *a1)
{
}

void sub_10006201C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000620AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100062198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000622C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100062358(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0LL;
    do
    {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1LL;
        do
        {
          -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", v5 + v6++, 1LL);
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }

        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }

      [v2 addObject:v4];

      ++v3;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }

  uint64_t v11 = (void **)&v8;
  sub_100020724(&v11);
  return v2;
}

void sub_100062478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100020724(&a12);

  _Unwind_Resume(a1);
}

id sub_1000624C4(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0LL;
    do
    {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1LL;
        do
        {
          -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", v5 + v6++, 1LL);
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }

        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }

      [v2 addObject:v4];

      ++v3;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }

  uint64_t v11 = (void **)&v8;
  sub_100020724(&v11);
  return v2;
}

void sub_1000625E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100020724(&a12);

  _Unwind_Resume(a1);
}

void sub_100062750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100062A54(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + memset(v17, 0, 24) = a2;
  int v2 = *(void **)(a1 + 8);
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:"));
  [v2 setObject:v3 forKey:@"APSProtocolCommand"];

  return 1LL;
}

void sub_100062AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100062B20(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0LL;
    do
    {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1LL;
        do
        {
          -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", v5 + v6++, 1LL);
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }

        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }

      [v2 addObject:v4];

      ++v3;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }

  uint64_t v11 = (void **)&v8;
  sub_100020724(&v11);
  return v2;
}

void sub_100062C40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100020724(&a12);

  _Unwind_Resume(a1);
}

id sub_100062C8C(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 24LL))(a1, &v8);
  if (v9 != v8)
  {
    unint64_t v3 = 0LL;
    do
    {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
      uint64_t v5 = *(void *)(v8 + 24 * v3);
      if ((unint64_t)(*(void *)(v8 + 24 * v3 + 8) - v5) >= 2)
      {
        unint64_t v6 = 1LL;
        do
        {
          -[NSMutableData appendBytes:length:](v4, "appendBytes:length:", v5 + v6++, 1LL);
          uint64_t v5 = *(void *)(v8 + 24 * v3);
        }

        while (*(void *)(v8 + 24 * v3 + 8) - v5 > v6);
      }

      [v2 addObject:v4];

      ++v3;
    }

    while (0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) > v3);
  }

  uint64_t v11 = (void **)&v8;
  sub_100020724(&v11);
  return v2;
}

void sub_100062DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100020724(&a12);

  _Unwind_Resume(a1);
}

void sub_100062ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100062FF4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  a1[1] = v6;
  a1[2] = 0LL;
  *a1 = off_10011F588;
  id v7 = v6;
  uint64_t v8 = (void *)a1[2];
  a1[2] = v5;

  return a1;
}

uint64_t sub_100063054(uint64_t a1, unsigned int a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:"));
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v4];

  return 1LL;
}

void sub_1000630AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000630BC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  else {
    id v5 = *(const char **)a3;
  }
  id v6 = +[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v5, strlen(v5));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v7];

  return 1LL;
}

void sub_100063138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100063148(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return 1LL;
}

uint64_t sub_100063174(uint64_t a1, unsigned int a2, char a3)
{
  char v7 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v7, 1LL));
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v5];

  return 1LL;
}

void sub_1000631E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000631F0(uint64_t a1, unsigned int a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:"));
  [*(id *)(a1 + 16) setSerialItemInParameters:*(void *)(a1 + 8) commandID:*(void *)(a1 + 24) itemID:a2 itemData:v4];

  return 1LL;
}

void sub_100063248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100063258(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  *(void *)a1 = off_10011F588;
  *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;

  unint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;

  return a1;
}

uint64_t sub_1000632A8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_100063320(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24LL;
    }

    while (v5);
  }

  return a1;
}

void sub_10006330C(_Unwind_Exception *a1)
{
}

unsigned __int8 *sub_100063320(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_1000137DC(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }

    id v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if ((sub_100013C84(a1 + 32, i + 16, a2) & 1) != 0) {
            return i;
          }
        }

        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }

          else
          {
            v15 &= v10 - 1;
          }

          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }

  sub_10006359C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1LL;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100013274(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }

    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }

  char v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *char v22 = v25[0];
  }

  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8LL);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }

      else
      {
        v23 &= v10 - 1;
      }

      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }

  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_100063578( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_100019A18((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10006359C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + _Block_object_dispose(va, 8) = v7;
  *(void *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *unint64_t v8 = 0LL;
  v8[1] = a2;
  id result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    id result = sub_100013D28(result, *(void **)a3, *(void *)(a3 + 8));
  }

  else
  {
    *(_OWORD *)id result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }

  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100063620(_Unwind_Exception *a1)
{
  void *v1 = 0LL;
  sub_100019A18(v3, v2);
  _Unwind_Resume(a1);
}

LABEL_25:
            }

            unint64_t v8 = [v6 countByEnumeratingWithState:&v24 objects:v36 count:16];
            if (!v8)
            {
LABEL_27:

              uint64_t i = v22;
              goto LABEL_30;
            }
          }
        }

        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v18;
          uint64_t v33 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Unknown environment name '%@' in preferences",  buf,  0xCu);
        }

    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    float v16 = 8 * v15;
    float v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    BOOL v18 = 24 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    unint64_t v20 = *(_BYTE *)(v19 + 16);
    size_t v21 = *(_BYTE *)(v19 + 17);
    char v22 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v23 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)unint64_t v23 = v22;
    *(_BYTE *)(v23 + 16) = v20;
    *(_BYTE *)(v23 + 17) = v21;
    id result = v17;
  }

  unint64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    unint64_t v9 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

LABEL_30:
      }

      unint64_t v20 = [obj countByEnumeratingWithState:&v28 objects:v37 count:16];
    }

    while (v20);
  }
}

                      __break(0x5519u);
                      goto LABEL_31;
                    }

void sub_1000642DC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  id v2 = [v1 isMultiUser];

  uint64_t v3 = -[APSMultiUserFS initWithIsMultiUserMode:]( objc_alloc(&OBJC_CLASS___APSMultiUserFS),  "initWithIsMultiUserMode:",  v2);
  id v4 = (void *)qword_10014E878;
  qword_10014E878 = (uint64_t)v3;
}

BOOL sub_100064A38(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = (PSChannelSubscription *)a1[1];
        a1[1] = v13;
        goto LABEL_30;
      case 2u:
        uint64_t v14 = objc_alloc_init(&OBJC_CLASS___PSChannelSubscription);
        [a1 addSubscriptionChannels:v14];
        goto LABEL_29;
      case 3u:
        uint64_t v14 = objc_alloc_init(&OBJC_CLASS___PSChannelUnsubscription);
        [a1 addUnsubscriptionChannels:v14];
        goto LABEL_29;
      case 4u:
        uint64_t v14 = objc_alloc_init(&OBJC_CLASS___PSAttribute);
        [a1 addAttributes:v14];
        if (PBReaderPlaceMark(a2, v16) && sub_1000A7048((uint64_t)v14, a2))
        {
LABEL_29:
          PBReaderRecallMark(a2, v16);
LABEL_30:

LABEL_31:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

LABEL_33:
        return 0LL;
      default:
        if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
          return 0LL;
        }
        goto LABEL_31;
    }
  }

  __break(1u);
}

    uint8x8_t v11 = (v24 - 1) & v24;
    size_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    __int128 v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    __int128 v31 = *(void *)(v5 + 56) + 24 * v21;
    id v39 = *(_OWORD *)v31;
    __int16 v32 = *(_BYTE *)(v31 + 16);
    uint64_t v33 = *(_BYTE *)(v31 + 17);
    if ((v38 & 1) == 0) {
      __int16 v34 = v30;
    }
    id result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    unint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    float v16 = result & ~v15;
    float v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      BOOL v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      char v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          float v17 = 0LL;
        }
        v26 |= v28;
        __int128 v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      BOOL v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(void *)(*(void *)(v8 + 48) + 8 * v1_Block_object_dispose(va, 8) = v30;
    unint64_t v19 = *(void *)(v8 + 56) + 24 * v18;
    *(_OWORD *)unint64_t v19 = v39;
    *(_BYTE *)(v19 + 16) = v32;
    *(_BYTE *)(v19 + 17) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  unint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v23 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  id result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

NSMutableDictionary *sub_10006598C(uint64_t a1)
{
  if (qword_10014E888 != -1) {
    dispatch_once(&qword_10014E888, &stru_10011F6D8);
  }
  id v2 = (void *)qword_10014E880;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1));
  char v4 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (!v4)
  {
    char v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    unsigned int v5 = (void *)qword_10014E880;
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1));
    [v5 setObject:v4 forKeyedSubscript:v6];
  }

  return v4;
}

uint64_t sub_100065BA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100065BB4(uint64_t a1)
{
}

void sub_100065BBC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_onQueue_configurationForEnvironment:connectionType:",  *(void *)(a1 + 32),  *(void *)(a1 + 56)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  char v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100065DC4(uint64_t a1)
{
  uint64_t v2 = (APSConfiguration *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_onQueue_configurationForEnvironment:connectionType:",  *(void *)(a1 + 32),  *(void *)(a1 + 56)));
  if (!v2)
  {
    unint64_t v6 = -[APSConfiguration initWithEnvironment:connectionType:]( objc_alloc(&OBJC_CLASS___APSConfiguration),  "initWithEnvironment:connectionType:",  *(void *)(a1 + 32),  *(void *)(a1 + 56));
    uint64_t v3 = sub_10006598C(*(void *)(a1 + 56));
    char v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    [v4 setObject:v6 forKey:v5];

    uint64_t v2 = v6;
  }

  unint64_t v7 = v2;
  -[APSConfiguration addCompletionBlock:](v2, "addCompletionBlock:", *(void *)(a1 + 40));
}

void sub_100066000(uint64_t a1)
{
  uint64_t v2 = sub_10006598C(*(void *)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v4]);

  if (v5)
  {
    unint64_t v6 = sub_10006598C(*(void *)(a1 + 40));
    id v8 = (id)objc_claimAutoreleasedReturnValue(v6);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    [v8 removeObjectForKey:v7];
  }

void sub_100066468(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = sub_1000674DC();
  uint8x8_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
  unint64_t v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  float v17 = sub_100066564;
  BOOL v18 = &unk_10011F668;
  id v19 = v9;
  id v20 = *(id *)(a1 + 32);
  id v21 = v8;
  id v22 = v7;
  id v12 = v7;
  id v13 = v8;
  id v14 = v9;
  dispatch_async(v11, &v15);

  objc_msgSend(*(id *)(a1 + 40), "finishTasksAndInvalidate", v15, v16, v17, v18);
}

void sub_100066564(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32)) {
    objc_msgSend(*(id *)(a1 + 40), "_failWithError:");
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSHTTPURLResponse, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5 && *(void *)(a1 + 56))
    {
      unint64_t v6 = *(id **)(a1 + 40);
      id v9 = (id)objc_claimAutoreleasedReturnValue([v6[7] host]);
      objc_msgSend(v6, "_finishLoadWithResponse:urlHost:data:", v5);
    }

    else
    {
      id v7 = *(void **)(a1 + 40);
      uint64_t v8 = APSError(2LL, @"unexpected end of http response");
      id v9 = (id)objc_claimAutoreleasedReturnValue(v8);
      objc_msgSend(v7, "_failWithError:");
    }
  }

void *sub_100066724(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 64);
    *(void *)(v4 + 64) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  }

  id v6 = [*(id *)(a1 + 40) copy];
  [v2 addObject:v6];

  id result = *(void **)(a1 + 32);
  uint64_t v8 = result[5];
  if (!v8)
  {
    if (!*((_BYTE *)result + 48)) {
      return result;
    }
    uint64_t v8 = 0LL;
  }

  return [result _callCompletionBlocksWithError:v8];
}

void sub_100066904(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

id sub_100066A8C(uint64_t a1)
{
  id v2 = sub_10006598C(*(void *)(*(void *)(a1 + 32) + 72LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  [v3 removeObjectForKey:*(void *)(*(void *)(a1 + 32) + 8)];

  return [*(id *)(a1 + 32) _callCompletionBlocksWithError:*(void *)(a1 + 40)];
}

void sub_100066CC0(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 72LL);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(APSConfiguration **)(a1 + 32);
    int v10 = 138412802;
    uint8x8_t v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = (uint64_t)v2;
    __int16 v14 = 2048;
    uint64_t v15 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ APS server bag expired for environment %@ on interface %ld",  (uint8_t *)&v10,  0x20u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[APSEnvironment environmentForName:](&OBJC_CLASS___APSEnvironment, "environmentForName:", v2));
  __int128 v6 = (APSConfiguration *)objc_claimAutoreleasedReturnValue( +[APSConfiguration _onQueue_configurationForEnvironment:connectionType:]( &OBJC_CLASS___APSConfiguration,  "_onQueue_configurationForEnvironment:connectionType:",  v5,  v3));
  if (!v6)
  {
    __int128 v6 = -[APSConfiguration initWithEnvironment:connectionType:]( objc_alloc(&OBJC_CLASS___APSConfiguration),  "initWithEnvironment:connectionType:",  v5,  v3);
    __int128 v7 = sub_10006598C(v3);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 name]);
    [v8 setObject:v6 forKey:v9];

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412802;
      uint8x8_t v11 = v6;
      __int16 v12 = 2048;
      uint64_t v13 = v3;
      __int16 v14 = 2112;
      uint64_t v15 = (uint64_t)v5;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ Created new config for interface %ld environment %@",  (uint8_t *)&v10,  0x20u);
    }
  }
}

void sub_1000673A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0LL;
}

void sub_1000674B0(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v2 = (void *)qword_10014E880;
  qword_10014E880 = v1;
}

id sub_1000674DC()
{
  if (qword_10014E898 != -1) {
    dispatch_once(&qword_10014E898, &stru_10011F6F8);
  }
  return (id)qword_10014E890;
}

void sub_10006751C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.apsd.APSConfigurationQueue", 0LL);
  uint64_t v2 = (void *)qword_10014E890;
  qword_10014E890 = (uint64_t)v1;
}

void sub_100067548(id a1)
{
  uint64_t v1 = MGCopyAnswer(@"ProductType", 0LL);
  uint64_t v2 = (void *)qword_10014E8A0;
  qword_10014E8A0 = v1;

  uint64_t v3 = MGCopyAnswer(@"ProductVersion", 0LL);
  uint64_t v4 = (void *)qword_10014E8A8;
  qword_10014E8A8 = v3;

  uint64_t v5 = MGCopyAnswer(@"BuildVersion", 0LL);
  __int128 v6 = (void *)qword_10014E8B0;
  qword_10014E8B0 = v5;
}

void sub_100067A94(_Unwind_Exception *a1)
{
}

void sub_100067AC4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog taskManager](&OBJC_CLASS___APSLog, "taskManager"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6[0] = 67109120;
    v6[1] = [WeakRetained processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "APS task server xpc connection from pid got invalidated: %d",  (uint8_t *)v6,  8u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  [v4 _cleanupConnection:v5];
}

void sub_100067BA8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog taskManager](&OBJC_CLASS___APSLog, "taskManager"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v6[0] = 67109120;
    v6[1] = [WeakRetained processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "APS task server xpc connection from pid received an interruption: %d",  (uint8_t *)v6,  8u);
  }

  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = objc_loadWeakRetained((id *)(a1 + 40));
  [v4 _cleanupConnection:v5];
}

void sub_100067D74(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = MGGetBoolAnswer(@"ShouldHactivate");
    uint64_t v4 = @"NO";
    if (v3) {
      uint64_t v4 = @"YES";
    }
    int v5 = 138412546;
    id v6 = v2;
    __int16 v7 = 2112;
    __int128 v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ Notified of _lockdownIdentityChange, adjusting connection. (Is hacktivated? %@)",  (uint8_t *)&v5,  0x16u);
  }

  [v2 _processPotentialIdentityChanged];
}

void sub_1000685B8(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  __int128 v9 = v8;
  if (a2 && !v8 && [v7 count] == (id)2)
  {
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "APSBAAClientIdentityProvider obtained BAA certs!",  (uint8_t *)&v20,  2u);
    }

    uint8x8_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    if ([v7 count])
    {
      unint64_t v12 = 0LL;
      do
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:v12]);

        CFDataRef v14 = SecCertificateCopyData((SecCertificateRef)v13);
        [v11 addObject:v14];

        ++v12;
      }

      while (v12 < (unint64_t)[v7 count]);
    }

    if (*(void *)(a1 + 40))
    {
      if (*(_BYTE *)(a1 + 48))
      {
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "APSBAAClientIdentityProvider BAA certs may have refreshed, notifying all environments",  (uint8_t *)&v20,  2u);
        }

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) baaIdentityRefreshedBlock]);
        if (v16)
        {
          float v17 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) baaIdentityRefreshedBlock]);
          v17[2]();
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    CFRelease(a2);
  }

  else
  {
    BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      id v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "APSBAAClientIdentityProvider failed to obtain a BAA cert, error: %@",  (uint8_t *)&v20,  0xCu);
    }

    if (a2) {
      CFRelease(a2);
    }
    uint64_t v19 = *(void *)(a1 + 40);
    if (v19) {
      (*(void (**)(uint64_t, void, void))(v19 + 16))(v19, 0LL, 0LL);
    }
  }
}

uint64_t sub_100068EB8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      unint64_t v12 = objc_alloc_init(&OBJC_CLASS___TASKInput);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark(a2, v14) || (sub_100037D28((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10006932C(_Unwind_Exception *a1)
{
}

void sub_100069400(_Unwind_Exception *a1)
{
}

void sub_100069B48(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5 = a2;
  unint64_t v6 = a3;
  unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v8 + 42)) {
      __int128 v9 = @"YES";
    }
    else {
      __int128 v9 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    __int128 v31 = (const __CFString *)v8;
    __int16 v32 = 2112;
    uint64_t v33 = v5;
    __int16 v34 = 2112;
    double v35 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "APSNWTCPStream %@ got config %@  -- opened? %@",  buf,  0x20u);
  }

  if (*(_BYTE *)(*(void *)(a1 + 32) + 42LL))
  {
    if (v5 && !v6)
    {
      if (!+[APSSimulatorSupport isSimulator](&OBJC_CLASS___APSSimulatorSupport, "isSimulator")
        || (int v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString simulatorConnectionEnabled](v5, "simulatorConnectionEnabled")),
            v10,
            v10))
      {
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
        [WeakRetained tcpStream:*(void *)(a1 + 32) receivedServerBag:v5];

        unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString nagleEnabled](v5, "nagleEnabled"));
        id v13 = v12;
        if (v12)
        {
          *(_BYTE *)(*(void *)(a1 + 32) + 122) = [v12 BOOLValue];
          CFDataRef v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = *(void *)(a1 + 32);
            uint64_t v16 = @"YES";
            if (!*(_BYTE *)(v15 + 122)) {
              uint64_t v16 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            __int128 v31 = (const __CFString *)v15;
            __int16 v32 = 2112;
            uint64_t v33 = v16;
            float v17 = "%@: nagleEnabled is %@ from config bag";
LABEL_27:
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
          }
        }

        else
        {
          CFDataRef v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(void *)(a1 + 32);
            unsigned int v24 = @"YES";
            if (!*(_BYTE *)(v23 + 122)) {
              unsigned int v24 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            __int128 v31 = (const __CFString *)v23;
            __int16 v32 = 2112;
            uint64_t v33 = v24;
            float v17 = "%@: nagleEnabled is not available from config bag, default %@";
            goto LABEL_27;
          }
        }

        [*(id *)(a1 + 32) _connectToServerWithConfiguration:v5];
LABEL_35:

        goto LABEL_36;
      }

      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString simulatorConnectionEnabled](v5, "simulatorConnectionEnabled"));
        char v27 = @"YES";
        if (!v26) {
          char v27 = @"NO";
        }
        *(_DWORD *)buf = 138412290;
        __int128 v31 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Simulator connection not enabled {simulatorConnectionEnabled:%@} - disconnecting",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = @"Simulator Connection Not Enabled - closing stream";
LABEL_34:
      uint64_t v28 = APSError(1LL, v20);
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      [v13 tcpStream:v19 errorOccured:v29];

      goto LABEL_35;
    }

    BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Failed to load config bag: %@", buf, 0xCu);
    }

    if (+[APSSimulatorSupport isSimulator](&OBJC_CLASS___APSSimulatorSupport, "isSimulator"))
    {
      [*(id *)(a1 + 32) close];
      id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
      uint64_t v19 = *(void *)(a1 + 32);
      int v20 = @"Failed to load config bag on simulator: %@ - closing stream";
      goto LABEL_34;
    }

    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) name]);
      *(_DWORD *)buf = 138412290;
      __int128 v31 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Using DNS TXT record lookup to determine load balance count for %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) _openWithTXTLookup];
  }

id sub_10006A2B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10, void *a11)
{
  return _[a11 _queryRecordReply:a9 length:a8 ttl:a10 errorCode:a4];
}

void sub_10006ACB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
}

void sub_10006AD1C(uint64_t a1, void *a2)
{
  int v3 = a2;
  char v4 = nw_tls_copy_sec_protocol_options(v3);
  sec_protocol_options_add_tls_application_protocol(v4, "apns-security-v3");
  sec_protocol_options_add_tls_application_protocol(v4, "apns-pack-v1");
  sec_protocol_options_set_min_tls_protocol_version(v4, tls_protocol_version_TLSv13);
  sec_protocol_options_set_tls_server_name(v4, (const char *)[*(id *)(a1 + 32) UTF8String]);
  verify_block[0] = _NSConcreteStackBlock;
  verify_block[1] = 3221225472LL;
  verify_block[2] = sub_10006AE20;
  verify_block[3] = &unk_10011F790;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  unsigned int v5 = &_dispatch_main_q;
  sec_protocol_options_set_verify_block(v4, verify_block, &_dispatch_main_q);

  objc_destroyWeak(&v7);
}

void sub_10006AE0C(_Unwind_Exception *a1)
{
}

void sub_10006AE20(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  trust = a3;
  unint64_t v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    SecTrustRef v8 = sec_trust_copy_ref(trust);
    SecTrustSetPinningPolicyName(v8, kSecPolicyNameApplePushService);
    v6[2](v6, [WeakRetained isPeerTrustedForTrust:v8]);
    if (v8) {
      CFRelease(v8);
    }
  }

  else
  {
    v6[2](v6, 0LL);
  }
}

void sub_10006AED4(uint64_t a1, void *a2)
{
  if (!*(_BYTE *)(a1 + 40))
  {
    int v3 = a2;
    char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog stream](&OBJC_CLASS___APSLog, "stream"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      unint64_t v6 = @"NO";
      if (!*(_BYTE *)(a1 + 40)) {
        unint64_t v6 = @"YES";
      }
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      int v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ Set nw_tcp_options_set_no_delay = %@",  (uint8_t *)&v7,  0x16u);
    }

    nw_tcp_options_set_no_delay(v3, 1);
  }

void sub_10006AFD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v6 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleState:a2 error:v7];
  }
}

void sub_10006B02C(uint64_t a1, int a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2)
  {
    __int16 v9 = WeakRetained;
    [WeakRetained close];
    id v5 = objc_loadWeakRetained(v9 + 4);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = APSError(1LL, @"better path available");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v5 tcpStream:v6 errorOccured:v8];

    id WeakRetained = v9;
  }
}

void sub_10006C078(_Unwind_Exception *a1)
{
}

void sub_10006C094(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v25 = a2;
  id v9 = a3;
  int v10 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v12 = WeakRetained;
  if (WeakRetained)
  {
    if (v25)
    {
      id v13 = (void *)WeakRetained[8];
      if (v13)
      {
        objc_msgSend(v13, "appendData:");
      }

      else
      {
        CFDataRef v14 = -[NSMutableData initWithData:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithData:", v25);
        uint64_t v15 = (void *)*((void *)v12 + 8);
        *((void *)v12 + _Block_object_dispose(va, 8) = v14;
      }

      id v16 = [*((id *)v12 + 8) length];
      if (v16
        && (id v17 = v16,
            uint64_t is_wake_packet = nw_content_context_get_is_wake_packet(v9),
            id v19 = objc_loadWeakRetained((id *)v12 + 4),
            id v20 = [v19 tcpStream:*(void *)(a1 + 32) dataReceived:*((void *)v12 + 8) isWakingMessage:is_wake_packet],  v19,  v20 != v17))
      {
        if (v20)
        {
          if (v20 >= v17) {
            id v22 = v17;
          }
          else {
            id v22 = v20;
          }
          objc_msgSend(*((id *)v12 + 8), "replaceBytesInRange:withBytes:length:", 0, v22, 0, 0);
        }
      }

      else
      {
        id v21 = (void *)*((void *)v12 + 8);
        *((void *)v12 + _Block_object_dispose(va, 8) = 0LL;
      }
    }

    if (a4)
    {
      [v12 close];
      uint64_t v23 = objc_loadWeakRetained((id *)v12 + 4);
      [v23 tcpStreamEndEncountered:v12 withReason:21];
    }

    else
    {
      if (!v10)
      {
        [v12 _receiveData];
        goto LABEL_19;
      }

      *((_BYTE *)v12 + 123) = 1;
      uint64_t v23 = nw_error_copy_cf_error(v10);
      [v12 close];
      id v24 = objc_loadWeakRetained((id *)v12 + 4);
      [v24 tcpStream:v12 errorOccured:v23];
    }
  }

void sub_10006C32C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10006C344(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10006C354(uint64_t a1)
{
}

void sub_10006C35C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v11 = a2;
  id v8 = a3;
  if (v11) {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 128LL), a2);
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a4 = 1;
}

BOOL sub_10006CBEC(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((_DWORD)v12 == 2)
      {
        uint64_t v15 = objc_alloc_init(&OBJC_CLASS___PSChannelResponse);
        [a1 addSubscriptionChannelResponse:v15];
LABEL_23:
        if (!PBReaderPlaceMark(a2, v17) || (sub_10001D678((uint64_t)v15, a2) & 1) == 0)
        {

          return 0LL;
        }

        PBReaderRecallMark(a2, v17);
        goto LABEL_26;
      }

      if ((_DWORD)v12 == 1)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v14 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v15 = (PSChannelResponse *)a1[1];
        a1[1] = v14;
LABEL_26:

        goto LABEL_28;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_28:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t v15 = objc_alloc_init(&OBJC_CLASS___PSChannelResponse);
    [a1 addUnsubscriptionChannelResponse:v15];
    goto LABEL_23;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10006DA00(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ Notified of _lockdownIdentityChange, adjusting connection",  (uint8_t *)&v3,  0xCu);
  }

  [v2 _processPotentialIdentityChanged];
}

const void *sub_10006DD58(void *a1)
{
  id v5 = 0LL;
  id v2 = (const void *)MAECopyLegacyDeviceIdentityWithError(&v5);
  id v3 = v5;
  if (v3)
  {
    if (v2) {
      CFRelease(v2);
    }
    id v2 = 0LL;
    if (a1) {
      *a1 = v3;
    }
  }

  return v2;
}

uint64_t sub_10006E93C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_6:
    unint64_t v6 = 0;
  }

  char v8 = v7 + 1;
  id v3 = 327693;
  uint64_t result = 327693LL;
  if (a3 < 0 || v5 > (unint64_t)v8)
  {
LABEL_34:
    __break(0x5519u);
    return result;
  }

  if (__CFADD__(v8, v6 - (void)v8)) {
    goto LABEL_31;
  }
  if (v6 - (void)v8 != 2 * a3) {
    return (v3 + 1);
  }
  if (__CFADD__(a2, a3) || v7 == (unsigned __int8 *)-2LL)
  {
LABEL_31:
    __break(0x5513u);
    return (v3 + 1);
  }

  BOOL v9 = v7 + 2;
  int v10 = a2;
  while (1)
  {
    uint64_t result = 0LL;
    id v11 = v9 - 1;
    char v12 = &asciiNibbleToByte[*v11];
    uint64_t result = (uint64_t)&CTOidAppleImg4Manifest;
    if (v11 < v7) {
      goto LABEL_34;
    }
    uint64_t v14 = &asciiNibbleToByte[*v9];
    uint64_t result = (uint64_t)&CTOidAppleImg4Manifest;
    unint64_t v15 = *v12;
    uint64_t result = 327695LL;
    if (v15 > 0xF) {
      return result;
    }
    char v16 = *v14;
    if (v16 > 0xF) {
      return result;
    }
    if (v10 < a2) {
      goto LABEL_34;
    }
    *v10++ = v16 | (16 * v15);
    v9 += 2;
    if (!v9) {
      goto LABEL_31;
    }
  }

BOOL APSDProtoHostCertificateInfoReadFrom(char *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((_DWORD)v12 == 2)
      {
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v16 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v17 = 16LL;
        goto LABEL_24;
      }

      if ((_DWORD)v12 == 1)
      {
        uint64_t v13 = PBReaderReadData(a2);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        if (v14) {
          [a1 addCertificates:v14];
        }
        goto LABEL_25;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_27:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t v15 = PBReaderReadData(a2);
    uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = 24LL;
LABEL_24:
    uint64_t v14 = *(void **)&a1[v17];
    *(void *)&a1[v17] = v16;
LABEL_25:

    goto LABEL_27;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

__CFString *APSIncomingMessagePriorityString(uint64_t a1)
{
  switch(a1)
  {
    case 1LL:
      return @"low";
    case 10LL:
      return @"high";
    case 5LL:
      uint64_t v1 = @"medium";
      break;
    default:
      uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a1));
      break;
  }

  return v1;
}

uint64_t sub_10006F7E0(uint64_t a1)
{
  if (a1) {
    return 2LL * (a1 == 1);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_10006FF64(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1LL || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          goto LABEL_30;
        }
        v15 += 7;
        BOOL v9 = v16++ >= 9;
        if (v9)
        {
          LODWORD(v17) = 0;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v17) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v17;
    }

    else if ((v6 >> 3) == 1)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
      uint64_t v14 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100070B78(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  unsigned int v5 = &selRef_service_nearbyDevicesChanged_;
  unint64_t v6 = &selRef_service_nearbyDevicesChanged_;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v7 = 0;
    unsigned int v8 = 0;
    unint64_t v9 = 0LL;
    while (1)
    {
      unint64_t v10 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v10 == -1LL || v10 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v11 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v10);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v10 + 1;
      v9 |= (unint64_t)(v11 & 0x7F) << v7;
      if ((v11 & 0x80) == 0) {
        goto LABEL_12;
      }
      v7 += 7;
      BOOL v12 = v8++ >= 9;
      if (v12)
      {
        unint64_t v9 = 0LL;
        int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_14;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
    int v13 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v9 = 0LL;
    }
LABEL_14:
    if (v13 || (v9 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v9 >> 3))
    {
      case 0u:
        unsigned int v15 = 0;
        do
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            goto LABEL_56;
          }

          unint64_t v17 = v16 + 1;
          int v18 = *(char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          if ((v18 & 0x80000000) == 0) {
            break;
          }
        }

        while (v15++ <= 8);
        goto LABEL_56;
      case 1u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v22 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v23 = (void *)a1[4];
        a1[4] = v22;

        goto LABEL_56;
      case 2u:
        [a1 clearOneofValuesForSubscriptionInfo];
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0LL;
        *((_BYTE *)a1 + *((int *)v5 + 937)) |= 4u;
        *(_DWORD *)((char *)a1 + *((int *)v6 + 938)) = 1;
        *((_BYTE *)a1 + *((int *)v5 + 937)) |= 1u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v12 = v25++ >= 9;
              if (v12)
              {
                uint64_t v26 = 0LL;
                goto LABEL_50;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0LL;
        }
LABEL_50:
        uint64_t v37 = 1LL;
        goto LABEL_55;
      case 3u:
        uint64_t v29 = v2;
        __int128 v30 = v5;
        __int128 v31 = v6;
        __int16 v32 = objc_alloc_init(&OBJC_CLASS___PSAttribute);
        [a1 addAttributes:v32];
        if (PBReaderPlaceMark(a2, v38) && sub_1000A7048((uint64_t)v32, a2))
        {
          PBReaderRecallMark(a2, v38);

          unint64_t v6 = v31;
          unsigned int v5 = v30;
          uint64_t v2 = v29;
LABEL_56:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 4u:
        [a1 clearOneofValuesForSubscriptionInfo];
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v26 = 0LL;
        *((_BYTE *)a1 + *((int *)v5 + 937)) |= 4u;
        *(_DWORD *)((char *)a1 + *((int *)v6 + 938)) = 2;
        *((_BYTE *)a1 + *((int *)v5 + 937)) |= 2u;
        while (2)
        {
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1LL || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v26 |= (unint64_t)(v36 & 0x7F) << v33;
            if (v36 < 0)
            {
              v33 += 7;
              BOOL v12 = v34++ >= 9;
              if (v12)
              {
                uint64_t v26 = 0LL;
                goto LABEL_54;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v26 = 0LL;
        }
LABEL_54:
        uint64_t v37 = 2LL;
LABEL_55:
        a1[v37] = v26;
        goto LABEL_56;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_56;
    }
  }

uint64_t sub_100071950(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      BOOL v12 = objc_alloc_init(&OBJC_CLASS___TASKEdgeDnsOutput);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark(a2, v14) || (sub_10001EBAC((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_2:
  unint64_t v9 = 2LL;
LABEL_5:
  BOOL v12 = (&self->super.isa)[v9];

  unint64_t v6 = (APSPayloadMessageStatsCount *)v12;
LABEL_6:
  -[APSPayloadMessageStatsCount countTopic:now:](v6, "countTopic:now:", v19, a4);
}

id sub_100072F14(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 noteReachabilityChange:a2];
}

id sub_100073274(uint64_t a1)
{
  return _[*(id *)(a1 + 32) raiseReachabilityChange];
}

uint64_t sub_1000734F4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0LL;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 == -1LL || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          goto LABEL_30;
        }
        v15 += 7;
        BOOL v9 = v16++ >= 9;
        if (v9)
        {
          uint64_t v17 = 0LL;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v17 = 0LL;
      }
LABEL_32:
      *(void *)(a1 + _Block_object_dispose(va, 8) = v17;
    }

    else if ((v6 >> 3) == 1)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v14 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v13;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100073BEC(_Unwind_Exception *a1)
{
}

void sub_100073E9C(_Unwind_Exception *a1)
{
}

void sub_1000740E4(_Unwind_Exception *a1)
{
}

void sub_1000741E0(_Unwind_Exception *a1)
{
}

void sub_1000742C8(_Unwind_Exception *a1)
{
}

void sub_10007439C(_Unwind_Exception *a1)
{
}

void sub_100074478(_Unwind_Exception *a1)
{
}

void sub_1000745DC(_Unwind_Exception *a1)
{
}

void sub_100074780(_Unwind_Exception *a1)
{
}

void sub_100074834(_Unwind_Exception *a1)
{
}

void sub_1000748B4(_Unwind_Exception *a1)
{
}

void sub_100074960(_Unwind_Exception *a1)
{
}

void sub_100074A1C(_Unwind_Exception *a1)
{
}

uint64_t sub_100074A30(uint64_t result, uint64_t a2)
{
  if (!a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

void sub_100074C9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_100074F1C(_Unwind_Exception *a1)
{
}

void aps_peer_event_handler(void *a1, void *a2, void *a3, int a4)
{
  unint64_t v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (!+[NSThread isMainThread](&OBJC_CLASS___NSThread, "isMainThread")
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_1000BF83C();
  }

  xpc_type_t type = xpc_get_type(v8);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (v8 == &_xpc_error_connection_invalid)
    {
      if (xpc_connection_get_context(v7) && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_CONNECTION_INVALID",  buf,  8u);
      }

      context = xpc_connection_get_context(v7);
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(context);
      id v11 = v30;
      if (v30)
      {
        [v30 connectionInvalidated];
LABEL_196:

        goto LABEL_197;
      }

      goto LABEL_41;
    }

    if (v8 == &_xpc_error_connection_interrupted)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      unint64_t v27 = "peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED";
    }

    else
    {
      BOOL v26 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
      if (v8 != &_xpc_error_termination_imminent)
      {
        if (!v26) {
          goto LABEL_197;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        unint64_t v27 = "Unidentified error: %@";
        uint32_t v28 = 12;
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, v27, buf, v28);
        goto LABEL_197;
      }

      if (!v26) {
        goto LABEL_197;
      }
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      unint64_t v27 = "peer(%d) received XPC_ERROR_TERMINATION_IMMINENT";
    }

    uint32_t v28 = 8;
    goto LABEL_45;
  }

  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    id v11 = v8;
    unsigned int int64 = xpc_dictionary_get_int64(v11, (const char *)[APSXPCMessageTypeKey UTF8String]);
    unsigned int v13 = int64;
    if (((1LL << int64) & 0x5E0803701LL) != 0)
    {
      if (a4 && (sub_100077B08() & 1) != 0
        || (xpc_connection_get_audit_token(v7, buf), sub_1000467EC(buf, APSConnectionInitiateEntitlement)))
      {
        uint64_t v14 = 0LL;
LABEL_12:
        switch(v13)
        {
          case 0u:
            if ((_os_feature_enabled_impl("APS", "ShorterConnectDelayV1") & 1) == 0) {
              [v9 receivedClientConnection];
            }
            uint64_t v15 = APSGetXPCStringFromDictionary(v11, "environmentName");
            unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
            uint64_t v17 = APSGetXPCStringFromDictionary(v11, "portName");
            unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            uint64_t v19 = APSGetXPCStringFromDictionary(v11, "processName");
            id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v16;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v18;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "SetupConnection: env=%@ portName=%@",  buf,  0x16u);
            }

            unsigned int v21 = [v18 isEqualToString:APSConnectionOverrideNamedDelegatePort];
            if (v21)
            {

              unint64_t v18 = 0LL;
            }

            id v22 = objc_msgSend( v9,  "getConnectionServerForEnvironment:connectionPortName:processName:enableDarkWake:peerConnection:isNewConnection:",  v16,  v18,  v20,  APSGetXPCBoolFromDictionary(v11, "enableDarkWake"),  v7,  buf);
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

            [v23 setProcessName:v20];
            xpc_object_t reply = xpc_dictionary_create_reply(v11);
            if (reply)
            {
              sub_100076938(v23, v11, reply);
              sub_100076B70(v23, (uint64_t)v11, reply);
              sub_100076BFC(v23, (uint64_t)v11, reply);
              sub_100076C88(v23, (uint64_t)v11);
              unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue([v23 publicToken]);

              if (v25)
              {
                uint64_t v127 = objc_claimAutoreleasedReturnValue([v23 publicToken]);
                uint64_t v129 = 0LL;
                APSInsertDatasToXPCDictionary(reply, "publicToken");
              }

              objc_msgSend(v23, "messageSize", v127, v129);
              APSInsertIntsToXPCDictionary(reply, "messageSize");
              [v23 largeMessageSize];
              APSInsertIntsToXPCDictionary(reply, "largeMessageSize");
              uint64_t v128 = [v23 isConnected];
              APSInsertBoolsToXPCDictionary(reply, "isConnected");
              xpc_connection_send_message(v7, reply);
              objc_msgSend(v23, "connectionHandshakeDidComplete", v128, 0);
            }

            uint64_t v14 = v23;
            goto LABEL_195;
          case 1u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            sub_100076938(v14, v11, v33);
            goto LABEL_127;
          case 2u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            sub_100076B70(v14, (uint64_t)v11, v33);
            goto LABEL_127;
          case 3u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            sub_100076BFC(v14, (uint64_t)v11, v33);
            goto LABEL_127;
          case 4u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            sub_100076D08(v14, (uint64_t)v11, v33);
            goto LABEL_127;
          case 5u:
            goto LABEL_56;
          case 6u:
            xpc_object_t value = xpc_dictionary_get_value(v11, "message");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(value);
            uint64_t v37 = APSCreateDictionaryFromXPCObject(v33);
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v37);
            xpc_object_t v39 = xpc_dictionary_create_reply(v11);
            id v40 = v39;
            if (v39)
            {
              uint64_t v127 = v38 != 0LL;
              uint64_t v129 = 0LL;
              APSInsertBoolsToXPCDictionary(v39, "success");
              xpc_connection_send_message(v7, v40);
            }

            if (v38)
            {
              unint64_t v41 = -[APSOutgoingMessage initWithDictionary:]( objc_alloc(&OBJC_CLASS___APSOutgoingMessage),  "initWithDictionary:",  v38);
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
              {
                v133 = (void *)objc_claimAutoreleasedReturnValue(-[APSOutgoingMessage topic](v41, "topic"));
                id v42 = sub_100085CF4(v38, v133);
                v135 = v33;
                unsigned __int8 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v43;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCSendOutgoingMessageEvent constructing apsMessage with dict %@",  buf,  0xCu);

                char v33 = v135;
              }

              objc_msgSend(v14, "handleSendOutgoingMessage:", v41, v127, v129);
              goto LABEL_78;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_192;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v121 = "APSXPCSendOutgoingMessageEvent requestMessage %@ failed!";
            goto LABEL_191;
          case 7u:
            if (!os_variant_allows_internal_security_policies("com.apple.apsd-security"))
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_1000BF6FC();
              }
              goto LABEL_195;
            }

            xpc_object_t v44 = xpc_dictionary_get_value(v11, "message");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v44);
            uint64_t v45 = APSCreateDictionaryFromXPCObject(v33);
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v45);
            xpc_object_t v46 = xpc_dictionary_create_reply(v11);
            id v40 = v46;
            if (v46)
            {
              APSInsertBoolsToXPCDictionary(v46, "success");
              xpc_connection_send_message(v7, v40);
            }

            if (v38)
            {
              unint64_t v41 = -[APSOutgoingMessage initWithDictionary:]( objc_alloc(&OBJC_CLASS___APSOutgoingMessage),  "initWithDictionary:",  v38);
              [v14 handleFakeMessage:v41];
LABEL_78:
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v11;
              v121 = "APSXPCSendFakeMessageEvent requestMessage %@ failed!";
LABEL_191:
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  v121,  buf,  0xCu);
            }

LABEL_192:
            goto LABEL_193;
          case 8u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            uint64_t v47 = APSGetXPCStringFromDictionary(v11, "environmentName");
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v47);
            id v40 = (void *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:v38]);
            [v40 hasIdentity];
            APSInsertBoolsToXPCDictionary(v33, "hasIdentity");
            goto LABEL_87;
          case 9u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            id v48 = (__CFString *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:APSEnvironmentProduction]);
            unint64_t v38 = v48;
            if (v48)
            {
              -[__CFString serverTimeInNanoSeconds](v48, "serverTimeInNanoSeconds");
            }

            else
            {
              v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
              [v126 timeIntervalSince1970];
            }

            APSInsertUnsignedLongLongsToXPCDictionary(v33, "serverTimeNS");
            goto LABEL_187;
          case 0xAu:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:APSEnvironmentProduction]);
            id v40 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString latestGeoRegion](v38, "latestGeoRegion"));
            if (v40) {
              APSInsertNSStringsToXPCDictionary(v33, "geoRegion");
            }
LABEL_87:
            xpc_connection_send_message(v7, v33);
            goto LABEL_192;
          case 0xBu:
            objc_msgSend(v14, "handleCancelOutgoingMessageWithID:", (int)APSGetXPCIntFromDictionary(v11, "messageID"));
            goto LABEL_195;
          case 0xCu:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            uint64_t v49 = APSGetXPCStringFromDictionary(v11, "environmentName");
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v49);
            [v9 keepAliveIntervalForEnvironment:v38];
            APSInsertDoublesToXPCDictionary(v33, "keepAliveInterval");
            goto LABEL_187;
          case 0xDu:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Requesting courier connections",  buf,  2u);
            }

            [v9 requestCourierConnections];
            goto LABEL_127;
          case 0xEu:
            uint64_t v50 = APSGetXPCStringFromDictionary(v11, "topic");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v50);
            uint64_t v51 = APSGetXPCStringFromDictionary(v11, "identifier");
            uint64_t v52 = objc_claimAutoreleasedReturnValue(v51);
            unint64_t v38 = (__CFString *)v52;
            if (v33 && v52)
            {
              [v14 handleRequestPerAppTokenForTopic:v33 identifier:v52];
              goto LABEL_193;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v120 = "APSXPCRequestAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0xFu:
            xpc_object_t v53 = xpc_dictionary_get_value(v11, "info");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v53);
            id v54 = objc_alloc(&OBJC_CLASS___APSAppTokenInfo);
            uint64_t v55 = APSCreateDictionaryFromXPCObject(v33);
            __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            unint64_t v38 = (__CFString *)[v54 initWithDictionary:v56];

            if (v38)
            {
              uint64_t v57 = objc_claimAutoreleasedReturnValue(-[__CFString topic](v38, "topic"));
              if (v57)
              {
                __int16 v58 = (void *)v57;
                uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v38, "identifier"));

                if (v59)
                {
                  [v14 handleRequestTokenForInfo:v38];
                  goto LABEL_193;
                }
              }
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v120 = "APSXPCRequestExtendedAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x10u:
            xpc_object_t v60 = xpc_dictionary_get_value(v11, "info");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v60);
            id v61 = objc_alloc(&OBJC_CLASS___APSURLTokenInfo);
            uint64_t v62 = APSCreateDictionaryFromXPCObject(v33);
            id v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
            unint64_t v38 = (__CFString *)[v61 initWithDictionary:v63];

            if (v38)
            {
              uint64_t v64 = objc_claimAutoreleasedReturnValue(-[__CFString topic](v38, "topic"));
              if (v64)
              {
                id v65 = (void *)v64;
                id v66 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString vapidPublicKey](v38, "vapidPublicKey"));

                if (v66)
                {
                  [v14 handleRequestURLTokenForInfo:v38];
                  goto LABEL_193;
                }
              }
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v120 = "APSXPCRequestURLTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x11u:
            uint64_t v67 = APSGetXPCStringFromDictionary(v11, "topic");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v67);
            uint64_t v68 = APSGetXPCStringFromDictionary(v11, "identifier");
            uint64_t v69 = objc_claimAutoreleasedReturnValue(v68);
            unint64_t v38 = (__CFString *)v69;
            if (v33 && v69)
            {
              [v14 handleInvalidatePerAppTokenForTopic:v33 identifier:v69];
              goto LABEL_193;
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v120 = "APSXPCInvalidateAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x12u:
            xpc_object_t v70 = xpc_dictionary_get_value(v11, "info");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v70);
            id v71 = objc_alloc(&OBJC_CLASS___APSAppTokenInfo);
            uint64_t v72 = APSCreateDictionaryFromXPCObject(v33);
            uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
            unint64_t v38 = (__CFString *)[v71 initWithDictionary:v73];

            if (v38)
            {
              uint64_t v74 = objc_claimAutoreleasedReturnValue(-[__CFString topic](v38, "topic"));
              if (v74)
              {
                uint64_t v75 = (void *)v74;
                v76 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v38, "identifier"));

                if (v76)
                {
                  [v14 handleInvalidatePerAppTokenForInfo:v38];
                  goto LABEL_193;
                }
              }
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v120 = "APSXPCInvalidateExtendedAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x13u:
            uint64_t v77 = APSGetXPCStringFromDictionary(v11, "topic");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v77);
            if (v33)
            {
              [v14 handleInvalidateURLTokenForTopic:v33];
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v11;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCInvalidateURLTokenEvent requestMessage %@ failed",  buf,  0xCu);
            }

            unint64_t v38 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v38) {
              goto LABEL_193;
            }
            v122 = v7;
            v123 = v38;
            goto LABEL_188;
          case 0x14u:
            xpc_object_t v78 = xpc_dictionary_get_value(v11, "info");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v78);
            id v79 = objc_alloc(&OBJC_CLASS___APSAppTokenInfo);
            uint64_t v80 = APSCreateDictionaryFromXPCObject(v33);
            id v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
            unint64_t v38 = (__CFString *)[v79 initWithDictionary:v81];

            if (v38)
            {
              uint64_t v82 = objc_claimAutoreleasedReturnValue(-[__CFString topic](v38, "topic"));
              if (v82)
              {
                id v83 = (void *)v82;
                __int16 v84 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString identifier](v38, "identifier"));

                if (v84)
                {
                  [v14 handleCurrentTokenForInfo:v38];
                  goto LABEL_193;
                }
              }
            }

            if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_193;
            }
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v11;
            v120 = "APSXPCCurrentExtendedAppTokenEvent requestMessage %@ failed";
            goto LABEL_171;
          case 0x15u:
            xpc_object_t v85 = xpc_dictionary_get_value(v11, "info");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v85);
            id v86 = objc_alloc(&OBJC_CLASS___APSURLTokenInfo);
            uint64_t v87 = APSCreateDictionaryFromXPCObject(v33);
            __int16 v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
            unint64_t v38 = (__CFString *)[v86 initWithDictionary:v88];

            if (v38
              && (v89 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString topic](v38, "topic")),
                  v89,
                  v89))
            {
              [v14 handleCurrentURLTokenForInfo:v38];
            }

            else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v11;
              v120 = "APSXPCCurrentURLTokenEvent requestMessage %@ failed";
LABEL_171:
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  v120,  buf,  0xCu);
            }

            break;
          case 0x16u:
            uint64_t v90 = APSGetXPCStringFromDictionary(v11, "guid");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v90);
            uint64_t v91 = APSGetXPCDataFromDictionary(v11, "tracingUUID");
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v91);
            uint64_t v92 = APSGetXPCStringFromDictionary(v11, "topic");
            id v40 = (void *)objc_claimAutoreleasedReturnValue(v92);
            [v14 handleAckIncomingMessageWithGuid:v33 topic:v40 tracingUUID:v38];
            goto LABEL_192;
          case 0x17u:
            char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
            if (!v33) {
              goto LABEL_194;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Processing invalid identity.",  buf,  2u);
            }

            [v9 invalidateDeviceIdentity];
LABEL_127:
            xpc_connection_send_message(v7, v33);
            goto LABEL_194;
          case 0x18u:
            uint64_t v93 = APSGetXPCDataFromDictionary(v11, "tracingUUID");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v93);
            uint64_t v94 = APSGetXPCStringFromDictionary(v11, "topic");
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v94);
            [v14 handleIncomingMessageReceiptWithTopic:v38 tracingUUID:v33];
            goto LABEL_193;
          case 0x19u:
            sub_100076C88(v14, (uint64_t)v11);
            goto LABEL_195;
          case 0x1Au:
            uint64_t v95 = APSGetXPCDataFromDictionary(v11, "dataToSign");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v95);
            uint64_t v96 = APSGetXPCUnsignedLongLongFromDictionary(v11, "serverTime");
            v97 = (void *)objc_claimAutoreleasedReturnValue([v14 environmentName]);
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:v97]);

            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCSignDataWithIdentityEvent, requesting push identity",  buf,  2u);
            }

            xpc_object_t v98 = xpc_dictionary_create_reply(v11);
            if (v98)
            {
              v140[0] = _NSConcreteStackBlock;
              v140[1] = 3221225472LL;
              v140[2] = sub_100076E70;
              v140[3] = &unk_10011F940;
              uint64_t v144 = v96;
              v141 = v33;
              id v142 = v98;
              v143 = v7;
              -[__CFString fetchUserCourierIdentityWithCompletion:]( v38,  "fetchUserCourierIdentityWithCompletion:",  v140);
            }

            goto LABEL_193;
          case 0x1Bu:
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCRollBAACertEvent, attempting to fetch a new BAA cert for all environments",  buf,  2u);
            }

            v99 = (void *)objc_claimAutoreleasedReturnValue([v14 environmentName]);
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:v99]);

            __int16 v100 = (__CFString *)xpc_dictionary_create_reply(v11);
            unint64_t v38 = v100;
            if (v100)
            {
              v137[0] = _NSConcreteStackBlock;
              v137[1] = 3221225472LL;
              v137[2] = sub_100076FF4;
              v137[3] = &unk_10011F968;
              v138 = v100;
              v139 = v7;
              -[__CFString forceBAAIdentityRefreshWithCompletion:](v33, "forceBAAIdentityRefreshWithCompletion:", v137);
            }

            goto LABEL_193;
          case 0x1Cu:
            sub_100076E1C(v14, (uint64_t)v11);
            goto LABEL_195;
          case 0x21u:
            [v14 handleNotificationAcknowledged];
            goto LABEL_195;
          case 0x26u:
            sub_100076D94(v14, (uint64_t)v11);
            goto LABEL_195;
          case 0x31u:
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:APSEnvironmentProduction]);
            -[__CFString performKeepAlive](v33, "performKeepAlive");
            goto LABEL_194;
          case 0x32u:
            uint64_t v101 = APSGetXPCArrayFromDictionary(v11, "channelDicts");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v101);
            uint64_t v102 = APSGetXPCStringFromDictionary(v11, "pushTopic");
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v102);
            [v14 handleSubscribeToChannels:v33 forTopic:v38];
            goto LABEL_193;
          case 0x33u:
            uint64_t v103 = APSGetXPCArrayFromDictionary(v11, "channelDicts");
            char v33 = (__CFString *)objc_claimAutoreleasedReturnValue(v103);
            uint64_t v104 = APSGetXPCStringFromDictionary(v11, "pushTopic");
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue(v104);
            [v14 handleUnsubscribeFromChannels:v33 forTopic:v38];
            goto LABEL_193;
          case 0x34u:
            uint64_t v105 = APSGetXPCStringFromDictionary(v11, "pushTopic");
            v106 = (void *)objc_claimAutoreleasedReturnValue(v105);
            v107 = (void *)objc_claimAutoreleasedReturnValue([v14 environmentName]);
            v108 = (void *)objc_claimAutoreleasedReturnValue([v9 courierForEnvironmentName:v107]);

            v109 = (void *)objc_claimAutoreleasedReturnValue([v14 user]);
            v110 = (void *)objc_claimAutoreleasedReturnValue([v108 allRegisteredChannelsForTopic:v106 user:v109]);

            xpc_object_t v111 = xpc_dictionary_create_reply(v11);
            v112 = v111;
            if (v111)
            {
              v130 = v111;
              v132 = v108;
              v134 = v106;
              v136 = v14;
              v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v110 count]));
              __int128 v145 = 0u;
              __int128 v146 = 0u;
              __int128 v147 = 0u;
              __int128 v148 = 0u;
              v131 = v110;
              id v114 = v110;
              id v115 = [v114 countByEnumeratingWithState:&v145 objects:v150 count:16];
              if (v115)
              {
                id v116 = v115;
                uint64_t v117 = *(void *)v146;
                do
                {
                  for (uint64_t i = 0LL; i != v116; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v146 != v117) {
                      objc_enumerationMutation(v114);
                    }
                    v119 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v145 + 1) + 8 * (void)i) dictionaryRepresentation]);
                    [v113 addObject:v119];
                  }

                  id v116 = [v114 countByEnumeratingWithState:&v145 objects:v150 count:16];
                }

                while (v116);
              }

              v112 = v130;
              APSInsertNSArraysToXPCDictionary(v130, "subscribedChannels");
              xpc_connection_send_message(v7, v130);

              v106 = v134;
              uint64_t v14 = v136;
              v110 = v131;
              v108 = v132;
            }

            goto LABEL_195;
          default:
            goto LABEL_195;
        }

        goto LABEL_193;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_1000BF73C(v7);
      }
      goto LABEL_41;
    }

    if (int64 == 5LL)
    {
      xpc_connection_get_audit_token(v7, buf);
      v149[0] = *(_OWORD *)buf;
      v149[1] = *(_OWORD *)&buf[16];
      if (!sandbox_check_by_audit_token(v149, 0LL, 0LL))
      {
        uint64_t v14 = 0LL;
LABEL_56:
        int v32 = APSGetXPCIntFromDictionary(v11, "style");
        char v33 = (__CFString *)xpc_dictionary_create_reply(v11);
        if (!v33)
        {
LABEL_194:

LABEL_195:
          goto LABEL_196;
        }

        uint64_t v34 = 0LL;
        switch(v32)
        {
          case 1:
            uint64_t v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "prettyStatus", 0));
            goto LABEL_182;
          case 2:
            uint64_t v35 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_connectionsDebuggingState", 0));
            goto LABEL_182;
          case 3:
            uint64_t v34 = 1LL;
            goto LABEL_181;
          case 4:
LABEL_181:
            uint64_t v35 = objc_claimAutoreleasedReturnValue([v9 JSONDebugString:v34]);
LABEL_182:
            unint64_t v38 = (__CFString *)v35;
            break;
          case 5:
            v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_connectionsDebuggingState", 0));
            v125 = (void *)objc_claimAutoreleasedReturnValue([v9 prettyStatus]);
            unint64_t v38 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"iOS Dump State\n%@\nMac OS Dump State\n%@\n",  v124,  v125));

            break;
          default:
            unint64_t v38 = @"unknown style";
            break;
        }

        APSInsertNSStringsToXPCDictionary(v33, "connectionsDebuggingState");
LABEL_187:
        v122 = v7;
        v123 = v33;
LABEL_188:
        xpc_connection_send_message(v122, v123);
LABEL_193:

        goto LABEL_194;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_1000BF7B8(v7);
      }
    }

    else
    {
LABEL_50:
      __int128 v31 = xpc_connection_get_context(v7);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = (_DWORD)v7;
        *(_WORD *)&buf[8] = 2112;
        *(void *)&buf[10] = v14;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Looking up connection on peer: %x   found %@",  buf,  0x12u);
      }

      if (v14) {
        goto LABEL_12;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000BF680(v7);
      }
    }

LABEL_41:
    xpc_connection_cancel(v7);
    goto LABEL_196;
  }

    __break(0x5513u);
    return result;
  }

  if (__CFADD__(v4, v5)) {
    goto LABEL_41;
  }
  id v8 = v4 + v5;
  if (v4 + v5 == -1LL) {
    goto LABEL_41;
  }
  id v9 = (_BYTE *)(v8 - 1);
  if (v8 - 1 >= v4)
  {
    BOOL v12 = 0;
    unsigned int v13 = 0LL;
    int v10 = 0LL;
    while ((unint64_t)v9 < v8)
    {
      uint64_t v14 = (unint64_t)(*v9 & 0x7F) << v12;
      uint64_t v15 = __CFADD__(v10, v14);
      v10 += v14;
      if (v15) {
        goto LABEL_38;
      }
      if (v13 <= 7)
      {
        ++v13;
        --v9;
        v12 += 7;
      }

      goto LABEL_23;
    }

    goto LABEL_37;
  }

LABEL_197:
}

void sub_100076938(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  uint64_t v8 = APSGetEnabledTopicsFromXPCDictionary(v6);
  id v30 = (id)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v9 = APSGetIgnoredTopicsFromXPCDictionary(v6);
  uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = APSGetOpportunisticTopicsFromXPCDictionary(v6);
  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = APSGetNonWakingTopicsFromXPCDictionary(v6);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  if (v30)
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:"));
    if (v10) {
      goto LABEL_3;
    }
LABEL_6:
    unsigned int v16 = 0LL;
    if (v12) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t v15 = 0LL;
  if (!v10) {
    goto LABEL_6;
  }
LABEL_3:
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v10));
  if (v12)
  {
LABEL_4:
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v12));
    goto LABEL_8;
  }

void sub_100076B70(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  char v8 = 0;
  id v6 = a3;
  uint64_t v7 = APSGetEnableCriticalReliability(a2, &v8);
  if (v8) {
    [v5 setEnableCriticalReliability:v7];
  }
  [v5 enableCriticalReliability];
  APSInsertBoolsToXPCDictionary(v6, "enableCriticalReliability");
}

void sub_100076BFC(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  char v8 = 0;
  id v6 = a3;
  uint64_t v7 = APSGetEnableStatusNotifications(a2, &v8);
  if (v8) {
    [v5 setEnableStatusChangeNotifications:v7];
  }
  [v5 enableStatusChangeNotifications];
  APSInsertBoolsToXPCDictionary(v6, "enableStatusNotifications");
}

void sub_100076C88(void *a1, uint64_t a2)
{
  id v8 = a1;
  uint64_t v3 = APSGetUltraConstrainedTopicsFromXPCDictionary(a2);
  char v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = APSSafeArrayOfStrings();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
    [v8 setUltraConstrainedTopics:v7];
  }
}

void sub_100076D08(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  char v8 = 0;
  id v6 = a3;
  uint64_t v7 = APSGetTrackActivityPresence(a2, &v8);
  if (v8) {
    [v5 setTrackActivityPresence:v7];
  }
  [v5 trackActivityPresence];
  APSInsertBoolsToXPCDictionary(v6, "trackActivityPresence");
}

void sub_100076D94(void *a1, uint64_t a2)
{
  id v8 = a1;
  uint64_t v3 = APSGetXPCArrayFromDictionary(a2, "pushWakeTopics");
  char v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = APSSafeArrayOfStrings();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
    [v8 setPushWakeTopics:v7];
  }
}

void sub_100076E1C(void *a1, uint64_t a2)
{
  id v4 = a1;
  int v3 = APSGetXPCIntFromDictionary(a2, "keepAliveConfiguration");
  [v4 setKeepAliveConfiguration:sub_100078554(v3)];
}

void sub_100076E70(uint64_t a1, __SecKey *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (*(void *)(a1 + 56)) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:"));
    }
    else {
      id v6 = 0LL;
    }
    uint64_t v7 = *(void **)(a1 + 32);
    BOOL v12 = 0LL;
    id v13 = 0LL;
    BOOL v8 = sub_100077FD4(0LL, a2, v7, (uint64_t *)&v13, &v12, v6, 1);
    id v9 = v13;
    uint64_t v10 = v12;
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCSignDataWithIdentityEvent obtained cert/nonce/sig",  buf,  2u);
      }

      APSInsertNSArraysToXPCDictionary(*(void *)(a1 + 40), "pushCerts");
      APSInsertDatasToXPCDictionary(*(void *)(a1 + 40), "nonce");
      APSInsertDatasToXPCDictionary(*(void *)(a1 + 40), "sig");
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCSignDataWithIdentityEvent failed to obtain private key, can't sign data",  buf,  2u);
  }

  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 48), *(xpc_object_t *)(a1 + 40));
}

void sub_100076FF4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSXPCRollBAACertEvent obtained refreshed certs",  buf,  2u);
  }

  APSInsertNSArraysToXPCDictionary(*(void *)(a1 + 32), "pushCerts");
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), *(xpc_object_t *)(a1 + 32));
}

CFRunLoopSourceRef sub_100077080(uint64_t a1, int a2, CFIndex a3)
{
  return sub_100077088(a1, a2, a3, 0LL);
}

CFRunLoopSourceRef sub_100077088(uint64_t a1, int a2, CFIndex a3, uint64_t a4)
{
  BOOL v8 = malloc(0x18uLL);
  *(_DWORD *)BOOL v8 = a2;
  v8[1] = a1;
  v8[2] = a4;
  context.version = 1LL;
  context.info = v8;
  context.retain = 0LL;
  context.release = (void (__cdecl *)(const void *))&_free;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_10007716C;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))sub_1000771A8;
  context.hash = (CFHashCode (__cdecl *)(const void *))sub_1000771BC;
  context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))sub_1000771C4;
  context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))sub_1000771CC;
  CFRunLoopSourceRef v9 = CFRunLoopSourceCreate(0LL, a3, &context);
  if (!v9) {
    free(v8);
  }
  return v9;
}

uint64_t sub_10007715C()
{
  return pthread_key_create((pthread_key_t *)&qword_10014E8C8, 0LL);
}

CFStringRef sub_10007716C(unsigned int *a1)
{
  return CFStringCreateWithFormat( 0LL,  0LL,  @"<CFRunLoopSource MIG Server> {port = %u, subsystem = %p, CFRunLoopSourceContext context = %p}",  *a1,  *((void *)a1 + 1),  *((void *)a1 + 2));
}

BOOL sub_1000771A8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000771BC(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_1000771C4(unsigned int *a1)
{
  return *a1;
}

uint64_t sub_1000771CC(mach_msg_header_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  mach_msg_return_t v21;
  FILE *v23;
  char *v24;
  uint64_t v6 = *(void *)(a4 + 8);
  mach_msg_id_t msgh_id = a1->msgh_id;
  int v8 = *(_DWORD *)(v6 + 8);
  BOOL v9 = __OFSUB__(msgh_id, v8);
  int v10 = msgh_id - v8;
  if (v10 < 0 != v9 || msgh_id >= *(_DWORD *)(v6 + 12))
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = *(void (**)(mach_msg_header_t *, mach_msg_header_t *))(v6 + 40LL * v10 + 40);
    if (v11)
    {
      char v12 = 0;
      size_t v13 = *(unsigned int *)(v6 + 40LL * v10 + 64);
      goto LABEL_7;
    }
  }

  char v12 = 1;
  size_t v13 = 36LL;
LABEL_7:
  uint64_t v14 = (mach_msg_header_t *)malloc(v13);
  if (v14)
  {
    uint64_t v15 = v14;
    mach_port_t msgh_remote_port = a1->msgh_remote_port;
    v14->mach_msg_bits_t msgh_bits = a1->msgh_bits & 0x1F;
    v14->msgh_std::string::size_type size = 36;
    *(void *)&v14->mach_port_t msgh_remote_port = msgh_remote_port;
    v14->mach_msg_id_t msgh_id = msgh_id + 100;
    if ((v12 & 1) != 0)
    {
      *(NDR_record_t *)&v14[1].mach_msg_bits_t msgh_bits = NDR_record;
      v14[1].mach_port_t msgh_remote_port = -303;
    }

    else
    {
      uint64_t v17 = *(const void **)(a4 + 16);
      if (v17)
      {
        pthread_setspecific(qword_10014E8C8, v17);
        v11(a1, v15);
        pthread_setspecific(qword_10014E8C8, 0LL);
      }

      else
      {
        v11(a1, v14);
      }
    }

    mach_msg_bits_t msgh_bits = v15->msgh_bits;
    if ((v15->msgh_bits & 0x80000000) == 0)
    {
      mach_port_t v19 = v15[1].msgh_remote_port;
      if (v19 == -305)
      {
LABEL_31:
        free(v15);
        return 0LL;
      }

      if (v19 && (a1->msgh_bits & 0x80000000) != 0)
      {
        a1->mach_port_t msgh_remote_port = 0;
        mach_msg_destroy(a1);
        mach_msg_bits_t msgh_bits = v15->msgh_bits;
      }
    }

    if (v15->msgh_remote_port)
    {
      if ((msgh_bits & 0x1F) == 0x12) {
        mach_msg_option_t v20 = 1;
      }
      else {
        mach_msg_option_t v20 = 17;
      }
      unsigned int v21 = mach_msg(v15, v20, v15->msgh_size, 0, 0, 0, 0);
      if ((v21 - 268435459) >= 2 && v21 != 0)
      {
        uint64_t v23 = __stderrp;
        char v24 = mach_error_string(v21);
        fprintf(v23, "<CFRunLoopSource MIG Server> mach_msg send error in reply: %s\n", v24);
        goto LABEL_31;
      }

      mach_msg_bits_t msgh_bits = v15->msgh_bits;
    }

    if ((msgh_bits & 0x80000000) != 0) {
      mach_msg_destroy(v15);
    }
    goto LABEL_31;
  }

  return 0LL;
}

uint64_t sub_1000773A8(__CFRunLoopSource *a1)
{
  context.version = 1LL;
  CFRunLoopSourceGetContext(a1, &context);
  return *(unsigned int *)context.info;
}

void *sub_1000773E4()
{
  return pthread_getspecific(qword_10014E8C8);
}

uint64_t sub_1000773F0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 count])
    {
      if (v5)
      {
        uint64_t v6 = 0LL;
        goto LABEL_10;
      }

uint64_t sub_100077484(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 count])
    {
      if (v5)
      {
        uint64_t v6 = 0LL;
        goto LABEL_10;
      }

uint64_t sub_100077518(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 count])
    {
      if (v5)
      {
        uint64_t v6 = 0LL;
        goto LABEL_10;
      }

uint64_t sub_1000775AC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 == v4) {
    goto LABEL_8;
  }
  if (!v3)
  {
    if ([v4 length])
    {
      if (v5)
      {
        uint64_t v6 = 0LL;
        goto LABEL_10;
      }

uint64_t sub_100077640(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  int v9 = sub_1000773F0(v7, v8);
  if ((v9 & 1) == 0)
  {
    if (v7)
    {
      if (v8)
      {
LABEL_4:
        id v10 = [v7 mutableCopy];
        *a4 = v10;
        [v10 minusSet:v8];
        id v11 = [v8 mutableCopy];
        *a3 = v11;
        [v11 minusSet:v7];
        goto LABEL_5;
      }
    }

    else
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](&OBJC_CLASS___NSMutableSet, "setWithCapacity:", 0LL));
      if (v8) {
        goto LABEL_4;
      }
    }

    id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithCapacity:](&OBJC_CLASS___NSMutableSet, "setWithCapacity:", 0LL));
    goto LABEL_4;
  }

BOOL sub_100077718(const __CFString *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  unsigned int v3 = [v2 isMultiUser];

  uint64_t v4 = APSBundleIdentifier;
  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserFS sharedInstance](&OBJC_CLASS___APSMultiUserFS, "sharedInstance"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 systemPath]);
    id v7 = (const void *)_CFPreferencesCopyValueWithContainer( a1,  v4,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost,  [v6 stringByAppendingString:@"/"]);

    if (v7)
    {
      CFTypeID v8 = CFGetTypeID(v7);
      if (v8 == CFBooleanGetTypeID()) {
        int Value = CFBooleanGetValue((CFBooleanRef)v7);
      }
      else {
        int Value = 0;
      }
      CFRelease(v7);
    }

    else
    {
      int Value = 0;
    }
  }

  else
  {
    int Value = CFPreferencesGetAppBooleanValue(a1, APSBundleIdentifier, 0LL);
  }

  return Value != 0;
}

CFPropertyListRef sub_10007783C(const __CFString *a1, int a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  unsigned int v5 = [v4 isMultiUser];

  uint64_t v6 = APSBundleIdentifier;
  if (v5) {
    BOOL v7 = a2 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return CFPreferencesCopyAppValue(a1, APSBundleIdentifier);
  }
  CFTypeID v8 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserFS sharedInstance](&OBJC_CLASS___APSMultiUserFS, "sharedInstance"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 systemPath]);
  uint64_t v10 = _CFPreferencesCopyValueWithContainer( a1,  v6,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost,  [v9 stringByAppendingString:@"/"]);

  return (CFPropertyListRef)v10;
}

void sub_10007792C(const __CFString *a1, const void *a2, int a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  unsigned int v7 = [v6 isMultiUser];

  uint64_t v8 = APSBundleIdentifier;
  if (v7) {
    BOOL v9 = a3 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    CFPreferencesSetAppValue(a1, a2, APSBundleIdentifier);
  }

  else
  {
    id v11 = (id)objc_claimAutoreleasedReturnValue(+[APSMultiUserFS sharedInstance](&OBJC_CLASS___APSMultiUserFS, "sharedInstance"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v11 systemPath]);
    _CFPreferencesSetValueWithContainer( a1,  a2,  v8,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost,  [v10 stringByAppendingString:@"/"]);
  }

void sub_100077A2C(int a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  unsigned int v3 = [v2 isMultiUser];

  uint64_t v4 = APSBundleIdentifier;
  if (v3) {
    BOOL v5 = a1 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    CFPreferencesAppSynchronize(APSBundleIdentifier);
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[APSMultiUserFS sharedInstance](&OBJC_CLASS___APSMultiUserFS, "sharedInstance"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 systemPath]);
    _CFPreferencesSynchronizeWithContainer( v4,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost,  [v6 stringByAppendingString:@"/"]);
  }

uint64_t sub_100077B08()
{
  uint64_t result = os_variant_has_internal_content("com.apple.apsd");
  if ((_DWORD)result) {
    return !sub_100077718(@"ForceProductionConfiguration");
  }
  return result;
}

BOOL sub_100077B38()
{
  return MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) == 7;
}

__CFString *sub_100077B60(void *a1)
{
  id v1 = [a1 code];
  else {
    return off_10011F9A8[(void)v1 + 9886];
  }
}

id sub_100077B98(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 base64EncodedStringWithOptions:0]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByReplacingOccurrencesOfString:@"+" withString:@"-"]);

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByReplacingOccurrencesOfString:@"/" withString:@"_"]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByReplacingOccurrencesOfString:@"=" withString:&stru_100123240]);

  return v4;
}

NSData *sub_100077C2C(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bytes];
  CC_LONG v3 = [v1 length];

  CC_SHA1(v2, v3, md);
  return -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", md, 20LL);
}

NSData *sub_100077CD0(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bytes];
  CC_LONG v3 = [v1 length];

  CC_SHA256(v2, v3, md);
  return -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", md, 32LL);
}

id sub_100077D74(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 dataUsingEncoding:4]);
  id v2 = sub_100077C2C(v1);
  CC_LONG v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  return v3;
}

NSMutableString *sub_100077DB0(void *a1)
{
  id v1 = a1;
  id v2 = [v1 length];
  id v3 = v1;
  uint64_t v4 = (char *)[v3 bytes];
  for (i = -[NSMutableString initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithCapacity:",  2LL * (void)v2); v2; id v2 = (char *)v2 - 1)
  {
    uint64_t v6 = *v4++;
    -[NSMutableString appendFormat:](i, "appendFormat:", @"%02x", v6);
  }

  return i;
}

id sub_100077E4C(void *a1)
{
  id v1 = sub_100077D74(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = sub_100077DB0(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  return v4;
}

id sub_100077E84(void *a1, id *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 dataUsingEncoding:4]);
  if (a2 && [*a2 length])
  {
    id v4 = *a2;
  }

  else
  {
    arc4random_buf(&__buf, 8uLL);
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &__buf, 8LL));
    id v4 = v5;
    if (a2) {
      *a2 = v5;
    }
  }

  CC_SHA256_Init(&__buf);
  id v6 = v3;
  CC_SHA256_Update(&__buf, [v6 bytes], (CC_LONG)objc_msgSend(v6, "length"));
  id v7 = v4;
  CC_SHA256_Update(&__buf, [v7 bytes], (CC_LONG)objc_msgSend(v7, "length"));
  CC_SHA256_Final(v10, &__buf);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v10, 32LL));

  return v8;
}

BOOL sub_100077FD4(__SecKey *a1, __SecKey *a2, void *a3, uint64_t *a4, void **a5, void *a6, int a7)
{
  id v13 = a3;
  id v14 = a6;
  BOOL v15 = 0LL;
  if (a2 && a4 && a5)
  {
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v16 timeIntervalSince1970];
    double v18 = v17;

    if (v14)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Generating nonce with time override.",  buf,  2u);
      }

      unint64_t v19 = (unint64_t)[v14 unsignedLongLongValue];
    }

    else
    {
      unint64_t v19 = 1000 * (unint64_t)v18;
    }

    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)unint64_t v41 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Generating nonce with timestamp %llu",  buf,  0xCu);
    }

    char v42 = a7;
    unint64_t v43 = bswap64(v19);
    arc4random_buf(&v44, 8uLL);
    *a4 = (uint64_t)(id)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  &v42,  17LL));
    mach_msg_option_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
    unsigned int v21 = v20;
    if (*a4 && a7) {
      -[NSMutableData appendData:](v20, "appendData:");
    }
    if (v13) {
      -[NSMutableData appendData:](v21, "appendData:", v13);
    }
    if (*a4 && (a7 & 1) == 0) {
      -[NSMutableData appendData:](v21, "appendData:");
    }
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog nonce](&OBJC_CLASS___APSLog, "nonce"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = -[NSMutableData length](v21, "length");
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)unint64_t v41 = v23;
      *(_WORD *)&v41[4] = 2112;
      *(void *)&v41[6] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Signature input is %d bytes (%@)",  buf,  0x12u);
    }

    int v24 = sub_1000784BC();
    if (v24) {
      char v25 = 3;
    }
    else {
      char v25 = 1;
    }
    v39[0] = 1;
    v39[1] = v25;
    BOOL v26 = &kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1;
    if (v24) {
      BOOL v26 = &kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    }
    unint64_t v27 = *v26;
    CFErrorRef v38 = 0LL;
    uint64_t v28 = SecKeyCreateSignature(a2, v27, (CFDataRef)v21, &v38);
    if (v28)
    {
      if (a1)
      {
        int v29 = SecKeyVerifySignature(a1, v27, (CFDataRef)v21, v28, &v38);
        id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog nonce](&OBJC_CLASS___APSLog, "nonce"));
        __int128 v31 = v30;
        if (!v29)
        {
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_1000BF87C(a4, (uint64_t *)&v38, v31);
          }

          BOOL v15 = 0LL;
          *a5 = 0LL;
          goto LABEL_42;
        }

        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = *a4;
          *(_DWORD *)buf = 138412290;
          *(void *)unint64_t v41 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Succeeded verifying signature for: %@",  buf,  0xCu);
        }
      }

      char v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithBytes:length:]( &OBJC_CLASS___NSMutableData,  "dataWithBytes:length:",  v39,  2LL));
      [v33 appendData:v28];
      *a5 = [v33 copy];

      uint64_t v34 = *a5;
    }

    else
    {
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog nonce](&OBJC_CLASS___APSLog, "nonce"));
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = *a4;
        *(_DWORD *)buf = 138412546;
        *(void *)unint64_t v41 = v36;
        *(_WORD *)&v41[8] = 2112;
        *(void *)&v41[10] = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Failed signing nonce: %@   with error: %@",  buf,  0x16u);
      }

      uint64_t v34 = 0LL;
      *a5 = 0LL;
    }

    if ([v34 length]) {
      BOOL v15 = [(id)*a4 length] != 0;
    }
    else {
      BOOL v15 = 0LL;
    }
LABEL_42:
  }

  return v15;
}

uint64_t sub_100078424()
{
  if (qword_10014E8D8 != -1) {
    dispatch_once(&qword_10014E8D8, &stru_10011F988);
  }
  return byte_10014E8D0;
}

void sub_100078464(id a1)
{
  int v2 = 0;
  size_t v1 = 4LL;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0LL, 0LL)) {
    byte_10014E8D0 = v2 != 0;
  }
}

uint64_t sub_1000784BC()
{
  int IsSupported = DeviceIdentityIsSupported();
  unsigned int v1 = _os_feature_enabled_impl("APS", "BAASupport");
  char v2 = _os_feature_enabled_impl("APS", "BAAPhysicalDevices");
  uint64_t result = IsSupported & v1;
  if ((_DWORD)result == 1 && (v2 & 1) == 0)
  {
    if (qword_10014E8D8 != -1) {
      dispatch_once(&qword_10014E8D8, &stru_10011F988);
    }
    return byte_10014E8D0;
  }

  return result;
}

BOOL sub_100078554(uint64_t a1)
{
  return a1 != 0;
}

BOOL sub_1000789B4(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = objc_alloc_init(&OBJC_CLASS___PSAppChannelUpdates);
        [a1 addAppChannelUpdates:v12];
LABEL_24:
        PBReaderRecallMark(a2, v14);

        goto LABEL_26;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_26:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v12 = objc_alloc_init(&OBJC_CLASS___PSSubscriptionUpdate);
    [a1 addSubscriptionUpdates:v12];
    if (!PBReaderPlaceMark(a2, v14) || (sub_10006E93C((uint64_t)v12, a2) & 1) == 0)
    {
LABEL_28:

      return 0LL;
    }

    goto LABEL_24;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100079390(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("APS-IDSSendQueue", 0LL);
  char v2 = (void *)qword_10014E8E0;
  qword_10014E8E0 = (uint64_t)v1;
}

void sub_1000794AC(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 40)) initWithService:@"com.apple.private.alloy.pushproxy"];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 linkedDevicesWithRelationship:3]);
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 8LL), v2);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ created IDSService",  (uint8_t *)&v5,  0xCu);
  }

  objc_msgSend(*(id *)(a1 + 32), "_onQueue_checkNearbyDevices:", v3);
  [v2 addDelegate:*(void *)(a1 + 32) queue:&_dispatch_main_q];
}

void sub_100079AB4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _recipientDevice]);
  if (v2)
  {
    if (!qword_10014E8F0)
    {
      id v3 = (void **)CUTWeakLinkSymbol("IDSDefaultPairedDevice", @"IDS");
      if (v3) {
        uint64_t v4 = *v3;
      }
      else {
        uint64_t v4 = 0LL;
      }
      objc_storeStrong((id *)&qword_10014E8F0, v4);
    }

    if (!qword_10014E8F8)
    {
      unint64_t v7 = (void **)CUTWeakLinkSymbol("IDSSendMessageOptionLocalDeliveryKey", @"IDS");
      if (v7) {
        char v8 = *v7;
      }
      else {
        char v8 = 0LL;
      }
      objc_storeStrong((id *)&qword_10014E8F8, v8);
    }

    if (!qword_10014E900)
    {
      BOOL v9 = (void **)CUTWeakLinkSymbol("IDSSendMessageOptionFireAndForgetKey", @"IDS");
      if (v9) {
        int v10 = *v9;
      }
      else {
        int v10 = 0LL;
      }
      objc_storeStrong((id *)&qword_10014E900, v10);
    }

    if (!qword_10014E908)
    {
      id v11 = (void **)CUTWeakLinkSymbol("IDSSendMessageOptionEnforceRemoteTimeoutsKey", @"IDS");
      if (v11) {
        char v12 = *v11;
      }
      else {
        char v12 = 0LL;
      }
      objc_storeStrong((id *)&qword_10014E908, v12);
    }

    id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v14 = v13;
    if (qword_10014E8F8) {
      -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", &__kCFBooleanTrue);
    }
    if (qword_10014E900) {
      -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", &__kCFBooleanTrue);
    }
    if (qword_10014E908) {
      -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", &__kCFBooleanFalse);
    }
    BOOL v15 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v16 = *(void *)(a1 + 48);
    double v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", qword_10014E8F0));
    id v30 = 0LL;
    id v31 = 0LL;
    unsigned int v18 = [v15 sendData:v16 toDestinations:v17 priority:300 options:v14 identifier:&v31 error:&v30];
    id v5 = v31;
    id v19 = v30;

    mach_msg_option_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"c"]);
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      id v22 = @"NO";
      uint64_t v23 = *(void *)(v21 + 8);
      *(_DWORD *)buf = 138413570;
      if (v18) {
        id v22 = @"YES";
      }
      uint64_t v33 = v21;
      __int16 v34 = 2112;
      uint64_t v35 = v20;
      __int16 v36 = 2112;
      uint64_t v37 = v22;
      __int16 v38 = 2112;
      id v39 = v5;
      __int16 v40 = 2112;
      id v41 = v19;
      __int16 v42 = 2112;
      uint64_t v43 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ sent data command %@ success %@ with identifier %@  error %@ on service %@",  buf,  0x3Eu);
    }

    if ([v20 isEqual:&off_10012B4E8])
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100079F3C;
      block[3] = &unk_10011DC60;
      void block[4] = *(void *)(a1 + 32);
      id v29 = v5;
      dispatch_async(&_dispatch_main_q, block);
    }

    if (v5) {
      unsigned int v24 = v18;
    }
    else {
      unsigned int v24 = 0;
    }
    if (v24 == 1 && *(void *)(a1 + 56))
    {
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_100079F48;
      void v25[3] = &unk_10011DAB8;
      v25[4] = *(void *)(a1 + 32);
      id v26 = *(id *)(a1 + 56);
      id v27 = v5;
      dispatch_async(&_dispatch_main_q, v25);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Couldn't find recipient IDSDevice when asked to send -- queuing message.",  buf,  2u);
    }

    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceNotFoundMessageQueue]);
    objc_sync_enter(v5);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceNotFoundMessageQueue]);
    [v6 addObject:*(void *)(a1 + 40)];

    [*(id *)(a1 + 32) _scheduleDeviceNotFoundTimer];
    objc_sync_exit(v5);
  }
}

void sub_100079F20(_Unwind_Exception *a1)
{
}

id sub_100079F3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setRecentDaemonAliveGuid:*(void *)(a1 + 40)];
}

void sub_100079F48(void *a1)
{
  id v2 = *(void **)(a1[4] + 48LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v4 = a1[4];
    id v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = v3;

    id v2 = *(void **)(a1[4] + 48LL);
  }

  [v2 setObject:a1[5] forKey:a1[6]];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v8 = a1[4];
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ mapping guid %@ with %@",  (uint8_t *)&v9,  0x20u);
  }

void sub_10007A43C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

LABEL_143:
LABEL_149:
      return;
    case 0x13uLL:
      id v41 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:@"i"]);
      if (sub_100005B98((unint64_t)[v41 integerValue]))
      {
        if (v20) {
          id v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSMapTable objectForKey:](self->_environmentToListener, "objectForKey:", v20));
        }
        else {
          id v86 = 0LL;
        }
        if ((objc_opt_respondsToSelector(v86, "proxyManager:handlePubSubChannelListRequest:envName:guid:") & 1) != 0) {
          objc_msgSend( v86,  "proxyManager:handlePubSubChannelListRequest:envName:guid:",  self,  objc_msgSend(v41, "integerValue"),  v20,  v97);
        }
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        v89 = (APSIDSProxyManager *)[v41 integerValue];
        *(_DWORD *)buf = 134217984;
        uint64_t v105 = v89;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Invalid value for interface: %ld, failed to deliver",  buf,  0xCu);
      }

LABEL_148:
      goto LABEL_149;
    default:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        uint64_t v105 = self;
        v106 = 2112;
        v107 = v14;
        v108 = 2048;
        v109 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ received message %@ with unknown command %ld",  buf,  0x20u);
      }

      goto LABEL_149;
  }

      v19 |= 4u;
      goto LABEL_154;
    }

    if (*(void *)v22 == 0x96463F78648862ALL && v22[8] == 1)
    {
      if ((v19 & 8) != 0) {
        goto LABEL_170;
      }
      id v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
      id v48 = ccder_blob_decode_tl(&v76, 0x2000000000000011LL, &v81);
      uint64_t result = v73;
      if (v48)
      {
        *(void *)__int16 v84 = 0xAAAAAAAAAAAAAAAALL;
        uint64_t v49 = *(void *)v84;
        if (__CFADD__(v76, *(void *)v84)) {
          goto LABEL_207;
        }
        if (&v76[*(void *)v84] == v77)
        {
          if (!*(_DWORD *)(a3 + 104))
          {
            if (v76 > &v76[*(void *)v84]) {
              goto LABEL_206;
            }
            *(void *)(a3 + 112) = v76;
            *(void *)(a3 + 120) = v49;
          }

          uint64_t result = 0LL;
        }

        else
        {
LABEL_124:
          uint64_t result = 262148LL;
        }
      }

      v19 |= 8u;
      goto LABEL_154;
    }

    if (*(void *)v22 != 0x9010DF78648862ALL || v22[8] != 52)
    {
      id v29 = *(void *)v22;
      id v30 = v22[8];
      if (v29 != 0x9010DF78648862ALL || v30 != 15)
      {
LABEL_168:
        uint64_t result = 262150LL;
LABEL_202:
        if (*v15 == v86)
        {
          *BOOL v15 = 0LL;
          *(void *)(a3 + 136) = 0LL;
        }

        return result;
      }

      if ((v19 & 0x40) != 0) {
        goto LABEL_170;
      }
      id v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v32 = ccder_blob_decode_tl(&v76, 0x2000000000000011LL, &v81);
      uint64_t result = v73;
      if (v32)
      {
        *(void *)__int16 v84 = 0xAAAAAAAAAAAAAAAALL;
        if ((ccder_blob_decode_tl(&v76, v74, v84) & 1) != 0)
        {
          if (__CFADD__(v76, *(void *)v84)) {
            goto LABEL_207;
          }
          if (&v76[*(void *)v84] == v77) {
            uint64_t result = 0LL;
          }
          else {
            uint64_t result = 262148LL;
          }
        }

        else
        {
          uint64_t result = 262148LL;
        }
      }

      v19 |= 0x40u;
      goto LABEL_154;
    }

    if ((v19 & 0x20) != 0)
    {
LABEL_170:
      uint64_t result = 262149LL;
      goto LABEL_202;
    }

    v19 |= 0x20u;
LABEL_155:
    id v79 = v20;
  }

  while ((unint64_t)v20 < v80);
  if ((~v19 & 3) != 0)
  {
    uint64_t result = 262156LL;
    goto LABEL_202;
  }

  xpc_object_t v53 = ccder_sizeof_tag(0x2000000000000011LL);
  id v54 = *(void *)(a3 + 48);
  uint64_t result = ccder_sizeof_len(v54);
  uint64_t v55 = __CFADD__(v53, result);
  __int16 v56 = v53 + result;
  if (v55) {
    goto LABEL_208;
  }
  if (v56 > 0x14)
  {
    uint64_t result = 327689LL;
    goto LABEL_202;
  }

  memset(v84, 170, sizeof(v84));
  id v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v82 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v84, v56)) {
    goto LABEL_207;
  }
  if (&v84[v56] > (_BYTE *)&v85 || v84 > &v84[v56]) {
    goto LABEL_206;
  }
  id v81 = v84;
  uint64_t v82 = &v84[v56];
  uint64_t result = ccder_blob_encode_tl(&v81, 0x2000000000000011LL, v54);
  if (!(_DWORD)result)
  {
    uint64_t result = 327688LL;
    goto LABEL_202;
  }

  __int16 v58 = v9[1];
  uint64_t v55 = __CFADD__(v58, 8LL);
  uint64_t v59 = v58 + 8;
  if (!v55)
  {
    xpc_object_t v60 = v9[2];
    uint64_t v55 = __CFADD__(v59, v60);
    id v61 = v59 + v60;
    if (!v55)
    {
      uint64_t v55 = __CFADD__(v61, 4LL);
      uint64_t v62 = v61 + 4;
      if (!v55 && v62 < 0xFFFFFFFFFFFFFFF8LL)
      {
        __chkstk_darwin(result, v57);
        uint64_t v64 = (char *)&v69 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        memset(v64, 170, ((v65 - 9) & 0xFFFFFFFFFFFFFFF8LL) + 8);
        ccdigest_init(v9, v64);
        ccdigest_update(v9, v64, v56, v84);
        ccdigest_update(v9, v64, *(void *)(a3 + 48), *(void *)(a3 + 40));
        __int16 v13 = ((uint64_t (*)(unint64_t *, char *, _OWORD *))v9[7])(v9, v64, v86);
        goto LABEL_185;
      }
    }
  }

id sub_10007D78C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_onQueue_checkNearbyDevices:", *(void *)(a1 + 40));
}

void sub_10007D908(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = @"YES";
    if (*(_BYTE *)(v2 + 32)) {
      uint64_t v4 = @"YES";
    }
    else {
      uint64_t v4 = @"NO";
    }
    if (!*(_BYTE *)(a1 + 40)) {
      id v3 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v27 = v2;
    __int16 v28 = 2112;
    id v29 = v4;
    __int16 v30 = 2112;
    id v31 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ isNearby changed from %@ to %@",  buf,  0x20u);
  }

  unsigned int v5 = [*(id *)(a1 + 32) canUseProxy];
  int v6 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v6 != *(unsigned __int8 *)(v7 + 32))
  {
    unsigned int v8 = v5;
    *(_BYTE *)(v7 + 32) = v6;
    [*(id *)(a1 + 32) _assertWiFiIfPossible];
    uint64_t v9 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v9 + 32))
    {
      [(id)v9 _sendDaemonAliveMessage];
      uint64_t v9 = *(void *)(a1 + 32);
    }

    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v10 = *(id *)(v9 + 24);
    id v11 = [v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v22;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(v10);
          }
          BOOL v15 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 24),  "objectForKey:",  *(void *)(*((void *)&v21 + 1) + 8 * (void)i),  (void)v21));
          [v15 proxyManager:*(void *)(a1 + 32) isNearbyChanged:*(unsigned __int8 *)(a1 + 40)];
        }

        id v12 = [v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v12);
    }

    id v16 = [*(id *)(a1 + 32) canUseProxy];
    if (v8 != (_DWORD)v16)
    {
      id v17 = v16;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = @"NO";
        uint64_t v19 = *(void *)(a1 + 32);
        if ((_DWORD)v17) {
          unsigned int v18 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v27 = v19;
        __int16 v28 = 2112;
        id v29 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ canUseProxy changed to %@",  buf,  0x16u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
      [WeakRetained proxyManager:*(void *)(a1 + 32) canUseProxyChanged:v17];
    }
  }

void sub_10007DC38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) linkedDevicesWithRelationship:3]);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10007DCD8;
  v5[3] = &unk_10011FCD8;
  id v3 = *(id *)(a1 + 40);
  id v6 = v2;
  id v7 = v3;
  id v4 = v2;
  dispatch_async(&_dispatch_main_q, v5);
}

uint64_t sub_10007DCD8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_10007DD3C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkNearbyDevices:v4];
  [*(id *)(a1 + 32) _updateTimerIfNecessaryWithDevices:v4];

  return _[*(id *)(a1 + 32) _flushDeviceNotFoundMessageQueue];
}

id sub_10007DDDC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _checkNearbyDevices:a2];
}

void sub_10007DE38(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _checkNearbyDevices:v4];
  [*(id *)(a1 + 32) _updateTimerIfNecessaryWithDevices:v4];
}

void sub_10007DF20(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007DF94;
  block[3] = &unk_10011E4F0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_10007DF94(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendDaemonAliveMessage];
}

uint64_t sub_10007E164(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v14 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10007E500(id a1)
{
  dispatch_queue_t v1 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 4LL);
  uint64_t v2 = (void *)qword_10014E910;
  qword_10014E910 = (uint64_t)v1;
}

void sub_10007EC4C(id a1)
{
  qword_10014DE18 = sysconf(71);
}

void sub_10007EC6C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

LABEL_32:
    return v11;
  }

  id v11 = 0;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      id v12 = @"YES";
    }
    else {
      id v12 = @"NO";
    }
    uint64_t v13 = sub_10003CEE4(a4);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138412802;
    __int16 v28 = self;
    id v29 = 2112;
    *(void *)__int16 v30 = v12;
    *(_WORD *)&v30[8] = 2112;
    *(void *)&v30[10] = v14;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@: asked to set isConnected %@ on invalid interface %@",  buf,  0x20u);

    return 0;
  }

  return v11;
}

                  __break(0x5519u);
                  goto LABEL_33;
                }

void sub_100085368(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  if (([v7 sent] & 1) == 0 && (objc_msgSend(v7, "hasTimedOut") & 1) == 0)
  {
    char v8 = (uint64_t (**)(void, void))objc_claimAutoreleasedReturnValue([v7 sendBlock]);
    id v14 = 0LL;
    uint64_t v9 = ((uint64_t (**)(void, id *))v8)[2](v8, &v14);
    int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = v14;
    if (v11)
    {
      [*(id *)(a1 + 32) addIndex:a3];
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v7 completionBlock]);
      uint64_t v13 = (void *)v12;
      if (v12) {
        (*(void (**)(uint64_t, void, id))(v12 + 16))(v12, 0LL, v11);
      }
    }

    if (v10)
    {
      [v7 setSent:1];
      [v7 setSendInterface:v10];
    }

    else
    {
      *a4 = 1;
    }
  }
}

BOOL sub_100085C9C(void *a1)
{
  id v1 = a1;

  return v2;
}

id sub_100085CF4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unsigned int v5 = v4;
  if (v3)
  {
    if (sub_100085C9C(v4))
    {
      uint64_t v18 = objc_opt_class(v3, v6);
    }

    else
    {
      if (!qword_10014E928)
      {
        __int128 v20 = off_10011FDA0;
        uint64_t v21 = 0LL;
        qword_10014E928 = _sl_dlopen(&v20, 0LL);
      }

      if (!qword_10014E928 || !sub_100085F38()) {
        goto LABEL_15;
      }
      id v10 = v5;
      id v11 = (uint64_t (*)(id))sub_100085F38();
      if (!v11) {
        sub_1000BFBC4();
      }
      char v12 = v11(v10);

      if ((v12 & 1) == 0)
      {
LABEL_15:
        uint64_t v8 = objc_claimAutoreleasedReturnValue([v3 description]);
        goto LABEL_16;
      }

      if ((objc_opt_respondsToSelector(v3, "count") & 1) != 0)
      {
        id v7 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"<redacted %@ count:%llu>",  objc_opt_class(v3, v13),  [v3 count]);
        goto LABEL_5;
      }

      char v15 = objc_opt_respondsToSelector(v3, "length");
      uint64_t v17 = objc_opt_class(v3, v16);
      if ((v15 & 1) != 0)
      {
        id v7 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"<redacted %@ length:%llu>",  v17,  [v3 length]);
        goto LABEL_5;
      }

      uint64_t v18 = v17;
    }

    id v7 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"<redacted %@>", v18, v19);
LABEL_5:
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
LABEL_16:
    uint64_t v9 = (void *)v8;
    goto LABEL_17;
  }

  uint64_t v9 = 0LL;
LABEL_17:

  return v9;
}

id sub_100085EC0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  if (dlopen("/System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation", 16))
  {
    id v5 = sub_100085CF4(v4, v3);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  }

  else
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 description]);
  }

  id v7 = (void *)v6;

  return v7;
}

uint64_t sub_100085F38()
{
  uint64_t v3 = 0LL;
  id v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  uint64_t v0 = qword_10014E930;
  uint64_t v6 = qword_10014E930;
  if (!qword_10014E930)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_100085FE4;
    v2[3] = &unk_10011FDC0;
    v2[4] = &v3;
    sub_100085FE4((uint64_t)v2);
    uint64_t v0 = v4[3];
  }

  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_100085FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_100085FE4(uint64_t a1)
{
  id v4 = 0LL;
  if (!qword_10014E928)
  {
    __int128 v5 = off_10011FDA0;
    uint64_t v6 = 0LL;
    qword_10014E928 = _sl_dlopen(&v5, &v4);
  }

  BOOL v2 = (void *)qword_10014E928;
  if (!qword_10014E928) {
    sub_1000BFC38(&v4);
  }
  if (v4) {
    free(v4);
  }
  uint64_t result = dlsym(v2, "IDSShouldUseRestrictedLoggingForService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  qword_10014E930 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_1000860FC(id a1)
{
  if (sub_100077B08())
  {
    id v1 = objc_alloc_init(&OBJC_CLASS___APSDiagnostic);
    BOOL v2 = (void *)qword_10014E938;
    qword_10014E938 = (uint64_t)v1;
  }

void sub_100086244(uint64_t a1)
{
  v11[0] = @"Push Problem Detected";
  v10[0] = kCFUserNotificationAlertHeaderKey;
  v10[1] = kCFUserNotificationAlertMessageKey;
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"A problem has been detected with CloudKit Push Ack"));
  v11[1] = v2;
  v11[2] = @"File a radar";
  v10[2] = kCFUserNotificationDefaultButtonTitleKey;
  v10[3] = kCFUserNotificationAlternateButtonTitleKey;
  void v11[3] = @"Not now";
  uint64_t v3 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  4LL));

  SInt32 error = 0;
  id v4 = CFUserNotificationCreate(0LL, 0.0, 3uLL, &error, v3);
  if (v4)
  {
    __int128 v5 = v4;
    *(void *)responseFlags = 0LL;
    CFUserNotificationReceiveResponse(v4, 86400.0, (CFOptionFlags *)responseFlags);
    if ((responseFlags[0] & 3) == 0)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      [v6 openURL:*(void *)(a1 + 32) configuration:0 completionHandler:0];
    }

    CFRelease(v5);
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", error));
    *(_DWORD *)responseFlags = 138412290;
    *(void *)&responseFlags[4] = v7;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Failed to create notification error %@",  responseFlags,  0xCu);
  }
}

uint64_t sub_100086538(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = objc_alloc_init(&OBJC_CLASS___TASKResponse);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark(a2, v14) || (sub_100047034((uint64_t)v12, a2) & 1) == 0)
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100086918(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___APSMessageStore);
  BOOL v2 = (void *)qword_10014E950;
  qword_10014E950 = (uint64_t)v1;
}

void sub_100086998(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Performing initial database housekeeping",  buf,  2u);
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore -   => Setting cache size",  v2,  2u);
  }

  sub_10009E3F8(3LL);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore -   => Invalidating caches",  v1,  2u);
  }

  sub_10009E3B0();
}

void sub_100086AD0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 0;
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 9LL);
  BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Reopening database",  buf,  2u);
    }

    [*(id *)(a1 + 32) openDatabase];
  }

  else if (v3)
  {
    *(_WORD *)char v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Leaving database closed",  v4,  2u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 0;
}

id sub_100086C78(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + 9) = 0;
    return _objc_msgSend(*((id *)result + 4), "__closeDatabase");
  }

  return result;
}

id sub_100086CEC(id result)
{
  uint64_t v1 = *((void *)result + 4);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
    return [*((id *)result + 4) performBlock:&stru_10011FE40];
  }

  return result;
}

void sub_100086D94(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100086E10;
  block[3] = &unk_10011E4F0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_100086E10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_100086EA0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100086F1C;
  block[3] = &unk_10011E4F0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_100086F1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_100086FAC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100087028;
  block[3] = &unk_10011E4F0;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, block);
}

id sub_100087028(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_1000871B8(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = APSEncodeDictionary(v2);
  char v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    if ([*(id *)(a1 + 32) priority] == (id)1)
    {
      unsigned int v5 = *(void **)(a1 + 40);
      unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) topic]);
      uint64_t v7 = *(void *)(a1 + 48);
      char v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) token]);
      __int128 v22 = v8;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v22, 1LL));
      [v5 _onQueueDeleteLowPriorityIncomingMessagesForTopic:v6 environment:v7 pushTokens:v9];
    }

    uint64_t v21 = *(void *)(a1 + 56);
    id v20 = [*(id *)(a1 + 32) token];
    id v19 = [*(id *)(a1 + 32) topic];
    id v18 = [*(id *)(a1 + 48) name];
    id v17 = [*(id *)(a1 + 32) correlationIdentifier];
    unsigned int v16 = [*(id *)(a1 + 32) wasFromStorage];
    unsigned __int8 v10 = [*(id *)(a1 + 32) wasLastMessageFromStorage];
    id v11 = [*(id *)(a1 + 32) identifier];
    id v12 = [*(id *)(a1 + 32) priority];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timestamp]);
    [v13 timeIntervalSinceReferenceDate];
    char v15 = sub_1000A1768( 0,  v21,  (uint64_t)v20,  (uint64_t)v19,  (uint64_t)v18,  (uint64_t)v17,  (uint64_t)v4,  v16,  v10,  (uint64_t)v11,  (uint64_t)v12,  (uint64_t)v14,  [*(id *)(a1 + 32) isTracingEnabled],  (uint64_t)objc_msgSend(*(id *)(a1 + 32), "tracingUUID"),  (unsigned __int16)objc_msgSend(*(id *)(a1 + 32), "pushType"),  objc_msgSend(*(id *)(a1 + 32), "pushFlags"));

    if (v15) {
      CFRelease(v15);
    }
  }
}

void sub_100087438(uint64_t a1)
{
}

id sub_1000876B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onQueueDeleteLowPriorityIncomingMessagesForTopic:*(void *)(a1 + 40) environment:*(void *)(a1 + 48) pushTokens:*(void *)(a1 + 56)];
}

void sub_100087740(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -2592000.0));
  [v2 timeIntervalSinceReferenceDate];
  uint64_t v4 = (uint64_t)v3;

  sub_1000A1FB4((const __CFString *)[*(id *)(a1 + 32) name], 1, v4);
}

void sub_1000878A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000878BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000878CC(uint64_t a1)
{
}

void sub_1000878D4(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      unint64_t v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = (void *)sub_1000A211C( 1,  (uint64_t)objc_msgSend(*(id *)(a1 + 40), "name", (void)v8),  *(void *)(*((void *)&v8 + 1) + 8 * (void)v6));
        [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObjectsFromArray:v7];

        unint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100087F34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100087F60(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_1000A2280(*(void *)(a1 + 64), *(void *)(a1 + 32), (uint64_t)[*(id *)(a1 + 40) name]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _onQueueIncomingMessagesFromRecords:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2) {
    CFRelease(v2);
  }
}

void sub_100088168(uint64_t a1)
{
  CFMutableArrayRef v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v3 = APSEncodeDictionary(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    uint64_t v16 = *(void *)(a1 + 40);
    id v15 = [*(id *)(a1 + 32) topic];
    id v5 = [*(id *)(a1 + 48) name];
    unsigned int v6 = [*(id *)(a1 + 32) wasSent];
    id v7 = [*(id *)(a1 + 32) messageID];
    id v8 = [*(id *)(a1 + 32) identifier];
    id v9 = [*(id *)(a1 + 32) priority];
    id v10 = [*(id *)(a1 + 32) payloadFormat];
    id v11 = [*(id *)(a1 + 32) timeout];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timestamp]);
    [v12 timeIntervalSinceReferenceDate];
    double v14 = sub_1000A02A4( 0LL,  v16,  0LL,  (uint64_t)v15,  (uint64_t)v5,  (uint64_t)v4,  v6,  (uint64_t)v7,  (uint64_t)v8,  (uint64_t)v9,  (uint64_t)v10,  (uint64_t)v11,  (uint64_t)v13);

    if (v14)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        id v18 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Got message record %p",  buf,  0xCu);
      }

      CFRelease(v14);
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Dropping message - no payload data",  buf,  2u);
  }
}

void sub_100088454(uint64_t a1)
{
}

void sub_100088594(uint64_t a1)
{
  CFMutableArrayRef v2 = (uint64_t *)(a1 + 32);
  uint64_t v3 = sub_1000A0C40(*(const __CFString **)(a1 + 32));
  if (v3)
  {
    uint64_t v4 = v3;
    sub_1000A0E30((uint64_t)v3, *(_BYTE *)(a1 + 40));
    CFRelease(v4);
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT))
  {
    sub_1000BFCB4(v2);
  }

void sub_10008871C(uint64_t a1)
{
  CFMutableArrayRef v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) channelID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) channelTopic]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) environment]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) tokenName]);
  unsigned int v6 = sub_100008B74( 0,  (uint64_t)v2,  (uint64_t)v3,  (uint64_t)v4,  (uint64_t)v5,  (uint64_t)[*(id *)(a1 + 32) checkpoint]);

  if (v6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 134217984;
      id v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Got channel record %p",  (uint8_t *)&v7,  0xCu);
    }

    CFRelease(v6);
  }

void sub_1000889DC(uint64_t *a1)
{
}

void sub_100088D20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100088D40(uint64_t a1)
{
  CFMutableArrayRef v2 = (const void *)sub_10000915C( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _onQueueSubscribedChannelsForRecord:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2) {
    CFRelease(v2);
  }
}

void sub_100088FD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100088FF4(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_1000093AC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _onQueueSubscribedChannelsForRecords:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2) {
    CFRelease(v2);
  }
}

void sub_1000891E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100089208(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_100009538(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _onQueueSubscribedChannelsForRecords:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2) {
    CFRelease(v2);
  }
}

void sub_10008939C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1000893BC(uint64_t a1)
{
  CFMutableArrayRef v2 = sub_1000096B4();
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _onQueueSubscribedChannelsForRecords:v2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (v2) {
    CFRelease(v2);
  }
}

__CFString *sub_1000896D8()
{
  uint64_t v0 = CFUUIDCreate(0LL);
  uint64_t v1 = (__CFString *)CFUUIDCreateString(0LL, v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

LABEL_26:
  if (v6 == 1)
  {
    id v29 = self->_cmaType;
    if (v29)
    {
      __int16 v30 = v29 == 1;
      id v31 = 1LL;
      if (v30) {
        id v31 = 2LL;
      }
      self->_cmaType = v31;
    }
  }

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager pcInterfaceMonitorNonCellular](self, "pcInterfaceMonitorNonCellular"));
  uint64_t v33 = [v32 isInterfaceUsable];

  if ((v33 & 1) == 0) {
    self->_cmaType = 0LL;
  }
  __int16 v34 = self->_consecutiveConnectionFailureCount;
  if (self->_enableCriticalReliability)
  {
    if (v34 < 3)
    {
LABEL_48:
      uint64_t v37 = 1;
      if (!v5) {
        goto LABEL_52;
      }
      goto LABEL_49;
    }
  }

  else if (v34 == 1)
  {
    goto LABEL_48;
  }

  if (!-[APSCourierConnection shouldClientScheduleReconnectDueToFailureOnInterface:]( self->_courierConnection,  "shouldClientScheduleReconnectDueToFailureOnInterface:",  v6)) {
    goto LABEL_48;
  }
  uint64_t v37 = self->_cmaType == 2;
  if (!v5) {
    goto LABEL_52;
  }
LABEL_49:
  __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v73 = self;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%@: forceDelayedReconnect.", buf, 0xCu);
  }

  uint64_t v37 = 0;
LABEL_52:
  delayedReconnectTLSIntervalTrigger = self->_delayedReconnectTLSIntervalTrigger;
  if (self->_consecutiveTLSConnectionFailureCount > delayedReconnectTLSIntervalTrigger
    && delayedReconnectTLSIntervalTrigger > 0
    || (__int16 v40 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager connectionRetryManager](self, "connectionRetryManager")),
        id v41 = [v40 shouldDelayNextReconnect],
        v40,
        v41))
  {
    if (-[APSCourierConnectionManager shouldUseInternet](self, "shouldUseInternet"))
    {
      if (self->_consecutiveTLSConnectionFailureCount <= self->_delayedReconnectTLSIntervalTrigger
        || (delayedReconnectTLSInterval = self->_delayedReconnectTLSInterval, delayedReconnectTLSInterval <= 0.0))
      {
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager connectionRetryManager](self, "connectionRetryManager"));
        [v43 currentDelay];
        delayedReconnectTLSInterval = v44;
      }

      uint64_t v45 = -[PCPersistentTimer initWithTimeInterval:serviceIdentifier:target:selector:userInfo:]( objc_alloc(&OBJC_CLASS___PCPersistentTimer),  "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:",  @"APSCourier",  self,  "_delayedReconnectTimerFired",  0LL,  delayedReconnectTLSInterval);
      delayedReconnectTimer = self->_delayedReconnectTimer;
      self->_delayedReconnectTimer = v45;

      -[PCPersistentTimer setMinimumEarlyFireProportion:]( self->_delayedReconnectTimer,  "setMinimumEarlyFireProportion:",  1.0);
      uint64_t v47 = self->_delayedReconnectTimer;
      id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
      -[PCPersistentTimer scheduleInRunLoop:](v47, "scheduleInRunLoop:", v48);

      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_62;
      }
      uint64_t v50 = self->_consecutiveConnectionFailureCount;
      *(_DWORD *)buf = 138412802;
      uint64_t v73 = self;
      uint64_t v74 = 2048;
      uint64_t v75 = delayedReconnectTLSInterval;
      v76 = 1024;
      LODWORD(v77) = v50;
      uint64_t v51 = "%@: scheduled reconnect in %f seconds {consecutiveFailures: %d}";
      uint64_t v52 = v49;
      xpc_object_t v53 = 28;
      goto LABEL_61;
    }
  }

  if (v37)
  {
    -[APSCourierConnection resumeManagerWithAction:onInterface:]( self->_courierConnection,  "resumeManagerWithAction:onInterface:",  1LL,  v6);
    -[APSCourierConnection stopManagerOnInterface:](self->_courierConnection, "stopManagerOnInterface:", v6);
  }

  else
  {
    id v54 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager delegate](self, "delegate"));
    uint64_t v55 = [v54 courierConnectionManagerClientsHaveEagerMessages];

    if (!v55)
    {
      if (-[APSCourierConnectionManager shouldUseInternet](self, "shouldUseInternet")) {
        -[APSCourierConnection resumeManagerWithAction:onInterface:]( self->_courierConnection,  "resumeManagerWithAction:onInterface:",  5LL,  v28);
      }
      goto LABEL_78;
    }

    -[NSDate timeIntervalSinceNow](self->_lastConnectionAttempt, "timeIntervalSinceNow");
    uint64_t v57 = fabs(v56);
    if (v57 <= 29.0)
    {
      xpc_object_t v60 = 29.0 - v57;
      id v61 = -[PCPersistentTimer initWithTimeInterval:serviceIdentifier:target:selector:userInfo:]( objc_alloc(&OBJC_CLASS___PCPersistentTimer),  "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:",  @"APSCourier",  self,  "_pendingMessageReconnectTimerFired",  0LL,  v60);
      pendingMessageReconnectTimer = self->_pendingMessageReconnectTimer;
      self->_pendingMessageReconnectTimer = v61;

      -[PCPersistentTimer setMinimumEarlyFireProportion:]( self->_pendingMessageReconnectTimer,  "setMinimumEarlyFireProportion:",  1.0);
      id v63 = self->_pendingMessageReconnectTimer;
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
      -[PCPersistentTimer scheduleInRunLoop:](v63, "scheduleInRunLoop:", v64);

      uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_62;
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v73 = self;
      uint64_t v74 = 2048;
      uint64_t v75 = v60;
      uint64_t v51 = "%@ has pending messages but it hasn't been long enough since the last connection attempt. Scheduling retry in %f";
      uint64_t v52 = v49;
      xpc_object_t v53 = 22;
LABEL_61:
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v51, buf, v53);
LABEL_62:

LABEL_78:
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472LL;
      v68[2] = sub_10008ACC4;
      v68[3] = &unk_10011FFA0;
      uint64_t v69 = (id)objc_claimAutoreleasedReturnValue( -[APSCourierConnectionManager protocolConnectionForInterface:]( self,  "protocolConnectionForInterface:",  v6));
      uint64_t v59 = v69;
      [v59 enumerateStateListeners:v68];

      return;
    }

    __int16 v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v73 = self;
      uint64_t v74 = 2048;
      uint64_t v75 = v57;
      v76 = 2048;
      uint64_t v77 = 0x403D000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%@ has eager messages and it's been %f > %f, trying to reconnect now.",  buf,  0x20u);
    }
  }

  if (!-[APSCourierConnectionManager _adjustConnectionWithInterfacePreference:]( self,  "_adjustConnectionWithInterfacePreference:",  v28)) {
    goto LABEL_78;
  }
}

id sub_10008ACB4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disconnectStreamForInterface:*(void *)(a1 + 40) withReason:*(unsigned int *)(a1 + 48)];
}

id sub_10008ACC4(uint64_t a1, void *a2)
{
  return _[a2 failedToConnectOnProtocolConnection:*(void *)(a1 + 32)];
}

id sub_10008B2DC(uint64_t a1, void *a2)
{
  return _[a2 protocolConnection:*(void *)(a1 + 32) didDisconnectWithConnectionState:*(void *)(a1 + 40) reason:*(unsigned int *)(a1 + 48)];
}

LABEL_111:
    uint64_t v16 = (os_log_s *)v13;
    id v17 = 12;
    goto LABEL_12;
  }

  if (v46) {
    uint64_t v49 = 0;
  }
  else {
    uint64_t v49 = v48;
  }
  if (v49 == 1)
  {
    uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v51 = -[APSCourierConnection countConnectedInterfaces](self->_courierConnection, "countConnectedInterfaces");
      uint64_t v52 = @"NO";
      v125 = 2048;
      *(_DWORD *)buf = 138413058;
      if (v45) {
        xpc_object_t v53 = @"YES";
      }
      else {
        xpc_object_t v53 = @"NO";
      }
      v124 = self;
      v126 = v51;
      uint64_t v127 = 2112;
      if (v23) {
        uint64_t v52 = @"YES";
      }
      uint64_t v128 = (unint64_t)v53;
      uint64_t v129 = 2112;
      v130 = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "%@ _connectStream - dual channel with %lu connected interfaces. isWWANUsable %@, isWiFiUsable %@. Not attempting to connect.",  buf,  0x2Au);
    }

    uint64_t result = 0;
    self->_consecutiveConnectionFailureunint64_t Count = 0LL;
    self->_consecutiveTLSConnectionFailureunint64_t Count = 0LL;
    return result;
  }

LABEL_75:
  if (!v46)
  {
    uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v68 = self->_courierConnection;
      *(_DWORD *)buf = 138412546;
      v124 = self;
      v125 = 2112;
      v126 = (unint64_t)v68;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "%@ _connectStream - we want to connect but no closed interfaces are usable, scheduling a reconnect. %@",  buf,  0x16u);
    }

    if (v26 == 3)
    {
      if (!-[APSCourierConnection hasOpenConnectionOnInterface:]( self->_courierConnection,  "hasOpenConnectionOnInterface:",  1LL))
      {
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          xpc_object_t v70 = sub_10003CEE4(1uLL);
          id v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
          *(_DWORD *)buf = 138412546;
          v124 = self;
          v125 = 2112;
          v126 = (unint64_t)v71;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "%@ scheduled on %@", buf, 0x16u);
        }

        -[APSCourierConnection resumeManagerWithAction:onInterface:]( self->_courierConnection,  "resumeManagerWithAction:onInterface:",  5LL,  1LL);
      }

      if (-[APSCourierConnection hasOpenConnectionOnInterface:]( self->_courierConnection,  "hasOpenConnectionOnInterface:",  0LL))
      {
        return 0;
      }

      uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v73 = sub_10003CEE4(0LL);
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        *(_DWORD *)buf = 138412546;
        v124 = self;
        v125 = 2112;
        v126 = (unint64_t)v74;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "%@ scheduled on %@", buf, 0x16u);
      }

      uint64_t v75 = self->_courierConnection;
      v76 = 0LL;
    }

    else
    {
      xpc_object_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        id v79 = sub_10003CEE4(v26);
        uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
        *(_DWORD *)buf = 138412546;
        v124 = self;
        v125 = 2112;
        v126 = (unint64_t)v80;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%@ scheduled on %@", buf, 0x16u);
      }

      uint64_t v75 = self->_courierConnection;
      v76 = v26;
    }

    goto LABEL_172;
  }

  __int16 v58 = v45;
  if (!-[APSNetworkMonitor shouldUseDualMode](self->_networkMonitor, "shouldUseDualMode"))
  {
    if (v26 != 3) {
      -[APSCourierConnectionManager _disconnectStreamForInterface:withReason:]( self,  "_disconnectStreamForInterface:withReason:",  v26,  4LL);
    }
    uint64_t v59 = -[APSCourierConnection connectingInterface](self->_courierConnection, "connectingInterface");
    if (v59 != 3)
    {
      xpc_object_t v60 = v59;
      id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v62 = sub_10003CEE4(v60);
        id v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        *(_DWORD *)buf = 138412546;
        v124 = self;
        v125 = 2112;
        v126 = (unint64_t)v63;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "%@: _connectStream - Disconnecting pending connection on %@ before opening a new one.",  buf,  0x16u);
      }

      -[APSCourierConnectionManager _disconnectStreamForInterface:withReason:]( self,  "_disconnectStreamForInterface:withReason:",  v60,  1020LL);
    }
  }

  if (-[APSNetworkMonitor shouldUseDualMode](self->_networkMonitor, "shouldUseDualMode"))
  {
    if (v58)
    {
      uint64_t v64 = -[APSCourierConnection hasOpenConnectionOnInterface:]( self->_courierConnection,  "hasOpenConnectionOnInterface:",  0LL);
      if (v64) {
        id v65 = 3LL;
      }
      else {
        id v65 = 0LL;
      }
      id v66 = &_s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ_ptr;
      if ((v64 & v23 & 1) == 0)
      {
LABEL_123:
        if (v26 != 3
          && !-[APSCourierConnection hasOpenConnectionOnInterface:]( self->_courierConnection,  "hasOpenConnectionOnInterface:",  v26))
        {
          if (v26 == 1) {
            xpc_object_t v111 = v23;
          }
          else {
            xpc_object_t v111 = 0;
          }
          if ((v111 & 1) != 0)
          {
            id v65 = 1LL;
            goto LABEL_130;
          }

          if (v26) {
            v120 = 0;
          }
          else {
            v120 = v58;
          }
          if ((v120 & 1) != 0)
          {
            id v65 = 0LL;
            goto LABEL_130;
          }
        }

        if (v65 == 3)
        {
          uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
          if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT)) {
            sub_1000BFD34();
          }
          id v65 = 3LL;
LABEL_129:

          goto LABEL_130;
        }

        goto LABEL_130;
      }
    }

    else
    {
      id v66 = &_s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ_ptr;
      if (!v23)
      {
        id v65 = 3LL;
        goto LABEL_123;
      }
    }

    if (-[APSCourierConnection hasOpenConnectionOnInterface:]( self->_courierConnection,  "hasOpenConnectionOnInterface:",  1LL))
    {
      id v65 = 3LL;
    }

    else
    {
      id v65 = 1LL;
    }

    goto LABEL_123;
  }

  if ((v58 ^ 1 | v23) != 1)
  {
    id v65 = 0LL;
LABEL_121:
    id v66 = &_s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ_ptr;
    goto LABEL_130;
  }

  if ((v58 | v38) != 1)
  {
    id v65 = 1LL;
    goto LABEL_121;
  }

  if (((v58 ^ 1 | v38) & 1) != 0)
  {
    uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v77, OS_LOG_TYPE_FAULT)) {
      sub_1000BFD94();
    }
    id v65 = 0LL;
    id v66 = &_s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ_ptr;
    goto LABEL_129;
  }

  id v65 = v26;
  id v66 = &_s10Foundation4DataV36_unconditionallyBridgeFromObjectiveCyACSo6NSDataCSgFZ_ptr;
  if (v26 == 3)
  {
    v118 = -[APSCourierConnection nextConnectionAttemptInterface]( self->_courierConnection,  "nextConnectionAttemptInterface");
    if (!self->_consecutiveConnectionFailureCount || (id v65 = v118, v118 == 3))
    {
      id v65 = -[APSCourierConnectionManager _isWiFiLinkQualityBetter](self, "_isWiFiLinkQualityBetter");
      uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        v119 = @"NO";
        if ((_DWORD)v65) {
          v119 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        v124 = self;
        v125 = 2112;
        v126 = (unint64_t)v119;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "%@: No interface preference specified. Is WiFi lq better? %@",  buf,  0x16u);
      }

      goto LABEL_129;
    }
  }

LABEL_130:
  if (!-[APSNetworkMonitor shouldUseDualMode](self->_networkMonitor, "shouldUseDualMode")
    && !-[APSCourierConnection isConnected](self->_courierConnection, "isConnected"))
  {
    id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v124 = self;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "%@: _connectStream - We have no connections, stopping the connectionManager on all interfaces",  buf,  0xCu);
    }

    -[APSCourierConnection stopManagerOnInterface:](self->_courierConnection, "stopManagerOnInterface:", 3LL);
  }

  uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
  {
    id v83 = sub_10003CEE4(v65);
    __int16 v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
    *(_DWORD *)buf = 138412546;
    v124 = self;
    v125 = 2112;
    v126 = (unint64_t)v84;
    _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "%@ _connectStream - Stopping the connectionManager on our attemptInterface %@",  buf,  0x16u);
  }

  -[APSCourierConnection stopManagerOnInterface:](self->_courierConnection, "stopManagerOnInterface:", v65);
  xpc_object_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    if (v58) {
      id v86 = @"YES";
    }
    else {
      id v86 = @"NO";
    }
    if (v23) {
      uint64_t v87 = @"YES";
    }
    else {
      uint64_t v87 = @"NO";
    }
    __int16 v88 = sub_10003CEE4(v65);
    v89 = (__CFString *)objc_claimAutoreleasedReturnValue(v88);
    *(_DWORD *)buf = 138413058;
    v124 = self;
    v125 = 2112;
    v126 = (unint64_t)v86;
    uint64_t v127 = 2112;
    uint64_t v128 = (unint64_t)v87;
    uint64_t v129 = 2112;
    v130 = v89;
    _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "%@: isWWANUsable %@  isWiFiUsable %@ onInterface %@",  buf,  0x2Au);
  }

  if (v65 == 1)
  {
    cmaType = self->_cmaType;
    if (!cmaType)
    {
      cmaType = 1LL;
      self->_cmaType = 1LL;
    }

    uint64_t v91 = cmaType == 2;
  }

  else
  {
    uint64_t v91 = 0LL;
  }

  if (self->_lastIPCachingPercentage > arc4random_uniform(0x64u))
  {
    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( -[APSCourierConnection usingCachedIPAddressOnInterface:]( self->_courierConnection,  "usingCachedIPAddressOnInterface:",  v65));
    if (v92)
    {
    }

    else
    {
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnection redirectHost](self->_courierConnection, "redirectHost"));

      if (!v93)
      {
        uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v95 = self->_courierConnection;
          uint64_t v96 = sub_10003CEE4(v65);
          v97 = (void *)objc_claimAutoreleasedReturnValue(v96);
          *(_DWORD *)buf = 138412546;
          v124 = (APSCourierConnectionManager *)v95;
          v125 = 2112;
          v126 = (unint64_t)v97;
          _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "%@ device selected to connect using cached ip if possible on %@",  buf,  0x16u);
        }

        -[APSCourierConnectionManager _useCachedLastIPIfPossible:](self, "_useCachedLastIPIfPossible:", v65);
      }
    }
  }

  if (!-[APSCourierConnection shouldConnectOnInterface:](self->_courierConnection, "shouldConnectOnInterface:", v65))
  {
    v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      v109 = sub_10003CEE4(v65);
      v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
      *(_DWORD *)buf = 138412546;
      v124 = self;
      v125 = 2112;
      v126 = (unint64_t)v110;
      _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "%@ device should not connect on interface %@",  buf,  0x16u);
    }

    uint64_t v75 = self->_courierConnection;
    v76 = v65;
LABEL_172:
    -[APSCourierConnection resumeManagerWithAction:onInterface:](v75, "resumeManagerWithAction:onInterface:", 5LL, v76);
    return 0;
  }

  if (v65) {
    xpc_object_t v98 = 0;
  }
  else {
    xpc_object_t v98 = v25 == (id)1;
  }
  v99 = v98;
  -[APSCourierConnection connectToEnvironment:onInterface:allowedInterfaceConstraint:useAlternatePort:keepAliveProxyMode:]( self->_courierConnection,  "connectToEnvironment:onInterface:allowedInterfaceConstraint:useAlternatePort:keepAliveProxyMode:",  self->_environment,  v65,  v99,  v91,  0LL);
  __int16 v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v101 = sub_10003CEE4(v65);
    uint64_t v102 = (APSCourierConnectionManager *)objc_claimAutoreleasedReturnValue(v101);
    uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(-[APSEnvironment name](self->_environment, "name"));
    *(_DWORD *)buf = 138412546;
    v124 = v102;
    v125 = 2112;
    v126 = (unint64_t)v103;
    _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "Opening stream onInterface: %@, %@",  buf,  0x16u);
  }

  uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue(-[APSEnvironment configurationURL](self->_environment, "configurationURL"));
    environment = self->_environment;
    if (v91) {
      v107 = -[APSEnvironment alternatePort](environment, "alternatePort");
    }
    else {
      v107 = -[APSEnvironment port](environment, "port");
    }
    *(_DWORD *)buf = 138412802;
    v124 = self;
    v125 = 2112;
    v126 = (unint64_t)v105;
    uint64_t v127 = 2048;
    uint64_t v128 = v107;
    _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "%@: Connecting courier stream using configuration bag at %@ and port TCP %lu",  buf,  0x20u);
  }

  v112 = self->_courierConnection;
  v113 = (void *)objc_claimAutoreleasedReturnValue([v66[290] date]);
  -[APSCourierConnection setObject:forKey:onInterface:]( v112,  "setObject:forKey:onInterface:",  v113,  @"startedOpeningStream",  v65);

  -[APSCourierConnectionManager _startConnectionEstablishTimerOnInterface:]( self,  "_startConnectionEstablishTimerOnInterface:",  v65);
  id v114 = (void *)objc_claimAutoreleasedReturnValue(-[APSCourierConnectionManager connectionRetryManager](self, "connectionRetryManager"));
  [v114 noteConnectionAttemptStart];

  if (v65) {
    id v115 = @"wifi";
  }
  else {
    id v115 = @"wwan";
  }
  id v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[APSCourierConnectionManager _linkQualityForInterface:]( self,  "_linkQualityForInterface:",  v65,  @"Interface",  @"LinkQuality",  v115)));
  v122[1] = v116;
  uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v122,  &v121,  2LL));

  APSPowerLog(@"Opened Connection Stream", v117);
  return 1;
}

void sub_10008CCB0(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer(@"DeviceClass", 0LL);
  if (v1)
  {
    CFMutableArrayRef v2 = v1;
    if (CFEqual(v1, @"AudioAccessory")) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFEqual(v2, @"AppleTV") != 0;
    }
    byte_10014E958 = v3;
    CFRelease(v2);
  }

void sub_10008D154(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 192) keepAliveV2SupportedOnInterface:0];
  unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 200) BOOLValueFromPushBundleForKey:APSForceKeepAliveV1Key error:0];
  if (v2 == v3)
  {
    unsigned int v4 = v3;
    [*(id *)(*(void *)(a1 + 32) + 192) setKeepAliveV2Supported:v3 ^ 1 onInterface:0];
    id v5 = [*(id *)(a1 + 32) copyOperatorName];
    unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = @"in";
      if (v4) {
        int v7 = @"out of";
      }
      int v8 = 138412546;
      id v9 = v5;
      __int16 v10 = 2112;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@ opts %@ Keep Alive 2.0",  (uint8_t *)&v8,  0x16u);
    }

    [*(id *)(a1 + 32) _performKeepAliveOnInterface:0 shortInterval:0 withAction:2];
  }

LABEL_79:
LABEL_80:
      return;
    default:
      goto LABEL_80;
  }

id sub_10008E334(uint64_t a1, void *a2)
{
  return _[a2 outgoingDataAboutToSendForProtocolConnection:*(void *)(a1 + 32)];
}

void sub_100091060(_Unwind_Exception *a1)
{
}

id sub_100091100(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedOfflinePresencekWithParameters:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return result;
}

void sub_100091138(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if ([v5 shouldHandleIncomingPush:*(void *)(a1 + 32) forProtocolConnection:*(void *)(a1 + 40)])
  {
    [v5 protocolConnection:*(void *)(a1 + 40) receivedMessageWithParameters:*(void *)(a1 + 32) generation:*(void *)(a1 + 56) isWaking:*(unsigned __int8 *)(a1 + 64)];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

id sub_1000911A0(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedTaskControlWithParameters:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return result;
}

id sub_1000911D8(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedTaskNotificationWithParameters:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return result;
}

void sub_100091210(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if ([v5 shouldHandleIncomingPush:a1[4] forProtocolConnection:a1[5]])
  {
    [v5 protocolConnection:a1[5] receivedPubSubChannelListWithParameters:a1[4]];
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

void sub_100091270(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  if ([v5 shouldHandleIncomingPush:a1[4] forProtocolConnection:a1[5]])
  {
    [v5 protocolConnection:a1[5] receivedPubSubChannelUpdateWithParameters:a1[4]];
    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
    *a3 = 1;
  }
}

id sub_1000912D0(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedPresenceTrackingRequestWithParameters:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return result;
}

id sub_100091308(void *a1, void *a2)
{
  id result = [a2 protocolConnection:a1[4] receivedFilterUpdateWithParameters:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return result;
}

id sub_100091BEC(uint64_t a1, void *a2)
{
  return _[a2 didSuspendProtocolConnection:*(void *)(a1 + 32)];
}

id sub_1000920D4(uint64_t a1, void *a2)
{
  return _[a2 didRecoverFromSuspensionOnProtocolConnection:*(void *)(a1 + 32)];
}

void sub_100092E08(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog courier](&OBJC_CLASS___APSLog, "courier"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Core Telephony acknowledged keep alive event with error %@",  (uint8_t *)&v6,  0x16u);
  }
}

id sub_100093FD0(uint64_t a1, void *a2)
{
  return _[a2 efficientToUseChangedForProtocolConnection:*(void *)(a1 + 32)];
}

void sub_100094F30(_Unwind_Exception *a1)
{
}

id sub_100095100(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) courierConnection]);
  [v2 sendTokenGenerateMessageWithTopicHash:*(void *)(a1 + 40) baseToken:*(void *)(a1 + 48) appId:*(unsigned __int16 *)(a1 + 84) expirationTTL:*(unsigned int *)(a1 + 80) vapidPublicKeyHash:*(void *)(a1 + 56) type:*(void *)(a1 + 64) onInterface:*(void *)(a1 + 72)];

  return sub_10003CEE4(*(void *)(a1 + 72));
}

id sub_1000954D4(uint64_t a1)
{
  return sub_10003CEE4(*(void *)(a1 + 32));
}

uint64_t sub_1000954DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100095740(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) courierConnection]);
  [v2 sendFilterMessageWithEnabledHashes:*(void *)(a1 + 40) ignoredHashes:*(void *)(a1 + 48) opportunisticHashes:*(void *)(a1 + 56) nonWakingHashes:*(void *)(a1 + 64) pausedHashes:*(void *)(a1 + 72) token:*(void *)(a1 + 80) version:*(void *)(a1 + 88) onInterface:*(void *)(a1 + 96)];

  return sub_10003CEE4(*(void *)(a1 + 96));
}

id sub_10009591C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) courierConnection]);
  LOBYTE(v4) = *(_BYTE *)(a1 + 108);
  [v2 sendConnectMessageWithToken:*(void *)(a1 + 40) state:*(unsigned int *)(a1 + 96) presenceFlags:*(unsigned int *)(a1 + 100) interface:*(void *)(a1 + 80) activeInterval:*(unsigned int *)(a1 + 104) metadata:*(void *)(a1 + 48) certificates:*(void *)(a1 + 56) nonce:*(void *)(a1 + 64) signature:*(void *)(a1 + 72) redir ectCount:v4 onInterface:*(void *)(a1 + 88)];

  return sub_10003CEE4(*(void *)(a1 + 88));
}

id sub_100095B70(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) courierConnection]);
  LOBYTE(v4) = *(_BYTE *)(a1 + 144);
  [v2 sendConnectMessageWithToken:*(void *)(a1 + 40) interface:*(void *)(a1 + 96) activeInterval:*(unsigned int *)(a1 + 136) presenceFlags:*(unsigned int *)(a1 + 140) metadata:*(void *)(a1 + 48) certificates:*(void *)(a1 + 56) nonce:*(double *)(a1 + 104) signature:*(double *)(a1 + 112) hostCertifi cateInfo:*(double *)(a1 + 120) redirectCount:*(void *)(a1 + 64) tcpHandshakeTimeMilliseconds:*(void *)(a1 + 72) dnsResolveTimeMilliseconds:*(void *)(a1 + 80) tlsHandshakeTimeMilliseconds:v4 consecut iveConnectionFailureReason:*(void *)(a1 + 88) onInterface:*(void *)(a1 + 128)];

  return sub_10003CEE4(*(void *)(a1 + 128));
}

id sub_100095D80(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) courierConnection]);
  LOBYTE(v4) = *(_BYTE *)(a1 + 104);
  [v2 sendConnectMessageWithToken:*(void *)(a1 + 40) state:*(unsigned int *)(a1 + 96) presenceFlags:*(unsigned int *)(a1 + 100) metadata:*(void *)(a1 + 48) certificates:*(void *)(a1 + 56) nonce:*(void *)(a1 + 64) signature:*(void *)(a1 + 72) hostCertificateInfo:*(void *)(a1 + 80) redirectCo unt:v4 onInterface:*(void *)(a1 + 88)];

  return sub_10003CEE4(*(void *)(a1 + 88));
}

void sub_100099C94( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100099CA4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10009A5A4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 environment]);
  id v22 = (id)objc_claimAutoreleasedReturnValue( +[APSConfiguration configurationForEnvironment:connectionType:]( APSConfiguration,  "configurationForEnvironment:connectionType:",  v5,  [v4 connectionType]));

  int v6 = (void *)objc_claimAutoreleasedReturnValue([v22 pubSubRetryAttemptsCount]);
  id v7 = [v6 unsignedIntegerValue];
  if (v7) {
    uint64_t v8 = (uint64_t)v7;
  }
  else {
    uint64_t v8 = 3LL;
  }

  id v9 = objc_alloc(&OBJC_CLASS___APSPubSubRequest);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getNextMessageID]);
  double v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) firstObject]);
  double v14 = (void *)objc_claimAutoreleasedReturnValue([v13 tokenName]);
  id v15 = -[APSPubSubRequest initWithSubscriptionChannels:unsubscriptionChannels:messageID:userName:token:subscriptionType:connectionType:retryCount:]( v9,  "initWithSubscriptionChannels:unsubscriptionChannels:messageID:userName:token:subscriptionType:connectionType:retryCount:",  v11,  v10,  v12,  v14,  *(void *)(a1 + 56),  0,  [v4 connectionType],  v8);

  id v16 = [v4 connectionType];
  if (v16 == (id)2) {
    -[APSPubSubRequest setRetryCount:](v15, "setRetryCount:", 0LL);
  }
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionRequests]);

  if (!v17)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    [*(id *)(a1 + 32) setSubscriptionRequests:v21];

    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  if (v15)
  {
LABEL_8:
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionRequests]);
    [v18 addObject:v15];
  }

void sub_10009AB24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
}

void sub_10009AB60(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 5);
  id v3 = objc_loadWeakRetained(a1 + 6);
  if (v3 && WeakRetained)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] messageID]);
    id v5 = [v4 unsignedIntValue];

    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = a1[4];
      int v10 = 138412546;
      id v11 = v7;
      __int16 v12 = 2048;
      id v13 = [v7 retryCount];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Retrying pubsub request %@ Retries left: %lu",  (uint8_t *)&v10,  0x16u);
    }

    id v8 = a1[4];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 token]);
    objc_msgSend( v3,  "_writePubSubMessagetoConnection:messageID:token:connectionType:",  v8,  v5,  v9,  objc_msgSend(a1[4], "connectionType"));

    [v3 _retryRequestAfterDelay:WeakRetained];
  }
}

void sub_10009B088(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  if ([v3 subscriptionType] != 1)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionChannels]);
    if (v6
      && (id v7 = (void *)v6,
          id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) unsubscriptionChannels]),
          v8,
          v7,
          !v8))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionChannels]);
      uint64_t v5 = 1LL;
    }

    else
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) unsubscriptionChannels]);
      if (!v9
        || (int v10 = (void *)v9,
            uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionChannels]),
            (id)v5,
            v10,
            v5))
      {
        id v18 = 0LL;
        uint64_t v5 = 1LL;
        goto LABEL_11;
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) unsubscriptionChannels]);
    }

    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
    id v18 = (id)objc_claimAutoreleasedReturnValue([v12 channelTopic]);

    goto LABEL_11;
  }

  id v18 = 0LL;
  uint64_t v5 = 2LL;
LABEL_11:
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  [v13 setObject:v18 forKeyedSubscript:@"Topic"];
  double v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) environment]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v14 environmentType]));
  [v13 setObject:v15 forKeyedSubscript:@"Environment"];

  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v5));
  [v13 setObject:v16 forKeyedSubscript:@"MessageType"];

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 64)));
  [v13 setObject:v17 forKeyedSubscript:@"ConnectionType"];

  APSPubSubPowerLog(v13);
  [v4 sendPubSubChannelListWithMetadata:*(void *)(a1 + 48) baseToken:*(void *)(a1 + 56) messageID:*(unsigned int *)(a1 + 72)];
}

LABEL_70:
      if (v41 == (id)++v43)
      {
        id v41 = [v73 countByEnumeratingWithState:&v77 objects:v99 count:16];
        if (!v41) {
          goto LABEL_72;
        }
        goto LABEL_60;
      }
    }

    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v44 channelId]);
    __int16 v56 = objc_claimAutoreleasedReturnValue([v55 base64EncodedStringWithOptions:0]);

    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([&v34[5] sharedInstance]);
    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[APSUserCourier environment](self, "environment"));
    __int16 v58 = (void *)objc_claimAutoreleasedReturnValue([v57 name]);
    v76 = (void *)v56;
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( [v50 lookupChannelWithChannelID:v56 andPushTopic:v37 environment:v58 userName:v74]);

    __int16 v34 = &OBJC_CLASS___APSOutgoingQueue;
    objc_msgSend(v52, "setCheckpoint:", objc_msgSend(v44, "channelSubscriptionCheckpoint"));
    [v50 updateChannel:v52];
LABEL_69:

    goto LABEL_70;
  }

  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_1000C01B0();
  }
LABEL_79:
}

void sub_10009BE90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10009BEA8(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _getCurrentTokens]);
  id v7 = v6;
  if (*(void *)(a1 + 40))
  {
    if ((objc_msgSend(v6, "containsObject:") & 1) == 0)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _findConnectedClientWithToken:*(void *)(a1 + 40) onProtocolConnection:v5]);
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog pubSub](&OBJC_CLASS___APSLog, "pubSub"));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 32);
          uint64_t v12 = *(void *)(a1 + 40);
          int v13 = 138413058;
          uint64_t v14 = v11;
          __int16 v15 = 2112;
          id v16 = v9;
          __int16 v17 = 2112;
          uint64_t v18 = v12;
          __int16 v19 = 2112;
          id v20 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@ incoming pubsub response is for a proxy client %@ baseToken %@ publicTokens %@",  (uint8_t *)&v13,  0x2Au);
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
        *a3 = 1;
      }
    }
  }
}

id sub_10009D56C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 subscriptionRequests]);

  if (!v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    [*(id *)(a1 + 32) setSubscriptionRequests:v6];
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subscriptionRequests]);
  [v7 addObject:*(void *)(a1 + 40)];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) messageID]);
  id v9 = [v8 unsignedIntValue];

  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 40);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 token]);
  id v13 = [v4 connectionType];

  [v10 _writePubSubMessagetoConnection:v11 messageID:v9 token:v12 connectionType:v13];
  return [*(id *)(a1 + 32) _retryRequestAfterDelay:*(void *)(a1 + 40)];
}

id sub_10009D754()
{
  if (qword_10014E970 != -1) {
    dispatch_once(&qword_10014E970, &stru_100120230);
  }
  return (id)qword_10014E968;
}

void sub_10009D794(id a1)
{
  uint64_t v1 = CSDBCreateThreadedRecordStore(@"APSMessageStore");
  unsigned int v2 = (void *)qword_10014E968;
  qword_10014E968 = v1;
}

void sub_10009D7BC(int a1)
{
  id v2 = sub_10009D754();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  CSDBThreadedRecordStoreOwnsCurrentThread(v3, 1LL);

  id v4 = sub_10009D754();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
    char v7 = [v6 isMultiUser] ^ 1;

    uint64_t v8 = objc_autoreleasePoolPush();
    id v9 = sub_10009D754();
    int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    CSDBThreadedRecordStoreEnsureDatabaseSetup( v10,  a1 != 0,  &stru_1001202D0,  sub_10009E548,  sub_10009E598,  sub_10009E6D0,  sub_10009E7F0,  15002LL,  &stru_100120310,  v7);

    objc_autoreleasePoolPop(v8);
  }

void sub_10009D8AC()
{
  id v0 = sub_10009D754();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);

  if (v1) {
    sub_10009D7BC(1);
  }
}

void sub_10009D8E8(void *a1, uint64_t a2)
{
  id v7 = a1;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformBlock(v6, v7, a2);
  }
}

void sub_10009D948(void *a1, double a2)
{
  id v7 = a1;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformBlockAfterDelay(v6, v7, a2);
  }
}

void sub_10009D9B0(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformLocked(v4, v5);
  }
}

void sub_10009DA0C(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformUnlocked(v4, v5);
  }
}

void sub_10009DA68(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    sub_10009D8AC();
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformLockedSectionUsingUnfairLock(v6, a1, v7);
  }
}

void sub_10009DACC(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformLockedSectionForRecordStoreWithoutInitialize(v4, v5);
  }
}

void sub_10009DB24(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformLockedSectionForRecordStore(v4, v5);
  }
}

void sub_10009DB80(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformUnlockedSectionForRecordStore(v4, v5);
  }
}

void sub_10009DBDC(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformLockedSectionForDatabase(v4, v5);
  }
}

void sub_10009DC38(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformUnlockedSectionForDatabase(v4, v5);
  }
}

void sub_10009DC94(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    sub_10009D8AC();
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformLockedSectionForQueryForReading(v6, a1, v7);
  }
}

void sub_10009DCF8(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    sub_10009D8AC();
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformLockedSectionForQueryForWriting(v6, a1, v7);
  }
}

void sub_10009DD5C(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformLockedSectionForConnectionForReading(v4, v5);
  }
}

void sub_10009DDB8(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformLockedSectionForConnectionForWriting(v4, v5);
  }
}

void sub_10009DE14(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformUnlockedSectionForConnectionForReading(v4, v5);
  }
}

void sub_10009DE70(void *a1)
{
  id v5 = a1;
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    sub_10009D8AC();
    id v3 = sub_10009D754();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    CSDBPerformUnlockedSectionForConnectionForWriting(v4, v5);
  }
}

void sub_10009DECC(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    sub_10009D8AC();
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformUnlockedSectionForQueryForReading(v6, a1, v7);
  }
}

void sub_10009DF30(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = sub_10009D754();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    sub_10009D8AC();
    id v5 = sub_10009D754();
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CSDBPerformUnlockedSectionForQueryForWriting(v6, a1, v7);
  }
}

void sub_10009DF94()
{
  id v0 = sub_10009D754();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);

  if (v1) {
    sub_10009DB24(&stru_100120270);
  }
}

void sub_10009DFD4(id a1, CSDBRecordStore *a2)
{
}

void sub_10009DFFC()
{
  id v0 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Saving database.", buf, 2u);
  }

  sub_10009DF94();
  id v1 = sub_10009D754();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (v2)
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Destroying database.",  v8,  2u);
    }

    id v4 = sub_10009D754();
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    CSDBThreadedRecordStoreTeardownDatabase();

    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "APSMessageStore - Closed database.", v7, 2u);
    }
  }

uint64_t sub_10009E124()
{
  id v0 = sub_10009D754();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);

  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = sub_10009E1BC();
  if (!v2) {
    return 0LL;
  }
  id v3 = (const void *)v2;
  id v4 = (const char *)CSDBCreateUTF8StringFromCFString();
  if (v4)
  {
    id v5 = (char *)v4;
    if (stat(v4, &v8)) {
      uint64_t SchemaVersionAtPath = 0LL;
    }
    else {
      uint64_t SchemaVersionAtPath = CSDBSqliteUtilitiesGetSchemaVersionAtPath(v3);
    }
    free(v5);
  }

  else
  {
    uint64_t SchemaVersionAtPath = 0LL;
  }

  CFRelease(v3);
  return SchemaVersionAtPath;
}

uint64_t sub_10009E1BC()
{
  id v0 = objc_autoreleasePoolPush();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserMode sharedInstance](&OBJC_CLASS___APSMultiUserMode, "sharedInstance"));
  unsigned int v2 = [v1 isMultiUser];

  if (!v2)
  {
    id v20 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  CSDBGetMobileUserDirectory());
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v20);
    if (v4) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v17 = 0LL;
    goto LABEL_10;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[APSMultiUserFS sharedInstance](&OBJC_CLASS___APSMultiUserFS, "sharedInstance"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 systemPath]);

  if (!v4) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v5 = v2 ^ 1;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v4,  @"/Library/ApplePushService/",  @"aps.db",  0LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v6));

  id v8 = v7;
  id v9 = [v8 fileSystemRepresentation];
  uint64_t v10 = CSDBGetMobileUserUID();
  uint64_t v11 = CSDBGetMobileUserGID();
  CSDBCreateDirectoriesToPathWithOwnership(v9, v10, v11, v5);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByExpandingTildeInPath]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByStandardizingPath]);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 stringByResolvingSymlinksInPath]);
  id v15 = v14;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](&OBJC_CLASS___NSURL, "fileURLWithPath:isDirectory:", v15, 0LL));
  uint64_t v17 = (uint64_t)v15;
  if (v16)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL URLByResolvingAliasFileAtURL:options:error:]( &OBJC_CLASS___NSURL,  "URLByResolvingAliasFileAtURL:options:error:",  v16,  0LL,  0LL));
    __int16 v19 = v18;
    uint64_t v17 = (uint64_t)v15;
    if (v18)
    {
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v18 path]);
    }
  }

LABEL_10:
  objc_autoreleasePoolPop(v0);
  return v17;
}

void sub_10009E3B0()
{
  id v0 = sub_10009D754();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);

  if (v1) {
    sub_10009DACC(&stru_100120290);
  }
}

void sub_10009E3F0(id a1, CSDBRecordStore *a2)
{
}

void sub_10009E3F8(uint64_t a1)
{
  id v2 = sub_10009D754();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (v3) {
    CSDBSqliteSetDefaultPageCacheSize(a1);
  }
}

__CFString *__cdecl sub_10009E438(id a1)
{
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread currentThread](&OBJC_CLASS___NSThread, "currentThread"));
    int v4 = 138412290;
    uint64_t v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Initializing database on thread: %@",  (uint8_t *)&v4,  0xCu);
  }

  return (__CFString *)sub_10009E1BC();
}

void sub_10009E4F8(id a1, CSDBThreadedRecordStore *a2)
{
  id v2 = a2;
  ((void (*)(void))CSDBThreadedRecordStoreRegisterClass)();
  CSDBThreadedRecordStoreRegisterClass(v2, &off_1001203D0);
  CSDBThreadedRecordStoreRegisterClass(v2, &off_100120470);
}

uint64_t sub_10009E548(uint64_t a1, uint64_t a2)
{
  return CSDBRecordStoreCreateTablesForClass(&off_100120470, a2, 0LL);
}

uint64_t sub_10009E598(uint64_t a1, uint64_t a2)
{
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Enabling auto vacuum.",  buf,  2u);
  }

  CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA auto_vacuum = 2;");
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Enabling WAL journal mode.",  v8,  2u);
  }

  CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA journal_mode = wal;");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Enabling Foreign Key support.",  v7,  2u);
  }

  return CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA foreign_keys = ON;");
}

BOOL sub_10009E6D0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    __int16 v8 = 1024;
    int v9 = 15002;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - The current APS database is v%d.  The current schema version is v%d",  (uint8_t *)v7,  0xEu);
  }

  if (a3 <= 0x3A99)
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - This DB can be migrated.",  (uint8_t *)v7,  2u);
    }
  }

  return a3 < 0x3A9A;
}

uint64_t sub_10009E7F0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v50 = 67109376;
    *(_DWORD *)&v50[4] = a3;
    *(_WORD *)&v50[8] = 1024;
    *(_DWORD *)&v50[10] = 15002;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Beginning migration.  The APS db is currently at v%d, upgrading to v%d.",  v50,  0xEu);
  }

  CSDBSqliteConnectionCommit(a2);
  if ((CSDBSqliteDatabaseCheckIntegrity(a2) & 1) != 0)
  {
    __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t v50 = 0;
    int v9 = "APSMessageStore - Initial integrity check success";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v50, 2u);
    goto LABEL_27;
  }

  int v10 = CSDBSqliteConnectionPerformSQL(a2, @"REINDEX");
  if (v10 != 101 && (int v11 = v10) != 0)
  {
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1000C0414(v11, v12);
    }
  }

  else
  {
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Reindexing the DB worked.",  v50,  2u);
    }
  }

  if ((CSDBSqliteDatabaseCheckIntegrity(a2) & 1) != 0)
  {
    __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t v50 = 0;
    int v9 = "APSMessageStore - Post-reindex integrity check success";
    goto LABEL_24;
  }

  int v13 = CSDBSqliteDatabaseVacuum(a2);
  if (v13 != 101 && v13)
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1000C03E8();
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Database vacuum success",  v50,  2u);
    }
  }

  char v15 = CSDBSqliteDatabaseCheckIntegrity(a2);
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  __int16 v8 = v16;
  if ((v15 & 1) != 0)
  {
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    *(_WORD *)uint64_t v50 = 0;
    int v9 = "APSMessageStore - Final integrity check success";
    goto LABEL_24;
  }

  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_1000C03BC();
  }
LABEL_27:

  CSDBSqliteConnectionBegin(a2);
  if (a3 > 0x3A9A)
  {
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1000C0390();
    }

    uint64_t v19 = 2LL;
    goto LABEL_36;
  }

  CSDBSqliteConnectionBeginTransactionType(a2, 2LL);
  if (a3 == 7000)
  {
    CSDBSqliteDatabaseSetVersion(a1, 7000LL);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Deleting high/normal priority messages we no longer own.",  v50,  2u);
    }

    if (!sub_10009F478( a2,  @"Unable delete normal/high priority outgoing messages.",  @"Successfully deleted messages we shouldn't resend.",  @"DELETE FROM outgoing_message where priority != 1;")) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 7001LL);
  }

  else if (a3 >> 1 != 3500)
  {
    unsigned int v25 = a3 - 7000;
    if (a3 - 7000 > 2) {
      goto LABEL_49;
    }
    goto LABEL_45;
  }

  CSDBSqliteDatabaseSetVersion(a1, 7001LL);
  __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Adding priority to incoming messages.",  v50,  2u);
  }

  int v24 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
  CSDBRecordStoreCreateTablesForClass(&off_1001203D0, a2, 0LL);
  if (!v24) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion(a1, 7002LL);
  unsigned int v25 = a3 - 7000;
LABEL_45:
  CSDBSqliteDatabaseSetVersion(a1, 7002LL);
  id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Adding identifier to outgoing messages.",  v50,  2u);
  }

  int v27 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
  CSDBRecordStoreCreateTablesForClass(&off_100120330, a2, 0LL);
  if (!v27) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion(a1, 7003LL);
LABEL_49:
  if (a3 >> 2 == 1750)
  {
    CSDBSqliteDatabaseSetVersion(a1, 7003LL);
    __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Flushing deprecated storage of outgoing messages.",  v50,  2u);
    }

    int v29 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass(&off_100120330, a2, 0LL);
    if (!v29) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 7004LL);
  }

  if (v25 <= 4)
  {
    CSDBSqliteDatabaseSetVersion(a1, 7004LL);
    __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Unifying iOS and OS X schemas.",  v50,  2u);
    }

    int v31 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass(&off_1001203D0, a2, 0LL);
    int v32 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass(&off_100120330, a2, 0LL);
    if (!v31 || !v32) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 10000LL);
    goto LABEL_61;
  }

  if (v25 <= 0x3E8)
  {
LABEL_61:
    CSDBSqliteDatabaseSetVersion(a1, 8000LL);
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - adding correlation identifier.",  v50,  2u);
    }

    int v34 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass(&off_1001203D0, a2, 0LL);
    if (!v34) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 10000LL);
    goto LABEL_66;
  }

  if (v25 <= 0xBB9)
  {
LABEL_66:
    CSDBSqliteDatabaseSetVersion(a1, 10001LL);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - adding tracing enabled and tracing uuid.",  v50,  2u);
    }

    int v36 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass(&off_1001203D0, a2, 0LL);
    if (!v36) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 10002LL);
    goto LABEL_71;
  }

  if (v25 == 3002)
  {
LABEL_71:
    CSDBSqliteDatabaseSetVersion(a1, 10002LL);
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - adding push type.",  v50,  2u);
    }

    int v38 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
    CSDBRecordStoreCreateTablesForClass(&off_1001203D0, a2, 0LL);
    if (!v38) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 10003LL);
    goto LABEL_76;
  }

  if (v25 > 0xBBB)
  {
    if (v25 != 3004) {
      goto LABEL_85;
    }
    goto LABEL_80;
  }

LABEL_76:
  CSDBSqliteDatabaseSetVersion(a1, 10003LL);
  id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "APSMessageStore - adding push flags.", v50, 2u);
  }

  int v40 = sub_10009F478( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
  CSDBRecordStoreCreateTablesForClass(&off_1001203D0, a2, 0LL);
  if (!v40) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion(a1, 10004LL);
LABEL_80:
  CSDBSqliteDatabaseSetVersion(a1, 10004LL);
  id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - adding channel table.",  v50,  2u);
  }

  CSDBRecordStoreCreateTablesForClass(&off_100120470, a2, 0LL);
  if (!sub_10009F478( a2,  @"Unable to create index on push topic",  @"Successfully created index on push topic",  @"CREATE INDEX push_topic_idx ON channel(channel_topic)")) {
    goto LABEL_99;
  }
  CSDBSqliteDatabaseSetVersion(a1, 10005LL);
LABEL_85:
  if ((a3 - 10005) >> 2 <= 0x4E0)
  {
    CSDBSqliteDatabaseSetVersion(a1, 15000LL);
    __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - removing channel name column",  v50,  2u);
    }

    int v43 = sub_10009F478( a2,  @"Unable to drop legacy channels table",  @"Removed legacy channel table",  @"DROP TABLE channel");
    CSDBRecordStoreCreateTablesForClass(&off_100120470, a2, 0LL);
    if (!v43) {
      goto LABEL_99;
    }
    CSDBSqliteDatabaseSetVersion(a1, 15001LL);
  }

  if (a3 >> 3 >= 0x753)
  {
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Adding Token Namne and Environment columns",  v50,  2u);
    }

    int v45 = sub_10009F478( a2,  @"Unable to drop legacy channels table",  @"Removed legacy channel table",  @"DROP TABLE channel");
    CSDBRecordStoreCreateTablesForClass(&off_100120470, a2, 0LL);
    int v46 = sub_10009F478( a2,  @"Unable to create index on environmnet",  @"Successfully created index on environment",  @"CREATE INDEX environment_idx ON channel(environment)");
    int v47 = sub_10009F478( a2,  @"Unable to create index on token name",  @"Successfully created index on token name",  @"CREATE INDEX token_name_idx ON channel(token_name)");
    int v48 = sub_10009F478( a2,  @"Unable to create index on channel topic",  @"Successfully created index on channel topic",  @"CREATE INDEX channel_topic_idx ON channel(channel_topic)");
    if (v45 && v46 && v47 && v48)
    {
      CSDBSqliteDatabaseSetVersion(a1, 15002LL);
      goto LABEL_98;
    }

LABEL_99:
    CSDBSqliteConnectionCommit(a2);
    uint64_t v19 = 2LL;
    goto LABEL_100;
  }

LABEL_98:
  CSDBSqliteConnectionCommit(a2);
  CSDBSqliteConnectionPerformSQL(a2, @"vacuum");
  uint64_t v19 = 0LL;
LABEL_36:
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database", *(void *)v50));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v21 timeIntervalSinceDate:v6];
    *(_DWORD *)uint64_t v50 = 134217984;
    *(void *)&v50[4] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APS DB migration took %f seconds.",  v50,  0xCu);
  }

LABEL_100:
  return v19;
}

uint64_t sub_10009F478(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v9 length])
  {
    int v10 = CSDBSqliteConnectionPerformSQL(a1, v9);
    if (v10) {
      BOOL v11 = v10 == 101;
    }
    else {
      BOOL v11 = 1;
    }
    uint64_t v12 = v11;
    if (v10 && (int v13 = v10, v10 != 101))
    {
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = 138412802;
        id v17 = v7;
        __int16 v18 = 1024;
        int v19 = v13;
        __int16 v20 = 2080;
        uint64_t v21 = CSDBSqliteErrMsg(a1);
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "APSMessageStore - %@ SQLiteResult: %d SQLite Message: %s",  (uint8_t *)&v16,  0x1Cu);
      }
    }

    else
    {
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 138412290;
        id v17 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - %@",  (uint8_t *)&v16,  0xCu);
      }
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[APSLog database](&OBJC_CLASS___APSLog, "database"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1000C0484();
    }
    uint64_t v12 = 1LL;
  }

  return v12;
}

uint64_t sub_10009F768(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v18 = objc_claimAutoreleasedReturnValue(Data);
      int v19 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v18;
    }

    else if ((v6 >> 3) == 2)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10009FCF8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ Notified of significant time change",  (uint8_t *)&v3,  0xCu);
  }

  [v2 _handleSignificantTimeChange];
}

void *sub_1000A02A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_10014E978, 16LL, 0LL);
  uint64_t v22 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + memset(v17, 0, 24) = 0LL;
    *(_DWORD *)(Instance + 16) = 0;
    sub_10009D8AC();
    uint64_t v23 = CSDBRecordCreate(&off_100120A10);
    if (v23)
    {
      int v24 = (const void *)v23;
      uint64_t v25 = 0LL;
      v32[0] = a2;
      v32[1] = a3;
      v32[2] = a4;
      v32[3] = a5;
      void v32[4] = a6;
      v32[5] = a7;
      v32[6] = a8;
      v32[7] = a9;
      v32[8] = a10;
      v32[9] = a11;
      v32[10] = a12;
      v32[11] = a13;
      do
      {
        CSDBRecordSetProperty(v24, dword_10014E980[v25], v32[v25]);
        ++v25;
      }

      while (v25 != 12);
      if (sub_1000A047C((uint64_t)v24))
      {
        v22[3] = (int)CSDBRecordGetID(v24);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = v22[3];
          int v28 = 138412546;
          int v29 = v22;
          __int16 v30 = 2048;
          uint64_t v31 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - New message record [%@] has ID [%lld].",  (uint8_t *)&v28,  0x16u);
        }
      }

      else
      {
        CFRelease(v22);
        uint64_t v22 = 0LL;
      }

      CFRelease(v24);
    }

    else
    {
      CFRelease(v22);
      return 0LL;
    }
  }

  return v22;
}

uint64_t sub_1000A047C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A05C4;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10009DB24(v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A0504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

const void *sub_1000A051C(uint64_t a1, uint64_t a2)
{
  return sub_1000A0524(a1, a2, 1);
}

const void *sub_1000A0524(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_10014E978, 16LL, 0LL);
  if (!Instance) {
    return 0LL;
  }
  char v7 = (const void *)Instance;
  *(void *)(Instance + 16) = 0LL;
  *(void *)(Instance + memset(v17, 0, 24) = a2;
  *(_DWORD *)(Instance + 16) = 0;
  if (a3) {
    char v8 = (const void *)sub_1000A0608(a2);
  }
  else {
    char v8 = (const void *)sub_1000A06E8(a2);
  }
  if (v8)
  {
    BOOL v9 = v7;
  }

  else
  {
    char v8 = v7;
    BOOL v9 = 0LL;
  }

  CFRelease(v8);
  return v9;
}

const void *sub_1000A05BC(uint64_t a1, uint64_t a2)
{
  return sub_1000A0524(a1, a2, 0);
}

uint64_t sub_1000A05C4(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40))
  {
    uint64_t v3 = result;
    CSDBRecordStoreAddRecord(a2);
    uint64_t result = CSDBRecordSaveStore(a2);
    *(_BYTE *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL) = result;
  }

  return result;
}

uint64_t sub_1000A0608(uint64_t a1)
{
  uint64_t v4 = 0LL;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A06A8;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10009DB24(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A0690( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000A06A8(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_100120A10, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000A06E8(uint64_t a1)
{
  uint64_t v4 = 0LL;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A0788;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10009DB80(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A0770( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000A0788(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_100120A10, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000A07C8(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v4 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APSOutgoingMessageRecordDeleteMessageForGUID %@",  buf,  0xCu);
  }

  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      v2[0] = _NSConcreteStackBlock;
      v2[1] = 3221225472LL;
      v2[2] = sub_1000A08B4;
      v2[3] = &unk_10011DE30;
      v2[4] = a1;
      sub_10009DC94( (uint64_t)@"SELECT ROWID, guid, sender_token_name, topic, environment, payload, is_sent, message_id, identifier, priority, payload_format, timeout, date FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC",  v2);
    }
  }

uint64_t sub_1000A08B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100120A10, a4, 0LL, 0LL);
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    for (CFIndex i = 0LL; i != v8; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
      CSDBRecordStoreRemoveRecord(a2, ValueAtIndex);
    }
  }

  if (v6) {
    CFRelease(v6);
  }
  CSDBRecordSaveStore(a2);
  return CSDBRecordStoreInvalidateCachesWithStore(a2);
}

CFMutableArrayRef sub_1000A0958(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0LL, &kCFTypeArrayCallBacks);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000A09FC;
  void v11[3] = &unk_100120AB0;
  char v12 = a3;
  void v11[4] = a1;
  void v11[5] = a4;
  v11[6] = a2;
  v11[7] = Mutable;
  sub_10009DC94( (uint64_t)@"SELECT ROWID, guid, sender_token_name, topic, environment, payload, is_sent, message_id, identifier, priority, payload_format, timeout, date FROM outgoing_message WHERE is_sent = ? AND priority = ? AND environment = ? ORDER BY ROWID ASC LIMIT ?",  v11);
  return Mutable;
}

void sub_1000A09FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100120A10, a4, 0LL, 0LL);
  if (v7)
  {
    CFIndex v8 = v7;
    CFIndex Count = CFArrayGetCount(v7);
    if (Count >= 1)
    {
      CFIndex v10 = Count;
      for (CFIndex i = 0LL; i != v10; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v8, i);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v14 = sub_1000A0524((uint64_t)kCFAllocatorDefault, ID, 0);
        if (v14)
        {
          unint64_t v15 = v14;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v14);
          CFRelease(v15);
        }
      }
    }

    CFRelease(v8);
  }

uint64_t sub_1000A0B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  uint64_t v9 = 0LL;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A0BB0;
  v5[3] = &unk_100120AD8;
  void v5[4] = &v6;
  v5[5] = a1;
  v5[6] = a2;
  v5[7] = a3;
  sub_10009DC94( (uint64_t)@"SELECT MIN(timeout+date), COUNT(*) FROM outgoing_message WHERE priority = ? AND environment = ? AND is_sent = 0",  v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1000A0B98(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A0BB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CSDBSqliteStep(a4);
  if ((_DWORD)result)
  {
    *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = CSDBSqliteStatementInteger64ResultColumn(a4, 0LL);
    uint64_t result = CSDBSqliteStatementInteger64ResultColumn(a4, 1LL);
    uint64_t v7 = (uint64_t *)a1[7];
    if (v7) {
      *uint64_t v7 = result;
    }
  }

  return result;
}

void sub_1000A0C24()
{
  sub_10009DCF8((uint64_t)@"UPDATE outgoing_message SET is_sent = 0", &stru_100120B18);
}

void sub_1000A0C38(id a1, CSDBRecordStore *a2, CSDBSqliteDatabase *a3, CSDBSqliteStatement *a4)
{
}

CFStringRef sub_1000A0C40(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSOutgoingMessageRecordCopyMessageForGUID [%@]",  (uint8_t *)&buf,  0xCu);
  }

  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v5 = 0x2020000000LL;
      uint64_t v6 = 0LL;
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472LL;
      v3[2] = sub_1000A0D84;
      v3[3] = &unk_100120B40;
      v3[4] = &buf;
      void v3[5] = a1;
      sub_10009DC94( (uint64_t)@"SELECT ROWID, guid, sender_token_name, topic, environment, payload, is_sent, message_id, identifier, priority, payload_format, timeout, date FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;",
        v3);
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24LL);
      _Block_object_dispose(&buf, 8);
    }

    else
    {
      return 0LL;
    }
  }

  return a1;
}

void sub_1000A0D64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A0D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100120A10, a4, 0LL, 0LL);
  if (v7)
  {
    uint64_t v8 = v7;
    if (CFArrayGetCount(v7))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, 0LL);
      int ID = CSDBRecordGetID(ValueAtIndex);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1000A0524((uint64_t)kCFAllocatorDefault, ID, 0);
    }

    CFRelease(v8);
  }

void sub_1000A0E30(uint64_t a1, char a2)
{
  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_1000A0EB0;
    v2[3] = &unk_100120B80;
    v2[4] = a1;
    char v3 = a2;
    sub_10009DA68(a1 + 16, v2);
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_1000C04B0();
  }

void sub_1000A0EB0(uint64_t a1)
{
  uint64_t v2 = sub_1000A06E8(*(void *)(*(void *)(a1 + 32) + 24LL));
  if (v2)
  {
    char v3 = (const void *)v2;
    CSDBRecordSetProperty(v2, dword_10014E994, *(unsigned __int8 *)(a1 + 40));
    sub_10009DB80(&stru_100120B60);
    CFRelease(v3);
  }

void sub_1000A0F0C(id a1, CSDBRecordStore *a2)
{
}

uint64_t sub_1000A0F14(uint64_t a1)
{
  if (a1) {
    return *(void *)(a1 + 24);
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 138412290;
    uint64_t v3 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Attempted to get record identifier for NULL message record: %@",  (uint8_t *)&v2,  0xCu);
  }

  return 0LL;
}

uint64_t sub_1000A0FB4(uint64_t a1)
{
  if (a1) {
    return (int)CSDBRecordGetID();
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 138412290;
    uint64_t v3 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - Attempted to get record identifier for NULL record: %@",  (uint8_t *)&v2,  0xCu);
  }

  return 0LL;
}

uint64_t sub_1000A1058(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000A1124;
    void v12[3] = &unk_100120BA8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_10009DA68(a2 + 16, v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }

  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000C04F4(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0LL;
  }

  return v2;
}

void sub_1000A110C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A1124(uint64_t a1)
{
  uint64_t v2 = sub_1000A06E8(*(void *)(*(void *)(a1 + 40) + 24LL));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBRecordCopyProperty( v2,  dword_10014E980[0]);
    CFRelease(v3);
  }

uint64_t sub_1000A117C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000A1244;
    void v12[3] = &unk_100120BA8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_10009DA0C(v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }

  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000C0568(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0LL;
  }

  return v2;
}

void sub_1000A122C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A1244(uint64_t a1)
{
  uint64_t v2 = sub_1000A06E8(*(void *)(*(void *)(a1 + 40) + 24LL));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBRecordCopyProperty( v2,  dword_10014E980[0]);
    CFRelease(v3);
  }

uint64_t sub_1000A129C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000LL;
    uint64_t v15 = 0LL;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000A136C;
    void v11[3] = &unk_100120BA8;
    void v11[4] = &v12;
    void v11[5] = a1;
    sub_10009DA68(a1 + 16, v11);
    uint64_t v1 = v13[3];
    _Block_object_dispose(&v12, 8);
  }

  else
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1000C05DC(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    return 0LL;
  }

  return v1;
}

void sub_1000A1354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A136C(uint64_t a1)
{
  uint64_t v2 = sub_1000A06E8(*(void *)(*(void *)(a1 + 40) + 24LL));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (int)CSDBRecordGetProperty( v2,  dword_10014E9AC);
    CFRelease(v3);
  }

void sub_1000A13C8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a1)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000A1468;
    v22[3] = &unk_100120BC8;
    v22[4] = a1;
    v22[5] = a2;
    v22[6] = a3;
    v22[7] = a4;
    v22[8] = a5;
    v22[9] = a7;
    v22[10] = a8;
    v22[11] = a9;
    v22[12] = a10;
    v22[13] = a11;
    v22[14] = a12;
    v22[15] = a13;
    _BYTE v22[16] = a14;
    sub_10009DA68(a1 + 16, v22);
  }

  else
  {
    BOOL v14 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v14) {
      sub_1000C0650(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }

void sub_1000A1468(uint64_t a1)
{
  uint64_t v2 = sub_1000A06E8(*(void *)(*(void *)(a1 + 32) + 24LL));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = (int)CSDBRecordGetID(v2);
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = CSDBRecordCopyProperty(v3, dword_10014E980[0]);
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty(v3, dword_10014E984);
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + memset(&context.info, 0, 64) = CSDBRecordCopyProperty(v3, dword_10014E988);
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty(v3, dword_10014E990);
    }
    if (*(void *)(a1 + 80)) {
      **(_BYTE **)(a1 + 80) = CSDBRecordGetProperty(v3, dword_10014E994) != 0;
    }
    if (*(void *)(a1 + 88)) {
      **(void **)(a1 + 8_Block_object_dispose(va, 8) = CSDBRecordGetProperty(v3, dword_10014E998);
    }
    if (*(void *)(a1 + 96)) {
      **(void **)(a1 + 96) = CSDBRecordGetProperty(v3, dword_10014E99C);
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordGetProperty(v3, dword_10014E9A0);
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordGetProperty(v3, dword_10014E9A4);
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordGetProperty(v3, dword_10014E9A8);
    }
    if (*(void *)(a1 + 128)) {
      **(void **)(a1 + 12_Block_object_dispose(va, 8) = CSDBRecordGetProperty(v3, dword_10014E9AC);
    }
    CFRelease(v3);
  }

uint64_t sub_1000A162C()
{
  uint64_t v0 = 0LL;
  qword_10014E978 = _CFRuntimeRegisterClass(&unk_100120BE8);
  uint64_t v1 = &off_100120C48;
  do
  {
    uint64_t v2 = *v1;
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed(&off_100120C48, 12LL, v2);
    dword_10014E980[v0++] = result;
  }

  while (v0 != 12);
  return result;
}

uint64_t sub_1000A1698(uint64_t result)
{
  *(void *)(result + memset(v17, 0, 24) = -1LL;
  return result;
}

void sub_1000A16A4(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + memset(v17, 0, 24) = -1LL;
  os_unfair_lock_unlock(v2);
}

BOOL sub_1000A16D8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_1000A16EC(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_1000A16F4(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0LL, @"<APSOutgoingMessageRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

void *sub_1000A1768( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, unsigned __int16 a15, unsigned int a16)
{
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_10014E9B0, 16LL, 0LL);
  uint64_t v25 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + memset(v17, 0, 24) = 0LL;
    *(_DWORD *)(Instance + 16) = 0;
    sub_10009D8AC();
    uint64_t v26 = CSDBRecordCreate(&off_100120E28);
    if (v26)
    {
      int v27 = (const void *)v26;
      uint64_t v28 = 0LL;
      v35[0] = a2;
      v35[1] = a3;
      v35[2] = a4;
      void v35[3] = a5;
      v35[4] = a6;
      v35[5] = a7;
      v35[6] = a8;
      v35[7] = a9;
      v35[8] = a10;
      v35[9] = a11;
      v35[10] = a12;
      v35[11] = a13;
      v35[12] = a14;
      v35[13] = a15;
      v35[14] = a16;
      do
      {
        CSDBRecordSetProperty(v27, dword_10014E9B8[v28], v35[v28]);
        ++v28;
      }

      while (v28 != 15);
      if (sub_1000A1958((uint64_t)v27))
      {
        void v25[3] = (int)CSDBRecordGetID(v27);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = v25[3];
          int v31 = 138412546;
          int v32 = v25;
          __int16 v33 = 2048;
          uint64_t v34 = v29;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - New message record [%@] has ID [%lld].",  (uint8_t *)&v31,  0x16u);
        }
      }

      else
      {
        CFRelease(v25);
        uint64_t v25 = 0LL;
      }

      CFRelease(v27);
    }

    else
    {
      CFRelease(v25);
      return 0LL;
    }
  }

  return v25;
}

uint64_t sub_1000A1958(uint64_t a1)
{
  uint64_t v4 = 0LL;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A1AA0;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10009DB24(v3);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A19E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

const void *sub_1000A19F8(uint64_t a1, uint64_t a2)
{
  return sub_1000A1A00(a1, a2, 1);
}

const void *sub_1000A1A00(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_10014E9B0, 16LL, 0LL);
  if (!Instance) {
    return 0LL;
  }
  char v7 = (const void *)Instance;
  *(void *)(Instance + 16) = 0LL;
  *(void *)(Instance + memset(v17, 0, 24) = a2;
  *(_DWORD *)(Instance + 16) = 0;
  if (a3) {
    uint64_t v8 = (const void *)sub_1000A1AE4(a2);
  }
  else {
    uint64_t v8 = (const void *)sub_1000A1BC4(a2);
  }
  if (v8)
  {
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0LL;
  }

  CFRelease(v8);
  return v9;
}

const void *sub_1000A1A98(uint64_t a1, uint64_t a2)
{
  return sub_1000A1A00(a1, a2, 0);
}

uint64_t sub_1000A1AA0(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 40))
  {
    uint64_t v3 = result;
    CSDBRecordStoreAddRecord(a2);
    uint64_t result = CSDBRecordSaveStore(a2);
    *(_BYTE *)(*(void *)(*(void *)(v3 + 32) + 8LL) + 24LL) = result;
  }

  return result;
}

uint64_t sub_1000A1AE4(uint64_t a1)
{
  uint64_t v4 = 0LL;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A1B84;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10009DB24(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A1B6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000A1B84(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_100120E28, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1000A1BC4(uint64_t a1)
{
  uint64_t v4 = 0LL;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000A1C64;
  v3[3] = &unk_10011DD08;
  v3[4] = &v4;
  void v3[5] = a1;
  sub_10009DB80(v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000A1C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000A1C64(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_100120E28, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1000A1CA4(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v4 = a1;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APSIncomingMessageRecordDeleteMessageForGUID %@",  buf,  0xCu);
  }

  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      v2[0] = _NSConcreteStackBlock;
      v2[1] = 3221225472LL;
      v2[2] = sub_1000A1D90;
      v2[3] = &unk_10011DE30;
      v2[4] = a1;
      sub_10009DC94( (uint64_t)@"SELECT ROWID, guid, token, topic, environment, correlation_identifier, payload, from_storage, last_from_storage, message_id, priority, date, tracing_enabled, tracing_uuid, push_type, push_flags FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC",  v2);
    }
  }

uint64_t sub_1000A1D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100120E28, a4, 0LL, 0LL);
  CFIndex Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    for (CFIndex i = 0LL; i != v8; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
      CSDBRecordStoreRemoveRecord(a2, ValueAtIndex);
    }
  }

  if (v6) {
    CFRelease(v6);
  }
  CSDBRecordSaveStore(a2);
  return CSDBRecordStoreInvalidateCachesWithStore(a2);
}

void sub_1000A1E34(const __CFString *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    BOOL v11 = a1;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    __int16 v14 = 2112;
    uint64_t v15 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APSIncomingMessageRecordDeleteMessagesForTopic %@ %lld environment %@",  buf,  0x20u);
  }

  if (a1)
  {
    CFIndex Length = CFStringGetLength(a1);
    if (a3)
    {
      if (Length)
      {
        if (CFStringGetLength(a3))
        {
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472LL;
          v9[2] = sub_1000A1F60;
          v9[3] = &unk_10011DDC8;
          v9[4] = a2;
          v9[5] = a1;
          v9[6] = a3;
          v9[7] = a4;
          sub_10009DCF8( (uint64_t)@"DELETE FROM incoming_message WHERE priority = ? AND topic = ? AND environment = ? AND token = ?",  v9);
        }
      }
    }
  }

uint64_t sub_1000A1F60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4, v6, v7);
}

void sub_1000A1FB4(const __CFString *a1, uint64_t a2, uint64_t a3)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    CFIndex v8 = a1;
    __int16 v9 = 2048;
    uint64_t v10 = a2;
    __int16 v11 = 2048;
    uint64_t v12 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSMessageStore - APSIncomingMessageRecordDeleteMessagesOlderThanDate environment %@  %lld timeThreshold %lld",  buf,  0x20u);
  }

  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      _DWORD v6[2] = sub_1000A20C8;
      void v6[3] = &unk_10011DE10;
      void v6[4] = a2;
      void v6[5] = a1;
      v6[6] = a3;
      sub_10009DCF8( (uint64_t)@"DELETE FROM incoming_message WHERE priority = ? AND ROWID < IFNULL(  (  SELECT MAX(m.ROWID) FROM incoming_message m   WHERE m.environment = ?   AND m.priority = ?   AND m.date < ?  ), 0) ",  v6);
    }
  }

uint64_t sub_1000A20C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4, v6, v7);
}

uint64_t sub_1000A211C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  uint64_t v9 = 0LL;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A21C8;
  v5[3] = &unk_100120AD8;
  v5[6] = a2;
  v5[7] = a3;
  void v5[4] = &v6;
  v5[5] = a1;
  sub_10009DC94( (uint64_t)@"SELECT topic FROM incoming_message WHERE priority = ? AND environment = ? AND token = ? ",  v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1000A21B0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000A21C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    uint64_t result = CSDBSqliteStatementCopyStringResult(a4);
    if (!result) {
      break;
    }
    uint64_t v7 = (const void *)result;
    uint64_t v8 = *(__CFArray **)(*(void *)(a1[4] + 8LL) + 24LL);
    if (!v8)
    {
      *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      uint64_t v8 = *(__CFArray **)(*(void *)(a1[4] + 8LL) + 24LL);
    }

    CFArrayAppendValue(v8, v7);
    CFRelease(v7);
  }

  return result;
}

CFMutableArrayRef sub_1000A2280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v7 = @"AND topic = ?";
  if (!a2) {
    uint64_t v7 = &stru_100123240;
  }
  uint64_t v8 = -[NSString initWithFormat:]( v6,  "initWithFormat:",  @"%s WHERE environment = ? AND priority = ? %@ ORDER BY ROWID ASC LIMIT 100",  "SELECT ROWID, guid, token, topic, environment, correlation_identifier, payload, from_storage, last_from_storage , message_id, priority, date, tracing_enabled, tracing_uuid, push_type, push_flags FROM incoming_message ",  v7);
  Default = CFAllocatorGetDefault();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(Default, 0LL, &kCFTypeArrayCallBacks);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000A235C;
  void v12[3] = &unk_10011DDC8;
  v12[4] = a3;
  v12[5] = a1;
  void v12[6] = a2;
  v12[7] = Mutable;
  sub_10009DC94((uint64_t)v8, v12);

  return Mutable;
}

void sub_1000A235C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    CSDBSqliteBindTextFromCFString(a4, v7);
  }
  uint64_t v8 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100120E28, a4, 0LL, 0LL);
  if (v8)
  {
    uint64_t v9 = v8;
    CFIndex Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      CFIndex v11 = Count;
      for (CFIndex i = 0LL; i != v11; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v15 = sub_1000A1A00((uint64_t)kCFAllocatorDefault, ID, 0);
        if (v15)
        {
          uint64_t v16 = v15;
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v15);
          CFRelease(v16);
        }
      }
    }

    CFRelease(v9);
  }

CFStringRef sub_1000A245C(const __CFString *a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "APSIncomingMessageRecordCopyMessageForGUID [%@]",  (uint8_t *)&buf,  0xCu);
  }

  if (a1)
  {
    if (CFStringGetLength(a1))
    {
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v5 = 0x2020000000LL;
      uint64_t v6 = 0LL;
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472LL;
      v3[2] = sub_1000A25A0;
      v3[3] = &unk_100120B40;
      v3[4] = &buf;
      void v3[5] = a1;
      sub_10009DC94( (uint64_t)@"SELECT ROWID, guid, token, topic, environment, correlation_identifier, payload, from_storage, last_from_storage, message_id, priority, date, tracing_enabled, tracing_uuid, push_type, push_flags FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;",
        v3);
      a1 = *(const __CFString **)(*((void *)&buf + 1) + 24LL);
      _Block_object_dispose(&buf, 8);
    }

    else
    {
      return 0LL;
    }
  }

  return a1;
}

void sub_1000A2580( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A25A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100120E28, a4, 0LL, 0LL);
  if (v7)
  {
    uint64_t v8 = v7;
    if (CFArrayGetCount(v7))
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, 0LL);
      int ID = CSDBRecordGetID(ValueAtIndex);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = sub_1000A1A00((uint64_t)kCFAllocatorDefault, ID, 0);
    }

    CFRelease(v8);
  }

uint64_t sub_1000A264C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0LL;
    __int16 v14 = &v13;
    uint64_t v15 = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000A2718;
    void v12[3] = &unk_100120BA8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_10009DA68(a2 + 16, v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }

  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000C06C4(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0LL;
  }

  return v2;
}

void sub_1000A2700( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A2718(uint64_t a1)
{
  uint64_t v2 = sub_1000A1BC4(*(void *)(*(void *)(a1 + 40) + 24LL));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBRecordCopyProperty( v2,  dword_10014E9B8[0]);
    CFRelease(v3);
  }

uint64_t sub_1000A2770(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v13 = 0LL;
    __int16 v14 = &v13;
    uint64_t v15 = 0x2020000000LL;
    uint64_t v16 = 0LL;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000A2838;
    void v12[3] = &unk_100120BA8;
    v12[4] = &v13;
    v12[5] = a2;
    sub_10009DA0C(v12);
    uint64_t v2 = v14[3];
    _Block_object_dispose(&v13, 8);
  }

  else
  {
    BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v3) {
      sub_1000C0738(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    return 0LL;
  }

  return v2;
}

void sub_1000A2820( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A2838(uint64_t a1)
{
  uint64_t v2 = sub_1000A1BC4(*(void *)(*(void *)(a1 + 40) + 24LL));
  if (v2)
  {
    BOOL v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBRecordCopyProperty( v2,  dword_10014E9B8[0]);
    CFRelease(v3);
  }

uint64_t sub_1000A2890(uint64_t a1)
{
  if (a1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000LL;
    uint64_t v15 = 0LL;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_1000A2960;
    void v11[3] = &unk_100120BA8;
    void v11[4] = &v12;
    void v11[5] = a1;
    sub_10009DA68(a1 + 16, v11);
    uint64_t v1 = v13[3];
    _Block_object_dispose(&v12, 8);
  }

  else
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1000C07AC(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    return 0LL;
  }

  return v1;
}

void sub_1000A2948( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A2960(uint64_t a1)
{
  uint64_t v2 = sub_1000A1BC4(*(void *)(*(void *)(a1 + 40) + 24LL));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = (int)CSDBRecordGetProperty( v2,  dword_10014E9E0);
    CFRelease(v3);
  }

void sub_1000A29BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a1)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1000A2A70;
    void v25[3] = &unk_100120EC8;
    v25[4] = a1;
    void v25[5] = a2;
    v25[6] = a3;
    v25[7] = a4;
    v25[8] = a5;
    v25[9] = a7;
    v25[10] = a8;
    v25[11] = a9;
    v25[12] = a10;
    v25[13] = a11;
    v25[14] = a12;
    v25[15] = a13;
    v25[16] = a14;
    v25[17] = a15;
    v25[18] = a16;
    v25[19] = a17;
    sub_10009DA68(a1 + 16, v25);
  }

  else
  {
    BOOL v17 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v17) {
      sub_1000C0820(v17, v18, v19, v20, v21, v22, v23, v24);
    }
  }

void sub_1000A2A70(uint64_t a1)
{
  uint64_t v2 = sub_1000A1BC4(*(void *)(*(void *)(a1 + 32) + 24LL));
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = (int)CSDBRecordGetID(v2);
    }
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose(va, 8) = CSDBRecordCopyProperty(v3, dword_10014E9B8[0]);
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty(v3, dword_10014E9BC);
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + memset(&context.info, 0, 64) = CSDBRecordCopyProperty(v3, dword_10014E9C0);
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty(v3, dword_10014E9C8);
    }
    if (*(void *)(a1 + 80)) {
      **(void **)(a1 + 80) = CSDBRecordCopyProperty(v3, dword_10014E9CC);
    }
    if (*(void *)(a1 + 88)) {
      **(_BYTE **)(a1 + 8_Block_object_dispose(va, 8) = CSDBRecordGetProperty(v3, dword_10014E9D0) != 0;
    }
    if (*(void *)(a1 + 96)) {
      **(_BYTE **)(a1 + 96) = CSDBRecordGetProperty(v3, dword_10014E9D4) != 0;
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordGetProperty(v3, dword_10014E9D8);
    }
    if (*(void *)(a1 + 112)) {
      **(void **)(a1 + 112) = CSDBRecordGetProperty(v3, dword_10014E9DC);
    }
    if (*(void *)(a1 + 120)) {
      **(void **)(a1 + 120) = CSDBRecordGetProperty(v3, dword_10014E9E0);
    }
    if (*(void *)(a1 + 128)) {
      **(_BYTE **)(a1 + 12_Block_object_dispose(va, 8) = CSDBRecordGetProperty(v3, dword_10014E9E4) != 0;
    }
    if (*(void *)(a1 + 136)) {
      **(void **)(a1 + 136) = CSDBRecordCopyProperty(v3, dword_10014E9E8);
    }
    if (*(void *)(a1 + 144)) {
      **(void **)(a1 + 144) = CSDBRecordGetProperty(v3, dword_10014E9EC);
    }
    if (*(void *)(a1 + 152)) {
      **(_DWORD **)(a1 + 152) = CSDBRecordGetProperty(v3, dword_10014E9F0);
    }
    CFRelease(v3);
  }

uint64_t sub_1000A2CA4()
{
  uint64_t v0 = 0LL;
  qword_10014E9B0 = _CFRuntimeRegisterClass(&unk_100120EE8);
  uint64_t v1 = &off_100120F48;
  do
  {
    uint64_t v2 = *v1;
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed(&off_100120F48, 15LL, v2);
    dword_10014E9B8[v0++] = result;
  }

  while (v0 != 15);
  return result;
}

uint64_t sub_1000A2D10(uint64_t result)
{
  *(void *)(result + memset(v17, 0, 24) = -1LL;
  return result;
}

void sub_1000A2D1C(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + memset(v17, 0, 24) = -1LL;
  os_unfair_lock_unlock(v2);
}

BOOL sub_1000A2D50(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_1000A2D64(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_1000A2D6C(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0LL, @"<APSIncomingMessageRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

void sub_1000A2E20(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___APSSystemMonitor);
  uint64_t v2 = (void *)qword_10014E9F8;
  qword_10014E9F8 = (uint64_t)v1;
}

void sub_1000A2F50()
{
  if (dword_10014EA08)
  {
    IONotificationPortSetDispatchQueue((IONotificationPortRef)qword_10014EA10, 0LL);
    IODeregisterForSystemPower(dword_10014EA18);
    IOServiceClose(dword_10014EA08);
    IONotificationPortDestroy((IONotificationPortRef)qword_10014EA10);
    dword_10014EA08 = 0;
  }

void sub_1000A2FA4(const char *a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v14;
    *(void *)&__int128 v5 = 138412546LL;
    __int128 v12 = v5;
    do
    {
      for (CFIndex i = 0LL; i != v6; CFIndex i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v9, a1) & 1) != 0)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = NSStringFromSelector(a1);
            CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
            *(_DWORD *)__int128 buf = v12;
            uint64_t v18 = v11;
            __int16 v19 = 2112;
            uint64_t v20 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Delivering %@ to %@",  buf,  0x16u);
          }

          objc_msgSend(v9, "performSelector:withObject:", a1, 0, v12);
        }
      }

      id v6 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }

    while (v6);
  }
}

void sub_1000A31BC(_Unwind_Exception *a1)
{
}

void sub_1000A3720(_Unwind_Exception *a1)
{
}

void sub_1000A3788(_Unwind_Exception *a1)
{
}

void sub_1000A3828(id a1, int a2)
{
  uint64_t state64 = 0LL;
  notify_get_state(a2, &state64);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[APSSystemMonitor sharedInstance](&OBJC_CLASS___APSSystemMonitor, "sharedInstance"));
  [v2 _setSystemLockState:state64 != 0];
}

void sub_1000A3880(id a1, int a2)
{
  uint64_t state64 = 0LL;
  notify_get_state(a2, &state64);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[APSSystemMonitor sharedInstance](&OBJC_CLASS___APSSystemMonitor, "sharedInstance"));
  [v2 _setSystemScreenState:state64 == 0];
}

void sub_1000A38D8(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  id v6 = objc_autoreleasePoolPush();
  if (a3 == -536870288)
  {
LABEL_7:
    IOReturn v8 = IOAllowPowerChange(dword_10014EA08, a4);
    if (v8)
    {
      int v9 = v8;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
        sub_1000C08D8(v9);
      }
    }

    goto LABEL_13;
  }

  if (a3 != -536870144)
  {
    if (a3 != -536870272) {
      goto LABEL_13;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "SLEEP -- going to sleep now",  buf,  2u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[APSSystemMonitor sharedInstance](&OBJC_CLASS___APSSystemMonitor, "sharedInstance"));
    [v7 _systemWillSleep];

    goto LABEL_7;
  }

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "WAKE -- just woke up!",  v10,  2u);
  }

  dispatch_async(&_dispatch_main_q, &stru_100121220);
LABEL_13:
  objc_autoreleasePoolPop(v6);
}

void sub_1000A3A44(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[APSSystemMonitor sharedInstance](&OBJC_CLASS___APSSystemMonitor, "sharedInstance"));
  [v1 _systemDidWake];
}

void sub_1000A3D38(id a1)
{
  off_10014EA20 = (_UNKNOWN *)CUTWeakLinkSymbol("WiFiManagerClientCreate", @"MobileWiFi");
}

void sub_1000A3D64(id a1)
{
  off_10014EA30 = (_UNKNOWN *)CUTWeakLinkSymbol("WiFiManagerClientRegisterWowStateChangedCallback", @"MobileWiFi");
}

void sub_1000A3D90(uint64_t a1, int a2, void *a3)
{
  if (!qword_10014EA70)
  {
    id v6 = (void **)CUTWeakLinkSymbol("kWiFiWoWClientListKey", @"MobileWiFi");
    if (v6) {
      uint64_t v7 = *v6;
    }
    else {
      uint64_t v7 = 0LL;
    }
    objc_storeStrong((id *)&qword_10014EA70, v7);
  }

  if (qword_10014EA80 != -1) {
    dispatch_once(&qword_10014EA80, &stru_1001212E0);
  }
  IOReturn v8 = (__CFString *)off_10014EA78(a1);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = @"YES";
    *(_DWORD *)__int128 buf = 136315650;
    uint64_t v26 = "_WiFiManagerClientWoWStateChangedCallback";
    __int16 v27 = 2112;
    if (!a2) {
      int v9 = @"NO";
    }
    uint64_t v28 = (const char *)v9;
    __int16 v29 = 2112;
    __int16 v30 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s WoW isEnabled %@ WoW state %@",  buf,  0x20u);
  }

  uint64_t v21 = 0LL;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2020000000LL;
  char v24 = 0;
  pid_t v10 = getpid();
  CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v8, "objectForKey:", qword_10014EA70));
  id v12 = [v11 count];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000A6ECC;
  v19[3] = &unk_100121308;
  pid_t v20 = v10;
  v19[4] = &v21;
  [v11 enumerateObjectsUsingBlock:v19];
  if (a2)
  {
    if (*((_BYTE *)v22 + 24))
    {
      if (v12 == (id)1)
      {
        a2 = 0;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v26 = "_WiFiManagerClientWoWStateChangedCallback";
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%s APSD is the only WoW subscriber. Preventing WoW from enabling dual mode!",  buf,  0xCu);
          a2 = 0;
        }
      }
    }
  }

  id v13 = a3;
  if (a2 != [v13 isWoWEnabled])
  {
    [v13 setIsWoWEnabled:a2 != 0];
    id v14 = &_os_log_default;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v15 = [v13 shouldUseDualMode];
      unsigned int v16 = [v13 isWoWEnabled];
      BOOL v17 = @"NO";
      __int16 v27 = 2080;
      uint64_t v28 = "_WiFiManagerClientWoWStateChangedCallback";
      if (v15) {
        uint64_t v18 = @"YES";
      }
      else {
        uint64_t v18 = @"NO";
      }
      *(_DWORD *)__int128 buf = 134218754;
      uint64_t v26 = (const char *)v13;
      __int16 v29 = 2112;
      if (v16) {
        BOOL v17 = @"YES";
      }
      __int16 v30 = v18;
      __int16 v31 = 2112;
      int v32 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%p %s shouldUseDualMode %@ isWoWEnabled %@",  buf,  0x2Au);
    }

    [v13 _toggleWiFiAutoAssociateIfNecessary];
  }

  _Block_object_dispose(&v21, 8);
}

void sub_1000A40E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000A4114(id a1)
{
  off_10014EA40 = (_UNKNOWN *)CUTWeakLinkSymbol("WiFiManagerClientScheduleWithRunLoop", @"MobileWiFi");
}

void sub_1000A429C(id a1)
{
  off_10014EA50 = (uint64_t (*)(void, void, void))CUTWeakLinkSymbol( "WiFiManagerClientRegisterWowStateChangedCallback",  @"MobileWiFi");
}

void sub_1000A42C8(id a1)
{
  off_10014EA60 = (_UNKNOWN *)CUTWeakLinkSymbol("WiFiManagerClientUnscheduleFromRunLoop", @"MobileWiFi");
}

void sub_1000A44A4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 138412290;
    id v4 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "%@ Notified of significant time change",  (uint8_t *)&v3,  0xCu);
  }

  [v2 _handleSignificantTimeChange];
}

id sub_1000A4550(uint64_t a1, void *a2)
{
  return [a2 _reloadDualMode];
}

LABEL_16:
  -[APSNetworkMonitor _flushStaleWiFiMeasurements]( self,  "_flushStaleWiFiMeasurements",  *(_OWORD *)v28,  *(void *)&v28[16],  *(void *)&v29,  v30);
  -[APSNetworkMonitor _toggleWiFiAutoAssociateIfNecessary](self, "_toggleWiFiAutoAssociateIfNecessary");
}

  swift_bridgeObjectRelease(v3);
  unsigned int v15 = [v0 sortedLoggedInUsers];
  unsigned int v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v2);

  if (!((unint64_t)v16 >> 62))
  {
    BOOL v17 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v17) {
      goto LABEL_18;
    }
LABEL_31:
    swift_bridgeObjectRelease(v16);
    return;
  }

  if (v16 < 0) {
    __int16 v27 = v16;
  }
  else {
    __int16 v27 = v16 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v16);
  BOOL v17 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v16);
  if (!v17) {
    goto LABEL_31;
  }
LABEL_18:
  if (v17 >= 1)
  {
    uint64_t v18 = 0LL;
    __int16 v19 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70LL);
    while (1)
    {
      if ((v16 & 0xC000000000000001LL) != 0)
      {
        char v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v16);
        uint64_t v25 = (void *)v19();
        if (!v25) {
          goto LABEL_26;
        }
      }

      else
      {
        char v24 = *(void *)(v16 + 8 * v18 + 32);
        uint64_t v26 = swift_unknownObjectRetain(v24);
        uint64_t v25 = (void *)((uint64_t (*)(uint64_t))v19)(v26);
        if (!v25)
        {
LABEL_26:
          uint64_t v23 = v24;
          goto LABEL_21;
        }
      }

      pid_t v20 = (uint64_t)v25;
      [v25 loginForUser:v24];
      swift_unknownObjectRelease(v24, v21);
      uint64_t v23 = v20;
LABEL_21:
      swift_unknownObjectRelease(v23, v22);
      if (v17 == ++v18) {
        goto LABEL_31;
      }
    }
  }

    __break(0x5519u);
  }

  return result;
}

void sub_1000A6EA0(id a1)
{
  off_10014EA78 = (_UNKNOWN *)CUTWeakLinkSymbol("WiFiManagerClientCopyWoWState", @"MobileWiFi");
}

id sub_1000A6ECC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 intValue];
  if ((_DWORD)result == *(_DWORD *)(a1 + 40))
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }

  return result;
}

BOOL sub_1000A7048(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 8LL;
LABEL_21:
        unsigned int v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t v15 = PBReaderReadString(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v15);
    uint64_t v14 = 16LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_28:
  return v17;
}

  __break(1u);
  return result;
}

          __break(0x5519u);
        }

        CFIndex v11 = 0xAAAAAAAAAAAAAAAALL;
        id v12 = 0xAAAAAAAAAAAAAAAALL;
        if (v8 > v9 || v9 > v14) {
          goto LABEL_28;
        }
        CFIndex v11 = v9;
        id v12 = v14;
        id result = ccder_blob_decode_tl(&v11, 5LL, &v15);
        if (!(_DWORD)result) {
          return result;
        }
        if (v11 != v14) {
          return 0LL;
        }
        if (!__CFADD__(v11, v15))
        {
          int v10 = v11 + v15;
          if (v11 + v15 <= a1[1] && *a1 <= v10)
          {
            *a1 = v10;
            return 1LL;
          }

          goto LABEL_28;
        }
      }
    }

    __break(0x5513u);
  }

  return result;
}

void sub_1000A82F0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

id sub_1000A8B28(uint64_t a1, void *a2)
{
  return _[a2 protocolConnection:*(void *)(a1 + 32) didDisconnectWithConnectionState:2 reason:0];
}

id sub_1000A8C94(uint64_t a1, void *a2)
{
  return _[a2 protocolConnection:*(void *)(a1 + 32) didDisconnectWithConnectionState:2 reason:0];
}

void sub_1000A98AC(void *a1, void *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  char v4 = (void *)a1[6];
  id v5 = a2;
  objc_msgSend( v5,  "protocolConnection:receivedMessageWithParameters:generation:isWaking:",  v2,  v3,  objc_msgSend(v4, "unsignedIntegerValue"),  0);
}

uint64_t sub_1000A9908(unint64_t a1)
{
  if (a1 > 6) {
    return 255LL;
  }
  else {
    return qword_100102D10[a1];
  }
}

void sub_1000A9E10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48) || *(void *)(a1 + 32))
  {
    unint64_t v7 = @"APSProtocolConnectedResponse";
    char v8 = &off_10012B770;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    id v3 = [v2 mutableCopy];

    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      [v3 setObject:v4 forKeyedSubscript:@"APSProtocolServerTimeForBadNonce"];
    }
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) presenceCompletion]);

    if (v5)
    {
      unint64_t v6 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) presenceCompletion]);
      ((void (**)(void, id, void))v6)[2](v6, v3, 0LL);
    }

    [*(id *)(a1 + 40) setQueuedPresenceSend:0];
  }

  else
  {
    [*(id *)(a1 + 40) _markDisconnectedIsPermanent:0];
  }

id sub_1000AA30C(uint64_t a1, void *a2)
{
  return [a2 protocolConnection:*(void *)(a1 + 32) receivedPubSubChannelListWithParameters:*(void *)(a1 + 40)];
}

id sub_1000AA4C0(uint64_t a1, void *a2)
{
  return [a2 protocolConnection:*(void *)(a1 + 32) receivedPubSubChannelUpdateWithParameters:*(void *)(a1 + 40)];
}

void sub_1000AACA4(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)a2[2];
  id v3 = (void *)a2[3];
  id v5 = a2;
  id v12 = (id)objc_claimAutoreleasedReturnValue([v4 name]);
  uint64_t v6 = v5[5];

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) firstObject]);
  [v3 sendPresenceWithEnvironmentName:v12 guid:v6 token:v7 hwVersion:v8 swVersion:v9 swBuild:v10 certificate:v11 nonce:*(void *)(a1 + 72) signature:*(void *)(a1 + 80) hostCertificateInfo:*(void *)(a1 + 88)];
}

uint64_t sub_1000ABD2C(mach_port_t a1, mach_msg_timeout_t timeout)
{
  msg.mach_msg_bits_t msgh_bits = 19;
  msg.mach_port_t msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  msg.msgh_voucher_port = 0;
  msg.mach_msg_id_t msgh_id = 473000;
  if (&_voucher_mach_msg_set) {
    voucher_mach_msg_set(&msg);
  }
  uint64_t v3 = mach_msg(&msg, 17, 0x18u, 0, 0, timeout, 0);
  if ((_DWORD)v3 == 268435460)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100) {
      mach_port_deallocate(mach_task_self_, msg.msgh_local_port);
    }
    mach_msg_destroy(&msg);
  }

  return v3;
}

unint64_t sub_1000ABE14()
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v0) + 0x78LL);
  if (((uint64_t (*)(uint64_t))v9)(v6))
  {
    __uint64_t v1 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v0) + 0x90LL);
    if (v2() < v1)
    {
      unint64_t result = v2();
      __uint64_t v11 = v1 - result;
      if (v1 >= result)
      {
        unint64_t result = v9();
        unint64_t v12 = result + v11;
        if (!__CFADD__(result, v11))
        {
          sub_1000AC284();
          uint64_t v13 = v0;
          uint64_t v14 = (os_log_s *)static OS_os_log.default.getter();
          os_log_type_t v15 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v14, v15))
          {
            unsigned int v16 = (_DWORD *)swift_slowAlloc(52LL, -1LL);
            unint64_t v32 = v11;
            unint64_t v33 = v12;
            BOOL v17 = v16;
            *unsigned int v16 = 134219008;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v16 + 1, v16 + 3);
            *((_WORD *)v17 + 6) = 2048;
            unint64_t v33 = v1;
            uint64_t v18 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, (char *)v17 + 14, (char *)v17 + 22);
            *((_WORD *)v17 + 11) = 2048;
            unint64_t v33 = ((uint64_t (*)(uint64_t))v2)(v18);
            uint64_t v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 6, v17 + 8);
            *((_WORD *)v17 + 16) = 2048;
            uint64_t v20 = ((uint64_t (*)(uint64_t))v9)(v19);

            unint64_t v33 = v20;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, (char *)v17 + 34, (char *)v17 + 42);

            *((_WORD *)v17 + 21) = 2048;
            unint64_t v33 = v32 / 0x3B9ACA00;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v17 + 11, v17 + 13);
            _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Calculated server time in nanoseconds %llu {currentMonotonicTimeInNanoSeconds: %llu, alignedMonotonicTimeI nNanoSeconds: %llu, mostRecentServerTimeInNanoSeconds: %llu, changeInSeconds: %llu}",  (uint8_t *)v17,  0x34u);
            swift_slowDealloc(v17, -1LL, -1LL);
          }

          else
          {
          }

          return v12;
        }

        goto LABEL_24;
      }

unint64_t sub_1000AC284()
{
  unint64_t result = qword_10014E510;
  if (!qword_10014E510)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10014E510);
  }

  return result;
}

void sub_1000AC2C0(unint64_t a1)
{
  if (is_mul_ok(a1, 0xF4240uLL))
  {
    unint64_t v2 = 1000000 * a1;
    __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    if (v2 >= v3)
    {
      (*(void (**)(unint64_t))((swift_isaMask & *v1) + 0x80LL))(v2);
      (*(void (**)(__uint64_t))((swift_isaMask & *v1) + 0x98LL))(v3);
      sub_1000AC284();
      oslog = (os_log_s *)static OS_os_log.default.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        uint64_t v5 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v5 = 134218240;
        unint64_t v8 = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5 + 4, v5 + 12);
        *(_WORD *)(v5 + 12) = 2048;
        unint64_t v8 = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5 + 14, v5 + 22);
        uint64_t v6 = "Updated stored server time {serverTime: %llu, localTime: %llu}";
        goto LABEL_7;
      }
    }

    else
    {
      sub_1000AC284();
      oslog = (os_log_s *)static OS_os_log.default.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v4))
      {
        uint64_t v5 = swift_slowAlloc(22LL, -1LL);
        *(_DWORD *)uint64_t v5 = 134218240;
        unint64_t v8 = v2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5 + 4, v5 + 12);
        *(_WORD *)(v5 + 12) = 2048;
        unint64_t v8 = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5 + 14, v5 + 22);
        uint64_t v6 = "Did not update stored server time, nonsensical values! {serverTime: %llu, localTime: %llu}";
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, oslog, v4, v6, (uint8_t *)v5, 0x16u);
        swift_slowDealloc(v5, -1LL, -1LL);

        return;
      }
    }
  }

  else
  {
    __break(1u);
  }

unint64_t sub_1000AC55C()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin();
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x78LL);
  if (((uint64_t (*)(uint64_t))v6)(v3))
  {
    __uint64_t v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    unint64_t v8 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x90LL);
    unint64_t result = v8();
    __uint64_t v10 = v7 - result;
    if (v7 < result)
    {
      __break(1u);
    }

    else
    {
      unint64_t result = v6();
      if (!__CFADD__(result, v10))
      {
        unint64_t v36 = result + v10;
        unint64_t v38 = 0LL;
        unint64_t v39 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(206LL);
        v11._countAndFlagsBits = 0xD000000000000019LL;
        v11._object = (void *)0x8000000100101550LL;
        String.append(_:)(v11);
        unint64_t v37 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x60LL))();
        v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        object = v12._object;
        String.append(_:)(v12);
        swift_bridgeObjectRelease(object);
        v14._object = (void *)0x8000000100101570LL;
        v14._countAndFlagsBits = 0xD000000000000024LL;
        String.append(_:)(v14);
        unint64_t v37 = v7;
        v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        unsigned int v16 = v15._object;
        String.append(_:)(v15);
        swift_bridgeObjectRelease(v16);
        v17._object = (void *)0x80000001001015A0LL;
        v17._countAndFlagsBits = 0xD000000000000024LL;
        String.append(_:)(v17);
        unint64_t v37 = v8();
        v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        uint64_t v19 = v18._object;
        String.append(_:)(v18);
        swift_bridgeObjectRelease(v19);
        v20._object = (void *)0x80000001001015D0LL;
        v20._countAndFlagsBits = 0xD000000000000024LL;
        String.append(_:)(v20);
        unint64_t v37 = v6();
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        double v22 = v21._object;
        String.append(_:)(v21);
        swift_bridgeObjectRelease(v22);
        v23._countAndFlagsBits = 0xD000000000000012LL;
        v23._object = (void *)0x8000000100101600LL;
        String.append(_:)(v23);
        unint64_t v37 = v10 / 0x3B9ACA00;
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        uint64_t v25 = v24._object;
        String.append(_:)(v24);
        swift_bridgeObjectRelease(v25);
        v26._countAndFlagsBits = 0xD00000000000002ALL;
        v26._object = (void *)0x8000000100101620LL;
        String.append(_:)(v26);
        unint64_t v37 = v36;
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
        uint64_t v28 = v27._object;
        String.append(_:)(v27);
        swift_bridgeObjectRelease(v28);
        v29._countAndFlagsBits = 62LL;
        v29._object = (void *)0xE100000000000000LL;
        String.append(_:)(v29);
        return v38;
      }
    }

    __break(1u);
    goto LABEL_12;
  }

  uint64_t v30 = Date.init()();
  double v31 = Date.timeIntervalSince1970.getter(v30);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  double v32 = v31 * 1000000000.0;
  if ((~COERCE__INT64(v31 * 1000000000.0) & 0x7FF0000000000000LL) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v32 <= -1.0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v32 < 1.84467441e19)
  {
    unint64_t v33 = (unint64_t)v32;
    unint64_t v38 = 0LL;
    unint64_t v39 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(47LL);
    swift_bridgeObjectRelease(v39);
    unint64_t v38 = 0xD00000000000002DLL;
    unint64_t v39 = 0x8000000100101520LL;
    unint64_t v37 = v33;
    v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v35 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v35);
    return v38;
  }

uint64_t sub_1000AC944()
{
  return 0LL;
}

uint64_t sub_1000AC94C()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds;
  swift_beginAccess(v0 + OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000AC990(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

void *sub_1000AC9D8(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_1000ACA20()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds;
  swift_beginAccess(v0 + OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000ACA64(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

void *sub_1000ACAAC(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

id sub_1000ACAF0()
{
  return [objc_allocWithZone(v0) init];
}

id sub_1000ACB10()
{
  *(void *)&v0[OBJC_IVAR___APSServerTimeTracker__mostRecentServerTimeInNanoSeconds] = 0LL;
  *(void *)&v0[OBJC_IVAR___APSServerTimeTracker__alignedMonotonicTimeInNanoSeconds] = 0LL;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerTimeTracker();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000ACBAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerTimeTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ServerTimeTracker()
{
  return objc_opt_self(&OBJC_CLASS___APSServerTimeTracker);
}

double sub_1000ACC00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    a2 = a1;
  }
  return *(double *)&a2;
}

BOOL sub_1000ACC10(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  BOOL v8 = *(double *)&a1 == *(double *)&a5;
  if ((a8 & 1) == 0) {
    BOOL v8 = 0;
  }
  BOOL v9 = *(double *)&a1 == *(double *)&a5;
  if (a3 != a7) {
    BOOL v9 = 0;
  }
  if ((a8 & 1) != 0) {
    BOOL v9 = 0;
  }
  if ((a4 & 1) != 0) {
    return v8;
  }
  else {
    return v9;
  }
}

BOOL sub_1000ACC60(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0) {
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && v2 == v3;
  }
  if ((*(_BYTE *)(a2 + 24) & 1) != 0) {
    return 0LL;
  }
  BOOL v5 = v2 == v3;
  return *(void *)(a1 + 16) == *(void *)(a2 + 16) && v5;
}

uint64_t sub_1000ACCD0()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_defaults));
}

uint64_t sub_1000ACCE0()
{
  return 0LL;
}

uint64_t sub_1000ACCF4()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase;
  swift_beginAccess(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000ACD40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = v4 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase;
  uint64_t result = swift_beginAccess(v9, v11, 1LL, 0LL);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + _Block_object_dispose(va, 8) = a2;
  *(void *)(v9 + 16) = a3;
  *(_BYTE *)(v9 + memset(v17, 0, 24) = a4;
  return result;
}

void *sub_1000ACDAC(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_1000ACDF0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases);
  swift_beginAccess(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_1000ACE38(uint64_t a1)
{
  double v3 = (uint64_t *)(v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *double v3 = a1;
  return swift_release(v4);
}

void *sub_1000ACE88(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1000ACECC()
{
  return 0LL;
}

uint64_t sub_1000ACED8()
{
  return sub_1000ACF40(&OBJC_IVAR___APSDefaultConnectionRetryStateManager_timeRemainingInPhase);
}

uint64_t sub_1000ACEE4(uint64_t a1, char a2)
{
  return sub_1000ACF90(a1, a2, &OBJC_IVAR___APSDefaultConnectionRetryStateManager_timeRemainingInPhase);
}

void *sub_1000ACEF0(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1000ACF34()
{
  return sub_1000ACF40(&OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPresences);
}

uint64_t sub_1000ACF40(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return *(void *)v2;
}

uint64_t sub_1000ACF84(uint64_t a1, char a2)
{
  return sub_1000ACF90(a1, a2, &OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPresences);
}

uint64_t sub_1000ACF90(uint64_t a1, char a2, void *a3)
{
  uint64_t v6 = v3 + *a3;
  uint64_t result = swift_beginAccess(v6, v8, 1LL, 0LL);
  *(void *)uint64_t v6 = a1;
  *(_BYTE *)(v6 + _Block_object_dispose(va, 8) = a2 & 1;
  return result;
}

void *sub_1000ACFE8(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

_UNKNOWN **sub_1000AD02C()
{
  return &off_100121440;
}

uint64_t sub_1000AD038()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
  swift_beginAccess(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

void sub_1000AD080(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
  swift_beginAccess((char *)v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases, v12, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *v3;
  unint64_t v6 = *(void *)(*v3 + 16);
  if (v6)
  {
    uint64_t v7 = sub_1000AE8FC(&qword_10014E2E8);
    BOOL v8 = (void *)swift_allocObject(v7, 32 * v6 + 40, 7LL);
    int64_t v9 = j__malloc_size(v8);
    uint64_t v10 = v9 - 40;
    if (v9 < 40) {
      uint64_t v10 = v9 - 9;
    }
    v8[2] = v10 >> 5;
    v8[3] = 0LL;
    void v8[4] = 0LL;
    sub_1000AEAC4(v8 + 2, v8 + 5, v6, v5);
  }

  else
  {
    uint64_t v11 = swift_bridgeObjectRetain(v5);
    BOOL v8 = *(void **)_emptyDequeStorage.unsafeMutableAddressor(v11);
    swift_retain(v8);
    swift_bridgeObjectRelease(v5);
  }

  (*(void (**)(void *))((swift_isaMask & *v1) + 0xA8LL))(v8);
  sub_1000AE738();
}

void (*sub_1000AD180(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_1000AD1D8;
}

void sub_1000AD1D8(void *a1, char a2)
{
  uint64_t v3 = (void *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = v3[3];
    uint64_t v4 = v3[4];
    uint64_t v6 = *(void *)(v5 + v4);
    unint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = sub_1000AE8FC(&qword_10014E2E8);
      int64_t v9 = (void *)swift_allocObject(v8, 32 * v7 + 40, 7LL);
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 40;
      if (v10 < 40) {
        uint64_t v11 = v10 - 9;
      }
      v9[2] = v11 >> 5;
      v9[3] = 0LL;
      v9[4] = 0LL;
      sub_1000AEAC4(v9 + 2, v9 + 5, v7, v6);
    }

    else
    {
      uint64_t v12 = swift_bridgeObjectRetain(*(void *)(v5 + v4));
      int64_t v9 = *(void **)_emptyDequeStorage.unsafeMutableAddressor(v12);
      swift_retain(v9);
      swift_bridgeObjectRelease(v6);
    }

    (*(void (**)(void *))((swift_isaMask & *(void *)v3[3]) + 0xA8LL))(v9);
    sub_1000AE738();
  }

  free(v3);
}

uint64_t sub_1000AD2C8()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime;
  swift_beginAccess(v0 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000AD30C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

void *sub_1000AD354(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

double sub_1000AD41C()
{
  double v1 = COERCE_DOUBLE((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88LL))());
  if (v3 == -1) {
    return 0.0;
  }
  if ((v3 & 1) != 0) {
    return v1;
  }
  return v2;
}

BOOL sub_1000AD540()
{
  *(double *)&uint64_t v1 = COERCE_DOUBLE((*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88LL))());
  if (v3 == -1)
  {
    sub_1000AC284();
    uint64_t v6 = (void *)static OS_os_log.default.getter();
    uint64_t v7 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Unexpectedly found no current phase!",  36LL,  2LL,  &_mh_execute_header,  v6,  v7,  &_swiftEmptyArrayStorage);

    return 0LL;
  }

  else
  {
    if ((v3 & 1) != 0) {
      double v4 = *(double *)&v1;
    }
    else {
      double v4 = v2;
    }
    return v4 > 0.0;
  }

void sub_1000AD5E4()
{
  BYTE5(qword_10014EDC0) = 0;
  HIWORD(qword_10014EDC0) = -5120;
}

uint64_t *sub_1000AD610()
{
  if (qword_10014EA90 != -1) {
    swift_once(&qword_10014EA90, sub_1000AD5E4);
  }
  return &qword_10014EDB8;
}

uint64_t sub_1000AD650()
{
  return sub_1000AD888(&qword_10014EA90, &qword_10014EDB8, &qword_10014EDC0);
}

void sub_1000AD670()
{
  qword_10014EDC8 = 0x68702D6C616E6966LL;
  qword_10014EDD0 = 0xEB00000000657361LL;
}

uint64_t *sub_1000AD69C()
{
  if (qword_10014EA98 != -1) {
    swift_once(&qword_10014EA98, sub_1000AD670);
  }
  return &qword_10014EDC8;
}

uint64_t sub_1000AD6DC()
{
  return sub_1000AD888(&qword_10014EA98, &qword_10014EDC8, &qword_10014EDD0);
}

void sub_1000AD6FC()
{
  qword_10014EDD8 = 0x6E6F697461727564LL;
  qword_10014EDE0 = 0xE800000000000000LL;
}

uint64_t *sub_1000AD720()
{
  if (qword_10014EAA0 != -1) {
    swift_once(&qword_10014EAA0, sub_1000AD6FC);
  }
  return &qword_10014EDD8;
}

uint64_t sub_1000AD760()
{
  return sub_1000AD888(&qword_10014EAA0, &qword_10014EDD8, &qword_10014EDE0);
}

void sub_1000AD780()
{
  qword_10014EDE8 = 0x79616C6564LL;
  qword_10014EDF0 = 0xE500000000000000LL;
}

uint64_t *sub_1000AD7A0()
{
  if (qword_10014EAA8 != -1) {
    swift_once(&qword_10014EAA8, sub_1000AD780);
  }
  return &qword_10014EDE8;
}

uint64_t sub_1000AD7E0()
{
  return sub_1000AD888(&qword_10014EAA8, &qword_10014EDE8, &qword_10014EDF0);
}

void sub_1000AD800()
{
  qword_10014EDF8 = 0x65636E6573657270LL;
  qword_10014EE00 = 0xE900000000000073LL;
}

uint64_t *sub_1000AD828()
{
  if (qword_10014EAB0 != -1) {
    swift_once(&qword_10014EAB0, sub_1000AD800);
  }
  return &qword_10014EDF8;
}

uint64_t sub_1000AD868()
{
  return sub_1000AD888(qword_10014EAB0, &qword_10014EDF8, &qword_10014EE00);
}

uint64_t sub_1000AD888(void *a1, uint64_t *a2, void *a3)
{
  if (*a1 != -1LL) {
    swift_once();
  }
  uint64_t v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

uint64_t sub_1000AD8D8()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  type metadata accessor for DefaultsDebugOverrides();
  id v3 = sub_1000ACAF0();
  uint64_t v4 = (*(uint64_t (**)(id))(ObjectType + 296))(v3);
  swift_deallocPartialClassInstance(v1, ObjectType, 104LL, 7LL);
  return v4;
}

void *sub_1000AD9A4(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1000AD9D4(a1);
}

void *sub_1000AD9D4(void *a1)
{
  id v3 = &v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_currentPhase];
  *((void *)v3 + 1) = 0LL;
  *((void *)v3 + 2) = 0LL;
  *(void *)id v3 = 0LL;
  _BYTE v3[24] = -1;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases] = 0LL;
  uint64_t v4 = &v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_timeRemainingInPhase];
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  uint64_t v5 = &v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPresences];
  *(void *)uint64_t v5 = 0LL;
  void v5[8] = 1;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases] = &off_1001214E0;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_connectionAttemptTime] = 0LL;
  *(void *)&v1[OBJC_IVAR___APSDefaultConnectionRetryStateManager_defaults] = a1;
  v28.receiver = v1;
  v28.super_class = (Class)type metadata accessor for DefaultConnectionRetryStateManager();
  swift_unknownObjectRetain(a1);
  uint64_t v6 = objc_msgSendSuper2(&v28, "init");
  id v7 = [a1 connectionRetryPhases];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

    uint64_t v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v6) + 0x130LL))(v9);
    swift_bridgeObjectRelease(v9);
    uint64_t v11 = (void *)((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
    swift_beginAccess((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases, &v25, 1LL, 0LL);
    uint64_t v12 = *v11;
    *uint64_t v11 = v10;
    swift_bridgeObjectRelease(v12);
  }

  uint64_t v13 = (void *)((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases);
  swift_beginAccess((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_retryPhases, v27, 0LL, 0LL);
  uint64_t v14 = *v13;
  unint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = sub_1000AE8FC(&qword_10014E2E8);
    Swift::String v17 = (void *)swift_allocObject(v16, 32 * v15 + 40, 7LL);
    int64_t v18 = j__malloc_size(v17);
    uint64_t v19 = v18 - 40;
    if (v18 < 40) {
      uint64_t v19 = v18 - 9;
    }
    v17[2] = v19 >> 5;
    v17[3] = 0LL;
    void v17[4] = 0LL;
    sub_1000AEAC4(v17 + 2, v17 + 5, v15, v14);
  }

  else
  {
    uint64_t v20 = swift_bridgeObjectRetain(v14);
    Swift::String v17 = *(void **)_emptyDequeStorage.unsafeMutableAddressor(v20);
    swift_retain(v17);
    swift_bridgeObjectRelease(v14);
  }

  Swift::String v21 = (void *)((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases);
  swift_beginAccess((char *)v6 + OBJC_IVAR___APSDefaultConnectionRetryStateManager_remainingPhases, v26, 1LL, 0LL);
  uint64_t v22 = *v21;
  *Swift::String v21 = (uint64_t)v17;
  swift_release(v22);
  sub_1000AE738();

  swift_unknownObjectRelease(a1, v23);
  return v6;
}

uint64_t sub_1000ADC2C(uint64_t a1)
{
  double v2 = v1;
  if (qword_10014EA90 == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_57:
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    goto LABEL_58;
  }

  swift_once(&qword_10014EA90, sub_1000AD5E4);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_57;
  }
LABEL_3:
  uint64_t v4 = qword_10014EDC0;
  uint64_t v5 = qword_10014EDB8;
  swift_bridgeObjectRetain(qword_10014EDC0);
  unint64_t v6 = sub_1000AEBAC(v5, v4);
  if ((v7 & 1) == 0)
  {
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    uint64_t v15 = v4;
LABEL_11:
    swift_bridgeObjectRelease(v15);
    goto LABEL_58;
  }

  sub_1000AEC50(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v55);
  swift_bridgeObjectRelease(v4);
  if (!*((void *)&v56 + 1))
  {
LABEL_58:
    uint64_t v9 = sub_1000AEC10((uint64_t)&v55);
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE8LL))(v9);
  }

  uint64_t v8 = sub_1000AE8FC(&qword_10014E300);
  uint64_t v9 = swift_dynamicCast(&v54, &v55, (char *)&type metadata for Any + 8, v8, 6LL);
  if ((v9 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE8LL))(v9);
  }
  uint64_t v10 = v54;
  if (qword_10014EA98 == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_8;
    }
LABEL_62:
    __int128 v55 = 0u;
    __int128 v56 = 0u;
LABEL_63:
    uint64_t v15 = v10;
    goto LABEL_11;
  }

  swift_once(&qword_10014EA98, sub_1000AD670);
  if (!*(void *)(a1 + 16)) {
    goto LABEL_62;
  }
LABEL_8:
  uint64_t v11 = qword_10014EDD0;
  uint64_t v12 = qword_10014EDC8;
  swift_bridgeObjectRetain(qword_10014EDD0);
  unint64_t v13 = sub_1000AEBAC(v12, v11);
  if ((v14 & 1) != 0)
  {
    sub_1000AEC50(*(void *)(a1 + 56) + 32 * v13, (uint64_t)&v55);
  }

  else
  {
    __int128 v55 = 0u;
    __int128 v56 = 0u;
  }

  swift_bridgeObjectRelease(v11);
  if (!*((void *)&v56 + 1)) {
    goto LABEL_63;
  }
  uint64_t v16 = sub_1000AE8FC(&qword_10014E308);
  if ((swift_dynamicCast(&v54, &v55, (char *)&type metadata for Any + 8, v16, 6LL) & 1) == 0)
  {
LABEL_54:
    uint64_t v51 = (char *)v10;
    goto LABEL_55;
  }

  uint64_t v17 = v54;
  uint64_t v18 = *(void *)(v10 + 16);
  if (v18)
  {
    uint64_t v53 = v54;
    uint64_t v19 = 0LL;
    uint64_t v20 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v21 = *(void *)(v10 + 8 * v19 + 32);
      uint64_t v22 = qword_10014EAA0;
      swift_bridgeObjectRetain(v21);
      if (v22 == -1)
      {
        if (!*(void *)(v21 + 16)) {
          goto LABEL_47;
        }
      }

      else
      {
        swift_once(&qword_10014EAA0, sub_1000AD6FC);
        if (!*(void *)(v21 + 16)) {
          goto LABEL_47;
        }
      }

      uint64_t v23 = qword_10014EDE0;
      uint64_t v24 = qword_10014EDD8;
      swift_bridgeObjectRetain(qword_10014EDE0);
      unint64_t v25 = sub_1000AEBAC(v24, v23);
      if ((v26 & 1) == 0) {
        goto LABEL_48;
      }
      uint64_t v27 = *(void *)(*(void *)(v21 + 56) + 8 * v25);
      swift_bridgeObjectRelease(v23);
      if (qword_10014EAA8 == -1)
      {
        if (!*(void *)(v21 + 16)) {
          goto LABEL_47;
        }
      }

      else
      {
        swift_once(&qword_10014EAA8, sub_1000AD780);
        if (!*(void *)(v21 + 16))
        {
LABEL_47:
          swift_bridgeObjectRelease(v21);
          uint64_t v23 = v53;
          goto LABEL_53;
        }
      }

      uint64_t v23 = qword_10014EDF0;
      uint64_t v28 = qword_10014EDE8;
      swift_bridgeObjectRetain(qword_10014EDF0);
      unint64_t v29 = sub_1000AEBAC(v28, v23);
      if ((v30 & 1) == 0)
      {
LABEL_48:
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v53);
        goto LABEL_53;
      }

      uint64_t v31 = *(void *)(*(void *)(v21 + 56) + 8 * v29);
      swift_bridgeObjectRelease(v23);
      if (qword_10014EAB0[0] == -1)
      {
        if (!*(void *)(v21 + 16)) {
          goto LABEL_52;
        }
      }

      else
      {
        swift_once(qword_10014EAB0, sub_1000AD800);
        if (!*(void *)(v21 + 16)) {
          goto LABEL_52;
        }
      }

      uint64_t v32 = qword_10014EE00;
      uint64_t v33 = qword_10014EDF8;
      swift_bridgeObjectRetain(qword_10014EE00);
      unint64_t v34 = sub_1000AEBAC(v33, v32);
      if ((v35 & 1) == 0) {
        break;
      }
      uint64_t v36 = *(void *)(*(void *)(v21 + 56) + 8 * v34);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v21);
      if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
        uint64_t v20 = sub_1000AE9B8(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
      }
      unint64_t v38 = *((void *)v20 + 2);
      unint64_t v37 = *((void *)v20 + 3);
      if (v38 >= v37 >> 1) {
        uint64_t v20 = sub_1000AE9B8((char *)(v37 > 1), v38 + 1, 1, v20);
      }
      ++v19;
      *((void *)v20 + 2) = v38 + 1;
      unint64_t v39 = &v20[32 * v38];
      *((double *)v39 + 4) = (double)v27;
      *((double *)v39 + 5) = (double)v31;
      *((void *)v39 + 6) = v36;
      v39[56] = 0;
      if (v18 == v19)
      {
        swift_bridgeObjectRelease(v10);
        uint64_t v17 = v53;
        goto LABEL_39;
      }
    }

    swift_bridgeObjectRelease(v32);
LABEL_52:
    swift_bridgeObjectRelease(v21);
    uint64_t v23 = (uint64_t)v20;
    uint64_t v20 = (char *)v10;
    uint64_t v10 = v53;
LABEL_53:
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    goto LABEL_54;
  }

  swift_bridgeObjectRelease(v10);
  uint64_t v20 = (char *)&_swiftEmptyArrayStorage;
LABEL_39:
  if (qword_10014EAA8 == -1)
  {
    if (!*(void *)(v17 + 16))
    {
LABEL_50:
      swift_bridgeObjectRelease(v17);
      uint64_t v51 = v20;
LABEL_55:
      uint64_t v9 = swift_bridgeObjectRelease(v51);
      return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE8LL))(v9);
    }
  }

  else
  {
    swift_once(&qword_10014EAA8, sub_1000AD780);
    if (!*(void *)(v17 + 16)) {
      goto LABEL_50;
    }
  }

  uint64_t v40 = qword_10014EDF0;
  uint64_t v41 = qword_10014EDE8;
  swift_bridgeObjectRetain(qword_10014EDF0);
  unint64_t v42 = sub_1000AEBAC(v41, v40);
  if ((v43 & 1) == 0)
  {
    swift_bridgeObjectRelease(v40);
    goto LABEL_50;
  }

  uint64_t v44 = *(void *)(*(void *)(v17 + 56) + 8 * v42);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v17);
  if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
    uint64_t v20 = sub_1000AE9B8(0LL, *((void *)v20 + 2) + 1LL, 1, v20);
  }
  double v45 = (double)v44;
  unint64_t v47 = *((void *)v20 + 2);
  unint64_t v46 = *((void *)v20 + 3);
  if (v47 >= v46 >> 1) {
    uint64_t v20 = sub_1000AE9B8((char *)(v46 > 1), v47 + 1, 1, v20);
  }
  *((void *)v20 + 2) = v47 + 1;
  int v48 = &v20[32 * v47];
  *((double *)v48 + 4) = v45;
  *((void *)v48 + 5) = 0LL;
  *((void *)v48 + 6) = 0LL;
  v48[56] = 1;
  sub_1000AC284();
  uint64_t v49 = (void *)static OS_os_log.default.getter();
  uint64_t v50 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Properly loaded retry phases from defaults.",  43LL,  2LL,  &_mh_execute_header,  v49,  v50,  &_swiftEmptyArrayStorage);

  return (uint64_t)v20;
}

uint64_t sub_1000AE218()
{
  __uint64_t v1 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  return (*(uint64_t (**)(__uint64_t))((swift_isaMask & *v0) + 0x108LL))(v1);
}

uint64_t sub_1000AE2A0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x108LL))(0LL);
}

void sub_1000AE314()
{
  __uint64_t v1 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  double v2 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x100LL);
  if (v2())
  {
    if (v2() < v1)
    {
      uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8LL))();
      if ((v4 & 1) == 0)
      {
        double v5 = *(double *)&v3;
        unint64_t v6 = v2();
        if (v1 < v6)
        {
          __break(1u);
        }

        else
        {
          double v7 = (double)(v1 - v6) / 1000000000.0;
          if (v7 >= v5) {
            sub_1000AE738();
          }
          else {
            (*(void (**)(double, void))((swift_isaMask & *v0) + 0xC0LL))(v5 - v7, 0LL);
          }
        }
      }
    }
  }

void sub_1000AE438()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8LL))();
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = sub_1000AE8FC(&qword_10014E2E8);
    double v5 = (void *)swift_allocObject(v4, 32 * v3 + 40, 7LL);
    int64_t v6 = j__malloc_size(v5);
    uint64_t v7 = v6 - 40;
    if (v6 < 40) {
      uint64_t v7 = v6 - 9;
    }
    v5[2] = v7 >> 5;
    v5[3] = 0LL;
    void v5[4] = 0LL;
    sub_1000AEAC4(v5 + 2, v5 + 5, v3, v2);
  }

  else
  {
    double v5 = *(void **)_emptyDequeStorage.unsafeMutableAddressor(v1);
    swift_retain(v5);
  }

  swift_bridgeObjectRelease(v2);
  (*(void (**)(void *))((swift_isaMask & *v0) + 0xA8LL))(v5);
  sub_1000AE738();
}

void sub_1000AE54C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD0LL))();
  if ((v3 & 1) == 0)
  {
    uint64_t v14 = v2;
    sub_1000AC284();
    uint64_t v4 = (os_log_s *)((uint64_t (*)(void))static OS_os_log.default.getter)();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      int64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)int64_t v6 = 134217984;
      swift_beginAccess(&v14, v11, 0LL, 0LL);
      uint64_t v12 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Noting a presence failure, remaining presences %ld", v6, 0xCu);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    swift_beginAccess(&v14, &v12, 1LL, 0LL);
    uint64_t v7 = v14 - 1;
    if (__OFSUB__(v14, 1LL))
    {
      __break(1u);
    }

    else
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, void))((swift_isaMask & *v1) + 0xD8LL))(v14 - 1, 0LL);
      if (v7 <= 0)
      {
        uint64_t v9 = (void *)static OS_os_log.default.getter(v8);
        uint64_t v10 = static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)( "Presence failure limit reached, moving to next phase",  52LL,  2LL,  &_mh_execute_header,  v9,  v10,  &_swiftEmptyArrayStorage);

        sub_1000AE738();
      }
    }
  }

void sub_1000AE738()
{
  uint64_t v1 = v0;
  char v3 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))((swift_isaMask & *v0) + 0xB0LL))(v17);
  if (!*(void *)v2) {
    goto LABEL_16;
  }
  if (*(uint64_t *)(*(void *)v2 + 24LL) < 1)
  {
    v3(v17, 0LL);
    sub_1000AC284();
    uint64_t v15 = (void *)static OS_os_log.default.getter();
    uint64_t v16 = static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)( "Already in the final phase",  26LL,  2LL,  &_mh_execute_header,  v15,  v16,  &_swiftEmptyArrayStorage);

    return;
  }

  uint64_t v4 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    sub_1000AEE78();
  }
  os_log_type_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 32LL);
  uint64_t v7 = v6 + 1;
  if (__OFADD__(v6, 1LL))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return;
  }

  uint64_t v8 = &v5[4 * v6];
  uint64_t v10 = v8[5];
  uint64_t v9 = v8[6];
  uint64_t v11 = v8[7];
  uint64_t v12 = *((unsigned __int8 *)v8 + 64);
  uint64_t v13 = v5[3];
  if (v7 >= v5[2]) {
    uint64_t v7 = 0LL;
  }
  void v5[4] = v7;
  if (__OFSUB__(v13, 1LL)) {
    goto LABEL_15;
  }
  v5[3] = v13 - 1;
  v3(v17, 0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((swift_isaMask & *v1) + 0x90LL))(v10, v9, v11, v12);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v1) + 0xC0LL);
  if ((v12 & 1) != 0)
  {
    v14(0LL, 1LL);
    (*(void (**)(void, uint64_t))((swift_isaMask & *v1) + 0xD8LL))(0LL, 1LL);
  }

  else
  {
    v14(v10, 0LL);
    (*(void (**)(uint64_t, void))((swift_isaMask & *v1) + 0xD8LL))(v11, 0LL);
  }

uint64_t sub_1000AE8FC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

id sub_1000AE940()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultConnectionRetryStateManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

char *sub_1000AE9B8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1000AE8FC(&qword_10014E338);
      uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32]) {
          memmove(v14, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000AF064(0LL, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000AEAC4(void *result, void *__dst, unint64_t a3, uint64_t a4)
{
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v5 = (uint64_t)result;
  unint64_t v6 = *(void *)(a4 + 16);
  if (!v6)
  {
LABEL_9:
    *(void *)(v5 + _Block_object_dispose(va, 8) = a3;
    return result;
  }

  if (v6 > a3) {
    goto LABEL_11;
  }
  if (a4 + 32 >= (unint64_t)__dst + 32 * v6 || a4 + 32 + 32 * v6 <= (unint64_t)__dst)
  {
    uint64_t result = memcpy(__dst, (const void *)(a4 + 32), 32 * v6);
    goto LABEL_9;
  }

uint64_t type metadata accessor for DefaultConnectionRetryStateManager()
{
  return objc_opt_self(&OBJC_CLASS___APSDefaultConnectionRetryStateManager);
}

unint64_t sub_1000AEBAC(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_1000AED98(a1, a2, v5);
}

uint64_t sub_1000AEC10(uint64_t a1)
{
  uint64_t v2 = sub_1000AE8FC(&qword_10014E2F8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000AEC50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + memset(v17, 0, 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for RetryPhase(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithCopy for RetryPhase(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RetryPhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RetryPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + memset(v17, 0, 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + memset(v17, 0, 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1000AED64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1000AED6C(uint64_t result, char a2)
{
  *(_BYTE *)(result + memset(v17, 0, 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RetryPhase()
{
  return &type metadata for RetryPhase;
}

ValueMetadata *type metadata accessor for DefaultConnectionRetryStateManager.DictionaryRepresentation()
{
  return &type metadata for DefaultConnectionRetryStateManager.DictionaryRepresentation;
}

unint64_t sub_1000AED98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

uint64_t sub_1000AEE78()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (uint64_t *)(*v0 + 16);
  uint64_t v3 = *v2;
  uint64_t v4 = sub_1000AE8FC(&qword_10014E2E8);
  uint64_t v5 = swift_allocObject(v4, 32 * v3 + 40, 7LL);
  __int128 v6 = *(_OWORD *)(v1 + 24);
  *(void *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + memset(v17, 0, 24) = v6;
  uint64_t result = swift_release(v1);
  *uint64_t v0 = v5;
  return result;
}

void sub_1000AEF0C(int a1, char *__dst, void *a3, char *__src)
{
  uint64_t v4 = a3[2];
  uint64_t v5 = *a3 - v4;
  if (__OFSUB__(*a3, v4))
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v7 = a3[1];
  if (v5 >= v7)
  {
    uint64_t v10 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v9 = a3[1];
    if (v7 < 1) {
      goto LABEL_14;
    }
    goto LABEL_7;
  }

  uint64_t v8 = v7 - v5;
  if (__OFSUB__(v7, v5))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *a3 - v4;
  uint64_t v10 = __src;
  if (v5 < 1) {
    goto LABEL_14;
  }
LABEL_7:
  if (!__src)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    char v20 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v20,  1092LL,  0);
    __break(1u);
    return;
  }

  uint64_t v11 = 32 * v4;
  uint64_t v12 = &__src[v11];
  uint64_t v13 = &__dst[v11];
  size_t v14 = 32 * v9;
  uint64_t v15 = &__dst[32 * v9 + v11];
  uint64_t v16 = &v12[32 * v9];
  if (v12 < v15 && v13 < v16) {
    goto LABEL_28;
  }
  memcpy(v13, v12, v14);
LABEL_14:
  if (v5 < v7 && v8 >= 1)
  {
    if (v10)
    {
      size_t v19 = 32 * v8;
      if (&__dst[32 * v8] <= v10 || &v10[v19] <= __dst)
      {
        memcpy(__dst, v10, v19);
        return;
      }

      goto LABEL_28;
    }

    goto LABEL_27;
  }

char *sub_1000AF064(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000AF16C()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___APSUserDependencies_clientIdentityProvider));
}

uint64_t sub_1000AF19C()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___APSUserDependencies_systemTokenStorage));
}

uint64_t sub_1000AF1CC()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___APSUserDependencies_userPreferences));
}

uint64_t sub_1000AF1FC()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR___APSUserDependencies_userAppIDManager));
}

id sub_1000AF20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_clientIdentityProvider] = a1;
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_systemTokenStorage] = a2;
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_userPreferences] = a3;
  *(void *)&v9[OBJC_IVAR___APSUserDependencies_userAppIDManager] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, "init");
}

id sub_1000AF298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_clientIdentityProvider] = a1;
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_systemTokenStorage] = a2;
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_userPreferences] = a3;
  *(void *)&v4[OBJC_IVAR___APSUserDependencies_userAppIDManager] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for UserDependencies();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for UserDependencies()
{
  return objc_opt_self(&OBJC_CLASS___APSUserDependencies);
}

uint64_t sub_1000AF41C()
{
  uint64_t v20 = 0LL;
  unint64_t v21 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(96LL);
  v1._countAndFlagsBits = 0xD000000000000019LL;
  v1._object = (void *)0x8000000100101AF0LL;
  String.append(_:)(v1);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_clientIdentityProvider);
  uint64_t v2 = sub_1000AE8FC(&qword_10014E3C0);
  v3._countAndFlagsBits = sub_1000B1200((uint64_t)&v19, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0xD000000000000016LL;
  v5._object = (void *)0x8000000100101B10LL;
  String.append(_:)(v5);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_systemTokenStorage);
  uint64_t v6 = sub_1000AE8FC(&qword_10014E3C8);
  v7._countAndFlagsBits = sub_1000B1200((uint64_t)&v19, v6);
  uint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._object = (void *)0x8000000100101B30LL;
  v9._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v9);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_userPreferences);
  uint64_t v10 = sub_1000AE8FC(&qword_10014E430);
  v11._countAndFlagsBits = sub_1000B1200((uint64_t)&v19, v10);
  uint64_t v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0xD000000000000014LL;
  v13._object = (void *)0x8000000100101B50LL;
  String.append(_:)(v13);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR___APSUserDependencies_userAppIDManager);
  uint64_t v14 = sub_1000AE8FC(&qword_10014E438);
  v15._countAndFlagsBits = sub_1000B1200((uint64_t)&v19, v14);
  uint64_t v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 15931LL;
  v17._object = (void *)0xE200000000000000LL;
  String.append(_:)(v17);
  return v20;
}

void sub_1000AF5E4()
{
}

id sub_1000AF63C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UserDependencies();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1000AF6C4()
{
  id v1 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v2 = [v0 initWithUserDefaults:v1];

  return v2;
}

id sub_1000AF780(uint64_t a1)
{
  Swift::String v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000AF7CC(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DefaultsDebugOverrides();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for DefaultsDebugOverrides()
{
  return objc_opt_self(&OBJC_CLASS___APSDefaultsDebugOverrides);
}

id sub_1000AF87C()
{
  return *(id *)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
}

id sub_1000AF88C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultsDebugOverrides();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_1000AF8CC()
{
  return &unk_100121640;
}

unint64_t sub_1000AF8D8()
{
  return 0xD00000000000001CLL;
}

void *sub_1000AF8F4()
{
  return &unk_100121650;
}

unint64_t sub_1000AF900()
{
  return 0xD00000000000001FLL;
}

void *sub_1000AF91C()
{
  return &unk_100121660;
}

unint64_t sub_1000AF928()
{
  return 0xD000000000000017LL;
}

void *sub_1000AF944()
{
  return &unk_100121670;
}

unint64_t sub_1000AF950()
{
  return 0xD000000000000017LL;
}

void *sub_1000AF96C()
{
  return &unk_100121680;
}

unint64_t sub_1000AF978()
{
  return 0xD000000000000017LL;
}

id sub_1000AFA0C()
{
  id v1 = *(void **)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 BOOLForKey:v2];

  return v3;
}

__CFString *sub_1000AFA70(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v22 = 45LL;
  unint64_t v23 = 0xE100000000000000LL;
  uint64_t result = sub_100005B48(a1);
  if (result)
  {
    objc_super v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)(result, v4);
    uint64_t v7 = v6;

    Swift::String v8 = String.lowercased()();
    swift_bridgeObjectRelease(v7);
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v8._object);
    v9._countAndFlagsBits = v22;
    uint64_t v10 = (void *)v23;
    uint64_t v22 = 0xD00000000000001FLL;
    unint64_t v23 = 0x8000000100101E80LL;
    v9._object = v10;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v10);
    Swift::String v11 = *(void **)(v2 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0x8000000100101E80LL);
    id v13 = [v11 objectForKey:v12];

    if (v13)
    {
      _bridgeAnyObjectToAny(_:)(&v20, v13);
      swift_unknownObjectRelease(v13, v14);
    }

    else
    {
      __int128 v20 = 0u;
      __int128 v21 = 0u;
    }

    sub_1000AFCA8((uint64_t)&v20, (uint64_t)&v22);
    if (v24)
    {
    }

    else
    {
      sub_1000AEC10((uint64_t)&v22);
    }

    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v11 objectForKey:v15];

    if (v16)
    {
      _bridgeAnyObjectToAny(_:)(&v20, v16);
      swift_unknownObjectRelease(v16, v17);
    }

    else
    {
      __int128 v20 = 0u;
      __int128 v21 = 0u;
    }

    sub_1000AFCA8((uint64_t)&v20, (uint64_t)&v22);
    if (v24)
    {
      if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
      {
LABEL_14:
        Swift::Int v18 = v19;
        sub_1000AFCF0();
        return (__CFString *)NSNumber.init(integerLiteral:)(v18).super.super.isa;
      }
    }

    else
    {
      sub_1000AEC10((uint64_t)&v22);
    }

    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000AFCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000AE8FC(&qword_10014E2F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000AFCF0()
{
  unint64_t result = qword_10014E4D8;
  if (!qword_10014E4D8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10014E4D8);
  }

  return result;
}

NSNumber sub_1000AFDA4()
{
  return sub_1000AFFA0();
}

uint64_t sub_1000AFEA8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 dictionaryForKey:v2];

  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  return v4;
}

NSNumber sub_1000AFF8C()
{
  return sub_1000AFFA0();
}

NSNumber sub_1000AFFA0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___APSDefaultsDebugOverrides_userDefaults);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 objectForKey:v2];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v8, v3);
    swift_unknownObjectRelease(v3, v4);
  }

  else
  {
    memset(v8, 0, sizeof(v8));
  }

  sub_1000AFCA8((uint64_t)v8, (uint64_t)v9);
  if (v10)
  {
    if ((swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
    {
      Swift::Int v5 = v7;
      sub_1000AFCF0();
      return NSNumber.init(integerLiteral:)(v5);
    }
  }

  else
  {
    sub_1000AEC10((uint64_t)v9);
  }

  return 0LL;
}

ValueMetadata *type metadata accessor for DefaultsDebugOverrides.DefaultsKeys()
{
  return &type metadata for DefaultsDebugOverrides.DefaultsKeys;
}

id sub_1000B009C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoOpClientIdentityProvider();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for NoOpClientIdentityProvider()
{
  return objc_opt_self(&OBJC_CLASS___APSNoOpClientIdentityProvider);
}

id sub_1000B0128()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoOpClientIdentityProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1000B0158()
{
  unint64_t v0 = sub_1000AC284();
  uint64_t v1 = (void *)static OS_os_log.default.getter(v0);
  uint64_t v2 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "No host identity to fetch with no op identity provider, returning empty host certificate info which will be ignored by the courier",  130LL,  2LL,  &_mh_execute_header,  v1,  v2,  &_swiftEmptyArrayStorage);

  id result = [objc_allocWithZone((Class)APSDProtoHostCertificateInfo) init];
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B02B4(uint64_t a1, uint64_t (*a2)(void, void *))
{
  if (a2) {
    return a2(0LL, &_swiftEmptyArrayStorage);
  }
  return result;
}

uint64_t sub_1000B0388()
{
  return 0LL;
}

uint64_t sub_1000B03BC(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000B03D4()
{
  return 1LL;
}

uint64_t sub_1000B03E0()
{
  return 0LL;
}

uint64_t sub_1000B03F0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

const char *sub_1000B0434()
{
  return "APS";
}

const char *sub_1000B0448()
{
  return "BAASupport";
}

void sub_1000B045C()
{
}

Swift::Int sub_1000B0480()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B04C0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000B0544()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSProcessModeUserTracker_responder;
  swift_beginAccess(v0 + OBJC_IVAR___APSProcessModeUserTracker_responder, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_1000B05DC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR___APSProcessModeUserTracker_responder;
  swift_beginAccess(v3, v6, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1, v4);
}

void (*sub_1000B0634(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___APSProcessModeUserTracker_responder;
  v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_1000B06A4;
}

void sub_1000B06A4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_unknownObjectWeakAssign(*(void *)(*(void *)a1 + 32LL) + *(void *)(*(void *)a1 + 40LL), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v5);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v6);
  }

  free(v3);
}

id sub_1000B0710(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1000B0DC8(a1);

  return v4;
}

id sub_1000B074C(void *a1)
{
  id v2 = sub_1000B0DC8(a1);

  return v2;
}

id sub_1000B0778()
{
  return [objc_allocWithZone((Class)APSUser) initUserWithSystemMode:0];
}

id sub_1000B07A0()
{
  return [objc_allocWithZone((Class)APSUser) initUserWithSystemMode:1];
}

void sub_1000B07FC()
{
}

id sub_1000B0854()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ProcessModeUserTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000B0930()
{
  unsigned int v1 = [*(id *)&v0[OBJC_IVAR___APSProcessModeUserTracker_multiUserMode] isMultiUser];
  uint64_t v2 = sub_1000AE8FC(&qword_10014E560);
  if (v1)
  {
    uint64_t v3 = swift_allocObject(v2, 48LL, 7LL);
    *(_OWORD *)(v3 + 16) = xmmword_100102EE0;
    id v4 = *(void **)&v0[OBJC_IVAR___APSProcessModeUserTracker_systemModeUser];
    *(void *)(v3 + 32) = v4;
    id v5 = v4;
    *(void *)(v3 + 40) = [v0 defaultUser];
    specialized Array._endMutation()();
  }

  else
  {
    uint64_t v6 = swift_allocObject(v2, 40LL, 7LL);
    *(_OWORD *)(v6 + 16) = xmmword_100102ED0;
    Swift::Int v7 = *(void **)&v0[OBJC_IVAR___APSProcessModeUserTracker_systemModeUser];
    *(void *)(v6 + 32) = v7;
    uint64_t v10 = v6;
    specialized Array._endMutation()();
    uint64_t v3 = v10;
    id v8 = v7;
  }

  return v3;
}

void sub_1000B0A2C()
{
  id v1 = [v0 sortedLoggedInUsers];
  uint64_t v2 = sub_1000AE8FC(&qword_10014E568);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v14 = v3;
    }
    else {
      uint64_t v14 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v3);
    if (v4) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v4)
    {
LABEL_3:
      if (v4 >= 1)
      {
        uint64_t v5 = 0LL;
        uint64_t v6 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x70LL);
        while (1)
        {
          if ((v3 & 0xC000000000000001LL) != 0)
          {
            uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
            NSString v12 = (void *)v6();
            if (!v12) {
              goto LABEL_11;
            }
          }

          else
          {
            uint64_t v11 = *(void *)(v3 + 8 * v5 + 32);
            uint64_t v13 = swift_unknownObjectRetain(v11);
            NSString v12 = (void *)((uint64_t (*)(uint64_t))v6)(v13);
            if (!v12)
            {
LABEL_11:
              uint64_t v10 = v11;
              goto LABEL_6;
            }
          }

          uint64_t v7 = (uint64_t)v12;
          [v12 setupUser:v11];
          swift_unknownObjectRelease(v11, v8);
          uint64_t v10 = v7;
LABEL_6:
          swift_unknownObjectRelease(v10, v9);
          if (v4 == ++v5) {
            goto LABEL_16;
          }
        }
      }

      __break(1u);
      goto LABEL_33;
    }
  }

uint64_t sub_1000B0CD0(uint64_t a1)
{
  uint64_t v1 = sub_1000B0EE0(a1);
  return swift_unknownObjectRetain(v1);
}

id sub_1000B0D4C()
{
  return *(id *)(v0 + OBJC_IVAR___APSProcessModeUserTracker_systemModeUser);
}

id sub_1000B0DC8(void *a1)
{
  uint64_t v3 = OBJC_IVAR___APSProcessModeUserTracker_systemModeUser;
  id v4 = objc_allocWithZone((Class)&OBJC_CLASS___APSUser);
  uint64_t v5 = v1;
  *(void *)&v1[v3] = [v4 initUserWithSystemMode:0];
  uint64_t v6 = OBJC_IVAR___APSProcessModeUserTracker_userModeUser;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)APSUser) initUserWithSystemMode:1];
  *(void *)&v5[OBJC_IVAR___APSProcessModeUserTracker_multiUserMode] = a1;
  id v7 = a1;

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for ProcessModeUserTracker();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for ProcessModeUserTracker()
{
  return objc_opt_self(&OBJC_CLASS___APSProcessModeUserTracker);
}

uint64_t sub_1000B0EBC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000B0EE0(uint64_t a1)
{
  if ([*(id *)(v1 + OBJC_IVAR___APSProcessModeUserTracker_multiUserMode) isMultiUser])
  {
    memset(v7, 0, sizeof(v7));
    xpc_connection_get_audit_token(a1, v7);
    BOOL v3 = sub_1000467EC(v7, APSConnectionSystemProcessEntitlement);
    id v4 = &OBJC_IVAR___APSProcessModeUserTracker_systemModeUser;
    if (!v3) {
      id v4 = &OBJC_IVAR___APSProcessModeUserTracker_userModeUser;
    }
    uint64_t v5 = *v4;
  }

  else
  {
    uint64_t v5 = OBJC_IVAR___APSProcessModeUserTracker_systemModeUser;
  }

  return *(void *)(v1 + v5);
}

id sub_1000B0FA0(void *a1)
{
  int v2 = sub_1000784BC();
  BOOL v3 = off_10011C888;
  if (!v2) {
    BOOL v3 = &off_10011C890;
  }
  id v4 = [objc_allocWithZone((Class)*v3) init];
  if ([a1 isDefaultUser])
  {
    swift_unknownObjectRetain(v4);
    id v5 = v4;
  }

  else
  {
    type metadata accessor for NoOpClientIdentityProvider();
    id v5 = sub_1000ACAF0();
  }

  type metadata accessor for UserDependencies();
  id v6 = sub_1000AF20C( (uint64_t)v5,  (uint64_t)[objc_allocWithZone((Class)APSProcessModeTokenStorage) initWithUser:a1],  (uint64_t)objc_msgSend(objc_allocWithZone((Class)APSProcessModePreferences), "initWithUser:", a1),  (uint64_t)objc_msgSend(objc_allocWithZone((Class)APSHashingAppIDManager), "init"));
  swift_unknownObjectRelease(v4, v7);
  return v6;
}

unint64_t sub_1000B10C8()
{
  unint64_t result = qword_10014E570;
  if (!qword_10014E570)
  {
    unint64_t result = swift_getWitnessTable(&unk_100102F08, &type metadata for APSFeatureFlag);
    atomic_store(result, (unint64_t *)&qword_10014E570);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for APSFeatureFlag(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for APSFeatureFlag(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000B11A0 + 4 * byte_100102EF0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000B11C0 + 4 * byte_100102EF5[v4]))();
  }
}

_BYTE *sub_1000B11A0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000B11C0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B11C8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B11D0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B11D8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B11E0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for APSFeatureFlag()
{
  return &type metadata for APSFeatureFlag;
}

uint64_t sub_1000B1200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v5 + 16))(v4);
  return String.init<A>(reflecting:)(v4, a2);
}

uint64_t sub_1000B12E4()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___APSFilterChange_triggeringTopic);
  swift_beginAccess(v0 + OBJC_IVAR___APSFilterChange_triggeringTopic, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000B13B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR___APSFilterChange_triggeringTopic);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000B1450()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSFilterChange_topicGroupChange;
  swift_beginAccess(v0 + OBJC_IVAR___APSFilterChange_topicGroupChange, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000B14DC(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSFilterChange_topicGroupChange);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t sub_1000B1568()
{
  uint64_t v1 = v0 + OBJC_IVAR___APSFilterChange_reason;
  swift_beginAccess(v0 + OBJC_IVAR___APSFilterChange_reason, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000B15F4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___APSFilterChange_reason);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000B163C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1000B1680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (char *)objc_allocWithZone(v3);
  uint64_t v8 = &v7[OBJC_IVAR___APSFilterChange_triggeringTopic];
  *(void *)uint64_t v8 = 0LL;
  *((void *)v8 + 1) = 0LL;
  objc_super v9 = &v7[OBJC_IVAR___APSFilterChange_topicGroupChange];
  *(void *)objc_super v9 = 0LL;
  *(void *)&v7[OBJC_IVAR___APSFilterChange_reason] = 0LL;
  swift_beginAccess(v9, v14, 1LL, 0LL);
  *(void *)objc_super v9 = a1;
  swift_beginAccess(v8, v13, 1LL, 0LL);
  uint64_t v10 = *((void *)v8 + 1);
  *(void *)uint64_t v8 = a2;
  *((void *)v8 + 1) = a3;
  swift_bridgeObjectRelease(v10);
  v12.receiver = v7;
  v12.super_class = v3;
  return objc_msgSendSuper2(&v12, "init");
}

id sub_1000B1748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = &v3[OBJC_IVAR___APSFilterChange_triggeringTopic];
  *(void *)uint64_t v7 = 0LL;
  *((void *)v7 + 1) = 0LL;
  uint64_t v8 = &v3[OBJC_IVAR___APSFilterChange_topicGroupChange];
  *(void *)uint64_t v8 = 0LL;
  *(void *)&v3[OBJC_IVAR___APSFilterChange_reason] = 0LL;
  swift_beginAccess(v8, v13, 1LL, 0LL);
  *(void *)uint64_t v8 = a1;
  swift_beginAccess(v7, v12, 1LL, 0LL);
  uint64_t v9 = *((void *)v7 + 1);
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  swift_bridgeObjectRelease(v9);
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for FilterChange();
  return objc_msgSendSuper2(&v11, "init");
}

uint64_t type metadata accessor for FilterChange()
{
  return objc_opt_self(&OBJC_CLASS___APSFilterChange);
}

id sub_1000B1860()
{
  uint64_t v1 = &v0[OBJC_IVAR___APSFilterChange_triggeringTopic];
  *(void *)uint64_t v1 = 0LL;
  *((void *)v1 + 1) = 0LL;
  *(void *)&v0[OBJC_IVAR___APSFilterChange_topicGroupChange] = 0LL;
  *(void *)&v0[OBJC_IVAR___APSFilterChange_reason] = 0LL;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for FilterChange();
  return objc_msgSendSuper2(&v3, "init");
}

id sub_1000B191C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilterChange();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void type metadata accessor for APSFilterReason(uint64_t a1)
{
}

void type metadata accessor for APSTopicGroupChange(uint64_t a1)
{
}

void sub_1000B1988(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

void sub_1000B19CC()
{
}

id sub_1000B19DC(uint64_t a1)
{
  id v4 = 0LL;
  id v2 = [v1 versionToSendFor:a1 error:&v4];
  if (v4)
  {
    v4;
    swift_willThrow();
  }

  return v2;
}

id sub_1000B1A74(uint64_t a1)
{
  objc_super v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion] = a1;
  *(void *)&v3[OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion] = a1;
  id v4 = v3;
  *(void *)&v4[OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface] = sub_1000B1B64((uint64_t)&_swiftEmptyArrayStorage);

  v6.receiver = v4;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, "init");
}

id sub_1000B1AF0(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion] = a1;
  *(void *)&v1[OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion] = a1;
  id v2 = v1;
  *(void *)&v2[OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface] = sub_1000B1B64((uint64_t)&_swiftEmptyArrayStorage);

  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for FilterVersionStateMachine();
  return objc_msgSendSuper2(&v4, "init");
}

unint64_t sub_1000B1B64(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    objc_super v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000AE8FC((uint64_t *)&unk_10014E700);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  objc_super v4 = (void *)v3;
  uint64_t v5 = *(void *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v18 = v1;
  objc_super v6 = (char *)(v1 + 57);
  while (1)
  {
    uint64_t v7 = *(void *)(v6 - 17);
    uint64_t v8 = *(void *)(v6 - 9);
    char v9 = *(v6 - 1);
    char v10 = *v6;
    id v11 = *(id *)(v6 - 25);
    unint64_t result = sub_1000B2DDC((uint64_t)v11);
    if ((v13 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v11;
    uint64_t v14 = v4[7] + 24 * result;
    *(void *)uint64_t v14 = v7;
    *(void *)(v14 + _Block_object_dispose(va, 8) = v8;
    *(_BYTE *)(v14 + 16) = v9;
    *(_BYTE *)(v14 + 17) = v10;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v4[2] = v17;
    v6 += 32;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v1 = v18;
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FilterVersionStateMachine()
{
  return objc_opt_self(&OBJC_CLASS___APSFilterVersionStateMachine);
}

id sub_1000B1D28()
{
  return [v0 initWithInitialVersion:0];
}

uint64_t sub_1000B1D4C()
{
  v17[0] = 0LL;
  v17[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(71LL);
  uint64_t v18 = 0LL;
  unint64_t v19 = 0xE000000000000000LL;
  v1._countAndFlagsBits = 0xD000000000000015LL;
  v1._object = (void *)0x80000001001022B0LL;
  String.append(_:)(v1);
  v17[0] = *(void *)(v0 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0xD000000000000017LL;
  v4._object = (void *)0x80000001001022D0LL;
  String.append(_:)(v4);
  v17[0] = *(void *)(v0 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  objc_super v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
  v7._object = (void *)0x80000001001022F0LL;
  v7._countAndFlagsBits = 0xD000000000000014LL;
  String.append(_:)(v7);
  uint64_t v8 = (uint64_t *)(v0 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v0 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v17, 0LL, 0LL);
  uint64_t v9 = *v8;
  unint64_t v10 = sub_1000B1EF8();
  unint64_t v11 = sub_1000B1F34();
  uint64_t v12 = swift_bridgeObjectRetain(v9);
  v13._countAndFlagsBits = Dictionary.description.getter( v12,  v10,  &type metadata for FilterVersionStateMachine.InterfaceState,  v11);
  uint64_t v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 62LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  return v18;
}

unint64_t sub_1000B1EF8()
{
  unint64_t result = qword_10014E6C8;
  if (!qword_10014E6C8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSString);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10014E6C8);
  }

  return result;
}

unint64_t sub_1000B1F34()
{
  unint64_t result = qword_10014E6D0;
  if (!qword_10014E6D0)
  {
    unint64_t v1 = sub_1000B1EF8();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10014E6D0);
  }

  return result;
}

id sub_1000B1FD0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilterVersionStateMachine();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1000B2010(void *a1, void *a2)
{
  uint64_t v3 = v2;
  objc_super v6 = (void *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v37, 1LL, 0LL);
  uint64_t v7 = *v6;
  if (*(void *)(*v6 + 16LL))
  {
    id v8 = a1;
    swift_bridgeObjectRetain(v7);
    unint64_t v9 = sub_1000B2DDC((uint64_t)v8);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(v7 + 56) + 24 * v9;
      unint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(v11 + 8);
      __int16 v14 = *(unsigned __int8 *)(v11 + 16);
      int v15 = *(unsigned __int8 *)(v11 + 17);

      swift_bridgeObjectRelease(v7);
      if (v15) {
        __int16 v16 = 256;
      }
      else {
        __int16 v16 = 0;
      }
      goto LABEL_8;
    }

    swift_bridgeObjectRelease(v7);
  }

  unint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  __int16 v14 = 0;
  __int16 v16 = 0;
LABEL_8:
  uint64_t v17 = OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion;
  if (*(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) <= v12)
  {
    unint64_t v21 = v12 + 1;
    if (v12 == -1LL)
    {
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = 0LL;
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion) = 0LL;
      uint64_t v22 = *v6;
      *objc_super v6 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v22);
      if (a2)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(APSErrorDomain, v23);
        uint64_t v25 = v24;
        id v26 = objc_allocWithZone(&OBJC_CLASS___NSError);
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v25);
        id v28 = [v26 initWithDomain:v27 code:-1000 userInfo:0];

        id v29 = v28;
        unint64_t v21 = 0LL;
        *a2 = v28;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      swift_beginAccess(v6, v36, 33LL, 0LL);
      id v30 = a1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
      uint64_t v35 = *v6;
      *objc_super v6 = 0x8000000000000000LL;
      sub_1000B34E4(v12, v13, v16 | v14, v30, isUniquelyReferenced_nonNull_native);
      uint64_t v32 = *v6;
      *objc_super v6 = v35;

      swift_bridgeObjectRelease(v32);
      swift_endAccess(v36);
    }
  }

  else
  {
    swift_beginAccess(v6, v36, 33LL, 0LL);
    id v18 = a1;
    char v19 = swift_isUniquelyReferenced_nonNull_native(*v6);
    uint64_t v34 = *v6;
    *objc_super v6 = 0x8000000000000000LL;
    sub_1000B34E4(v12, v13, v16 | v14, v18, v19);
    uint64_t v20 = *v6;
    *objc_super v6 = v34;

    swift_bridgeObjectRelease(v20);
    swift_endAccess(v36);
    return *(void *)(v3 + v17);
  }

  return v21;
}

uint64_t sub_1000B22F8(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  objc_super v6 = (void *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  uint64_t result = swift_beginAccess(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v21, 0LL, 0LL);
  uint64_t v8 = *v6;
  if (*(void *)(*v6 + 16LL))
  {
    id v9 = a2;
    swift_bridgeObjectRetain(v8);
    unint64_t v10 = sub_1000B2DDC((uint64_t)v9);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = *(void *)(v8 + 56) + 24 * v10;
      uint64_t v13 = *(void *)(v12 + 8);
      int v14 = *(unsigned __int8 *)(v12 + 17);
      swift_bridgeObjectRelease(v8);
      swift_beginAccess(v6, v20, 33LL, 0LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
      uint64_t v19 = *v6;
      *objc_super v6 = 0x8000000000000000LL;
      if (v14) {
        __int16 v16 = 257;
      }
      else {
        __int16 v16 = 1;
      }
      sub_1000B34E4(a1, v13, v16, v9, isUniquelyReferenced_nonNull_native);
      uint64_t v17 = *v6;
      *objc_super v6 = v19;

      swift_bridgeObjectRelease(v17);
      uint64_t result = swift_endAccess(v20);
      unint64_t v18 = *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion);
      if (v18 <= a1) {
        unint64_t v18 = a1;
      }
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = v18;
    }

    else
    {

      return swift_bridgeObjectRelease(v8);
    }
  }

  return result;
}

uint64_t sub_1000B2494(unint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  objc_super v6 = (void *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  uint64_t result = swift_beginAccess(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v18, 0LL, 0LL);
  uint64_t v8 = *v6;
  if (*(void *)(*v6 + 16LL))
  {
    id v9 = a2;
    swift_bridgeObjectRetain(v8);
    unint64_t v10 = sub_1000B2DDC((uint64_t)v9);
    if ((v11 & 1) != 0)
    {
      uint64_t v12 = *(void *)(*(void *)(v8 + 56) + 24 * v10);
      swift_bridgeObjectRelease(v8);
      swift_beginAccess(v6, v17, 33LL, 0LL);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
      uint64_t v16 = *v6;
      *objc_super v6 = 0x8000000000000000LL;
      sub_1000B34E4(v12, a1, 257, v9, isUniquelyReferenced_nonNull_native);
      uint64_t v14 = *v6;
      *objc_super v6 = v16;

      swift_bridgeObjectRelease(v14);
      uint64_t result = swift_endAccess(v17);
      unint64_t v15 = *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion);
      if (v15 <= a1) {
        unint64_t v15 = a1;
      }
      *(void *)(v3 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion) = v15;
    }

    else
    {

      return swift_bridgeObjectRelease(v8);
    }
  }

  return result;
}

id sub_1000B261C(unint64_t a1)
{
  if (a1 < 0xFFFFFFFFFFFFFF9CLL)
  {
    id v9 = 0LL;
    *(void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = a1 + 100;
  }

  else
  {
    *(void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion) = 0LL;
    *(void *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__highestAckedVersion) = 0LL;
    uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
    swift_beginAccess(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v11, 1LL, 0LL);
    uint64_t v3 = *v2;
    uint64_t *v2 = (uint64_t)&_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)(APSErrorDomain, v4);
    uint64_t v6 = v5;
    id v7 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    id v9 = [v7 initWithDomain:v8 code:-1000 userInfo:0];
  }

  return v9;
}

BOOL sub_1000B274C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v4, v11, 0LL, 0LL);
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    id v6 = a1;
    swift_bridgeObjectRetain(v5);
    unint64_t v7 = sub_1000B2DDC((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      unint64_t v9 = *(void *)(*(void *)(v5 + 56) + 24 * v7);

      swift_bridgeObjectRelease(v5);
      return v9 < *(void *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__highestSentVersion);
    }

    swift_bridgeObjectRelease(v5);
  }

  return 1LL;
}

uint64_t sub_1000B2854(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v3, v10, 0LL, 0LL);
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0LL;
  }
  id v5 = a1;
  swift_bridgeObjectRetain(v4);
  unint64_t v6 = sub_1000B2DDC((uint64_t)v5);
  if ((v7 & 1) != 0) {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 24 * v6 + 17);
  }
  else {
    uint64_t v8 = 0LL;
  }

  swift_bridgeObjectRelease(v4);
  return v8;
}

uint64_t sub_1000B2944(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v3, v10, 0LL, 0LL);
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0LL;
  }
  id v5 = a1;
  swift_bridgeObjectRetain(v4);
  unint64_t v6 = sub_1000B2DDC((uint64_t)v5);
  if ((v7 & 1) != 0) {
    uint64_t v8 = *(unsigned __int8 *)(*(void *)(v4 + 56) + 24 * v6 + 16);
  }
  else {
    uint64_t v8 = 0LL;
  }

  swift_bridgeObjectRelease(v4);
  return v8;
}

BOOL sub_1000B2A34(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v3, v12, 0LL, 0LL);
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    id v5 = a1;
    swift_bridgeObjectRetain(v4);
    unint64_t v6 = sub_1000B2DDC((uint64_t)v5);
    if ((v7 & 1) != 0)
    {
      uint64_t v8 = (unint64_t *)(*(void *)(v4 + 56) + 24 * v6);
      unint64_t v9 = *v8;
      unint64_t v10 = v8[1];

      swift_bridgeObjectRelease(v4);
      return v10 < v9;
    }

    swift_bridgeObjectRelease(v4);
  }

  return 0LL;
}

BOOL sub_1000B2B2C(void *a1, void *a2)
{
  id v5 = (uint64_t *)(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v2 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v19, 0LL, 0LL);
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16)) {
    return 0LL;
  }
  id v7 = a1;
  swift_bridgeObjectRetain(v6);
  unint64_t v8 = sub_1000B2DDC((uint64_t)v7);
  if ((v9 & 1) == 0)
  {

LABEL_13:
    swift_bridgeObjectRelease(v6);
    return 0LL;
  }

  uint64_t v10 = *(void *)(*(void *)(v6 + 56) + 24 * v8 + 8);

  swift_bridgeObjectRelease(v6);
  uint64_t v6 = *v5;
  if (!*(void *)(*v5 + 16)) {
    return 0LL;
  }
  id v11 = a2;
  swift_bridgeObjectRetain(v6);
  unint64_t v12 = sub_1000B2DDC((uint64_t)v11);
  if ((v13 & 1) == 0)
  {

    goto LABEL_13;
  }

  uint64_t v14 = (unint64_t *)(*(void *)(v6 + 56) + 24 * v12);
  unint64_t v15 = *v14;
  unint64_t v16 = v14[1];

  swift_bridgeObjectRelease(v6);
  return v16 < v15 && v10 == v16;
}

uint64_t sub_1000B2C94(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface);
  swift_beginAccess(v1 + OBJC_IVAR___APSFilterVersionStateMachine__stateByInterface, v13, 33LL, 0LL);
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v5 = sub_1000B2DDC(a1);
  char v7 = v6;
  swift_bridgeObjectRelease(v4);
  if ((v7 & 1) != 0)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v9 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000B3688();
      uint64_t v9 = v12;
    }

    sub_1000B3314(v5, v9);
    uint64_t v10 = *v3;
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease(v10);
  }

  return swift_endAccess(v13);
}

unint64_t sub_1000B2DDC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000B2E0C(a1, v4);
}

unint64_t sub_1000B2E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_1000B1EF8();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_1000B2F14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_1000B2DDC(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v12 = *v2;
  uint64_t *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000B3688();
    uint64_t v8 = v12;
  }

  uint64_t v9 = *(void *)(*(void *)(v8 + 56) + 24 * v5);
  sub_1000B3314(v5, v8);
  uint64_t v10 = *v2;
  uint64_t *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

Swift::Int sub_1000B3010(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1000AE8FC((uint64_t *)&unk_10014E700);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

void sub_1000B3314(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            unint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *unint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            int64_t v22 = (__int128 *)(v20 + 24 * v6);
            if (24 * v3 < (uint64_t)(24 * v6) || v21 >= (unint64_t)v22 + 24 || (v23 = v3 == v6, int64_t v3 = v6, !v23))
            {
              __int128 v10 = *v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }

        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1LL << a1) - 1;
  }

  *unint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1LL);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }

id sub_1000B34E4(uint64_t a1, uint64_t a2, __int16 a3, void *a4, char a5)
{
  unint64_t v6 = (void **)v5;
  Swift::Int v11 = (void *)*v5;
  unint64_t v13 = sub_1000B2DDC((uint64_t)a4);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  id result = (id)(v14 + v15);
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = v11[3];
    if (v18 >= (uint64_t)result && (a5 & 1) != 0)
    {
LABEL_7:
      uint64_t v19 = *v6;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v20 = v19[7] + 24 * v13;
        *(void *)uint64_t v20 = a1;
        *(void *)(v20 + _Block_object_dispose(va, 8) = a2;
        *(_BYTE *)(v20 + 16) = a3 & 1;
        *(_BYTE *)(v20 + 17) = HIBYTE(a3) & 1;
        return result;
      }

      goto LABEL_11;
    }

    if (v18 >= (uint64_t)result && (a5 & 1) == 0)
    {
      id result = sub_1000B3688();
      goto LABEL_7;
    }

    sub_1000B3010((uint64_t)result, a5 & 1);
    id result = (id)sub_1000B2DDC((uint64_t)a4);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = (unint64_t)result;
      uint64_t v19 = *v6;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000B362C(v13, (uint64_t)a4, a1, a2, a3 & 0x101, v19);
      return a4;
    }
  }

  unint64_t v22 = sub_1000B1EF8();
  id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

unint64_t sub_1000B362C( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1LL << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 24 * result;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + _Block_object_dispose(va, 8) = a4;
  *(_BYTE *)(v6 + 16) = a5 & 1;
  *(_BYTE *)(v6 + 17) = HIBYTE(a5) & 1;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

id sub_1000B3688()
{
  uint64_t v1 = v0;
  sub_1000AE8FC((uint64_t *)&unk_10014E700);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }

__n128 initializeBufferWithCopyOfBuffer for FilterVersionStateMachine.InterfaceState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FilterVersionStateMachine.InterfaceState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterVersionStateMachine.InterfaceState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 1_Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FilterVersionStateMachine.InterfaceState()
{
  return &type metadata for FilterVersionStateMachine.InterfaceState;
}

uint64_t X509PolicySetFlagsForCommonNames(uint64_t a1)
{
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  v4[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateSubjectNameGetCommonName((unint64_t *)(a1 + 104), v4);
  if (!(_DWORD)result)
  {
    uint64_t result = compare_octet_string((uint64_t)&iPhoneCAName, (uint64_t)v4);
    if ((_DWORD)result)
    {
      uint64_t result = compare_octet_string((uint64_t)&CodeSigningCAName, (uint64_t)v4);
      if ((_DWORD)result)
      {
        uint64_t result = compare_octet_string_partial((uint64_t)&MFi4AccessoryCAName, (uint64_t)v4);
        if ((_DWORD)result)
        {
          uint64_t result = compare_octet_string_partial((uint64_t)&MFi4AttestationCAName, (uint64_t)v4);
          if ((_DWORD)result)
          {
            uint64_t result = compare_octet_string_partial((uint64_t)&MFi4ProvisioningCAName, (uint64_t)v4);
            if ((_DWORD)result) {
              return result;
            }
            uint64_t v3 = 0x1000000000LL;
          }

          else
          {
            uint64_t v3 = 0x800000000LL;
          }
        }

        else
        {
          uint64_t v3 = 0x400000000LL;
        }
      }

      else
      {
        uint64_t v3 = 8LL;
      }
    }

    else
    {
      uint64_t v3 = 3840LL;
    }

    *(void *)(a1 + 240) |= v3;
  }

  return result;
}

double X509PolicySetFlagsForMFI(uint64_t a1)
{
  v6[0] = 0xAAAAAAAAAAAAAAAALL;
  v6[1] = 0xAAAAAAAAAAAAAAAALL;
  if (!X509CertificateSubjectNameGetCommonName((unint64_t *)(a1 + 104), v6))
  {
    time_t v5 = 0LL;
    if (!X509CertificateGetNotBefore(a1, &v5))
    {
      memset(&v4, 0, sizeof(v4));
      strptime("2006-05-31", "%F", &v4);
      time_t v3 = timegm(&v4);
      double result = difftime(v3, v5);
      if (result < 0.0)
      {
        *(void *)(a1 + 240) |= 0x8000000uLL;
LABEL_3:
      }
    }
  }

  return result;
}

uint64_t X509PolicySetFlagsForRoots(uint64_t result, uint64_t a2)
{
  if (!result) {
    return result;
  }
  uint64_t v3 = result;
  if (*(_BYTE *)(result + 16))
  {
    double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootCASPKI);
    if (!(_DWORD)result
      || (double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootG2SPKI), !(_DWORD)result)
      || (double result = compare_octet_string(a2 + 88, (uint64_t)&AppleRootG3SPKI), !(_DWORD)result))
    {
      uint64_t v5 = *(void *)(a2 + 240) | 0x58E30653FFF8LL;
      goto LABEL_11;
    }
  }

  uint64_t v4 = *(void *)(v3 + 8);
  if ((v4 & 0x1000000) != 0)
  {
    double result = compare_octet_string(a2 + 88, (uint64_t)&UcrtRootSpki);
    if (!(_DWORD)result)
    {
      uint64_t v5 = *(void *)(a2 + 240) | 0x1000000LL;
      goto LABEL_11;
    }

uint64_t sub_1000B3C94(void *a1, uint64_t a2)
{
  v6[0] = 0LL;
  v6[1] = 0LL;
  v5[0] = 0LL;
  v5[1] = 0LL;
  uint64_t result = X509CertificateParseSPKI((unint64_t *)(a2 + 88), v6, 0LL, v5);
  if (!(_DWORD)result)
  {
    uint64_t result = compare_octet_string(a1[4], (uint64_t)v6);
    if (!(_DWORD)result)
    {
      uint64_t result = compare_octet_string(a1[3], (uint64_t)v5);
      if (!(_DWORD)result) {
        *(void *)(a2 + 240) |= a1[1];
      }
    }
  }

  return result;
}

uint64_t X509PolicyCheckForBlockedKeys(uint64_t a1)
{
  uint64_t result = compare_octet_string(a1 + 88, (uint64_t)&BlockedYonkersSPKI);
  if (!(_DWORD)result) {
    *(void *)(a1 + 240) &= 0xFFFFFFFFFFF3FFFFLL;
  }
  return result;
}

int *find_digest(uint64_t a1)
{
  unint64_t v2 = 0LL;
  while (1)
  {
    uint64_t result = (int *)compare_octet_string_raw( (uint64_t)&dword_100122928[v2 / 4 + 2],  *(const void **)a1,  *(void *)(a1 + 8));
    if (!(_DWORD)result) {
      break;
    }
    v2 += 32LL;
    if (v2 == 160) {
      return 0LL;
    }
  }

  __break(0x5513u);
  return result;
}

int *find_digest_by_type(int *result)
{
  unint64_t v1 = 0LL;
  while (dword_100122928[v1 / 4] != (_DWORD)result)
  {
    v1 += 32LL;
    if (v1 == 160) {
      return 0LL;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t find_digestOID_for_signingOID(uint64_t a1, void *a2)
{
  if (!compare_octet_string_raw(a1, &sha1WithRSA_oid, 9uLL)
    || !compare_octet_string_raw(a1, &sha1WithECDSA_oid, 7uLL))
  {
    uint64_t v6 = &CTOidSha1;
    uint64_t v4 = 5LL;
    goto LABEL_11;
  }

  uint64_t v4 = 9LL;
  if (!compare_octet_string_raw(a1, &sha256WithRSA_oid, 9uLL))
  {
    uint64_t v6 = &CTOidSha256;
    goto LABEL_11;
  }

  if (!compare_octet_string_raw(a1, &sha256WithECDSA_oid, 8uLL))
  {
    uint64_t v6 = &CTOidSha256;
LABEL_18:
    uint64_t v4 = 9LL;
    goto LABEL_11;
  }

  uint64_t v4 = 9LL;
  if (!compare_octet_string_raw(a1, &sha384WithRSA_oid, 9uLL))
  {
    uint64_t v6 = &CTOidSha384;
    goto LABEL_11;
  }

  if (!compare_octet_string_raw(a1, &sha384WithECDSA_oid, 8uLL))
  {
    uint64_t v6 = &CTOidSha384;
    goto LABEL_18;
  }

  uint64_t v4 = 9LL;
  if (compare_octet_string_raw(a1, &sha512WithRSA_oid, 9uLL))
  {
    uint64_t v6 = &CTOidSha512;
    goto LABEL_18;
  }

  uint64_t v6 = &CTOidSha512;
LABEL_11:
  *a2 = v6;
  a2[1] = v4;
  return 1LL;
}

unint64_t validateSignatureRSA(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  unint64_t result = 0LL;
  char v26 = 0;
  if (a1)
  {
    if (a2)
    {
      unint64_t result = 0LL;
      if (a3)
      {
        if (a4)
        {
          if (a5)
          {
            unint64_t result = compare_octet_string((uint64_t)&rsaEncryption, (uint64_t)(a5 + 7));
            if (!(_DWORD)result
              || (unint64_t result = sub_1000B41C8((uint64_t)&off_100122A18, (uint64_t)(a5 + 3), (uint64_t)(a5 + 7)), (_DWORD)result))
            {
              unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
              unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
              unint64_t v12 = a5[9];
              uint64_t v11 = a5[10];
              if (__CFADD__(v12, v11)) {
                goto LABEL_31;
              }
              if (v12 > v12 + v11) {
                goto LABEL_32;
              }
              unint64_t v24 = a5[9];
              unint64_t v25 = v12 + v11;
              if (!v11 || (unint64_t result = ccder_blob_check_null((uint64_t)&v24), (_DWORD)result))
              {
                if (!__CFADD__(a1, a2))
                {
                  if (a1 + a2 >= a1)
                  {
                    unint64_t result = ccder_decode_rsa_pub_n(a1);
                    if (!result) {
                      return result;
                    }
                    unint64_t v13 = result;
                    if (result >> 58)
                    {
LABEL_33:
                      __break(0x550Cu);
                      return result;
                    }

                    unint64_t v14 = result << 6;
                    if (result << 6 < 0x400) {
                      return 0LL;
                    }
                    unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
                    __int16 v29 = -21846;
                    char v27 = 6;
                    if (&vars0 != (uint64_t *)82)
                    {
                      unint64_t v15 = a5[4];
                      LOBYTE(v2_Block_object_dispose(va, 8) = v15;
                      if ((unint64_t)&v27 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        if (v15 <= 9)
                        {
                          uint64_t v16 = __memcpy_chk((char *)&v28 + 1, a5[3], v15, 9LL);
                          if (v14 > 0x1068) {
                            return 0LL;
                          }
                          unint64_t result = __chkstk_darwin(v16, v17);
                          uint64_t v19 = (unint64_t *)((char *)&v23 - v18);
                          unint64_t v20 = 0LL;
                          *(void *)&__int128 v21 = 0xAAAAAAAAAAAAAAAALL;
                          *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
                          do
                          {
                            __int128 v22 = &v19[v20 / 8];
                            *(_OWORD *)__int128 v22 = v21;
                            *((_OWORD *)v22 + 1) = v21;
                            v20 += 32LL;
                          }

                          while (v18 != v20);
                          if (v18 >= 1)
                          {
                            *uint64_t v19 = v13;
                            if (!ccrsa_verify_pkcs1v15_allowshortsigs( v19,  &v27,  a4,  a3,  a5[12],  a5[11],  &v26)) {
                              return v26 != 0;
                            }
                            unint64_t result = 0LL;
                            char v26 = 0;
                            return result;
                          }
                        }

                        goto LABEL_32;
                      }
                    }

                    goto LABEL_31;
                  }

BOOL sub_1000B41C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0LL;
  BOOL v7 = 1;
  do
  {
    BOOL v7 = v6 < 3;
    a1 += 32LL;
    ++v6;
  }

  while (v6 != 4);
  return v7;
}

_UNKNOWN **oidForPubKeyLength()
{
  uint64_t v0 = ccec_x963_import_pub_size();
  int is_supported = ccec_keysize_is_supported();
  unint64_t v2 = &CTOidSECP256r1;
  uint64_t v3 = &CTOidSECP521r1;
  uint64_t v4 = &CTOidSECP384r1;
  if (v0 != 384) {
    uint64_t v4 = 0LL;
  }
  if (v0 != 521) {
    uint64_t v3 = v4;
  }
  if (v0 != 256) {
    unint64_t v2 = v3;
  }
  if (is_supported) {
    return v2;
  }
  else {
    return 0LL;
  }
}

uint64_t validateSignatureEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = 0LL;
  char v24 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t result = 0LL;
      if (a3)
      {
        if (a4)
        {
          if (a5)
          {
            if (!compare_octet_string((uint64_t)&ecPublicKey, a5 + 56)
              || (uint64_t result = sub_1000B41C8((uint64_t)&off_100122A98, a5 + 24, a5 + 56), (_DWORD)result))
            {
              uint64_t result = sub_1000B44A4((int **)(a5 + 72));
              if (result)
              {
                uint64_t v12 = *(void *)result;
                if (*(void *)result >> 61 || !is_mul_ok(8 * v12, 3uLL))
                {
                  __break(0x550Cu);
                }

                else
                {
                  uint64_t v13 = 24 * v12;
                  BOOL v14 = __CFADD__(v13, 16LL);
                  unint64_t v15 = v13 + 16;
                  if (!v14 && v15 < 0xFFFFFFFFFFFFFFF0LL)
                  {
                    uint64_t result = __chkstk_darwin(result, v11);
                    uint64_t v18 = (uint64_t *)&v23[-v16];
                    unint64_t v19 = 0LL;
                    do
                    {
                      unint64_t v20 = &v18[v19 / 8];
                      *unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
                      v20[1] = 0xAAAAAAAAAAAAAAAALL;
                      v19 += 16LL;
                    }

                    while (v16 != v19);
                    if (v17 >= 0x10)
                    {
                      *uint64_t v18 = result;
                      if (v16 >= 1)
                      {
                        if (!ccec_import_pub(result, a2, a1, &v23[-v16]))
                        {
                          uint64_t result = ccec_x963_import_pub_size(a2);
                          unint64_t v22 = *(void *)(a5 + 88);
                          uint64_t v21 = *(void *)(a5 + 96);
                          if (result == 256 && v21 == 64)
                          {
                            if (v22 < 0xFFFFFFFFFFFFFFE0LL)
                            {
                              if (!ccec_verify_composite( v18,  a4,  a3,  *(void *)(a5 + 88),  v22 + 32,  &v24)) {
                                return v24 != 0;
                              }
                              goto LABEL_24;
                            }

uint64_t sub_1000B44A4(int **a1)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v1 = a1[1];
  if (v1 != (int *)7)
  {
    return 0LL;
  }

  uint64_t v4 = *a1;
  int v6 = *v4;
  int v7 = *(int *)((char *)v4 + 3);
  if (v6 != -2127887098 || v7 != 587203713) {
    return 0LL;
  }
  return ccec_cp_521();
}

uint64_t compressECPublicKey(void *a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v7 = (void *)sub_1000B44A4(a2);
  if (!v7) {
    return 655366LL;
  }
  int64_t v9 = v7;
  uint64_t v10 = *v7;
  if (*v7 >> 61 || !is_mul_ok(8 * v10, 3uLL))
  {
    __break(0x550Cu);
    goto LABEL_19;
  }

  uint64_t v11 = 24 * v10;
  BOOL v12 = __CFADD__(v11, 16LL);
  unint64_t v13 = v11 + 16;
  if (v12 || v13 >= 0xFFFFFFFFFFFFFFF0LL) {
LABEL_19:
  }
    __break(0x5500u);
  uint64_t result = __chkstk_darwin(v7, v8);
  unint64_t v17 = (uint64_t *)((char *)&v20 - v15);
  unint64_t v18 = 0LL;
  do
  {
    unint64_t v19 = &v17[v18 / 8];
    *unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
    v19[1] = 0xAAAAAAAAAAAAAAAALL;
    v18 += 16LL;
  }

  while (v15 != v18);
  if (v16 < 0x10) {
    goto LABEL_21;
  }
  *unint64_t v17 = v9;
  if (v15 < 1)
  {
LABEL_20:
    __break(0x5519u);
LABEL_21:
    __break(1u);
    return result;
  }

  uint64_t result = ccec_import_pub(v9, a1[1], *a1, (char *)&v20 - v15);
  if (!(_DWORD)result)
  {
    uint64_t result = ccec_compressed_x962_export_pub_size(v9);
    if (result == a4)
    {
      if (!a3 || a4) {
        return ccec_compressed_x962_export_pub(v17, a3);
      }
      goto LABEL_20;
    }

    return 393220LL;
  }

  return result;
}

unint64_t decompressECPublicKey(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  int v6 = (uint64_t *)sub_1000B44A4(a2);
  if (!v6) {
    return 655366LL;
  }
  uint64_t v8 = *v6;
  if ((unint64_t)*v6 >> 61 || !is_mul_ok(8 * v8, 3uLL)) {
LABEL_22:
  }
    __break(0x550Cu);
  uint64_t v9 = 24 * v8;
  BOOL v10 = __CFADD__(v9, 16LL);
  unint64_t v11 = v9 + 16;
  if (v10 || v11 >= 0xFFFFFFFFFFFFFFF0LL)
  {
LABEL_21:
    __break(0x5500u);
    goto LABEL_22;
  }

  unint64_t result = __chkstk_darwin(v6, v7);
  uint64_t v15 = (unint64_t *)((char *)&v19 - v13);
  unint64_t v16 = 0LL;
  do
  {
    unint64_t v17 = &v15[v16 / 8];
    *unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
    v17[1] = 0xAAAAAAAAAAAAAAAALL;
    v16 += 16LL;
  }

  while (v13 != v16);
  if (v14 < 0x10) {
    goto LABEL_24;
  }
  *uint64_t v15 = result;
  if (v13 >= 1)
  {
    uint64_t v18 = ccec_compressed_x962_import_pub();
    if (!(_DWORD)v18)
    {
      unint64_t result = cczp_bitlen(*v15);
      if (result < 0xFFFFFFFFFFFFFFF9LL)
      {
        if (!a3 || a4)
        {
          if ((((result + 7) >> 2) | 1) == a4) {
            uint64_t v18 = 0LL;
          }
          else {
            uint64_t v18 = 393220LL;
          }
          ccec_export_pub(v15, a3);
          return v18;
        }

        goto LABEL_23;
      }

      goto LABEL_21;
    }

    return v18;
  }

uint64_t CMSParseContentInfoSignedDataWithOptions(char *a1, uint64_t a2, unint64_t *a3, char a4)
{
  unint64_t v28 = (char *)0xAAAAAAAAAAAAAAAALL;
  __int16 v29 = (char *)0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_114;
  }
  if (&a1[a2] < a1) {
    goto LABEL_112;
  }
  int v4 = 65537;
  unint64_t v28 = a1;
  __int16 v29 = &a1[a2];
  __int16 v27 = 0;
  size_t v26 = 0xAAAAAAAAAAAAAAAALL;
  int v7 = sub_1000B4EE0((uint64_t)&v28, 0x2000000000000010LL, (_BYTE *)&v27 + 1, &v26);
  uint64_t result = 65537LL;
  if (v7)
  {
    char v24 = (char *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v25 = (char *)0xAAAAAAAAAAAAAAAALL;
    if (__CFADD__(v28, v26)) {
      goto LABEL_114;
    }
    if (v28 > &v28[v26] || &v28[v26] > v29) {
      goto LABEL_112;
    }
    char v24 = v28;
    unint64_t v25 = &v28[v26];
    if (ccder_blob_decode_tl(&v24, 6LL, &v26))
    {
      if (v25 < v24 || v26 > v25 - v24) {
        goto LABEL_112;
      }
      if (__CFADD__(v24, v26)) {
        goto LABEL_114;
      }
      if (v24 > &v24[v26] || &v24[v26] > v25) {
        goto LABEL_112;
      }
      v24 += v26;
      unint64_t v22 = (char *)0xAAAAAAAAAAAAAAAALL;
      uint64_t v23 = (char *)0xAAAAAAAAAAAAAAAALL;
      if (__CFADD__(v24, v26)) {
        goto LABEL_114;
      }
      if (v24 > &v24[v26] || &v24[v26] > v25) {
        goto LABEL_112;
      }
      unint64_t v22 = v24;
      uint64_t v23 = &v24[v26];
      __int16 v31 = 0;
      memset(v30, 170, sizeof(v30));
      if (__CFADD__(v22, v30[0])) {
        goto LABEL_114;
      }
      uint64_t v9 = 131080LL;
      if (&v22[v30[0]] != v23) {
        return 131082LL;
      }
      BOOL v10 = a3 + 11;
      uint64_t result = 131092LL;
      if (*v10 <= 4uLL && ((1LL << *v10) & 0x1A) != 0)
      {
        unsigned __int8 v35 = 0;
        size_t v34 = 0LL;
        char v32 = (char *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        if (__CFADD__(v22, v34)) {
          goto LABEL_114;
        }
        if (v22 > &v22[v34] || &v22[v34] > v23) {
          goto LABEL_112;
        }
        char v32 = v22;
        unint64_t v33 = (unint64_t)&v22[v34];
        if (__CFADD__(v32, v34)) {
          goto LABEL_114;
        }
        unint64_t v11 = &v32[v34];
        v32 += v34;
        int v12 = v35;
        if (v11 != (char *)v33 || v35)
        {
          unsigned __int8 v40 = 0;
          char v38 = (char *)v33;
          unint64_t v39 = 0LL;
          uint64_t v37 = v11;
          if (sub_1000B4EE0((uint64_t)&v37, 0xA000000000000000LL, &v40, &v39))
          {
            if (!v12)
            {
              if (__CFADD__(v37, v39)) {
                goto LABEL_114;
              }
            }

            if (v37 > v38) {
              goto LABEL_112;
            }
            char v32 = v37;
            unint64_t v33 = (unint64_t)v38;
            unsigned __int8 v36 = 0;
            int v16 = v40;
            unint64_t v41 = 0LL;
            unint64_t v17 = v32;
            unint64_t v18 = v33;
            unint64_t v19 = v41;
            a3[9] = (unint64_t)v32;
            a3[10] = v19;
            if (__CFADD__(v17, v19))
            {
LABEL_114:
              __break(0x5513u);
              return 0LL;
            }

            uint64_t v20 = &v17[v19];
            char v32 = v20;
          }

          else
          {
            if (!v12) {
              return v9;
            }
            int v16 = v40;
          }

          unint64_t v11 = v32;
        }

        if (v11 > v23 || v22 > v11) {
          goto LABEL_112;
        }
        unint64_t v22 = v11;
        uint64_t v37 = (char *)0xAAAAAAAAAAAAAAAALL;
        char v38 = (char *)0xAAAAAAAAAAAAAAAALL;
        if (v22 > v23) {
          goto LABEL_112;
        }
        uint64_t v37 = v22;
        char v38 = v23;
        if ((sub_1000B4EE0((uint64_t)&v37, 0xA000000000000000LL, &v31, v30) & 1) == 0)
        {
          uint64_t v13 = v22;
          uint64_t v15 = v23;
          goto LABEL_86;
        }

        char v32 = (char *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
        if (!__CFADD__(v37, v30[0]))
        {
          if (v37 > &v37[v30[0]] || &v37[v30[0]] > v38) {
            goto LABEL_112;
          }
          char v32 = v37;
          unint64_t v33 = (unint64_t)&v37[v30[0]];
          uint64_t v13 = v32;
          if (v32 - v37 >= 0 ? v32 >= v37 : v32 < v37)
          {
            if (v37 > v32) {
              goto LABEL_112;
            }
            uint64_t v15 = v38;
            if (v32 > v38) {
              goto LABEL_112;
            }
            unint64_t v22 = v32;
            uint64_t v23 = v38;
LABEL_86:
            if (v13 <= v15)
            {
              uint64_t v37 = v13;
              char v38 = v15;
              if (sub_1000B6C18((unint64_t *)&v37, 0xA000000000000001LL, 0LL, 125))
              {
                if (v37 > v38) {
                  goto LABEL_112;
                }
                unint64_t v22 = v37;
                uint64_t v23 = v38;
              }

              if (v30[2] >= v30[1])
              {
                uint64_t v21 = &v22[-v30[1]];
                if ((unint64_t)&v22[-v30[1]] <= v30[2] - v30[1])
                {
                  a3[5] = v30[1];
                  a3[6] = (unint64_t)v21;
                  if (v22 <= v25 && v24 <= v22)
                  {
                    char v24 = v22;
                    if (sub_1000B4F7C((unint64_t *)&v24, HIBYTE(v27)))
                    {
                      if ((a4 & 1) == 0 && v24 != v29) {
                        return 65543LL;
                      }
                      return 0LL;
                    }

                    return (v4 + 5);
                  }
                }
              }
            }

LABEL_112:
            __break(0x5519u);
            return (v4 + 5);
          }
        }

        goto LABEL_114;
      }
    }

    else
    {
      return 65538LL;
    }
  }

  return result;
}

uint64_t sub_1000B4EE0(uint64_t a1, uint64_t a2, _BYTE *a3, unint64_t *a4)
{
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  int v8 = ccder_blob_decode_tag(a1, &v10);
  uint64_t result = 0LL;
  if (v8)
  {
    if (v10 == a2) {
      return sub_1000B67C4(a1, a3, a4);
    }
  }

  return result;
}

uint64_t sub_1000B4F7C(unint64_t *a1, int a2)
{
  if (!a2) {
    return 1LL;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 0LL, &v9);
  if (!(_DWORD)result) {
    return result;
  }
  unint64_t v4 = *a1;
  if (__CFADD__(*a1, v9))
  {
    __break(0x5513u);
LABEL_12:
    __break(0x5519u);
    return result;
  }

  unint64_t v5 = v4 + v9;
  unint64_t v6 = a1[1];
  if (v4 <= v4 + v9)
  {
    BOOL v7 = v5 >= v6;
    BOOL v8 = v5 == v6;
  }

  else
  {
    BOOL v7 = 1;
    BOOL v8 = 0;
  }

  if (!v8 && v7) {
    goto LABEL_12;
  }
  *a1 = v5;
  return 1LL;
}

uint64_t CMSParseContentInfoSignedData(char *a1, uint64_t a2, unint64_t *a3)
{
  return CMSParseContentInfoSignedDataWithOptions(a1, a2, a3, 0);
}

uint64_t CMSParseSignerInfos(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, __int128 *))
{
  unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v85 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (__CFADD__(v4, v3)) {
    goto LABEL_93;
  }
  if (v4 > v4 + v3) {
    goto LABEL_92;
  }
  unint64_t v84 = *(void *)(a1 + 40);
  unint64_t v85 = v4 + v3;
  unint64_t v72 = 0xAAAAAAAAAAAAAAAALL;
  if (v4 >= v4 + v3)
  {
    unsigned int v48 = 0;
    uint64_t result = 0LL;
    if (v3) {
      return (v48 << 8) | 0x30008;
    }
    return result;
  }

  unsigned int v6 = 0;
  unsigned __int8 v60 = 0;
  int v7 = 256;
  while (1)
  {
    unsigned __int8 v71 = 0;
    __int128 v82 = 0u;
    __int128 v83 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v81 = 0u;
    DWORD2(v83) = 327681;
    LOBYTE(v82) = v6 + 1;
    if ((sub_1000B4EE0((uint64_t)&v84, 0x2000000000000010LL, &v71, &v72) & 1) == 0)
    {
      int v49 = 196609;
      return v7 | v49;
    }

    unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v70 = 0xAAAAAAAAAAAAAAAALL;
    if (__CFADD__(v84, v72)) {
      goto LABEL_93;
    }
    if (v84 > v84 + v72 || v84 + v72 > v85) {
      goto LABEL_92;
    }
    unint64_t v69 = v84;
    unint64_t v70 = v84 + v72;
    if ((ccder_blob_decode_uint64(&v69, &v73) & 1) == 0)
    {
      int v49 = 196610;
      return v7 | v49;
    }

    unint64_t v9 = v69;
    unint64_t v8 = v70;
    unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
    if (v69 > v70) {
      goto LABEL_92;
    }
    unint64_t v67 = v69;
    unint64_t v68 = v70;
    unint64_t v65 = v69;
    unint64_t v66 = v70;
    unint64_t v10 = v69;
LABEL_19:
    if (__CFADD__(v72, v10 - v9)) {
      goto LABEL_94;
    }
    if (v72 + v10 - v9 > v8 - v9) {
      goto LABEL_92;
    }
    *((void *)&v73 + 1) = v9;
    *(void *)&__int128 v74 = v72 + v10 - v9;
    if (__CFADD__(v10, v72)) {
      goto LABEL_93;
    }
    if (v10 > v10 + v72 || v10 + v72 > v70) {
      goto LABEL_92;
    }
    unint64_t v69 = v10 + v72;
    if (!ccder_blob_decode_AlgorithmIdentifierNULL(&v69, (unint64_t *)&v74 + 1))
    {
      int v49 = 196612;
      return v7 | v49;
    }

    unint64_t v63 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v64 = 0xAAAAAAAAAAAAAAAALL;
    if (v69 > v70) {
      goto LABEL_92;
    }
    unint64_t v63 = v69;
    unint64_t v64 = v70;
    if (ccder_blob_decode_tl(&v63, 0xA000000000000000LL, &v72))
    {
      if (v64 < v63 || v72 > v64 - v63) {
        goto LABEL_92;
      }
      *((void *)&v75 + 1) = v63;
      *(void *)&__int128 v76 = v72;
      if (__CFADD__(v63, v72)) {
        goto LABEL_93;
      }
      if (v63 > v63 + v72 || v63 + v72 > v64) {
        goto LABEL_92;
      }
      unint64_t v69 = v63 + v72;
      unint64_t v70 = v64;
    }

    else
    {
      *((void *)&v75 + 1) = 0LL;
      *(void *)&__int128 v76 = 0LL;
    }

    if ((ccder_blob_decode_AlgorithmIdentifierNULL(&v69, (unint64_t *)&v76 + 1) & 1) == 0)
    {
      int v49 = 196613;
      return v7 | v49;
    }

    if ((ccder_blob_decode_tl(&v69, 4LL, &v72) & 1) == 0)
    {
      int v49 = 196614;
      return v7 | v49;
    }

    if (v70 < v69 || v72 > v70 - v69) {
      goto LABEL_92;
    }
    *((void *)&v78 + 1) = v69;
    *(void *)&__int128 v79 = v72;
    if (__CFADD__(v69, v72)) {
      goto LABEL_93;
    }
    unint64_t v12 = v69 + v72;
    if (v69 > v69 + v72 || v12 > v70) {
      goto LABEL_92;
    }
    v69 += v72;
    unint64_t v63 = v12;
    unint64_t v64 = v70;
    if (sub_1000B6C18(&v63, 0xA000000000000001LL, 0LL, 125))
    {
      if (v63 > v64) {
        goto LABEL_92;
      }
      unint64_t v69 = v63;
      unint64_t v70 = v64;
    }

    if ((sub_1000B4F7C(&v69, v71) & 1) == 0)
    {
      int v49 = 196615;
      return v7 | v49;
    }

    digest = find_digest((uint64_t)&v74 + 8);
    if (digest)
    {
      unint64_t v14 = digest;
      unsigned int v15 = *(_DWORD *)(a1 + 96);
      if (!v15 || *digest <= v15)
      {
        uint64_t result = a3(a2, a1, &v73);
        if ((_DWORD)result != 327710)
        {
          if ((_DWORD)result) {
            return result;
          }
          unint64_t v17 = *(void *)(a1 + 64);
          if (v17 <= v60)
          {
            if (v17)
            {
              int v29 = v60 - 1;
              unint64_t v30 = *(void *)(a1 + 56);
              uint64_t v31 = 176LL * v29;
              if (__CFADD__(v30, v31)) {
                goto LABEL_93;
              }
              unint64_t v32 = v30 + 176LL * v29;
              if (v32 >= v30 + 176 * v17 || v32 < v30) {
                goto LABEL_92;
              }
              unint64_t v33 = find_digest(v30 + 176LL * v29 + 24);
              if (v33)
              {
                if (*v14 > *v33)
                {
                  unsigned int v34 = *(_DWORD *)(a1 + 96);
                  if (!v34 || *v14 <= v34)
                  {
                    unint64_t v35 = *(void *)(a1 + 56);
                    if (__CFADD__(v35, v31)) {
                      goto LABEL_93;
                    }
                    unsigned __int8 v36 = (_OWORD *)(v35 + 176LL * v29);
                    unint64_t v37 = v35 + 176LL * *(void *)(a1 + 64);
                    BOOL v38 = v37 >= (unint64_t)v36;
                    unint64_t v39 = v37 - (void)v36;
                    __int128 v40 = v73;
                    __int128 v41 = v75;
                    v36[1] = v74;
                    v36[2] = v41;
                    _OWORD *v36 = v40;
                    __int128 v42 = v76;
                    __int128 v43 = v77;
                    __int128 v44 = v79;
                    v36[5] = v78;
                    v36[6] = v44;
                    v36[3] = v42;
                    v36[4] = v43;
                    __int128 v45 = v80;
                    __int128 v46 = v81;
                    __int128 v47 = v83;
                    v36[9] = v82;
                    v36[10] = v47;
                    v36[7] = v45;
                    v36[8] = v46;
                  }
                }
              }
            }
          }

          else
          {
            unsigned int v18 = *(_DWORD *)(a1 + 96);
            if (!v18 || *v14 <= v18)
            {
              uint64_t v19 = *(void *)(a1 + 56);
              uint64_t v20 = (_OWORD *)(v19 + 176LL * v60);
              if (176 * v17 - 176LL * v60 < 0xB0) {
                goto LABEL_92;
              }
              __int128 v21 = v73;
              __int128 v22 = v75;
              v20[1] = v74;
              v20[2] = v22;
              *uint64_t v20 = v21;
              __int128 v23 = v76;
              __int128 v24 = v77;
              __int128 v25 = v79;
              v20[5] = v78;
              v20[6] = v25;
              v20[3] = v23;
              v20[4] = v24;
              __int128 v26 = v80;
              __int128 v27 = v81;
              __int128 v28 = v83;
              v20[9] = v82;
              v20[10] = v28;
              v20[7] = v26;
              v20[8] = v27;
              if (v60 == 0xFF)
              {
                __break(0x5507u);
                return result;
              }

              ++v60;
            }
          }
        }
      }
    }

    if (v69 > v85 || v84 > v69) {
      goto LABEL_92;
    }
    unint64_t v84 = v69;
    unsigned int v48 = v6 + 1;
    if (v6 <= 6)
    {
      v7 += 256;
      ++v6;
      if (v69 < v85) {
        continue;
      }
    }

    if (v69 == v85)
    {
      if (v60) {
        return 0LL;
      }
      uint64_t v50 = *(void *)(a1 + 64);
      if (!v50) {
        return 0LL;
      }
      if ((unint64_t)(176 * v50) >= 0xB0)
      {
        uint64_t result = 0LL;
        uint64_t v51 = *(_OWORD **)(a1 + 56);
        __int128 v52 = v73;
        __int128 v53 = v75;
        v51[1] = v74;
        v51[2] = v53;
        _OWORD *v51 = v52;
        __int128 v54 = v76;
        __int128 v55 = v77;
        __int128 v56 = v79;
        v51[5] = v78;
        v51[6] = v56;
        v51[3] = v54;
        v51[4] = v55;
        __int128 v57 = v80;
        __int128 v58 = v81;
        __int128 v59 = v83;
        v51[9] = v82;
        v51[10] = v59;
        v51[7] = v57;
        v51[8] = v58;
        return result;
      }

LABEL_92:
      __break(0x5519u);
LABEL_93:
      __break(0x5513u);
LABEL_94:
      __break(0x5500u);
    }

    return (v48 << 8) | 0x30008;
  }

  if ((ccder_blob_decode_tl(&v67, 0x8000000000000000LL, &v72) & 1) != 0)
  {
    unint64_t v10 = v67;
    unint64_t v11 = v68;
LABEL_17:
    if (v10 > v11) {
      goto LABEL_92;
    }
    unint64_t v69 = v10;
    unint64_t v70 = v11;
    goto LABEL_19;
  }

  if (ccder_blob_decode_tl(&v65, 0xA000000000000000LL, &v72))
  {
    unint64_t v10 = v65;
    unint64_t v11 = v66;
    goto LABEL_17;
  }

  int v49 = 196611;
  return v7 | v49;
}

uint64_t CMSBuildPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = *(void *)(a3 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  if (__CFADD__(v3, v4)) {
LABEL_49:
  }
    __break(0x5513u);
  unint64_t v5 = v3 + v4;
  if (v3 > v5) {
    goto LABEL_48;
  }
  unint64_t v20 = *(void *)(a3 + 8);
  unint64_t v21 = v5;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if (*(void *)a3 != 3LL)
  {
    if (*(void *)a3 != 1LL) {
      return 524289LL;
    }
    uint64_t v8 = 524293LL;
    if (v21 >= v20 && v19 <= v21 - v20)
    {
      unint64_t v15 = v20;
      unint64_t v16 = v19;
      if (__CFADD__(v20, v19)) {
        goto LABEL_49;
      }
      if (v20 <= v20 + v19 && v20 + v19 <= v21)
      {
        v20 += v19;
        if (v21 >= v20 && v19 <= v21 - v20)
        {
          unint64_t v17 = v20;
          unint64_t v18 = v19;
          if (__CFADD__(v20, v19)) {
            goto LABEL_49;
          }
          if (v20 <= v20 + v19 && v20 + v19 <= v21)
          {
            v20 += v19;
            unint64_t v9 = *(void **)(a2 + 24);
            if (!v9) {
              return v8;
            }
            while (compare_octet_string((uint64_t)&v15, (uint64_t)(v9 + 15))
                 || compare_octet_string((uint64_t)&v17, (uint64_t)(v9 + 17)))
            {
              unint64_t v9 = (void *)v9[34];
              if (!v9) {
                return v8;
              }
            }

            goto LABEL_36;
          }
        }
      }
    }

    goto LABEL_48;
  }

  if (*(void *)(a2 + 88) == 1LL) {
    return 524298LL;
  }
  unint64_t v15 = v3;
  unint64_t v16 = v5;
  if (ccder_blob_decode_tl(&v20, 0x8000000000000000LL, &v19))
  {
    unint64_t v11 = v20;
    unint64_t v10 = v21;
    goto LABEL_29;
  }

  uint64_t v8 = 524294LL;
  if (!ccder_blob_decode_tl(&v15, 0xA000000000000000LL, &v19)
    || !ccder_blob_decode_tl(&v15, 4LL, &v19))
  {
    return v8;
  }

  unint64_t v11 = v15;
  unint64_t v10 = v16;
  if (v15 > v16)
  {
LABEL_48:
    __break(0x5519u);
    goto LABEL_49;
  }

  unint64_t v20 = v15;
  unint64_t v21 = v16;
LABEL_29:
  if (v10 < v11 || v19 > v10 - v11) {
    goto LABEL_48;
  }
  unint64_t v17 = v11;
  unint64_t v18 = v19;
  if (__CFADD__(v11, v19)) {
    goto LABEL_49;
  }
  if (v11 > v11 + v19 || v11 + v19 > v10) {
    goto LABEL_48;
  }
  unint64_t v20 = v11 + v19;
  uint64_t CertificateUsingKeyIdentifier = X509ChainGetCertificateUsingKeyIdentifier((uint64_t *)(a2 + 24), (uint64_t)&v17);
  if (!CertificateUsingKeyIdentifier) {
    return 524295LL;
  }
  unint64_t v9 = (void *)CertificateUsingKeyIdentifier;
LABEL_36:
  if (v20 != v21) {
    return 524543LL;
  }
  uint64_t v13 = X509ChainBuildPath(v9, (uint64_t *)(a2 + 24), (void *)(a3 + 152));
  uint64_t v8 = v13;
  if (*(_DWORD *)(a3 + 168) == 327681) {
    *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = v13;
  }
  return v8;
}

uint64_t validateSignerInfo(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int v6 = (__int128 *)(a3 + 24);
  digest = find_digest(a3 + 24);
  if (!digest) {
    return 327682LL;
  }
  uint64_t v8 = (unint64_t *)(*((uint64_t (**)(void))digest + 3))();
  unint64_t v9 = v8;
  memset(v86, 0, sizeof(v86));
  unint64_t v10 = (_OWORD *)a2[13];
  unint64_t v11 = a2[14];
  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  if (v12)
  {
    if (a2[9] && a2[10])
    {
      unint64_t v10 = v86;
      uint64_t v13 = ccdigest(v8);
      unint64_t v11 = *v9;
      if (*v9 >= 0x41) {
        goto LABEL_206;
      }
      goto LABEL_16;
    }

    if (!v10) {
      goto LABEL_165;
    }
  }

  if (*v8 != v11)
  {
LABEL_165:
    *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = 327710;
    return 327710LL;
  }

  if (v11 > 0x40) {
    goto LABEL_206;
  }
  uint64_t v13 = __memcpy_chk(v86, a2[13], a2[14], 64LL);
LABEL_16:
  *(void *)(a3 + 12_Block_object_dispose(va, 8) = v10;
  *(void *)(a3 + 136) = v11;
  unint64_t v15 = (const void **)(a3 + 128);
  uint64_t v16 = *(void *)(a3 + 48);
  if (!v16)
  {
LABEL_185:
    uint64_t result = CMSBuildPath(v13, (uint64_t)a2, a3);
    switch((int)result)
    {
      case 524293:
      case 524295:
        *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = result;
        return 0LL;
      case 524294:
        goto LABEL_202;
      case 524296:
        if (*(_DWORD *)(a3 + 168) != 458753) {
          goto LABEL_193;
        }
        int v66 = 524296;
LABEL_192:
        *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = v66;
LABEL_193:
        uint64_t v67 = *v9;
        if (*v9 > 0x40) {
          goto LABEL_206;
        }
        v75[0] = (uint64_t)v86;
        v75[1] = v67;
        uint64_t result = X509CertificateCheckSignatureDigest(29, *(void *)(a3 + 152), v75, v6, (__int128 *)(a3 + 88));
        if (!(_DWORD)result || (_DWORD)result == 655648 || (_DWORD)result == 655632)
        {
          int v68 = *(_DWORD *)(a3 + 168);
          if (!v68 || v68 == 458753 || v68 == 327681) {
            *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = result;
          }
          uint64_t result = 0LL;
        }

        break;
      case 524297:
        int v66 = 524297;
        goto LABEL_192;
      default:
        if ((_DWORD)result) {
          goto LABEL_202;
        }
        goto LABEL_193;
    }

    goto LABEL_202;
  }

  uint64_t v72 = a1;
  __int128 v79 = (char *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v80 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = *(void *)(a3 + 40);
  if (__CFADD__(v17, v16)) {
LABEL_207:
  }
    __break(0x5513u);
  unint64_t v18 = v17 + v16;
  if (v17 > v18)
  {
LABEL_206:
    __break(0x5519u);
    goto LABEL_207;
  }

  __int128 v79 = *(char **)(a3 + 40);
  unint64_t v80 = v18;
  unint64_t v78 = 0xAAAAAAAAAAAAAAAALL;
  if (v17 >= v18)
  {
    uint64_t result = 262156LL;
    goto LABEL_202;
  }

  int v19 = 0;
  uint64_t v74 = 0x2000000000000010LL;
  unsigned int v71 = 262146;
  unsigned int v73 = 262147;
  int v70 = 458754;
  do
  {
    if (!ccder_blob_decode_tl(&v79, v74, &v78))
    {
      uint64_t result = 262145LL;
      goto LABEL_202;
    }

    if (__CFADD__(v79, v78)) {
      goto LABEL_207;
    }
    unint64_t v20 = &v79[v78];
    __int128 v77 = (char *)0xAAAAAAAAAAAAAAAALL;
    __int128 v76 = (char *)0xAAAAAAAAAAAAAAAALL;
    __int128 v76 = v79;
    __int128 v77 = &v79[v78];
    if (!ccder_blob_decode_tl(&v76, 6LL, &v78))
    {
      uint64_t result = v71;
      goto LABEL_202;
    }

    __int128 v22 = v76;
    if (__CFADD__(v76, v78)) {
      goto LABEL_207;
    }
    if (v76 > &v76[v78] || &v76[v78] > v77) {
      goto LABEL_206;
    }
    v76 += v78;
    if (v78 != 9) {
      goto LABEL_168;
    }
    if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 3)
    {
      if ((v19 & 1) != 0) {
        goto LABEL_170;
      }
      __int128 v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
      int v33 = ccder_blob_decode_tl(&v76, 0x2000000000000011LL, &v81);
      uint64_t result = v73;
      if (v33)
      {
        *(void *)unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
        if (__CFADD__(v76, *(void *)v84)) {
          goto LABEL_207;
        }
        if (&v76[*(void *)v84] == v77)
        {
          if (v76 > &v76[*(void *)v84]) {
            goto LABEL_206;
          }
          else {
            uint64_t result = 0LL;
          }
        }

        else
        {
LABEL_73:
          uint64_t result = 262148LL;
        }
      }

      v19 |= 1u;
LABEL_154:
      if ((_DWORD)result) {
        goto LABEL_202;
      }
      goto LABEL_155;
    }

    if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 4)
    {
      if ((v19 & 2) != 0) {
        goto LABEL_170;
      }
      __int128 v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
      int v34 = ccder_blob_decode_tl(&v76, 0x2000000000000011LL, &v81);
      uint64_t result = v73;
      if (v34)
      {
        *(void *)unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
        if (__CFADD__(v76, *(void *)v84)) {
          goto LABEL_207;
        }
        if (&v76[*(void *)v84] == v77 && (uint64_t v50 = find_digest((uint64_t)v6)) != 0LL)
        {
          uint64_t v51 = *(void *)v84;
          if (*(void *)v84 != *(void *)(a3 + 136)
            || v51 != *(void *)(*((uint64_t (**)(void))v50 + 3))()
            || memcmp(*v15, v76, *(size_t *)v84))
          {
            *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = v70;
          }

          uint64_t result = 0LL;
        }

        else
        {
LABEL_80:
          uint64_t result = 262148LL;
        }
      }

      v19 |= 2u;
      goto LABEL_154;
    }

    if (*(void *)v22 == 0x96463F78648862ALL && v22[8] == 2)
    {
      if ((v19 & 0x10) != 0) {
        goto LABEL_170;
      }
      unint64_t v83 = 0xAAAAAAAAAAAAAAAALL;
      int v35 = ccder_blob_decode_tl(&v76, 0x2000000000000011LL, &v83);
      uint64_t result = v73;
      if (v35)
      {
        unsigned __int8 v36 = v76;
        unint64_t v37 = v77;
        if (v76 >= v77)
        {
LABEL_111:
          if (v36 == v37) {
            uint64_t result = 0LL;
          }
          else {
            uint64_t result = 262155LL;
          }
        }

        else
        {
          while (1)
          {
            if (!ccder_blob_decode_tl(&v76, v74, &v83))
            {
              uint64_t result = 262157LL;
              goto LABEL_153;
            }

            memset(v84, 170, 16);
            if (__CFADD__(v76, v83)) {
              goto LABEL_207;
            }
            if (v76 > &v76[v83] || &v76[v83] > v77) {
              goto LABEL_206;
            }
            *(void *)unint64_t v84 = v76;
            *(void *)&v84[8] = &v76[v83];
            if ((ccder_blob_decode_tl(v84, 6LL, &v83) & 1) == 0)
            {
              uint64_t result = 262151LL;
              goto LABEL_153;
            }

            __int128 v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
            __int128 v82 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
            if (*(void *)&v84[8] < *(void *)v84 || v83 > *(void *)&v84[8] - *(void *)v84) {
              goto LABEL_206;
            }
            __int128 v81 = *(_BYTE **)v84;
            __int128 v82 = (_BYTE *)v83;
            if (__CFADD__(*(void *)v84, v83)) {
              goto LABEL_207;
            }
            if (*(void *)v84 > *(void *)v84 + v83 || *(void *)v84 + v83 > *(void *)&v84[8]) {
              goto LABEL_206;
            }
            *(void *)v84 += v83;
            if (!ccder_blob_decode_tl(v84, 4LL, &v83))
            {
              uint64_t result = 262152LL;
              goto LABEL_153;
            }

            uint64_t v39 = *(void *)v84;
            if (__CFADD__(*(void *)v84, v83)) {
              goto LABEL_207;
            }
            unint64_t v40 = *(void *)v84 + v83;
            if (*(void *)v84 > *(void *)v84 + v83) {
              goto LABEL_206;
            }
            uint64_t v41 = *(void *)&v84[8];
            if (v40 > *(void *)&v84[8]) {
              goto LABEL_206;
            }
            *(void *)v84 += v83;
            if (v40 != *(void *)&v84[8]) {
              break;
            }
            __int128 v42 = find_digest((uint64_t)&v81);
            if (v42)
            {
              unsigned int v43 = *v42;
              if (*v42 > *(_DWORD *)(a3 + 104))
              {
                unsigned int v44 = *(_DWORD *)(v72 + 8);
                if (!v44 || v43 <= v44)
                {
                  *(_DWORD *)(a3 + 104) = v43;
                  unint64_t v45 = v83;
                  if (v83 > v41 - v39) {
                    goto LABEL_206;
                  }
                  *(void *)(a3 + 112) = v39;
                  *(void *)(a3 + 120) = v45;
                }
              }
            }

            unsigned __int8 v36 = *(char **)v84;
            unint64_t v37 = v77;
            __int128 v76 = *(char **)v84;
          }

          uint64_t result = 262153LL;
        }
      }

LABEL_153:
      v19 |= 0x10u;
      goto LABEL_154;
    }

    if (*(void *)v22 == 0x9010DF78648862ALL && v22[8] == 5)
    {
      if ((v19 & 4) != 0) {
        goto LABEL_170;
      }
      unint64_t v83 = 0xAAAAAAAAAAAAAAAALL;
      int v46 = ccder_blob_decode_tl(&v76, 0x2000000000000011LL, &v83);
      uint64_t result = v73;
      if (v46)
      {
        __int128 v81 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
        memset(v84, 170, 16);
        if (v76 > v77) {
          goto LABEL_206;
        }
        *(void *)unint64_t v84 = v76;
        *(void *)&v84[8] = v77;
        if (ccder_blob_decode_tl(&v76, 23LL, &v81))
        {
          __int128 v47 = v76;
LABEL_135:
          if (__CFADD__(v47, v81)) {
            goto LABEL_207;
          }
          if (&v81[(void)v47] == v77) {
            uint64_t result = 0LL;
          }
          else {
            uint64_t result = 262148LL;
          }
          goto LABEL_148;
        }

        if ((ccder_blob_decode_tl(v84, 24LL, &v81) & 1) != 0)
        {
          __int128 v47 = *(char **)v84;
          if (*(void *)v84 > *(void *)&v84[8]) {
            goto LABEL_206;
          }
          __int128 v76 = *(char **)v84;
          __int128 v77 = *(char **)&v84[8];
          goto LABEL_135;
        }

        uint64_t result = 262148LL;
      }

LABEL_208:
  __break(0x5500u);
  return result;
}

uint64_t validateSignerInfoAndChain(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = validateSignerInfo((uint64_t)a1, a2, a3);
  if (!(_DWORD)v5)
  {
    int v7 = X509ChainCheckPath(29, (uint64_t *)(a3 + 152), *a1);
    if (v7)
    {
      if (!*(_DWORD *)(a3 + 168)) {
        *(_DWORD *)(a3 + 16_Block_object_dispose(va, 8) = v7;
      }
    }
  }

  return v5;
}

uint64_t CMSVerifySignedDataWithLeaf( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  return sub_1000B6530(a1, a2, a3, a4, a5, a6, a7, &v8, &v9);
}

uint64_t sub_1000B6530( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v29 = 0LL;
  v30[0] = 0LL;
  memset(v28, 0, sizeof(v28));
  uint64_t v26 = 0LL;
  uint64_t v25 = 0LL;
  __int128 v23 = 0u;
  __int128 v24 = (char *)&v23 + 8;
  v30[1] = 0LL;
  memset(__b, 170, sizeof(__b));
  v22[0] = 4LL;
  v22[1] = (unint64_t)__b;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  memset(v19, 0, sizeof(v19));
  __int128 v27 = v19;
  *(void *)&v28[0] = 1LL;
  DWORD2(v21) = 327681;
  if (a2 < 0) {
    goto LABEL_19;
  }
  uint64_t result = CMSParseContentInfoSignedDataWithOptions(a1, a2, v22, 0);
  if ((_DWORD)result) {
    return result;
  }
  if (!a4) {
    goto LABEL_7;
  }
  uint64_t result = 131091LL;
  if (a4 < 0) {
LABEL_19:
  }
    __break(0x5519u);
  *((void *)&v28[0] + 1) = a3;
  *(void *)&v28[1] = a4;
LABEL_7:
  v30[0] = a5;
  DWORD2(v21) = 458753;
  uint64_t result = CMSParseSignerInfos( (uint64_t)v22,  (uint64_t)v30,  (uint64_t (*)(uint64_t, uint64_t, __int128 *))validateSignerInfoAndChain);
  if (!(_DWORD)result)
  {
    uint64_t result = DWORD2(v21);
    if (!DWORD2(v21))
    {
      if (a6 && a7) {
        uint64_t result = X509CertificateParseKey(*((uint64_t *)&v20 + 1), a6, a7);
      }
      if (!a4)
      {
        if (a8)
        {
          if (a9)
          {
            uint64_t v18 = *(void *)&v28[1];
            if (*(void *)&v28[1])
            {
              if (*((void *)&v28[0] + 1))
              {
                *a8 = *((void *)&v28[0] + 1);
                *a9 = v18;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t CMSVerifySignedData(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v8 = 0LL;
  return sub_1000B6530(a1, a2, a3, a4, a5, &v6, &v7, &v8, &v9);
}

uint64_t CMSVerifyAndReturnSignedData(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  return sub_1000B6530(a1, a2, 0LL, 0LL, a5, &v6, &v7, a3, a4);
}

uint64_t sub_1000B67C4(uint64_t result, _BYTE *a2, unint64_t *a3)
{
  *a2 = 0;
  unint64_t v3 = *(unsigned __int8 **)result;
  if (!*(void *)result) {
    return 0LL;
  }
  unint64_t v4 = *(void *)(result + 8);
  uint64_t v5 = v3 + 1;
  if (v3 >= v3 + 1 || (unint64_t)v5 > v4)
  {
LABEL_41:
    __break(0x5519u);
LABEL_42:
    __break(0x5513u);
    return result;
  }

  *(void *)uint64_t result = v5;
  unint64_t v7 = *v3;
  if ((char)*v3 < 0)
  {
    switch(*v3)
    {
      case 0x80u:
        unint64_t v7 = v4 - (void)v5;
        *a2 = 1;
        break;
      case 0x81u:
        uint64_t v8 = v3 + 2;
        *(void *)uint64_t result = v8;
        unint64_t v7 = *v5;
        uint64_t v5 = v8;
        break;
      case 0x82u:
        uint64_t v9 = v3 + 3;
        unint64_t v10 = (unint64_t)v3[1] << 8;
        uint64_t v11 = v3[2];
        goto LABEL_40;
      case 0x83u:
        uint64_t v9 = v3 + 4;
        unint64_t v10 = ((unint64_t)v3[1] << 16) | ((unint64_t)v3[2] << 8);
        uint64_t v11 = v3[3];
LABEL_40:
        unint64_t v7 = v10 | v11;
        *(void *)uint64_t result = v9;
        uint64_t v5 = v9;
        break;
      default:
        return 0LL;
    }
  }

  *a3 = v7;
  return 1LL;
}

uint64_t sub_1000B6980( unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  *a4 = 0LL;
  a4[1] = 0LL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (*a1 > v6)
  {
LABEL_43:
    __break(0x5519u);
LABEL_44:
    __break(0x5513u);
  }

  unint64_t v30 = *a1;
  unint64_t v31 = v6;
  BOOL v7 = v5 >= v6 || a3 == 0;
  if (v7)
  {
    unint64_t v12 = 0LL;
LABEL_8:
    if (a5) {
      *a5 = v12;
    }
    return 1LL;
  }

  else
  {
    unint64_t v12 = 0LL;
    unint64_t v13 = 304 * a3;
    unint64_t v14 = a2 + 304 * a3;
    unint64_t v25 = ~a2;
    __int128 v27 = (unint64_t **)(a4 + 1);
    __int128 v23 = (unint64_t *)(a2 + 272);
    unint64_t v15 = a2;
    while (1)
    {
      char v29 = 0;
      if (!v32) {
        goto LABEL_8;
      }
      if (v15 > v14) {
        goto LABEL_43;
      }
      if (v15 < a2) {
        goto LABEL_43;
      }
      BOOL v16 = v13 >= 0x130;
      v13 -= 304LL;
      if (!v16) {
        goto LABEL_43;
      }
      *(_OWORD *)(v15 + 272) = 0u;
      *(_OWORD *)(v15 + 28_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v15 + 240) = 0u;
      *(_OWORD *)(v15 + 256) = 0u;
      *(_OWORD *)(v15 + 20_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v15 + 2memset(v17, 0, 24) = 0u;
      *(_OWORD *)(v15 + 176) = 0u;
      *(_OWORD *)(v15 + 192) = 0u;
      *(_OWORD *)(v15 + 144) = 0u;
      *(_OWORD *)(v15 + 160) = 0u;
      *(_OWORD *)(v15 + 112) = 0u;
      *(_OWORD *)(v15 + 12_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v15 + 80) = 0u;
      *(_OWORD *)(v15 + 96) = 0u;
      *(_OWORD *)(v15 + 4_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)(v15 + memset(&context.info, 0, 64) = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      *(_OWORD *)(v15 + 32) = 0u;
      *(_OWORD *)unint64_t v15 = 0u;
      if (v12)
      {
        if (v15 + 304 > v14) {
          goto LABEL_43;
        }
        *(void *)(v15 + 272) = 0LL;
        unint64_t v17 = *v27;
        *(void *)(v15 + 280) = *v27;
        if (v15)
        {
          if (v15 >= v14) {
            goto LABEL_43;
          }
        }

        *unint64_t v17 = v15;
        *__int128 v27 = (unint64_t *)(v15 + 272);
      }

      else
      {
        if (v15 + 304 > v14) {
          goto LABEL_43;
        }
        unint64_t v18 = *a4;
        *__int128 v23 = *a4;
        int v19 = (unint64_t **)(v18 + 280);
        BOOL v7 = v18 == 0;
        __int128 v20 = v27;
        if (!v7) {
          __int128 v20 = v19;
        }
        *__int128 v20 = v23;
        if (v15)
        {
          if (v15 >= v14) {
            goto LABEL_43;
          }
        }

        *a4 = v15;
        *(void *)(a2 + 280) = a4;
      }

      if (v6 < v5) {
        goto LABEL_43;
      }
      unint64_t v21 = v30;
      uint64_t v22 = v30 - v5;
      if (v30 - v5 > v6 - v5) {
        goto LABEL_43;
      }
      if (v15 + 304 > v14) {
        goto LABEL_43;
      }
      *(void *)unint64_t v15 = v5;
      *(void *)(v15 + _Block_object_dispose(va, 8) = v22;
      unint64_t v6 = v31;
      if (v21 > v31) {
        goto LABEL_43;
      }
      *a1 = v21;
      a1[1] = v6;
      ++v12;
      if (v21 < v6)
      {
        v15 += 304LL;
        unint64_t v5 = v21;
        if (v12 < a3) {
          continue;
        }
      }

      goto LABEL_8;
    }
  }

uint64_t sub_1000B6C18(unint64_t *a1, uint64_t a2, unint64_t *a3, int a4)
{
  char v15 = 0;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  int v8 = ccder_blob_decode_tag(a1, &v14);
  uint64_t result = 0LL;
  if (v8 && v14 == a2)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = sub_1000B67C4((uint64_t)a1, &v15, &v13);
    if ((result & 1) == 0) {
      return 0LL;
    }
    if (a3)
    {
      unint64_t v10 = a1[1];
      if (*a1 > v10) {
        goto LABEL_18;
      }
      *a3 = *a1;
      a3[1] = v10;
    }

    if (v15)
    {
      if (a4 >= 1)
      {
        uint64_t result = sub_1000B6C18(a1, 0LL, 0LL, (char)(a4 - 1));
        if (!(_DWORD)result) {
          return result;
        }
        return (sub_1000B4F7C(a1, 1) & 1) != 0;
      }

      return 0LL;
    }

    unint64_t v11 = *a1;
    if (__CFADD__(*a1, v13))
    {
LABEL_19:
      __break(0x5513u);
      return result;
    }

    unint64_t v12 = v11 + v13;
    if (v11 <= v11 + v13 && v12 <= a1[1])
    {
      *a1 = v12;
      return 1LL;
    }

uint64_t compare_octet_string(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  size_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return memcmp(*(const void **)a1, *(const void **)a2, v2);
  }
  if (v2 > v3) {
    return 0xFFFFFFFFLL;
  }
  return 1LL;
}

uint64_t compare_octet_string_raw(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3 = *(void *)(a1 + 8);
  if (v3 == a3) {
    return memcmp(*(const void **)a1, a2, a3);
  }
  if (v3 > a3) {
    return 0xFFFFFFFFLL;
  }
  return 1LL;
}

uint64_t compare_octet_string_partial(uint64_t a1, uint64_t a2)
{
  size_t v2 = *(void *)(a1 + 8);
  if (v2 <= *(void *)(a2 + 8)) {
    return memcmp(*(const void **)a2, *(const void **)a1, v2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t ccder_blob_decode_AlgorithmIdentifierNULL(unint64_t *a1, unint64_t *a2)
{
  uint64_t v16 = 0LL;
  unint64_t v15 = 0LL;
  uint64_t result = ccder_blob_decode_tl(a1, 0x2000000000000010LL, &v16);
  if ((_DWORD)result)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v5 = *a1;
    if (!__CFADD__(*a1, v16))
    {
      if (v5 > v5 + v16 || v5 + v16 > a1[1]) {
        goto LABEL_28;
      }
      unint64_t v13 = *a1;
      unint64_t v14 = v5 + v16;
      uint64_t result = ccder_blob_decode_tl(&v13, 6LL, &v15);
      if (!(_DWORD)result) {
        return result;
      }
      unint64_t v7 = v15;
      unint64_t v8 = v13;
      if (a2)
      {
        if (v14 < v13 || v15 > v14 - v13) {
          goto LABEL_28;
        }
        *a2 = v13;
        a2[1] = v7;
      }

      if (!__CFADD__(v8, v7))
      {
        unint64_t v9 = v8 + v7;
        if (v9 == v14)
        {
          if (v9 <= a1[1] && *a1 <= v9)
          {
            *a1 = v9;
            return 1LL;
          }

uint64_t ccder_blob_decode_Time(unint64_t *a1, unint64_t *a2)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v13 = 0LL;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v2 = a1[1];
  if (*a1 > v2) {
    goto LABEL_17;
  }
  unint64_t v11 = *a1;
  unint64_t v12 = v2;
  uint64_t result = ccder_blob_decode_tl(&v11, 23LL, &v13);
  if ((result & 1) != 0)
  {
    unint64_t v6 = v13;
    if (v13 != 13) {
      return 0LL;
    }
LABEL_8:
    unint64_t v9 = v11;
    if (a2)
    {
      if (v12 < v11 || v6 > v12 - v11) {
        goto LABEL_17;
      }
      *a2 = v11;
      a2[1] = v6;
    }

    if (__CFADD__(v9, v6))
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v10 = v9 + v6;
    if (v10 <= a1[1] && *a1 <= v10)
    {
      *a1 = v10;
      return 1LL;
    }

uint64_t ccder_blob_decode_GeneralName(unint64_t *a1, int *a2, unint64_t *a3)
{
  uint64_t result = 0LL;
  unint64_t v23 = 0LL;
  if (a2 && a3)
  {
    *a3 = 0LL;
    a3[1] = 0LL;
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v6 = a1[1];
    if (*a1 > v6) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v6;
    uint64_t result = ccder_blob_decode_tl(&v21, 0xA000000000000000LL, &v23);
    if ((_DWORD)result)
    {
      *a2 = 0;
      goto LABEL_6;
    }

    unint64_t v9 = a1[1];
    if (*a1 > v9) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v9;
    uint64_t result = ccder_blob_decode_tl(&v21, 0x8000000000000001LL, &v23);
    if ((_DWORD)result)
    {
      unint64_t v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      unint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      int v12 = 1;
      goto LABEL_18;
    }

    unint64_t v13 = a1[1];
    if (*a1 > v13) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v13;
    uint64_t result = ccder_blob_decode_tl(&v21, 0x8000000000000002LL, &v23);
    if ((_DWORD)result)
    {
      unint64_t v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      unint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      int v12 = 2;
      goto LABEL_18;
    }

    unint64_t v14 = a1[1];
    if (*a1 > v14) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v14;
    uint64_t result = ccder_blob_decode_tl(&v21, 0xA000000000000003LL, &v23);
    if ((_DWORD)result)
    {
      int v15 = 3;
LABEL_27:
      *a2 = v15;
LABEL_6:
      if (!__CFADD__(v21, v23))
      {
        unint64_t v8 = v21 + v23;
LABEL_20:
        if (v8 <= a1[1] && *a1 <= v8)
        {
          *a1 = v8;
          return 1LL;
        }

LABEL_49:
        __break(0x5519u);
      }

      goto LABEL_50;
    }

    unint64_t v16 = a1[1];
    if (*a1 > v16) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v16;
    uint64_t result = ccder_blob_decode_tl(&v21, 0xA000000000000004LL, &v23);
    if ((_DWORD)result)
    {
      unint64_t v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      unint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      int v12 = 4;
      goto LABEL_18;
    }

    unint64_t v17 = a1[1];
    if (*a1 > v17) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v17;
    uint64_t result = ccder_blob_decode_tl(&v21, 0xA000000000000005LL, &v23);
    if ((_DWORD)result)
    {
      int v15 = 5;
      goto LABEL_27;
    }

    unint64_t v18 = a1[1];
    if (*a1 > v18) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v18;
    uint64_t result = ccder_blob_decode_tl(&v21, 0x8000000000000006LL, &v23);
    if ((_DWORD)result)
    {
      unint64_t v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      unint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      int v12 = 6;
      goto LABEL_18;
    }

    unint64_t v19 = a1[1];
    if (*a1 > v19) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v19;
    uint64_t result = ccder_blob_decode_tl(&v21, 0x8000000000000007LL, &v23);
    if ((_DWORD)result)
    {
      unint64_t v10 = v21;
      if (v22 < v21) {
        goto LABEL_49;
      }
      unint64_t v11 = v23;
      if (v23 > v22 - v21) {
        goto LABEL_49;
      }
      *a3 = v21;
      a3[1] = v11;
      int v12 = 7;
LABEL_18:
      *a2 = v12;
      if (!__CFADD__(v10, v11))
      {
        unint64_t v8 = v10 + v11;
        goto LABEL_20;
      }

    __break(0x5519u);
    goto LABEL_50;
  }

  if (v2 != v4) {
    return 720904LL;
  }
  if (a2[1] && *a2) {
    return 0LL;
  }
  *a2 = 0LL;
  a2[1] = 0LL;
  return 720905LL;
}

LABEL_50:
      __break(0x5513u);
      return result;
    }

    unint64_t v20 = a1[1];
    if (*a1 > v20) {
      goto LABEL_49;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = v20;
    uint64_t result = ccder_blob_decode_tl(&v21, 0x8000000000000008LL, &v23);
    if ((_DWORD)result)
    {
      int v15 = 8;
      goto LABEL_27;
    }
  }

  return result;
}

        __break(0x5513u);
        goto LABEL_51;
      }

uint64_t ccder_blob_check_null(uint64_t a1)
{
  uint64_t v2 = 0LL;
  LODWORD(result) = ccder_blob_decode_tl(a1, 5LL, &v2);
  if (v2) {
    return 0LL;
  }
  else {
    return result;
  }
}

uint64_t CTParseCertificateSet(unint64_t a1, unint64_t a2, _OWORD *a3, uint64_t a4, void *a5)
{
  uint64_t v6 = 0LL;
  if (a1 < a2 && a4)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = a4 - 1;
    unint64_t v10 = a3;
    unint64_t v11 = (unint64_t)&a3[a4];
    while (1)
    {
      *(void *)&__int128 v12 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v17[17] = v12;
      v17[18] = v12;
      v17[15] = v12;
      _BYTE v17[16] = v12;
      v17[13] = v12;
      v17[14] = v12;
      v17[11] = v12;
      v17[12] = v12;
      v17[9] = v12;
      v17[10] = v12;
      v17[7] = v12;
      v17[8] = v12;
      v17[5] = v12;
      v17[6] = v12;
      void v17[3] = v12;
      void v17[4] = v12;
      v17[1] = v12;
      v17[2] = v12;
      v17[0] = v12;
      unint64_t v15 = a1;
      unint64_t v16 = a2;
      uint64_t result = X509CertificateParse((unint64_t *)v17, &v15);
      if ((_DWORD)result) {
        break;
      }
      a1 = v15;
      a2 = v16;
      *unint64_t v10 = v17[0];
      uint64_t v6 = v8 + 1;
      if (a1 < a2)
      {
        ++v10;
        if (v9 != v8++) {
          continue;
        }
      }

      goto LABEL_11;
    }
  }

  else
  {
LABEL_11:
    uint64_t result = 0LL;
    if (a5) {
      *a5 = v6;
    }
  }

  return result;
}

uint64_t CTParseExtensionValue( unint64_t a1, uint64_t a2, const void *a3, size_t a4, void *a5, void *a6)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  memset(v11, 0, sizeof(v11));
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_11;
  }
  v10[0] = a1;
  v10[1] = a1 + a2;
  uint64_t result = X509CertificateParseWithExtension((unint64_t *)v11, v10, a3, a4);
  if (!(_DWORD)result)
  {
    uint64_t result = 720914LL;
    if (*((void *)&v12 + 1))
    {
      uint64_t v9 = v13;
      if ((void)v13)
      {
        uint64_t result = 0LL;
        if (a5)
        {
          if (a6)
          {
            uint64_t result = 0LL;
            *a5 = *((void *)&v12 + 1);
            *a6 = v9;
          }
        }
      }
    }
  }

  return result;
}

uint64_t CTParseKey(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_7:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_7;
  }
  v7[0] = a1;
  v7[1] = a1 + a2;
  uint64_t result = X509CertificateParse((unint64_t *)v8, v7);
  if (!(_DWORD)result) {
    return X509CertificateParseKey((uint64_t)v8, a3, a4);
  }
  return result;
}

uint64_t CTEvaluateSavageCertsWithUID( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, BOOL *a9)
{
  return sub_1000B76DC(a1, a2, a3, a4, a5, a6, a7, a8, 0LL, 0LL, a9, (uint64_t)&unk_100122B88, 2LL);
}

uint64_t sub_1000B76DC( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, const void *a9, size_t a10, BOOL *a11, uint64_t a12, uint64_t a13)
{
  uint64_t result = (uint64_t)memset(__b, 170, sizeof(__b));
  memset(v33, 170, sizeof(v33));
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v32 = 0LL;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(a1, a2)) {
    goto LABEL_34;
  }
  if (a1 + a2 < a1) {
    goto LABEL_35;
  }
  unint64_t v30 = a1;
  unint64_t v31 = a1 + a2;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(&v30, (unint64_t)__b, 4LL, &v33[2], &v32);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t result = 327690LL;
  if (v30 != v31) {
    return result;
  }
  if (v32 != 2) {
    return 327692LL;
  }
  X509ChainResetChain(v33, &v33[2]);
  __b[74] = v33[0];
  unint64_t v22 = v33[0] ? (uint64_t *)(v33[0] + 296) : &v33[1];
  *unint64_t v22 = (uint64_t)&__b[74];
  if ((void *)((char *)&__b[38] + 1) != 0LL && (unint64_t)__b >= 0xFFFFFFFFFFFFFECFLL) {
LABEL_34:
  }
    __break(0x5513u);
  v33[0] = (uint64_t)&__b[38];
  __b[75] = v33;
  __b[36] = 0LL;
  __b[37] = v33[1];
  *(void *)v33[1] = __b;
  v33[1] = (uint64_t)&__b[36];
  uint64_t result = X509ChainCheckPathWithOptions(12, v33, a12, 0LL);
  if ((_DWORD)result) {
    return result;
  }
  uint64_t v23 = **(void **)(v33[1] + 8);
  uint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
  if ((a4 & 0x8000000000000000LL) != 0) {
    goto LABEL_35;
  }
  uint64_t v28 = a3;
  unint64_t v29 = a4;
  __int128 v24 = (__int128 *)oidForPubKeyLength();
  uint64_t result = X509CertificateCheckSignatureWithPublicKey( &v28,  (uint64_t)&ecPublicKey,  v24,  v23 + 16,  (__int128 *)(v23 + 40),  (__int128 *)(v23 + 56));
  if ((_DWORD)result) {
    return result;
  }
  if (a9 && a10)
  {
    if ((a10 & 0x8000000000000000LL) != 0) {
      goto LABEL_35;
    }
  }

  unint64_t v25 = v33[0];
  LODWORD(result) = X509CertificateParseKey(v33[0], a5, a6);
  int v26 = result;
  if ((_DWORD)result) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 327691LL;
  }
  if (!v25 || v26) {
    return result;
  }
  if (a11) {
    *a11 = (*(void *)(v25 + 240) & a13) != 0;
  }
  if (!a7 || !a8) {
    return 0LL;
  }
  v27[0] = 0LL;
  v27[1] = 0LL;
  if (v25 >= v25 + 304) {
    goto LABEL_35;
  }
  uint64_t result = X509CertificateSubjectNameGetCommonName((unint64_t *)(v25 + 104), v27);
  if ((_DWORD)result) {
    return result;
  }
  if (a8 < 0)
  {
LABEL_35:
    __break(0x5519u);
    return result;
  }

  uint64_t result = sub_1000B85D4((uint64_t)v27, a7, a8);
  if (!(_DWORD)result) {
    return 0LL;
  }
  return result;
}

uint64_t CTEvaluateSavageCerts( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, BOOL *a7)
{
  return sub_1000B76DC(a1, a2, a3, a4, a5, a6, 0LL, 0LL, 0LL, 0LL, a7, (uint64_t)&unk_100122B88, 2LL);
}

uint64_t CTEvaluateYonkersCerts( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, void *a6, _BYTE *a7, uint64_t a8, BOOL *a9)
{
  return sub_1000B76DC(a1, a2, a3, a4, a5, a6, a7, a8, 0LL, 0LL, a9, (uint64_t)&unk_100122BC0, 0x80000LL);
}

uint64_t CTEvaluateSensorCerts( unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, size_t a6, void *a7, void *a8, _BYTE *a9, uint64_t a10, BOOL *a11)
{
  return sub_1000B76DC(a1, a2, a3, a4, a7, a8, a9, a10, a5, a6, a11, (uint64_t)&unk_100122BF8, 0x10000000000LL);
}

uint64_t CTEvaluateCertsForPolicy( unint64_t a1, uint64_t a2, char a3, int a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, void *a10, __int128 *a11)
{
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_42:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_42;
  }
  uint64_t v36 = a1 + a2;
  unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v35 = a1;
  uint64_t result = (uint64_t)X509ChainParseCertificateSet(&v35, (unint64_t)v39, 4LL, &v38[2], &v37);
  if ((_DWORD)result) {
    return result;
  }
  if (v35 != v36) {
    return 327690LL;
  }
  if ((a4 & 1) == 0 && !v40)
  {
    X509ChainResetChain(v38, &v38[2]);
    uint64_t v20 = v38[0];
    unint64_t v21 = (uint64_t *)(v38[0] + 296);
    if (!v38[0]) {
      unint64_t v21 = &v38[1];
    }
    *unint64_t v21 = (uint64_t)v41;
    v38[0] = (uint64_t)v39;
    v41[0] = v20;
    v41[1] = v38;
LABEL_20:
    v34[0] = a7;
    v34[1] = a8;
    if (a7) {
      BOOL v23 = a8 == 0;
    }
    else {
      BOOL v23 = 1;
    }
    *(void *)&__int128 v24 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)uint64_t v32 = v24;
    *(_OWORD *)&v32[16] = v24;
    __int128 v31 = *a11;
    v32[0] = *((_BYTE *)a11 + 16);
    if (v23) {
      char v25 = a3;
    }
    else {
      char v25 = 1;
    }
    v32[1] = v25;
    *(_WORD *)&v32[2] = *((_WORD *)a11 + 9);
    if (v23)
    {
      *(_OWORD *)&v32[8] = *(__int128 *)((char *)a11 + 24);
      __int128 v27 = (_UNKNOWN **)*((void *)a11 + 5);
    }

    else
    {
      uint64_t v26 = *((void *)a11 + 4);
      *(void *)&v32[8] = v34;
      *(void *)&v32[16] = v26;
      __int128 v27 = oidForPubKeyLength();
    }

    uint64_t v28 = *((void *)a11 + 6);
    *(void *)&v32[24] = v27;
    uint64_t v33 = v28;
    uint64_t result = X509ChainCheckPathWithOptions(12, v38, (uint64_t)&v31, 0LL);
    if (!(_DWORD)result)
    {
      unint64_t v29 = (void *)v38[0];
      if (!a5 || !a6 || !v38[0] || (uint64_t result = X509CertificateParseKey(v38[0], a5, a6), !(_DWORD)result))
      {
        if (a10 && v29)
        {
          uint64_t v30 = v29[32];
          *a10 = v29[31];
          a10[1] = v30;
        }

        uint64_t result = 0LL;
        if (a9)
        {
          if (v29)
          {
            uint64_t result = 0LL;
            *a9 = v29[30];
          }
        }
      }
    }

    return result;
  }

  if (v39[265])
  {
    if (v38[2])
    {
      unint64_t v22 = (_BYTE *)v38[2];
      while (v22[265])
      {
        unint64_t v22 = (_BYTE *)*((void *)v22 + 34);
        if (!v22)
        {
          unint64_t v22 = (_BYTE *)v38[2];
          break;
        }
      }
    }

    else
    {
      unint64_t v22 = 0LL;
    }
  }

  else
  {
    unint64_t v22 = v39;
  }

  uint64_t result = X509ChainBuildPathPartial(v22, &v38[2], v38, a4 ^ 1u);
  if (!(_DWORD)result) {
    goto LABEL_20;
  }
  return result;
}

uint64_t CTEvaluateSatori(unint64_t a1, uint64_t a2, char a3, void *a4, void *a5)
{
  return CTEvaluateCertsForPolicy(a1, a2, a3, 1, a4, a5, 0LL, 0LL, 0LL, 0LL, &xmmword_100122C30);
}

uint64_t CTEvaluateAcrt(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 0, a3, a4, 0LL, 0LL, 0LL, 0LL, &xmmword_100122C68);
}

uint64_t CTEvaluateUcrt(unint64_t a1, uint64_t a2, void *a3, void *a4)
{
  return CTEvaluateCertsForPolicy(a1, a2, 0, 1, a3, a4, 0LL, 0LL, 0LL, 0LL, &xmmword_100122CA0);
}

uint64_t CTEvaluateUcrtTestRoot( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  return CTEvaluateCertsForPolicy(a1, a2, 1, 1, a5, a6, a3, a4, 0LL, 0LL, &xmmword_100122CA0);
}

uint64_t CTEvaluatePragueSignatureCMS( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  unint64_t v9 = 0xAAAAAAAA0000AA01LL;
  __int128 v8 = xmmword_1001041E0;
  BYTE1(v9) = a5;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  return CMSVerifySignedDataWithLeaf(a1, a2, a3, a4, (uint64_t)&v8, a6, a7);
}

uint64_t CTEvaluateKDLSignatureCMS( char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7)
{
  unint64_t v9 = 0xAAAAAAAA0000AA01LL;
  __int128 v8 = xmmword_1001041F0;
  BYTE1(v9) = a5;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  return CMSVerifySignedDataWithLeaf(a1, a2, a3, a4, (uint64_t)&v8, a6, a7);
}

uint64_t CTVerifyAppleMarkerExtension(void *a1, uint64_t a2)
{
  uint64_t result = 327700LL;
  unint64_t v4 = a1[31];
  unint64_t v5 = a1[32];
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6) {
    return 327707LL;
  }
  uint64_t v7 = a1[30];
  if ((v7 & 0x100000000LL) == 0)
  {
    if ((v7 & 0x200000000LL) == 0) {
      return result;
    }
    if (!__CFADD__(v4, v5))
    {
      unint64_t v11 = v4 + v5;
      if (v4 + v5 != -1LL)
      {
        if (v5 > 0x13) {
          return 327704LL;
        }
        unint64_t v16 = (unsigned __int8 *)(v11 - 1);
        if (v11 - 1 >= v4)
        {
          uint64_t v10 = 0LL;
          uint64_t v17 = 0LL;
          while ((unint64_t)v16 < v11)
          {
            int v18 = *v16;
            if (v17 == 20) {
              break;
            }
            if ((v17 & 0x1FFFFFFFFFFFFFFFLL) == 0x14) {
              goto LABEL_39;
            }
            unint64_t v19 = (v18 - 48);
            unint64_t v20 = powersOfTen[v17];
            if (!is_mul_ok(v19, v20)) {
              goto LABEL_40;
            }
            unint64_t v21 = v19 * v20;
            BOOL v15 = __CFADD__(v10, v21);
            v10 += v21;
            if (v15) {
              goto LABEL_38;
            }
            ++v17;
          }

uint64_t CTVerifyHostname(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 327702LL;
  if (*(void *)(a1 + 232) && *(void *)(a1 + 224))
  {
    v7[1] = a3;
    unint64_t v8 = 0xAAAAAAAAAAAAAA00LL;
    v7[0] = a2;
    unsigned int v4 = X509CertificateParseGeneralNamesContent( a1,  (uint64_t (*)(void, int *, uint64_t))sub_1000B80AC,  (uint64_t)v7);
    if ((_BYTE)v8) {
      unsigned int v5 = 0;
    }
    else {
      unsigned int v5 = 327706;
    }
    if (v4) {
      return v4;
    }
    else {
      return v5;
    }
  }

  return v3;
}

uint64_t sub_1000B80AC(uint64_t result, void *a2, unint64_t a3)
{
  if ((_DWORD)result != 2) {
    return 1LL;
  }
  unsigned int v4 = *(char **)a3;
  size_t v5 = *(void *)(a3 + 8);
  size_t v6 = ~*(void *)a3;
  if (v5 > v6) {
    goto LABEL_50;
  }
  uint64_t v7 = &v4[v5];
  unint64_t v8 = v7 - 1;
  if (v7) {
    BOOL v9 = v8 >= v4;
  }
  else {
    BOOL v9 = 0;
  }
  if (!v9 || a3 + 24 < a3) {
    goto LABEL_49;
  }
  int v11 = *v8;
  uint64_t result = compare_octet_string((uint64_t)a2, a3);
  if (!(_DWORD)result) {
    goto LABEL_48;
  }
  if (v11 != 46) {
    goto LABEL_15;
  }
  size_t v12 = v5 - 1;
  if (v5)
  {
    if (v12 <= v5)
    {
      uint64_t result = compare_octet_string_raw((uint64_t)a2, v4, v12);
      if ((_DWORD)result)
      {
LABEL_15:
        unint64_t v13 = a2[1];
        if (v13 < 3) {
          return 1LL;
        }
        unint64_t v14 = (_BYTE *)*a2;
        if (*(_BYTE *)*a2 != 42) {
          return 1LL;
        }
        if (v14 != (_BYTE *)-1LL)
        {
          BOOL v15 = v14 + 1;
          if (v14[1] == 46)
          {
            uint64_t v16 = -2LL;
            uint64_t v17 = -v16;
            uint64_t v18 = 2LL;
            uint64_t result = 1LL;
            while (v17 != v18)
            {
              if (&v14[v18] < v14) {
                goto LABEL_49;
              }
              if (v14[v18] == 46)
              {
                if (v13 == v18) {
                  return 1LL;
                }
                size_t v19 = 0LL;
                if (v5)
                {
                  while (1)
                  {
                    unint64_t v20 = &v4[v19];
                    if (&v4[v19] >= v7 || v20 < v4) {
                      goto LABEL_49;
                    }
                    if (*v20 == 46) {
                      break;
                    }
                    if (v5 == ++v19)
                    {
                      size_t v19 = v5;
                      break;
                    }
                  }
                }

                size_t v22 = v13 - 1;
                BOOL v9 = v5 >= v19;
                size_t v23 = v5 - v19;
                if (!v9) {
                  goto LABEL_51;
                }
                if (v22 == v23)
                {
                  if (v19 > v6) {
                    goto LABEL_50;
                  }
                  uint64_t result = memcmp(v15, &v4[v19], v13 - 1);
                  if (!(_DWORD)result) {
                    goto LABEL_48;
                  }
                }

                if (v11 != 46) {
                  return 1LL;
                }
                if (!v23) {
                  goto LABEL_51;
                }
                if (v22 != v23 - 1) {
                  return 1LL;
                }
                if (v19 <= v6)
                {
                  if (!memcmp(v15, &v4[v19], v22)) {
                    goto LABEL_48;
                  }
                  return 1LL;
                }

                goto LABEL_50;
              }

              if (v13 == ++v18) {
                return result;
              }
            }

            goto LABEL_50;
          }

          return 1LL;
        }

uint64_t CTEvaluateAppleSSLWithOptionalTemporalCheck( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  unint64_t v20 = 0xAAAAAAAA00AAAA01LL;
  unint64_t v21 = &null_octet;
  __int128 v19 = xmmword_100104200;
  BYTE1(v20) = a6;
  BYTE2(v20) = a7;
  size_t v22 = &null_octet;
  size_t v23 = &null_octet;
  __int128 v24 = &CTOctetServerAuthEKU;
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t result = CTEvaluateCertsForPolicy(a1, a2, a6, 1, &v17, &v18, 0LL, 0LL, 0LL, 0LL, &v19);
  if (!(_DWORD)result)
  {
    *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[17] = v13;
    v16[18] = v13;
    v16[15] = v13;
    _BYTE v16[16] = v13;
    v16[13] = v13;
    v16[14] = v13;
    v16[11] = v13;
    v16[12] = v13;
    v16[9] = v13;
    v16[10] = v13;
    v16[7] = v13;
    v16[8] = v13;
    v16[6] = v13;
    v16[4] = v13;
    v16[5] = v13;
    v16[2] = v13;
    v16[3] = v13;
    v16[0] = v13;
    v16[1] = v13;
    memset(v15, 170, sizeof(v15));
    if (__CFADD__(a1, a2))
    {
      __break(0x5513u);
    }

    else
    {
      v14[0] = a1;
      v14[1] = a1 + a2;
      uint64_t result = (uint64_t)X509ChainParseCertificateSet(v14, (unint64_t)v16, 1LL, &v15[1], v15);
      if (!(_DWORD)result)
      {
        uint64_t result = CTVerifyAppleMarkerExtension(v16, a5);
        if (!(_DWORD)result) {
          return CTVerifyHostname((uint64_t)v16, a3, a4);
        }
      }
    }
  }

  return result;
}

uint64_t CTEvaluateAppleSSL(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  return CTEvaluateAppleSSLWithOptionalTemporalCheck(a1, a2, a3, a4, a5, a6, 1);
}

uint64_t CTGetSEKType(unint64_t a1, uint64_t a2)
{
  if (__CFADD__(a1, a2))
  {
    __break(0x5513u);
LABEL_10:
    __break(0x5519u);
  }

  if (a1 + a2 < a1) {
    goto LABEL_10;
  }
  v3[0] = a1;
  v3[1] = a1 + a2;
  return 2LL;
}

uint64_t CTEvaluateSEK(char a1, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = 327712LL;
  if ((a1 & 3) != 0)
  {
    if ((a1 & 1) == 0
      || (uint64_t result = CTEvaluateCertsForPolicy(a2, a3, 0, 1, a4, a5, 0LL, 0LL, 0LL, 0LL, &xmmword_100122CD8), (_DWORD)result))
    {
      if ((a1 & 2) != 0) {
        return CTEvaluateCertsForPolicy( a2,  a3,  0,  1,  a4,  a5,  (uint64_t)&unk_100103EFA,  97LL,  0LL,  0LL,  &xmmword_100122CD8);
      }
    }
  }

  return result;
}

uint64_t sub_1000B85D4(uint64_t result, _BYTE *a2, uint64_t a3)
{
  unint64_t v5 = *(void *)result;
  uint64_t v4 = *(void *)(result + 8);
  if (__CFADD__(*(void *)result, v4)) {
    goto LABEL_31;
  }
  unint64_t v6 = v5 + v4;
  uint64_t v7 = *(unsigned __int8 **)result;
  if (v5 < v6)
  {
    while ((unint64_t)v7 >= v5)
    {
      int v3 = *v7;
      goto LABEL_6;
    }

    goto LABEL_34;
  }

uint64_t X509CertificateParseImplicit(uint64_t a1, unint64_t *a2, const void *a3, size_t a4)
{
  unint64_t v70 = 0LL;
  uint64_t v71 = 0LL;
  unint64_t v68 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v69 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  if (*a2 > v5) {
    goto LABEL_186;
  }
  uint64_t v10 = 720915LL;
  unint64_t v68 = *a2;
  unint64_t v69 = v5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + memset(&context.info, 0, 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)(a1 + 2memset(v17, 0, 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 28_Block_object_dispose(va, 8) = 0u;
  uint64_t result = ccder_blob_decode_tl(&v68, 0x2000000000000010LL, &v71);
  if (!(_DWORD)result) {
    return v10;
  }
  uint64_t v12 = v71;
  unint64_t v13 = v68;
  unint64_t v14 = v71 + v68 - v4;
  if (__CFADD__(v71, v68 - v4)) {
    goto LABEL_188;
  }
  if (v14 > v5 - v4) {
    goto LABEL_186;
  }
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + memset(v17, 0, 24) = v14;
  unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v67 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v13, v12)) {
    goto LABEL_187;
  }
  unint64_t v15 = v13 + v12;
  if (v13 > v15 || v15 > v69) {
    goto LABEL_186;
  }
  unint64_t v66 = v13;
  unint64_t v67 = v15;
  unint64_t v64 = v13;
  unint64_t v65 = v15;
  if (ccder_blob_decode_tl(&v64, 0xA000000000000000LL, &v70))
  {
    unint64_t v16 = v70;
    unint64_t v17 = v64;
    if (__CFADD__(v64, v70)) {
      goto LABEL_187;
    }
    uint64_t v18 = 720916LL;
    if (ccder_blob_decode_uint64(&v64, a1 + 32) && v64 == v17 + v16)
    {
      if (v17 + v16 > v65) {
        goto LABEL_186;
      }
      unint64_t v66 = v17 + v16;
      unint64_t v67 = v65;
      goto LABEL_14;
    }

    return v18;
  }

LABEL_186:
    __break(0x5519u);
    goto LABEL_187;
  }

LABEL_188:
  __break(0x5500u);
LABEL_189:
  __break(0x5507u);
  return result;
}

uint64_t sub_1000B90DC(unint64_t *a1, int a2, BOOL *a3)
{
  unint64_t v13 = (unsigned __int8 *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v3 = a1[1];
  if (*a1 > v3) {
    goto LABEL_22;
  }
  unint64_t v13 = (unsigned __int8 *)*a1;
  unint64_t v14 = v3;
  uint64_t v12 = 0LL;
  uint64_t result = ccder_blob_decode_tl(&v13, 1LL, &v12);
  if ((result & 1) != 0)
  {
    if (v12 == 1)
    {
      unint64_t v8 = v13;
      if ((unint64_t)v13 < v14)
      {
        int v9 = *v13;
        if (v9 != 255 && v9 != 0) {
          return 0LL;
        }
        if (a3) {
          *a3 = v9 != 0;
        }
        if (v8 == (unsigned __int8 *)-1LL)
        {
          __break(0x5513u);
          return result;
        }

        int v11 = v8 + 1;
        if ((unint64_t)v11 <= a1[1] && *a1 <= (unint64_t)v11)
        {
          *a1 = (unint64_t)v11;
          return 1LL;
        }
      }

uint64_t sub_1000B91F0(uint64_t a1, _BYTE *a2)
{
  unint64_t v6 = (_BYTE *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v5 = 0LL;
  uint64_t result = ccder_blob_decode_bitstring(a1, &v6, &v5);
  if ((_DWORD)result)
  {
    if (v7 != *(void *)(a1 + 8) || v6 == (_BYTE *)v7 || v5 > 8)
    {
      return 0LL;
    }

    else if ((unint64_t)v6 >= v7)
    {
      __break(0x5519u);
    }

    else
    {
      *a2 = *v6 & (-1 << (8 - v5));
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1000B92BC(unint64_t *a1, unint64_t *a2, BOOL *a3)
{
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 0x2000000000000010LL, &v11);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1000B90DC(a1, 1, a3);
    if ((_DWORD)result)
    {
      uint64_t result = ccder_blob_decode_uint64(a1, &v10);
      if ((_DWORD)result)
      {
        if (!*a3) {
          return 0LL;
        }
        unint64_t v7 = v10;
        *a2 = v10;
        BOOL v8 = __CFADD__(v7, 1LL);
        unint64_t v9 = v7 + 1;
        if (v8)
        {
          __break(0x5500u);
          return result;
        }

        *a2 = v9;
      }

      return 1LL;
    }
  }

  return result;
}

uint64_t sub_1000B9388(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 0x2000000000000010LL, &v14);
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (__CFADD__(*a1, v14)) {
      goto LABEL_15;
    }
    if (v7 + v14 != a1[1]) {
      return 0LL;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    if (v7 > v7 + v14) {
      goto LABEL_16;
    }
    unint64_t v11 = v7;
    unint64_t v12 = v7 + v14;
    uint64_t result = ccder_blob_decode_tl(&v11, 0x8000000000000000LL, &v13);
    if ((_DWORD)result)
    {
      if (v12 < v11) {
        goto LABEL_16;
      }
      unint64_t v8 = v13;
      if (v13 > v12 - v11) {
        goto LABEL_16;
      }
      *a2 = v11;
      *a3 = v8;
    }

    unint64_t v9 = *a1;
    if (__CFADD__(*a1, v14))
    {
LABEL_15:
      __break(0x5513u);
    }

    else
    {
      unint64_t v10 = v9 + v14;
      if (v9 <= v9 + v14 && v10 <= a1[1])
      {
        *a1 = v10;
        return 1LL;
      }
    }

uint64_t sub_1000B94AC(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 4LL, &v17);
  if ((_DWORD)result)
  {
    unint64_t v7 = a1[1];
    unint64_t v8 = v17;
    BOOL v10 = v7 >= *a1;
    unint64_t v9 = v7 - *a1;
    if (v10)
    {
      BOOL v10 = v17 >= v9;
      BOOL v11 = v17 == v9;
    }

    else
    {
      BOOL v10 = 1;
      BOOL v11 = 0;
    }

    if (!v11 && v10) {
      goto LABEL_13;
    }
    *a2 = *a1;
    *a3 = v8;
    unint64_t v12 = *a1;
    if (__CFADD__(*a1, v8))
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v13 = v12 + v8;
    unint64_t v14 = a1[1];
    if (v12 <= v13)
    {
      BOOL v15 = v13 >= v14;
      BOOL v16 = v13 == v14;
    }

    else
    {
      BOOL v15 = 1;
      BOOL v16 = 0;
    }

    if (!v16 && v15) {
LABEL_13:
    }
      __break(0x5519u);
    *a1 = v13;
  }

  return result;
}

uint64_t sub_1000B956C(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  int v6 = ccder_blob_decode_tl(a1, 0x2000000000000010LL, &v15);
  uint64_t result = 0LL;
  if (v6 && v15)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v8 = a1[1];
    if (*a1 > v8) {
      goto LABEL_12;
    }
    unint64_t v12 = *a1;
    unint64_t v13 = v8;
    uint64_t result = ccder_blob_decode_tl(&v12, 6LL, &v14);
    if (!(_DWORD)result) {
      return result;
    }
    if (v13 < v12) {
      goto LABEL_12;
    }
    unint64_t v9 = v14;
    if (v14 > v13 - v12) {
      goto LABEL_12;
    }
    *a2 = v12;
    *a3 = v9;
    unint64_t v10 = *a1;
    if (__CFADD__(*a1, v15))
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v11 = v10 + v15;
    if (v10 > v10 + v15 || v11 > a1[1]) {
LABEL_12:
    }
      __break(0x5519u);
    *a1 = v11;
  }

  return result;
}

uint64_t sub_1000B9678(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  LODWORD(result) = ccder_blob_decode_tl(a1, 0x2000000000000010LL, &v15);
  unint64_t v7 = v15;
  if (v15) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 0LL;
  }
  if ((_DWORD)result == 1)
  {
    unint64_t v8 = a1[1];
    BOOL v9 = v8 >= *a1;
    unint64_t v10 = v8 - *a1;
    if (!v9 || v15 > v10) {
      goto LABEL_16;
    }
    *a2 = *a1;
    *a3 = v7;
    unint64_t v12 = *a1;
    if (__CFADD__(*a1, v7))
    {
      __break(0x5513u);
      return result;
    }

    unint64_t v13 = v12 + v7;
    if (v12 > v13 || v13 > a1[1]) {
LABEL_16:
    }
      __break(0x5519u);
    *a1 = v13;
  }

  return result;
}

uint64_t sub_1000B9748(uint64_t result, uint64_t a2, unsigned int a3)
{
  if (a3 > 9) {
    return 0LL;
  }
  unint64_t v5 = (void *)result;
  unsigned __int8 v6 = 0;
  unint64_t v7 = ~a2;
  while (v7 >= 16LL * (char)v6)
  {
    uint64_t result = compare_octet_string((uint64_t)v5, a2 + 16LL * v6);
    if (!(_DWORD)result) {
      return result;
    }
    if (a3 <= v6++)
    {
      uint64_t v9 = v5[1];
      unint64_t v10 = (void *)(a2 + 16LL * a3);
      *unint64_t v10 = *v5;
      v10[1] = v9;
      return 1LL;
    }
  }

  __break(0x5513u);
  return result;
}

uint64_t sub_1000B97D0( uint64_t result, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, int a6)
{
  if (a6) {
    a5 = 0LL;
  }
  if (a3 == 11)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10901066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10301066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x200;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x10601066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x800;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x11801066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x2000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x12401066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x11901066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x4000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(void *)(a2 + 3) == 0x21901066463F786LL)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x8000;
      goto LABEL_261;
    }

LABEL_157:
    int v44 = 0;
LABEL_158:
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 27) {
      return sub_1000BB878(result, a2, a3, a4, a5);
    }
    if (!v44) {
      goto LABEL_232;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 832)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3586)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      unint64_t v54 = *a4;
      uint64_t v55 = 37748736LL;
    }

    else
    {
      if (*(void *)a2 != 0x66463F78648862ALL || *(_WORD *)(a2 + 8) != 4354)
      {
        if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 327) {
          return (uint64_t)sub_1000BBA94((unint64_t *)result, a4, a5);
        }
        if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3841LL)
        {
          unint64_t v52 = *(void *)result;
          unint64_t v51 = *(void *)(result + 8);
          if (a5)
          {
            if (v52 > v51) {
              goto LABEL_265;
            }
            *a5 = v52;
            a5[1] = v51 - v52;
          }

          *a4 |= 0x80000000uLL;
LABEL_233:
          if (v52 <= v51)
          {
            *(void *)uint64_t result = v51;
            return 1LL;
          }

LABEL_265:
          __break(0x5519u);
          return result;
        }

        goto LABEL_232;
      }

      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      unint64_t v54 = *a4;
      uint64_t v55 = 0x8004000000LL;
    }

LABEL_201:
    uint64_t v24 = v54 | v55;
    goto LABEL_261;
  }

  if (a3 == 10)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 5122)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 258)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      unint64_t v54 = *a4;
      uint64_t v55 = 0x58600003F0D0LL;
      goto LABEL_201;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1538) {
      goto LABEL_203;
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 4610)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0xF00;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3073)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x10;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1793)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x20000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3329)
    {
LABEL_203:
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x20;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 2305)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x40;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 513)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x80;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1025)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x10000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 769)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x100;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 1537)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x400;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 6145)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x1000;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 9217)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x80000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 8193)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x2000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 8705)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x4000000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 315) {
      return sub_1000BB610((unint64_t *)result, a4, a5);
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 3074)
    {
      uint64_t result = ccder_blob_check_null(result);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v24 = *a4 | 0x300000000LL;
      goto LABEL_261;
    }

    if (*(void *)a2 == 0x66463F78648862ALL && *(_WORD *)(a2 + 8) == 304) {
      return sub_1000BB6F0((unint64_t *)result, a4, a5);
    }
    int v44 = 1;
    goto LABEL_158;
  }

  if (a3 != 9)
  {
    if (a3 < 0xA) {
      goto LABEL_232;
    }
    goto LABEL_157;
  }

  if (*(void *)a2 == 0xB6463F78648862ALL && *(_BYTE *)(a2 + 8) == 1) {
    return sub_1000BB25C((unint64_t *)result, a4, a5);
  }
  if (*(void *)a2 != 0x66463F78648862ALL || *(_BYTE *)(a2 + 8) != 49)
  {
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 44) {
      return sub_1000BB394((unint64_t *)result, a4, a5);
    }
    if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 36) {
      return sub_1000BB528((unint64_t *)result, a4, a5);
    }
    if (*(void *)a2 != 0x66463F78648862ALL || *(_BYTE *)(a2 + 8) != 22)
    {
      if (*(void *)a2 == 0xC6463F78648862ALL && *(_BYTE *)(a2 + 8) == 19)
      {
        uint64_t result = ccder_blob_check_null(result);
        if (!(_DWORD)result) {
          return result;
        }
        uint64_t v24 = *a4 | 0x8000000000LL;
        goto LABEL_261;
      }

      if (*(void *)a2 != 0xA6463F78648862ALL || *(_BYTE *)(a2 + 8) != 1)
      {
        if (*(void *)a2 == 0x66463F78648862ALL && *(_BYTE *)(a2 + 8) == 29)
        {
          uint64_t result = ccder_blob_check_null(result);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v24 = *a4 | 0x2000000;
        }

        else
        {
          if (*(void *)a2 != 0xC6463F78648862ALL || *(_BYTE *)(a2 + 8) != 14)
          {
            if (*(void *)a2 == 0x86463F78648862ALL && *(_BYTE *)(a2 + 8) == 3) {
              return sub_1000BB944((unint64_t *)result, a4, a5);
            }
            goto LABEL_232;
          }

          uint64_t result = ccder_blob_check_null(result);
          if (!(_DWORD)result) {
            return result;
          }
          uint64_t v24 = *a4 | 0x4000000;
        }

LABEL_261:
        *a4 = v24;
        return 1LL;
      }

      *a4 |= 0x1000000uLL;
LABEL_232:
      unint64_t v52 = *(void *)result;
      unint64_t v51 = *(void *)(result + 8);
      goto LABEL_233;
    }

    uint64_t result = ccder_blob_check_null(result);
    if (!(_DWORD)result) {
      return result;
    }
    unint64_t v54 = *a4;
    uint64_t v55 = 1048584LL;
    goto LABEL_201;
  }

  BOOL v56 = 0;
  uint64_t result = sub_1000B90DC((unint64_t *)result, 0, &v56);
  if ((_DWORD)result)
  {
    uint64_t v53 = 0x10000080002LL;
    if (!v56) {
      uint64_t v53 = 0x20000040001LL;
    }
    *a4 |= v53;
  }

  return result;
}

uint64_t X509CertificateParseWithExtension( unint64_t *a1, unint64_t *a2, const void *a3, size_t a4)
{
  uint64_t v8 = 720939LL;
  unint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v11 = *a2;
  uint64_t result = X509CertificateParseImplicit((uint64_t)a1, a2, a3, a4);
  uint64_t v8 = result;
  if ((_DWORD)result) {
    return v8;
  }
  if (__CFADD__(v11, v14))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5500u);
    goto LABEL_12;
  }

  uint64_t v8 = 720939LL;
  if (*a2 != v11 + v14) {
    return v8;
  }
  unint64_t v13 = v14 + v11 - v9;
  if (__CFADD__(v14, v11 - v9)) {
    goto LABEL_11;
  }
  if (v10 >= v9 && v13 <= v10 - v9)
  {
    *a1 = v9;
    a1[1] = v13;
    X509PolicyCheckForBlockedKeys((uint64_t)a1);
    return 0LL;
  }

uint64_t X509CertificateParse(unint64_t *a1, unint64_t *a2)
{
  return X509CertificateParseWithExtension(a1, a2, 0LL, 0LL);
}

uint64_t X509CertificateParseSPKI( unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  if (__CFADD__(*a1, v5)) {
LABEL_38:
  }
    __break(0x5513u);
  unint64_t v6 = v4 + v5;
  if (v4 > v6) {
    goto LABEL_37;
  }
  uint64_t v10 = 655361LL;
  unint64_t v21 = *a1;
  unint64_t v22 = v6;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v21, v20)) {
    goto LABEL_38;
  }
  if (v21 > v21 + v20 || v21 + v20 > v22) {
    goto LABEL_37;
  }
  unint64_t v18 = v21;
  unint64_t v19 = v21 + v20;
  unint64_t v11 = v20;
  unint64_t v12 = v18;
  if (!a2) {
    goto LABEL_13;
  }
  if (v19 < v18 || v20 > v19 - v18)
  {
LABEL_37:
    __break(0x5519u);
    goto LABEL_38;
  }

  *a2 = v18;
  a2[1] = v11;
LABEL_13:
  if (__CFADD__(v12, v11)) {
    goto LABEL_38;
  }
  unint64_t v13 = v12 + v11;
  if (v12 > v12 + v11) {
    goto LABEL_37;
  }
  unint64_t v14 = v19;
  if (v13 > v19) {
    goto LABEL_37;
  }
  unint64_t v18 = v13;
  if (v13 == v19)
  {
    if (a3)
    {
      *a3 = 0LL;
      a3[1] = 0LL;
    }
  }

  else if (a3)
  {
    *a3 = v13;
    a3[1] = v14 - v13;
  }

  if (v14 > v22 || v21 > v14) {
    goto LABEL_37;
  }
  unint64_t v21 = v14;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v17 = 0LL;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_bitstring(&v21, &v18, &v17);
  if (!(_DWORD)result) {
    return 655364LL;
  }
  if (!v17)
  {
    *a4 = 0LL;
    a4[1] = 0LL;
LABEL_33:
    if (v21 == v22) {
      return 0LL;
    }
    else {
      return 655365LL;
    }
  }

  if (v17 < 0xFFFFFFFFFFFFFFF9LL)
  {
    if (v19 >= v18)
    {
      unint64_t v16 = (v17 + 7) >> 3;
      if (v16 <= v19 - v18)
      {
        *a4 = v18;
        a4[1] = v16;
        goto LABEL_33;
      }
    }

    goto LABEL_37;
  }

  __break(0x5500u);
  return result;
}

uint64_t X509CertificateParseKey(uint64_t a1, void *a2, void *a3)
{
  uint64_t result = 327691LL;
  if (a1)
  {
    if (*(void *)(a1 + 96))
    {
      unint64_t v8 = 0LL;
      uint64_t v9 = 0LL;
      uint64_t result = X509CertificateParseSPKI((unint64_t *)(a1 + 88), 0LL, 0LL, &v8);
      if (!(_DWORD)result)
      {
        if (a2)
        {
          if (a3)
          {
            uint64_t v7 = v9;
            *a2 = v8;
            *a3 = v7;
          }
        }
      }
    }
  }

  return result;
}

uint64_t X509CertificateCheckSignatureDigest(char a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5)
{
  __int128 v28 = 0uLL;
  __int128 v27 = 0uLL;
  unint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v24 = 0LL;
  __int128 v23 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v9 = X509CertificateParseSPKI((unint64_t *)(a2 + 88), (unint64_t *)&v28, (unint64_t *)&v27, &v25);
  if ((_DWORD)v9) {
    return v9;
  }
  uint64_t v9 = 655632LL;
  if (compare_octet_string((uint64_t)&v28, (uint64_t)&rsaEncryption))
  {
    unint64_t v11 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureEC;
  }

  else
  {
    unint64_t v11 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureRSA;
  }

  memset(v14, 0, sizeof(v14));
  __int128 v19 = *a5;
  __int128 v15 = *a4;
  __int128 v17 = v28;
  __int128 v18 = v27;
  if (((a1 & 1) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha1, 5uLL))
    && ((a1 & 4) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha256, 9uLL))
    && ((a1 & 8) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha384, 9uLL))
    && ((a1 & 0x10) == 0 || compare_octet_string_raw((uint64_t)a4, &CTOidSha512, 9uLL)))
  {
    return v9;
  }

  uint64_t result = v25;
  if (v26 || !v25)
  {
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13 || !v12)
    {
      if (v11(v25, v26, v12, v13, v14)) {
        return 0LL;
      }
      else {
        return 655648LL;
      }
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t X509CertificateCheckSignature(char a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[2] = v8;
  void v12[3] = v8;
  v12[0] = v8;
  v12[1] = v8;
  v11[0] = (uint64_t)v12;
  v11[1] = 64LL;
  __int128 v10 = 0uLL;
  uint64_t result = sub_1000BA7F0(a3, a4, (uint64_t)v11, &v10);
  if (!(_DWORD)result) {
    return X509CertificateCheckSignatureDigest(a1, a2, v11, &v10, a5);
  }
  return result;
}

uint64_t sub_1000BA7F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = compare_octet_string_raw(a2, &sha1WithRSA_oid, 9uLL);
  if (!(_DWORD)result) {
    goto LABEL_8;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha256WithRSA_oid, 9uLL);
  if (!(_DWORD)result)
  {
LABEL_10:
    *a4 = &CTOidSha256;
    a4[1] = 9LL;
    if (*(void *)(a3 + 8) < 0x20uLL) {
      goto LABEL_15;
    }
    *(void *)(a3 + _Block_object_dispose(va, 8) = 32LL;
    uint64_t v8 = ccsha256_di();
    goto LABEL_14;
  }

  uint64_t result = compare_octet_string_raw(a2, &sha384WithRSA_oid, 9uLL);
  if (!(_DWORD)result) {
    goto LABEL_12;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha1WithECDSA_oid, 7uLL);
  if (!(_DWORD)result)
  {
LABEL_8:
    *a4 = &CTOidSha1;
    a4[1] = 5LL;
    if (*(void *)(a3 + 8) < 0x14uLL) {
      goto LABEL_15;
    }
    *(void *)(a3 + _Block_object_dispose(va, 8) = 20LL;
    uint64_t v8 = ccsha1_di();
LABEL_14:
    ccdigest(v8);
    return 0LL;
  }

  uint64_t result = compare_octet_string_raw(a2, &sha256WithECDSA_oid, 8uLL);
  if (!(_DWORD)result) {
    goto LABEL_10;
  }
  uint64_t result = compare_octet_string_raw(a2, &sha384WithECDSA_oid, 8uLL);
  if ((_DWORD)result) {
    return 656640LL;
  }
LABEL_12:
  *a4 = &CTOidSha384;
  a4[1] = 9LL;
  if (*(void *)(a3 + 8) >= 0x30uLL)
  {
    *(void *)(a3 + _Block_object_dispose(va, 8) = 48LL;
    uint64_t v8 = ccsha384_di();
    goto LABEL_14;
  }

uint64_t X509CertificateCheckSignatureWithPublicKey( uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, __int128 *a6)
{
  *(void *)&__int128 v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[2] = v11;
  v32[3] = v11;
  v32[0] = v11;
  v32[1] = v11;
  unint64_t v30 = v32;
  uint64_t v31 = 64LL;
  __int128 v29 = 0uLL;
  uint64_t v12 = sub_1000BA7F0(a4, (uint64_t)a5, (uint64_t)&v30, &v29);
  if ((_DWORD)v12) {
    return v12;
  }
  uint64_t v12 = 655617LL;
  if (compare_octet_string(a2, (uint64_t)&rsaEncryption))
  {
    uint64_t v13 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureEC;
  }

  else
  {
    uint64_t v13 = (unsigned int (*)(unint64_t, uint64_t, uint64_t, uint64_t, void *))validateSignatureRSA;
  }

  uint64_t v28 = 0LL;
  __int128 v27 = 0u;
  __int128 v26 = 0u;
  __int128 v25 = 0u;
  __int128 v24 = 0u;
  __int128 v22 = 0u;
  __int128 v20 = 0u;
  __int128 v18 = 0u;
  __int128 v21 = *a5;
  uint64_t v17 = 0LL;
  __int128 v23 = *a6;
  __int128 v19 = v29;
  if (a3) {
    __int128 v14 = *a3;
  }
  else {
    __int128 v14 = null_octet;
  }
  __int128 v22 = v14;
  uint64_t result = *a1;
  uint64_t v16 = a1[1];
  if ((v16 || !result) && (!v30 || v31))
  {
    else {
      return 655648LL;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t X509CertificateParseGeneralNamesContent( uint64_t a1, uint64_t (*a2)(void, int *, uint64_t), uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 224);
  uint64_t v4 = *(void *)(a1 + 232);
  if (__CFADD__(v3, v4))
  {
    __break(0x5513u);
LABEL_11:
    __break(0x5519u);
  }

  unint64_t v5 = v3 + v4;
  if (v3 > v5) {
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + 224);
  unint64_t v11 = v5;
  while (1)
  {
    if (v10 >= v11) {
      return 0LL;
    }
    memset(v9, 170, sizeof(v9));
  }

  return 720912LL;
}

uint64_t X509CertificateSubjectNameGetCommonName(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v25 = v3;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v24 = 0xAAAAAAAAAAAAAAAALL;
  if (__CFADD__(v2, v3)) {
    goto LABEL_62;
  }
  unint64_t v4 = v2 + v3;
  if (v2 > v4)
  {
LABEL_61:
    __break(0x5519u);
    goto LABEL_62;
  }

  uint64_t v6 = 720901LL;
  unint64_t v23 = v2;
  unint64_t v24 = v4;
  *a2 = 0LL;
  a2[1] = 0LL;
  if (v2 < v4)
  {
    while (1)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v2 = v23;
      if (__CFADD__(v23, v25)) {
        break;
      }
      unint64_t v7 = v23 + v25;
      if (v23 > v23 + v25 || v7 > v24) {
        goto LABEL_61;
      }
      unint64_t v21 = v23;
      unint64_t v22 = v23 + v25;
      while (v2 < v7)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
        unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
        if (__CFADD__(v21, v25)) {
          goto LABEL_62;
        }
        if (v21 > v21 + v25 || v21 + v25 > v22) {
          goto LABEL_61;
        }
        unint64_t v19 = v21;
        unint64_t v20 = v21 + v25;
        unint64_t v10 = (unsigned __int16 *)v19;
        unint64_t v2 = v20;
        if (v19 > v20 || v25 > v20 - v19) {
          goto LABEL_61;
        }
        if (__CFADD__(v19, v25)) {
          goto LABEL_62;
        }
        unint64_t v11 = v19 + v25;
        if (v19 > v19 + v25 || v11 > v20) {
          goto LABEL_61;
        }
        v19 += v25;
        if (v25 == 3)
        {
          int v12 = *v10;
          int v13 = *((unsigned __int8 *)v10 + 2);
          if (v12 == 1109 && v13 == 3)
          {
            unint64_t v17 = v11;
            unint64_t v18 = v20;
            if ((ccder_blob_decode_tl(&v17, 12LL, &v25) & 1) == 0)
            {
              if (v19 > v20) {
                goto LABEL_61;
              }
              unint64_t v17 = v19;
              unint64_t v18 = v20;
              if ((ccder_blob_decode_tl(&v17, 19LL, &v25) & 1) == 0)
              {
                if (v19 > v20) {
                  goto LABEL_61;
                }
                unint64_t v17 = v19;
                unint64_t v18 = v20;
              }
            }

            unint64_t v15 = v25;
            if (!v25) {
              return v6;
            }
            if (__CFADD__(v17, v25)) {
              goto LABEL_62;
            }
            unint64_t v2 = v17 + v25;
            if (v20 != v17 + v25) {
              return 720902LL;
            }
            if (v18 < v17 || v25 > v18 - v17) {
              goto LABEL_61;
            }
            *a2 = v17;
            a2[1] = v15;
          }
        }

        unint64_t v7 = v22;
        if (v2 > v22 || v21 > v2) {
          goto LABEL_61;
        }
        unint64_t v21 = v2;
      }

      if (v2 != v7) {
        return 720903LL;
      }
      unint64_t v4 = v24;
      if (v2 > v24 || v23 > v2) {
        goto LABEL_61;
      }
      unint64_t v23 = v2;
      if (v2 >= v24) {
        goto LABEL_49;
      }
    }

LABEL_62:
    __break(0x5513u);
  }

BOOL X509CertificateValidAtTime(uint64_t a1, time_t a2)
{
  BOOL result = 0LL;
  time_t v5 = 0LL;
  time_t v6 = 0LL;
  if (a1 && a2 != -1) {
    return !X509CertificateGetNotBefore(a1, &v6)
  }
        && !X509CertificateGetNotAfter(a1, &v5)
        && difftime(a2, v6) >= 0.0
        && difftime(a2, v5) <= 0.0;
  return result;
}

uint64_t X509CertificateGetNotBefore(uint64_t a1, time_t *a2)
{
  v4[0] = (const char *)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (const char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateParseValidity(a1, (unint64_t *)v4, 0LL);
  if (!(_DWORD)result) {
    return sub_1000BB13C(v4, a2);
  }
  return result;
}

uint64_t X509CertificateGetNotAfter(uint64_t a1, time_t *a2)
{
  v4[0] = (const char *)0xAAAAAAAAAAAAAAAALL;
  v4[1] = (const char *)0xAAAAAAAAAAAAAAAALL;
  uint64_t result = X509CertificateParseValidity(a1, 0LL, (unint64_t *)v4);
  if (!(_DWORD)result) {
    return sub_1000BB13C(v4, a2);
  }
  return result;
}

BOOL X509CertificateIsValid(uint64_t a1)
{
  time_t v2 = time(0LL);
  return X509CertificateValidAtTime(a1, v2);
}

uint64_t X509CertificateParseValidity(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v3 = 720906LL;
  if (!result) {
    return v3;
  }
  unint64_t v4 = *(void *)(result + 72);
  uint64_t v5 = *(void *)(result + 80);
  if (!v4 || v5 == 0) {
    return v3;
  }
  if (__CFADD__(v4, v5))
  {
    __break(0x5513u);
  }

  else
  {
    unint64_t v7 = v4 + v5;
    if (v4 <= v7)
    {
      v9[0] = *(void *)(result + 72);
      v9[1] = v7;
      return 720908LL;
    }
  }

  __break(0x5519u);
  return result;
}

uint64_t sub_1000BB13C(const char **a1, time_t *a2)
{
  uint64_t v2 = 720909LL;
  if (!a1) {
    return v2;
  }
  unint64_t v4 = a1[1];
  v11.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v11.tm_mon = v6;
  *(_OWORD *)&v11.tm_isdst = v6;
  *(_OWORD *)&v11.tm_sec = v6;
  unint64_t v7 = *a1;
  if (v4 == (const char *)13)
  {
    uint64_t result = (uint64_t)strptime(v7, "%y%m%d%H%M%SZ", &v11);
    if (result && v11.tm_year >= 150) {
      v11.tm_year -= 100;
    }
  }

  else
  {
    uint64_t result = (uint64_t)strptime(v7, "%Y%m%d%H%M%SZ", &v11);
  }

  uint64_t v9 = a1[1];
  if (!__CFADD__(*a1, v9))
  {
    time_t v10 = timegm(&v11);
    if (v10 == -1) {
      return 720911LL;
    }
    uint64_t v2 = 0LL;
    if (a2) {
      *a2 = v10;
    }
    return v2;
  }

  __break(0x5513u);
  return result;
}

BOOL sub_1000BB25C(unint64_t *a1, void *a2, unint64_t *a3)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 > v3) {
    goto LABEL_19;
  }
  unint64_t v14 = *a1;
  unint64_t v15 = v3;
  unint64_t v13 = v3 - v4;
  if ((ccder_blob_decode_tl(&v14, 22LL, &v13) & 1) != 0) {
    goto LABEL_5;
  }
  unint64_t v8 = a1[1];
  if (*a1 > v8) {
    goto LABEL_19;
  }
  unint64_t v14 = *a1;
  unint64_t v15 = v8;
  if (ccder_blob_decode_tl(&v14, 12LL, &v13))
  {
LABEL_5:
    unint64_t v10 = v14;
    unint64_t v9 = v15;
    if (v14 > v15) {
      goto LABEL_19;
    }
    *a1 = v14;
    a1[1] = v9;
    unint64_t v11 = v13;
  }

  else
  {
    unint64_t v10 = *a1;
    unint64_t v9 = a1[1];
    unint64_t v11 = v9 - *a1;
    unint64_t v13 = v11;
  }

  if (__CFADD__(v10, v11)) {
    goto LABEL_20;
  }
  if (v9 == v10 + v11)
  {
    if (!v11) {
      goto LABEL_16;
    }
    if (!a3)
    {
LABEL_15:
      *a2 |= 0x40000000uLL;
LABEL_16:
      if (v10 <= v9)
      {
        *a1 = v9;
        return v9 == v10 + v11;
      }

      goto LABEL_19;
    }

    if (v10 <= v9 && v11 <= v9 - v10)
    {
      *a3 = v10;
      a3[1] = v11;
      goto LABEL_15;
    }

uint64_t sub_1000BB394(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 22LL, &v16);
  if ((_DWORD)result)
  {
    unint64_t v7 = v16;
    unint64_t v8 = *a1;
    if (__CFADD__(*a1, v16))
    {
      __break(0x5513u);
      goto LABEL_34;
    }

    unint64_t v9 = v8 + v16;
    if (a1[1] != v8 + v16) {
      return 0LL;
    }
    unint64_t v10 = *a2;
    *a2 |= 0x30000000000uLL;
    if (a3)
    {
      if (v8 > v9) {
        goto LABEL_34;
      }
      *a3 = v8;
      a3[1] = v7;
    }

    if (v7 == 4)
    {
      if (*(_DWORD *)v8 != 1953653621) {
        goto LABEL_30;
      }
      unint64_t v13 = 0x30001000000LL;
    }

    else
    {
      if (v7 == 17)
      {
        if (*(void *)v8 != 0x207372656B6E6F59LL
          || *(void *)(v8 + 8) != 0x726F74636146202DLL
          || *(_BYTE *)(v8 + 16) != 121)
        {
LABEL_30:
          if (v8 <= v9)
          {
            *a1 = v9;
            return 1LL;
          }

LABEL_34:
          __break(0x5519u);
          return result;
        }

        uint64_t v12 = 786432LL;
      }

      else
      {
        if (v7 != 16) {
          goto LABEL_30;
        }
        if (*(void *)v8 != 0x2D20656761766153LL || *(void *)(v8 + 8) != 0x79726F7463614620LL) {
          goto LABEL_30;
        }
        uint64_t v12 = 3LL;
      }

      unint64_t v13 = v12 & 0xFFFF0000FFFFFFFFLL | 0x30000000000LL;
    }

    *a2 = v10 | v13;
    goto LABEL_30;
  }

  return result;
}

uint64_t sub_1000BB528(unint64_t *a1, void *a2, unint64_t *a3)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 4LL, &v9);
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (__CFADD__(*a1, v9))
    {
      __break(0x5513u);
    }

    else
    {
      unint64_t v8 = a1[1];
      if (v8 != v7 + v9) {
        return 0LL;
      }
      if (v9 == 32)
      {
        if (a3)
        {
          if (v8 < v7 || v8 - v7 <= 0x1F) {
            goto LABEL_15;
          }
          *a3 = v7;
          a3[1] = 32LL;
        }

        *a2 |= 4uLL;
      }

      if (v7 <= v8)
      {
        *a1 = v8;
        return 1LL;
      }
    }

uint64_t sub_1000BB610(unint64_t *a1, void *a2, unint64_t *a3)
{
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 4LL, &v10);
  if ((_DWORD)result)
  {
    unint64_t v7 = v10;
    unint64_t v8 = *a1;
    if (__CFADD__(*a1, v10))
    {
      __break(0x5513u);
    }

    else
    {
      unint64_t v9 = a1[1];
      if (v9 != v8 + v10) {
        return 0LL;
      }
      if (v10)
      {
        if (a3)
        {
          if (v9 < v8 || v10 > v9 - v8) {
            goto LABEL_15;
          }
          *a3 = v8;
          a3[1] = v7;
        }

        *a2 |= 0x30000000uLL;
      }

      if (v8 <= v9)
      {
        *a1 = v9;
        return 1LL;
      }
    }

uint64_t sub_1000BB6F0(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v17 = 0LL;
  int v6 = ccder_blob_decode_tl(a1, 12LL, &v17);
  uint64_t result = 0LL;
  if (v6)
  {
    unint64_t v8 = v17;
    if (v17 >= 0x19)
    {
      unint64_t v9 = *a1;
      BOOL v10 = *(void *)*a1 == 0x2E3034382E322E31LL && *(void *)(*a1 + 8) == 0x312E353336333131LL;
      unint64_t v11 = 0x2E37322E362E3030LL;
      if (!v10 || *(void *)(*a1 + 16) != 0x2E37322E362E3030LL) {
        return 0LL;
      }
      if (v9 < 0xFFFFFFFFFFFFFFE8LL)
      {
        unint64_t v13 = v9 + 24;
        if (v9 >= v9 + 24) {
          goto LABEL_21;
        }
        unint64_t v11 = a1[1];
        if (v13 > v11) {
          goto LABEL_21;
        }
        unint64_t v14 = (unsigned __int8 *)(v9 + 24);
        do
        {
          BOOL v15 = v14 > v14 + 1;
          ++v14;
        }

        while (!v15);
        while (1)
        {
LABEL_21:
          __break(0x5519u);
LABEL_22:
          if (!a3) {
            goto LABEL_26;
          }
          unint64_t v16 = v8 - 24;
          if (v8 < 0x18) {
            goto LABEL_31;
          }
          if (v16 <= v11 - v13)
          {
            *a3 = v13;
            a3[1] = v16;
LABEL_26:
            unint64_t v13 = *a2 | 0x200000000LL;
            *a2 = v13;
            if (__CFADD__(v9, v8)) {
              break;
            }
            v8 += v9;
            if (v9 <= v8 && v8 <= v11)
            {
              *a1 = v8;
              return 1LL;
            }
          }
        }
      }

      __break(0x5513u);
LABEL_31:
      __break(0x5515u);
    }
  }

  return result;
}

uint64_t sub_1000BB878(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, unint64_t *a5)
{
  uint64_t result = ccder_blob_check_null(a1);
  if ((_DWORD)result)
  {
    if (a2 > 0xFFFFFFFFFFFFFFF6LL) {
      goto LABEL_26;
    }
    if (__CFADD__(a2, a3)) {
      goto LABEL_26;
    }
    unint64_t v10 = a2 + a3;
    if (a2 + a3 == -1LL) {
      goto LABEL_26;
    }
    unint64_t v11 = a2 + 9;
    uint64_t v12 = (char *)(a2 + 9);
    while (1)
    {
      BOOL v13 = (unint64_t)v12 < v10 && (unint64_t)v12 >= a2;
      BOOL v14 = v13;
      if (!v14) {
        goto LABEL_25;
      }
      int v15 = *v12++;
      if ((v15 & 0x80000000) == 0) {
        return 0LL;
      }
    }

    if (!v14)
    {
LABEL_25:
      __break(0x5519u);
LABEL_26:
      __break(0x5513u);
      return result;
    }

    if ((*v12 & 0x80000000) == 0)
    {
      if (!a5)
      {
LABEL_22:
        *a4 |= (unint64_t)&_mh_execute_header;
        return 1LL;
      }

      if (v11 >= a2 && v11 <= v10)
      {
        *a5 = v11;
        a5[1] = a3 - 9;
        goto LABEL_22;
      }

      goto LABEL_25;
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1000BB944(unint64_t *a1, void *a2, unint64_t *a3)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = ccder_blob_decode_tl(a1, 0x2000000000000010LL, &v14);
  if ((_DWORD)result)
  {
    unint64_t v7 = *a1;
    if (__CFADD__(*a1, v14)) {
      goto LABEL_17;
    }
    if (a1[1] != v7 + v14) {
      return 0LL;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
    if (v7 > v7 + v14) {
      goto LABEL_18;
    }
    unint64_t v11 = v7;
    unint64_t v12 = v7 + v14;
    uint64_t result = ccder_blob_decode_tl(&v11, 0xA000000000000002LL, &v13);
    if ((_DWORD)result)
    {
      uint64_t result = ccder_blob_decode_tl(&v11, 4LL, &v13);
      if ((_DWORD)result)
      {
        if (a3)
        {
          if (v12 < v11) {
            goto LABEL_18;
          }
          unint64_t v8 = v13;
          if (v13 > v12 - v11) {
            goto LABEL_18;
          }
          *a3 = v11;
          a3[1] = v8;
        }

        *a2 |= 0x240000800000uLL;
        unint64_t v9 = *a1;
        if (!__CFADD__(*a1, v14))
        {
          unint64_t v10 = v9 + v14;
          if (v9 <= v9 + v14 && v10 <= a1[1])
          {
            *a1 = v10;
            return 1LL;
          }

unint64_t *sub_1000BBA94(unint64_t *result, void *a2, unint64_t *a3)
{
  unint64_t v4 = *result;
  unint64_t v3 = result[1];
  unint64_t v5 = v3 - *result;
  if (v5 != 32) {
    return (unint64_t *)(v5 == 32);
  }
  if (a3)
  {
    if (v4 > v3)
    {
LABEL_12:
      __break(0x5519u);
      goto LABEL_13;
    }

    *a3 = v4;
    a3[1] = 32LL;
  }

  *a2 |= 0xC00000000uLL;
  if (v4 < 0xFFFFFFFFFFFFFFE0LL)
  {
    unint64_t v6 = v4 + 32;
    if (v4 + 32 <= v3 && v4 <= v6)
    {
      *uint64_t result = v6;
      return (unint64_t *)(v5 == 32);
    }

    goto LABEL_12;
  }

unint64_t *X509ChainParseCertificateSet( unint64_t *result, unint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = 0LL;
  *a4 = 0LL;
  a4[1] = 0LL;
  BOOL v6 = *result >= result[1] || a3 == 0;
  if (v6)
  {
LABEL_6:
    if (a5)
    {
      uint64_t result = 0LL;
      *a5 = v5;
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    unint64_t v9 = result;
    uint64_t v10 = 0LL;
    unint64_t v11 = a2 + 304 * a3;
    unint64_t v12 = ~a2;
    unint64_t v13 = a4 + 1;
    unint64_t v14 = (void *)(a2 + 272);
    uint64_t v15 = a3 - 1;
    unint64_t v21 = a2 + 272;
    while ((unsigned __int128)(v10 * (__int128)304LL) >> 64 == (304 * v10) >> 63 && 304 * v10 <= v12)
    {
      unint64_t v16 = v14 - 34;
      if (v14 != (void *)272 && ((unint64_t)v16 >= v11 || (unint64_t)v16 < a2))
      {
LABEL_30:
        __break(0x5519u);
        break;
      }

      uint64_t result = (unint64_t *)X509CertificateParse(v14 - 34, v9);
      if ((_DWORD)result) {
        return result;
      }
      if (v10)
      {
        unint64_t v17 = (void *)*v13;
        void *v14 = 0LL;
        v14[1] = v17;
        *unint64_t v17 = v16;
        *unint64_t v13 = (unint64_t)v14;
      }

      else
      {
        uint64_t v18 = *a4;
        *(void *)(a2 + 272) = *a4;
        if (v18) {
          unint64_t v19 = (unint64_t *)(v18 + 280);
        }
        else {
          unint64_t v19 = v13;
        }
        *unint64_t v19 = v21;
        *a4 = v16;
        *(void *)(a2 + 280) = a4;
      }

      uint64_t v5 = v10 + 1;
      if (*v9 < v9[1])
      {
        v14 += 38;
        BOOL v6 = v15 == v10++;
        if (!v6) {
          continue;
        }
      }

      goto LABEL_6;
    }

    __break(0x5513u);
  }

  return result;
}

uint64_t X509ChainGetCertificateUsingKeyIdentifier(uint64_t *a1, uint64_t a2)
{
  for (uint64_t i = *a1; i; uint64_t i = *(void *)(i + 272))
  {
  }

  return i;
}

void *X509ChainResetChain(void *result, void *a2)
{
  *uint64_t result = 0LL;
  result[1] = result;
  uint64_t v2 = (void *)*a2;
  if (*a2)
  {
    do
    {
      v2[36] = 0LL;
      v2[37] = 0LL;
      uint64_t v2 = (void *)v2[34];
    }

    while (v2);
  }

  return result;
}

uint64_t X509ChainBuildPathPartial(void *a1, uint64_t *a2, void *a3, int a4)
{
  if (!a1) {
    return 327691LL;
  }
  unint64_t v7 = a1;
  *a3 = a1;
  a3[1] = a1 + 36;
  a1[36] = 0LL;
  a1[37] = a3;
  uint64_t v8 = (uint64_t)(a1 + 15);
  uint64_t result = compare_octet_string((uint64_t)(a1 + 15), (uint64_t)(a1 + 13));
  if ((_DWORD)result)
  {
    while (1)
    {
      uint64_t v10 = (uint64_t)(v7 + 21);
      if (!v7[22]
        || (uint64_t CertificateUsingKeyIdentifier = X509ChainGetCertificateUsingKeyIdentifier(a2, (uint64_t)(v7 + 21))) == 0
        || (unint64_t v7 = (void *)CertificateUsingKeyIdentifier,
            compare_octet_string(CertificateUsingKeyIdentifier + 104, v8)))
      {
        unint64_t v7 = (void *)*a2;
        if (!*a2)
        {
LABEL_16:
          if (sub_1000BBE0C(v10, 1)) {
            return 0LL;
          }
          uint64_t v15 = sub_1000BBEA0(v10);
          if (a4) {
            unsigned int v16 = 0;
          }
          else {
            unsigned int v16 = 524296;
          }
          if (v15) {
            return 0LL;
          }
          else {
            return v16;
          }
        }

        while (compare_octet_string(v8, (uint64_t)(v7 + 13)))
        {
          unint64_t v7 = (void *)v7[34];
          if (!v7) {
            goto LABEL_16;
          }
        }
      }

      unint64_t v12 = (void *)*a3;
      if (*a3) {
        break;
      }
LABEL_13:
      unint64_t v13 = (void *)a3[1];
      v7[36] = 0LL;
      v7[37] = v13;
      *unint64_t v13 = v7;
      a3[1] = v7 + 36;
      uint64_t v8 = (uint64_t)(v7 + 15);
      int v14 = compare_octet_string((uint64_t)(v7 + 15), (uint64_t)(v7 + 13));
      uint64_t result = 0LL;
      if (!v14) {
        return result;
      }
    }

    while (v12 != v7)
    {
      unint64_t v12 = (void *)v12[36];
      if (!v12) {
        goto LABEL_13;
      }
    }

    return 524297LL;
  }

  return result;
}

uint64_t sub_1000BBE0C(uint64_t result, int a2)
{
  uint64_t v2 = &numAppleRoots;
  if (!a2) {
    uint64_t v2 = &numAppleProdRoots;
  }
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = result;
    for (uint64_t i = (uint64_t *)&AppleRoots; i < (uint64_t *)&UcrtRootPublicKey && i >= (uint64_t *)&AppleRoots; ++i)
    {
      uint64_t v7 = *i;
      uint64_t result = compare_octet_string(v4, *i + 184);
      if (!(_DWORD)result) {
        return v7;
      }
      if (!--v3) {
        return 0LL;
      }
    }

    __break(0x5519u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t sub_1000BBEA0(uint64_t result)
{
  uint64_t v1 = numBAARoots;
  if (numBAARoots)
  {
    uint64_t v2 = result;
    for (uint64_t i = (uint64_t *)&BAARoots; i < (uint64_t *)&SEKTestRootPublicKey && i >= (uint64_t *)&BAARoots; ++i)
    {
      uint64_t v5 = *i;
      uint64_t result = compare_octet_string(v2, *i + 184);
      if (!(_DWORD)result) {
        return v5;
      }
      if (!--v1) {
        return 0LL;
      }
    }

    __break(0x5519u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

uint64_t X509ChainBuildPath(void *a1, uint64_t *a2, void *a3)
{
  return X509ChainBuildPathPartial(a1, a2, a3, 0);
}

uint64_t X509ChainCheckPathWithOptions(char a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  BOOL v6 = a2;
  uint64_t v8 = *a2;
  if (a3)
  {
    uint64_t v9 = *(void *)(a3 + 48);
    if (v9)
    {
      if (*(void *)(v9 + 8))
      {
        uint64_t v8 = *v6;
      }
    }
  }

  if (v8)
  {
    uint64_t v31 = v6;
    unint64_t v32 = a4;
    unint64_t v11 = 0LL;
    int v12 = 0;
    char v33 = 0;
    uint64_t v13 = -1LL;
    while (1)
    {
      unint64_t v14 = *(void *)(v8 + 288);
      unint64_t v15 = v14 + 304;
      if (v14)
      {
LABEL_10:
        char v16 = 0;
        goto LABEL_11;
      }

      if (!compare_octet_string(v8 + 120, v8 + 104))
      {
        char v16 = 0;
        unint64_t v15 = v8 + 304;
        unint64_t v14 = v8;
        goto LABEL_11;
      }

      if (!a3) {
        return v12 | 0x9000Du;
      }
      if (*(_BYTE *)(a3 + 16))
      {
        uint64_t v20 = sub_1000BBE0C(v8 + 168, *(unsigned __int8 *)(a3 + 17));
      }

      else
      {
        if (!*(void *)(a3 + 24)) {
          goto LABEL_58;
        }
        uint64_t v20 = sub_1000BBEA0(v8 + 168);
      }

      unint64_t v14 = v20;
      v33 |= v20 != 0;
      unint64_t v15 = v20 + 304;
      if (v20) {
        goto LABEL_10;
      }
LABEL_58:
      if (!*(_BYTE *)(a3 + 19)) {
        return v12 | 0x9000Du;
      }
      unint64_t v14 = 0LL;
      char v16 = 1;
LABEL_11:
      if (v11 && *(void *)(v8 + 32) >= 2uLL)
      {
        if (!*(_BYTE *)(v8 + 265))
        {
          int v30 = 589825;
          return v12 | v30;
        }

        if ((*(_BYTE *)(v8 + 264) & 4) == 0)
        {
          int v30 = 589826;
          return v12 | v30;
        }
      }

      unint64_t v17 = *(void *)(v8 + 200);
      if (v17) {
        BOOL v18 = v17 >= v11;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        int v30 = 589827;
        return v12 | v30;
      }

      if (*(_BYTE *)(v8 + 266))
      {
        int v30 = 589831;
        return v12 | v30;
      }

      if (compare_octet_string(v8 + 40, v8 + 152))
      {
        int v30 = 589828;
        return v12 | v30;
      }

      if ((v16 & 1) == 0 && *(void *)(v8 + 168) && *(void *)(v8 + 176))
      {
        if (v14 >= v15) {
          goto LABEL_100;
        }
      }

      if (a3 && v11 && (*(void *)(v8 + 240) & *(void *)(a3 + 8)) == 0LL) {
        X509PolicySetFlagsForCommonNames(v8);
      }
      if (v14 == v8 && !*(void *)(v8 + 240))
      {
        X509PolicySetFlagsForRoots(a3, v8);
        if (a3)
        {
LABEL_34:
          if (*(_BYTE *)(a3 + 18) && !X509CertificateIsValid(v8)) {
            return v12 | 0x90009u;
          }
          uint64_t v19 = *(void *)(a3 + 8);
          if (!v11 && (*(void *)(v8 + 240) & v19) == 0)
          {
            X509PolicySetFlagsForMFI(v8);
            uint64_t v19 = *(void *)(a3 + 8);
          }

          v13 &= *(void *)(v8 + 240);
          if (v19 && (v19 & v13) == 0)
          {
            int v30 = 589829;
            return v12 | v30;
          }

          goto LABEL_49;
        }
      }

      else if (a3)
      {
        goto LABEL_34;
      }

      v13 &= *(void *)(v8 + 240);
LABEL_49:
      a1 |= v14 == v8;
      if ((v16 & 1) == 0)
      {
        if (v14 >= v15) {
          goto LABEL_100;
        }
        uint64_t result = X509CertificateCheckSignature(a1, v14, v8 + 16, v8 + 40, (__int128 *)(v8 + 56));
        if ((_DWORD)result) {
          return result;
        }
      }

      unint64_t v21 = v11 + 1;
      if (v11 == -1LL) {
        goto LABEL_99;
      }
      uint64_t v8 = *(void *)(v8 + 288);
      v12 += 256;
      ++v11;
      if (!v8)
      {
        BOOL v6 = v31;
        a4 = v32;
        LOBYTE(v_Block_object_dispose(va, 8) = v33;
        if (a3) {
          goto LABEL_61;
        }
        goto LABEL_87;
      }
    }
  }

  unint64_t v21 = 0LL;
  uint64_t v13 = -1LL;
  if (!a3) {
    goto LABEL_87;
  }
LABEL_61:
  if (*(void *)a3)
  {
    unint64_t v22 = v21;
    if ((v8 & 1) != 0)
    {
      unint64_t v22 = v21 + 1;
      if (v21 == -1LL)
      {
LABEL_99:
        __break(0x5500u);
LABEL_100:
        __break(0x5519u);
      }
    }

    if (*(void *)a3 != v22) {
      return ((_DWORD)v22 << 8) | 0x90006u;
    }
  }

  uint64_t v23 = *(void *)(a3 + 24);
  if (!v23 || !*(void *)(v23 + 8))
  {
    if (!*(_BYTE *)(a3 + 16)) {
      goto LABEL_87;
    }
    int v24 = (_DWORD)v21 << 8;
    uint64_t v25 = **(void **)(v6[1] + 8);
LABEL_75:
    uint64_t v27 = 184LL;
    if ((v8 & 1) != 0) {
      uint64_t v27 = 168LL;
    }
    uint64_t v28 = sub_1000BBE0C(v25 + v27, *(unsigned __int8 *)(a3 + 17));
    if (!v28) {
      return v24 | 0x9000Bu;
    }
    uint64_t v29 = v28;
    if ((v8 & 1) == 0 && !compare_octet_string(v25 + 88, v28 + 88)
      || !X509CertificateCheckSignature(29, v29, v25 + 16, v25 + 40, (__int128 *)(v25 + 56)))
    {
      goto LABEL_87;
    }

    int v26 = 589836;
    return v24 | v26;
  }

  int v24 = (_DWORD)v21 << 8;
  uint64_t v25 = **(void **)(v6[1] + 8);
  if (*(_BYTE *)(a3 + 16)) {
    goto LABEL_75;
  }
  memset(v35, 170, sizeof(v35));
  v34[0] = 0xAAAAAAAAAAAAAAAALL;
  v34[1] = 0xAAAAAAAAAAAAAAAALL;
  if (X509CertificateParseSPKI((unint64_t *)(v25 + 88), &v35[2], v34, v35))
  {
LABEL_72:
    int v26 = 589832;
    return v24 | v26;
  }

  if (compare_octet_string((uint64_t)&v35[2], *(void *)(a3 + 32))
    || compare_octet_string((uint64_t)v35, *(void *)(a3 + 24)))
  {
    if (X509CertificateCheckSignatureWithPublicKey( *(uint64_t **)(a3 + 24),  *(void *)(a3 + 32),  *(__int128 **)(a3 + 40),  v25 + 16,  (__int128 *)(v25 + 40),  (__int128 *)(v25 + 56))) {
      goto LABEL_72;
    }
  }

  else if (!compare_octet_string(*(void *)(a3 + 32), (uint64_t)&ecPublicKey))
  {
    compare_octet_string((uint64_t)v34, *(void *)(a3 + 40));
  }

LABEL_87:
  uint64_t result = 0LL;
  if (a4) {
    *a4 = v13;
  }
  return result;
}

uint64_t X509ChainCheckPath(char a1, uint64_t *a2, uint64_t a3)
{
  return X509ChainCheckPathWithOptions(a1, a2, a3, 0LL);
}

void sub_1000BC438( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BC46C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BC4A0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BC4D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BC544( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BC578(unint64_t *a1)
{
  uint64_t v1 = sub_100005B48(*a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100005AF8( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v3,  "Posted connection failure to symptom over interface %@",  v4,  v5,  v6,  v7,  2u);

  sub_100005B40();
}

void sub_1000BC600()
{
}

void sub_1000BC678( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BC6AC(unint64_t *a1)
{
  uint64_t v1 = sub_100005B48(*a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100005AF8( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v3,  "Posted connection success to symptom over interface %@",  v4,  v5,  v6,  v7,  2u);

  sub_100005B40();
}

void sub_1000BC734()
{
}

void sub_1000BC7AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412546;
  uint64_t v4 = v2;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEBUG,  "Posted ip address to symptom over interface %@ (%llu)",  (uint8_t *)&v3,  0x16u);
}

void sub_1000BC838()
{
  __int16 v2 = v0;
  int v3 = &symptom_set_additional_qualifier;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "reportClientIPAddress - Couldn't link symptoms -- bailing {_symptom_create: %p, _symptom_set_qualifier: %p, _symptom _send: %p, symptom_set_additional_qualifier: %p}",  v1,  0x2Au);
}

void sub_1000BC8D0()
{
  int v0 = 136315138;
  uint64_t v1 = "void APSChannelRecordBulkCopy(APSChannelRecordRef, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFNumberRef *)";
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "APSMessageStore - NULL message passed to %s",  (uint8_t *)&v0,  0xCu);
}

void sub_1000BC954(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "%@: Tokens can only be saved with a system token attached!",  (uint8_t *)&v2,  0xCu);
  sub_10000DE10();
}

void sub_1000BC9C4()
{
}

void sub_1000BCA24()
{
}

void sub_1000BCA84()
{
}

void sub_1000BCAE4()
{
}

void sub_1000BCB44()
{
}

void sub_1000BCBA4()
{
}

void sub_1000BCC04()
{
}

void sub_1000BCC64()
{
}

void sub_1000BCCC4()
{
}

void sub_1000BCD24()
{
}

void sub_1000BCD84()
{
}

void sub_1000BCDE4()
{
}

void sub_1000BCE44(void *a1, os_log_s *a2)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[7];
  int v6 = 138413058;
  uint64_t v7 = v2;
  __int16 v8 = 2112;
  uint64_t v9 = v3;
  __int16 v10 = 2112;
  uint64_t v11 = v4;
  __int16 v12 = 2112;
  uint64_t v13 = v5;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "%@ Didn't receive app-specific token for %@ topicHash %@ appId %@!!",  (uint8_t *)&v6,  0x2Au);
}

void sub_1000BCEDC()
{
}

void sub_1000BCF3C(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 protocolConnectionEstablisher]);
  int v5 = 138412546;
  int v6 = a1;
  __int16 v7 = 2048;
  id v8 = [v4 countConnectedInterfaces];
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%@: Terminating connection, deleting identity and clearing public token. Connected on %lu interfaces",  (uint8_t *)&v5,  0x16u);
}

void sub_1000BCFEC()
{
}

void sub_1000BD07C()
{
}

void sub_1000BD0DC()
{
}

void sub_1000BD13C()
{
}

void sub_1000BD19C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BD1D0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BD204()
{
}

void sub_1000BD270()
{
}

void sub_1000BD2D4()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "%@: Invalid presence override set, overriding presence response of %u, treating as invalid",  v2,  0x12u);
  sub_10000DE10();
}

void sub_1000BD350()
{
}

void sub_1000BD3B0()
{
}

void sub_1000BD410()
{
}

void sub_1000BD470()
{
}

void sub_1000BD4D0()
{
}

void sub_1000BD530()
{
}

void sub_1000BD590()
{
}

void sub_1000BD5F0()
{
}

void sub_1000BD650( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BD684( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BD6B8(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "Generating salted token when unsalted hash is in filter %@",  (uint8_t *)&v3,  0xCu);
  sub_10000DE10();
}

void sub_1000BD72C(id *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*a1 topic]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*a1 identifier]);
  int v7 = 138412546;
  id v8 = v4;
  __int16 v9 = 2112;
  __int16 v10 = v5;
  sub_10003A134( (void *)&_mh_execute_header,  a2,  v6,  "Failed to obtain or create per-app token appId for topic %@ identifier %@",  (uint8_t *)&v7);
}

void sub_1000BD7E8(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = 138412546;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  sub_10003A134((void *)&_mh_execute_header, a2, a3, "%@ Didn't receive app-specific token for %@!!", (uint8_t *)&v5);
  sub_10000DE10();
}

void sub_1000BD860()
{
}

void sub_1000BD898()
{
}

void sub_1000BD8C4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Invalid app-specific token generate response: %@",  (uint8_t *)&v2,  0xCu);
  sub_10000DE10();
}

void sub_1000BD934()
{
}

void sub_1000BD960()
{
}

void sub_1000BD98C()
{
}

void sub_1000BD9B8()
{
}

void sub_1000BD9E4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "APSDaemon exception caught on main thread: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000BDA58(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed generating JSON for debug output {error: %@}",  (uint8_t *)&v2,  0xCu);
}

void sub_1000BDACC(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "Failed to register notify token with status %d",  (uint8_t *)v2,  8u);
}

void sub_1000BDB40(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Unable to create security task from audit token.",  v1,  2u);
}

void sub_1000BDB80(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "Unable to get entitlements for client task. Error: %@",  (uint8_t *)&v3,  0xCu);
}

void sub_1000BDBF8(uint64_t a1, void *a2, os_log_s *a3)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = 134218240;
  uint64_t v6 = v4;
  __int16 v7 = 2048;
  id v8 = [a2 length];
  _os_log_debug_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_DEBUG,  "P%04llu <out:msgTransportAck>  -- data.len: %llu",  (uint8_t *)&v5,  0x16u);
}

void sub_1000BDC94(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "nil _connection and nil port name!! This is a bug!!",  v1,  2u);
}

void sub_1000BDCD4()
{
}

void sub_1000BDD38()
{
}

void sub_1000BDD9C(uint64_t a1, mach_error_t *a2, os_log_s *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 40LL);
  int v5 = mach_error_string(*a2);
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2080;
  __int16 v9 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Failed sending message to client %@: %s",  (uint8_t *)&v6,  0x16u);
  sub_100054F50();
}

void sub_1000BDE34(id *a1, os_log_s *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([*a1 dictionaryRepresentation]);
  sub_100036C00();
  sub_100054F5C((void *)&_mh_execute_header, a2, v4, "handleReceivedMessage %@ could not convert to XPC object!", v5);

  sub_100054F50();
}

void sub_1000BDEB8(uint64_t *a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_100054F5C((void *)&_mh_execute_header, a2, a3, "Unrecognized token received from %@", (uint8_t *)&v4);
  sub_10000DE10();
}

void sub_1000BDF24(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100054F20();
  sub_100016764( (void *)&_mh_execute_header,  v1,  v2,  "Failed to set nonWaking topics to {nonWaking: %@, unentitledNonWakingTopics: %@}",  (void)v3,  DWORD2(v3));
  sub_10000DE10();
}

void sub_1000BDF8C(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 120);
  sub_100054F20();
  sub_10000DE10();
}

void sub_1000BDFF8(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100054F20();
  sub_100016764( (void *)&_mh_execute_header,  v1,  v2,  "Failed to set ignored topics to {ignoredTopics: %@, unentitledIgnoredTopics: %@}",  (void)v3,  DWORD2(v3));
  sub_10000DE10();
}

void sub_1000BE060(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 120);
  sub_100054F20();
  sub_10000DE10();
}

void sub_1000BE0CC(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100054F20();
  sub_100016764( (void *)&_mh_execute_header,  v1,  v2,  "Failed to set opportunistic topics to {opportunisticTopics: %@, unentitledOpportunisticTopics: %@}",  (void)v3,  DWORD2(v3));
  sub_10000DE10();
}

void sub_1000BE134(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = *(void *)(a1 + 120);
  sub_100054F20();
  sub_10000DE10();
}

void sub_1000BE1A0(uint64_t a1)
{
  LODWORD(v3) = 138412546;
  *(void *)((char *)&v3 + 4) = a1;
  sub_100054F20();
  sub_100016764( (void *)&_mh_execute_header,  v1,  v2,  "Failed to set enabled topics to {enabledTopics: %@, unentitledEnabledTopics: %@}",  (void)v3,  DWORD2(v3));
  sub_10000DE10();
}

void sub_1000BE208(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = APSPrettyPrintCollection(a1, 0LL, 0LL, 0LL);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100036C00();
  sub_100054F30( (void *)&_mh_execute_header,  a2,  v5,  "Attempt to set push wake topics without dark wake enabled: %@",  v6);

  sub_100054F50();
}

void sub_1000BE294(_xpc_connection_s *a1)
{
  sub_100054F3C( (void *)&_mh_execute_header,  v1,  v2,  "Peer [pid=%d] attempts to set push wake topics without push wake enabled entitlement",  v3,  v4,  v5,  v6,  0);
  sub_10000DE10();
}

void sub_1000BE308(_xpc_connection_s *a1)
{
  sub_100054F3C( (void *)&_mh_execute_header,  v1,  v2,  "Peer [pid=%d] attempts to set ultra constrained topics without ultra constrained enabled entitlement",  v3,  v4,  v5,  v6,  0);
  sub_10000DE10();
}

void sub_1000BE37C()
{
}

void sub_1000BE3DC(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  int v5 = 138412546;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  __int16 v8 = v4;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "%@: Attempt to re-create the streams at %@",  (uint8_t *)&v5,  0x16u);
}

void sub_1000BE490(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Trust evluation failed with error nil",  v1,  2u);
}

void sub_1000BE4D0()
{
}

void sub_1000BE530()
{
}

void sub_1000BE594(uint64_t *a1, os_log_s *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_100054F30((void *)&_mh_execute_header, a2, a3, "Failed to create policy with peername %@", (uint8_t *)&v4);
  sub_10000DE10();
}

void sub_1000BE600( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BE668(id *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*a1 name]);
  sub_100036C00();
  sub_100054F30((void *)&_mh_execute_header, a2, v4, "Production device set to invalid push environment: %@", v5);
}

void sub_1000BE6F4()
{
}

void sub_1000BE754()
{
}

void sub_1000BE7B4()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "Unable to copy sockaddr {address: %s, port: %d}",  v2,  0x12u);
  sub_10000DE10();
}

void sub_1000BE834()
{
}

void sub_1000BE894()
{
}

void sub_1000BE8F4()
{
}

void sub_1000BE954()
{
}

void sub_1000BE9B4()
{
}

void sub_1000BEA14(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Failed to get tcp info data", v1, 2u);
}

void sub_1000BEA54(uint64_t a1, void *a2)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  __int16 v4 = 2048;
  id v5 = [a2 messageID];
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%@: Dropping outgoing message %lu because queue is full",  (uint8_t *)&v2,  0x16u);
  sub_100054F50();
}

void sub_1000BEAE8()
{
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  sub_10005CDC4( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "%@: told that we sent an already sent message. Dumping logs! %@",  v1,  v2,  v3,  v4,  2u);

  sub_100054F50();
}

void sub_1000BEB80( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BEBFC(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "%@: Received ack from courier with no outgoing message in flight. Queue count: 0",  (uint8_t *)&v1,  0xCu);
}

void sub_1000BEC78(uint64_t a1, id *a2)
{
  id v4 = [*a2 count];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*a2 objectAtIndex:0]);
  unsigned int v6 = [v5 wasSent];
  __int16 v7 = "N";
  int v8 = 138412802;
  uint64_t v9 = a1;
  if (v6) {
    __int16 v7 = "Y";
  }
  __int16 v10 = 2048;
  id v11 = v4;
  __int16 v12 = 2080;
  uint64_t v13 = v7;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%@: Received ack from courier with no outgoing message in flight. Queue count: %lu. Head of queue sent flag: %s",  (uint8_t *)&v8,  0x20u);
}

void sub_1000BED64()
{
}

void sub_1000BEDD4()
{
}

void sub_1000BEE44()
{
}

void sub_1000BEEAC()
{
}

void sub_1000BEF0C()
{
}

void sub_1000BEF6C()
{
}

void sub_1000BEFD4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BF038( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BF09C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BF100()
{
}

void sub_1000BF160()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEBUG,  "%@: Releasing power assertion %@ with powerAssertionCount now = %d",  v2,  0x1Cu);
  sub_100005B40();
}

void sub_1000BF1E0()
{
}

void sub_1000BF240(void *a1, os_log_s *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 processIdentifier];
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed task initiate entitlement check on XPC from pid:%d\n",  (uint8_t *)v3,  8u);
}

void sub_1000BF2C8(uint64_t a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  int v5 = 138412546;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  int v8 = v4;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "%@: Attempt to re-create the connection at %@",  (uint8_t *)&v5,  0x16u);
}

void sub_1000BF380()
{
}

void sub_1000BF3E0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BF448( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BF4B0(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "SecItemAdd() returned errSecSuccess, but the kSecReturnPersistentRef is NULL",  v1,  2u);
}

void sub_1000BF4F0(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v3 = @"YES";
  if ((a2 & 1) == 0) {
    uint64_t v3 = @"NO";
  }
  *(_DWORD *)uint64_t v4 = 138412546;
  *(void *)&v4[4] = a1;
  *(_WORD *)&v4[12] = 2112;
  *(void *)&v4[14] = v3;
  sub_10000DDFC( (void *)&_mh_execute_header,  a2,  a3,  "Unable to copy activation identity: _APSCopyActivationIdentity() failed. Device is probably unactivated. Do you need to hacktivate? {error: %@, shouldHacktivate: %@}",  *(void *)v4,  *(void *)&v4[8],  *(void *)&v4[16]);
  sub_10000DE10();
}

void sub_1000BF578(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2048;
  *(void *)&v3[14] = (int)a2;
  sub_10000DDFC( (void *)&_mh_execute_header,  a2,  a3,  "%@ SecItemDelete() failed: %ld",  *(void *)v3,  *(void *)&v3[8],  *(void *)&v3[16]);
  sub_10000DE10();
}

void sub_1000BF5EC(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = 138412802;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  uint64_t v8 = v3;
  __int16 v9 = 2112;
  uint64_t v10 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%@ device lost mobile activation identity from lockdown keychain. {apsKeychainIdentity %@; apsCachedIdentity %@}",
    (uint8_t *)&v5,
    0x20u);
}

void sub_1000BF680(_xpc_connection_s *a1)
{
  v1[0] = 67109120;
  v1[1] = xpc_connection_get_pid(a1);
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Peer connection [pid=%d] missing server",  (uint8_t *)v1,  8u);
  sub_100005B18();
}

void sub_1000BF6FC()
{
  *(_WORD *)int v0 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "APSXPCSendFakeMessageEvent not allowed on non-internal build",  v0,  2u);
  sub_100005B18();
}

void sub_1000BF73C(_xpc_connection_s *a1)
{
  v1[0] = 67109120;
  v1[1] = xpc_connection_get_pid(a1);
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "Peer connection [pid=%d] lacks APSConnectionInitiateEntitlement",  (uint8_t *)v1,  8u);
  sub_100005B18();
}

void sub_1000BF7B8(_xpc_connection_s *a1)
{
  int v1 = 134217984;
  uint64_t pid = xpc_connection_get_pid(a1);
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "Rejecting status request from sandboxed peer: %lld",  (uint8_t *)&v1,  0xCu);
}

void sub_1000BF83C()
{
  *(_WORD *)int v0 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "aps_peer_event_handler is being called from the wrong queue!",  v0,  2u);
  sub_100005B18();
}

void sub_1000BF87C(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = 138412546;
  uint64_t v6 = v3;
  __int16 v7 = 2112;
  uint64_t v8 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Failed verifying signature for: %@   with error: %@",  (uint8_t *)&v5,  0x16u);
}

void sub_1000BF908(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "%@ Device changed was not called after 2 minutes, dropping pending messages",  (uint8_t *)&v1,  0xCu);
}

void sub_1000BF984(uint64_t a1)
{
  int v1 = 138412290;
  uint64_t v2 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "APSIDSProxyManager %@ received invalid object via IDS!",  (uint8_t *)&v1,  0xCu);
}

void sub_1000BFA00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BFA70(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "tcp_info: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000BFAE4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BFB54( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BFBC4()
{
  int v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  int v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "BOOL aps_IDSShouldUseRestrictedLoggingForService(NSString * _Nullable __strong)"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"APSPrivateLogging.m",  16,  @"%s",  dlerror());

  __break(1u);
}

void sub_1000BFC38(void *a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *IDSFoundationLibrary(void)"));
  objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"APSPrivateLogging.m",  15,  @"%s",  *a1);

  __break(1u);
}

void sub_1000BFCB4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v2 = 138412290;
  uint64_t v3 = v1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "Unable to find outgoing message record for guid %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000BFD34()
{
}

void sub_1000BFD94()
{
}

void sub_1000BFDF4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No identity, can't connect", v1, 2u);
}

void sub_1000BFE34()
{
}

void sub_1000BFE98(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 courierConnection]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 tcpInfoDescription]);
  sub_100036C00();
  sub_100099CA4((void *)&_mh_execute_header, a2, v5, "tcp_info: %@", v6);
}

void sub_1000BFF3C(void *a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)__int128 buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Unable to deserialize message userInfo %@  exception %@",  buf,  0x16u);
}

void sub_1000BFFA0(void *a1, os_log_s *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 interface];
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "Invalid interface type {interface: %d}",  (uint8_t *)v3,  8u);
  sub_10000DE10();
}

void sub_1000C0024()
{
}

void sub_1000C0084()
{
}

void sub_1000C00E4()
{
}

void sub_1000C0144()
{
}

void sub_1000C01B0()
{
}

void sub_1000C0210()
{
}

void sub_1000C0270()
{
}

void sub_1000C02D0()
{
}

void sub_1000C0330()
{
}

void sub_1000C0390()
{
}

void sub_1000C03BC()
{
}

void sub_1000C03E8()
{
}

void sub_1000C0414(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "APSMessageStore - Reindexing the DB failed with SQLite result: %d",  (uint8_t *)v2,  8u);
  sub_100005B18();
}

void sub_1000C0484()
{
}

void sub_1000C04B0()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "NULL message passed when trying to set property isSent",  v0,  2u);
}

void sub_1000C04F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C0568( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C05DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C0650( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C06C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C0738( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C07AC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C0820( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000C0894()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "IORegisterForSystemPower failed",  v0,  2u);
}

void sub_1000C08D8(int a1)
{
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_FAULT,  "IOAllowPowerChange failed!  Error: %d",  (uint8_t *)v1,  8u);
}

void sub_1000C0954(void *a1)
{
  id v1 = objc_begin_catch(a1);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v2 = 138412290;
    id v3 = v1;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "Exception raised during sleep callback: %@",  (uint8_t *)&v2,  0xCu);
  }

  objc_end_catch();
}

void sub_1000C09FC()
{
}

void sub_1000C0A60()
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_APNSPackDecoder_ReceivedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "APNSPackDecoder:ReceivedError:");
}

id objc_msgSend_APNSPackEncoder_receivedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "APNSPackEncoder:receivedError:");
}

id objc_msgSend_JSONDebugState(void *a1, const char *a2, ...)
{
  return _[a1 JSONDebugState];
}

id objc_msgSend_JSONDebugString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONDebugString:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_PUSHTRACE(void *a1, const char *a2, ...)
{
  return _[a1 PUSHTRACE];
}

id objc_msgSend_TCPStreamWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "TCPStreamWithEnvironment:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByResolvingAliasFileAtURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByResolvingAliasFileAtURL:options:error:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_WWANInterfaceName(void *a1, const char *a2, ...)
{
  return _[a1 WWANInterfaceName];
}

id objc_msgSend___delayedPerformKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__delayedPerformKeepAliveOnInterface:");
}

id objc_msgSend__accumulatedAwakePercentage(void *a1, const char *a2, ...)
{
  return _[a1 _accumulatedAwakePercentage];
}

id objc_msgSend__addProtocolConnectionsToUserCourier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addProtocolConnectionsToUserCourier:");
}

id objc_msgSend__addTopic_connectionServer_attributes_change_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addTopic:connectionServer:attributes:change:");
}

id objc_msgSend__adjustConnectedStateWithInterfaceHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustConnectedStateWithInterfaceHint:");
}

id objc_msgSend__adjustConnection(void *a1, const char *a2, ...)
{
  return _[a1 _adjustConnection];
}

id objc_msgSend__adjustConnectionWithInterfacePreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_adjustConnectionWithInterfacePreference:");
}

id objc_msgSend__adjustIsConnectedToService(void *a1, const char *a2, ...)
{
  return _[a1 _adjustIsConnectedToService];
}

id objc_msgSend__appendOneByte_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendOneByte:");
}

id objc_msgSend__appendPrettyStatusToStatusPrinter_time_type_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendPrettyStatusToStatusPrinter:time:type:direction:");
}

id objc_msgSend__appendTwoBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendTwoBytes:");
}

id objc_msgSend__assertWiFiIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 _assertWiFiIfPossible];
}

id objc_msgSend__cacheIPAddress_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheIPAddress:onInterface:");
}

id objc_msgSend__cachedTokensForUser_andService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedTokensForUser:andService:");
}

id objc_msgSend__callCompletionBlocksWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callCompletionBlocksWithError:");
}

id objc_msgSend__cancelRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelRequest:");
}

id objc_msgSend__changeFromFilter_toFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_changeFromFilter:toFilter:");
}

id objc_msgSend__checkIsExpired(void *a1, const char *a2, ...)
{
  return _[a1 _checkIsExpired];
}

id objc_msgSend__checkNearbyDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkNearbyDevices:");
}

id objc_msgSend__checkPiggybackBudget(void *a1, const char *a2, ...)
{
  return _[a1 _checkPiggybackBudget];
}

id objc_msgSend__cleanupConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupConnection:");
}

id objc_msgSend__clearCacheForUser_andService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearCacheForUser:andService:");
}

id objc_msgSend__clearCachedSigNonceCert(void *a1, const char *a2, ...)
{
  return _[a1 _clearCachedSigNonceCert];
}

id objc_msgSend__clearConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearConnectionEstablishTimerOnInterface:");
}

id objc_msgSend__clearConnectionThrottleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearConnectionThrottleTimer];
}

id objc_msgSend__clearCourierConnectTimerAndPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _clearCourierConnectTimerAndPowerAssertion];
}

id objc_msgSend__clearCriticalMessageKeepAliveTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearCriticalMessageKeepAliveTimer];
}

id objc_msgSend__clearCriticalMessageKeepAliveTimerIfAppropriate(void *a1, const char *a2, ...)
{
  return _[a1 _clearCriticalMessageKeepAliveTimerIfAppropriate];
}

id objc_msgSend__clearDatabaseCloseTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDatabaseCloseTimer];
}

id objc_msgSend__clearDecayTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDecayTimer];
}

id objc_msgSend__clearDelayedReconnectTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearDelayedReconnectTimer];
}

id objc_msgSend__clearFilterMessageTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearFilterMessageTimerOnInterface:");
}

id objc_msgSend__clearInactivityTerminationTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearInactivityTerminationTimer];
}

id objc_msgSend__clearKeepAliveResponseTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearKeepAliveResponseTimerOnInterface:");
}

id objc_msgSend__clearPendingFilterTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearPendingFilterTimer];
}

id objc_msgSend__clearPendingProxyPresence(void *a1, const char *a2, ...)
{
  return _[a1 _clearPendingProxyPresence];
}

id objc_msgSend__clearPiggybackConnectionTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearPiggybackConnectionTimer];
}

id objc_msgSend__clearPostSuspensionFlushState(void *a1, const char *a2, ...)
{
  return _[a1 _clearPostSuspensionFlushState];
}

id objc_msgSend__clearResetInterfacePreferenceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _clearResetInterfacePreferenceTimer];
}

id objc_msgSend__clearState(void *a1, const char *a2, ...)
{
  return _[a1 _clearState];
}

id objc_msgSend__clearTopicsForGuestUser(void *a1, const char *a2, ...)
{
  return _[a1 _clearTopicsForGuestUser];
}

id objc_msgSend__closeQuery(void *a1, const char *a2, ...)
{
  return _[a1 _closeQuery];
}

id objc_msgSend__connectStreamWithInterfacePreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectStreamWithInterfacePreference:");
}

id objc_msgSend__connectToServerWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToServerWithConfiguration:");
}

id objc_msgSend__connectToServerWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToServerWithCount:");
}

id objc_msgSend__connectToServerWithPeerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToServerWithPeerName:");
}

id objc_msgSend__connectionsDebuggingState(void *a1, const char *a2, ...)
{
  return _[a1 _connectionsDebuggingState];
}

id objc_msgSend__containsInvalidTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containsInvalidTopic:");
}

id objc_msgSend__copyClientIdentityFromKeychain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyClientIdentityFromKeychain:");
}

id objc_msgSend__copyHashForString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyHashForString:");
}

id objc_msgSend__copyLocalSockAddr(void *a1, const char *a2, ...)
{
  return _[a1 _copyLocalSockAddr];
}

id objc_msgSend__copyParsedPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyParsedPayload:");
}

id objc_msgSend__copyServerIPAddressString(void *a1, const char *a2, ...)
{
  return _[a1 _copyServerIPAddressString];
}

id objc_msgSend__copyTokenForDomain_appSpecificIdentifier_tokenServiceSuffix_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_copyTokenForDomain:appSpecificIdentifier:tokenServiceSuffix:user:");
}

id objc_msgSend__countActiveClients(void *a1, const char *a2, ...)
{
  return _[a1 _countActiveClients];
}

id objc_msgSend__createDispatchData(void *a1, const char *a2, ...)
{
  return _[a1 _createDispatchData];
}

id objc_msgSend__createRequestForPubSubData_messageID_connectionType_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createRequestForPubSubData:messageID:connectionType:environment:");
}

id objc_msgSend__currentStream(void *a1, const char *a2, ...)
{
  return _[a1 _currentStream];
}

id objc_msgSend__decayCost(void *a1, const char *a2, ...)
{
  return _[a1 _decayCost];
}

id objc_msgSend__delayedPerformKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delayedPerformKeepAliveOnInterface:");
}

id objc_msgSend__delayedPerformKeepAliveOnInterface_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delayedPerformKeepAliveOnInterface:withDelay:");
}

id objc_msgSend__deleteClientIdentityRequestingReplacement(void *a1, const char *a2, ...)
{
  return _[a1 _deleteClientIdentityRequestingReplacement];
}

id objc_msgSend__deliverNotificationSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverNotificationSelector:");
}

id objc_msgSend__deliverResult_forMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deliverResult:forMessage:");
}

id objc_msgSend__deregisterFromWoWNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _deregisterFromWoWNotifications];
}

id objc_msgSend__deserializeKeychainData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deserializeKeychainData:");
}

id objc_msgSend__didFinishAssertingAllPresences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishAssertingAllPresences:");
}

id objc_msgSend__disconnectAllStreamsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectAllStreamsWithReason:");
}

id objc_msgSend__disconnectStreamForInterface_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectStreamForInterface:withReason:");
}

id objc_msgSend__disconnectTokenWithReason_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_disconnectTokenWithReason:onProtocolConnection:");
}

id objc_msgSend__domain(void *a1, const char *a2, ...)
{
  return _[a1 _domain];
}

id objc_msgSend__dumpLogsForInconsistencyIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _dumpLogsForInconsistencyIfNecessary];
}

id objc_msgSend__enableAllCouriers(void *a1, const char *a2, ...)
{
  return _[a1 _enableAllCouriers];
}

id objc_msgSend__enqueueMessage_forOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueMessage:forOriginator:");
}

id objc_msgSend__enqueueXPCMessage_wakingClient_highPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueXPCMessage:wakingClient:highPriority:");
}

id objc_msgSend__enqueueXPCMessage_wakingClient_highPriority_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enqueueXPCMessage:wakingClient:highPriority:withReply:");
}

id objc_msgSend__failAllPendingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _failAllPendingMessages];
}

id objc_msgSend__failWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failWithError:");
}

id objc_msgSend__findClientWithToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findClientWithToken:");
}

id objc_msgSend__findConnectedClientWithToken_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findConnectedClientWithToken:onProtocolConnection:");
}

id objc_msgSend__finishDisconnectForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishDisconnectForInterface:");
}

id objc_msgSend__finishLoadWithResponse_urlHost_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishLoadWithResponse:urlHost:data:");
}

id objc_msgSend__flushStaleWiFiMeasurements(void *a1, const char *a2, ...)
{
  return _[a1 _flushStaleWiFiMeasurements];
}

id objc_msgSend__forceReconnectionsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceReconnectionsWithReason:");
}

id objc_msgSend__forgetRedListTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forgetRedListTopic:");
}

id objc_msgSend__generateSalt(void *a1, const char *a2, ...)
{
  return _[a1 _generateSalt];
}

id objc_msgSend__getCacheEntryForHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCacheEntryForHostname:");
}

id objc_msgSend__getCourierForEnvironmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getCourierForEnvironmentName:");
}

id objc_msgSend__getCurrentTokens(void *a1, const char *a2, ...)
{
  return _[a1 _getCurrentTokens];
}

id objc_msgSend__getIsCurrentlyLoggedIn(void *a1, const char *a2, ...)
{
  return _[a1 _getIsCurrentlyLoggedIn];
}

id objc_msgSend__getMultiUserMode(void *a1, const char *a2, ...)
{
  return _[a1 _getMultiUserMode];
}

id objc_msgSend__getNextMessageID(void *a1, const char *a2, ...)
{
  return _[a1 _getNextMessageID];
}

id objc_msgSend__getTCPInfoData(void *a1, const char *a2, ...)
{
  return _[a1 _getTCPInfoData];
}

id objc_msgSend__handleChannelUpdateCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleChannelUpdateCommand:");
}

id objc_msgSend__handleConnectedMessage_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectedMessage:onProtocolConnection:");
}

id objc_msgSend__handleConnectionAfterSuspensionRecoveryOnInterface_withKeepAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionAfterSuspensionRecoveryOnInterface:withKeepAlive:");
}

id objc_msgSend__handleConnectionFailureOnInterface_forceDelayedReconnect_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionFailureOnInterface:forceDelayedReconnect:withReason:");
}

id objc_msgSend__handleConnectionRecoverFromSuspensionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionRecoverFromSuspensionOnInterface:");
}

id objc_msgSend__handleConnectionSuspendedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleConnectionSuspendedOnInterface:");
}

id objc_msgSend__handleDelayKeepAliveCancelMessageOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleDelayKeepAliveCancelMessageOnInterface:");
}

id objc_msgSend__handleFlushMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFlushMessage:onInterface:");
}

id objc_msgSend__handleInvalidateTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleInvalidateTokenForInfo:");
}

id objc_msgSend__handleKeepAliveAckMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeepAliveAckMessage:onInterface:");
}

id objc_msgSend__handleKeepAliveResponseMessage_onInterface_didWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleKeepAliveResponseMessage:onInterface:didWake:");
}

id objc_msgSend__handleLostPushTokens(void *a1, const char *a2, ...)
{
  return _[a1 _handleLostPushTokens];
}

id objc_msgSend__handlePubSubRequest_unsubscriptionChannels_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePubSubRequest:unsubscriptionChannels:token:");
}

id objc_msgSend__handleRedirectMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRedirectMessage:onInterface:");
}

id objc_msgSend__handleRequestTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleRequestTokenForInfo:");
}

id objc_msgSend__handleSignificantTimeChange(void *a1, const char *a2, ...)
{
  return _[a1 _handleSignificantTimeChange];
}

id objc_msgSend__handleSubscriptionUpdateCommand_token_protocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleSubscriptionUpdateCommand:token:protocolConnection:");
}

id objc_msgSend__handleTaskControlResponse_controlResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleTaskControlResponse:controlResponse:error:");
}

id objc_msgSend__hasBytesAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _hasBytesAvailable];
}

id objc_msgSend__hasListeningTopics(void *a1, const char *a2, ...)
{
  return _[a1 _hasListeningTopics];
}

id objc_msgSend__hasSpaceAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _hasSpaceAvailable];
}

id objc_msgSend__hasTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasTopic:");
}

id objc_msgSend__identifierForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifierForTopic:user:");
}

id objc_msgSend__idsSendQueue(void *a1, const char *a2, ...)
{
  return _[a1 _idsSendQueue];
}

id objc_msgSend__incompleteCurrentTaskTransactionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 _incompleteCurrentTaskTransactionMetrics];
}

id objc_msgSend__informTopicManagerOfChangedFilter_newTopics_oldTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_informTopicManagerOfChangedFilter:newTopics:oldTopics:");
}

id objc_msgSend__initiateConnectionIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _initiateConnectionIfNecessary];
}

id objc_msgSend__interfaceForConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceForConnectionManager:");
}

id objc_msgSend__interfaceForProtocolParser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceForProtocolParser:");
}

id objc_msgSend__interfaceForStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interfaceForStream:");
}

id objc_msgSend__invokeInFailureHandlingContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invokeInFailureHandlingContext:");
}

id objc_msgSend__isExpired(void *a1, const char *a2, ...)
{
  return _[a1 _isExpired];
}

id objc_msgSend__isIdentityAvailable(void *a1, const char *a2, ...)
{
  return _[a1 _isIdentityAvailable];
}

id objc_msgSend__isInteractivePushDuringSleepEnabledForConnectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInteractivePushDuringSleepEnabledForConnectionServer:");
}

id objc_msgSend__isInternetReachableOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isInternetReachableOnInterface:");
}

id objc_msgSend__isResponseForProxyDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isResponseForProxyDevice:");
}

id objc_msgSend__isValidEnvironmentToTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidEnvironmentToTopics:");
}

id objc_msgSend__isWiFiLinkQualityBetter(void *a1, const char *a2, ...)
{
  return _[a1 _isWiFiLinkQualityBetter];
}

id objc_msgSend__keyForTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_keyForTopic:token:");
}

id objc_msgSend__keychainService(void *a1, const char *a2, ...)
{
  return _[a1 _keychainService];
}

id objc_msgSend__lingerAfterLastPowerAssertionIsReleased(void *a1, const char *a2, ...)
{
  return _[a1 _lingerAfterLastPowerAssertionIsReleased];
}

id objc_msgSend__linkQualityForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_linkQualityForInterface:");
}

id objc_msgSend__loadCachedProperties(void *a1, const char *a2, ...)
{
  return _[a1 _loadCachedProperties];
}

id objc_msgSend__loadIdentifiersToSaltsFromKeychainForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadIdentifiersToSaltsFromKeychainForUser:");
}

id objc_msgSend__loadKeychainDataForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadKeychainDataForUser:");
}

id objc_msgSend__logTopics(void *a1, const char *a2, ...)
{
  return _[a1 _logTopics];
}

id objc_msgSend__lookUpMachPort(void *a1, const char *a2, ...)
{
  return _[a1 _lookUpMachPort];
}

id objc_msgSend__markDisconnectedIsPermanent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markDisconnectedIsPermanent:");
}

id objc_msgSend__migratePersistentTopicsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _migratePersistentTopicsIfNeeded];
}

id objc_msgSend__neededToSwitchToKeepAliveProxyInterface(void *a1, const char *a2, ...)
{
  return _[a1 _neededToSwitchToKeepAliveProxyInterface];
}

id objc_msgSend__noteConnection(void *a1, const char *a2, ...)
{
  return _[a1 _noteConnection];
}

id objc_msgSend__notifyForIncomingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyForIncomingMessage:");
}

id objc_msgSend__notifyForIncomingMessage_forConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_notifyForIncomingMessage:forConnection:");
}

id objc_msgSend__onQueueDeleteLowPriorityIncomingMessagesForTopic_environment_pushTokens_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueDeleteLowPriorityIncomingMessagesForTopic:environment:pushTokens:");
}

id objc_msgSend__onQueueIncomingMessagesFromRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueIncomingMessagesFromRecords:");
}

id objc_msgSend__onQueueSubscribedChannelsForRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueSubscribedChannelsForRecord:");
}

id objc_msgSend__onQueueSubscribedChannelsForRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueueSubscribedChannelsForRecords:");
}

id objc_msgSend__onQueue_checkNearbyDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_checkNearbyDevices:");
}

id objc_msgSend__onQueue_configurationForEnvironment_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onQueue_configurationForEnvironment:connectionType:");
}

id objc_msgSend__openWithTXTLookup(void *a1, const char *a2, ...)
{
  return _[a1 _openWithTXTLookup];
}

id objc_msgSend__outgoingMessageIsLateCriticalMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outgoingMessageIsLateCriticalMessage:");
}

id objc_msgSend__parseDERCertificatesFromChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseDERCertificatesFromChain:");
}

id objc_msgSend__parseSerialMessage_parameters_isInvalid_lengthParsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_parseSerialMessage:parameters:isInvalid:lengthParsed:");
}

id objc_msgSend__pendingFilterTimerFired(void *a1, const char *a2, ...)
{
  return _[a1 _pendingFilterTimerFired];
}

id objc_msgSend__performEvictionSweep(void *a1, const char *a2, ...)
{
  return _[a1 _performEvictionSweep];
}

id objc_msgSend__performIdleCheck(void *a1, const char *a2, ...)
{
  return _[a1 _performIdleCheck];
}

id objc_msgSend__performKeepAliveOnInterface_shortInterval_withAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performKeepAliveOnInterface:shortInterval:withAction:");
}

id objc_msgSend__performPeriodicSignal(void *a1, const char *a2, ...)
{
  return _[a1 _performPeriodicSignal];
}

id objc_msgSend__potentiallyChangeChosenTopicStateForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_potentiallyChangeChosenTopicStateForTopic:");
}

id objc_msgSend__prepareToParseOutgoingDataOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareToParseOutgoingDataOnInterface:");
}

id objc_msgSend__processInvalidIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _processInvalidIdentity];
}

id objc_msgSend__processPendingChangeIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _processPendingChangeIfNeeded];
}

id objc_msgSend__processPendingProxyPresences(void *a1, const char *a2, ...)
{
  return _[a1 _processPendingProxyPresences];
}

id objc_msgSend__processPotentialIdentityChanged(void *a1, const char *a2, ...)
{
  return _[a1 _processPotentialIdentityChanged];
}

id objc_msgSend__processSSIDChangeWithSSID_querySSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processSSIDChangeWithSSID:querySSID:");
}

id objc_msgSend__processShouldRunChangeIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _processShouldRunChangeIfNecessary];
}

id objc_msgSend__processShouldUseInternetChangeIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _processShouldUseInternetChangeIfNecessary];
}

id objc_msgSend__processStoredIncomingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _processStoredIncomingMessages];
}

id objc_msgSend__processStoredIncomingMessagesForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processStoredIncomingMessagesForConnection:");
}

id objc_msgSend__processStoredOutgoingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _processStoredOutgoingMessages];
}

id objc_msgSend__processTopicChange_immediately_alertDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_processTopicChange:immediately:alertDelegate:");
}

id objc_msgSend__protoSubscriptionFailureToReadableFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_protoSubscriptionFailureToReadableFailure:");
}

id objc_msgSend__protoUpdateFailureToReadableFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_protoUpdateFailureToReadableFailure:");
}

id objc_msgSend__proxyManager(void *a1, const char *a2, ...)
{
  return _[a1 _proxyManager];
}

id objc_msgSend__pruneHistory(void *a1, const char *a2, ...)
{
  return _[a1 _pruneHistory];
}

id objc_msgSend__queueChanged(void *a1, const char *a2, ...)
{
  return _[a1 _queueChanged];
}

id objc_msgSend__recalculatePowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _recalculatePowerAssertion];
}

id objc_msgSend__recalculateTimer(void *a1, const char *a2, ...)
{
  return _[a1 _recalculateTimer];
}

id objc_msgSend__recategorizeTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recategorizeTopic:");
}

id objc_msgSend__receiveData(void *a1, const char *a2, ...)
{
  return _[a1 _receiveData];
}

id objc_msgSend__recipientDevice(void *a1, const char *a2, ...)
{
  return _[a1 _recipientDevice];
}

id objc_msgSend__recreateCacheDictionaries(void *a1, const char *a2, ...)
{
  return _[a1 _recreateCacheDictionaries];
}

id objc_msgSend__registerAppTokenCleanup(void *a1, const char *a2, ...)
{
  return _[a1 _registerAppTokenCleanup];
}

id objc_msgSend__registerForWoWNotifications(void *a1, const char *a2, ...)
{
  return _[a1 _registerForWoWNotifications];
}

id objc_msgSend__reloadDualMode(void *a1, const char *a2, ...)
{
  return _[a1 _reloadDualMode];
}

id objc_msgSend__rememberRedListTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rememberRedListTopic:");
}

id objc_msgSend__removeCourierForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeCourierForEnvironment:");
}

id objc_msgSend__removePendingRequestsForProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePendingRequestsForProtocolConnection:");
}

id objc_msgSend__removeTopic_connectionServer_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeTopic:connectionServer:filter:");
}

id objc_msgSend__reportAPSConnectivity(void *a1, const char *a2, ...)
{
  return _[a1 _reportAPSConnectivity];
}

id objc_msgSend__requestClientPubSubChannelList_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestClientPubSubChannelList:onProtocolConnection:");
}

id objc_msgSend__requestKeepAlive_orConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestKeepAlive:orConnection:");
}

id objc_msgSend__requestKeepAlive_orConnection_shortInterval_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestKeepAlive:orConnection:shortInterval:onInterface:");
}

id objc_msgSend__requestKeepAliveProxy(void *a1, const char *a2, ...)
{
  return _[a1 _requestKeepAliveProxy];
}

id objc_msgSend__requestToSendFilterOnTopicManager_change_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestToSendFilterOnTopicManager:change:");
}

id objc_msgSend__resetCheckpointForIgnoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetCheckpointForIgnoredTopics:");
}

id objc_msgSend__resetKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetKeepAliveOnInterface:");
}

id objc_msgSend__resetServerKeepAliveStatsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetServerKeepAliveStatsOnInterface:");
}

id objc_msgSend__resumeQueue(void *a1, const char *a2, ...)
{
  return _[a1 _resumeQueue];
}

id objc_msgSend__retrieveAllDevicesAndDo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveAllDevicesAndDo:");
}

id objc_msgSend__retryRequestAfterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryRequestAfterDelay:");
}

id objc_msgSend__retryRequestAfterDelay_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryRequestAfterDelay:withDelay:");
}

id objc_msgSend__saltStoreForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saltStoreForUser:");
}

id objc_msgSend__saveIdentifiersToSalts_toKeychainForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveIdentifiersToSalts:toKeychainForUser:");
}

id objc_msgSend__saveKeychainData_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveKeychainData:forUser:");
}

id objc_msgSend__savePersistentConnectionTopics(void *a1, const char *a2, ...)
{
  return _[a1 _savePersistentConnectionTopics];
}

id objc_msgSend__scheduleDeviceNotFoundTimer(void *a1, const char *a2, ...)
{
  return _[a1 _scheduleDeviceNotFoundTimer];
}

id objc_msgSend__schedulePeriodicSignal(void *a1, const char *a2, ...)
{
  return _[a1 _schedulePeriodicSignal];
}

id objc_msgSend__scheduleServerUpdateWithChange_timer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleServerUpdateWithChange:timer:");
}

id objc_msgSend__scheduleServerUpdateWithChange_timer_shortInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleServerUpdateWithChange:timer:shortInterval:");
}

id objc_msgSend__sendActiveStateMessageWithSendAllBlueListMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendActiveStateMessageWithSendAllBlueListMessages:");
}

id objc_msgSend__sendClientFilter_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendClientFilter:onProtocolConnection:");
}

id objc_msgSend__sendClientToken_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendClientToken:forInfo:");
}

id objc_msgSend__sendDaemonAliveMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendDaemonAliveMessage];
}

id objc_msgSend__sendFilterMessageOnProtocolConnection_withChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFilterMessageOnProtocolConnection:withChange:");
}

id objc_msgSend__sendFilterMessageOnProtocolConnection_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFilterMessageOnProtocolConnection:withReason:");
}

id objc_msgSend__sendInactiveMessage(void *a1, const char *a2, ...)
{
  return _[a1 _sendInactiveMessage];
}

id objc_msgSend__sendOutgoingMessage_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendOutgoingMessage:onProtocolConnection:");
}

id objc_msgSend__sendOutgoingMessage_topicHash_lastRTT_token_onInterface_ultraConstrainedAllowed_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "_sendOutgoingMessage:topicHash:lastRTT:token:onInterface:ultraConstrainedAllowed:withCompletion:");
}

id objc_msgSend__sendPresenceMessageOnProtocolConnection_serverTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPresenceMessageOnProtocolConnection:serverTime:");
}

id objc_msgSend__sendProxyChannelList_onConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendProxyChannelList:onConnectionType:");
}

id objc_msgSend__sendPubsubConnectMessageOnProtocolConnection_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendPubsubConnectMessageOnProtocolConnection:token:");
}

id objc_msgSend__sendQueuedOutgoingMessages(void *a1, const char *a2, ...)
{
  return _[a1 _sendQueuedOutgoingMessages];
}

id objc_msgSend__serializeKeychainDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serializeKeychainDict:");
}

id objc_msgSend__setActivePushConnectionState(void *a1, const char *a2, ...)
{
  return _[a1 _setActivePushConnectionState];
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setSaltStore_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSaltStore:forUser:");
}

id objc_msgSend__setSystemLockState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSystemLockState:");
}

id objc_msgSend__setSystemScreenState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSystemScreenState:");
}

id objc_msgSend__setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setToken:");
}

id objc_msgSend__setupNotifyToken(void *a1, const char *a2, ...)
{
  return _[a1 _setupNotifyToken];
}

id objc_msgSend__startConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startConnectionEstablishTimerOnInterface:");
}

id objc_msgSend__startCriticalMessageFlushTimerSendingFlush(void *a1, const char *a2, ...)
{
  return _[a1 _startCriticalMessageFlushTimerSendingFlush];
}

id objc_msgSend__startEvictionTimerIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 _startEvictionTimerIfNeeded];
}

id objc_msgSend__startFilterMessageTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startFilterMessageTimerOnInterface:");
}

id objc_msgSend__startInactivityTerminationTimerIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _startInactivityTerminationTimerIfNecessary];
}

id objc_msgSend__startKeepAliveResponseTimerOnInterface_shortInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startKeepAliveResponseTimerOnInterface:shortInterval:");
}

id objc_msgSend__startResetInterfacePreferenceTimer(void *a1, const char *a2, ...)
{
  return _[a1 _startResetInterfacePreferenceTimer];
}

id objc_msgSend__stopEvictionTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopEvictionTimer];
}

id objc_msgSend__stopEvictionTimerIfEmpty(void *a1, const char *a2, ...)
{
  return _[a1 _stopEvictionTimerIfEmpty];
}

id objc_msgSend__submitKeepAliveFailedAWDonInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitKeepAliveFailedAWDonInterface:");
}

id objc_msgSend__submitKeepAliveSucceededAWDonInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_submitKeepAliveSucceededAWDonInterface:");
}

id objc_msgSend__suspendQueue(void *a1, const char *a2, ...)
{
  return _[a1 _suspendQueue];
}

id objc_msgSend__systemDidWake(void *a1, const char *a2, ...)
{
  return _[a1 _systemDidWake];
}

id objc_msgSend__systemIsReady(void *a1, const char *a2, ...)
{
  return _[a1 _systemIsReady];
}

id objc_msgSend__systemWillSleep(void *a1, const char *a2, ...)
{
  return _[a1 _systemWillSleep];
}

id objc_msgSend__toggleWiFiAutoAssociateIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 _toggleWiFiAutoAssociateIfNecessary];
}

id objc_msgSend__tokenStoreForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tokenStoreForEnvironment:");
}

id objc_msgSend__topicStateForTopic_connectionServer_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topicStateForTopic:connectionServer:filter:");
}

id objc_msgSend__topicsByHashFromTopicStateDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topicsByHashFromTopicStateDictionary:");
}

id objc_msgSend__triggerAutoBugCaptureForInvalidPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerAutoBugCaptureForInvalidPresence:");
}

id objc_msgSend__triggerAutoBugCaptureIfMessageIsRetried_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_triggerAutoBugCaptureIfMessageIsRetried:");
}

id objc_msgSend__ultraConstrainedTopicsFromTopicDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ultraConstrainedTopicsFromTopicDictionary:");
}

id objc_msgSend__updateCourierConnectTimerAndPowerAssertion(void *a1, const char *a2, ...)
{
  return _[a1 _updateCourierConnectTimerAndPowerAssertion];
}

id objc_msgSend__updateNetworkGuidance(void *a1, const char *a2, ...)
{
  return _[a1 _updateNetworkGuidance];
}

id objc_msgSend__updateTimerIfNecessaryWithDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTimerIfNecessaryWithDevices:");
}

id objc_msgSend__useCachedLastIPIfPossible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useCachedLastIPIfPossible:");
}

id objc_msgSend__useInteractivePowerAssertionIfNeededForConnectionServer_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useInteractivePowerAssertionIfNeededForConnectionServer:withReason:");
}

id objc_msgSend__useInteractivePowerAssertionIfNeededWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useInteractivePowerAssertionIfNeededWithReason:");
}

id objc_msgSend__useShortKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 _useShortKeepAliveInterval];
}

id objc_msgSend__useSystemSaltStoreForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useSystemSaltStoreForUser:");
}

id objc_msgSend__wakeCausedByTopic_interface_priorityVal_inAllowlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_wakeCausedByTopic:interface:priorityVal:inAllowlist:");
}

id objc_msgSend__warnIfOverlappingTopics_againstTopics_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_warnIfOverlappingTopics:againstTopics:string:");
}

id objc_msgSend__wifiIsHistoricallyCheap(void *a1, const char *a2, ...)
{
  return _[a1 _wifiIsHistoricallyCheap];
}

id objc_msgSend__writePubSubMessagetoConnection_messageID_token_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writePubSubMessagetoConnection:messageID:token:connectionType:");
}

id objc_msgSend_ackTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 ackTimestamp];
}

id objc_msgSend_acknowledgeDidReceivePublicToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeDidReceivePublicToken:");
}

id objc_msgSend_activeProtocolConnections(void *a1, const char *a2, ...)
{
  return _[a1 activeProtocolConnections];
}

id objc_msgSend_activityTracking(void *a1, const char *a2, ...)
{
  return _[a1 activityTracking];
}

id objc_msgSend_addAppChannelSubscriptionResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppChannelSubscriptionResponse:");
}

id objc_msgSend_addAppChannelSubscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppChannelSubscriptions:");
}

id objc_msgSend_addAppChannelUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAppChannelUpdates:");
}

id objc_msgSend_addAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributes:");
}

id objc_msgSend_addBinaryPropertyListWithAttributeId_data_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBinaryPropertyListWithAttributeId:data:isIndexable:");
}

id objc_msgSend_addCacheIPAddress_addressFamily_timeToLive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCacheIPAddress:addressFamily:timeToLive:");
}

id objc_msgSend_addCertificates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCertificates:");
}

id objc_msgSend_addChannelUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChannelUpdates:");
}

id objc_msgSend_addCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletionBlock:");
}

id objc_msgSend_addConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConnection:");
}

id objc_msgSend_addConnection_forUser_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConnection:forUser:dependencies:");
}

id objc_msgSend_addCost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCost:");
}

id objc_msgSend_addDataListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDataListener:");
}

id objc_msgSend_addDataWithAttributeId_data_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDataWithAttributeId:data:isIndexable:");
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addFastDormancyDisableToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFastDormancyDisableToken:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addInt16WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt16WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addInt32WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt32WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addInt64WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt64WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addInt8WithAttributeId_number_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInt8WithAttributeId:number:isIndexable:");
}

id objc_msgSend_addIpv4_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIpv4:");
}

id objc_msgSend_addIpv6_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIpv6:");
}

id objc_msgSend_addItem_withInitialState_withTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItem:withInitialState:withTopic:");
}

id objc_msgSend_addListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListener:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addStateListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStateListener:");
}

id objc_msgSend_addStringWithAttributId_string_isIndexable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addStringWithAttributId:string:isIndexable:");
}

id objc_msgSend_addSubscriptionChannelResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionChannelResponse:");
}

id objc_msgSend_addSubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionChannels:");
}

id objc_msgSend_addSubscriptionUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionUpdates:");
}

id objc_msgSend_addTaskServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTaskServer:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addTopicsAndAttributes_connectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTopicsAndAttributes:connectionServer:");
}

id objc_msgSend_addUnsubscriptionChannelResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnsubscriptionChannelResponse:");
}

id objc_msgSend_addUnsubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnsubscriptionChannels:");
}

id objc_msgSend_addressFamily(void *a1, const char *a2, ...)
{
  return _[a1 addressFamily];
}

id objc_msgSend_adjustConnectionsIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 adjustConnectionsIfNeeded];
}

id objc_msgSend_adjustQualityOfConnectionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustQualityOfConnectionOnInterface:");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allRegisteredChannelsForEnvironment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForEnvironment:userName:");
}

id objc_msgSend_allRegisteredChannelsForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForTopic:");
}

id objc_msgSend_allRegisteredChannelsForTopic_environment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForTopic:environment:userName:");
}

id objc_msgSend_allRegisteredChannelsForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allRegisteredChannelsForTopic:user:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowBindingToWWAN(void *a1, const char *a2, ...)
{
  return _[a1 allowBindingToWWAN];
}

id objc_msgSend_allowedToHaveMultipleOpenInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 allowedToHaveMultipleOpenInterfaces];
}

id objc_msgSend_alternatePort(void *a1, const char *a2, ...)
{
  return _[a1 alternatePort];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _[a1 anyObject];
}

id objc_msgSend_appChannelSubscriptionResponseAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appChannelSubscriptionResponseAtIndex:");
}

id objc_msgSend_appChannelSubscriptionResponses(void *a1, const char *a2, ...)
{
  return _[a1 appChannelSubscriptionResponses];
}

id objc_msgSend_appChannelSubscriptionResponsesCount(void *a1, const char *a2, ...)
{
  return _[a1 appChannelSubscriptionResponsesCount];
}

id objc_msgSend_appChannelSubscriptionsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appChannelSubscriptionsAtIndex:");
}

id objc_msgSend_appChannelSubscriptionsCount(void *a1, const char *a2, ...)
{
  return _[a1 appChannelSubscriptionsCount];
}

id objc_msgSend_appChannelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 appChannelUpdates];
}

id objc_msgSend_appChannelUpdatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appChannelUpdatesAtIndex:");
}

id objc_msgSend_appChannelUpdatesCount(void *a1, const char *a2, ...)
{
  return _[a1 appChannelUpdatesCount];
}

id objc_msgSend_appId(void *a1, const char *a2, ...)
{
  return _[a1 appId];
}

id objc_msgSend_appTokenGenerateCompletions(void *a1, const char *a2, ...)
{
  return _[a1 appTokenGenerateCompletions];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendDescription_BOOLValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:BOOLValue:");
}

id objc_msgSend_appendDescription_dateValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:dateValue:");
}

id objc_msgSend_appendDescription_enabledValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:enabledValue:");
}

id objc_msgSend_appendDescription_stringValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:stringValue:");
}

id objc_msgSend_appendDescription_successRateWithSuccessCount_failureCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:successRateWithSuccessCount:failureCount:");
}

id objc_msgSend_appendDescription_timeIntervalValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:timeIntervalValue:");
}

id objc_msgSend_appendDescription_unsignedIntegerValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:unsignedIntegerValue:");
}

id objc_msgSend_appendDescription_unsignedLongLongValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDescription:unsignedLongLongValue:");
}

id objc_msgSend_appendEightByteItem_bytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendEightByteItem:bytes:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendFourByteItem_bytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFourByteItem:bytes:");
}

id objc_msgSend_appendItem_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendItem:data:");
}

id objc_msgSend_appendItem_string_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendItem:string:");
}

id objc_msgSend_appendLine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendLine:");
}

id objc_msgSend_appendOneByteItem_byte_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendOneByteItem:byte:");
}

id objc_msgSend_appendPrettyStatusToStatusPrinter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPrettyStatusToStatusPrinter:");
}

id objc_msgSend_appendPrettyStatusToStatusPrinter_forTopics_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPrettyStatusToStatusPrinter:forTopics:type:");
}

id objc_msgSend_appendPrettyStatusToStatusPrinter_total_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPrettyStatusToStatusPrinter:total:direction:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendTwoByteItem_bytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendTwoByteItem:bytes:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attemptToRollSalt(void *a1, const char *a2, ...)
{
  return _[a1 attemptToRollSalt];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_attributesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesAtIndex:");
}

id objc_msgSend_attributesCount(void *a1, const char *a2, ...)
{
  return _[a1 attributesCount];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _[a1 authenticationMethod];
}

id objc_msgSend_baaIdentityRefreshedBlock(void *a1, const char *a2, ...)
{
  return _[a1 baaIdentityRefreshedBlock];
}

id objc_msgSend_bagExpiryInterval(void *a1, const char *a2, ...)
{
  return _[a1 bagExpiryInterval];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseToken(void *a1, const char *a2, ...)
{
  return _[a1 baseToken];
}

id objc_msgSend_beginTrackingProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTrackingProtocolConnection:");
}

id objc_msgSend_beginTransaction(void *a1, const char *a2, ...)
{
  return _[a1 beginTransaction];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLValueFromPushBundleForKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValueFromPushBundleForKey:error:");
}

id objc_msgSend_bootstrapLookupForPortName_outConnectionPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapLookupForPortName:outConnectionPort:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cachedServerCountForDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedServerCountForDomain:");
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_canAttemptConnection(void *a1, const char *a2, ...)
{
  return _[a1 canAttemptConnection];
}

id objc_msgSend_canUseProxy(void *a1, const char *a2, ...)
{
  return _[a1 canUseProxy];
}

id objc_msgSend_canUseProxyChanged(void *a1, const char *a2, ...)
{
  return _[a1 canUseProxyChanged];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelOutgoingMessageWithID:");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_captureStreams(void *a1, const char *a2, ...)
{
  return _[a1 captureStreams];
}

id objc_msgSend_carrier(void *a1, const char *a2, ...)
{
  return _[a1 carrier];
}

id objc_msgSend_certificate(void *a1, const char *a2, ...)
{
  return _[a1 certificate];
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return _[a1 certificates];
}

id objc_msgSend_certificatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificatesAtIndex:");
}

id objc_msgSend_certificatesCount(void *a1, const char *a2, ...)
{
  return _[a1 certificatesCount];
}

id objc_msgSend_channelID(void *a1, const char *a2, ...)
{
  return _[a1 channelID];
}

id objc_msgSend_channelId(void *a1, const char *a2, ...)
{
  return _[a1 channelId];
}

id objc_msgSend_channelStatus(void *a1, const char *a2, ...)
{
  return _[a1 channelStatus];
}

id objc_msgSend_channelSubscriptionCheckpoint(void *a1, const char *a2, ...)
{
  return _[a1 channelSubscriptionCheckpoint];
}

id objc_msgSend_channelTopic(void *a1, const char *a2, ...)
{
  return _[a1 channelTopic];
}

id objc_msgSend_channelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 channelUpdates];
}

id objc_msgSend_channelUpdatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channelUpdatesAtIndex:");
}

id objc_msgSend_channelUpdatesCount(void *a1, const char *a2, ...)
{
  return _[a1 channelUpdatesCount];
}

id objc_msgSend_checkpoint(void *a1, const char *a2, ...)
{
  return _[a1 checkpoint];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _[a1 clear];
}

id objc_msgSend_clearAppChannelSubscriptionResponses(void *a1, const char *a2, ...)
{
  return _[a1 clearAppChannelSubscriptionResponses];
}

id objc_msgSend_clearAppChannelSubscriptions(void *a1, const char *a2, ...)
{
  return _[a1 clearAppChannelSubscriptions];
}

id objc_msgSend_clearAppChannelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 clearAppChannelUpdates];
}

id objc_msgSend_clearAttributes(void *a1, const char *a2, ...)
{
  return _[a1 clearAttributes];
}

id objc_msgSend_clearCertificates(void *a1, const char *a2, ...)
{
  return _[a1 clearCertificates];
}

id objc_msgSend_clearChannelUpdates(void *a1, const char *a2, ...)
{
  return _[a1 clearChannelUpdates];
}

id objc_msgSend_clearConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConnectionEstablishTimerOnInterface:");
}

id objc_msgSend_clearConsecutiveConnectionFailureReasonOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConsecutiveConnectionFailureReasonOnInterface:");
}

id objc_msgSend_clearDNSResolutionAndTLSHandshakeOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDNSResolutionAndTLSHandshakeOnInterface:");
}

id objc_msgSend_clearEnqueuedSendsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearEnqueuedSendsOnInterface:");
}

id objc_msgSend_clearInfoFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearInfoFor:");
}

id objc_msgSend_clearIpv4s(void *a1, const char *a2, ...)
{
  return _[a1 clearIpv4s];
}

id objc_msgSend_clearIpv6s(void *a1, const char *a2, ...)
{
  return _[a1 clearIpv6s];
}

id objc_msgSend_clearKeepAliveResponseTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearKeepAliveResponseTimerOnInterface:");
}

id objc_msgSend_clearOneofValuesForSubscriptionInfo(void *a1, const char *a2, ...)
{
  return _[a1 clearOneofValuesForSubscriptionInfo];
}

id objc_msgSend_clearProtocolConnectionForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearProtocolConnectionForInterface:");
}

id objc_msgSend_clearRedirectCount(void *a1, const char *a2, ...)
{
  return _[a1 clearRedirectCount];
}

id objc_msgSend_clearSaltForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSaltForTopic:user:");
}

id objc_msgSend_clearSubscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 clearSubscriptionChannelResponses];
}

id objc_msgSend_clearSubscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 clearSubscriptionChannels];
}

id objc_msgSend_clearSubscriptionUpdates(void *a1, const char *a2, ...)
{
  return _[a1 clearSubscriptionUpdates];
}

id objc_msgSend_clearUnsubscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 clearUnsubscriptionChannelResponses];
}

id objc_msgSend_clearUnsubscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 clearUnsubscriptionChannels];
}

id objc_msgSend_client_messageTracingWithStatus_topic_tracingUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:messageTracingWithStatus:topic:tracingUUID:token:");
}

id objc_msgSend_client_requestPushAckResponse_messageId_token_connectionType_generation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:requestPushAckResponse:messageId:token:connectionType:generation:");
}

id objc_msgSend_client_requestSendOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:requestSendOutgoingMessage:");
}

id objc_msgSend_client_requestTokenGenerateWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "client:requestTokenGenerateWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:");
}

id objc_msgSend_client_sendPubSubChannelList_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:sendPubSubChannelList:token:");
}

id objc_msgSend_clientBecameInactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientBecameInactive:");
}

id objc_msgSend_clientIdentity(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentity];
}

id objc_msgSend_clientIdentityProvider(void *a1, const char *a2, ...)
{
  return _[a1 clientIdentityProvider];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeStreamForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeStreamForInterface:");
}

id objc_msgSend_closedSecondChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closedSecondChannel:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _[a1 completionBlock];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_componentsWithURL_resolvingAgainstBaseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsWithURL:resolvingAgainstBaseURL:");
}

id objc_msgSend_configurationClass(void *a1, const char *a2, ...)
{
  return _[a1 configurationClass];
}

id objc_msgSend_configurationForEnvironment_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationForEnvironment:connectionType:");
}

id objc_msgSend_configurationURL(void *a1, const char *a2, ...)
{
  return _[a1 configurationURL];
}

id objc_msgSend_configureWhetherPeerIsTrustedFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWhetherPeerIsTrustedFor:");
}

id objc_msgSend_connectToEnvironment_onInterface_allowedInterfaceConstraint_useAlternatePort_keepAliveProxyMode_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "connectToEnvironment:onInterface:allowedInterfaceConstraint:useAlternatePort:keepAliveProxyMode:");
}

id objc_msgSend_connectedInterfaceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedInterfaceForIdentifier:");
}

id objc_msgSend_connectedTimeInPastOneDayOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedTimeInPastOneDayOnInterface:");
}

id objc_msgSend_connectingInterface(void *a1, const char *a2, ...)
{
  return _[a1 connectingInterface];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_connection_createURLTokenForToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:createURLTokenForToken:");
}

id objc_msgSend_connection_didInvalidateTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didInvalidateTokenForInfo:");
}

id objc_msgSend_connection_didReceiveCancellationForOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveCancellationForOutgoingMessageWithID:");
}

id objc_msgSend_connection_didReceiveFakeMessageToSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveFakeMessageToSend:");
}

id objc_msgSend_connection_didReceiveIncomingMessageReceiptWithTopic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveIncomingMessageReceiptWithTopic:tracingUUID:");
}

id objc_msgSend_connection_didReceiveOutgoingMessageToSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveOutgoingMessageToSend:");
}

id objc_msgSend_connection_didReceiveSubscribeToChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveSubscribeToChannels:forTopic:");
}

id objc_msgSend_connection_didReceiveUnsubscribeToChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didReceiveUnsubscribeToChannels:forTopic:");
}

id objc_msgSend_connection_didRequestCurrentTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didRequestCurrentTokenForInfo:");
}

id objc_msgSend_connection_didRequestTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:didRequestTokenForInfo:");
}

id objc_msgSend_connection_handleAckIncomingMessageWithGuid_topic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:handleAckIncomingMessageWithGuid:topic:tracingUUID:");
}

id objc_msgSend_connection_setKeepAliveConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:setKeepAliveConfiguration:");
}

id objc_msgSend_connection_subscribeToPreviouslyIgnoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection:subscribeToPreviouslyIgnoredTopics:");
}

id objc_msgSend_connectionChangedCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionChangedCriticalReliability:");
}

id objc_msgSend_connectionChangedTrackActivityPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionChangedTrackActivityPresence:");
}

id objc_msgSend_connectionConnectedWithDuration_interface_linkQuality_dualChannelState_dnsResolutionTimeMilliseconds_tlsHandshakeTimeMilliseconds_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "connectionConnectedWithDuration:interface:linkQuality:dualChannelState:dnsResolutionTimeMilliseconds:tlsHands hakeTimeMilliseconds:");
}

id objc_msgSend_connectionDebugInfo(void *a1, const char *a2, ...)
{
  return _[a1 connectionDebugInfo];
}

id objc_msgSend_connectionDelegateHasConnectedUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionDelegateHasConnectedUser:");
}

id objc_msgSend_connectionDelegateIsConnectedToService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionDelegateIsConnectedToService:");
}

id objc_msgSend_connectionDisconnected_linkQuality_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionDisconnected:linkQuality:reason:");
}

id objc_msgSend_connectionEncounteredSSLError_interface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionEncounteredSSLError:interface:");
}

id objc_msgSend_connectionForConnectionPortName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionForConnectionPortName:");
}

id objc_msgSend_connectionForConnectionPortName_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionForConnectionPortName:user:");
}

id objc_msgSend_connectionHandshakeDidComplete(void *a1, const char *a2, ...)
{
  return _[a1 connectionHandshakeDidComplete];
}

id objc_msgSend_connectionInvalidated(void *a1, const char *a2, ...)
{
  return _[a1 connectionInvalidated];
}

id objc_msgSend_connectionManager(void *a1, const char *a2, ...)
{
  return _[a1 connectionManager];
}

id objc_msgSend_connectionPortName(void *a1, const char *a2, ...)
{
  return _[a1 connectionPortName];
}

id objc_msgSend_connectionQualityOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionQualityOnInterface:");
}

id objc_msgSend_connectionRetryManager(void *a1, const char *a2, ...)
{
  return _[a1 connectionRetryManager];
}

id objc_msgSend_connectionServer(void *a1, const char *a2, ...)
{
  return _[a1 connectionServer];
}

id objc_msgSend_connectionServerDelegateForUser_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionServerDelegateForUser:dependencies:");
}

id objc_msgSend_connectionServers(void *a1, const char *a2, ...)
{
  return _[a1 connectionServers];
}

id objc_msgSend_connectionServersForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionServersForUser:");
}

id objc_msgSend_connectionSetupComplete(void *a1, const char *a2, ...)
{
  return _[a1 connectionSetupComplete];
}

id objc_msgSend_connectionTimeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTimeForInterface:");
}

id objc_msgSend_connectionTopicsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTopicsChanged:");
}

id objc_msgSend_connectionType(void *a1, const char *a2, ...)
{
  return _[a1 connectionType];
}

id objc_msgSend_connectionTypeByMessageID(void *a1, const char *a2, ...)
{
  return _[a1 connectionTypeByMessageID];
}

id objc_msgSend_connectionWasClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionWasClosed:");
}

id objc_msgSend_connectionWasOpened_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionWasOpened:");
}

id objc_msgSend_consecutiveConnectionFailureReasonOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consecutiveConnectionFailureReasonOnInterface:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyAppSpecificIdentifierWithTopic_identifier_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAppSpecificIdentifierWithTopic:identifier:user:");
}

id objc_msgSend_copyAppSpecificTokensWithDomain_forTopic_tokenServiceSuffix_user_returnRef_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAppSpecificTokensWithDomain:forTopic:tokenServiceSuffix:user:returnRef:error:");
}

id objc_msgSend_copyAppSpecificTokensWithDomain_forTopic_user_returnRef_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAppSpecificTokensWithDomain:forTopic:user:returnRef:error:");
}

id objc_msgSend_copyConnectMessageWithToken_interface_interfaceConstraint_presenceFlags_activeInterval_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_lastConnected_disconnectReason_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyConnectMessageWithToken:interface:interfaceConstraint:presenceFlags:activeInterval:metadata:certificates: nonce:signature:hostCertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tls HandshakeTimeMilliseconds:consecutiveConnectionFailureReason:lastConnected:disconnectReason:");
}

id objc_msgSend_copyConnectMessageWithToken_state_presenceFlags_interface_interfaceConstraint_activeInterval_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_lastConnected_disconnectReason_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyConnectMessageWithToken:state:presenceFlags:interface:interfaceConstraint:activeInterval:metadata:certifi cates:nonce:signature:hostCertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMillisecon ds:tlsHandshakeTimeMilliseconds:consecutiveConnectionFailureReason:lastConnected:disconnectReason:");
}

id objc_msgSend_copyConnectMessageWithToken_state_presenceFlags_interface_interfaceConstraint_activeInterval_metadata_certificates_nonce_signature_redirectCount_lastConnected_disconnectReason_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyConnectMessageWithToken:state:presenceFlags:interface:interfaceConstraint:activeInterval:metadata:certifi cates:nonce:signature:redirectCount:lastConnected:disconnectReason:");
}

id objc_msgSend_copyConnectMessageWithToken_state_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_lastConnected_disconnectReason_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyConnectMessageWithToken:state:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:red irectCount:lastConnected:disconnectReason:");
}

id objc_msgSend_copyFilterMessageWithEnabledHashes_ignoredHashes_opportunisticHashes_nonWakingHashes_pausedHashes_token_version_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyFilterMessageWithEnabledHashes:ignoredHashes:opportunisticHashes:nonWakingHashes:pausedHashes:token:version:");
}

id objc_msgSend_copyFlushMessageWithWantPaddingLength_paddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFlushMessageWithWantPaddingLength:paddingLength:");
}

id objc_msgSend_copyFlushResponseMessageWithPaddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFlushResponseMessageWithPaddingLength:");
}

id objc_msgSend_copyKeepAliveMessageWithMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyKeepAliveMessageWithMetadata:");
}

id objc_msgSend_copyMessage(void *a1, const char *a2, ...)
{
  return _[a1 copyMessage];
}

id objc_msgSend_copyMessageAcknowledgeMessageWithResponse_messageId_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMessageAcknowledgeMessageWithResponse:messageId:token:");
}

id objc_msgSend_copyMessageData(void *a1, const char *a2, ...)
{
  return _[a1 copyMessageData];
}

id objc_msgSend_copyMessageTracingAckWithTopicHash_status_tracingUUID_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMessageTracingAckWithTopicHash:status:tracingUUID:token:");
}

id objc_msgSend_copyMessageTransportAcknowledgeMessage(void *a1, const char *a2, ...)
{
  return _[a1 copyMessageTransportAcknowledgeMessage];
}

id objc_msgSend_copyMessageWithTopicHash_identifier_payload_token_isPlistFormat_lastRTT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMessageWithTopicHash:identifier:payload:token:isPlistFormat:lastRTT:");
}

id objc_msgSend_copyOperatorName(void *a1, const char *a2, ...)
{
  return _[a1 copyOperatorName];
}

id objc_msgSend_copyPresenceTrackingRequestWithMessageID_pushToken_salt_trackingFlag_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPresenceTrackingRequestWithMessageID:pushToken:salt:trackingFlag:timestamp:");
}

id objc_msgSend_copyPubSubChannelListWithInput_baseToken_messageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPubSubChannelListWithInput:baseToken:messageID:");
}

id objc_msgSend_copySetActiveIntervalMessageWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySetActiveIntervalMessageWithInterval:");
}

id objc_msgSend_copySetActiveState_forInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copySetActiveState:forInterval:");
}

id objc_msgSend_copyTaskControlMessageWithInput_messageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTaskControlMessageWithInput:messageId:");
}

id objc_msgSend_copyTokenForDomain_appSpecificIdentifier_tokenServiceSuffix_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTokenForDomain:appSpecificIdentifier:tokenServiceSuffix:user:");
}

id objc_msgSend_copyTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "copyTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:");
}

id objc_msgSend_copyValueForKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyValueForKey:error:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_correlationIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 correlationIdentifier];
}

id objc_msgSend_costDrivenDualChannelAttempts(void *a1, const char *a2, ...)
{
  return _[a1 costDrivenDualChannelAttempts];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countConnectedInterfaces(void *a1, const char *a2, ...)
{
  return _[a1 countConnectedInterfaces];
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countOfConnectedInterface(void *a1, const char *a2, ...)
{
  return _[a1 countOfConnectedInterface];
}

id objc_msgSend_countOfGrowthActionsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfGrowthActionsOnInterface:");
}

id objc_msgSend_countOpenConnections(void *a1, const char *a2, ...)
{
  return _[a1 countOpenConnections];
}

id objc_msgSend_countTopic_now_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTopic:now:");
}

id objc_msgSend_courier(void *a1, const char *a2, ...)
{
  return _[a1 courier];
}

id objc_msgSend_courierByUser(void *a1, const char *a2, ...)
{
  return _[a1 courierByUser];
}

id objc_msgSend_courierConnection(void *a1, const char *a2, ...)
{
  return _[a1 courierConnection];
}

id objc_msgSend_courierConnection_aboutToWriteDataOnConnectedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:aboutToWriteDataOnConnectedInterface:");
}

id objc_msgSend_courierConnection_connectionEstablishTimerFiredOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:connectionEstablishTimerFiredOnInterface:");
}

id objc_msgSend_courierConnection_connectionManager_handleEvent_context_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:connectionManager:handleEvent:context:onInterface:");
}

id objc_msgSend_courierConnection_dataReceived_onInterface_withGeneration_isWakingMessage_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:dataReceived:onInterface:withGeneration:isWakingMessage:");
}

id objc_msgSend_courierConnection_disconnectStreamOnInterface_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:disconnectStreamOnInterface:withReason:");
}

id objc_msgSend_courierConnection_errorOccured_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:errorOccured:onInterface:");
}

id objc_msgSend_courierConnection_hasDeterminedServerHostname_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:hasDeterminedServerHostname:onInterface:");
}

id objc_msgSend_courierConnection_keepAliveResponseTimerFiredOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:keepAliveResponseTimerFiredOnInterface:");
}

id objc_msgSend_courierConnection_parserErrorMessage_OnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnection:parserErrorMessage:OnInterface:");
}

id objc_msgSend_courierConnectionHasConnected_context_enabledPackedFormat_secureHandshakeEnabled_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "courierConnectionHasConnected:context:enabledPackedFormat:secureHandshakeEnabled:onInterface:");
}

id objc_msgSend_courierConnectionManager_openedNewProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionManager:openedNewProtocolConnection:");
}

id objc_msgSend_courierConnectionManager_receivedServerBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionManager:receivedServerBag:");
}

id objc_msgSend_courierConnectionManagerClientsCanConnectRightNow(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsCanConnectRightNow];
}

id objc_msgSend_courierConnectionManagerClientsHaveEagerMessages(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsHaveEagerMessages];
}

id objc_msgSend_courierConnectionManagerClientsHaveInteractivePushDuringSleepEnabled(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsHaveInteractivePushDuringSleepEnabled];
}

id objc_msgSend_courierConnectionManagerClientsWantsCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsWantsCriticalReliability];
}

id objc_msgSend_courierConnectionManagerClientsWillBeAbleToConnect(void *a1, const char *a2, ...)
{
  return _[a1 courierConnectionManagerClientsWillBeAbleToConnect];
}

id objc_msgSend_courierConnectionStatusDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierConnectionStatusDidChange:");
}

id objc_msgSend_courierFilterChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierFilterChanged:");
}

id objc_msgSend_courierForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierForEnvironment:");
}

id objc_msgSend_courierForEnvironmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierForEnvironmentName:");
}

id objc_msgSend_courierHasNoConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierHasNoConnections:");
}

id objc_msgSend_courierIdentityBecameAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierIdentityBecameAvailable:");
}

id objc_msgSend_courierIsIdle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierIsIdle:");
}

id objc_msgSend_courierOversized(void *a1, const char *a2, ...)
{
  return _[a1 courierOversized];
}

id objc_msgSend_courierShouldRollBAAEnvironmentTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courierShouldRollBAAEnvironmentTokens:");
}

id objc_msgSend_courierUser(void *a1, const char *a2, ...)
{
  return _[a1 courierUser];
}

id objc_msgSend_create(void *a1, const char *a2, ...)
{
  return _[a1 create];
}

id objc_msgSend_createCourierForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCourierForEnvironment:");
}

id objc_msgSend_createPayloadForSubscriptionChannels_unsubscriptionChannels_subscriptionType_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPayloadForSubscriptionChannels:unsubscriptionChannels:subscriptionType:");
}

id objc_msgSend_createTopicHashForTopic_user_shouldSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTopicHashForTopic:user:shouldSalt:");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_ctClient(void *a1, const char *a2, ...)
{
  return _[a1 ctClient];
}

id objc_msgSend_currentCost(void *a1, const char *a2, ...)
{
  return _[a1 currentCost];
}

id objc_msgSend_currentDelay(void *a1, const char *a2, ...)
{
  return _[a1 currentDelay];
}

id objc_msgSend_currentFilter(void *a1, const char *a2, ...)
{
  return _[a1 currentFilter];
}

id objc_msgSend_currentFilterForTopicState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentFilterForTopicState:");
}

id objc_msgSend_currentGrowthStageOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentGrowthStageOnInterface:");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 currentKeepAliveInterval];
}

id objc_msgSend_currentKeepAliveIntervalOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentKeepAliveIntervalOnInterface:");
}

id objc_msgSend_currentKeepAliveState(void *a1, const char *a2, ...)
{
  return _[a1 currentKeepAliveState];
}

id objc_msgSend_currentKeepAliveStateOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentKeepAliveStateOnInterface:");
}

id objc_msgSend_currentLinkQualityString(void *a1, const char *a2, ...)
{
  return _[a1 currentLinkQualityString];
}

id objc_msgSend_currentMessageID(void *a1, const char *a2, ...)
{
  return _[a1 currentMessageID];
}

id objc_msgSend_currentRAT(void *a1, const char *a2, ...)
{
  return _[a1 currentRAT];
}

id objc_msgSend_currentRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 currentRunLoop];
}

id objc_msgSend_currentSSID(void *a1, const char *a2, ...)
{
  return _[a1 currentSSID];
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _[a1 currentThread];
}

id objc_msgSend_daemon(void *a1, const char *a2, ...)
{
  return _[a1 daemon];
}

id objc_msgSend_dailySuspendToggleRateLimiter(void *a1, const char *a2, ...)
{
  return _[a1 dailySuspendToggleRateLimiter];
}

id objc_msgSend_darkWake(void *a1, const char *a2, ...)
{
  return _[a1 darkWake];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataListeners(void *a1, const char *a2, ...)
{
  return _[a1 dataListeners];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateStringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringFromDate:");
}

id objc_msgSend_dateStringFromInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringFromInterval:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_debugHostname(void *a1, const char *a2, ...)
{
  return _[a1 debugHostname];
}

id objc_msgSend_debugOverrides(void *a1, const char *a2, ...)
{
  return _[a1 debugOverrides];
}

id objc_msgSend_decayTimerFired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decayTimerFired:");
}

id objc_msgSend_decodeMessage_parser_parameters_isInvalid_lengthParsed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeMessage:parser:parameters:isInvalid:lengthParsed:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decoder(void *a1, const char *a2, ...)
{
  return _[a1 decoder];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultUser(void *a1, const char *a2, ...)
{
  return _[a1 defaultUser];
}

id objc_msgSend_defaultUserPersistentTopics(void *a1, const char *a2, ...)
{
  return _[a1 defaultUserPersistentTopics];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _[a1 defaultWorkspace];
}

id objc_msgSend_delayedReconnectTLSInterval(void *a1, const char *a2, ...)
{
  return _[a1 delayedReconnectTLSInterval];
}

id objc_msgSend_delayedReconnectTLSIntervalTrigger(void *a1, const char *a2, ...)
{
  return _[a1 delayedReconnectTLSIntervalTrigger];
}

id objc_msgSend_delayedResponseInterval(void *a1, const char *a2, ...)
{
  return _[a1 delayedResponseInterval];
}

id objc_msgSend_delayedSuspendKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 delayedSuspendKeepAliveInterval];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteAppSpecificTokensWithDomain_forTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppSpecificTokensWithDomain:forTopic:user:");
}

id objc_msgSend_deleteAppSpecificTokensWithDomain_tokenServiceSuffix_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppSpecificTokensWithDomain:tokenServiceSuffix:user:");
}

id objc_msgSend_deleteAppSpecificTokensWithRefArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppSpecificTokensWithRefArray:");
}

id objc_msgSend_deleteAppTokensForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAppTokensForUser:");
}

id objc_msgSend_deleteChannelID_forTopic_environment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteChannelID:forTopic:environment:userName:");
}

id objc_msgSend_deleteClientIdentityRequestingReplacement(void *a1, const char *a2, ...)
{
  return _[a1 deleteClientIdentityRequestingReplacement];
}

id objc_msgSend_deleteIncomingMessageWithGUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteIncomingMessageWithGUID:");
}

id objc_msgSend_deleteLowPriorityIncomingMessagesForTopic_environment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLowPriorityIncomingMessagesForTopic:environment:pushTokens:");
}

id objc_msgSend_deleteStaleIncomingLowPriorityMessagesForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStaleIncomingLowPriorityMessagesForEnvironment:");
}

id objc_msgSend_dependenciesForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependenciesForUser:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_deserializedPersistedData_forInfo_outPersistedInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializedPersistedData:forInfo:outPersistedInfo:");
}

id objc_msgSend_deserializedPersistedData_withType_outPersistedInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializedPersistedData:withType:outPersistedInfo:");
}

id objc_msgSend_desiredFilter(void *a1, const char *a2, ...)
{
  return _[a1 desiredFilter];
}

id objc_msgSend_deviceNotFoundMessageQueue(void *a1, const char *a2, ...)
{
  return _[a1 deviceNotFoundMessageQueue];
}

id objc_msgSend_deviceNotFoundTimer(void *a1, const char *a2, ...)
{
  return _[a1 deviceNotFoundTimer];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 dictionaryRepresentation];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didConnectOrDisconnectTokenForCourier_onProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didConnectOrDisconnectTokenForCourier:onProtocolConnection:");
}

id objc_msgSend_didPushCauseWake(void *a1, const char *a2, ...)
{
  return _[a1 didPushCauseWake];
}

id objc_msgSend_didPushCauseWakeOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPushCauseWakeOnInterface:");
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return _[a1 disable];
}

id objc_msgSend_disableCostDrivenDualChannelAttempts(void *a1, const char *a2, ...)
{
  return _[a1 disableCostDrivenDualChannelAttempts];
}

id objc_msgSend_disableDualModePiggybackTimer(void *a1, const char *a2, ...)
{
  return _[a1 disableDualModePiggybackTimer];
}

id objc_msgSend_disableFilterOptimization(void *a1, const char *a2, ...)
{
  return _[a1 disableFilterOptimization];
}

id objc_msgSend_disconnectAllStreamsWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectAllStreamsWithReason:");
}

id objc_msgSend_disconnectReason(void *a1, const char *a2, ...)
{
  return _[a1 disconnectReason];
}

id objc_msgSend_disconnectStreamForInterface_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectStreamForInterface:withReason:");
}

id objc_msgSend_disconnectWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectWithReason:");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _[a1 distantFuture];
}

id objc_msgSend_dnsRequest(void *a1, const char *a2, ...)
{
  return _[a1 dnsRequest];
}

id objc_msgSend_dnsResolutionTimeMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dnsResolutionTimeMillisecondsOnInterface:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_dualChannelStateFrom_isPiggyBacking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dualChannelStateFrom:isPiggyBacking:");
}

id objc_msgSend_eagernessTimeoutTime(void *a1, const char *a2, ...)
{
  return _[a1 eagernessTimeoutTime];
}

id objc_msgSend_edgeDNS(void *a1, const char *a2, ...)
{
  return _[a1 edgeDNS];
}

id objc_msgSend_enableCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 enableCriticalReliability];
}

id objc_msgSend_enableStatusChangeNotifications(void *a1, const char *a2, ...)
{
  return _[a1 enableStatusChangeNotifications];
}

id objc_msgSend_enableWakeOnWiFi_forDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWakeOnWiFi:forDelegate:");
}

id objc_msgSend_enableWiFiAutoAssociation_forDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWiFiAutoAssociation:forDelegate:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _[a1 enabled];
}

id objc_msgSend_enabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 enabledTopics];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encoder(void *a1, const char *a2, ...)
{
  return _[a1 encoder];
}

id objc_msgSend_endTransaction(void *a1, const char *a2, ...)
{
  return _[a1 endTransaction];
}

id objc_msgSend_enqueueOutgoingMessage_forOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueOutgoingMessage:forOriginator:");
}

id objc_msgSend_enqueueSendBlock_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueSendBlock:completionBlock:");
}

id objc_msgSend_entitledTopicsFromSet_unentitledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entitledTopicsFromSet:unentitledTopics:");
}

id objc_msgSend_enumerateAllProtocolConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateAllProtocolConnections:");
}

id objc_msgSend_enumerateConnectedProtocolConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConnectedProtocolConnections:");
}

id objc_msgSend_enumerateConnectedProtocolConnectionsOfType_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateConnectedProtocolConnectionsOfType:block:");
}

id objc_msgSend_enumerateDataRecipient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateDataRecipient:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateStateListeners_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStateListeners:");
}

id objc_msgSend_enumerateTokensUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateTokensUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_environmentForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentForName:");
}

id objc_msgSend_environmentForNamedPort_userPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentForNamedPort:userPreferences:");
}

id objc_msgSend_environmentName(void *a1, const char *a2, ...)
{
  return _[a1 environmentName];
}

id objc_msgSend_environmentType(void *a1, const char *a2, ...)
{
  return _[a1 environmentType];
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralSessionConfiguration];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorMessage(void *a1, const char *a2, ...)
{
  return _[a1 errorMessage];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_everHadAckOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "everHadAckOn:");
}

id objc_msgSend_everSentFilterOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "everSentFilterOn:");
}

id objc_msgSend_evictionDate(void *a1, const char *a2, ...)
{
  return _[a1 evictionDate];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_expectsResponseForFilterMessageOnProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectsResponseForFilterMessageOnProtocolConnection:");
}

id objc_msgSend_expectsResponseForFilterMessageOnProtocolConnection_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectsResponseForFilterMessageOnProtocolConnection:forClient:");
}

id objc_msgSend_expensiveConditionsBackOffInterval(void *a1, const char *a2, ...)
{
  return _[a1 expensiveConditionsBackOffInterval];
}

id objc_msgSend_expirationDate(void *a1, const char *a2, ...)
{
  return _[a1 expirationDate];
}

id objc_msgSend_expirationTime(void *a1, const char *a2, ...)
{
  return _[a1 expirationTime];
}

id objc_msgSend_fetchClientIdentityForcingNewCert_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchClientIdentityForcingNewCert:withCompletion:");
}

id objc_msgSend_fetchHostVMCertAndSignNonce_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHostVMCertAndSignNonce:error:");
}

id objc_msgSend_fetchUserCourierIdentityWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserCourierIdentityWithCompletion:");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_filter(void *a1, const char *a2, ...)
{
  return _[a1 filter];
}

id objc_msgSend_filterChosenByPolicyForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterChosenByPolicyForTopic:");
}

id objc_msgSend_filterMessageTimeout(void *a1, const char *a2, ...)
{
  return _[a1 filterMessageTimeout];
}

id objc_msgSend_filterMode(void *a1, const char *a2, ...)
{
  return _[a1 filterMode];
}

id objc_msgSend_filterModeByInterfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 filterModeByInterfaceIdentifier];
}

id objc_msgSend_filterModeOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterModeOnInterface:");
}

id objc_msgSend_filterOptimizationEnabled(void *a1, const char *a2, ...)
{
  return _[a1 filterOptimizationEnabled];
}

id objc_msgSend_filterSent_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterSent:connectionType:");
}

id objc_msgSend_filterVersionStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 filterVersionStateMachine];
}

id objc_msgSend_filtersWillPotentiallyBeChangedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filtersWillPotentiallyBeChangedBy:");
}

id objc_msgSend_filtersWillPotentiallyBeChangedByPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filtersWillPotentiallyBeChangedByPolicy:");
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return _[a1 finishTasksAndInvalidate];
}

id objc_msgSend_first(void *a1, const char *a2, ...)
{
  return _[a1 first];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_flag(void *a1, const char *a2, ...)
{
  return _[a1 flag];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_flushUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushUser:");
}

id objc_msgSend_forceAdjustConnections(void *a1, const char *a2, ...)
{
  return _[a1 forceAdjustConnections];
}

id objc_msgSend_forceBAAIdentityRefreshWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceBAAIdentityRefreshWithCompletion:");
}

id objc_msgSend_forceTimerFire(void *a1, const char *a2, ...)
{
  return _[a1 forceTimerFire];
}

id objc_msgSend_forcedInvalidPresences(void *a1, const char *a2, ...)
{
  return _[a1 forcedInvalidPresences];
}

id objc_msgSend_fullWake(void *a1, const char *a2, ...)
{
  return _[a1 fullWake];
}

id objc_msgSend_generateCertWithServerTime_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateCertWithServerTime:completionBlock:");
}

id objc_msgSend_generateCerts_nonce_sig_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateCerts:nonce:sig:time:");
}

id objc_msgSend_generation(void *a1, const char *a2, ...)
{
  return _[a1 generation];
}

id objc_msgSend_generationMatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationMatches:");
}

id objc_msgSend_generationMatches_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationMatches:forInterface:");
}

id objc_msgSend_getAddressListForHostname_now_addressFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAddressListForHostname:now:addressFamily:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 getCFRunLoop];
}

id objc_msgSend_getClientIdentityForcingRefresh_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientIdentityForcingRefresh:withCompletion:");
}

id objc_msgSend_getConnectionServerForEnvironment_connectionPortName_processName_enableDarkWake_peerConnection_isNewConnection_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "getConnectionServerForEnvironment:connectionPortName:processName:enableDarkWake:peerConnection:isNewConnection:");
}

id objc_msgSend_getConnectionTypeFromProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnectionTypeFromProtocolConnection:");
}

id objc_msgSend_getNextTaskMessageId(void *a1, const char *a2, ...)
{
  return _[a1 getNextTaskMessageId];
}

id objc_msgSend_getTaskWithMessageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTaskWithMessageId:");
}

id objc_msgSend_getTaskWithTaskId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTaskWithTaskId:");
}

id objc_msgSend_gotNewToken(void *a1, const char *a2, ...)
{
  return _[a1 gotNewToken];
}

id objc_msgSend_group(void *a1, const char *a2, ...)
{
  return _[a1 group];
}

id objc_msgSend_guid(void *a1, const char *a2, ...)
{
  return _[a1 guid];
}

id objc_msgSend_handleAckIncomingMessageWithGuid_topic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAckIncomingMessageWithGuid:topic:tracingUUID:");
}

id objc_msgSend_handleAcknowledgmentForOutgoingMessageWithResult_ackTimestamp_linkQuality_connectionType_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handleAcknowledgmentForOutgoingMessageWithResult:ackTimestamp:linkQuality:connectionType:onInterface:");
}

id objc_msgSend_handleAppTokenGenerateResponse_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAppTokenGenerateResponse:error:");
}

id objc_msgSend_handleCancelOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCancelOutgoingMessageWithID:");
}

id objc_msgSend_handleChannelSubscriptionFailures_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleChannelSubscriptionFailures:forTopic:");
}

id objc_msgSend_handleConnectionClosedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionClosedOnInterface:");
}

id objc_msgSend_handleConnectionFailureOnInterface_forceDelayedReconnect_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionFailureOnInterface:forceDelayedReconnect:withReason:");
}

id objc_msgSend_handleConnectionOpened(void *a1, const char *a2, ...)
{
  return _[a1 handleConnectionOpened];
}

id objc_msgSend_handleConnectionOpenedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionOpenedOnInterface:");
}

id objc_msgSend_handleConnectionStatusChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionStatusChanged:");
}

id objc_msgSend_handleCurrentTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCurrentTokenForInfo:");
}

id objc_msgSend_handleCurrentURLTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCurrentURLTokenForInfo:");
}

id objc_msgSend_handleErrorSendingOutgoingMessage_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleErrorSendingOutgoingMessage:error:");
}

id objc_msgSend_handleExpiredNonceWithServerTime_shouldRollToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleExpiredNonceWithServerTime:shouldRollToken:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFakeMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFakeMessage:");
}

id objc_msgSend_handleIgnoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleIgnoredTopics:");
}

id objc_msgSend_handleIncomingMessageReceiptWithTopic_tracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleIncomingMessageReceiptWithTopic:tracingUUID:");
}

id objc_msgSend_handleInvalidatePerAppTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidatePerAppTokenForInfo:");
}

id objc_msgSend_handleInvalidatePerAppTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidatePerAppTokenForTopic:identifier:");
}

id objc_msgSend_handleInvalidateURLTokenForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidateURLTokenForTopic:");
}

id objc_msgSend_handleNotificationAcknowledged(void *a1, const char *a2, ...)
{
  return _[a1 handleNotificationAcknowledged];
}

id objc_msgSend_handlePublicTokenDeliveryReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePublicTokenDeliveryReply:");
}

id objc_msgSend_handleReceivedMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedMessage:");
}

id objc_msgSend_handleReceivedToken_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedToken:forInfo:");
}

id objc_msgSend_handleReceivedTokenError_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReceivedTokenError:forInfo:");
}

id objc_msgSend_handleRequestPerAppTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRequestPerAppTokenForTopic:identifier:");
}

id objc_msgSend_handleRequestTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRequestTokenForInfo:");
}

id objc_msgSend_handleRequestURLTokenForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRequestURLTokenForInfo:");
}

id objc_msgSend_handleResponseForPendingItem_error_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponseForPendingItem:error:onInterface:");
}

id objc_msgSend_handleResult_forSendingOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResult:forSendingOutgoingMessage:");
}

id objc_msgSend_handleResult_forSendingOutgoingMessageWithID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResult:forSendingOutgoingMessageWithID:");
}

id objc_msgSend_handleResult_forSendingOutgoingMessageWithID_sendRTT_ackTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResult:forSendingOutgoingMessageWithID:sendRTT:ackTimestamp:");
}

id objc_msgSend_handleSendOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSendOutgoingMessage:");
}

id objc_msgSend_handleSentOutgoingMessage_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSentOutgoingMessage:onInterface:");
}

id objc_msgSend_handleState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleState:error:");
}

id objc_msgSend_handleSubscribeToChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleSubscribeToChannels:forTopic:");
}

id objc_msgSend_handleTaskControlResponseMessage_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTaskControlResponseMessage:message:");
}

id objc_msgSend_handleTaskNotificationMessage_message_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTaskNotificationMessage:message:");
}

id objc_msgSend_handleUnsubscribeFromChannels_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnsubscribeFromChannels:forTopic:");
}

id objc_msgSend_handlingFailure(void *a1, const char *a2, ...)
{
  return _[a1 handlingFailure];
}

id objc_msgSend_hardwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 hardwareVersion];
}

id objc_msgSend_hasActiveConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasActiveConnection];
}

id objc_msgSend_hasConnectedInterface(void *a1, const char *a2, ...)
{
  return _[a1 hasConnectedInterface];
}

id objc_msgSend_hasConnectedInterfaceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnectedInterfaceForIdentifier:");
}

id objc_msgSend_hasConnectedInterfaceOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnectedInterfaceOfType:");
}

id objc_msgSend_hasConnectionEstablishTimer(void *a1, const char *a2, ...)
{
  return _[a1 hasConnectionEstablishTimer];
}

id objc_msgSend_hasConnectionEstablishTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnectionEstablishTimerOnInterface:");
}

id objc_msgSend_hasEagerMessages(void *a1, const char *a2, ...)
{
  return _[a1 hasEagerMessages];
}

id objc_msgSend_hasEnabledTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEnabledTopicHash:");
}

id objc_msgSend_hasError(void *a1, const char *a2, ...)
{
  return _[a1 hasError];
}

id objc_msgSend_hasIdentity(void *a1, const char *a2, ...)
{
  return _[a1 hasIdentity];
}

id objc_msgSend_hasIgnoredTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasIgnoredTopicHash:");
}

id objc_msgSend_hasIsLast(void *a1, const char *a2, ...)
{
  return _[a1 hasIsLast];
}

id objc_msgSend_hasKeepAliveResponseTimerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKeepAliveResponseTimerOnInterface:");
}

id objc_msgSend_hasListeningTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasListeningTopic:");
}

id objc_msgSend_hasListeningTopics(void *a1, const char *a2, ...)
{
  return _[a1 hasListeningTopics];
}

id objc_msgSend_hasMissingTokens(void *a1, const char *a2, ...)
{
  return _[a1 hasMissingTokens];
}

id objc_msgSend_hasNonWakingTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNonWakingTopicHash:");
}

id objc_msgSend_hasOpenConnection(void *a1, const char *a2, ...)
{
  return _[a1 hasOpenConnection];
}

id objc_msgSend_hasOpenConnectionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOpenConnectionOnInterface:");
}

id objc_msgSend_hasOpportunisticTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOpportunisticTopicHash:");
}

id objc_msgSend_hasOutOfDateFilterOnProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOutOfDateFilterOnProtocolConnection:");
}

id objc_msgSend_hasPausedTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPausedTopicHash:");
}

id objc_msgSend_hasPausedTopics(void *a1, const char *a2, ...)
{
  return _[a1 hasPausedTopics];
}

id objc_msgSend_hasPayload_forTopic_tokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPayload:forTopic:tokens:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasProtocolConnectionInterfaceOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProtocolConnectionInterfaceOfType:");
}

id objc_msgSend_hasReasonToConnect(void *a1, const char *a2, ...)
{
  return _[a1 hasReasonToConnect];
}

id objc_msgSend_hasRecentlyRemovedTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecentlyRemovedTopicHash:");
}

id objc_msgSend_hasSendingTopics(void *a1, const char *a2, ...)
{
  return _[a1 hasSendingTopics];
}

id objc_msgSend_hasSpaceAvailable(void *a1, const char *a2, ...)
{
  return _[a1 hasSpaceAvailable];
}

id objc_msgSend_hasStaleStateOn_comparedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStaleStateOn:comparedTo:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTimedOut(void *a1, const char *a2, ...)
{
  return _[a1 hasTimedOut];
}

id objc_msgSend_hasTopicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTopicHash:");
}

id objc_msgSend_hasTopicHash_includeRecentlyRemoved_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTopicHash:includeRecentlyRemoved:");
}

id objc_msgSend_hasUltraConstrainedPermissionForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUltraConstrainedPermissionForTopic:");
}

id objc_msgSend_hasUnAckedVersionOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnAckedVersionOn:");
}

id objc_msgSend_hasUnderlyingIdentityChanged(void *a1, const char *a2, ...)
{
  return _[a1 hasUnderlyingIdentityChanged];
}

id objc_msgSend_hasWWANStatusIndicator(void *a1, const char *a2, ...)
{
  return _[a1 hasWWANStatusIndicator];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashTableWithOptions:");
}

id objc_msgSend_hashesToEnabledTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToEnabledTopics];
}

id objc_msgSend_hashesToIgnoredTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToIgnoredTopics];
}

id objc_msgSend_hashesToNonWakingTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToNonWakingTopics];
}

id objc_msgSend_hashesToOpportunisticTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToOpportunisticTopics];
}

id objc_msgSend_hashesToPausedTopics(void *a1, const char *a2, ...)
{
  return _[a1 hashesToPausedTopics];
}

id objc_msgSend_helper(void *a1, const char *a2, ...)
{
  return _[a1 helper];
}

id objc_msgSend_highQualityThresholdConnectedTime(void *a1, const char *a2, ...)
{
  return _[a1 highQualityThresholdConnectedTime];
}

id objc_msgSend_hold(void *a1, const char *a2, ...)
{
  return _[a1 hold];
}

id objc_msgSend_holdPowerAssertionUntilStreamQuiesces(void *a1, const char *a2, ...)
{
  return _[a1 holdPowerAssertionUntilStreamQuiesces];
}

id objc_msgSend_holdPowerAssertionUntilStreamsQuiesce(void *a1, const char *a2, ...)
{
  return _[a1 holdPowerAssertionUntilStreamsQuiesce];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_hostname(void *a1, const char *a2, ...)
{
  return _[a1 hostname];
}

id objc_msgSend_hourlySuspendToggleRateLimiter(void *a1, const char *a2, ...)
{
  return _[a1 hourlySuspendToggleRateLimiter];
}

id objc_msgSend_hwVersion(void *a1, const char *a2, ...)
{
  return _[a1 hwVersion];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierToSalt(void *a1, const char *a2, ...)
{
  return _[a1 identifierToSalt];
}

id objc_msgSend_identifiersToSaltsSystem(void *a1, const char *a2, ...)
{
  return _[a1 identifiersToSaltsSystem];
}

id objc_msgSend_identifiersToSaltsUser(void *a1, const char *a2, ...)
{
  return _[a1 identifiersToSaltsUser];
}

id objc_msgSend_identityAvailabilityDidChangeBlock(void *a1, const char *a2, ...)
{
  return _[a1 identityAvailabilityDidChangeBlock];
}

id objc_msgSend_ifname(void *a1, const char *a2, ...)
{
  return _[a1 ifname];
}

id objc_msgSend_ignoredTopics(void *a1, const char *a2, ...)
{
  return _[a1 ignoredTopics];
}

id objc_msgSend_inDarkWake(void *a1, const char *a2, ...)
{
  return _[a1 inDarkWake];
}

id objc_msgSend_inFullWake(void *a1, const char *a2, ...)
{
  return _[a1 inFullWake];
}

id objc_msgSend_inTransaction(void *a1, const char *a2, ...)
{
  return _[a1 inTransaction];
}

id objc_msgSend_incomingCounts(void *a1, const char *a2, ...)
{
  return _[a1 incomingCounts];
}

id objc_msgSend_incomingCountsByTopic(void *a1, const char *a2, ...)
{
  return _[a1 incomingCountsByTopic];
}

id objc_msgSend_incomingCountsForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingCountsForTopic:");
}

id objc_msgSend_incomingHighPriorityMessagesForEnvironment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingHighPriorityMessagesForEnvironment:pushTokens:");
}

id objc_msgSend_incomingMessagesForTopic_priority_environment_pushTokens_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingMessagesForTopic:priority:environment:pushTokens:");
}

id objc_msgSend_incomingPresenceWithCertificate_nonce_signature_token_hwVersion_swVersion_swBuild_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingPresenceWithCertificate:nonce:signature:token:hwVersion:swVersion:swBuild:");
}

id objc_msgSend_incomingPresenceWithGuid_token_hwVersion_swVersion_swBuild_certificate_nonce_signature_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingPresenceWithGuid:token:hwVersion:swVersion:swBuild:certificate:nonce:signature:");
}

id objc_msgSend_increaseLengthBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "increaseLengthBy:");
}

id objc_msgSend_incrementRedirectCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementRedirectCount];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initResponseForHostname_ipv4Address_ipv6Address_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initResponseForHostname:ipv4Address:ipv6Address:");
}

id objc_msgSend_initShouldDowngradeWhenLocked_systemMonitor_ultraConstrainedProvider_withDelegate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initShouldDowngradeWhenLocked:systemMonitor:ultraConstrainedProvider:withDelegate:");
}

id objc_msgSend_initUnextendedAppTokenWithTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUnextendedAppTokenWithTopic:identifier:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChange_triggeringTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChange:triggeringTopic:");
}

id objc_msgSend_initWithChannelID_channelTopic_environment_tokenName_checkpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChannelID:channelTopic:environment:tokenName:checkpoint:");
}

id objc_msgSend_initWithCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommand:");
}

id objc_msgSend_initWithConnection_queue_apsDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnection:queue:apsDaemon:");
}

id objc_msgSend_initWithConnectionClass_interfaceIdentifier_guidancePriority_delegate_serviceIdentifier_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionClass:interfaceIdentifier:guidancePriority:delegate:serviceIdentifier:");
}

id objc_msgSend_initWithDNSTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDNSTask:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDecoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDecoder:");
}

id objc_msgSend_initWithDelegate_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:environment:");
}

id objc_msgSend_initWithDelegate_ultraConstrainedProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:ultraConstrainedProvider:");
}

id objc_msgSend_initWithDelegate_user_userPreferences_enableDarkWake_environmentName_connectionPortName_processName_connection_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDelegate:user:userPreferences:enableDarkWake:environmentName:connectionPortName:processName:connection:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithEncoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEncoder:");
}

id objc_msgSend_initWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:");
}

id objc_msgSend_initWithEnvironment_allowInMemoryCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:allowInMemoryCache:");
}

id objc_msgSend_initWithEnvironment_connectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:connectionType:");
}

id objc_msgSend_initWithEnvironment_courierConnection_carrierBundleHelper_networkMonitor_connectionRetryManager_delegate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithEnvironment:courierConnection:carrierBundleHelper:networkMonitor:connectionRetryManager:delegate:");
}

id objc_msgSend_initWithEnvironment_courierUser_userPreferences_clientIdentityProvider_userAppIDManager_systemTokenStorage_delegate_withConnectionEstablisher_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithEnvironment:courierUser:userPreferences:clientIdentityProvider:userAppIDManager:systemTokenStorage:de legate:withConnectionEstablisher:");
}

id objc_msgSend_initWithEnvironment_courierUser_userPreferences_clientIdentityProvider_userAppIDManager_systemTokenStorage_filterVersionStateMachine_debugOverrides_delegate_withConnectionEstablisher_tokenStore_tokenRequestQueue_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithEnvironment:courierUser:userPreferences:clientIdentityProvider:userAppIDManager:systemTokenStorage:fi lterVersionStateMachine:debugOverrides:delegate:withConnectionEstablisher:tokenStore:tokenRequestQueue:");
}

id objc_msgSend_initWithEnvironment_defaultUser_userDependencies_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:defaultUser:userDependencies:delegate:");
}

id objc_msgSend_initWithEnvironment_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:delegate:");
}

id objc_msgSend_initWithEnvironment_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:guid:");
}

id objc_msgSend_initWithEnvironment_multiUserMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:multiUserMode:");
}

id objc_msgSend_initWithEnvironment_topicHasher_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:topicHasher:user:");
}

id objc_msgSend_initWithEnvironment_topicHasher_user_userPreferences_ultraConstrainedProvider_delegate_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:topicHasher:user:userPreferences:ultraConstrainedProvider:delegate:");
}

id objc_msgSend_initWithFilter_darkWakeEnabled_pushWakeEnabled_criticalWakeEnabled_ultraConstrainedEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithFilter:darkWakeEnabled:pushWakeEnabled:criticalWakeEnabled:ultraConstrainedEnabled:");
}

id objc_msgSend_initWithFireDate_interval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireDate:interval:target:selector:userInfo:repeats:");
}

id objc_msgSend_initWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFirst:second:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHostname:");
}

id objc_msgSend_initWithHourlyCostThreshold_costMaximum_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHourlyCostThreshold:costMaximum:identifier:");
}

id objc_msgSend_initWithIPAddress_addressFamily_timeToLive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIPAddress:addressFamily:timeToLive:");
}

id objc_msgSend_initWithInitialVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInitialVersion:");
}

id objc_msgSend_initWithIsMultiUserMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsMultiUserMode:");
}

id objc_msgSend_initWithIsMultiUserMode_loggedInUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIsMultiUserMode:loggedInUser:");
}

id objc_msgSend_initWithLimit_timeLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLimit:timeLimit:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMaxTableSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMaxTableSize:");
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_diskPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMemoryCapacity:diskCapacity:diskPath:");
}

id objc_msgSend_initWithMetadata_messageID_userName_token_subscriptionType_connectionType_retryCount_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMetadata:messageID:userName:token:subscriptionType:connectionType:retryCount:");
}

id objc_msgSend_initWithMultiUserMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMultiUserMode:");
}

id objc_msgSend_initWithName_category_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:category:");
}

id objc_msgSend_initWithName_category_holdDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:category:holdDuration:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_apsDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:apsDaemon:");
}

id objc_msgSend_initWithQueue_ttlInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:ttlInSeconds:");
}

id objc_msgSend_initWithSendBlock_completionBlock_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSendBlock:completionBlock:timeout:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithSubscriptionChannels_unsubscriptionChannels_messageID_userName_token_subscriptionType_connectionType_retryCount_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithSubscriptionChannels:unsubscriptionChannels:messageID:userName:token:subscriptionType:connectionType:retryCount:");
}

id objc_msgSend_initWithTTLInSeconds_state_withTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTTLInSeconds:state:withTopic:");
}

id objc_msgSend_initWithTimeInterval_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:");
}

id objc_msgSend_initWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceNow:");
}

id objc_msgSend_initWithToken_timestamp_payloadHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithToken:timestamp:payloadHash:");
}

id objc_msgSend_initWithTokenURL_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokenURL:token:");
}

id objc_msgSend_initWithTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:");
}

id objc_msgSend_initWithTopic_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopic:userInfo:");
}

id objc_msgSend_initWithTopicName_connectionServer_attributes_topicHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopicName:connectionServer:attributes:topicHash:");
}

id objc_msgSend_initWithTopicSaltStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTopicSaltStore:");
}

id objc_msgSend_initWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedInteger:");
}

id objc_msgSend_initWithUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserID:");
}

id objc_msgSend_initWithUsingWWAN_keepAliveInterval_delayedResponseInterval_usingServerStats_keepAliveState_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithUsingWWAN:keepAliveInterval:delayedResponseInterval:usingServerStats:keepAliveState:");
}

id objc_msgSend_initWithUsingWWAN_keepAliveInterval_delayedResponseInterval_usingServerStats_keepAliveState_hwVersion_swVersion_swBuild_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithUsingWWAN:keepAliveInterval:delayedResponseInterval:usingServerStats:keepAliveState:hwVersion:swVersion:swBuild:");
}

id objc_msgSend_initWithUsingWWAN_keepAliveInterval_keepAliveState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUsingWWAN:keepAliveInterval:keepAliveState:");
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interface5GMode(void *a1, const char *a2, ...)
{
  return _[a1 interface5GMode];
}

id objc_msgSend_interfaceConstraint(void *a1, const char *a2, ...)
{
  return _[a1 interfaceConstraint];
}

id objc_msgSend_interfaceConstraintForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceConstraintForInterface:");
}

id objc_msgSend_interfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 interfaceIdentifier];
}

id objc_msgSend_interfaceMonitor(void *a1, const char *a2, ...)
{
  return _[a1 interfaceMonitor];
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return _[a1 interfaceName];
}

id objc_msgSend_interfaceNameForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceNameForInterface:");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateDeviceIdentity(void *a1, const char *a2, ...)
{
  return _[a1 invalidateDeviceIdentity];
}

id objc_msgSend_ipAddress(void *a1, const char *a2, ...)
{
  return _[a1 ipAddress];
}

id objc_msgSend_ipAddressFamily(void *a1, const char *a2, ...)
{
  return _[a1 ipAddressFamily];
}

id objc_msgSend_ipv4AtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ipv4AtIndex:");
}

id objc_msgSend_ipv4sCount(void *a1, const char *a2, ...)
{
  return _[a1 ipv4sCount];
}

id objc_msgSend_ipv6AtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ipv6AtIndex:");
}

id objc_msgSend_ipv6sCount(void *a1, const char *a2, ...)
{
  return _[a1 ipv6sCount];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAppSpecificTokenValidWithDomain_token_tokenServiceSuffix_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppSpecificTokenValidWithDomain:token:tokenServiceSuffix:user:error:");
}

id objc_msgSend_isAppSpecificTokenValidWithDomain_token_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppSpecificTokenValidWithDomain:token:user:error:");
}

id objc_msgSend_isAttemptingToReconnect(void *a1, const char *a2, ...)
{
  return _[a1 isAttemptingToReconnect];
}

id objc_msgSend_isBuildSupported(void *a1, const char *a2, ...)
{
  return _[a1 isBuildSupported];
}

id objc_msgSend_isCellularWatch(void *a1, const char *a2, ...)
{
  return _[a1 isCellularWatch];
}

id objc_msgSend_isCertificateValidated(void *a1, const char *a2, ...)
{
  return _[a1 isCertificateValidated];
}

id objc_msgSend_isClosed(void *a1, const char *a2, ...)
{
  return _[a1 isClosed];
}

id objc_msgSend_isConnectableRightNow(void *a1, const char *a2, ...)
{
  return _[a1 isConnectableRightNow];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isConnectedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectedOnInterface:");
}

id objc_msgSend_isConnectedOnUltraConstrainedInterface(void *a1, const char *a2, ...)
{
  return _[a1 isConnectedOnUltraConstrainedInterface];
}

id objc_msgSend_isConnectedToService(void *a1, const char *a2, ...)
{
  return _[a1 isConnectedToService];
}

id objc_msgSend_isConnectingOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectingOnInterface:");
}

id objc_msgSend_isCritical(void *a1, const char *a2, ...)
{
  return _[a1 isCritical];
}

id objc_msgSend_isCriticalWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isCriticalWakeEnabled];
}

id objc_msgSend_isDaemonUser(void *a1, const char *a2, ...)
{
  return _[a1 isDaemonUser];
}

id objc_msgSend_isDarkWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDarkWakeEnabled];
}

id objc_msgSend_isDefaultUser(void *a1, const char *a2, ...)
{
  return _[a1 isDefaultUser];
}

id objc_msgSend_isDualChannelAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isDualChannelAllowed];
}

id objc_msgSend_isEager(void *a1, const char *a2, ...)
{
  return _[a1 isEager];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpensiveToUseInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpensiveToUseInterface:");
}

id objc_msgSend_isGoingToSleep(void *a1, const char *a2, ...)
{
  return _[a1 isGoingToSleep];
}

id objc_msgSend_isGuestUser(void *a1, const char *a2, ...)
{
  return _[a1 isGuestUser];
}

id objc_msgSend_isIdentityAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isIdentityAvailable];
}

id objc_msgSend_isIdle(void *a1, const char *a2, ...)
{
  return _[a1 isIdle];
}

id objc_msgSend_isInteractivePushDuringSleepEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isInteractivePushDuringSleepEnabled];
}

id objc_msgSend_isInterfaceHistoricallyUsable(void *a1, const char *a2, ...)
{
  return _[a1 isInterfaceHistoricallyUsable];
}

id objc_msgSend_isInterfaceUsable(void *a1, const char *a2, ...)
{
  return _[a1 isInterfaceUsable];
}

id objc_msgSend_isInternetReachable(void *a1, const char *a2, ...)
{
  return _[a1 isInternetReachable];
}

id objc_msgSend_isInvalid(void *a1, const char *a2, ...)
{
  return _[a1 isInvalid];
}

id objc_msgSend_isKeepAliveProxyConfigured(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyConfigured];
}

id objc_msgSend_isKeepAliveProxyConfiguredOnAnyConnection(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyConfiguredOnAnyConnection];
}

id objc_msgSend_isKeepAliveProxyConfiguredOnAnyInterface(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyConfiguredOnAnyInterface];
}

id objc_msgSend_isKeepAliveProxyConfiguredOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeepAliveProxyConfiguredOnInterface:");
}

id objc_msgSend_isKeepAliveProxyFeatureEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isKeepAliveProxyFeatureEnabled];
}

id objc_msgSend_isLTEWithCDRX(void *a1, const char *a2, ...)
{
  return _[a1 isLTEWithCDRX];
}

id objc_msgSend_isLast(void *a1, const char *a2, ...)
{
  return _[a1 isLast];
}

id objc_msgSend_isLoadBalanced(void *a1, const char *a2, ...)
{
  return _[a1 isLoadBalanced];
}

id objc_msgSend_isLoggedInUser(void *a1, const char *a2, ...)
{
  return _[a1 isLoggedInUser];
}

id objc_msgSend_isLoggedOut(void *a1, const char *a2, ...)
{
  return _[a1 isLoggedOut];
}

id objc_msgSend_isMainThread(void *a1, const char *a2, ...)
{
  return _[a1 isMainThread];
}

id objc_msgSend_isMatchingTokenInKeychain_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMatchingTokenInKeychain:user:error:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return _[a1 isMultiUser];
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return _[a1 isNearby];
}

id objc_msgSend_isNetworkingPowerExpensiveToUse(void *a1, const char *a2, ...)
{
  return _[a1 isNetworkingPowerExpensiveToUse];
}

id objc_msgSend_isOutOfDateOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOutOfDateOn:");
}

id objc_msgSend_isPeerTrustedForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPeerTrustedForTrust:");
}

id objc_msgSend_isPiggybacking(void *a1, const char *a2, ...)
{
  return _[a1 isPiggybacking];
}

id objc_msgSend_isPoorLinkQuality(void *a1, const char *a2, ...)
{
  return _[a1 isPoorLinkQuality];
}

id objc_msgSend_isPoorLinkQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPoorLinkQuality:");
}

id objc_msgSend_isPowerEfficientToUse(void *a1, const char *a2, ...)
{
  return _[a1 isPowerEfficientToUse];
}

id objc_msgSend_isPreferredInterface(void *a1, const char *a2, ...)
{
  return _[a1 isPreferredInterface];
}

id objc_msgSend_isPublicTokenAcknowledged(void *a1, const char *a2, ...)
{
  return _[a1 isPublicTokenAcknowledged];
}

id objc_msgSend_isPushWakeEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isPushWakeEnabled];
}

id objc_msgSend_isRadioHot(void *a1, const char *a2, ...)
{
  return _[a1 isRadioHot];
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return _[a1 isRunning];
}

id objc_msgSend_isSimulator(void *a1, const char *a2, ...)
{
  return _[a1 isSimulator];
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return _[a1 isSuspended];
}

id objc_msgSend_isSuspendedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSuspendedOnInterface:");
}

id objc_msgSend_isSystemLocked(void *a1, const char *a2, ...)
{
  return _[a1 isSystemLocked];
}

id objc_msgSend_isTracingEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isTracingEnabled];
}

id objc_msgSend_isTrust_validWithPolicy_forPeer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTrust:validWithPolicy:forPeer:");
}

id objc_msgSend_isUltraConstrainedEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isUltraConstrainedEnabled];
}

id objc_msgSend_isUnderLimit(void *a1, const char *a2, ...)
{
  return _[a1 isUnderLimit];
}

id objc_msgSend_isUnset(void *a1, const char *a2, ...)
{
  return _[a1 isUnset];
}

id objc_msgSend_isWWANInterfaceSuspended(void *a1, const char *a2, ...)
{
  return _[a1 isWWANInterfaceSuspended];
}

id objc_msgSend_isWWANInterfaceUp(void *a1, const char *a2, ...)
{
  return _[a1 isWWANInterfaceUp];
}

id objc_msgSend_isWakeOnWiFiSupported(void *a1, const char *a2, ...)
{
  return _[a1 isWakeOnWiFiSupported];
}

id objc_msgSend_isWiFiAssociated(void *a1, const char *a2, ...)
{
  return _[a1 isWiFiAssociated];
}

id objc_msgSend_isWoWEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isWoWEnabled];
}

id objc_msgSend_itemState(void *a1, const char *a2, ...)
{
  return _[a1 itemState];
}

id objc_msgSend_keepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 keepAliveInterval];
}

id objc_msgSend_keepAliveIntervalForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepAliveIntervalForEnvironment:");
}

id objc_msgSend_keepAliveState(void *a1, const char *a2, ...)
{
  return _[a1 keepAliveState];
}

id objc_msgSend_keepAliveV2SupportedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keepAliveV2SupportedOnInterface:");
}

id objc_msgSend_keepAliveV2TimeDriftMaximum(void *a1, const char *a2, ...)
{
  return _[a1 keepAliveV2TimeDriftMaximum];
}

id objc_msgSend_keysSortedByValueUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysSortedByValueUsingComparator:");
}

id objc_msgSend_kickstartProxyConnection(void *a1, const char *a2, ...)
{
  return _[a1 kickstartProxyConnection];
}

id objc_msgSend_largeMessageSize(void *a1, const char *a2, ...)
{
  return _[a1 largeMessageSize];
}

id objc_msgSend_lastConnected(void *a1, const char *a2, ...)
{
  return _[a1 lastConnected];
}

id objc_msgSend_lastIPCachingPercentage(void *a1, const char *a2, ...)
{
  return _[a1 lastIPCachingPercentage];
}

id objc_msgSend_lastIPCachingTTLMinutes(void *a1, const char *a2, ...)
{
  return _[a1 lastIPCachingTTLMinutes];
}

id objc_msgSend_lastIPCachingTTLMinutesV2(void *a1, const char *a2, ...)
{
  return _[a1 lastIPCachingTTLMinutesV2];
}

id objc_msgSend_lastKeepAliveActionOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKeepAliveActionOnInterface:");
}

id objc_msgSend_lastMessageTime(void *a1, const char *a2, ...)
{
  return _[a1 lastMessageTime];
}

id objc_msgSend_lastMessageTopic(void *a1, const char *a2, ...)
{
  return _[a1 lastMessageTopic];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPresence(void *a1, const char *a2, ...)
{
  return _[a1 lastPresence];
}

id objc_msgSend_lastReversePushRTTMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastReversePushRTTMillisecondsOnInterface:");
}

id objc_msgSend_lastSystemWakeDate(void *a1, const char *a2, ...)
{
  return _[a1 lastSystemWakeDate];
}

id objc_msgSend_latestGeoRegion(void *a1, const char *a2, ...)
{
  return _[a1 latestGeoRegion];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lineWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineWithDescription:");
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return _[a1 linkQuality];
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedDevicesWithRelationship:");
}

id objc_msgSend_loadConfigurationForEnvironment_connectionType_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadConfigurationForEnvironment:connectionType:block:");
}

id objc_msgSend_loadIdentifiersToSaltsForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadIdentifiersToSaltsForUser:");
}

id objc_msgSend_loadOrCreateAppIdForEnvironmentName_topic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadOrCreateAppIdForEnvironmentName:topic:identifier:");
}

id objc_msgSend_loadSaltForIdentifier_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadSaltForIdentifier:user:");
}

id objc_msgSend_localAddress(void *a1, const char *a2, ...)
{
  return _[a1 localAddress];
}

id objc_msgSend_localPort(void *a1, const char *a2, ...)
{
  return _[a1 localPort];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_locallyDisabledFilterOptimization(void *a1, const char *a2, ...)
{
  return _[a1 locallyDisabledFilterOptimization];
}

id objc_msgSend_logFilterPolicyInformation(void *a1, const char *a2, ...)
{
  return _[a1 logFilterPolicyInformation];
}

id objc_msgSend_logStateWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logStateWithReason:");
}

id objc_msgSend_logString(void *a1, const char *a2, ...)
{
  return _[a1 logString];
}

id objc_msgSend_logout(void *a1, const char *a2, ...)
{
  return _[a1 logout];
}

id objc_msgSend_logoutUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logoutUser:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lookupChannelWithChannelID_andPushTopic_environment_userName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookupChannelWithChannelID:andPushTopic:environment:userName:");
}

id objc_msgSend_lowQualityThresholdConnectedTime(void *a1, const char *a2, ...)
{
  return _[a1 lowQualityThresholdConnectedTime];
}

id objc_msgSend_mainCourier(void *a1, const char *a2, ...)
{
  return _[a1 mainCourier];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_manuallyLoginUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manuallyLoginUser:");
}

id objc_msgSend_manuallySetupAndLoginUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manuallySetupAndLoginUser:");
}

id objc_msgSend_markInitiallyConnectedOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markInitiallyConnectedOnInterface:");
}

id objc_msgSend_markProtocolConnectionDisconnectedForActivityTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markProtocolConnectionDisconnectedForActivityTracking:");
}

id objc_msgSend_maxExpensiveConditionsConnectionAttempts(void *a1, const char *a2, ...)
{
  return _[a1 maxExpensiveConditionsConnectionAttempts];
}

id objc_msgSend_maxLargeMessageSize(void *a1, const char *a2, ...)
{
  return _[a1 maxLargeMessageSize];
}

id objc_msgSend_maxLargeMessageSizeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxLargeMessageSizeForInterface:");
}

id objc_msgSend_maxMessageSize(void *a1, const char *a2, ...)
{
  return _[a1 maxMessageSize];
}

id objc_msgSend_maxMessageSizeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxMessageSizeForInterface:");
}

id objc_msgSend_maxTableSize(void *a1, const char *a2, ...)
{
  return _[a1 maxTableSize];
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_messageID(void *a1, const char *a2, ...)
{
  return _[a1 messageID];
}

id objc_msgSend_messageId(void *a1, const char *a2, ...)
{
  return _[a1 messageId];
}

id objc_msgSend_messageSize(void *a1, const char *a2, ...)
{
  return _[a1 messageSize];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metricSubmissionBlock(void *a1, const char *a2, ...)
{
  return _[a1 metricSubmissionBlock];
}

id objc_msgSend_minPresenceSaltRotationInterval(void *a1, const char *a2, ...)
{
  return _[a1 minPresenceSaltRotationInterval];
}

id objc_msgSend_minimumIntervalFallbackEnabled(void *a1, const char *a2, ...)
{
  return _[a1 minimumIntervalFallbackEnabled];
}

id objc_msgSend_minimumKeepAliveInterval(void *a1, const char *a2, ...)
{
  return _[a1 minimumKeepAliveInterval];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_moveUnknownToDestination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveUnknownToDestination:");
}

id objc_msgSend_multiUser(void *a1, const char *a2, ...)
{
  return _[a1 multiUser];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_nagleEnabled(void *a1, const char *a2, ...)
{
  return _[a1 nagleEnabled];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_needsToConnectOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToConnectOnInterface:");
}

id objc_msgSend_needsToDisconnect(void *a1, const char *a2, ...)
{
  return _[a1 needsToDisconnect];
}

id objc_msgSend_needsToDisconnectOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsToDisconnectOnInterface:");
}

id objc_msgSend_networkCode(void *a1, const char *a2, ...)
{
  return _[a1 networkCode];
}

id objc_msgSend_networkMonitor(void *a1, const char *a2, ...)
{
  return _[a1 networkMonitor];
}

id objc_msgSend_networkMonitor_enableWiFiAssertionForPiggybackConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitor:enableWiFiAssertionForPiggybackConnection:");
}

id objc_msgSend_networkMonitor_evaluateDualModeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitor:evaluateDualModeState:");
}

id objc_msgSend_networkMonitorWiFiBecameAssociated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkMonitorWiFiBecameAssociated:");
}

id objc_msgSend_networking(void *a1, const char *a2, ...)
{
  return _[a1 networking];
}

id objc_msgSend_nextConnectionAttemptInterface(void *a1, const char *a2, ...)
{
  return _[a1 nextConnectionAttemptInterface];
}

id objc_msgSend_nonWakingTopics(void *a1, const char *a2, ...)
{
  return _[a1 nonWakingTopics];
}

id objc_msgSend_nonce(void *a1, const char *a2, ...)
{
  return _[a1 nonce];
}

id objc_msgSend_note(void *a1, const char *a2, ...)
{
  return _[a1 note];
}

id objc_msgSend_noteAckedWithVersion_on_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteAckedWithVersion:on:");
}

id objc_msgSend_noteConnected(void *a1, const char *a2, ...)
{
  return _[a1 noteConnected];
}

id objc_msgSend_noteConnectionAttemptFailed(void *a1, const char *a2, ...)
{
  return _[a1 noteConnectionAttemptFailed];
}

id objc_msgSend_noteConnectionAttemptStart(void *a1, const char *a2, ...)
{
  return _[a1 noteConnectionAttemptStart];
}

id objc_msgSend_noteConnectionEstablished(void *a1, const char *a2, ...)
{
  return _[a1 noteConnectionEstablished];
}

id objc_msgSend_noteConnectionFailureWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteConnectionFailureWithReason:");
}

id objc_msgSend_noteInvalidPresence(void *a1, const char *a2, ...)
{
  return _[a1 noteInvalidPresence];
}

id objc_msgSend_noteInvalidWithVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteInvalidWithVersion:");
}

id objc_msgSend_noteIsConnected(void *a1, const char *a2, ...)
{
  return _[a1 noteIsConnected];
}

id objc_msgSend_notePresenceFailure(void *a1, const char *a2, ...)
{
  return _[a1 notePresenceFailure];
}

id objc_msgSend_notePresenceSuccess(void *a1, const char *a2, ...)
{
  return _[a1 notePresenceSuccess];
}

id objc_msgSend_notePush(void *a1, const char *a2, ...)
{
  return _[a1 notePush];
}

id objc_msgSend_notePushWithCost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notePushWithCost:");
}

id objc_msgSend_noteReachabilityChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteReachabilityChange:");
}

id objc_msgSend_noteReceivedLiveMessage(void *a1, const char *a2, ...)
{
  return _[a1 noteReceivedLiveMessage];
}

id objc_msgSend_noteReceivedStoredMessage(void *a1, const char *a2, ...)
{
  return _[a1 noteReceivedStoredMessage];
}

id objc_msgSend_noteSentWithVersion_on_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteSentWithVersion:on:");
}

id objc_msgSend_noteSystemDidFullWakeWhileConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteSystemDidFullWakeWhileConnected:");
}

id objc_msgSend_noteSystemWillSleep(void *a1, const char *a2, ...)
{
  return _[a1 noteSystemWillSleep];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_nwInterfaceTypeForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nwInterfaceTypeForInterface:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKey_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:onInterface:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openDatabase(void *a1, const char *a2, ...)
{
  return _[a1 openDatabase];
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_openedSecondChannel(void *a1, const char *a2, ...)
{
  return _[a1 openedSecondChannel];
}

id objc_msgSend_opportunisticTopics(void *a1, const char *a2, ...)
{
  return _[a1 opportunisticTopics];
}

id objc_msgSend_originator(void *a1, const char *a2, ...)
{
  return _[a1 originator];
}

id objc_msgSend_outgoingConnectMessageQueue(void *a1, const char *a2, ...)
{
  return _[a1 outgoingConnectMessageQueue];
}

id objc_msgSend_outgoingCounts(void *a1, const char *a2, ...)
{
  return _[a1 outgoingCounts];
}

id objc_msgSend_outgoingCountsByTopic(void *a1, const char *a2, ...)
{
  return _[a1 outgoingCountsByTopic];
}

id objc_msgSend_outgoingCountsForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingCountsForTopic:");
}

id objc_msgSend_outgoingFilterQueue(void *a1, const char *a2, ...)
{
  return _[a1 outgoingFilterQueue];
}

id objc_msgSend_outgoingMessageQueue_lateAcknowledgmentForCriticalOutgoingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingMessageQueue:lateAcknowledgmentForCriticalOutgoingMessage:");
}

id objc_msgSend_outgoingMessageQueue_requestCriticalMessageFlushWithPaddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingMessageQueue:requestCriticalMessageFlushWithPaddingLength:");
}

id objc_msgSend_outgoingMessageQueueShortMessageTimeoutExceeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingMessageQueueShortMessageTimeoutExceeded:");
}

id objc_msgSend_outgoingMessagesToSend(void *a1, const char *a2, ...)
{
  return _[a1 outgoingMessagesToSend];
}

id objc_msgSend_outgoingSendMessageQueue(void *a1, const char *a2, ...)
{
  return _[a1 outgoingSendMessageQueue];
}

id objc_msgSend_output(void *a1, const char *a2, ...)
{
  return _[a1 output];
}

id objc_msgSend_overallCourierStatus(void *a1, const char *a2, ...)
{
  return _[a1 overallCourierStatus];
}

id objc_msgSend_overrideFilterDisableResponseForConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideFilterDisableResponseForConnectionType:");
}

id objc_msgSend_overrideFilterVersion(void *a1, const char *a2, ...)
{
  return _[a1 overrideFilterVersion];
}

id objc_msgSend_pairWithFirst_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairWithFirst:second:");
}

id objc_msgSend_parseMessage_parameters_isInvalid_lengthParsed_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseMessage:parameters:isInvalid:lengthParsed:onInterface:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_payloadFormat(void *a1, const char *a2, ...)
{
  return _[a1 payloadFormat];
}

id objc_msgSend_payloadHash(void *a1, const char *a2, ...)
{
  return _[a1 payloadHash];
}

id objc_msgSend_payloadLength(void *a1, const char *a2, ...)
{
  return _[a1 payloadLength];
}

id objc_msgSend_payloadMessageReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadMessageReceived:");
}

id objc_msgSend_payloadMessageSent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadMessageSent:");
}

id objc_msgSend_pcInterfaceMonitorNonCellular(void *a1, const char *a2, ...)
{
  return _[a1 pcInterfaceMonitorNonCellular];
}

id objc_msgSend_pcInterfaceMonitorOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pcInterfaceMonitorOnInterface:");
}

id objc_msgSend_pcInterfaceMonitorWWAN(void *a1, const char *a2, ...)
{
  return _[a1 pcInterfaceMonitorWWAN];
}

id objc_msgSend_pcPersistentInterfaceManager(void *a1, const char *a2, ...)
{
  return _[a1 pcPersistentInterfaceManager];
}

id objc_msgSend_pendingServerUpdate(void *a1, const char *a2, ...)
{
  return _[a1 pendingServerUpdate];
}

id objc_msgSend_perAppToken(void *a1, const char *a2, ...)
{
  return _[a1 perAppToken];
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlock_waitUntilDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:waitUntilDone:");
}

id objc_msgSend_performDecay(void *a1, const char *a2, ...)
{
  return _[a1 performDecay];
}

id objc_msgSend_performFilterBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFilterBlock:");
}

id objc_msgSend_performKeepAlive(void *a1, const char *a2, ...)
{
  return _[a1 performKeepAlive];
}

id objc_msgSend_performKeepAliveOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performKeepAliveOnInterface:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSelector_withObject_afterDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:afterDelay:");
}

id objc_msgSend_performTransactionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTransactionBlock:");
}

id objc_msgSend_periodicSignalFired(void *a1, const char *a2, ...)
{
  return _[a1 periodicSignalFired];
}

id objc_msgSend_persistentTopics(void *a1, const char *a2, ...)
{
  return _[a1 persistentTopics];
}

id objc_msgSend_piggybackDualChannelAttempts(void *a1, const char *a2, ...)
{
  return _[a1 piggybackDualChannelAttempts];
}

id objc_msgSend_policy(void *a1, const char *a2, ...)
{
  return _[a1 policy];
}

id objc_msgSend_popIndent(void *a1, const char *a2, ...)
{
  return _[a1 popIndent];
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _[a1 port];
}

id objc_msgSend_power(void *a1, const char *a2, ...)
{
  return _[a1 power];
}

id objc_msgSend_powerCostForPushOnRAT_withLinkQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "powerCostForPushOnRAT:withLinkQuality:");
}

id objc_msgSend_powerOptimizationsForExpensiveNetworkingDisabled(void *a1, const char *a2, ...)
{
  return _[a1 powerOptimizationsForExpensiveNetworkingDisabled];
}

id objc_msgSend_preferredInterface(void *a1, const char *a2, ...)
{
  return _[a1 preferredInterface];
}

id objc_msgSend_preferredProtocolConnection(void *a1, const char *a2, ...)
{
  return _[a1 preferredProtocolConnection];
}

id objc_msgSend_prepareForDarkWake(void *a1, const char *a2, ...)
{
  return _[a1 prepareForDarkWake];
}

id objc_msgSend_prepareForFullWake(void *a1, const char *a2, ...)
{
  return _[a1 prepareForFullWake];
}

id objc_msgSend_prepareForSleep(void *a1, const char *a2, ...)
{
  return _[a1 prepareForSleep];
}

id objc_msgSend_presenceCompletion(void *a1, const char *a2, ...)
{
  return _[a1 presenceCompletion];
}

id objc_msgSend_prettyStatus(void *a1, const char *a2, ...)
{
  return _[a1 prettyStatus];
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _[a1 priority];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processIsPowerEfficientToSendChange(void *a1, const char *a2, ...)
{
  return _[a1 processIsPowerEfficientToSendChange];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processNameWithLabels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processNameWithLabels:");
}

id objc_msgSend_promptTapToRadarWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptTapToRadarWithURL:");
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _[a1 protectionSpace];
}

id objc_msgSend_protocolConnection_receivedFilterUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedFilterUpdateWithParameters:");
}

id objc_msgSend_protocolConnection_receivedMessageWithParameters_generation_isWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedMessageWithParameters:generation:isWaking:");
}

id objc_msgSend_protocolConnection_receivedOfflinePresencekWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedOfflinePresencekWithParameters:");
}

id objc_msgSend_protocolConnection_receivedPresenceTrackingRequestWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedPresenceTrackingRequestWithParameters:");
}

id objc_msgSend_protocolConnection_receivedPubSubChannelListWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedPubSubChannelListWithParameters:");
}

id objc_msgSend_protocolConnection_receivedPubSubChannelUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedPubSubChannelUpdateWithParameters:");
}

id objc_msgSend_protocolConnection_receivedTaskControlWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedTaskControlWithParameters:");
}

id objc_msgSend_protocolConnection_receivedTaskNotificationWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnection:receivedTaskNotificationWithParameters:");
}

id objc_msgSend_protocolConnectionByIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 protocolConnectionByIdentifier];
}

id objc_msgSend_protocolConnectionEstablisher(void *a1, const char *a2, ...)
{
  return _[a1 protocolConnectionEstablisher];
}

id objc_msgSend_protocolConnectionForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnectionForInterface:");
}

id objc_msgSend_protocolConnectionHasSentActivityTrackingSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolConnectionHasSentActivityTrackingSalt:");
}

id objc_msgSend_protocolParser(void *a1, const char *a2, ...)
{
  return _[a1 protocolParser];
}

id objc_msgSend_protocolParser_receiveAPNSPackError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolParser:receiveAPNSPackError:");
}

id objc_msgSend_proxy(void *a1, const char *a2, ...)
{
  return _[a1 proxy];
}

id objc_msgSend_proxyAgent(void *a1, const char *a2, ...)
{
  return _[a1 proxyAgent];
}

id objc_msgSend_proxyAgent_openedNewProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyAgent:openedNewProtocolConnection:");
}

id objc_msgSend_proxyManager(void *a1, const char *a2, ...)
{
  return _[a1 proxyManager];
}

id objc_msgSend_proxyManager_appTokenGenerateResponse_error_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:appTokenGenerateResponse:error:guid:environmentName:");
}

id objc_msgSend_proxyManager_canUseProxyChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:canUseProxyChanged:");
}

id objc_msgSend_proxyManager_expiredNonceWithServerTime_shouldRollToken_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:expiredNonceWithServerTime:shouldRollToken:guid:environmentName:");
}

id objc_msgSend_proxyManager_handlePubSubChannelListRequest_envName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:handlePubSubChannelListRequest:envName:guid:");
}

id objc_msgSend_proxyManager_handlePubSubChannelListResponse_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:handlePubSubChannelListResponse:environmentName:guid:");
}

id objc_msgSend_proxyManager_handlePubSubUpdateMessage_connectionType_environmentName_guid_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:handlePubSubUpdateMessage:connectionType:environmentName:guid:");
}

id objc_msgSend_proxyManager_inactiveReceivedForGuid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:inactiveReceivedForGuid:environmentName:");
}

id objc_msgSend_proxyManager_incomingFilterForGuid_environmentName_enabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_topicSalts_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "proxyManager:incomingFilterForGuid:environmentName:enabledTopics:ignoredTopics:opportunisticTopics:nonWakingT opics:topicSalts:");
}

id objc_msgSend_proxyManager_incomingMessageSize_largeMessageSize_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:incomingMessageSize:largeMessageSize:guid:environmentName:");
}

id objc_msgSend_proxyManager_incomingPresenceWithGuid_token_hwVersion_swVersion_swBuild_certificate_nonce_signature_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "proxyManager:incomingPresenceWithGuid:token:hwVersion:swVersion:swBuild:certificate:nonce:signature:environmentName:");
}

id objc_msgSend_proxyManager_incomingPushToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:incomingPushToken:guid:environmentName:");
}

id objc_msgSend_proxyManager_isConnected_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:isConnected:guid:environmentName:");
}

id objc_msgSend_proxyManager_isNearbyChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:isNearbyChanged:");
}

id objc_msgSend_proxyManager_messageTracingWithStatus_topic_tracingUUID_token_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:messageTracingWithStatus:topic:tracingUUID:token:guid:environmentName:");
}

id objc_msgSend_proxyManager_receivedPush_connectionType_generation_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:receivedPush:connectionType:generation:guid:environmentName:");
}

id objc_msgSend_proxyManager_receivedPushAckResponse_messageId_token_connectionType_generation_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "proxyManager:receivedPushAckResponse:messageId:token:connectionType:generation:guid:environmentName:");
}

id objc_msgSend_proxyManager_reversePushResponse_messageGUID_messageId_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:reversePushResponse:messageGUID:messageId:guid:environmentName:");
}

id objc_msgSend_proxyManager_sendPubSubChannelList_messageID_token_connectionType_environmentName_guid_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:sendPubSubChannelList:messageID:token:connectionType:environmentName:guid:");
}

id objc_msgSend_proxyManager_sendReversePush_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManager:sendReversePush:guid:environmentName:");
}

id objc_msgSend_proxyManager_tokenGenerateWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "proxyManager:tokenGenerateWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:guid:environmentName:");
}

id objc_msgSend_proxyManagerReceivedDaemonAliveNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyManagerReceivedDaemonAliveNotification:");
}

id objc_msgSend_pubSub(void *a1, const char *a2, ...)
{
  return _[a1 pubSub];
}

id objc_msgSend_pubSubDefaultTimeout(void *a1, const char *a2, ...)
{
  return _[a1 pubSubDefaultTimeout];
}

id objc_msgSend_pubSubName(void *a1, const char *a2, ...)
{
  return _[a1 pubSubName];
}

id objc_msgSend_pubSubRetryAttemptsCount(void *a1, const char *a2, ...)
{
  return _[a1 pubSubRetryAttemptsCount];
}

id objc_msgSend_publicToken(void *a1, const char *a2, ...)
{
  return _[a1 publicToken];
}

id objc_msgSend_publicTokenDeliveryDelay(void *a1, const char *a2, ...)
{
  return _[a1 publicTokenDeliveryDelay];
}

id objc_msgSend_publicTokenDeliveryRetries(void *a1, const char *a2, ...)
{
  return _[a1 publicTokenDeliveryRetries];
}

id objc_msgSend_publicTokenForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publicTokenForUser:");
}

id objc_msgSend_pushFlags(void *a1, const char *a2, ...)
{
  return _[a1 pushFlags];
}

id objc_msgSend_pushHistory(void *a1, const char *a2, ...)
{
  return _[a1 pushHistory];
}

id objc_msgSend_pushIndent(void *a1, const char *a2, ...)
{
  return _[a1 pushIndent];
}

id objc_msgSend_pushTokenBecameInvalidForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushTokenBecameInvalidForClient:");
}

id objc_msgSend_pushType(void *a1, const char *a2, ...)
{
  return _[a1 pushType];
}

id objc_msgSend_queryItemWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryItemWithName:value:");
}

id objc_msgSend_queuedPresenceSend(void *a1, const char *a2, ...)
{
  return _[a1 queuedPresenceSend];
}

id objc_msgSend_reachabilityBlock(void *a1, const char *a2, ...)
{
  return _[a1 reachabilityBlock];
}

id objc_msgSend_read_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "read:maxLength:");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_recalculateCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 recalculateCriticalReliability];
}

id objc_msgSend_recalculateTrackActivityPresence(void *a1, const char *a2, ...)
{
  return _[a1 recalculateTrackActivityPresence];
}

id objc_msgSend_receivedClientConnection(void *a1, const char *a2, ...)
{
  return _[a1 receivedClientConnection];
}

id objc_msgSend_receivedPush_onConnectionType_withGeneration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedPush:onConnectionType:withGeneration:");
}

id objc_msgSend_receivedPushWithTopic_token_payload_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedPushWithTopic:token:payload:timestamp:");
}

id objc_msgSend_redirectCount(void *a1, const char *a2, ...)
{
  return _[a1 redirectCount];
}

id objc_msgSend_redirectHost(void *a1, const char *a2, ...)
{
  return _[a1 redirectHost];
}

id objc_msgSend_refreshCertNonceAndSignatureWithServerTime_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshCertNonceAndSignatureWithServerTime:withCompletion:");
}

id objc_msgSend_refreshCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 refreshCriticalReliability];
}

id objc_msgSend_refreshCriticalReliabilityTimerWithShortKeepAlive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshCriticalReliabilityTimerWithShortKeepAlive:");
}

id objc_msgSend_refreshIdentityNextFetch(void *a1, const char *a2, ...)
{
  return _[a1 refreshIdentityNextFetch];
}

id objc_msgSend_remoteAddress(void *a1, const char *a2, ...)
{
  return _[a1 remoteAddress];
}

id objc_msgSend_remotePort(void *a1, const char *a2, ...)
{
  return _[a1 remotePort];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeAllPendingAPSMessages(void *a1, const char *a2, ...)
{
  return _[a1 removeAllPendingAPSMessages];
}

id objc_msgSend_removeAllTopics(void *a1, const char *a2, ...)
{
  return _[a1 removeAllTopics];
}

id objc_msgSend_removeAppIdForEnvironmentName_topic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAppIdForEnvironmentName:topic:identifier:");
}

id objc_msgSend_removeConnectionForConnectionPortName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConnectionForConnectionPortName:");
}

id objc_msgSend_removeConnectionForConnectionPortName_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConnectionForConnectionPortName:user:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeFastDormancyDisableToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFastDormancyDisableToken:");
}

id objc_msgSend_removeItem_withFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItem:withFlag:");
}

id objc_msgSend_removeListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:");
}

id objc_msgSend_removeListener_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeListener:environment:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeTaskServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTaskServer:");
}

id objc_msgSend_removeTopics_connectionServer_filter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTopics:connectionServer:filter:");
}

id objc_msgSend_removeTopicsForConnectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTopicsForConnectionServer:");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_reportClientIPAddress_forInterfaceOfName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportClientIPAddress:forInterfaceOfName:");
}

id objc_msgSend_reportConnectionFailureOnConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportConnectionFailureOnConnectionType:");
}

id objc_msgSend_reportConnectionSuccessOnConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportConnectionSuccessOnConnectionType:");
}

id objc_msgSend_reportSymptomToAutoBugCapture_subType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportSymptomToAutoBugCapture:subType:");
}

id objc_msgSend_requestConnectionIfNeeded(void *a1, const char *a2, ...)
{
  return _[a1 requestConnectionIfNeeded];
}

id objc_msgSend_requestCourierConnections(void *a1, const char *a2, ...)
{
  return _[a1 requestCourierConnections];
}

id objc_msgSend_requestFilterForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestFilterForClient:");
}

id objc_msgSend_requestWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_resetCheckpoint(void *a1, const char *a2, ...)
{
  return _[a1 resetCheckpoint];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeManagerWithAction_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeManagerWithAction:onInterface:");
}

id objc_msgSend_retryCount(void *a1, const char *a2, ...)
{
  return _[a1 retryCount];
}

id objc_msgSend_rollTokenAndReconnect(void *a1, const char *a2, ...)
{
  return _[a1 rollTokenAndReconnect];
}

id objc_msgSend_rollTokensForAllBAAEnvironments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollTokensForAllBAAEnvironments:");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _[a1 run];
}

id objc_msgSend_saveAndUpdateDelegate(void *a1, const char *a2, ...)
{
  return _[a1 saveAndUpdateDelegate];
}

id objc_msgSend_saveSalt_forIdentifier_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveSalt:forIdentifier:user:");
}

id objc_msgSend_saveToken_forInfo_connection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveToken:forInfo:connection:");
}

id objc_msgSend_scheduleInRunLoop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInRunLoop:");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _[a1 second];
}

id objc_msgSend_secondsBetweenPiggybacks(void *a1, const char *a2, ...)
{
  return _[a1 secondsBetweenPiggybacks];
}

id objc_msgSend_sendActivityTrackingRequestWithMessageID_pushToken_salt_trackingFlag_timestamp_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendActivityTrackingRequestWithMessageID:pushToken:salt:trackingFlag:timestamp:");
}

id objc_msgSend_sendActivityTrackingRequestWithMessageID_pushToken_salt_trackingFlag_timestamp_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendActivityTrackingRequestWithMessageID:pushToken:salt:trackingFlag:timestamp:onInterface:");
}

id objc_msgSend_sendAppTokenGenerateResponse_error_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAppTokenGenerateResponse:error:guid:environmentName:");
}

id objc_msgSend_sendBlock(void *a1, const char *a2, ...)
{
  return _[a1 sendBlock];
}

id objc_msgSend_sendConnectMessageWithToken_interface_activeInterval_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:interface:activeInterval:presenceFlags:metadata:certificates:nonce:signature:host CertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tlsHandshakeTimeMillise conds:consecutiveConnectionFailureReason:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_interface_activeInterval_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_tcpHandshakeTimeMilliseconds_dnsResolveTimeMilliseconds_tlsHandshakeTimeMilliseconds_consecutiveConnectionFailureReason_withCompletion_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:interface:activeInterval:presenceFlags:metadata:certificates:nonce:signature:host CertificateInfo:redirectCount:tcpHandshakeTimeMilliseconds:dnsResolveTimeMilliseconds:tlsHandshakeTimeMillise conds:consecutiveConnectionFailureReason:withCompletion:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_presenceFlags_certificates_nonce_signature_hostCertificateInfo_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:presenceFlags:certificates:nonce:signature:hostCertificateInfo:withCompletion:");
}

id objc_msgSend_sendConnectMessageWithToken_state_interface_activeInterval_presenceFlags_metadata_certificates_nonce_signature_redirectCount_withCompletion_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:state:interface:activeInterval:presenceFlags:metadata:certificates:nonce:signatur e:redirectCount:withCompletion:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_hwVersion_swVersion_swBuild_certificates_nonce_signature_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:state:presenceFlags:hwVersion:swVersion:swBuild:certificates:nonce:signature:withCompletion:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_interface_activeInterval_metadata_certificates_nonce_signature_redirectCount_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:state:presenceFlags:interface:activeInterval:metadata:certificates:nonce:signatur e:redirectCount:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:state:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:red irectCount:onInterface:");
}

id objc_msgSend_sendConnectMessageWithToken_state_presenceFlags_metadata_certificates_nonce_signature_hostCertificateInfo_redirectCount_withCompletion_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendConnectMessageWithToken:state:presenceFlags:metadata:certificates:nonce:signature:hostCertificateInfo:red irectCount:withCompletion:onInterface:");
}

id objc_msgSend_sendData_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendExpiredNonceWithServerTime_shouldRollToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendExpiredNonceWithServerTime:shouldRollToken:guid:environmentName:");
}

id objc_msgSend_sendFailuresToClient_pushTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFailuresToClient:pushTopic:");
}

id objc_msgSend_sendFilterMessageWithEnabledHashes_ignoredHashes_opportunisticHashes_nonWakingHashes_pausedHashes_token_version_expectsResponse_onInterface_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendFilterMessageWithEnabledHashes:ignoredHashes:opportunisticHashes:nonWakingHashes:pausedHashes:token:versi on:expectsResponse:onInterface:withCompletion:");
}

id objc_msgSend_sendFilterMessageWithEnabledHashes_ignoredHashes_opportunisticHashes_nonWakingHashes_pausedHashes_token_version_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendFilterMessageWithEnabledHashes:ignoredHashes:opportunisticHashes:nonWakingHashes:pausedHashes:token:version:onInterface:");
}

id objc_msgSend_sendFilterMessageWithEnabledTopicsByHash_ignoredTopicsByHash_opportunisticTopicsByHash_nonWakingTopicsByHash_pausedTopicsByHash_saltsByTopic_token_version_expectsResponse_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendFilterMessageWithEnabledTopicsByHash:ignoredTopicsByHash:opportunisticTopicsByHash:nonWakingTopicsByHash: pausedTopicsByHash:saltsByTopic:token:version:expectsResponse:withCompletion:");
}

id objc_msgSend_sendFilterWithEnvironmentName_guid_enabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_topicSalts_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendFilterWithEnvironmentName:guid:enabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:topicSalts:");
}

id objc_msgSend_sendFlushMessageWithWantPaddingLength_paddingLength_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFlushMessageWithWantPaddingLength:paddingLength:onInterface:");
}

id objc_msgSend_sendFlushOnAllConnectionshWithPaddingLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFlushOnAllConnectionshWithPaddingLength:");
}

id objc_msgSend_sendFlushResponseMessageWithPaddingLength_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFlushResponseMessageWithPaddingLength:onInterface:");
}

id objc_msgSend_sendInactiveWithEnvironmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendInactiveWithEnvironmentName:guid:");
}

id objc_msgSend_sendInterface(void *a1, const char *a2, ...)
{
  return _[a1 sendInterface];
}

id objc_msgSend_sendInterfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sendInterfaceIdentifier];
}

id objc_msgSend_sendKeepAliveMessageWithMetadata_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendKeepAliveMessageWithMetadata:onInterface:");
}

id objc_msgSend_sendLargeMessageSize_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLargeMessageSize:guid:environmentName:");
}

id objc_msgSend_sendMessage_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:guid:environmentName:");
}

id objc_msgSend_sendMessage_topicHash_lastRTT_token_ultraConstrainedAllowed_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:topicHash:lastRTT:token:ultraConstrainedAllowed:withCompletion:");
}

id objc_msgSend_sendMessageAcknowledgeMessageWithResponse_messageId_generation_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageAcknowledgeMessageWithResponse:messageId:generation:token:");
}

id objc_msgSend_sendMessageAcknowledgeMessageWithResponse_messageId_token_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageAcknowledgeMessageWithResponse:messageId:token:onInterface:");
}

id objc_msgSend_sendMessageSize_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageSize:guid:environmentName:");
}

id objc_msgSend_sendMessageTracingAckWithTopicHash_topic_tracingUUID_status_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTracingAckWithTopicHash:topic:tracingUUID:status:token:");
}

id objc_msgSend_sendMessageTracingAckWithTopicHash_tracingUUID_status_token_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTracingAckWithTopicHash:tracingUUID:status:token:onInterface:");
}

id objc_msgSend_sendMessageTracingStatus_topic_tracingUUID_token_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTracingStatus:topic:tracingUUID:token:guid:environmentName:");
}

id objc_msgSend_sendMessageTransportAcknowledgeMessage(void *a1, const char *a2, ...)
{
  return _[a1 sendMessageTransportAcknowledgeMessage];
}

id objc_msgSend_sendMessageTransportAcknowledgeMessageOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageTransportAcknowledgeMessageOnInterface:");
}

id objc_msgSend_sendMessageWithTopicHash_identifier_payload_token_isPlistFormat_lastRTT_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithTopicHash:identifier:payload:token:isPlistFormat:lastRTT:onInterface:");
}

id objc_msgSend_sendMessageWithTopicHash_identifier_payload_token_isPlistFormat_lastRTT_onInterface_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendMessageWithTopicHash:identifier:payload:token:isPlistFormat:lastRTT:onInterface:withCompletion:");
}

id objc_msgSend_sendPresenceTrackingRequestOnProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPresenceTrackingRequestOnProtocolConnection:");
}

id objc_msgSend_sendPresenceWithEnvironmentName_guid_token_hwVersion_swVersion_swBuild_certificate_nonce_signature_hostCertificateInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendPresenceWithEnvironmentName:guid:token:hwVersion:swVersion:swBuild:certificate:nonce:signature:hostCertificateInfo:");
}

id objc_msgSend_sendProxyIsConnected_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProxyIsConnected:guid:environmentName:");
}

id objc_msgSend_sendProxyMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProxyMessage:");
}

id objc_msgSend_sendProxyMessage_forAPSMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProxyMessage:forAPSMessage:");
}

id objc_msgSend_sendPubSubChannelList_messageID_token_connectionType_environmentName_guid_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelList:messageID:token:connectionType:environmentName:guid:");
}

id objc_msgSend_sendPubSubChannelListRequest_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListRequest:environmentName:guid:");
}

id objc_msgSend_sendPubSubChannelListRequestForConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListRequestForConnectionType:");
}

id objc_msgSend_sendPubSubChannelListResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListResponse:");
}

id objc_msgSend_sendPubSubChannelListResponse_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListResponse:environmentName:guid:");
}

id objc_msgSend_sendPubSubChannelListWithMetadata_baseToken_messageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListWithMetadata:baseToken:messageID:");
}

id objc_msgSend_sendPubSubChannelListWithMetadata_baseToken_messageID_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubChannelListWithMetadata:baseToken:messageID:onInterface:");
}

id objc_msgSend_sendPubSubUpdateMessage_connectionType_environmentName_guid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubUpdateMessage:connectionType:environmentName:guid:");
}

id objc_msgSend_sendPubSubUpdateMessage_forConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPubSubUpdateMessage:forConnectionType:");
}

id objc_msgSend_sendPushToken_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendPushToken:guid:environmentName:");
}

id objc_msgSend_sendRTT(void *a1, const char *a2, ...)
{
  return _[a1 sendRTT];
}

id objc_msgSend_sendReceivedPush_forConnectionType_generation_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReceivedPush:forConnectionType:generation:guid:environmentName:");
}

id objc_msgSend_sendResponse_messageId_token_connectionType_generation_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendResponse:messageId:token:connectionType:generation:guid:environmentName:");
}

id objc_msgSend_sendRetried(void *a1, const char *a2, ...)
{
  return _[a1 sendRetried];
}

id objc_msgSend_sendReversePushResponse_messageGUID_messageId_guid_environmentName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReversePushResponse:messageGUID:messageId:guid:environmentName:");
}

id objc_msgSend_sendSetActiveState_forInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSetActiveState:forInterval:");
}

id objc_msgSend_sendSetActiveState_forInterval_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSetActiveState:forInterval:onInterface:");
}

id objc_msgSend_sendTaskControlMessageWithMetadata_messageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTaskControlMessageWithMetadata:messageId:");
}

id objc_msgSend_sendTaskControlMessageWithMetadata_messageId_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTaskControlMessageWithMetadata:messageId:onInterface:");
}

id objc_msgSend_sendTimeoutTime(void *a1, const char *a2, ...)
{
  return _[a1 sendTimeoutTime];
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_guid_environmentName_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:guid:environmentName:");
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:onInterface:");
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_withCompletion_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:withCompletion:");
}

id objc_msgSend_sendTokenGenerateMessageWithTopicHash_baseToken_appId_expirationTTL_vapidPublicKeyHash_type_withCompletion_onInterface_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "sendTokenGenerateMessageWithTopicHash:baseToken:appId:expirationTTL:vapidPublicKeyHash:type:withCompletion:onInterface:");
}

id objc_msgSend_sent(void *a1, const char *a2, ...)
{
  return _[a1 sent];
}

id objc_msgSend_sentTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 sentTimestamp];
}

id objc_msgSend_serializeInfo_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeInfo:withToken:");
}

id objc_msgSend_serverAddressForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverAddressForInterface:");
}

id objc_msgSend_serverCount(void *a1, const char *a2, ...)
{
  return _[a1 serverCount];
}

id objc_msgSend_serverDisabledFilterOptimization(void *a1, const char *a2, ...)
{
  return _[a1 serverDisabledFilterOptimization];
}

id objc_msgSend_serverEnvironmentNamesForUserPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverEnvironmentNamesForUserPreferences:");
}

id objc_msgSend_serverGroup(void *a1, const char *a2, ...)
{
  return _[a1 serverGroup];
}

id objc_msgSend_serverHostname(void *a1, const char *a2, ...)
{
  return _[a1 serverHostname];
}

id objc_msgSend_serverHostnameForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverHostnameForInterface:");
}

id objc_msgSend_serverIPAddress(void *a1, const char *a2, ...)
{
  return _[a1 serverIPAddress];
}

id objc_msgSend_serverIPAddressForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverIPAddressForInterface:");
}

id objc_msgSend_serverPort(void *a1, const char *a2, ...)
{
  return _[a1 serverPort];
}

id objc_msgSend_serverPortForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverPortForInterface:");
}

id objc_msgSend_serverTimeInNanoSeconds(void *a1, const char *a2, ...)
{
  return _[a1 serverTimeInNanoSeconds];
}

id objc_msgSend_serverTimeTracker(void *a1, const char *a2, ...)
{
  return _[a1 serverTimeTracker];
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return _[a1 serverTrust];
}

id objc_msgSend_serversWithEnvironmentName_user_userPreferences_excludeServers_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serversWithEnvironmentName:user:userPreferences:excludeServers:delegate:");
}

id objc_msgSend_serversWithEnvironmentName_user_userPreferences_excludeServers_delegate_returnServers_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serversWithEnvironmentName:user:userPreferences:excludeServers:delegate:returnServers:");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAckReceived_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAckReceived:");
}

id objc_msgSend_setAckTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAckTimestamp:");
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActive:");
}

id objc_msgSend_setAllowedInterfaceConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowedInterfaceConstraint:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAlternatePort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternatePort:");
}

id objc_msgSend_setAlwaysWantsInterfaceChangeCallbacks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysWantsInterfaceChangeCallbacks:");
}

id objc_msgSend_setAppChannelSubscriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppChannelSubscriptions:");
}

id objc_msgSend_setAppId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppId:");
}

id objc_msgSend_setBaaIdentityRefreshedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaaIdentityRefreshedBlock:");
}

id objc_msgSend_setBaseToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseToken:");
}

id objc_msgSend_setCachedIPAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedIPAddress:");
}

id objc_msgSend_setCachedServerCount_forDomain_ttl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedServerCount:forDomain:ttl:");
}

id objc_msgSend_setCanAttemptConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanAttemptConnection:");
}

id objc_msgSend_setCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCancelled:");
}

id objc_msgSend_setCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificate:");
}

id objc_msgSend_setCertificateValidated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificateValidated:");
}

id objc_msgSend_setCertificates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCertificates:");
}

id objc_msgSend_setChannelID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelID:");
}

id objc_msgSend_setChannelId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelId:");
}

id objc_msgSend_setChannelTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannelTopic:");
}

id objc_msgSend_setCheckpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCheckpoint:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setConfigurationURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfigurationURL:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionFailure_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionFailure:onInterface:");
}

id objc_msgSend_setConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionManager:");
}

id objc_msgSend_setConnectionStatistics_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionStatistics:onInterface:");
}

id objc_msgSend_setConnectionTime_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionTime:forInterface:");
}

id objc_msgSend_setCorrelationIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCorrelationIdentifier:");
}

id objc_msgSend_setCostDrivenDualChannelAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCostDrivenDualChannelAttempts:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCourierConnectTimerPowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCourierConnectTimerPowerAssertion:");
}

id objc_msgSend_setCreate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCreate:");
}

id objc_msgSend_setCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCriticalReliability:");
}

id objc_msgSend_setCurrentAddressFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAddressFamily:");
}

id objc_msgSend_setCurrentFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentFilter:");
}

id objc_msgSend_setCurrentMessageID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentMessageID:");
}

id objc_msgSend_setCurrentWiFiKeepAliveInterval_growAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWiFiKeepAliveInterval:growAttempts:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDebugHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugHostname:");
}

id objc_msgSend_setDefaultUserPersistentTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDefaultUserPersistentTopics:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDesiredFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredFilter:");
}

id objc_msgSend_setDeviceNotFoundTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceNotFoundTimer:");
}

id objc_msgSend_setDisableCostDrivenDualChannelAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableCostDrivenDualChannelAttempts:");
}

id objc_msgSend_setDisableDualModePiggybackTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableDualModePiggybackTimer:");
}

id objc_msgSend_setDisableSystemWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableSystemWaking:");
}

id objc_msgSend_setDisconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectReason:");
}

id objc_msgSend_setDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDomain:");
}

id objc_msgSend_setEdgeDNS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEdgeDNS:");
}

id objc_msgSend_setEnableCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableCriticalReliability:");
}

id objc_msgSend_setEnableNonCellularConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableNonCellularConnections:");
}

id objc_msgSend_setEnableNonCellularOnConnectionManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableNonCellularOnConnectionManager:");
}

id objc_msgSend_setEnableStatusChangeNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableStatusChangeNotifications:");
}

id objc_msgSend_setEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabled:");
}

id objc_msgSend_setEnabledTopics_ignoredTopics_opportunisticTopics_nonWakingTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledTopics:ignoredTopics:opportunisticTopics:nonWakingTopics:");
}

id objc_msgSend_setEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnvironment:");
}

id objc_msgSend_setEnvironmentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnvironmentType:");
}

id objc_msgSend_setErrorMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorMessage:");
}

id objc_msgSend_setExpensiveConditionsBackOffInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpensiveConditionsBackOffInterval:");
}

id objc_msgSend_setExpirationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpirationDate:");
}

id objc_msgSend_setExpiryInterval_expirationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpiryInterval:expirationBlock:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setFilterMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilterMode:");
}

id objc_msgSend_setFilterMode_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilterMode:onInterface:");
}

id objc_msgSend_setFireDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFireDate:");
}

id objc_msgSend_setFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlag:");
}

id objc_msgSend_setForceWWANInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceWWANInterface:");
}

id objc_msgSend_setFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromStorage:");
}

id objc_msgSend_setGotNewToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGotNewToken:");
}

id objc_msgSend_setGuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGuid:");
}

id objc_msgSend_setHTTPShouldHandleCookies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPShouldHandleCookies:");
}

id objc_msgSend_setHandlingFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandlingFailure:");
}

id objc_msgSend_setHasActiveConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasActiveConnection:");
}

id objc_msgSend_setHasFilterChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasFilterChanged:");
}

id objc_msgSend_setHasTimedOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasTimedOut:");
}

id objc_msgSend_setHighQualityThresholdConnectedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHighQualityThresholdConnectedTime:");
}

id objc_msgSend_setHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHostname:");
}

id objc_msgSend_setHwVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHwVersion:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdentifierToSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifierToSalt:");
}

id objc_msgSend_setIdentifiersToSaltsSystem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifiersToSaltsSystem:");
}

id objc_msgSend_setIdentifiersToSaltsUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifiersToSaltsUser:");
}

id objc_msgSend_setIdentityAvailabilityDidChangeBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentityAvailabilityDidChangeBlock:");
}

id objc_msgSend_setInTransaction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInTransaction:");
}

id objc_msgSend_setIncomingInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncomingInterface:");
}

id objc_msgSend_setInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInfo:");
}

id objc_msgSend_setInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInput:");
}

id objc_msgSend_setInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterface:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIpAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIpAddress:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsConnected_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:onInterface:");
}

id objc_msgSend_setIsConnected_onInterface_withDisconnectReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:onInterface:withDisconnectReason:");
}

id objc_msgSend_setIsConnecting_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnecting:onInterface:");
}

id objc_msgSend_setIsDualChannelAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDualChannelAllowed:");
}

id objc_msgSend_setIsPackedFormat_maxEncoderTableSize_maxDecoderTableSize_interface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPackedFormat:maxEncoderTableSize:maxDecoderTableSize:interface:");
}

id objc_msgSend_setIsPowerEfficientToSendFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPowerEfficientToSendFilter:");
}

id objc_msgSend_setIsPublicTokenAcknowledged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsPublicTokenAcknowledged:");
}

id objc_msgSend_setIsSuspended_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSuspended:onInterface:");
}

id objc_msgSend_setIsWoWEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsWoWEnabled:");
}

id objc_msgSend_setItemState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemState:");
}

id objc_msgSend_setKeepAliveConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveConfiguration:");
}

id objc_msgSend_setKeepAliveGracePeriod_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveGracePeriod:onInterface:");
}

id objc_msgSend_setKeepAliveOverrideOnInterface_interval_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveOverrideOnInterface:interval:timeout:");
}

id objc_msgSend_setKeepAliveV2Supported_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeepAliveV2Supported:onInterface:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setLargeMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLargeMessageSize:");
}

id objc_msgSend_setLastConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastConnected:");
}

id objc_msgSend_setLastMessageFromStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessageFromStorage:");
}

id objc_msgSend_setLastMessageTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessageTime:");
}

id objc_msgSend_setLastMessageTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMessageTopic:");
}

id objc_msgSend_setLastPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPresence:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setListener_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:environment:");
}

id objc_msgSend_setLoadBalanced_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoadBalanced:");
}

id objc_msgSend_setLowQualityThresholdConnectedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowQualityThresholdConnectedTime:");
}

id objc_msgSend_setMaxExpensiveConditionsConnectionAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxExpensiveConditionsConnectionAttempts:");
}

id objc_msgSend_setMaxLargeMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLargeMessageSize:");
}

id objc_msgSend_setMaxLargeMessageSize_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxLargeMessageSize:forInterface:");
}

id objc_msgSend_setMaxMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxMessageSize:");
}

id objc_msgSend_setMaxMessageSize_forInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxMessageSize:forInterface:");
}

id objc_msgSend_setMessageId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageId:");
}

id objc_msgSend_setMessageReplayCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageReplayCount:");
}

id objc_msgSend_setMessageSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageSize:");
}

id objc_msgSend_setMinimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumEarlyFireProportion:");
}

id objc_msgSend_setMinimumIntervalFallbackEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumIntervalFallbackEnabled:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNetworkGuidanceString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkGuidanceString:");
}

id objc_msgSend_setNetworkServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkServiceType:");
}

id objc_msgSend_setNonce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNonce:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKey_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:onInterface:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setOnlyAllowedStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnlyAllowedStyle:");
}

id objc_msgSend_setOriginator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOriginator:");
}

id objc_msgSend_setOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutput:");
}

id objc_msgSend_setPayloadLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadLength:");
}

id objc_msgSend_setPerAppToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerAppToken:");
}

id objc_msgSend_setPersistentTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentTopics:");
}

id objc_msgSend_setPiggybackDualChannelAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPiggybackDualChannelAttempts:");
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPort:");
}

id objc_msgSend_setPowerOptimizationsForExpensiveNetworkingDisabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerOptimizationsForExpensiveNetworkingDisabled:");
}

id objc_msgSend_setPresenceCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPresenceCompletion:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setProcessName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProcessName:");
}

id objc_msgSend_setProxyManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxyManager:");
}

id objc_msgSend_setPublicToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicToken:");
}

id objc_msgSend_setPublicToken_fromServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicToken:fromServer:");
}

id objc_msgSend_setPublicToken_needsAck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicToken:needsAck:");
}

id objc_msgSend_setPushFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushFlags:");
}

id objc_msgSend_setPushType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushType:");
}

id objc_msgSend_setPushWakeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushWakeEnabled:");
}

id objc_msgSend_setPushWakeTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPushWakeTopics:");
}

id objc_msgSend_setQueryItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueryItems:");
}

id objc_msgSend_setQueuedPresenceSend_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueuedPresenceSend:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setRecordType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordType:");
}

id objc_msgSend_setRedirectHost_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectHost:");
}

id objc_msgSend_setRedirectHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRedirectHostname:");
}

id objc_msgSend_setRefreshIdentityNextFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshIdentityNextFetch:");
}

id objc_msgSend_setRemainsConnectedWhenWWANSuspends_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainsConnectedWhenWWANSuspends:");
}

id objc_msgSend_setResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResponder:");
}

id objc_msgSend_setRetryCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryCount:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSecureHandshakeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecureHandshakeEnabled:");
}

id objc_msgSend_setSendInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendInterface:");
}

id objc_msgSend_setSendInterfaceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendInterfaceIdentifier:");
}

id objc_msgSend_setSendRTT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendRTT:");
}

id objc_msgSend_setSendRetried_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSendRetried:");
}

id objc_msgSend_setSent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSent:");
}

id objc_msgSend_setSentTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSentTimestamp:");
}

id objc_msgSend_setSerialItemInParameters_commandID_itemID_itemData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialItemInParameters:commandID:itemID:itemData:");
}

id objc_msgSend_setSerialNumberInParameters_commandID_itemID_Integer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerialNumberInParameters:commandID:itemID:Integer:");
}

id objc_msgSend_setServerCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerCount:");
}

id objc_msgSend_setServerGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerGroup:");
}

id objc_msgSend_setServerStatsExpectedKeepAlive_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerStatsExpectedKeepAlive:onInterface:");
}

id objc_msgSend_setServerStatsMaxKeepAlive_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerStatsMaxKeepAlive:onInterface:");
}

id objc_msgSend_setServerStatsMinKeepAlive_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerStatsMinKeepAlive:onInterface:");
}

id objc_msgSend_setServerSupportsDualMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServerSupportsDualMode:");
}

id objc_msgSend_setSharedURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedURLCache:");
}

id objc_msgSend_setShouldReportLastReversePushRTT_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldReportLastReversePushRTT:onInterface:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setState_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:onInterface:");
}

id objc_msgSend_setSubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionChannels:");
}

id objc_msgSend_setSubscriptionRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionRequests:");
}

id objc_msgSend_setSubscriptionsType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubscriptionsType:");
}

id objc_msgSend_setSwBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwBuild:");
}

id objc_msgSend_setSwVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSwVersion:");
}

id objc_msgSend_setSystemToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemToken:forUser:");
}

id objc_msgSend_setTLSMinimumSupportedProtocolVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTLSMinimumSupportedProtocolVersion:");
}

id objc_msgSend_setTaskId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskId:");
}

id objc_msgSend_setTaskStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskStatus:");
}

id objc_msgSend_setTimedOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimedOut:");
}

id objc_msgSend_setTimeoutSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutSource:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:");
}

id objc_msgSend_setToken_forEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:forEnvironment:");
}

id objc_msgSend_setToken_forInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:forInfo:");
}

id objc_msgSend_setToken_forInfo_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:forInfo:user:");
}

id objc_msgSend_setToken_withDomain_appSpecificIdentifier_tokenServiceSuffix_user_topic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setToken:withDomain:appSpecificIdentifier:tokenServiceSuffix:user:topic:");
}

id objc_msgSend_setTokenName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenName:");
}

id objc_msgSend_setTokenTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenTopics:");
}

id objc_msgSend_setTolerance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTolerance:");
}

id objc_msgSend_setTopicsChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTopicsChanged:");
}

id objc_msgSend_setTracingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracingEnabled:");
}

id objc_msgSend_setTracingUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTracingUUID:");
}

id objc_msgSend_setTrackActivityPresence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackActivityPresence:");
}

id objc_msgSend_setTrackingState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackingState:");
}

id objc_msgSend_setTtlBegin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTtlBegin:");
}

id objc_msgSend_setTtlEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTtlEnd:");
}

id objc_msgSend_setUltraConstrainedEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUltraConstrainedEnabled:");
}

id objc_msgSend_setUltraConstrainedTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUltraConstrainedTopics:");
}

id objc_msgSend_setUnsubscriptionChannels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnsubscriptionChannels:");
}

id objc_msgSend_setUseAlternatePort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseAlternatePort:");
}

id objc_msgSend_setUseInteractivePowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseInteractivePowerAssertion:");
}

id objc_msgSend_setUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUser:");
}

id objc_msgSend_setUserState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserState:");
}

id objc_msgSend_setUsingCachedIPAddress_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingCachedIPAddress:onInterface:");
}

id objc_msgSend_setUsingServerStatsAggressively_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUsingServerStatsAggressively:onInterface:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setWatchesSystemLockState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchesSystemLockState:");
}

id objc_msgSend_setWifiKeepAliveEarlyFireConstantInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiKeepAliveEarlyFireConstantInterval:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithCapacity:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_socketStreamProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_socketStreamProperties:");
}

id objc_msgSend_set_tlsTrustPinningPolicyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_tlsTrustPinningPolicyName:");
}

id objc_msgSend_setupForUser_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupForUser:dependencies:");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedInstanceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstanceForIdentifier:");
}

id objc_msgSend_shiftBucketsBasedOnNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shiftBucketsBasedOnNow:");
}

id objc_msgSend_shouldAssertWiFi(void *a1, const char *a2, ...)
{
  return _[a1 shouldAssertWiFi];
}

id objc_msgSend_shouldClientScheduleReconnectDueToFailureOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldClientScheduleReconnectDueToFailureOnInterface:");
}

id objc_msgSend_shouldConnectOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldConnectOnInterface:");
}

id objc_msgSend_shouldDelayNextReconnect(void *a1, const char *a2, ...)
{
  return _[a1 shouldDelayNextReconnect];
}

id objc_msgSend_shouldDropPubSubMessageWithData_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDropPubSubMessageWithData:forTopic:");
}

id objc_msgSend_shouldForceShortTimeouts(void *a1, const char *a2, ...)
{
  return _[a1 shouldForceShortTimeouts];
}

id objc_msgSend_shouldHandleIncomingPush_forProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHandleIncomingPush:forProtocolConnection:");
}

id objc_msgSend_shouldOnlySendFilterOnPreferredInterface(void *a1, const char *a2, ...)
{
  return _[a1 shouldOnlySendFilterOnPreferredInterface];
}

id objc_msgSend_shouldPowerLogEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPowerLogEvent:");
}

id objc_msgSend_shouldRun(void *a1, const char *a2, ...)
{
  return _[a1 shouldRun];
}

id objc_msgSend_shouldUseDualMode(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseDualMode];
}

id objc_msgSend_shouldUseInternet(void *a1, const char *a2, ...)
{
  return _[a1 shouldUseInternet];
}

id objc_msgSend_shouldUseInternetDidChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseInternetDidChange:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_signatureWithDomain_type_subType_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureWithDomain:type:subType:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_simulatorConnectionEnabled(void *a1, const char *a2, ...)
{
  return _[a1 simulatorConnectionEnabled];
}

id objc_msgSend_snapshotWithSignature_duration_event_payload_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotWithSignature:duration:event:payload:reply:");
}

id objc_msgSend_softwareBuild(void *a1, const char *a2, ...)
{
  return _[a1 softwareBuild];
}

id objc_msgSend_softwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 softwareVersion];
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sortedLoggedInUsers(void *a1, const char *a2, ...)
{
  return _[a1 sortedLoggedInUsers];
}

id objc_msgSend_sslErrorFromErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sslErrorFromErrorCode:");
}

id objc_msgSend_startSecureConnection(void *a1, const char *a2, ...)
{
  return _[a1 startSecureConnection];
}

id objc_msgSend_startup(void *a1, const char *a2, ...)
{
  return _[a1 startup];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_stateByConnectionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stateByConnectionIdentifier];
}

id objc_msgSend_stateByInterfaceIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 stateByInterfaceIdentifier];
}

id objc_msgSend_stateForProtocolConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateForProtocolConnection:");
}

id objc_msgSend_stateListeners(void *a1, const char *a2, ...)
{
  return _[a1 stateListeners];
}

id objc_msgSend_stateOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateOnInterface:");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusPrinter(void *a1, const char *a2, ...)
{
  return _[a1 statusPrinter];
}

id objc_msgSend_stopAndResetManager(void *a1, const char *a2, ...)
{
  return _[a1 stopAndResetManager];
}

id objc_msgSend_stopAndResetManagerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAndResetManagerOnInterface:");
}

id objc_msgSend_stopManager(void *a1, const char *a2, ...)
{
  return _[a1 stopManager];
}

id objc_msgSend_stopManagerOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopManagerOnInterface:");
}

id objc_msgSend_stopManagers(void *a1, const char *a2, ...)
{
  return _[a1 stopManagers];
}

id objc_msgSend_storageName(void *a1, const char *a2, ...)
{
  return _[a1 storageName];
}

id objc_msgSend_storeChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeChannel:");
}

id objc_msgSend_storeIncomingMessage_environment_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeIncomingMessage:environment:completionBlock:");
}

id objc_msgSend_stream(void *a1, const char *a2, ...)
{
  return _[a1 stream];
}

id objc_msgSend_stream_handleEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stream:handleEvent:");
}

id objc_msgSend_streamError(void *a1, const char *a2, ...)
{
  return _[a1 streamError];
}

id objc_msgSend_streamForInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamForInterface:");
}

id objc_msgSend_streamStatus(void *a1, const char *a2, ...)
{
  return _[a1 streamStatus];
}

id objc_msgSend_streamTaskWithHostName_port_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamTaskWithHostName:port:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByExpandingTildeInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByExpandingTildeInPath];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByResolvingSymlinksInPath];
}

id objc_msgSend_stringByStandardizingPath(void *a1, const char *a2, ...)
{
  return _[a1 stringByStandardizingPath];
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToWeakObjectsMapTable];
}

id objc_msgSend_subState(void *a1, const char *a2, ...)
{
  return _[a1 subState];
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_subscribeToChannels_forTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeToChannels:forTopic:token:");
}

id objc_msgSend_subscriptionChannelResponseAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionChannelResponseAtIndex:");
}

id objc_msgSend_subscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannelResponses];
}

id objc_msgSend_subscriptionChannelResponsesCount(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannelResponsesCount];
}

id objc_msgSend_subscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannels];
}

id objc_msgSend_subscriptionChannelsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionChannelsAtIndex:");
}

id objc_msgSend_subscriptionChannelsCount(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionChannelsCount];
}

id objc_msgSend_subscriptionRequests(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionRequests];
}

id objc_msgSend_subscriptionType(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionType];
}

id objc_msgSend_subscriptionUpdates(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionUpdates];
}

id objc_msgSend_subscriptionUpdatesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionUpdatesAtIndex:");
}

id objc_msgSend_subscriptionUpdatesCount(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionUpdatesCount];
}

id objc_msgSend_subscriptionsStatus(void *a1, const char *a2, ...)
{
  return _[a1 subscriptionsStatus];
}

id objc_msgSend_suffixForInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suffixForInfo:");
}

id objc_msgSend_sumOfBucketType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sumOfBucketType:");
}

id objc_msgSend_suppressedTTRTopics(void *a1, const char *a2, ...)
{
  return _[a1 suppressedTTRTopics];
}

id objc_msgSend_suspendToggleDailyLimit(void *a1, const char *a2, ...)
{
  return _[a1 suspendToggleDailyLimit];
}

id objc_msgSend_suspendToggleHourlyLimit(void *a1, const char *a2, ...)
{
  return _[a1 suspendToggleHourlyLimit];
}

id objc_msgSend_swBuild(void *a1, const char *a2, ...)
{
  return _[a1 swBuild];
}

id objc_msgSend_swVersion(void *a1, const char *a2, ...)
{
  return _[a1 swVersion];
}

id objc_msgSend_systemMonitor(void *a1, const char *a2, ...)
{
  return _[a1 systemMonitor];
}

id objc_msgSend_systemPath(void *a1, const char *a2, ...)
{
  return _[a1 systemPath];
}

id objc_msgSend_systemTokenForUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemTokenForUser:");
}

id objc_msgSend_systemTokenStorage(void *a1, const char *a2, ...)
{
  return _[a1 systemTokenStorage];
}

id objc_msgSend_systemUserWithUserID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemUserWithUserID:");
}

id objc_msgSend_taskId(void *a1, const char *a2, ...)
{
  return _[a1 taskId];
}

id objc_msgSend_taskManager(void *a1, const char *a2, ...)
{
  return _[a1 taskManager];
}

id objc_msgSend_taskStatus(void *a1, const char *a2, ...)
{
  return _[a1 taskStatus];
}

id objc_msgSend_taskTransactionMetrics(void *a1, const char *a2, ...)
{
  return _[a1 taskTransactionMetrics];
}

id objc_msgSend_taskType(void *a1, const char *a2, ...)
{
  return _[a1 taskType];
}

id objc_msgSend_tcpHandshakeTimeMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpHandshakeTimeMillisecondsOnInterface:");
}

id objc_msgSend_tcpInfoDescription(void *a1, const char *a2, ...)
{
  return _[a1 tcpInfoDescription];
}

id objc_msgSend_tcpStream_dataReceived_isWakingMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:dataReceived:isWakingMessage:");
}

id objc_msgSend_tcpStream_errorOccured_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:errorOccured:");
}

id objc_msgSend_tcpStream_hasDeterminedServerHostname_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:hasDeterminedServerHostname:");
}

id objc_msgSend_tcpStream_receivedServerBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStream:receivedServerBag:");
}

id objc_msgSend_tcpStreamClass(void *a1, const char *a2, ...)
{
  return _[a1 tcpStreamClass];
}

id objc_msgSend_tcpStreamEndEncountered_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tcpStreamEndEncountered:withReason:");
}

id objc_msgSend_tcpStreamHasConnected_context_enabledPackedFormat_maxEncoderTableSize_maxDecoderTableSize_secureHandshakeEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "tcpStreamHasConnected:context:enabledPackedFormat:maxEncoderTableSize:maxDecoderTableSize:secureHandshakeEnabled:");
}

id objc_msgSend_telemetry(void *a1, const char *a2, ...)
{
  return _[a1 telemetry];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeLimit(void *a1, const char *a2, ...)
{
  return _[a1 timeLimit];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timeoutSource(void *a1, const char *a2, ...)
{
  return _[a1 timeoutSource];
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _[a1 timestamp];
}

id objc_msgSend_timestampForTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestampForTopic:token:");
}

id objc_msgSend_tlsHandshakeTimeMillisecondsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tlsHandshakeTimeMillisecondsOnInterface:");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tokenForEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenForEnvironment:");
}

id objc_msgSend_tokenForInfo_user_persistedInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenForInfo:user:persistedInfo:");
}

id objc_msgSend_tokenGenerateResponseQueue(void *a1, const char *a2, ...)
{
  return _[a1 tokenGenerateResponseQueue];
}

id objc_msgSend_tokenInfoArrayForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokenInfoArrayForTopic:user:");
}

id objc_msgSend_tokenName(void *a1, const char *a2, ...)
{
  return _[a1 tokenName];
}

id objc_msgSend_tokenTopics(void *a1, const char *a2, ...)
{
  return _[a1 tokenTopics];
}

id objc_msgSend_tokensForTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokensForTopic:");
}

id objc_msgSend_tokensForTopic_user_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tokensForTopic:user:error:");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_topicAttributesWithFilter_darkWakeEnabled_pushWakeEnabled_criticalWakeEnabled_ultraConstrainedEnabled_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "topicAttributesWithFilter:darkWakeEnabled:pushWakeEnabled:criticalWakeEnabled:ultraConstrainedEnabled:");
}

id objc_msgSend_topicChosenByPolicyFromTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicChosenByPolicyFromTopics:");
}

id objc_msgSend_topicGroupChange(void *a1, const char *a2, ...)
{
  return _[a1 topicGroupChange];
}

id objc_msgSend_topicHash(void *a1, const char *a2, ...)
{
  return _[a1 topicHash];
}

id objc_msgSend_topicHashForTopic_user_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicHashForTopic:user:");
}

id objc_msgSend_topicManager(void *a1, const char *a2, ...)
{
  return _[a1 topicManager];
}

id objc_msgSend_topicManagerRequestToSendFilter_change_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicManagerRequestToSendFilter:change:");
}

id objc_msgSend_topicName(void *a1, const char *a2, ...)
{
  return _[a1 topicName];
}

id objc_msgSend_topicSaltStore(void *a1, const char *a2, ...)
{
  return _[a1 topicSaltStore];
}

id objc_msgSend_topicStatesForConnectionServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicStatesForConnectionServer:");
}

id objc_msgSend_topics(void *a1, const char *a2, ...)
{
  return _[a1 topics];
}

id objc_msgSend_topicsChanged(void *a1, const char *a2, ...)
{
  return _[a1 topicsChanged];
}

id objc_msgSend_topicsToSaltsWithUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topicsToSaltsWithUser:");
}

id objc_msgSend_total(void *a1, const char *a2, ...)
{
  return _[a1 total];
}

id objc_msgSend_tracingUUID(void *a1, const char *a2, ...)
{
  return _[a1 tracingUUID];
}

id objc_msgSend_trackActivityPresence(void *a1, const char *a2, ...)
{
  return _[a1 trackActivityPresence];
}

id objc_msgSend_trackingState(void *a1, const char *a2, ...)
{
  return _[a1 trackingState];
}

id objc_msgSend_transferOwnershipOfPendingMessagesToHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transferOwnershipOfPendingMessagesToHandler:");
}

id objc_msgSend_triggerCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 triggerCriticalReliability];
}

id objc_msgSend_triggerKeepaliveWakeupEvent_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerKeepaliveWakeupEvent:completion:");
}

id objc_msgSend_triggeringTopic(void *a1, const char *a2, ...)
{
  return _[a1 triggeringTopic];
}

id objc_msgSend_ttl(void *a1, const char *a2, ...)
{
  return _[a1 ttl];
}

id objc_msgSend_ttlBegin(void *a1, const char *a2, ...)
{
  return _[a1 ttlBegin];
}

id objc_msgSend_ttlCollection(void *a1, const char *a2, ...)
{
  return _[a1 ttlCollection];
}

id objc_msgSend_ttlCollection_itemsDidExpire_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ttlCollection:itemsDidExpire:");
}

id objc_msgSend_ttlCollection_itemsDidExpire_withStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ttlCollection:itemsDidExpire:withStates:");
}

id objc_msgSend_ttlEnd(void *a1, const char *a2, ...)
{
  return _[a1 ttlEnd];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_uid(void *a1, const char *a2, ...)
{
  return _[a1 uid];
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_unknown(void *a1, const char *a2, ...)
{
  return _[a1 unknown];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_unsubscribeFromChannels_forTopic_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscribeFromChannels:forTopic:token:");
}

id objc_msgSend_unsubscriptionChannelResponseAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscriptionChannelResponseAtIndex:");
}

id objc_msgSend_unsubscriptionChannelResponses(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannelResponses];
}

id objc_msgSend_unsubscriptionChannelResponsesCount(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannelResponsesCount];
}

id objc_msgSend_unsubscriptionChannels(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannels];
}

id objc_msgSend_unsubscriptionChannelsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsubscriptionChannelsAtIndex:");
}

id objc_msgSend_unsubscriptionChannelsCount(void *a1, const char *a2, ...)
{
  return _[a1 unsubscriptionChannelsCount];
}

id objc_msgSend_updateChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChannel:");
}

id objc_msgSend_updateChannelForIncomingMessageWithData_forTopic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateChannelForIncomingMessageWithData:forTopic:");
}

id objc_msgSend_updateExpirationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateExpirationTime:");
}

id objc_msgSend_updateForReceivedConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateForReceivedConfig:");
}

id objc_msgSend_updateKeepAliveInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateKeepAliveInterval:");
}

id objc_msgSend_updateSafeToSendFilterForce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSafeToSendFilterForce:");
}

id objc_msgSend_updateServerTimeWithTimeInMilliseconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateServerTimeWithTimeInMilliseconds:");
}

id objc_msgSend_urlPrefix(void *a1, const char *a2, ...)
{
  return _[a1 urlPrefix];
}

id objc_msgSend_urlTokenPrefix(void *a1, const char *a2, ...)
{
  return _[a1 urlTokenPrefix];
}

id objc_msgSend_useServerKeepAliveStatsOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useServerKeepAliveStatsOnInterface:");
}

id objc_msgSend_user(void *a1, const char *a2, ...)
{
  return _[a1 user];
}

id objc_msgSend_userAppIDManager(void *a1, const char *a2, ...)
{
  return _[a1 userAppIDManager];
}

id objc_msgSend_userCourier_hasReasonToConnectChangedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userCourier:hasReasonToConnectChangedTo:");
}

id objc_msgSend_userForConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userForConnection:");
}

id objc_msgSend_userID(void *a1, const char *a2, ...)
{
  return _[a1 userID];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_userName(void *a1, const char *a2, ...)
{
  return _[a1 userName];
}

id objc_msgSend_userPreferences(void *a1, const char *a2, ...)
{
  return _[a1 userPreferences];
}

id objc_msgSend_userState(void *a1, const char *a2, ...)
{
  return _[a1 userState];
}

id objc_msgSend_userTracker(void *a1, const char *a2, ...)
{
  return _[a1 userTracker];
}

id objc_msgSend_usingCachedIPAddressOnInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "usingCachedIPAddressOnInterface:");
}

id objc_msgSend_usingServerStats(void *a1, const char *a2, ...)
{
  return _[a1 usingServerStats];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_vapidPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 vapidPublicKey];
}

id objc_msgSend_verboseDescription(void *a1, const char *a2, ...)
{
  return _[a1 verboseDescription];
}

id objc_msgSend_versionToSendFor_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionToSendFor:error:");
}

id objc_msgSend_wakeStateManager(void *a1, const char *a2, ...)
{
  return _[a1 wakeStateManager];
}

id objc_msgSend_wantsCriticalReliability(void *a1, const char *a2, ...)
{
  return _[a1 wantsCriticalReliability];
}

id objc_msgSend_wasCancelled(void *a1, const char *a2, ...)
{
  return _[a1 wasCancelled];
}

id objc_msgSend_wasFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 wasFromStorage];
}

id objc_msgSend_wasInDarkWake(void *a1, const char *a2, ...)
{
  return _[a1 wasInDarkWake];
}

id objc_msgSend_wasInFullWake(void *a1, const char *a2, ...)
{
  return _[a1 wasInFullWake];
}

id objc_msgSend_wasLastMessageFromStorage(void *a1, const char *a2, ...)
{
  return _[a1 wasLastMessageFromStorage];
}

id objc_msgSend_wasSent(void *a1, const char *a2, ...)
{
  return _[a1 wasSent];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakRefWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakRefWithObject:");
}

id objc_msgSend_wifiKeepAliveEarlyFireConstantInterval(void *a1, const char *a2, ...)
{
  return _[a1 wifiKeepAliveEarlyFireConstantInterval];
}

id objc_msgSend_wifiManager(void *a1, const char *a2, ...)
{
  return _[a1 wifiManager];
}

id objc_msgSend_willBeAbleToConnect(void *a1, const char *a2, ...)
{
  return _[a1 willBeAbleToConnect];
}

id objc_msgSend_write_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "write:maxLength:");
}

id objc_msgSend_writeDataInBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataInBackground:");
}

id objc_msgSend_writeDataInBackground_onInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataInBackground:onInterface:");
}