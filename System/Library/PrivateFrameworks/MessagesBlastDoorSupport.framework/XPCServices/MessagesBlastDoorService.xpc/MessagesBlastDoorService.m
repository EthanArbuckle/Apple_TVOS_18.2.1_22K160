}

void sub_100008650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

id sub_100008678(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  id result = [a2 isEqualToString:*(void *)(a1 + 32)];
  if ((_DWORD)result)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
    *(void *)(v12 + 32) = a3;
    *(void *)(v12 + 40) = a4;
    *a7 = 1;
  }

  return result;
}

id sub_100008B20()
{
  if (qword_1000B1788 != -1) {
    dispatch_once(&qword_1000B1788, &stru_1000A2D90);
  }
  return (id)qword_1000B1780;
}

void sub_100008E94(id a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet controlCharacterSet](&OBJC_CLASS___NSCharacterSet, "controlCharacterSet"));
  id v2 = [v1 mutableCopy];

  [v2 invert];
  v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"));
  [v2 formUnionWithCharacterSet:v3];

  [v2 invert];
  WORD2(v7) = 6158;
  LODWORD(v7) = 537731084;
  v4 = -[NSString initWithCharactersNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCharactersNoCopy:length:freeWhenDone:",  &v7,  3LL,  0LL);
  objc_msgSend(v2, "removeCharactersInString:", v4, v7);
  id v5 = [v2 copy];
  v6 = (void *)qword_1000B1780;
  qword_1000B1780 = (uint64_t)v5;
}

void sub_100008F98(id a1)
{
  id v1 = sub_100008B20();
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v5 = [v2 mutableCopy];

  [v5 addCharactersInString:MBDIMAttachmentCharacterString];
  [v5 addCharactersInString:MBDIMBreadcrumbCharacterString];
  id v3 = [v5 copy];
  v4 = (void *)qword_1000B1790;
  qword_1000B1790 = (uint64_t)v3;
}

void sub_100009D20(void *a1, void *a2, void *a3)
{
  id v8 = a1;
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v8]);
  if (v7)
  {
    [v6 setObject:v7 forKey:v8];
    [v5 removeObjectForKey:v8];
  }
}

NSMutableDictionary *MBDIMCopyNormalizedAttributes(void *a1, int a2, int a3)
{
  id v5 = a1;
  id v6 = v5;
  if ((a2 & 1) != 0 || (a3 & 1) != 0)
  {
    uint64_t v7 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v5 count]);
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v6 keyEnumerator]);
    id v8 = [obj countByEnumeratingWithState:&v19 objects:v18 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(obj);
          }
          id v12 = *(id *)(*((void *)&v19 + 1) + 8LL * (void)i);
          v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v12]);
          if (a2)
          {
            uint64_t v14 = objc_claimAutoreleasedReturnValue([v12 lowercaseString]);

            id v12 = (id)v14;
          }

          if (a3)
          {
            uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 lowercaseString]);

            v13 = (void *)v15;
          }

          -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v13, v12);
        }

        id v9 = [obj countByEnumeratingWithState:&v19 objects:v18 count:16];
      }

      while (v9);
    }
  }

  else
  {
    uint64_t v7 = (NSMutableDictionary *)[v5 copy];
  }

  return v7;
}

double transcriptWaveformWidthForDuration(double a1)
{
  if (a1 >= 20.0) {
    return 150.0;
  }
  double v1 = log2(a1 + 1.0) * 50.0 / 4.39231742;
  unint64_t v2 = 75LL;
  return (double)v2;
}

unint64_t powerLevelsCountForWidth(double a1)
{
  return (unint64_t)(a1 / 3.0);
}

AudioMetadata *audioMetadataForFileURL(void *a1)
{
  v88 = a1;
  v87 = objc_alloc_init(&OBJC_CLASS___AudioMetadata);
  v86 = 0LL;
  v85 = 0LL;
  ExtAudioFileRef outExtAudioFile = 0LL;
  memset(&__b, 0, sizeof(__b));
  v84 = malloc(0x8000uLL);
  if (v84)
  {
    if (v88)
    {
      ExtAudioFileOpenURL(v88, &outExtAudioFile);
      if (outExtAudioFile)
      {
        AudioFileID outPropertyData = 0LL;
        UInt32 ioPropertyDataSize = 8;
        OSStatus Property = ExtAudioFileGetProperty(outExtAudioFile, 0x6166696Cu, &ioPropertyDataSize, &outPropertyData);
        if (Property)
        {
          id v4 = sub_10000B2B0();
          v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            id v5 = sub_10000B30C(Property);
            id v74 = (id)objc_claimAutoreleasedReturnValue(v5);
            sub_10000B2F8((uint64_t)v115, (uint64_t)v74);
            _os_log_error_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_ERROR,  "Unable to get audioID: %@",  v115,  0xCu);
          }
        }

        else
        {
          int v98 = 0;
          UInt32 ioDataSize = 4;
          AudioFileGetProperty(outPropertyData, 0x66666D74u, &ioDataSize, &v98);
          BOOL v73 = v98 == 1667327590;
          BOOL v72 = v98 == 1634562662;
          if (v98 == 1667327590 || v98 == 1634562662)
          {
            double v96 = 0.0;
            UInt32 v95 = 8;
            OSStatus v77 = AudioFileGetProperty(outPropertyData, 0x65647572u, &v95, &v96);
            if (v77)
            {
              id v7 = sub_10000B2B0();
              v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
              if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
              {
                id v8 = sub_10000B30C(v77);
                id v69 = (id)objc_claimAutoreleasedReturnValue(v8);
                sub_10000B2F8((uint64_t)v114, (uint64_t)v69);
                _os_log_error_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "Unable to get duration: %@",  v114,  0xCu);
              }
            }

            else
            {
              -[AudioMetadata setDuration:](v87, "setDuration:", v96);
              double v68 = transcriptWaveformWidthForDuration(v96);
              unint64_t v67 = powerLevelsCountForWidth(v68);
              if (v67 && v67 < 0x3E8)
              {
                v85 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  v67);

                if (v85)
                {
                  for (unint64_t i = 0LL; i < v67; ++i)
                  {
                    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  0LL));
                    -[NSMutableArray addObject:](v85, "addObject:", v12);
                  }

                  double v63 = v96 / (double)v67;
                  memset(v94, 0, sizeof(v94));
                  UInt32 v93 = 40;
                  OSStatus v13 = ExtAudioFileGetProperty(outExtAudioFile, 0x66666D74u, &v93, v94);
                  int v78 = v13;
                  if (v13)
                  {
                    id v14 = sub_10000B2B0();
                    v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
                    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v15 = sub_10000B30C(v78);
                      id v61 = (id)objc_claimAutoreleasedReturnValue(v15);
                      sub_10000B2F8((uint64_t)v112, (uint64_t)v61);
                      _os_log_error_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "Unable to get sourceFormat: %@",  v112,  0xCu);
                    }
                  }

                  else if (!v73 || LODWORD(v94[1]) == 1869641075)
                  {
                    if (!v72 || LODWORD(v94[1]) == 1935764850)
                    {
                      memset(inPropertyData, 0, sizeof(inPropertyData));
                      if (v94[0] > 0.0 && v94[0] < 72000.0)
                      {
                        inPropertyData[0] = v94[0];
                        *(void *)&inPropertyData[1] = 0x96C70636DLL;
                        LODWORD(inPropertyData[4]) = 32;
                        *(void *)&inPropertyData[3] = 0x100000004LL;
                        *(void *)&inPropertyData[2] = 0x100000004LL;
                        OSStatus v79 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, inPropertyData);
                        if (v79)
                        {
                          id v22 = sub_10000B2B0();
                          v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
                          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
                          {
                            v23 = sub_10000B30C(v79);
                            id v56 = (id)objc_claimAutoreleasedReturnValue(v23);
                            sub_10000B2F8((uint64_t)v108, (uint64_t)v56);
                            _os_log_error_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_ERROR,  "Unable to set clientFormat: %@",  v108,  0xCu);
                          }
                        }

                        else
                        {
                          double v55 = 0.0;
                          v86 = -[NSMutableArray initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithCapacity:",  v67);

                          if (v86)
                          {
                            for (unint64_t j = 0LL; j < v67; ++j)
                            {
                              LODWORD(v24) = 0;
                              v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithFloat:]( &OBJC_CLASS___NSNumber,  "numberWithFloat:",  v24));
                              -[NSMutableArray addObject:](v86, "addObject:", v26);
                            }

                            do
                            {
                              __b.mNumberBuffers = 1;
                              __b.mBuffers[0].mNumberChannels = 1;
                              __b.mBuffers[0].mDataByteSize = 0x8000;
                              __b.mBuffers[0].mData = v84;
                              UInt32 ioNumberFrames = 0x2000;
                              OSStatus v80 = ExtAudioFileRead(outExtAudioFile, &ioNumberFrames, &__b);
                              if (!v80 && ioNumberFrames)
                              {
                                double v54 = (double)ioNumberFrames / inPropertyData[0];
                                mData = (float *)__b.mBuffers[0].mData;
                                UInt32 v49 = __b.mBuffers[0].mDataByteSize / LODWORD(inPropertyData[3]);
                                for (unsigned int k = 0; k < v49; ++k)
                                {
                                  else {
                                    float v29 = mData[k] * 32767.0;
                                  }
                                  float v47 = v29;
                                  if (v49 == 1) {
                                    double v46 = v55;
                                  }
                                  else {
                                    double v46 = v55 + (double)k / (double)(v49 - 1) * v54;
                                  }
                                  else {
                                    double v30 = v46 / v63;
                                  }
                                  unint64_t v45 = (unint64_t)v30;
                                  v31 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndex:]( v86,  "objectAtIndex:",  (unint64_t)v30));
                                  [v31 floatValue];
                                  double v33 = pow(v32, 2.0);
                                  v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v85, "objectAtIndex:", v45));
                                  double v35 = (double)(unint64_t)[v34 unsignedIntegerValue];
                                  double v36 = pow(v47, 2.0) + v33 * v35;
                                  v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v85, "objectAtIndex:", v45));
                                  *(float *)&double v36 = sqrt( v36 / (double)((unint64_t)[v37 unsignedIntegerValue]
                                                            + 1));

                                  LODWORD(v3_Block_object_dispose(va, 8) = LODWORD(v36);
                                  v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithFloat:]( &OBJC_CLASS___NSNumber,  "numberWithFloat:",  v38));
                                  -[NSMutableArray setObject:atIndexedSubscript:]( v86,  "setObject:atIndexedSubscript:",  v39,  v45);

                                  v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v85, "objectAtIndex:", v45));
                                  v41 = (char *)[v40 unsignedIntegerValue] + 1;

                                  v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v41));
                                  -[NSMutableArray replaceObjectAtIndex:withObject:]( v85,  "replaceObjectAtIndex:withObject:",  v45,  v42);
                                }

                                double v55 = v55 + v54;
                                int v44 = 0;
                              }

                              else
                              {
                                id v27 = sub_10000B2B0();
                                oslog = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
                                if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
                                {
                                  v28 = sub_10000B30C(v80);
                                  id v50 = (id)objc_claimAutoreleasedReturnValue(v28);
                                  sub_10000B2F8((uint64_t)v107, (uint64_t)v50);
                                  _os_log_error_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_ERROR,  "Unable to determine ioNumberFrames: %@",  v107,  0xCu);
                                }

                                int v44 = 2;
                              }
                            }

                            while (!v44);
                          }

                          else
                          {
                            id v25 = sub_10000B2B0();
                            v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
                            if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                            {
                              sub_10000B2F0(v102);
                              _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "Unable to allocate powerLevels",  v102,  2u);
                            }
                          }
                        }
                      }

                      else
                      {
                        id v20 = sub_10000B2B0();
                        v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
                        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                        {
                          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  v94[0]));
                          sub_10000B2F8((uint64_t)v109, (uint64_t)v21);
                          _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "mSampleRate is out of bounds: %@",  v109,  0xCu);
                        }
                      }
                    }

                    else
                    {
                      id v18 = sub_10000B2B0();
                      v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
                      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                      {
                        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  LODWORD(v94[1])));
                        sub_10000B2F8((uint64_t)v110, (uint64_t)v19);
                        _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "Format is not AMR: %@",  v110,  0xCu);
                      }
                    }
                  }

                  else
                  {
                    id v16 = sub_10000B2B0();
                    v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
                    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                    {
                      v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  LODWORD(v94[1])));
                      sub_10000B2F8((uint64_t)v111, (uint64_t)v17);
                      _os_log_error_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "Format is not OPUS: %@",  v111,  0xCu);
                    }
                  }
                }

                else
                {
                  id v11 = sub_10000B2B0();
                  v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
                  if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
                  {
                    sub_10000B2F0(v103);
                    _os_log_error_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "Unable to allocate runningAverageCounts",  v103,  2u);
                  }
                }
              }

              else
              {
                id v9 = sub_10000B2B0();
                v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v67));
                  sub_10000B2F8((uint64_t)v113, (uint64_t)v10);
                  _os_log_error_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_ERROR,  "Failing because powerLevelsCount is out of bounds: %@",  v113,  0xCu);
                }
              }
            }
          }

          else
          {
            id v6 = sub_10000B2B0();
            v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
            if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
            {
              sub_10000B2F0(v104);
              _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "Container is not CAF or AMR.",  v104,  2u);
            }
          }
        }
      }

      else
      {
        id v3 = sub_10000B2B0();
        v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          sub_10000B2F8((uint64_t)v116, (uint64_t)v88);
          _os_log_error_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "Unable to open file url: %@",  v116,  0xCu);
        }
      }
    }

    else
    {
      id v2 = sub_10000B2B0();
      v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        sub_10000B2F0(v105);
        _os_log_error_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "No input file URL", v105, 2u);
      }
    }
  }

  else
  {
    id v1 = sub_10000B2B0();
    v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
    {
      sub_10000B2F0(buf);
      _os_log_error_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_ERROR,  "Couldn't allocate output buffer",  buf,  2u);
    }
  }

  if (outExtAudioFile) {
    ExtAudioFileDispose(outExtAudioFile);
  }
  if (v84) {
    free(v84);
  }
  -[AudioMetadata setPowerLevels:](v87, "setPowerLevels:", v86);
  v89 = v87;

  return v89;
}

id sub_10000B2B0()
{
  if (qword_1000B17A0 != -1) {
    dispatch_once(&qword_1000B17A0, &stru_1000A2DD0);
  }
  return (id)qword_1000B17A8;
}

_WORD *sub_10000B2F0(_WORD *result)
{
  *id result = 0;
  return result;
}

double sub_10000B2F8(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 138412290LL;
  *(_DWORD *)a1 = 138412290;
  *(void *)(a1 + 4) = a2;
  return result;
}

CFStringRef sub_10000B30C(int a1)
{
  if ((a1 & 0x80000000) == 0)
  {
    if (a1 > 561213538)
    {
      if (a1 == 561213539) {
        return @"kAudioServicesBadSpecifierSizeError";
      }
      if (a1 == 1886681407) {
        return @"kAudioServicesUnsupportedPropertyError";
      }
    }

    else
    {
      if (!a1) {
        return @"kAudioServicesNoError";
      }
      if (a1 == 561211770) {
        return @"kAudioServicesBadPropertySizeError";
      }
    }

    return @"Unknown Error";
  }

  if (a1 == -1502) {
    return @"kAudioServicesSystemSoundExceededMaximumDurationError";
  }
  if (a1 != -1501)
  {
    if (a1 == -1500) {
      return @"kAudioServicesSystemSoundUnspecifiedError";
    }
    return @"Unknown Error";
  }

  return @"kAudioServicesSystemSoundClientTimedOutError";
}

void sub_10000B3CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Messages.blastdoor", "AudioPreviewLevelsGenerator");
  id v2 = (void *)qword_1000B17A8;
  qword_1000B17A8 = (uint64_t)v1;
}

id SMSCopySanitizedContentLocation(void *a1)
{
  id v1 = a1;
  if ([v1 hasPrefix:@"cid:"])
  {
    id v2 = [v1 mutableCopy];
    objc_msgSend( v2,  "replaceOccurrencesOfString:withString:options:range:",  @"cid:",  &stru_1000A8D68,  2,  0,  objc_msgSend(@"cid:", "length"));
  }

  else
  {
    id v2 = v1;
  }

  return v2;
}

void sub_10000B5CC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___MBDXMLParser);
  id v2 = (void *)qword_1000B17B0;
  qword_1000B17B0 = (uint64_t)v1;
}

id sub_10000B7E0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v3 reset];
  id v5 = -[NSXMLParser initWithData:](objc_alloc(&OBJC_CLASS___NSXMLParser), "initWithData:", v4);

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 8);
  *(void *)(v6 + _Block_object_dispose(va, 8) = v5;

  id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 32);
  *(void *)(v9 + 32) = v8;

  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 24);
  *(void *)(v11 + 24) = 0LL;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setDelegate:");
  return _[*(id *)(*(void *)(a1 + 32) + 8) parse];
}

void sub_10000B888(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 8) setDelegate:0];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 8);
  *(void *)(v6 + _Block_object_dispose(va, 8) = 0LL;
}

objc_class *sub_10000BE44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___MBDXMLParserContext);
  uint64_t v5 = objc_opt_class(*(void *)(a1 + 32));
  if (v5 == v4)
  {
LABEL_5:
    id v12 = 0LL;
  }

  else
  {
    Superclass = (objc_class *)v5;
    while (1)
    {
      IMP MethodImplementation = class_getMethodImplementation(Superclass, "name");
      uint64_t v8 = (uint64_t)MethodImplementation(*(id *)(a1 + 32), "name");
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@_%@_Frame",  v9,  a2);
      Class v11 = NSClassFromString(v10);
      if (v11) {
        break;
      }
      Superclass = class_getSuperclass(Superclass);

      if (Superclass == (objc_class *)v4) {
        goto LABEL_5;
      }
    }

    id v12 = v11;
  }

  return v12;
}

NSMutableDictionary *MBDIMCreateDictionaryFromCSSString(void *a1, char a2)
{
  id v2 = a1;
  if (v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v4 = (char *)[v2 lengthOfBytesUsingEncoding:4];
    if (v4)
    {
      uint64_t v5 = v4 + 1;
      uint64_t v6 = (NSMutableDictionary *)malloc((size_t)(v4 + 1));
      if (!v6) {
        goto LABEL_40;
      }
      if ([v2 getCString:v6 maxLength:v5 encoding:4])
      {
        id v7 = 0LL;
        uint64_t v8 = 0LL;
        float v29 = v6;
        while (1)
        {
          unsigned int isa_low = LOBYTE(v6->super.super.isa);
          if (!LOBYTE(v6->super.super.isa)) {
            goto LABEL_12;
          }
          uint64_t v10 = v6;
          if (isa_low <= 0x39) {
            goto LABEL_44;
          }
          if (isa_low == 58)
          {
            Class v11 = 0LL;
            uint64_t v10 = (NSMutableDictionary *)((char *)&v6->super.super.isa + 1);
            id v12 = v8;
            uint64_t v8 = v7;
            goto LABEL_31;
          }

          uint64_t v10 = v6;
          if (isa_low >= 0x3C)
          {
LABEL_44:
            do
            {
              unsigned int v14 = BYTE1(v10->super.super.isa);
              uint64_t v10 = (NSMutableDictionary *)((char *)v10 + 1);
            }

            while (byte_10008D124[v14] < 0);
            unint64_t v15 = (unint64_t)&v10[-1].super.super.isa + 7;
            id v16 = v6;
            if (v6 < v10)
            {
              while (1)
              {
                unsigned int v17 = LOBYTE(v6->super.super.isa);
                BOOL v18 = v17 > 0x27;
                uint64_t v19 = (1LL << v17) & 0x8500002600LL;
                if (v18 || v19 == 0) {
                  break;
                }
                id v16 = (NSMutableDictionary *)((char *)&v6->super.super.isa + 1);
                BOOL v21 = (unint64_t)v6 >= v15;
                uint64_t v6 = (NSMutableDictionary *)((char *)v6 + 1);
                if (v21) {
                  goto LABEL_23;
                }
              }

              id v16 = v6;
            }

LABEL_23:
            unint64_t v22 = (unint64_t)v10;
            if (v15 > (unint64_t)v16)
            {
              unint64_t v23 = (unint64_t)v10;
              unint64_t v22 = (unint64_t)v10;
              while (1)
              {
                unsigned int v24 = *(unsigned __int8 *)--v22;
                uint64_t v25 = (1LL << v24) & 0x8500002600LL;
                if (v24 > 0x27 || v25 == 0) {
                  break;
                }
                unint64_t v23 = v22;
              }

              unint64_t v22 = v23;
            }

    Class v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_24:
    int v27 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v22);
    float v29 = *v27;
    v28 = v27[1];
    double v30 = *(_BYTE *)(*(void *)(v5 + 56) + v22);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v27[1]);
    }
    Hasher.init(_seed:)(v39, *(void *)(v8 + 40));
    String.hash(into:)(v39, v29, v28);
    double result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    unsigned int v17 = result & ~v16;
    BOOL v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v31 = 0;
      float v32 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        double v33 = v18 == v32;
        if (v18 == v32) {
          BOOL v18 = 0LL;
        }
        v31 |= v33;
        v34 = *(void *)(v13 + 8 * v18);
      }

      while (v34 == -1);
      uint64_t v19 = __clz(__rbit64(~v34)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    id v20 = (void *)(*(void *)(v8 + 48) + 16 * v19);
    *id v20 = v29;
    v20[1] = v28;
    *(_BYTE *)(*(void *)(v8 + 56) + v19) = v30;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  id v3 = v36;
  unsigned int v24 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  double v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unsigned int v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_41:
  double result = swift_release(v5);
  NSMutableDictionary *v3 = v8;
  return result;
}

    v34 = v29;
    sub_100012AA8(v29, v30);
    sub_100012AA8(v32, v33);
    sub_100012B98(v34, v30);
    double v35 = v32;
    double v36 = v33;
LABEL_30:
    sub_100012B98(v35, v36);
    goto LABEL_31;
  }

  if (v33 >> 60 != 15) {
    goto LABEL_23;
  }
LABEL_25:
  double v38 = v12[9];
  v39 = *(void *)(a1 + v38);
  v40 = *(void *)(a1 + v38 + 8);
  v41 = (uint64_t *)(a2 + v38);
  v42 = *v41;
  v43 = v41[1];
  if (v40 >> 60 == 15)
  {
    if (v43 >> 60 == 15) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  if (v43 >> 60 == 15)
  {
LABEL_29:
    sub_100012AA8(v39, v40);
    sub_100012AA8(v42, v43);
    sub_100012B98(v39, v40);
    double v35 = v42;
    double v36 = v43;
    goto LABEL_30;
  }

  sub_100012AA8(v39, v40);
  sub_100012AA8(v42, v43);
  sub_100038150(v39, v40);
  LODWORD(v52) = v46;
  sub_100012B98(v42, v43);
  sub_100012B98(v39, v40);
  if ((v52 & 1) != 0)
  {
LABEL_34:
    float v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
    v47(v10, a1, v4);
    v47(v8, a2, v4);
    v48 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    int v44 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v48);
    UInt32 v49 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v49(v8, v4);
    v49(v10, v4);
    return v44 & 1;
  }

LABEL_30:
            Class v11 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v16,  v22 - (void)v16,  4LL,  v29);
            id v12 = v7;
LABEL_31:

            id v7 = v11;
            uint64_t v6 = v10;
          }

          else
          {
LABEL_12:
            if (v8 && v7)
            {
              if ((a2 & 1) != 0)
              {
                OSStatus v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSString lowercaseString](v8, "lowercaseString"));
                -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v7, v13);
              }

              else
              {
                -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v7, v8);
              }
            }

            id v7 = 0LL;
            uint64_t v8 = 0LL;
            int v27 = LOBYTE(v6->super.super.isa);
            uint64_t v6 = (NSMutableDictionary *)((char *)v6 + 1);
            if (!v27)
            {
              free(v29);
              uint64_t v6 = v3;
              goto LABEL_40;
            }
          }
        }
      }

      free(v6);
    }

    uint64_t v6 = 0LL;
LABEL_40:
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

  double result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  double result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_6:
  [v14 setBaseWritingDirection:v19];
}

id extractFirstContactFromData(uint64_t a1)
{
  uint64_t v7 = 0LL;
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[CNContactVCardSerialization summaryOfVCard:error:]( &OBJC_CLASS___CNContactVCardSerialization,  "summaryOfVCard:error:",  a1,  &v7));
  id v2 = v1;
  id v3 = 0LL;
  if (v7) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v1 == 0LL;
  }
  if (!v4)
  {
    if ([v1 contactCount])
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 avatarContacts]);
      id v3 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
    }

    else
    {
      id v3 = 0LL;
    }
  }

  return v3;
}

int main(int argc, const char **argv, const char **envp)
{
  v101 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for RelayGroupMutationMessageUnpacker(0LL);
  uint64_t v100 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SatelliteSMSTextMessageUnpacker(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LiteTextMessageUnpacker(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin();
  unint64_t v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  register_for_dlsym_callbacks(v13);
  _CFPrefsSetDirectModeEnabled(1LL);
  _CFPrefsSetReadOnly(1LL);
  type metadata accessor for BlastDoorServer(0LL);
  qword_1000BC000 = static BlastDoorServer.service.getter();
  qword_1000BC008 = (uint64_t)&off_1000A2FE0;
  BlastDoorServer.setImageRestrictions(allowedImageFormats:increasedRestrictions:)( (Swift::OpaquePointer)&off_1000A2FE0,  0);
  qword_1000BC010 = (uint64_t)&off_1000A3270;
  BlastDoorServer.setVideoRestrictions(codecs:)((Swift::OpaquePointer)&off_1000A3270);
  uint64_t v16 = type metadata accessor for MarkUnreadRequest(0LL);
  unint64_t v17 = sub_10000E664();
  BlastDoorServer.register<A, B>(unpacker:for:)(v17, v16, &type metadata for MarkUnreadRequestUnpacker, v16, v17);
  uint64_t v18 = type metadata accessor for RecoverJunkCommand(0LL);
  unint64_t v19 = sub_10000E6A8();
  BlastDoorServer.register<A, B>(unpacker:for:)(v19, v18, &type metadata for RecoverJunkCommandUnpacker, v18, v19);
  uint64_t v20 = type metadata accessor for RepositionStickerCommand(0LL);
  unint64_t v21 = sub_10000E6EC();
  BlastDoorServer.register<A, B>(unpacker:for:)(v21, v20, &type metadata for RepositionStickerCommandUnpacker, v20, v21);
  uint64_t v22 = type metadata accessor for DeliveryReceipt(0LL);
  unint64_t v23 = sub_10000E730();
  BlastDoorServer.register<A, B>(unpacker:for:)(v23, v22, &type metadata for DeliveryReceiptUnpacker, v22, v23);
  uint64_t Receipt = type metadata accessor for ReadReceipt(0LL);
  unint64_t v25 = sub_10000E774();
  BlastDoorServer.register<A, B>(unpacker:for:)(v25, Receipt, &type metadata for ReadReceiptUnpacker, Receipt, v25);
  uint64_t v26 = type metadata accessor for PlayedReceipt(0LL);
  unint64_t v27 = sub_10000E7B8();
  BlastDoorServer.register<A, B>(unpacker:for:)(v27, v26, &type metadata for PlayedReceiptUnpacker, v26, v27);
  uint64_t v28 = type metadata accessor for DeliveredQuietlyReceipt(0LL);
  unint64_t v29 = sub_10000E7FC();
  BlastDoorServer.register<A, B>(unpacker:for:)(v29, v28, &type metadata for DeliveredQuietlyReceiptUnpacker, v28, v29);
  uint64_t v30 = type metadata accessor for NotifyRecipientCommand(0LL);
  unint64_t v31 = sub_10000E840();
  BlastDoorServer.register<A, B>(unpacker:for:)(v31, v30, &type metadata for NotifyRecipientCommandUnpacker, v30, v31);
  uint64_t v32 = type metadata accessor for EditMessageCommand(0LL);
  unint64_t v33 = sub_10000E884();
  BlastDoorServer.register<A, B>(unpacker:for:)(v33, v32, &type metadata for EditMessageCommandUnpacker, v32, v33);
  uint64_t v34 = type metadata accessor for ErrorMessage(0LL);
  unint64_t v35 = sub_10000E8C8();
  BlastDoorServer.register<A, B>(unpacker:for:)(v35, v34, &type metadata for ErrorMessageUnpacker, v34, v35);
  uint64_t v36 = type metadata accessor for TextMessage(0LL);
  unint64_t v37 = sub_10000E90C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v37, v36, &type metadata for TextMessageUnpacker, v36, v37);
  uint64_t v38 = type metadata accessor for SMSMessage(0LL);
  unint64_t v39 = sub_10000E950();
  BlastDoorServer.register<A, B>(unpacker:for:)(v39, v38, &type metadata for SMSMessageUnpacker, v38, v39);
  uint64_t v40 = type metadata accessor for SMSFilteringSettingsMessage(0LL);
  unint64_t v41 = sub_10000E994();
  uint64_t v42 = BlastDoorServer.register<A, B>(unpacker:for:)( v41,  v40,  &type metadata for SMSFilteringSettingsMessageUnpacker,  v40,  v41);
  LiteTextMessageUnpacker.init()(v42);
  uint64_t v43 = type metadata accessor for LiteTextMessage(0LL);
  uint64_t v44 = sub_10000E9D8( &qword_1000AFD60,  (uint64_t (*)(uint64_t))&type metadata accessor for LiteTextMessageUnpacker,  (uint64_t)&protocol conformance descriptor for LiteTextMessageUnpacker);
  BlastDoorServer.register<A, B>(unpacker:for:)(v15, v43, v11, v43, v44);
  uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  SatelliteSMSTextMessageUnpacker.init()(v45);
  uint64_t v46 = type metadata accessor for SatelliteSMSTextMessage(0LL);
  uint64_t v47 = sub_10000E9D8( &qword_1000AFD68,  (uint64_t (*)(uint64_t))&type metadata accessor for SatelliteSMSTextMessageUnpacker,  (uint64_t)&protocol conformance descriptor for SatelliteSMSTextMessageUnpacker);
  BlastDoorServer.register<A, B>(unpacker:for:)(v10, v46, v7, v46, v47);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v48 = type metadata accessor for CrossServiceAssociationMessage(0LL);
  unint64_t v49 = sub_10000EA18();
  BlastDoorServer.register<A, B>(unpacker:for:)( v49,  v48,  &type metadata for CrossServiceAssociationMessageUnpacker,  v48,  v49);
  uint64_t v50 = type metadata accessor for StyleSheet(0LL);
  unint64_t v51 = sub_10000EA5C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v51, v50, &type metadata for StyleSheetUnpacker, v50, v51);
  uint64_t v52 = type metadata accessor for ScheduledMessageUpdate(0LL);
  unint64_t v53 = sub_10000EAA0();
  uint64_t v54 = BlastDoorServer.register<A, B>(unpacker:for:)( v53,  v52,  &type metadata for ScheduledMessageUpdateUnpacker,  v52,  v53);
  RelayGroupMutationMessageUnpacker.init()(v54);
  uint64_t v55 = type metadata accessor for RelayGroupMutationMessage(0LL);
  uint64_t v56 = sub_10000E9D8( &qword_1000AFD88,  (uint64_t (*)(uint64_t))&type metadata accessor for RelayGroupMutationMessageUnpacker,  (uint64_t)&protocol conformance descriptor for RelayGroupMutationMessageUnpacker);
  BlastDoorServer.register<A, B>(unpacker:for:)(v6, v55, v4, v55, v56);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v6, v4);
  uint64_t v57 = type metadata accessor for RelayReachabilityRequest(0LL);
  unint64_t v58 = sub_10000EAE4();
  BlastDoorServer.register<A, B>(unpacker:for:)(v58, v57, &type metadata for RelayReachabilityRequestUnpacker, v57, v58);
  uint64_t v59 = type metadata accessor for RelayReachabilityResponse(0LL);
  unint64_t v60 = sub_10000EB28();
  BlastDoorServer.register<A, B>(unpacker:for:)( v60,  v59,  &type metadata for RelayReachabilityResponseUnpacker,  v59,  v60);
  uint64_t v61 = type metadata accessor for CombinedPluginAttachment(0LL);
  unint64_t v62 = sub_10000EB6C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v62, v61, &type metadata for CombinedPluginAttachmentUnpacker, v61, v62);
  uint64_t v63 = type metadata accessor for AnimatedImageMetadata(0LL);
  unint64_t v64 = sub_10000EBB0();
  BlastDoorServer.register<A, B>(unpacker:for:)(v64, v63, &type metadata for AnimatedImageMetadataUnpacker, v63, v64);
  uint64_t v65 = type metadata accessor for EmojiImageMetadata(0LL);
  unint64_t v66 = sub_10000EBF4();
  BlastDoorServer.register<A, B>(unpacker:for:)(v66, v65, &type metadata for EmojiImageMetadataUnpacker, v65, v66);
  uint64_t v67 = type metadata accessor for LargeImage(0LL);
  unint64_t v68 = sub_10000EC38();
  BlastDoorServer.register<A, B>(unpacker:for:)(v68, v67, &type metadata for LargeImageUnpacker, v67, v68);
  uint64_t v69 = type metadata accessor for MediaMetadata(0LL);
  unint64_t v70 = sub_10000EC7C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v70, v69, &type metadata for MediaMetadataUnpacker, v69, v70);
  uint64_t v71 = type metadata accessor for PreviewImage(0LL);
  unint64_t v72 = sub_10000ECC0();
  BlastDoorServer.register<A, B>(unpacker:for:)(v72, v71, &type metadata for PreviewImageUnpacker, v71, v72);
  uint64_t v73 = type metadata accessor for AnimatedImageFrame(0LL);
  unint64_t v74 = sub_10000ED04();
  BlastDoorServer.register<A, B>(unpacker:for:)(v74, v73, &type metadata for AnimatedImageUnpacker, v73, v74);
  strcpy(v102, "maps.apple.com");
  v102[15] = -18;
  uint64_t v103 = 0x6F6F672E7370616DLL;
  unint64_t v104 = 0xEF6D6F632E656C67LL;
  uint64_t v105 = 27756LL;
  unint64_t v106 = 0xE200000000000000LL;
  uint64_t v107 = 7105651LL;
  unint64_t v108 = 0xE300000000000000LL;
  uint64_t v109 = 113LL;
  unint64_t v110 = 0xE100000000000000LL;
  unint64_t v111 = 0xD000000000000013LL;
  unint64_t v112 = 0x800000010008A3C0LL;
  uint64_t v75 = type metadata accessor for LocationCoordinate2D(0LL);
  unint64_t v76 = sub_10000ED48();
  BlastDoorServer.register<A, B>(unpacker:for:)(v102, v75, &type metadata for MapPreviewUnpacker, v75, v76);
  uint64_t v77 = type metadata accessor for VideoPreview(0LL);
  unint64_t v78 = sub_10000ED8C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v78, v77, &type metadata for VideoPreviewUnpacker, v77, v78);
  uint64_t v79 = type metadata accessor for WatchfacePreview(0LL);
  unint64_t v80 = sub_10000EDD0();
  BlastDoorServer.register<A, B>(unpacker:for:)(v80, v79, &type metadata for WatchfacePreviewUnpacker, v79, v80);
  uint64_t v81 = type metadata accessor for ContactMessage(0LL);
  unint64_t v82 = sub_10000EE14();
  BlastDoorServer.register<A, B>(unpacker:for:)(v82, v81, &type metadata for ContactMessageUnpacker, v81, v82);
  uint64_t v83 = type metadata accessor for PassPreview(0LL);
  unint64_t v84 = sub_10000EE58();
  BlastDoorServer.register<A, B>(unpacker:for:)(v84, v83, &type metadata for PassPreviewUnpacker, v83, v84);
  uint64_t v85 = type metadata accessor for PreviewAudio(0LL);
  unint64_t v86 = sub_10000EE9C();
  BlastDoorServer.register<A, B>(unpacker:for:)(v86, v85, &type metadata for PreviewAudioUnpacker, v85, v86);
  uint64_t v87 = type metadata accessor for SyndicationAction(0LL);
  unint64_t v88 = sub_10000EEE0();
  BlastDoorServer.register<A, B>(unpacker:for:)(v88, v87, &type metadata for SyndicationActionUnpacker, v87, v88);
  uint64_t v89 = type metadata accessor for Nickname(0LL);
  unint64_t v90 = sub_10000EF24();
  BlastDoorServer.register<A, B>(unpacker:for:)(v90, v89, &type metadata for NicknameDataUnpacker, v89, v90);
  uint64_t v91 = type metadata accessor for ChatSessionClose(0LL);
  unint64_t v92 = sub_10000EF68();
  BlastDoorServer.register<A, B>(unpacker:for:)(v92, v91, &type metadata for ChatSessionCloseUnpacker, v91, v92);
  uint64_t v93 = type metadata accessor for VideoMessageMetadata(0LL);
  unint64_t v94 = sub_10000EFAC();
  BlastDoorServer.register<A, B>(unpacker:for:)(v94, v93, &type metadata for VideoMessageMetadataUnpacker, v93, v94);
  uint64_t v95 = enum case for SandboxID.blastdoor(_:);
  uint64_t v96 = type metadata accessor for SandboxID(0LL);
  uint64_t v97 = *(void *)(v96 - 8);
  uint64_t v98 = (uint64_t)v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v97 + 104))(v101, v95, v96);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v97 + 56))(v98, 0LL, 1LL, v96);
  dispatch thunk of BlastDoorServer.resume(sandboxID:)(v98);
  sub_10000EFF0(v98);
  return 0;
}

uint64_t sub_10000E624(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_10000E664()
{
  unint64_t result = qword_1000AFCF8;
  if (!qword_1000AFCF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091DF8, &type metadata for MarkUnreadRequestUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFCF8);
  }

  return result;
}

unint64_t sub_10000E6A8()
{
  unint64_t result = qword_1000AFD00;
  if (!qword_1000AFD00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000903D8, &type metadata for RecoverJunkCommandUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD00);
  }

  return result;
}

unint64_t sub_10000E6EC()
{
  unint64_t result = qword_1000AFD08;
  if (!qword_1000AFD08)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092800, &type metadata for RepositionStickerCommandUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD08);
  }

  return result;
}

unint64_t sub_10000E730()
{
  unint64_t result = qword_1000AFD10;
  if (!qword_1000AFD10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008D914, &type metadata for DeliveryReceiptUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD10);
  }

  return result;
}

unint64_t sub_10000E774()
{
  unint64_t result = qword_1000AFD18;
  if (!qword_1000AFD18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DF10, &type metadata for ReadReceiptUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD18);
  }

  return result;
}

unint64_t sub_10000E7B8()
{
  unint64_t result = qword_1000AFD20;
  if (!qword_1000AFD20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008D984, &type metadata for PlayedReceiptUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD20);
  }

  return result;
}

unint64_t sub_10000E7FC()
{
  unint64_t result = qword_1000AFD28;
  if (!qword_1000AFD28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E37C, &type metadata for DeliveredQuietlyReceiptUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD28);
  }

  return result;
}

unint64_t sub_10000E840()
{
  unint64_t result = qword_1000AFD30;
  if (!qword_1000AFD30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000917CC, &type metadata for NotifyRecipientCommandUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD30);
  }

  return result;
}

unint64_t sub_10000E884()
{
  unint64_t result = qword_1000AFD38;
  if (!qword_1000AFD38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090448, &type metadata for EditMessageCommandUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD38);
  }

  return result;
}

unint64_t sub_10000E8C8()
{
  unint64_t result = qword_1000AFD40;
  if (!qword_1000AFD40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DC64, &type metadata for ErrorMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD40);
  }

  return result;
}

unint64_t sub_10000E90C()
{
  unint64_t result = qword_1000AFD48;
  if (!qword_1000AFD48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000911B4, &type metadata for TextMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD48);
  }

  return result;
}

unint64_t sub_10000E950()
{
  unint64_t result = qword_1000AFD50;
  if (!qword_1000AFD50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DAA4, &type metadata for SMSMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD50);
  }

  return result;
}

unint64_t sub_10000E994()
{
  unint64_t result = qword_1000AFD58;
  if (!qword_1000AFD58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092090, &type metadata for SMSFilteringSettingsMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD58);
  }

  return result;
}

uint64_t sub_10000E9D8(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10000EA18()
{
  unint64_t result = qword_1000AFD70;
  if (!qword_1000AFD70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091B04, &type metadata for CrossServiceAssociationMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD70);
  }

  return result;
}

unint64_t sub_10000EA5C()
{
  unint64_t result = qword_1000AFD78;
  if (!qword_1000AFD78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091834, &type metadata for StyleSheetUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD78);
  }

  return result;
}

unint64_t sub_10000EAA0()
{
  unint64_t result = qword_1000AFD80;
  if (!qword_1000AFD80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008D83C, &type metadata for ScheduledMessageUpdateUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD80);
  }

  return result;
}

unint64_t sub_10000EAE4()
{
  unint64_t result = qword_1000AFD90;
  if (!qword_1000AFD90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FBE4, &type metadata for RelayReachabilityRequestUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD90);
  }

  return result;
}

unint64_t sub_10000EB28()
{
  unint64_t result = qword_1000AFD98;
  if (!qword_1000AFD98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DA54, &type metadata for RelayReachabilityResponseUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFD98);
  }

  return result;
}

unint64_t sub_10000EB6C()
{
  unint64_t result = qword_1000AFDA0;
  if (!qword_1000AFDA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091144, &type metadata for CombinedPluginAttachmentUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDA0);
  }

  return result;
}

unint64_t sub_10000EBB0()
{
  unint64_t result = qword_1000AFDA8;
  if (!qword_1000AFDA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000907F0, &type metadata for AnimatedImageMetadataUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDA8);
  }

  return result;
}

unint64_t sub_10000EBF4()
{
  unint64_t result = qword_1000AFDB0;
  if (!qword_1000AFDB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090B5C, &type metadata for EmojiImageMetadataUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDB0);
  }

  return result;
}

unint64_t sub_10000EC38()
{
  unint64_t result = qword_1000AFDB8;
  if (!qword_1000AFDB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091754, &type metadata for LargeImageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDB8);
  }

  return result;
}

unint64_t sub_10000EC7C()
{
  unint64_t result = qword_1000AFDC0;
  if (!qword_1000AFDC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092018, &type metadata for MediaMetadataUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDC0);
  }

  return result;
}

unint64_t sub_10000ECC0()
{
  unint64_t result = qword_1000AFDC8;
  if (!qword_1000AFDC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091D88, &type metadata for PreviewImageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDC8);
  }

  return result;
}

unint64_t sub_10000ED04()
{
  unint64_t result = qword_1000AFDD0;
  if (!qword_1000AFDD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090368, &type metadata for AnimatedImageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDD0);
  }

  return result;
}

unint64_t sub_10000ED48()
{
  unint64_t result = qword_1000AFDD8;
  if (!qword_1000AFDD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E1A4, &type metadata for MapPreviewUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDD8);
  }

  return result;
}

unint64_t sub_10000ED8C()
{
  unint64_t result = qword_1000AFDE0;
  if (!qword_1000AFDE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E308, &type metadata for VideoPreviewUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDE0);
  }

  return result;
}

unint64_t sub_10000EDD0()
{
  unint64_t result = qword_1000AFDE8;
  if (!qword_1000AFDE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000914CC, &type metadata for WatchfacePreviewUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDE8);
  }

  return result;
}

unint64_t sub_10000EE14()
{
  unint64_t result = qword_1000AFDF0;
  if (!qword_1000AFDF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DB18, &type metadata for ContactMessageUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDF0);
  }

  return result;
}

unint64_t sub_10000EE58()
{
  unint64_t result = qword_1000AFDF8;
  if (!qword_1000AFDF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DBC4, &type metadata for PassPreviewUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFDF8);
  }

  return result;
}

unint64_t sub_10000EE9C()
{
  unint64_t result = qword_1000AFE00;
  if (!qword_1000AFE00)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008D4C8, &type metadata for PreviewAudioUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFE00);
  }

  return result;
}

unint64_t sub_10000EEE0()
{
  unint64_t result = qword_1000AFE08;
  if (!qword_1000AFE08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FC4C, &type metadata for SyndicationActionUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFE08);
  }

  return result;
}

unint64_t sub_10000EF24()
{
  unint64_t result = qword_1000AFE10;
  if (!qword_1000AFE10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091A78, &type metadata for NicknameDataUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFE10);
  }

  return result;
}

unint64_t sub_10000EF68()
{
  unint64_t result = qword_1000AFE18;
  if (!qword_1000AFE18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000900EC, &type metadata for ChatSessionCloseUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFE18);
  }

  return result;
}

unint64_t sub_10000EFAC()
{
  unint64_t result = qword_1000AFE20;
  if (!qword_1000AFE20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EA20, &type metadata for VideoMessageMetadataUnpacker);
    atomic_store(result, (unint64_t *)&qword_1000AFE20);
  }

  return result;
}

uint64_t sub_10000EFF0(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000AFCF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t variable initialization expression of MessageEditedPartDictionary.xhtmlBody()
{
  return 0LL;
}

__n128 sub_10000F03C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t sub_10000F074(uint64_t a1, uint64_t a2)
{
  return sub_10000F13C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10000F080(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10000F0C0(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  Swift::Int v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10000F130(uint64_t a1, uint64_t a2)
{
  return sub_10000F13C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10000F13C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10000F178(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_10000F1EC(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10000F268@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_10000F2A8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10000F330@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000F374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10000F39C(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8( &qword_1000AFE50,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_10008D334);
  uint64_t v3 = sub_10000E9D8( &qword_1000AFE58,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_10008D2D4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000F420()
{
  return sub_10000E9D8( &qword_1000AFE38,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_10008D298);
}

uint64_t sub_10000F44C()
{
  return sub_10000E9D8( &qword_1000AFE40,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_10008D26C);
}

uint64_t sub_10000F478()
{
  return sub_10000E9D8( &qword_1000AFE48,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_10008D308);
}

uint64_t initializeBufferWithCopyOfBuffer for GroupContextDictionary(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for EmergencySOSChatSessionCloseDictionary.EufoDictionary(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000F4E8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000F508(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

uint64_t sub_10000F554(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000F574(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 sub_10000F5B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000F5C4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10000F5E4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMTime(uint64_t a1)
{
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CGImageSource(uint64_t a1)
{
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
}

void sub_10000F674(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

ValueMetadata *type metadata accessor for PreviewAudioUnpacker()
{
  return &type metadata for PreviewAudioUnpacker;
}

unint64_t sub_10000F6D4()
{
  unint64_t result = qword_1000AFE98;
  if (!qword_1000AFE98)
  {
    uint64_t v1 = type metadata accessor for PreviewAudio(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PreviewAudio, v1);
    atomic_store(result, (unint64_t *)&qword_1000AFE98);
  }

  return result;
}

uint64_t sub_10000F71C()
{
  return 1LL;
}

Swift::Int sub_10000F724()
{
  return Hasher._finalize()();
}

void sub_10000F764()
{
}

Swift::Int sub_10000F788(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_10000F7D4()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  char v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Path(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin();
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = File.path.getter(v6);
  Path.fileURL.getter(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  URL._bridgeToObjectiveC()(v10);
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v13 = audioMetadataForFileURL(v12);

  if (v13)
  {
    uint64_t v14 = -[AudioMetadata powerLevels](v13, "powerLevels");
    if (v14)
    {
      unint64_t v15 = v14;
      unint64_t v16 = sub_10000FC7C();
      unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

      uint64_t v18 = sub_10000F990(v17);
      swift_bridgeObjectRelease(v17);
      if (v18)
      {
        -[AudioMetadata duration](v13, "duration");
        PreviewAudio.init(durationValue:powerLevelValues:)(v18);

        return;
      }
    }
  }

  unint64_t v19 = sub_10000FC38();
  swift_allocError(&type metadata for PreviewAudioUnpacker.PreviewAudioUnpackerError, v19, 0LL, 0LL);
  swift_willThrow();
}

void *sub_10000F990(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    unint64_t v25 = &_swiftEmptyArrayStorage;
    sub_10005DB94(0, v3 & ~(v3 >> 63), 0);
    uint64_t v4 = v25;
    if (v2) {
      break;
    }
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v2) {
      return v4;
    }
LABEL_10:
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; ; ++i)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v1);
        uint64_t v8 = i + 1;
        if (__OFADD__(i, 1LL)) {
          break;
        }
        uint64_t v9 = v7;
        int v23 = 0;
        char v24 = 1;
        static Float._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v23);
        swift_unknownObjectRelease(v9);
        if (v24 == 1) {
          goto LABEL_25;
        }
        int v10 = v23;
        unint64_t v25 = v4;
        unint64_t v12 = v4[2];
        unint64_t v11 = v4[3];
        if (v12 >= v11 >> 1)
        {
          sub_10005DB94(v11 > 1, v12 + 1, 1);
          uint64_t v4 = v25;
        }

        v4[2] = v12 + 1;
        *((_DWORD *)v4 + v12 + _Block_object_dispose(va, 8) = v10;
        if (v8 == v2) {
          return v4;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v13 = 0LL;
      uint64_t v14 = v1 + 32;
      while (1)
      {
        uint64_t v15 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          break;
        }
        unint64_t v16 = *(void **)(v14 + 8 * v13);
        int v23 = 0;
        char v24 = 1;
        id v17 = v16;
        ((void (*)(void))static Float._conditionallyBridgeFromObjectiveC(_:result:))();

        if ((v24 & 1) != 0)
        {
LABEL_25:
          swift_release(v4);
          return 0LL;
        }

        int v18 = v23;
        unint64_t v25 = v4;
        unint64_t v20 = v4[2];
        unint64_t v19 = v4[3];
        uint64_t v1 = v20 + 1;
        if (v20 >= v19 >> 1)
        {
          sub_10005DB94(v19 > 1, v20 + 1, 1);
          uint64_t v4 = v25;
        }

        v4[2] = v1;
        *((_DWORD *)v4 + v20 + _Block_object_dispose(va, 8) = v18;
        ++v13;
        if (v15 == v2) {
          return v4;
        }
      }
    }

    __break(1u);
LABEL_29:
    if (v1 < 0) {
      uint64_t v22 = v1;
    }
    else {
      uint64_t v22 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v1);
  }

  if (v1 < 0) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (v2) {
    goto LABEL_10;
  }
  return v4;
}

uint64_t sub_10000FBC4(uint64_t a1)
{
  v3[2] = a1;
  uint64_t v1 = type metadata accessor for PreviewAudio(0LL);
  return File.withResource<A>(_:)(sub_10000FC20, v3, v1);
}

void sub_10000FC20()
{
}

unint64_t sub_10000FC38()
{
  unint64_t result = qword_1000AFEA0;
  if (!qword_1000AFEA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008D584, &type metadata for PreviewAudioUnpacker.PreviewAudioUnpackerError);
    atomic_store(result, (unint64_t *)&qword_1000AFEA0);
  }

  return result;
}

unint64_t sub_10000FC7C()
{
  unint64_t result = qword_1000AFEA8;
  if (!qword_1000AFEA8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000AFEA8);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PreviewAudioUnpacker.PreviewAudioUnpackerError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for PreviewAudioUnpacker.PreviewAudioUnpackerError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10000FD4C + 4 * byte_10008D480[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10000FD6C + 4 * byte_10008D485[v4]))();
  }
}

_BYTE *sub_10000FD4C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10000FD6C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10000FD74(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10000FD7C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10000FD84(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10000FD8C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_10000FD98()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for PreviewAudioUnpacker.PreviewAudioUnpackerError()
{
  return &type metadata for PreviewAudioUnpacker.PreviewAudioUnpackerError;
}

unint64_t sub_10000FDB8()
{
  unint64_t result = qword_1000AFEB0;
  if (!qword_1000AFEB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008D55C, &type metadata for PreviewAudioUnpacker.PreviewAudioUnpackerError);
    atomic_store(result, (unint64_t *)&qword_1000AFEB0);
  }

  return result;
}

uint64_t GroupContextDictionary.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000AFEB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100010000();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for GroupContextDictionary.CodingKeys,  &type metadata for GroupContextDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)(v3 + 40);
  uint64_t v13 = *(unsigned __int8 *)(v3 + 48);
  v25[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v25, v5);
  if (!v2)
  {
    uint64_t v14 = *(void *)(v3 + 56);
    uint64_t v15 = *(unsigned __int8 *)(v3 + 64);
    v25[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v25, v5);
    uint64_t v16 = *(void *)(v3 + 24);
    uint64_t v17 = *(void *)(v3 + 32);
    v25[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v25, v5);
    uint64_t v18 = *(void *)(v3 + 8);
    uint64_t v19 = *(void *)(v3 + 16);
    v25[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, v25, v5);
    sub_100010044(v3, (uint64_t)v26);
    sub_100010044((uint64_t)v26, (uint64_t)v25);
    char v24 = 4;
    uint64_t v20 = sub_10000E624(&qword_1000AFED0);
    uint64_t v21 = sub_100010D80( &qword_1000AFED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v24, v5, v20, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_10000FFDC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100010000()
{
  unint64_t result = qword_1000AFEC0;
  if (!qword_1000AFEC0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GroupContextDictionary.CodingKeys,  &type metadata for GroupContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000AFEC0);
  }

  return result;
}

uint64_t sub_100010044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000AFEC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001008C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

__n128 GroupContextDictionary.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v5;
    *(_BYTE *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_100010120(void *a1)
{
  return GroupContextDictionary.encode(to:)(a1);
}

MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional __swiftcall GroupContextDictionary.CodingKeys.init(stringValue:)( Swift::String stringValue)
{
  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A32A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return (MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional)5;
  }
  else {
    return (MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional)v3;
  }
}

MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional __swiftcall BalloonPluginPayloadAttachment.CodingKeys.init(intValue:)( Swift::Int intValue)
{
  return (MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional)5;
}

uint64_t BalloonPluginPayloadAttachment.CodingKeys.intValue.getter()
{
  return 0LL;
}

uint64_t GroupContextDictionary.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000101E8 + 4 * byte_10008D5D0[a1]))( 30320LL,  0xE200000000000000LL);
}

uint64_t sub_1000101E8()
{
  return 30311LL;
}

uint64_t sub_1000101F0()
{
  return 110LL;
}

uint64_t sub_1000101FC()
{
  return 6580583LL;
}

uint64_t sub_10001020C()
{
  return 112LL;
}

uint64_t GroupContextDictionary.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100010240 + 4 * byte_10008D5D5[a1]))( 30320LL,  0xE200000000000000LL);
}

uint64_t sub_100010240()
{
  return 30311LL;
}

uint64_t sub_100010248()
{
  return 110LL;
}

uint64_t sub_100010254()
{
  return 6580583LL;
}

uint64_t sub_100010264()
{
  return 112LL;
}

void sub_100010270(char *a1)
{
}

void sub_10001027C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1000102BC()
{
  return Hasher._finalize()();
}

void sub_100010314()
{
  __asm { BR              X10 }

uint64_t sub_100010344(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_100010388(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1000103C4()
{
  return Hasher._finalize()();
}

MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional sub_10001041C@<W0>( Swift::String *a1@<X0>, MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional *a2@<X8>)
{
  result.value = GroupContextDictionary.CodingKeys.init(stringValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_100010448()
{
  return ((uint64_t (*)(void))((char *)sub_10001046C + 4 * byte_10008D5E9[*v0]))();
}

void sub_10001046C(void *a1@<X8>)
{
  *a1 = 30311LL;
  a1[1] = v1;
}

void sub_100010478(void *a1@<X8>)
{
  *a1 = 110LL;
  a1[1] = 0xE100000000000000LL;
}

void sub_100010488(void *a1@<X8>)
{
  *a1 = 6580583LL;
  a1[1] = 0xE300000000000000LL;
}

void sub_10001049C(void *a1@<X8>)
{
  *a1 = 112LL;
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_1000104AC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000104D0 + 4 * byte_10008D5EE[*v0]))( 30320LL,  0xE200000000000000LL);
}

uint64_t sub_1000104D0()
{
  return 30311LL;
}

uint64_t sub_1000104D8()
{
  return 110LL;
}

uint64_t sub_1000104E4()
{
  return 6580583LL;
}

uint64_t sub_1000104F4()
{
  return 112LL;
}

MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional sub_100010500@<W0>( uint64_t a1@<X0>, MessagesBlastDoorService::GroupContextDictionary::CodingKeys_optional *a2@<X8>)
{
  result.value = GroupContextDictionary.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void sub_100010524(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100010530(uint64_t a1)
{
  unint64_t v2 = sub_100010000();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100010558(uint64_t a1)
{
  unint64_t v2 = sub_100010000();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100010580@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000AFEF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100010000();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for GroupContextDictionary.CodingKeys,  &type metadata for GroupContextDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  char v41 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v5);
  char v14 = v13;
  char v40 = 1;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
  int v34 = v16;
  uint64_t v35 = v15;
  char v39 = 2;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v39, v5);
  uint64_t v19 = v18;
  uint64_t v32 = v17;
  char v38 = 3;
  swift_bridgeObjectRetain(v18);
  uint64_t v33 = v19;
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v38, v5);
  uint64_t v21 = v20;
  uint64_t v30 = sub_10000E624(&qword_1000AFED0);
  char v37 = 4;
  uint64_t v22 = sub_100010D80( &qword_1000AFF00,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v31 = v21;
  swift_bridgeObjectRetain(v21);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v36, v30, &v37, v5, v30, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v23 = v36;
  swift_bridgeObjectRetain(v36);
  sub_100010D60(a1);
  uint64_t v24 = v33;
  swift_bridgeObjectRelease(v33);
  uint64_t v25 = v31;
  swift_bridgeObjectRelease(v31);
  uint64_t result = swift_bridgeObjectRelease(v23);
  uint64_t v27 = v29;
  *(void *)a2 = v23;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v27;
  uint64_t v28 = v32;
  *(void *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = v28;
  *(void *)(a2 + 32) = v24;
  *(void *)(a2 + 40) = v12;
  *(_BYTE *)(a2 + 4_Block_object_dispose(va, 8) = v14 & 1;
  *(void *)(a2 + 56) = v35;
  *(_BYTE *)(a2 + 64) = v34 & 1;
  return result;
}

unint64_t sub_100010868()
{
  unint64_t result = qword_1000AFEE0;
  if (!qword_1000AFEE0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GroupContextDictionary.CodingKeys,  &type metadata for GroupContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000AFEE0);
  }

  return result;
}

unint64_t sub_1000108B0()
{
  unint64_t result = qword_1000AFEE8;
  if (!qword_1000AFEE8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GroupContextDictionary.CodingKeys,  &type metadata for GroupContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000AFEE8);
  }

  return result;
}

unint64_t sub_1000108F8()
{
  unint64_t result = qword_1000AFEF0;
  if (!qword_1000AFEF0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GroupContextDictionary.CodingKeys,  &type metadata for GroupContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000AFEF0);
  }

  return result;
}

uint64_t destroy for GroupContextDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for GroupContextDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  ((void (*)(void))swift_bridgeObjectRetain)();
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for GroupContextDictionary(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[5];
  *((_BYTE *)a1 + 4_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 48);
  a1[5] = v10;
  uint64_t v11 = a2[7];
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  a1[7] = v11;
  return a1;
}

__n128 initializeWithTake for GroupContextDictionary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for GroupContextDictionary(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 4_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 48);
  a1[7] = a2[7];
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupContextDictionary(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 65)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupContextDictionary( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 65) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 65) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for GroupContextDictionary()
{
  return &type metadata for GroupContextDictionary;
}

_BYTE *initializeBufferWithCopyOfBuffer for GroupContextDictionary.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GroupContextDictionary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

        uint64_t v25 = CMSampleBufferRef.imageBuffer.getter();
        if (!v25)
        {
          uint64_t v103 = *(void **)(v0 + 1712);
          unint64_t v104 = *(void **)(v0 + 1656);
          uint64_t v105 = *(void **)(v0 + 1504);
          unint64_t v106 = v13;
          uint64_t v107 = *(void **)(v0 + 1472);
          unint64_t v108 = *(void *)(v0 + 1256);
          v199 = *(void *)(v0 + 1248);
          v203 = *(void *)(v0 + 1272);
          swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v109 = type metadata accessor for Explosion(0LL);
          unint64_t v110 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
          swift_allocError(v109, v110, 0LL, 0LL);
          unint64_t v111 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x426567616D496F4ELL,  0xED00007265666675LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
          swift_willThrow(v111);

          (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v203, v199);
          goto LABEL_37;
        }

        uint64_t v26 = (void *)v25;
        v186 = v13;
        v200 = v11;
        uint64_t v27 = static os_log_type_t.info.getter(v25);
        uint64_t v28 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
        if (os_log_type_enabled(v28, v27))
        {
          uint64_t v29 = swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v29 = 134217984;
          uint64_t v12 = *v133;
          *(void *)(v29 + 4) = *v133;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  v27,  "BlastDoor processing thumbnail %ld",  (uint8_t *)v29,  0xCu);
          swift_slowDealloc(v29, -1LL, -1LL);
        }

        v160 = *(unsigned __int8 *)(v0 + 1805);
        v181 = *(_DWORD *)(v0 + 1784);
        v176 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
        v164 = *(unsigned __int8 *)(v0 + 1804);
        v156 = *(void *)(v0 + 1496);
        v168 = *(void *)(v0 + 1376);
        v172 = *(void *)(v0 + 1360);
        uint64_t v30 = *(void *)(v0 + 1272);
        uint64_t v31 = *(void *)(v0 + 1264);
        uint64_t v32 = *(void *)(v0 + 1248);
        uint64_t v33 = *(void *)(v0 + 1240);
        v136 = *(void *)(v0 + 1232);
        v137 = *(void *)(v0 + 1216);
        int v34 = *(void *)(v0 + 1208);
        uint64_t v35 = *(void *)(v0 + 1200);
        v138 = *(void *)(v0 + 1192);
        v140 = *(void *)(v0 + 1176);
        v135 = *(void *)(v0 + 1168);
        v142 = *(void *)(v0 + 1160);
        v146 = *(void *)(v0 + 1144);

        uint64_t v36 = CMSampleBufferRef.presentationTimeStamp.getter();
        char v37 = CMTime.seconds.getter(v36);
        type metadata accessor for CVBuffer(0LL);
        v204[3] = v38;
        v204[4] = &protocol witness table for CVBufferRef;
        v204[0] = v26;
        char v39 = type metadata accessor for Image.Encoding(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v34, 1LL, 1LL, v39);
        char v40 = v26;
        Image.init(provider:maxPixelDimension:enforcedEncoding:)(v204, 0LL, 1LL, v34);
        char v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 16);
        v41(v31, v30, v32);
        VideoPreview.VideoFormat.init(trackInfo:)(v31);
        v41(v31, v30, v32);
        VideoPreview.AudioFormat.init(trackInfo:)(v31);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v196 + 16))(v136, v33, v137);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16))(v138, v35, v140);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v190 + 16))(v142, v135, v146);
        uint64_t v42 = VideoPreview.init(image:isAutoloop:frame:timestamp:trackCount:videoFormat:audioFormat:videoIsMonoskiAsset:)( v136,  v160,  v12,  v156,  v138,  v142,  v164,  v37);
        VideoPreview.Constraints.frameConstraints.getter(v42);
        uint64_t v43 = v176(v168, v172);
        uint64_t v44 = *(void **)(v0 + 1712);
        v134 = v40;
        if (v43 == v181)
        {
          v141 = *(void **)(v0 + 1656);
          v145 = *(void **)(v0 + 1504);
          v149 = *(void **)(v0 + 1472);
          unint64_t v112 = *(void *)(v0 + 1376);
          v113 = *(void *)(v0 + 1360);
          v185 = *(void *)(v0 + 1272);
          v175 = *(void *)(v0 + 1256);
          v180 = *(void *)(v0 + 1248);
          v167 = *(void *)(v0 + 1216);
          v171 = *(void *)(v0 + 1240);
          v159 = *(void *)(v0 + 1176);
          v163 = *(void *)(v0 + 1200);
          v152 = *(void *)(v0 + 1144);
          v155 = *(void *)(v0 + 1168);
          v114 = *(void *)(v0 + 1136);
          v115 = *(void *)(v0 + 1128);
          v116 = *(void *)(v0 + 1112);
          v117 = *(void *)(v0 + 1104);
          v118 = *(void *)(v0 + 1080);
          v139 = *(void *)(v0 + 1088);
          v119 = swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          v120 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v131 + 8))(v112, v113, v119);
          v121 = static os_log_type_t.info.getter(v120);
          v122 = (void *)static OS_os_log.videoPreviewUnpacker.getter();
          os_log(_:dso:log:_:_:)( v121,  &_mh_execute_header,  v122,  "This was a single frame request - handling continuation",  55LL,  2LL,  &_swiftEmptyArrayStorage);

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 16))(v115, v114, v116);
          v123 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
          SessionSchemaResult.init(_:lastResult:)(v115, 1LL, v116, v123);
          v124 = sub_10000E624(&qword_1000B0280);
          AsyncThrowingStream.Continuation.yield(_:)(v118, v124);
          (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v117, v139);
          *(void *)(v0 + 96_Block_object_dispose(va, 8) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 968, v124);

          (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v114, v116);
          (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v155, v152);
          (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v163, v159);
          (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v171, v167);
          (*(void (**)(uint64_t, uint64_t))(v175 + 8))(v185, v180);
          goto LABEL_41;
        }

        (*(void (**)(void, void))(v131 + 8))(*(void *)(v0 + 1376), *(void *)(v0 + 1360));
        BOOL v7 = [v44 copyNextSampleBuffer];

        uint64_t v45 = *(void *)(v0 + 1016);
        uint64_t v46 = __OFADD__(v45, 1LL);
        uint64_t v47 = v45 + 1;
        if (v46) {
          __break(1u);
        }
        *v133 = v47;
        if (v7) {
          unint64_t v49 = *(_DWORD *)(v0 + 1780) != *(_DWORD *)(v0 + 1784) && v47 == *(void *)(v0 + 1600);
        }
        else {
          unint64_t v49 = 1LL;
        }
        uint64_t v50 = *(void *)(v0 + 1128);
        unint64_t v51 = *(void *)(v0 + 1112);
        uint64_t v52 = *(void *)(v0 + 1104);
        unint64_t v53 = *(void *)(v0 + 1088);
        uint64_t v54 = *(void *)(v0 + 1080);
        (*(void (**)(uint64_t, void, uint64_t))(v130 + 16))(v50, *(void *)(v0 + 1136), v51);
        uint64_t v55 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
        SessionSchemaResult.init(_:lastResult:)(v50, v49, v51, v55);
        uint64_t v56 = sub_10000E624(&qword_1000B0280);
        AsyncThrowingStream.Continuation.yield(_:)(v54, v56);
        (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v52, v53);
        uint64_t v57 = *(void *)(v0 + 1240);
        v182 = *(void *)(v0 + 1200);
        v187 = *(void *)(v0 + 1216);
        v177 = *(void *)(v0 + 1176);
        unint64_t v58 = *(void *)(v0 + 1168);
        uint64_t v59 = *(void *)(v0 + 1144);
        unint64_t v60 = *(void *)(v0 + 1136);
        uint64_t v61 = *(void *)(v0 + 1112);
        if (v49)
        {
          *(void *)(v0 + 976) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 976, v56);
        }

        (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v60, v61);
        (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v58, v59);
        (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v182, v177);
        (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v57, v187);
        if (!v7)
        {
          v125 = *(void **)(v0 + 1712);
          v126 = *(void *)(v0 + 1704);
          v127 = *(void **)(v0 + 1504);
          v128 = *(void **)(v0 + 1472);
          unint64_t v90 = *(void *)(v0 + 1272);
          uint64_t v91 = *(void *)(v0 + 1256);
          unint64_t v92 = *(void *)(v0 + 1248);

          swift_bridgeObjectRelease(v126);
          goto LABEL_40;
        }

        unint64_t v62 = *(void *)(v0 + 1600);
        uint64_t v63 = *(_DWORD *)(v0 + 1784);
        unint64_t v64 = *(_DWORD *)(v0 + 1780);
        uint64_t v12 = *(void *)(v0 + 1016);
        uint64_t v11 = (opaqueCMSampleBuffer *)v7;
        char v13 = v7;
        if (v64 != v63)
        {
          char v13 = v7;
          if (v12 == v62) {
            break;
          }
        }
      }
    }

    uint64_t v85 = *(void **)(v0 + 1712);
    unint64_t v86 = *(void *)(v0 + 1704);
    uint64_t v87 = v11;
    unint64_t v88 = *(void **)(v0 + 1504);
    uint64_t v89 = *(void **)(v0 + 1472);
    unint64_t v90 = *(void *)(v0 + 1272);
    uint64_t v91 = *(void *)(v0 + 1256);
    unint64_t v92 = *(void *)(v0 + 1248);

    swift_bridgeObjectRelease(v86);
LABEL_40:
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
LABEL_41:
    uint64_t v93 = *(void *)(v0 + 1432);
    unint64_t v94 = *(void *)(v0 + 1408);
    uint64_t v95 = *(void *)(v0 + 1400);
    uint64_t v96 = *(void *)(v0 + 1392);
    uint64_t v97 = *(void *)(v0 + 1384);
    uint64_t v98 = *(void *)(v0 + 1376);
    v99 = *(void *)(v0 + 1352);
    uint64_t v100 = *(void *)(v0 + 1328);
    v101 = *(void *)(v0 + 1320);
    v144 = *(void *)(v0 + 1312);
    v148 = *(void *)(v0 + 1304);
    v151 = *(void *)(v0 + 1296);
    v154 = *(void *)(v0 + 1272);
    v158 = *(void *)(v0 + 1264);
    v162 = *(void *)(v0 + 1240);
    v166 = *(void *)(v0 + 1232);
    v170 = *(void *)(v0 + 1208);
    v174 = *(void *)(v0 + 1200);
    v179 = *(void *)(v0 + 1192);
    v184 = *(void *)(v0 + 1168);
    v189 = *(void *)(v0 + 1160);
    v192 = *(void *)(v0 + 1136);
    v195 = *(void *)(v0 + 1128);
    v198 = *(void *)(v0 + 1104);
    v202 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1456));
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v144);
    swift_task_dealloc(v148);
    swift_task_dealloc(v151);
    swift_task_dealloc(v154);
    swift_task_dealloc(v158);
    swift_task_dealloc(v162);
    swift_task_dealloc(v166);
    swift_task_dealloc(v170);
    swift_task_dealloc(v174);
    swift_task_dealloc(v179);
    swift_task_dealloc(v184);
    swift_task_dealloc(v189);
    swift_task_dealloc(v192);
    swift_task_dealloc(v195);
    swift_task_dealloc(v198);
    swift_task_dealloc(v202);
    unint64_t v84 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v65 = *(void **)(v0 + 1712);
    unint64_t v66 = *(void **)(v0 + 1656);
    uint64_t v67 = *(void **)(v0 + 1504);
    unint64_t v68 = *(void **)(v0 + 1472);
    uint64_t v69 = *(void *)(v0 + 1272);
    unint64_t v70 = *(void *)(v0 + 1256);
    uint64_t v71 = *(void *)(v0 + 1248);
    swift_bridgeObjectRelease(*(void *)(v0 + 1704));
    unint64_t v72 = type metadata accessor for Explosion(0LL);
    uint64_t v73 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v72, v73, 0LL, 0LL);
    unint64_t v74 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x73656D6172466F4ELL,  0xE800000000000000LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
    swift_willThrow(v74);

    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
LABEL_37:
    uint64_t v75 = *(void *)(v0 + 1432);
    unint64_t v76 = *(void *)(v0 + 1408);
    uint64_t v77 = *(void *)(v0 + 1400);
    unint64_t v78 = *(void *)(v0 + 1392);
    uint64_t v79 = *(void *)(v0 + 1384);
    unint64_t v80 = *(void *)(v0 + 1376);
    uint64_t v81 = *(void *)(v0 + 1352);
    unint64_t v82 = *(void *)(v0 + 1328);
    uint64_t v83 = *(void *)(v0 + 1320);
    v143 = *(void *)(v0 + 1312);
    v147 = *(void *)(v0 + 1304);
    v150 = *(void *)(v0 + 1296);
    v153 = *(void *)(v0 + 1272);
    v157 = *(void *)(v0 + 1264);
    v161 = *(void *)(v0 + 1240);
    v165 = *(void *)(v0 + 1232);
    v169 = *(void *)(v0 + 1208);
    v173 = *(void *)(v0 + 1200);
    v178 = *(void *)(v0 + 1192);
    v183 = *(void *)(v0 + 1168);
    v188 = *(void *)(v0 + 1160);
    v191 = *(void *)(v0 + 1136);
    v194 = *(void *)(v0 + 1128);
    v197 = *(void *)(v0 + 1104);
    v201 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1456));
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v143);
    swift_task_dealloc(v147);
    swift_task_dealloc(v150);
    swift_task_dealloc(v153);
    swift_task_dealloc(v157);
    swift_task_dealloc(v161);
    swift_task_dealloc(v165);
    swift_task_dealloc(v169);
    swift_task_dealloc(v173);
    swift_task_dealloc(v178);
    swift_task_dealloc(v183);
    swift_task_dealloc(v188);
    swift_task_dealloc(v191);
    swift_task_dealloc(v194);
    swift_task_dealloc(v197);
    swift_task_dealloc(v201);
    unint64_t v84 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v84();
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x55;
  int v8 = v6 - 85;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x36;
  int v8 = v6 - 54;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupContextDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100010CD0 + 4 * byte_10008D5F8[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100010D04 + 4 * byte_10008D5F3[v4]))();
}

uint64_t sub_100010D04(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010D0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100010D14LL);
  }
  return result;
}

uint64_t sub_100010D20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100010D28LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_100010D2C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010D34(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010D40(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100010D48(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GroupContextDictionary.CodingKeys()
{
  return &type metadata for GroupContextDictionary.CodingKeys;
}

uint64_t sub_100010D60(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100010D80(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_10001008C(&qword_1000AFED0);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100010DE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for CombinedPluginAttachmentInfo(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v37 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000E624(&qword_1000AFF60);
  __chkstk_darwin(v6);
  int v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v38 - 8);
  uint64_t v10 = __chkstk_darwin(v38);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  char v14 = (char *)v31 - v13;
  sub_100012DC8((uint64_t)a1, (uint64_t)v45, &qword_1000AFF68);
  uint64_t v15 = sub_100012DC8((uint64_t)v45, (uint64_t)&v46, &qword_1000AFF68);
  uint64_t v16 = v47;
  if (!v47) {
    goto LABEL_6;
  }
  uint64_t v36 = v46;
  sub_100012DC8((uint64_t)(a1 + 2), (uint64_t)v44, &qword_1000AFF70);
  uint64_t v15 = sub_100012DC8((uint64_t)v44, (uint64_t)&v48, &qword_1000AFF70);
  unint64_t v35 = v49;
  if (v49 >> 60 == 15) {
    goto LABEL_6;
  }
  uint64_t v33 = v48;
  sub_100012DC8((uint64_t)(a1 + 4), (uint64_t)v43, &qword_1000AFF68);
  uint64_t v15 = sub_100012DC8((uint64_t)v43, (uint64_t)&v50, &qword_1000AFF68);
  uint64_t v34 = v51;
  if (!v51
    || (uint64_t v32 = v50,
        sub_100012DC8((uint64_t)(a1 + 6), (uint64_t)v42, &qword_1000AFF70),
        uint64_t v15 = sub_100012DC8((uint64_t)v42, (uint64_t)&v52, &qword_1000AFF70),
        v31[2] = v53,
        v53 >> 60 == 15)
    || (v31[1] = v52,
        sub_100012DC8((uint64_t)(a1 + 8), (uint64_t)v41, &qword_1000AFF78),
        uint64_t v15 = sub_100012DC8((uint64_t)v41, (uint64_t)&v54, &qword_1000AFF78),
        (v55 & 1) != 0))
  {
LABEL_6:
    uint64_t v17 = static os_log_type_t.info.getter(v15);
    sub_100012C44();
    uint64_t v18 = (void *)static OS_os_log.textMessageUnpacker.getter();
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  v18,  "Missing required keys for combined plugin attachment download, returnining nil.",  79LL,  2LL,  &_swiftEmptyArrayStorage);
    sub_100012D64(a1);

    uint64_t v19 = 1LL;
    uint64_t v20 = v39;
  }

  else
  {
    v31[0] = v54;
    sub_100012E0C((uint64_t)v45);
    sub_100012E34((uint64_t)v44);
    sub_100012E0C((uint64_t)v43);
    sub_100012E34((uint64_t)v42);
    URL.init(string:)(v32, v34);
    sub_100012E60((uint64_t)v43);
    uint64_t v22 = v38;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v38) == 1)
    {
      sub_100012E60((uint64_t)v45);
      sub_100012EF8((uint64_t)v8, &qword_1000AFF60);
      uint64_t v23 = type metadata accessor for DecodingError(0LL);
      swift_allocError(v23, &protocol witness table for DecodingError, 0LL, 0LL);
      uint64_t v25 = v24;
      uint64_t v26 = sub_10000E624(&qword_1000AFF80);
      uint64_t v27 = swift_allocObject(v26, 72LL, 7LL);
      *(_OWORD *)(v27 + 16) = xmmword_10008D7D0;
      *(void *)(v27 + 56) = &type metadata for BalloonPluginPayloadAttachment.CodingKeys;
      *(void *)(v27 + 64) = sub_100012E88();
      *(_BYTE *)(v27 + 32) = 2;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v27,  0xD00000000000002DLL,  0x800000010008A530LL,  0LL);
      uint64_t v28 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104LL))( v25,  enum case for DecodingError.dataCorrupted(_:),  v23);
      swift_willThrow(v28);
      sub_100012D64(a1);
      sub_100012ECC((uint64_t)v42);
      return sub_100012ECC((uint64_t)v44);
    }

    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v8, v22);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v22);
    if ((v31[0] & 0x80000000) != 0)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      __break(1u);
      return result;
    }

    uint64_t v29 = v37;
    uint64_t v30 = v40;
    CombinedPluginAttachmentInfo.init(with:signature:ownerID:expectedFileSize:encryptionKey:)(v12, v33, v35, v36, v16);
    if (v30)
    {
      sub_100012D64(a1);
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v38);
    }

    sub_100012D64(a1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v38);
    uint64_t v20 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v39, v29, v3);
    uint64_t v19 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v20, v19, 1LL, v3);
}

uint64_t sub_100011324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5 = v4;
  sub_1000129A4(a3, (uint64_t)v122);
  uint64_t v113 = v122[0];
  unint64_t v116 = v122[1];
  unint64_t v10 = v122[3];
  uint64_t v104 = v122[2];
  uint64_t v105 = v122[5];
  unint64_t v106 = v122[7];
  uint64_t v107 = v122[6];
  uint64_t v95 = type metadata accessor for BalloonPlugin.Payload(0LL);
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  unint64_t v94 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for EncodedAttachments(0LL);
  __chkstk_darwin(v12);
  uint64_t v96 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000E624(&qword_1000AFF28);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for CombinedPluginAttachmentInfo(0LL);
  uint64_t v101 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v97 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for CombinedPluginAttachment.BalloonPluginIdentifier(0LL);
  uint64_t v99 = *(void *)(v18 - 8);
  uint64_t v100 = v18;
  __chkstk_darwin(v18);
  unint64_t v108 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_10000E624(&qword_1000AFF10);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v115 = (uint64_t)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v114 = (uint64_t)&v92 - v23;
  uint64_t v117 = type metadata accessor for CombinedPluginAttachment(0LL);
  uint64_t v127 = *(void *)(v117 - 8);
  uint64_t v24 = __chkstk_darwin(v117);
  unint64_t v92 = (char *)&v92 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v111 = (char *)&v92 - v27;
  __chkstk_darwin(v26);
  uint64_t v103 = (char *)&v92 - v28;
  uint64_t v112 = a1;
  v121[0] = a1;
  v121[1] = a2;
  *(void *)&__int128 v118 = 58LL;
  *((void *)&v118 + 1) = 0xE100000000000000LL;
  unint64_t v29 = sub_100012BAC();
  uint64_t v30 = (void *)StringProtocol.components<A>(separatedBy:)( &v118,  &type metadata for String,  &type metadata for String,  v29,  v29);
  uint64_t v31 = v30;
  if (v30[2])
  {
    uint64_t v109 = a2;
    uint64_t v110 = v5;
    v102 = a4;
    uint64_t v33 = v30[4];
    uint64_t v32 = v30[5];
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRelease(v31);
    sub_1000129A4(a3, (uint64_t)v123);
    unint64_t v34 = *(unsigned int *)&v124[16] | (unint64_t)((uint64_t)v124[20] << 32);
    if ((v34 & 0x8000000000000000LL) != 0)
    {
      v124[20] = BYTE4(v34) & 0x7F;
      v125[2] = v123[2];
      v126[0] = *(_OWORD *)v124;
      v125[0] = v123[0];
      v125[1] = v123[1];
      *(void *)((char *)v126 + 13) = *(void *)&v124[13];
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v109);
      unint64_t v61 = v116;
      swift_bridgeObjectRetain(v116);
      uint64_t v62 = v104;
      sub_100012AA8(v104, v10);
      uint64_t v63 = v105;
      swift_bridgeObjectRetain(v105);
      unint64_t v65 = v106;
      uint64_t v64 = v107;
      sub_100012AA8(v107, v106);
      swift_bridgeObjectRetain(v61);
      sub_100012AA8(v62, v10);
      swift_bridgeObjectRetain(v63);
      sub_100012AA8(v64, v65);
      uint64_t v66 = v110;
      sub_100010DE0(v125, (uint64_t)v16);
      if (v66)
      {
        sub_100012BF0( a3,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
        return sub_100012BF0( a3,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
      }

      uint64_t v69 = a3;
      uint64_t v70 = v101;
      uint64_t v71 = v98;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v16, 1LL, v98) != 1)
      {
        uint64_t v72 = (*(uint64_t (**)(char *, char *, uint64_t))(v70 + 32))(v97, v16, v71);
        uint64_t v73 = static os_log_type_t.info.getter(v72);
        sub_100012C44();
        uint64_t v74 = v70;
        uint64_t v75 = (void *)static OS_os_log.textMessageUnpacker.getter();
        uint64_t v76 = v71;
        os_log(_:dso:log:_:_:)( v73,  &_mh_execute_header,  v75,  "Deferring unpacking of plugin due to combined payload.",  54LL,  2LL,  &_swiftEmptyArrayStorage);

        uint64_t v77 = v96;
        EncodedAttachments.init(with:)(&_swiftEmptyArrayStorage);
        uint64_t v42 = v127;
        uint64_t v87 = v94;
        unint64_t v88 = v97;
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v94, v97, v76);
        (*(void (**)(char *, void, uint64_t))(v93 + 104))( v87,  enum case for BalloonPlugin.Payload.combinedPluginAttachmentInfo(_:),  v95);
        uint64_t v89 = v92;
        CombinedPluginAttachment.init(with:payload:)(v77, v87);
        a4 = v102;
        sub_100012BF0( v69,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
        sub_100012BF0( v69,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v88, v76);
        unint64_t v90 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
        uint64_t v91 = v103;
        uint64_t v41 = v117;
        v90(v103, v89, v117);
LABEL_25:
        v90(a4, v91, v41);
        uint64_t v40 = 0LL;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56))(a4, v40, 1LL, v41, v39);
      }

      sub_100012BF0( a3,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
      sub_100012BF0( a3,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
      sub_100012EF8((uint64_t)v16, &qword_1000AFF28);
      uint64_t v40 = 1LL;
    }

    else
    {
      uint64_t v107 = a3;
      __int128 v35 = v123[0];
      sub_100012A64(v113, v116);
      if (qword_1000AFCC0 != -1) {
        swift_once(&qword_1000AFCC0, sub_100050D10);
      }
      uint64_t v36 = qword_1000BC110;
      if (*(void *)(qword_1000BC110 + 16) && (unint64_t v37 = sub_100067C94(v33, v32), (v38 & 1) != 0))
      {
        sub_100012C98(*(void *)(v36 + 56) + 40 * v37, (uint64_t)&v118);
      }

      else
      {
        uint64_t v120 = 0LL;
        __int128 v118 = 0u;
        __int128 v119 = 0u;
      }

      swift_bridgeObjectRelease(v32);
      if (*((void *)&v119 + 1))
      {
        uint64_t v43 = sub_100012C80(&v118, (uint64_t)v121);
        uint64_t v44 = static os_log_type_t.info.getter(v43);
        sub_100012C44();
        uint64_t v45 = (void *)static OS_os_log.textMessageUnpacker.getter();
        uint64_t v46 = sub_10000E624(&qword_1000AFF48);
        uint64_t v47 = swift_allocObject(v46, 72LL, 7LL);
        *(_OWORD *)(v47 + 16) = xmmword_10008D7D0;
        sub_100012C98((uint64_t)v121, (uint64_t)&v118);
        sub_10000E624(&qword_1000AFF50);
        uint64_t v48 = >> prefix<A>(_:)(&v118);
        uint64_t v50 = v49;
        sub_100012EF8((uint64_t)&v118, &qword_1000AFF40);
        *(void *)(v47 + 56) = &type metadata for String;
        *(void *)(v47 + 64) = sub_100012CDC();
        *(void *)(v47 + 32) = v48;
        *(void *)(v47 + 40) = v50;
        os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Unpacking balloon plugin using %@.", 34LL, 2LL, v47);

        swift_bridgeObjectRelease(v47);
        uint64_t v51 = Data._imOptionallyDecompress()(v35, *((void *)&v35 + 1));
        unint64_t v53 = v52;
        uint64_t v54 = v109;
        __n128 v55 = swift_bridgeObjectRetain(v109);
        uint64_t v56 = v108;
        uint64_t v57 = v110;
        CombinedPluginAttachment.BalloonPluginIdentifier.init(with:)(v112, v54, v55);
        unint64_t v116 = v53;
        if (v57)
        {
          swift_errorRelease(v57);
          uint64_t v58 = 1LL;
          a4 = v102;
          uint64_t v41 = v117;
          uint64_t v59 = v114;
          uint64_t v60 = v115;
        }

        else
        {
          uint64_t v59 = v114;
          sub_1000503E4(v51, v53, v114);
          uint64_t v41 = v117;
          uint64_t v60 = v115;
          (*(void (**)(char *, uint64_t))(v99 + 8))(v56, v100);
          uint64_t v58 = 0LL;
          a4 = v102;
        }

        uint64_t v42 = v127;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v59, v58, 1LL, v41);
        sub_100012D20(v59, v60, &qword_1000AFF10);
        sub_100012C98((uint64_t)v121, (uint64_t)&v118);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v60, 1LL, v41) == 1)
        {
          uint64_t v78 = *((void *)&v119 + 1);
          uint64_t v79 = v120;
          sub_10000FFDC(&v118, *((uint64_t *)&v119 + 1));
          uint64_t v80 = v51;
          uint64_t v81 = v51;
          unint64_t v82 = v116;
          (*(void (**)(uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 8))( v80,  v116,  &_swiftEmptyArrayStorage,  v112,  v54,  v78,  v79);
          uint64_t v83 = v107;
          sub_100012BF0( v107,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
          sub_100012B54(v81, v82);
          sub_100012BF0( v83,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
          swift_bridgeObjectRelease(v54);
          sub_100012EF8(v114, &qword_1000AFF10);
          sub_100010D60(v121);
          sub_100012EF8(v115, &qword_1000AFF10);
          a4 = v102;
          uint64_t v42 = v127;
          unint64_t v86 = v111;
        }

        else
        {
          uint64_t v84 = v54;
          uint64_t v85 = v107;
          sub_100012BF0( v107,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
          sub_100012B54(v51, v116);
          sub_100012BF0( v85,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
          swift_bridgeObjectRelease(v84);
          sub_100012EF8(v114, &qword_1000AFF10);
          sub_100010D60(v121);
          unint64_t v86 = v111;
          (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v111, v115, v41);
        }

        sub_100010D60(&v118);
        unint64_t v90 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
        uint64_t v91 = v103;
        v90(v103, v86, v41);
        goto LABEL_25;
      }

      uint64_t v68 = v107;
      sub_100012BF0( v107,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
      sub_100012BF0( v68,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
      swift_bridgeObjectRelease(v109);
      sub_100012EF8((uint64_t)&v118, &qword_1000AFF40);
      uint64_t v40 = 1LL;
    }

    a4 = v102;
    uint64_t v41 = v117;
    uint64_t v42 = v127;
  }

  else
  {
    swift_bridgeObjectRelease(v30);
    sub_100012BF0( a3,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012AD8);
    __n128 v39 = swift_bridgeObjectRelease(a2);
    uint64_t v40 = 1LL;
    uint64_t v41 = v117;
    uint64_t v42 = v127;
  }

  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56))(a4, v40, 1LL, v41, v39);
}

uint64_t sub_100011DA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MessageDictionary(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v35 - v8;
  sub_100012F34(v2, (uint64_t)&v35 - v8);
  unint64_t v10 = (uint64_t *)&v9[*(int *)(v4 + 108)];
  uint64_t v12 = *v10;
  unint64_t v11 = v10[1];
  sub_100012F34((uint64_t)v9, (uint64_t)v7);
  if (v11 >> 60 == 15)
  {
    uint64_t v13 = &v7[*(int *)(v4 + 112)];
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *((void *)v13 + 1);
    uint64_t v16 = *((void *)v13 + 2);
    unint64_t v17 = *((void *)v13 + 3);
    uint64_t v18 = *((void *)v13 + 4);
    uint64_t v19 = *((void *)v13 + 5);
    unint64_t v20 = *((unsigned int *)v13 + 16) | ((unint64_t)v13[68] << 32);
    if (v15 == 1) {
      uint64_t v21 = 0LL;
    }
    else {
      uint64_t v21 = *(void *)v13;
    }
    if (v15 == 1) {
      unint64_t v22 = 0LL;
    }
    else {
      unint64_t v22 = *((void *)v13 + 1);
    }
    if (v15 == 1) {
      uint64_t v23 = 0LL;
    }
    else {
      uint64_t v23 = *((void *)v13 + 2);
    }
    if (v15 == 1) {
      uint64_t v24 = 0LL;
    }
    else {
      uint64_t v24 = *((void *)v13 + 3);
    }
    uint64_t v37 = v24;
    uint64_t v38 = v23;
    if (v15 == 1) {
      uint64_t v25 = 0LL;
    }
    else {
      uint64_t v25 = v18;
    }
    uint64_t v26 = *((void *)v13 + 6);
    unint64_t v27 = *((void *)v13 + 7);
    if (v15 == 1) {
      uint64_t v28 = 0LL;
    }
    else {
      uint64_t v28 = v19;
    }
    uint64_t v35 = v28;
    uint64_t v36 = v25;
    if (v15 == 1) {
      uint64_t v29 = 0LL;
    }
    else {
      uint64_t v29 = v26;
    }
    if (v15 == 1) {
      unint64_t v30 = 0LL;
    }
    else {
      unint64_t v30 = v27;
    }
    if (v15 == 1) {
      unint64_t v31 = 0xFE00000000LL;
    }
    else {
      unint64_t v31 = v20 & 0x1FFFFFFFFLL | 0xFFFFFF8000000000LL;
    }
    sub_100012F78(v14, v15, v16, v17, v18, v19, v26, v27);
  }

  else
  {
    uint64_t v37 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v35 = 0LL;
    uint64_t v36 = 0LL;
    uint64_t v29 = 0LL;
    unint64_t v30 = 0LL;
    unint64_t v31 = 0LL;
    uint64_t v21 = v12;
    unint64_t v22 = v11;
  }

  sub_100012AA8(v12, v11);
  sub_100012FE4((uint64_t)v7);
  uint64_t result = sub_100012FE4((uint64_t)v9);
  *(void *)a1 = v21;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v22;
  uint64_t v33 = v37;
  *(void *)(a1 + 16) = v38;
  *(void *)(a1 + 24) = v33;
  uint64_t v34 = v35;
  *(void *)(a1 + 32) = v36;
  *(void *)(a1 + 40) = v34;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v29;
  *(void *)(a1 + 56) = v30;
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = BYTE4(v31);
  *(_DWORD *)(a1 + 64) = v31;
  return result;
}

uint64_t sub_100011F48()
{
  uint64_t v1 = type metadata accessor for MessageDictionary(0LL);
  uint64_t v2 = v0 + *(int *)(v1 + 216);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0) {
    return 0LL;
  }
  uint64_t v3 = v0 + *(int *)(v1 + 220);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0) {
    return 0LL;
  }
  unint64_t v4 = *(void *)v2;
  unint64_t v5 = *(void *)v3;
  uint64_t v6 = v4 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v4;
  uint64_t result = NSNotFound.getter(v1);
  if (v6 == result) {
    return 0LL;
  }
  if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v5;
  }
  if (!__OFADD__(v6, v8)) {
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t sub_100011FDC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v10 = type metadata accessor for EncodedAttachments(0LL);
  __chkstk_darwin(v10);
  uint64_t v49 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000E624(&qword_1000AFF08);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000E624(&qword_1000AFF90);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for BalloonPlugin.Payload(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for LinkPresentation.LinkMetadata(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v17, 1LL, 1LL, v22);
  uint64_t result = LinkPresentation.MessagesPayload.init(with:isPlaceholder:)(v17, 1LL);
  if (!v7)
  {
    uint64_t v43 = a6;
    uint64_t v44 = a1;
    (*(void (**)(char *, void, uint64_t))(v19 + 104))( v21,  enum case for BalloonPlugin.Payload.linkPresentation(_:),  v18);
    sub_100012D20(v48, (uint64_t)v14, &qword_1000AFF08);
    uint64_t v24 = *v6;
    uint64_t v25 = &_swiftEmptyArrayStorage;
    if (*v6) {
      uint64_t v25 = *v6;
    }
    uint64_t v48 = (uint64_t)v25;
    uint64_t v26 = type metadata accessor for MessageDictionary(0LL);
    unint64_t v27 = (uint64_t *)((char *)v6 + *(int *)(v26 + 208));
    uint64_t v28 = v27[1];
    uint64_t v42 = *v27;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v24);
    uint64_t v29 = sub_100011F48();
    uint64_t v40 = v30;
    uint64_t v41 = v29;
    char v32 = v31;
    uint64_t v33 = (char *)v6 + *(int *)(v26 + 204);
    uint64_t v34 = *(void *)v33;
    LOBYTE(v26) = v33[8];
    EncodedAttachments.init(with:)(&_swiftEmptyArrayStorage);
    char v35 = v32 & 1;
    uint64_t v36 = v47;
    swift_bridgeObjectRetain(v47);
    uint64_t v37 = v45;
    __n128 v38 = swift_bridgeObjectRetain(v45);
    return BalloonPlugin.init(with:bundleID:isExpirable:attributionInfo:plainTextBody:content:participantDestinationIdentifiers:associatedMessageGUID:associatedMessageRange:associatedMessageType:attachments:)( v21,  v44,  v37,  0LL,  &_swiftEmptyArrayStorage,  v46,  v36,  v14,  v38,  v48,  v42,  v28,  v41,  v40,  v35,  v34,  (_BYTE)v26,  v49);
  }

  return result;
}

void sub_1000122C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v67 = a3;
  uint64_t v69 = a2;
  uint64_t v68 = a1;
  uint64_t v7 = type metadata accessor for EncodedAttachments(0LL);
  __chkstk_darwin(v7);
  uint64_t v63 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000AFF08);
  __chkstk_darwin(v9);
  uint64_t v64 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BalloonPlugin.Payload(0LL);
  __chkstk_darwin(v11);
  unint64_t v65 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000E624(&qword_1000AFF10);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = type metadata accessor for CombinedPluginAttachment(0LL);
  uint64_t v16 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for MessageDictionary(0LL);
  uint64_t v20 = (uint64_t *)(v5 + *(int *)(v19 + 104));
  uint64_t v21 = v20[1];
  if (!v21)
  {
    uint64_t v27 = type metadata accessor for BalloonPlugin(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(a4, 1LL, 1LL, v27);
    return;
  }

  uint64_t v22 = v19;
  uint64_t v61 = v16;
  uint64_t v62 = a4;
  uint64_t v23 = *v20;
  swift_bridgeObjectRetain(v21);
  sub_100011DA8((uint64_t)v70);
  sub_100012DC8((uint64_t)v70, (uint64_t)v71, &qword_1000AFF18);
  if (v71[68] >> 1 <= 0x7EuLL)
  {
    sub_1000129A4((uint64_t)v71, (uint64_t)v72);
    swift_bridgeObjectRetain(v21);
    sub_100012BF0( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_1000129CC);
    uint64_t v28 = v73;
    sub_100011324(v23, v21, (uint64_t)v72, v15);
    if (v28)
    {
      sub_100012BF0( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012ABC);
LABEL_11:
      swift_bridgeObjectRelease(v21);
      return;
    }

    uint64_t v60 = v23;
    uint64_t v29 = v61;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v15, 1LL, v66) == 1)
    {
      sub_100012BF0( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012ABC);
      swift_bridgeObjectRelease(v21);
      sub_100012EF8((uint64_t)v15, &qword_1000AFF10);
      uint64_t v30 = type metadata accessor for BalloonPlugin(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v62, 1LL, 1LL, v30);
    }

    else
    {
      uint64_t v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v29 + 32))(v18, v15, v66);
      CombinedPluginAttachment.payload.getter(v34);
      LODWORD(v73) = *(unsigned __int8 *)(v5 + 97);
      char v35 = sub_1000730FC();
      unsigned int v59 = v73 & 1;
      uint64_t v58 = v35;
      sub_100012D20(v67, v64, &qword_1000AFF08);
      uint64_t v36 = *(void **)v5;
      uint64_t v37 = &_swiftEmptyArrayStorage;
      if (*(void *)v5) {
        uint64_t v37 = *(void **)v5;
      }
      uint64_t v67 = (uint64_t)v37;
      __n128 v38 = (uint64_t *)(v5 + *(int *)(v22 + 208));
      uint64_t v39 = v38[1];
      uint64_t v57 = *v38;
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v36);
      uint64_t v73 = 0LL;
      uint64_t v56 = sub_100011F48();
      uint64_t v55 = v40;
      char v42 = v41 & 1;
      uint64_t v43 = (uint64_t *)(v5 + *(int *)(v22 + 204));
      uint64_t v44 = *v43;
      char v45 = *((_BYTE *)v43 + 8);
      uint64_t v46 = v63;
      CombinedPluginAttachment.attachments.getter();
      uint64_t v47 = v69;
      __n128 v48 = swift_bridgeObjectRetain(v69);
      uint64_t v53 = v39;
      uint64_t v49 = v62;
      uint64_t v50 = v47;
      uint64_t v51 = v73;
      BalloonPlugin.init(with:bundleID:isExpirable:attributionInfo:plainTextBody:content:participantDestinationIdentifiers:associatedMessageGUID:associatedMessageRange:associatedMessageType:attachments:)( v65,  v60,  v21,  v59,  v58,  v68,  v50,  v64,  v48,  v67,  v57,  v53,  v56,  v55,  v42,  v44,  v45,  v46);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v66);
      sub_100012BF0( (uint64_t)v70,  (void (*)(void, void, void, void, void, void, void, void, unint64_t))sub_100012ABC);
      if (!v51)
      {
        uint64_t v52 = type metadata accessor for BalloonPlugin(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v49, 0LL, 1LL, v52);
      }
    }
  }

  else
  {
    if (v23 == 0xD000000000000025LL && v21 == 0x800000010008A3E0LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, 0xD000000000000025LL, 0x800000010008A3E0LL, 0LL) & 1) != 0)
    {
      uint64_t v24 = v62;
      uint64_t v25 = v73;
      sub_100011FDC(v23, v21, v68, v69, v67, v62);
      if (!v25)
      {
        uint64_t v26 = type metadata accessor for BalloonPlugin(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v24, 0LL, 1LL, v26);
      }

      goto LABEL_11;
    }

    swift_bridgeObjectRelease(v21);
    uint64_t v31 = type metadata accessor for Explosion(0LL);
    unint64_t v32 = sub_10001295C();
    swift_allocError(v31, v32, 0LL, 0LL);
    uint64_t v33 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008A410LL,  0xD000000000000021LL,  0x800000010008A440LL,  0LL,  0LL);
    swift_willThrow(v33);
  }

unint64_t sub_10001295C()
{
  unint64_t result = qword_1000AFF20;
  if (!qword_1000AFF20)
  {
    uint64_t v1 = type metadata accessor for Explosion(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Explosion, v1);
    atomic_store(result, (unint64_t *)&qword_1000AFF20);
  }

  return result;
}

uint64_t sub_1000129A4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __int128 v2 = *(_OWORD *)(a1 + 16);
  __int128 v3 = *(_OWORD *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 61) = *(void *)(a1 + 61);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t sub_1000129CC( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  if (((a9 >> 33) & 0x7F) != 0x7F) {
    return sub_1000129E8(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1000129E8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if ((a9 & 0x8000000000LL) == 0) {
    return sub_100012A64(a1, a2);
  }
  swift_bridgeObjectRetain(a2);
  sub_100012AA8(a3, a4);
  swift_bridgeObjectRetain(a6);
  return sub_100012AA8(a7, a8);
}

uint64_t sub_100012A64(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100012AA8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100012A64(result, a2);
  }
  return result;
}

uint64_t sub_100012ABC( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, unint64_t a9)
{
  if (((a9 >> 33) & 0x7F) != 0x7F) {
    return sub_100012AD8(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_100012AD8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  if ((a9 & 0x8000000000LL) == 0) {
    return sub_100012B54(a1, a2);
  }
  swift_bridgeObjectRelease(a2);
  sub_100012B98(a3, a4);
  swift_bridgeObjectRelease(a6);
  return sub_100012B98(a7, a8);
}

uint64_t sub_100012B54(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100012B98(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100012B54(result, a2);
  }
  return result;
}

unint64_t sub_100012BAC()
{
  unint64_t result = qword_1000AFF30;
  if (!qword_1000AFF30)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000AFF30);
  }

  return result;
}

uint64_t sub_100012BF0( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, unint64_t))
{
  return a1;
}

unint64_t sub_100012C44()
{
  unint64_t result = qword_1000AFF38;
  if (!qword_1000AFF38)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_os_log);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000AFF38);
  }

  return result;
}

uint64_t sub_100012C80(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100012C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100012CDC()
{
  unint64_t result = qword_1000AFF58;
  if (!qword_1000AFF58)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000AFF58);
  }

  return result;
}

uint64_t sub_100012D20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000E624(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

void *sub_100012D64(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  unint64_t v6 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  sub_100012B98(v2, v3);
  swift_bridgeObjectRelease(v4);
  sub_100012B98(v5, v6);
  return a1;
}

uint64_t sub_100012DC8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000E624(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012E0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012E34(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012E60(uint64_t a1)
{
  return a1;
}

unint64_t sub_100012E88()
{
  unint64_t result = qword_1000AFF88;
  if (!qword_1000AFF88)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BalloonPluginPayloadAttachment.CodingKeys,  &type metadata for BalloonPluginPayloadAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000AFF88);
  }

  return result;
}

uint64_t sub_100012ECC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100012EF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000E624(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100012F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessageDictionary(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100012F78( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a2);
    sub_100012AA8(a3, a4);
    swift_bridgeObjectRetain(a6);
    return sub_100012AA8(a7, a8);
  }

  return result;
}

uint64_t sub_100012FE4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessageDictionary(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _s26BalloonPluginPayloadSourceOwxx(uint64_t a1)
{
  return sub_100012AD8( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32));
}

uint64_t _s26BalloonPluginPayloadSourceOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 68);
  uint64_t v13 = *(unsigned int *)(a2 + 64);
  sub_1000129E8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v13 | (v11 << 32));
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
  *(void *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = v11;
  *(_DWORD *)(a1 + 64) = v13;
  return a1;
}

uint64_t _s26BalloonPluginPayloadSourceOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  uint64_t v22 = *(unsigned __int8 *)(a2 + 68);
  uint64_t v11 = *(unsigned int *)(a2 + 64);
  sub_1000129E8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11 | (v22 << 32));
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  unint64_t v20 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  *(void *)a1 = v3;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
  *(void *)(a1 + 56) = v10;
  *(_DWORD *)(a1 + 64) = v11;
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = v22;
  sub_100012AD8(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

__n128 initializeWithTake for BalloonPluginPayloadAttachment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 61) = *(void *)(a2 + 61);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s26BalloonPluginPayloadSourceOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 68);
  int v4 = *(_DWORD *)(a2 + 64);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  unint64_t v13 = *(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32);
  __int128 v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v14;
  __int128 v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v15;
  *(_DWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = v3;
  sub_100012AD8(v5, v7, v6, v8, v9, v10, v11, v12, v13);
  return a1;
}

uint64_t _s26BalloonPluginPayloadSourceOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 69)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 68) >> 7) & 0xFFFFFF81 | (2 * ((*(unsigned __int8 *)(a1 + 68) >> 1) & 0x3F))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s26BalloonPluginPayloadSourceOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 6_Block_object_dispose(va, 8) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 127;
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 69) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7F) {
      *(_BYTE *)(result + 69) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 4_Block_object_dispose(va, 8) = 0u;
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_DWORD *)(result + 64) = 0;
      *(_BYTE *)(result + 6_Block_object_dispose(va, 8) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }

  return result;
}

uint64_t sub_100013348(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68) >> 7;
}

uint64_t sub_100013354(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 64);
  uint64_t result = a1 + 64;
  unint64_t v3 = v2 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32);
  *(_DWORD *)uint64_t result = v2;
  *(_BYTE *)(result + 4) = BYTE4(v3) & 0x7F;
  return result;
}

uint64_t sub_100013370(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 64);
  uint64_t result = a1 + 64;
  unint64_t v4 = (v3 | ((unint64_t)*(unsigned __int8 *)(result + 4) << 32)) & 0x1FFFFFFFFLL | (a2 << 39);
  *(_DWORD *)uint64_t result = v3;
  *(_BYTE *)(result + 4) = BYTE4(v4);
  return result;
}

ValueMetadata *_s26BalloonPluginPayloadSourceOMa()
{
  return &_s26BalloonPluginPayloadSourceON;
}

ValueMetadata *type metadata accessor for ScheduledMessageUpdateUnpacker()
{
  return &type metadata for ScheduledMessageUpdateUnpacker;
}

unint64_t sub_1000133B4(uint64_t a1)
{
  unint64_t result = sub_10000EAA0();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1000133D8()
{
  return sub_10000E9D8( &qword_1000AFF98,  (uint64_t (*)(uint64_t))&type metadata accessor for ScheduledMessageUpdate,  (uint64_t)&protocol conformance descriptor for ScheduledMessageUpdate);
}

uint64_t sub_100013404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v25[12] = a2;
  sub_10000E624(&qword_1000AFFA8);
  ((void (*)(void))__chkstk_darwin)();
  v25[9] = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for DecodingError(0LL);
  v25[13] = *(void *)(v26 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v25[10] = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  v25[15] = (char *)v25 - v7;
  __chkstk_darwin(v6);
  uint64_t v8 = type metadata accessor for ScheduledMessageUpdate.ScheduleState(0LL);
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for Metadata(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  __chkstk_darwin(v11);
  uint64_t v12 = type metadata accessor for Explosion(0LL);
  uint64_t v28 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v27 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[11] = a1;
  uint64_t v15 = TopLevelDictionary.decryptedData.getter(v13);
  if (v16 >> 60 != 15)
  {
    v25[6] = v12;
    v25[7] = v15;
    char v25[8] = v16;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v22 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v24 = v23;

    __asm { BR              X10 }
  }

  sub_100012C44();
  updated = (void *)static OS_os_log.scheduledMessageUpdateUnpacker.getter();
  uint64_t v18 = static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)( "Missing encrypted data for ScheduledMessageUpdate",  49LL,  2LL,  &_mh_execute_header,  updated,  v18,  &_swiftEmptyArrayStorage);

  unint64_t v19 = sub_100014040();
  swift_allocError(&type metadata for ScheduledMessageUpdateUnpacker.EncryptedMessageMissingData, v19, 0LL, 0LL);
  return swift_willThrow();
}

uint64_t sub_100013F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v6 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = PropertyListDecoder.init()();
  uint64_t v12 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v12);
  uint64_t result = swift_release(v11);
  if (!v3)
  {
    sub_100013404((uint64_t)v9, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return result;
}

unint64_t sub_100014040()
{
  unint64_t result = qword_1000AFFB8;
  if (!qword_1000AFFB8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10008D89C,  &type metadata for ScheduledMessageUpdateUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000AFFB8);
  }

  return result;
}

unint64_t sub_100014084()
{
  unint64_t result = qword_1000AFFC0;
  if (!qword_1000AFFC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E67C, &type metadata for ScheduledMessageUpdateDictionary);
    atomic_store(result, (unint64_t *)&qword_1000AFFC0);
  }

  return result;
}

ValueMetadata *type metadata accessor for ScheduledMessageUpdateUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for ScheduledMessageUpdateUnpacker.EncryptedMessageMissingData;
}

ValueMetadata *type metadata accessor for DeliveryReceiptUnpacker()
{
  return &type metadata for DeliveryReceiptUnpacker;
}

unint64_t sub_1000140E8(uint64_t a1)
{
  unint64_t result = sub_10000E730();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_100014110()
{
  unint64_t result = qword_1000AFFD0;
  if (!qword_1000AFFD0)
  {
    uint64_t v1 = type metadata accessor for DeliveryReceipt(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DeliveryReceipt, v1);
    atomic_store(result, (unint64_t *)&qword_1000AFFD0);
  }

  return result;
}

uint64_t sub_100014158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10007513C(a1, a2, a3);
}

ValueMetadata *type metadata accessor for PlayedReceiptUnpacker()
{
  return &type metadata for PlayedReceiptUnpacker;
}

unint64_t sub_10001417C(uint64_t a1)
{
  unint64_t result = sub_10000E7B8();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_1000141A4()
{
  unint64_t result = qword_1000AFFD8;
  if (!qword_1000AFFD8)
  {
    uint64_t v1 = type metadata accessor for PlayedReceipt(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for PlayedReceipt, v1);
    atomic_store(result, (unint64_t *)&qword_1000AFFD8);
  }

  return result;
}

uint64_t sub_1000141EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075158(a1, a2, a3);
}

uint64_t sub_100014200@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ImageHeaderError(0LL);
  uint64_t v77 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v76 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v78 = (char *)&v66 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v66 - v8;
  uint64_t v10 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Image(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v82 = *(void *)(v16 - 8);
  uint64_t v83 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v75 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v80 = (char *)&v66 - v20;
  __chkstk_darwin(v19);
  uint64_t v81 = (char *)&v66 - v21;
  uint64_t v84 = type metadata accessor for ImageHeader(0LL);
  uint64_t v22 = *(void *)(v84 - 8);
  uint64_t v23 = __chkstk_darwin(v84);
  uint64_t v79 = (char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v66 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v66 - v28;
  uint64_t v30 = type metadata accessor for MessageDictionary(0LL);
  uint64_t v31 = (uint64_t *)(v1 + *(int *)(v30 + 120));
  unint64_t v32 = v31[1];
  if (v32 >> 60 == 15 || (uint64_t v33 = (uint64_t *)(v1 + *(int *)(v30 + 104)), (v34 = v33[1]) == 0))
  {
    uint64_t v45 = type metadata accessor for TypingIndicator.Icon(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))( a1,  1LL,  1LL,  v45);
  }

  else
  {
    uint64_t v68 = v9;
    uint64_t v69 = v3;
    uint64_t v74 = a1;
    uint64_t v35 = *v31;
    uint64_t v70 = *v33;
    sub_100012AA8(v35, v32);
    swift_bridgeObjectRetain(v34);
    uint64_t v71 = v35;
    unint64_t v72 = v32;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v36 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");
    uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v39 = v38;

    uint64_t v40 = v84;
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v29, enum case for ImageHeader.jpeg(_:), v84);
    LOBYTE(v36) = Data.hasValidHeader(for:)(v29, v37, v39);
    char v41 = v29;
    char v42 = *(void (**)(char *, uint64_t))(v22 + 8);
    v42(v41, v40);
    if ((v36 & 1) != 0)
    {
      v85[3] = (uint64_t)&type metadata for Data;
      v85[4] = (uint64_t)&protocol witness table for Data;
      v85[0] = v37;
      v85[1] = v39;
      uint64_t v43 = type metadata accessor for Image.Encoding(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v12, 1LL, 1LL, v43);
      sub_100012A64(v37, v39);
      Image.init(provider:maxPixelDimension:enforcedEncoding:)(v85, 0LL, 1LL, v12);
      uint64_t v44 = v74;
      TypingIndicator.Icon.init(with:image:)(v70, v34, v15);
      sub_100012B98(v71, v72);
      sub_100012B54(v37, v39);

      uint64_t v49 = type metadata accessor for TypingIndicator.Icon(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))( v44,  0LL,  1LL,  v49);
    }

    else
    {
      __n128 v46 = swift_bridgeObjectRelease(v34);
      uint64_t v47 = v27;
      uint64_t v70 = v37;
      uint64_t v48 = Data.sniffedImageUTType()(v37, v39, v46);
      unint64_t v67 = v39;
      uint64_t v51 = v81;
      static Log.textMessageUnpacker.getter(v48);
      uint64_t v52 = v79;
      uint64_t v53 = v27;
      uint64_t v54 = v84;
      uint64_t v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))(v79, v53, v84);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.info.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v59 = swift_slowAlloc(32LL, -1LL);
        v85[0] = v59;
        *(_DWORD *)uint64_t v58 = 136315138;
        uint64_t v80 = (char *)(v58 + 4);
        uint64_t v60 = ImageHeader.rawValue.getter();
        unint64_t v62 = v61;
        uint64_t v86 = sub_100014C84(v60, v61, v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v80, v58 + 12);
        __n128 v63 = swift_bridgeObjectRelease(v62);
        ((void (*)(char *, uint64_t, __n128))v42)(v52, v54, v63);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Skipping typing indicator icon since image header was incorrect: %s",  v58,  0xCu);
        swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
        sub_100012B98(v71, v72);

        sub_100012B54(v70, v67);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
      }

      else
      {
        sub_100012B98(v71, v72);

        sub_100012B54(v70, v67);
        v42(v52, v54);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
      }

      v42(v47, v54);
      uint64_t v64 = v74;
      uint64_t v65 = type metadata accessor for TypingIndicator.Icon(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))( v64,  1LL,  1LL,  v65);
    }
  }

uint64_t sub_100014C84(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100014D54(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001533C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001533C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_100010D60(v12);
  return v7;
}

uint64_t sub_100014D54(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

LABEL_13:
    uint64_t result = sub_100014F0C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  __break(1u);
  return result;
}

LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
  }
}

uint64_t sub_100014F0C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100014FA0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000151F0(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000151F0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100014FA0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_100015114(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100015114(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_10000E624(&qword_1000AFFF0);
  uint64_t v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100015178(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

uint64_t sub_1000151F0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000E624(&qword_1000AFFF0);
    unint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    unint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10001533C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for MessagesAppBalloonUnpacker()
{
  return &type metadata for MessagesAppBalloonUnpacker;
}

uint64_t sub_10001538C()
{
  uint64_t v0 = sub_10000E624(&qword_1000B0040);
  uint64_t v1 = swift_allocObject(v0, 352LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_10008D9D0;
  uint64_t v2 = sub_100018290(0LL, (unint64_t *)&qword_1000B0038, &OBJC_CLASS___NSDictionary_ptr);
  *(void *)(v1 + 56) = sub_10000E624(&qword_1000B0048);
  *(void *)(v1 + 32) = v2;
  uint64_t v3 = sub_100018290(0LL, &qword_1000B0050, &OBJC_CLASS___NSString_ptr);
  *(void *)(v1 + 8_Block_object_dispose(va, 8) = sub_10000E624(&qword_1000B0058);
  *(void *)(v1 + 64) = v3;
  uint64_t v4 = sub_100018290(0LL, &qword_1000B0060, &OBJC_CLASS___NSData_ptr);
  *(void *)(v1 + 120) = sub_10000E624(&qword_1000B0068);
  *(void *)(v1 + 96) = v4;
  uint64_t v5 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v1 + 152) = sub_10000E624(&qword_1000B0070);
  *(void *)(v1 + 12_Block_object_dispose(va, 8) = v5;
  uint64_t v6 = sub_100018290(0LL, &qword_1000B0028, &OBJC_CLASS___NSURL_ptr);
  *(void *)(v1 + 184) = sub_10000E624(&qword_1000B0078);
  *(void *)(v1 + 160) = v6;
  uint64_t v7 = sub_100018290(0LL, &qword_1000B0080, &OBJC_CLASS___NSUUID_ptr);
  *(void *)(v1 + 216) = sub_10000E624(&qword_1000B0088);
  *(void *)(v1 + 192) = v7;
  uint64_t v8 = sub_100018290(0LL, &qword_1000B0090, &OBJC_CLASS___NSValue_ptr);
  *(void *)(v1 + 24_Block_object_dispose(va, 8) = sub_10000E624(&qword_1000B0098);
  *(void *)(v1 + 224) = v8;
  uint64_t v9 = sub_100018290(0LL, &qword_1000B00A0, &OBJC_CLASS___NSMutableDictionary_ptr);
  *(void *)(v1 + 280) = sub_10000E624(&qword_1000B00A8);
  *(void *)(v1 + 256) = v9;
  uint64_t v10 = sub_100018290(0LL, &qword_1000B00B0, &OBJC_CLASS___NSMutableData_ptr);
  *(void *)(v1 + 312) = sub_10000E624(&qword_1000B00B8);
  *(void *)(v1 + 28_Block_object_dispose(va, 8) = v10;
  uint64_t v11 = sub_100018290(0LL, &qword_1000B00C0, &OBJC_CLASS___NSMutableString_ptr);
  *(void *)(v1 + 344) = sub_10000E624(&qword_1000B00C8);
  *(void *)(v1 + 320) = v11;
  sub_100018290(0LL, &qword_1000B00D0, &OBJC_CLASS___NSSet_ptr);
  uint64_t result = NSSet.init(arrayLiteral:)(v1);
  qword_1000BC018 = result;
  return result;
}

uint64_t sub_1000155D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&__int128 v241 = a2;
  *((void *)&v241 + 1) = a3;
  uint64_t v236 = a4;
  uint64_t v6 = sub_10000E624(&qword_1000AFFF8);
  __chkstk_darwin(v6);
  uint64_t v238 = (uint64_t)&v221 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000E624(&qword_1000AFF60);
  __chkstk_darwin(v8);
  uint64_t v239 = (uint64_t)&v221 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v10);
  uint64_t v240 = (uint64_t)&v221 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v12);
  unint64_t v245 = (unint64_t)&v221 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Image(0LL);
  __chkstk_darwin(v14);
  uint64_t v243 = (uint64_t)&v221 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000E624(&qword_1000B0008);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v237 = (uint64_t)&v221 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v244 = (char *)&v221 - v20;
  __chkstk_darwin(v19);
  uint64_t v251 = (uint64_t)&v221 - v21;
  uint64_t v22 = sub_10000E624(&qword_1000B0010);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v235 = (uint64_t)&v221 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v242 = (uint64_t)&v221 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v221 - v27;
  uint64_t v29 = type metadata accessor for MessagesAppBalloon.Layout(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v221 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = static os_log_type_t.info.getter(v31);
  sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v35 = (void *)static OS_os_log.messagesAppBalloonUnpacker.getter();
  os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v35,  "Unpacking AppExtension root dictionary",  38LL,  2LL,  &_swiftEmptyArrayStorage);

  uint64_t v36 = IMExtensionPayloadBalloonLayoutInfoKey.getter();
  uint64_t v38 = v37;
  uint64_t v39 = a1;
  uint64_t v40 = sub_1000179CC(v36, v37, a1);
  if (v4) {
    return swift_bridgeObjectRelease(v38);
  }
  uint64_t v42 = v40;
  uint64_t v233 = v39;
  v231 = v28;
  uint64_t v232 = v30;
  v234 = v33;
  if (v40)
  {
    unint64_t v43 = sub_100017B5C(v40);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v42);
    if (v43)
    {
      uint64_t v44 = swift_bridgeObjectRetain(v43);
      uint64_t v45 = IMBalloonLayoutInfoCaptionKey.getter(v44);
      uint64_t v47 = v46;
      uint64_t v48 = sub_100017114(v45, v46, v43);
      uint64_t v55 = v54;
      uint64_t v229 = v48;
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v47);
      uint64_t v56 = swift_bridgeObjectRetain(v43);
      uint64_t v57 = IMBalloonLayoutInfoSubcaptionKey.getter(v56);
      uint64_t v59 = v58;
      uint64_t v60 = sub_100017114(v57, v58, v43);
      uint64_t v72 = v71;
      uint64_t v228 = v60;
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v59);
      uint64_t v73 = swift_bridgeObjectRetain(v43);
      uint64_t v74 = IMBalloonLayoutInfoSecondarySubcaptionKey.getter(v73);
      uint64_t v76 = v75;
      uint64_t v226 = sub_100017114(v74, v75, v43);
      uint64_t v227 = v84;
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v76);
      uint64_t v85 = swift_bridgeObjectRetain(v43);
      uint64_t v86 = IMBalloonLayoutInfoTertiarySubcaptionKey.getter(v85);
      uint64_t v88 = v87;
      uint64_t v224 = sub_100017114(v86, v87, v43);
      uint64_t v225 = v103;
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v88);
      uint64_t v104 = swift_bridgeObjectRetain(v43);
      uint64_t v105 = IMBalloonLayoutInfoImageTitleKey.getter(v104);
      uint64_t v107 = v106;
      uint64_t v222 = sub_100017114(v105, v106, v43);
      uint64_t v223 = v134;
      uint64_t v230 = v29;
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v107);
      uint64_t v135 = swift_bridgeObjectRetain(v43);
      uint64_t v136 = IMBalloonLayoutInfoImageSubTitleKey.getter(v135);
      uint64_t v138 = v137;
      uint64_t v42 = sub_100017114(v136, v137, v43);
      uint64_t v160 = v159;
      swift_bridgeObjectRelease(v43);
      uint64_t v161 = swift_bridgeObjectRelease(v138);
      uint64_t v162 = IMBalloonLayoutInfoTapActionKey.getter(v161);
      uint64_t v164 = v163;
      uint64_t v173 = sub_100017838(v162, v163, v43);
      unint64_t v174 = v43;
      char v176 = v175;
      swift_bridgeObjectRelease(v174);
      swift_bridgeObjectRelease(v164);
      char v177 = v176 & 1;
      uint64_t v178 = v227;
      uint64_t v179 = v229;
      uint64_t v180 = v228;
      uint64_t v181 = v225;
      uint64_t v182 = v226;
      uint64_t v183 = v224;
      uint64_t v184 = v223;
      uint64_t v185 = v222;
      goto LABEL_9;
    }

    uint64_t v230 = v29;
    uint64_t v173 = 0LL;
    uint64_t v42 = 0LL;
  }

  else
  {
    uint64_t v230 = v29;
    swift_bridgeObjectRelease(v38);
    uint64_t v173 = 0LL;
  }

  uint64_t v160 = 0LL;
  uint64_t v185 = 0LL;
  uint64_t v184 = 0LL;
  uint64_t v183 = 0LL;
  uint64_t v181 = 0LL;
  uint64_t v182 = 0LL;
  uint64_t v178 = 0LL;
  uint64_t v180 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v179 = 0LL;
  uint64_t v55 = 0LL;
  char v177 = 1;
LABEL_9:
  uint64_t v49 = MessagesAppBalloon.Layout.init(with:subcaption:secondarySubCaption:tertiarySubCaption:imageTitle:imageSubtitle:tapAction:)( v179,  v55,  v180,  v72,  v182,  v178,  v183,  v181,  v185,  v184,  v42,  v160,  v173,  v177);
  uint64_t v50 = IMExtensionPayloadBalloonLiveLayoutInfoKey.getter(v49);
  uint64_t v52 = v51;
  uint64_t v53 = v233;
  sub_10001769C(v50, v51, v233, &v246);
  swift_bridgeObjectRelease(v52);
  __int128 v61 = v246;
  uint64_t v62 = type metadata accessor for MessagesAppBalloon.LiveLayout(0LL);
  __n128 v63 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL);
  uint64_t v64 = v63(v231, 1LL, 1LL, v62);
  if (*((void *)&v61 + 1) >> 60 == 15LL)
  {
    uint64_t v229 = v61;
  }

  else
  {
    uint64_t v77 = sub_100012A64(v61, *((unint64_t *)&v61 + 1));
    uint64_t v78 = static os_log_type_t.info.getter(v77);
    uint64_t v79 = (void *)static OS_os_log.messagesAppBalloonUnpacker.getter();
    os_log(_:dso:log:_:_:)( v78,  &_mh_execute_header,  v79,  "Unpacking LiveLayout dictionary",  31LL,  2LL,  &_swiftEmptyArrayStorage);

    id v80 = sub_100017EC0(v61, *((id *)&v61 + 1), 0xD000000000000014LL, (void *)0x800000010008AB30LL);
    uint64_t v81 = ((uint64_t (*)(void))IMExtensionPayloadBalloonLayoutClassKey.getter)();
    uint64_t v83 = v82;
    uint64_t v108 = sub_100017114(v81, v82, (uint64_t)v80);
    uint64_t v110 = v109;
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v80);
    uint64_t v111 = v242;
    MessagesAppBalloon.LiveLayout.init(with:)(v108, v110);
    uint64_t v139 = (uint64_t)v231;
    sub_100012EF8((uint64_t)v231, &qword_1000B0010);
    uint64_t v229 = v61;
    sub_100012B98(v61, *((unint64_t *)&v61 + 1));
    v63((char *)v111, 0LL, 1LL, v62);
    uint64_t v64 = sub_100012DC8(v111, v139, &qword_1000B0010);
    uint64_t v53 = v233;
  }

  uint64_t v65 = IMExtensionPayloadAppIconKey.getter(v64);
  uint64_t v67 = v66;
  sub_10001769C(v65, v66, v53, &v246);
  uint64_t v68 = v230;
  uint64_t v69 = v232;
  uint64_t v70 = v251;
  swift_bridgeObjectRelease(v67);
  unint64_t v90 = *((void *)&v246 + 1);
  uint64_t v89 = v246;
  uint64_t v230 = v68;
  if (*((void *)&v246 + 1) >> 60 == 15LL)
  {
    uint64_t v242 = v246;
  }

  else
  {
    uint64_t v91 = Data._imOptionallyDecompress()(v246, *((void *)&v246 + 1));
    uint64_t v92 = v89;
    unint64_t v94 = v93;
    sub_100012B98(v92, v90);
    uint64_t v242 = v91;
    unint64_t v90 = v94;
  }

  uint64_t v95 = type metadata accessor for MessagesAppBalloon.AppIconImage(0LL);
  uint64_t v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56LL);
  uint64_t v97 = v96(v70, 1LL, 1LL, v95);
  if (v90 >> 60 != 15)
  {
    *((void *)&v247 + 1) = &type metadata for Data;
    v248 = &protocol witness table for Data;
    uint64_t v98 = v242;
    *(void *)&__int128 v246 = v242;
    *((void *)&v246 + 1) = v90;
    uint64_t v99 = type metadata accessor for Image.Encoding(0LL);
    unint64_t v100 = v245;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56LL))( v245,  1LL,  1LL,  v99);
    sub_100012A64(v98, v90);
    uint64_t v101 = v243;
    Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v246, 0LL, 1LL, v100);
    uint64_t v102 = (uint64_t)v244;
    MessagesAppBalloon.AppIconImage.init(with:)(v101);
    sub_100012EF8(v70, &qword_1000B0008);
    v96(v102, 0LL, 1LL, v95);
    uint64_t v97 = sub_100012DC8(v102, v70, &qword_1000B0008);
    uint64_t v69 = v232;
  }

  uint64_t v112 = IMExtensionPayloadAdamIDIKey.getter(v97);
  uint64_t v114 = v113;
  uint64_t v115 = v233;
  if (*(void *)(v233 + 16) && (unint64_t v116 = sub_100067C94(v112, v113), (v117 & 1) != 0))
  {
    sub_10001533C(*(void *)(v115 + 56) + 32 * v116, (uint64_t)&v246);
  }

  else
  {
    __int128 v246 = 0u;
    __int128 v247 = 0u;
  }

  swift_bridgeObjectRelease(v114);
  if (!*((void *)&v247 + 1))
  {
    unint64_t v245 = *((void *)&v61 + 1);
    uint64_t v118 = sub_100012EF8((uint64_t)&v246, &qword_1000B0018);
LABEL_30:
    uint64_t v126 = IMExtensionPayloadAdamIDIKey.getter(v118);
    uint64_t v128 = v127;
    uint64_t v129 = sub_100017838(v126, v127, v115);
    char v131 = v130;
    uint64_t v132 = v230;
    uint64_t v121 = swift_bridgeObjectRelease(v128);
    int v133 = v131 & 1;
    goto LABEL_32;
  }

  uint64_t v118 = swift_dynamicCast(&v249, &v246, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v118 & 1) == 0)
  {
    unint64_t v245 = *((void *)&v61 + 1);
    goto LABEL_30;
  }

  uint64_t v120 = v249;
  unint64_t v119 = v250;
  uint64_t v121 = swift_bridgeObjectRelease(v250);
  uint64_t v122 = HIBYTE(v119) & 0xF;
  if ((v119 & 0x2000000000000000LL) == 0) {
    uint64_t v122 = v120 & 0xFFFFFFFFFFFFLL;
  }
  if (v122)
  {
    uint64_t v123 = type metadata accessor for Explosion(0LL);
    unint64_t v124 = sub_10001295C();
    swift_allocError(v123, v124, 0LL, 0LL);
    uint64_t v125 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008AA20LL,  0x7974706D456E6F4ELL,  0xEE00676E69727453LL,  0LL,  0LL);
    swift_willThrow(v125);
    sub_100012B98(v242, v90);
    sub_100012B98(v229, *((unint64_t *)&v61 + 1));
    sub_100012EF8(v70, &qword_1000B0008);
    sub_100012EF8((uint64_t)v231, &qword_1000B0010);
    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v234, v230);
  }

  unint64_t v245 = *((void *)&v61 + 1);
  uint64_t v132 = v230;
  uint64_t v129 = 0LL;
  int v133 = 1;
LABEL_32:
  LODWORD(v244) = v133;
  uint64_t v140 = IMExtensionPayloadDataKey.getter(v121);
  uint64_t v142 = v141;
  sub_10001769C(v140, v141, v115, &v246);
  swift_bridgeObjectRelease(v142);
  __int128 v143 = v246;
  __int128 v246 = v241;
  uint64_t v249 = 58LL;
  unint64_t v250 = 0xE100000000000000LL;
  unint64_t v144 = sub_100012BAC();
  uint64_t v145 = StringProtocol.components<A>(separatedBy:)( &v249,  &type metadata for String,  &type metadata for String,  v144,  v144);
  uint64_t v146 = v145;
  uint64_t v147 = *(void *)(v145 + 16);
  if (!v147)
  {
    swift_bridgeObjectRelease(v145);
    uint64_t v165 = type metadata accessor for Explosion(0LL);
    unint64_t v166 = sub_10001295C();
    swift_allocError(v165, v166, 0LL, 0LL);
    uint64_t v167 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008AA20LL,  0xD00000000000001ELL,  0x800000010008AAF0LL,  0LL,  0LL);
    swift_willThrow(v167);
    sub_100012B98(v143, *((unint64_t *)&v143 + 1));
    sub_100012B98(v242, v90);
    sub_100012B98(v229, v245);
    sub_100012EF8(v251, &qword_1000B0008);
    sub_100012EF8((uint64_t)v231, &qword_1000B0010);
    v158 = *(uint64_t (**)(char *, uint64_t))(v69 + 8);
    return v158(v234, v132);
  }

  uint64_t v243 = v143;
  uint64_t v148 = v145 + 16 * v147;
  uint64_t v150 = *(void *)(v148 + 16);
  uint64_t v149 = *(void *)(v148 + 24);
  swift_bridgeObjectRetain(v149);
  uint64_t v151 = swift_bridgeObjectRelease(v146);
  v152 = (void *)IMExtensionAllowedPayloadData.getter(v151);
  char v153 = sub_100016B24(v150, v149, v152);
  uint64_t v154 = swift_bridgeObjectRelease(v152);
  if ((v153 & 1) == 0 && *((void *)&v143 + 1) >> 60 != 15LL)
  {
    swift_bridgeObjectRelease(v149);
    uint64_t v155 = type metadata accessor for Explosion(0LL);
    unint64_t v156 = sub_10001295C();
    swift_allocError(v155, v156, 0LL, 0LL);
    uint64_t v157 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008AA20LL,  0xD000000000000015LL,  0x800000010008AAD0LL,  0LL,  0LL);
    swift_willThrow(v157);
    sub_100012B98(v243, *((unint64_t *)&v143 + 1));
    sub_100012B98(v242, v90);
    sub_100012B98(v229, v245);
    sub_100012EF8(v251, &qword_1000B0008);
    sub_100012EF8((uint64_t)v231, &qword_1000B0010);
    v158 = *(uint64_t (**)(char *, uint64_t))(v232 + 8);
    return v158(v234, v132);
  }

  uint64_t v168 = IMExtensionPayloadAccessibilityLableKey.getter(v154);
  uint64_t v170 = v169;
  uint64_t v171 = v233;
  *(void *)&__int128 v241 = sub_100017114(v168, v169, v233);
  *((void *)&v241 + 1) = v172;
  uint64_t v186 = swift_bridgeObjectRelease(v170);
  uint64_t v187 = IMExtensionPayloadUserSessionIdentifier.getter(v186);
  uint64_t v189 = v188;
  sub_10001743C(v187, v188, v171, v240);
  uint64_t v190 = swift_bridgeObjectRelease(v189);
  uint64_t v191 = IMExtensionPayloadLocalizedDescriptionTextKey.getter(v190);
  uint64_t v193 = v192;
  uint64_t v226 = sub_100017114(v191, v192, v233);
  uint64_t v227 = v194;
  uint64_t v228 = 0LL;
  uint64_t v195 = swift_bridgeObjectRelease(v193);
  uint64_t v196 = IMExtensionPayloadURLKey.getter(v195);
  uint64_t v198 = v197;
  uint64_t v199 = v228;
  sub_100016BE8(v196, v197, v233, v239);
  uint64_t v228 = v199;
  if (v199)
  {
    swift_bridgeObjectRelease(v149);
    sub_100012B98(v243, *((unint64_t *)&v143 + 1));
    swift_bridgeObjectRelease(v198);
    swift_bridgeObjectRelease(*((void *)&v241 + 1));
    swift_bridgeObjectRelease(v227);
    sub_100012B98(v242, v90);
    sub_100012B98(v229, v245);
    sub_100012EF8(v240, &qword_1000B0000);
    sub_100012EF8(v251, &qword_1000B0008);
    sub_100012EF8((uint64_t)v231, &qword_1000B0010);
    return (*(uint64_t (**)(char *, uint64_t))(v232 + 8))(v234, v132);
  }

  swift_bridgeObjectRelease(v198);
  uint64_t v200 = v232;
  uint64_t v201 = v238;
  (*(void (**)(uint64_t, char *, uint64_t))(v232 + 16))(v238, v234, v132);
  uint64_t v202 = v201;
  uint64_t v203 = v132;
  uint64_t v204 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v200 + 56))(v202, 0LL, 1LL, v132);
  uint64_t v205 = IMExtensionPayloadAppNameKey.getter(v204);
  uint64_t v207 = v206;
  uint64_t v208 = v228;
  uint64_t v209 = sub_100017114(v205, v206, v233);
  uint64_t v228 = v208;
  if (v208)
  {
    swift_bridgeObjectRelease(v149);
    sub_100012B98(v243, *((unint64_t *)&v143 + 1));
    swift_bridgeObjectRelease(v207);
    swift_bridgeObjectRelease(*((void *)&v241 + 1));
    swift_bridgeObjectRelease(v227);
    sub_100012B98(v242, v90);
    sub_100012B98(v229, v245);
    sub_100012EF8(v238, &qword_1000AFFF8);
    sub_100012EF8(v239, &qword_1000AFF60);
    sub_100012EF8(v240, &qword_1000B0000);
    uint64_t v211 = v251;
LABEL_44:
    sub_100012EF8(v211, &qword_1000B0008);
    sub_100012EF8((uint64_t)v231, &qword_1000B0010);
    return (*(uint64_t (**)(char *, uint64_t))(v232 + 8))(v234, v203);
  }

  uint64_t v212 = v209;
  uint64_t v213 = v210;
  swift_bridgeObjectRelease(v207);
  uint64_t v214 = sub_100012D20(v251, v237, &qword_1000B0008);
  uint64_t v215 = IMExtensionPayloadBalloonLayoutClassKey.getter(v214);
  uint64_t v217 = v216;
  uint64_t v218 = v228;
  uint64_t v233 = sub_100017114(v215, v216, v233);
  uint64_t v225 = v219;
  uint64_t v228 = v218;
  if (v218)
  {
    swift_bridgeObjectRelease(v149);
    sub_100012B98(v243, *((unint64_t *)&v143 + 1));
    swift_bridgeObjectRelease(v217);
    swift_bridgeObjectRelease(*((void *)&v241 + 1));
    swift_bridgeObjectRelease(v227);
    swift_bridgeObjectRelease(v213);
    sub_100012B98(v242, v90);
    sub_100012B98(v229, v245);
    sub_100012EF8(v237, &qword_1000B0008);
    sub_100012EF8(v238, &qword_1000AFFF8);
    sub_100012EF8(v239, &qword_1000AFF60);
    sub_100012EF8(v240, &qword_1000B0000);
    uint64_t v211 = v251;
    goto LABEL_44;
  }

  swift_bridgeObjectRelease(v217);
  uint64_t v220 = v235;
  sub_100012D20((uint64_t)v231, v235, &qword_1000B0010);
  MessagesAppBalloon.init(with:sessionIdentifier:ldtext:url:layout:appId:appName:appIcon:layoutClass:liveLayout:data:extensionId:)( v241,  *((void *)&v241 + 1),  v240,  v226,  v227,  v239,  v238,  v129,  (_BYTE)v244,  v212,  v213,  v237,  v233,  v225,  v220,  v243,  *((void *)&v143 + 1),  v143,  v149);
  sub_100012B98(v242, v90);
  sub_100012B98(v229, v245);
  sub_100012EF8(v251, &qword_1000B0008);
  sub_100012EF8((uint64_t)v231, &qword_1000B0010);
  return (*(uint64_t (**)(char *, uint64_t))(v232 + 8))(v234, v203);
}

uint64_t sub_100016B24(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  uint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

void sub_100016BE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_10000E624(&qword_1000AFF60);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)sub_1000172A0(a1, a2, a3);
  if (!v4)
  {
    uint64_t v13 = v12;
    if (!v12)
    {
      uint64_t v22 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v11, 1LL, 1LL, v22);
      goto LABEL_11;
    }

    id v14 = [v12 absoluteString];
    if (!v14)
    {
LABEL_9:
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

      uint64_t v21 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v11, 0LL, 1LL, v21);
LABEL_11:
      sub_100012DC8((uint64_t)v11, a4, &qword_1000AFF60);
      return;
    }

    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;

    if (v16) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v18 == 0xE000000000000000LL;
    }
    if (v19)
    {
      swift_bridgeObjectRelease(0xE000000000000000LL);
    }

    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, 0LL, 0xE000000000000000LL, 0LL);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) == 0) {
        goto LABEL_9;
      }
    }

    uint64_t v23 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(a4, 1LL, 1LL, v23);
  }

uint64_t sub_100016D94@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v51 = (char *)a3;
  uint64_t v48 = a1;
  uint64_t v45 = a6;
  uint64_t v44 = type metadata accessor for BalloonPlugin.Payload(0LL);
  uint64_t v6 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for EncodedAttachments(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for MessagesAppBalloon(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = static os_log_type_t.info.getter(v14);
  sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v18 = (void *)static OS_os_log.messagesAppBalloonUnpacker.getter();
  os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  v18,  "Executing MessagesAppBalloon unpacking flow.",  44LL,  2LL,  &_swiftEmptyArrayStorage);

  if (*((void *)v51 + 2))
  {
    uint64_t v19 = type metadata accessor for Explosion(0LL);
    unint64_t v20 = sub_10001295C();
    swift_allocError(v19, v20, 0LL, 0LL);
    uint64_t v21 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008AA20LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  0x656D686361747461LL,  0xEB0000000073746ELL);
    return swift_willThrow(v21);
  }

  else
  {
    uint64_t v24 = v46;
    uint64_t v23 = v47;
    uint64_t v42 = v11;
    uint64_t v43 = v13;
    uint64_t v51 = v16;
    uint64_t v41 = v6;
    uint64_t v25 = v12;
    uint64_t v26 = Data._imOptionallyDecompress()(v48, v49);
    unint64_t v28 = (unint64_t)v27;
    unint64_t v29 = v50;
    id v30 = sub_100017EC0(v26, v27, 0xD00000000000001ALL, (void *)0x800000010008AA50LL);
    if (v29)
    {
      uint64_t v31 = v26;
      unint64_t v32 = v28;
    }

    else
    {
      id v33 = v30;
      uint64_t v49 = v26;
      unint64_t v50 = v28;
      sub_1000155D8((uint64_t)v30, v24, v23, (uint64_t)v51);
      uint64_t v34 = swift_bridgeObjectRelease(v33);
      uint64_t v35 = static os_log_type_t.info.getter(v34);
      uint64_t v36 = (void *)static OS_os_log.messagesAppBalloonUnpacker.getter();
      os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v36,  "Sucessfully completed unpacking.",  32LL,  2LL,  &_swiftEmptyArrayStorage);

      uint64_t v37 = v42;
      EncodedAttachments.init(with:)(&_swiftEmptyArrayStorage);
      uint64_t v38 = v43;
      uint64_t v39 = (uint64_t)v51;
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v8, v51, v25);
      (*(void (**)(char *, void, uint64_t))(v41 + 104))( v8,  enum case for BalloonPlugin.Payload.messagesAppBalloon(_:),  v44);
      CombinedPluginAttachment.init(with:payload:)(v37, v8);
      uint64_t v40 = v49;
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v25);
      uint64_t v31 = v40;
      unint64_t v32 = v50;
    }

    return sub_100012B54(v31, v32);
  }

uint64_t sub_100017100@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_100016D94(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100017114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v6 = sub_100067C94(a1, a2);
  if ((v7 & 1) == 0)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v13);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v14 + 1))
  {
LABEL_8:
    sub_100012EF8((uint64_t)&v13, &qword_1000B0018);
    return 0LL;
  }

  sub_100018278(&v13, v15);
  sub_10001533C((uint64_t)v15, (uint64_t)&v13);
  if ((swift_dynamicCast(&v12, &v13, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
  {
    sub_100010D60(v15);
    return v12;
  }

  else
  {
    uint64_t v9 = type metadata accessor for Explosion(0LL);
    unint64_t v10 = sub_10001295C();
    swift_allocError(v9, v10, 0LL, 0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008AB50LL,  0xD000000000000012LL,  0x800000010008AB80LL,  a1,  a2);
    swift_willThrow(v11);
    return sub_100010D60(v15);
  }

uint64_t sub_1000172A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v6 = sub_100067C94(a1, a2);
  if ((v7 & 1) == 0)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v14);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v15 + 1))
  {
LABEL_8:
    sub_100012EF8((uint64_t)&v14, &qword_1000B0018);
    return 0LL;
  }

  sub_100018278(&v14, v16);
  sub_10001533C((uint64_t)v16, (uint64_t)&v14);
  uint64_t v8 = sub_100018290(0LL, &qword_1000B0028, &OBJC_CLASS___NSURL_ptr);
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
  {
    sub_100010D60(v16);
    return v13;
  }

  else
  {
    uint64_t v10 = type metadata accessor for Explosion(0LL);
    unint64_t v11 = sub_10001295C();
    swift_allocError(v10, v11, 0LL, 0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v12 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008AB50LL,  0xD000000000000012LL,  0x800000010008AB80LL,  a1,  a2);
    swift_willThrow(v12);
    return sub_100010D60(v16);
  }

uint64_t sub_10001743C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a3 + 16))
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v11 = sub_100067C94(a1, a2);
  if ((v12 & 1) == 0)
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a3 + 56) + 32 * v11, (uint64_t)&v22);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v23 + 1))
  {
LABEL_8:
    sub_100012EF8((uint64_t)&v22, &qword_1000B0018);
    uint64_t v18 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a4,  1LL,  1LL,  v18);
  }

  sub_100018278(&v22, v24);
  sub_10001533C((uint64_t)v24, (uint64_t)&v22);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  char v14 = swift_dynamicCast(v10, &v22, (char *)&type metadata for Any + 8, v13, 6LL);
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
  if ((v14 & 1) != 0)
  {
    v16(v10, 0LL, 1LL, v13);
    sub_100010D60(v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a4, v10, v13);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v16)(a4, 0LL, 1LL, v13);
  }

  else
  {
    v16(v10, 1LL, 1LL, v13);
    sub_100012EF8((uint64_t)v10, &qword_1000B0000);
    uint64_t v19 = type metadata accessor for Explosion(0LL);
    unint64_t v20 = sub_10001295C();
    swift_allocError(v19, v20, 0LL, 0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v21 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008AB50LL,  0xD000000000000012LL,  0x800000010008AB80LL,  a1,  a2);
    swift_willThrow(v21);
    return sub_100010D60(v24);
  }

uint64_t sub_10001769C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X8>)
{
  if (!*(void *)(a3 + 16))
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v8 = sub_100067C94(a1, a2);
  if ((v9 & 1) == 0)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a3 + 56) + 32 * v8, (uint64_t)&v16);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v17 + 1))
  {
LABEL_8:
    uint64_t result = sub_100012EF8((uint64_t)&v16, &qword_1000B0018);
    __int128 v11 = xmmword_10008D9E0;
    goto LABEL_9;
  }

  sub_100018278(&v16, v18);
  sub_10001533C((uint64_t)v18, (uint64_t)&v16);
  if ((swift_dynamicCast(&v15, &v16, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
  {
    uint64_t result = sub_100010D60(v18);
    __int128 v11 = v15;
LABEL_9:
    *a4 = v11;
    return result;
  }

  uint64_t v12 = type metadata accessor for Explosion(0LL);
  unint64_t v13 = sub_10001295C();
  swift_allocError(v12, v13, 0LL, 0LL);
  swift_bridgeObjectRetain(a2);
  uint64_t v14 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008AB50LL,  0xD000000000000012LL,  0x800000010008AB80LL,  a1,  a2);
  swift_willThrow(v14);
  return sub_100010D60(v18);
}

uint64_t sub_100017838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v6 = sub_100067C94(a1, a2);
  if ((v7 & 1) == 0)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v14);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v15 + 1))
  {
LABEL_8:
    sub_100012EF8((uint64_t)&v14, &qword_1000B0018);
    return 0LL;
  }

  sub_100018278(&v14, v16);
  sub_10001533C((uint64_t)v16, (uint64_t)&v14);
  if ((swift_dynamicCast(&v12, &v14, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
  {
    char v13 = 0;
    sub_100010D60(v16);
    return v12;
  }

  else
  {
    uint64_t v9 = type metadata accessor for Explosion(0LL);
    unint64_t v10 = sub_10001295C();
    swift_allocError(v9, v10, 0LL, 0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008AB50LL,  0xD000000000000012LL,  0x800000010008AB80LL,  a1,  a2);
    swift_willThrow(v11);
    return sub_100010D60(v16);
  }

uint64_t sub_1000179CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16))
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain(a2);
  unint64_t v6 = sub_100067C94(a1, a2);
  if ((v7 & 1) == 0)
  {
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)&v14);
  swift_bridgeObjectRelease(a2);
  if (!*((void *)&v15 + 1))
  {
LABEL_8:
    sub_100012EF8((uint64_t)&v14, &qword_1000B0018);
    return 0LL;
  }

  sub_100018278(&v14, v16);
  sub_10001533C((uint64_t)v16, (uint64_t)&v14);
  uint64_t v8 = sub_10000E624(&qword_1000B0030);
  if ((swift_dynamicCast(&v13, &v14, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
  {
    sub_100010D60(v16);
    return v13;
  }

  else
  {
    uint64_t v10 = type metadata accessor for Explosion(0LL);
    unint64_t v11 = sub_10001295C();
    swift_allocError(v10, v11, 0LL, 0LL);
    swift_bridgeObjectRetain(a2);
    uint64_t v12 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000021LL,  0x800000010008AB50LL,  0xD000000000000012LL,  0x800000010008AB80LL,  a1,  a2);
    swift_willThrow(v12);
    return sub_100010D60(v16);
  }

unint64_t sub_100017B5C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_10000E624(&qword_1000B0020);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v35 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(63 - v4) >> 6;
  char v7 = v44;
  uint64_t v8 = v42;
  uint64_t v9 = &v38;
  uint64_t v10 = &v40;
  unint64_t result = swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v21 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v21 >= v34) {
    goto LABEL_32;
  }
  unint64_t v22 = *(void *)(v35 + 8 * v21);
  int64_t v23 = i + 1;
  if (!v22)
  {
    int64_t v23 = i + 2;
    if (i + 2 >= v34) {
      goto LABEL_32;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v23);
    if (!v22)
    {
      int64_t v23 = i + 3;
      if (i + 3 >= v34) {
        goto LABEL_32;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = i + 4;
        if (i + 4 >= v34) {
          goto LABEL_32;
        }
        unint64_t v22 = *(void *)(v35 + 8 * v23);
        if (!v22)
        {
          int64_t v24 = i + 5;
          if (i + 5 < v34)
          {
            unint64_t v22 = *(void *)(v35 + 8 * v24);
            if (v22)
            {
              int64_t v23 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v23 = v24 + 1;
              if (__OFADD__(v24, 1LL)) {
                goto LABEL_36;
              }
              if (v23 >= v34) {
                break;
              }
              unint64_t v22 = *(void *)(v35 + 8 * v23);
              ++v24;
              if (v22) {
                goto LABEL_26;
              }
            }
          }

LABEL_32:
          sub_100018288(v1);
          return (unint64_t)v3;
        }
      }
    }
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_26:
  uint64_t v37 = (v22 - 1) & v22;
  unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
  for (i = v23; ; unint64_t v20 = __clz(__rbit64(v6)) | (i << 6))
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    sub_10001533C(*(void *)(v1 + 56) + 32 * v20, (uint64_t)v7);
    *(void *)&__int128 v43 = v27;
    *((void *)&v43 + 1) = v26;
    v41[2] = v43;
    v42[0] = v44[0];
    v42[1] = v44[1];
    __int128 v28 = v43;
    sub_100018278(v8, v9);
    sub_100018278(v9, v10);
    sub_100018278(v10, v41);
    sub_100018278(v41, &v39);
    swift_bridgeObjectRetain(v26);
    unint64_t result = sub_100067C94(v28, *((uint64_t *)&v28 + 1));
    unint64_t v29 = result;
    if ((v30 & 1) != 0)
    {
      int64_t v36 = i;
      uint64_t v13 = v10;
      __int128 v14 = v9;
      uint64_t v15 = v1;
      __int128 v16 = v8;
      __int128 v17 = v7;
      uint64_t v18 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v18 + 8));
      *(_OWORD *)uint64_t v18 = v28;
      char v7 = v17;
      uint64_t v8 = v16;
      uint64_t v1 = v15;
      uint64_t v9 = v14;
      uint64_t v10 = v13;
      int64_t i = v36;
      uint64_t v19 = (void *)(v3[7] + 32 * v29);
      sub_100010D60(v19);
      unint64_t result = (unint64_t)sub_100018278(&v39, v19);
      unint64_t v6 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v28;
    unint64_t result = (unint64_t)sub_100018278(&v39, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v31 = v3[2];
    BOOL v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v3[2] = v33;
    unint64_t v6 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

id sub_100017EC0(uint64_t a1, id a2, uint64_t a3, void *a4)
{
  if (qword_1000AFC68 != -1) {
    swift_once(&qword_1000AFC68, sub_10001538C);
  }
  v32[0] = 0LL;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)( qword_1000BC018,  v32,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v7 = v32[0];
  if (!v32[0])
  {
    uint64_t v14 = type metadata accessor for Explosion(0LL);
    unint64_t v15 = sub_10001295C();
    swift_allocError(v14, v15, 0LL, 0LL);
    uint64_t v16 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008AA20LL,  0xD000000000000024LL,  0x800000010008ABA0LL,  0LL,  0LL);
LABEL_10:
    swift_willThrow(v16);
    return a2;
  }

  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedUnarchiver);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v7);
  Class v10 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v30 = 0LL;
  a2 = [v8 _strictlyUnarchivedObjectOfClasses:isa fromData:v10 error:&v30];

  id v11 = (id)v30;
  if (!a2)
  {
    __int128 v17 = v11;
    _convertNSErrorToError(_:)();

    goto LABEL_10;
  }

  _bridgeAnyObjectToAny(_:)(v32, a2);
  swift_unknownObjectRelease(a2);
  sub_10001533C((uint64_t)v32, (uint64_t)&v30);
  uint64_t v12 = sub_100018290(0LL, (unint64_t *)&qword_1000B0038, &OBJC_CLASS___NSDictionary_ptr);
  if (!swift_dynamicCast(&v29, &v30, (char *)&type metadata for Any + 8, v12, 6LL))
  {
    uint64_t v30 = 0x676E697373694DLL;
    unint64_t v31 = 0xE700000000000000LL;
    v18._countAndFlagsBits = a3;
    v18._object = a4;
    String.append(_:)(v18);
    a2 = (id)v30;
    unint64_t v19 = v31;
    uint64_t v20 = type metadata accessor for Explosion(0LL);
    unint64_t v21 = sub_10001295C();
    swift_allocError(v20, v21, 0LL, 0LL);
    uint64_t v22 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000026LL, 0x800000010008AA20LL, a2, v19, 0LL, 0LL);
    swift_willThrow(v22);
LABEL_13:
    sub_100010D60(v32);
    return a2;
  }

  uint64_t v13 = v29;
  uint64_t v30 = 0LL;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v29,  &v30,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  a2 = (id)v30;
  if (!v30)
  {
    uint64_t v30 = 0x64696C61766E49LL;
    unint64_t v31 = 0xE700000000000000LL;
    v23._countAndFlagsBits = a3;
    v23._object = a4;
    String.append(_:)(v23);
    a2 = (id)v30;
    unint64_t v24 = v31;
    uint64_t v25 = type metadata accessor for Explosion(0LL);
    unint64_t v26 = sub_10001295C();
    swift_allocError(v25, v26, 0LL, 0LL);
    uint64_t v27 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000026LL, 0x800000010008AA20LL, a2, v24, 0LL, 0LL);
    swift_willThrow(v27);

    goto LABEL_13;
  }

  sub_100010D60(v32);
  return a2;
}

_OWORD *sub_100018278(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100018288(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100018290(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityResponseUnpacker()
{
  return &type metadata for RelayReachabilityResponseUnpacker;
}

uint64_t sub_1000182D8()
{
  return sub_10000E9D8( &qword_1000B00D8,  (uint64_t (*)(uint64_t))&type metadata accessor for RelayReachabilityResponse,  (uint64_t)&protocol conformance descriptor for RelayReachabilityResponse);
}

uint64_t sub_100018304@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v4 = sub_10000E624(&qword_1000B00E8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for RelayReachabilityError(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  id v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = *((void *)a1 + 4);
  uint64_t v40 = a1;
  uint64_t v15 = swift_bridgeObjectRetain(v14);
  uint64_t v16 = sub_100019868(v15, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000197C8, (uint64_t)v39);
  swift_bridgeObjectRelease(v14);
  if (v2)
  {
    __int128 v42 = *a1;
    sub_100012E60((uint64_t)&v42);
    uint64_t v33 = v14;
  }

  else
  {
    uint64_t v37 = v13;
    uint64_t v38 = v16;
    uint64_t v17 = *((void *)a1 + 1);
    uint64_t v35 = *(void *)a1;
    sub_100019B28((uint64_t)(a1 + 1), (uint64_t)v41);
    sub_100019B28((uint64_t)v41, (uint64_t)&v43);
    uint64_t v36 = v17;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for RelayReachabilityError.none(_:),  v7);
      swift_bridgeObjectRetain(v17);
      Swift::String v18 = v37;
    }

    else
    {
      uint64_t v19 = v43;
      swift_bridgeObjectRetain(v17);
      RelayReachabilityError.init(rawValue:)(v19);
      int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
      Swift::String v18 = v37;
      if (v20 == 1)
      {
        sub_100012EF8((uint64_t)v6, &qword_1000B00E8);
        (*(void (**)(char *, void, uint64_t))(v8 + 104))( v11,  enum case for RelayReachabilityError.unknown(_:),  v7);
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
      }
    }

    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v11, v7);
    char v21 = *((_BYTE *)a1 + 40);
    uint64_t v22 = v38;
    uint64_t v23 = v38[2];
    if (v23)
    {
      uint64_t v24 = *(void *)(type metadata accessor for RelayReachabilityHandleResult(0LL) - 8);
      uint64_t v25 = (uint64_t)v22 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      uint64_t v26 = *(void *)(v24 + 72);
      uint64_t v27 = swift_bridgeObjectRetain(v22);
      uint64_t v28 = v23 - 1;
      do
      {
        uint64_t v27 = RelayReachabilityHandleResult.isReachable.getter(v27);
        char v29 = v27;
        BOOL v31 = v28-- != 0;
        if ((v27 & 1) == 0) {
          break;
        }
        v25 += v26;
      }

      while (v31);
      uint64_t v22 = v38;
      swift_bridgeObjectRelease(v38);
    }

    else
    {
      char v29 = 1;
    }

    uint64_t v32 = v36;
    RelayReachabilityResult.init(with:error:handleResults:isFinal:allAreReachable:didCheckServer:)( v35,  v36,  v18,  v22,  v21 & 1,  v29 & 1,  *((_BYTE *)a1 + 41) & 1);
    swift_bridgeObjectRelease(v14);
    uint64_t v33 = v32;
  }

  return swift_bridgeObjectRelease(v33);
}

uint64_t sub_1000185D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *a4;
  uint64_t v8 = a4[1];
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(a2);
  return RelayReachabilityHandleResult.init(with:service:isReachable:)(a1, a2, v7, v8, a3);
}

void sub_10001863C(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v1 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v1);
  uint64_t v35 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for DecodingError(0LL);
  uint64_t v40 = *(void *)(v47 - 8);
  uint64_t v3 = __chkstk_darwin(v47);
  uint64_t v37 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v36 = (char *)v31 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v46 = (char *)v31 - v8;
  __chkstk_darwin(v7);
  uint64_t v9 = type metadata accessor for RelayReachabilityResult(0LL);
  __chkstk_darwin(v9);
  uint64_t v38 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for RelayReachabilityResponse(0LL);
  v31[2] = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  int64_t v34 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v12);
  uint64_t v45 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v51 = *(void *)(v14 - 8);
  uint64_t v52 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  __int128 v39 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  __int128 v42 = (char *)v31 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v43 = (char *)v31 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  uint64_t v49 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v53 = type metadata accessor for Explosion(0LL);
  uint64_t v50 = *(void *)(v53 - 8);
  uint64_t v22 = __chkstk_darwin(v53);
  uint64_t v41 = (char *)v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  char v44 = (char *)v31 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  __chkstk_darwin(v26);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v28 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

  static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v30 = v29;

  __asm { BR              X10 }

uint64_t sub_100018A38()
{
  if (BYTE6(v6))
  {
    uint64_t v9 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    uint64_t v10 = PropertyListDecoder.init()();
    unint64_t v11 = sub_100019784();
    *(void *)(v8 - 440) = v7;
    uint64_t v12 = *(void *)(v8 - 288);
    uint64_t v13 = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for RelayReachabilityResponseDictionary,  v7,  v6,  &type metadata for RelayReachabilityResponseDictionary,  v11);
    if (v12)
    {
      *(void *)(v8 - 192) = v12;
      ((void (*)(uint64_t))swift_errorRetain)(v12);
      uint64_t v14 = sub_10000E624(&qword_1000AFFC8);
      uint64_t v15 = *(void *)(v8 - 296);
      if (swift_dynamicCast(v1, v8 - 192, v14, v15, 0LL))
      {
        ((void (*)(uint64_t))swift_errorRelease)(v12);
        uint64_t v16 = *(void *)(v8 - 360);
        uint64_t v17 = *(void *)(v8 - 304);
        uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v1, v15);
        ((void (*)(uint64_t))static Logger.relayReachabilityResponseUnpacker.getter)(v18);
        uint64_t v19 = *(void *)(v8 - 392);
        uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
        uint64_t v21 = v20(v19, v17, v15);
        uint64_t v22 = (os_log_s *)((uint64_t (*)(uint64_t))Logger.logObject.getter)(v21);
        os_log_type_t v23 = static os_log_type_t.default.getter();
        int v24 = v23;
        BOOL v25 = os_log_type_enabled(v22, v23);
        *(void *)(v8 - 312) = v6;
        *(void *)(v8 - 44_Block_object_dispose(va, 8) = v10;
        if (v25)
        {
          uint64_t v26 = swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)(v8 - 28_Block_object_dispose(va, 8) = v24;
          uint64_t v27 = (_DWORD *)v26;
          uint64_t v28 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v8 - 36_Block_object_dispose(va, 8) = v28;
          *(void *)(v8 - 72) = v28;
          *(void *)(v8 - 376) = v27;
          *uint64_t v27 = 136446210;
          uint64_t v29 = v27 + 3;
          *(void *)(v8 - 40_Block_object_dispose(va, 8) = v27 + 1;
          uint64_t v30 = *(void *)(v8 - 400);
          v20(v30, v19, v15);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v30, 0LL, 1LL, v15);
          uint64_t v31 = ((uint64_t (*)(uint64_t, uint64_t))>> prefix<A>(_:))(v30, v15);
          unint64_t v33 = v32;
          sub_100012EF8(v30, &qword_1000AFFA8);
          uint64_t v34 = v31;
          uint64_t v35 = v15;
          *(void *)(v8 - 232) = sub_100014C84(v34, v33, (uint64_t *)(v8 - 72));
          ((void (*)(uint64_t, uint64_t, void, _DWORD *))UnsafeMutableRawBufferPointer.copyMemory(from:))( v8 - 232,  v8 - 224,  *(void *)(v8 - 408),  v29);
          swift_bridgeObjectRelease(v33);
          uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 360) + 8LL);
          v36(v19, v15);
          uint64_t v37 = *(uint8_t **)(v8 - 376);
          _os_log_impl( (void *)&_mh_execute_header,  v22,  (os_log_type_t)*(_DWORD *)(v8 - 288),  "RelayReachabilityResponseDictionary unpacking error: %{public}s",  v37,  0xCu);
          uint64_t v38 = *(void *)(v8 - 368);
          ((void (*)(uint64_t, uint64_t, char *))swift_arrayDestroy)( v38,  1LL,  (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1LL, -1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
        }

        else
        {
          uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
          uint64_t v35 = v15;
          v36(v19, v15);
        }

        uint64_t v92 = *(void *)(v8 - 248);
        unint64_t v93 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 256) + 8LL);
        uint64_t v94 = *(void *)(v8 - 336);
        *(void *)(v8 - 28_Block_object_dispose(va, 8) = v93;
        v93(v94, v92);
        uint64_t v95 = v20;
        uint64_t v96 = *(void *)(v8 - 280);
        uint64_t v97 = *(void *)(v8 - 272);
        uint64_t v98 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v96 + 104))( v5,  enum case for TopLevelDictionary.CodingKeys.decryptedData(_:),  v97);
        uint64_t v99 = ((uint64_t (*)(uint64_t))TopLevelDictionary.CodingKeys.stringValue.getter)(v98);
        uint64_t v101 = v100;
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v5, v97);
        uint64_t v102 = *(void *)(v8 - 384);
        v95(v102, *(void *)(v8 - 304), v35);
        uint64_t v103 = *(void *)(v8 - 328);
        uint64_t v104 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))Explosion.init(topLevelKey:error:))(v99, v101, v102);
        uint64_t v105 = *(void *)(v8 - 344);
        ((void (*)(uint64_t))static Logger.relayReachabilityResponseUnpacker.getter)(v104);
        uint64_t v106 = *(void *)(v8 - 264);
        uint64_t v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 16);
        uint64_t v108 = *(void *)(v8 - 352);
        uint64_t v109 = *(void *)(v8 - 240);
        *(void *)(v8 - 256) = v107;
        uint64_t v110 = v107(v108, v103, v109);
        uint64_t v111 = (os_log_s *)((uint64_t (*)(uint64_t))Logger.logObject.getter)(v110);
        os_log_type_t v112 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v111, v112))
        {
          *(void *)(v8 - 272) = v36;
          uint64_t v113 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v114 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v8 - 72) = v114;
          *(_DWORD *)uint64_t v113 = 136446210;
          *(void *)(v8 - 280) = v113 + 4;
          uint64_t v115 = *(void *)(v8 - 320);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 256))(v115, v108, v109);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v106 + 56))(v115, 0LL, 1LL, v109);
          uint64_t v116 = ((uint64_t (*)(uint64_t, uint64_t))>> prefix<A>(_:))(v115, v109);
          unint64_t v118 = v117;
          uint64_t v119 = v115;
          uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v8 - 272);
          sub_100012EF8(v119, &qword_1000AFFB0);
          uint64_t v120 = v116;
          uint64_t v109 = *(void *)(v8 - 240);
          *(void *)(v8 - 232) = sub_100014C84(v120, v118, (uint64_t *)(v8 - 72));
          ((void (*)(uint64_t, uint64_t, void, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))( v8 - 232,  v8 - 224,  *(void *)(v8 - 280),  v113 + 12);
          swift_bridgeObjectRelease(v118);
          uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
          v121(*(void *)(v8 - 352), v109);
          _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "RelayReachabilityResponseDictionary unpacking explosion: %{public}s",  v113,  0xCu);
          ((void (*)(uint64_t, uint64_t, char *))swift_arrayDestroy)( v114,  1LL,  (char *)&type metadata for Any + 8);
          swift_slowDealloc(v114, -1LL, -1LL);
          swift_slowDealloc(v113, -1LL, -1LL);

          uint64_t v122 = *(void *)(v8 - 344);
        }

        else
        {
          uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
          v121(v108, v109);

          uint64_t v122 = v105;
        }

        (*(void (**)(uint64_t, void))(v8 - 288))(v122, *(void *)(v8 - 248));
        unint64_t v131 = *(void *)(v8 - 312);
        uint64_t v132 = *(void *)(v8 - 448);
        uint64_t v133 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
        swift_allocError(v109, v133, 0LL, 0LL);
        uint64_t v134 = *(void *)(v8 - 328);
        uint64_t v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 - 256))(v135, v134, v109);
        swift_willThrow(v136);
        sub_100012B54(*(void *)(v8 - 440), v131);
        swift_release(v132);
        v121(v134, v109);
        v36(*(void *)(v8 - 304), *(void *)(v8 - 296));
        return ((uint64_t (*)(void))swift_errorRelease)(*(void *)(v8 - 192));
      }

      uint64_t v82 = ((uint64_t (*)(void))swift_errorRelease)(*(void *)(v8 - 192));
      uint64_t v83 = *(void *)(v8 - 368);
      ((void (*)(uint64_t))static Logger.relayReachabilityResponseUnpacker.getter)(v82);
      ((void (*)(uint64_t))swift_errorRetain)(v12);
      uint64_t v84 = ((uint64_t (*)(uint64_t))swift_errorRetain)(v12);
      uint64_t v85 = (os_log_s *)((uint64_t (*)(uint64_t))Logger.logObject.getter)(v84);
      os_log_type_t v86 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v88 = swift_slowAlloc(32LL, -1LL);
        *(void *)(v8 - 192) = v88;
        *(void *)(v8 - 44_Block_object_dispose(va, 8) = v10;
        *(_DWORD *)uint64_t v87 = 136446210;
        *(void *)(v8 - 72) = v12;
        uint64_t v89 = ((uint64_t (*)(uint64_t, uint64_t))>> prefix<A>(_:))(v8 - 72, v14);
        unint64_t v91 = v90;
        *(void *)(v8 - 72) = sub_100014C84(v89, v90, (uint64_t *)(v8 - 192));
        uint64_t v10 = *(void *)(v8 - 448);
        ((void (*)(uint64_t, uint64_t, uint8_t *, uint8_t *))UnsafeMutableRawBufferPointer.copyMemory(from:))( v8 - 72,  v8 - 64,  v87 + 4,  v87 + 12);
        swift_bridgeObjectRelease(v91);
        ((void (*)(uint64_t))swift_errorRelease)(v12);
        ((void (*)(uint64_t))swift_errorRelease)(v12);
        _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "RelayReachabilityResponseDictionary unpacking unknown error: %{public}s",  v87,  0xCu);
        ((void (*)(uint64_t, uint64_t, char *))swift_arrayDestroy)( v88,  1LL,  (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1LL, -1LL);
        swift_slowDealloc(v87, -1LL, -1LL);

        (*(void (**)(void, void))(*(void *)(v8 - 256) + 8LL))( *(void *)(v8 - 368),  *(void *)(v8 - 248));
      }

      else
      {
        ((void (*)(uint64_t))swift_errorRelease)(v12);
        ((void (*)(uint64_t))swift_errorRelease)(v12);

        (*(void (**)(uint64_t, void))(*(void *)(v8 - 256) + 8LL))(v83, *(void *)(v8 - 248));
      }

      uint64_t v123 = *(void *)(v8 - 240);
      ((void (*)(uint64_t, uint64_t, uint64_t))swift_getErrorValue)(v12, v8 - 200, v8 - 224);
      uint64_t v124 = ((uint64_t (*)(void, void, uint64_t))swift_getDynamicType)( *(void *)(v8 - 224),  *(void *)(v8 - 216),  1LL);
      *(void *)(v8 - 192) = 0LL;
      *(void *)(v8 - 184) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease(*(void *)(v8 - 184));
      *(void *)(v8 - 192) = 0xD000000000000014LL;
      *(void *)(v8 - 184) = 0x800000010008A6A0LL;
      v125._countAndFlagsBits = ((uint64_t (*)(uint64_t, void))_typeName(_:qualified:))(v124, 0LL);
      object = v125._object;
      String.append(_:)(v125);
      swift_bridgeObjectRelease(object);
      uint64_t v127 = *(void *)(v8 - 192);
      uint64_t v128 = *(void *)(v8 - 184);
      uint64_t v129 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v123, v129, 0LL, 0LL);
      uint64_t v130 = Explosion.init(domain:errorType:keyPath:)( v127,  v128,  0x546E776F6E6B6E55LL,  0xEB00000000657079LL,  0xD00000000000001FLL,  0x800000010008A6C0LL);
      swift_willThrow(v130);
      ((void (*)(uint64_t))swift_errorRelease)(v12);
      swift_release(v10);
      uint64_t v81 = *(void *)(v8 - 440);
    }

    else
    {
      __int128 v73 = *(_OWORD *)(v8 - 176);
      *(_OWORD *)(v8 - 144) = *(_OWORD *)(v8 - 192);
      *(_OWORD *)(v8 - 12_Block_object_dispose(va, 8) = v73;
      *(_OWORD *)(v8 - 11_Block_object_dispose(va, 8) = *(_OWORD *)(v8 - 166);
      uint64_t v74 = ((uint64_t (*)(uint64_t))static Logger.relayReachabilityResponseUnpacker.getter)(v13);
      uint64_t v75 = (os_log_s *)((uint64_t (*)(uint64_t))Logger.logObject.getter)(v74);
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v77 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unpacking RelayReachabilityResponseDictionary", v77, 2u);
        swift_slowDealloc(v77, -1LL, -1LL);
      }

      (*(void (**)(uint64_t, void))(*(void *)(v8 - 256) + 8LL))(v2, *(void *)(v8 - 248));
      uint64_t v78 = *(void *)(v8 - 376);
      sub_100018304((__int128 *)(v8 - 144), v78);
      uint64_t v79 = *(void *)(v8 - 408);
      ((void (*)(uint64_t))RelayReachabilityResponse.init(with:))(v78);
      uint64_t v80 = *(void *)(v8 - 440);
      (*(void (**)(void, uint64_t, void))(*(void *)(v8 - 432) + 32LL))( *(void *)(v8 - 416),  v79,  *(void *)(v8 - 424));
      swift_release(v10);
      uint64_t v81 = v80;
    }

    return sub_100012B54(v81, v6);
  }

  *(void *)(v8 - 312) = v6;
  uint64_t v39 = *(void *)(v8 - 280);
  uint64_t v40 = *(void *)(v8 - 272);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v39 + 104))( v5,  enum case for TopLevelDictionary.CodingKeys.decryptedData(_:),  v40);
  uint64_t v42 = ((uint64_t (*)(uint64_t))TopLevelDictionary.CodingKeys.stringValue.getter)(v41);
  uint64_t v44 = v43;
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v5, v40);
  uint64_t v45 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000022LL, 0x800000010008A5F0LL, v42, v44, 0LL, 0LL);
  uint64_t v46 = v3;
  ((void (*)(uint64_t))static Logger.relayReachabilityResponseUnpacker.getter)(v45);
  uint64_t v47 = *(void *)(v8 - 264);
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
  uint64_t v49 = *(void *)(v8 - 240);
  uint64_t v50 = v48(v0, v4, v49);
  uint64_t v51 = (os_log_s *)((uint64_t (*)(uint64_t))Logger.logObject.getter)(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  int v53 = v52;
  if (os_log_type_enabled(v51, v52))
  {
    *(_DWORD *)(v8 - 280) = v53;
    uint64_t v54 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v8 - 28_Block_object_dispose(va, 8) = v55;
    *(void *)(v8 - 192) = v55;
    *(void *)(v8 - 272) = v46;
    *(void *)(v8 - 296) = v54;
    *uint64_t v54 = 136446210;
    uint64_t v56 = v54 + 3;
    *(void *)(v8 - 304) = v54 + 1;
    uint64_t v57 = v47;
    uint64_t v58 = *(void *)(v8 - 320);
    v48(v58, v0, *(void *)(v8 - 240));
    (*(void (**)(uint64_t, void, uint64_t, void))(v57 + 56))(v58, 0LL, 1LL, *(void *)(v8 - 240));
    uint64_t v59 = v7;
    uint64_t v60 = v48;
    uint64_t v61 = ((uint64_t (*)(uint64_t, void))>> prefix<A>(_:))(v58, *(void *)(v8 - 240));
    unint64_t v63 = v62;
    sub_100012EF8(v58, &qword_1000AFFB0);
    uint64_t v64 = v61;
    uint64_t v48 = v60;
    unint64_t v65 = *(void *)(v8 - 312);
    uint64_t v7 = v59;
    *(void *)(v8 - 72) = sub_100014C84(v64, v63, (uint64_t *)(v8 - 192));
    uint64_t v49 = *(void *)(v8 - 240);
    ((void (*)(uint64_t, uint64_t, void, _DWORD *))UnsafeMutableRawBufferPointer.copyMemory(from:))( v8 - 72,  v8 - 64,  *(void *)(v8 - 304),  v56);
    swift_bridgeObjectRelease(v63);
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 264) + 8LL);
    v66(v0, v49);
    uint64_t v67 = *(uint8_t **)(v8 - 296);
    _os_log_impl( (void *)&_mh_execute_header,  v51,  (os_log_type_t)*(_DWORD *)(v8 - 280),  "Message unpacking explosion: %{public}s",  v67,  0xCu);
    uint64_t v68 = *(void *)(v8 - 288);
    ((void (*)(uint64_t, uint64_t, char *))swift_arrayDestroy)(v68, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v67, -1LL, -1LL);

    (*(void (**)(void, void))(*(void *)(v8 - 256) + 8LL))(*(void *)(v8 - 272), *(void *)(v8 - 248));
  }

  else
  {
    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v66(v0, v49);

    (*(void (**)(uint64_t, void))(*(void *)(v8 - 256) + 8LL))(v46, *(void *)(v8 - 248));
    unint64_t v65 = *(void *)(v8 - 312);
  }

  uint64_t v69 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v49, v69, 0LL, 0LL);
  uint64_t v71 = v48(v70, v4, v49);
  swift_willThrow(v71);
  sub_100012B54(v7, v65);
  return ((uint64_t (*)(uint64_t, uint64_t))v66)(v4, v49);
}

void sub_100019770(uint64_t a1@<X8>)
{
}

unint64_t sub_100019784()
{
  unint64_t result = qword_1000B00E0;
  if (!qword_1000B00E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090C2C, &type metadata for RelayReachabilityResponseDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B00E0);
  }

  return result;
}

uint64_t sub_1000197C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000185D4(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1000197E0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void *sub_100019868(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v6 = type metadata accessor for RelayReachabilityHandleResult(0LL);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v8 = *(void *)(a1 + 16);
  unint64_t result = &_swiftEmptyArrayStorage;
  if (v8)
  {
    uint64_t v42 = &_swiftEmptyArrayStorage;
    uint64_t v35 = a1;
    sub_10005DBDC(0, v8, 0);
    uint64_t v10 = v35;
    uint64_t v40 = v42;
    unint64_t result = (void *)sub_1000197E0(v35);
    uint64_t v11 = (uint64_t)result;
    int v13 = v12;
    uint64_t v14 = 0LL;
    uint64_t v15 = v10 + 64;
    char v16 = *(_BYTE *)(v10 + 32);
    uint64_t v32 = v10 + 80;
    while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << v16)
    {
      unint64_t v18 = (unint64_t)v11 >> 6;
      if (*(_DWORD *)(v10 + 36) != v13) {
        goto LABEL_27;
      }
      uint64_t v39 = v14;
      uint64_t v19 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v11);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      uint64_t v22 = *(unsigned __int8 *)(*(void *)(v10 + 56) + v11);
      swift_bridgeObjectRetain(v21);
      v36(v20, v21, v22);
      if (v4)
      {
        swift_release(v40);
        return (void *)swift_bridgeObjectRelease(v21);
      }

      uint64_t v38 = 0LL;
      swift_bridgeObjectRelease(v21);
      os_log_type_t v23 = v40;
      uint64_t v42 = v40;
      unint64_t v25 = v40[2];
      unint64_t v24 = v40[3];
      if (v25 >= v24 >> 1)
      {
        sub_10005DBDC(v24 > 1, v25 + 1, 1);
        os_log_type_t v23 = v42;
      }

      v23[2] = v25 + 1;
      unint64_t v26 = (*(unsigned __int8 *)(v33 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      uint64_t v40 = v23;
      unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v33 + 32))( (unint64_t)v23 + v26 + *(void *)(v33 + 72) * v25,  v41,  v34);
      uint64_t v10 = v35;
      char v16 = *(_BYTE *)(v35 + 32);
      unint64_t v17 = 1LL << v16;
      if (v11 >= 1LL << v16) {
        goto LABEL_28;
      }
      uint64_t v27 = *(void *)(v15 + 8 * v18);
      if ((v27 & (1LL << v11)) == 0) {
        goto LABEL_29;
      }
      if (*(_DWORD *)(v35 + 36) != v13) {
        goto LABEL_30;
      }
      unint64_t v28 = v27 & (-2LL << (v11 & 0x3F));
      if (v28)
      {
        unint64_t v17 = __clz(__rbit64(v28)) | v11 & 0xFFFFFFFFFFFFFFC0LL;
        uint64_t v4 = v38;
      }

      else
      {
        unint64_t v29 = v18 + 1;
        unint64_t v30 = (v17 + 63) >> 6;
        uint64_t v4 = v38;
        if (v18 + 1 < v30)
        {
          unint64_t v31 = *(void *)(v15 + 8 * v29);
          if (v31)
          {
LABEL_21:
            unint64_t v17 = __clz(__rbit64(v31)) + (v29 << 6);
          }

          else
          {
            while (v30 - 2 != v18)
            {
              unint64_t v31 = *(void *)(v32 + 8 * v18++);
              if (v31)
              {
                unint64_t v29 = v18 + 1;
                goto LABEL_21;
              }
            }
          }
        }
      }

      uint64_t v14 = v39 + 1;
      uint64_t v11 = v17;
      if (v39 + 1 == v8) {
        return v40;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
  }

  return result;
}

uint64_t sub_100019B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B00F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SMSMessageUnpacker()
{
  return &type metadata for SMSMessageUnpacker;
}

uint64_t sub_100019B80()
{
  return sub_10000E9D8( &qword_1000B00F8,  (uint64_t (*)(uint64_t))&type metadata accessor for SMSMessage,  (uint64_t)&protocol conformance descriptor for SMSMessage);
}

uint64_t sub_100019BAC@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v200 = (char *)a1;
  uint64_t v201 = a2;
  uint64_t v178 = a3;
  uint64_t v3 = sub_10000E624(&qword_1000B0000);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v186 = (uint64_t)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v189 = (char *)&v145 - v6;
  uint64_t v7 = sub_10000E624(&qword_1000B0100);
  __chkstk_darwin(v7);
  uint64_t v187 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v190 = sub_10000E624(&qword_1000B0108);
  uint64_t v194 = *(void *)(v190 - 8);
  __chkstk_darwin(v190);
  uint64_t v188 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v193 = sub_10000E624(&qword_1000B0110);
  uint64_t v191 = *(void *)(v193 - 8);
  __chkstk_darwin(v193);
  uint64_t v192 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000E624(&qword_1000B0118);
  __chkstk_darwin(v11);
  uint64_t v180 = (uint64_t)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SMSMessage.SMSType(0LL);
  __chkstk_darwin(v13);
  uint64_t v183 = (uint64_t)&v145 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000E624(&qword_1000B0120);
  __chkstk_darwin(v15);
  uint64_t v181 = (char *)&v145 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v185 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v184 = *(void *)(v185 - 8);
  __chkstk_darwin(v185);
  uint64_t v182 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SMSCTPart.Content(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for SMSCTPart(0LL);
  unint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v145 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_10000E624(&qword_1000B0128);
  uint64_t v26 = __chkstk_darwin(v25);
  unint64_t v28 = (char *)&v145 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v145 - v29;
  uint64_t v31 = type metadata accessor for SMSDictionary(0LL);
  __chkstk_darwin(v31);
  uint64_t v33 = (char **)((char *)&v145 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v34 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  uint64_t v35 = PropertyListDecoder.init()();
  uint64_t v36 = sub_10000E9D8(&qword_1000B0130, type metadata accessor for SMSDictionary, (uint64_t)&unk_100090648);
  uint64_t v37 = v207;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v31, v200, v201, v31, v36);
  uint64_t v207 = v37;
  if (v37) {
    return swift_release(v35);
  }
  uint64_t v200 = v24;
  unint64_t v195 = v22;
  uint64_t v196 = v21;
  uint64_t v197 = v20;
  char v175 = v28;
  char v177 = v30;
  uint64_t v39 = *(uint64_t *)((char *)v33 + *(int *)(v31 + 88));
  if (v39) {
    uint64_t v40 = *(char **)((char *)v33 + *(int *)(v31 + 88));
  }
  else {
    uint64_t v40 = &_swiftEmptyArrayStorage;
  }
  int64_t v41 = v40[2];
  uint64_t v42 = (int *)v31;
  uint64_t v179 = v33;
  uint64_t v176 = v35;
  uint64_t v198 = v40;
  if (v41)
  {
    unint64_t v174 = (int *)v31;
    uint64_t v202 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v39);
    sub_10005DC08(0, v41, 0);
    uint64_t v43 = 4LL;
    uint64_t v44 = v202;
    uint64_t v45 = (uint64_t)v197;
    do
    {
      uint64_t v199 = v41;
      uint64_t v201 = v44;
      __int128 v46 = *(_OWORD *)&v40[v43 + 2];
      __int128 v48 = *(_OWORD *)&v40[v43 + 4];
      __int128 v47 = *(_OWORD *)&v40[v43 + 6];
      v206[0] = *(_OWORD *)&v40[v43];
      v206[1] = v46;
      v206[2] = v48;
      v206[3] = v47;
      __int128 v49 = v48;
      __int128 v50 = v46;
      __int128 v51 = v206[0];
      sub_10001ABD8(v206);
      swift_bridgeObjectRetain(*((void *)&v49 + 1));
      swift_bridgeObjectRetain(*((void *)&v51 + 1));
      swift_bridgeObjectRetain(*((void *)&v50 + 1));
      uint64_t v52 = v207;
      sub_100031704(v45);
      if (v52)
      {
        swift_bridgeObjectRelease(*((void *)&v51 + 1));
        swift_bridgeObjectRelease(*((void *)&v50 + 1));
        swift_bridgeObjectRelease(*((void *)&v49 + 1));
        uint64_t v55 = v201;
        sub_10001AC38(v206);
        swift_release(v176);
        swift_release(v55);
        sub_10001AC98((uint64_t)v179);
        return swift_bridgeObjectRelease(v198);
      }

      SMSCTPart.init(with:contentId:contentLocation:content:)( v51,  *((void *)&v51 + 1),  v50,  *((void *)&v50 + 1),  v49,  *((void *)&v49 + 1),  v45);
      uint64_t v207 = 0LL;
      sub_10001AC38(v206);
      uint64_t v44 = v201;
      uint64_t v202 = v201;
      unint64_t v54 = v201[2];
      unint64_t v53 = v201[3];
      if (v54 >= v53 >> 1)
      {
        sub_10005DC08(v53 > 1, v54 + 1, 1);
        uint64_t v44 = v202;
      }

      _OWORD v44[2] = v54 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v195 + 32))( (unint64_t)v44 + ((*(unsigned __int8 *)(v195 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80))
      + *(void *)(v195 + 72) * v54,
        v200,
        v196);
      v43 += 8LL;
      uint64_t v40 = v198;
      int64_t v41 = v199 - 1;
    }

    while (v199 != 1);
    uint64_t v56 = (uint64_t)v179;
    uint64_t v57 = (uint64_t)v177;
    uint64_t v58 = v192;
    uint64_t v42 = v174;
  }

  else
  {
    uint64_t v56 = (uint64_t)v33;
    swift_bridgeObjectRetain(v39);
    uint64_t v44 = &_swiftEmptyArrayStorage;
    uint64_t v57 = (uint64_t)v177;
    uint64_t v58 = v192;
  }

  uint64_t v59 = (uint64_t)v181;
  uint64_t v60 = (uint64_t *)(v56 + v42[25]);
  uint64_t v61 = *v60;
  uint64_t v62 = v60[1];
  uint64_t v63 = v56 + v42[26];
  uint64_t v64 = *(void *)v63;
  uint64_t v65 = *(unsigned __int8 *)(v63 + 8);
  swift_bridgeObjectRetain(v62);
  uint64_t v66 = static SMSFilteringSettingsMessage.SMSFilterCapabilitiesOptions.verifiedMask(_:)(v64, v65);
  uint64_t v67 = v207;
  SMSMessage.SMSFilteringSettings.init(with:smsFilterCapabilitiesOptions:)(v61, v62, v66);
  if (v67)
  {
    swift_errorRelease(v67);
    uint64_t v68 = type metadata accessor for SMSMessage.SMSFilteringSettings(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))(v57, 1LL, 1LL, v68);
  }

  else
  {
    uint64_t v69 = type metadata accessor for SMSMessage.SMSFilteringSettings(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v57, 0LL, 1LL, v69);
  }

  uint64_t v70 = v185;
  uint64_t v71 = v184;
  uint64_t v72 = v182;
  uint64_t v181 = *v179;
  unsigned int v173 = *((unsigned __int8 *)v179 + 8);
  sub_100012D20((uint64_t)v179 + v42[5], v59, &qword_1000B0120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v59, 1LL, v70) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v71 + 104))( v72,  enum case for SMSMessage.FilterSubCategoryType.filterSubCategoryNone(_:),  v70);
    sub_100012EF8(v59, &qword_1000B0120);
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v72, v59, v70);
  }

  uint64_t v73 = (uint64_t)v179;
  uint64_t v74 = (uint64_t *)((char *)v179 + v42[6]);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  swift_bridgeObjectRetain(v75);
  sub_100046A20(v183);
  uint64_t v171 = v76;
  uint64_t v172 = v75;
  uint64_t v207 = 0LL;
  uint64_t v77 = *(void *)(v73 + v42[8]);
  sub_100012D20(v73 + v42[9], v180, &qword_1000B0118);
  uint64_t v78 = v42[11];
  uint64_t v79 = (uint64_t *)(v73 + v42[10]);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  uint64_t v169 = v81;
  uint64_t v185 = v80;
  uint64_t v168 = *(void *)(v73 + v78);
  int v167 = *(unsigned __int8 *)(v73 + v78 + 8);
  uint64_t v82 = v42[13];
  uint64_t v83 = (uint64_t *)(v73 + v42[12]);
  uint64_t v84 = v83[1];
  uint64_t v166 = *v83;
  uint64_t v85 = *(void *)(v73 + v82 + 8);
  uint64_t v164 = *(void *)(v73 + v82);
  uint64_t v184 = v85;
  uint64_t v86 = v42[15];
  uint64_t v87 = (uint64_t *)(v73 + v42[14]);
  uint64_t v88 = v87[1];
  uint64_t v163 = *v87;
  uint64_t v89 = *(void *)(v73 + v86 + 8);
  uint64_t v161 = *(void *)(v73 + v86);
  uint64_t v90 = v42[17];
  unint64_t v91 = (uint64_t *)(v73 + v42[16]);
  uint64_t v92 = v91[1];
  uint64_t v159 = *v91;
  uint64_t v93 = *(void *)(v73 + v90 + 8);
  uint64_t v157 = *(void *)(v73 + v90);
  uint64_t v94 = v42[19];
  uint64_t v95 = v73 + v42[18];
  uint64_t v155 = *(void *)v95;
  int v154 = *(unsigned __int8 *)(v95 + 8);
  uint64_t v96 = *(void *)(v73 + v94 + 8);
  uint64_t v153 = *(void *)(v73 + v94);
  uint64_t v152 = v96;
  swift_bridgeObjectRetain(v96);
  uint64_t v170 = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v185);
  uint64_t v165 = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRetain(v184);
  uint64_t v162 = v88;
  swift_bridgeObjectRetain(v88);
  uint64_t v160 = v89;
  swift_bridgeObjectRetain(v89);
  uint64_t v158 = v92;
  swift_bridgeObjectRetain(v92);
  uint64_t v156 = v93;
  swift_bridgeObjectRetain(v93);
  uint64_t v151 = sub_100046BF0();
  uint64_t v150 = v97;
  uint64_t v98 = (uint64_t *)(v73 + v42[21]);
  uint64_t v99 = v98[1];
  uint64_t v149 = *v98;
  uint64_t v100 = v42[24];
  int v147 = *(unsigned __int8 *)(v73 + v42[23]);
  int v146 = *(unsigned __int8 *)(v73 + v100);
  uint64_t v101 = v198;
  uint64_t v102 = v198[2];
  uint64_t v201 = v44;
  uint64_t v148 = v99;
  if (!v102)
  {
    swift_bridgeObjectRetain(v99);
    LODWORD(v199) = 0;
    goto LABEL_34;
  }

  unint64_t v174 = v42;
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v101);
  uint64_t v103 = v101 + 11;
  unint64_t v195 = 0x800000010008ABD0LL;
  uint64_t v104 = v190;
  uint64_t v105 = (uint64_t)v187;
  while (1)
  {
    uint64_t v107 = *(v103 - 1);
    unint64_t v108 = *v103;
    uint64_t v109 = (void *)*(v103 - 5);
    uint64_t v110 = *(v103 - 4);
    uint64_t v111 = (char *)*(v103 - 6);
    uint64_t v196 = *(v103 - 2);
    swift_bridgeObjectRetain(v196);
    uint64_t v197 = v111;
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v110);
    uint64_t v199 = v107;
    uint64_t v200 = (char *)v108;
    sub_100012AA8(v107, v108);
    uint64_t v112 = sub_10000E624(&qword_1000B0138);
    Regex.init(_regexString:version:)(0xD000000000000061LL, v195, 1LL, v112);
    if (v110) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v194 + 56))(v105, 1LL, 1LL, v104);
    uint64_t v106 = v193;
LABEL_24:
    uint64_t v58 = v192;
    (*(void (**)(char *, uint64_t))(v191 + 8))(v192, v106);
    sub_100012EF8(v105, &qword_1000B0100);
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease(v110);
LABEL_25:
    v103 += 8;
    swift_bridgeObjectRelease(v197);
    sub_100012B98(v199, (unint64_t)v200);
    if (!--v102)
    {
      uint64_t v101 = v198;
      swift_bridgeObjectRelease(v198);
      LODWORD(v199) = 0;
      goto LABEL_33;
    }
  }

  uint64_t v202 = v109;
  uint64_t v203 = v110;
  unint64_t v113 = sub_10001ACD4();
  unint64_t v114 = sub_10001AD18();
  uint64_t v115 = v58;
  uint64_t v116 = v112;
  uint64_t v106 = v193;
  unint64_t v117 = v113;
  uint64_t v104 = v190;
  uint64_t v118 = (uint64_t)v189;
  BidirectionalCollection<>.firstMatch<A, B>(of:)(v115, &type metadata for String, v116, v193, v117, v114);
  uint64_t v119 = v194;
  (*(void (**)(char *, uint64_t, uint64_t))(v194 + 32))(v188, v105, v104);
  uint64_t KeyPath = swift_getKeyPath(&unk_10008DAE0);
  Regex.Match.subscript.getter(&v202, KeyPath, v104);
  swift_release(KeyPath);
  uint64_t v121 = v205;
  uint64_t v122 = static String._fromSubstring(_:)(v202, v203, v204, v205);
  uint64_t v124 = v123;
  swift_bridgeObjectRelease(v121);
  UUID.init(uuidString:)(v122, v124);
  swift_bridgeObjectRelease(v124);
  uint64_t v125 = v186;
  sub_100012D20(v118, v186, &qword_1000B0000);
  uint64_t v126 = type metadata accessor for UUID(0LL);
  uint64_t v127 = *(void *)(v126 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v125, 1LL, v126) == 1)
  {
    sub_100012EF8(v118, &qword_1000B0000);
    uint64_t v104 = v190;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v188, v190);
    uint64_t v58 = v192;
    (*(void (**)(char *, uint64_t))(v191 + 8))(v192, v193);
    sub_100012EF8(v125, &qword_1000B0000);
    swift_bridgeObjectRelease(v196);
    swift_bridgeObjectRelease(v110);
    uint64_t v105 = (uint64_t)v187;
    goto LABEL_25;
  }

  uint64_t v128 = v125;
  UUID.uuidString.getter();
  uint64_t v130 = v129;
  sub_100012EF8(v118, &qword_1000B0000);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v188, v190);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v192, v193);
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v128, v126);
  swift_bridgeObjectRelease(v196);
  swift_bridgeObjectRelease(v110);
  swift_bridgeObjectRelease(v197);
  swift_bridgeObjectRelease(v130);
  sub_100012B98(v199, (unint64_t)v200);
  uint64_t v101 = v198;
  swift_bridgeObjectRelease(v198);
  LODWORD(v199) = 1;
LABEL_33:
  uint64_t v42 = v174;
LABEL_34:
  uint64_t v131 = (uint64_t)v179;
  swift_bridgeObjectRelease(v101);
  uint64_t v132 = v42[30];
  uint64_t v133 = (unint64_t *)(v131 + v42[29]);
  unint64_t v134 = v133[1];
  uint64_t v200 = (char *)*v133;
  uint64_t v136 = *(void *)(v131 + v132);
  uint64_t v135 = *(void *)(v131 + v132 + 8);
  uint64_t v137 = v42[27];
  uint64_t v138 = (uint64_t *)(v131 + v42[28]);
  uint64_t v140 = *v138;
  uint64_t v139 = v138[1];
  uint64_t v141 = *(void *)(v131 + v137);
  uint64_t v142 = *(void *)(v131 + v137 + 8);
  uint64_t v143 = (uint64_t)v175;
  sub_100012D20((uint64_t)v177, (uint64_t)v175, &qword_1000B0128);
  swift_bridgeObjectRetain(v134);
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRetain(v142);
  BYTE2(v144) = v199;
  BYTE1(v144) = v146;
  LOBYTE(v144) = v147;
  SMSMessage.init(with:filterSubCategory:version:type:recipients:date:sender:iMessageCapability:serviceCenter:originatedDeviceNumber:originatedDeviceEmail:originatedDeviceSIM:subject:contentType:replaceMessage:countryCode:GUID:fallbackHash:items:trackMessage:sendEnabled:foundAppleGUID:groupID:originalGroupID:displayName:originatedDeviceUniqueID:smsFilteringSettings:)( v181,  v173,  v182,  v171,  v172,  v183,  v170,  v180,  v169,  v185,  v168,  (_BYTE)v167,  v166,  v165,  v164,  v184,  v163,  v162,  v161,  v160,  v159,  v158,  v157,  v156,  v155,  (_BYTE)v154,  v153,  v152,  v151,  v150,  v149,  v148,  v201,  v144,  v200,  v134,  v136,  v135,  v140,  v139,  v141,  v142,  v143);
  swift_release(v176);
  sub_100012EF8((uint64_t)v177, &qword_1000B0128);
  return sub_10001AC98(v131);
}

uint64_t sub_10001ABC4@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100019BAC(a1, a2, a3);
}

void *sub_10001ABD8(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_100012AA8(v4, v5);
  return a1;
}

void *sub_10001AC38(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  unint64_t v5 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_100012B98(v4, v5);
  return a1;
}

uint64_t sub_10001AC98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SMSDictionary(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10001ACD4()
{
  unint64_t result = qword_1000B0140;
  if (!qword_1000B0140)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1000B0140);
  }

  return result;
}

unint64_t sub_10001AD18()
{
  unint64_t result = qword_1000B0148;
  if (!qword_1000B0148)
  {
    uint64_t v1 = sub_10001008C(&qword_1000B0110);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Regex<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0148);
  }

  return result;
}

ValueMetadata *type metadata accessor for ContactMessageUnpacker()
{
  return &type metadata for ContactMessageUnpacker;
}

unint64_t sub_10001AD78()
{
  unint64_t result = qword_1000B0150;
  if (!qword_1000B0150)
  {
    uint64_t v1 = type metadata accessor for ContactMessage(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ContactMessage, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0150);
  }

  return result;
}

void sub_10001ADC0(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ContactMessage.ContactInfo(0LL);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = extractFirstContactFromData((uint64_t)isa);

  if (v7)
  {
    id v8 = [v7 familyName];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;

    id v12 = [v7 givenName];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v54 = v14;

    uint64_t v15 = (void *)objc_opt_self(&OBJC_CLASS___CNContactFormatter);
    id v16 = [v15 stringFromContact:v7 style:0];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      uint64_t v48 = v19;
      uint64_t v49 = v18;
    }

    else
    {
      uint64_t v48 = 0LL;
      uint64_t v49 = 0LL;
    }

    id v22 = [v15 nameOrderForContact:v7];
    if (v22 == (id)1) {
      uint64_t v23 = v54;
    }
    else {
      uint64_t v23 = v11;
    }
    uint64_t v50 = v13;
    if (v22 == (id)1) {
      uint64_t v24 = v13;
    }
    else {
      uint64_t v24 = v9;
    }
    uint64_t v47 = v24;
    swift_bridgeObjectRetain(v23);
    id v25 = [v7 contactType];
    uint64_t v44 = a1;
    uint64_t v52 = v5;
    uint64_t v53 = v1;
    uint64_t v51 = v9;
    if (v25 == (id)1)
    {
      id v26 = [v7 organizationName];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v45 = v28;
      uint64_t v46 = v27;
    }

    else
    {
      uint64_t v45 = 0LL;
      uint64_t v46 = 0LL;
    }

    id v29 = objc_msgSend(v7, "organizationName", v44);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    id v33 = [v15 nameOrderForContact:v7];
    BOOL v34 = v33 == (id)1;
    uint64_t v35 = v54;
    if (v33 == (id)1) {
      uint64_t v36 = v11;
    }
    else {
      uint64_t v36 = v54;
    }
    uint64_t v37 = v50;
    uint64_t v38 = v51;
    if (v34) {
      uint64_t v39 = v51;
    }
    else {
      uint64_t v39 = v50;
    }
    uint64_t v40 = swift_bridgeObjectRetain(v36);
    uint64_t v43 = v39;
    uint64_t v42 = v52;
    uint64_t v41 = v53;
    ContactMessage.ContactInfo.init(with:givenName:organizationNameTitle:contactFormatterTitle:contactNameTitle:organizationNameSubtitle:contactNameSubtitle:)( v38,  v11,  v37,  v35,  v46,  v45,  v49,  v48,  v47,  v23,  v30,  v32,  v43,  v40);
    if (!v41) {
      ContactMessage.init(with:)(v42);
    }
  }

  else
  {
    unint64_t v20 = sub_10001B08C();
    uint64_t v21 = swift_allocError(&type metadata for ContactMessageUnpacker.ContactsParsingError, v20, 0LL, 0LL);
    swift_willThrow(v21);
  }

void sub_10001B078(uint64_t a1@<X8>)
{
}

unint64_t sub_10001B08C()
{
  unint64_t result = qword_1000B0158;
  if (!qword_1000B0158)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DB68, &type metadata for ContactMessageUnpacker.ContactsParsingError);
    atomic_store(result, (unint64_t *)&qword_1000B0158);
  }

  return result;
}

ValueMetadata *type metadata accessor for ContactMessageUnpacker.ContactsParsingError()
{
  return &type metadata for ContactMessageUnpacker.ContactsParsingError;
}

ValueMetadata *type metadata accessor for PassPreviewUnpacker()
{
  return &type metadata for PassPreviewUnpacker;
}

uint64_t sub_10001B0F0()
{
  return sub_10000E9D8( &qword_1000B0160,  (uint64_t (*)(uint64_t))&type metadata accessor for PassPreview,  (uint64_t)&protocol conformance descriptor for PassPreview);
}

uint64_t sub_10001B11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v183 = a2;
  uint64_t v180 = a1;
  v153[1] = a3;
  uint64_t v163 = type metadata accessor for Color(0LL);
  uint64_t v162 = *(void *)(v163 - 8);
  uint64_t v3 = __chkstk_darwin(v163);
  uint64_t v159 = (uint64_t)v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v164 = (uint64_t)v153 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v161 = (char *)v153 - v8;
  __chkstk_darwin(v7);
  uint64_t v166 = (uint64_t)v153 - v9;
  uint64_t v10 = sub_10000E624(&qword_1000B0168);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v158 = (uint64_t)v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v157 = (uint64_t)v153 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v155 = (uint64_t)v153 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v156 = (char *)v153 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v165 = (uint64_t)v153 - v20;
  __chkstk_darwin(v19);
  uint64_t v169 = (uint64_t)v153 - v21;
  uint64_t v168 = type metadata accessor for PassPreview.PassBackground(0LL);
  uint64_t v167 = *(void *)(v168 - 8);
  uint64_t v22 = __chkstk_darwin(v168);
  int v154 = (char *)v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v171 = (uint64_t)v153 - v24;
  uint64_t v25 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v25);
  unsigned int v173 = (char *)v153 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_10000E624(&qword_1000B0170);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v170 = (char *)v153 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v160 = (uint64_t)v153 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v174 = (uint64_t)v153 - v33;
  __chkstk_darwin(v32);
  uint64_t v172 = (uint64_t)v153 - v34;
  uint64_t v192 = type metadata accessor for File(0LL);
  uint64_t v181 = *(void *)(v192 - 8);
  uint64_t v35 = __chkstk_darwin(v192);
  uint64_t v182 = (char *)v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)v153 - v37;
  uint64_t v39 = type metadata accessor for Path(0LL);
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v178 = v39;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (char *)v153 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned int v175 = static os_log_type_t.default.getter(v41);
  unint64_t v179 = sub_100012C44();
  uint64_t v44 = (void *)static OS_os_log.blastDoor.getter();
  uint64_t v45 = sub_10000E624(&qword_1000AFF48);
  uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
  __int128 v176 = xmmword_10008D7D0;
  *(_OWORD *)(v46 + 16) = xmmword_10008D7D0;
  uint64_t v47 = File.path.getter(v46);
  uint64_t v48 = Path.absolutePath.getter(v47);
  uint64_t v50 = v49;
  char v177 = *(void (**)(char *, uint64_t))(v40 + 8);
  v177(v43, v39);
  uint64_t v188 = (void *)v48;
  uint64_t v189 = v50;
  uint64_t v51 = >> prefix<A>(_:)(&v188);
  uint64_t v53 = v52;
  swift_bridgeObjectRelease(v50);
  *(void *)(v46 + 56) = &type metadata for String;
  unint64_t v54 = sub_100012CDC();
  *(void *)(v46 + 64) = v54;
  *(void *)(v46 + 32) = v51;
  *(void *)(v46 + 40) = v53;
  os_log(_:dso:log:_:_:)(v175, &_mh_execute_header, v44, "Processing pass at: %@", 22LL, 2LL, v46);

  uint64_t v55 = swift_bridgeObjectRelease(v46);
  unsigned int v175 = static os_log_type_t.debug.getter(v55);
  uint64_t v56 = (void *)static OS_os_log.blastDoor.getter();
  uint64_t v57 = swift_allocObject(v45, 72LL, 7LL);
  *(_OWORD *)(v57 + 16) = v176;
  uint64_t v58 = ((uint64_t (*)(void))PassPreview.Constraints.workingDirectory.getter)();
  File.path.getter(v58);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t))(v181 + 8);
  uint64_t v60 = v59(v38, v192);
  uint64_t v61 = Path.absolutePath.getter(v60);
  uint64_t v63 = v62;
  v177(v43, v178);
  uint64_t v188 = (void *)v61;
  uint64_t v189 = v63;
  uint64_t v64 = >> prefix<A>(_:)(&v188);
  uint64_t v66 = v65;
  swift_bridgeObjectRelease(v63);
  *(void *)(v57 + 56) = &type metadata for String;
  *(void *)(v57 + 64) = v54;
  *(void *)(v57 + 32) = v64;
  *(void *)(v57 + 40) = v66;
  uint64_t v67 = v182;
  os_log(_:dso:log:_:_:)(v175, &_mh_execute_header, v56, "Using working directory: %@", 27LL, 2LL, v57);

  uint64_t v68 = swift_bridgeObjectRelease(v57);
  PassPreview.Constraints.workingDirectory.getter(v68);
  uint64_t v186 = v180;
  uint64_t v187 = v67;
  uint64_t v69 = sub_10000E624(&qword_1000B0178);
  uint64_t v70 = v184;
  File.withResource<A>(_:)(sub_10001C9D8, v185, v69);
  if (v70) {
    return v59(v67, v192);
  }
  uint64_t v72 = v173;
  uint64_t v73 = v174;
  uint64_t v74 = v188;
  v59(v67, v192);
  if (v74)
  {
    id v75 = [v74 image];
    if (v75)
    {
      id v76 = v75;
      type metadata accessor for CGImage(0LL);
      uint64_t v190 = v77;
      uint64_t v191 = &protocol witness table for CGImageRef;
      uint64_t v188 = v76;
      uint64_t v78 = type metadata accessor for Image.Encoding(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56LL))(v72, 1LL, 1LL, v78);
      uint64_t v79 = v172;
      Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v188, 0LL, 1LL, v72);
      uint64_t v80 = type metadata accessor for Image(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v79, 0LL, 1LL, v80);
    }

    else
    {
      uint64_t v84 = type metadata accessor for Image(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56LL))(v172, 1LL, 1LL, v84);
    }

    uint64_t v85 = v73;
    uint64_t v86 = (uint64_t)v170;
    id v87 = [v74 icon];
    if (v87)
    {
      id v88 = v87;
      type metadata accessor for CGImage(0LL);
      uint64_t v190 = v89;
      uint64_t v191 = &protocol witness table for CGImageRef;
      uint64_t v188 = v88;
      uint64_t v90 = type metadata accessor for Image.Encoding(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56LL))(v72, 1LL, 1LL, v90);
      Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v188, 0LL, 1LL, v72);
      uint64_t v91 = type metadata accessor for Image(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56LL))(v73, 0LL, 1LL, v91);
    }

    else
    {
      uint64_t v92 = type metadata accessor for Image(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56LL))(v73, 1LL, 1LL, v92);
    }

    sub_10001BFE8(v74, v171);
    id v93 = [v74 primaryText];
    if (v93)
    {
      uint64_t v94 = v93;
      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      uint64_t v97 = v96;
    }

    else
    {
      uint64_t v95 = 0LL;
      uint64_t v97 = 0LL;
    }

    id v98 = [v74 primaryColor];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
    uint64_t v100 = v99;

    if (v97)
    {
      swift_bridgeObjectRetain(v97);
      uint64_t v101 = v166;
      sub_10001C71C(v100, v166);
      uint64_t v192 = v95;
      uint64_t v103 = v162;
      uint64_t v104 = v161;
      uint64_t v105 = v101;
      uint64_t v106 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v161, v105, v163);
      uint64_t v107 = v169;
      PassPreview.PassText.init(text:color:)(v192, v97, v104);
      uint64_t v86 = (uint64_t)v170;
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v166, v106);
      uint64_t v108 = type metadata accessor for PassPreview.PassText(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56LL))(v107, 0LL, 1LL, v108);
      swift_bridgeObjectRelease(v97);
    }

    else
    {
      uint64_t v102 = type metadata accessor for PassPreview.PassText(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56LL))(v169, 1LL, 1LL, v102);
    }

    swift_bridgeObjectRelease(v100);
    id v109 = [v74 secondaryText];
    if (v109)
    {
      uint64_t v110 = v109;
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      uint64_t v113 = v112;
    }

    else
    {
      uint64_t v111 = 0LL;
      uint64_t v113 = 0LL;
    }

    id v114 = [v74 secondaryColor];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
    uint64_t v116 = v115;

    if (v113)
    {
      swift_bridgeObjectRetain(v113);
      uint64_t v117 = v164;
      sub_10001C71C(v116, v164);
      uint64_t v192 = v111;
      uint64_t v119 = v162;
      uint64_t v120 = v161;
      uint64_t v121 = v117;
      uint64_t v122 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v161, v121, v163);
      uint64_t v123 = v165;
      PassPreview.PassText.init(text:color:)(v192, v113, v120);
      uint64_t v86 = (uint64_t)v170;
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v164, v122);
      uint64_t v124 = type metadata accessor for PassPreview.PassText(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56LL))(v123, 0LL, 1LL, v124);
      swift_bridgeObjectRelease(v113);
    }

    else
    {
      uint64_t v118 = type metadata accessor for PassPreview.PassText(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56LL))(v165, 1LL, 1LL, v118);
    }

    swift_bridgeObjectRelease(v116);
    id v125 = [v74 tertiaryText];
    if (v125)
    {
      uint64_t v126 = v125;
      uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
      uint64_t v129 = v128;
    }

    else
    {
      uint64_t v127 = 0LL;
      uint64_t v129 = 0LL;
    }

    id v130 = [v74 tertiaryColor];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
    uint64_t v132 = v131;

    if (v129)
    {
      swift_bridgeObjectRetain(v129);
      uint64_t v133 = v159;
      sub_10001C71C(v132, v159);
      uint64_t v192 = v127;
      uint64_t v135 = v162;
      uint64_t v136 = v161;
      uint64_t v137 = v133;
      uint64_t v138 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v161, v137, v163);
      uint64_t v139 = v156;
      PassPreview.PassText.init(text:color:)(v192, v129, v136);
      uint64_t v86 = (uint64_t)v170;
      (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v159, v138);
      uint64_t v140 = type metadata accessor for PassPreview.PassText(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v140 - 8) + 56LL))(v139, 0LL, 1LL, v140);
      uint64_t v141 = v129;
      uint64_t v142 = v139;
      swift_bridgeObjectRelease(v141);
    }

    else
    {
      uint64_t v134 = type metadata accessor for PassPreview.PassText(0LL);
      uint64_t v142 = v156;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56LL))(v156, 1LL, 1LL, v134);
    }

    uint64_t v143 = v168;
    uint64_t v144 = v167;
    uint64_t v145 = v172;
    swift_bridgeObjectRelease(v132);
    sub_100012D20(v145, v160, &qword_1000B0170);
    sub_100012D20(v85, v86, &qword_1000B0170);
    int v146 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v144 + 16))(v154, v171, v143);
    uint64_t v147 = v155;
    sub_100012D20(v169, v155, &qword_1000B0168);
    uint64_t v148 = v165;
    uint64_t v149 = v157;
    sub_100012D20(v165, v157, &qword_1000B0168);
    uint64_t v150 = (uint64_t)v142;
    uint64_t v151 = (uint64_t)v142;
    uint64_t v152 = v158;
    sub_100012D20(v150, v158, &qword_1000B0168);
    PassPreview.init(headerImage:icon:background:primaryText:secondaryText:tertiaryText:)( v160,  v170,  v146,  v147,  v149,  v152);

    sub_100012EF8(v151, &qword_1000B0168);
    sub_100012EF8(v148, &qword_1000B0168);
    sub_100012EF8(v169, &qword_1000B0168);
    (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v171, v168);
    sub_100012EF8(v174, &qword_1000B0170);
    return sub_100012EF8(v172, &qword_1000B0170);
  }

  else
  {
    uint64_t v81 = type metadata accessor for Explosion(0LL);
    uint64_t v82 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v81, v82, 0LL, 0LL);
    uint64_t v83 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000001ELL,  0x800000010008AC80LL,  0x2064696C61766E49LL,  0xEC00000073736150LL,  0LL,  0LL);
    return swift_willThrow(v83);
  }

uint64_t sub_10001BFE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v32 = type metadata accessor for Color(0LL);
  uint64_t v4 = *(void *)(v32 - 8);
  uint64_t v5 = __chkstk_darwin(v32);
  uint64_t v7 = (char *)&v31[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v31[-1] - v8;
  uint64_t v10 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000E624(&qword_1000B0170);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v31[-1] - v17;
  id v19 = [a1 backgroundImage];
  if (v19)
  {
    id v20 = v19;
    type metadata accessor for CGImage(0LL);
    void v31[3] = v21;
    v31[4] = &protocol witness table for CGImageRef;
    v31[0] = v20;
    uint64_t v22 = type metadata accessor for Image.Encoding(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v12, 1LL, 1LL, v22);
    Image.init(provider:maxPixelDimension:enforcedEncoding:)(v31, 0LL, 1LL, v12);
    uint64_t v23 = type metadata accessor for Image(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v18, 0LL, 1LL, v23);
  }

  else
  {
    uint64_t v24 = type metadata accessor for Image(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v18, 1LL, 1LL, v24);
  }

  id v25 = [a1 backgroundColor];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v27 = v26;

  sub_10001C71C(v27, (uint64_t)v9);
  if (v2)
  {
    sub_100012EF8((uint64_t)v18, &qword_1000B0170);
    return swift_bridgeObjectRelease(v27);
  }

  else
  {
    swift_bridgeObjectRelease(v27);
    sub_100012D20((uint64_t)v18, (uint64_t)v16, &qword_1000B0170);
    uint64_t v29 = v32;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v32);
    PassPreview.PassBackground.init(image:color:)(v16, v7);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v29);
    return sub_100012EF8((uint64_t)v18, &qword_1000B0170);
  }

uint64_t sub_10001C294(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Path(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v9 = File.path.getter(v8);
  Path.absolutePath.getter(v9);
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  LOBYTE(v4) = [v8 fileExistsAtPath:v12 isDirectory:0];

  if ((v4 & 1) != 0)
  {
    __chkstk_darwin(v13);
    *(&v19 - 2) = a2;
    *(&v19 - 1) = a1;
    uint64_t v14 = sub_10000E624(&qword_1000B0178);
    return File.withResource<A>(_:)(sub_10001C9F0, &v19 - 4, v14);
  }

  else
  {
    uint64_t v16 = type metadata accessor for Explosion(0LL);
    uint64_t v17 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v16, v17, 0LL, 0LL);
    uint64_t v18 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000001ELL,  0x800000010008AC80LL,  0xD000000000000011LL,  0x800000010008ACC0LL,  0LL,  0LL);
    return swift_willThrow(v18);
  }

void sub_10001C498(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v33[1] = a2;
  uint64_t v34 = a3;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Path(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v12 = [(id)objc_opt_self(NSFileManager) defaultManager];
  v33[2] = a1;
  uint64_t v13 = File.path.getter(v12);
  Path.absolutePath.getter(v13);
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  LOBYTE(v15) = [v12 isWritableFileAtPath:v17];

  if ((v15 & 1) != 0)
  {
    uint64_t v19 = File.path.getter(v18);
    Path.fileURL.getter(v19);
    v16(v11, v8);
    URL._bridgeToObjectiveC()(v20);
    uint64_t v22 = v21;
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    uint64_t v24 = v23(v7, v4);
    uint64_t v25 = File.path.getter(v24);
    Path.fileURL.getter(v25);
    v16(v11, v8);
    URL._bridgeToObjectiveC()(v26);
    uint64_t v28 = v27;
    v23(v7, v4);
    uint64_t MessagesPreview = PKPassSecurePreviewContextCreateMessagesPreview(v22, v28);

    void *v34 = MessagesPreview;
  }

  else
  {
    uint64_t v30 = type metadata accessor for Explosion(0LL);
    uint64_t v31 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v30, v31, 0LL, 0LL);
    uint64_t v32 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000001ELL,  0x800000010008AC80LL,  0xD000000000000019LL,  0x800000010008ACE0LL,  0LL,  0LL);
    swift_willThrow(v32);
  }

void sub_10001C71C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0180);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a1);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a1);
  id v9 = [(id)objc_opt_self(PKColor) colorFromString:v8];

  if (v9)
  {
    if ([v9 CGColor])
    {
      Color.init(with:)();
      if (v2)
      {
        swift_errorRelease(v2);
        uint64_t v10 = type metadata accessor for Color(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v7, 1LL, 1LL, v10);
        sub_100012EF8((uint64_t)v7, &qword_1000B0180);
        uint64_t v11 = type metadata accessor for Explosion(0LL);
        uint64_t v12 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
        swift_allocError(v11, v12, 0LL, 0LL);
        uint64_t v13 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000001ELL,  0x800000010008AC80LL,  0x2064696C61766E49LL,  0xED0000726F6C6F63LL,  0LL,  0LL);
        swift_willThrow(v13);
      }

      else
      {
        uint64_t v17 = type metadata accessor for Color(0LL);
        uint64_t v18 = *(void *)(v17 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v7, 0LL, 1LL, v17);

        (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a2, v7, v17);
      }
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v14 = type metadata accessor for Explosion(0LL);
    uint64_t v15 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v14, v15, 0LL, 0LL);
    uint64_t v16 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000001ELL,  0x800000010008AC80LL,  0xD000000000000014LL,  0x800000010008ACA0LL,  0LL,  0LL);
    swift_willThrow(v16);
  }

uint64_t sub_10001C9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10001B11C(a1, a2, a3);
}

uint64_t sub_10001C9D8()
{
  return sub_10001C294(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10001C9F0(void *a1@<X8>)
{
}

uint64_t sub_10001CA08@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DecodingError(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t result = type metadata accessor for MessageDictionary(0LL);
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(result + 136));
  unint64_t v8 = v7[1];
  __int128 v9 = xmmword_10008DC00;
  __int128 v10 = 0uLL;
  if (v8 >> 60 == 15)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    __int16 v13 = 0;
    __int128 v14 = 0uLL;
    __int128 v15 = 0uLL;
    __int128 v16 = 0uLL;
  }

  else
  {
    uint64_t v17 = *v7;
    uint64_t v18 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    uint64_t v19 = sub_100012A64(v17, v8);
    uint64_t v20 = PropertyListDecoder.init()(v19);
    unint64_t v21 = sub_10001D2C0();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for MessageSummaryInfoDictionary,  v17,  v8,  &type metadata for MessageSummaryInfoDictionary,  v21);
    swift_release(v20);
    uint64_t result = sub_100012B98(v17, v8);
    uint64_t v11 = v22;
    uint64_t v12 = v23;
    __int128 v9 = v24;
    __int128 v10 = v25;
    __int128 v14 = v26;
    __int128 v15 = v27;
    __int128 v16 = v28;
    __int16 v13 = v29;
  }

  *(void *)a1 = v11;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v12;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v14;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v16;
  *(_WORD *)(a1 + 96) = v13;
  return result;
}

uint64_t sub_10001CE0C@<X0>(uint64_t a1@<X8>)
{
  if (v14 == 1)
  {
    uint64_t v9 = type metadata accessor for TextMessage.MessageSummaryInfo(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( a1,  1LL,  1LL,  v9);
  }

  else
  {
    uint64_t v2 = v15;
    uint64_t v3 = v16;
    uint64_t v4 = v17;
    uint64_t v5 = v18;
    uint64_t v6 = v20;
    uint64_t v7 = v19;
    swift_bridgeObjectRetain(v16);
    __n128 v8 = swift_bridgeObjectRetain(v5);
    TextMessage.MessageSummaryInfo.init(with:hasBeenRetried:sourceApplicationID:associatedBalloonBundleID:)( v7,  v6,  v4,  v5,  v2,  v3,  v8);
    sub_10001D208(v12);
    uint64_t v10 = type metadata accessor for TextMessage.MessageSummaryInfo(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a1,  0LL,  1LL,  v10);
  }

uint64_t sub_10001CFB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001CA08((uint64_t)v16);
  sub_10001D1C0((uint64_t)v16, (uint64_t)&v17);
  uint64_t v5 = v20;
  if (v20 == 1)
  {
    uint64_t v12 = type metadata accessor for TapBack.MessageSummaryInfo(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( a1,  1LL,  1LL,  v12);
  }

  else
  {
    uint64_t v6 = v19;
    uint64_t v7 = v21;
    uint64_t v8 = v22;
    uint64_t v9 = v23;
    uint64_t v10 = v24;
    TapBack.MessageSummaryInfo.AssociatedMessageMessageSummaryInfoTypeContentType.init(defaultingRawValue:)( v17,  v18 & 1);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v5);
    __n128 v11 = swift_bridgeObjectRetain(v8);
    TapBack.MessageSummaryInfo.init(with:summary:pluginBundleID:pluginDisplayName:)(v4, v6, v5, v7, v8, v9, v10, v11);
    sub_10001D208(v16);
    uint64_t v13 = type metadata accessor for TapBack.MessageSummaryInfo(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( a1,  0LL,  1LL,  v13);
  }

uint64_t sub_10001D1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B0188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10001D208(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10001D260( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a4 != 1)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    return swift_bridgeObjectRelease(a12);
  }

  return result;
}

unint64_t sub_10001D2C0()
{
  unint64_t result = qword_1000B0190;
  if (!qword_1000B0190)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSummaryInfoDictionary,  &type metadata for MessageSummaryInfoDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0190);
  }

  return result;
}

uint64_t sub_10001D304(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000AFFA8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t _s18MessageSummaryInfoVwxx(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t _s18MessageSummaryInfoVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v7;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t _s18MessageSummaryInfoVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 32) = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a2[6];
  uint64_t v9 = a2[7];
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 64) = a2[8];
  uint64_t v11 = a2[9];
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 80) = a2[10];
  uint64_t v13 = a2[11];
  uint64_t v14 = *(void *)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_BYTE *)(a1 + 97) = *((_BYTE *)a2 + 97);
  return a1;
}

__n128 _s18MessageSummaryInfoVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 4_Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t _s18MessageSummaryInfoVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v12;
  swift_bridgeObjectRelease(v13);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  return a1;
}

uint64_t _s18MessageSummaryInfoVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 98)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s18MessageSummaryInfoVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8_Block_object_dispose(va, 8) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 9_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 9_Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *_s18MessageSummaryInfoVMa()
{
  return &_s18MessageSummaryInfoVN;
}

ValueMetadata *type metadata accessor for ErrorMessageUnpacker()
{
  return &type metadata for ErrorMessageUnpacker;
}

unint64_t sub_10001D6A8(uint64_t a1)
{
  unint64_t result = sub_10000E8C8();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10001D6CC()
{
  return sub_10000E9D8( &qword_1000B0198,  (uint64_t (*)(uint64_t))&type metadata accessor for ErrorMessage,  (uint64_t)&protocol conformance descriptor for ErrorMessage);
}

uint64_t sub_10001D6F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PropertyListDecoder.init()();
  uint64_t v11 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v5, a1, a2, v5, v11);
  uint64_t result = swift_release(v10);
  if (!v2)
  {
    unint64_t v13 = sub_10001D828();
    uint64_t v14 = swift_allocError(&type metadata for ErrorMessageUnpacker.ErrorMessageTypeNotSupported, v13, 0LL, 0LL);
    swift_willThrow(v14);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  return result;
}

unint64_t sub_10001D828()
{
  unint64_t result = qword_1000B01A0;
  if (!qword_1000B01A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DCC0, &type metadata for ErrorMessageUnpacker.ErrorMessageTypeNotSupported);
    atomic_store(result, (unint64_t *)&qword_1000B01A0);
  }

  return result;
}

ValueMetadata *type metadata accessor for ErrorMessageUnpacker.ErrorMessageTypeNotSupported()
{
  return &type metadata for ErrorMessageUnpacker.ErrorMessageTypeNotSupported;
}

uint64_t destroy for RelayReachabilityContextDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for RelayReachabilityContextDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for RelayReachabilityContextDictionary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  return a1;
}

__n128 initializeWithTake for RelayReachabilityContextDictionary(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RelayReachabilityContextDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  *(_DWORD *)(a1 + 8_Block_object_dispose(va, 8) = *(_DWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  return a1;
}

uint64_t getEnumTagSinglePayload for RelayReachabilityContextDictionary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 93)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RelayReachabilityContextDictionary( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 92) = 0;
    *(_DWORD *)(result + 8_Block_object_dispose(va, 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 93) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 93) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityContextDictionary()
{
  return &type metadata for RelayReachabilityContextDictionary;
}

uint64_t sub_10001DBD8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001DC00 + 4 * byte_10008DD00[a1]))( 26979LL,  0xE200000000000000LL);
}

uint64_t sub_10001DC00()
{
  return 29539LL;
}

uint64_t sub_10001DC08()
{
  return 1751215219LL;
}

uint64_t sub_10001DC18()
{
  return 1935764595LL;
}

uint64_t sub_10001DC28()
{
  return 7566700LL;
}

uint64_t sub_10001DC38()
{
  return 7171187LL;
}

uint64_t sub_10001DC48()
{
  return 25699LL;
}

uint64_t sub_10001DC50()
{
  return 26728LL;
}

uint64_t sub_10001DC58()
{
  return 28006LL;
}

uint64_t sub_10001DC60()
{
  return 25456LL;
}

uint64_t sub_10001DC68()
{
  return 29286LL;
}

uint64_t sub_10001DC70(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10001DC98 + 4 * byte_10008DD0B[a1]))( 26979LL,  0xE200000000000000LL);
}

uint64_t sub_10001DC98()
{
  return 29539LL;
}

uint64_t sub_10001DCA0()
{
  return 1751215219LL;
}

uint64_t sub_10001DCB0()
{
  return 1935764595LL;
}

uint64_t sub_10001DCC0()
{
  return 7566700LL;
}

uint64_t sub_10001DCD0()
{
  return 7171187LL;
}

uint64_t sub_10001DCE0()
{
  return 25699LL;
}

uint64_t sub_10001DCE8()
{
  return 26728LL;
}

uint64_t sub_10001DCF0()
{
  return 28006LL;
}

uint64_t sub_10001DCF8()
{
  return 25456LL;
}

uint64_t sub_10001DD00()
{
  return 29286LL;
}

uint64_t sub_10001DD08(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B01B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10001E77C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityContextDictionary.CodingKeys,  &type metadata for RelayReachabilityContextDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v37 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v37, v5);
  if (!v2)
  {
    int v14 = *((unsigned __int8 *)v3 + 16);
    int v15 = *((unsigned __int8 *)v3 + 17);
    char v36 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14 | (v15 << 8), &v36, v5);
    uint64_t v16 = v3[3];
    uint64_t v17 = v3[4];
    v35[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v35, v5);
    uint64_t v18 = v3[5];
    uint64_t v19 = v3[6];
    char v34 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v34, v5);
    uint64_t v20 = v3[7];
    uint64_t v21 = v3[8];
    char v33 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v33, v5);
    uint64_t v22 = v3[9];
    uint64_t v23 = v3[10];
    char v32 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v32, v5);
    uint64_t v24 = *((unsigned __int8 *)v3 + 88);
    char v31 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, &v31, v5);
    uint64_t v25 = *((unsigned __int8 *)v3 + 89);
    HIBYTE(v30) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, (char *)&v30 + 7, v5);
    uint64_t v26 = *((unsigned __int8 *)v3 + 90);
    BYTE6(v30) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, (char *)&v30 + 6, v5);
    uint64_t v27 = *((unsigned __int8 *)v3 + 91);
    BYTE5(v30) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, (char *)&v30 + 5, v5);
    uint64_t v28 = *((unsigned __int8 *)v3 + 92);
    BYTE4(v30) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, (char *)&v30 + 4, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001DF8C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10001DBD8(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10001DBD8(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10001E014()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10001DBD8(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10001E074(uint64_t a1)
{
  uint64_t v3 = sub_10001DBD8(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10001E0B4(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10001DBD8(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10001E110@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001E250(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001E13C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10001DBD8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001E164()
{
  return sub_10001DC70(*v0);
}

unint64_t sub_10001E16C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001E250(a1);
  *a2 = result;
  return result;
}

void sub_10001E190(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_10001E19C(uint64_t a1)
{
  unint64_t v2 = sub_10001E77C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001E1C4(uint64_t a1)
{
  unint64_t v2 = sub_10001E77C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001E1EC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    a2[2] = v7[2];
    a2[3] = v5;
    a2[4] = v8[0];
    *(_OWORD *)((char *)a2 + 77) = *(_OWORD *)((char *)v8 + 13);
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *a2 = v7[0];
    a2[1] = v6;
  }

  return result;
}

uint64_t sub_10001E23C(void *a1)
{
  return sub_10001DD08(a1);
}

unint64_t sub_10001E250(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3340, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xB) {
    return 11LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001E298@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B01A8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10001E77C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityContextDictionary.CodingKeys,  &type metadata for RelayReachabilityContextDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    return swift_bridgeObjectRelease(0LL);
  }

  else
  {
    char v54 = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
    uint64_t v14 = v13;
    char v53 = 1;
    swift_bridgeObjectRetain(v13);
    int v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
    char v52 = 2;
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
    uint64_t v17 = v16;
    uint64_t v41 = v15;
    char v51 = 3;
    swift_bridgeObjectRetain(v16);
    uint64_t v42 = v17;
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5);
    uint64_t v39 = v12;
    char v50 = 4;
    uint64_t v40 = v18;
    swift_bridgeObjectRetain(v18);
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
    uint64_t v21 = v20;
    uint64_t v36 = v19;
    char v37 = a2;
    char v49 = 5;
    swift_bridgeObjectRetain(v20);
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v5);
    uint64_t v24 = v23;
    uint64_t v35 = v22;
    char v48 = 6;
    swift_bridgeObjectRetain(v23);
    int v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    char v47 = 7;
    int v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    char v46 = 8;
    int v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v46, v5);
    char v45 = 9;
    int v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
    char v44 = 10;
    LOBYTE(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100010D60(a1);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v21);
    uint64_t v25 = v40;
    swift_bridgeObjectRelease(v40);
    uint64_t v26 = v42;
    swift_bridgeObjectRelease(v42);
    uint64_t result = swift_bridgeObjectRelease(v14);
    uint64_t v28 = v37;
    uint64_t *v37 = v39;
    v28[1] = v14;
    char v29 = BYTE1(v43);
    *((_BYTE *)v28 + 16) = v43;
    *((_BYTE *)v28 + 17) = v29 & 1;
    v28[3] = v41;
    v28[4] = v26;
    v28[5] = v38;
    v28[6] = v25;
    v28[7] = v36;
    v28[8] = v21;
    v28[9] = v35;
    v28[10] = v24;
    *((_BYTE *)v28 + 8_Block_object_dispose(va, 8) = v34;
    *((_BYTE *)v28 + 89) = v33;
    *((_BYTE *)v28 + 90) = v32;
    *((_BYTE *)v28 + 91) = v31;
    *((_BYTE *)v28 + 92) = v17;
  }

  return result;
}

unint64_t sub_10001E77C()
{
  unint64_t result = qword_1000B01B0;
  if (!qword_1000B01B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DE90, &type metadata for RelayReachabilityContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B01B0);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RelayReachabilityContextDictionary.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }

uint64_t storeEnumTagSinglePayload for RelayReachabilityContextDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF5) {
    return ((uint64_t (*)(void))((char *)&loc_10001E89C + 4 * byte_10008DD1B[v4]))();
  }
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10001E8D0 + 4 * byte_10008DD16[v4]))();
}

uint64_t sub_10001E8D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001E8D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001E8E0LL);
  }
  return result;
}

uint64_t sub_10001E8EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001E8F4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 10;
  return result;
}

uint64_t sub_10001E8F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001E900(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityContextDictionary.CodingKeys()
{
  return &type metadata for RelayReachabilityContextDictionary.CodingKeys;
}

unint64_t sub_10001E920()
{
  unint64_t result = qword_1000B01C0;
  if (!qword_1000B01C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DE68, &type metadata for RelayReachabilityContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B01C0);
  }

  return result;
}

unint64_t sub_10001E968()
{
  unint64_t result = qword_1000B01C8;
  if (!qword_1000B01C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DDA0, &type metadata for RelayReachabilityContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B01C8);
  }

  return result;
}

unint64_t sub_10001E9B0()
{
  unint64_t result = qword_1000B01D0;
  if (!qword_1000B01D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DDC8, &type metadata for RelayReachabilityContextDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B01D0);
  }

  return result;
}

ValueMetadata *type metadata accessor for ReadReceiptUnpacker()
{
  return &type metadata for ReadReceiptUnpacker;
}

unint64_t sub_10001EA04(uint64_t a1)
{
  unint64_t result = sub_10000E774();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_10001EA2C()
{
  unint64_t result = qword_1000B01D8;
  if (!qword_1000B01D8)
  {
    uint64_t Receipt = type metadata accessor for ReadReceipt(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for ReadReceipt, Receipt);
    atomic_store(result, (unint64_t *)&qword_1000B01D8);
  }

  return result;
}

uint64_t sub_10001EA74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000752DC(a1, a2, a3);
}

uint64_t destroy for RelayReachabilityRequestDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for RelayReachabilityRequestDictionary(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  uint64_t v7 = a2[4];
  *(void *)(a1 + 32) = v7;
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  uint64_t v8 = a2[7];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a2[6];
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v10;
  uint64_t v11 = a2[13];
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = v11;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_BYTE *)(a1 + 116) = *((_BYTE *)a2 + 116);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for RelayReachabilityRequestDictionary(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[12] = a2[12];
  uint64_t v16 = a2[13];
  uint64_t v17 = a1[13];
  a1[13] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  *((_BYTE *)a1 + 113) = *((_BYTE *)a2 + 113);
  *((_BYTE *)a1 + 114) = *((_BYTE *)a2 + 114);
  *((_BYTE *)a1 + 115) = *((_BYTE *)a2 + 115);
  *((_BYTE *)a1 + 116) = *((_BYTE *)a2 + 116);
  return a1;
}

__n128 initializeWithTake for RelayReachabilityRequestDictionary(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(void *)(a1 + 109) = *(void *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t *assignWithTake for RelayReachabilityRequestDictionary(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
  uint64_t v9 = a2[7];
  uint64_t v10 = a1[7];
  a1[6] = a2[6];
  a1[7] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[9];
  uint64_t v12 = a1[9];
  a1[8] = a2[8];
  a1[9] = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[11];
  uint64_t v14 = a1[11];
  a1[10] = a2[10];
  a1[11] = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = a2[13];
  uint64_t v16 = a1[13];
  a1[12] = a2[12];
  a1[13] = v15;
  swift_bridgeObjectRelease(v16);
  *((_DWORD *)a1 + 2_Block_object_dispose(va, 8) = *((_DWORD *)a2 + 28);
  *((_BYTE *)a1 + 116) = *((_BYTE *)a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for RelayReachabilityRequestDictionary(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 117)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RelayReachabilityRequestDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 117) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 117) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityRequestDictionary()
{
  return &type metadata for RelayReachabilityRequestDictionary;
}

uint64_t sub_10001EE5C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B01F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10001F5C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityRequestDictionary.CodingKeys,  &type metadata for RelayReachabilityRequestDictionary.CodingKeys,  v11,  v9,  v10);
  *(void *)&v20[0] = *(void *)v3;
  char v22 = 0;
  uint64_t v12 = sub_10000E624(&qword_1000AFED0);
  uint64_t v13 = sub_100010D80( &qword_1000AFED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v22, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = *(void *)(v3 + 8);
    uint64_t v15 = *(void *)(v3 + 16);
    LOBYTE(v20[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v20, v5);
    __int128 v16 = *(_OWORD *)(v3 + 72);
    void v20[2] = *(_OWORD *)(v3 + 56);
    v20[3] = v16;
    *(_OWORD *)uint64_t v21 = *(_OWORD *)(v3 + 88);
    *(_OWORD *)&v21[13] = *(_OWORD *)(v3 + 101);
    __int128 v17 = *(_OWORD *)(v3 + 40);
    v20[0] = *(_OWORD *)(v3 + 24);
    v20[1] = v17;
    char v22 = 2;
    unint64_t v18 = sub_10001F64C();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v20,  &v22,  v5,  &type metadata for RelayReachabilityContextDictionary,  v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001F00C(char *a1, char *a2)
{
  return sub_10003F92C(*a1, *a2);
}

Swift::Int sub_10001F018()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, qword_10008E128[v1], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10001F070(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_10001F09C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_10008E128[v2], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_10001F0F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001F248(*a1);
  *a2 = result;
  return result;
}

void sub_10001F11C(void *a1@<X8>)
{
  *a1 = qword_10008E128[*v1];
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_10001F138()
{
  return qword_10008E128[*v0];
}

unint64_t sub_10001F150@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001F248(a1);
  *a2 = result;
  return result;
}

void sub_10001F174(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10001F180(uint64_t a1)
{
  unint64_t v2 = sub_10001F5C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001F1A8(uint64_t a1)
{
  unint64_t v2 = sub_10001F5C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001F1D0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = *(_OWORD *)v13;
    *(void *)(a2 + 109) = *(void *)&v13[13];
    __int128 v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    double result = *(double *)&v9;
    __int128 v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v7;
  }

  return result;
}

uint64_t sub_10001F234(void *a1)
{
  return sub_10001EE5C(a1);
}

unint64_t sub_10001F248(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3468, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10001F290@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B01E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10001F5C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityRequestDictionary.CodingKeys,  &type metadata for RelayReachabilityRequestDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  uint64_t v12 = sub_10000E624(&qword_1000AFED0);
  char v52 = 0;
  uint64_t v13 = sub_100010D80( &qword_1000AFF00,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v38, v12, &v52, v5, v12, v13);
  char v37 = a2;
  uint64_t v14 = v38[0];
  LOBYTE(v38[0]) = 1;
  swift_bridgeObjectRetain(v14);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v38, v5);
  uint64_t v17 = v16;
  uint64_t v36 = v15;
  char v52 = 2;
  unint64_t v18 = sub_10001F608();
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)( v38,  &type metadata for RelayReachabilityContextDictionary,  &v52,  v5,  &type metadata for RelayReachabilityContextDictionary,  v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v19 = v38[1];
  uint64_t v35 = v38[0];
  int v33 = v40;
  int v34 = v39;
  uint64_t v20 = v42;
  uint64_t v21 = v44;
  uint64_t v31 = v43;
  uint64_t v32 = v41;
  uint64_t v22 = v46;
  uint64_t v23 = v48;
  uint64_t v29 = v47;
  uint64_t v30 = v45;
  int v51 = v50;
  HIDWORD(v2_Block_object_dispose(va, 8) = v49;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_100010D60(a1);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v19);
  swift_bridgeObjectRelease(v17);
  uint64_t result = swift_bridgeObjectRelease(v14);
  uint64_t v26 = v36;
  uint64_t v25 = v37;
  void *v37 = v14;
  v25[1] = v26;
  uint64_t v27 = v35;
  v25[2] = v17;
  v25[3] = v27;
  v25[4] = v19;
  *((_BYTE *)v25 + 40) = v34;
  *((_BYTE *)v25 + 41) = v33;
  v25[6] = v32;
  v25[7] = v20;
  char v25[8] = v31;
  v25[9] = v21;
  v25[10] = v30;
  v25[11] = v22;
  v25[12] = v29;
  v25[13] = v23;
  *((_DWORD *)v25 + 2_Block_object_dispose(va, 8) = HIDWORD(v28);
  *((_BYTE *)v25 + 116) = v51;
  return result;
}

unint64_t sub_10001F5C4()
{
  unint64_t result = qword_1000B01E8;
  if (!qword_1000B01E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E0D0, &type metadata for RelayReachabilityRequestDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B01E8);
  }

  return result;
}

unint64_t sub_10001F608()
{
  unint64_t result = qword_1000B01F0;
  if (!qword_1000B01F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DD6C, &type metadata for RelayReachabilityContextDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B01F0);
  }

  return result;
}

unint64_t sub_10001F64C()
{
  unint64_t result = qword_1000B0200;
  if (!qword_1000B0200)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DD44, &type metadata for RelayReachabilityContextDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0200);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RelayReachabilityRequestDictionary.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for RelayReachabilityRequestDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10001F76C + 4 * byte_10008DF55[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10001F7A0 + 4 * byte_10008DF50[v4]))();
}

uint64_t sub_10001F7A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F7A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001F7B0LL);
  }
  return result;
}

uint64_t sub_10001F7BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001F7C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10001F7C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001F7D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityRequestDictionary.CodingKeys()
{
  return &type metadata for RelayReachabilityRequestDictionary.CodingKeys;
}

unint64_t sub_10001F7F0()
{
  unint64_t result = qword_1000B0208;
  if (!qword_1000B0208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E0A8, &type metadata for RelayReachabilityRequestDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0208);
  }

  return result;
}

unint64_t sub_10001F838()
{
  unint64_t result = qword_1000B0210;
  if (!qword_1000B0210)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DFE0, &type metadata for RelayReachabilityRequestDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0210);
  }

  return result;
}

unint64_t sub_10001F880()
{
  unint64_t result = qword_1000B0218;
  if (!qword_1000B0218)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E008, &type metadata for RelayReachabilityRequestDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0218);
  }

  return result;
}

uint64_t Message.init(messageDictionary:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000AFF08);
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for MessageContent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v25[3] = type metadata accessor for MessageDictionary(0LL);
  v25[4] = &off_1000A83E8;
  uint64_t v12 = sub_10001FA94(v25);
  sub_100012F34((uint64_t)a1, (uint64_t)v12);
  sub_100076A3C(v25, (uint64_t)v11);
  if (v2) {
    return sub_100012FE4((uint64_t)a1);
  }
  uint64_t v24 = a2;
  uint64_t v14 = *a1;
  uint64_t v15 = &_swiftEmptyArrayStorage;
  if (*a1) {
    uint64_t v15 = *a1;
  }
  uint64_t v26 = v15;
  __n128 v16 = swift_bridgeObjectRetain(v14);
  uint64_t v23 = MessageContent.plainTextBody.getter(v16);
  uint64_t v18 = v17;
  uint64_t v22 = MessageContent.plainTextSubject.getter();
  uint64_t v20 = v19;
  MessageContent.content.getter();
  uint64_t v21 = sub_1000730FC();
  Message.init(with:plainTextSubject:content:participantDestinationIdentifiers:attributionInfo:)( v23,  v18,  v22,  v20,  v7,  v26,  v21);
  sub_100012FE4((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void *sub_10001FA94(void *a1)
{
  __int16 v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10001FAD0(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000AFF08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for DoubleValue(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DoubleValue(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DoubleValue(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DoubleValue()
{
  return &type metadata for DoubleValue;
}

void *sub_10001FB80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_10001FBB0(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v5 & 1;
  }

  return result;
}

void *sub_10001FBB0(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  char v5 = sub_10000FFDC(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v23, v3, v4);
  if (v1)
  {
    sub_100010D60(a1);
    return v5;
  }

  uint64_t v6 = v24;
  uint64_t v7 = v25;
  sub_10000FFDC(v23, v24);
  uint64_t v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
  uint64_t v10 = v9;
  uint64_t v22 = 0LL;
  uint64_t v11 = __chkstk_darwin(v8);
  v19[2] = &v22;
  if ((v10 & 0x1000000000000000LL) != 0 || !(v10 & 0x2000000000000000LL | v12 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v21, sub_10001FE98, v19);
  }

  else
  {
    __chkstk_darwin(v11);
    if ((v10 & 0x2000000000000000LL) != 0)
    {
      v20[0] = v13;
      v20[1] = v10 & 0xFFFFFFFFFFFFFFLL;
      BOOL v17 = (v13 > 0x20u || ((0x100003E01uLL >> v13) & 1) == 0)
         && (__n128 v16 = (_BYTE *)_swift_stdlib_strtod_clocale(v20, &v22)) != 0LL
         && *v16 == 0;
      char v21 = v17;
      swift_bridgeObjectRelease(v10);
      goto LABEL_16;
    }

    if ((v13 & 0x1000000000000000LL) != 0)
    {
      uint64_t v14 = (v10 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v15 = v13 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v14 = _StringObject.sharedUTF8.getter(v13, v10);
    }

    char v21 = sub_100068904(v14, v15, (void (*)(uint64_t *__return_ptr))sub_10001FEB0) & 1;
  }

  swift_bridgeObjectRelease(v10);
LABEL_16:
  if (v21) {
    char v5 = v22;
  }
  else {
    char v5 = 0LL;
  }
  sub_100010D60(v23);
  sub_100010D60(a1);
  return v5;
}

_BYTE *sub_10001FE98@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100067DD8(a1, a2);
}

void *sub_10001FEB0@<X0>(_BYTE *a1@<X8>)
{
  return sub_100068958(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t destroy for MapPreviewUnpacker(void *a1)
{
  return swift_bridgeObjectRelease(a1[11]);
}

void *initializeWithCopy for MapPreviewUnpacker(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for MapPreviewUnpacker(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[8] = a2[8];
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[10] = a2[10];
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[11] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for MapPreviewUnpacker(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  return result;
}

void *assignWithTake for MapPreviewUnpacker(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[9];
  uint64_t v13 = a1[9];
  a1[8] = a2[8];
  a1[9] = v12;
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[11];
  uint64_t v15 = a1[11];
  a1[10] = a2[10];
  a1[11] = v14;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapPreviewUnpacker(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapPreviewUnpacker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8_Block_object_dispose(va, 8) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MapPreviewUnpacker()
{
  return &type metadata for MapPreviewUnpacker;
}

unint64_t sub_1000201DC()
{
  unint64_t result = qword_1000B0220;
  if (!qword_1000B0220)
  {
    uint64_t v1 = type metadata accessor for LocationCoordinate2D(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for LocationCoordinate2D, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0220);
  }

  return result;
}

BOOL sub_100020224(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10002023C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100020280()
{
}

Swift::Int sub_1000202A8(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000202E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v216 = a1;
  uint64_t v217 = a2;
  v193[1] = a3;
  uint64_t v5 = sub_10000E624(&qword_1000B0228);
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v195 = (char *)v193 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v199 = (char *)v193 - v9;
  __chkstk_darwin(v8);
  uint64_t v200 = (char *)v193 - v10;
  uint64_t v11 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v203 = *(void *)(v11 - 8);
  uint64_t v204 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v194 = (char *)v193 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v196 = (char *)v193 - v15;
  __chkstk_darwin(v14);
  uint64_t v197 = (char *)v193 - v16;
  uint64_t v17 = sub_10000E624(&qword_1000B0230);
  __chkstk_darwin(v17);
  uint64_t v209 = (char *)v193 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for URLComponents(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v193 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)v193 - v24;
  uint64_t v26 = sub_10000E624(&qword_1000AFF60);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)v193 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)v193 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_100021888();
  if (v3)
  {
    unint64_t v34 = sub_100021A84();
    uint64_t v35 = swift_allocError(&type metadata for MapPreviewUnpacker.MapPreviewUnpackerError, v34, 0LL, 0LL);
    *uint64_t v36 = 0;
    swift_willThrow(v35);
    return swift_errorRelease(v3);
  }

  uint64_t v38 = v33;
  uint64_t v208 = v28;
  uint64_t v202 = v23;
  uint64_t v205 = 0LL;
  uint64_t v201 = v32;
  uint64_t v216 = v29;
  uint64_t v217 = v30;
  uint64_t v206 = v20;
  uint64_t v212 = (void *)v19;
  uint64_t v215 = v33;
  uint64_t v210 = v25;
  if ((unint64_t)v33 >> 62)
  {
    if (v33 < 0) {
      uint64_t v192 = v33;
    }
    else {
      uint64_t v192 = v33 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v33);
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v192);
    swift_bridgeObjectRelease(v215);
    uint64_t v38 = v215;
  }

  else
  {
    uint64_t v39 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v40 = v206;
  uint64_t v41 = v201;
  uint64_t v42 = (uint64_t)v208;
  if (!v39)
  {
LABEL_138:
    swift_bridgeObjectRelease(v38);
    unint64_t v189 = sub_100021A84();
    uint64_t v190 = swift_allocError(&type metadata for MapPreviewUnpacker.MapPreviewUnpackerError, v189, 0LL, 0LL);
    *uint64_t v191 = 1;
    return swift_willThrow(v190);
  }

  unint64_t v214 = v38 & 0xC000000000000001LL;
  uint64_t v43 = 4LL;
  __int128 v198 = xmmword_10008D7D0;
  uint64_t v213 = v39;
  while (1)
  {
    id v44 = v214
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43 - 4, v38)
        : *(id *)(v38 + 8 * v43);
    uint64_t v45 = v44;
    uint64_t v46 = v43 - 3;
    if (__OFADD__(v43 - 4, 1LL)) {
      break;
    }
    id v47 = [v44 value];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v50 = v49;

    uint64_t v51 = v48;
    uint64_t v52 = v217;
    URL.init(string:)(v51, v50);
    uint64_t v53 = v50;
    uint64_t v54 = v216;
    swift_bridgeObjectRelease(v53);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v42, 1LL, v54) == 1)
    {

      sub_100012EF8(v42, &qword_1000AFF60);
      goto LABEL_8;
    }

    uint64_t v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 32))(v41, v42, v54);
    uint64_t v56 = URL.host.getter(v55);
    if (!v57)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v41, v54);

      goto LABEL_8;
    }

    uint64_t v58 = v56;
    uint64_t v59 = v57;
    uint64_t v211 = (unint64_t *)v45;
    uint64_t v60 = v41;
    uint64_t v61 = (uint64_t)v209;
    URLComponents.init(url:resolvingAgainstBaseURL:)(v60, 0LL);
    uint64_t v62 = v212;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v40 + 48))(v61, 1LL, v212) == 1)
    {
      (*(void (**)(char *, uint64_t))(v217 + 8))(v60, v54);
      swift_bridgeObjectRelease(v59);

      sub_100012EF8(v61, &qword_1000B0230);
      uint64_t v41 = v60;
      uint64_t v42 = (uint64_t)v208;
      goto LABEL_8;
    }

    (*(void (**)(char *, uint64_t, void *))(v40 + 32))(v210, v61, v62);
    uint64_t v63 = v207;
    uint64_t v64 = v207[1];
    if (v58 == *v207 && v59 == v64 || (_stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, *v207, v64, 0LL) & 1) != 0)
    {
      uint64_t v65 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRelease)(v59);
      uint64_t v66 = v63[6];
      uint64_t v67 = v63[7];
      uint64_t v68 = URLComponents.queryItems.getter(v65);
      uint64_t v41 = v201;
      if (!v68)
      {
        id v75 = v211;
        goto LABEL_31;
      }

      uint64_t v69 = v68;
      sub_100018290(0LL, &qword_1000B0240, &OBJC_CLASS___NSPredicate_ptr);
      uint64_t v70 = sub_10000E624(&qword_1000AFF48);
      uint64_t v71 = swift_allocObject(v70, 72LL, 7LL);
      *(_OWORD *)(v71 + 16) = v198;
      *(void *)(v71 + 56) = &type metadata for String;
      *(void *)(v71 + 64) = sub_100012CDC();
      *(void *)(v71 + 32) = v66;
      *(void *)(v71 + 40) = v67;
      swift_bridgeObjectRetain(v67);
      uint64_t v72 = (void *)NSPredicate.init(format:_:)(0x40253D656D616ELL, 0xE700000000000000LL, v71);
      uint64_t v73 = v205;
      uint64_t v74 = sub_100021AC8(v69, v72);
      uint64_t v205 = v73;
      swift_bridgeObjectRelease(v69);
      id v75 = v211;
      if (*((void *)v74 + 2))
      {
        uint64_t v77 = v203;
        uint64_t v76 = v204;
        uint64_t v78 = (uint64_t)v200;
        (*(void (**)(char *, char *, uint64_t))(v203 + 16))( v200,  &v74[(*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80)],  v204);
        uint64_t v79 = 0LL;
      }

      else
      {
        uint64_t v79 = 1LL;
        uint64_t v78 = (uint64_t)v200;
        uint64_t v77 = v203;
        uint64_t v76 = v204;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v78, v79, 1LL, v76);
      swift_bridgeObjectRelease(v74);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v78, 1LL, v76) == 1)
      {

        sub_100012EF8(v78, &qword_1000B0228);
        uint64_t v40 = v206;
LABEL_31:
        uint64_t v84 = (*(uint64_t (**)(char *, char *, void *))(v40 + 16))(v202, v210, v212);
LABEL_32:
        uint64_t v85 = v207[4];
        uint64_t v86 = v207[5];
        uint64_t v87 = URLComponents.queryItems.getter(v84);
        if (v87)
        {
          uint64_t v88 = v87;
          sub_100018290(0LL, &qword_1000B0240, &OBJC_CLASS___NSPredicate_ptr);
          uint64_t v89 = sub_10000E624(&qword_1000AFF48);
          uint64_t v90 = swift_allocObject(v89, 72LL, 7LL);
          *(_OWORD *)(v90 + 16) = v198;
          *(void *)(v90 + 56) = &type metadata for String;
          *(void *)(v90 + 64) = sub_100012CDC();
          *(void *)(v90 + 32) = v85;
          *(void *)(v90 + 40) = v86;
          swift_bridgeObjectRetain(v86);
          uint64_t v91 = (void *)NSPredicate.init(format:_:)(0x40253D656D616ELL, 0xE700000000000000LL, v90);
          uint64_t v92 = v205;
          id v93 = sub_100021AC8(v88, v91);
          uint64_t v205 = v92;
          swift_bridgeObjectRelease(v88);
          if (*((void *)v93 + 2))
          {
            uint64_t v94 = v203;
            uint64_t v95 = v204;
            uint64_t v96 = (uint64_t)v199;
            (*(void (**)(char *, char *, uint64_t))(v203 + 16))( v199,  &v93[(*(unsigned __int8 *)(v94 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80)],  v204);
            uint64_t v97 = 0LL;
          }

          else
          {
            uint64_t v97 = 1LL;
            uint64_t v96 = (uint64_t)v199;
            uint64_t v94 = v203;
            uint64_t v95 = v204;
          }

          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v96, v97, 1LL, v95);
          swift_bridgeObjectRelease(v93);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v96, 1LL, v95) == 1)
          {

            sub_100012EF8(v96, &qword_1000B0228);
            goto LABEL_49;
          }

          uint64_t v102 = v196;
          uint64_t v103 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 32))(v196, v96, v95);
          v193[0] = URLQueryItem.value.getter(v103);
          uint64_t v101 = v104;

          (*(void (**)(char *, uint64_t))(v94 + 8))(v102, v95);
          if (v101)
          {
            uint64_t v40 = v206;
            goto LABEL_42;
          }

LABEL_49:
          uint64_t v40 = v206;
        }

        uint64_t v39 = v216;
        uint64_t v40 = *(void *)(v40 + 8);
        uint64_t v111 = v212;
        ((void (*)(char *, void *))v40)(v202, v212);

LABEL_52:
        uint64_t v42 = (uint64_t)v208;
LABEL_53:
        ((void (*)(char *, void *))v40)(v210, v111);
        (*(void (**)(char *, uint64_t))(v217 + 8))(v41, v39);
        uint64_t v40 = v206;
        goto LABEL_8;
      }

      id v98 = v197;
      uint64_t v99 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 32))(v197, v78, v76);
      v193[0] = URLQueryItem.value.getter(v99);
      uint64_t v101 = v100;

      (*(void (**)(char *, uint64_t))(v77 + 8))(v98, v76);
      uint64_t v40 = v206;
      uint64_t v84 = (*(uint64_t (**)(char *, char *, void *))(v206 + 16))(v202, v210, v212);
      if (!v101) {
        goto LABEL_32;
      }
LABEL_42:
      uint64_t v39 = v216;
      uint64_t v40 = *(void *)(v40 + 8);
      ((void (*)(char *, void *))v40)(v202, v212);
      unint64_t v221 = v193[0];
      uint64_t v222 = v101;
      uint64_t v219 = 44LL;
      unint64_t v220 = 0xE100000000000000LL;
      unint64_t v105 = sub_100012BAC();
      uint64_t v106 = (void *)StringProtocol.components<A>(separatedBy:)( &v219,  &type metadata for String,  &type metadata for String,  v105,  v105);
      uint64_t v107 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRelease)(v101);
      if (v106[2] != 2LL)
      {
        swift_bridgeObjectRelease(v106);

        uint64_t v111 = v212;
        goto LABEL_52;
      }

      unint64_t v108 = v106[4];
      uint64_t v219 = 0LL;
      __chkstk_darwin(v107);
      v193[-2] = &v219;
      uint64_t v42 = (uint64_t)v208;
      if ((v109 & 0x1000000000000000LL) != 0 || !(v109 & 0x2000000000000000LL | v108 & 0x1000000000000000LL))
      {
        uint64_t v179 = v109;
        swift_bridgeObjectRetain(v109);
        uint64_t v180 = v205;
        _StringGuts._slowWithCString<A>(_:)(&v218, sub_100021E70, &v193[-4]);
        uint64_t v205 = v180;
        swift_bridgeObjectRelease(v179);
        uint64_t v45 = v212;
      }

      else
      {
        uint64_t v45 = v212;
        if ((v109 & 0x2000000000000000LL) != 0)
        {
          unint64_t v221 = v108;
          uint64_t v222 = v109 & 0xFFFFFFFFFFFFFFLL;
          switch((char)v108)
          {
            case 0:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
LABEL_60:
              uint64_t v126 = v109;
              swift_bridgeObjectRetain(v109);
              uint64_t v127 = v126;
              BOOL v128 = 0;
              break;
            default:
              v193[0] = v109;
              swift_bridgeObjectRetain(v109);
              uint64_t v161 = (_BYTE *)_swift_stdlib_strtod_clocale(&v221, &v219);
              if (v161) {
                BOOL v128 = *v161 == 0;
              }
              else {
                BOOL v128 = 0;
              }
              uint64_t v127 = v193[0];
              break;
          }
        }

        else
        {
          if ((v108 & 0x1000000000000000LL) != 0)
          {
            uint64_t v110 = (_BYTE *)((v109 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }

          else
          {
            v193[0] = v109;
            uint64_t v183 = _StringObject.sharedUTF8.getter(v108, v109);
            uint64_t v109 = v193[0];
            uint64_t v110 = (_BYTE *)v183;
          }

          switch(*v110)
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              goto LABEL_60;
            default:
              v193[0] = v109;
              swift_bridgeObjectRetain(v109);
              uint64_t v160 = (_BYTE *)_swift_stdlib_strtod_clocale(v110, &v219);
              if (v160) {
                BOOL v128 = *v160 == 0;
              }
              else {
                BOOL v128 = 0;
              }
              uint64_t v127 = v193[0];
              break;
          }
        }

        BOOL v218 = v128;
        swift_bridgeObjectRelease(v127);
      }

      if (!v218)
      {
        swift_bridgeObjectRelease(v106);

        uint64_t v39 = v216;
        uint64_t v111 = v45;
        goto LABEL_53;
      }

      if (v106[2] < 2uLL)
      {
        __break(1u);
LABEL_148:
        __break(1u);
        JUMPOUT(0x10002176CLL);
      }

      double v4 = *(double *)&v219;
      unint64_t v129 = v106[6];
      uint64_t v130 = v106[7];
      swift_bridgeObjectRetain(v130);
      uint64_t v131 = ((uint64_t (*)(void *))swift_bridgeObjectRelease)(v106);
      uint64_t v219 = 0LL;
      __chkstk_darwin(v131);
      v193[-2] = &v219;
      if ((v130 & 0x1000000000000000LL) == 0 && v132 & 0x2000000000000000LL | v129 & 0x1000000000000000LL)
      {
        if ((v132 & 0x2000000000000000LL) != 0)
        {
          unint64_t v221 = v129;
          uint64_t v222 = v132 & 0xFFFFFFFFFFFFFFLL;
          if (v129 <= 0x20u && ((0x100003E01uLL >> v129) & 1) != 0)
          {
            BOOL v158 = 0;
          }

          else
          {
            uint64_t v156 = v132;
            uint64_t v157 = (_BYTE *)_swift_stdlib_strtod_clocale(&v221, &v219);
            if (v157) {
              BOOL v158 = *v157 == 0;
            }
            else {
              BOOL v158 = 0;
            }
            uint64_t v132 = v156;
          }

          BOOL v218 = v158;
          swift_bridgeObjectRelease(v132);
        }

        else
        {
          if ((v129 & 0x1000000000000000LL) != 0)
          {
            uint64_t v133 = (unsigned __int8 *)((v132 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }

          else
          {
            unint64_t v184 = v129;
            uint64_t v185 = v132;
            uint64_t v133 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v184, v132);
            uint64_t v132 = v185;
          }

          unint64_t v134 = *v133;
          if (v134 < 0x21 && ((0x100003E01uLL >> v134) & 1) != 0)
          {
            BOOL v137 = 0;
          }

          else
          {
            uint64_t v135 = v132;
            uint64_t v136 = (_BYTE *)_swift_stdlib_strtod_clocale(v133, &v219);
            if (v136) {
              BOOL v137 = *v136 == 0;
            }
            else {
              BOOL v137 = 0;
            }
            uint64_t v132 = v135;
          }

          BOOL v218 = v137;
          uint64_t v162 = v132;
LABEL_107:
          swift_bridgeObjectRelease(v162);
        }

        uint64_t v39 = v216;
        if (v218) {
          goto LABEL_140;
        }

        uint64_t v111 = v45;
        goto LABEL_53;
      }

      uint64_t v181 = v132;
      uint64_t v182 = v205;
      _StringGuts._slowWithCString<A>(_:)(&v218, sub_100021E70, &v193[-4]);
      uint64_t v205 = v182;
      uint64_t v162 = v181;
      goto LABEL_107;
    }

    uint64_t v80 = v63[2];
    uint64_t v81 = v63[3];
    uint64_t v41 = v201;
    if (v58 == v80 && v59 == v81)
    {
      uint64_t v82 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRelease)(v59);
      uint64_t v42 = (uint64_t)v208;
      uint64_t v83 = v211;
    }

    else
    {
      char v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v59, v80, v81, 0LL);
      uint64_t v82 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRelease)(v59);
      uint64_t v42 = (uint64_t)v208;
      uint64_t v83 = v211;
      if ((v112 & 1) == 0)
      {

        (*(void (**)(char *, void *))(v40 + 8))(v210, v212);
        (*(void (**)(char *, uint64_t))(v217 + 8))(v41, v54);
        goto LABEL_8;
      }
    }

    uint64_t v113 = v207[9];
    uint64_t v211 = (unint64_t *)v207[8];
    uint64_t v114 = URLComponents.queryItems.getter(v82);
    if (!v114)
    {
      id v125 = v212;
      goto LABEL_90;
    }

    uint64_t v115 = v114;
    sub_100018290(0LL, &qword_1000B0240, &OBJC_CLASS___NSPredicate_ptr);
    uint64_t v116 = sub_10000E624(&qword_1000AFF48);
    uint64_t v117 = swift_allocObject(v116, 72LL, 7LL);
    *(_OWORD *)(v117 + 16) = v198;
    *(void *)(v117 + 56) = &type metadata for String;
    *(void *)(v117 + 64) = sub_100012CDC();
    *(void *)(v117 + 32) = v211;
    *(void *)(v117 + 40) = v113;
    swift_bridgeObjectRetain(v113);
    uint64_t v118 = (void *)NSPredicate.init(format:_:)(0x40253D656D616ELL, 0xE700000000000000LL, v117);
    uint64_t v119 = v205;
    uint64_t v120 = sub_100021AC8(v115, v118);
    uint64_t v205 = v119;
    swift_bridgeObjectRelease(v115);
    if (*((void *)v120 + 2))
    {
      uint64_t v122 = v203;
      uint64_t v121 = v204;
      uint64_t v123 = (uint64_t)v195;
      (*(void (**)(char *, char *, uint64_t))(v203 + 16))( v195,  &v120[(*(unsigned __int8 *)(v122 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80)],  v204);
      uint64_t v124 = 0LL;
    }

    else
    {
      uint64_t v124 = 1LL;
      uint64_t v123 = (uint64_t)v195;
      uint64_t v122 = v203;
      uint64_t v121 = v204;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56))(v123, v124, 1LL, v121);
    swift_bridgeObjectRelease(v120);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v123, 1LL, v121) == 1)
    {

      sub_100012EF8(v123, &qword_1000B0228);
LABEL_89:
      id v125 = v212;
      uint64_t v40 = v206;
      uint64_t v42 = (uint64_t)v208;
LABEL_90:

      (*(void (**)(char *, void *))(v40 + 8))(v210, v125);
      (*(void (**)(char *, uint64_t))(v217 + 8))(v41, v216);
      goto LABEL_8;
    }

    uint64_t v138 = v194;
    uint64_t v139 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 32))(v194, v123, v121);
    uint64_t v211 = (unint64_t *)URLQueryItem.value.getter(v139);
    uint64_t v141 = v140;

    (*(void (**)(char *, uint64_t))(v122 + 8))(v138, v121);
    if (!v141) {
      goto LABEL_89;
    }
    unint64_t v221 = (unint64_t)v211;
    uint64_t v222 = v141;
    uint64_t v219 = 32LL;
    unint64_t v220 = 0xE100000000000000LL;
    unint64_t v142 = sub_100012BAC();
    uint64_t v143 = (void *)StringProtocol.components<A>(separatedBy:)( &v219,  &type metadata for String,  &type metadata for String,  v142,  v142);
    swift_bridgeObjectRelease(v141);
    uint64_t v40 = v206;
    if (!v143[2])
    {
      uint64_t v159 = v143;
LABEL_98:
      swift_bridgeObjectRelease(v159);

      (*(void (**)(char *, void *))(v40 + 8))(v210, v212);
      (*(void (**)(char *, uint64_t))(v217 + 8))(v41, v216);
      uint64_t v42 = (uint64_t)v208;
      goto LABEL_8;
    }

    unint64_t v144 = v143[4];
    uint64_t v145 = v143[5];
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRelease(v143);
    unint64_t v221 = v144;
    uint64_t v222 = v145;
    uint64_t v219 = 44LL;
    unint64_t v220 = 0xE100000000000000LL;
    int v146 = (void *)StringProtocol.components<A>(separatedBy:)( &v219,  &type metadata for String,  &type metadata for String,  v142,  v142);
    uint64_t v147 = ((uint64_t (*)(uint64_t))swift_bridgeObjectRelease)(v145);
    if (v146[2] != 2LL)
    {
      uint64_t v159 = v146;
      goto LABEL_98;
    }

    v193[0] = v193;
    unint64_t v149 = v146[4];
    uint64_t v148 = v146[5];
    uint64_t v211 = v146;
    uint64_t v219 = 0LL;
    uint64_t v150 = __chkstk_darwin(v147);
    v193[-2] = &v219;
    uint64_t v42 = (uint64_t)v208;
    if ((v148 & 0x1000000000000000LL) != 0 || !(v148 & 0x2000000000000000LL | v149 & 0x1000000000000000LL))
    {
      swift_bridgeObjectRetain(v148);
      uint64_t v186 = v205;
      _StringGuts._slowWithCString<A>(_:)(&v218, sub_10001FE98, &v193[-4]);
      uint64_t v205 = v186;
LABEL_88:
      swift_bridgeObjectRelease(v148);
      goto LABEL_113;
    }

    __chkstk_darwin(v150);
    v193[-2] = sub_10001FE98;
    v193[-1] = &v193[-4];
    if ((v148 & 0x2000000000000000LL) == 0)
    {
      if ((v149 & 0x1000000000000000LL) != 0)
      {
        uint64_t v151 = (v148 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v152 = v149 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v151 = _StringObject.sharedUTF8.getter(v149, v148);
        uint64_t v152 = v188;
      }

      swift_bridgeObjectRetain(v148);
      uint64_t v153 = v152;
      uint64_t v154 = v205;
      char v155 = sub_100068904(v151, v153, (void (*)(uint64_t *__return_ptr))sub_100021E5C);
      uint64_t v205 = v154;
      BOOL v218 = v155 & 1;
      goto LABEL_88;
    }

    unint64_t v221 = v149;
    uint64_t v222 = v148 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(v148);
    uint64_t v163 = v205;
    sub_100067DD8(&v221, &v218);
    uint64_t v205 = v163;
    swift_bridgeObjectRelease(v148);
LABEL_113:
    uint64_t v164 = v216;
    uint64_t v165 = v217;
    uint64_t v166 = v211;
    uint64_t v40 = v206;
    if (!v218)
    {
      swift_bridgeObjectRelease(v211);

      (*(void (**)(char *, void *))(v40 + 8))(v210, v212);
      (*(void (**)(char *, uint64_t))(v165 + 8))(v41, v164);
      goto LABEL_8;
    }

    if (v211[2] < 2) {
      goto LABEL_148;
    }
    double v4 = *(double *)&v219;
    unint64_t v168 = v211[6];
    unint64_t v167 = v211[7];
    swift_bridgeObjectRetain(v167);
    uint64_t v169 = ((uint64_t (*)(unint64_t *))swift_bridgeObjectRelease)(v166);
    uint64_t v219 = 0LL;
    uint64_t v170 = __chkstk_darwin(v169);
    v193[-2] = &v219;
    uint64_t v211 = v171;
    if ((v167 & 0x1000000000000000LL) != 0 || !(v167 & 0x2000000000000000LL | v168 & 0x1000000000000000LL))
    {
      uint64_t v187 = v205;
      _StringGuts._slowWithCString<A>(_:)(&v218, sub_100021E70, &v193[-4]);
      uint64_t v205 = v187;
    }

    else
    {
      __chkstk_darwin(v170);
      v193[-2] = sub_100021E70;
      v193[-1] = v172;
      if ((v167 & 0x2000000000000000LL) != 0)
      {
        unint64_t v221 = v168;
        uint64_t v222 = v167 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v177 = v205;
        sub_100067DD8(&v221, &v218);
        uint64_t v205 = v177;
        swift_bridgeObjectRelease(v167);
        goto LABEL_128;
      }

      if ((v168 & 0x1000000000000000LL) != 0)
      {
        uint64_t v173 = (v167 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v174 = v168 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v173 = _StringObject.sharedUTF8.getter(v168, v167);
      }

      uint64_t v175 = v205;
      char v176 = sub_100068904(v173, v174, (void (*)(uint64_t *__return_ptr))sub_10001FEB0);
      uint64_t v205 = v175;
      BOOL v218 = v176 & 1;
    }

    swift_bridgeObjectRelease(v167);
LABEL_128:
    uint64_t v178 = v212;
    uint64_t v40 = v206;
    uint64_t v39 = v216;
    if (v218)
    {
      swift_bridgeObjectRelease(v215);
      LocationCoordinate2D.init(latitude:longitude:)(v4, *(double *)&v219);

      (*(void (**)(char *, void *))(v40 + 8))(v210, v178);
      return (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v41, v39);
    }

    (*(void (**)(char *, void *))(v40 + 8))(v210, v178);
    (*(void (**)(char *, uint64_t))(v217 + 8))(v41, v39);
LABEL_8:
    uint64_t v39 = v213;
    ++v43;
    uint64_t v38 = v215;
    if (v46 == v213) {
      goto LABEL_138;
    }
  }

  __break(1u);
LABEL_140:
  swift_bridgeObjectRelease(v215);
  LocationCoordinate2D.init(latitude:longitude:)(v4, *(double *)&v219);

  ((void (*)(char *, void *))v40)(v210, v45);
  return (*(uint64_t (**)(char *, uint64_t))(v217 + 8))(v41, v39);
}

      uint64_t v92 = 0LL;
LABEL_50:
      uint64_t v94 = 1;
      goto LABEL_53;
    }

    if (v87)
    {
      if (v87 != 1)
      {
        uint64_t v95 = BYTE1(v77) - 48;
        if ((BYTE1(v77) - 48) <= 9u)
        {
          uint64_t v92 = 0LL;
          uint64_t v96 = v95 == 0LL;
          uint64_t v97 = -(uint64_t)v95;
          if (!v96) {
            goto LABEL_50;
          }
          if (v87 == 2)
          {
            uint64_t v94 = 0;
            uint64_t v92 = v97;
LABEL_53:
            swift_bridgeObjectRetain(v76);
            swift_bridgeObjectRetain(v68);
            swift_bridgeObjectRetain(v172);
            swift_bridgeObjectRetain(v82);
            swift_bridgeObjectRetain(v84);
            swift_bridgeObjectRetain(v86);
LABEL_54:
            swift_bridgeObjectRelease(v78);
            uint64_t v153 = 0LL;
            unint64_t v149 = v94 & 1;
            if ((v94 & 1) != 0) {
              uint64_t v101 = 0LL;
            }
            else {
              uint64_t v101 = v92;
            }
            uint64_t v152 = v101;
            goto LABEL_58;
          }

          uint64_t v131 = BYTE2(v77) - 48;
          if ((BYTE2(v77) - 48) <= 9u && is_mul_ok(v97, 0xAuLL))
          {
            uint64_t v132 = 10 * v97;
            uint64_t v92 = v132 - v131;
            if (v132 >= v131)
            {
              uint64_t v133 = v87 - 3;
              if (v133)
              {
                unint64_t v134 = (unsigned __int8 *)v176 + 3;
                while (1)
                {
                  uint64_t v135 = *v134 - 48;
                  if (v135 > 9) {
                    goto LABEL_49;
                  }
                  if (!is_mul_ok(v92, 0xAuLL)) {
                    goto LABEL_49;
                  }
                  uint64_t v96 = 10 * v92 >= v135;
                  uint64_t v92 = 10 * v92 - v135;
                  if (!v96) {
                    goto LABEL_49;
                  }
                  uint64_t v94 = 0;
                  ++v134;
                  if (!--v133) {
                    goto LABEL_53;
                  }
                }
              }

  sub_100012B98(v217[10], v217[11]);
  if ((v26 & 0x2000) == 0)
  {
LABEL_11:
    if ((v26 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }

uint64_t sub_100021874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000202E8(a1, a2, a3);
}

uint64_t sub_100021888()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___CNContactVCardSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v17 = 0LL;
  id v2 = [v0 contactsWithData:isa error:&v17];

  id v3 = v17;
  if (!v2)
  {
    uint64_t v5 = (uint64_t)v17;
    _convertNSErrorToError(_:)(v3);

LABEL_14:
    swift_willThrow(v11);
    return v5;
  }

  uint64_t v4 = sub_100018290(0LL, &qword_1000B0248, &OBJC_CLASS___CNContact_ptr);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v4);
  id v6 = v3;

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v5);
    if (v13) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }

  if (!*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_13:
    swift_bridgeObjectRelease(v5);
    unint64_t v14 = sub_100021A84();
    uint64_t v11 = swift_allocError(&type metadata for MapPreviewUnpacker.MapPreviewUnpackerError, v14, 0LL, 0LL);
    *uint64_t v15 = 0;
    goto LABEL_14;
  }

LABEL_4:
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
  }

  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      __break(1u);
    }
    id v7 = *(id *)(v5 + 32);
  }

  uint64_t v8 = v7;
  swift_bridgeObjectRelease(v5);
  id v9 = [v8 urlAddresses];
  uint64_t v10 = sub_10000E624(&qword_1000B0250);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  return v5;
}

  sub_100010D60((void *)v213);
  uint64_t v27 = (v26 >> 24) & 1;
  uint64_t v28 = (v26 >> 25) & 1;
  uint64_t v29 = (v26 >> 26) & 1;
  uint64_t v19 = (v26 >> 27) & 1;
  uint64_t v30 = (int *)((v26 >> 28) & 1);
  uint64_t v31 = (v26 >> 29) & 1;
  uint64_t v199 = (v26 >> 30) & 1;
  uint64_t v200 = (v26 >> 31) & 1;
  uint64_t v201 = HIDWORD(v26) & 1;
  uint64_t v202 = (v26 >> 33) & 1;
  uint64_t v203 = (v26 >> 34) & 1;
  uint64_t v204 = (v26 >> 36) & 1;
  uint64_t v32 = (v26 >> 37) & 1;
  uint64_t v205 = (v26 >> 38) & 1;
  uint64_t v206 = (v26 >> 39) & 1;
  uint64_t v207 = (v26 >> 40) & 1;
  uint64_t v209 = (v26 >> 41) & 1;
  uint64_t v210 = (v26 >> 42) & 1;
  uint64_t v211 = (v26 >> 43) & 1;
  uint64_t v212 = (v26 >> 44) & 1;
  uint64_t v213 = (v26 >> 46) & 1;
  if ((v26 & 1) != 0)
  {
    swift_bridgeObjectRelease(*v217);
    if ((v26 & 2) == 0)
    {
LABEL_6:
      if ((v26 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_46;
    }
  }

  else if ((v26 & 2) == 0)
  {
    goto LABEL_6;
  }

  swift_bridgeObjectRelease(v217[2]);
  if ((v26 & 4) == 0)
  {
LABEL_7:
    if ((v26 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }

unint64_t sub_100021A84()
{
  unint64_t result = qword_1000B0238;
  if (!qword_1000B0238)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E260, &type metadata for MapPreviewUnpacker.MapPreviewUnpackerError);
    atomic_store(result, (unint64_t *)&qword_1000B0238);
  }

  return result;
}

char *sub_100021AC8(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v26 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v21 - v9;
  unint64_t result = (char *)&_swiftEmptyArrayStorage;
  uint64_t v27 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v21 = v2;
    uint64_t v22 = v6;
    uint64_t v13 = *(void *)(v6 + 72);
    unint64_t v23 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v24 = a2;
    unint64_t v14 = a1 + v23;
    uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v25(v10, a1 + v23, v5);
    while (1)
    {
      uint64_t v15 = (void *)URLQueryItem._bridgeToObjectiveC()();
      unsigned int v16 = [a2 evaluateWithObject:v15];

      if (v16)
      {
        id v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v17(v26, v10, v5);
        uint64_t v18 = v27;
        if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
        {
          sub_10005DC34(0, *((void *)v18 + 2) + 1LL, 1);
          uint64_t v18 = v27;
        }

        unint64_t v20 = *((void *)v18 + 2);
        unint64_t v19 = *((void *)v18 + 3);
        if (v20 >= v19 >> 1)
        {
          sub_10005DC34(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v27;
        }

        *((void *)v18 + 2) = v20 + 1;
        v17(&v18[v23 + v20 * v13], v26, v5);
        uint64_t v27 = v18;
        a2 = v24;
        uint64_t v6 = v22;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      }

      v14 += v13;
      if (!--v12) {
        break;
      }
      v25(v10, v14, v5);
    }

    return v27;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for MapPreviewUnpacker.MapPreviewUnpackerError( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for MapPreviewUnpacker.MapPreviewUnpackerError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100021D88 + 4 * byte_10008E185[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100021DBC + 4 * byte_10008E180[v4]))();
}

uint64_t sub_100021DBC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100021DC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100021DCCLL);
  }
  return result;
}

uint64_t sub_100021DD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100021DE0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100021DE4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100021DEC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100021DF8(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MapPreviewUnpacker.MapPreviewUnpackerError()
{
  return &type metadata for MapPreviewUnpacker.MapPreviewUnpackerError;
}

unint64_t sub_100021E18()
{
  unint64_t result = qword_1000B0258;
  if (!qword_1000B0258)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E238, &type metadata for MapPreviewUnpacker.MapPreviewUnpackerError);
    atomic_store(result, (unint64_t *)&qword_1000B0258);
  }

  return result;
}

void *sub_100021E5C@<X0>(_BYTE *a1@<X8>)
{
  return sub_10001FEB0(a1);
}

_BYTE *sub_100021E70@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10001FE98(a1, a2);
}

ValueMetadata *type metadata accessor for VideoPreviewUnpacker()
{
  return &type metadata for VideoPreviewUnpacker;
}

uint64_t sub_100021E94()
{
  return sub_10000E9D8( &qword_1000B0260,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
}

uint64_t sub_100021EC0@<X0>(uint8_t *a1@<X0>, uint8_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v46 = a3;
  uint64_t v45 = sub_10000E624(&qword_1000B0268);
  uint64_t v42 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  id v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Path(0LL);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v40 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for File(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v16 = static os_log_type_t.info.getter(v13);
  sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
  id v17 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
  uint64_t v18 = *(void (**)(char *, uint8_t *, uint64_t))(v12 + 16);
  uint64_t v41 = a1;
  v18(v15, a1, v11);
  os_log_type_t v19 = v16;
  if (os_log_type_enabled(v17, v16))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = v21;
    uint64_t v48 = v21;
    uint64_t v36 = v20;
    *(_DWORD *)unint64_t v20 = 136446210;
    uint64_t v35 = v20 + 4;
    uint64_t v22 = File.path.getter(v21);
    Path.fileURL.getter(v22);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v39);
    uint64_t v23 = sub_10000E9D8( &qword_1000B0278,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v8, v23);
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v8);
    uint64_t v47 = sub_100014C84(v24, v26, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v35, v20 + 12);
    __n128 v27 = swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v15, v11, v27);
    uint64_t v28 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v19,  "BlastDoor processing thumbnail for video: %{public}s",  v36,  0xCu);
    uint64_t v29 = v37;
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  __chkstk_darwin(v30);
  uint64_t v31 = v43;
  *(&v35 - 2) = v41;
  *(&v35 - 1) = v31;
  uint64_t v32 = sub_10000E624(&qword_1000B0270);
  uint64_t v33 = v44;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))( v44,  enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:),  v45);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(v32, v33, sub_100029B18, &v35 - 4, v32);
}

uint64_t sub_10002224C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v31 = a2;
  uint64_t v35 = sub_10000E624(&qword_1000B0280);
  uint64_t v32 = *(void *)(v35 - 8);
  uint64_t v3 = *(void *)(v32 + 64);
  __chkstk_darwin(v35);
  uint64_t v30 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for VideoPreview.Constraints(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for File(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000E624(&qword_1000B0288);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v31, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v33,  v4);
  uint64_t v15 = v32;
  os_log_type_t v16 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, v34, v35);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v20 = (v9 + v19 + v18) & ~v19;
  uint64_t v21 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v22 = (v6 + v21 + v20) & ~v21;
  uint64_t v23 = swift_allocObject(&unk_1000A59F0, v22 + v3, v17 | v19 | v21 | 7);
  *(void *)(v23 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v23 + v18, v10, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v23 + v20, v29, v28);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23 + v22, v16, v35);
  uint64_t v24 = sub_100043518((uint64_t)v13, (uint64_t)&unk_1000B0298, v23);
  return swift_release(v24);
}

uint64_t sub_100022490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  uint64_t v7 = sub_10000E624(&qword_1000B0280);
  v6[8] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v6[9] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[10] = v9;
  v6[11] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for VideoPreview.Constraints(0LL);
  v6[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[13] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v6[14] = v12;
  v6[15] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Path(0LL);
  v6[16] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[17] = v14;
  v6[18] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  v6[19] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v6[20] = v16;
  v6[21] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for File(0LL);
  v6[22] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v6[23] = v18;
  uint64_t v19 = *(void *)(v18 + 64);
  v6[24] = v19;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v6[25] = swift_task_alloc(v20);
  v6[26] = swift_task_alloc(v20);
  return swift_task_switch(sub_1000225B4, 0LL, 0LL);
}

uint64_t sub_1000225B4(uint64_t a1)
{
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[26];
  uint64_t v4 = v1[22];
  uint64_t v5 = v1[23];
  os_log_type_t v6 = static os_log_type_t.info.getter(a1);
  v1[27] = sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
  uint64_t v54 = *(void (**)(void))(v5 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v3, v2, v4);
  os_log_type_t v8 = v6;
  if (os_log_type_enabled(v7, v6))
  {
    uint64_t v9 = v1[21];
    uint64_t v50 = v1[23];
    uint64_t v52 = v1[22];
    uint64_t v10 = v1[19];
    uint64_t v44 = v1[26];
    uint64_t v46 = v1[20];
    uint64_t v11 = v1[18];
    uint64_t v40 = v1[17];
    uint64_t v41 = v1[16];
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v55 = v48;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v13 = File.path.getter(v48);
    Path.fileURL.getter(v13);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v11, v41);
    uint64_t v14 = sub_10000E9D8( &qword_1000B0278,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v10, v14);
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v9, v10);
    v1[4] = sub_100014C84(v15, v17, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v12 + 4, v12 + 12);
    __n128 v18 = swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t, __n128))(v50 + 8))(v44, v52, v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Task running for video: %{public}s)", v12, 0xCu);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    uint64_t v19 = v1[26];
    uint64_t v20 = v1[22];
    uint64_t v21 = v1[23];

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  }

  uint64_t v22 = v1[23];
  uint64_t v47 = v1[22];
  uint64_t v49 = v1[25];
  uint64_t v23 = v1[15];
  uint64_t v43 = v1[24];
  uint64_t v45 = v1[14];
  uint64_t v25 = v1[12];
  uint64_t v24 = v1[13];
  uint64_t v26 = v1[11];
  uint64_t v42 = v1[10];
  uint64_t v27 = v1[8];
  uint64_t v28 = v1[9];
  uint64_t v51 = v27;
  uint64_t v53 = v26;
  uint64_t v30 = v1[6];
  uint64_t v29 = v1[7];
  v54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v30, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v26, v29, v27);
  uint64_t v31 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v32 = (v31 + 16) & ~v31;
  uint64_t v33 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v34 = (v43 + v33 + v32) & ~v33;
  uint64_t v35 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v36 = (v45 + v35 + v34) & ~v35;
  uint64_t v37 = swift_allocObject(&unk_1000A5A18, v36 + v42, v31 | v33 | v35 | 7);
  v1[28] = v37;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v37 + v32, v49, v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v37 + v34, v23, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v37 + v36, v53, v51);
  uint64_t v38 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to File.withResource<A>(_:) + 1));
  v1[29] = v38;
  *uint64_t v38 = v1;
  v38[1] = sub_100022928;
  return File.withResource<A>(_:)();
}

uint64_t sub_100022928()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 232);
  *(void *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100022A0C;
  }

  else
  {
    swift_release(*(void *)(v2 + 224));
    uint64_t v4 = sub_100022994;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100022994()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100022A0C()
{
  uint64_t v1 = swift_release(*(void *)(v0 + 224));
  os_log_type_t v2 = static os_log_type_t.error.getter(v1);
  uint64_t v3 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
  os_log_type_t v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    uint64_t v5 = *(void *)(v0 + 240);
    swift_errorRetain(v5);
    swift_errorRetain(v5);
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Caught error: %@", v6, 0xCu);
    uint64_t v9 = sub_10000E624(&qword_1000AFFE8);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 64);

  *(void *)(v0 + 16) = v10;
  AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 16, v11);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 168);
  uint64_t v14 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 120);
  uint64_t v16 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100022BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[134] = a4;
  v4[133] = a3;
  v4[132] = a2;
  uint64_t v5 = sub_10000E624(&qword_1000B0270);
  v4[135] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000E624(&qword_1000B02B0);
  v4[136] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[137] = v7;
  v4[138] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for VideoPreview(0LL);
  v4[139] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[140] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[141] = swift_task_alloc(v10);
  v4[142] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for VideoPreview.AudioFormat(0LL);
  v4[143] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[144] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[145] = swift_task_alloc(v13);
  v4[146] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for VideoPreview.VideoFormat(0LL);
  v4[147] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[148] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[149] = swift_task_alloc(v16);
  v4[150] = swift_task_alloc(v16);
  uint64_t v17 = sub_10000E624(&qword_1000AFFE0);
  v4[151] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for Image(0LL);
  v4[152] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v4[153] = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[154] = swift_task_alloc(v20);
  v4[155] = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for AVAssetTrack.Info(0LL);
  v4[156] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v4[157] = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[158] = swift_task_alloc(v23);
  v4[159] = swift_task_alloc(v23);
  uint64_t v24 = type metadata accessor for VideoPreview.MultiFrameConstraints(0LL);
  v4[160] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v4[161] = v25;
  unint64_t v26 = (*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[162] = swift_task_alloc(v26);
  v4[163] = swift_task_alloc(v26);
  v4[164] = swift_task_alloc(v26);
  v4[165] = swift_task_alloc(v26);
  v4[166] = swift_task_alloc(v26);
  uint64_t v27 = type metadata accessor for VideoPreview.SingleFrameConstraints(0LL);
  v4[167] = v27;
  uint64_t v28 = *(void *)(v27 - 8);
  v4[168] = v28;
  v4[169] = swift_task_alloc((*(void *)(v28 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for VideoPreview.FrameConstraints(0LL);
  v4[170] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v4[171] = v30;
  unint64_t v31 = (*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[172] = swift_task_alloc(v31);
  v4[173] = swift_task_alloc(v31);
  v4[174] = swift_task_alloc(v31);
  v4[175] = swift_task_alloc(v31);
  v4[176] = swift_task_alloc(v31);
  uint64_t v32 = type metadata accessor for URL(0LL);
  v4[177] = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  v4[178] = v33;
  v4[179] = swift_task_alloc((*(void *)(v33 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for Path(0LL);
  v4[180] = v34;
  uint64_t v35 = *(void *)(v34 - 8);
  v4[181] = v35;
  v4[182] = swift_task_alloc((*(void *)(v35 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100022EEC, 0LL, 0LL);
}

uint64_t sub_100022EEC(uint64_t a1)
{
  uint64_t v2 = v1[182];
  uint64_t v3 = v1[181];
  uint64_t v4 = v1[180];
  uint64_t v5 = v1[179];
  uint64_t v6 = v1[178];
  uint64_t v7 = v1[177];
  uint64_t v8 = File.path.getter(a1);
  Path.fileURL.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v9 = sub_10000E624(&qword_1000B02B8);
  v1[183] = v9;
  uint64_t inited = swift_initStackObject(v9, v1 + 32);
  *(_OWORD *)(inited + 16) = xmmword_10008D7D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AVAssetRequiresInProcessOperationKey);
  *(void *)(inited + 40) = v11;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 4_Block_object_dispose(va, 8) = 1;
  unint64_t v12 = sub_100050BDC(inited);
  id v13 = objc_allocWithZone(&OBJC_CLASS___AVURLAsset);
  URL._bridgeToObjectiveC()(v14);
  unint64_t v16 = v15;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v18 = objc_msgSend(v13, "initWithURL:options:", v16, isa, swift_bridgeObjectRelease(v12).n128_f64[0]);
  v1[184] = v18;

  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  os_log_type_t v20 = static os_log_type_t.info.getter(v19);
  v1[185] = sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v21 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
  if (os_log_type_enabled(v21, v20))
  {
    id v22 = v18;
    unint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v30 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v23 = 138543362;
    v1[129] = v22;
    id v31 = v18;
    id v24 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 129, v1 + 130, v23 + 4, v23 + 12);
    *uint64_t v30 = v22;

    id v18 = v31;
    _os_log_impl((void *)&_mh_execute_header, v21, v20, "Created asset: %{public}@", v23, 0xCu);
    uint64_t v25 = sub_10000E624(&qword_1000AFFE8);
    swift_arrayDestroy(v30, 1LL, v25);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v27 = static os_log_type_t.info.getter(v26);
  uint64_t v28 = (void *)static OS_os_log.videoPreviewUnpacker.getter();
  os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v28,  "About to query for tracks",  25LL,  2LL,  &_swiftEmptyArrayStorage);

  v1[7] = v1 + 126;
  v1[2] = v1;
  v1[3] = sub_100023270;
  v1[82] = swift_continuation_init(v1 + 2, 1LL);
  v1[78] = _NSConcreteStackBlock;
  v1[79] = 0x40000000LL;
  v1[80] = sub_100029A6C;
  v1[81] = &unk_1000A5A30;
  [v18 loadTracksWithMediaType:AVMediaTypeVideo completionHandler:v1 + 78];
  return swift_continuation_await(v1 + 2);
}

uint64_t sub_100023270()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 1488LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100027E50;
  }
  else {
    uint64_t v2 = sub_100023314;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_100023314(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 1008);
  uint64_t v3 = static os_log_type_t.info.getter(a1);
  uint64_t v4 = (void *)static OS_os_log.videoPreviewUnpacker.getter();
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Queried for tracks", 18LL, 2LL, &_swiftEmptyArrayStorage);

  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      uint64_t v11 = v2;
    }
    else {
      uint64_t v11 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v2);
    *(void *)(v1 + 1496) = v6;
    if (v5)
    {
LABEL_3:
      unint64_t v7 = v5 - 1;
      if (__OFSUB__(v5, 1LL))
      {
        __break(1u);
      }

      else if ((v2 & 0xC000000000000001LL) == 0)
      {
        if ((v7 & 0x8000000000000000LL) != 0)
        {
          __break(1u);
        }

        else if (v7 < *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          id v8 = *(id *)(v2 + 8 * v7 + 32);
LABEL_8:
          uint64_t v9 = v8;
          swift_bridgeObjectRelease(v2);
          goto LABEL_14;
        }

        __break(1u);
      }

      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v2);
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v6 = v5;
    *(void *)(v1 + 1496) = v5;
    if (v5) {
      goto LABEL_3;
    }
  }

  swift_bridgeObjectRelease(v2);
  uint64_t v9 = 0LL;
LABEL_14:
  *(void *)(v1 + 1504) = v9;
  os_log_type_t v12 = static os_log_type_t.info.getter(v10);
  id v13 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v14 = 134349056;
    *(void *)(v1 + 104_Block_object_dispose(va, 8) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 1048, v1 + 1056, v14 + 4, v14 + 12);
    _os_log_impl((void *)&_mh_execute_header, v13, v12, "Tracks found: %{public}ld)", v14, 0xCu);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = *(void **)(v1 + 1472);
  if (v9)
  {
    uint64_t v16 = *(void *)(v1 + 1408);
    uint64_t v17 = *(void *)(v1 + 1368);
    uint64_t v18 = *(void *)(v1 + 1360);
    uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___PFVideoMetadata);
    id v20 = v9;
    id v21 = [v19 videoAssetIsSpatial:v15];
    *(_BYTE *)(v1 + 1804) = (_BYTE)v21;
    VideoPreview.Constraints.frameConstraints.getter(v21);
    id v22 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 88);
    *(void *)(v1 + 1512) = v22;
    int v23 = v22(v16, v18);
    *(_DWORD *)(v1 + 1780) = v23;
    int v24 = enum case for VideoPreview.FrameConstraints.singleFrame(_:);
    *(_DWORD *)(v1 + 1784) = enum case for VideoPreview.FrameConstraints.singleFrame(_:);
    if (v23 == v24)
    {
      uint64_t v25 = *(void *)(v1 + 1408);
      uint64_t v26 = *(void *)(v1 + 1360);
      uint64_t v27 = *(void *)(v1 + 1352);
      uint64_t v28 = *(void *)(v1 + 1344);
      uint64_t v29 = *(void *)(v1 + 1336);
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 1368) + 96LL);
      *(void *)(v1 + 1520) = v30;
      v30(v25, v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v25, v29);
      sub_10000E624(&qword_1000B02E8);
      uint64_t v31 = static AVPartialAsyncProperty<A>.naturalSize.getter();
      *(void *)(v1 + 152_Block_object_dispose(va, 8) = v31;
      uint64_t v32 = (void *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
      *(void *)(v1 + 1536) = v32;
      *uint64_t v32 = v1;
      v32[1] = sub_100023B80;
      return AVAsynchronousKeyValueLoading.load<A>(_:)(v1 + 936, v31);
    }

    if (v23 == enum case for VideoPreview.FrameConstraints.multiFrame(_:))
    {
      uint64_t v37 = *(void *)(v1 + 1408);
      uint64_t v38 = *(void *)(v1 + 1328);
      uint64_t v39 = *(void *)(v1 + 1320);
      uint64_t v40 = *(void *)(v1 + 1288);
      uint64_t v41 = *(void *)(v1 + 1280);
      uint64_t v42 = *(void (**)(uint64_t, void))(*(void *)(v1 + 1368) + 96LL);
      v42(v37, *(void *)(v1 + 1360));
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v38, v37, v41);
      uint64_t v44 = VideoPreview.MultiFrameConstraints.targetPixelWidth.getter(v43);
      uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v38, v41);
      uint64_t v46 = *(void *)(v1 + 1320);
      uint64_t v47 = *(void *)(v1 + 1288);
      uint64_t v48 = *(void *)(v1 + 1280);
      if (v44 < 1)
      {
        uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8);
        v50(*(void *)(v1 + 1320), *(void *)(v1 + 1280));
      }

      else
      {
        uint64_t v49 = VideoPreview.MultiFrameConstraints.targetPixelHeight.getter(v45);
        uint64_t v50 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 8);
        uint64_t v51 = v50(v46, v48);
        if (v49 > 0)
        {
          uint64_t v52 = *(void *)(v1 + 1328);
          uint64_t v53 = *(void *)(v1 + 1280);
          uint64_t v54 = VideoPreview.MultiFrameConstraints.targetPixelWidth.getter(v51);
          double v55 = (double)v54;
          double v56 = (double)VideoPreview.MultiFrameConstraints.targetPixelHeight.getter(v54);
          uint64_t v58 = VideoPreview.MultiFrameConstraints.frameLimit.getter(v57);
          v50(v52, v53);
          *(double *)(v1 + 1616) = v55;
          *(double *)(v1 + 160_Block_object_dispose(va, 8) = v56;
          *(void *)(v1 + 1600) = v58;
          *(void *)(v1 + 1592) = v42;
          uint64_t v59 = (void *)swift_task_alloc(async function pointer to AVAssetTrack.info.getter[1]);
          *(void *)(v1 + 1624) = v59;
          void *v59 = v1;
          v59[1] = sub_100024054;
          return AVAssetTrack.info.getter(*(void *)(v1 + 1272));
        }
      }

      uint64_t v67 = *(void **)(v1 + 1472);
      uint64_t v68 = *(void *)(v1 + 1328);
      uint64_t v69 = *(void *)(v1 + 1280);
      uint64_t v70 = type metadata accessor for Explosion(0LL);
      uint64_t v71 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v70, v71, 0LL, 0LL);
      uint64_t v72 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0xD00000000000001CLL,  0x800000010008AEF0LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
      swift_willThrow(v72);

      v50(v68, v69);
    }

    else
    {
      uint64_t v60 = *(void **)(v1 + 1472);
      uint64_t v61 = *(void *)(v1 + 1408);
      uint64_t v62 = *(void *)(v1 + 1368);
      uint64_t v63 = *(void *)(v1 + 1360);
      uint64_t v64 = type metadata accessor for Explosion(0LL);
      uint64_t v65 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v64, v65, 0LL, 0LL);
      uint64_t v66 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0xD000000000000016LL,  0x800000010008AED0LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
      swift_willThrow(v66);

      (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
    }
  }

  else
  {
    uint64_t v34 = type metadata accessor for Explosion(0LL);
    uint64_t v35 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v34, v35, 0LL, 0LL);
    uint64_t v36 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x546F656469566F4ELL,  0xED0000736B636172LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
    swift_willThrow(v36);
  }

  uint64_t v73 = *(void *)(v1 + 1432);
  uint64_t v74 = *(void *)(v1 + 1408);
  uint64_t v75 = *(void *)(v1 + 1400);
  uint64_t v76 = *(void *)(v1 + 1392);
  uint64_t v77 = *(void *)(v1 + 1384);
  uint64_t v78 = *(void *)(v1 + 1376);
  uint64_t v79 = *(void *)(v1 + 1352);
  uint64_t v80 = *(void *)(v1 + 1328);
  uint64_t v81 = *(void *)(v1 + 1320);
  uint64_t v82 = *(void *)(v1 + 1312);
  uint64_t v83 = *(void *)(v1 + 1304);
  uint64_t v84 = *(void *)(v1 + 1296);
  uint64_t v85 = *(void *)(v1 + 1272);
  uint64_t v86 = *(void *)(v1 + 1264);
  uint64_t v87 = *(void *)(v1 + 1240);
  uint64_t v88 = *(void *)(v1 + 1232);
  uint64_t v89 = *(void *)(v1 + 1208);
  uint64_t v90 = *(void *)(v1 + 1200);
  uint64_t v91 = *(void *)(v1 + 1192);
  uint64_t v92 = *(void *)(v1 + 1168);
  uint64_t v93 = *(void *)(v1 + 1160);
  uint64_t v94 = *(void *)(v1 + 1136);
  uint64_t v95 = *(void *)(v1 + 1128);
  uint64_t v96 = *(void *)(v1 + 1104);
  uint64_t v97 = *(void *)(v1 + 1080);
  swift_task_dealloc(*(void *)(v1 + 1456));
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100023B80()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1536);
  *(void *)(*v1 + 1544) = v0;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v2 + 1528));
  if (v0) {
    uint64_t v4 = sub_100028034;
  }
  else {
    uint64_t v4 = sub_100023C38;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100023C38()
{
  *(_OWORD *)(v0 + 1552) = *(_OWORD *)(v0 + 936);
  sub_10000E624(&qword_1000B02F0);
  uint64_t v1 = static AVPartialAsyncProperty<A>.preferredTransform.getter();
  *(void *)(v0 + 156_Block_object_dispose(va, 8) = v1;
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
  *(void *)(v0 + 1576) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100023CF0;
  return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 528, v1);
}

uint64_t sub_100023CF0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1576);
  *(void *)(*v1 + 1584) = v0;
  swift_task_dealloc(v3);
  swift_release(*(void *)(v2 + 1568));
  if (v0) {
    uint64_t v4 = sub_100028238;
  }
  else {
    uint64_t v4 = sub_100023DA8;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100023DA8()
{
  uint64_t v1 = *(void *)(v0 + 1560);
  uint64_t v2 = *(void *)(v0 + 1552);
  __int128 v3 = *(_OWORD *)(v0 + 544);
  __int128 v4 = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 432) = *(_OWORD *)(v0 + 528);
  *(_OWORD *)(v0 + 44_Block_object_dispose(va, 8) = v3;
  *(_OWORD *)(v0 + 464) = v4;
  uint64_t v5 = 0LL;
  *(void *)&__int128 v3 = 0LL;
  CGRect v34 = CGRectApplyAffineTransform(*(CGRect *)(&v1 - 3), (CGAffineTransform *)(v0 + 432));
  double width = v34.size.width;
  double height = v34.size.height;
  uint64_t v8 = VideoPreview.SingleFrameConstraints.maxPixelDimension.getter((__n128)v34.origin, *(__n128 *)&v34.origin.y);
  double v9 = (double)v8;
  double v10 = fmin(width / height, 1.77777778);
  if (width / height < 0.75) {
    double v11 = 0.75;
  }
  else {
    double v11 = v10;
  }
  double v12 = ceil(v9 / v11);
  if (height == 0.0 || width == 0.0)
  {
    os_log_type_t v14 = static os_log_type_t.info.getter(v8);
    uint64_t v15 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
    os_log_type_t v16 = v14;
    BOOL v17 = os_log_type_enabled(v15, v14);
    uint64_t v18 = *(void *)(v0 + 1352);
    uint64_t v19 = *(void *)(v0 + 1344);
    uint64_t v20 = *(void *)(v0 + 1336);
    if (v17)
    {
      uint64_t v32 = *(void *)(v0 + 1352);
      id v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v22;
      *(_DWORD *)id v21 = 136315138;
      *(double *)(v0 + 952) = v9;
      *(double *)(v0 + 960) = v12;
      type metadata accessor for CGSize(0LL);
      uint64_t v24 = String.init<A>(describing:)(v0 + 952, v23);
      unint64_t v26 = v25;
      *(void *)(v0 + 1040) = sub_100014C84(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1040, v0 + 1048, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease(v26);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "video size is zero, falling back to maxPtSize: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      uint64_t v28 = v32;
    }

    else
    {

      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      uint64_t v28 = v18;
    }

    v27(v28, v20);
  }

  else
  {
    double v13 = v9 / width;
    if (v9 / width <= v12 / height) {
      double v13 = v12 / height;
    }
    double v9 = ceil(width * v13);
    double v12 = ceil(height * v13);
    (*(void (**)(void, void))(*(void *)(v0 + 1344) + 8LL))( *(void *)(v0 + 1352),  *(void *)(v0 + 1336));
  }

  uint64_t v29 = *(void *)(v0 + 1520);
  *(double *)(v0 + 1616) = v9;
  *(double *)(v0 + 160_Block_object_dispose(va, 8) = v12;
  *(void *)(v0 + 1600) = 0LL;
  *(void *)(v0 + 1592) = v29;
  uint64_t v30 = (void *)swift_task_alloc(async function pointer to AVAssetTrack.info.getter[1]);
  *(void *)(v0 + 1624) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_100024054;
  return AVAssetTrack.info.getter(*(void *)(v0 + 1272));
}

uint64_t sub_100024054()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1624LL);
  *(void *)(*(void *)v1 + 1632LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    __int128 v3 = sub_10002843C;
  }
  else {
    __int128 v3 = sub_1000240FC;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000240FC(uint64_t a1)
{
  os_log_type_t v2 = static os_log_type_t.info.getter(a1);
  __int128 v3 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
  os_log_type_t v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    double v5 = *(double *)(v1 + 1616);
    double v6 = *(double *)(v1 + 1608);
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v19 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = Double.description.getter(v5);
    unint64_t v11 = v10;
    *(void *)(v1 + 992) = sub_100014C84(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 992, v1 + 1000, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v12 = Double.description.getter(v6);
    unint64_t v14 = v13;
    *(void *)(v1 + 1000) = sub_100014C84(v12, v13, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 1000, v1 + 1008, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "thumbnailFitPxSize: %s x %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v15 = async function pointer to AVAsset.isAutoLoop.getter[1];
  id v16 = *(id *)(v1 + 1472);
  BOOL v17 = (void *)swift_task_alloc(v15);
  *(void *)(v1 + 1640) = v17;
  void *v17 = v1;
  v17[1] = sub_1000242E4;
  return AVAsset.isAutoLoop.getter();
}

uint64_t sub_1000242E4(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 1640);
  *(_BYTE *)(v3 + 1805) = a1;
  *(void *)(v3 + 164_Block_object_dispose(va, 8) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {

    double v5 = sub_100028624;
  }

  else
  {
    double v5 = sub_1000243A8;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1000243A8()
{
  uint64_t v1 = *(void **)(v0 + 1472);

  id v2 = objc_allocWithZone(&OBJC_CLASS___AVAssetReader);
  *(void *)(v0 + 1024) = 0LL;
  id v3 = [v2 initWithAsset:v1 error:v0 + 1024];
  *(void *)(v0 + 1656) = v3;
  uint64_t v4 = *(void **)(v0 + 1024);
  if (!v3)
  {
    uint64_t v49 = *(void **)(v0 + 1504);
    uint64_t v50 = *(void **)(v0 + 1472);
    uint64_t v51 = *(void *)(v0 + 1272);
    uint64_t v52 = *(void *)(v0 + 1256);
    uint64_t v53 = *(void *)(v0 + 1248);
    id v54 = v4;
    _convertNSErrorToError(_:)(v4);

    swift_willThrow(v55);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);

    goto LABEL_62;
  }

  uint64_t v5 = *(void *)(v0 + 1616);
  double v6 = *(void **)(v0 + 1472);
  uint64_t v7 = *(void *)(v0 + 1464);
  id v8 = v4;

  uint64_t inited = swift_initStackObject(v7, v0 + 80);
  *(_OWORD *)(inited + 16) = xmmword_10008E2E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCVPixelBufferPixelFormatTypeKey);
  *(void *)(inited + 40) = v10;
  *(void *)(inited + 72) = sub_10000E624(&qword_1000B02C0);
  *(void *)(inited + 4_Block_object_dispose(va, 8) = &off_1000A34D0;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCVPixelBufferWidthKey);
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v11;
  if ((~v5 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_73;
  }

  double v12 = *(double *)(v0 + 1616);
  if (v12 <= -9.22337204e18)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  if (v12 >= 9.22337204e18)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  uint64_t v13 = *(void *)(v0 + 1608);
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 96) = (uint64_t)v12;
  *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCVPixelBufferHeightKey);
  *(void *)(inited + 136) = v14;
  if ((~v13 & 0x7FF0000000000000LL) == 0)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }

  double v15 = *(double *)(v0 + 1608);
  if (v15 <= -9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }

  if (v15 >= 9.22337204e18)
  {
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
  }

  id v16 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
  uint64_t v17 = *(void *)(v0 + 1400);
  uint64_t v18 = *(void *)(v0 + 1360);
  *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Int;
  *(void *)(inited + 144) = (uint64_t)v15;
  unint64_t v19 = sub_100050BDC(inited);
  VideoPreview.Constraints.frameConstraints.getter(v19);
  int v20 = v16(v17, v18);
  int v21 = enum case for VideoPreview.FrameConstraints.multiFrame(_:);
  *(_DWORD *)(v0 + 178_Block_object_dispose(va, 8) = enum case for VideoPreview.FrameConstraints.multiFrame(_:);
  uint64_t v22 = *(void *)(v0 + 1360);
  if (v20 == v21)
  {
    uint64_t v23 = *(void *)(v0 + 1400);
    uint64_t v24 = *(void *)(v0 + 1312);
    uint64_t v25 = *(void *)(v0 + 1288);
    uint64_t v26 = *(void *)(v0 + 1280);
    (*(void (**)(uint64_t, uint64_t))(v0 + 1592))(v23, v22);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v23, v26);
    if (VideoPreview.MultiFrameConstraints.framesPerSync.getter(v27) >= 1)
    {
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVVideoEmitSequencesAtSyncFramesOnly);
      uint64_t v31 = v30;
      uint64_t v32 = VideoPreview.MultiFrameConstraints.framesPerSync.getter(v29);
      *(void *)(v0 + 784) = &type metadata for Int;
      *(void *)(v0 + 760) = v32;
      sub_100018278((_OWORD *)(v0 + 760), (_OWORD *)(v0 + 728));
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v282[0] = v19;
      sub_10002A500((_OWORD *)(v0 + 728), v29, v31, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      __n128 v28 = swift_bridgeObjectRelease(v31);
    }

    *(void *)(v0 + 1664) = v19;
    uint64_t v34 = *(void *)(v0 + 1312);
    uint64_t v35 = *(void *)(v0 + 1304);
    uint64_t v36 = *(void *)(v0 + 1288);
    uint64_t v37 = *(void *)(v0 + 1280);
    uint64_t v38 = VideoPreview.MultiFrameConstraints.frameLimit.getter(v28);
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v34, v37);
    uint64_t v40 = *(void *)(v0 + 1304);
    uint64_t v41 = *(void *)(v0 + 1288);
    uint64_t v42 = *(void *)(v0 + 1280);
    if (v38 < 1)
    {
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v44(*(void *)(v0 + 1304), *(void *)(v0 + 1280));
    }

    else
    {
      char v43 = VideoPreview.MultiFrameConstraints.uniformSampling.getter(v39);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      *(void *)(v0 + 1672) = v44;
      v44(v40, v42);
      if ((v43 & 1) != 0)
      {
        sub_10000E624(&qword_1000B02E0);
        uint64_t v45 = static AVPartialAsyncProperty<A>.duration.getter();
        *(void *)(v0 + 1680) = v45;
        uint64_t v46 = (void *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
        *(void *)(v0 + 168_Block_object_dispose(va, 8) = v46;
        *uint64_t v46 = v0;
        v46[1] = sub_100025788;
        uint64_t v47 = v0 + 888;
        uint64_t v48 = v45;
        return AVAsynchronousKeyValueLoading.load<A>(_:)(v47, v48);
      }
    }

    v44(*(void *)(v0 + 1312), *(void *)(v0 + 1280));
  }

  else
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 1368) + 8LL))(*(void *)(v0 + 1400), v22);
  }

  *(void *)(v0 + 1704) = v19;
  int v56 = *(_DWORD *)(v0 + 1788);
  __n128 v57 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
  uint64_t v58 = *(void **)(v0 + 1504);
  uint64_t v59 = *(void *)(v0 + 1392);
  uint64_t v60 = *(void *)(v0 + 1360);
  id v61 = objc_allocWithZone(&OBJC_CLASS___AVAssetReaderTrackOutput);
  id v62 = v58;
  swift_bridgeObjectRetain(v19);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v64 = objc_msgSend(v61, "initWithTrack:outputSettings:", v62, isa, swift_bridgeObjectRelease(v19).n128_f64[0]);
  *(void *)(v0 + 1712) = v64;

  VideoPreview.Constraints.frameConstraints.getter(v65);
  int v66 = v57(v59, v60);
  uint64_t v67 = *(void *)(v0 + 1360);
  if (v66 == v56)
  {
    uint64_t v68 = *(void *)(v0 + 1392);
    uint64_t v69 = *(void *)(v0 + 1296);
    uint64_t v70 = *(void *)(v0 + 1288);
    uint64_t v71 = *(void *)(v0 + 1280);
    (*(void (**)(uint64_t, uint64_t))(v0 + 1592))(v68, v67);
    uint64_t v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v69, v68, v71);
    id v73 = [v64 setAppliesPreferredTrackTransform:VideoPreview.MultiFrameConstraints.appliesPreferredTrackTransform.getter(v72) & 1];
    (*(void (**)(void, void))(*(void *)(v0 + 1288) + 8LL))( *(void *)(v0 + 1296),  *(void *)(v0 + 1280));
  }

  else
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 1368) + 8LL))(*(void *)(v0 + 1392), v67);
    [v64 setAppliesPreferredTrackTransform:1];
  }

  uint64_t v74 = *(void **)(v0 + 1656);
  int v75 = *(_DWORD *)(v0 + 1784);
  uint64_t v76 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
  uint64_t v77 = *(void *)(v0 + 1384);
  uint64_t v78 = *(void *)(v0 + 1368);
  uint64_t v79 = *(void *)(v0 + 1360);
  [v64 setAlwaysCopiesSampleData:0];
  VideoPreview.Constraints.frameConstraints.getter([v74 addOutput:v64]);
  int v80 = v76(v77, v79);
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v77, v79);
  if (v80 == v75)
  {
    sub_10000E624(&qword_1000B02D0);
    uint64_t v81 = static AVPartialAsyncProperty<A>.nominalFrameRate.getter();
    *(void *)(v0 + 1720) = v81;
    uint64_t v82 = (void *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
    *(void *)(v0 + 172_Block_object_dispose(va, 8) = v82;
    void *v82 = v0;
    v82[1] = sub_100026A9C;
    uint64_t v47 = v0 + 1776;
    uint64_t v48 = v81;
    return AVAsynchronousKeyValueLoading.load<A>(_:)(v47, v48);
  }

  uint64_t v84 = *(void **)(v0 + 1712);
  [*(id *)(v0 + 1656) startReading];
  *(void *)(v0 + 1016) = 0LL;
  id v85 = [v84 copyNextSampleBuffer];
  if (v85)
  {
    id v86 = v85;
    uint64_t v87 = *(void *)(v0 + 1600);
    int v88 = *(_DWORD *)(v0 + 1784);
    int v89 = *(_DWORD *)(v0 + 1780);
    uint64_t v90 = (opaqueCMSampleBuffer *)v85;
    uint64_t v211 = (uint64_t *)(v0 + 1016);
    swift_beginAccess(v0 + 1016, v0 + 840, 1LL, 0LL);
    uint64_t v91 = *(void *)(v0 + 1016);
    if (v89 == v88 || v91 != v87)
    {
      uint64_t v210 = *(void *)(v0 + 1368);
      uint64_t v209 = *(void *)(v0 + 1256);
      uint64_t v271 = *(void *)(v0 + 1184);
      uint64_t v274 = *(void *)(v0 + 1224);
      uint64_t v268 = *(void *)(v0 + 1152);
      uint64_t v207 = *(void *)(v0 + 1096);
      uint64_t v208 = *(void *)(v0 + 1120);
      uint64_t v92 = v86;
      while (1)
      {
        if (!CMSampleBufferGetNumSamples(v90))
        {
          uint64_t v93 = *(void *)(v0 + 1600);
          int v94 = *(_DWORD *)(v0 + 1784);
          int v95 = *(_DWORD *)(v0 + 1780);

          uint64_t v91 = *(void *)(v0 + 1016);
          uint64_t v96 = v92;
          uint64_t v97 = v96;
          if (v95 != v94 && v91 == v93)
          {
            id v86 = v92;
            uint64_t v90 = v96;
            break;
          }

          if (!CMSampleBufferGetNumSamples(v96))
          {
            while (1)
            {
              uint64_t v99 = *(void *)(v0 + 1600);
              int v100 = *(_DWORD *)(v0 + 1784);
              int v101 = *(_DWORD *)(v0 + 1780);

              uint64_t v91 = *(void *)(v0 + 1016);
              uint64_t v102 = v97;
              uint64_t v90 = v102;
              if (v101 != v100 && v91 == v99) {
                break;
              }
              if (CMSampleBufferGetNumSamples(v102)) {
                goto LABEL_42;
              }
            }

            id v86 = v92;
            break;
          }

          uint64_t v90 = v97;
        }

LABEL_42:
        uint64_t v104 = CMSampleBufferRef.imageBuffer.getter();
        if (!v104)
        {
          uint64_t v181 = *(void **)(v0 + 1712);
          uint64_t v182 = *(void **)(v0 + 1656);
          uint64_t v183 = *(void **)(v0 + 1504);
          unint64_t v184 = v92;
          uint64_t v185 = *(void **)(v0 + 1472);
          uint64_t v186 = *(void *)(v0 + 1256);
          uint64_t v277 = *(void *)(v0 + 1248);
          uint64_t v281 = *(void *)(v0 + 1272);
          swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v187 = type metadata accessor for Explosion(0LL);
          uint64_t v188 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
          swift_allocError(v187, v188, 0LL, 0LL);
          uint64_t v189 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x426567616D496F4ELL,  0xED00007265666675LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
          swift_willThrow(v189);

          (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v281, v277);
          goto LABEL_62;
        }

        unint64_t v105 = (void *)v104;
        v264 = v92;
        v278 = v90;
        os_log_type_t v106 = static os_log_type_t.info.getter(v104);
        uint64_t v107 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
        if (os_log_type_enabled(v107, v106))
        {
          uint64_t v108 = swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v108 = 134217984;
          uint64_t v91 = *v211;
          *(void *)(v108 + 4) = *v211;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  v106,  "BlastDoor processing thumbnail %ld",  (uint8_t *)v108,  0xCu);
          swift_slowDealloc(v108, -1LL, -1LL);
        }

        unsigned int v238 = *(unsigned __int8 *)(v0 + 1805);
        int v259 = *(_DWORD *)(v0 + 1784);
        v254 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
        unsigned int v242 = *(unsigned __int8 *)(v0 + 1804);
        uint64_t v234 = *(void *)(v0 + 1496);
        uint64_t v246 = *(void *)(v0 + 1376);
        uint64_t v250 = *(void *)(v0 + 1360);
        uint64_t v109 = *(void *)(v0 + 1272);
        uint64_t v110 = *(void *)(v0 + 1264);
        uint64_t v111 = *(void *)(v0 + 1248);
        uint64_t v112 = *(void *)(v0 + 1240);
        uint64_t v214 = *(void *)(v0 + 1232);
        uint64_t v215 = *(void *)(v0 + 1216);
        uint64_t v113 = *(void *)(v0 + 1208);
        uint64_t v114 = *(void *)(v0 + 1200);
        uint64_t v216 = *(void *)(v0 + 1192);
        uint64_t v218 = *(void *)(v0 + 1176);
        uint64_t v213 = *(void *)(v0 + 1168);
        uint64_t v220 = *(void *)(v0 + 1160);
        uint64_t v224 = *(void *)(v0 + 1144);

        uint64_t v115 = CMSampleBufferRef.presentationTimeStamp.getter();
        double v116 = CMTime.seconds.getter(v115);
        type metadata accessor for CVBuffer(0LL);
        v282[3] = v117;
        v282[4] = &protocol witness table for CVBufferRef;
        v282[0] = v105;
        uint64_t v118 = type metadata accessor for Image.Encoding(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 56LL))( v113,  1LL,  1LL,  v118);
        id v119 = v105;
        Image.init(provider:maxPixelDimension:enforcedEncoding:)(v282, 0LL, 1LL, v113);
        uint64_t v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v209 + 16);
        v120(v110, v109, v111);
        VideoPreview.VideoFormat.init(trackInfo:)(v110);
        v120(v110, v109, v111);
        VideoPreview.AudioFormat.init(trackInfo:)(v110);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v274 + 16))(v214, v112, v215);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v271 + 16))(v216, v114, v218);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v268 + 16))(v220, v213, v224);
        uint64_t v121 = VideoPreview.init(image:isAutoloop:frame:timestamp:trackCount:videoFormat:audioFormat:videoIsMonoskiAsset:)( v214,  v238,  v91,  v234,  v216,  v220,  v242,  v116);
        VideoPreview.Constraints.frameConstraints.getter(v121);
        int v122 = v254(v246, v250);
        uint64_t v123 = *(void **)(v0 + 1712);
        uint64_t v212 = v119;
        if (v122 == v259)
        {
          uint64_t v219 = *(void **)(v0 + 1656);
          uint64_t v223 = *(void **)(v0 + 1504);
          uint64_t v227 = *(void **)(v0 + 1472);
          uint64_t v190 = *(void *)(v0 + 1376);
          uint64_t v191 = *(void *)(v0 + 1360);
          uint64_t v263 = *(void *)(v0 + 1272);
          uint64_t v253 = *(void *)(v0 + 1256);
          uint64_t v258 = *(void *)(v0 + 1248);
          uint64_t v245 = *(void *)(v0 + 1216);
          uint64_t v249 = *(void *)(v0 + 1240);
          uint64_t v237 = *(void *)(v0 + 1176);
          uint64_t v241 = *(void *)(v0 + 1200);
          uint64_t v230 = *(void *)(v0 + 1144);
          uint64_t v233 = *(void *)(v0 + 1168);
          uint64_t v192 = *(void *)(v0 + 1136);
          uint64_t v193 = *(void *)(v0 + 1128);
          uint64_t v194 = *(void *)(v0 + 1112);
          uint64_t v195 = *(void *)(v0 + 1104);
          uint64_t v196 = *(void *)(v0 + 1080);
          uint64_t v217 = *(void *)(v0 + 1088);
          __n128 v197 = swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v198 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v210 + 8))(v190, v191, v197);
          uint64_t v199 = static os_log_type_t.info.getter(v198);
          uint64_t v200 = (void *)static OS_os_log.videoPreviewUnpacker.getter();
          os_log(_:dso:log:_:_:)( v199,  &_mh_execute_header,  v200,  "This was a single frame request - handling continuation",  55LL,  2LL,  &_swiftEmptyArrayStorage);

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v208 + 16))(v193, v192, v194);
          uint64_t v201 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
          SessionSchemaResult.init(_:lastResult:)(v193, 1LL, v194, v201);
          uint64_t v202 = sub_10000E624(&qword_1000B0280);
          AsyncThrowingStream.Continuation.yield(_:)(v196, v202);
          (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v195, v217);
          *(void *)(v0 + 96_Block_object_dispose(va, 8) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 968, v202);

          (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v192, v194);
          (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v233, v230);
          (*(void (**)(uint64_t, uint64_t))(v271 + 8))(v241, v237);
          (*(void (**)(uint64_t, uint64_t))(v274 + 8))(v249, v245);
          (*(void (**)(uint64_t, uint64_t))(v253 + 8))(v263, v258);
          goto LABEL_66;
        }

        (*(void (**)(void, void))(v210 + 8))(*(void *)(v0 + 1376), *(void *)(v0 + 1360));
        id v86 = [v123 copyNextSampleBuffer];

        uint64_t v124 = *(void *)(v0 + 1016);
        BOOL v125 = __OFADD__(v124, 1LL);
        uint64_t v126 = v124 + 1;
        if (v125) {
          goto LABEL_78;
        }
        *uint64_t v211 = v126;
        if (v86) {
          BOOL v128 = *(_DWORD *)(v0 + 1780) != *(_DWORD *)(v0 + 1784) && v126 == *(void *)(v0 + 1600);
        }
        else {
          BOOL v128 = 1LL;
        }
        uint64_t v129 = *(void *)(v0 + 1128);
        uint64_t v130 = *(void *)(v0 + 1112);
        uint64_t v131 = *(void *)(v0 + 1104);
        uint64_t v132 = *(void *)(v0 + 1088);
        uint64_t v133 = *(void *)(v0 + 1080);
        (*(void (**)(uint64_t, void, uint64_t))(v208 + 16))(v129, *(void *)(v0 + 1136), v130);
        uint64_t v134 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
        SessionSchemaResult.init(_:lastResult:)(v129, v128, v130, v134);
        uint64_t v135 = sub_10000E624(&qword_1000B0280);
        AsyncThrowingStream.Continuation.yield(_:)(v133, v135);
        (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v131, v132);
        uint64_t v136 = *(void *)(v0 + 1240);
        uint64_t v260 = *(void *)(v0 + 1200);
        uint64_t v265 = *(void *)(v0 + 1216);
        uint64_t v255 = *(void *)(v0 + 1176);
        uint64_t v137 = *(void *)(v0 + 1168);
        uint64_t v138 = *(void *)(v0 + 1144);
        uint64_t v139 = *(void *)(v0 + 1136);
        uint64_t v140 = *(void *)(v0 + 1112);
        if (v128)
        {
          *(void *)(v0 + 976) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 976, v135);
        }

        (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v139, v140);
        (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v137, v138);
        (*(void (**)(uint64_t, uint64_t))(v271 + 8))(v260, v255);
        (*(void (**)(uint64_t, uint64_t))(v274 + 8))(v136, v265);
        if (!v86)
        {
          uint64_t v203 = *(void **)(v0 + 1712);
          uint64_t v204 = *(void *)(v0 + 1704);
          uint64_t v205 = *(void **)(v0 + 1504);
          uint64_t v206 = *(void **)(v0 + 1472);
          uint64_t v169 = *(void *)(v0 + 1272);
          uint64_t v170 = *(void *)(v0 + 1256);
          uint64_t v171 = *(void *)(v0 + 1248);

          swift_bridgeObjectRelease(v204);
          goto LABEL_65;
        }

        uint64_t v141 = *(void *)(v0 + 1600);
        int v142 = *(_DWORD *)(v0 + 1784);
        int v143 = *(_DWORD *)(v0 + 1780);
        uint64_t v91 = *(void *)(v0 + 1016);
        uint64_t v90 = (opaqueCMSampleBuffer *)v86;
        uint64_t v92 = v86;
        if (v143 != v142)
        {
          uint64_t v92 = v86;
          if (v91 == v141) {
            break;
          }
        }
      }
    }

    uint64_t v164 = *(void **)(v0 + 1712);
    uint64_t v165 = *(void *)(v0 + 1704);
    uint64_t v166 = v90;
    unint64_t v167 = *(void **)(v0 + 1504);
    unint64_t v168 = *(void **)(v0 + 1472);
    uint64_t v169 = *(void *)(v0 + 1272);
    uint64_t v170 = *(void *)(v0 + 1256);
    uint64_t v171 = *(void *)(v0 + 1248);

    swift_bridgeObjectRelease(v165);
LABEL_65:
    (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v169, v171);
LABEL_66:
    uint64_t v172 = *(void *)(v0 + 1432);
    uint64_t v173 = *(void *)(v0 + 1408);
    uint64_t v174 = *(void *)(v0 + 1400);
    uint64_t v175 = *(void *)(v0 + 1392);
    uint64_t v176 = *(void *)(v0 + 1384);
    uint64_t v177 = *(void *)(v0 + 1376);
    uint64_t v178 = *(void *)(v0 + 1352);
    uint64_t v179 = *(void *)(v0 + 1328);
    uint64_t v180 = *(void *)(v0 + 1320);
    uint64_t v222 = *(void *)(v0 + 1312);
    uint64_t v226 = *(void *)(v0 + 1304);
    uint64_t v229 = *(void *)(v0 + 1296);
    uint64_t v232 = *(void *)(v0 + 1272);
    uint64_t v236 = *(void *)(v0 + 1264);
    uint64_t v240 = *(void *)(v0 + 1240);
    uint64_t v244 = *(void *)(v0 + 1232);
    uint64_t v248 = *(void *)(v0 + 1208);
    uint64_t v252 = *(void *)(v0 + 1200);
    uint64_t v257 = *(void *)(v0 + 1192);
    uint64_t v262 = *(void *)(v0 + 1168);
    uint64_t v267 = *(void *)(v0 + 1160);
    uint64_t v270 = *(void *)(v0 + 1136);
    uint64_t v273 = *(void *)(v0 + 1128);
    uint64_t v276 = *(void *)(v0 + 1104);
    uint64_t v280 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1456));
    swift_task_dealloc(v172);
    swift_task_dealloc(v173);
    swift_task_dealloc(v174);
    swift_task_dealloc(v175);
    swift_task_dealloc(v176);
    swift_task_dealloc(v177);
    swift_task_dealloc(v178);
    swift_task_dealloc(v179);
    swift_task_dealloc(v180);
    swift_task_dealloc(v222);
    swift_task_dealloc(v226);
    swift_task_dealloc(v229);
    swift_task_dealloc(v232);
    swift_task_dealloc(v236);
    swift_task_dealloc(v240);
    swift_task_dealloc(v244);
    swift_task_dealloc(v248);
    swift_task_dealloc(v252);
    swift_task_dealloc(v257);
    swift_task_dealloc(v262);
    swift_task_dealloc(v267);
    swift_task_dealloc(v270);
    swift_task_dealloc(v273);
    swift_task_dealloc(v276);
    swift_task_dealloc(v280);
    uint64_t v163 = *(uint64_t (**)(void))(v0 + 8);
    return v163();
  }

  unint64_t v144 = *(void **)(v0 + 1712);
  uint64_t v145 = *(void **)(v0 + 1656);
  int v146 = *(void **)(v0 + 1504);
  uint64_t v147 = *(void **)(v0 + 1472);
  uint64_t v148 = *(void *)(v0 + 1272);
  uint64_t v149 = *(void *)(v0 + 1256);
  uint64_t v150 = *(void *)(v0 + 1248);
  swift_bridgeObjectRelease(*(void *)(v0 + 1704));
  uint64_t v151 = type metadata accessor for Explosion(0LL);
  uint64_t v152 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v151, v152, 0LL, 0LL);
  uint64_t v153 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x73656D6172466F4ELL,  0xE800000000000000LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
  swift_willThrow(v153);

  (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v148, v150);
LABEL_62:
  uint64_t v154 = *(void *)(v0 + 1432);
  uint64_t v155 = *(void *)(v0 + 1408);
  uint64_t v156 = *(void *)(v0 + 1400);
  uint64_t v157 = *(void *)(v0 + 1392);
  uint64_t v158 = *(void *)(v0 + 1384);
  uint64_t v159 = *(void *)(v0 + 1376);
  uint64_t v160 = *(void *)(v0 + 1352);
  uint64_t v161 = *(void *)(v0 + 1328);
  uint64_t v162 = *(void *)(v0 + 1320);
  uint64_t v221 = *(void *)(v0 + 1312);
  uint64_t v225 = *(void *)(v0 + 1304);
  uint64_t v228 = *(void *)(v0 + 1296);
  uint64_t v231 = *(void *)(v0 + 1272);
  uint64_t v235 = *(void *)(v0 + 1264);
  uint64_t v239 = *(void *)(v0 + 1240);
  uint64_t v243 = *(void *)(v0 + 1232);
  uint64_t v247 = *(void *)(v0 + 1208);
  uint64_t v251 = *(void *)(v0 + 1200);
  uint64_t v256 = *(void *)(v0 + 1192);
  uint64_t v261 = *(void *)(v0 + 1168);
  uint64_t v266 = *(void *)(v0 + 1160);
  uint64_t v269 = *(void *)(v0 + 1136);
  uint64_t v272 = *(void *)(v0 + 1128);
  uint64_t v275 = *(void *)(v0 + 1104);
  uint64_t v279 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v154);
  swift_task_dealloc(v155);
  swift_task_dealloc(v156);
  swift_task_dealloc(v157);
  swift_task_dealloc(v158);
  swift_task_dealloc(v159);
  swift_task_dealloc(v160);
  swift_task_dealloc(v161);
  swift_task_dealloc(v162);
  swift_task_dealloc(v221);
  swift_task_dealloc(v225);
  swift_task_dealloc(v228);
  swift_task_dealloc(v231);
  swift_task_dealloc(v235);
  swift_task_dealloc(v239);
  swift_task_dealloc(v243);
  swift_task_dealloc(v247);
  swift_task_dealloc(v251);
  swift_task_dealloc(v256);
  swift_task_dealloc(v261);
  swift_task_dealloc(v266);
  swift_task_dealloc(v269);
  swift_task_dealloc(v272);
  swift_task_dealloc(v275);
  swift_task_dealloc(v279);
  uint64_t v163 = *(uint64_t (**)(void))(v0 + 8);
  return v163();
}

        __break(1u);
LABEL_43:
        __break(1u);
        return result;
      }

      ++v15;
    }

uint64_t sub_100025788()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1688);
  *(void *)(*v1 + 1696) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 1680);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 1664));
    swift_release(v4);
    uint64_t v5 = sub_100028828;
  }

  else
  {
    swift_release(*(void *)(v2 + 1680));
    uint64_t v5 = sub_100025854;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100025854()
{
  uint64_t v1 = *(void *)(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 896);
  *(void *)(v0 + 912) = *(void *)(v0 + 888);
  *(void *)(v0 + 920) = v2;
  *(void *)(v0 + 92_Block_object_dispose(va, 8) = v1;
  double Seconds = CMTimeGetSeconds((CMTime *)(v0 + 912));
  uint64_t v4 = VideoPreview.MultiFrameConstraints.frameLimit.getter();
  if (__OFSUB__(v4, 1LL))
  {
    __break(1u);
LABEL_62:
    __break(1u);
  }

  double v5 = Seconds / ((double)(v4 - 1) + 0.1);
  if (v5 <= 0.0)
  {
    (*(void (**)(void, void))(v0 + 1672))(*(void *)(v0 + 1312), *(void *)(v0 + 1280));
    CMTimeValue value = *(void *)(v0 + 1664);
  }

  else
  {
    CMTimeMakeWithSeconds(&v256, v5, 1000);
    CMTimeEpoch epoch = v256.epoch;
    uint64_t v7 = *(void *)&v256.timescale;
    *(void *)(v0 + 864) = v256.value;
    *(void *)(v0 + 872) = v7;
    *(void *)(v0 + 880) = epoch;
    CFDictionaryRef v8 = CMTimeCopyAsDictionary((CMTime *)(v0 + 864), kCFAllocatorDefault);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 1672);
    CMTimeValue v10 = *(void *)(v0 + 1664);
    if (!v8)
    {
      uint64_t v108 = *(void **)(v0 + 1656);
      uint64_t v109 = *(void **)(v0 + 1504);
      uint64_t v110 = *(void **)(v0 + 1472);
      uint64_t v111 = *(void *)(v0 + 1312);
      uint64_t v112 = *(void *)(v0 + 1280);
      uint64_t v113 = *(void *)(v0 + 1256);
      uint64_t v248 = *(void *)(v0 + 1248);
      uint64_t v252 = *(void *)(v0 + 1272);
      swift_bridgeObjectRelease(v10);
      uint64_t v114 = type metadata accessor for Explosion(0LL);
      uint64_t v115 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v114, v115, 0LL, 0LL);
      uint64_t v116 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0xD00000000000001ALL,  0x800000010008AF50LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
      swift_willThrow(v116);

      v9(v111, v112);
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v252, v248);
      goto LABEL_51;
    }

    CFDictionaryRef v11 = v8;
    uint64_t v12 = *(void *)(v0 + 1312);
    uint64_t v13 = *(void *)(v0 + 1280);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AVVideoAverageIntervalForSyncFramesKey);
    uint64_t v16 = v15;
    *(void *)(v0 + 720) = sub_100018290(0LL, (unint64_t *)&qword_1000B0038, &OBJC_CLASS___NSDictionary_ptr);
    *(void *)(v0 + 696) = v11;
    sub_100018278((_OWORD *)(v0 + 696), (_OWORD *)(v0 + 664));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v256.CMTimeValue value = v10;
    sub_10002A500((_OWORD *)(v0 + 664), v14, v16, isUniquelyReferenced_nonNull_native);
    CMTimeValue value = v256.value;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    __n128 v19 = swift_bridgeObjectRelease(v16);
    ((void (*)(uint64_t, uint64_t, __n128))v9)(v12, v13, v19);
  }

  *(void *)(v0 + 1704) = value;
  int v20 = *(_DWORD *)(v0 + 1788);
  int v21 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
  uint64_t v22 = *(void **)(v0 + 1504);
  uint64_t v23 = *(void *)(v0 + 1392);
  uint64_t v24 = *(void *)(v0 + 1360);
  id v25 = objc_allocWithZone(&OBJC_CLASS___AVAssetReaderTrackOutput);
  id v26 = v22;
  swift_bridgeObjectRetain(value);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v28 = objc_msgSend(v25, "initWithTrack:outputSettings:", v26, isa, swift_bridgeObjectRelease(value).n128_f64[0]);
  *(void *)(v0 + 1712) = v28;

  VideoPreview.Constraints.frameConstraints.getter(v29);
  int v30 = v21(v23, v24);
  uint64_t v31 = *(void *)(v0 + 1360);
  if (v30 == v20)
  {
    uint64_t v32 = *(void *)(v0 + 1392);
    uint64_t v33 = *(void *)(v0 + 1296);
    uint64_t v34 = *(void *)(v0 + 1288);
    uint64_t v35 = *(void *)(v0 + 1280);
    (*(void (**)(uint64_t, uint64_t))(v0 + 1592))(v32, v31);
    uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v33, v32, v35);
    id v37 = [v28 setAppliesPreferredTrackTransform:VideoPreview.MultiFrameConstraints.appliesPreferredTrackTransform.getter(v36) & 1];
    (*(void (**)(void, void))(*(void *)(v0 + 1288) + 8LL))( *(void *)(v0 + 1296),  *(void *)(v0 + 1280));
  }

  else
  {
    (*(void (**)(void, uint64_t))(*(void *)(v0 + 1368) + 8LL))(*(void *)(v0 + 1392), v31);
    [v28 setAppliesPreferredTrackTransform:1];
  }

  uint64_t v38 = *(void **)(v0 + 1656);
  int v39 = *(_DWORD *)(v0 + 1784);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
  uint64_t v41 = *(void *)(v0 + 1384);
  uint64_t v42 = *(void *)(v0 + 1368);
  uint64_t v43 = *(void *)(v0 + 1360);
  [v28 setAlwaysCopiesSampleData:0];
  VideoPreview.Constraints.frameConstraints.getter([v38 addOutput:v28]);
  int v44 = v40(v41, v43);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
  if (v44 == v39)
  {
    sub_10000E624(&qword_1000B02D0);
    uint64_t v45 = static AVPartialAsyncProperty<A>.nominalFrameRate.getter();
    *(void *)(v0 + 1720) = v45;
    uint64_t v46 = (void *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
    *(void *)(v0 + 172_Block_object_dispose(va, 8) = v46;
    *uint64_t v46 = v0;
    v46[1] = sub_100026A9C;
    return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 1776, v45);
  }

  uint64_t v48 = *(void **)(v0 + 1712);
  [*(id *)(v0 + 1656) startReading];
  *(void *)(v0 + 1016) = 0LL;
  id v49 = [v48 copyNextSampleBuffer];
  if (v49)
  {
    id v50 = v49;
    uint64_t v51 = *(void *)(v0 + 1600);
    int v52 = *(_DWORD *)(v0 + 1784);
    int v53 = *(_DWORD *)(v0 + 1780);
    id v54 = (opaqueCMSampleBuffer *)v49;
    unint64_t v184 = (uint64_t *)(v0 + 1016);
    swift_beginAccess(v0 + 1016, v0 + 840, 1LL, 0LL);
    uint64_t v55 = *(void *)(v0 + 1016);
    if (v53 == v52 || v55 != v51)
    {
      uint64_t v182 = *(void *)(v0 + 1368);
      uint64_t v183 = *(void *)(v0 + 1256);
      uint64_t v244 = *(void *)(v0 + 1184);
      uint64_t v247 = *(void *)(v0 + 1224);
      uint64_t v241 = *(void *)(v0 + 1152);
      uint64_t v180 = *(void *)(v0 + 1096);
      uint64_t v181 = *(void *)(v0 + 1120);
      int v56 = v50;
      while (1)
      {
        uint64_t v237 = v56;
        if (!CMSampleBufferGetNumSamples(v54))
        {
          uint64_t v57 = *(void *)(v0 + 1600);
          int v58 = *(_DWORD *)(v0 + 1784);
          int v59 = *(_DWORD *)(v0 + 1780);

          uint64_t v55 = *(void *)(v0 + 1016);
          uint64_t v60 = v56;
          id v61 = v60;
          if (v59 != v58 && v55 == v57)
          {
            id v50 = v56;
            id v54 = v60;
            break;
          }

          if (!CMSampleBufferGetNumSamples(v60))
          {
            while (1)
            {
              uint64_t v63 = *(void *)(v0 + 1600);
              int v64 = *(_DWORD *)(v0 + 1784);
              int v65 = *(_DWORD *)(v0 + 1780);

              uint64_t v55 = *(void *)(v0 + 1016);
              int v66 = v61;
              id v54 = v66;
              if (v65 != v64 && v55 == v63) {
                break;
              }
              if (CMSampleBufferGetNumSamples(v66)) {
                goto LABEL_29;
              }
            }

            id v50 = v56;
            break;
          }

          id v54 = v61;
        }

LABEL_29:
        uint64_t v68 = CMSampleBufferRef.imageBuffer.getter();
        if (!v68)
        {
          uint64_t v154 = *(void **)(v0 + 1712);
          uint64_t v155 = *(void **)(v0 + 1656);
          uint64_t v156 = *(void **)(v0 + 1504);
          uint64_t v157 = *(void **)(v0 + 1472);
          uint64_t v255 = *(void *)(v0 + 1272);
          uint64_t v158 = *(void *)(v0 + 1256);
          uint64_t v159 = *(void *)(v0 + 1248);
          swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v160 = type metadata accessor for Explosion(0LL);
          uint64_t v161 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
          swift_allocError(v160, v161, 0LL, 0LL);
          uint64_t v162 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x426567616D496F4ELL,  0xED00007265666675LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
          swift_willThrow(v162);

          (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v255, v159);
          goto LABEL_51;
        }

        uint64_t v69 = (void *)v68;
        uint64_t v251 = v54;
        os_log_type_t v70 = static os_log_type_t.info.getter(v68);
        uint64_t v71 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
        if (os_log_type_enabled(v71, v70))
        {
          uint64_t v72 = swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v72 = 134217984;
          uint64_t v55 = *v184;
          *(void *)(v72 + 4) = *v184;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  v70,  "BlastDoor processing thumbnail %ld",  (uint8_t *)v72,  0xCu);
          swift_slowDealloc(v72, -1LL, -1LL);
        }

        unsigned int v211 = *(unsigned __int8 *)(v0 + 1805);
        int v232 = *(_DWORD *)(v0 + 1784);
        uint64_t v227 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
        unsigned int v215 = *(unsigned __int8 *)(v0 + 1804);
        uint64_t v207 = *(void *)(v0 + 1496);
        uint64_t v219 = *(void *)(v0 + 1376);
        uint64_t v223 = *(void *)(v0 + 1360);
        uint64_t v73 = *(void *)(v0 + 1272);
        uint64_t v74 = *(void *)(v0 + 1264);
        uint64_t v75 = *(void *)(v0 + 1248);
        uint64_t v76 = *(void *)(v0 + 1240);
        uint64_t v187 = *(void *)(v0 + 1232);
        uint64_t v188 = *(void *)(v0 + 1216);
        uint64_t v77 = *(void *)(v0 + 1208);
        uint64_t v78 = *(void *)(v0 + 1200);
        uint64_t v189 = *(void *)(v0 + 1192);
        uint64_t v191 = *(void *)(v0 + 1176);
        uint64_t v186 = *(void *)(v0 + 1168);
        uint64_t v193 = *(void *)(v0 + 1160);
        uint64_t v197 = *(void *)(v0 + 1144);

        uint64_t v79 = CMSampleBufferRef.presentationTimeStamp.getter();
        double v80 = CMTime.seconds.getter(v79);
        type metadata accessor for CVBuffer(0LL);
        uint64_t v257 = v81;
        uint64_t v258 = &protocol witness table for CVBufferRef;
        v256.CMTimeValue value = (CMTimeValue)v69;
        uint64_t v82 = type metadata accessor for Image.Encoding(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56LL))(v77, 1LL, 1LL, v82);
        id v83 = v69;
        Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v256, 0LL, 1LL, v77);
        uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v183 + 16);
        v84(v74, v73, v75);
        VideoPreview.VideoFormat.init(trackInfo:)(v74);
        v84(v74, v73, v75);
        VideoPreview.AudioFormat.init(trackInfo:)(v74);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v247 + 16))(v187, v76, v188);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v244 + 16))(v189, v78, v191);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v241 + 16))(v193, v186, v197);
        uint64_t v85 = VideoPreview.init(image:isAutoloop:frame:timestamp:trackCount:videoFormat:audioFormat:videoIsMonoskiAsset:)( v187,  v211,  v55,  v207,  v189,  v193,  v215,  v80);
        VideoPreview.Constraints.frameConstraints.getter(v85);
        int v86 = v227(v219, v223);
        uint64_t v87 = *(void **)(v0 + 1712);
        uint64_t v185 = v83;
        if (v86 == v232)
        {
          uint64_t v192 = *(void **)(v0 + 1656);
          uint64_t v196 = *(void **)(v0 + 1504);
          uint64_t v200 = *(void **)(v0 + 1472);
          uint64_t v163 = *(void *)(v0 + 1376);
          uint64_t v164 = *(void *)(v0 + 1360);
          uint64_t v236 = *(void *)(v0 + 1272);
          uint64_t v226 = *(void *)(v0 + 1256);
          uint64_t v231 = *(void *)(v0 + 1248);
          uint64_t v218 = *(void *)(v0 + 1216);
          uint64_t v222 = *(void *)(v0 + 1240);
          uint64_t v210 = *(void *)(v0 + 1176);
          uint64_t v214 = *(void *)(v0 + 1200);
          uint64_t v203 = *(void *)(v0 + 1144);
          uint64_t v206 = *(void *)(v0 + 1168);
          uint64_t v165 = *(void *)(v0 + 1136);
          uint64_t v166 = *(void *)(v0 + 1128);
          uint64_t v167 = *(void *)(v0 + 1112);
          uint64_t v168 = *(void *)(v0 + 1104);
          uint64_t v169 = *(void *)(v0 + 1080);
          uint64_t v190 = *(void *)(v0 + 1088);
          __n128 v170 = swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v182 + 8))(v163, v164, v170);
          uint64_t v172 = static os_log_type_t.info.getter(v171);
          uint64_t v173 = (void *)static OS_os_log.videoPreviewUnpacker.getter();
          os_log(_:dso:log:_:_:)( v172,  &_mh_execute_header,  v173,  "This was a single frame request - handling continuation",  55LL,  2LL,  &_swiftEmptyArrayStorage);

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 16))(v166, v165, v167);
          uint64_t v174 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
          SessionSchemaResult.init(_:lastResult:)(v166, 1LL, v167, v174);
          uint64_t v175 = sub_10000E624(&qword_1000B0280);
          AsyncThrowingStream.Continuation.yield(_:)(v169, v175);
          (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v168, v190);
          *(void *)(v0 + 96_Block_object_dispose(va, 8) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 968, v175);

          (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v165, v167);
          (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v206, v203);
          (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v214, v210);
          (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v222, v218);
          (*(void (**)(uint64_t, uint64_t))(v226 + 8))(v236, v231);
          goto LABEL_55;
        }

        (*(void (**)(void, void))(v182 + 8))(*(void *)(v0 + 1376), *(void *)(v0 + 1360));
        id v50 = [v87 copyNextSampleBuffer];

        uint64_t v88 = *(void *)(v0 + 1016);
        BOOL v89 = __OFADD__(v88, 1LL);
        uint64_t v90 = v88 + 1;
        if (v89) {
          goto LABEL_62;
        }
        *unint64_t v184 = v90;
        if (v50) {
          BOOL v92 = *(_DWORD *)(v0 + 1780) != *(_DWORD *)(v0 + 1784) && v90 == *(void *)(v0 + 1600);
        }
        else {
          BOOL v92 = 1LL;
        }
        uint64_t v93 = *(void *)(v0 + 1128);
        uint64_t v94 = *(void *)(v0 + 1112);
        uint64_t v95 = *(void *)(v0 + 1104);
        uint64_t v96 = *(void *)(v0 + 1088);
        uint64_t v97 = *(void *)(v0 + 1080);
        (*(void (**)(uint64_t, void, uint64_t))(v181 + 16))(v93, *(void *)(v0 + 1136), v94);
        uint64_t v98 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
        SessionSchemaResult.init(_:lastResult:)(v93, v92, v94, v98);
        uint64_t v99 = sub_10000E624(&qword_1000B0280);
        AsyncThrowingStream.Continuation.yield(_:)(v97, v99);
        (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v95, v96);
        uint64_t v100 = *(void *)(v0 + 1240);
        uint64_t v233 = *(void *)(v0 + 1200);
        uint64_t v238 = *(void *)(v0 + 1216);
        uint64_t v228 = *(void *)(v0 + 1176);
        uint64_t v101 = *(void *)(v0 + 1168);
        uint64_t v102 = *(void *)(v0 + 1144);
        uint64_t v103 = *(void *)(v0 + 1136);
        uint64_t v104 = *(void *)(v0 + 1112);
        if (v92)
        {
          *(void *)(v0 + 976) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 976, v99);
        }

        (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v103, v104);
        (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v101, v102);
        (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v233, v228);
        (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v100, v238);
        if (!v50)
        {
          uint64_t v176 = *(void **)(v0 + 1712);
          uint64_t v177 = *(void *)(v0 + 1704);
          uint64_t v178 = *(void **)(v0 + 1504);
          uint64_t v179 = *(void **)(v0 + 1472);
          uint64_t v142 = *(void *)(v0 + 1272);
          uint64_t v143 = *(void *)(v0 + 1256);
          uint64_t v144 = *(void *)(v0 + 1248);

          swift_bridgeObjectRelease(v177);
          goto LABEL_54;
        }

        uint64_t v105 = *(void *)(v0 + 1600);
        int v106 = *(_DWORD *)(v0 + 1784);
        int v107 = *(_DWORD *)(v0 + 1780);
        uint64_t v55 = *(void *)(v0 + 1016);
        id v54 = (opaqueCMSampleBuffer *)v50;
        int v56 = v50;
        if (v107 != v106)
        {
          int v56 = v50;
          if (v55 == v105) {
            break;
          }
        }
      }
    }

    uint64_t v137 = *(void **)(v0 + 1712);
    uint64_t v138 = *(void *)(v0 + 1704);
    uint64_t v139 = v54;
    uint64_t v140 = *(void **)(v0 + 1504);
    uint64_t v141 = *(void **)(v0 + 1472);
    uint64_t v142 = *(void *)(v0 + 1272);
    uint64_t v143 = *(void *)(v0 + 1256);
    uint64_t v144 = *(void *)(v0 + 1248);

    swift_bridgeObjectRelease(v138);
LABEL_54:
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v142, v144);
LABEL_55:
    uint64_t v145 = *(void *)(v0 + 1432);
    uint64_t v146 = *(void *)(v0 + 1408);
    uint64_t v147 = *(void *)(v0 + 1400);
    uint64_t v148 = *(void *)(v0 + 1392);
    uint64_t v149 = *(void *)(v0 + 1384);
    uint64_t v150 = *(void *)(v0 + 1376);
    uint64_t v151 = *(void *)(v0 + 1352);
    uint64_t v152 = *(void *)(v0 + 1328);
    uint64_t v153 = *(void *)(v0 + 1320);
    uint64_t v195 = *(void *)(v0 + 1312);
    uint64_t v199 = *(void *)(v0 + 1304);
    uint64_t v202 = *(void *)(v0 + 1296);
    uint64_t v205 = *(void *)(v0 + 1272);
    uint64_t v209 = *(void *)(v0 + 1264);
    uint64_t v213 = *(void *)(v0 + 1240);
    uint64_t v217 = *(void *)(v0 + 1232);
    uint64_t v221 = *(void *)(v0 + 1208);
    uint64_t v225 = *(void *)(v0 + 1200);
    uint64_t v230 = *(void *)(v0 + 1192);
    uint64_t v235 = *(void *)(v0 + 1168);
    uint64_t v240 = *(void *)(v0 + 1160);
    uint64_t v243 = *(void *)(v0 + 1136);
    uint64_t v246 = *(void *)(v0 + 1128);
    uint64_t v250 = *(void *)(v0 + 1104);
    uint64_t v254 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1456));
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v151);
    swift_task_dealloc(v152);
    swift_task_dealloc(v153);
    swift_task_dealloc(v195);
    swift_task_dealloc(v199);
    swift_task_dealloc(v202);
    swift_task_dealloc(v205);
    swift_task_dealloc(v209);
    swift_task_dealloc(v213);
    swift_task_dealloc(v217);
    swift_task_dealloc(v221);
    swift_task_dealloc(v225);
    swift_task_dealloc(v230);
    swift_task_dealloc(v235);
    swift_task_dealloc(v240);
    swift_task_dealloc(v243);
    swift_task_dealloc(v246);
    swift_task_dealloc(v250);
    swift_task_dealloc(v254);
    uint64_t v136 = *(uint64_t (**)(void))(v0 + 8);
    return v136();
  }

  uint64_t v117 = *(void **)(v0 + 1712);
  uint64_t v118 = *(void **)(v0 + 1656);
  id v119 = *(void **)(v0 + 1504);
  uint64_t v120 = *(void **)(v0 + 1472);
  uint64_t v121 = *(void *)(v0 + 1272);
  uint64_t v122 = *(void *)(v0 + 1256);
  uint64_t v123 = *(void *)(v0 + 1248);
  swift_bridgeObjectRelease(*(void *)(v0 + 1704));
  uint64_t v124 = type metadata accessor for Explosion(0LL);
  uint64_t v125 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v124, v125, 0LL, 0LL);
  uint64_t v126 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x73656D6172466F4ELL,  0xE800000000000000LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
  swift_willThrow(v126);

  (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
LABEL_51:
  uint64_t v127 = *(void *)(v0 + 1432);
  uint64_t v128 = *(void *)(v0 + 1408);
  uint64_t v129 = *(void *)(v0 + 1400);
  uint64_t v130 = *(void *)(v0 + 1392);
  uint64_t v131 = *(void *)(v0 + 1384);
  uint64_t v132 = *(void *)(v0 + 1376);
  uint64_t v133 = *(void *)(v0 + 1352);
  uint64_t v134 = *(void *)(v0 + 1328);
  uint64_t v135 = *(void *)(v0 + 1320);
  uint64_t v194 = *(void *)(v0 + 1312);
  uint64_t v198 = *(void *)(v0 + 1304);
  uint64_t v201 = *(void *)(v0 + 1296);
  uint64_t v204 = *(void *)(v0 + 1272);
  uint64_t v208 = *(void *)(v0 + 1264);
  uint64_t v212 = *(void *)(v0 + 1240);
  uint64_t v216 = *(void *)(v0 + 1232);
  uint64_t v220 = *(void *)(v0 + 1208);
  uint64_t v224 = *(void *)(v0 + 1200);
  uint64_t v229 = *(void *)(v0 + 1192);
  uint64_t v234 = *(void *)(v0 + 1168);
  uint64_t v239 = *(void *)(v0 + 1160);
  uint64_t v242 = *(void *)(v0 + 1136);
  uint64_t v245 = *(void *)(v0 + 1128);
  uint64_t v249 = *(void *)(v0 + 1104);
  uint64_t v253 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v194);
  swift_task_dealloc(v198);
  swift_task_dealloc(v201);
  swift_task_dealloc(v204);
  swift_task_dealloc(v208);
  swift_task_dealloc(v212);
  swift_task_dealloc(v216);
  swift_task_dealloc(v220);
  swift_task_dealloc(v224);
  swift_task_dealloc(v229);
  swift_task_dealloc(v234);
  swift_task_dealloc(v239);
  swift_task_dealloc(v242);
  swift_task_dealloc(v245);
  swift_task_dealloc(v249);
  swift_task_dealloc(v253);
  uint64_t v136 = *(uint64_t (**)(void))(v0 + 8);
  return v136();
}

  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_100026A9C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1728);
  *(void *)(*v1 + 1736) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 1720);
  if (v0)
  {
    swift_bridgeObjectRelease(*(void *)(v2 + 1704));
    swift_release(v4);
    double v5 = sub_100028A4C;
  }

  else
  {
    swift_release(*(void *)(v2 + 1720));
    double v5 = sub_100026B68;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100026B68()
{
  float v1 = ceilf(*(float *)(v0 + 1776));
  *(float *)(v0 + 1792) = v1;
  if ((~LODWORD(v1) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v1 <= -2147500000.0)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    __break(1u);
  }

  if (v1 >= 2147500000.0) {
    goto LABEL_7;
  }
  *(void *)(v0 + 1744) = kCMTimeZero.value;
  *(void *)(v0 + 1796) = *(void *)&kCMTimeZero.timescale;
  *(void *)(v0 + 1752) = kCMTimeZero.epoch;
  sub_10000E624(&qword_1000B02D8);
  uint64_t v2 = static AVPartialAsyncProperty<A>.segments.getter();
  *(void *)(v0 + 1760) = v2;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to AVAsynchronousKeyValueLoading.load<A>(_:)[1]);
  *(void *)(v0 + 176_Block_object_dispose(va, 8) = v3;
  void *v3 = v0;
  v3[1] = sub_100026C80;
  return AVAsynchronousKeyValueLoading.load<A>(_:)(v0 + 984, v2);
}

uint64_t sub_100026C80()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 1768));
  uint64_t v3 = *(void *)(v2 + 1760);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_release(v3);
    uint64_t v4 = sub_100028C60;
  }

  else
  {
    swift_release(v3);
    uint64_t v4 = sub_100026D48;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100026D48()
{
  uint64_t v1 = *(void *)(v0 + 984);
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v3 = (uint64_t *)(v0 + 1796);
    if (!v2) {
      break;
    }
    unint64_t v4 = 0LL;
    unint64_t v5 = v1 & 0xC000000000000001LL;
    uint64_t v235 = v1 + 32;
    uint64_t v239 = v1 & 0xFFFFFFFFFFFFFF8LL;
    p_base_prots = &MBDHTMLToSuper_SPAN_Frame__metaData.base_prots;
    unint64_t v226 = v1 & 0xC000000000000001LL;
    uint64_t v231 = v2;
    while (1)
    {
      if (v5)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }

      else
      {
        if (v4 >= *(void *)(v239 + 16)) {
          goto LABEL_70;
        }
        id v7 = *(id *)(v235 + 8 * v4);
      }

      CFDictionaryRef v8 = v7;
      BOOL v9 = __OFADD__(v4++, 1LL);
      if (v9) {
        break;
      }
      if ((objc_msgSend(v7, (SEL)p_base_prots[428]) & 1) == 0)
      {
        CMTimeValue v10 = *(void **)(v0 + 1504);
        [v8 timeMapping];
        uint64_t v11 = v249;
        uint64_t v12 = v248;
        *(void *)(v0 + 792) = v247;
        *(void *)(v0 + 800) = v12;
        *(void *)(v0 + 80_Block_object_dispose(va, 8) = v11;
        id v13 = [v10 makeSampleCursorWithPresentationTimeStamp:v0 + 792];
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = v1;
          do
          {
            if ([v14 stepInPresentationOrderByCount:1] != (id)1) {
              break;
            }
            [v14 presentationTimeStamp];
            uint64_t v16 = v247;
            uint64_t v17 = v248;
            uint64_t v18 = v249;
            id v19 = [v8 timeMapping];
            uint64_t v20 = v251;
            uint64_t v21 = v248;
            uint64_t v22 = v250;
            __int128 v23 = v249;
            *(void *)(v0 + 480) = v247;
            *(void *)(v0 + 48_Block_object_dispose(va, 8) = v21;
            *(_OWORD *)(v0 + 496) = v23;
            *(void *)(v0 + 512) = v22;
            *(void *)(v0 + 520) = v20;
            uint64_t v24 = CMTimeRange.end.getter(v19);
          }

          while ((static CMTime.> infix(_:_:)(v16, v17, v18, v24, v25, v26) & 1) == 0);
          if (([v14 currentSampleDependencyInfo] & 0x1000000) == 0)
          {
            objc_msgSend(v14, "presentationTimeStamp", swift_bridgeObjectRelease(v15).n128_f64[0]);
            uint64_t v110 = v247;
            uint64_t v111 = v249;
            uint64_t v112 = v248;
            [v8 timeMapping];
            uint64_t v113 = v247;
            unint64_t v115 = *((void *)&v249 + 1);
            unint64_t v114 = v249;
            uint64_t v116 = v251;
            uint64_t v117 = v248;
            uint64_t v118 = v250;
            [v8 timeMapping];
            uint64_t v119 = v252;
            uint64_t v120 = v256;
            uint64_t v121 = v253;
            uint64_t v122 = v255;
            __int128 v123 = v254;
            *(void *)(v0 + 816) = v110;
            *(void *)(v0 + 824) = v112;
            *(void *)(v0 + 832) = v111;
            *(void *)(v0 + 576) = v113;
            *(void *)(v0 + 584) = v117;
            *(_OWORD *)(v0 + 592) = __PAIR128__(v115, v114);
            *(void *)(v0 + 60_Block_object_dispose(va, 8) = v118;
            *(void *)(v0 + 616) = v116;
            *(void *)(v0 + 336) = v119;
            *(void *)(v0 + 344) = v121;
            *(_OWORD *)(v0 + 352) = v123;
            *(void *)(v0 + 36_Block_object_dispose(va, 8) = v122;
            *(void *)(v0 + 376) = v120;
            CMTimeMapTimeFromRangeToRange( (CMTime *)&v247,  (CMTime *)(v0 + 816),  (CMTimeRange *)(v0 + 576),  (CMTimeRange *)(v0 + 336));
            uint64_t v29 = v247;
            uint64_t v28 = v248;
            uint64_t v27 = v249;

            uint64_t v3 = (uint64_t *)(v0 + 1796);
            goto LABEL_22;
          }

          uint64_t v1 = v15;
          unint64_t v5 = v226;
          uint64_t v2 = v231;
          p_base_prots = (__objc2_prot_list **)(&MBDHTMLToSuper_SPAN_Frame__metaData + 40);
        }
      }

      if (v4 == v2)
      {
        swift_bridgeObjectRelease(v1);
        uint64_t v27 = *(void *)(v0 + 1752);
        uint64_t v3 = (uint64_t *)(v0 + 1796);
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    if (v1 < 0) {
      uint64_t v168 = v1;
    }
    else {
      uint64_t v168 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v168);
    swift_bridgeObjectRelease(v1);
  }

  swift_bridgeObjectRelease(v1);
  uint64_t v27 = *(void *)(v0 + 1752);
LABEL_21:
  uint64_t v28 = *v3;
  uint64_t v29 = *(void **)(v0 + 1744);
LABEL_22:
  int v30 = *(void **)(v0 + 1656);
  __C::CMTime v257 = CMTime.init(value:timescale:)(1LL, (int)*(float *)(v0 + 1792));
  *(void *)(v0 + 384) = v29;
  *(void *)(v0 + 392) = v28;
  *(void *)(v0 + 400) = v27;
  *(__C::CMTime *)(v0 + 40_Block_object_dispose(va, 8) = v257;
  [v30 setTimeRange:v0 + 384];
  uint64_t v31 = *(void **)(v0 + 1712);
  [*(id *)(v0 + 1656) startReading];
  *(void *)(v0 + 1016) = 0LL;
  id v32 = [v31 copyNextSampleBuffer];
  if (v32)
  {
    id v33 = v32;
    uint64_t v34 = *(void *)(v0 + 1600);
    int v35 = *(_DWORD *)(v0 + 1784);
    int v36 = *(_DWORD *)(v0 + 1780);
    id v37 = (opaqueCMSampleBuffer *)v32;
    uint64_t v173 = (uint64_t *)(v0 + 1016);
    swift_beginAccess(v0 + 1016, v0 + 840, 1LL, 0LL);
    uint64_t v38 = *(void *)(v0 + 1016);
    if (v36 == v35 || v38 != v34)
    {
      uint64_t v171 = *(void *)(v0 + 1256);
      uint64_t v172 = *(void *)(v0 + 1368);
      uint64_t v236 = *(void *)(v0 + 1184);
      uint64_t v240 = *(void *)(v0 + 1224);
      uint64_t v232 = *(void *)(v0 + 1152);
      uint64_t v169 = *(void *)(v0 + 1096);
      uint64_t v170 = *(void *)(v0 + 1120);
      int v39 = v33;
      while (1)
      {
        uint64_t v227 = v39;
        if (!CMSampleBufferGetNumSamples(v37))
        {
          uint64_t v40 = *(void *)(v0 + 1600);
          int v41 = *(_DWORD *)(v0 + 1784);
          int v42 = *(_DWORD *)(v0 + 1780);

          uint64_t v38 = *(void *)(v0 + 1016);
          uint64_t v43 = v39;
          int v44 = v43;
          if (v42 != v41 && v38 == v40)
          {
            id v33 = v39;
            id v37 = v43;
            break;
          }

          if (!CMSampleBufferGetNumSamples(v43))
          {
            while (1)
            {
              uint64_t v46 = *(void *)(v0 + 1600);
              int v47 = *(_DWORD *)(v0 + 1784);
              int v48 = *(_DWORD *)(v0 + 1780);

              uint64_t v38 = *(void *)(v0 + 1016);
              id v49 = v44;
              id v37 = v49;
              if (v48 != v47 && v38 == v46) {
                break;
              }
              if (CMSampleBufferGetNumSamples(v49)) {
                goto LABEL_38;
              }
            }

            id v33 = v39;
            break;
          }

          id v37 = v44;
        }

LABEL_38:
        uint64_t v51 = CMSampleBufferRef.imageBuffer.getter();
        if (!v51)
        {
          uint64_t v142 = *(void **)(v0 + 1712);
          uint64_t v143 = *(void **)(v0 + 1656);
          uint64_t v144 = *(void **)(v0 + 1504);
          uint64_t v145 = *(void **)(v0 + 1472);
          uint64_t v246 = *(void *)(v0 + 1272);
          uint64_t v146 = *(void *)(v0 + 1256);
          uint64_t v147 = *(void *)(v0 + 1248);
          swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v148 = type metadata accessor for Explosion(0LL);
          uint64_t v149 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
          swift_allocError(v148, v149, 0LL, 0LL);
          uint64_t v150 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x426567616D496F4ELL,  0xED00007265666675LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
          swift_willThrow(v150);

          (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v246, v147);
          goto LABEL_58;
        }

        int v52 = (void *)v51;
        uint64_t v243 = v37;
        os_log_type_t v53 = static os_log_type_t.info.getter(v51);
        id v54 = (os_log_s *)static OS_os_log.videoPreviewUnpacker.getter();
        if (os_log_type_enabled(v54, v53))
        {
          uint64_t v55 = swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)uint64_t v55 = 134217984;
          uint64_t v38 = *v173;
          *(void *)(v55 + 4) = *v173;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  v53,  "BlastDoor processing thumbnail %ld",  (uint8_t *)v55,  0xCu);
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        unsigned int v197 = *((unsigned __int8 *)v3 + 9);
        int toRangea = *(_DWORD *)(v0 + 1784);
        unsigned int v201 = *((unsigned __int8 *)v3 + 8);
        uint64_t v193 = *(void *)(v0 + 1496);
        uint64_t v205 = *(void *)(v0 + 1376);
        uint64_t v209 = *(void *)(v0 + 1360);
        uint64_t v213 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1512);
        uint64_t v56 = *(void *)(v0 + 1272);
        uint64_t v57 = *(void *)(v0 + 1264);
        uint64_t v58 = *(void *)(v0 + 1248);
        uint64_t v59 = *(void *)(v0 + 1240);
        uint64_t v176 = *(void *)(v0 + 1232);
        uint64_t v177 = *(void *)(v0 + 1216);
        uint64_t v60 = *(void *)(v0 + 1208);
        uint64_t v61 = *(void *)(v0 + 1200);
        uint64_t v178 = *(void *)(v0 + 1192);
        uint64_t v179 = *(void *)(v0 + 1176);
        uint64_t v175 = *(void *)(v0 + 1168);
        uint64_t v181 = *(void *)(v0 + 1160);
        uint64_t v183 = *(void *)(v0 + 1144);

        uint64_t v62 = CMSampleBufferRef.presentationTimeStamp.getter();
        double v63 = CMTime.seconds.getter(v62);
        type metadata accessor for CVBuffer(0LL);
        *((void *)&v249 + 1) = v64;
        uint64_t v250 = &protocol witness table for CVBufferRef;
        uint64_t v247 = v52;
        uint64_t v65 = type metadata accessor for Image.Encoding(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))(v60, 1LL, 1LL, v65);
        id v66 = v52;
        Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v247, 0LL, 1LL, v60);
        uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v171 + 16);
        v67(v57, v56, v58);
        VideoPreview.VideoFormat.init(trackInfo:)(v57);
        v67(v57, v56, v58);
        VideoPreview.AudioFormat.init(trackInfo:)(v57);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v240 + 16))(v176, v59, v177);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v236 + 16))(v178, v61, v179);
        uint64_t v1 = v181;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v232 + 16))(v181, v175, v183);
        uint64_t v68 = VideoPreview.init(image:isAutoloop:frame:timestamp:trackCount:videoFormat:audioFormat:videoIsMonoskiAsset:)( v176,  v197,  v38,  v193,  v178,  v181,  v201,  v63);
        VideoPreview.Constraints.frameConstraints.getter(v68);
        int v69 = v213(v205, v209);
        os_log_type_t v70 = *(void **)(v0 + 1712);
        uint64_t v174 = v66;
        if (v69 == toRangea)
        {
          uint64_t v182 = *(void **)(v0 + 1656);
          uint64_t v186 = *(void **)(v0 + 1504);
          uint64_t v151 = *(void *)(v0 + 1376);
          uint64_t v152 = *(void *)(v0 + 1360);
          toRanged = *(CMTimeRange **)(v0 + 1248);
          uint64_t v225 = *(void *)(v0 + 1272);
          uint64_t v212 = *(void *)(v0 + 1240);
          uint64_t v217 = *(void *)(v0 + 1256);
          uint64_t v204 = *(void *)(v0 + 1200);
          uint64_t v208 = *(void *)(v0 + 1216);
          uint64_t v196 = *(void *)(v0 + 1168);
          uint64_t v200 = *(void *)(v0 + 1176);
          uint64_t v189 = *(void **)(v0 + 1472);
          uint64_t v192 = *(void *)(v0 + 1144);
          uint64_t v153 = *(void *)(v0 + 1136);
          uint64_t v154 = *(void *)(v0 + 1128);
          uint64_t v155 = *(void *)(v0 + 1112);
          uint64_t v156 = *(void *)(v0 + 1104);
          uint64_t v157 = *(void *)(v0 + 1080);
          uint64_t v180 = *(void *)(v0 + 1088);
          __n128 v158 = swift_bridgeObjectRelease(*(void *)(v0 + 1704));
          uint64_t v159 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v172 + 8))(v151, v152, v158);
          uint64_t v160 = static os_log_type_t.info.getter(v159);
          uint64_t v161 = (void *)static OS_os_log.videoPreviewUnpacker.getter();
          os_log(_:dso:log:_:_:)( v160,  &_mh_execute_header,  v161,  "This was a single frame request - handling continuation",  55LL,  2LL,  &_swiftEmptyArrayStorage);

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16))(v154, v153, v155);
          uint64_t v162 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
          SessionSchemaResult.init(_:lastResult:)(v154, 1LL, v155, v162);
          uint64_t v163 = sub_10000E624(&qword_1000B0280);
          AsyncThrowingStream.Continuation.yield(_:)(v157, v163);
          (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v156, v180);
          *(void *)(v0 + 96_Block_object_dispose(va, 8) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 968, v163);

          (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v153, v155);
          (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v196, v192);
          (*(void (**)(uint64_t, uint64_t))(v236 + 8))(v204, v200);
          (*(void (**)(uint64_t, uint64_t))(v240 + 8))(v212, v208);
          (*(void (**)(uint64_t, CMTimeRange *))(v217 + 8))(v225, toRanged);
          goto LABEL_63;
        }

        (*(void (**)(void, void))(v172 + 8))(*(void *)(v0 + 1376), *(void *)(v0 + 1360));
        id v33 = [v70 copyNextSampleBuffer];

        uint64_t v71 = *(void *)(v0 + 1016);
        BOOL v9 = __OFADD__(v71, 1LL);
        uint64_t v72 = v71 + 1;
        if (v9) {
          goto LABEL_71;
        }
        *uint64_t v173 = v72;
        if (v33) {
          BOOL v74 = *(_DWORD *)(v0 + 1780) != *(_DWORD *)(v0 + 1784) && v72 == *(void *)(v0 + 1600);
        }
        else {
          BOOL v74 = 1LL;
        }
        uint64_t v75 = *(void *)(v0 + 1128);
        uint64_t v76 = *(void *)(v0 + 1112);
        uint64_t v77 = *(void *)(v0 + 1104);
        uint64_t v78 = *(void *)(v0 + 1088);
        uint64_t v79 = *(void *)(v0 + 1080);
        (*(void (**)(uint64_t, void, uint64_t))(v170 + 16))(v75, *(void *)(v0 + 1136), v76);
        uint64_t v80 = sub_10000E9D8( &qword_1000B02C8,  (uint64_t (*)(uint64_t))&type metadata accessor for VideoPreview,  (uint64_t)&protocol conformance descriptor for VideoPreview);
        SessionSchemaResult.init(_:lastResult:)(v75, v74, v76, v80);
        uint64_t v81 = sub_10000E624(&qword_1000B0280);
        AsyncThrowingStream.Continuation.yield(_:)(v79, v81);
        (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v77, v78);
        uint64_t v82 = *(void *)(v0 + 1240);
        uint64_t v228 = *(void *)(v0 + 1216);
        uint64_t v214 = *(void *)(v0 + 1176);
        toRange = *(CMTimeRange **)(v0 + 1200);
        uint64_t v83 = *(void *)(v0 + 1168);
        uint64_t v84 = *(void *)(v0 + 1144);
        uint64_t v85 = *(void *)(v0 + 1136);
        uint64_t v86 = *(void *)(v0 + 1112);
        if (v74)
        {
          *(void *)(v0 + 976) = 0LL;
          AsyncThrowingStream.Continuation.finish(throwing:)(v0 + 976, v81);
        }

        (*(void (**)(uint64_t, uint64_t))(v170 + 8))(v85, v86);
        (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v83, v84);
        (*(void (**)(CMTimeRange *, uint64_t))(v236 + 8))(toRange, v214);
        (*(void (**)(uint64_t, uint64_t))(v240 + 8))(v82, v228);
        uint64_t v3 = (uint64_t *)(v0 + 1796);
        if (!v33)
        {
          uint64_t v164 = *(void **)(v0 + 1712);
          uint64_t v165 = *(void *)(v0 + 1704);
          uint64_t v166 = *(void **)(v0 + 1504);
          uint64_t v167 = *(void **)(v0 + 1472);
          uint64_t v129 = *(void *)(v0 + 1272);
          uint64_t v130 = *(void *)(v0 + 1256);
          uint64_t v131 = *(void *)(v0 + 1248);

          swift_bridgeObjectRelease(v165);
          goto LABEL_62;
        }

        uint64_t v87 = *(void *)(v0 + 1600);
        int v88 = *(_DWORD *)(v0 + 1784);
        int v89 = *(_DWORD *)(v0 + 1780);
        uint64_t v38 = *(void *)(v0 + 1016);
        id v37 = (opaqueCMSampleBuffer *)v33;
        int v39 = v33;
        if (v89 != v88)
        {
          int v39 = v33;
          if (v38 == v87) {
            break;
          }
        }
      }
    }

    uint64_t v124 = *(void **)(v0 + 1712);
    uint64_t v125 = *(void *)(v0 + 1704);
    uint64_t v126 = *(void **)(v0 + 1504);
    uint64_t v127 = v37;
    uint64_t v128 = *(void **)(v0 + 1472);
    uint64_t v129 = *(void *)(v0 + 1272);
    uint64_t v130 = *(void *)(v0 + 1256);
    uint64_t v131 = *(void *)(v0 + 1248);

    swift_bridgeObjectRelease(v125);
LABEL_62:
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v129, v131);
LABEL_63:
    uint64_t v132 = *(void *)(v0 + 1432);
    uint64_t v133 = *(void *)(v0 + 1408);
    uint64_t v134 = *(void *)(v0 + 1400);
    uint64_t v135 = *(void *)(v0 + 1392);
    uint64_t v136 = *(void *)(v0 + 1384);
    uint64_t v137 = *(void *)(v0 + 1376);
    uint64_t v138 = *(void *)(v0 + 1352);
    uint64_t v139 = *(void *)(v0 + 1328);
    uint64_t v140 = *(void *)(v0 + 1320);
    uint64_t v185 = *(void *)(v0 + 1312);
    uint64_t v188 = *(void *)(v0 + 1304);
    uint64_t v191 = *(void *)(v0 + 1296);
    uint64_t v195 = *(void *)(v0 + 1272);
    uint64_t v199 = *(void *)(v0 + 1264);
    uint64_t v203 = *(void *)(v0 + 1240);
    uint64_t v207 = *(void *)(v0 + 1232);
    uint64_t v211 = *(void *)(v0 + 1208);
    uint64_t v216 = *(void *)(v0 + 1200);
    toRangec = *(CMTimeRange **)(v0 + 1192);
    uint64_t v224 = *(void *)(v0 + 1168);
    uint64_t v230 = *(void *)(v0 + 1160);
    uint64_t v234 = *(void *)(v0 + 1136);
    uint64_t v238 = *(void *)(v0 + 1128);
    uint64_t v242 = *(void *)(v0 + 1104);
    uint64_t v245 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1456));
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v137);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    swift_task_dealloc(v140);
    swift_task_dealloc(v185);
    swift_task_dealloc(v188);
    swift_task_dealloc(v191);
    swift_task_dealloc(v195);
    swift_task_dealloc(v199);
    swift_task_dealloc(v203);
    swift_task_dealloc(v207);
    swift_task_dealloc(v211);
    swift_task_dealloc(v216);
    swift_task_dealloc(toRangec);
    swift_task_dealloc(v224);
    swift_task_dealloc(v230);
    swift_task_dealloc(v234);
    swift_task_dealloc(v238);
    swift_task_dealloc(v242);
    swift_task_dealloc(v245);
    uint64_t v109 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v90 = *(void **)(v0 + 1712);
    uint64_t v91 = *(void **)(v0 + 1656);
    BOOL v92 = *(void **)(v0 + 1504);
    uint64_t v93 = *(void **)(v0 + 1472);
    uint64_t v94 = *(void *)(v0 + 1272);
    uint64_t v95 = *(void *)(v0 + 1256);
    uint64_t v96 = *(void *)(v0 + 1248);
    swift_bridgeObjectRelease(*(void *)(v0 + 1704));
    uint64_t v97 = type metadata accessor for Explosion(0LL);
    uint64_t v98 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v97, v98, 0LL, 0LL);
    uint64_t v99 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008AEA0LL,  0x73656D6172466F4ELL,  0xE800000000000000LL,  0xD000000000000014LL,  0x800000010008E2D0LL);
    swift_willThrow(v99);

    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
LABEL_58:
    uint64_t v100 = *(void *)(v0 + 1432);
    uint64_t v101 = *(void *)(v0 + 1408);
    uint64_t v102 = *(void *)(v0 + 1400);
    uint64_t v103 = *(void *)(v0 + 1392);
    uint64_t v104 = *(void *)(v0 + 1384);
    uint64_t v105 = *(void *)(v0 + 1376);
    uint64_t v106 = *(void *)(v0 + 1352);
    uint64_t v107 = *(void *)(v0 + 1328);
    uint64_t v108 = *(void *)(v0 + 1320);
    uint64_t v184 = *(void *)(v0 + 1312);
    uint64_t v187 = *(void *)(v0 + 1304);
    uint64_t v190 = *(void *)(v0 + 1296);
    uint64_t v194 = *(void *)(v0 + 1272);
    uint64_t v198 = *(void *)(v0 + 1264);
    uint64_t v202 = *(void *)(v0 + 1240);
    uint64_t v206 = *(void *)(v0 + 1232);
    uint64_t v210 = *(void *)(v0 + 1208);
    uint64_t v215 = *(void *)(v0 + 1200);
    toRangeb = *(CMTimeRange **)(v0 + 1192);
    uint64_t v223 = *(void *)(v0 + 1168);
    uint64_t v229 = *(void *)(v0 + 1160);
    uint64_t v233 = *(void *)(v0 + 1136);
    uint64_t v237 = *(void *)(v0 + 1128);
    uint64_t v241 = *(void *)(v0 + 1104);
    uint64_t v244 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1456));
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v184);
    swift_task_dealloc(v187);
    swift_task_dealloc(v190);
    swift_task_dealloc(v194);
    swift_task_dealloc(v198);
    swift_task_dealloc(v202);
    swift_task_dealloc(v206);
    swift_task_dealloc(v210);
    swift_task_dealloc(v215);
    swift_task_dealloc(toRangeb);
    swift_task_dealloc(v223);
    swift_task_dealloc(v229);
    swift_task_dealloc(v233);
    swift_task_dealloc(v237);
    swift_task_dealloc(v241);
    swift_task_dealloc(v244);
    uint64_t v109 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v109();
}

    CMTimeValue v10 = 0;
    goto LABEL_39;
  }

  if (a1 != 45)
  {
    CFDictionaryRef v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      uint64_t v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        uint64_t v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        uint64_t v14 = __CFADD__(10 * v8, v21);
        CFDictionaryRef v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        CMTimeValue v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }

    goto LABEL_38;
  }

  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      uint64_t v2 = 0LL;
      CFDictionaryRef v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        uint64_t v11 = v4 - 2;
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            id v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            uint64_t v14 = 10 * v8 >= v13;
            CFDictionaryRef v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            CMTimeValue v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }

        goto LABEL_38;
      }

      goto LABEL_53;
    }

uint64_t sub_100027E50()
{
  uint64_t v1 = *(void **)(v0 + 1472);
  swift_willThrow();

  uint64_t v2 = *(void *)(v0 + 1432);
  uint64_t v3 = *(void *)(v0 + 1408);
  uint64_t v4 = *(void *)(v0 + 1400);
  uint64_t v5 = *(void *)(v0 + 1392);
  uint64_t v6 = *(void *)(v0 + 1384);
  uint64_t v7 = *(void *)(v0 + 1376);
  uint64_t v8 = *(void *)(v0 + 1352);
  uint64_t v9 = *(void *)(v0 + 1328);
  uint64_t v10 = *(void *)(v0 + 1320);
  uint64_t v12 = *(void *)(v0 + 1312);
  uint64_t v13 = *(void *)(v0 + 1304);
  uint64_t v14 = *(void *)(v0 + 1296);
  uint64_t v15 = *(void *)(v0 + 1272);
  uint64_t v16 = *(void *)(v0 + 1264);
  uint64_t v17 = *(void *)(v0 + 1240);
  uint64_t v18 = *(void *)(v0 + 1232);
  uint64_t v19 = *(void *)(v0 + 1208);
  uint64_t v20 = *(void *)(v0 + 1200);
  uint64_t v21 = *(void *)(v0 + 1192);
  uint64_t v22 = *(void *)(v0 + 1168);
  uint64_t v23 = *(void *)(v0 + 1160);
  uint64_t v24 = *(void *)(v0 + 1136);
  uint64_t v25 = *(void *)(v0 + 1128);
  uint64_t v26 = *(void *)(v0 + 1104);
  uint64_t v27 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028034()
{
  uint64_t v1 = *(void **)(v0 + 1504);
  uint64_t v2 = *(void *)(v0 + 1352);
  uint64_t v3 = *(void *)(v0 + 1344);
  uint64_t v4 = *(void *)(v0 + 1336);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 1432);
  uint64_t v6 = *(void *)(v0 + 1408);
  uint64_t v7 = *(void *)(v0 + 1400);
  uint64_t v8 = *(void *)(v0 + 1392);
  uint64_t v9 = *(void *)(v0 + 1384);
  uint64_t v10 = *(void *)(v0 + 1376);
  uint64_t v11 = *(void *)(v0 + 1352);
  uint64_t v12 = *(void *)(v0 + 1328);
  uint64_t v13 = *(void *)(v0 + 1320);
  uint64_t v15 = *(void *)(v0 + 1312);
  uint64_t v16 = *(void *)(v0 + 1304);
  uint64_t v17 = *(void *)(v0 + 1296);
  uint64_t v18 = *(void *)(v0 + 1272);
  uint64_t v19 = *(void *)(v0 + 1264);
  uint64_t v20 = *(void *)(v0 + 1240);
  uint64_t v21 = *(void *)(v0 + 1232);
  uint64_t v22 = *(void *)(v0 + 1208);
  uint64_t v23 = *(void *)(v0 + 1200);
  uint64_t v24 = *(void *)(v0 + 1192);
  uint64_t v25 = *(void *)(v0 + 1168);
  uint64_t v26 = *(void *)(v0 + 1160);
  uint64_t v27 = *(void *)(v0 + 1136);
  uint64_t v28 = *(void *)(v0 + 1128);
  uint64_t v29 = *(void *)(v0 + 1104);
  uint64_t v30 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028238()
{
  uint64_t v1 = *(void **)(v0 + 1504);
  uint64_t v2 = *(void *)(v0 + 1352);
  uint64_t v3 = *(void *)(v0 + 1344);
  uint64_t v4 = *(void *)(v0 + 1336);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 1432);
  uint64_t v6 = *(void *)(v0 + 1408);
  uint64_t v7 = *(void *)(v0 + 1400);
  uint64_t v8 = *(void *)(v0 + 1392);
  uint64_t v9 = *(void *)(v0 + 1384);
  uint64_t v10 = *(void *)(v0 + 1376);
  uint64_t v11 = *(void *)(v0 + 1352);
  uint64_t v12 = *(void *)(v0 + 1328);
  uint64_t v13 = *(void *)(v0 + 1320);
  uint64_t v15 = *(void *)(v0 + 1312);
  uint64_t v16 = *(void *)(v0 + 1304);
  uint64_t v17 = *(void *)(v0 + 1296);
  uint64_t v18 = *(void *)(v0 + 1272);
  uint64_t v19 = *(void *)(v0 + 1264);
  uint64_t v20 = *(void *)(v0 + 1240);
  uint64_t v21 = *(void *)(v0 + 1232);
  uint64_t v22 = *(void *)(v0 + 1208);
  uint64_t v23 = *(void *)(v0 + 1200);
  uint64_t v24 = *(void *)(v0 + 1192);
  uint64_t v25 = *(void *)(v0 + 1168);
  uint64_t v26 = *(void *)(v0 + 1160);
  uint64_t v27 = *(void *)(v0 + 1136);
  uint64_t v28 = *(void *)(v0 + 1128);
  uint64_t v29 = *(void *)(v0 + 1104);
  uint64_t v30 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002843C()
{
  uint64_t v1 = *(void **)(v0 + 1504);

  uint64_t v2 = *(void *)(v0 + 1432);
  uint64_t v3 = *(void *)(v0 + 1408);
  uint64_t v4 = *(void *)(v0 + 1400);
  uint64_t v5 = *(void *)(v0 + 1392);
  uint64_t v6 = *(void *)(v0 + 1384);
  uint64_t v7 = *(void *)(v0 + 1376);
  uint64_t v8 = *(void *)(v0 + 1352);
  uint64_t v9 = *(void *)(v0 + 1328);
  uint64_t v10 = *(void *)(v0 + 1320);
  uint64_t v12 = *(void *)(v0 + 1312);
  uint64_t v13 = *(void *)(v0 + 1304);
  uint64_t v14 = *(void *)(v0 + 1296);
  uint64_t v15 = *(void *)(v0 + 1272);
  uint64_t v16 = *(void *)(v0 + 1264);
  uint64_t v17 = *(void *)(v0 + 1240);
  uint64_t v18 = *(void *)(v0 + 1232);
  uint64_t v19 = *(void *)(v0 + 1208);
  uint64_t v20 = *(void *)(v0 + 1200);
  uint64_t v21 = *(void *)(v0 + 1192);
  uint64_t v22 = *(void *)(v0 + 1168);
  uint64_t v23 = *(void *)(v0 + 1160);
  uint64_t v24 = *(void *)(v0 + 1136);
  uint64_t v25 = *(void *)(v0 + 1128);
  uint64_t v26 = *(void *)(v0 + 1104);
  uint64_t v27 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028624()
{
  uint64_t v1 = *(void **)(v0 + 1504);
  uint64_t v2 = *(void *)(v0 + 1272);
  uint64_t v3 = *(void *)(v0 + 1256);
  uint64_t v4 = *(void *)(v0 + 1248);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v0 + 1432);
  uint64_t v6 = *(void *)(v0 + 1408);
  uint64_t v7 = *(void *)(v0 + 1400);
  uint64_t v8 = *(void *)(v0 + 1392);
  uint64_t v9 = *(void *)(v0 + 1384);
  uint64_t v10 = *(void *)(v0 + 1376);
  uint64_t v11 = *(void *)(v0 + 1352);
  uint64_t v12 = *(void *)(v0 + 1328);
  uint64_t v13 = *(void *)(v0 + 1320);
  uint64_t v15 = *(void *)(v0 + 1312);
  uint64_t v16 = *(void *)(v0 + 1304);
  uint64_t v17 = *(void *)(v0 + 1296);
  uint64_t v18 = *(void *)(v0 + 1272);
  uint64_t v19 = *(void *)(v0 + 1264);
  uint64_t v20 = *(void *)(v0 + 1240);
  uint64_t v21 = *(void *)(v0 + 1232);
  uint64_t v22 = *(void *)(v0 + 1208);
  uint64_t v23 = *(void *)(v0 + 1200);
  uint64_t v24 = *(void *)(v0 + 1192);
  uint64_t v25 = *(void *)(v0 + 1168);
  uint64_t v26 = *(void *)(v0 + 1160);
  uint64_t v27 = *(void *)(v0 + 1136);
  uint64_t v28 = *(void *)(v0 + 1128);
  uint64_t v29 = *(void *)(v0 + 1104);
  uint64_t v30 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028828()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1672);
  uint64_t v2 = *(void **)(v0 + 1504);
  uint64_t v3 = *(void **)(v0 + 1472);
  uint64_t v4 = *(void *)(v0 + 1312);
  uint64_t v5 = *(void *)(v0 + 1280);
  uint64_t v6 = *(void *)(v0 + 1272);
  uint64_t v7 = *(void *)(v0 + 1256);
  uint64_t v8 = *(void *)(v0 + 1248);

  v1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  uint64_t v9 = *(void *)(v0 + 1432);
  uint64_t v10 = *(void *)(v0 + 1408);
  uint64_t v11 = *(void *)(v0 + 1400);
  uint64_t v12 = *(void *)(v0 + 1392);
  uint64_t v13 = *(void *)(v0 + 1384);
  uint64_t v14 = *(void *)(v0 + 1376);
  uint64_t v15 = *(void *)(v0 + 1352);
  uint64_t v16 = *(void *)(v0 + 1328);
  uint64_t v17 = *(void *)(v0 + 1320);
  uint64_t v19 = *(void *)(v0 + 1312);
  uint64_t v20 = *(void *)(v0 + 1304);
  uint64_t v21 = *(void *)(v0 + 1296);
  uint64_t v22 = *(void *)(v0 + 1272);
  uint64_t v23 = *(void *)(v0 + 1264);
  uint64_t v24 = *(void *)(v0 + 1240);
  uint64_t v25 = *(void *)(v0 + 1232);
  uint64_t v26 = *(void *)(v0 + 1208);
  uint64_t v27 = *(void *)(v0 + 1200);
  uint64_t v28 = *(void *)(v0 + 1192);
  uint64_t v29 = *(void *)(v0 + 1168);
  uint64_t v30 = *(void *)(v0 + 1160);
  uint64_t v31 = *(void *)(v0 + 1136);
  uint64_t v32 = *(void *)(v0 + 1128);
  uint64_t v33 = *(void *)(v0 + 1104);
  uint64_t v34 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028A4C()
{
  uint64_t v1 = *(void **)(v0 + 1712);
  uint64_t v2 = *(void **)(v0 + 1504);
  uint64_t v3 = *(void **)(v0 + 1472);
  uint64_t v4 = *(void *)(v0 + 1272);
  uint64_t v5 = *(void *)(v0 + 1256);
  uint64_t v6 = *(void *)(v0 + 1248);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = *(void *)(v0 + 1432);
  uint64_t v8 = *(void *)(v0 + 1408);
  uint64_t v9 = *(void *)(v0 + 1400);
  uint64_t v10 = *(void *)(v0 + 1392);
  uint64_t v11 = *(void *)(v0 + 1384);
  uint64_t v12 = *(void *)(v0 + 1376);
  uint64_t v13 = *(void *)(v0 + 1352);
  uint64_t v14 = *(void *)(v0 + 1328);
  uint64_t v15 = *(void *)(v0 + 1320);
  uint64_t v17 = *(void *)(v0 + 1312);
  uint64_t v18 = *(void *)(v0 + 1304);
  uint64_t v19 = *(void *)(v0 + 1296);
  uint64_t v20 = *(void *)(v0 + 1272);
  uint64_t v21 = *(void *)(v0 + 1264);
  uint64_t v22 = *(void *)(v0 + 1240);
  uint64_t v23 = *(void *)(v0 + 1232);
  uint64_t v24 = *(void *)(v0 + 1208);
  uint64_t v25 = *(void *)(v0 + 1200);
  uint64_t v26 = *(void *)(v0 + 1192);
  uint64_t v27 = *(void *)(v0 + 1168);
  uint64_t v28 = *(void *)(v0 + 1160);
  uint64_t v29 = *(void *)(v0 + 1136);
  uint64_t v30 = *(void *)(v0 + 1128);
  uint64_t v31 = *(void *)(v0 + 1104);
  uint64_t v32 = *(void *)(v0 + 1080);
  swift_task_dealloc(*(void *)(v0 + 1456));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028C60()
{
  uint64_t v1 = *(void *)(v0 + 1752);
  uint64_t v2 = *(void *)(v0 + 1744);
  uint64_t v3 = *(void **)(v0 + 1656);
  uint64_t v4 = *(void *)(v0 + 1796);
  __C::CMTime v205 = CMTime.init(value:timescale:)(1LL, (int)*(float *)(v0 + 1792));
  *(void *)(v0 + 384) = v2;
  *(void *)(v0 + 392) = v4;
  *(void *)(v0 + 400) = v1;
  *(__C::CMTime *)(v0 + 40_Block_object_dispose(va, 8) = v205;
  [v3 setTimeRange:v0 + 384];
  uint64_t v5 = *(void **)(v0 + 1712);
  [*(id *)(v0 + 1656) startReading];
  *(void *)(v0 + 1016) = 0LL;
  id v6 = [v5 copyNextSampleBuffer];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)(v0 + 1600);
    int v9 = *(_DWORD *)(v0 + 1784);
    int v10 = *(_DWORD *)(v0 + 1780);
    uint64_t v11 = (opaqueCMSampleBuffer *)v6;
    uint64_t v133 = (uint64_t *)(v0 + 1016);
    swift_beginAccess(v0 + 1016, v0 + 840, 1LL, 0LL);
    uint64_t v12 = *(void *)(v0 + 1016);
    if (v10 == v9 || v12 != v8)
    {
      uint64_t v131 = *(void *)(v0 + 1368);
      uint64_t v132 = *(void *)(v0 + 1256);
      uint64_t v193 = *(void *)(v0 + 1184);
      uint64_t v196 = *(void *)(v0 + 1224);
      uint64_t v190 = *(void *)(v0 + 1152);
      uint64_t v129 = *(void *)(v0 + 1096);
      uint64_t v130 = *(void *)(v0 + 1120);
      uint64_t v13 = v7;
      while (1)
      {
        if (!CMSampleBufferGetNumSamples(v11))
        {
          uint64_t v14 = *(void *)(v0 + 1600);
          int v15 = *(_DWORD *)(v0 + 1784);
          int v16 = *(_DWORD *)(v0 + 1780);

          uint64_t v12 = *(void *)(v0 + 1016);
          uint64_t v17 = v13;
          uint64_t v18 = v17;
          if (v16 != v15 && v12 == v14)
          {
            id v7 = v13;
            uint64_t v11 = v17;
            break;
          }

          if (!CMSampleBufferGetNumSamples(v17))
          {
            while (1)
            {
              uint64_t v20 = *(void *)(v0 + 1600);
              int v21 = *(_DWORD *)(v0 + 1784);
              int v22 = *(_DWORD *)(v0 + 1780);

              uint64_t v12 = *(void *)(v0 + 1016);
              uint64_t v23 = v18;
              uint64_t v11 = v23;
              if (v22 != v21 && v12 == v20) {
                break;
              }
              if (CMSampleBufferGetNumSamples(v23)) {
                goto LABEL_17;
              }
            }

            id v7 = v13;
            break;
          }

          uint64_t v11 = v18;
        }

uint64_t sub_100029A6C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_10000E624(&qword_1000AFFC8);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *id v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v11 = sub_100018290(0LL, &qword_1000B02F8, &OBJC_CLASS___AVAssetTrack_ptr);
    **(void **)(*(void *)(v3 + 64) + 4Hasher.init(_seed:)(v1, 0LL) = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v11);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_100029B18(uint64_t a1)
{
  return sub_10002224C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100029B20()
{
  uint64_t v17 = type metadata accessor for File(0LL);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for VideoPreview.Constraints(0LL);
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = sub_10000E624(&qword_1000B0280);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100029C24(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for File(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for VideoPreview.Constraints(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(sub_10000E624(&qword_1000B0280) - 8) + 80LL);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v5;
  uint64_t v15 = v1 + v8;
  uint64_t v16 = v1 + (v11 & ~v10);
  uint64_t v17 = (void *)swift_task_alloc(dword_1000B0294);
  *(void *)(v2 + 16) = v17;
  void *v17 = v2;
  v17[1] = sub_100029D04;
  return sub_100022490(a1, v12, v13, v14, v15, v16);
}

uint64_t sub_100029D04()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100029D4C()
{
  uint64_t v17 = type metadata accessor for File(0LL);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for VideoPreview.Constraints(0LL);
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = sub_10000E624(&qword_1000B0280);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100029E48(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for File(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for VideoPreview.Constraints(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(sub_10000E624(&qword_1000B0280) - 8) + 80LL);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1 + v5;
  uint64_t v13 = v1 + v8;
  uint64_t v14 = v1 + (v11 & ~v10);
  uint64_t v15 = (void *)swift_task_alloc(dword_1000B02A4);
  *(void *)(v2 + 16) = v15;
  *uint64_t v15 = v2;
  v15[1] = sub_100029D04;
  return sub_100022BC4(a1, v12, v13, v14);
}

Swift::Int sub_100029F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000E624(&qword_1000B0300);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_24;
    }

    if (__OFADD__(v15++, 1LL)) {
      goto LABEL_43;
    }
    if (v15 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v15);
    if (!v25)
    {
      int64_t v26 = v15 + 1;
      if (v15 + 1 >= v12)
      {
LABEL_34:
        swift_release(v5);
        uint64_t v3 = v36;
        if ((v38 & 1) == 0) {
          goto LABEL_41;
        }
        goto LABEL_37;
      }

      unint64_t v25 = *(void *)(v37 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          int64_t v15 = v26 + 1;
          if (__OFADD__(v26, 1LL)) {
            break;
          }
          if (v15 >= v12) {
            goto LABEL_34;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v15);
          ++v26;
          if (v25) {
            goto LABEL_23;
          }
        }

uint64_t sub_10002A204(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_10000E624(&qword_1000B0020);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

LABEL_24:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      unint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if ((a2 & 1) != 0)
      {
        sub_100018278(v25, v38);
      }

      else
      {
        sub_10001533C((uint64_t)v25, (uint64_t)v38);
        swift_bridgeObjectRetain(v23);
      }

      Hasher.init(_seed:)(v37, *(void *)(v8 + 40));
      String.hash(into:)(v37, v24, v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0LL;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }

        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }

      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      *uint64_t v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_100018278(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  uint64_t *v3 = v8;
  return result;
}

        BOOL v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        int v48 = v47;
        BOOL v49 = type metadata accessor for Explosion(0LL);
        uint64_t v50 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
        swift_allocError(v49, v50, 0LL, 0LL);
        uint64_t v51 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000045LL,  0x800000010008C430LL,  0x4B676E697373694DLL,  0xEA00000000007965LL,  v46,  v48);
        swift_willThrow(v51);
LABEL_25:
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        return sub_100010D60(v110);
      }

      swift_bridgeObjectRelease(a1);
    }

    else
    {
      swift_bridgeObjectRelease(a1);
      sub_100012EF8((uint64_t)&v108, &qword_1000B0018);
    }

    uint64_t v45 = v32;
    goto LABEL_24;
  }

  swift_bridgeObjectRelease(a1);
  sub_100012EF8((uint64_t)v4, &qword_1000AFF60);
LABEL_10:
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  unint64_t v28 = v27;
  char v29 = type metadata accessor for Explosion(0LL);
  unint64_t v30 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v29, v30, 0LL, 0LL);
  BOOL v31 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000045LL,  0x800000010008C430LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  v26,  v28);
  swift_willThrow(v31);
  return sub_100010D60(v110);
}

_OWORD *sub_10002A500(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100067C94(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        int64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_100010D60(v19);
        return sub_100018278(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10002A828();
      goto LABEL_7;
    }

    sub_10002A204(v15, a4 & 1);
    unint64_t v21 = sub_100067C94(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10002A630(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_10002A630(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100018278(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void sub_10002A698()
{
  uint64_t v1 = v0;
  sub_10000E624(&qword_1000B0300);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    if (__OFADD__(v9++, 1LL)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    if (!v21) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    char v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    int64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *int64_t v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }

  int64_t v22 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
}

void *sub_10002A828()
{
  uint64_t v1 = v0;
  sub_10000E624(&qword_1000B0020);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }

  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10001533C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_100018278(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

ValueMetadata *type metadata accessor for DeliveredQuietlyReceiptUnpacker()
{
  return &type metadata for DeliveredQuietlyReceiptUnpacker;
}

unint64_t sub_10002AA1C(uint64_t a1)
{
  unint64_t result = sub_10000E7FC();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_10002AA44()
{
  unint64_t result = qword_1000B0308;
  if (!qword_1000B0308)
  {
    uint64_t v1 = type metadata accessor for DeliveredQuietlyReceipt(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DeliveredQuietlyReceipt, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0308);
  }

  return result;
}

uint64_t sub_10002AA8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000752F8(a1, a2, a3);
}

ValueMetadata *type metadata accessor for LinkPresentationUnpacker()
{
  return &type metadata for LinkPresentationUnpacker;
}

uint64_t sub_10002AAB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v580 = a1;
  uint64_t v445 = type metadata accessor for IndexSet(0LL);
  uint64_t v444 = *(void *)(v445 - 8);
  __chkstk_darwin(v445);
  v442 = (char *)&v419 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = sub_10000E624(&qword_1000B0318);
  __chkstk_darwin(v2);
  uint64_t v439 = (uint64_t)&v419 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v443 = type metadata accessor for LinkPresentation.SharedObjectMetadata(0LL);
  uint64_t v441 = *(void *)(v443 - 8);
  __chkstk_darwin(v443);
  v440 = (char *)&v419 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v438 = type metadata accessor for LinkPresentation.PhotosMomentMetadata(0LL);
  uint64_t v437 = *(void *)(v438 - 8);
  __chkstk_darwin(v438);
  v436 = (char *)&v419 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v435 = type metadata accessor for LinkPresentation.AppleTVMetadata(0LL);
  uint64_t v434 = *(void *)(v435 - 8);
  __chkstk_darwin(v435);
  v433 = (char *)&v419 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v432 = type metadata accessor for LinkPresentation.StocksMetadata(0LL);
  uint64_t v431 = *(void *)(v432 - 8);
  __chkstk_darwin(v432);
  v430 = (char *)&v419 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v450 = type metadata accessor for LinkPresentation.FileMetadata(0LL);
  uint64_t v449 = *(void *)(v450 - 8);
  __chkstk_darwin(v450);
  v455 = (char *)&v419 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v463 = type metadata accessor for LinkPresentation.MapCollectionPublisherMetadata(0LL);
  uint64_t v462 = *(void *)(v463 - 8);
  __chkstk_darwin(v463);
  v461 = (char *)&v419 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v471 = type metadata accessor for LinkPresentation.MapCollectionMetadata(0LL);
  uint64_t v470 = *(void *)(v471 - 8);
  __chkstk_darwin(v471);
  v479 = (char *)&v419 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v478 = type metadata accessor for LinkPresentation.MapMetadata(0LL);
  uint64_t v477 = *(void *)(v478 - 8);
  __chkstk_darwin(v478);
  v486 = (char *)&v419 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v485 = type metadata accessor for LinkPresentation.GameCenterInvitationMetadata(0LL);
  uint64_t v484 = *(void *)(v485 - 8);
  __chkstk_darwin(v485);
  v487 = (char *)&v419 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v492 = type metadata accessor for LinkPresentation.CloudFamilyInvitationMetadata(0LL);
  uint64_t v491 = *(void *)(v492 - 8);
  __chkstk_darwin(v492);
  v490 = (char *)&v419 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v498 = type metadata accessor for LinkPresentation.CloudSharingMetadata(0LL);
  uint64_t v497 = *(void *)(v498 - 8);
  __chkstk_darwin(v498);
  v499 = (char *)&v419 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v504 = type metadata accessor for LinkPresentation.MovieBundleMetadata(0LL);
  uint64_t v503 = *(void *)(v504 - 8);
  __chkstk_darwin(v504);
  v502 = (char *)&v419 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v509 = type metadata accessor for LinkPresentation.MovieMetadata(0LL);
  uint64_t v508 = *(void *)(v509 - 8);
  __chkstk_darwin(v509);
  v510 = (char *)&v419 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v519 = type metadata accessor for LinkPresentation.TVShowMetadata(0LL);
  uint64_t v518 = *(void *)(v519 - 8);
  __chkstk_darwin(v519);
  v517 = (char *)&v419 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v516 = type metadata accessor for LinkPresentation.TVSeasonMetadata(0LL);
  uint64_t v515 = *(void *)(v516 - 8);
  __chkstk_darwin(v516);
  v514 = (char *)&v419 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v524 = type metadata accessor for LinkPresentation.TVEpisodeMetadata(0LL);
  uint64_t v523 = *(void *)(v524 - 8);
  __chkstk_darwin(v524);
  v522 = (char *)&v419 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v529 = type metadata accessor for LinkPresentation.PodcastMetadata(0LL);
  uint64_t v528 = *(void *)(v529 - 8);
  __chkstk_darwin(v529);
  v527 = (char *)&v419 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v534 = type metadata accessor for LinkPresentation.PodcastEpisodeMetadata(0LL);
  uint64_t v533 = *(void *)(v534 - 8);
  __chkstk_darwin(v534);
  v532 = (char *)&v419 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v539 = type metadata accessor for LinkPresentation.AudioBookMetadata(0LL);
  uint64_t v538 = *(void *)(v539 - 8);
  __chkstk_darwin(v539);
  v537 = (char *)&v419 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v545 = type metadata accessor for LinkPresentation.BookMetadata(0LL);
  uint64_t v544 = *(void *)(v545 - 8);
  __chkstk_darwin(v545);
  v543 = (char *)&v419 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v556 = type metadata accessor for LinkPresentation.SoftwareMetadata(0LL);
  uint64_t v555 = *(void *)(v556 - 8);
  __chkstk_darwin(v556);
  v549 = (char *)&v419 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v554 = type metadata accessor for LinkPresentation.RadioMetadata(0LL);
  uint64_t v553 = *(void *)(v554 - 8);
  __chkstk_darwin(v554);
  v552 = (char *)&v419 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for LinkPresentation.PlaylistMetadata(0LL);
  uint64_t v560 = *(void *)(v26 - 8);
  uint64_t v561 = v26;
  __chkstk_darwin(v26);
  v559 = (char *)&v419 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for LinkPresentation.ArtistMetadata(0LL);
  uint64_t v564 = *(void *)(v28 - 8);
  uint64_t v565 = v28;
  __chkstk_darwin(v28);
  v563 = (char *)&v419 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for LinkPresentation.MusicVideoMetadata(0LL);
  uint64_t v568 = *(void *)(v30 - 8);
  uint64_t v569 = v30;
  __chkstk_darwin(v30);
  v567 = (char *)&v419 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for LinkPresentation.AlbumMetadata(0LL);
  uint64_t v573 = *(void *)(v32 - 8);
  uint64_t v574 = v32;
  __chkstk_darwin(v32);
  v572 = (char *)&v419 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = sub_10000E624(&qword_1000B0320);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v429 = (uint64_t)&v419 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v35);
  v428 = (char *)&v419 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v427 = (char *)&v419 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v426 = (char *)&v419 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v448 = (char *)&v419 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v447 = (uint64_t)&v419 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v460 = (char *)&v419 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v469 = (char *)&v419 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v468 = (uint64_t)&v419 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v467 = (uint64_t)&v419 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v466 = (uint64_t)&v419 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v476 = (char *)&v419 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v475 = (uint64_t)&v419 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  uint64_t v474 = (uint64_t)&v419 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v473 = (uint64_t)&v419 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v483 = (char *)&v419 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  uint64_t v482 = (uint64_t)&v419 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v489 = (char *)&v419 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v496 = (char *)&v419 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  uint64_t v495 = (uint64_t)&v419 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v501 = (char *)&v419 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v507 = (char *)&v419 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  uint64_t v506 = (uint64_t)&v419 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  v513 = (char *)&v419 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v512 = (char *)&v419 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v521 = (char *)&v419 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v526 = (char *)&v419 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v531 = (char *)&v419 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v536 = (char *)&v419 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  v542 = (char *)&v419 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  v548 = (char *)&v419 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  v547 = (char *)&v419 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v551 = (char *)&v419 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  v558 = (char *)&v419 - v102;
  uint64_t v103 = __chkstk_darwin(v101);
  v562 = (char *)&v419 - v104;
  uint64_t v105 = __chkstk_darwin(v103);
  v566 = (char *)&v419 - v106;
  uint64_t v107 = __chkstk_darwin(v105);
  v571 = (char *)&v419 - v108;
  __chkstk_darwin(v107);
  v575 = (char *)&v419 - v109;
  uint64_t v110 = type metadata accessor for LinkPresentation.PlaceholderImage(0LL);
  uint64_t v577 = *(void *)(v110 - 8);
  uint64_t v578 = v110;
  uint64_t v111 = __chkstk_darwin(v110);
  v425 = (char *)&v419 - ((v112 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v113 = __chkstk_darwin(v111);
  v423 = (char *)&v419 - v114;
  uint64_t v115 = __chkstk_darwin(v113);
  v422 = (char *)&v419 - v116;
  uint64_t v117 = __chkstk_darwin(v115);
  v421 = (char *)&v419 - v118;
  uint64_t v119 = __chkstk_darwin(v117);
  v424 = (char *)&v419 - v120;
  uint64_t v121 = __chkstk_darwin(v119);
  v420 = (char *)&v419 - v122;
  uint64_t v123 = __chkstk_darwin(v121);
  v446 = (char *)&v419 - v124;
  uint64_t v125 = __chkstk_darwin(v123);
  v454 = (char *)&v419 - v126;
  uint64_t v127 = __chkstk_darwin(v125);
  v453 = (char *)&v419 - v128;
  uint64_t v129 = __chkstk_darwin(v127);
  v452 = (char *)&v419 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  v451 = (char *)&v419 - v132;
  uint64_t v133 = __chkstk_darwin(v131);
  v459 = (char *)&v419 - v134;
  uint64_t v135 = __chkstk_darwin(v133);
  v458 = (char *)&v419 - v136;
  uint64_t v137 = __chkstk_darwin(v135);
  v457 = (char *)&v419 - v138;
  uint64_t v139 = __chkstk_darwin(v137);
  v456 = (char *)&v419 - v140;
  uint64_t v141 = __chkstk_darwin(v139);
  v465 = (char *)&v419 - v142;
  uint64_t v143 = __chkstk_darwin(v141);
  v464 = (char *)&v419 - v144;
  uint64_t v145 = __chkstk_darwin(v143);
  v472 = (char *)&v419 - v146;
  uint64_t v147 = __chkstk_darwin(v145);
  v481 = (char *)&v419 - v148;
  uint64_t v149 = __chkstk_darwin(v147);
  v480 = (char *)&v419 - v150;
  uint64_t v151 = __chkstk_darwin(v149);
  v488 = (char *)&v419 - v152;
  uint64_t v153 = __chkstk_darwin(v151);
  v494 = (char *)&v419 - v154;
  uint64_t v155 = __chkstk_darwin(v153);
  v493 = (char *)&v419 - v156;
  uint64_t v157 = __chkstk_darwin(v155);
  v500 = (char *)&v419 - v158;
  uint64_t v159 = __chkstk_darwin(v157);
  v505 = (char *)&v419 - v160;
  uint64_t v161 = __chkstk_darwin(v159);
  v511 = (char *)&v419 - v162;
  uint64_t v163 = __chkstk_darwin(v161);
  v520 = (char *)&v419 - v164;
  uint64_t v165 = __chkstk_darwin(v163);
  v525 = (char *)&v419 - v166;
  uint64_t v167 = __chkstk_darwin(v165);
  v530 = (char *)&v419 - v168;
  uint64_t v169 = __chkstk_darwin(v167);
  v535 = (char *)&v419 - v170;
  uint64_t v171 = __chkstk_darwin(v169);
  v570 = (char *)&v419 - v172;
  uint64_t v173 = __chkstk_darwin(v171);
  v541 = (char *)&v419 - v174;
  uint64_t v175 = __chkstk_darwin(v173);
  v540 = (char *)&v419 - v176;
  uint64_t v177 = __chkstk_darwin(v175);
  v546 = (char *)&v419 - v178;
  uint64_t v179 = __chkstk_darwin(v177);
  v550 = (char *)&v419 - v180;
  uint64_t v181 = __chkstk_darwin(v179);
  v557 = (char *)&v419 - v182;
  uint64_t v183 = __chkstk_darwin(v181);
  uint64_t v185 = (char *)&v419 - v184;
  uint64_t v186 = __chkstk_darwin(v183);
  uint64_t v188 = (char *)&v419 - v187;
  __chkstk_darwin(v186);
  uint64_t v190 = (char *)&v419 - v189;
  uint64_t v191 = type metadata accessor for LinkPresentation.SongMetadata(0LL);
  uint64_t v192 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  uint64_t v194 = (char *)&v419 - ((v193 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = type metadata accessor for LinkPresentation.SpecializationMetadata(0LL);
  uint64_t v196 = *(void *)(v195 - 8);
  uint64_t v197 = __chkstk_darwin(v195);
  v419 = (char *)&v419 - ((v198 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = __chkstk_darwin(v197);
  uint64_t v201 = (char **)((char *)&v419 - v200);
  IndexSet.init()(v199);
  (*(void (**)(void *, uint64_t, uint64_t))(v196 + 16))(v201, v579, v195);
  int v202 = (*(uint64_t (**)(void *, uint64_t))(v196 + 88))(v201, v195);
  if (v202 == enum case for LinkPresentation.SpecializationMetadata.songMetadata(_:))
  {
    (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
    uint64_t v203 = (*(uint64_t (**)(char *, void *, uint64_t))(v192 + 32))(v194, v201, v191);
    uint64_t v204 = v575;
    LinkPresentation.SongMetadata.artwork.getter(v203);
    uint64_t v206 = v577;
    uint64_t v205 = v578;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v577 + 48))(v204, 1LL, v578) != 1)
    {
      uint64_t v215 = (*(uint64_t (**)(char *, char *, uint64_t))(v206 + 32))(v190, v204, v205);
      Swift::Int v216 = LinkPresentation.PlaceholderImage.index.getter(v215);
      IndexSet.insert(_:)(v216);
      (*(void (**)(char *, uint64_t))(v206 + 8))(v190, v205);
      return (*(uint64_t (**)(char *, uint64_t))(v192 + 8))(v194, v191);
    }

    (*(void (**)(char *, uint64_t))(v192 + 8))(v194, v191);
    uint64_t v207 = (uint64_t)v204;
    return sub_100012EF8(v207, &qword_1000B0320);
  }

  uint64_t v209 = v577;
  uint64_t v208 = v578;
  if (v202 == enum case for LinkPresentation.SpecializationMetadata.albumMetadata(_:))
  {
    (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
    uint64_t v211 = v572;
    uint64_t v210 = v573;
    uint64_t v212 = v574;
    uint64_t v213 = (*(uint64_t (**)(char *, void *, uint64_t))(v573 + 32))(v572, v201, v574);
    uint64_t v214 = v571;
    LinkPresentation.AlbumMetadata.artwork.getter(v213);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v214, 1LL, v208) == 1)
    {
      (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v212);
LABEL_11:
      uint64_t v207 = (uint64_t)v214;
      return sub_100012EF8(v207, &qword_1000B0320);
    }

    uint64_t v221 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v188, v214, v208);
    Swift::Int v222 = LinkPresentation.PlaceholderImage.index.getter(v221);
    IndexSet.insert(_:)(v222);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v188, v208);
    goto LABEL_14;
  }

  if (v202 == enum case for LinkPresentation.SpecializationMetadata.musicVideoMetadata(_:))
  {
    (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
    uint64_t v219 = v567;
    uint64_t v218 = v568;
    uint64_t v212 = v569;
    uint64_t v220 = (*(uint64_t (**)(char *, void *, uint64_t))(v568 + 32))(v567, v201, v569);
    uint64_t v214 = v566;
    LinkPresentation.MusicVideoMetadata.artwork.getter(v220);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v214, 1LL, v208) == 1)
    {
      (*(void (**)(char *, uint64_t))(v218 + 8))(v219, v212);
      goto LABEL_11;
    }

    uint64_t v227 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v185, v214, v208);
    Swift::Int v228 = LinkPresentation.PlaceholderImage.index.getter(v227);
    IndexSet.insert(_:)(v228);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v185, v208);
    goto LABEL_24;
  }

  if (v202 == enum case for LinkPresentation.SpecializationMetadata.artistMetadata(_:))
  {
    (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
    uint64_t v219 = v563;
    uint64_t v218 = v564;
    uint64_t v212 = v565;
    uint64_t v225 = (*(uint64_t (**)(char *, void *, uint64_t))(v564 + 32))(v563, v201, v565);
    unint64_t v226 = v562;
    LinkPresentation.ArtistMetadata.artwork.getter(v225);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v226, 1LL, v208) != 1)
    {
      uint64_t v233 = v557;
      uint64_t v234 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v557, v226, v208);
      Swift::Int v235 = LinkPresentation.PlaceholderImage.index.getter(v234);
      IndexSet.insert(_:)(v235);
      (*(void (**)(char *, uint64_t))(v209 + 8))(v233, v208);
LABEL_24:
      uint64_t v223 = *(uint64_t (**)(char *, uint64_t))(v218 + 8);
      uint64_t v224 = v219;
      goto LABEL_25;
    }

    (*(void (**)(char *, uint64_t))(v218 + 8))(v219, v212);
LABEL_22:
    uint64_t v207 = (uint64_t)v226;
    return sub_100012EF8(v207, &qword_1000B0320);
  }

  if (v202 != enum case for LinkPresentation.SpecializationMetadata.playlistMetadata(_:))
  {
    if (v202 == enum case for LinkPresentation.SpecializationMetadata.radioMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v210 = v553;
      uint64_t v211 = v552;
      uint64_t v212 = v554;
      uint64_t v237 = (*(uint64_t (**)(char *, void *, uint64_t))(v553 + 32))(v552, v201, v554);
      uint64_t v238 = v551;
      LinkPresentation.RadioMetadata.artwork.getter(v237);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v208) != 1)
      {
        uint64_t v248 = v546;
        uint64_t v249 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v546, v238, v208);
        Swift::Int v250 = LinkPresentation.PlaceholderImage.index.getter(v249);
        IndexSet.insert(_:)(v250);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v248, v208);
LABEL_14:
        uint64_t v223 = *(uint64_t (**)(char *, uint64_t))(v210 + 8);
        uint64_t v224 = v211;
LABEL_25:
        uint64_t v236 = v212;
        return v223(v224, v236);
      }

      (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v212);
LABEL_64:
      uint64_t v207 = (uint64_t)v238;
      return sub_100012EF8(v207, &qword_1000B0320);
    }

    uint64_t v242 = v578;
    if (v202 == enum case for LinkPresentation.SpecializationMetadata.softwareMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v243 = v549;
      uint64_t v244 = (*(uint64_t (**)(char *, void *, uint64_t))(v555 + 32))(v549, v201, v556);
      uint64_t v245 = (uint64_t)v547;
      LinkPresentation.SoftwareMetadata.icon.getter(v244);
      uint64_t v246 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v246(v245, 1LL, v242) == 1)
      {
        uint64_t v247 = sub_100012EF8(v245, &qword_1000B0320);
      }

      else
      {
        uint64_t v256 = v540;
        uint64_t v257 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v540, v245, v242);
        Swift::Int v258 = LinkPresentation.PlaceholderImage.index.getter(v257);
        IndexSet.insert(_:)(v258);
        uint64_t v247 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v256, v242);
      }

      uint64_t v259 = (uint64_t)v548;
      LinkPresentation.SoftwareMetadata.messagesAppIcon.getter(v247);
      if (v246(v259, 1LL, v242) == 1)
      {
        uint64_t v260 = sub_100012EF8(v259, &qword_1000B0320);
      }

      else
      {
        uint64_t v262 = v541;
        uint64_t v263 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v541, v259, v242);
        Swift::Int v264 = LinkPresentation.PlaceholderImage.index.getter(v263);
        IndexSet.insert(_:)(v264);
        uint64_t v260 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v262, v242);
      }

      uint64_t v265 = LinkPresentation.SoftwareMetadata.screenshots.getter(v260);
      if (v265)
      {
        uint64_t v266 = v265;
        uint64_t v267 = *(void *)(v265 + 16);
        uint64_t v268 = v570;
        if (v267)
        {
          uint64_t v269 = v242;
          unint64_t v270 = v265 + ((*(unsigned __int8 *)(v209 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80));
          uint64_t v271 = *(void *)(v209 + 72);
          uint64_t v272 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v209 + 16);
          do
          {
            uint64_t v273 = v272(v268, v270, v269);
            Swift::Int v274 = LinkPresentation.PlaceholderImage.index.getter(v273);
            IndexSet.insert(_:)(v274);
            uint64_t v268 = v570;
            (*(void (**)(char *, uint64_t))(v209 + 8))(v570, v269);
            v270 += v271;
            --v267;
          }

          while (v267);
        }

        swift_bridgeObjectRelease(v266);
        uint64_t v223 = *(uint64_t (**)(char *, uint64_t))(v555 + 8);
        uint64_t v224 = v549;
      }

      else
      {
        uint64_t v223 = *(uint64_t (**)(char *, uint64_t))(v555 + 8);
        uint64_t v224 = v243;
      }

      uint64_t v236 = v556;
      return v223(v224, v236);
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.bookMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v251 = v544;
      uint64_t v252 = v543;
      uint64_t v212 = v545;
      uint64_t v253 = (*(uint64_t (**)(char *, void *, uint64_t))(v544 + 32))(v543, v201, v545);
      uint64_t v238 = v542;
      LinkPresentation.BookMetadata.artwork.getter(v253);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v242) != 1)
      {
        __int128 v254 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v209 + 32);
        uint64_t v255 = &v567;
LABEL_69:
        uint64_t v282 = (uint64_t)*(v255 - 32);
        uint64_t v283 = v254(v282, v238, v242);
        Swift::Int v284 = LinkPresentation.PlaceholderImage.index.getter(v283);
        IndexSet.insert(_:)(v284);
        (*(void (**)(uint64_t, uint64_t))(v209 + 8))(v282, v242);
        uint64_t v223 = *(uint64_t (**)(char *, uint64_t))(v251 + 8);
        uint64_t v224 = v252;
        goto LABEL_25;
      }

      goto LABEL_63;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.audioBookMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v251 = v538;
      uint64_t v252 = v537;
      uint64_t v212 = v539;
      uint64_t v261 = (*(uint64_t (**)(char *, void *, uint64_t))(v538 + 32))(v537, v201, v539);
      uint64_t v238 = v536;
      LinkPresentation.AudioBookMetadata.artwork.getter(v261);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v242) != 1)
      {
        __int128 v254 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v209 + 32);
        uint64_t v255 = &v562;
        goto LABEL_69;
      }

LABEL_63:
      (*(void (**)(char *, uint64_t))(v251 + 8))(v252, v212);
      goto LABEL_64;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.podcastEpisodeMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v251 = v533;
      uint64_t v252 = v532;
      uint64_t v212 = v534;
      uint64_t v275 = (*(uint64_t (**)(char *, void *, uint64_t))(v533 + 32))(v532, v201, v534);
      uint64_t v238 = v531;
      LinkPresentation.PodcastEpisodeMetadata.artwork.getter(v275);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v242) != 1)
      {
        __int128 v254 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v209 + 32);
        uint64_t v255 = &v557;
        goto LABEL_69;
      }

      goto LABEL_63;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.podcastMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v251 = v528;
      uint64_t v252 = v527;
      uint64_t v212 = v529;
      uint64_t v276 = (*(uint64_t (**)(char *, void *, uint64_t))(v528 + 32))(v527, v201, v529);
      uint64_t v238 = v526;
      LinkPresentation.PodcastMetadata.artwork.getter(v276);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v242) != 1)
      {
        __int128 v254 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v209 + 32);
        uint64_t v255 = &v552;
        goto LABEL_69;
      }

      goto LABEL_63;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.tvEpisodeMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v251 = v523;
      uint64_t v252 = v522;
      uint64_t v212 = v524;
      uint64_t v277 = (*(uint64_t (**)(char *, void *, uint64_t))(v523 + 32))(v522, v201, v524);
      uint64_t v238 = v521;
      LinkPresentation.TVEpisodeMetadata.artwork.getter(v277);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v242) != 1)
      {
        __int128 v254 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v209 + 32);
        uint64_t v255 = &v543;
        goto LABEL_69;
      }

      goto LABEL_63;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.tvSeasonMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v251 = v515;
      uint64_t v252 = v514;
      uint64_t v212 = v516;
      uint64_t v278 = (*(uint64_t (**)(char *, void *, uint64_t))(v515 + 32))(v514, v201, v516);
      uint64_t v238 = v512;
      LinkPresentation.TVSeasonMetadata.artwork.getter(v278);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v238, 1LL, v242) != 1)
      {
        __int128 v254 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v209 + 32);
        uint64_t v255 = &v537;
        goto LABEL_69;
      }

      goto LABEL_63;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.tvShowMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v279 = (*(uint64_t (**)(char *, void *, uint64_t))(v518 + 32))(v517, v201, v519);
      uint64_t v280 = v513;
      LinkPresentation.TVShowMetadata.artwork.getter(v279);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v280, 1LL, v208) != 1)
      {
        v289 = v500;
        uint64_t v290 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v500, v513, v208);
        Swift::Int v291 = LinkPresentation.PlaceholderImage.index.getter(v290);
        IndexSet.insert(_:)(v291);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v289, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v518 + 8))(v517, v519);
      }

      (*(void (**)(char *, uint64_t))(v518 + 8))(v517, v519);
      uint64_t v281 = &v545;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.movieMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v285 = (*(uint64_t (**)(char *, void *, uint64_t))(v508 + 32))(v510, v201, v509);
      uint64_t v286 = v506;
      LinkPresentation.MovieMetadata.artwork.getter(v285);
      v287 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v287(v286, 1LL, v208) == 1)
      {
        uint64_t v288 = sub_100012EF8(v506, &qword_1000B0320);
      }

      else
      {
        v294 = v493;
        uint64_t v295 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v493, v506, v208);
        Swift::Int v296 = LinkPresentation.PlaceholderImage.index.getter(v295);
        IndexSet.insert(_:)(v296);
        uint64_t v288 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v294, v208);
      }

      v297 = v507;
      LinkPresentation.MovieMetadata.branding.getter(v288);
      if (v287((uint64_t)v297, 1LL, v208) != 1)
      {
        v302 = v494;
        uint64_t v303 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v494, v507, v208);
        Swift::Int v304 = LinkPresentation.PlaceholderImage.index.getter(v303);
        IndexSet.insert(_:)(v304);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v302, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v508 + 8))(v510, v509);
      }

      (*(void (**)(char *, uint64_t))(v508 + 8))(v510, v509);
      uint64_t v281 = &v539;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.movieBundleMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v292 = (*(uint64_t (**)(char *, void *, uint64_t))(v503 + 32))(v502, v201, v504);
      v293 = v501;
      LinkPresentation.MovieBundleMetadata.artwork.getter(v292);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v293, 1LL, v208) != 1)
      {
        v305 = v488;
        uint64_t v306 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v488, v501, v208);
        Swift::Int v307 = LinkPresentation.PlaceholderImage.index.getter(v306);
        IndexSet.insert(_:)(v307);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v305, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v503 + 8))(v502, v504);
      }

      (*(void (**)(char *, uint64_t))(v503 + 8))(v502, v504);
      uint64_t v281 = &v533;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.cloudSharingMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v298 = (*(uint64_t (**)(char *, void *, uint64_t))(v497 + 32))(v499, v201, v498);
      uint64_t v299 = v495;
      LinkPresentation.CloudSharingMetadata.icon.getter(v298);
      v300 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v300(v299, 1LL, v208) == 1)
      {
        uint64_t v301 = sub_100012EF8(v495, &qword_1000B0320);
      }

      else
      {
        v310 = v480;
        uint64_t v311 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v480, v495, v208);
        Swift::Int v312 = LinkPresentation.PlaceholderImage.index.getter(v311);
        IndexSet.insert(_:)(v312);
        uint64_t v301 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v310, v208);
      }

      v313 = v496;
      LinkPresentation.CloudSharingMetadata.thumbnail.getter(v301);
      if (v300((uint64_t)v313, 1LL, v208) != 1)
      {
        v318 = v481;
        uint64_t v319 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v481, v496, v208);
        Swift::Int v320 = LinkPresentation.PlaceholderImage.index.getter(v319);
        IndexSet.insert(_:)(v320);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v318, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v497 + 8))(v499, v498);
      }

      (*(void (**)(char *, uint64_t))(v497 + 8))(v499, v498);
      uint64_t v281 = &v528;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.cloudFamilyInvitationMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v308 = (*(uint64_t (**)(char *, void *, uint64_t))(v491 + 32))(v490, v201, v492);
      v309 = v489;
      LinkPresentation.CloudFamilyInvitationMetadata.image.getter(v308);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v309, 1LL, v208) != 1)
      {
        v321 = v472;
        uint64_t v322 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v472, v489, v208);
        Swift::Int v323 = LinkPresentation.PlaceholderImage.index.getter(v322);
        IndexSet.insert(_:)(v323);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v321, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v491 + 8))(v490, v492);
      }

      (*(void (**)(char *, uint64_t))(v491 + 8))(v490, v492);
      uint64_t v281 = (uint64_t *)&v521;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.gameCenterInvitationMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v314 = (*(uint64_t (**)(char *, void *, uint64_t))(v484 + 32))(v487, v201, v485);
      uint64_t v315 = v482;
      LinkPresentation.GameCenterInvitationMetadata.image.getter(v314);
      v316 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v316(v315, 1LL, v208) == 1)
      {
        uint64_t v317 = sub_100012EF8(v482, &qword_1000B0320);
      }

      else
      {
        v328 = v464;
        uint64_t v329 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v464, v482, v208);
        Swift::Int v330 = LinkPresentation.PlaceholderImage.index.getter(v329);
        IndexSet.insert(_:)(v330);
        uint64_t v317 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v328, v208);
      }

      v331 = v483;
      LinkPresentation.GameCenterInvitationMetadata.icon.getter(v317);
      if (v316((uint64_t)v331, 1LL, v208) != 1)
      {
        v336 = v465;
        uint64_t v337 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v465, v483, v208);
        Swift::Int v338 = LinkPresentation.PlaceholderImage.index.getter(v337);
        IndexSet.insert(_:)(v338);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v336, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v484 + 8))(v487, v485);
      }

      (*(void (**)(char *, uint64_t))(v484 + 8))(v487, v485);
      uint64_t v281 = &v515;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.mapMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v324 = (*(uint64_t (**)(char *, void *, uint64_t))(v477 + 32))(v486, v201, v478);
      uint64_t v325 = v473;
      LinkPresentation.MapMetadata.categoryIcon.getter(v324);
      v326 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v326(v325, 1LL, v208) == 1)
      {
        uint64_t v327 = sub_100012EF8(v473, &qword_1000B0320);
      }

      else
      {
        v339 = v456;
        uint64_t v340 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v456, v473, v208);
        Swift::Int v341 = LinkPresentation.PlaceholderImage.index.getter(v340);
        IndexSet.insert(_:)(v341);
        uint64_t v327 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v339, v208);
      }

      uint64_t v342 = v474;
      LinkPresentation.MapMetadata.image.getter(v327);
      if (v326(v342, 1LL, v208) == 1)
      {
        uint64_t v343 = sub_100012EF8(v474, &qword_1000B0320);
      }

      else
      {
        v346 = v457;
        uint64_t v347 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v457, v474, v208);
        Swift::Int v348 = LinkPresentation.PlaceholderImage.index.getter(v347);
        IndexSet.insert(_:)(v348);
        uint64_t v343 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v346, v208);
      }

      uint64_t v349 = v475;
      LinkPresentation.MapMetadata.darkImage.getter(v343);
      if (v326(v349, 1LL, v208) == 1)
      {
        uint64_t v350 = sub_100012EF8(v475, &qword_1000B0320);
      }

      else
      {
        v351 = v458;
        uint64_t v352 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v458, v475, v208);
        Swift::Int v353 = LinkPresentation.PlaceholderImage.index.getter(v352);
        IndexSet.insert(_:)(v353);
        uint64_t v350 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v351, v208);
      }

      v354 = v476;
      LinkPresentation.MapMetadata.storeFrontImage.getter(v350);
      if (v326((uint64_t)v354, 1LL, v208) != 1)
      {
        v355 = v459;
        uint64_t v356 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v459, v476, v208);
        Swift::Int v357 = LinkPresentation.PlaceholderImage.index.getter(v356);
        IndexSet.insert(_:)(v357);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v355, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v477 + 8))(v486, v478);
      }

      (*(void (**)(char *, uint64_t))(v477 + 8))(v486, v478);
      uint64_t v281 = &v508;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.mapCollectionMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v332 = (*(uint64_t (**)(char *, void *, uint64_t))(v470 + 32))(v479, v201, v471);
      uint64_t v333 = v466;
      LinkPresentation.MapCollectionMetadata.icon.getter(v332);
      v334 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v334(v333, 1LL, v208) == 1)
      {
        uint64_t v335 = sub_100012EF8(v466, &qword_1000B0320);
      }

      else
      {
        v358 = v451;
        uint64_t v359 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v451, v466, v208);
        Swift::Int v360 = LinkPresentation.PlaceholderImage.index.getter(v359);
        IndexSet.insert(_:)(v360);
        uint64_t v335 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v358, v208);
      }

      uint64_t v361 = v467;
      LinkPresentation.MapCollectionMetadata.image.getter(v335);
      if (v334(v361, 1LL, v208) == 1)
      {
        uint64_t v362 = sub_100012EF8(v467, &qword_1000B0320);
      }

      else
      {
        v367 = v452;
        uint64_t v368 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v452, v467, v208);
        Swift::Int v369 = LinkPresentation.PlaceholderImage.index.getter(v368);
        IndexSet.insert(_:)(v369);
        uint64_t v362 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v367, v208);
      }

      uint64_t v370 = v468;
      LinkPresentation.MapCollectionMetadata.darkImage.getter(v362);
      if (v334(v370, 1LL, v208) == 1)
      {
        uint64_t v371 = sub_100012EF8(v468, &qword_1000B0320);
      }

      else
      {
        v372 = v453;
        uint64_t v373 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v453, v468, v208);
        Swift::Int v374 = LinkPresentation.PlaceholderImage.index.getter(v373);
        IndexSet.insert(_:)(v374);
        uint64_t v371 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v372, v208);
      }

      v375 = v469;
      LinkPresentation.MapCollectionMetadata.publisherIcon.getter(v371);
      if (v334((uint64_t)v375, 1LL, v208) != 1)
      {
        v376 = v454;
        uint64_t v377 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v454, v469, v208);
        Swift::Int v378 = LinkPresentation.PlaceholderImage.index.getter(v377);
        IndexSet.insert(_:)(v378);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v376, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v470 + 8))(v479, v471);
      }

      (*(void (**)(char *, uint64_t))(v470 + 8))(v479, v471);
      uint64_t v281 = (uint64_t *)&v501;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.mapCollectionPublisherMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v344 = (*(uint64_t (**)(char *, void *, uint64_t))(v462 + 32))(v461, v201, v463);
      v345 = v460;
      LinkPresentation.MapCollectionPublisherMetadata.icon.getter(v344);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v345, 1LL, v208) != 1)
      {
        v379 = v446;
        uint64_t v380 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v446, v460, v208);
        Swift::Int v381 = LinkPresentation.PlaceholderImage.index.getter(v380);
        IndexSet.insert(_:)(v381);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v379, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v462 + 8))(v461, v463);
      }

      (*(void (**)(char *, uint64_t))(v462 + 8))(v461, v463);
      uint64_t v281 = &v492;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.fileMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v363 = (*(uint64_t (**)(char *, void *, uint64_t))(v449 + 32))(v455, v201, v450);
      uint64_t v364 = v447;
      LinkPresentation.FileMetadata.thumbnail.getter(v363);
      v365 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
      if (v365(v364, 1LL, v208) == 1)
      {
        uint64_t v366 = sub_100012EF8(v447, &qword_1000B0320);
      }

      else
      {
        v382 = v420;
        uint64_t v383 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v420, v447, v208);
        Swift::Int v384 = LinkPresentation.PlaceholderImage.index.getter(v383);
        IndexSet.insert(_:)(v384);
        uint64_t v366 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v382, v208);
      }

      v385 = v448;
      LinkPresentation.FileMetadata.icon.getter(v366);
      if (v365((uint64_t)v385, 1LL, v208) != 1)
      {
        v388 = v424;
        uint64_t v389 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v424, v448, v208);
        Swift::Int v390 = LinkPresentation.PlaceholderImage.index.getter(v389);
        IndexSet.insert(_:)(v390);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v388, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v449 + 8))(v455, v450);
      }

      (*(void (**)(char *, uint64_t))(v449 + 8))(v455, v450);
      uint64_t v281 = (uint64_t *)&v480;
      goto LABEL_80;
    }

    if (v202 == enum case for LinkPresentation.SpecializationMetadata.appleNewsMetadata(_:)) {
      return (*(uint64_t (**)(void *, uint64_t))(v196 + 8))(v201, v195);
    }
    if (v202 == enum case for LinkPresentation.SpecializationMetadata.stocksMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v386 = (*(uint64_t (**)(char *, void *, uint64_t))(v431 + 32))(v430, v201, v432);
      v387 = v426;
      LinkPresentation.StocksMetadata.icon.getter(v386);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v387, 1LL, v208) != 1)
      {
        v393 = v421;
        uint64_t v394 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v421, v426, v208);
        Swift::Int v395 = LinkPresentation.PlaceholderImage.index.getter(v394);
        IndexSet.insert(_:)(v395);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v393, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v431 + 8))(v430, v432);
      }

      (*(void (**)(char *, uint64_t))(v431 + 8))(v430, v432);
      uint64_t v281 = (uint64_t *)&v458;
    }

    else if (v202 == enum case for LinkPresentation.SpecializationMetadata.appleTVMetadata(_:))
    {
      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v391 = (*(uint64_t (**)(char *, void *, uint64_t))(v434 + 32))(v433, v201, v435);
      v392 = v427;
      LinkPresentation.AppleTVMetadata.artwork.getter(v391);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v392, 1LL, v208) != 1)
      {
        v398 = v422;
        uint64_t v399 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v422, v427, v208);
        Swift::Int v400 = LinkPresentation.PlaceholderImage.index.getter(v399);
        IndexSet.insert(_:)(v400);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v398, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v434 + 8))(v433, v435);
      }

      (*(void (**)(char *, uint64_t))(v434 + 8))(v433, v435);
      uint64_t v281 = (uint64_t *)&v459;
    }

    else
    {
      if (v202 != enum case for LinkPresentation.SpecializationMetadata.photosMomentMetadata(_:))
      {
        if (v202 != enum case for LinkPresentation.SpecializationMetadata.photosStatusMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.photosSharedLibraryInvitationMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.businessChatMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.walletPassMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.appStoreStoryMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.summarizedLinkMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.faceTimeInviteMetadata(_:)
          && v202 != enum case for LinkPresentation.SpecializationMetadata.passwordsInviteMetadata(_:))
        {
          if (v202 == enum case for LinkPresentation.SpecializationMetadata.sharedObjectMetadata(_:))
          {
            (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
            uint64_t v401 = *v201;
            uint64_t v402 = swift_projectBox(*v201);
            uint64_t v403 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v441 + 16))(v440, v402, v443);
            uint64_t v404 = v429;
            LinkPresentation.SharedObjectMetadata.icon.getter(v403);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v209 + 48))(v404, 1LL, v208) == 1)
            {
              uint64_t v405 = sub_100012EF8(v429, &qword_1000B0320);
            }

            else
            {
              v412 = v425;
              uint64_t v413 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 32))(v425, v429, v208);
              Swift::Int v414 = LinkPresentation.PlaceholderImage.index.getter(v413);
              IndexSet.insert(_:)(v414);
              uint64_t v405 = (*(uint64_t (**)(char *, uint64_t))(v209 + 8))(v412, v208);
            }

            uint64_t v415 = v439;
            LinkPresentation.SharedObjectMetadata.specialization.getter(v405);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48))(v415, 1LL, v195) == 1)
            {
              (*(void (**)(char *, uint64_t))(v441 + 8))(v440, v443);
              sub_100012EF8(v439, &qword_1000B0318);
              return swift_release(v401);
            }

            else
            {
              uint64_t v416 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v196 + 32))(v419, v439, v195);
              uint64_t v417 = v576;
              sub_10002AAB0(v416);
              if (v417)
              {
                (*(void (**)(char *, uint64_t))(v196 + 8))(v419, v195);
                (*(void (**)(char *, uint64_t))(v441 + 8))(v440, v443);
                (*(void (**)(uint64_t, uint64_t))(v444 + 8))(v580, v445);
              }

              else
              {
                v418 = v442;
                IndexSet.formUnion(_:)(v442);
                (*(void (**)(char *, uint64_t))(v444 + 8))(v418, v445);
                (*(void (**)(char *, uint64_t))(v196 + 8))(v419, v195);
                (*(void (**)(char *, uint64_t))(v441 + 8))(v440, v443);
              }

              return swift_release(v401);
            }
          }

          else
          {
            unint64_t v409 = sub_10002F598();
            uint64_t v410 = swift_allocError(&type metadata for LinkPresentationUnpackerError, v409, 0LL, 0LL);
            *(void *)uint64_t v411 = 0LL;
            *(void *)(v411 + _Block_object_dispose(va, 8) = 0LL;
            *(_BYTE *)(v411 + 16) = 1;
            swift_willThrow(v410);
            (*(void (**)(uint64_t, uint64_t))(v444 + 8))(v580, v445);
            return (*(uint64_t (**)(void *, uint64_t))(v196 + 8))(v201, v195);
          }
        }

        return (*(uint64_t (**)(void *, uint64_t))(v196 + 8))(v201, v195);
      }

      (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
      uint64_t v396 = (*(uint64_t (**)(char *, void *, uint64_t))(v437 + 32))(v436, v201, v438);
      v397 = v428;
      LinkPresentation.PhotosMomentMetadata.keyPhoto.getter(v396);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v397, 1LL, v208) != 1)
      {
        v406 = v423;
        uint64_t v407 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v423, v428, v208);
        Swift::Int v408 = LinkPresentation.PlaceholderImage.index.getter(v407);
        IndexSet.insert(_:)(v408);
        (*(void (**)(char *, uint64_t))(v209 + 8))(v406, v208);
        return (*(uint64_t (**)(char *, uint64_t))(v437 + 8))(v436, v438);
      }

      (*(void (**)(char *, uint64_t))(v437 + 8))(v436, v438);
      uint64_t v281 = (uint64_t *)&v460;
    }

LABEL_70:
  uint64_t v32 = *(double *)&v38;

  if (v32 >= 0.011) {
    return v32;
  }
  return v1;
}

  if (!(_DWORD)v199)
  {
LABEL_26:
    if ((_DWORD)v200) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }

LABEL_80:
    uint64_t v207 = *(v281 - 32);
    return sub_100012EF8(v207, &qword_1000B0320);
  }

  (*(void (**)(void *, uint64_t))(v196 + 96))(v201, v195);
  uint64_t v230 = v559;
  uint64_t v229 = v560;
  uint64_t v231 = v561;
  uint64_t v232 = (*(uint64_t (**)(char *, void *, uint64_t))(v560 + 32))(v559, v201, v561);
  unint64_t v226 = v558;
  LinkPresentation.PlaylistMetadata.artwork.getter(v232);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v226, 1LL, v208) == 1)
  {
    (*(void (**)(char *, uint64_t))(v229 + 8))(v230, v231);
    goto LABEL_22;
  }

  uint64_t v239 = v550;
  uint64_t v240 = (*(uint64_t (**)(char *, char *, uint64_t))(v209 + 32))(v550, v226, v208);
  Swift::Int v241 = LinkPresentation.PlaceholderImage.index.getter(v240);
  IndexSet.insert(_:)(v241);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v239, v208);
  return (*(uint64_t (**)(char *, uint64_t))(v229 + 8))(v230, v231);
}

uint64_t sub_10002DF98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v87 = type metadata accessor for IndexSet(0LL);
  uint64_t v89 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v78 = (uint64_t)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_10000E624(&qword_1000B0318);
  __chkstk_darwin(v3);
  uint64_t v82 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LinkPresentation.SpecializationMetadata(0LL);
  uint64_t v83 = *(void *)(v5 - 8);
  uint64_t v84 = v5;
  __chkstk_darwin(v5);
  uint64_t v77 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000E624(&qword_1000B0320);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v81 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - v10;
  uint64_t v11 = type metadata accessor for LinkPresentation.PlaceholderImage(0LL);
  uint64_t v88 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v74 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v76 = (char *)&v74 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v74 - v19;
  uint64_t v21 = sub_10000E624(&qword_1000AFF90);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for LinkPresentation.LinkMetadata(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v74 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = IndexSet.init()(v26);
  LinkPresentation.MessagesPayload.linkMetadata.getter(v29);
  uint64_t v86 = a1;
  uint64_t v74 = v25;
  uint64_t v75 = v24;
  uint64_t v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v25 + 32))(v28, v23, v24);
  uint64_t v32 = (uint64_t)v80;
  uint64_t v85 = v28;
  LinkPresentation.LinkMetadata.icon.getter(v31);
  uint64_t v33 = v88;
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v34(v32, 1LL, v11) == 1)
  {
    uint64_t v35 = sub_100012EF8(v32, &qword_1000B0320);
  }

  else
  {
    uint64_t v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 32))(v20, v32, v11);
    Swift::Int v37 = LinkPresentation.PlaceholderImage.index.getter(v36);
    IndexSet.insert(_:)(v37);
    uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v11);
  }

  uint64_t v38 = v90;
  uint64_t v39 = (uint64_t)v81;
  LinkPresentation.LinkMetadata.image.getter(v35);
  unsigned int v40 = v34(v39, 1LL, v11);
  uint64_t v41 = v89;
  if (v40 == 1)
  {
    uint64_t v42 = sub_100012EF8(v39, &qword_1000B0320);
  }

  else
  {
    uint64_t v43 = v88;
    uint64_t v44 = v76;
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 32))(v76, v39, v11);
    Swift::Int v46 = LinkPresentation.PlaceholderImage.index.getter(v45);
    IndexSet.insert(_:)(v46);
    uint64_t v47 = v44;
    uint64_t v41 = v89;
    uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v47, v11);
  }

  uint64_t v48 = v87;
  uint64_t v49 = LinkPresentation.LinkMetadata.alternateImages.getter(v42);
  if (v49)
  {
    uint64_t v81 = (char *)v49;
    uint64_t v50 = *(void *)(v49 + 16);
    uint64_t v51 = v88;
    if (v50)
    {
      uint64_t v52 = &v81[(*(unsigned __int8 *)(v88 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80)];
      uint64_t v53 = *(void *)(v88 + 72);
      uint64_t v54 = *(uint64_t (**)(char *, char *, uint64_t))(v88 + 16);
      do
      {
        uint64_t v55 = v54(v16, v52, v11);
        Swift::Int v56 = LinkPresentation.PlaceholderImage.index.getter(v55);
        IndexSet.insert(_:)(v56);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v16, v11);
        v52 += v53;
        --v50;
      }

      while (v50);
    }

    swift_bridgeObjectRelease(v81);
    uint64_t v38 = v90;
    uint64_t v48 = v87;
    uint64_t v41 = v89;
  }

  uint64_t v57 = LinkPresentation.LinkMetadata.contentImages.getter();
  if (v57)
  {
    uint64_t v81 = (char *)v57;
    uint64_t v58 = *(void *)(v57 + 16);
    uint64_t v59 = v88;
    uint64_t v60 = v79;
    if (v58)
    {
      uint64_t v61 = &v81[(*(unsigned __int8 *)(v88 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80)];
      uint64_t v62 = *(void *)(v88 + 72);
      uint64_t v63 = *(uint64_t (**)(char *, char *, uint64_t))(v88 + 16);
      do
      {
        uint64_t v64 = v63(v60, v61, v11);
        Swift::Int v65 = LinkPresentation.PlaceholderImage.index.getter(v64);
        IndexSet.insert(_:)(v65);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v11);
        v61 += v62;
        --v58;
      }

      while (v58);
    }

    swift_bridgeObjectRelease(v81);
    uint64_t v38 = v90;
    uint64_t v48 = v87;
    uint64_t v41 = v89;
  }

  uint64_t v66 = (uint64_t)v82;
  uint64_t v67 = v85;
  LinkPresentation.LinkMetadata.specialization.getter();
  uint64_t v69 = v83;
  uint64_t v68 = v84;
  int v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v66, 1LL, v84);
  uint64_t v71 = v86;
  if (v70 == 1)
  {
    (*(void (**)(char *, uint64_t))(v74 + 8))(v67, v75);
    return sub_100012EF8(v66, &qword_1000B0318);
  }

  else
  {
    uint64_t v72 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v77, v66, v68);
    uint64_t v73 = v78;
    sub_10002AAB0(v78);
    if (v38)
    {
      (*(void (**)(char *, uint64_t))(v69 + 8))(v72, v68);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v85, v75);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v71, v48);
    }

    else
    {
      IndexSet.formUnion(_:)(v73);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v73, v48);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v72, v68);
      return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v85, v75);
    }
  }

uint64_t sub_10002E594(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v76 = a3;
  uint64_t v85 = a1;
  uint64_t v6 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v6);
  uint64_t v81 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Explosion(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v82 = v8;
  uint64_t v83 = v9;
  __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for BalloonPlugin.Payload(0LL);
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v71 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for EncodedAttachments(0LL);
  __chkstk_darwin(v12);
  uint64_t v73 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for IndexSet(0LL);
  uint64_t v74 = *(void *)(v14 - 8);
  uint64_t v75 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LinkPresentation.MessagesPayload(0LL);
  uint64_t v78 = *(void *)(v17 - 8);
  uint64_t v79 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  *(void *)&__int128 v84 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v77 = (char *)&v68 - v20;
  uint64_t v21 = type metadata accessor for Logger(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = static Log.blastDoor.getter(v23);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.info.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    unint64_t v69 = a2;
    uint64_t v30 = v29;
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Going through new LinkPresentation unpacking flow.", v29, 2u);
    uint64_t v4 = v3;
    a2 = v69;
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  uint64_t v31 = v85;
  sub_100012A64(v85, a2);
  uint64_t v32 = v84;
  LinkPresentation.MessagesPayload.init(dataRepresentation:)(v31, a2);
  if (v4)
  {
    sub_100012C44();
    uint64_t v33 = (void *)((uint64_t (*)(void))static OS_os_log.lpUnpacker.getter)();
    uint64_t v34 = sub_10000E624(&qword_1000AFF48);
    uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
    __int128 v84 = xmmword_10008D7D0;
    *(_OWORD *)(v35 + 16) = xmmword_10008D7D0;
    uint64_t v86 = v4;
    sub_10000E624(&qword_1000AFFC8);
    uint64_t v36 = >> prefix<A>(_:)(&v86);
    uint64_t v38 = v37;
    *(void *)(v35 + 56) = &type metadata for String;
    unint64_t v39 = sub_100012CDC();
    uint64_t v85 = v39;
    *(void *)(v35 + 64) = v39;
    *(void *)(v35 + 32) = v36;
    *(void *)(v35 + 40) = v38;
    uint64_t v40 = static os_log_type_t.default.getter(v39);
    os_log(_:dso:log:type:_:)( "LinkPresentationUnpacker unpacking error: %{public}@",  52LL,  2LL,  &_mh_execute_header,  v33,  v40,  v35);

    swift_bridgeObjectRelease(v35);
    swift_errorRetain(v4);
    uint64_t v41 = v80;
    uint64_t v42 = Explosion.init(_:keyPath:)(v4, 0LL, 0LL);
    uint64_t v43 = (void *)static OS_os_log.lpUnpacker.getter(v42);
    uint64_t v44 = swift_allocObject(v34, 72LL, 7LL);
    *(_OWORD *)(v44 + 16) = v84;
    uint64_t v46 = v82;
    uint64_t v45 = v83;
    *(void *)&__int128 v84 = *(void *)(v83 + 16);
    uint64_t v47 = (uint64_t)v81;
    ((void (*)(char *, char *, uint64_t))v84)(v81, v41, v82);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v47, 0LL, 1LL, v46);
    uint64_t v48 = >> prefix<A>(_:)(v47);
    uint64_t v50 = v49;
    uint64_t v51 = sub_100012EF8(v47, &qword_1000AFFB0);
    uint64_t v52 = v85;
    *(void *)(v44 + 56) = &type metadata for String;
    *(void *)(v44 + 64) = v52;
    *(void *)(v44 + 32) = v48;
    *(void *)(v44 + 40) = v50;
    uint64_t v53 = static os_log_type_t.default.getter(v51);
    os_log(_:dso:log:type:_:)( "LinkPresentationUnpacker explosion: %{public}@",  46LL,  2LL,  &_mh_execute_header,  v43,  v53,  v44);

    swift_bridgeObjectRelease(v44);
    unint64_t v54 = sub_10001295C();
    swift_allocError(v46, v54, 0LL, 0LL);
    uint64_t v56 = ((uint64_t (*)(uint64_t, char *, uint64_t))v84)(v55, v41, v46);
    swift_willThrow(v56);
    swift_errorRelease(v4);
    return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v41, v46);
  }

  else
  {
    uint64_t v58 = v77;
    uint64_t v57 = v78;
    uint64_t v59 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 32))(v77, v32, v79);
    uint64_t v60 = sub_10002DF98((uint64_t)v16);
    __chkstk_darwin(v60);
    *(&v68 - 2) = (uint64_t)v16;
    uint64_t v62 = v76;
    uint64_t v64 = v16;
    uint64_t v63 = swift_bridgeObjectRetain(v76);
    Swift::Int v65 = sub_10002F3BC( v63,  (void (*)(uint64_t, uint64_t, unint64_t))sub_10002F3A4,  (uint64_t)(&v68 - 4));
    swift_bridgeObjectRelease(v62);
    uint64_t v66 = v73;
    EncodedAttachments.init(with:)(v65);
    uint64_t v67 = v71;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v71, v58, v59);
    (*(void (**)(char *, void, uint64_t))(v70 + 104))( v67,  enum case for BalloonPlugin.Payload.linkPresentation(_:),  v72);
    CombinedPluginAttachment.init(with:payload:)(v66, v67);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v64, v75);
  }

uint64_t sub_10002EBD0@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v93 = a2;
  unint64_t v94 = a3;
  uint64_t v85 = a4;
  uint64_t v5 = type metadata accessor for EncodedAttachments.RawData(0LL);
  unint64_t v89 = *(void *)(v5 - 8);
  uint64_t v90 = v5;
  __chkstk_darwin(v5);
  uint64_t v91 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for EncodedAttachments.EncodedContent(0LL);
  uint64_t v86 = *(void *)(v7 - 8);
  uint64_t v87 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v77 - v10;
  uint64_t v79 = type metadata accessor for EncodedAttachments.Content(0LL);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v83 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for EncodedAttachments.EncodedAstc(0LL);
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v82 = v12;
  __chkstk_darwin(v12);
  __int128 v84 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Image(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v77 - v22;
  Swift::Int v92 = a1;
  BOOL v24 = IndexSet.contains(_:)(a1);
  LOBYTE(a1) = v24;
  uint64_t v25 = static os_log_type_t.info.getter(v24);
  unint64_t v26 = sub_100012C44();
  uint64_t v27 = (os_log_s *)static OS_os_log.blastDoor.getter();
  os_log_type_t v28 = v27;
  if ((a1 & 1) != 0)
  {
    uint64_t v90 = v18;
    uint64_t v91 = v16;
    uint64_t v88 = v21;
    unint64_t v89 = v26;
    os_log_type_t v29 = v25;
    if (os_log_type_enabled(v27, (os_log_type_t)v25))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v30 = 134217984;
      Swift::Int v31 = v92;
      uint64_t v97 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v30 + 4, v30 + 12);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%ld should be an image, assessing type", v30, 0xCu);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {

      Swift::Int v31 = v92;
    }

    uint64_t v40 = v101;
    uint64_t v42 = v93;
    unint64_t v41 = v94;
    uint64_t v43 = v91;
    uint64_t v99 = &type metadata for Data;
    uint64_t v100 = &protocol witness table for Data;
    uint64_t v97 = v93;
    unint64_t v98 = v94;
    uint64_t v44 = type metadata accessor for Image.Encoding(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v43, 1LL, 1LL, v44);
    sub_100012A64(v42, v41);
    uint64_t v45 = v23;
    uint64_t v46 = Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v97, 0LL, 1LL, v43);
    Image.provider.getter(&v97, v46);
    uint64_t v47 = v99;
    uint64_t v48 = v100;
    sub_10000FFDC(&v97, (uint64_t)v99);
    ImageProvider.withImageSource<A>(_:)(&v95, sub_10002F358, 0LL, v47, &type metadata for String, v48);
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v90 + 8))(v23, v17);
      return sub_100010D60(&v97);
    }

    else
    {
      uint64_t v49 = v96;
      if (v96)
      {
        Swift::Int v50 = v95;
        uint64_t v51 = sub_100010D60(&v97);
        uint64_t v52 = static os_log_type_t.info.getter(v51);
        uint64_t v53 = (void *)static OS_os_log.blastDoor.getter();
        uint64_t v54 = sub_10000E624(&qword_1000AFF48);
        uint64_t v55 = swift_allocObject(v54, 72LL, 7LL);
        *(_OWORD *)(v55 + 16) = xmmword_10008D7D0;
        *(void *)(v55 + 56) = &type metadata for String;
        *(void *)(v55 + 64) = sub_100012CDC();
        *(void *)(v55 + 32) = v50;
        *(void *)(v55 + 40) = v49;
        swift_bridgeObjectRetain(v49);
        os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, v53, "Handling image attachments with type: %s", v77);

        __n128 v56 = swift_bridgeObjectRelease(v55);
        uint64_t v57 = v90;
        uint64_t v58 = v88;
        (*(void (**)(char *, char *, uint64_t, __n128))(v90 + 16))(v88, v23, v17, v56);
        uint64_t v59 = v84;
        EncodedAttachments.EncodedAstc.init(with:originalUTIType:)(v58, v50, v49);
        uint64_t v61 = v81;
        uint64_t v60 = v82;
        uint64_t v62 = v80;
        (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v59, v82);
        (*(void (**)(char *, void, uint64_t))(v86 + 104))( v62,  enum case for EncodedAttachments.EncodedContent.astc(_:),  v87);
        uint64_t v63 = v83;
        uint64_t v64 = EncodedAttachments.Content.init(with:)(v62);
        uint64_t v75 = static os_log_type_t.info.getter(v64);
        uint64_t v76 = (void *)static OS_os_log.blastDoor.getter();
        os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  v76,  "Encoded plugin attachment as astc.",  34LL,  2LL,  &_swiftEmptyArrayStorage);

        (*(void (**)(char *, uint64_t))(v61 + 8))(v84, v60);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v45, v17);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v78 + 32))(v85, v63, v79);
      }

      else
      {
        sub_100010D60(&v97);
        uint64_t v65 = type metadata accessor for DecodingError(0LL);
        swift_allocError(v65, &protocol witness table for DecodingError, 0LL, 0LL);
        uint64_t v67 = v66;
        uint64_t v68 = sub_10000E624(&qword_1000AFF80);
        uint64_t v69 = swift_allocObject(v68, 72LL, 7LL);
        *(_OWORD *)(v69 + 16) = xmmword_10008D7D0;
        *(void *)(v69 + 56) = &type metadata for MessageDictionary.CodingKeys;
        *(void *)(v69 + 64) = sub_10002F554();
        *(_BYTE *)(v69 + 32) = 22;
        uint64_t v97 = 0LL;
        unint64_t v98 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(56LL);
        v70._object = (void *)0x800000010008B010LL;
        v70._countAndFlagsBits = 0xD000000000000035LL;
        String.append(_:)(v70);
        Swift::Int v95 = v31;
        v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
        object = v71._object;
        String.append(_:)(v71);
        swift_bridgeObjectRelease(object);
        v73._countAndFlagsBits = 41LL;
        v73._object = (void *)0xE100000000000000LL;
        String.append(_:)(v73);
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v69, v97, v98, 0LL);
        uint64_t v74 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v65 - 8) + 104LL))( v67,  enum case for DecodingError.dataCorrupted(_:),  v65);
        swift_willThrow(v74);
        return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v23, v17);
      }
    }
  }

  else
  {
    uint64_t v33 = v88;
    unint64_t v32 = v89;
    uint64_t v34 = v90;
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v27,  "Encoded plugin attachment as raw data.",  38LL,  2LL,  &_swiftEmptyArrayStorage);

    uint64_t v36 = v93;
    unint64_t v35 = v94;
    sub_100012A64(v93, v94);
    uint64_t v37 = v91;
    uint64_t v38 = v101;
    uint64_t result = EncodedAttachments.RawData.init(with:)(v36, v35);
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v33, v37, v34);
      (*(void (**)(char *, void, uint64_t))(v86 + 104))( v33,  enum case for EncodedAttachments.EncodedContent.other(_:),  v87);
      EncodedAttachments.Content.init(with:)(v33);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v37, v34);
    }
  }

  return result;
}

uint64_t sub_10002F358@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CGImageSourceRef.utTypeString.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10002F390(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10002E594(a1, a2, a3);
}

uint64_t sub_10002F3A4@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10002EBD0(a1, a2, a3, a4);
}

void *sub_10002F3BC(uint64_t a1, void (*a2)(uint64_t, uint64_t, unint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = type metadata accessor for EncodedAttachments.Content(0LL);
  uint64_t v6 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v24 = &_swiftEmptyArrayStorage;
  sub_10005DBB0(0, 0LL, 0);
  uint64_t v9 = v24;
  uint64_t v10 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  uint64_t v19 = a1;
  uint64_t v20 = v10;
  if (v10)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = (unint64_t *)(a1 + 40);
    while (1)
    {
      uint64_t v13 = *(v12 - 1);
      unint64_t v14 = *v12;
      sub_100012A64(v13, *v12);
      v22(v11, v13, v14);
      if (v4) {
        break;
      }
      sub_100012B54(v13, v14);
      BOOL v24 = v9;
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1)
      {
        sub_10005DBB0(v15 > 1, v16 + 1, 1);
        uint64_t v9 = v24;
      }

      ++v11;
      v12 += 2;
      v9[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))( (unint64_t)v9 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
      + *(void *)(v6 + 72) * v16,
        v8,
        v21);
      if (v20 == v11) {
        goto LABEL_9;
      }
    }

    sub_100012B54(v13, v14);
    swift_release(v9);
  }

LABEL_9:
  swift_bridgeObjectRelease(v19);
  return v9;
}

unint64_t sub_10002F554()
{
  unint64_t result = qword_1000B0310;
  if (!qword_1000B0310)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageDictionary.CodingKeys,  &type metadata for MessageDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0310);
  }

  return result;
}

unint64_t sub_10002F598()
{
  unint64_t result = qword_1000B0328;
  if (!qword_1000B0328)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E410, &type metadata for LinkPresentationUnpackerError);
    atomic_store(result, (unint64_t *)&qword_1000B0328);
  }

  return result;
}

__n128 initializeBufferWithCopyOfBuffer for LinkPresentationUnpackerError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LinkPresentationUnpackerError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LinkPresentationUnpackerError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_10002F640(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10002F65C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(result + 16) = 1;
  }

  else
  {
    *(_BYTE *)(result + 16) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for LinkPresentationUnpackerError()
{
  return &type metadata for LinkPresentationUnpackerError;
}

uint64_t destroy for CombinedPluginAttachmentDictionary(void *a1)
{
  return sub_100012B54(a1[1], a1[2]);
}

uint64_t *_s24MessagesBlastDoorService34CombinedPluginAttachmentDictionaryVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_100012A64(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for CombinedPluginAttachmentDictionary(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  uint64_t v7 = a2[1];
  unint64_t v6 = a2[2];
  sub_100012A64(v7, v6);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v7;
  a1[2] = v6;
  sub_100012B54(v8, v9);
  return a1;
}

__n128 initializeWithTake for CombinedPluginAttachmentDictionary(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for CombinedPluginAttachmentDictionary(void *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100012B54(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CombinedPluginAttachmentDictionary(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CombinedPluginAttachmentDictionary( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CombinedPluginAttachmentDictionary()
{
  return &type metadata for CombinedPluginAttachmentDictionary;
}

uint64_t sub_10002F878(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = sub_10000E624(&qword_1000B0358);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_10000FFDC(a1, v12);
  unint64_t v14 = sub_10002FF90();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CombinedPluginAttachmentDictionary.CodingKeys,  &type metadata for CombinedPluginAttachmentDictionary.CodingKeys,  v14,  v12,  v13);
  v21[0] = a2;
  char v22 = 0;
  uint64_t v15 = sub_10000E624(&qword_1000B0340);
  uint64_t v16 = sub_100030018( &qword_1000B0360,  (void (*)(void))sub_100030080,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    char v22 = 1;
    unint64_t v17 = sub_100030080();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10002F9EC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10002FD90(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_10002FA18(void *a1)
{
  return sub_10002F878(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10002FA34(char *a1, char *a2)
{
  return sub_10003F990(*a1, *a2);
}

Swift::Int sub_10002FA40()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 0x616F6C7961705F5FLL;
  }
  else {
    uint64_t v2 = 0x6863617474615F5FLL;
  }
  if (v1) {
    unint64_t v3 = 0xEB000000005F5F64LL;
  }
  else {
    unint64_t v3 = 0xEF5F5F73746E656DLL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002FAD4(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 0x616F6C7961705F5FLL;
  }
  else {
    uint64_t v2 = 0x6863617474615F5FLL;
  }
  if (*v1) {
    unint64_t v3 = 0xEB000000005F5F64LL;
  }
  else {
    unint64_t v3 = 0xEF5F5F73746E656DLL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10002FB44(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 0x616F6C7961705F5FLL;
  }
  else {
    uint64_t v3 = 0x6863617474615F5FLL;
  }
  if (v2) {
    unint64_t v4 = 0xEB000000005F5F64LL;
  }
  else {
    unint64_t v4 = 0xEF5F5F73746E656DLL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10002FBD4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3500, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10002FC30(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6863617474615F5FLL;
  if (*v1) {
    uint64_t v2 = 0x616F6C7961705F5FLL;
  }
  unint64_t v3 = 0xEF5F5F73746E656DLL;
  if (*v1) {
    unint64_t v3 = 0xEB000000005F5F64LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10002FC84()
{
  if (*v0) {
    return 0x616F6C7961705F5FLL;
  }
  else {
    return 0x6863617474615F5FLL;
  }
}

uint64_t sub_10002FCD4@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3500, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10002FD34(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10002FD40(uint64_t a1)
{
  unint64_t v2 = sub_10002FF90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002FD68(uint64_t a1)
{
  unint64_t v2 = sub_10002FF90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002FD90(void *a1)
{
  uint64_t v3 = sub_10000E624(&qword_1000B0330);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10000FFDC(a1, v7);
  unint64_t v9 = sub_10002FF90();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CombinedPluginAttachmentDictionary.CodingKeys,  &type metadata for CombinedPluginAttachmentDictionary.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    uint64_t v10 = 0LL;
    sub_100010D60(a1);
    swift_bridgeObjectRelease(0LL);
  }

  else
  {
    uint64_t v11 = sub_10000E624(&qword_1000B0340);
    char v19 = 0;
    uint64_t v12 = sub_100030018( &qword_1000B0348,  (void (*)(void))sub_10002FFD4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, v11, &v19, v3, v11, v12);
    uint64_t v10 = v18[0];
    char v19 = 1;
    unint64_t v13 = sub_10002FFD4();
    swift_bridgeObjectRetain(v10);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, &type metadata for Data, &v19, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v15 = v18[0];
    unint64_t v16 = v18[1];
    swift_bridgeObjectRetain(v10);
    sub_100012A64(v15, v16);
    swift_bridgeObjectRelease(v10);
    sub_100010D60(a1);
    swift_bridgeObjectRelease(v10);
    sub_100012B54(v15, v16);
  }

  return v10;
}

unint64_t sub_10002FF90()
{
  unint64_t result = qword_1000B0338;
  if (!qword_1000B0338)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E5D0, &type metadata for CombinedPluginAttachmentDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0338);
  }

  return result;
}

unint64_t sub_10002FFD4()
{
  unint64_t result = qword_1000B0350;
  if (!qword_1000B0350)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000B0350);
  }

  return result;
}

uint64_t sub_100030018(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10001008C(&qword_1000B0340);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100030080()
{
  unint64_t result = qword_1000B0368;
  if (!qword_1000B0368)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000B0368);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CombinedPluginAttachmentDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100030110 + 4 * byte_10008E455[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100030144 + 4 * byte_10008E450[v4]))();
}

uint64_t sub_100030144(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003014C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100030154LL);
  }
  return result;
}

uint64_t sub_100030160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100030168LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10003016C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100030174(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CombinedPluginAttachmentDictionary.CodingKeys()
{
  return &type metadata for CombinedPluginAttachmentDictionary.CodingKeys;
}

unint64_t sub_100030194()
{
  unint64_t result = qword_1000B0370;
  if (!qword_1000B0370)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E5A8, &type metadata for CombinedPluginAttachmentDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0370);
  }

  return result;
}

unint64_t sub_1000301DC()
{
  unint64_t result = qword_1000B0378;
  if (!qword_1000B0378)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E4E0, &type metadata for CombinedPluginAttachmentDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0378);
  }

  return result;
}

unint64_t sub_100030224()
{
  unint64_t result = qword_1000B0380;
  if (!qword_1000B0380)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E508, &type metadata for CombinedPluginAttachmentDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0380);
  }

  return result;
}

ValueMetadata *type metadata accessor for ScheduledMessageUpdateDictionary()
{
  return &type metadata for ScheduledMessageUpdateDictionary;
}

Swift::Int sub_100030278()
{
  return Hasher._finalize()();
}

uint64_t sub_1000302BC(uint64_t a1)
{
  return String.hash(into:)(a1, 29555LL, 0xE200000000000000LL);
}

Swift::Int sub_1000302C8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100030308@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3550, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100030358(void *a1@<X8>)
{
  *a1 = 29555LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_100030368()
{
  return 29555LL;
}

uint64_t sub_100030374@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3588, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

void sub_1000303C8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000303D4(uint64_t a1)
{
  unint64_t v2 = sub_10003061C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000303FC(uint64_t a1)
{
  unint64_t v2 = sub_10003061C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100030424@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0388);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10003061C();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for ScheduledMessageUpdateDictionary.CodingKeys,  &type metadata for ScheduledMessageUpdateDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010D60(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_100030534(void *a1)
{
  uint64_t v3 = sub_10000E624(&qword_1000B0398);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000FFDC(a1, v8);
  unint64_t v10 = sub_10003061C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ScheduledMessageUpdateDictionary.CodingKeys,  &type metadata for ScheduledMessageUpdateDictionary.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10003061C()
{
  unint64_t result = qword_1000B0390;
  if (!qword_1000B0390)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E7A0, &type metadata for ScheduledMessageUpdateDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0390);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ScheduledMessageUpdateDictionary.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000306A0 + 4 * byte_10008E620[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000306C0 + 4 * byte_10008E625[v4]))();
  }
}

_BYTE *sub_1000306A0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000306C0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000306C8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000306D0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000306D8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000306E0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScheduledMessageUpdateDictionary.CodingKeys()
{
  return &type metadata for ScheduledMessageUpdateDictionary.CodingKeys;
}

unint64_t sub_100030700()
{
  unint64_t result = qword_1000B03A0;
  if (!qword_1000B03A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E778, &type metadata for ScheduledMessageUpdateDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03A0);
  }

  return result;
}

unint64_t sub_100030748()
{
  unint64_t result = qword_1000B03A8;
  if (!qword_1000B03A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E6B0, &type metadata for ScheduledMessageUpdateDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03A8);
  }

  return result;
}

unint64_t sub_100030790()
{
  unint64_t result = qword_1000B03B0;
  if (!qword_1000B03B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E6D8, &type metadata for ScheduledMessageUpdateDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03B0);
  }

  return result;
}

uint64_t MessageSummaryInfoDictionary.encode(to:)(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B03B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_1000309DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MessageSummaryInfoDictionary.CodingKeys,  &type metadata for MessageSummaryInfoDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  char v35 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v35, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v34 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v34, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v33 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v33, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v32 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v32, v5);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    char v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v31, v5);
    uint64_t v22 = v3[10];
    uint64_t v23 = v3[11];
    char v30 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v30, v5);
    uint64_t v24 = *((unsigned __int8 *)v3 + 96);
    char v29 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, &v29, v5);
    uint64_t v25 = *((unsigned __int8 *)v3 + 97);
    char v28 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, &v28, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000309DC()
{
  unint64_t result = qword_1000B03C0;
  if (!qword_1000B03C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSummaryInfoDictionary.CodingKeys,  &type metadata for MessageSummaryInfoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03C0);
  }

  return result;
}

__n128 MessageSummaryInfoDictionary.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_WORD *)(a2 + 96) = v8;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 4_Block_object_dispose(va, 8) = result;
  }

  return result;
}

uint64_t sub_100030A7C(void *a1)
{
  return MessageSummaryInfoDictionary.encode(to:)(a1);
}

MessagesBlastDoorService::MessageSummaryInfoDictionary::CodingKeys_optional __swiftcall MessageSummaryInfoDictionary.CodingKeys.init(intValue:)( Swift::Int intValue)
{
  return (MessagesBlastDoorService::MessageSummaryInfoDictionary::CodingKeys_optional)8;
}

uint64_t MessageSummaryInfoDictionary.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100030ACC + 4 * byte_10008E7F0[a1]))( 6516065LL,  0xE300000000000000LL);
}

uint64_t sub_100030ACC()
{
  return 7564641LL;
}

uint64_t sub_100030AD8()
{
  return 6450529LL;
}

uint64_t sub_100030AE4()
{
  return v0 + 0x20000;
}

uint64_t sub_100030AEC()
{
  return 1650552161LL;
}

uint64_t sub_100030B00()
{
  return 1634954593LL;
}

uint64_t sub_100030B10()
{
  return 7631733LL;
}

uint64_t sub_100030B1C()
{
  return 7496296LL;
}

uint64_t MessageSummaryInfoDictionary.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100030B58 + 4 * byte_10008E7F8[a1]))( 6516065LL,  0xE300000000000000LL);
}

uint64_t sub_100030B58()
{
  return 7564641LL;
}

uint64_t sub_100030B64()
{
  return 6450529LL;
}

uint64_t sub_100030B70()
{
  return v0 + 0x20000;
}

uint64_t sub_100030B78()
{
  return 1650552161LL;
}

uint64_t sub_100030B8C()
{
  return 1634954593LL;
}

uint64_t sub_100030B9C()
{
  return 7631733LL;
}

uint64_t sub_100030BA8()
{
  return 7496296LL;
}

void sub_100030BB4(char *a1)
{
}

void sub_100030BC0()
{
}

void sub_100030BCC(uint64_t a1)
{
}

void sub_100030BD4(uint64_t a1)
{
}

unint64_t sub_100030BDC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s24MessagesBlastDoorService28MessageSummaryInfoDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100030C08()
{
  return ((uint64_t (*)(void))((char *)sub_100030C34 + 4 * byte_10008E800[*v0]))();
}

void sub_100030C34(void *a1@<X8>)
{
  *a1 = 7564641LL;
  a1[1] = v1;
}

void sub_100030C44(void *a1@<X8>)
{
  *a1 = 6450529LL;
  a1[1] = v1;
}

void sub_100030C54(void *a1@<X8>)
{
  *a1 = v2 + 0x20000;
  a1[1] = v1;
}

void sub_100030C60(void *a1@<X8>)
{
  *a1 = 1650552161LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_100030C78(void *a1@<X8>)
{
  *a1 = 1634954593LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_100030C8C(void *a1@<X8>)
{
  *a1 = 7631733LL;
  a1[1] = v1;
}

void sub_100030C9C(void *a1@<X8>)
{
  *a1 = 7496296LL;
  a1[1] = v1;
}

uint64_t sub_100030CAC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100030CD8 + 4 * byte_10008E808[*v0]))( 6516065LL,  0xE300000000000000LL);
}

uint64_t sub_100030CD8()
{
  return 7564641LL;
}

uint64_t sub_100030CE4()
{
  return 6450529LL;
}

uint64_t sub_100030CF0@<X0>(uint64_t a1@<X8>)
{
  return a1 + 0x20000;
}

uint64_t sub_100030CF8()
{
  return 1650552161LL;
}

uint64_t sub_100030D0C()
{
  return 1634954593LL;
}

uint64_t sub_100030D1C()
{
  return 7631733LL;
}

uint64_t sub_100030D28()
{
  return 7496296LL;
}

unint64_t sub_100030D34@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s24MessagesBlastDoorService28MessageSummaryInfoDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0(a1);
  *a2 = result;
  return result;
}

void sub_100030D58(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100030D64(uint64_t a1)
{
  unint64_t v2 = sub_1000309DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100030D8C(uint64_t a1)
{
  unint64_t v2 = sub_1000309DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100030DB4(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B03E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int16 v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_1000309DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MessageSummaryInfoDictionary.CodingKeys,  &type metadata for MessageSummaryInfoDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
  }

  else
  {
    char v54 = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v54, v5);
    int v14 = v13;
    char v53 = 1;
    uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v53, v5);
    int v42 = v14;
    char v52 = 2;
    uint64_t v16 = v15;
    swift_bridgeObjectRetain(v15);
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v52, v5);
    uint64_t v46 = v16;
    uint64_t v40 = v17;
    char v51 = 3;
    uint64_t v19 = v18;
    swift_bridgeObjectRetain(v18);
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v5);
    uint64_t v45 = v19;
    uint64_t v39 = v20;
    char v50 = 4;
    uint64_t v22 = v21;
    swift_bridgeObjectRetain(v21);
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v5);
    uint64_t v44 = v22;
    uint64_t v38 = v23;
    char v49 = 5;
    uint64_t v25 = v24;
    swift_bridgeObjectRetain(v24);
    uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v49, v5);
    uint64_t v43 = v25;
    uint64_t v37 = v26;
    char v48 = 6;
    uint64_t v28 = v27;
    swift_bridgeObjectRetain(v27);
    HIDWORD(v35) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    uint64_t v36 = v12;
    char v47 = 7;
    char v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v47, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100010D60(a1);
    uint64_t v30 = v28;
    swift_bridgeObjectRelease(v28);
    uint64_t v31 = v43;
    swift_bridgeObjectRelease(v43);
    uint64_t v32 = v44;
    swift_bridgeObjectRelease(v44);
    uint64_t v33 = v45;
    swift_bridgeObjectRelease(v45);
    uint64_t v34 = v46;
    swift_bridgeObjectRelease(v46);
    *(void *)a2 = v36;
    *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v42 & 1;
    *(void *)(a2 + 16) = v41;
    *(void *)(a2 + 24) = v34;
    *(void *)(a2 + 32) = v40;
    *(void *)(a2 + 40) = v33;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v39;
    *(void *)(a2 + 56) = v32;
    *(void *)(a2 + 64) = v38;
    *(void *)(a2 + 72) = v31;
    *(void *)(a2 + 80) = v37;
    *(void *)(a2 + 8_Block_object_dispose(va, 8) = v30;
    *(_BYTE *)(a2 + 96) = BYTE4(v35);
    *(_BYTE *)(a2 + 97) = v29;
  }

unint64_t _s24MessagesBlastDoorService28MessageSummaryInfoDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0( Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A35C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000312F4()
{
  unint64_t result = qword_1000B03C8;
  if (!qword_1000B03C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSummaryInfoDictionary.CodingKeys,  &type metadata for MessageSummaryInfoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03C8);
  }

  return result;
}

unint64_t sub_10003133C()
{
  unint64_t result = qword_1000B03D0;
  if (!qword_1000B03D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSummaryInfoDictionary.CodingKeys,  &type metadata for MessageSummaryInfoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03D0);
  }

  return result;
}

unint64_t sub_100031384()
{
  unint64_t result = qword_1000B03D8;
  if (!qword_1000B03D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageSummaryInfoDictionary.CodingKeys,  &type metadata for MessageSummaryInfoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B03D8);
  }

  return result;
}

ValueMetadata *type metadata accessor for MessageSummaryInfoDictionary()
{
  return &type metadata for MessageSummaryInfoDictionary;
}

uint64_t getEnumTagSinglePayload for MessageSummaryInfoDictionary.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for MessageSummaryInfoDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000314B4 + 4 * byte_10008E815[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000314E8 + 4 * byte_10008E810[v4]))();
}

uint64_t sub_1000314E8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000314F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000314F8LL);
  }
  return result;
}

uint64_t sub_100031504(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003150CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100031510(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100031518(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageSummaryInfoDictionary.CodingKeys()
{
  return &type metadata for MessageSummaryInfoDictionary.CodingKeys;
}

ValueMetadata *type metadata accessor for VideoMessageMetadataUnpacker()
{
  return &type metadata for VideoMessageMetadataUnpacker;
}

uint64_t sub_100031544()
{
  return sub_100031610(&qword_1000B03E8, (uint64_t)&protocol conformance descriptor for VideoMessageMetadata);
}

uint64_t sub_100031568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v5 = PropertyListDecoder.init()();
  uint64_t v6 = type metadata accessor for VideoMessageMetadata(0LL);
  uint64_t v7 = sub_100031610(&qword_1000B03F0, (uint64_t)&protocol conformance descriptor for VideoMessageMetadata);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100031610(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for VideoMessageMetadata(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_100031650(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_100031698()
{
  return Hasher._finalize()();
}

void sub_100031704(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_10000E624(&qword_1000AFF08);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v107 - v9;
  __chkstk_darwin(v8);
  uint64_t v124 = (char *)&v107 - v11;
  uint64_t v12 = type metadata accessor for SMSParserPart(0LL);
  uint64_t v122 = *(void *)(v12 - 8);
  uint64_t v123 = v12;
  __chkstk_darwin(v12);
  uint64_t v125 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SMSParserAttachmentPart(0LL);
  uint64_t v126 = *(void *)(v14 - 8);
  uint64_t v127 = v14;
  __chkstk_darwin(v14);
  uint64_t v131 = (char *)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for SMSParserTextPart(0LL);
  uint64_t v129 = *(void *)(v16 - 8);
  uint64_t v130 = v16;
  __chkstk_darwin(v16);
  uint64_t v133 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for _AttributedString(0LL);
  uint64_t v132 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v128 = (uint64_t)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = v1[6];
  unint64_t v23 = v1[7];
  if (v23 >> 60 == 15)
  {
    SMSCTPartAttachment.init(with:)(v1[6], v1[7]);
    if (!v2)
    {
      uint64_t v25 = (unsigned int *)&enum case for SMSCTPart.Content.attachment(_:);
LABEL_4:
      uint64_t v26 = *v25;
      uint64_t v27 = type metadata accessor for SMSCTPart.Content(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104LL))(a1, v26, v27);
      return;
    }

    return;
  }

  uint64_t v120 = v18;
  uint64_t v121 = a1;
  uint64_t v28 = v1[1];
  if (!v28) {
    goto LABEL_18;
  }
  uint64_t v29 = *v1;
  if (v29 == 0x616C702F74786574LL && v28 == 0xEA00000000006E69LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x616C702F74786574LL, 0xEA00000000006E69LL, v29, v28, 0LL) & 1) != 0)
  {
    uint64_t v30 = sub_100012A64(v24, v23);
    static String.Encoding.utf8.getter(v30);
    uint64_t v31 = String.init(data:encoding:)(v24, v23, v22);
    uint64_t v32 = v121;
    SMSCTPartPlain.init(with:)(v31);
    if (!v2)
    {
      uint64_t v33 = (unsigned int *)&enum case for SMSCTPart.Content.plain(_:);
LABEL_20:
      uint64_t v43 = *v33;
      uint64_t v44 = type metadata accessor for SMSCTPart.Content(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104LL))(v32, v43, v44);
      goto LABEL_21;
    }

    goto LABEL_21;
  }

  if ((v29 != 0xD000000000000010LL || v28 != 0x800000010008B0B0LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010008B0B0LL, v29, v28, 0LL) & 1) == 0)
  {
LABEL_18:
    sub_100012AA8(v24, v23);
    sub_100012A64(v24, v23);
    uint64_t v32 = v121;
    SMSCTPartAttachment.init(with:)(v24, v23);
    if (!v2)
    {
      uint64_t v33 = (unsigned int *)&enum case for SMSCTPart.Content.attachment(_:);
      goto LABEL_20;
    }

LABEL_21:
    sub_100012B98(v24, v23);
    return;
  }

  uint64_t v34 = sub_100012A64(v24, v23);
  static String.Encoding.utf8.getter(v34);
  String.init(data:encoding:)(v24, v23, v22);
  if (!v35)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))(v7, 1LL, 1LL, v120);
    uint64_t v45 = v121;
    SMSCTPartSMIL.init(with:orderedParts:)(v7, &_swiftEmptyArrayStorage);
    sub_100012B98(v24, v23);
    if (v2) {
      return;
    }
    goto LABEL_58;
  }

  uint64_t v36 = v35;
  id v37 = [(id)objc_opt_self(MBDXMLParser) sharedInstance];
  id v38 = objc_allocWithZone((Class)&OBJC_CLASS___MBDSMSToSuperParserContext);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  id v40 = [v38 initWithContent:v39];

  id v116 = v37;
  if (![v37 parseContext:v40])
  {
    uint64_t v46 = v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))(v10, 1LL, 1LL, v120);
    uint64_t v45 = v121;
    SMSCTPartSMIL.init(with:orderedParts:)(v10, &_swiftEmptyArrayStorage);
    if (v2)
    {

      goto LABEL_21;
    }

    sub_100012B98(v24, v23);

LABEL_58:
    uint64_t v90 = enum case for SMSCTPart.Content.smil(_:);
    uint64_t v91 = type metadata accessor for SMSCTPart.Content(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 104LL))(v45, v90, v91);
    return;
  }

  id v41 = [v40 body];
  _AttributedString.init(fromNSAttributedString:)(v41, v128);
  uint64_t v42 = v120;
  if (v2)
  {

    goto LABEL_21;
  }

  id v113 = v40;
  id v47 = [v40 orderedParts];
  uint64_t v112 = (char *)&type metadata for Any + 8;
  uint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, (char *)&type metadata for Any + 8);

  uint64_t v49 = *(void *)(v48 + 16);
  if (!v49)
  {
    swift_bridgeObjectRelease(v48);
    uint64_t v106 = &_swiftEmptyArrayStorage;
LABEL_60:
    uint64_t v92 = v132;
    uint64_t v93 = v124;
    uint64_t v94 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v124, v128, v42);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v93, 0LL, 1LL, v42);
    a1 = v121;
    SMSCTPartSMIL.init(with:orderedParts:)(v93, v106);
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v94, v42);
    sub_100012B98(v24, v23);

    uint64_t v25 = (unsigned int *)&enum case for SMSCTPart.Content.smil(_:);
    goto LABEL_4;
  }

  unint64_t v50 = 0LL;
  uint64_t v51 = v48 + 32;
  uint64_t v114 = &_swiftEmptyArrayStorage;
  uint64_t v111 = v48;
  uint64_t v108 = v49;
  uint64_t v107 = v48 + 32;
  while (v50 < *(void *)(v48 + 16))
  {
    unint64_t v110 = v50;
    sub_10001533C(v51 + 32 * v50, (uint64_t)v134);
    uint64_t v52 = sub_100018290(0LL, &qword_1000B03F8, off_1000A2818);
    if (!swift_dynamicCast(&v135, v134, v112, v52, 6LL))
    {
      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v111);
      uint64_t v103 = type metadata accessor for Explosion(0LL);
      unint64_t v104 = sub_10001295C();
      swift_allocError(v103, v104, 0LL, 0LL);
      uint64_t v105 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000032LL,  0x800000010008B0D0LL,  0xD000000000000017LL,  0x800000010008B110LL,  0LL,  0LL);
      swift_willThrow(v105);

      uint64_t v102 = &v137;
      goto LABEL_64;
    }

    id v115 = v135;
    id v53 = [v135 textParts];
    uint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, (char *)&type metadata for Any + 8);

    uint64_t v55 = *(void **)(v54 + 16);
    if (v55)
    {
      uint64_t v109 = v54;
      uint64_t v56 = v54 + 32;
      uint64_t v57 = &_swiftEmptyArrayStorage;
      while (1)
      {
        sub_10001533C(v56, (uint64_t)v134);
        uint64_t v58 = sub_100018290(0LL, &qword_1000B0400, &off_1000A2820);
        uint64_t v117 = v56;
        uint64_t v118 = v55;
        unint64_t v59 = (unint64_t)v57;
        id v60 = v135;
        id v61 = [v135 contentLocation];
        uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        uint64_t v63 = v62;

        id v64 = [v60 text];
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        uint64_t v67 = v66;

        SMSParserTextPart.init(with:text:)(v119, v63, v65, v67);
        uint64_t v57 = (void *)v59;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v59);
        uint64_t v42 = v120;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v57 = (void *)sub_100032EA4( 0,  *(void *)(v59 + 16) + 1LL,  1,  v59,  &qword_1000B0420,  (uint64_t (*)(void))&type metadata accessor for SMSParserTextPart);
        }
        unint64_t v70 = v57[2];
        unint64_t v69 = v57[3];
        if (v70 >= v69 >> 1) {
          uint64_t v57 = (void *)sub_100032EA4( v69 > 1,  v70 + 1,  1,  (unint64_t)v57,  &qword_1000B0420,  (uint64_t (*)(void))&type metadata accessor for SMSParserTextPart);
        }
        v57[2] = v70 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v129 + 32))( (unint64_t)v57 + ((*(unsigned __int8 *)(v129 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80))
        + *(void *)(v129 + 72) * v70,
          v133,
          v130);

        uint64_t v56 = v117 + 32;
        uint64_t v55 = (void *)((char *)v118 - 1);
        if (v118 == (void *)1)
        {
          swift_bridgeObjectRelease(v109);
          goto LABEL_41;
        }
      }

      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v111);
      swift_bridgeObjectRelease(v57);
      swift_bridgeObjectRelease(v109);
      uint64_t v95 = type metadata accessor for Explosion(0LL);
      unint64_t v96 = sub_10001295C();
      swift_allocError(v95, v96, 0LL, 0LL);
      unint64_t v97 = 0xD000000000000013LL;
      unint64_t v98 = "InvalidSMILTextPart";
LABEL_63:
      uint64_t v101 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000032LL,  0x800000010008B0D0LL,  v97,  (unint64_t)(v98 - 32) | 0x8000000000000000LL,  0LL,  0LL);
      swift_willThrow(v101);

      uint64_t v102 = &v136;
LABEL_64:

      sub_100012B98(v24, v23);
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v128, v42);
      return;
    }

    swift_bridgeObjectRelease(v54);
    uint64_t v57 = &_swiftEmptyArrayStorage;
LABEL_41:
    id v71 = objc_msgSend(v115, "attachmentParts", v107, v108);
    uint64_t v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v71, (char *)&type metadata for Any + 8);

    uint64_t v73 = *(void *)(v72 + 16);
    if (v73)
    {
      uint64_t v117 = v72;
      uint64_t v118 = v57;
      uint64_t v74 = v72 + 32;
      uint64_t v75 = &_swiftEmptyArrayStorage;
      while (1)
      {
        sub_10001533C(v74, (uint64_t)v134);
        uint64_t v76 = sub_100018290(0LL, &qword_1000B0408, off_1000A2810);
        uint64_t v119 = (uint64_t)v75;
        id v77 = v135;
        id v78 = [v135 contentLocation];
        uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v78);
        uint64_t v81 = v80;

        SMSParserAttachmentPart.init(with:)(v79, v81);
        uint64_t v75 = (void *)v119;
        if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0) {
          uint64_t v75 = (void *)sub_100032EA4( 0,  v75[2] + 1LL,  1,  (unint64_t)v75,  &qword_1000B0418,  (uint64_t (*)(void))&type metadata accessor for SMSParserAttachmentPart);
        }
        unint64_t v83 = v75[2];
        unint64_t v82 = v75[3];
        if (v83 >= v82 >> 1) {
          uint64_t v75 = (void *)sub_100032EA4( v82 > 1,  v83 + 1,  1,  (unint64_t)v75,  &qword_1000B0418,  (uint64_t (*)(void))&type metadata accessor for SMSParserAttachmentPart);
        }
        v75[2] = v83 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v126 + 32))( (unint64_t)v75 + ((*(unsigned __int8 *)(v126 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80))
        + *(void *)(v126 + 72) * v83,
          v131,
          v127);

        v74 += 32LL;
        --v73;
        uint64_t v42 = v120;
        if (!v73)
        {
          swift_bridgeObjectRelease(v117);
          uint64_t v57 = v118;
          goto LABEL_51;
        }
      }

      swift_bridgeObjectRelease(v114);
      swift_bridgeObjectRelease(v111);
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v75);
      swift_bridgeObjectRelease(v117);
      uint64_t v99 = type metadata accessor for Explosion(0LL);
      unint64_t v100 = sub_10001295C();
      swift_allocError(v99, v100, 0LL, 0LL);
      unint64_t v97 = 0xD000000000000019LL;
      unint64_t v98 = "InvalidSMILAttachmentPart";
      goto LABEL_63;
    }

    swift_bridgeObjectRelease(v72);
    uint64_t v75 = &_swiftEmptyArrayStorage;
LABEL_51:
    SMSParserPart.init(with:attachmentParts:)(v57, v75);
    if ((swift_isUniquelyReferenced_nonNull_native(v114) & 1) == 0) {
      uint64_t v114 = (void *)sub_100032EA4( 0,  v114[2] + 1LL,  1,  (unint64_t)v114,  &qword_1000B0410,  (uint64_t (*)(void))&type metadata accessor for SMSParserPart);
    }
    unint64_t v84 = v110;
    uint64_t v85 = v114;
    unint64_t v87 = v114[2];
    unint64_t v86 = v114[3];
    if (v87 >= v86 >> 1)
    {
      uint64_t v85 = (void *)sub_100032EA4( v86 > 1,  v87 + 1,  1,  (unint64_t)v114,  &qword_1000B0410,  (uint64_t (*)(void))&type metadata accessor for SMSParserPart);
      unint64_t v84 = v110;
    }

    v85[2] = v87 + 1;
    unint64_t v88 = v84 + 1;
    unint64_t v89 = (*(unsigned __int8 *)(v122 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80);
    uint64_t v114 = v85;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))( (char *)v85 + v89 + *(void *)(v122 + 72) * v87,  v125,  v123);

    unint64_t v50 = v88;
    uint64_t v48 = v111;
    uint64_t v51 = v107;
    if (v88 == v108)
    {
      swift_bridgeObjectRelease(v111);
      uint64_t v106 = v114;
      goto LABEL_60;
    }
  }

  __break(1u);
}

    uint64_t v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_22:
    uint64_t v18 = (unint64_t *)(*(void *)(a1 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_10001533C(*(void *)(a1 + 56) + 32 * v14, (uint64_t)v23);
    *(void *)&uint64_t v22 = v20;
    *((void *)&v22 + 1) = v19;
    v21[0] = v22;
    v21[1] = v23[0];
    void v21[2] = v23[1];
    if (__PAIR128__(v19, v20) == __PAIR128__(a3, a2))
    {
      swift_bridgeObjectRetain(v19);
      sub_100043254((uint64_t)v21);
LABEL_24:
      swift_release(a1);
      return 1LL;
    }

    uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, *((void *)&v22 + 1), a2, a3, 0LL);
    swift_bridgeObjectRetain(v19);
    uint64_t result = sub_100043254((uint64_t)v21);
    if ((v12 & 1) != 0) {
      goto LABEL_24;
    }
  }

  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    uint64_t v16 = *(void *)(v6 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }

uint64_t sub_1000326A0()
{
  uint64_t v1 = sub_10000E624(&qword_1000B0000);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v36 = (uint64_t)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - v4;
  uint64_t v6 = sub_10000E624(&qword_1000B0100);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000B0108);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000E624(&qword_1000B0110);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000E624(&qword_1000B0138);
  Regex.init(_regexString:version:)(0xD000000000000061LL, 0x800000010008ABD0LL, 1LL, v17);
  sub_100012DC8(v0 + 16, (uint64_t)v40, &qword_1000AFF68);
  sub_100012DC8((uint64_t)v40, (uint64_t)&v41, &qword_1000AFF68);
  if (!*((void *)&v41 + 1))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
    goto LABEL_6;
  }

  uint64_t v35 = v5;
  __int128 v37 = v41;
  unint64_t v18 = sub_10001ACD4();
  unint64_t v19 = sub_10001AD18();
  BidirectionalCollection<>.firstMatch<A, B>(of:)(v16, &type metadata for String, v17, v13, v18, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v30 = &qword_1000B0100;
    uint64_t v29 = (uint64_t)v8;
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  uint64_t KeyPath = swift_getKeyPath(&unk_10008EA80);
  Regex.Match.subscript.getter(&v37, KeyPath, v9);
  swift_release(KeyPath);
  uint64_t v21 = v39;
  uint64_t v22 = static String._fromSubstring(_:)(v37, *((void *)&v37 + 1), v38, v39);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease(v21);
  uint64_t v25 = (uint64_t)v35;
  UUID.init(uuidString:)(v22, v24);
  swift_bridgeObjectRelease(v24);
  uint64_t v26 = v36;
  sub_10003332C(v25, v36);
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27) != 1)
  {
    uint64_t v34 = v28;
    uint64_t v31 = UUID.uuidString.getter();
    sub_100012EF8(v25, &qword_1000B0000);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v27);
    return v31;
  }

  sub_100012EF8(v25, &qword_1000B0000);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v29 = v26;
  uint64_t v30 = &qword_1000B0000;
LABEL_7:
  sub_100012EF8(v29, v30);
  return 0LL;
}

uint64_t sub_100032A44(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B0478);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100033D90();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SMSCTPartDictionary.CodingKeys,  &type metadata for SMSCTPartDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v22[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    v22[0] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v22, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    v22[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v22, v5);
    sub_100012DC8((uint64_t)(v3 + 6), (uint64_t)v23, &qword_1000AFF70);
    sub_100012DC8((uint64_t)v23, (uint64_t)v22, &qword_1000AFF70);
    char v21 = 3;
    unint64_t v18 = sub_100030080();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v21, v5, &type metadata for Data, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_100032BE0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t sub_100032C20(void *a1)
{
  return sub_100032A44(a1);
}

void sub_100032C58(char *a1)
{
}

void sub_100032C64()
{
}

void sub_100032C6C()
{
  __asm { BR              X10 }

uint64_t sub_100032CA0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEA00000000006469LL);
}

void sub_100032CF8(uint64_t a1)
{
}

unint64_t sub_100032D00@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003368C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100032D2C()
{
  return ((uint64_t (*)(void))((char *)sub_100032D54 + 4 * byte_10008EA68[*v0]))();
}

void sub_100032D54(void *a1@<X8>)
{
  *a1 = 0x2D746E65746E6F63LL;
  a1[1] = 0xEA00000000006469LL;
}

void sub_100032D74(void *a1@<X8>)
{
  *a1 = 0xD000000000000010LL;
  a1[1] = 0x800000010008A180LL;
}

void sub_100032D94(void *a1@<X8>)
{
  *a1 = 1635017060LL;
  a1[1] = v1;
}

uint64_t sub_100032DA4()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100032DCC + 4 * byte_10008EA6C[*v0]))( 1701869940LL,  0xE400000000000000LL);
}

uint64_t sub_100032DCC()
{
  return 0x2D746E65746E6F63LL;
}

unint64_t sub_100032DE8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100032E04()
{
  return 1635017060LL;
}

unint64_t sub_100032E10@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10003368C(a1);
  *a2 = result;
  return result;
}

void sub_100032E34(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100032E40(uint64_t a1)
{
  unint64_t v2 = sub_100033D90();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100032E68(uint64_t a1)
{
  unint64_t v2 = sub_100033D90();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100032E90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032EA4( a1,  a2,  a3,  a4,  &qword_1000B0460,  (uint64_t (*)(void))&type metadata accessor for AttributionInfo);
}

uint64_t sub_100032EA4( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_10000E624(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1000337BC(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1000330B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032EA4( a1,  a2,  a3,  a4,  &qword_1000B0440,  (uint64_t (*)(void))&type metadata accessor for MorphologyCustomPronounPair);
}

char *sub_1000330C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_10000E624(&qword_1000B0438);
      uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 3);
      uint64_t v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 32]) {
          memmove(v14, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000336D4(0LL, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000331D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032EA4( a1,  a2,  a3,  a4,  &qword_1000B0430,  (uint64_t (*)(void))&type metadata accessor for StyleSheet.Rule.Declaration);
}

uint64_t sub_1000331E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032EA4( a1,  a2,  a3,  a4,  &qword_1000B0428,  (uint64_t (*)(void))&type metadata accessor for StyleSheet.Rule);
}

uint64_t sub_1000331F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100032EA4( a1,  a2,  a3,  a4,  &qword_1000B0448,  (uint64_t (*)(void))&type metadata accessor for FileTransferAttribute.AttachmentInfo);
}

char *sub_10003320C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_10000E624(&qword_1000B0450);
      uint64_t v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[40 * v8 + 32]) {
          memmove(v13, a4 + 32, 40 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
    }

    sub_1000338D4(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10003332C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B0000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033374@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0468);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100033D90();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SMSCTPartDictionary.CodingKeys,  &type metadata for SMSCTPartDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    return sub_100012B98(0LL, 0xF000000000000000LL);
  }

  else
  {
    LOBYTE(v30) = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    uint64_t v14 = v13;
    uint64_t v29 = v12;
    LOBYTE(v30) = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    uint64_t v17 = v16;
    uint64_t v27 = v15;
    uint64_t v28 = a2;
    LOBYTE(v30) = 2;
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    uint64_t v20 = v19;
    uint64_t v26 = v18;
    char v32 = 3;
    unint64_t v21 = sub_10002FFD4();
    swift_bridgeObjectRetain(v20);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v30,  &type metadata for Data,  &v32,  v5,  &type metadata for Data,  v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v22 = v30;
    unint64_t v23 = v31;
    sub_100012AA8(v30, v31);
    sub_100012B98(0LL, 0xF000000000000000LL);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    sub_100012AA8(v22, v23);
    sub_100012B98(v22, v23);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v20);
    sub_100010D60(a1);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v14);
    uint64_t result = sub_100012B98(v22, v23);
    unint64_t v25 = v28;
    uint64_t *v28 = v29;
    v25[1] = v14;
    v25[2] = v27;
    v25[3] = v17;
    v25[4] = v26;
    void v25[5] = v20;
    v25[6] = v22;
    v25[7] = v23;
  }

  return result;
}

unint64_t sub_10003368C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A36A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

char *sub_1000336D4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000337BC( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000338D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_10000E624(&qword_1000B0458);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void destroy for SMSCTPartDictionary(void *a1)
{
  unint64_t v2 = a1[7];
  if (v2 >> 60 != 15) {
    sub_100012B54(a1[6], v2);
  }
}

uint64_t initializeWithCopy for SMSCTPartDictionary(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v5;
  unint64_t v6 = a2 + 6;
  unint64_t v7 = a2[7];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_100012A64(*v6, v7);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v8;
    *(void *)(a1 + 56) = v7;
  }

  return a1;
}

void *assignWithCopy for SMSCTPartDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2 + 6;
  unint64_t v11 = a2[7];
  if (a1[7] >> 60 != 15LL)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      sub_100012A64(*v10, v11);
      uint64_t v14 = a1[6];
      unint64_t v15 = a1[7];
      a1[6] = v13;
      a1[7] = v11;
      sub_100012B54(v14, v15);
      return a1;
    }

    sub_100033BD0((uint64_t)(a1 + 6));
    goto LABEL_6;
  }

  if (v11 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v10;
    return a1;
  }

  uint64_t v12 = *v10;
  sub_100012A64(*v10, v11);
  a1[6] = v12;
  a1[7] = v11;
  return a1;
}

uint64_t sub_100033BD0(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for SMSCTPartDictionary(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for SMSCTPartDictionary(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2 + 6;
  unint64_t v11 = a1[7];
  if (v11 >> 60 != 15)
  {
    unint64_t v12 = a2[7];
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = a1[6];
      a1[6] = *v10;
      a1[7] = v12;
      sub_100012B54(v13, v11);
      return a1;
    }

    sub_100033BD0((uint64_t)(a1 + 6));
  }

  *((_OWORD *)a1 + 3) = *(_OWORD *)v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for SMSCTPartDictionary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SMSCTPartDictionary(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SMSCTPartDictionary()
{
  return &type metadata for SMSCTPartDictionary;
}

unint64_t sub_100033D90()
{
  unint64_t result = qword_1000B0470;
  if (!qword_1000B0470)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EC00, &type metadata for SMSCTPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0470);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SMSCTPartDictionary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for SMSCTPartDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100033EB0 + 4 * byte_10008EA75[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100033EE4 + 4 * byte_10008EA70[v4]))();
}

uint64_t sub_100033EE4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033EEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100033EF4LL);
  }
  return result;
}

uint64_t sub_100033F00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100033F08LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100033F0C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033F14(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SMSCTPartDictionary.CodingKeys()
{
  return &type metadata for SMSCTPartDictionary.CodingKeys;
}

unint64_t sub_100033F34()
{
  unint64_t result = qword_1000B0480;
  if (!qword_1000B0480)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EBD8, &type metadata for SMSCTPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0480);
  }

  return result;
}

unint64_t sub_100033F7C()
{
  unint64_t result = qword_1000B0488;
  if (!qword_1000B0488)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EB10, &type metadata for SMSCTPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0488);
  }

  return result;
}

unint64_t sub_100033FC4()
{
  unint64_t result = qword_1000B0490;
  if (!qword_1000B0490)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EB38, &type metadata for SMSCTPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0490);
  }

  return result;
}

BOOL sub_100034008(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10003401C(uint64_t a1, uint64_t a2)
{
  char v7 = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10003407C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100037CC4();
  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000340B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v8 = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void sub_100034110(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100034118@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10003C8B0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10003413C()
{
  return *v0 + 1LL;
}

uint64_t sub_100034148@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10003C8B0(*a1);
  *a2 = result;
  return result;
}

void sub_100034170(void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

void sub_100034180(void *a1@<X8>)
{
  *a1 = &off_1000A3720;
}

uint64_t sub_100034190(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000395CC();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000341C8@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (result == 1) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1000341E4()
{
  if (*v0) {
    return 2LL;
  }
  else {
    return 1LL;
  }
}

void *sub_1000341F8@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1LL) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void sub_100034218(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1LL;
  if (*v1) {
    uint64_t v2 = 2LL;
  }
  *a1 = v2;
}

void sub_100034230(void *a1@<X8>)
{
  *a1 = &off_1000A3748;
}

uint64_t sub_100034240()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC020);
  sub_100037D08(v0, (uint64_t)qword_1000BC020);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 - v4 + 8 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008EC50;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "messageType";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  unint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "sendDate";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)unint64_t v15 = "messageData";
  *((void *)v15 + 1) = 11LL;
  _BYTE v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "baseColor";
  *((void *)v17 + 1) = 9LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "identifier";
  *((void *)v19 + 1) = 10LL;
  v19[16] = 2;
  v12();
  uint64_t v20 = (void *)(v8 + 5 * v4);
  unint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *uint64_t v20 = 6LL;
  *(void *)unint64_t v21 = "supportsPlaybackTimeOffsets";
  *((void *)v21 + 1) = 27LL;
  v21[16] = 2;
  v12();
  uint64_t v22 = (void *)(v8 + 6 * v4);
  unint64_t v23 = (char *)v22 + *(int *)(v2 + 48);
  *uint64_t v22 = 7LL;
  *(void *)unint64_t v23 = "startDelay";
  *((void *)v23 + 1) = 10LL;
  _BYTE v23[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000344A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          sub_100034664(a1, v5, a2, a3);
          break;
        case 2LL:
          uint64_t v11 = type metadata accessor for ETP_Header(0LL);
          dispatch thunk of Decoder.decodeSingularSFixed64Field(value:)(v5 + *(int *)(v11 + 24), a2, a3);
          break;
        case 3LL:
          uint64_t v12 = type metadata accessor for ETP_Header(0LL);
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v5 + *(int *)(v12 + 28), a2, a3);
          break;
        case 4LL:
          uint64_t v13 = type metadata accessor for ETP_Header(0LL);
          dispatch thunk of Decoder.decodeSingularFixed32Field(value:)(v5 + *(int *)(v13 + 32), a2, a3);
          break;
        case 5LL:
          uint64_t v14 = type metadata accessor for ETP_Header(0LL);
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v5 + *(int *)(v14 + 36), a2, a3);
          break;
        case 6LL:
          uint64_t v15 = type metadata accessor for ETP_Header(0LL);
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v5 + *(int *)(v15 + 40), a2, a3);
          break;
        case 7LL:
          uint64_t v16 = type metadata accessor for ETP_Header(0LL);
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)(v5 + *(int *)(v16 + 44), a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100034664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + *(int *)(type metadata accessor for ETP_Header(0LL) + 20);
  unint64_t v7 = sub_100037CC4();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v6,  &type metadata for ETP_Header.MessageType,  v7,  a3,  a4);
}

uint64_t sub_1000346D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for ETP_Header(0LL);
  char v10 = (int *)v9;
  if (*(_BYTE *)(v5 + *(int *)(v9 + 20)) == 8
    || (char v22 = *(_BYTE *)(v5 + *(int *)(v9 + 20)),
        unint64_t v11 = sub_100037CC4(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v22,  1LL,  &type metadata for ETP_Header.MessageType,  v11,  a2,  a3),  !v4))
  {
    uint64_t v13 = v5 + v10[6];
    if ((*(_BYTE *)(v13 + 8) & 1) != 0
      || (uint64_t result = dispatch thunk of Visitor.visitSingularSFixed64Field(value:fieldNumber:)(*(void *)v13, 2LL, a2, a3),
          !v4))
    {
      uint64_t v14 = v5 + v10[7];
      unint64_t v15 = *(void *)(v14 + 8);
      if (v15 >> 60 == 15
        || (uint64_t v16 = *(void *)v14,
            sub_100012A64(*(void *)v14, *(void *)(v14 + 8)),
            dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v16, v15, 3LL, a2, a3),
            uint64_t result = sub_100012B98(v16, v15),
            !v4))
      {
        uint64_t v17 = (unsigned int *)(v5 + v10[8]);
        if ((v17[1] & 1) != 0
          || (uint64_t result = dispatch thunk of Visitor.visitSingularFixed32Field(value:fieldNumber:)(*v17, 4LL, a2, a3), !v4))
        {
          uint64_t v18 = (void *)(v5 + v10[9]);
          uint64_t v19 = v18[1];
          if (!v19
            || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(*v18, v19, 5LL, a2, a3),
                !v4))
          {
            int v20 = *(unsigned __int8 *)(v5 + v10[10]);
            if (v20 == 2
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(v20 & 1, 6LL, a2, a3),
                  !v4))
            {
              uint64_t v21 = v5 + v10[11];
              if ((*(_BYTE *)(v21 + 8) & 1) != 0) {
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
              uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)( 7LL,  a2,  a3,  *(double *)v21);
              if (!v4) {
                return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

double sub_1000348DC@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  *(_BYTE *)(a2 + a1[5]) = 8;
  uint64_t v5 = a2 + v4;
  *(void *)uint64_t v5 = 0LL;
  *(_BYTE *)(v5 + _Block_object_dispose(va, 8) = 1;
  double result = 0.0;
  uint64_t v7 = a1[8];
  *(_OWORD *)(a2 + a1[7]) = xmmword_10008D9E0;
  uint64_t v8 = a2 + v7;
  *(_DWORD *)uint64_t v8 = 0;
  *(_BYTE *)(v8 + 4) = 1;
  uint64_t v9 = a1[10];
  char v10 = (void *)(a2 + a1[9]);
  *char v10 = 0LL;
  v10[1] = 0LL;
  *(_BYTE *)(a2 + v9) = 2;
  uint64_t v11 = a2 + a1[11];
  *(void *)uint64_t v11 = 0LL;
  *(_BYTE *)(v11 + _Block_object_dispose(va, 8) = 1;
  return result;
}

uint64_t sub_10003495C()
{
  return 0x646165482E505445LL;
}

uint64_t (*sub_100034984())()
{
  return nullsub_1;
}

uint64_t sub_100034994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000344A8(a1, a2, a3);
}

uint64_t sub_1000349A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000346D8(a1, a2, a3);
}

uint64_t sub_1000349C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B05B8, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F7BC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100034A14@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFC70, (uint64_t)qword_1000BC020, (uint64_t)sub_100034240, a1);
}

uint64_t sub_100034A30(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B0580, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F7F4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100034A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0580, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F7F4);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100034ACC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC038);
  sub_100037D08(v0, (uint64_t)qword_1000BC038);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v26 = swift_allocObject(v1, v6 + 8 * v4, v5 | 7);
  *(_OWORD *)(v26 + 16) = xmmword_10008EC60;
  uint64_t v7 = v26 + v6;
  uint64_t v8 = v26 + v6 + *(int *)(v2 + 48);
  *(void *)(v26 + v6) = 1LL;
  *(void *)uint64_t v8 = "Tap";
  *(void *)(v8 + _Block_object_dispose(va, 8) = 3LL;
  *(_BYTE *)(v8 + 16) = 2;
  uint64_t v9 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  uint64_t v12 = v7 + v4 + *(int *)(v2 + 48);
  *(void *)(v7 + v4) = 2LL;
  *(void *)uint64_t v12 = "QuickTap";
  *(void *)(v12 + _Block_object_dispose(va, 8) = 8LL;
  *(_BYTE *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v4);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 48);
  void *v13 = 3LL;
  *(void *)uint64_t v14 = "Heartbeat";
  *((void *)v14 + 1) = 9LL;
  v14[16] = 2;
  v11();
  unint64_t v15 = (void *)(v7 + 3 * v4);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 48);
  *unint64_t v15 = 4LL;
  *(void *)uint64_t v16 = "Doodle";
  *((void *)v16 + 1) = 6LL;
  v16[16] = 2;
  v11();
  uint64_t v17 = (void *)(v7 + 4 * v4);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 48);
  void *v17 = 5LL;
  *(void *)uint64_t v18 = "ReadReceipt";
  *((void *)v18 + 1) = 11LL;
  v18[16] = 2;
  v11();
  uint64_t v19 = (void *)(v7 + 5 * v4);
  int v20 = (char *)v19 + *(int *)(v2 + 48);
  *uint64_t v19 = 6LL;
  *(void *)int v20 = "Video";
  *((void *)v20 + 1) = 5LL;
  v20[16] = 2;
  v11();
  uint64_t v21 = (void *)(v7 + 6 * v4);
  char v22 = (char *)v21 + *(int *)(v2 + 48);
  *uint64_t v21 = 7LL;
  *(void *)char v22 = "Kiss";
  *((void *)v22 + 1) = 4LL;
  _BYTE v22[16] = 2;
  v11();
  unint64_t v23 = (void *)(v7 + 7 * v4);
  unint64_t v24 = (char *)v23 + *(int *)(v2 + 48);
  void *v23 = 8LL;
  *(void *)unint64_t v24 = "Anger";
  *((void *)v24 + 1) = 5LL;
  v24[16] = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)(v26);
}

uint64_t sub_100034D68@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFC78, (uint64_t)qword_1000BC038, (uint64_t)sub_100034ACC, a1);
}

uint64_t sub_100034D84()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC050);
  sub_100037D08(v0, (uint64_t)qword_1000BC050);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008E2E0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 2LL;
  *(void *)uint64_t v9 = "timeDeltas";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 10LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 3LL;
  *(void *)uint64_t v13 = "points";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 4LL;
  *(void *)uint64_t v14 = "colors";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100034F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 4LL:
        uint64_t v9 = *(int *)(type metadata accessor for ETP_Tap(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + v9, a2, a3);
        break;
      case 3LL:
        uint64_t v9 = *(int *)(type metadata accessor for ETP_Tap(0LL) + 24);
        goto LABEL_3;
      case 2LL:
        uint64_t v9 = *(int *)(type metadata accessor for ETP_Tap(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_100034FDC()
{
  return 0x7061542E505445LL;
}

uint64_t sub_100034FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100034F14(a1, a2, a3);
}

uint64_t sub_100035008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036A98(a1, a2, a3, type metadata accessor for ETP_Tap, 2LL, 3LL, 4LL);
}

uint64_t sub_100035030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B05E0, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F62C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100035080@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFC80, (uint64_t)qword_1000BC050, (uint64_t)sub_100034D84, a1);
}

uint64_t sub_10003509C(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B0560, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F664);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000350DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0560, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F664);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_10003512C(uint64_t a1, uint64_t a2)
{
  return sub_1000389B4(a1, a2, type metadata accessor for ETP_Tap) & 1;
}

uint64_t sub_10003514C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC068);
  sub_100037D08(v0, (uint64_t)qword_1000BC068);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 6 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008EC70;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "beatsPerMinute";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 14LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "duration";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)unint64_t v15 = "normalizedCenterX";
  *((void *)v15 + 1) = 17LL;
  _BYTE v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "normalizedCenterY";
  *((void *)v17 + 1) = 17LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = (void *)(v8 + 4 * v4);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 48);
  *uint64_t v18 = 5LL;
  *(void *)uint64_t v19 = "rotation";
  *((void *)v19 + 1) = 8LL;
  v19[16] = 2;
  v12();
  int v20 = (void *)(v8 + 5 * v4);
  uint64_t v21 = (char *)v20 + *(int *)(v2 + 48);
  *int v20 = 6LL;
  *(void *)uint64_t v21 = "heartbreakTime";
  *((void *)v21 + 1) = 14LL;
  v21[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100035384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Heartbeat(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v10 = type metadata accessor for ETP_Heartbeat(0LL);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v10 + 24), a2, a3);
          break;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Heartbeat(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Heartbeat(0LL) + 32);
          goto LABEL_5;
        case 5LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Heartbeat(0LL) + 36);
          goto LABEL_5;
        case 6LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Heartbeat(0LL) + 40);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000354AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = (int *)type metadata accessor for ETP_Heartbeat(0LL);
  uint64_t v10 = v5 + v9[5];
  if ((*(_BYTE *)(v10 + 4) & 1) != 0
    || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1LL, a2, a3, *(float *)v10), !v4))
  {
    uint64_t v12 = (unsigned int *)(v5 + v9[6]);
    if ((v12[1] & 1) != 0
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v12, 2LL, a2, a3), !v4))
    {
      uint64_t v13 = v5 + v9[7];
      if ((*(_BYTE *)(v13 + 4) & 1) != 0
        || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13),
            !v4))
      {
        uint64_t v14 = v5 + v9[8];
        if ((*(_BYTE *)(v14 + 4) & 1) != 0
          || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(4LL, a2, a3, *(float *)v14),
              !v4))
        {
          uint64_t v15 = v5 + v9[9];
          if ((*(_BYTE *)(v15 + 4) & 1) != 0
            || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)( 5LL,  a2,  a3,  *(float *)v15),  !v4))
          {
            uint64_t v16 = v5 + v9[10];
            if ((*(_BYTE *)(v16 + 4) & 1) != 0) {
              return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
            }
            uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(6LL, a2, a3, *(float *)v16);
            if (!v4) {
              return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_100035634@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = UnknownStorage.init()();
  uint64_t v5 = a1[6];
  uint64_t v6 = a2 + a1[5];
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a2 + v5;
  *(_DWORD *)uint64_t v7 = 0;
  *(_BYTE *)(v7 + 4) = 1;
  uint64_t v8 = a1[8];
  uint64_t v9 = a2 + a1[7];
  *(_DWORD *)uint64_t v9 = 0;
  *(_BYTE *)(v9 + 4) = 1;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  uint64_t v11 = a1[10];
  uint64_t v12 = a2 + a1[9];
  *(_DWORD *)uint64_t v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  uint64_t v13 = a2 + v11;
  *(_DWORD *)uint64_t v13 = 0;
  *(_BYTE *)(v13 + 4) = 1;
  return result;
}

uint64_t sub_1000356B0()
{
  return 0x726165482E505445LL;
}

uint64_t sub_1000356D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100035384(a1, a2, a3);
}

uint64_t sub_1000356E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000354AC(a1, a2, a3);
}

uint64_t sub_1000356FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B05E8, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F4C4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10003574C@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFC88, (uint64_t)qword_1000BC068, (uint64_t)sub_10003514C, a1);
}

uint64_t sub_100035768(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B0540, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F4FC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000357A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0540, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F4FC);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000357FC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC080);
  sub_100037D08(v0, (uint64_t)qword_1000BC080);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008EC80;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "doodleCount";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 11LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "doodleData";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 10LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)uint64_t v15 = "colorData";
  *((void *)v15 + 1) = 9LL;
  _BYTE v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "pointTimeDeltaData";
  *((void *)v17 + 1) = 18LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000359BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = type metadata accessor for ETP_Doodle(0LL);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)(v3 + *(int *)(v10 + 20), a2, a3);
          break;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Doodle(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Doodle(0LL) + 28);
          goto LABEL_5;
        case 4LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Doodle(0LL) + 32);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + v9, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_100035AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = (int *)type metadata accessor for ETP_Doodle(0LL);
  uint64_t v10 = (unsigned int *)(v5 + v9[5]);
  if ((v10[1] & 1) != 0
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(*v10, 1LL, a2, a3), !v4))
  {
    uint64_t v12 = v5 + v9[6];
    unint64_t v13 = *(void *)(v12 + 8);
    if (v13 >> 60 == 15
      || (uint64_t v14 = *(void *)v12,
          sub_100012A64(*(void *)v12, *(void *)(v12 + 8)),
          dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v14, v13, 2LL, a2, a3),
          uint64_t result = sub_100012B98(v14, v13),
          !v4))
    {
      uint64_t v15 = v5 + v9[7];
      unint64_t v16 = *(void *)(v15 + 8);
      if (v16 >> 60 == 15
        || (uint64_t v17 = *(void *)v15,
            sub_100012A64(*(void *)v15, *(void *)(v15 + 8)),
            dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v17, v16, 3LL, a2, a3),
            uint64_t result = sub_100012B98(v17, v16),
            !v4))
      {
        uint64_t v18 = v5 + v9[8];
        unint64_t v19 = *(void *)(v18 + 8);
        if (v19 >> 60 == 15) {
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
        uint64_t v20 = *(void *)v18;
        sub_100012A64(*(void *)v18, *(void *)(v18 + 8));
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v20, v19, 4LL, a2, a3);
        uint64_t result = sub_100012B98(v20, v19);
        if (!v4) {
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

double sub_100035C70@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  double result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_10008D9E0;
  uint64_t v7 = a1[8];
  *(_OWORD *)(a2 + a1[7]) = xmmword_10008D9E0;
  *(_OWORD *)(a2 + v7) = xmmword_10008D9E0;
  return result;
}

uint64_t sub_100035CC0()
{
  return 0x646F6F442E505445LL;
}

uint64_t sub_100035CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000359BC(a1, a2, a3);
}

uint64_t sub_100035CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100035AC8(a1, a2, a3);
}

uint64_t sub_100035D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B05F0, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F35C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100035D54@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFC90, (uint64_t)qword_1000BC080, (uint64_t)sub_1000357FC, a1);
}

uint64_t sub_100035D70(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B0520, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F394);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100035DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0520, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F394);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100035E04()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC098);
  sub_100037D08(v0, (uint64_t)qword_1000BC098);
  return _NameMap.init()();
}

uint64_t sub_100035E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  while (!v3 && (v7 & 1) == 0);
  return result;
}

uint64_t sub_100035E8C()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_100035EA4()
{
  return 0x646165522E505445LL;
}

uint64_t sub_100035EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100035E4C(a1, a2, a3);
}

uint64_t sub_100035EDC()
{
  return sub_100035E8C();
}

uint64_t sub_100035EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B05F8, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F1F4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100035F40@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFC98, (uint64_t)qword_1000BC098, (uint64_t)sub_100035E04, a1);
}

uint64_t sub_100035F5C(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B0500, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F22C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100035F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0500, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F22C);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100035FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v15 - v9, a1, v4);
  v11(v8, a2, v4);
  uint64_t v12 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v12);
  unint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return a2 & 1;
}

uint64_t sub_1000360F8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC0B0);
  sub_100037D08(v0, (uint64_t)qword_1000BC0B0);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008E2E0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "introMessageData";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 16LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  unint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)unint64_t v13 = "playingMessagesData";
  *((void *)v13 + 1) = 19LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 4LL;
  *(void *)uint64_t v14 = "mediaType";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 9LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_10003628C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v9, i);
    if (v4 || (v13 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 4LL:
        sub_100036368(a1, v5, a2, a3);
        break;
      case 2LL:
        uint64_t v11 = *(int *)(type metadata accessor for ETP_Video(0LL) + 24);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v5 + v11, a2, a3);
        break;
      case 1LL:
        uint64_t v11 = *(int *)(type metadata accessor for ETP_Video(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v4 = 0LL;
    uint64_t v9 = a2;
  }

  return result;
}

uint64_t sub_100036368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2 + *(int *)(type metadata accessor for ETP_Video(0LL) + 28);
  unint64_t v7 = sub_1000395CC();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v6,  &type metadata for ETP_Video.MediaType,  v7,  a3,  a4);
}

uint64_t sub_1000363DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = (int *)type metadata accessor for ETP_Video(0LL);
  uint64_t v10 = v5 + v9[5];
  unint64_t v11 = *(void *)(v10 + 8);
  if (v11 >> 60 == 15
    || (uint64_t v12 = *(void *)v10,
        sub_100012A64(*(void *)v10, *(void *)(v10 + 8)),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v12, v11, 1LL, a2, a3),
        uint64_t result = sub_100012B98(v12, v11),
        !v4))
  {
    uint64_t v14 = v5 + v9[6];
    unint64_t v15 = *(void *)(v14 + 8);
    if (v15 >> 60 == 15
      || (uint64_t v16 = *(void *)v14,
          sub_100012A64(*(void *)v14, *(void *)(v14 + 8)),
          dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v16, v15, 2LL, a2, a3),
          uint64_t result = sub_100012B98(v16, v15),
          !v4))
    {
      int v17 = *(unsigned __int8 *)(v5 + v9[7]);
      if (v17 == 2) {
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
      char v19 = v17 & 1;
      unint64_t v18 = sub_1000395CC();
      uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v19,  4LL,  &type metadata for ETP_Video.MediaType,  v18,  a2,  a3);
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

double sub_10003654C@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  uint64_t v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_10008D9E0;
  *(_OWORD *)(a2 + v5) = xmmword_10008D9E0;
  *(_BYTE *)(a2 + a1[7]) = 2;
  return result;
}

uint64_t sub_100036590()
{
  return 0x656469562E505445LL;
}

uint64_t sub_1000365AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003628C(a1, a2, a3);
}

uint64_t sub_1000365C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000363DC(a1, a2, a3);
}

uint64_t sub_1000365D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0600, type metadata accessor for ETP_Video, (uint64_t)&unk_10008F08C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100036624@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFCA0, (uint64_t)qword_1000BC0B0, (uint64_t)sub_1000360F8, a1);
}

uint64_t sub_100036640(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B04E0, type metadata accessor for ETP_Video, (uint64_t)&unk_10008F0C4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100036680(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B04E0, type metadata accessor for ETP_Video, (uint64_t)&unk_10008F0C4);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000366D4()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC0C8);
  sub_100037D08(v0, (uint64_t)qword_1000BC0C8);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008EC90;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "Video";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  char v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)char v13 = "Photo";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100036828@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFCA8, (uint64_t)qword_1000BC0C8, (uint64_t)sub_1000366D4, a1);
}

uint64_t sub_100036844()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC0E0);
  sub_100037D08(v0, (uint64_t)qword_1000BC0E0);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 3 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008E2E0;
  char v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *char v8 = 1LL;
  *(void *)uint64_t v9 = "delays";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  char v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)char v13 = "points";
  *((void *)v13 + 1) = 6LL;
  v13[16] = 2;
  v12();
  uint64_t v14 = (uint64_t)v8 + 2 * v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + 2 * v4) = 3LL;
  *(void *)uint64_t v14 = "angles";
  *(void *)(v14 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v14 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000369D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v11 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 3LL:
        uint64_t v9 = *(int *)(type metadata accessor for ETP_Kiss(0LL) + 28);
LABEL_3:
        dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + v9, a2, a3);
        break;
      case 2LL:
        uint64_t v9 = *(int *)(type metadata accessor for ETP_Kiss(0LL) + 24);
        goto LABEL_3;
      case 1LL:
        uint64_t v9 = *(int *)(type metadata accessor for ETP_Kiss(0LL) + 20);
        goto LABEL_3;
    }

    uint64_t v4 = 0LL;
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_100036A98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = v7;
  unint64_t v15 = (int *)a4(0LL);
  uint64_t v16 = (uint64_t *)(v11 + v15[5]);
  unint64_t v17 = v16[1];
  uint64_t v31 = a6;
  if (v17 >> 60 == 15
    || (uint64_t v18 = v11,
        uint64_t v19 = *v16,
        sub_100012A64(*v16, v17),
        dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v19, v17, a5, a2, a3),
        uint64_t v20 = v19,
        uint64_t v11 = v18,
        uint64_t result = sub_100012B98(v20, v17),
        !v8))
  {
    uint64_t v22 = v11 + v15[6];
    unint64_t v23 = *(void *)(v22 + 8);
    if (v23 >> 60 == 15
      || (uint64_t v24 = v11,
          uint64_t v25 = *(void *)v22,
          sub_100012A64(*(void *)v22, *(void *)(v22 + 8)),
          dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v25, v23, v31, a2, a3),
          uint64_t v26 = v25,
          uint64_t v11 = v24,
          uint64_t result = sub_100012B98(v26, v23),
          !v8))
    {
      uint64_t v27 = v11 + v15[7];
      unint64_t v28 = *(void *)(v27 + 8);
      if (v28 >> 60 == 15) {
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
      uint64_t v29 = *(void *)v27;
      sub_100012A64(*(void *)v27, *(void *)(v27 + 8));
      dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v29, v28, a7, a2, a3);
      uint64_t result = sub_100012B98(v29, v28);
      if (!v8) {
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

double sub_100036C3C@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result = 0.0;
  uint64_t v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_10008D9E0;
  *(_OWORD *)(a2 + v5) = xmmword_10008D9E0;
  *(_OWORD *)(a2 + a1[7]) = xmmword_10008D9E0;
  return result;
}

uint64_t sub_100036C7C()
{
  return 0x7373694B2E505445LL;
}

uint64_t sub_100036C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000369D4(a1, a2, a3);
}

uint64_t sub_100036CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036A98(a1, a2, a3, type metadata accessor for ETP_Kiss, 1LL, 2LL, 3LL);
}

uint64_t sub_100036CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0610, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EEFC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100036D20@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFCB0, (uint64_t)qword_1000BC0E0, (uint64_t)sub_100036844, a1);
}

uint64_t sub_100036D3C(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B04C0, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EF34);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100036D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B04C0, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EF34);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_100036DCC(uint64_t a1, uint64_t a2)
{
  return sub_1000389B4(a1, a2, type metadata accessor for ETP_Kiss) & 1;
}

uint64_t sub_100036DEC()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100037D20(v0, qword_1000BC0F8);
  sub_100037D08(v0, (uint64_t)qword_1000BC0F8);
  uint64_t v1 = sub_10000E624(&qword_1000B05C8);
  uint64_t v2 = sub_10000E624(&qword_1000B05D0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_10008ECA0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "duration";
  *(void *)(v9 + _Block_object_dispose(va, 8) = 8LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "normalizedCenterX";
  *(void *)(v13 + _Block_object_dispose(va, 8) = 17LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  unint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  *uint64_t v14 = 3LL;
  *(void *)unint64_t v15 = "normalizedCenterY";
  *((void *)v15 + 1) = 17LL;
  _BYTE v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  unint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)unint64_t v17 = "delays";
  *((void *)v17 + 1) = 6LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 5LL;
  *(void *)uint64_t v18 = "points";
  *(void *)(v18 + _Block_object_dispose(va, 8) = 6LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_100036FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Anger(0LL) + 20);
          goto LABEL_5;
        case 2LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Anger(0LL) + 24);
          goto LABEL_5;
        case 3LL:
          uint64_t v9 = *(int *)(type metadata accessor for ETP_Anger(0LL) + 28);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularFloatField(value:)(v3 + v9, a2, a3);
          break;
        case 4LL:
          uint64_t v10 = *(int *)(type metadata accessor for ETP_Anger(0LL) + 32);
          goto LABEL_12;
        case 5LL:
          uint64_t v10 = *(int *)(type metadata accessor for ETP_Anger(0LL) + 36);
LABEL_12:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)(v3 + v10, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_10003710C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = (int *)type metadata accessor for ETP_Anger(0LL);
  uint64_t v10 = v5 + v9[5];
  if ((*(_BYTE *)(v10 + 4) & 1) != 0
    || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(1LL, a2, a3, *(float *)v10), !v4))
  {
    uint64_t v12 = v5 + v9[6];
    if ((*(_BYTE *)(v12 + 4) & 1) != 0
      || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(2LL, a2, a3, *(float *)v12), !v4))
    {
      uint64_t v13 = v5 + v9[7];
      if ((*(_BYTE *)(v13 + 4) & 1) != 0
        || (uint64_t result = dispatch thunk of Visitor.visitSingularFloatField(value:fieldNumber:)(3LL, a2, a3, *(float *)v13),
            !v4))
      {
        uint64_t v14 = v5 + v9[8];
        unint64_t v15 = *(void *)(v14 + 8);
        if (v15 >> 60 == 15
          || (uint64_t v16 = *(void *)v14,
              sub_100012A64(*(void *)v14, *(void *)(v14 + 8)),
              dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v16, v15, 4LL, a2, a3),
              uint64_t result = sub_100012B98(v16, v15),
              !v4))
        {
          uint64_t v17 = v5 + v9[9];
          unint64_t v18 = *(void *)(v17 + 8);
          if (v18 >> 60 == 15) {
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
          uint64_t v19 = *(void *)v17;
          sub_100012A64(*(void *)v17, *(void *)(v17 + 8));
          dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)(v19, v18, 5LL, a2, a3);
          uint64_t result = sub_100012B98(v19, v18);
          if (!v4) {
            return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
          }
        }
      }
    }
  }

  return result;
}

double sub_1000372BC@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[6];
  uint64_t v5 = a2 + a1[5];
  *(_DWORD *)uint64_t v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  uint64_t v6 = a2 + v4;
  *(_DWORD *)uint64_t v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  uint64_t v7 = a1[8];
  uint64_t v8 = a2 + a1[7];
  *(_BYTE *)(v8 + 4) = 1;
  *(_DWORD *)uint64_t v8 = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + v7) = xmmword_10008D9E0;
  *(_OWORD *)(a2 + a1[9]) = xmmword_10008D9E0;
  return result;
}

uint64_t sub_100037324()
{
  return 0x65676E412E505445LL;
}

uint64_t sub_100037340@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_100037378(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40LL))(v1, a1, v3);
}

uint64_t sub_1000373B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100036FF0(a1, a2, a3);
}

uint64_t sub_1000373C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003710C(a1, a2, a3);
}

uint64_t sub_1000373D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B0618, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008ED94);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100037428@<X0>(uint64_t a1@<X8>)
{
  return sub_100037444(&qword_1000AFCB8, (uint64_t)qword_1000BC0F8, (uint64_t)sub_100036DEC, a1);
}

uint64_t sub_100037444@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for _NameMap(0LL);
  uint64_t v7 = sub_100037D08(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_1000374B0(uint64_t a1)
{
  uint64_t v2 = sub_10000E9D8(&qword_1000B04A0, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008EDCC);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000374F0(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t sub_100037544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E9D8(&qword_1000B04A0, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008EDCC);
  return Message.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100037594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

uint64_t sub_1000375E8()
{
  return sub_10000E9D8(&qword_1000B0498, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008ECDC);
}

uint64_t type metadata accessor for ETP_Anger(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0AC0, (uint64_t)&nominal type descriptor for ETP_Anger);
}

uint64_t sub_100037628()
{
  return sub_10000E9D8(&qword_1000B04A0, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008EDCC);
}

uint64_t sub_100037654()
{
  return sub_10000E9D8(&qword_1000B04A8, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008ED04);
}

uint64_t sub_100037680()
{
  return sub_10000E9D8(&qword_1000B04B0, type metadata accessor for ETP_Anger, (uint64_t)&unk_10008ED44);
}

uint64_t sub_1000376AC()
{
  return sub_10000E9D8(&qword_1000B04B8, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EE44);
}

uint64_t type metadata accessor for ETP_Kiss(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0A28, (uint64_t)&nominal type descriptor for ETP_Kiss);
}

uint64_t sub_1000376EC()
{
  return sub_10000E9D8(&qword_1000B04C0, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EF34);
}

uint64_t sub_100037718()
{
  return sub_10000E9D8(&qword_1000B04C8, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EE6C);
}

uint64_t sub_100037744()
{
  return sub_10000E9D8(&qword_1000B04D0, type metadata accessor for ETP_Kiss, (uint64_t)&unk_10008EEAC);
}

uint64_t sub_100037770()
{
  return sub_10000E9D8(&qword_1000B04D8, type metadata accessor for ETP_Video, (uint64_t)&unk_10008EFD4);
}

uint64_t type metadata accessor for ETP_Video(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0990, (uint64_t)&nominal type descriptor for ETP_Video);
}

uint64_t sub_1000377B0()
{
  return sub_10000E9D8(&qword_1000B04E0, type metadata accessor for ETP_Video, (uint64_t)&unk_10008F0C4);
}

uint64_t sub_1000377DC()
{
  return sub_10000E9D8(&qword_1000B04E8, type metadata accessor for ETP_Video, (uint64_t)&unk_10008EFFC);
}

uint64_t sub_100037808()
{
  return sub_10000E9D8(&qword_1000B04F0, type metadata accessor for ETP_Video, (uint64_t)&unk_10008F03C);
}

uint64_t sub_100037834()
{
  return sub_10000E9D8(&qword_1000B04F8, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F13C);
}

uint64_t type metadata accessor for ETP_ReadReceipt(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0900, (uint64_t)&nominal type descriptor for ETP_ReadReceipt);
}

uint64_t sub_100037874()
{
  return sub_10000E9D8(&qword_1000B0500, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F22C);
}

uint64_t sub_1000378A0()
{
  return sub_10000E9D8(&qword_1000B0508, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F164);
}

uint64_t sub_1000378CC()
{
  return sub_10000E9D8(&qword_1000B0510, type metadata accessor for ETP_ReadReceipt, (uint64_t)&unk_10008F1A4);
}

uint64_t sub_1000378F8()
{
  return sub_10000E9D8(&qword_1000B0518, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F2A4);
}

uint64_t type metadata accessor for ETP_Doodle(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0860, (uint64_t)&nominal type descriptor for ETP_Doodle);
}

uint64_t sub_100037938()
{
  return sub_10000E9D8(&qword_1000B0520, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F394);
}

uint64_t sub_100037964()
{
  return sub_10000E9D8(&qword_1000B0528, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F2CC);
}

uint64_t sub_100037990()
{
  return sub_10000E9D8(&qword_1000B0530, type metadata accessor for ETP_Doodle, (uint64_t)&unk_10008F30C);
}

uint64_t sub_1000379BC()
{
  return sub_10000E9D8(&qword_1000B0538, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F40C);
}

uint64_t type metadata accessor for ETP_Heartbeat(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B07B8, (uint64_t)&nominal type descriptor for ETP_Heartbeat);
}

uint64_t sub_1000379FC()
{
  return sub_10000E9D8(&qword_1000B0540, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F4FC);
}

uint64_t sub_100037A28()
{
  return sub_10000E9D8(&qword_1000B0548, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F434);
}

uint64_t sub_100037A54()
{
  return sub_10000E9D8(&qword_1000B0550, type metadata accessor for ETP_Heartbeat, (uint64_t)&unk_10008F474);
}

uint64_t sub_100037A80()
{
  return sub_10000E9D8(&qword_1000B0558, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F574);
}

uint64_t type metadata accessor for ETP_Tap(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0720, (uint64_t)&nominal type descriptor for ETP_Tap);
}

uint64_t sub_100037AC0()
{
  return sub_10000E9D8(&qword_1000B0560, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F664);
}

uint64_t sub_100037AEC()
{
  return sub_10000E9D8(&qword_1000B0568, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F59C);
}

uint64_t sub_100037B18()
{
  return sub_10000E9D8(&qword_1000B0570, type metadata accessor for ETP_Tap, (uint64_t)&unk_10008F5DC);
}

uint64_t sub_100037B44()
{
  return sub_10000E9D8(&qword_1000B0578, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F704);
}

uint64_t type metadata accessor for ETP_Header(uint64_t a1)
{
  return sub_100037B84(a1, qword_1000B0678, (uint64_t)&nominal type descriptor for ETP_Header);
}

uint64_t sub_100037B84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100037BB8()
{
  return sub_10000E9D8(&qword_1000B0580, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F7F4);
}

uint64_t sub_100037BE4()
{
  return sub_10000E9D8(&qword_1000B0588, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F72C);
}

uint64_t sub_100037C10()
{
  return sub_10000E9D8(&qword_1000B0590, type metadata accessor for ETP_Header, (uint64_t)&unk_10008F76C);
}

uint64_t sub_100037C3C()
{
  return sub_100037C84(&qword_1000B0598, &qword_1000B05A0);
}

uint64_t sub_100037C60()
{
  return sub_100037C84(&qword_1000B05A8, &qword_1000B05B0);
}

uint64_t sub_100037C84(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10001008C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100037CC4()
{
  unint64_t result = qword_1000B05C0;
  if (!qword_1000B05C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FB74, &type metadata for ETP_Header.MessageType);
    atomic_store(result, (unint64_t *)&qword_1000B05C0);
  }

  return result;
}

uint64_t sub_100037D08(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_100037D20(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

void sub_100037D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_100037DC0( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100037FA4LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  BOOL *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100037FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_100037D60((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_10003809C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_100037D60(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_100038150(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_10003819C()
{
  return ((uint64_t (*)(void))((char *)&loc_1000381D0 + *((int *)qword_1000383A8 + (v0 >> 62))))();
}

uint64_t sub_1000381E0@<X0>(int a1@<W8>)
{
  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1) {
      __asm { BR              X10 }
    }

    char v3 = 1;
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

uint64_t sub_1000383C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  char v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  __int16 v9 = (char *)&v34 - v8;
  char v10 = (int *)type metadata accessor for ETP_Video(0LL);
  uint64_t v11 = v10[5];
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  uint64_t v14 = (uint64_t *)(a2 + v11);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  uint64_t v35 = v4;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }

  if (v16 >> 60 == 15) {
    goto LABEL_10;
  }
  sub_100012AA8(v12, v13);
  sub_100012AA8(v15, v16);
  sub_100038150(v12, v13);
  char v18 = v17;
  sub_100012B98(v15, v16);
  sub_100012B98(v12, v13);
  if ((v18 & 1) != 0)
  {
LABEL_6:
    uint64_t v19 = v10[6];
    uint64_t v12 = *(void *)(a1 + v19);
    unint64_t v13 = *(void *)(a1 + v19 + 8);
    uint64_t v20 = (uint64_t *)(a2 + v19);
    uint64_t v15 = *v20;
    unint64_t v16 = v20[1];
    if (v13 >> 60 == 15)
    {
      if (v16 >> 60 == 15) {
        goto LABEL_14;
      }
    }

    else if (v16 >> 60 != 15)
    {
      sub_100012AA8(v12, v13);
      sub_100012AA8(v15, v16);
      sub_100038150(v12, v13);
      char v24 = v23;
      sub_100012B98(v15, v16);
      sub_100012B98(v12, v13);
      if ((v24 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_14:
      uint64_t v25 = v10[7];
      int v26 = *(unsigned __int8 *)(a1 + v25);
      int v27 = *(unsigned __int8 *)(a2 + v25);
      if (v26 == 2)
      {
        if (v27 != 2) {
          goto LABEL_11;
        }
      }

      else if (v27 == 2 || ((v27 ^ v26) & 1) != 0)
      {
        goto LABEL_11;
      }

      uint64_t v28 = v34;
      uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
      uint64_t v30 = a1;
      uint64_t v31 = v35;
      v29(v9, v30, v35);
      v29(v7, a2, v31);
      uint64_t v32 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v7, v31, v32);
      uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      v33(v7, v31);
      v33(v9, v31);
      return v21 & 1;
    }

LABEL_10:
    sub_100012AA8(v12, v13);
    sub_100012AA8(v15, v16);
    sub_100012B98(v12, v13);
    sub_100012B98(v15, v16);
  }

    sub_100012AA8(v14, v15);
    sub_100012AA8(v17, v18);
    sub_100012B98(v14, v15);
    char v23 = v17;
    char v24 = v18;
LABEL_11:
    sub_100012B98(v23, v24);
  }

LABEL_11:
  char v21 = 0;
  return v21 & 1;
}

      char v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

uint64_t sub_100038670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v50[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  char v10 = &v50[-v9];
  uint64_t v11 = (int *)type metadata accessor for ETP_Anger(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[5];
  uint64_t v14 = (float *)(a1 + v13);
  char v15 = *(_BYTE *)(a1 + v13 + 4);
  unint64_t v16 = (float *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 4);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v18 = v11[6];
  uint64_t v19 = (float *)(a1 + v18);
  char v20 = *(_BYTE *)(a1 + v18 + 4);
  char v21 = (float *)(a2 + v18);
  int v22 = *(unsigned __int8 *)(a2 + v18 + 4);
  if ((v20 & 1) != 0)
  {
    if (!v22) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v19 != *v21) {
      LOBYTE(v22) = 1;
    }
    if ((v22 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v23 = v11[7];
  char v24 = (float *)(a1 + v23);
  char v25 = *(_BYTE *)(a1 + v23 + 4);
  int v26 = (float *)(a2 + v23);
  int v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if ((v25 & 1) != 0)
  {
    if (!v27) {
      goto LABEL_31;
    }
  }

  else
  {
    if (*v24 != *v26) {
      LOBYTE(v27) = 1;
    }
    if ((v27 & 1) != 0) {
      goto LABEL_31;
    }
  }

  uint64_t v28 = v11[8];
  uint64_t v29 = *(void *)(a1 + v28);
  unint64_t v30 = *(void *)(a1 + v28 + 8);
  uint64_t v31 = (uint64_t *)(a2 + v28);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  if (v30 >> 60 != 15)
  {
    if (v33 >> 60 != 15)
    {
      uint64_t v52 = v29;
      sub_100012AA8(v29, v30);
      sub_100012AA8(v32, v33);
      sub_100038150(v52, v30);
      int v51 = v37;
      sub_100012B98(v32, v33);
      sub_100012B98(v52, v30);
      if ((v51 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_25;
    }

LABEL_31:
  char v44 = 0;
  return v44 & 1;
}

uint64_t sub_1000389B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = (int *)a3(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  unint64_t v16 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  uint64_t v42 = v9;
  if (v15 >> 60 == 15)
  {
    if (v18 >> 60 != 15) {
      goto LABEL_10;
    }
    goto LABEL_6;
  }

  if (v18 >> 60 == 15) {
    goto LABEL_10;
  }
  sub_100012AA8(v14, v15);
  sub_100012AA8(v17, v18);
  sub_100038150(v14, v15);
  char v20 = v19;
  sub_100012B98(v17, v18);
  sub_100012B98(v14, v15);
  if ((v20 & 1) != 0)
  {
LABEL_6:
    uint64_t v21 = v12[6];
    uint64_t v14 = *(void *)(a1 + v21);
    unint64_t v15 = *(void *)(a1 + v21 + 8);
    int v22 = (uint64_t *)(a2 + v21);
    uint64_t v17 = *v22;
    unint64_t v18 = v22[1];
    if (v15 >> 60 == 15)
    {
      if (v18 >> 60 == 15) {
        goto LABEL_15;
      }
    }

    else if (v18 >> 60 != 15)
    {
      sub_100012AA8(v14, v15);
      sub_100012AA8(v17, v18);
      sub_100038150(v14, v15);
      char v28 = v27;
      sub_100012B98(v17, v18);
      sub_100012B98(v14, v15);
      if ((v28 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_15:
      uint64_t v29 = v12[7];
      uint64_t v30 = *(void *)(a1 + v29);
      unint64_t v31 = *(void *)(a1 + v29 + 8);
      uint64_t v32 = (uint64_t *)(a2 + v29);
      uint64_t v33 = *v32;
      unint64_t v34 = v32[1];
      if (v31 >> 60 == 15)
      {
        if (v34 >> 60 == 15) {
          goto LABEL_21;
        }
      }

      else if (v34 >> 60 != 15)
      {
        sub_100012AA8(v30, v31);
        sub_100012AA8(v33, v34);
        sub_100038150(v30, v31);
        char v36 = v35;
        sub_100012B98(v33, v34);
        sub_100012B98(v30, v31);
        if ((v36 & 1) == 0) {
          goto LABEL_12;
        }
LABEL_21:
        uint64_t v37 = v43;
        uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
        v38(v11, a1, v6);
        uint64_t v39 = v42;
        v38(v42, a2, v6);
        uint64_t v40 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v39, v6, v40);
        __int128 v41 = *(void (**)(char *, uint64_t))(v37 + 8);
        v41(v39, v6);
        v41(v11, v6);
        return v25 & 1;
      }

      sub_100012AA8(v30, v31);
      sub_100012AA8(v33, v34);
      sub_100012B98(v30, v31);
      uint64_t v23 = v33;
      unint64_t v24 = v34;
      goto LABEL_11;
    }

LABEL_12:
  char v25 = 0;
  return v25 & 1;
}

uint64_t sub_100038CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v47 - v9;
  uint64_t v11 = (int *)type metadata accessor for ETP_Heartbeat(0LL);
  uint64_t v12 = v11[5];
  uint64_t v13 = (float *)(a1 + v12);
  char v14 = *(_BYTE *)(a1 + v12 + 4);
  unint64_t v15 = (float *)(a2 + v12);
  int v16 = *(unsigned __int8 *)(a2 + v12 + 4);
  if ((v14 & 1) != 0)
  {
    if (!v16) {
      goto LABEL_33;
    }
  }

  else
  {
    if (*v13 != *v15) {
      LOBYTE(v16) = 1;
    }
    if ((v16 & 1) != 0) {
      goto LABEL_33;
    }
  }

  uint64_t v17 = v11[6];
  unint64_t v18 = (_DWORD *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 4);
  char v20 = (_DWORD *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 4);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_33;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_33;
    }
  }

  uint64_t v22 = v11[7];
  uint64_t v23 = (float *)(a1 + v22);
  char v24 = *(_BYTE *)(a1 + v22 + 4);
  char v25 = (float *)(a2 + v22);
  int v26 = *(unsigned __int8 *)(a2 + v22 + 4);
  if ((v24 & 1) != 0)
  {
    if (!v26) {
      goto LABEL_33;
    }
  }

  else
  {
    if (*v23 != *v25) {
      LOBYTE(v26) = 1;
    }
    if ((v26 & 1) != 0) {
      goto LABEL_33;
    }
  }

  uint64_t v27 = v11[8];
  char v28 = (float *)(a1 + v27);
  char v29 = *(_BYTE *)(a1 + v27 + 4);
  uint64_t v30 = (float *)(a2 + v27);
  int v31 = *(unsigned __int8 *)(a2 + v27 + 4);
  if ((v29 & 1) != 0)
  {
    if (!v31) {
      goto LABEL_33;
    }
  }

  else
  {
    if (*v28 != *v30) {
      LOBYTE(v31) = 1;
    }
    if ((v31 & 1) != 0) {
      goto LABEL_33;
    }
  }

  uint64_t v32 = v11[9];
  uint64_t v33 = (float *)(a1 + v32);
  char v34 = *(_BYTE *)(a1 + v32 + 4);
  char v35 = (float *)(a2 + v32);
  int v36 = *(unsigned __int8 *)(a2 + v32 + 4);
  if ((v34 & 1) == 0)
  {
    if (*v33 != *v35) {
      LOBYTE(v36) = 1;
    }
    if ((v36 & 1) != 0) {
      goto LABEL_33;
    }
LABEL_31:
    uint64_t v37 = v11[10];
    uint64_t v38 = (float *)(a1 + v37);
    char v39 = *(_BYTE *)(a1 + v37 + 4);
    uint64_t v40 = (float *)(a2 + v37);
    int v41 = *(unsigned __int8 *)(a2 + v37 + 4);
    if ((v39 & 1) != 0)
    {
      if (!v41) {
        goto LABEL_33;
      }
    }

    else
    {
      if (*v38 != *v40) {
        LOBYTE(v41) = 1;
      }
      if ((v41 & 1) != 0) {
        goto LABEL_33;
      }
    }

    char v44 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v44(v10, a1, v4);
    v44(v8, a2, v4);
    uint64_t v45 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v45);
    int v46 = *(void (**)(char *, uint64_t))(v5 + 8);
    v46(v8, v4);
    v46(v10, v4);
    return v42 & 1;
  }

  if (v36) {
    goto LABEL_31;
  }
LABEL_33:
  char v42 = 0;
  return v42 & 1;
}

uint64_t sub_100038F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v53[-v9];
  uint64_t v11 = (int *)type metadata accessor for ETP_Header(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = v11[5];
  int v14 = *(unsigned __int8 *)(a1 + v13);
  int v15 = *(unsigned __int8 *)(a2 + v13);
  if (v14 == 8)
  {
    if (v15 != 8) {
      goto LABEL_41;
    }
  }

  else if (v15 == 8 || v14 != v15)
  {
    goto LABEL_41;
  }

  uint64_t v17 = v11[6];
  unint64_t v18 = (void *)(a1 + v17);
  char v19 = *(_BYTE *)(a1 + v17 + 8);
  char v20 = (void *)(a2 + v17);
  int v21 = *(unsigned __int8 *)(a2 + v17 + 8);
  if ((v19 & 1) != 0)
  {
    if (!v21) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v18 != *v20) {
      LOBYTE(v21) = 1;
    }
    if ((v21 & 1) != 0) {
      goto LABEL_41;
    }
  }

  uint64_t v55 = v5;
  uint64_t v22 = v11[7];
  uint64_t v23 = *(void *)(a1 + v22);
  unint64_t v24 = *(void *)(a1 + v22 + 8);
  char v25 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  if (v24 >> 60 == 15)
  {
    if (v27 >> 60 == 15) {
      goto LABEL_21;
    }
LABEL_19:
    sub_100012AA8(v23, v24);
    sub_100012AA8(v26, v27);
    sub_100012B98(v23, v24);
    sub_100012B98(v26, v27);
    goto LABEL_41;
  }

  if (v27 >> 60 == 15) {
    goto LABEL_19;
  }
  sub_100012AA8(v23, v24);
  sub_100012AA8(v26, v27);
  sub_100038150(v23, v24);
  int v54 = v28;
  sub_100012B98(v26, v27);
  sub_100012B98(v23, v24);
  if ((v54 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_21:
  uint64_t v29 = v12[8];
  uint64_t v30 = (_DWORD *)(a1 + v29);
  char v31 = *(_BYTE *)(a1 + v29 + 4);
  uint64_t v32 = (_DWORD *)(a2 + v29);
  int v33 = *(unsigned __int8 *)(a2 + v29 + 4);
  if ((v31 & 1) != 0)
  {
    if (!v33) {
      goto LABEL_41;
    }
  }

  else
  {
    if (*v30 != *v32) {
      LOBYTE(v33) = 1;
    }
    if ((v33 & 1) != 0) {
      goto LABEL_41;
    }
  }

  uint64_t v34 = v12[9];
  char v35 = (void *)(a1 + v34);
  uint64_t v36 = *(void *)(a1 + v34 + 8);
  uint64_t v37 = (void *)(a2 + v34);
  uint64_t v38 = v37[1];
  if (!v36)
  {
    if (v38) {
      goto LABEL_41;
    }
LABEL_34:
    uint64_t v40 = v12[10];
    int v41 = *(unsigned __int8 *)(a1 + v40);
    int v42 = *(unsigned __int8 *)(a2 + v40);
    if (v41 != 2)
    {
      if (v42 == 2 || ((((v42 & 1) == 0) ^ v41) & 1) == 0) {
        goto LABEL_41;
      }
LABEL_39:
      uint64_t v43 = v12[11];
      char v44 = (double *)(a1 + v43);
      char v45 = *(_BYTE *)(a1 + v43 + 8);
      int v46 = (double *)(a2 + v43);
      int v47 = *(unsigned __int8 *)(a2 + v43 + 8);
      if ((v45 & 1) != 0)
      {
        if (!v47) {
          goto LABEL_41;
        }
      }

      else
      {
        if (*v44 != *v46) {
          LOBYTE(v47) = 1;
        }
        if ((v47 & 1) != 0) {
          goto LABEL_41;
        }
      }

      uint64_t v49 = v55;
      unint64_t v50 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v55 + 16);
      v50(v10, a1, v4);
      v50(v8, a2, v4);
      uint64_t v51 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v39 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v51);
      uint64_t v52 = *(void (**)(_BYTE *, uint64_t))(v49 + 8);
      v52(v8, v4);
      v52(v10, v4);
      return v39 & 1;
    }

    if (v42 == 2) {
      goto LABEL_39;
    }
LABEL_41:
    char v39 = 0;
    return v39 & 1;
  }

  if (!v38) {
    goto LABEL_41;
  }
  if (*v35 == *v37 && v36 == v38) {
    goto LABEL_34;
  }
  char v39 = 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, *v37, v38, 0LL) & 1) != 0) {
    goto LABEL_34;
  }
  return v39 & 1;
}

uint64_t sub_100039268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v44[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v44[-v9];
  uint64_t v11 = type metadata accessor for ETP_Doodle(0LL);
  uint64_t v12 = v11;
  uint64_t v13 = *(int *)(v11 + 20);
  int v14 = (_DWORD *)(a1 + v13);
  char v15 = *(_BYTE *)(a1 + v13 + 4);
  int v16 = (_DWORD *)(a2 + v13);
  int v17 = *(unsigned __int8 *)(a2 + v13 + 4);
  if ((v15 & 1) != 0)
  {
    if (!v17) {
      goto LABEL_18;
    }
  }

  else
  {
    if (*v14 != *v16) {
      LOBYTE(v17) = 1;
    }
    if ((v17 & 1) != 0) {
      goto LABEL_18;
    }
  }

  uint64_t v46 = v5;
  uint64_t v18 = *(int *)(v11 + 24);
  uint64_t v19 = *(void *)(a1 + v18);
  unint64_t v20 = *(void *)(a1 + v18 + 8);
  int v21 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }

  if (v23 >> 60 == 15) {
    goto LABEL_16;
  }
  sub_100012AA8(v19, v20);
  sub_100012AA8(v22, v23);
  sub_100038150(v19, v20);
  int v45 = v24;
  sub_100012B98(v22, v23);
  sub_100012B98(v19, v20);
  if ((v45 & 1) != 0)
  {
LABEL_12:
    uint64_t v25 = *(int *)(v12 + 28);
    uint64_t v19 = *(void *)(a1 + v25);
    unint64_t v20 = *(void *)(a1 + v25 + 8);
    uint64_t v26 = (uint64_t *)(a2 + v25);
    uint64_t v22 = *v26;
    unint64_t v23 = v26[1];
    if (v20 >> 60 == 15)
    {
      if (v23 >> 60 == 15) {
        goto LABEL_21;
      }
    }

    else if (v23 >> 60 != 15)
    {
      sub_100012AA8(v19, v20);
      sub_100012AA8(v22, v23);
      sub_100038150(v19, v20);
      int v45 = v31;
      sub_100012B98(v22, v23);
      sub_100012B98(v19, v20);
      if ((v45 & 1) == 0) {
        goto LABEL_18;
      }
LABEL_21:
      uint64_t v32 = *(int *)(v12 + 32);
      uint64_t v33 = *(void *)(a1 + v32);
      unint64_t v34 = *(void *)(a1 + v32 + 8);
      char v35 = (uint64_t *)(a2 + v32);
      uint64_t v36 = *v35;
      unint64_t v37 = v35[1];
      if (v34 >> 60 == 15)
      {
        if (v37 >> 60 == 15) {
          goto LABEL_27;
        }
      }

      else if (v37 >> 60 != 15)
      {
        sub_100012AA8(v33, v34);
        sub_100012AA8(v36, v37);
        sub_100038150(v33, v34);
        char v39 = v38;
        sub_100012B98(v36, v37);
        sub_100012B98(v33, v34);
        if ((v39 & 1) == 0) {
          goto LABEL_18;
        }
LABEL_27:
        uint64_t v40 = v46;
        int v41 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v46 + 16);
        v41(v10, a1, v4);
        v41(v8, a2, v4);
        uint64_t v42 = sub_10000E9D8( &qword_1000B05D8,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
        char v29 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v42);
        uint64_t v43 = *(void (**)(_BYTE *, uint64_t))(v40 + 8);
        v43(v8, v4);
        v43(v10, v4);
        return v29 & 1;
      }

      sub_100012AA8(v33, v34);
      sub_100012AA8(v36, v37);
      sub_100012B98(v33, v34);
      uint64_t v27 = v36;
      unint64_t v28 = v37;
      goto LABEL_17;
    }

LABEL_16:
    sub_100012AA8(v19, v20);
    sub_100012AA8(v22, v23);
    sub_100012B98(v19, v20);
    uint64_t v27 = v22;
    unint64_t v28 = v23;
LABEL_17:
    sub_100012B98(v27, v28);
  }

LABEL_18:
  char v29 = 0;
  return v29 & 1;
}

unint64_t sub_1000395CC()
{
  unint64_t result = qword_1000B0608;
  if (!qword_1000B0608)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FB2C, &type metadata for ETP_Video.MediaType);
    atomic_store(result, (unint64_t *)&qword_1000B0608);
  }

  return result;
}

void *sub_100039610(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    unint64_t v14 = *((void *)v13 + 1);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    }

    else
    {
      uint64_t v16 = *(void *)v13;
      sub_100012A64(*(void *)v13, *((void *)v13 + 1));
      *(void *)uint64_t v12 = v16;
      *((void *)v12 + 1) = v14;
    }

    uint64_t v17 = a3[8];
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)a1 + v17;
    unint64_t v20 = (char *)a2 + v17;
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    int v21 = (void *)((char *)a1 + v18);
    uint64_t v22 = (void *)((char *)a2 + v18);
    uint64_t v23 = v22[1];
    *int v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    *(void *)uint64_t v25 = *(void *)v26;
    char v25[8] = v26[8];
    swift_bridgeObjectRetain(v23);
  }

  return a1;
}

double sub_100039748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100012B54(*v5, v6);
  }
  *(void *)&double result = swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 36) + 8)).n128_u64[0];
  return result;
}

uint64_t sub_1000397B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + _Block_object_dispose(va, 8) = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = v12[1];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    sub_100012A64(*v12, v12[1]);
    *(void *)uint64_t v11 = v14;
    *(void *)(v11 + _Block_object_dispose(va, 8) = v13;
  }

  uint64_t v15 = a3[8];
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = (void *)(a1 + v16);
  unint64_t v20 = (void *)(a2 + v16);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(_BYTE *)(v23 + _Block_object_dispose(va, 8) = *(_BYTE *)(v24 + 8);
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1000398BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + _Block_object_dispose(va, 8) = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  unint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 != 15LL)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v16 = *v13;
      sub_100012A64(v16, v14);
      uint64_t v17 = *v12;
      unint64_t v18 = v12[1];
      *uint64_t v12 = v16;
      v12[1] = v14;
      sub_100012B54(v17, v18);
      goto LABEL_8;
    }

    sub_100033BD0((uint64_t)v12);
    goto LABEL_6;
  }

  if (v14 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }

  uint64_t v15 = *v13;
  sub_100012A64(v15, v14);
  *uint64_t v12 = v15;
  v12[1] = v14;
LABEL_8:
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (int *)(a2 + v19);
  int v22 = *v21;
  *(_BYTE *)(v20 + 4) = *((_BYTE *)v21 + 4);
  *(_DWORD *)uint64_t v20 = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v27 = v24[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v28 = a3[11];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = (uint64_t *)(a2 + v28);
  uint64_t v31 = *v30;
  *(_BYTE *)(v29 + _Block_object_dispose(va, 8) = *((_BYTE *)v30 + 8);
  *(void *)uint64_t v29 = v31;
  return a1;
}

uint64_t sub_100039A2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + _Block_object_dispose(va, 8) = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  uint64_t v14 = a3[11];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(_BYTE *)(v15 + _Block_object_dispose(va, 8) = *(_BYTE *)(v16 + 8);
  *(void *)uint64_t v15 = *(void *)v16;
  return a1;
}

uint64_t sub_100039AF4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(_BYTE *)(v8 + _Block_object_dispose(va, 8) = *(_BYTE *)(v9 + 8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = *(void *)(a1 + v10 + 8);
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = v12[1];
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v11;
      *uint64_t v11 = *v12;
      v11[1] = v14;
      sub_100012B54(v15, v13);
      goto LABEL_6;
    }

    sub_100033BD0((uint64_t)v11);
  }

  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
LABEL_6:
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  uint64_t v20 = (void *)(a1 + v17);
  uint64_t v21 = (uint64_t *)(a2 + v17);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = v20[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  *(void *)uint64_t v26 = *(void *)v27;
  *(_BYTE *)(v26 + _Block_object_dispose(va, 8) = *(_BYTE *)(v27 + 8);
  return a1;
}

uint64_t sub_100039C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039C24);
}

uint64_t sub_100039C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 36) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_100039CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100039CBC);
}

uint64_t sub_100039CBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 36) + _Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_100039D38(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10008F8F8;
    v4[2] = &unk_10008F910;
    v4[3] = &unk_10008F928;
    v4[4] = &unk_10008F940;
    v4[5] = &unk_10008F958;
    v4[6] = &unk_10008F970;
    v4[7] = &unk_10008F910;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for ETP_Header.MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100039E28 + 4 * byte_10008ECCB[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100039E5C + 4 * byte_10008ECC6[v4]))();
}

uint64_t sub_100039E5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039E64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100039E6CLL);
  }
  return result;
}

uint64_t sub_100039E78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100039E80LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100039E84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100039E8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ETP_Header.MessageType()
{
  return &type metadata for ETP_Header.MessageType;
}

uint64_t sub_100039EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100039ECC);
}

uint64_t sub_100039ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100039EDC);
}

uint64_t sub_100039EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BE54(a1, a2, a3, (uint64_t)&unk_10008F928);
}

uint64_t *sub_100039EEC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v27);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    int v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)int v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    unint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    uint64_t v16 = (char *)a1 + v14;
    uint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (char *)a2 + v15;
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (char *)a1 + v20;
    uint64_t v23 = (char *)a2 + v20;
    int v24 = *(_DWORD *)v23;
    v22[4] = v23[4];
    *(_DWORD *)uint64_t v22 = v24;
    uint64_t v25 = (char *)a1 + v21;
    uint64_t v26 = (char *)a2 + v21;
    v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
  }

  return a1;
}

uint64_t sub_10003A008(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  return a1;
}

uint64_t sub_10003A0F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(_BYTE *)(v21 + 4);
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  char v26 = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  *(_BYTE *)(v24 + 4) = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  char v30 = *(_BYTE *)(v29 + 4);
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
  *(_BYTE *)(v28 + 4) = v30;
  return a1;
}

uint64_t sub_10003A1EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  return a1;
}

uint64_t sub_10003A2D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v19;
  char v22 = (int *)(a2 + v19);
  int v23 = *v22;
  *(_BYTE *)(v21 + 4) = *((_BYTE *)v22 + 4);
  *(_DWORD *)uint64_t v21 = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(_BYTE *)(v24 + 4) = *(_BYTE *)(v25 + 4);
  *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
  return a1;
}

uint64_t sub_10003A3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003A3D0);
}

uint64_t sub_10003A3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003A3E0);
}

uint64_t sub_10003A3E4(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10008F940;
    v4[2] = &unk_10008F940;
    v4[3] = &unk_10008F940;
    v4[4] = &unk_10008F940;
    v4[5] = &unk_10008F940;
    v4[6] = &unk_10008F940;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10003A460(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (char *)a1 + v8;
    uint64_t v11 = (char *)a2 + v8;
    *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (uint64_t *)((char *)a2 + v9);
    unint64_t v14 = *(uint64_t *)((char *)a2 + v9 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    }

    else
    {
      uint64_t v16 = *v13;
      sub_100012A64(*v13, v14);
      *(void *)uint64_t v12 = v16;
      *((void *)v12 + 1) = v14;
    }

    uint64_t v17 = a3[7];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }

    else
    {
      uint64_t v21 = *(void *)v19;
      sub_100012A64(*(void *)v19, *((void *)v19 + 1));
      *(void *)uint64_t v18 = v21;
      *((void *)v18 + 1) = v20;
    }

    uint64_t v22 = a3[8];
    int v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    unint64_t v25 = *((void *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)int v23 = *(_OWORD *)v24;
    }

    else
    {
      uint64_t v26 = *(void *)v24;
      sub_100012A64(*(void *)v24, *((void *)v24 + 1));
      *(void *)int v23 = v26;
      *((void *)v23 + 1) = v25;
    }
  }

  return a1;
}

uint64_t sub_10003A5B0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + a2[6]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = sub_100012B54(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[7]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    uint64_t result = sub_100012B54(*v8, v9);
  }
  uint64_t v10 = (uint64_t *)(a1 + a2[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    return sub_100012B54(*v10, v11);
  }
  return result;
}

uint64_t sub_10003A654(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = (uint64_t *)(a2 + v8);
  unint64_t v13 = *(void *)(a2 + v8 + 8);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    sub_100012A64(*v12, v13);
    *(void *)uint64_t v11 = v14;
    *(void *)(v11 + _Block_object_dispose(va, 8) = v13;
  }

  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }

  else
  {
    uint64_t v19 = *v17;
    sub_100012A64(*v17, v17[1]);
    *(void *)uint64_t v16 = v19;
    *(void *)(v16 + _Block_object_dispose(va, 8) = v18;
  }

  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t *)(a2 + v20);
  unint64_t v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  }

  else
  {
    uint64_t v24 = *v22;
    sub_100012A64(*v22, v22[1]);
    *(void *)uint64_t v21 = v24;
    *(void *)(v21 + _Block_object_dispose(va, 8) = v23;
  }

  return a1;
}

uint64_t sub_10003A778(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (int *)(a2 + v7);
  int v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)uint64_t v8 = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  unint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15LL)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_100012A64(v15, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v14 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }

  uint64_t v16 = *v13;
  sub_100012A64(v16, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  sub_100012B54(v17, v18);
LABEL_8:
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 == 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_100012A64(v23, v22);
      *uint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v22 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v20);
LABEL_13:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }

  uint64_t v24 = *v21;
  sub_100012A64(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *uint64_t v20 = v24;
  v20[1] = v22;
  sub_100012B54(v25, v26);
LABEL_15:
  uint64_t v27 = a3[8];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a2 + v27 + 8);
  if (*(void *)(a1 + v27 + 8) >> 60 != 15LL)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v32 = *v29;
      sub_100012A64(v32, v30);
      uint64_t v33 = *v28;
      unint64_t v34 = v28[1];
      uint64_t *v28 = v32;
      v28[1] = v30;
      sub_100012B54(v33, v34);
      return a1;
    }

    sub_100033BD0((uint64_t)v28);
    goto LABEL_20;
  }

  if (v30 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    return a1;
  }

  uint64_t v31 = *v29;
  sub_100012A64(v31, v30);
  uint64_t *v28 = v31;
  v28[1] = v30;
  return a1;
}

uint64_t sub_10003A96C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_OWORD *)(a1 + v_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_10003A9F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  unint64_t v13 = *(void *)(a1 + v8 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *(void *)(v12 + 8);
  if (v14 >> 60 == 15)
  {
    sub_100033BD0(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }

  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + _Block_object_dispose(va, 8) = v14;
  sub_100012B54(v15, v13);
LABEL_6:
  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  unint64_t v19 = *(void *)(a1 + v16 + 8);
  if (v19 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_11;
  }

  unint64_t v20 = *(void *)(v18 + 8);
  if (v20 >> 60 == 15)
  {
    sub_100033BD0(v17);
    goto LABEL_9;
  }

  uint64_t v21 = *(void *)v17;
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + _Block_object_dispose(va, 8) = v20;
  sub_100012B54(v21, v19);
LABEL_11:
  uint64_t v22 = a3[8];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = *(void *)(a1 + v22 + 8);
  if (v25 >> 60 != 15)
  {
    unint64_t v26 = v24[1];
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v23;
      uint64_t *v23 = *v24;
      v23[1] = v26;
      sub_100012B54(v27, v25);
      return a1;
    }

    sub_100033BD0((uint64_t)v23);
  }

  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  return a1;
}

uint64_t sub_10003AB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AB60);
}

uint64_t sub_10003AB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  BOOL v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  unsigned int v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t sub_10003ABE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003ABF4);
}

uint64_t sub_10003ABF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  BOOL v10 = (void *)(a1 + *(int *)(a4 + 24));
  *BOOL v10 = 0LL;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_10003AC7C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10008F940;
    v4[2] = &unk_10008F928;
    v4[3] = &unk_10008F928;
    v4[4] = &unk_10008F928;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10003ACFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10003AD38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_10003AD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10003ADB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10003ADF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10003AE38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10003AE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003AE88);
}

uint64_t sub_10003AE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10003AEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003AED4);
}

uint64_t sub_10003AED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_10003AF18(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_10003AF80(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    BOOL v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      sub_100012A64(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }

    else
    {
      uint64_t v18 = *(void *)v16;
      sub_100012A64(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }

    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_10003B088(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = sub_100012B54(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    return sub_100012B54(*v8, v9);
  }
  return result;
}

uint64_t sub_10003B10C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_100012A64(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + _Block_object_dispose(va, 8) = v10;
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_100012A64(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + _Block_object_dispose(va, 8) = v15;
  }

  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003B1E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_100012A64(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }

  uint64_t v12 = *v9;
  sub_100012A64(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  sub_100012B54(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  unint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 != 15LL)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      sub_100012A64(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *uint64_t v16 = v20;
      v16[1] = v18;
      sub_100012B54(v21, v22);
      goto LABEL_15;
    }

    sub_100033BD0((uint64_t)v16);
    goto LABEL_13;
  }

  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }

  uint64_t v19 = *v17;
  sub_100012A64(v19, v18);
  *uint64_t v16 = v19;
  v16[1] = v18;
LABEL_15:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003B34C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003B3BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_100033BD0(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }

  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v11;
  sub_100012B54(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  unint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v14;
      *unint64_t v14 = *v15;
      v14[1] = v17;
      sub_100012B54(v18, v16);
      goto LABEL_11;
    }

    sub_100033BD0((uint64_t)v14);
  }

  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
LABEL_11:
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003B4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003B4CC);
}

uint64_t sub_10003B4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else {
    int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  }
  unsigned int v10 = v9 - 2;
  else {
    return 0LL;
  }
}

uint64_t sub_10003B550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003B55C);
}

uint64_t sub_10003B55C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t sub_10003B5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003BE54(a1, a2, a3, (uint64_t)&unk_10008F970);
}

uint64_t storeEnumTagSinglePayload for ETP_Video.MediaType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10003B62C + 4 * byte_10008ECD5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003B660 + 4 * byte_10008ECD0[v4]))();
}

uint64_t sub_10003B660(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10003B670LL);
  }
  return result;
}

uint64_t sub_10003B67C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10003B684LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10003B688(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003B690(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ETP_Video.MediaType()
{
  return &type metadata for ETP_Video.MediaType;
}

uint64_t *sub_10003B6AC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unsigned int v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      sub_100012A64(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = (char *)a2 + v14;
    unint64_t v17 = *((void *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    }

    else
    {
      uint64_t v18 = *(void *)v16;
      sub_100012A64(*(void *)v16, *((void *)v16 + 1));
      *(void *)uint64_t v15 = v18;
      *((void *)v15 + 1) = v17;
    }

    uint64_t v19 = a3[7];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    unint64_t v22 = *((void *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    }

    else
    {
      uint64_t v23 = *(void *)v21;
      sub_100012A64(*(void *)v21, *((void *)v21 + 1));
      *(void *)uint64_t v20 = v23;
      *((void *)v20 + 1) = v22;
    }
  }

  return a1;
}

uint64_t sub_10003B7E4(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + a2[5]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = sub_100012B54(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + a2[6]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    uint64_t result = sub_100012B54(*v8, v9);
  }
  unsigned int v10 = (uint64_t *)(a1 + a2[7]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    return sub_100012B54(*v10, v11);
  }
  return result;
}

uint64_t sub_10003B888(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_100012A64(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + _Block_object_dispose(va, 8) = v10;
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }

  else
  {
    uint64_t v16 = *v14;
    sub_100012A64(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + _Block_object_dispose(va, 8) = v15;
  }

  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }

  else
  {
    uint64_t v21 = *v19;
    sub_100012A64(*v19, v19[1]);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + _Block_object_dispose(va, 8) = v20;
  }

  return a1;
}

uint64_t sub_10003B994(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 == 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_100012A64(v11, v10);
      *uint64_t v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v8);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }

  uint64_t v12 = *v9;
  sub_100012A64(v12, v10);
  uint64_t v13 = *v8;
  unint64_t v14 = v8[1];
  *uint64_t v8 = v12;
  v8[1] = v10;
  sub_100012B54(v13, v14);
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  unint64_t v18 = *(void *)(a2 + v15 + 8);
  if (*(void *)(a1 + v15 + 8) >> 60 == 15LL)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_100012A64(v19, v18);
      *uint64_t v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v18 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v16);
LABEL_13:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }

  uint64_t v20 = *v17;
  sub_100012A64(v20, v18);
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  *uint64_t v16 = v20;
  v16[1] = v18;
  sub_100012B54(v21, v22);
LABEL_15:
  uint64_t v23 = a3[7];
  uint64_t v24 = (uint64_t *)(a1 + v23);
  unint64_t v25 = (uint64_t *)(a2 + v23);
  unint64_t v26 = *(void *)(a2 + v23 + 8);
  if (*(void *)(a1 + v23 + 8) >> 60 != 15LL)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v28 = *v25;
      sub_100012A64(v28, v26);
      uint64_t v29 = *v24;
      unint64_t v30 = v24[1];
      *uint64_t v24 = v28;
      v24[1] = v26;
      sub_100012B54(v29, v30);
      return a1;
    }

    sub_100033BD0((uint64_t)v24);
    goto LABEL_20;
  }

  if (v26 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    return a1;
  }

  uint64_t v27 = *v25;
  sub_100012A64(v27, v26);
  *uint64_t v24 = v27;
  v24[1] = v26;
  return a1;
}

uint64_t sub_10003BB6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10003BBDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v11 = *(void *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_100033BD0(v8);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }

  uint64_t v12 = *(void *)v8;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v11;
  sub_100012B54(v12, v10);
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  unint64_t v16 = *(void *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }

  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    sub_100033BD0(v14);
    goto LABEL_9;
  }

  uint64_t v18 = *(void *)v14;
  *(void *)uint64_t v14 = *(void *)v15;
  *(void *)(v14 + _Block_object_dispose(va, 8) = v17;
  sub_100012B54(v18, v16);
LABEL_11:
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a1 + v19 + 8);
  if (v22 >> 60 != 15)
  {
    unint64_t v23 = v21[1];
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v20;
      *uint64_t v20 = *v21;
      v20[1] = v23;
      sub_100012B54(v24, v22);
      return a1;
    }

    sub_100033BD0((uint64_t)v20);
  }

  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  return a1;
}

uint64_t sub_10003BD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003BD30);
}

uint64_t sub_10003BD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  BOOL v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  unsigned int v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t sub_10003BDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003BDC8);
}

uint64_t sub_10003BDCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  BOOL v10 = (void *)(a1 + *(int *)(a4 + 20));
  *BOOL v10 = 0LL;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_10003BE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v7 <= 0x3F)
  {
    v8[0] = *(void *)(result - 8) + 64LL;
    v8[1] = &unk_10008F928;
    _OWORD v8[2] = &unk_10008F928;
    v8[3] = a4;
    swift_initStructMetadata(a1, 256LL, 4LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10003BECC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    BOOL v10 = (char *)a1 + v8;
    unsigned int v11 = (char *)a2 + v8;
    *(_DWORD *)BOOL v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    uint64_t v12 = (char *)a1 + v9;
    uint64_t v13 = (char *)a2 + v9;
    *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    unint64_t v16 = (char *)a1 + v14;
    unint64_t v17 = (char *)a2 + v14;
    *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    uint64_t v18 = (char *)a1 + v15;
    uint64_t v19 = (uint64_t *)((char *)a2 + v15);
    unint64_t v20 = *(uint64_t *)((char *)a2 + v15 + 8);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
    }

    else
    {
      uint64_t v22 = *v19;
      sub_100012A64(*v19, v20);
      *(void *)uint64_t v18 = v22;
      *((void *)v18 + 1) = v20;
    }

    uint64_t v23 = a3[9];
    uint64_t v24 = (char *)a1 + v23;
    unint64_t v25 = (char *)a2 + v23;
    unint64_t v26 = *((void *)v25 + 1);
    if (v26 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
    }

    else
    {
      uint64_t v27 = *(void *)v25;
      sub_100012A64(*(void *)v25, *((void *)v25 + 1));
      *(void *)uint64_t v24 = v27;
      *((void *)v24 + 1) = v26;
    }
  }

  return a1;
}

uint64_t sub_10003C014(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    uint64_t result = sub_100012B54(*v6, v7);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 36));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    return sub_100012B54(*v8, v9);
  }
  return result;
}

uint64_t sub_10003C098(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = (uint64_t *)(a2 + v14);
  unint64_t v19 = *(void *)(a2 + v14 + 8);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }

  else
  {
    uint64_t v20 = *v18;
    sub_100012A64(*v18, v19);
    *(void *)uint64_t v17 = v20;
    *(void *)(v17 + _Block_object_dispose(va, 8) = v19;
  }

  uint64_t v21 = a3[9];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t *)(a2 + v21);
  unint64_t v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  }

  else
  {
    uint64_t v25 = *v23;
    sub_100012A64(*v23, v23[1]);
    *(void *)uint64_t v22 = v25;
    *(void *)(v22 + _Block_object_dispose(va, 8) = v24;
  }

  return a1;
}

uint64_t sub_10003C1B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  char v14 = *(_BYTE *)(v13 + 4);
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  char v18 = *(_BYTE *)(v17 + 4);
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 == 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_100012A64(v23, v22);
      *uint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v22 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v20);
LABEL_6:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_8;
  }

  uint64_t v24 = *v21;
  sub_100012A64(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *uint64_t v20 = v24;
  v20[1] = v22;
  sub_100012B54(v25, v26);
LABEL_8:
  uint64_t v27 = a3[9];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a2 + v27 + 8);
  if (*(void *)(a1 + v27 + 8) >> 60 != 15LL)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v32 = *v29;
      sub_100012A64(v32, v30);
      uint64_t v33 = *v28;
      unint64_t v34 = v28[1];
      uint64_t *v28 = v32;
      v28[1] = v30;
      sub_100012B54(v33, v34);
      return a1;
    }

    sub_100033BD0((uint64_t)v28);
    goto LABEL_13;
  }

  if (v30 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    return a1;
  }

  uint64_t v31 = *v29;
  sub_100012A64(v31, v30);
  uint64_t *v28 = v31;
  v28[1] = v30;
  return a1;
}

uint64_t sub_10003C360(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10003C414(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  uint64_t v17 = a1 + v14;
  uint64_t v18 = a2 + v14;
  unint64_t v19 = *(void *)(a1 + v14 + 8);
  if (v19 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v20 = *(void *)(v18 + 8);
  if (v20 >> 60 == 15)
  {
    sub_100033BD0(v17);
LABEL_4:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    goto LABEL_6;
  }

  uint64_t v21 = *(void *)v17;
  *(void *)uint64_t v17 = *(void *)v18;
  *(void *)(v17 + _Block_object_dispose(va, 8) = v20;
  sub_100012B54(v21, v19);
LABEL_6:
  uint64_t v22 = a3[9];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = *(void *)(a1 + v22 + 8);
  if (v25 >> 60 != 15)
  {
    unint64_t v26 = v24[1];
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v23;
      uint64_t *v23 = *v24;
      v23[1] = v26;
      sub_100012B54(v27, v25);
      return a1;
    }

    sub_100033BD0((uint64_t)v23);
  }

  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  return a1;
}

uint64_t sub_10003C558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003C564);
}

uint64_t sub_10003C564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32) + 8) >> 60;
  BOOL v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  unsigned int v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10) {
    return 0LL;
  }
  else {
    return v11;
  }
}

uint64_t sub_10003C5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003C5F8);
}

uint64_t sub_10003C5F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  BOOL v10 = (void *)(a1 + *(int *)(a4 + 32));
  *BOOL v10 = 0LL;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_10003C680(uint64_t a1)
{
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10008F940;
    v4[2] = &unk_10008F940;
    v4[3] = &unk_10008F940;
    v4[4] = &unk_10008F928;
    void v4[5] = &unk_10008F928;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_10003C704()
{
  unint64_t result = qword_1000B0B08;
  if (!qword_1000B0B08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FA64, &type metadata for ETP_Video.MediaType);
    atomic_store(result, (unint64_t *)&qword_1000B0B08);
  }

  return result;
}

unint64_t sub_10003C74C()
{
  unint64_t result = qword_1000B0B10;
  if (!qword_1000B0B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FB04, &type metadata for ETP_Header.MessageType);
    atomic_store(result, (unint64_t *)&qword_1000B0B10);
  }

  return result;
}

unint64_t sub_10003C794()
{
  unint64_t result = qword_1000B0B18;
  if (!qword_1000B0B18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FA24, &type metadata for ETP_Video.MediaType);
    atomic_store(result, (unint64_t *)&qword_1000B0B18);
  }

  return result;
}

unint64_t sub_10003C7DC()
{
  unint64_t result = qword_1000B0B20;
  if (!qword_1000B0B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008F9EC, &type metadata for ETP_Video.MediaType);
    atomic_store(result, (unint64_t *)&qword_1000B0B20);
  }

  return result;
}

unint64_t sub_10003C824()
{
  unint64_t result = qword_1000B0B28;
  if (!qword_1000B0B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FAC4, &type metadata for ETP_Header.MessageType);
    atomic_store(result, (unint64_t *)&qword_1000B0B28);
  }

  return result;
}

unint64_t sub_10003C86C()
{
  unint64_t result = qword_1000B0B30;
  if (!qword_1000B0B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FA8C, &type metadata for ETP_Header.MessageType);
    atomic_store(result, (unint64_t *)&qword_1000B0B30);
  }

  return result;
}

uint64_t sub_10003C8B0(uint64_t a1)
{
  else {
    return a1 - 1;
  }
}

ValueMetadata *type metadata accessor for RelayReachabilityRequestUnpacker()
{
  return &type metadata for RelayReachabilityRequestUnpacker;
}

uint64_t sub_10003C8D4()
{
  return sub_10000E9D8( &qword_1000B0B38,  (uint64_t (*)(uint64_t))&type metadata accessor for RelayReachabilityRequest,  (uint64_t)&protocol conformance descriptor for RelayReachabilityRequest);
}

void *sub_10003C900@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v3);
  int v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000E624(&qword_1000B0B48);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for RelayReachabilityContextChatStyle(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[1];
  LOBYTE(v11) = *((_BYTE *)a1 + 17);
  uint64_t v35 = *a1;
  if ((v11 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))( v12,  enum case for RelayReachabilityContextChatStyle.none(_:),  v9);
    swift_bridgeObjectRetain(v13);
    sub_100012EF8((uint64_t)v8, &qword_1000B0B48);
  }

  else
  {
    if (*((_BYTE *)a1 + 16) == 43) {
      uint64_t v14 = (unsigned int *)&enum case for RelayReachabilityContextChatStyle.groupChat(_:);
    }
    else {
      uint64_t v14 = (unsigned int *)&enum case for RelayReachabilityContextChatStyle.instantMessage(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v8, *v14, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0LL, 1LL, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    swift_bridgeObjectRetain(v13);
  }

  uint64_t v15 = a1[4];
  uint64_t v33 = a1[3];
  uint64_t v34 = v13;
  uint64_t v16 = a1[6];
  uint64_t v36 = v12;
  uint64_t v31 = v5;
  uint64_t v32 = v15;
  if (v16)
  {
    uint64_t v17 = a1[5];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    UUID.init(uuidString:)(v17, v16);
    swift_bridgeObjectRelease(v16);
  }

  else
  {
    uint64_t v18 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v5, 1LL, 1LL, v18);
    swift_bridgeObjectRetain(v15);
  }

  char v19 = *((_BYTE *)a1 + 88);
  char v20 = *((_BYTE *)a1 + 89);
  char v21 = *((_BYTE *)a1 + 90);
  char v22 = *((_BYTE *)a1 + 91);
  char v23 = *((_BYTE *)a1 + 92);
  uint64_t v25 = a1[7];
  uint64_t v24 = a1[8];
  uint64_t v27 = a1[9];
  uint64_t v26 = a1[10];
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v24);
  BYTE4(v29) = v23 & 1;
  BYTE3(v29) = v22 & 1;
  BYTE2(v29) = v21 & 1;
  BYTE1(v29) = v20 & 1;
  LOBYTE(v29) = v19 & 1;
  RelayReachabilityContext.init(with:chatStyle:senderLastAddressedHandle:senderLastAddressedSIMID:lastUsedServiceName:serviceOfLastMessage:conversationWasDowngraded:hasConversationHistory:shouldForceServerStatusRefresh:forceMMS:isForPendingConversation:)( v35,  v34,  v36,  v33,  v32,  v31,  v25,  v24,  v27,  v26,  v29);
  return sub_10003DDB0(a1);
}

void sub_10003CBBC(uint64_t a1@<X8>)
{
  void v33[3] = a1;
  uint64_t v1 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v1);
  v33[5] = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for DecodingError(0LL);
  v33[13] = *(void *)(v34 - 8);
  uint64_t v3 = __chkstk_darwin(v34);
  v33[8] = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v33[6] = (char *)v33 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  v33[17] = (char *)v33 - v8;
  __chkstk_darwin(v7);
  uint64_t v9 = type metadata accessor for RelayReachabilityContext(0LL);
  __chkstk_darwin(v9);
  v33[10] = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RelayReachabilityRequest(0LL);
  v33[1] = *(void *)(v11 - 8);
  v33[2] = v11;
  __chkstk_darwin(v11);
  v33[4] = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v13);
  v33[16] = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v38 = *(void *)(v15 - 8);
  uint64_t v39 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  v33[11] = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  v33[14] = (char *)v33 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v33[12] = (char *)v33 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  __chkstk_darwin(v22);
  uint64_t v37 = (char *)v33 - v23;
  uint64_t v35 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  __chkstk_darwin(v35);
  uint64_t v40 = type metadata accessor for Explosion(0LL);
  uint64_t v36 = *(void *)(v40 - 8);
  uint64_t v24 = __chkstk_darwin(v40);
  v33[7] = (char *)v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  v33[15] = (char *)v33 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  __chkstk_darwin(v28);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v30 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

  uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v32 = v31;

  __asm { BR              X10 }

uint64_t sub_10003CF64()
{
  if (BYTE6(v6))
  {
    uint64_t v9 = type metadata accessor for PropertyListDecoder(0LL);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    uint64_t v10 = PropertyListDecoder.init()();
    unint64_t v11 = sub_10003DD6C();
    uint64_t v12 = v0[13].i64[0];
    v0[11].i64[0] = v6;
    uint64_t v13 = v0[9].i64[1];
    uint64_t v14 = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for RelayReachabilityRequestDictionary,  v12,  v6,  &type metadata for RelayReachabilityRequestDictionary,  v11);
    if (v13)
    {
      v0[9].i64[1] = v10;
      v0[16].i64[0] = v13;
      swift_errorRetain(v13);
      uint64_t v16 = sub_10000E624(&qword_1000AFFC8);
      uint64_t v17 = v0[9].i64[0];
      if (swift_dynamicCast(v7, &v0[16], v16, v17, 0LL))
      {
        swift_errorRelease(v13);
        uint64_t v18 = v0[6].i64[1];
        uint64_t v19 = v0[8].i64[1];
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v19, v7, v17);
        uint64_t v21 = v0[6].i64[0];
        ((void (*)(uint64_t))static Logger.relayReachabilityRequestUnpacker.getter)(v20);
        uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
        uint64_t v23 = v0[3].i64[0];
        v0[5].i64[1] = (uint64_t)v22;
        uint64_t v24 = v22(v23, v19, v17);
        uint64_t v25 = (void *)Logger.logObject.getter(v24);
        os_log_type_t v26 = static os_log_type_t.default.getter(v25);
        v0[5].i32[0] = v26;
        if (os_log_type_enabled((os_log_t)v25, v26))
        {
          uint64_t v27 = v17;
          uint64_t v28 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
          uint64_t v29 = swift_slowAlloc(32LL, -1LL);
          v0[2].i64[0] = v29;
          *(void *)(v8 - 72) = v29;
          v0[1].i64[0] = (uint64_t)v25;
          v0[1].i64[1] = (uint64_t)v28;
          _DWORD *v28 = 136446210;
          v0->i64[1] = (uint64_t)(v28 + 1);
          uint64_t v30 = v0[2].i64[1];
          ((void (*)(uint64_t, uint64_t, uint64_t))v0[5].i64[1])(v30, v23, v27);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v30, 0LL, 1LL, v27);
          uint64_t v31 = >> prefix<A>(_:)(v30);
          unint64_t v33 = v32;
          sub_100012EF8(v30, &qword_1000AFFA8);
          v0[13].i64[1] = sub_100014C84(v31, v33, (uint64_t *)(v8 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[13].u64[1], &v0[14], v0->i64[1], v28 + 3);
          __n128 v34 = swift_bridgeObjectRelease(v33);
          uint64_t v35 = *(void (**)(uint64_t, uint64_t, __n128))(v0[6].i64[1] + 8);
          v0[6].i64[1] = (uint64_t)v35;
          v35(v23, v27, v34);
          uint64_t v36 = (os_log_s *)v0[1].i64[0];
          uint64_t v37 = (uint8_t *)v0[1].i64[1];
          _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v0[5].i32[0],  "RelayReachabilityRequestDictionary unpacking error: %{public}s",  v37,  0xCu);
          uint64_t v38 = v0[2].i64[0];
          swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1LL, -1LL);
          swift_slowDealloc(v37, -1LL, -1LL);

          uint64_t v39 = v0[12].i64[0];
          uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8);
          uint64_t v41 = v0[6].i64[0];
          v0[11].i64[1] = (uint64_t)v40;
          v40(v41, v39);
        }

        else
        {
          uint64_t v109 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
          v0[6].i64[1] = (uint64_t)v109;
          v109(v23, v17);

          uint64_t v110 = v0[12].i64[0];
          uint64_t v111 = *(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8);
          v0[11].i64[1] = (uint64_t)v111;
          v111(v21, v110);
          uint64_t v27 = v17;
        }

        uint64_t v112 = v0[12].i64[1];
        uint64_t v113 = v4;
        uint64_t v114 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 104);
        uint64_t v115 = v0[10].i64[0];
        uint64_t v116 = v114(v5, enum case for TopLevelDictionary.CodingKeys.decryptedData(_:), v115);
        uint64_t v117 = ((uint64_t (*)(uint64_t))TopLevelDictionary.CodingKeys.stringValue.getter)(v116);
        uint64_t v119 = v118;
        (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v5, v115);
        uint64_t v120 = v0[4].i64[0];
        ((void (*)(uint64_t, uint64_t, uint64_t))v0[5].i64[1])(v120, v0[8].i64[1], v27);
        uint64_t v121 = v0[7].i64[1];
        uint64_t v122 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))Explosion.init(topLevelKey:error:))(v117, v119, v120);
        uint64_t v123 = v0[7].i64[0];
        ((void (*)(uint64_t))static Logger.relayReachabilityRequestUnpacker.getter)(v122);
        uint64_t v124 = v0[10].i64[1];
        uint64_t v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 16);
        uint64_t v126 = v0[3].i64[1];
        uint64_t v127 = v125(v126, v121, v112);
        uint64_t v128 = (os_log_s *)Logger.logObject.getter(v127);
        os_log_type_t v129 = static os_log_type_t.default.getter(v128);
        if (os_log_type_enabled(v128, v129))
        {
          v0[10].i64[0] = (uint64_t)v125;
          uint64_t v130 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v131 = swift_slowAlloc(32LL, -1LL);
          v0[6].i64[0] = v131;
          *(void *)(v8 - 72) = v131;
          *(_DWORD *)uint64_t v130 = 136446210;
          v0[5].i64[1] = (uint64_t)(v130 + 4);
          uint64_t v132 = v126;
          uint64_t v133 = v0[8].i64[0];
          ((void (*)(uint64_t, uint64_t, uint64_t))v0[10].i64[0])(v133, v132, v0[12].i64[1]);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v124 + 56))(v133, 0LL, 1LL, v0[12].i64[1]);
          uint64_t v134 = >> prefix<A>(_:)(v133);
          unint64_t v136 = v135;
          sub_100012EF8(v133, &qword_1000AFFB0);
          uint64_t v137 = v134;
          uint64_t v125 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[10].i64[0];
          v0[13].i64[1] = sub_100014C84(v137, v136, (uint64_t *)(v8 - 72));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v0[13].u64[1], &v0[14], v0[5].i64[1], v130 + 12);
          __n128 v138 = swift_bridgeObjectRelease(v136);
          uint64_t v139 = *(void (**)(uint64_t, uint64_t, __n128))(v0[10].i64[1] + 8);
          v139(v132, v0[12].i64[1], v138);
          _os_log_impl( (void *)&_mh_execute_header,  v128,  v129,  "RelayReachabilityRequestDictionary unpacking explosion: %{public}s",  v130,  0xCu);
          uint64_t v140 = v0[6].i64[0];
          swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v112 = v0[12].i64[1];
          swift_slowDealloc(v140, -1LL, -1LL);
          swift_slowDealloc(v130, -1LL, -1LL);

          uint64_t v141 = v0[7].i64[0];
        }

        else
        {
          uint64_t v139 = *(void (**)(uint64_t, uint64_t, __n128))(v124 + 8);
          ((void (*)(uint64_t, uint64_t))v139)(v126, v112);

          uint64_t v141 = v123;
        }

        ((void (*)(uint64_t, uint64_t))v0[11].i64[1])(v141, v0[12].i64[0]);
        unint64_t v150 = v0[11].u64[0];
        uint64_t v151 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
        swift_allocError(v112, v151, 0LL, 0LL);
        uint64_t v152 = v0[7].i64[1];
        uint64_t v154 = v125(v153, v152, v112);
        swift_willThrow(v154);
        sub_100012B54(v0[13].i64[0], v150);
        swift_release(v0[9].i64[1]);
        ((void (*)(uint64_t, uint64_t))v139)(v152, v112);
        ((void (*)(uint64_t, uint64_t))v0[6].i64[1])(v0[8].i64[1], v0[9].i64[0]);
        return swift_errorRelease(v0[16].i64[0]);
      }

      uint64_t v99 = swift_errorRelease(v0[16].i64[0]);
      uint64_t v100 = v0[5].i64[1];
      ((void (*)(uint64_t))static Logger.relayReachabilityRequestUnpacker.getter)(v99);
      swift_errorRetain(v13);
      uint64_t v101 = swift_errorRetain(v13);
      uint64_t v102 = (os_log_s *)Logger.logObject.getter(v101);
      os_log_type_t v103 = static os_log_type_t.default.getter(v102);
      if (os_log_type_enabled(v102, v103))
      {
        unint64_t v104 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v105 = swift_slowAlloc(32LL, -1LL);
        v0[16].i64[0] = v105;
        *(_DWORD *)unint64_t v104 = 136446210;
        *(void *)(v8 - 72) = v13;
        uint64_t v106 = >> prefix<A>(_:)(v8 - 72);
        unint64_t v108 = v107;
        *(void *)(v8 - 72) = sub_100014C84(v106, v107, v0[16].i64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 72, v8 - 64, v104 + 4, v104 + 12);
        swift_bridgeObjectRelease(v108);
        swift_errorRelease(v13);
        swift_errorRelease(v13);
        _os_log_impl( (void *)&_mh_execute_header,  v102,  v103,  "RelayReachabilityRequestDictionary unpacking unknown error: %{public}s",  v104,  0xCu);
        swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v104, -1LL, -1LL);

        (*(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8))(v0[5].i64[1], v0[12].i64[0]);
      }

      else
      {
        swift_errorRelease(v13);
        swift_errorRelease(v13);

        (*(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8))(v100, v0[12].i64[0]);
      }

      ((void (*)(uint64_t, unint64_t *, int16x8_t *))swift_getErrorValue)(v13, &v0[15].u64[1], &v0[14]);
      uint64_t v142 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_getDynamicType)( v0[14].i64[0],  v0[14].i64[1],  1LL);
      v0[16].i64[0] = 0LL;
      v0[16].i64[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      __n128 v143 = swift_bridgeObjectRelease(v0[16].i64[1]);
      v0[16].i64[0] = 0xD000000000000014LL;
      v0[16].i64[1] = 0x800000010008A6A0LL;
      v144._countAndFlagsBits = ((uint64_t (*)(uint64_t, void, __n128))_typeName(_:qualified:))( v142,  0LL,  v143);
      object = v144._object;
      String.append(_:)(v144);
      swift_bridgeObjectRelease(object);
      uint64_t v146 = v0[16].i64[0];
      uint64_t v147 = v0[16].i64[1];
      uint64_t v148 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v0[12].i64[1], v148, 0LL, 0LL);
      uint64_t v149 = Explosion.init(domain:errorType:keyPath:)( v146,  v147,  0x546E776F6E6B6E55LL,  0xEB00000000657079LL,  0xD00000000000001FLL,  0x800000010008A6C0LL);
      swift_willThrow(v149);
      swift_errorRelease(v13);
      swift_release(v0[9].i64[1]);
      uint64_t v158 = v0[13].i64[0];
      unint64_t v159 = v0[11].u64[0];
    }

    else
    {
      v0[8].i64[0] = v0[16].i64[0];
      v0[3].i64[1] = v0[16].i64[1];
      uint64_t v78 = v0[17].i64[1];
      uint64_t v79 = v0[18].i64[0];
      v0[10].i64[0] = v0[17].i64[0];
      v0[10].i64[1] = v79;
      __int8 v80 = v0[18].i8[8];
      v0[7].i32[2] = v0[18].u8[9];
      uint64_t v81 = v0[19].i64[0];
      uint64_t v82 = v0[19].i64[1];
      v0[6].i64[1] = v0[20].i64[0];
      v0[7].i64[0] = v81;
      v0[12].i64[1] = v0[20].i64[1];
      uint64_t v83 = v0[21].i64[0];
      uint64_t v84 = v0[21].i64[1];
      v0[5].i64[1] = v0[22].i64[0];
      v0[6].i64[0] = v83;
      v0[8].i64[1] = v0[22].i64[1];
      v0[9].i64[0] = v84;
      v15.i32[0] = v0[23].i32[0];
      v0[4] = (int16x8_t)vmovl_u8(v15);
      v0[9].i32[2] = v0[23].u8[4];
      uint64_t v85 = ((uint64_t (*)(uint64_t))static Logger.relayReachabilityRequestUnpacker.getter)(v14);
      unint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
      os_log_type_t v87 = static os_log_type_t.default.getter(v86);
      if (os_log_type_enabled(v86, v87))
      {
        unint64_t v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        v0[3].i64[0] = v82;
        __int8 v89 = v80;
        uint64_t v90 = v10;
        uint64_t v91 = v88;
        *(_WORD *)unint64_t v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Unpacking RelayReachabilityRequestDictionary", v88, 2u);
        uint64_t v92 = v91;
        uint64_t v10 = v90;
        __int8 v80 = v89;
        uint64_t v82 = v0[3].i64[0];
        swift_slowDealloc(v92, -1LL, -1LL);
      }

      (*(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8))(v3, v0[12].i64[0]);
      uint64_t v93 = v0[10].i64[1];
      *(void *)(v8 - 184) = v78;
      *(void *)(v8 - 176) = v93;
      *(_BYTE *)(v8 - 16_Block_object_dispose(va, 8) = v80;
      *(_BYTE *)(v8 - 167) = v0[7].i32[2];
      *(void *)(v8 - 160) = v0[7].i64[0];
      *(void *)(v8 - 152) = v82;
      uint64_t v94 = v0[12].i64[1];
      *(void *)(v8 - 144) = v0[6].i64[1];
      *(void *)(v8 - 136) = v94;
      uint64_t v96 = v0[8].i64[1];
      uint64_t v95 = v0[9].i64[0];
      *(void *)(v8 - 12_Block_object_dispose(va, 8) = v0[6].i64[0];
      *(void *)(v8 - 120) = v95;
      *(void *)(v8 - 112) = v0[5].i64[1];
      *(void *)(v8 - 104) = v96;
      *(_DWORD *)(v8 - 96) = vmovn_s16(v0[4]).u32[0];
      *(_BYTE *)(v8 - 92) = v0[9].i32[2];
      swift_bridgeObjectRetain(v96);
      uint64_t v97 = v0[8].i64[0];
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v0[10].i64[0]);
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRetain(v95);
      uint64_t v98 = v0[5].i64[0];
      sub_10003C900((uint64_t *)(v8 - 184), v98);
      v0[9].i64[1] = v10;
      uint64_t v155 = v0[10].i64[0];
      uint64_t v156 = v0[2].i64[0];
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))RelayReachabilityRequest.init(with:serviceName:context:))( v97,  v0[3].i64[1],  v155,  v98);
      unint64_t v157 = v0[11].u64[0];
      swift_bridgeObjectRelease(v0[8].i64[1]);
      swift_bridgeObjectRelease(v0[9].i64[0]);
      swift_bridgeObjectRelease(v0[12].i64[1]);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v0[10].i64[1]);
      swift_bridgeObjectRelease(v155);
      __n128 v160 = swift_bridgeObjectRelease(v97);
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0->i64[1] + 32))( v0[1].i64[1],  v156,  v0[1].i64[0],  v160);
      swift_release(v0[9].i64[1]);
      uint64_t v158 = v0[13].i64[0];
      unint64_t v159 = v157;
    }

    return sub_100012B54(v158, v159);
  }

  uint64_t v42 = v4;
  uint64_t v43 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 104);
  uint64_t v44 = v0[10].i64[0];
  uint64_t v45 = v43(v5, enum case for TopLevelDictionary.CodingKeys.decryptedData(_:), v44);
  uint64_t v46 = ((uint64_t (*)(uint64_t))TopLevelDictionary.CodingKeys.stringValue.getter)(v45);
  uint64_t v48 = v47;
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v5, v44);
  uint64_t v49 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000022LL, 0x800000010008A5F0LL, v46, v48, 0LL, 0LL);
  uint64_t v50 = v0[11].i64[0];
  ((void (*)(uint64_t))static Logger.relayReachabilityRequestUnpacker.getter)(v49);
  uint64_t v51 = v0[10].i64[1];
  uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
  uint64_t v53 = v0[12].i64[1];
  v0[10].i64[0] = (uint64_t)v52;
  uint64_t v54 = v52(v2, v1, v53);
  uint64_t v55 = (void *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.default.getter(v55);
  __int32 v57 = v56;
  if (os_log_type_enabled((os_log_t)v55, v56))
  {
    uint64_t v58 = swift_slowAlloc(12LL, -1LL);
    v0[9].i32[2] = v57;
    unint64_t v59 = (_DWORD *)v58;
    uint64_t v60 = swift_slowAlloc(32LL, -1LL);
    v0[9].i64[0] = v60;
    v0[16].i64[0] = v60;
    v0[7].i64[1] = (uint64_t)v55;
    uint64_t v61 = v51;
    v0[8].i64[1] = (uint64_t)v59;
    _DWORD *v59 = 136446210;
    uint64_t v62 = v59 + 3;
    v0[7].i64[0] = (uint64_t)(v59 + 1);
    uint64_t v63 = v0[8].i64[0];
    ((void (*)(uint64_t, uint64_t, uint64_t))v0[10].i64[0])(v63, v2, v53);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v63, 0LL, 1LL, v53);
    unint64_t v64 = v6;
    uint64_t v65 = >> prefix<A>(_:)(v63);
    unint64_t v67 = v66;
    sub_100012EF8(v63, &qword_1000AFFB0);
    uint64_t v68 = v65;
    unint64_t v6 = v64;
    uint64_t v53 = v0[12].i64[1];
    *(void *)(v8 - 72) = sub_100014C84(v68, v67, v0[16].i64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 72, v8 - 64, v0[7].i64[0], v62);
    __n128 v69 = swift_bridgeObjectRelease(v67);
    unint64_t v70 = *(void (**)(uint64_t, uint64_t, __n128))(v61 + 8);
    v70(v2, v53, v69);
    id v71 = (os_log_s *)v0[7].i64[1];
    uint64_t v72 = (uint8_t *)v0[8].i64[1];
    _os_log_impl( (void *)&_mh_execute_header,  v71,  (os_log_type_t)v0[9].i32[2],  "Message unpacking explosion: %{public}s",  v72,  0xCu);
    uint64_t v73 = v0[9].i64[0];
    swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    swift_slowDealloc(v72, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8))(v0[11].i64[0], v0[12].i64[0]);
  }

  else
  {
    unint64_t v70 = *(void (**)(uint64_t, uint64_t, __n128))(v51 + 8);
    ((void (*)(uint64_t, uint64_t))v70)(v2, v53);

    (*(void (**)(uint64_t, uint64_t))(v0[11].i64[1] + 8))(v50, v0[12].i64[0]);
  }

  uint64_t v74 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v53, v74, 0LL, 0LL);
  uint64_t v76 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[10].i64[0])(v75, v1, v53);
  swift_willThrow(v76);
  sub_100012B54(v0[13].i64[0], v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v70)(v1, v53);
}

void sub_10003DD58(uint64_t a1@<X8>)
{
}

unint64_t sub_10003DD6C()
{
  unint64_t result = qword_1000B0B40;
  if (!qword_1000B0B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008DFAC, &type metadata for RelayReachabilityRequestDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0B40);
  }

  return result;
}

void *sub_10003DDB0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[10];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SyndicationActionUnpacker()
{
  return &type metadata for SyndicationActionUnpacker;
}

uint64_t sub_10003DE28()
{
  return sub_10000E9D8( &qword_1000B0B50,  (uint64_t (*)(uint64_t))&type metadata accessor for SyndicationAction,  (uint64_t)&protocol conformance descriptor for SyndicationAction);
}

void sub_10003DE54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v3 = type metadata accessor for GroupContext(0LL);
  uint64_t v71 = *(void *)(v3 - 8);
  uint64_t v72 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  __n128 v69 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  id v77 = (char *)&v68 - v6;
  uint64_t v7 = type metadata accessor for SyndicationAction.ActionType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Explosion(0LL);
  uint64_t v75 = *(char **)(v14 - 8);
  uint64_t v76 = (char *)v14;
  __chkstk_darwin(v14);
  uint64_t v74 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for SyndicationAction.ItemType(0LL);
  uint64_t v78 = *(void *)(v16 - 8);
  uint64_t v79 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v68 - v20;
  int v22 = *(unsigned __int8 *)(a1 + 1);
  uint64_t v23 = SyndicationAction.ItemType.init(defaultingRawValue:)(*(unsigned __int8 *)(a1 + 1));
  if (v22 == SyndicationAction.ItemType.rawValue.getter(v23))
  {
    uint64_t v74 = v19;
    uint64_t v75 = v10;
    uint64_t v76 = v21;
    uint64_t v24 = *(unsigned __int8 *)(a1 + 2);
    uint64_t v25 = v77;
    uint64_t v26 = v73;
    uint64_t v27 = v7;
    if (*(_BYTE *)a1 != 2)
    {
      uint64_t v28 = *(unsigned __int8 *)(a1 + 2);
      sub_100012C44();
      uint64_t v29 = (os_log_s *)static OS_os_log.default.getter();
      os_log_type_t v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = v8;
        unint64_t v32 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
        *(_DWORD *)unint64_t v32 = 16777472;
        char v82 = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v32 + 4, v32 + 5);
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "SyndicationAction version greater than known version or lower than the minimum version expected. Unpacking to version %hhu",  v32,  5u);
        unint64_t v33 = v32;
        uint64_t v8 = v31;
        uint64_t v25 = v77;
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      uint64_t v24 = v28;
    }

    if ((static SyndicationAction.ActionType.isValidMask(_:)(v24) & 1) == 0)
    {
      __n128 v34 = v25;
      sub_100012C44();
      uint64_t v35 = (os_log_s *)static OS_os_log.default.getter();
      os_log_type_t v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
        *(_DWORD *)uint64_t v37 = 16777472;
        char v82 = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v37 + 4, v37 + 5);
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "SyndicationAction type not valid, defaulting to none %hhu",  v37,  5u);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      uint64_t v38 = v75;
      uint64_t v39 = static SyndicationAction.ActionType.none.getter();
      uint64_t v24 = SyndicationAction.ActionType.rawValue.getter(v39);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v38, v27);
      uint64_t v25 = v34;
    }

    uint64_t v40 = *(void *)(a1 + 8);
    uint64_t v41 = SyndicationActionDictionary.messagePartRange()();
    uint64_t v43 = v42;
    uint64_t v44 = *(void *)(a1 + 56);
    id v77 = *(char **)(a1 + 48);
    __int128 v45 = *(_OWORD *)(a1 + 112);
    v80[2] = *(_OWORD *)(a1 + 96);
    v80[3] = v45;
    char v81 = *(_BYTE *)(a1 + 128);
    __int128 v46 = *(_OWORD *)(a1 + 80);
    v80[0] = *(_OWORD *)(a1 + 64);
    v80[1] = v46;
    swift_bridgeObjectRetain(v44);
    sub_10003F560((uint64_t *)v80);
    sub_100073E7C((uint64_t *)v80);
    if (v26)
    {
      (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v79);
      swift_bridgeObjectRelease(v44);
    }

    else
    {
      uint64_t v73 = v40;
      uint64_t v75 = (char *)v41;
      uint64_t v61 = v25;
      uint64_t v62 = v43;
      uint64_t v63 = v24;
      unint64_t v64 = v74;
      (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v74, v76, v79);
      uint64_t v65 = v71;
      uint64_t v66 = v72;
      unint64_t v67 = v69;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v69, v61, v72);
      SyndicationAction.init(with:actionType:encodedSyndicationStartDate:syndicatedMessagePartRange:messagePartGUID:groupContext:version:)( v64,  v63,  v73,  v75,  v62,  v77,  v44,  v67,  2);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v61, v66);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v76, v79);
    }
  }

  else
  {
    uint64_t v47 = v74;
    Explosion.init(domain:errorType:keyPath:)( 0xD000000000000025LL,  0x800000010008B410LL,  0xD000000000000017LL,  0x800000010008B440LL,  0xD000000000000012LL,  0x800000010008B460LL);
    sub_100012C44();
    uint64_t v48 = (void *)static OS_os_log.syndicationActionUnpacker.getter();
    uint64_t v49 = sub_10000E624(&qword_1000AFF48);
    uint64_t v50 = swift_allocObject(v49, 72LL, 7LL);
    *(_OWORD *)(v50 + 16) = xmmword_10008D7D0;
    uint64_t v52 = v75;
    uint64_t v51 = v76;
    id v77 = (char *)*((void *)v75 + 2);
    ((void (*)(char *, char *, char *))v77)(v13, v47, v76);
    (*((void (**)(char *, void, uint64_t, char *))v52 + 7))(v13, 0LL, 1LL, v51);
    uint64_t v53 = >> prefix<A>(_:)(v13);
    uint64_t v55 = v54;
    sub_100012EF8((uint64_t)v13, &qword_1000AFFB0);
    *(void *)(v50 + 56) = &type metadata for String;
    unint64_t v56 = sub_100012CDC();
    *(void *)(v50 + 64) = v56;
    *(void *)(v50 + 32) = v53;
    *(void *)(v50 + 40) = v55;
    uint64_t v57 = static os_log_type_t.default.getter(v56);
    os_log(_:dso:log:type:_:)( "SyndicationAction unpacking explosion: %{public}@",  49LL,  2LL,  &_mh_execute_header,  v48,  v57,  v50);

    swift_bridgeObjectRelease(v50);
    uint64_t v58 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v51, v58, 0LL, 0LL);
    uint64_t v60 = ((uint64_t (*)(uint64_t, char *, char *))v77)(v59, v47, v51);
    swift_willThrow(v60);
    (*((void (**)(char *, char *))v52 + 1))(v47, v51);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v21, v79);
  }

uint64_t sub_10003E4B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v12 = PropertyListDecoder.init()();
  uint64_t v13 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, a1, a2, v7, v13);
  if (v3) {
    return swift_release(v12);
  }
  uint64_t v14 = sub_10003E7E0();
  unint64_t v16 = v15;
  sub_10003EAB4();
  unint64_t v18 = v17;
  unint64_t v42 = v16;
  uint64_t v20 = v19;
  sub_10003EDC0(v19, v17, v12, (uint64_t)v41);
  uint64_t v38 = v20;
  unint64_t v39 = v18;
  sub_10003DE54((uint64_t)v41, a3);
  sub_10003F50C(v41);
  sub_100012C44();
  uint64_t v37 = static OS_os_log.syndicationActionUnpacker.getter(v21);
  uint64_t v22 = sub_10000E624(&qword_1000AFF48);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_10008D7D0;
  uint64_t v24 = SyndicationAction.debugDescription.getter();
  uint64_t v26 = v25;
  v40[0] = v24;
  v40[1] = v25;
  uint64_t v36 = >> prefix<A>(_:)(v40);
  uint64_t v35 = v27;
  swift_bridgeObjectRelease(v26);
  uint64_t v28 = v23;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v29 = sub_100012CDC();
  *(void *)(v23 + 64) = v29;
  uint64_t v30 = v35;
  *(void *)(v23 + 32) = v36;
  *(void *)(v23 + 40) = v30;
  uint64_t v31 = static os_log_type_t.default.getter(v29);
  unint64_t v32 = (void *)v37;
  os_log(_:dso:log:type:_:)( "Successfully unpacked SyndicationAction: %@",  43LL,  2LL,  &_mh_execute_header,  v37,  v31,  v28);

  swift_bridgeObjectRelease(v28);
  sub_100012B54(v38, v39);
  sub_100012B54(v14, v42);
  swift_release(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10003E7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10003E4B4(a1, a2, a3);
}

uint64_t sub_10003E7E0()
{
  uint64_t v0 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v25 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Explosion(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = TopLevelDictionary.decryptedData.getter(v5);
  unint64_t v10 = v8;
  if (v8 >> 60 != 15) {
    __asm { BR              X10 }
  }

  Explosion.init(domain:errorType:keyPath:)( 0xD000000000000025LL,  0x800000010008B410LL,  0xD000000000000013LL,  0x800000010008B590LL,  0x446C616974696E69LL,  0xEE00747079726365LL);
  sub_100012C44();
  uint64_t v26 = v9;
  uint64_t v11 = (void *)static OS_os_log.syndicationActionUnpacker.getter();
  uint64_t v12 = sub_10000E624(&qword_1000AFF48);
  uint64_t v13 = swift_allocObject(v12, 72LL, 7LL);
  *(_OWORD *)(v13 + 16) = xmmword_10008D7D0;
  v25[1] = v10;
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v14(v2, v7, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0LL, 1LL, v3);
  uint64_t v15 = >> prefix<A>(_:)(v2);
  uint64_t v17 = v16;
  sub_100012EF8((uint64_t)v2, &qword_1000AFFB0);
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_100012CDC();
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = v17;
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  os_log(_:dso:log:type:_:)( "SyndicationAction decrypting explosion: %{public}@",  50LL,  2LL,  &_mh_execute_header,  v11,  v19,  v13);

  uint64_t v20 = v26;
  swift_bridgeObjectRelease(v13);
  uint64_t v21 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v3, v21, 0LL, 0LL);
  uint64_t v23 = ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(v22, v7, v3);
  swift_willThrow(v23);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v20;
}

void sub_10003EAB4()
{
  uint64_t v0 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for Explosion(0LL);
  __chkstk_darwin(v1);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

  static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v5 = v4;

  __asm { BR              X10 }

uint64_t sub_10003EDC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v89 = a3;
  uint64_t v7 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v7);
  uint64_t v83 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v9);
  char v82 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for Explosion(0LL);
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DecodingError(0LL);
  uint64_t v88 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  os_log_type_t v87 = (char *)&v80 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v80 - v22;
  unint64_t v24 = sub_10003F5A8();
  uint64_t v25 = v90;
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for SyndicationActionDictionary,  a1,  a2,  &type metadata for SyndicationActionDictionary,  v24);
  if (v25)
  {
    *(void *)&v92[0] = v25;
    swift_errorRetain(v25);
    uint64_t v27 = sub_10000E624(&qword_1000AFFC8);
    if (swift_dynamicCast(v23, v92, v27, v16, 0LL))
    {
      swift_errorRelease(v25);
      uint64_t v28 = v16;
      (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v87, v23, v16);
      uint64_t v29 = (*(uint64_t (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for TopLevelDictionary.CodingKeys.decryptedData(_:),  v11);
      uint64_t v30 = TopLevelDictionary.CodingKeys.stringValue.getter(v29);
      uint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      uint64_t v33 = v88;
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
      uint64_t v35 = v87;
      v34(v19, v87, v28);
      Explosion.init(topLevelKey:error:)(v30, v32, v19);
      sub_100012C44();
      uint64_t v36 = (void *)((uint64_t (*)(void))static OS_os_log.syndicationActionUnpacker.getter)();
      uint64_t v37 = sub_10000E624(&qword_1000AFF48);
      uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
      __int128 v90 = xmmword_10008D7D0;
      *(_OWORD *)(v38 + 16) = xmmword_10008D7D0;
      uint64_t v39 = (uint64_t)v82;
      uint64_t v81 = v28;
      v34(v82, v35, v28);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v39, 0LL, 1LL, v28);
      uint64_t v40 = >> prefix<A>(_:)(v39);
      uint64_t v42 = v41;
      sub_100012EF8(v39, &qword_1000AFFA8);
      *(void *)(v38 + 56) = &type metadata for String;
      unint64_t v43 = sub_100012CDC();
      *(void *)(v38 + 64) = v43;
      *(void *)(v38 + 32) = v40;
      *(void *)(v38 + 40) = v42;
      uint64_t v44 = static os_log_type_t.default.getter(v43);
      os_log(_:dso:log:type:_:)( "SyndicationAction unpacking error: %{public}@",  45LL,  2LL,  &_mh_execute_header,  v36,  v44,  v38);

      __n128 v45 = swift_bridgeObjectRelease(v38);
      __int128 v46 = (void *)static OS_os_log.syndicationActionUnpacker.getter(v45);
      uint64_t v47 = swift_allocObject(v37, 72LL, 7LL);
      *(_OWORD *)(v47 + 16) = v90;
      uint64_t v48 = v84;
      *(void *)&__int128 v90 = *(void *)(v84 + 16);
      uint64_t v49 = (uint64_t)v83;
      uint64_t v50 = v85;
      uint64_t v51 = v86;
      ((void (*)(char *, char *, uint64_t))v90)(v83, v85, v86);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v49, 0LL, 1LL, v51);
      uint64_t v52 = >> prefix<A>(_:)(v49);
      uint64_t v54 = v53;
      uint64_t v55 = sub_100012EF8(v49, &qword_1000AFFB0);
      *(void *)(v47 + 56) = &type metadata for String;
      *(void *)(v47 + 64) = v43;
      *(void *)(v47 + 32) = v52;
      *(void *)(v47 + 40) = v54;
      uint64_t v56 = static os_log_type_t.default.getter(v55);
      os_log(_:dso:log:type:_:)( "SyndicationAction unpacking explosion: %{public}@",  49LL,  2LL,  &_mh_execute_header,  v46,  v56,  v47);

      swift_bridgeObjectRelease(v47);
      uint64_t v57 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v51, v57, 0LL, 0LL);
      uint64_t v59 = ((uint64_t (*)(uint64_t, char *, uint64_t))v90)(v58, v50, v51);
      swift_willThrow(v59);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v51);
      (*(void (**)(char *, uint64_t))(v88 + 8))(v87, v81);
      return swift_errorRelease(*(void *)&v92[0]);
    }

    else
    {
      swift_errorRelease(*(void *)&v92[0]);
      sub_100012C44();
      unint64_t v64 = (void *)((uint64_t (*)(void))static OS_os_log.syndicationActionUnpacker.getter)();
      uint64_t v65 = sub_10000E624(&qword_1000AFF48);
      uint64_t v66 = swift_allocObject(v65, 72LL, 7LL);
      *(_OWORD *)(v66 + 16) = xmmword_10008D7D0;
      *(void *)&v92[0] = v25;
      uint64_t v67 = >> prefix<A>(_:)(v92);
      uint64_t v69 = v68;
      *(void *)(v66 + 56) = &type metadata for String;
      unint64_t v70 = sub_100012CDC();
      *(void *)(v66 + 64) = v70;
      *(void *)(v66 + 32) = v67;
      *(void *)(v66 + 40) = v69;
      uint64_t v71 = static os_log_type_t.default.getter(v70);
      os_log(_:dso:log:type:_:)( "SyndicationAction unpacking unknown error: %{public}@",  53LL,  2LL,  &_mh_execute_header,  v64,  v71,  v66);

      __n128 v72 = swift_bridgeObjectRelease(v66);
      swift_getErrorValue(v25, v94, v91, v72);
      uint64_t DynamicType = swift_getDynamicType(v91[0], v91[1], 1LL);
      *(void *)&v92[0] = 0LL;
      *((void *)&v92[0] + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      __n128 v74 = swift_bridgeObjectRelease(*((void *)&v92[0] + 1));
      *(void *)&v92[0] = 0xD000000000000014LL;
      *((void *)&v92[0] + 1) = 0x800000010008A6A0LL;
      v75._countAndFlagsBits = _typeName(_:qualified:)(DynamicType, 0LL, v74);
      object = v75._object;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(object);
      __int128 v77 = v92[0];
      uint64_t v78 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v86, v78, 0LL, 0LL);
      uint64_t v79 = Explosion.init(domain:errorType:keyPath:)( v77,  *((void *)&v77 + 1),  0x546E776F6E6B6E55LL,  0xEB00000000657079LL,  0xD00000000000001FLL,  0x800000010008A6C0LL);
      swift_willThrow(v79);
      return swift_errorRelease(v25);
    }
  }

  else
  {
    __int128 v60 = v92[7];
    *(_OWORD *)(a4 + 96) = v92[6];
    *(_OWORD *)(a4 + 112) = v60;
    *(_BYTE *)(a4 + 12_Block_object_dispose(va, 8) = v93;
    __int128 v61 = v92[3];
    *(_OWORD *)(a4 + 32) = v92[2];
    *(_OWORD *)(a4 + 4_Block_object_dispose(va, 8) = v61;
    __int128 v62 = v92[5];
    *(_OWORD *)(a4 + 64) = v92[4];
    *(_OWORD *)(a4 + 80) = v62;
    __int128 v63 = v92[1];
    *(_OWORD *)a4 = v92[0];
    *(_OWORD *)(a4 + 16) = v63;
  }

  return result;
}

void *sub_10003F50C(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[10];
  uint64_t v4 = a1[12];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t *sub_10003F560(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_10003F5A8()
{
  unint64_t result = qword_1000B0B58;
  if (!qword_1000B0B58)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SyndicationActionDictionary,  &type metadata for SyndicationActionDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0B58);
  }

  return result;
}

uint64_t sub_10003F5EC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1868985701LL;
  }
  else {
    uint64_t v3 = 118LL;
  }
  if (v2) {
    unint64_t v4 = 0xE100000000000000LL;
  }
  else {
    unint64_t v4 = 0xE400000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 1868985701LL;
  }
  else {
    uint64_t v5 = 118LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE400000000000000LL;
  }
  else {
    unint64_t v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003F67C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 110LL;
    }
    else {
      uint64_t v3 = 6580579LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE100000000000000LL;
    }
    else {
      unint64_t v4 = 0xE300000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 110LL;
      }
      else {
        uint64_t v6 = 6580579LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE100000000000000LL;
      }
      else {
        unint64_t v7 = 0xE300000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE100000000000000LL;
    uint64_t v3 = 104LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE100000000000000LL;
  uint64_t v6 = 104LL;
  if (v3 != 104)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0LL);
    goto LABEL_22;
  }

LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
  unint64_t v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_10003F754(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10003F7A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003F83C + 4 * byte_10008FC97[a2]))(0x6C737365636361LL);
}

uint64_t sub_10003F83C(uint64_t a1)
{
  if (a1 == 0x6C737365636361LL && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C737365636361LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10003F92C(char a1, char a2)
{
  uint64_t v2 = qword_1000902D0[a1];
  uint64_t v3 = qword_1000902D0[a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_10003F990(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x616F6C7961705F5FLL;
  }
  else {
    uint64_t v3 = 0x6863617474615F5FLL;
  }
  if (v2) {
    unint64_t v4 = 0xEF5F5F73746E656DLL;
  }
  else {
    unint64_t v4 = 0xEB000000005F5F64LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x616F6C7961705F5FLL;
  }
  else {
    uint64_t v5 = 0x6863617474615F5FLL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xEB000000005F5F64LL;
  }
  else {
    unint64_t v6 = 0xEF5F5F73746E656DLL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003FA48(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 4475235LL;
    }
    else {
      uint64_t v3 = 25444LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE300000000000000LL;
    }
    else {
      unint64_t v4 = 0xE200000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 4475235LL;
      }
      else {
        uint64_t v6 = 25444LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE300000000000000LL;
      }
      else {
        unint64_t v7 = 0xE200000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE200000000000000LL;
    uint64_t v3 = 22131LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE200000000000000LL;
  uint64_t v6 = 22131LL;
  if (v3 != 22131)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0LL);
    goto LABEL_22;
  }

void sub_10003FB20(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10003FB58(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003FB9C + 4 * byte_10008FCA3[a2]))(101LL);
}

uint64_t sub_10003FB9C(uint64_t a1)
{
  if (a1 == 101 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 101LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10003FC24(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 1734959987LL;
  }
  else {
    uint64_t v2 = 1768977011LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 1734959987LL;
  }
  else {
    uint64_t v3 = 1768977011LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000LL, v3, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE400000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_10003FC90(char a1, char a2)
{
  if ((a1 & 1) != 0) {
    uint64_t v2 = 7299942LL;
  }
  else {
    uint64_t v2 = 7234918LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 7299942LL;
  }
  else {
    uint64_t v3 = 7234918LL;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE300000000000000LL, v3, 0xE300000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE300000000000000LL, 2LL);
  return v4 & 1;
}

uint64_t sub_10003FCFC(char a1, char a2)
{
  uint64_t v2 = qword_1000902E8[a1];
  uint64_t v3 = qword_1000902E8[a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE100000000000000LL, v3, 0xE100000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE100000000000000LL, 2LL);
  return v4 & 1;
}

void sub_10003FD60(char a1)
{
  __asm { BR              X11 }

uint64_t sub_10003FDA0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003FE1C + 4 * byte_10008FCB0[a2]))(7564641LL);
}

uint64_t sub_10003FE1C(uint64_t a1)
{
  if (a1 == 7564641 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 7564641LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10003FEF4(char a1, char a2)
{
  uint64_t v2 = *(void *)&aSait_0[8 * a1];
  uint64_t v3 = *(void *)&aSait_0[8 * a2];
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000LL, v3, 0xE400000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease_n(0xE400000000000000LL, 2LL);
  return v4 & 1;
}

void sub_10003FF58(char a1)
{
  __asm { BR              X10 }

uint64_t sub_10003FF98(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003FFE4 + 4 * byte_10008FCBD[a2]))(6910053LL);
}

uint64_t sub_10003FFE4(uint64_t a1)
{
  if (a1 == 6910053 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6910053LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_100040078(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000400B8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100040118 + 4 * byte_10008FCC6[a2]))(0x2D746E65746E6F63LL);
}

uint64_t sub_100040118(uint64_t a1)
{
  if (a1 == 0x2D746E65746E6F63LL && v1 == 0xEA00000000006469LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x2D746E65746E6F63LL, 0xEA00000000006469LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006469LL);
  return v2 & 1;
}

void sub_1000401BC(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000401F4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100040244 + 4 * byte_10008FCCF[a2]))(30311LL);
}

uint64_t sub_100040244(uint64_t a1)
{
  if (a1 == 30311 && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 30311LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_1000402D8(void *a1)
{
  char v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B0BE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100043294();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v22 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v21, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100040414(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003F67C(*a1, *a2);
}

Swift::Int sub_100040420()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE100000000000000LL;
  uint64_t v3 = 110LL;
  if (v1 != 1)
  {
    uint64_t v3 = 6580579LL;
    unint64_t v2 = 0xE300000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 104LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE100000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000404A0(uint64_t a1)
{
  unint64_t v2 = 0xE100000000000000LL;
  uint64_t v3 = 110LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 6580579LL;
    unint64_t v2 = 0xE300000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 104LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE100000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000404FC(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE100000000000000LL;
  uint64_t v4 = 110LL;
  if (v2 != 1)
  {
    uint64_t v4 = 6580579LL;
    unint64_t v3 = 0xE300000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 104LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE100000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100040578@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1000A3770;
  unint64_t result = sub_1000426DC(*a1, v3);
  *a2 = result;
  return result;
}

void sub_1000405AC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000LL;
  unint64_t v4 = 0xE100000000000000LL;
  uint64_t v5 = 110LL;
  if (v2 != 1)
  {
    uint64_t v5 = 6580579LL;
    unint64_t v4 = 0xE300000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 104LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000405EC()
{
  uint64_t v1 = 110LL;
  if (*v0 != 1) {
    uint64_t v1 = 6580579LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 104LL;
  }
}

unint64_t sub_100040628@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1000A3770;
  unint64_t result = sub_1000426DC(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100040654(uint64_t a1)
{
  unint64_t v2 = sub_100043294();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004067C(uint64_t a1)
{
  unint64_t v2 = sub_100043294();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1000406A4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1000406E4(void *a1)
{
  return sub_1000402D8(a1);
}

uint64_t sub_1000406F8(char *a1, char *a2)
{
  return sub_10003F5EC(*a1, *a2);
}

Swift::Int sub_100040704()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    uint64_t v2 = 1868985701LL;
  }
  else {
    uint64_t v2 = 118LL;
  }
  if (v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE100000000000000LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100040770(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 1868985701LL;
  }
  else {
    uint64_t v2 = 118LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  else {
    unint64_t v3 = 0xE100000000000000LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1000407B8(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    uint64_t v3 = 1868985701LL;
  }
  else {
    uint64_t v3 = 118LL;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE100000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100040820@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  unint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A37D8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10004087C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 118LL;
  if (*v1) {
    uint64_t v2 = 1868985701LL;
  }
  unint64_t v3 = 0xE100000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1000408A8()
{
  if (*v0) {
    return 1868985701LL;
  }
  else {
    return 118LL;
  }
}

uint64_t sub_1000408D0@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A37D8, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100040930(uint64_t a1)
{
  unint64_t v2 = sub_100040B08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040958(uint64_t a1)
{
  unint64_t v2 = sub_100040B08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EmergencySOSChatSessionCloseDictionary.encode(to:)(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B0B60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100040B08();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys,  &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v18[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12);
  if (!v2)
  {
    __int128 v13 = *(_OWORD *)(v3 + 3);
    __int128 v19 = *(_OWORD *)(v3 + 1);
    __int128 v20 = v13;
    __int128 v21 = *(_OWORD *)(v3 + 5);
    __int128 v24 = v21;
    sub_100040B4C((uint64_t)&v20, (uint64_t)v23);
    sub_100040B4C((uint64_t)&v19, (uint64_t)v22);
    v18[0] = v19;
    v18[1] = v20;
    void v18[2] = v21;
    char v17 = 1;
    sub_100040B94(v3);
    unint64_t v14 = sub_100040BDC();
    KeyedEncodingContainer.encode<A>(_:forKey:)( v18,  &v17,  v5,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary,  v14);
    sub_100012E60((uint64_t)v22);
    sub_100012E60((uint64_t)v23);
    sub_100012E60((uint64_t)&v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100040B08()
{
  unint64_t result = qword_1000B0B68;
  if (!qword_1000B0B68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009009C, &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0B68);
  }

  return result;
}

uint64_t sub_100040B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000AFF68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100040B94(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[6];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  return a1;
}

unint64_t sub_100040BDC()
{
  unint64_t result = qword_1000B0B70;
  if (!qword_1000B0B70)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090074,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0B70);
  }

  return result;
}

double EmergencySOSChatSessionCloseDictionary.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v8;
  }

  return result;
}

uint64_t sub_100040C6C(void *a1)
{
  return EmergencySOSChatSessionCloseDictionary.encode(to:)(a1);
}

uint64_t sub_100040CAC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10003FA48(*a1, *a2);
}

Swift::Int sub_100040CB8()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v7, 0LL);
  unint64_t v2 = 0xE300000000000000LL;
  uint64_t v3 = 4475235LL;
  if (v1 != 1)
  {
    uint64_t v3 = 25444LL;
    unint64_t v2 = 0xE200000000000000LL;
  }

  if (v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 22131LL;
  }
  if (v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE200000000000000LL;
  }
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100040D38(uint64_t a1)
{
  unint64_t v2 = 0xE300000000000000LL;
  uint64_t v3 = 4475235LL;
  if (*v1 != 1)
  {
    uint64_t v3 = 25444LL;
    unint64_t v2 = 0xE200000000000000LL;
  }

  if (*v1) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 22131LL;
  }
  if (*v1) {
    unint64_t v5 = v2;
  }
  else {
    unint64_t v5 = 0xE200000000000000LL;
  }
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100040D94(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v3 = 0xE300000000000000LL;
  uint64_t v4 = 4475235LL;
  if (v2 != 1)
  {
    uint64_t v4 = 25444LL;
    unint64_t v3 = 0xE200000000000000LL;
  }

  if (v2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 22131LL;
  }
  if (v2) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xE200000000000000LL;
  }
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_100040E10@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1000A3828;
  unint64_t result = sub_1000426DC(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100040E44(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000LL;
  unint64_t v4 = 0xE300000000000000LL;
  uint64_t v5 = 4475235LL;
  if (v2 != 1)
  {
    uint64_t v5 = 25444LL;
    unint64_t v4 = 0xE200000000000000LL;
  }

  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 22131LL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100040E84()
{
  uint64_t v1 = 4475235LL;
  if (*v0 != 1) {
    uint64_t v1 = 25444LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 22131LL;
  }
}

unint64_t sub_100040EC0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1000A3828;
  unint64_t result = sub_1000426DC(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_100040EEC(uint64_t a1)
{
  unint64_t v2 = sub_100042698();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100040F14(uint64_t a1)
{
  unint64_t v2 = sub_100042698();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BusinessChatSessionCloseDictionary.encode(to:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v9 = sub_10000E624(&qword_1000B0B78);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_10000FFDC(a1, v14);
  unint64_t v15 = sub_100042698();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BusinessChatSessionCloseDictionary.CodingKeys,  &type metadata for BusinessChatSessionCloseDictionary.CodingKeys,  v15,  v14,  v13);
  v20[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v5)
  {
    v20[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v20, v9);
    char v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a5 & 1, &v19, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t BusinessChatSessionCloseDictionary.init(from:)(void *a1)
{
  uint64_t result = sub_100042720(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_1000410B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100042720(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }

  return result;
}

uint64_t sub_1000410E4(void *a1)
{
  return BusinessChatSessionCloseDictionary.encode(to:)( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(void *)(v1 + 16),  *(_BYTE *)(v1 + 24));
}

uint64_t sub_100041104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v42 = a1;
  void v37[9] = a3;
  uint64_t v38 = type metadata accessor for DecodingError(0LL);
  uint64_t v41 = *(void *)(v38 - 8);
  uint64_t v3 = __chkstk_darwin(v38);
  v37[12] = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v37[10] = (char *)v37 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v39 = (char *)v37 - v8;
  __chkstk_darwin(v7);
  v37[11] = (char *)v37 - v9;
  uint64_t v10 = type metadata accessor for Metadata(0LL);
  __chkstk_darwin(v10);
  v37[8] = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  uint64_t v12 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Explosion(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  char v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  uint64_t v24 = PropertyListDecoder.init()();
  uint64_t v25 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  uint64_t v26 = v44;
  uint64_t v27 = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v19, v42, v43, v19, v25);
  if (v26) {
    return swift_release(v24);
  }
  uint64_t v44 = v19;
  v37[6] = v14;
  v37[7] = v12;
  v37[2] = 0LL;
  v37[4] = v18;
  v37[3] = v16;
  uint64_t v43 = v20;
  uint64_t v29 = TopLevelDictionary.decryptedData.getter(v27);
  if (v30 >> 60 != 15)
  {
    v37[1] = v29;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v34 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
    uint64_t v36 = v35;

    v37[5] = v36;
    __asm { BR              X10 }
  }

  unint64_t v31 = sub_100043188();
  uint64_t v32 = swift_allocError(&type metadata for ChatSessionCloseUnpacker.EncryptedMessageMissingData, v31, 0LL, 0LL);
  swift_willThrow(v32);
  swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v22, v44);
}

uint64_t sub_100042118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100041104(a1, a2, a3);
}

uint64_t sub_10004212C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v11 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_22;
    }

    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v15 >= v24) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v15 + 1;
      if (v15 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v15 + 2;
        if (v15 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v11);
        if (!v16)
        {
          int64_t v11 = v15 + 3;
          if (v15 + 3 >= v24) {
            goto LABEL_25;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v11);
          if (!v16)
          {
            int64_t v17 = v15 + 4;
            if (v17 >= v24)
            {
LABEL_25:
              swift_release(a1);
              return 0LL;
            }

            unint64_t v16 = *(void *)(v6 + 8 * v17);
            int64_t v11 = v17;
            if (!v16) {
              break;
            }
          }
        }
      }
    }

LABEL_27:
  __break(1u);
  return result;
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    char v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      int64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100042338@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0BF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100043294();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  char v26 = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v5);
  uint64_t v14 = v13;
  char v25 = 1;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v25, v5);
  uint64_t v23 = v15;
  char v24 = 2;
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  int64_t v17 = v8;
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  uint64_t result = sub_100010D60(a1);
  *a2 = v12;
  a2[1] = v14;
  uint64_t v21 = v23;
  a2[2] = v22;
  a2[3] = v21;
  a2[4] = v16;
  a2[5] = v19;
  return result;
}

uint64_t sub_100042508@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0C00);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100040B08();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys,  &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  LOBYTE(v19[0]) = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(v19, v5);
  char v22 = 1;
  unint64_t v13 = sub_1000432D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v19,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary,  &v22,  v5,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary,  v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __int128 v17 = v19[1];
  __int128 v18 = v19[0];
  uint64_t v14 = v20;
  uint64_t v15 = v21;
  uint64_t result = sub_100010D60(a1);
  *(void *)a2 = v12;
  *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = v18;
  *(_OWORD *)(a2 + 24) = v17;
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v15;
  return result;
}

unint64_t sub_100042698()
{
  unint64_t result = qword_1000B0B80;
  if (!qword_1000B0B80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090024, &type metadata for BusinessChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0B80);
  }

  return result;
}

unint64_t sub_1000426DC(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3) {
    return 3LL;
  }
  else {
    return v5;
  }
}

uint64_t sub_100042720(void *a1)
{
  uint64_t v3 = sub_10000E624(&qword_1000B0BF8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10000FFDC(a1, v7);
  unint64_t v9 = sub_100042698();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BusinessChatSessionCloseDictionary.CodingKeys,  &type metadata for BusinessChatSessionCloseDictionary.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100010D60(a1);
  }

  else
  {
    char v16 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
    char v15 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    uint64_t v12 = v11;
    char v14 = 2;
    swift_bridgeObjectRetain(v11);
    KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010D60(a1);
    swift_bridgeObjectRelease(v12);
  }

  return v7;
}

uint64_t destroy for EmergencySOSChatSessionCloseDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for EmergencySOSChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

void *assignWithCopy for EmergencySOSChatSessionCloseDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  uint64_t v8 = a2[6];
  uint64_t v9 = a1[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for EmergencySOSChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EmergencySOSChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencySOSChatSessionCloseDictionary(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencySOSChatSessionCloseDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 4_Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EmergencySOSChatSessionCloseDictionary()
{
  return &type metadata for EmergencySOSChatSessionCloseDictionary;
}

uint64_t destroy for BusinessChatSessionCloseDictionary(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for BusinessChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for BusinessChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for BusinessChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BusinessChatSessionCloseDictionary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for BusinessChatSessionCloseDictionary(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BusinessChatSessionCloseDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BusinessChatSessionCloseDictionary()
{
  return &type metadata for BusinessChatSessionCloseDictionary;
}

ValueMetadata *type metadata accessor for BusinessChatSessionCloseDictionary.CodingKeys()
{
  return &type metadata for BusinessChatSessionCloseDictionary.CodingKeys;
}

uint64_t destroy for EmergencySOSChatSessionCloseDictionary.EufoDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[5]);
}

void *initializeWithCopy for EmergencySOSChatSessionCloseDictionary.EufoDictionary(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for EmergencySOSChatSessionCloseDictionary.EufoDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for EmergencySOSChatSessionCloseDictionary.EufoDictionary(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencySOSChatSessionCloseDictionary.EufoDictionary( uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencySOSChatSessionCloseDictionary.EufoDictionary( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_Block_object_dispose(va, 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for EmergencySOSChatSessionCloseDictionary.EufoDictionary()
{
  return &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary;
}

uint64_t storeEnumTagSinglePayload for EmergencySOSChatSessionCloseDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100042F1C + 4 * byte_10008FCD9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100042F50 + 4 * byte_10008FCD4[v4]))();
}

uint64_t sub_100042F50(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100042F58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100042F60LL);
  }
  return result;
}

uint64_t sub_100042F6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100042F74LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_100042F78(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100042F80(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmergencySOSChatSessionCloseDictionary.CodingKeys()
{
  return &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys;
}

ValueMetadata *type metadata accessor for ChatSessionCloseUnpacker()
{
  return &type metadata for ChatSessionCloseUnpacker;
}

unint64_t sub_100042FB0()
{
  unint64_t result = qword_1000B0B88;
  if (!qword_1000B0B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FEE4, &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0B88);
  }

  return result;
}

unint64_t sub_100042FF8()
{
  unint64_t result = qword_1000B0B90;
  if (!qword_1000B0B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FFFC, &type metadata for BusinessChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0B90);
  }

  return result;
}

unint64_t sub_100043040()
{
  unint64_t result = qword_1000B0B98;
  if (!qword_1000B0B98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FF34, &type metadata for BusinessChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0B98);
  }

  return result;
}

unint64_t sub_100043088()
{
  unint64_t result = qword_1000B0BA0;
  if (!qword_1000B0BA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FF5C, &type metadata for BusinessChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0BA0);
  }

  return result;
}

unint64_t sub_1000430D0()
{
  unint64_t result = qword_1000B0BA8;
  if (!qword_1000B0BA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FE1C, &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0BA8);
  }

  return result;
}

unint64_t sub_100043118()
{
  unint64_t result = qword_1000B0BB0;
  if (!qword_1000B0BB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008FE44, &type metadata for EmergencySOSChatSessionCloseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0BB0);
  }

  return result;
}

uint64_t sub_10004315C()
{
  return sub_10000E9D8( &qword_1000B0BB8,  (uint64_t (*)(uint64_t))&type metadata accessor for ChatSessionClose,  (uint64_t)&protocol conformance descriptor for ChatSessionClose);
}

unint64_t sub_100043188()
{
  unint64_t result = qword_1000B0BC0;
  if (!qword_1000B0BC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10009028C,  &type metadata for ChatSessionCloseUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000B0BC0);
  }

  return result;
}

unint64_t sub_1000431CC()
{
  unint64_t result = qword_1000B0BC8;
  if (!qword_1000B0BC8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BusinessChatSessionCloseDictionary,  &type metadata for BusinessChatSessionCloseDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0BC8);
  }

  return result;
}

unint64_t sub_100043210()
{
  unint64_t result = qword_1000B0BD0;
  if (!qword_1000B0BD0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for EmergencySOSChatSessionCloseDictionary,  &type metadata for EmergencySOSChatSessionCloseDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0BD0);
  }

  return result;
}

uint64_t sub_100043254(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000B0BD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100043294()
{
  unint64_t result = qword_1000B0BE8;
  if (!qword_1000B0BE8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10009023C,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0BE8);
  }

  return result;
}

unint64_t sub_1000432D8()
{
  unint64_t result = qword_1000B0C08;
  if (!qword_1000B0C08)
  {
    unint64_t result = swift_getWitnessTable( &unk_10008FF0C,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0C08);
  }

  return result;
}

uint64_t _s24MessagesBlastDoorService34BusinessChatSessionCloseDictionaryV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100043368 + 4 * byte_10008FCE3[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10004339C + 4 * byte_10008FCDE[v4]))();
}

uint64_t sub_10004339C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000433A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000433ACLL);
  }
  return result;
}

uint64_t sub_1000433B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000433C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000433C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000433CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys()
{
  return &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys;
}

ValueMetadata *type metadata accessor for ChatSessionCloseUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for ChatSessionCloseUnpacker.EncryptedMessageMissingData;
}

unint64_t sub_1000433FC()
{
  unint64_t result = qword_1000B0C10;
  if (!qword_1000B0C10)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090214,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0C10);
  }

  return result;
}

unint64_t sub_100043444()
{
  unint64_t result = qword_1000B0C18;
  if (!qword_1000B0C18)
  {
    unint64_t result = swift_getWitnessTable( &unk_10009014C,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0C18);
  }

  return result;
}

unint64_t sub_10004348C()
{
  unint64_t result = qword_1000B0C20;
  if (!qword_1000B0C20)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090174,  &type metadata for EmergencySOSChatSessionCloseDictionary.EufoDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0C20);
  }

  return result;
}

ValueMetadata *type metadata accessor for AnimatedImageUnpacker()
{
  return &type metadata for AnimatedImageUnpacker;
}

uint64_t sub_1000434EC()
{
  return sub_10000E9D8( &qword_1000B0C28,  (uint64_t (*)(uint64_t))&type metadata accessor for AnimatedImageFrame,  (uint64_t)&protocol conformance descriptor for AnimatedImageFrame);
}

uint64_t sub_100043518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_100044E8C(a1);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_1000A6B20, 32LL, 7LL);
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    __int128 v18 = v20;
    _BYTE v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    __int128 v18 = 0LL;
  }

  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1000B0C60, v17);
}

uint64_t sub_10004365C@<X0>(uint8_t *a1@<X0>, uint8_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v4 = sub_10000E624(&qword_1000B0C30);
  uint64_t v38 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Path(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for File(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for BlastDoorServer(0LL);
  uint64_t v14 = static BlastDoorServer.disableRawDecoding()();
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  sub_100012C44();
  unsigned __int8 v16 = (os_log_s *)static OS_os_log.animatedImage.getter();
  uint64_t v17 = *(void (**)(char *, uint8_t *, uint64_t))(v11 + 16);
  uint64_t v37 = a1;
  v17(v13, a1, v10);
  if (os_log_type_enabled(v16, v15))
  {
    __int128 v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v19;
    uint64_t v42 = v19;
    uint64_t v34 = v4;
    *(_DWORD *)__int128 v18 = 136446210;
    unint64_t v31 = v18 + 4;
    uint64_t v20 = File.path.getter(v19);
    uint64_t v21 = Path.absolutePath.getter(v20);
    uint64_t v33 = v6;
    unint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v36);
    uint64_t v41 = sub_100014C84(v21, v23, &v42);
    uint64_t v4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v31, v18 + 12);
    unint64_t v24 = v23;
    uint64_t v6 = v33;
    __n128 v25 = swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v13, v10, v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v15, "Unpacking animated image at path %{public}s", v18, 0xCu);
    uint64_t v26 = v32;
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {

    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  __chkstk_darwin(v27);
  uint64_t v28 = v39;
  *(&v31 - 2) = v37;
  *(&v31 - 1) = v28;
  uint64_t v29 = sub_10000E624(&qword_1000B0C38);
  (*(void (**)(char *, void, uint64_t))(v38 + 104))( v6,  enum case for AsyncThrowingStream.Continuation.BufferingPolicy.unbounded<A, B>(_:),  v4);
  return AsyncThrowingStream.init<>(_:bufferingPolicy:_:)(v29, v6, sub_100044CA0, &v31 - 4, v29);
}

uint64_t sub_100043968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v31 = a2;
  uint64_t v35 = sub_10000E624(&qword_1000B0C40);
  uint64_t v32 = *(void *)(v35 - 8);
  uint64_t v3 = *(void *)(v32 + 64);
  __chkstk_darwin(v35);
  unint64_t v30 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for AnimatedImageFrame.Constraints(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for File(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000E624(&qword_1000B0288);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v31, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v33,  v4);
  uint64_t v15 = v32;
  unsigned __int8 v16 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v30, v34, v35);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = (v17 + 32) & ~v17;
  uint64_t v19 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v20 = (v9 + v19 + v18) & ~v19;
  uint64_t v21 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v22 = (v6 + v21 + v20) & ~v21;
  uint64_t v23 = swift_allocObject(&unk_1000A6AF8, v22 + v3, v17 | v19 | v21 | 7);
  *(void *)(v23 + 16) = 0LL;
  *(void *)(v23 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v23 + v18, v10, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v23 + v20, v29, v28);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v23 + v22, v16, v35);
  uint64_t v24 = sub_100043518((uint64_t)v13, (uint64_t)&unk_1000B0C50, v23);
  return swift_release(v24);
}

uint64_t sub_100043BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  uint64_t v7 = type metadata accessor for AnimatedImageFrame.Constraints(0LL);
  v6[20] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[21] = v8;
  v6[22] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000AFFE0);
  v6[23] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Image(0LL);
  v6[24] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[25] = v11;
  v6[26] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Path(0LL);
  v6[27] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v6[28] = v13;
  v6[29] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for URL(0LL);
  v6[30] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v6[31] = v15;
  v6[32] = swift_task_alloc((*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for File(0LL);
  v6[33] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v6[34] = v17;
  v6[35] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100043CD4, 0LL, 0LL);
}

uint64_t sub_100043CD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v4 = *(void *)(v1 + 272);
  uint64_t v3 = *(void **)(v1 + 280);
  uint64_t v5 = *(void *)(v1 + 264);
  os_log_type_t v6 = static os_log_type_t.info.getter(a1);
  sub_100012C44();
  uint64_t v7 = (os_log_s *)static OS_os_log.animatedImage.getter();
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v4 + 16);
  v8(v3, v2, v5);
  os_log_type_t v9 = v6;
  uint64_t v81 = v8;
  if (os_log_type_enabled(v7, v6))
  {
    uint64_t v10 = *(void *)(v1 + 256);
    uint64_t v79 = *(void *)(v1 + 272);
    uint64_t v80 = *(void *)(v1 + 264);
    uint64_t v76 = *(void *)(v1 + 280);
    uint64_t v77 = *(void *)(v1 + 248);
    uint64_t v11 = *(void *)(v1 + 232);
    uint64_t v12 = *(void *)(v1 + 240);
    uint64_t v74 = *(void *)(v1 + 224);
    uint64_t v75 = *(void *)(v1 + 216);
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v78 = swift_slowAlloc(32LL, -1LL);
    uint64_t v83 = v78;
    *(_DWORD *)uint64_t v13 = 136446210;
    uint64_t v14 = File.path.getter(v78);
    Path.fileURL.getter(v14);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v11, v75);
    uint64_t v15 = sub_10000E9D8( &qword_1000B0278,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    unint64_t v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v10, v12);
    *(void *)(v1 + 12_Block_object_dispose(va, 8) = sub_100014C84(v16, v18, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v13 + 4, v13 + 12);
    __n128 v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(uint64_t, uint64_t, __n128))(v79 + 8))(v76, v80, v19);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Task running for animated image: %{public}s)", v13, 0xCu);
    swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    uint64_t v22 = *(void *)(v1 + 272);
    uint64_t v21 = *(void *)(v1 + 280);
    uint64_t v23 = *(void *)(v1 + 264);

    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }

  uint64_t v24 = AnimatedImageFrame.Constraints.maxCount.getter(v20);
  if (v24 <= 5000)
  {
    uint64_t v38 = *(void *)(v1 + 264);
    uint64_t v39 = *(void *)(v1 + 184);
    uint64_t v40 = *(void *)(v1 + 136);
    *(void *)(v1 + 40) = v38;
    *(void *)(v1 + 4_Block_object_dispose(va, 8) = &protocol witness table for File;
    __int128 v82 = *(_OWORD *)(v1 + 144);
    uint64_t v41 = sub_10001FA94((void *)(v1 + 16));
    uint64_t v42 = v81(v41, v40, v38);
    uint64_t v43 = AnimatedImageFrame.Constraints.maxPixelDimension.getter(v42);
    uint64_t v44 = type metadata accessor for Image.Encoding(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v39, 1LL, 1LL, v44);
    uint64_t v45 = Image.init(provider:maxPixelDimension:enforcedEncoding:)(v1 + 16, v43, 0LL, v39);
    Image.provider.getter((void *)(v1 + 56), v45);
    uint64_t v46 = *(void *)(v1 + 80);
    uint64_t v47 = *(void *)(v1 + 88);
    sub_10000FFDC((void *)(v1 + 56), v46);
    uint64_t v48 = swift_task_alloc(32LL);
    *(_OWORD *)(v48 + 16) = v82;
    uint64_t v49 = swift_task_alloc(32LL);
    *(void *)(v49 + 16) = sub_100044F60;
    *(void *)(v49 + 24) = v48;
    ImageProvider.withImageSource<A>(_:)( (void *)(v1 + 288),  sub_100044F78,  v49,  v46,  (char *)&type metadata for () + 8,  v47);
    (*(void (**)(void, void))(*(void *)(v1 + 200) + 8LL))(*(void *)(v1 + 208), *(void *)(v1 + 192));
    swift_task_dealloc(v49);
    swift_task_dealloc(v48);
    sub_100010D60((void *)(v1 + 56));
  }

  else
  {
    uint64_t v25 = *(void *)(v1 + 168);
    uint64_t v26 = *(void *)(v1 + 176);
    uint64_t v27 = *(void *)(v1 + 160);
    uint64_t v28 = *(void *)(v1 + 144);
    os_log_type_t v29 = static os_log_type_t.info.getter(v24);
    unint64_t v30 = (os_log_s *)static OS_os_log.animatedImage.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v26, v28, v27);
    os_log_type_t v31 = v29;
    BOOL v32 = os_log_type_enabled(v30, v29);
    uint64_t v34 = *(void *)(v1 + 168);
    uint64_t v33 = *(void *)(v1 + 176);
    uint64_t v35 = *(void *)(v1 + 160);
    if (v32)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v36 = 134349056;
      uint64_t v37 = AnimatedImageFrame.Constraints.maxCount.getter(v36);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      *(void *)(v1 + 120) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v36 + 4, v36 + 12);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "context.maxCount too large: %{public}ld)", v36, 0xCu);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v34 + 8))(*(void *)(v1 + 176), *(void *)(v1 + 160));
    }

    uint64_t v83 = 40LL;
    unint64_t v84 = 0xE100000000000000LL;
    *(void *)(v1 + 112) = AnimatedImageFrame.Constraints.maxCount.getter(v50);
    v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v51._object;
    String.append(_:)(v51);
    swift_bridgeObjectRelease(object);
    uint64_t v53 = v83;
    unint64_t v54 = v84;
    uint64_t v55 = type metadata accessor for Explosion(0LL);
    uint64_t v56 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    uint64_t v57 = swift_allocError(v55, v56, 0LL, 0LL);
    uint64_t v58 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B610LL,  0xD000000000000015LL,  0x800000010008B640LL,  v53,  v54);
    uint64_t v59 = swift_willThrow(v58);
    uint64_t v60 = v1 + 104;
    os_log_type_t v61 = static os_log_type_t.error.getter(v59);
    __int128 v62 = (os_log_s *)static OS_os_log.animatedImage.getter();
    if (os_log_type_enabled(v62, v61))
    {
      swift_errorRetain(v57);
      swift_errorRetain(v57);
      __int128 v63 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      unint64_t v64 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)__int128 v63 = 138412290;
      swift_errorRetain(v57);
      uint64_t v65 = _swift_stdlib_bridgeErrorToNSError(v57);
      *(void *)(v1 + 96) = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v63 + 4, v63 + 12);
      *unint64_t v64 = v65;
      uint64_t v60 = v1 + 104;
      swift_errorRelease(v57);
      swift_errorRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v62, v61, "Caught error: %@", v63, 0xCu);
      uint64_t v66 = sub_10000E624(&qword_1000AFFE8);
      swift_arrayDestroy(v64, 1LL, v66);
      swift_slowDealloc(v64, -1LL, -1LL);
      swift_slowDealloc(v63, -1LL, -1LL);
    }

    *(void *)(v1 + 104) = v57;
    uint64_t v67 = sub_10000E624(&qword_1000B0C40);
    AsyncThrowingStream.Continuation.finish(throwing:)(v60, v67);
  }

  uint64_t v68 = *(void *)(v1 + 256);
  uint64_t v69 = *(void *)(v1 + 232);
  uint64_t v70 = *(void *)(v1 + 208);
  uint64_t v72 = *(void *)(v1 + 176);
  uint64_t v71 = *(void *)(v1 + 184);
  swift_task_dealloc(*(void *)(v1 + 280));
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000443D8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v105 = a2;
  uint64_t v7 = sub_10000E624(&qword_1000B0C38);
  __chkstk_darwin(v7);
  uint64_t v96 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_10000E624(&qword_1000B0C68);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  char v93 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for StickerEffect(0LL);
  uint64_t v101 = *(void *)(v10 - 8);
  uint64_t v102 = v10;
  __chkstk_darwin(v10);
  uint64_t v100 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v12);
  uint64_t v99 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Image(0LL);
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for AnimatedImageFrame(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v92 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v109 = (char *)&v85 - v20;
  uint64_t v21 = type metadata accessor for ImageProperties(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v97 = (char *)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v85 - v26;
  os_log_type_t v103 = a1;
  uint64_t v28 = CGImageSourceRef.imageProperties()(v25);
  uint64_t v29 = ImageProperties.utTypeString.getter(v28);
  if (!v30)
  {
LABEL_21:
    uint64_t v79 = type metadata accessor for Explosion(0LL);
    uint64_t v80 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v79, v80, 0LL, 0LL);
    uint64_t v81 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B610LL,  0xD000000000000012LL,  0x800000010008B680LL,  0xD000000000000014LL,  0x800000010008B6E0LL);
    swift_willThrow(v81);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v21);
    return;
  }

  uint64_t v31 = v29;
  uint64_t v32 = v30;
  uint64_t v104 = v22;
  if ((sub_100068A48(v29, v30) & 1) == 0)
  {
    uint64_t v82 = type metadata accessor for Explosion(0LL);
    uint64_t v83 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v82, v83, 0LL, 0LL);
    uint64_t v84 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B610LL,  0xD000000000000011LL,  0x800000010008B660LL,  v31,  v32);
    swift_willThrow(v84);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v27, v21);
    return;
  }

  uint64_t v90 = v31;
  uint64_t v88 = a3;
  uint64_t v33 = ((uint64_t (*)(void))AnimatedImageFrame.Constraints.maxCount.getter)();
  uint64_t v34 = v33 - 1;
  if (__OFSUB__(v33, 1LL))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v35 = ((uint64_t (*)(void))ImageProperties.frameCount.getter)();
  uint64_t v36 = v35 - 1;
  if (!__OFSUB__(v35, 1LL))
  {
    if (v36 >= v34) {
      uint64_t v36 = v34;
    }
    uint64_t v87 = v36;
    if (v36 < 0) {
      goto LABEL_30;
    }
    uint64_t v91 = v32;
    uint64_t v37 = 0LL;
    unsigned int v89 = enum case for StickerEffect.none(_:);
    unint64_t v107 = v27;
    uint64_t v108 = v21;
    while (1)
    {
      uint64_t v38 = ((uint64_t (*)(void))ImageProperties.frameCount.getter)();
      uint64_t v39 = ((uint64_t (*)(void))AnimatedImageFrame.Constraints.maxCount.getter)();
      uint64_t v40 = sub_100044FA4(v37, v38, v39);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v104 + 8))(v27, v108);
LABEL_25:
        swift_bridgeObjectRelease(v91);
        return;
      }

      uint64_t v42 = v40;
      uint64_t v43 = v41;
      uint64_t v44 = swift_allocObject(&unk_1000A6B48, 24LL, 7LL);
      uint64_t v45 = v103;
      *(void *)(v44 + 16) = v103;
      v45;
      animatedDelayTime(with:body:)(v42, v43, sub_10004520C, v44);
      uint64_t v47 = v46;
      uint64_t v110 = v37;
      uint64_t v48 = swift_release(v44);
      uint64_t v49 = AnimatedImageFrame.Constraints.maxPixelDimension.getter(v48);
      uint64_t v50 = CGImageSourceRef.thumbnailImage(maxPixelDimension:imageIndex:)(v43, (double)v49);
      uint64_t v51 = v108;
      uint64_t v52 = v50;
      type metadata accessor for CGImage(0LL);
      v111[3] = v53;
      v111[4] = &protocol witness table for CGImageRef;
      v111[0] = v52;
      uint64_t v54 = type metadata accessor for Image.Encoding(0LL);
      uint64_t v55 = v99;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))(v99, 1LL, 1LL, v54);
      uint64_t v56 = v98;
      Image.init(provider:maxPixelDimension:enforcedEncoding:)(v111, 0LL, 1LL, v55);
      uint64_t v57 = v100;
      (*(void (**)(char *, void, uint64_t))(v101 + 104))(v100, v89, v102);
      uint64_t v58 = v91;
      swift_bridgeObjectRetain(v91);
      uint64_t v59 = AnimatedImageFrame.init(image:frameDuration:isScreenshot:stickerEffect:utTypeString:isMonoskiAsset:alignmentInset:)( v56,  v47,  0LL,  0LL,  v57,  v90,  v58,  0LL,  0.0,  0.0);
      uint64_t v60 = AnimatedImageFrame.Constraints.maxCount.getter(v59);
      uint64_t v61 = v60 - 1;
      if (__OFSUB__(v60, 1LL)) {
        break;
      }
      uint64_t v62 = v104;
      __int128 v63 = v97;
      uint64_t v64 = (*(uint64_t (**)(char *, char *, uint64_t))(v104 + 16))(v97, v107, v51);
      uint64_t v106 = 0LL;
      if (v110 >= v61)
      {
        uint64_t v86 = *(void (**)(char *, uint64_t))(v62 + 8);
        v86(v63, v51);
        BOOL v67 = 1LL;
      }

      else
      {
        uint64_t v65 = ImageProperties.frameCount.getter(v64);
        uint64_t v66 = *(void (**)(char *, uint64_t))(v62 + 8);
        v66(v63, v51);
        if (__OFSUB__(v65, 1LL)) {
          goto LABEL_27;
        }
        uint64_t v86 = v66;
        BOOL v67 = v43 >= v65 - 1;
      }

      uint64_t v68 = v92;
      uint64_t v69 = v109;
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v92, v109, v16);
      uint64_t v70 = sub_10000E9D8( &qword_1000B0C70,  (uint64_t (*)(uint64_t))&type metadata accessor for AnimatedImageFrame,  (uint64_t)&protocol conformance descriptor for AnimatedImageFrame);
      uint64_t v71 = v96;
      SessionSchemaResult.init(_:lastResult:)(v68, v67, v16, v70);
      uint64_t v72 = sub_10000E624(&qword_1000B0C40);
      uint64_t v73 = v93;
      AsyncThrowingStream.Continuation.yield(_:)(v71, v72);
      uint64_t v74 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v73, v95);
      uint64_t v75 = v110;
      if (v67)
      {
        uint64_t v76 = static os_log_type_t.info.getter(v74);
        sub_100012C44();
        uint64_t v77 = (void *)static OS_os_log.animatedImage.getter();
        os_log(_:dso:log:_:_:)( v76,  &_mh_execute_header,  v77,  "Last frame, finishing continuation",  34LL,  2LL,  &_swiftEmptyArrayStorage);

        v111[0] = 0LL;
        AsyncThrowingStream.Continuation.finish(throwing:)(v111, v72);
      }

      (*(void (**)(char *, uint64_t))(v17 + 8))(v69, v16);
      uint64_t v27 = v107;
      uint64_t v21 = v108;
      uint64_t v4 = v106;
      if (v87 == v75)
      {
        v86(v107, v108);
        goto LABEL_25;
      }

      BOOL v78 = __OFADD__(v75, 1LL);
      uint64_t v37 = v75 + 1;
      uint64_t v22 = v105;
      if (v78)
      {
        __break(1u);
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

uint64_t sub_100044BF0(uint64_t a1, int *a2)
{
  os_log_type_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100044C54;
  return v6(a1);
}

uint64_t sub_100044C54()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100044CA0(uint64_t a1)
{
  return sub_100043968(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100044CA8()
{
  uint64_t v17 = type metadata accessor for File(0LL);
  uint64_t v1 = *(void *)(v17 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v16 = type metadata accessor for AnimatedImageFrame.Constraints(0LL);
  uint64_t v5 = *(void *)(v16 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v4 + v6) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = sub_10000E624(&qword_1000B0C40);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v15 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v2 | v6 | v11 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v17);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v16);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v15, v13);
}

uint64_t sub_100044DAC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for File(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for AnimatedImageFrame.Constraints(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(sub_10000E624(&qword_1000B0C40) - 8) + 80LL);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v5;
  uint64_t v15 = v1 + v8;
  uint64_t v16 = v1 + (v11 & ~v10);
  uint64_t v17 = (void *)swift_task_alloc(dword_1000B0C4C);
  *(void *)(v2 + 16) = v17;
  void *v17 = v2;
  v17[1] = sub_100029D04;
  return sub_100043BAC(a1, v12, v13, v14, v15, v16);
}

uint64_t sub_100044E8C(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000B0288);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100044ECC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100044EF0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc(dword_1000B0C5C);
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_100029D04;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1000B0C58 + dword_1000B0C58))(a1, v4);
}

void sub_100044F60(void *a1)
{
}

uint64_t sub_100044F78@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  if (!v2) {
    *a1 = 0;
  }
  return result;
}

uint64_t sub_100044FA4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 < result)
  {
    uint64_t v3 = type metadata accessor for Explosion(0LL);
    uint64_t v4 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v3, v4, 0LL, 0LL);
    unint64_t v5 = 0xD000000000000013LL;
    uint64_t v6 = "indexOutOfBoundsMax";
LABEL_13:
    uint64_t v13 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B610LL,  v5,  (unint64_t)(v6 - 32) | 0x8000000000000000LL,  0x4977656976657270LL,  0xEC0000007865646ELL);
    return swift_willThrow(v13);
  }

  uint64_t v7 = result;
  if (result >= a2)
  {
    uint64_t v11 = type metadata accessor for Explosion(0LL);
    uint64_t v12 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v11, v12, 0LL, 0LL);
    unint64_t v5 = 0xD000000000000010LL;
    uint64_t v6 = "indexOutOfBounds";
    goto LABEL_13;
  }

  if (a3 >= a2) {
    return result;
  }
  double v8 = (double)a2 / (double)a3;
  double v9 = v8 * (double)result;
  if ((~*(void *)&v9 & 0x7FF0000000000000LL) == 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  if (v9 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  if (v9 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v10 = (uint64_t)v9 + 1;
  if (__OFADD__((uint64_t)v9, 1LL))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t result = a2 - 1;
  if (!v7)
  {
    if (a2 < 1) {
      goto LABEL_19;
    }
    uint64_t v10 = 0LL;
    goto LABEL_18;
  }

  if (v10 < a2) {
LABEL_18:
  }
    uint64_t result = v10;
LABEL_19:
  double v14 = v8 * (double)(v7 + 1);
  if ((~*(void *)&v14 & 0x7FF0000000000000LL) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v14 <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  if (v14 >= 9.22337204e18)
  {
LABEL_32:
    __break(1u);
    return result;
  }

  uint64_t v15 = (uint64_t)v14;
  if (v15 < result)
  {
    __break(1u);
    goto LABEL_26;
  }

  return result;
}

uint64_t sub_1000451E8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

Swift::Double sub_10004520C(Swift::Int a1)
{
  return CGImageSourceRef.webKitAnimatedDelayTimeWithIndex(_:)(a1);
}

ValueMetadata *type metadata accessor for RecoverJunkCommandUnpacker()
{
  return &type metadata for RecoverJunkCommandUnpacker;
}

unint64_t sub_10004524C(uint64_t a1)
{
  unint64_t result = sub_10000E6A8();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_100045274()
{
  unint64_t result = qword_1000B0C78;
  if (!qword_1000B0C78)
  {
    uint64_t v1 = type metadata accessor for RecoverJunkCommand(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for RecoverJunkCommand, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0C78);
  }

  return result;
}

uint64_t sub_1000452BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075314(a1, a2, a3);
}

ValueMetadata *type metadata accessor for EditMessageCommandUnpacker()
{
  return &type metadata for EditMessageCommandUnpacker;
}

unint64_t sub_1000452E0(uint64_t a1)
{
  unint64_t result = sub_10000E884();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_100045304()
{
  return sub_10000E9D8( &qword_1000B0C80,  (uint64_t (*)(uint64_t))&type metadata accessor for EditMessageCommand,  (uint64_t)&protocol conformance descriptor for EditMessageCommand);
}

uint64_t sub_100045330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v59[8] = a2;
  uint64_t v3 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = type metadata accessor for DecodingError(0LL);
  uint64_t v68 = *(void *)(v69 - 8);
  uint64_t v5 = __chkstk_darwin(v69);
  uint64_t v65 = (char *)v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  BOOL v67 = (char *)v59 - v8;
  __chkstk_darwin(v7);
  uint64_t v9 = sub_10000E624(&qword_1000AFF08);
  __chkstk_darwin(v9);
  v59[13] = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for EditMessageCommand.MessageEditType(0LL);
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  v59[14] = (char *)v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  v59[10] = (char *)v59 - v15;
  __chkstk_darwin(v14);
  uint64_t v62 = (char *)v59 - v16;
  uint64_t v60 = type metadata accessor for MessageContent(0LL);
  v59[16] = *(void *)(v60 - 8);
  uint64_t v17 = __chkstk_darwin(v60);
  v59[11] = (char *)v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  v59[15] = (char *)v59 - v19;
  uint64_t v20 = sub_10000E624(&qword_1000B0C88);
  uint64_t v21 = __chkstk_darwin(v20);
  v59[12] = (char *)v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  v59[9] = (char *)v59 - v24;
  __chkstk_darwin(v23);
  uint64_t v66 = (char *)v59 - v25;
  uint64_t v26 = type metadata accessor for Metadata(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v61 = (char *)v59 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)v59 - v30;
  uint64_t v32 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)v59 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v35);
  uint64_t v72 = (char *)v59 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  uint64_t v70 = *(void *)(v37 - 8);
  uint64_t v71 = v37;
  __chkstk_darwin(v37);
  uint64_t v76 = type metadata accessor for Explosion(0LL);
  uint64_t v74 = *(void *)(v76 - 8);
  uint64_t v38 = __chkstk_darwin(v76);
  uint64_t v73 = (char *)v59 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = TopLevelDictionary.decryptedData.getter(v38);
  if (v41 >> 60 != 15)
  {
    v59[4] = v26;
    v59[5] = a1;
    v59[3] = v11;
    v59[6] = v40;
    v59[7] = v41;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v56 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
    uint64_t v58 = v57;

    uint64_t v75 = v58;
    __asm { BR              X10 }
  }

  sub_100012C44();
  uint64_t v42 = (void *)static OS_os_log.textMessageUnpacker.getter();
  uint64_t v43 = sub_10000E624(&qword_1000AFF48);
  uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
  *(_OWORD *)(v44 + 16) = xmmword_10008D7D0;
  uint64_t v45 = TopLevelDictionary.metadata.getter(v44);
  Metadata.messageGUID.getter(v45);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
  uint64_t v46 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v34, 0LL, 1LL, v46);
  uint64_t v47 = >> prefix<A>(_:)(v34);
  uint64_t v49 = v48;
  sub_100012EF8((uint64_t)v34, &qword_1000B0000);
  *(void *)(v44 + 56) = &type metadata for String;
  unint64_t v50 = sub_100012CDC();
  *(void *)(v44 + 64) = v50;
  *(void *)(v44 + 32) = v47;
  *(void *)(v44 + 40) = v49;
  uint64_t v51 = static os_log_type_t.default.getter(v50);
  os_log(_:dso:log:type:_:)( "Missing encrypted data (editCommandGUID: %@)",  44LL,  2LL,  &_mh_execute_header,  v42,  v51,  v44);

  swift_bridgeObjectRelease(v44);
  unint64_t v52 = sub_100046868();
  uint64_t v53 = swift_allocError(&type metadata for EditMessageCommandUnpacker.EncryptedMessageMissingData, v52, 0LL, 0LL);
  return swift_willThrow(v53);
}

uint64_t sub_100046748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a3;
  uint64_t v6 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = PropertyListDecoder.init()();
  uint64_t v12 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v12);
  uint64_t result = swift_release(v11);
  if (!v3)
  {
    sub_100045330((uint64_t)v9, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return result;
}

unint64_t sub_100046868()
{
  unint64_t result = qword_1000B0C90;
  if (!qword_1000B0C90)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000904FC,  &type metadata for EditMessageCommandUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000B0C90);
  }

  return result;
}

unint64_t sub_1000468AC()
{
  unint64_t result = qword_1000B0C98;
  if (!qword_1000B0C98)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageEditingDictionary,  &type metadata for MessageEditingDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0C98);
  }

  return result;
}

unint64_t sub_1000468F0()
{
  unint64_t result = qword_1000B0CA0;
  if (!qword_1000B0CA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000904BC, &type metadata for EditMessageCommandUnpacker.NoEditedMessageGUID);
    atomic_store(result, (unint64_t *)&qword_1000B0CA0);
  }

  return result;
}

uint64_t sub_100046934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B0C88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004697C()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1000469B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B0C88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for EditMessageCommandUnpacker.NoEditedMessageGUID()
{
  return &type metadata for EditMessageCommandUnpacker.NoEditedMessageGUID;
}

ValueMetadata *type metadata accessor for EditMessageCommandUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for EditMessageCommandUnpacker.EncryptedMessageMissingData;
}

uint64_t sub_100046A20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SMSDictionary(0LL) + 28));
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  BOOL v6 = *v3 == 7564659 && v5 == 0xE300000000000000LL;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)(7564659LL, 0xE300000000000000LL, v4, v5, 0LL) & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)&enum case for SMSMessage.SMSType.sms(_:);
LABEL_19:
    uint64_t v10 = *v7;
    uint64_t v11 = type metadata accessor for SMSMessage.SMSType(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(a1, v10, v11);
  }

  BOOL v8 = v4 == 7564653 && v5 == 0xE300000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(7564653LL, 0xE300000000000000LL, v4, v5, 0LL) & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)&enum case for SMSMessage.SMSType.mms(_:);
    goto LABEL_19;
  }

  BOOL v9 = v4 == 0x6E776F6E6B6E75LL && v5 == 0xE700000000000000LL;
  if (v9
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E776F6E6B6E75LL, 0xE700000000000000LL, v4, v5, 0LL) & 1) != 0)
  {
    uint64_t v7 = (unsigned int *)&enum case for SMSMessage.SMSType.unknown(_:);
    goto LABEL_19;
  }

  uint64_t v13 = type metadata accessor for Explosion(0LL);
  uint64_t v14 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v13, v14, 0LL, 0LL);
  uint64_t v15 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000002CLL,  0x800000010008B8C0LL,  0x2064696C61766E49LL,  0xED000065756C6176LL,  109LL,  0xE100000000000000LL);
  return swift_willThrow(v15);
}

void *sub_100046BF0()
{
  uint64_t v1 = type metadata accessor for SMSDictionary(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000E624(&qword_1000B0000);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v61 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)&v56 - v7;
  uint64_t v9 = sub_10000E624(&qword_1000B0100);
  __chkstk_darwin(v9);
  uint64_t v73 = (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = sub_10000E624(&qword_1000B0108);
  uint64_t v11 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_10000E624(&qword_1000B0110);
  uint64_t v66 = *(void *)(v14 - 8);
  uint64_t v67 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = *(void *)(v0 + *(int *)(v1 + 88));
  if (!v16 || (uint64_t v64 = *(void *)(v16 + 16)) == 0)
  {
LABEL_13:
    sub_1000471F4(v0, (uint64_t)v3);
    uint64_t v49 = (uint64_t *)&v3[*(int *)(v1 + 80)];
    uint64_t v50 = *v49;
    swift_bridgeObjectRetain(v49[1]);
    goto LABEL_14;
  }

  uint64_t v72 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = v13;
  uint64_t v60 = v8;
  uint64_t v56 = v1;
  uint64_t v57 = v0;
  uint64_t v58 = v3;
  swift_bridgeObjectRetain(v16);
  unint64_t v17 = 0LL;
  uint64_t v18 = (uint64_t *)(v16 + 48);
  uint64_t v62 = v16;
  unint64_t v63 = 0x800000010008ABD0LL;
  while (1)
  {
    uint64_t v20 = v11;
    uint64_t v22 = *(v18 - 1);
    uint64_t v21 = *v18;
    uint64_t v23 = v18[1];
    uint64_t v24 = v18[4];
    unint64_t v25 = v18[5];
    uint64_t v68 = v18[3];
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v16);
    uint64_t v69 = v22;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    unint64_t v70 = v25;
    uint64_t v71 = v24;
    sub_100012AA8(v24, v25);
    uint64_t v26 = sub_10000E624(&qword_1000B0138);
    uint64_t v27 = v72;
    Regex.init(_regexString:version:)(0xD000000000000061LL, v63, 1LL, v26);
    if (v23) {
      break;
    }
    uint64_t v11 = v20;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v73, 1LL, 1LL, v65);
    uint64_t v19 = v67;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v19);
    sub_100012EF8(v73, &qword_1000B0100);
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v23);
LABEL_6:
    swift_bridgeObjectRelease(v69);
    sub_100012B98(v71, v70);
    swift_bridgeObjectRelease(v16);
    ++v17;
    v18 += 8;
    if (v64 == v17) {
      goto LABEL_12;
    }
  }

  *(void *)&__int128 v74 = v21;
  *((void *)&v74 + 1) = v23;
  unint64_t v28 = sub_10001ACD4();
  unint64_t v29 = sub_10001AD18();
  uint64_t v30 = v23;
  uint64_t v31 = v73;
  uint64_t v19 = v67;
  unint64_t v32 = v28;
  uint64_t v16 = v62;
  BidirectionalCollection<>.firstMatch<A, B>(of:)(v27, &type metadata for String, v26, v67, v32, v29);
  uint64_t v11 = v20;
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  uint64_t v34 = v31;
  uint64_t v23 = v30;
  uint64_t v35 = v65;
  if (v33(v34, 1LL, v65) == 1) {
    goto LABEL_5;
  }
  uint64_t v36 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v59, v73, v35);
  uint64_t v37 = v11;
  uint64_t KeyPath = swift_getKeyPath(&unk_100090568);
  Regex.Match.subscript.getter(&v74, KeyPath, v35);
  swift_release(KeyPath);
  uint64_t v39 = *((void *)&v75 + 1);
  uint64_t v40 = static String._fromSubstring(_:)(v74, *((void *)&v74 + 1), v75, *((void *)&v75 + 1));
  uint64_t v42 = v41;
  swift_bridgeObjectRelease(v39);
  uint64_t v43 = (uint64_t)v60;
  UUID.init(uuidString:)(v40, v42);
  swift_bridgeObjectRelease(v42);
  uint64_t v44 = v61;
  sub_10003332C(v43, v61);
  uint64_t v45 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1LL, v45) == 1)
  {
    sub_100012EF8(v43, &qword_1000B0000);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v35);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v67);
    sub_100012EF8(v44, &qword_1000B0000);
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease(v23);
    uint64_t v16 = v62;
    uint64_t v11 = v37;
    goto LABEL_6;
  }

  UUID.uuidString.getter();
  uint64_t v73 = v47;
  sub_100012EF8(v43, &qword_1000B0000);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v72, v67);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v69);
  sub_100012B98(v71, v70);
  swift_bridgeObjectRelease(v73);
  uint64_t v16 = v62;
  unint64_t result = (void *)swift_bridgeObjectRelease(v62);
  if (v64 == v17)
  {
LABEL_12:
    swift_bridgeObjectRelease(v16);
    uint64_t v3 = v58;
    uint64_t v0 = v57;
    uint64_t v1 = v56;
    goto LABEL_13;
  }

  if (v17 >= *(void *)(v16 + 16))
  {
    __break(1u);
    goto LABEL_19;
  }

  __int128 v51 = *((_OWORD *)v18 - 1);
  __int128 v52 = *(_OWORD *)v18;
  __int128 v53 = *((_OWORD *)v18 + 2);
  __int128 v76 = *((_OWORD *)v18 + 1);
  __int128 v77 = v53;
  __int128 v74 = v51;
  __int128 v75 = v52;
  sub_10001ABD8(&v74);
  uint64_t v50 = sub_1000326A0();
  uint64_t v55 = v54;
  unint64_t result = sub_10001AC38(&v74);
  if (!v55)
  {
LABEL_19:
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease(v16);
  uint64_t v3 = v58;
  sub_1000471F4(v57, (uint64_t)v58);
LABEL_14:
  sub_10001AC98((uint64_t)v3);
  return (void *)v50;
}

uint64_t type metadata accessor for SMSDictionary(uint64_t a1)
{
  uint64_t result = qword_1000B0D00;
  if (!qword_1000B0D00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SMSDictionary);
  }
  return result;
}

uint64_t sub_1000471F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SMSDictionary(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_100047238(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
    uint64_t v7 = a3[5];
    BOOL v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = sub_10000E624(&qword_1000B0120);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (void *)((char *)v4 + v14);
    unint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (void *)((char *)v4 + v15);
    uint64_t v20 = (uint64_t *)((char *)a2 + v15);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    uint64_t v24 = *(uint64_t *)((char *)a2 + v22);
    *(void *)((char *)v4 + v22) = v24;
    __dst = (char *)v4 + v23;
    unint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for Date(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    unint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    __n128 v29 = swift_bridgeObjectRetain(v24);
    if (v28(v25, 1LL, v26, v29))
    {
      uint64_t v30 = sub_10000E624(&qword_1000B0118);
      memcpy(__dst, v25, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0LL, 1LL, v26);
    }

    uint64_t v31 = a3[10];
    uint64_t v32 = a3[11];
    uint64_t v33 = (void *)((char *)v4 + v31);
    uint64_t v34 = (uint64_t *)((char *)a2 + v31);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = (char *)v4 + v32;
    uint64_t v37 = (uint64_t)a2 + v32;
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = *(_BYTE *)(v37 + 8);
    uint64_t v38 = a3[12];
    uint64_t v39 = a3[13];
    uint64_t v40 = (void *)((char *)v4 + v38);
    uint64_t v41 = (uint64_t *)((char *)a2 + v38);
    uint64_t v102 = v41[1];
    void *v40 = *v41;
    v40[1] = v102;
    uint64_t v42 = (void *)((char *)v4 + v39);
    uint64_t v43 = (uint64_t *)((char *)a2 + v39);
    __dsta = (void *)v43[1];
    void *v42 = *v43;
    v42[1] = __dsta;
    uint64_t v44 = a3[14];
    uint64_t v45 = a3[15];
    uint64_t v46 = (void *)((char *)v4 + v44);
    uint64_t v47 = (uint64_t *)((char *)a2 + v44);
    uint64_t v100 = v47[1];
    *uint64_t v46 = *v47;
    v46[1] = v100;
    uint64_t v48 = (void *)((char *)v4 + v45);
    uint64_t v49 = (uint64_t *)((char *)a2 + v45);
    uint64_t v101 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v101;
    uint64_t v50 = a3[16];
    uint64_t v51 = a3[17];
    __int128 v52 = (void *)((char *)v4 + v50);
    __int128 v53 = (uint64_t *)((char *)a2 + v50);
    uint64_t v98 = v53[1];
    *__int128 v52 = *v53;
    v52[1] = v98;
    uint64_t v54 = (void *)((char *)v4 + v51);
    uint64_t v55 = (uint64_t *)((char *)a2 + v51);
    uint64_t v99 = v55[1];
    *uint64_t v54 = *v55;
    v54[1] = v99;
    uint64_t v56 = a3[18];
    uint64_t v57 = a3[19];
    uint64_t v58 = (char *)v4 + v56;
    uint64_t v59 = (uint64_t)a2 + v56;
    *(void *)uint64_t v58 = *(void *)v59;
    v58[8] = *(_BYTE *)(v59 + 8);
    uint64_t v60 = (void *)((char *)v4 + v57);
    uint64_t v61 = (uint64_t *)((char *)a2 + v57);
    uint64_t v97 = v61[1];
    void *v60 = *v61;
    v60[1] = v97;
    uint64_t v62 = a3[20];
    uint64_t v63 = a3[21];
    uint64_t v64 = (void *)((char *)v4 + v62);
    uint64_t v65 = (uint64_t *)((char *)a2 + v62);
    uint64_t v66 = v65[1];
    *uint64_t v64 = *v65;
    v64[1] = v66;
    uint64_t v67 = (void *)((char *)v4 + v63);
    uint64_t v68 = (uint64_t *)((char *)a2 + v63);
    uint64_t v69 = v68[1];
    *uint64_t v67 = *v68;
    v67[1] = v69;
    uint64_t v70 = a3[22];
    uint64_t v71 = a3[23];
    uint64_t v72 = *(uint64_t *)((char *)a2 + v70);
    *(void *)((char *)v4 + v70) = v72;
    *((_BYTE *)v4 + v71) = *((_BYTE *)a2 + v71);
    uint64_t v73 = a3[25];
    *((_BYTE *)v4 + a3[24]) = *((_BYTE *)a2 + a3[24]);
    __int128 v74 = (void *)((char *)v4 + v73);
    __int128 v75 = (uint64_t *)((char *)a2 + v73);
    uint64_t v76 = v75[1];
    *__int128 v74 = *v75;
    v74[1] = v76;
    uint64_t v77 = a3[26];
    uint64_t v78 = a3[27];
    uint64_t v79 = (char *)v4 + v77;
    uint64_t v80 = (uint64_t)a2 + v77;
    *(void *)uint64_t v79 = *(void *)v80;
    v79[8] = *(_BYTE *)(v80 + 8);
    uint64_t v81 = (void *)((char *)v4 + v78);
    uint64_t v82 = (uint64_t *)((char *)a2 + v78);
    uint64_t v83 = v82[1];
    void *v81 = *v82;
    v81[1] = v83;
    uint64_t v84 = a3[28];
    uint64_t v85 = a3[29];
    uint64_t v86 = (void *)((char *)v4 + v84);
    uint64_t v87 = (uint64_t *)((char *)a2 + v84);
    uint64_t v88 = v87[1];
    void *v86 = *v87;
    v86[1] = v88;
    unsigned int v89 = (void *)((char *)v4 + v85);
    uint64_t v90 = (uint64_t *)((char *)a2 + v85);
    uint64_t v91 = v90[1];
    void *v89 = *v90;
    v89[1] = v91;
    uint64_t v92 = a3[30];
    char v93 = (void *)((char *)v4 + v92);
    uint64_t v94 = (uint64_t *)((char *)a2 + v92);
    uint64_t v95 = v94[1];
    *char v93 = *v94;
    v93[1] = v95;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v102);
    swift_bridgeObjectRetain(__dsta);
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v98);
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v88);
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRetain(v95);
  }

  return v4;
}

uint64_t sub_10004762C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8]));
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[12] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[14] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[15] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[16] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[17] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[19] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[20] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[21] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[22]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[25] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[27] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[28] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[29] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[30] + 8));
}

uint64_t sub_100047800(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_10000E624(&qword_1000B0120);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = (void *)(a1 + v13);
  uint64_t v18 = (void *)(a2 + v13);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = *(void *)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  __dst = (void *)(a1 + v21);
  uint64_t v23 = (const void *)(a2 + v21);
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v25 + 48);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  __n128 v27 = swift_bridgeObjectRetain(v22);
  if (v26(v23, 1LL, v24, v27))
  {
    uint64_t v28 = sub_10000E624(&qword_1000B0118);
    memcpy(__dst, v23, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(__dst, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0LL, 1LL, v24);
  }

  uint64_t v29 = a3[10];
  uint64_t v30 = a3[11];
  uint64_t v31 = (void *)(a1 + v29);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  void *v31 = *v32;
  v31[1] = v33;
  uint64_t v34 = a1 + v30;
  uint64_t v35 = a2 + v30;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + _Block_object_dispose(va, 8) = *(_BYTE *)(v35 + 8);
  uint64_t v36 = a3[12];
  uint64_t v37 = a3[13];
  uint64_t v38 = (void *)(a1 + v36);
  uint64_t v39 = (void *)(a2 + v36);
  uint64_t v100 = v39[1];
  *uint64_t v38 = *v39;
  v38[1] = v100;
  uint64_t v40 = (void *)(a1 + v37);
  uint64_t v41 = (void *)(a2 + v37);
  __dsta = (void *)v41[1];
  void *v40 = *v41;
  v40[1] = __dsta;
  uint64_t v42 = a3[14];
  uint64_t v43 = a3[15];
  uint64_t v44 = (void *)(a1 + v42);
  uint64_t v45 = (void *)(a2 + v42);
  uint64_t v98 = v45[1];
  *uint64_t v44 = *v45;
  v44[1] = v98;
  uint64_t v46 = (void *)(a1 + v43);
  uint64_t v47 = (void *)(a2 + v43);
  uint64_t v99 = v47[1];
  *uint64_t v46 = *v47;
  v46[1] = v99;
  uint64_t v48 = a3[16];
  uint64_t v49 = a3[17];
  uint64_t v50 = (void *)(a1 + v48);
  uint64_t v51 = (void *)(a2 + v48);
  uint64_t v96 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v96;
  __int128 v52 = (void *)(a1 + v49);
  __int128 v53 = (void *)(a2 + v49);
  uint64_t v97 = v53[1];
  *__int128 v52 = *v53;
  v52[1] = v97;
  uint64_t v54 = a3[18];
  uint64_t v55 = a3[19];
  uint64_t v56 = a1 + v54;
  uint64_t v57 = a2 + v54;
  *(void *)uint64_t v56 = *(void *)v57;
  *(_BYTE *)(v56 + _Block_object_dispose(va, 8) = *(_BYTE *)(v57 + 8);
  uint64_t v58 = (void *)(a1 + v55);
  uint64_t v59 = (void *)(a2 + v55);
  uint64_t v95 = v59[1];
  void *v58 = *v59;
  v58[1] = v95;
  uint64_t v60 = a3[20];
  uint64_t v61 = a3[21];
  uint64_t v62 = (void *)(a1 + v60);
  uint64_t v63 = (void *)(a2 + v60);
  uint64_t v64 = v63[1];
  void *v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = (void *)(a1 + v61);
  uint64_t v66 = (void *)(a2 + v61);
  uint64_t v67 = v66[1];
  void *v65 = *v66;
  v65[1] = v67;
  uint64_t v68 = a3[22];
  uint64_t v69 = a3[23];
  uint64_t v70 = *(void *)(a2 + v68);
  *(void *)(a1 + v6_Block_object_dispose(va, 8) = v70;
  *(_BYTE *)(a1 + v69) = *(_BYTE *)(a2 + v69);
  uint64_t v71 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = (void *)(a2 + v71);
  uint64_t v74 = v73[1];
  *uint64_t v72 = *v73;
  v72[1] = v74;
  uint64_t v75 = a3[26];
  uint64_t v76 = a3[27];
  uint64_t v77 = a1 + v75;
  uint64_t v78 = a2 + v75;
  *(void *)uint64_t v77 = *(void *)v78;
  *(_BYTE *)(v77 + _Block_object_dispose(va, 8) = *(_BYTE *)(v78 + 8);
  uint64_t v79 = (void *)(a1 + v76);
  uint64_t v80 = (void *)(a2 + v76);
  uint64_t v81 = v80[1];
  *uint64_t v79 = *v80;
  v79[1] = v81;
  uint64_t v82 = a3[28];
  uint64_t v83 = a3[29];
  uint64_t v84 = (void *)(a1 + v82);
  uint64_t v85 = (void *)(a2 + v82);
  uint64_t v86 = v85[1];
  void *v84 = *v85;
  v84[1] = v86;
  uint64_t v87 = (void *)(a1 + v83);
  uint64_t v88 = (void *)(a2 + v83);
  uint64_t v89 = v88[1];
  void *v87 = *v88;
  v87[1] = v89;
  uint64_t v90 = a3[30];
  uint64_t v91 = (void *)(a1 + v90);
  uint64_t v92 = (void *)(a2 + v90);
  uint64_t v93 = v92[1];
  *uint64_t v91 = *v92;
  v91[1] = v93;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRetain(__dsta);
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRetain(v99);
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v93);
  return a1;
}

uint64_t sub_100047BC8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_10000E624(&qword_1000B0120);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  unint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  void *v17 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  *uint64_t v22 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a3[8];
  uint64_t v27 = *(void *)(a1 + v26);
  uint64_t v28 = *(uint64_t *)((char *)a2 + v26);
  *(void *)(a1 + v26) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v27);
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1LL, v32);
  int v36 = v34(v31, 1LL, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, char *, uint64_t))(v33 + 24))(v30, v31, v32);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_12;
  }

  if (v36)
  {
LABEL_12:
    uint64_t v37 = sub_10000E624(&qword_1000B0118);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
LABEL_13:
  uint64_t v38 = a3[10];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)((char *)a2 + v38);
  void *v39 = *v40;
  uint64_t v41 = v40[1];
  uint64_t v42 = v39[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease(v42);
  uint64_t v43 = a3[11];
  uint64_t v44 = a1 + v43;
  uint64_t v45 = (uint64_t *)((char *)a2 + v43);
  uint64_t v46 = *v45;
  *(_BYTE *)(v44 + _Block_object_dispose(va, 8) = *((_BYTE *)v45 + 8);
  *(void *)uint64_t v44 = v46;
  uint64_t v47 = a3[12];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (uint64_t *)((char *)a2 + v47);
  *uint64_t v48 = *v49;
  uint64_t v50 = v49[1];
  uint64_t v51 = v48[1];
  v48[1] = v50;
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRelease(v51);
  uint64_t v52 = a3[13];
  __int128 v53 = (void *)(a1 + v52);
  uint64_t v54 = (uint64_t *)((char *)a2 + v52);
  void *v53 = *v54;
  uint64_t v55 = v54[1];
  uint64_t v56 = v53[1];
  v53[1] = v55;
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = a3[14];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t *)((char *)a2 + v57);
  void *v58 = *v59;
  uint64_t v60 = v59[1];
  uint64_t v61 = v58[1];
  v58[1] = v60;
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRelease(v61);
  uint64_t v62 = a3[15];
  uint64_t v63 = (void *)(a1 + v62);
  uint64_t v64 = (uint64_t *)((char *)a2 + v62);
  *uint64_t v63 = *v64;
  uint64_t v65 = v64[1];
  uint64_t v66 = v63[1];
  v63[1] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  uint64_t v67 = a3[16];
  uint64_t v68 = (void *)(a1 + v67);
  uint64_t v69 = (uint64_t *)((char *)a2 + v67);
  *uint64_t v68 = *v69;
  uint64_t v70 = v69[1];
  uint64_t v71 = v68[1];
  v68[1] = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  uint64_t v72 = a3[17];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (uint64_t *)((char *)a2 + v72);
  *uint64_t v73 = *v74;
  uint64_t v75 = v74[1];
  uint64_t v76 = v73[1];
  v73[1] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  uint64_t v77 = a3[18];
  uint64_t v78 = a1 + v77;
  uint64_t v79 = (uint64_t *)((char *)a2 + v77);
  uint64_t v80 = *v79;
  *(_BYTE *)(v78 + _Block_object_dispose(va, 8) = *((_BYTE *)v79 + 8);
  *(void *)uint64_t v78 = v80;
  uint64_t v81 = a3[19];
  uint64_t v82 = (void *)(a1 + v81);
  uint64_t v83 = (uint64_t *)((char *)a2 + v81);
  void *v82 = *v83;
  uint64_t v84 = v83[1];
  uint64_t v85 = v82[1];
  v82[1] = v84;
  swift_bridgeObjectRetain(v84);
  swift_bridgeObjectRelease(v85);
  uint64_t v86 = a3[20];
  uint64_t v87 = (void *)(a1 + v86);
  uint64_t v88 = (uint64_t *)((char *)a2 + v86);
  void *v87 = *v88;
  uint64_t v89 = v88[1];
  uint64_t v90 = v87[1];
  v87[1] = v89;
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRelease(v90);
  uint64_t v91 = a3[21];
  uint64_t v92 = (void *)(a1 + v91);
  uint64_t v93 = (uint64_t *)((char *)a2 + v91);
  *uint64_t v92 = *v93;
  uint64_t v94 = v93[1];
  uint64_t v95 = v92[1];
  v92[1] = v94;
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRelease(v95);
  uint64_t v96 = a3[22];
  uint64_t v97 = *(void *)(a1 + v96);
  uint64_t v98 = *(uint64_t *)((char *)a2 + v96);
  *(void *)(a1 + v96) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v97);
  *(_BYTE *)(a1 + a3[23]) = *((_BYTE *)a2 + a3[23]);
  *(_BYTE *)(a1 + a3[24]) = *((_BYTE *)a2 + a3[24]);
  uint64_t v99 = a3[25];
  uint64_t v100 = (void *)(a1 + v99);
  uint64_t v101 = (uint64_t *)((char *)a2 + v99);
  *uint64_t v100 = *v101;
  uint64_t v102 = v101[1];
  uint64_t v103 = v100[1];
  v100[1] = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = a3[26];
  uint64_t v105 = a1 + v104;
  uint64_t v106 = (uint64_t *)((char *)a2 + v104);
  uint64_t v107 = *v106;
  *(_BYTE *)(v105 + _Block_object_dispose(va, 8) = *((_BYTE *)v106 + 8);
  *(void *)uint64_t v105 = v107;
  uint64_t v108 = a3[27];
  uint64_t v109 = (void *)(a1 + v108);
  uint64_t v110 = (uint64_t *)((char *)a2 + v108);
  *uint64_t v109 = *v110;
  uint64_t v111 = v110[1];
  uint64_t v112 = v109[1];
  v109[1] = v111;
  swift_bridgeObjectRetain(v111);
  swift_bridgeObjectRelease(v112);
  uint64_t v113 = a3[28];
  uint64_t v114 = (void *)(a1 + v113);
  uint64_t v115 = (uint64_t *)((char *)a2 + v113);
  *uint64_t v114 = *v115;
  uint64_t v116 = v115[1];
  uint64_t v117 = v114[1];
  v114[1] = v116;
  swift_bridgeObjectRetain(v116);
  swift_bridgeObjectRelease(v117);
  uint64_t v118 = a3[29];
  uint64_t v119 = (void *)(a1 + v118);
  uint64_t v120 = (uint64_t *)((char *)a2 + v118);
  *uint64_t v119 = *v120;
  uint64_t v121 = v120[1];
  uint64_t v122 = v119[1];
  v119[1] = v121;
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRelease(v122);
  uint64_t v123 = a3[30];
  uint64_t v124 = (void *)(a1 + v123);
  uint64_t v125 = (uint64_t *)((char *)a2 + v123);
  *uint64_t v124 = *v125;
  uint64_t v126 = v125[1];
  uint64_t v127 = v124[1];
  v124[1] = v126;
  swift_bridgeObjectRetain(v126);
  swift_bridgeObjectRelease(v127);
  return a1;
}

uint64_t sub_100048140(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_10000E624(&qword_1000B0120);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  int v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_10000E624(&qword_1000B0118);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v19 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  *(_BYTE *)(v20 + _Block_object_dispose(va, 8) = *(_BYTE *)(v21 + 8);
  uint64_t v22 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  uint64_t v23 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  uint64_t v24 = a3[17];
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  uint64_t v25 = a3[18];
  uint64_t v26 = a3[19];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(_BYTE *)(v27 + _Block_object_dispose(va, 8) = *(_BYTE *)(v28 + 8);
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  uint64_t v29 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(_OWORD *)(a1 + v29) = *(_OWORD *)(a2 + v29);
  uint64_t v30 = a3[23];
  *(void *)(a1 + a3[22]) = *(void *)(a2 + a3[22]);
  *(_BYTE *)(a1 + v30) = *(_BYTE *)(a2 + v30);
  uint64_t v31 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  *(_OWORD *)(a1 + v31) = *(_OWORD *)(a2 + v31);
  uint64_t v32 = a3[26];
  uint64_t v33 = a3[27];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)uint64_t v34 = *(void *)v35;
  *(_BYTE *)(v34 + _Block_object_dispose(va, 8) = *(_BYTE *)(v35 + 8);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  uint64_t v36 = a3[29];
  *(_OWORD *)(a1 + a3[28]) = *(_OWORD *)(a2 + a3[28]);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  *(_OWORD *)(a1 + a3[30]) = *(_OWORD *)(a2 + a3[30]);
  return a1;
}

uint64_t sub_1000483B8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000E624(&qword_1000B0120);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v16[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v26 = v22[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  uint64_t v27 = a3[8];
  uint64_t v28 = *(void *)(a1 + v27);
  *(void *)(a1 + v27) = *(void *)(a2 + v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1LL, v32);
  int v36 = v34(v31, 1LL, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v30, v31, v32);
      goto LABEL_13;
    }

    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_12;
  }

  if (v36)
  {
LABEL_12:
    uint64_t v37 = sub_10000E624(&qword_1000B0118);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v30, v31, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
LABEL_13:
  uint64_t v38 = a3[10];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  uint64_t v43 = v39[1];
  void *v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease(v43);
  uint64_t v44 = a3[11];
  uint64_t v45 = a3[12];
  uint64_t v46 = a1 + v44;
  uint64_t v47 = a2 + v44;
  *(void *)uint64_t v46 = *(void *)v47;
  *(_BYTE *)(v46 + _Block_object_dispose(va, 8) = *(_BYTE *)(v47 + 8);
  uint64_t v48 = (void *)(a1 + v45);
  uint64_t v49 = (uint64_t *)(a2 + v45);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  uint64_t v52 = v48[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease(v52);
  uint64_t v53 = a3[13];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (uint64_t *)(a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  uint64_t v58 = v54[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease(v58);
  uint64_t v59 = a3[14];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (uint64_t *)(a2 + v59);
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  uint64_t v64 = v60[1];
  void *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease(v64);
  uint64_t v65 = a3[15];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (uint64_t *)(a2 + v65);
  uint64_t v69 = *v67;
  uint64_t v68 = v67[1];
  uint64_t v70 = v66[1];
  void *v66 = v69;
  v66[1] = v68;
  swift_bridgeObjectRelease(v70);
  uint64_t v71 = a3[16];
  uint64_t v72 = (void *)(a1 + v71);
  uint64_t v73 = (uint64_t *)(a2 + v71);
  uint64_t v75 = *v73;
  uint64_t v74 = v73[1];
  uint64_t v76 = v72[1];
  *uint64_t v72 = v75;
  v72[1] = v74;
  swift_bridgeObjectRelease(v76);
  uint64_t v77 = a3[17];
  uint64_t v78 = (void *)(a1 + v77);
  uint64_t v79 = (uint64_t *)(a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  uint64_t v82 = v78[1];
  *uint64_t v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease(v82);
  uint64_t v83 = a3[18];
  uint64_t v84 = a3[19];
  uint64_t v85 = a1 + v83;
  uint64_t v86 = a2 + v83;
  *(void *)uint64_t v85 = *(void *)v86;
  *(_BYTE *)(v85 + _Block_object_dispose(va, 8) = *(_BYTE *)(v86 + 8);
  uint64_t v87 = (void *)(a1 + v84);
  uint64_t v88 = (uint64_t *)(a2 + v84);
  uint64_t v90 = *v88;
  uint64_t v89 = v88[1];
  uint64_t v91 = v87[1];
  void *v87 = v90;
  v87[1] = v89;
  swift_bridgeObjectRelease(v91);
  uint64_t v92 = a3[20];
  uint64_t v93 = (void *)(a1 + v92);
  uint64_t v94 = (uint64_t *)(a2 + v92);
  uint64_t v96 = *v94;
  uint64_t v95 = v94[1];
  uint64_t v97 = v93[1];
  *uint64_t v93 = v96;
  v93[1] = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = a3[21];
  uint64_t v99 = (void *)(a1 + v98);
  uint64_t v100 = (uint64_t *)(a2 + v98);
  uint64_t v102 = *v100;
  uint64_t v101 = v100[1];
  uint64_t v103 = v99[1];
  *uint64_t v99 = v102;
  v99[1] = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = a3[22];
  uint64_t v105 = *(void *)(a1 + v104);
  *(void *)(a1 + v104) = *(void *)(a2 + v104);
  swift_bridgeObjectRelease(v105);
  uint64_t v106 = a3[24];
  *(_BYTE *)(a1 + a3[23]) = *(_BYTE *)(a2 + a3[23]);
  *(_BYTE *)(a1 + v106) = *(_BYTE *)(a2 + v106);
  uint64_t v107 = a3[25];
  uint64_t v108 = (void *)(a1 + v107);
  uint64_t v109 = (uint64_t *)(a2 + v107);
  uint64_t v111 = *v109;
  uint64_t v110 = v109[1];
  uint64_t v112 = v108[1];
  *uint64_t v108 = v111;
  v108[1] = v110;
  swift_bridgeObjectRelease(v112);
  uint64_t v113 = a3[26];
  uint64_t v114 = a3[27];
  uint64_t v115 = a1 + v113;
  uint64_t v116 = a2 + v113;
  *(void *)uint64_t v115 = *(void *)v116;
  *(_BYTE *)(v115 + _Block_object_dispose(va, 8) = *(_BYTE *)(v116 + 8);
  uint64_t v117 = (void *)(a1 + v114);
  uint64_t v118 = (uint64_t *)(a2 + v114);
  uint64_t v120 = *v118;
  uint64_t v119 = v118[1];
  uint64_t v121 = v117[1];
  *uint64_t v117 = v120;
  v117[1] = v119;
  swift_bridgeObjectRelease(v121);
  uint64_t v122 = a3[28];
  uint64_t v123 = (void *)(a1 + v122);
  uint64_t v124 = (uint64_t *)(a2 + v122);
  uint64_t v126 = *v124;
  uint64_t v125 = v124[1];
  uint64_t v127 = v123[1];
  *uint64_t v123 = v126;
  v123[1] = v125;
  swift_bridgeObjectRelease(v127);
  uint64_t v128 = a3[29];
  os_log_type_t v129 = (void *)(a1 + v128);
  uint64_t v130 = (uint64_t *)(a2 + v128);
  uint64_t v132 = *v130;
  uint64_t v131 = v130[1];
  uint64_t v133 = v129[1];
  *os_log_type_t v129 = v132;
  v129[1] = v131;
  swift_bridgeObjectRelease(v133);
  uint64_t v134 = a3[30];
  unint64_t v135 = (void *)(a1 + v134);
  unint64_t v136 = (uint64_t *)(a2 + v134);
  uint64_t v138 = *v136;
  uint64_t v137 = v136[1];
  uint64_t v139 = v135[1];
  *unint64_t v135 = v138;
  v135[1] = v137;
  swift_bridgeObjectRelease(v139);
  return a1;
}

uint64_t sub_100048800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004880C);
}

uint64_t sub_10004880C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000E624(&qword_1000B0120);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = sub_10000E624(&qword_1000B0118);
    uint64_t v7 = *(void *)(v8 - 8);
    uint64_t v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v10 = *(void *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t sub_1000488BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000488C8);
}

uint64_t sub_1000488C8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_10000E624(&qword_1000B0120);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[5];
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[6] + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = sub_10000E624(&qword_1000B0118);
    uint64_t v9 = *(void *)(v10 - 8);
    uint64_t v11 = a4[9];
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_100048974(uint64_t a1)
{
  v6[0] = "\t";
  sub_100048A78( 319LL,  &qword_1000B0D10,  (uint64_t (*)(uint64_t))&type metadata accessor for SMSMessage.FilterSubCategoryType);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    _OWORD v6[2] = &unk_1000905C0;
    v6[3] = &unk_1000905C0;
    _OWORD v6[4] = &unk_1000905D8;
    sub_100048A78( 319LL,  (unint64_t *)&unk_1000B0D18,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[5] = *(void *)(v4 - 8) + 64LL;
      v6[6] = &unk_1000905F0;
      v6[7] = "\t";
      v6[8] = &unk_1000905F0;
      void v6[9] = &unk_1000905F0;
      v6[10] = &unk_1000905F0;
      v6[11] = &unk_1000905F0;
      v6[12] = &unk_1000905F0;
      v6[13] = &unk_1000905F0;
      v6[14] = "\t";
      v6[15] = &unk_1000905F0;
      v6[16] = &unk_1000905F0;
      v6[17] = &unk_1000905F0;
      v6[18] = &unk_1000905D8;
      v6[19] = &unk_100090608;
      v6[20] = &unk_100090608;
      v6[21] = &unk_1000905F0;
      v6[22] = "\t";
      v6[23] = &unk_1000905F0;
      v6[24] = &unk_1000905F0;
      v6[25] = &unk_1000905F0;
      v6[26] = &unk_1000905F0;
      swift_initStructMetadata(a1, 256LL, 27LL, v6, a1 + 16);
    }
  }

void sub_100048A78(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100048AC4(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B0DE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10004A064();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SMSDictionary.CodingKeys,  &type metadata for SMSDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  LOBYTE(v89) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v89, v5);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for SMSDictionary(0LL);
    uint64_t v15 = (uint64_t)v3 + v14[5];
    LOBYTE(v89) = 1;
    uint64_t v16 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
    uint64_t v17 = sub_10000E9D8( &qword_1000B0DF0,  (uint64_t (*)(uint64_t))&type metadata accessor for SMSMessage.FilterSubCategoryType,  (uint64_t)&protocol conformance descriptor for SMSMessage.FilterSubCategoryType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v89, v5, v16, v17);
    uint64_t v18 = (uint64_t *)((char *)v3 + v14[6]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    LOBYTE(v89) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v89, v5);
    uint64_t v21 = (uint64_t *)((char *)v3 + v14[7]);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    LOBYTE(v89) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v89, v5);
    uint64_t v89 = *(uint64_t *)((char *)v3 + v14[8]);
    HIBYTE(v8_Block_object_dispose(va, 8) = 4;
    uint64_t v24 = sub_10000E624(&qword_1000AFED0);
    uint64_t v25 = sub_100010D80( &qword_1000AFED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v89, (char *)&v88 + 7, v5, v24, v25);
    uint64_t v26 = (uint64_t)v3 + v14[9];
    LOBYTE(v89) = 5;
    uint64_t v27 = type metadata accessor for Date(0LL);
    uint64_t v28 = sub_10000E9D8( &qword_1000B0DF8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v89, v5, v27, v28);
    uint64_t v29 = (uint64_t *)((char *)v3 + v14[10]);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    LOBYTE(v89) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, &v89, v5);
    uint64_t v32 = (uint64_t *)((char *)v3 + v14[11]);
    uint64_t v33 = *v32;
    uint64_t v34 = *((unsigned __int8 *)v32 + 8);
    LOBYTE(v89) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, &v89, v5);
    int v35 = (uint64_t *)((char *)v3 + v14[12]);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    LOBYTE(v89) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v89, v5);
    uint64_t v38 = (uint64_t *)((char *)v3 + v14[13]);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    LOBYTE(v89) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, &v89, v5);
    uint64_t v41 = (uint64_t *)((char *)v3 + v14[14]);
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    LOBYTE(v89) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v89, v5);
    uint64_t v44 = (uint64_t *)((char *)v3 + v14[15]);
    uint64_t v45 = *v44;
    uint64_t v46 = v44[1];
    LOBYTE(v89) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v46, &v89, v5);
    uint64_t v47 = (uint64_t *)((char *)v3 + v14[16]);
    uint64_t v48 = *v47;
    uint64_t v49 = v47[1];
    LOBYTE(v89) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, &v89, v5);
    uint64_t v50 = (uint64_t *)((char *)v3 + v14[17]);
    uint64_t v51 = *v50;
    uint64_t v52 = v50[1];
    LOBYTE(v89) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51, v52, &v89, v5);
    uint64_t v53 = (uint64_t *)((char *)v3 + v14[18]);
    uint64_t v54 = *v53;
    uint64_t v55 = *((unsigned __int8 *)v53 + 8);
    LOBYTE(v89) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v54, v55, &v89, v5);
    uint64_t v56 = (uint64_t *)((char *)v3 + v14[19]);
    uint64_t v57 = *v56;
    uint64_t v58 = v56[1];
    LOBYTE(v89) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, v58, &v89, v5);
    uint64_t v59 = (uint64_t *)((char *)v3 + v14[20]);
    uint64_t v60 = *v59;
    uint64_t v61 = v59[1];
    LOBYTE(v89) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60, v61, &v89, v5);
    uint64_t v62 = (uint64_t *)((char *)v3 + v14[21]);
    uint64_t v63 = *v62;
    uint64_t v64 = v62[1];
    LOBYTE(v89) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v63, v64, &v89, v5);
    uint64_t v89 = *(uint64_t *)((char *)v3 + v14[22]);
    HIBYTE(v8_Block_object_dispose(va, 8) = 18;
    uint64_t v65 = sub_10000E624(&qword_1000B0DD0);
    uint64_t v66 = sub_10004A130( &qword_1000B0E00,  (void (*)(void))sub_10004A198,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v89, (char *)&v88 + 7, v5, v65, v66);
    uint64_t v67 = *((unsigned __int8 *)v3 + v14[23]);
    LOBYTE(v89) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v67, &v89, v5);
    uint64_t v68 = *((unsigned __int8 *)v3 + v14[24]);
    LOBYTE(v89) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, &v89, v5);
    uint64_t v69 = (uint64_t *)((char *)v3 + v14[25]);
    uint64_t v70 = *v69;
    uint64_t v71 = v69[1];
    LOBYTE(v89) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70, v71, &v89, v5);
    uint64_t v72 = (uint64_t *)((char *)v3 + v14[26]);
    uint64_t v73 = *v72;
    uint64_t v74 = *((unsigned __int8 *)v72 + 8);
    LOBYTE(v89) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v73, v74, &v89, v5);
    uint64_t v75 = (uint64_t *)((char *)v3 + v14[27]);
    uint64_t v76 = *v75;
    uint64_t v77 = v75[1];
    LOBYTE(v89) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v76, v77, &v89, v5);
    uint64_t v78 = (uint64_t *)((char *)v3 + v14[28]);
    uint64_t v79 = *v78;
    uint64_t v80 = v78[1];
    LOBYTE(v89) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v79, v80, &v89, v5);
    uint64_t v81 = (uint64_t *)((char *)v3 + v14[29]);
    uint64_t v82 = *v81;
    uint64_t v83 = v81[1];
    LOBYTE(v89) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v82, v83, &v89, v5);
    uint64_t v84 = (uint64_t *)((char *)v3 + v14[30]);
    uint64_t v85 = *v84;
    uint64_t v86 = v84[1];
    LOBYTE(v89) = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v85, v86, &v89, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100049174(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v146 = a2;
  uint64_t v3 = sub_10000E624(&qword_1000B0118);
  __chkstk_darwin(v3);
  uint64_t v148 = (uint64_t *)((char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_10000E624(&qword_1000B0120);
  __chkstk_darwin(v5);
  unint64_t v150 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = sub_10000E624(&qword_1000B0DB0);
  uint64_t v151 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  uint64_t v175 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (int *)type metadata accessor for SMSDictionary(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)unint64_t v11 = 0LL;
  v11[8] = 1;
  uint64_t v12 = (uint64_t)&v11[*(int *)(v9 + 20)];
  uint64_t v13 = type metadata accessor for SMSMessage.FilterSubCategoryType(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
  uint64_t v172 = v12;
  uint64_t v149 = v13;
  v14(v12, 1LL, 1LL);
  uint64_t v173 = v8[8];
  *(void *)&v11[v173] = 0LL;
  uint64_t v15 = (uint64_t)&v11[v8[9]];
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL);
  uint64_t v174 = v15;
  uint64_t v147 = v16;
  v17(v15, 1LL, 1LL);
  uint64_t v18 = &v11[v8[10]];
  *(void *)uint64_t v18 = 0LL;
  *((void *)v18 + 1) = 0LL;
  uint64_t v171 = v18;
  uint64_t v19 = &v11[v8[11]];
  *(void *)uint64_t v19 = 0LL;
  v19[8] = 1;
  uint64_t v20 = &v11[v8[12]];
  *(void *)uint64_t v20 = 0LL;
  *((void *)v20 + 1) = 0LL;
  uint64_t v170 = v20;
  uint64_t v21 = &v11[v8[13]];
  *(void *)uint64_t v21 = 0LL;
  *((void *)v21 + 1) = 0LL;
  uint64_t v168 = v21;
  uint64_t v22 = &v11[v8[14]];
  *(void *)uint64_t v22 = 0LL;
  *((void *)v22 + 1) = 0LL;
  uint64_t v167 = v22;
  uint64_t v23 = &v11[v8[15]];
  *(void *)uint64_t v23 = 0LL;
  *((void *)v23 + 1) = 0LL;
  uint64_t v166 = v23;
  uint64_t v24 = &v11[v8[16]];
  *(void *)uint64_t v24 = 0LL;
  *((void *)v24 + 1) = 0LL;
  uint64_t v165 = v24;
  uint64_t v25 = &v11[v8[17]];
  *(void *)uint64_t v25 = 0LL;
  *((void *)v25 + 1) = 0LL;
  uint64_t v164 = v25;
  uint64_t v26 = &v11[v8[18]];
  *(void *)uint64_t v26 = 0LL;
  _BYTE v26[8] = 1;
  uint64_t v27 = &v11[v8[19]];
  *(void *)uint64_t v27 = 0LL;
  *((void *)v27 + 1) = 0LL;
  __n128 v160 = v27;
  uint64_t v28 = &v11[v8[20]];
  *(void *)uint64_t v28 = 0LL;
  *((void *)v28 + 1) = 0LL;
  unint64_t v159 = v28;
  uint64_t v29 = &v11[v8[21]];
  *(void *)uint64_t v29 = 0LL;
  *((void *)v29 + 1) = 0LL;
  uint64_t v158 = v29;
  uint64_t v161 = v8[22];
  *(void *)&v11[v161] = 0LL;
  uint64_t v30 = v8[23];
  v11[v30] = 2;
  uint64_t v31 = v8[24];
  v11[v31] = 2;
  uint64_t v32 = &v11[v8[25]];
  *(void *)uint64_t v32 = 0LL;
  *((void *)v32 + 1) = 0LL;
  unint64_t v157 = v32;
  uint64_t v33 = &v11[v8[26]];
  *(void *)uint64_t v33 = 0LL;
  v33[8] = 1;
  uint64_t v34 = &v11[v8[27]];
  *(void *)uint64_t v34 = 0LL;
  *((void *)v34 + 1) = 0LL;
  uint64_t v156 = v34;
  int v35 = &v11[v8[28]];
  *(void *)int v35 = 0LL;
  *((void *)v35 + 1) = 0LL;
  uint64_t v155 = v35;
  uint64_t v36 = &v11[v8[29]];
  *(void *)uint64_t v36 = 0LL;
  *((void *)v36 + 1) = 0LL;
  uint64_t v154 = v36;
  uint64_t v169 = v8;
  uint64_t v37 = &v11[v8[30]];
  *(void *)uint64_t v37 = 0LL;
  *((void *)v37 + 1) = 0LL;
  uint64_t v162 = v37;
  uint64_t v163 = a1;
  uint64_t v39 = a1[3];
  uint64_t v38 = a1[4];
  sub_10000FFDC(a1, v39);
  unint64_t v40 = sub_10004A064();
  uint64_t v41 = v153;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SMSDictionary.CodingKeys,  &type metadata for SMSDictionary.CodingKeys,  v40,  v39,  v38);
  if (v41)
  {
    uint64_t v43 = v173;
    uint64_t v42 = v174;
    uint64_t v49 = v171;
    uint64_t v50 = v172;
    sub_100010D60(v163);
    sub_100012EF8(v50, &qword_1000B0120);
    swift_bridgeObjectRelease(*(void *)&v11[v43]);
    sub_100012EF8(v42, &qword_1000B0118);
    swift_bridgeObjectRelease(*((void *)v49 + 1));
    swift_bridgeObjectRelease(*((void *)v170 + 1));
    swift_bridgeObjectRelease(*((void *)v168 + 1));
    swift_bridgeObjectRelease(*((void *)v167 + 1));
    swift_bridgeObjectRelease(*((void *)v166 + 1));
    swift_bridgeObjectRelease(*((void *)v165 + 1));
    swift_bridgeObjectRelease(*((void *)v164 + 1));
    swift_bridgeObjectRelease(*((void *)v160 + 1));
    swift_bridgeObjectRelease(*((void *)v159 + 1));
    swift_bridgeObjectRelease(*((void *)v158 + 1));
    swift_bridgeObjectRelease(*(void *)&v11[v161]);
    swift_bridgeObjectRelease(*((void *)v157 + 1));
    swift_bridgeObjectRelease(*((void *)v156 + 1));
    swift_bridgeObjectRelease(*((void *)v155 + 1));
    swift_bridgeObjectRelease(*((void *)v154 + 1));
    swift_bridgeObjectRelease(*((void *)v162 + 1));
  }

  else
  {
    uint64_t v44 = v149;
    uint64_t v45 = v150;
    uint64_t v153 = (uint64_t *)v19;
    uint64_t v145 = (uint64_t *)v26;
    uint64_t v142 = v30;
    uint64_t v143 = v31;
    Swift::String v144 = (uint64_t *)v33;
    LOBYTE(v177) = 0;
    uint64_t v46 = v152;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v48 = v173;
    *(void *)unint64_t v11 = v47;
    v11[8] = v51 & 1;
    LOBYTE(v177) = 1;
    uint64_t v52 = sub_10000E9D8( &qword_1000B0DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for SMSMessage.FilterSubCategoryType,  (uint64_t)&protocol conformance descriptor for SMSMessage.FilterSubCategoryType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v45, v44, &v177, v46, v44, v52);
    uint64_t v53 = v169;
    sub_10004A0A8((uint64_t)v45, v172, &qword_1000B0120);
    LOBYTE(v177) = 2;
    uint64_t v54 = KeyedDecodingContainer.decode(_:forKey:)(&v177, v46);
    uint64_t v55 = (uint64_t *)&v11[v53[6]];
    *uint64_t v55 = v54;
    v55[1] = v56;
    LOBYTE(v177) = 3;
    uint64_t v57 = KeyedDecodingContainer.decode(_:forKey:)(&v177, v46);
    uint64_t v58 = (uint64_t *)&v11[v53[7]];
    uint64_t *v58 = v57;
    v58[1] = v59;
    uint64_t v60 = sub_10000E624(&qword_1000AFED0);
    char v176 = 4;
    uint64_t v61 = sub_100010D80( &qword_1000AFF00,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v177, v60, &v176, v46, v60, v61);
    uint64_t v62 = v177;
    swift_bridgeObjectRelease(*(void *)&v11[v48]);
    *(void *)&v11[v48] = v62;
    LOBYTE(v177) = 5;
    uint64_t v63 = sub_10000E9D8( &qword_1000B0DC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v64 = v148;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v148, v147, &v177, v46, v147, v63);
    sub_10004A0A8((uint64_t)v64, v174, &qword_1000B0118);
    LOBYTE(v177) = 6;
    uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v46);
    uint64_t v66 = v171;
    uint64_t v67 = v65;
    uint64_t v69 = v68;
    swift_bridgeObjectRelease(*((void *)v171 + 1));
    void *v66 = v67;
    v66[1] = v69;
    LOBYTE(v177) = 7;
    uint64_t v70 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v71 = v153;
    *uint64_t v153 = v70;
    *((_BYTE *)v71 + _Block_object_dispose(va, 8) = v72 & 1;
    LOBYTE(v177) = 8;
    uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v75 = v74;
    uint64_t v76 = (uint64_t *)v170;
    swift_bridgeObjectRelease(*((void *)v170 + 1));
    *uint64_t v76 = v73;
    v76[1] = v75;
    LOBYTE(v177) = 9;
    uint64_t v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v79 = v78;
    uint64_t v80 = (uint64_t *)v168;
    swift_bridgeObjectRelease(*((void *)v168 + 1));
    *uint64_t v80 = v77;
    v80[1] = v79;
    LOBYTE(v177) = 10;
    uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v83 = v82;
    uint64_t v84 = (uint64_t *)v167;
    swift_bridgeObjectRelease(*((void *)v167 + 1));
    uint64_t *v84 = v81;
    v84[1] = v83;
    LOBYTE(v177) = 11;
    uint64_t v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v87 = v86;
    uint64_t v88 = (uint64_t *)v166;
    swift_bridgeObjectRelease(*((void *)v166 + 1));
    uint64_t *v88 = v85;
    v88[1] = v87;
    LOBYTE(v177) = 12;
    uint64_t v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v91 = v90;
    uint64_t v92 = (uint64_t *)v165;
    swift_bridgeObjectRelease(*((void *)v165 + 1));
    *uint64_t v92 = v89;
    v92[1] = v91;
    LOBYTE(v177) = 13;
    uint64_t v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v95 = v94;
    uint64_t v96 = (uint64_t *)v164;
    swift_bridgeObjectRelease(*((void *)v164 + 1));
    *uint64_t v96 = v93;
    v96[1] = v95;
    LOBYTE(v177) = 14;
    uint64_t v97 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v98 = v145;
    *uint64_t v145 = v97;
    *((_BYTE *)v98 + _Block_object_dispose(va, 8) = v99 & 1;
    LOBYTE(v177) = 15;
    uint64_t v100 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v102 = v101;
    uint64_t v103 = (uint64_t *)v160;
    swift_bridgeObjectRelease(*((void *)v160 + 1));
    *uint64_t v103 = v100;
    v103[1] = v102;
    LOBYTE(v177) = 16;
    uint64_t v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v106 = v105;
    uint64_t v107 = (uint64_t *)v159;
    swift_bridgeObjectRelease(*((void *)v159 + 1));
    *uint64_t v107 = v104;
    v107[1] = v106;
    LOBYTE(v177) = 17;
    uint64_t v108 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v110 = v109;
    uint64_t v111 = (uint64_t *)v158;
    swift_bridgeObjectRelease(*((void *)v158 + 1));
    *uint64_t v111 = v108;
    v111[1] = v110;
    uint64_t v112 = sub_10000E624(&qword_1000B0DD0);
    char v176 = 18;
    uint64_t v113 = sub_10004A130( &qword_1000B0DD8,  (void (*)(void))sub_10004A0EC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v177, v112, &v176, v152, v112, v113);
    uint64_t v114 = v177;
    uint64_t v115 = v161;
    swift_bridgeObjectRelease(*(void *)&v11[v161]);
    *(void *)&v11[v115] = v114;
    LOBYTE(v177) = 19;
    char v116 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    v11[v142] = v116;
    LOBYTE(v177) = 20;
    char v117 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    v11[v143] = v117;
    LOBYTE(v177) = 21;
    uint64_t v118 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v120 = v119;
    uint64_t v121 = (uint64_t *)v157;
    __n128 v122 = swift_bridgeObjectRelease(*((void *)v157 + 1));
    *uint64_t v121 = v118;
    v121[1] = v120;
    LOBYTE(v177) = 22;
    uint64_t v123 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152, v122);
    uint64_t v124 = v144;
    *Swift::String v144 = v123;
    *((_BYTE *)v124 + _Block_object_dispose(va, 8) = v125 & 1;
    LOBYTE(v177) = 23;
    uint64_t v126 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v128 = v127;
    os_log_type_t v129 = (uint64_t *)v156;
    swift_bridgeObjectRelease(*((void *)v156 + 1));
    *os_log_type_t v129 = v126;
    v129[1] = v128;
    LOBYTE(v177) = 24;
    uint64_t v130 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v132 = v131;
    uint64_t v133 = (uint64_t *)v155;
    swift_bridgeObjectRelease(*((void *)v155 + 1));
    *uint64_t v133 = v130;
    v133[1] = v132;
    LOBYTE(v177) = 25;
    uint64_t v134 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v136 = v135;
    uint64_t v137 = (uint64_t *)v154;
    swift_bridgeObjectRelease(*((void *)v154 + 1));
    *uint64_t v137 = v134;
    v137[1] = v136;
    LOBYTE(v177) = 26;
    uint64_t v138 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v177, v152);
    uint64_t v140 = v139;
    (*(void (**)(char *, uint64_t))(v151 + 8))(v175, v152);
    uint64_t v141 = (uint64_t *)v162;
    swift_bridgeObjectRelease(*((void *)v162 + 1));
    *uint64_t v141 = v138;
    v141[1] = v140;
    sub_1000471F4((uint64_t)v11, v146);
    sub_100010D60(v163);
    sub_10001AC98((uint64_t)v11);
  }

uint64_t sub_100049EC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100049EF4 + 4 * byte_100090540[a1]))( 6517599LL,  0xE300000000000000LL);
}

uint64_t sub_100049EF4()
{
  return 1668510559LL;
}

uint64_t sub_100049F04()
{
  return 22131LL;
}

uint64_t sub_100049F10()
{
  return 109LL;
}

uint64_t sub_100049F1C()
{
  return 25970LL;
}

uint64_t sub_100049F28()
{
  return 119LL;
}

uint64_t sub_100049F34()
{
  return 104LL;
}

uint64_t sub_100049F40()
{
  return 25449LL;
}

uint64_t sub_100049F4C()
{
  return 99LL;
}

uint64_t sub_100049F58()
{
  return 28515LL;
}

uint64_t sub_100049F64()
{
  return 25955LL;
}

uint64_t sub_100049F70()
{
  return 29539LL;
}

uint64_t sub_100049F7C()
{
  return 97LL;
}

uint64_t sub_100049F88()
{
  return 98LL;
}

uint64_t sub_100049F94()
{
  return 108LL;
}

uint64_t sub_100049FA0()
{
  return 110LL;
}

uint64_t sub_100049FAC()
{
  return 103LL;
}

uint64_t sub_100049FB8()
{
  return 26726LL;
}

uint64_t sub_100049FC4()
{
  return 107LL;
}

uint64_t sub_100049FD0()
{
  return 25453LL;
}

uint64_t sub_100049FDC()
{
  return 114LL;
}

uint64_t sub_100049FE8()
{
  return 7234918LL;
}

uint64_t sub_100049FF8()
{
  return 7299942LL;
}

uint64_t sub_10004A004()
{
  return 1145664868LL;
}

uint64_t sub_10004A014()
{
  return 7234659LL;
}

uint64_t sub_10004A020()
{
  return 6907747LL;
}

uint64_t sub_10004A02C()
{
  return 1768383343LL;
}

void sub_10004A03C(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10004A050(void *a1)
{
  return sub_100048AC4(a1);
}

unint64_t sub_10004A064()
{
  unint64_t result = qword_1000B0DB8;
  if (!qword_1000B0DB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009076C, &type metadata for SMSDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0DB8);
  }

  return result;
}

uint64_t sub_10004A0A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000E624(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004A0EC()
{
  unint64_t result = qword_1000B0DE0;
  if (!qword_1000B0DE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EADC, &type metadata for SMSCTPartDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0DE0);
  }

  return result;
}

uint64_t sub_10004A130(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10001008C(&qword_1000B0DD0);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10004A198()
{
  unint64_t result = qword_1000B0E08;
  if (!qword_1000B0E08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008EAB4, &type metadata for SMSCTPartDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0E08);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SMSDictionary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }

uint64_t storeEnumTagSinglePayload for SMSDictionary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE5) {
    return ((uint64_t (*)(void))((char *)&loc_10004A2B8 + 4 * byte_100090560[v4]))();
  }
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_10004A2EC + 4 * byte_10009055B[v4]))();
}

uint64_t sub_10004A2EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A2F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004A2FCLL);
  }
  return result;
}

uint64_t sub_10004A308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004A310LL);
  }
  *(_BYTE *)unint64_t result = a2 + 26;
  return result;
}

uint64_t sub_10004A314(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A31C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SMSDictionary.CodingKeys()
{
  return &type metadata for SMSDictionary.CodingKeys;
}

uint64_t sub_10004A338(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_100049EC8(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_100049EC8(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10004A3C0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_100049EC8(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10004A420(uint64_t a1)
{
  uint64_t v3 = sub_100049EC8(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(void *)&double result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10004A460(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_100049EC8(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10004A4BC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10004A670(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10004A4E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100049EC8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10004A510()
{
  return sub_100049EC8(*v0);
}

uint64_t sub_10004A518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004A670(a1, a2);
  *a3 = result;
  return result;
}

void sub_10004A53C(_BYTE *a1@<X8>)
{
  *a1 = 27;
}

uint64_t sub_10004A548(uint64_t a1)
{
  unint64_t v2 = sub_10004A064();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A570(uint64_t a1)
{
  unint64_t v2 = sub_10004A064();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10004A59C()
{
  unint64_t result = qword_1000B0E10;
  if (!qword_1000B0E10)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090744, &type metadata for SMSDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E10);
  }

  return result;
}

unint64_t sub_10004A5E4()
{
  unint64_t result = qword_1000B0E18;
  if (!qword_1000B0E18)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009067C, &type metadata for SMSDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E18);
  }

  return result;
}

unint64_t sub_10004A62C()
{
  unint64_t result = qword_1000B0E20;
  if (!qword_1000B0E20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000906A4, &type metadata for SMSDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E20);
  }

  return result;
}

uint64_t sub_10004A670(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1000A3890, a1, a2, &unk_1000AFCD0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1B) {
    return 27LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10004A6C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000E624(&qword_1000B0E28);
  __chkstk_darwin(v3);
  uint64_t v153 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for MorphologyCustomPronounPair(0LL);
  uint64_t v156 = *(void *)(v5 - 8);
  uint64_t v157 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v155 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v154 = (char *)&v142 - v8;
  uint64_t v9 = type metadata accessor for MorphologyCustomPronoun(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v152 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  __n128 v160 = (char *)&v142 - v13;
  uint64_t v14 = type metadata accessor for Morphology.SupportedLanguage(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v158 = v14;
  uint64_t v159 = v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v151 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v161 = (char *)&v142 - v18;
  uint64_t v19 = type metadata accessor for GrammaticalNumber(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for GrammaticalGender(0LL);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&__int128 v164 = 0LL;
  id v27 = [v25 propertyListWithData:isa options:0 format:0 error:&v164];

  uint64_t v28 = v164;
  if (!v27)
  {
    id v38 = (id)v164;
    uint64_t v39 = _convertNSErrorToError(_:)(v28);

    swift_willThrow(v40);
    swift_errorRelease(v39);
    goto LABEL_10;
  }

  id v29 = (id)v164;
  _bridgeAnyObjectToAny(_:)(&v164, v27);
  swift_unknownObjectRelease(v27);
  uint64_t v30 = sub_10000E624(&qword_1000B0030);
  if ((swift_dynamicCast(&v162, &v164, (char *)&type metadata for Any + 8, v30, 6LL) & 1) == 0)
  {
LABEL_10:
    uint64_t v41 = type metadata accessor for Explosion(0LL);
    unint64_t v42 = sub_10001295C();
    swift_allocError(v41, v42, 0LL, 0LL);
    uint64_t v43 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B8F0LL,  0xD000000000000016LL,  0x800000010008B920LL,  0xD00000000000001FLL,  0x800000010008B940LL);
    return swift_willThrow(v43);
  }

  uint64_t v150 = v1;
  uint64_t v31 = v10;
  uint64_t v32 = v9;
  uint64_t v33 = v162;
  Morphology.init()();
  if (*(void *)(v33 + 16) && (unint64_t v34 = sub_100067C94(0xD000000000000011LL, 0x800000010008B960LL), (v35 & 1) != 0))
  {
    sub_10001533C(*(void *)(v33 + 56) + 32 * v34, (uint64_t)&v164);
    sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
    if (!*(void *)(v33 + 16)
      || (unint64_t v36 = sub_100067C94(0xD000000000000011LL, 0x800000010008B960LL), (v37 & 1) == 0)
      || (sub_10001533C(*(void *)(v33 + 56) + 32 * v36, (uint64_t)&v164),
          (swift_dynamicCast(&v162, &v164, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0))
    {
      swift_bridgeObjectRelease(v33);
      uint64_t v56 = type metadata accessor for Explosion(0LL);
      unint64_t v57 = sub_10001295C();
      swift_allocError(v56, v57, 0LL, 0LL);
      unint64_t v58 = 0xD000000000000013LL;
      uint64_t v59 = "GenderIncorrectType";
LABEL_66:
      uint64_t v134 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B8F0LL,  0x6D726F4661746144LL,  0xEF726F7272457461LL,  v58,  (unint64_t)(v59 - 32) | 0x8000000000000000LL);
      swift_willThrow(v134);
      uint64_t v135 = type metadata accessor for Morphology(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v135 - 8) + 8LL))(a1, v135);
    }

    GrammaticalGender.init(_:)(v162, v163);
    Morphology.grammaticalGender.setter(v24);
  }

  else
  {
    __int128 v164 = 0u;
    __int128 v165 = 0u;
    sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
  }

  if (!*(void *)(v33 + 16) || (unint64_t v45 = sub_100067C94(0x7265626D756ELL, 0xE600000000000000LL), (v46 & 1) == 0))
  {
    __int128 v164 = 0u;
    __int128 v165 = 0u;
    sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
    uint64_t v47 = v31;
    goto LABEL_19;
  }

  sub_10001533C(*(void *)(v33 + 56) + 32 * v45, (uint64_t)&v164);
  sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
  if (!*(void *)(v33 + 16)
    || (uint64_t v47 = v31, v48 = sub_100067C94(0x7265626D756ELL, 0xE600000000000000LL), (v49 & 1) == 0)
    || (sub_10001533C(*(void *)(v33 + 56) + 32 * v48, (uint64_t)&v164),
        (swift_dynamicCast(&v162, &v164, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v33);
    uint64_t v60 = type metadata accessor for Explosion(0LL);
    unint64_t v61 = sub_10001295C();
    swift_allocError(v60, v61, 0LL, 0LL);
    unint64_t v58 = 0xD000000000000013LL;
    uint64_t v59 = "NumberIncorrectType";
    goto LABEL_66;
  }

  GrammaticalNumber.init(_:)(v162, v163);
  Morphology.number.setter(v21);
LABEL_19:
  uint64_t v50 = v150;
  uint64_t v51 = v158;
  if (!*(void *)(v33 + 16) || (unint64_t v52 = sub_100067C94(0x72506D6F74737563LL, 0xEE00736E756F6E6FLL), (v53 & 1) == 0))
  {
    __int128 v164 = 0u;
    __int128 v165 = 0u;
    swift_bridgeObjectRelease(v33);
    return sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
  }

  sub_10001533C(*(void *)(v33 + 56) + 32 * v52, (uint64_t)&v164);
  sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
  if (*(void *)(v33 + 16) && (unint64_t v54 = sub_100067C94(0x72506D6F74737563LL, 0xEE00736E756F6E6FLL), (v55 & 1) != 0))
  {
    sub_10001533C(*(void *)(v33 + 56) + 32 * v54, (uint64_t)&v164);
  }

  else
  {
    __int128 v164 = 0u;
    __int128 v165 = 0u;
  }

  uint64_t v62 = v161;
  swift_bridgeObjectRelease(v33);
  if (!*((void *)&v165 + 1))
  {
    sub_100012EF8((uint64_t)&v164, &qword_1000B0018);
    goto LABEL_65;
  }

  uint64_t v63 = sub_10000E624(&qword_1000B0E30);
  if ((swift_dynamicCast(&v162, &v164, (char *)&type metadata for Any + 8, v63, 6LL) & 1) == 0)
  {
LABEL_65:
    uint64_t v132 = type metadata accessor for Explosion(0LL);
    unint64_t v133 = sub_10001295C();
    swift_allocError(v132, v133, 0LL, 0LL);
    unint64_t v58 = 0xD00000000000001ALL;
    uint64_t v59 = "CustomPronounIncorrectType";
    goto LABEL_66;
  }

  uint64_t v143 = a1;
  uint64_t v64 = v162;
  uint64_t v65 = static Morphology.SupportedLanguage.allCases.getter();
  uint64_t v66 = v65;
  uint64_t v67 = *(void *)(v65 + 16);
  if (v67)
  {
    unint64_t v68 = (*(unsigned __int8 *)(v159 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80);
    uint64_t v142 = v65;
    unint64_t v69 = v65 + v68;
    uint64_t v70 = *(void *)(v159 + 72);
    uint64_t v149 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v159 + 16);
    uint64_t v148 = &_swiftEmptyArrayStorage;
    uint64_t v144 = 0x800000010008B9A0LL;
    uint64_t v147 = v32;
    uint64_t v71 = v70;
    uint64_t v146 = v64;
    uint64_t v145 = v70;
    for (uint64_t i = v149(v62, v65 + v68, v51); ; uint64_t i = v149(v74, v69, v51))
    {
      uint64_t v75 = Morphology.SupportedLanguage.stringRepresentation.getter(i);
      if (v76)
      {
        uint64_t v77 = v76;
        if (*(void *)(v64 + 16) && (unint64_t v78 = sub_100067C94(v75, v76), (v79 & 1) != 0))
        {
          uint64_t v80 = *(void *)(*(void *)(v64 + 56) + 8 * v78);
          swift_bridgeObjectRetain(v80);
          __n128 v81 = swift_bridgeObjectRelease(v77);
          MorphologyCustomPronoun.init()(v81);
          if (*(void *)(v80 + 16)
            && (unint64_t v83 = sub_100067C94(0x467463656A627573LL, 0xEB000000006D726FLL), (v84 & 1) != 0))
          {
            uint64_t v85 = (uint64_t *)(*(void *)(v80 + 56) + 16 * v83);
            uint64_t v87 = *v85;
            uint64_t v86 = v85[1];
            __n128 v82 = swift_bridgeObjectRetain(v86);
          }

          else
          {
            uint64_t v87 = 0LL;
            uint64_t v86 = 0LL;
          }

          MorphologyCustomPronoun.subjectForm.setter(v87, v86, v82);
          if (*(void *)(v80 + 16)
            && (unint64_t v89 = sub_100067C94(0x6F467463656A626FLL, 0xEA00000000006D72LL), (v90 & 1) != 0))
          {
            uint64_t v91 = (uint64_t *)(*(void *)(v80 + 56) + 16 * v89);
            uint64_t v93 = *v91;
            uint64_t v92 = v91[1];
            __n128 v88 = swift_bridgeObjectRetain(v92);
          }

          else
          {
            uint64_t v93 = 0LL;
            uint64_t v92 = 0LL;
          }

          MorphologyCustomPronoun.objectForm.setter(v93, v92, v88);
          if (*(void *)(v80 + 16)
            && (unint64_t v95 = sub_100067C94(0x6973736573736F70LL, 0xEE006D726F466576LL), (v96 & 1) != 0))
          {
            uint64_t v97 = (uint64_t *)(*(void *)(v80 + 56) + 16 * v95);
            uint64_t v99 = *v97;
            uint64_t v98 = v97[1];
            __n128 v94 = swift_bridgeObjectRetain(v98);
          }

          else
          {
            uint64_t v99 = 0LL;
            uint64_t v98 = 0LL;
          }

          MorphologyCustomPronoun.possessiveForm.setter(v99, v98, v94);
          if (*(void *)(v80 + 16) && (unint64_t v101 = sub_100067C94(0xD000000000000017LL, v144), (v102 & 1) != 0))
          {
            uint64_t v103 = (uint64_t *)(*(void *)(v80 + 56) + 16 * v101);
            uint64_t v105 = *v103;
            uint64_t v104 = v103[1];
            __n128 v100 = swift_bridgeObjectRetain(v104);
          }

          else
          {
            uint64_t v105 = 0LL;
            uint64_t v104 = 0LL;
          }

          MorphologyCustomPronoun.possessiveAdjectiveForm.setter(v105, v104, v100);
          if (*(void *)(v80 + 16)
            && (unint64_t v106 = sub_100067C94(0x766978656C666572LL, 0xED00006D726F4665LL), (v107 & 1) != 0))
          {
            uint64_t v108 = (uint64_t *)(*(void *)(v80 + 56) + 16 * v106);
            uint64_t v109 = *v108;
            uint64_t v110 = v108[1];
            swift_bridgeObjectRetain(v110);
          }

          else
          {
            uint64_t v109 = 0LL;
            uint64_t v110 = 0LL;
          }

          __n128 v111 = swift_bridgeObjectRelease(v80);
          uint64_t v112 = v110;
          uint64_t v113 = v160;
          MorphologyCustomPronoun.reflexiveForm.setter(v109, v112, v111);
          uint64_t v114 = v151;
          uint64_t v115 = v158;
          v149(v151, (unint64_t)v161, v158);
          uint64_t v116 = v47;
          char v117 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
          uint64_t v118 = v152;
          v117(v152, v113, v147);
          uint64_t v119 = (uint64_t)v153;
          MorphologyCustomPronounPair.init(with:pronoun:)(v114, v118);
          if (v50)
          {
            swift_errorRelease(v50);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 56))(v119, 1LL, 1LL, v157);
            swift_bridgeObjectRelease(v148);
            swift_bridgeObjectRelease(v142);
            swift_bridgeObjectRelease(v146);
            sub_100012EF8(v119, &qword_1000B0E28);
            uint64_t v138 = type metadata accessor for Explosion(0LL);
            unint64_t v139 = sub_10001295C();
            swift_allocError(v138, v139, 0LL, 0LL);
            uint64_t v140 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008B8F0LL,  0x6D726F4661746144LL,  0xEF726F7272457461LL,  0xD000000000000020LL,  0x800000010008B9C0LL);
            swift_willThrow(v140);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v160, v147);
            (*(void (**)(char *, uint64_t))(v159 + 8))(v161, v115);
            uint64_t v141 = type metadata accessor for Morphology(0LL);
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v141 - 8) + 8LL))(v143, v141);
          }

          uint64_t v121 = v156;
          uint64_t v120 = v157;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v119, 0LL, 1LL, v157);
          __n128 v122 = *(void (**)(char *, uint64_t, uint64_t))(v121 + 32);
          uint64_t v123 = v154;
          v122(v154, v119, v120);
          (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v155, v123, v120);
          unint64_t v124 = (unint64_t)v148;
          if ((swift_isUniquelyReferenced_nonNull_native(v148) & 1) == 0) {
            unint64_t v124 = sub_1000330B0(0, *(void *)(v124 + 16) + 1LL, 1, v124);
          }
          uint64_t v125 = v147;
          unint64_t v127 = *(void *)(v124 + 16);
          unint64_t v126 = *(void *)(v124 + 24);
          if (v127 >= v126 >> 1) {
            unint64_t v124 = sub_1000330B0(v126 > 1, v127 + 1, 1, v124);
          }
          *(void *)(v124 + 16) = v127 + 1;
          uint64_t v128 = (char *)v124;
          uint64_t v129 = v156;
          unint64_t v130 = (*(unsigned __int8 *)(v129 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
          uint64_t v148 = v128;
          uint64_t v131 = v157;
          v122(&v128[v130 + *(void *)(v156 + 72) * v127], (uint64_t)v155, v157);
          (*(void (**)(char *, uint64_t))(v129 + 8))(v154, v131);
          uint64_t v47 = v116;
          (*(void (**)(char *, uint64_t))(v116 + 8))(v160, v125);
          uint64_t v51 = v158;
          uint64_t v64 = v146;
          uint64_t v71 = v145;
        }

        else
        {
          __n128 v73 = swift_bridgeObjectRelease(v77);
        }
      }

      uint64_t v74 = v161;
      (*(void (**)(char *, uint64_t, __n128))(v159 + 8))(v161, v51, v73);
      v69 += v71;
      if (!--v67)
      {
        swift_bridgeObjectRelease(v64);
        __n128 v136 = swift_bridgeObjectRelease(v142);
        uint64_t v137 = v148;
        return Morphology.customPronouns.setter(v137, v136);
      }
    }
  }

  swift_bridgeObjectRelease(v64);
  __n128 v136 = swift_bridgeObjectRelease(v66);
  uint64_t v137 = &_swiftEmptyArrayStorage;
  return Morphology.customPronouns.setter(v137, v136);
}

ValueMetadata *type metadata accessor for AnimatedImageMetadataUnpacker()
{
  return &type metadata for AnimatedImageMetadataUnpacker;
}

uint64_t sub_10004B4A4()
{
  return sub_10000E9D8( &qword_1000B0E38,  (uint64_t (*)(uint64_t))&type metadata accessor for AnimatedImageMetadata,  (uint64_t)&protocol conformance descriptor for AnimatedImageMetadata);
}

uint64_t sub_10004B4D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v6 = sub_10000E624(&qword_1000B0E40);
  __chkstk_darwin(v6);
  uint64_t v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for Image(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = type metadata accessor for File(0LL);
  uint64_t v35 = v16;
  unint64_t v36 = &protocol witness table for File;
  uint64_t v17 = sub_10001FA94(v34);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v17, a1, v16);
  uint64_t v18 = type metadata accessor for Image.Encoding(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v11, 1LL, 1LL, v18);
  uint64_t v19 = Image.init(provider:maxPixelDimension:enforcedEncoding:)(v34, 0LL, 1LL, v11);
  Image.provider.getter(v34, v19);
  uint64_t v20 = v35;
  uint64_t v21 = v36;
  sub_10000FFDC(v34, v35);
  uint64_t v33 = a2;
  uint64_t v30 = sub_10004BB00;
  uint64_t v31 = &v32;
  uint64_t v22 = type metadata accessor for AnimatedImageMetadata(0LL);
  ImageProvider.withImageSource<A>(_:)(v8, sub_10004BB18, v29, v20, v22, v21);
  if (v3)
  {
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  }

  else
  {
    uint64_t v23 = v37;
    uint64_t v24 = *(void *)(v22 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v8, 1LL, v22) == 1)
    {
      sub_100012EF8((uint64_t)v8, &qword_1000B0E40);
      sub_100010D60(v34);
      uint64_t v25 = type metadata accessor for Explosion(0LL);
      uint64_t v26 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v25, v26, 0LL, 0LL);
      uint64_t v27 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000029LL,  0x800000010008BA30LL,  0xD000000000000012LL,  0x800000010008BA60LL,  0xD000000000000013LL,  0x800000010008BA80LL);
      swift_willThrow(v27);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    }

    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    (*(void (**)(uint64_t, void *, uint64_t))(v24 + 32))(v23, v8, v22);
  }

  return sub_100010D60(v34);
}

void sub_10004B7D8(CGImageSource *a1@<X0>, uint64_t a2@<X8>)
{
  v30[3] = a2;
  uint64_t v4 = type metadata accessor for ImageProperties(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = CGImageSourceRef.utTypeString.getter(v6);
  if (!v10)
  {
    uint64_t v21 = type metadata accessor for Explosion(0LL);
    uint64_t v22 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v21, v22, 0LL, 0LL);
    unint64_t v23 = 0xD000000000000012LL;
    unint64_t v24 = 0xD000000000000014LL;
    unint64_t v25 = 0x800000010008BA60LL;
    unint64_t v26 = 0x800000010008B6E0LL;
LABEL_7:
    uint64_t v29 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000029LL, 0x800000010008BA30LL, v23, v25, v24, v26);
    swift_willThrow(v29);
    return;
  }

  uint64_t v11 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = sub_100068A48(v9, v10);
  if ((v13 & 1) == 0)
  {
    uint64_t v27 = type metadata accessor for Explosion(0LL);
    uint64_t v28 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v27, v28, 0LL, 0LL);
    unint64_t v23 = 0xD000000000000011LL;
    unint64_t v25 = 0x800000010008BAA0LL;
    unint64_t v24 = v11;
    unint64_t v26 = v12;
    goto LABEL_7;
  }

  uint64_t v14 = CGImageSourceRef.imageProperties()(v13);
  double v15 = ImageProperties.size.getter(v14);
  double v17 = v16;
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v19 = AnimatedImageMetadata.Constraints.maxCount.getter(v18);
  uint64_t v20 = sub_10004C248(a1, v11, v12, v19);
  if (v2) {
    swift_bridgeObjectRelease(v12);
  }
  else {
    AnimatedImageMetadata.init(durationsValue:pixelSizeValue:utTypeString:)(v20, v11, v12, v15, v17);
  }
}

uint64_t sub_10004BA24@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AnimatedImageMetadata(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = a2(a1);
  if (!v3)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a3, 0LL, 1LL, v7);
  }

  return result;
}

uint64_t sub_10004BAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10004B4D0(a1, a2, a3);
}

void sub_10004BB00(CGImageSource *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10004BB18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004BA24(a1, *(uint64_t (**)(uint64_t))(v2 + 16), a2);
}

double sub_10004BB30(void *a1)
{
  double v1 = 0.1;
  if (!a1) {
    return v1;
  }
  uint64_t v3 = (id)kCGImagePropertyGIFDictionary;
  id v4 = a1;
  id v5 = objc_msgSend(v4, "__swift_objectForKeyedSubscript:", v3);
  if (v5)
  {
    id v6 = v5;
    _bridgeAnyObjectToAny(_:)(&v34, v5);
    swift_unknownObjectRelease(v6);
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
  }

  sub_10004C538((uint64_t)&v34, (uint64_t)v36);
  if (v37)
  {
    unint64_t v7 = sub_10004C580();
    if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, v7, 6LL) & 1) != 0)
    {
      uint64_t v8 = v38;

      uint64_t v9 = (id)kCGImagePropertyGIFUnclampedDelayTime;
      id v10 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
      if (v10)
      {
        id v11 = v10;
        _bridgeAnyObjectToAny(_:)(&v34, v10);
        swift_unknownObjectRelease(v11);
      }

      else
      {
        __int128 v34 = 0u;
        __int128 v35 = 0u;
      }

      sub_10004C538((uint64_t)&v34, (uint64_t)v36);
      if (v37)
      {
        if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) != 0)
        {

          goto LABEL_70;
        }
      }

      else
      {

        sub_100012EF8((uint64_t)v36, &qword_1000B0018);
      }

      uint64_t v9 = (id)kCGImagePropertyGIFDelayTime;
      id v30 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
      if (!v30) {
        goto LABEL_67;
      }
LABEL_59:
      id v31 = v30;
      _bridgeAnyObjectToAny(_:)(&v34, v30);

      swift_unknownObjectRelease(v31);
LABEL_68:
      sub_10004C538((uint64_t)&v34, (uint64_t)v36);
      if (v37)
      {
        if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0)
        {

          return v1;
        }

        goto LABEL_70;
      }

LABEL_73:
      sub_100012EF8((uint64_t)v36, &qword_1000B0018);
      return v1;
    }
  }

  else
  {

    sub_100012EF8((uint64_t)v36, &qword_1000B0018);
  }

  uint64_t v12 = (id)kCGImagePropertyPNGDictionary;
  id v13 = objc_msgSend(v4, "__swift_objectForKeyedSubscript:", v12);
  if (v13)
  {
    id v14 = v13;
    _bridgeAnyObjectToAny(_:)(&v34, v13);
    swift_unknownObjectRelease(v14);
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
  }

  sub_10004C538((uint64_t)&v34, (uint64_t)v36);
  if (!v37)
  {

    sub_100012EF8((uint64_t)v36, &qword_1000B0018);
    goto LABEL_20;
  }

  unint64_t v15 = sub_10004C580();
  if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, v15, 6LL) & 1) == 0)
  {

LABEL_20:
    uint64_t v18 = (id)kCGImagePropertyHEICSDictionary;
    id v19 = objc_msgSend(v4, "__swift_objectForKeyedSubscript:", v18);
    if (v19)
    {
      id v20 = v19;
      _bridgeAnyObjectToAny(_:)(&v34, v19);
      swift_unknownObjectRelease(v20);
    }

    else
    {
      __int128 v34 = 0u;
      __int128 v35 = 0u;
    }

    sub_10004C538((uint64_t)&v34, (uint64_t)v36);
    if (v37)
    {
      unint64_t v21 = sub_10004C580();
      if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, v21, 6LL) & 1) != 0)
      {
        uint64_t v8 = v38;

        uint64_t v9 = (id)kCGImagePropertyHEICSUnclampedDelayTime;
        id v22 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
        if (v22)
        {
          id v23 = v22;
          _bridgeAnyObjectToAny(_:)(&v34, v22);
          swift_unknownObjectRelease(v23);
        }

        else
        {
          __int128 v34 = 0u;
          __int128 v35 = 0u;
        }

        sub_10004C538((uint64_t)&v34, (uint64_t)v36);
        if (v37)
        {
        }

        else
        {

          sub_100012EF8((uint64_t)v36, &qword_1000B0018);
        }

        uint64_t v9 = (id)kCGImagePropertyHEICSDelayTime;
        id v30 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
        if (v30) {
          goto LABEL_59;
        }
        goto LABEL_67;
      }
    }

    else
    {

      sub_100012EF8((uint64_t)v36, &qword_1000B0018);
    }

    unint64_t v24 = (id)kCGImagePropertyWebPDictionary;
    id v25 = objc_msgSend(v4, "__swift_objectForKeyedSubscript:", v24);
    if (v25)
    {
      id v26 = v25;
      _bridgeAnyObjectToAny(_:)(&v34, v25);
      swift_unknownObjectRelease(v26);
    }

    else
    {
      __int128 v34 = 0u;
      __int128 v35 = 0u;
    }

    sub_10004C538((uint64_t)&v34, (uint64_t)v36);
    if (!v37)
    {

      goto LABEL_73;
    }

    unint64_t v27 = sub_10004C580();
    if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, v27, 6LL) & 1) == 0)
    {

      return v1;
    }

    uint64_t v8 = v38;

    uint64_t v9 = (id)kCGImagePropertyWebPUnclampedDelayTime;
    id v28 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
    if (v28)
    {
      id v29 = v28;
      _bridgeAnyObjectToAny(_:)(&v34, v28);
      swift_unknownObjectRelease(v29);
    }

    else
    {
      __int128 v34 = 0u;
      __int128 v35 = 0u;
    }

    sub_10004C538((uint64_t)&v34, (uint64_t)v36);
    if (v37)
    {
    }

    else
    {

      sub_100012EF8((uint64_t)v36, &qword_1000B0018);
    }

    uint64_t v9 = (id)kCGImagePropertyWebPDelayTime;
    id v30 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
    if (v30) {
      goto LABEL_59;
    }
    goto LABEL_67;
  }

  uint64_t v8 = v38;

  uint64_t v9 = (id)kCGImagePropertyAPNGUnclampedDelayTime;
  id v16 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
  if (v16)
  {
    id v17 = v16;
    _bridgeAnyObjectToAny(_:)(&v34, v16);
    swift_unknownObjectRelease(v17);
  }

  else
  {
    __int128 v34 = 0u;
    __int128 v35 = 0u;
  }

  sub_10004C538((uint64_t)&v34, (uint64_t)v36);
  if (!v37)
  {

    sub_100012EF8((uint64_t)v36, &qword_1000B0018);
LABEL_51:
    uint64_t v9 = (id)kCGImagePropertyAPNGDelayTime;
    id v30 = objc_msgSend(v8, "__swift_objectForKeyedSubscript:", v9);
    if (v30) {
      goto LABEL_59;
    }
LABEL_67:

    __int128 v34 = 0u;
    __int128 v35 = 0u;
    goto LABEL_68;
  }

  if ((swift_dynamicCast(&v38, v36, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0)
  {

    goto LABEL_51;
  }

char *sub_10004C248(CGImageSource *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1;
  id v10 = (char *)a1;
  uint64_t v12 = CGImageSourceRef.frameCount.getter();
  if ((a2 != 0x682E63696C627570LL || a3 != 0xEB00000000636965LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x682E63696C627570LL, 0xEB00000000636965LL, 0LL) & 1) == 0)
  {
    double v15 = 1.0;
    if (v12 > a4) {
      double v15 = (double)v12 / (double)a4;
    }
    if (v12 < 0) {
      goto LABEL_39;
    }
    if (v12)
    {
      int64_t v16 = 0LL;
      id v10 = (char *)&_swiftEmptyArrayStorage;
      double v17 = 0.0;
      double v5 = 0.0;
      do
      {
        if (v12 == v16)
        {
          __break(1u);
          goto LABEL_38;
        }

        double v18 = v15 + v17;
        if (v15 + v17 <= (double)v16)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
            id v10 = sub_1000330C4(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
          }
          unint64_t v20 = *((void *)v10 + 2);
          unint64_t v19 = *((void *)v10 + 3);
          if (v20 >= v19 >> 1) {
            id v10 = sub_1000330C4((char *)(v19 > 1), v20 + 1, 1, v10);
          }
          *((void *)v10 + 2) = v20 + 1;
          *(double *)&v10[8 * v20 + 32] = v5;
          double v5 = 0.0;
        }

        else
        {
          double v18 = v17;
        }

        CFDictionaryRef v21 = CGImageSourceCopyPropertiesAtIndex(v9, v16, 0LL);
        double v22 = sub_10004BB30(v21);
        if (v4)
        {

          swift_bridgeObjectRelease(v10);
          return v10;
        }

        double v23 = v22;
        ++v16;

        double v5 = v5 + v23;
        double v17 = v18;
      }

      while (v12 != v16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_34:
        uint64_t v12 = *((void *)v10 + 2);
        unint64_t v11 = *((void *)v10 + 3);
        uint64_t v9 = (CGImageSource *)(v12 + 1);
        if (v12 < v11 >> 1)
        {
LABEL_35:
          *((void *)v10 + 2) = v9;
          *(double *)&v10[8 * v12 + 32] = v5;
          return v10;
        }

LABEL_40:
        id v10 = sub_1000330C4((char *)(v11 > 1), (int64_t)v9, 1, v10);
        goto LABEL_35;
      }
    }

    else
    {
      id v10 = (char *)&_swiftEmptyArrayStorage;
      double v5 = 0.0;
    }

    id v10 = sub_1000330C4(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    goto LABEL_34;
  }

  if (v12 >= a4) {
    uint64_t v12 = a4;
  }
  if (v12 < 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  if (!v12) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  id v10 = sub_1000330C4(0LL, 1LL, 1, (char *)&_swiftEmptyArrayStorage);
  unint64_t v13 = *((void *)v10 + 2);
  do
  {
    unint64_t v14 = *((void *)v10 + 3);
    if (v13 >= v14 >> 1) {
      id v10 = sub_1000330C4((char *)(v14 > 1), v13 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v13 + 1;
    *(void *)&v10[8 * v13++ + 32] = 0x3FB1111111111111LL;
    --v12;
  }

  while (v12);
  return v10;
}

uint64_t sub_10004C538(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B0018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10004C580()
{
  unint64_t result = qword_1000B0038;
  if (!qword_1000B0038)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSDictionary);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B0038);
  }

  return result;
}

uint64_t destroy for AttributionInfoKeyedUnarchiverSchema(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for AttributionInfoKeyedUnarchiverSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 13_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 138);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  __int128 v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AttributionInfoKeyedUnarchiverSchema(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  *(void *)(a1 + 32) = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = a2[6];
  uint64_t v9 = a2[7];
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = a2[10];
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 88);
  *(void *)(a1 + 80) = v12;
  __int128 v13 = *((_OWORD *)a2 + 6);
  __int128 v14 = *((_OWORD *)a2 + 7);
  __int128 v15 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 13_Block_object_dispose(va, 8) = *(_OWORD *)((char *)a2 + 138);
  *(_OWORD *)(a1 + 112) = v14;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v15;
  *(_OWORD *)(a1 + 96) = v13;
  return a1;
}

__n128 initializeWithTake for AttributionInfoKeyedUnarchiverSchema(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 13_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 138);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AttributionInfoKeyedUnarchiverSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  __int128 v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 13_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 138);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 154)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_WORD *)(result + 152) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 154) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 154) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributionInfoKeyedUnarchiverSchema()
{
  return &type metadata for AttributionInfoKeyedUnarchiverSchema;
}

uint64_t sub_10004C914()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004C93C + 4 * byte_100090830[*v0]))( 7827565LL,  0xE300000000000000LL);
}

uint64_t sub_10004C93C()
{
  return 6845549LL;
}

uint64_t sub_10004C948(uint64_t a1)
{
  return a1 + 1024;
}

uint64_t sub_10004C950()
{
  return 115LL;
}

uint64_t sub_10004C95C()
{
  return 29811LL;
}

uint64_t sub_10004C968@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10004CD8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004C98C(uint64_t a1)
{
  unint64_t v2 = sub_10004DB80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004C9B4(uint64_t a1)
{
  unint64_t v2 = sub_10004DB80();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10004C9DC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

void sub_10004CA24(char *a1)
{
}

void sub_10004CA30()
{
}

void sub_10004CA3C()
{
  __asm { BR              X10 }

uint64_t sub_10004CA78(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_10004CB08(uint64_t a1)
{
}

unint64_t sub_10004CB10@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004D1D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004CB3C()
{
  return ((uint64_t (*)(void))((char *)sub_10004CB6C + 4 * byte_10009083C[*v0]))();
}

void sub_10004CB6C(void *a1@<X8>)
{
  *a1 = 0x6C737365636361LL;
  a1[1] = v1;
}

void sub_10004CB84(void *a1@<X8>)
{
  *a1 = 0x692D656C646E7562LL;
  a1[1] = 0xE900000000000064LL;
}

void sub_10004CBA4(void *a1@<X8>)
{
  *a1 = 1701667182LL;
  a1[1] = 0xE400000000000000LL;
}

void sub_10004CBB8(void *a1@<X8>)
{
  *a1 = 0x68736E656770LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_10004CBD0(void *a1@<X8>)
{
  *a1 = 0x77736E656770LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_10004CBE8(void *a1@<X8>)
{
  *a1 = 0x637A736E656770LL;
  a1[1] = v1;
}

uint64_t sub_10004CC00()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004CC30 + 4 * byte_100090843[*v0]))( 0x64692D6D616461LL,  0xE700000000000000LL);
}

uint64_t sub_10004CC30()
{
  return 0x6C737365636361LL;
}

uint64_t sub_10004CC44()
{
  return 0x692D656C646E7562LL;
}

uint64_t sub_10004CC60()
{
  return 1701667182LL;
}

uint64_t sub_10004CC70()
{
  return 0x68736E656770LL;
}

uint64_t sub_10004CC84()
{
  return 0x77736E656770LL;
}

uint64_t sub_10004CC98()
{
  return 0x637A736E656770LL;
}

unint64_t sub_10004CCAC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004D1D0(a1);
  *a2 = result;
  return result;
}

void sub_10004CCD0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10004CCDC(uint64_t a1)
{
  unint64_t v2 = sub_10004D760();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004CD04(uint64_t a1)
{
  unint64_t v2 = sub_10004D760();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10004CD2C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v9[7];
    a2[6] = v9[6];
    a2[7] = v5;
    a2[8] = v10[0];
    *(_OWORD *)((char *)a2 + 13_Block_object_dispose(va, 8) = *(_OWORD *)((char *)v10 + 10);
    __int128 v6 = v9[3];
    a2[2] = v9[2];
    a2[3] = v6;
    __int128 v7 = v9[5];
    a2[4] = v9[4];
    a2[5] = v7;
    double result = *(double *)v9;
    __int128 v8 = v9[1];
    *a2 = v9[0];
    a2[1] = v8;
  }

  return result;
}

uint64_t sub_10004CD8C(uint64_t a1, unint64_t a2)
{
  if (a1 == 7827565 && a2 == 0xE300000000000000LL)
  {
    unint64_t v5 = 0xE300000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7827565LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 6845549 && a2 == 0xE300000000000000LL)
  {
    unint64_t v7 = 0xE300000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6845549LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 7828589 && a2 == 0xE300000000000000LL)
  {
    unint64_t v8 = 0xE300000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7828589LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 115 && a2 == 0xE100000000000000LL)
  {
    unint64_t v9 = 0xE100000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(115LL, 0xE100000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 29811 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL);
    return 4LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(29811LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_10004CF40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0E78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10004DB80();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  char v27 = 0;
  unint64_t v12 = sub_10004DBC4();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v24,  &type metadata for DoubleValue,  &v27,  v5,  &type metadata for DoubleValue,  v12);
  uint64_t v23 = v24;
  int v13 = v25;
  char v27 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v24,  &type metadata for DoubleValue,  &v27,  v5,  &type metadata for DoubleValue,  v12);
  int v26 = v13;
  uint64_t v22 = v24;
  int v14 = v25;
  char v27 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v24,  &type metadata for DoubleValue,  &v27,  v5,  &type metadata for DoubleValue,  v12);
  int v20 = v14;
  uint64_t v21 = v24;
  LOBYTE(v14) = v25;
  char v27 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v24,  &type metadata for DoubleValue,  &v27,  v5,  &type metadata for DoubleValue,  v12);
  uint64_t v15 = v21;
  uint64_t v19 = v24;
  HIDWORD(v1_Block_object_dispose(va, 8) = v25;
  LOBYTE(v24) = 4;
  char v16 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010D60(a1);
  *(void *)a2 = v23;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v26;
  *(void *)(a2 + 16) = v22;
  *(_BYTE *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = v14;
  *(void *)(a2 + 4_Block_object_dispose(va, 8) = v19;
  *(_BYTE *)(a2 + 56) = BYTE4(v18);
  *(_BYTE *)(a2 + 57) = v16 & 1;
  return result;
}

unint64_t sub_10004D1D0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3B38, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

void sub_10004D218(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0E48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  unint64_t v61 = a1;
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10004D760();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys,  &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(v61);
  }

  else
  {
    uint64_t v12 = v6;
    unint64_t v58 = a2;
    LOBYTE(v71) = 0;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v71, v5);
    int v15 = v14;
    char v98 = v14 & 1;
    LOBYTE(v71) = 1;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v71, v5);
    int v56 = v15;
    uint64_t v57 = v16;
    LOBYTE(v71) = 2;
    uint64_t v18 = v17;
    swift_bridgeObjectRetain(v17);
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v71, v5);
    uint64_t v60 = v18;
    uint64_t v55 = v19;
    LOBYTE(v71) = 3;
    uint64_t v21 = v20;
    swift_bridgeObjectRetain(v20);
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v71, v5);
    uint64_t v59 = v21;
    uint64_t v54 = v22;
    LOBYTE(v71) = 4;
    uint64_t v24 = v23;
    __n128 v25 = swift_bridgeObjectRetain(v23);
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v71, v5, v25);
    uint64_t v26 = v24;
    char v97 = v27 & 1;
    LOBYTE(v71) = 5;
    LODWORD(v24) = v27;
    uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v71, v5, v28);
    int v51 = v24;
    uint64_t v52 = v29;
    LOBYTE(v24) = v30 & 1;
    char v96 = v30 & 1;
    char v99 = 6;
    unint64_t v31 = sub_10004D7A4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v91,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc,  &v99,  v5,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc,  v31);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v5);
    uint64_t v49 = *((void *)&v91 + 1);
    uint64_t v50 = v91;
    uint64_t v47 = *((void *)&v92 + 1);
    uint64_t v48 = v92;
    uint64_t v45 = *((void *)&v93 + 1);
    uint64_t v46 = v93;
    uint64_t v44 = v94;
    HIDWORD(v43) = v95;
    *(void *)&__int128 v62 = v13;
    BYTE8(v62) = v56 & 1;
    uint64_t v32 = v57;
    uint64_t v34 = v59;
    uint64_t v33 = v60;
    *(void *)&__int128 v63 = v57;
    *((void *)&v63 + 1) = v60;
    uint64_t v35 = v55;
    *(void *)&__int128 v64 = v55;
    *((void *)&v64 + 1) = v59;
    char v36 = v24;
    uint64_t v37 = v54;
    *(void *)&__int128 v65 = v54;
    *((void *)&v65 + 1) = v26;
    *(void *)&__int128 v66 = v53;
    BYTE8(v66) = v51 & 1;
    *(void *)&__int128 v67 = v52;
    BYTE8(v67) = v36;
    __int128 v68 = v91;
    __int128 v69 = v92;
    v70[0] = v93;
    *(void *)&v70[1] = v94;
    WORD4(v70[1]) = v95;
    sub_10004D7E8(&v62);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v26);
    sub_100010D60(v61);
    uint64_t v71 = v13;
    char v72 = v98;
    uint64_t v73 = v32;
    uint64_t v74 = v33;
    uint64_t v75 = v35;
    uint64_t v76 = v34;
    uint64_t v77 = v37;
    uint64_t v78 = v26;
    uint64_t v79 = v53;
    char v80 = v97;
    uint64_t v81 = v52;
    char v82 = v96;
    uint64_t v83 = v50;
    uint64_t v84 = v49;
    uint64_t v85 = v48;
    uint64_t v86 = v47;
    uint64_t v87 = v46;
    uint64_t v88 = v45;
    uint64_t v89 = v44;
    __int16 v90 = WORD2(v43);
    sub_10004D830(&v71);
    __int128 v38 = v69;
    uint64_t v39 = v58;
    v58[6] = v68;
    v39[7] = v38;
    v39[8] = v70[0];
    *(_OWORD *)((char *)v39 + 13_Block_object_dispose(va, 8) = *(_OWORD *)((char *)v70 + 10);
    __int128 v40 = v65;
    v39[2] = v64;
    v39[3] = v40;
    __int128 v41 = v67;
    v39[4] = v66;
    v39[5] = v41;
    __int128 v42 = v63;
    _OWORD *v39 = v62;
    v39[1] = v42;
  }

unint64_t sub_10004D760()
{
  unint64_t result = qword_1000B0E50;
  if (!qword_1000B0E50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000909DC, &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E50);
  }

  return result;
}

unint64_t sub_10004D7A4()
{
  unint64_t result = qword_1000B0E58;
  if (!qword_1000B0E58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000909B4, &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc);
    atomic_store(result, (unint64_t *)&qword_1000B0E58);
  }

  return result;
}

void *sub_10004D7E8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  swift_bridgeObjectRetain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *sub_10004D830(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[7];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10004D954 + 4 * byte_10009084F[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10004D988 + 4 * byte_10009084A[v4]))();
}

uint64_t sub_10004D988(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D990(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004D998LL);
  }
  return result;
}

uint64_t sub_10004D9A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004D9ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10004D9B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004D9B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributionInfoKeyedUnarchiverSchema.CodingKeys()
{
  return &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys;
}

__n128 initializeWithCopy for AttributionInfoKeyedUnarchiverSchema.Pgenszc(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema.Pgenszc( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema.Pgenszc( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 5_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 5_Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 57) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributionInfoKeyedUnarchiverSchema.Pgenszc()
{
  return &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc;
}

unint64_t sub_10004DAAC()
{
  unint64_t result = qword_1000B0E60;
  if (!qword_1000B0E60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10009098C, &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E60);
  }

  return result;
}

unint64_t sub_10004DAF4()
{
  unint64_t result = qword_1000B0E68;
  if (!qword_1000B0E68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000908C4, &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E68);
  }

  return result;
}

unint64_t sub_10004DB3C()
{
  unint64_t result = qword_1000B0E70;
  if (!qword_1000B0E70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000908EC, &type metadata for AttributionInfoKeyedUnarchiverSchema.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E70);
  }

  return result;
}

unint64_t sub_10004DB80()
{
  unint64_t result = qword_1000B0E80;
  if (!qword_1000B0E80)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090AE4,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E80);
  }

  return result;
}

unint64_t sub_10004DBC4()
{
  unint64_t result = qword_1000B0E88;
  if (!qword_1000B0E88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E158, &type metadata for DoubleValue);
    atomic_store(result, (unint64_t *)&qword_1000B0E88);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10004DC54 + 4 * byte_100090859[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10004DC88 + 4 * byte_100090854[v4]))();
}

uint64_t sub_10004DC88(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004DC90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004DC98LL);
  }
  return result;
}

uint64_t sub_10004DCA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004DCACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10004DCB0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004DCB8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys()
{
  return &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys;
}

unint64_t sub_10004DCD8()
{
  unint64_t result = qword_1000B0E90;
  if (!qword_1000B0E90)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090ABC,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E90);
  }

  return result;
}

unint64_t sub_10004DD20()
{
  unint64_t result = qword_1000B0E98;
  if (!qword_1000B0E98)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090A2C,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0E98);
  }

  return result;
}

unint64_t sub_10004DD68()
{
  unint64_t result = qword_1000B0EA0;
  if (!qword_1000B0EA0)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090A54,  &type metadata for AttributionInfoKeyedUnarchiverSchema.Pgenszc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0EA0);
  }

  return result;
}

ValueMetadata *type metadata accessor for EmojiImageMetadataUnpacker()
{
  return &type metadata for EmojiImageMetadataUnpacker;
}

uint64_t sub_10004DDBC()
{
  return sub_10000E9D8( &qword_1000B0EA8,  (uint64_t (*)(uint64_t))&type metadata accessor for EmojiImageMetadata,  (uint64_t)&protocol conformance descriptor for EmojiImageMetadata);
}

uint64_t sub_10004DDE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v5 = sub_10000E624(&qword_1000B0EB0);
  uint64_t v6 = __chkstk_darwin(v5);
  int v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v32 - v9);
  uint64_t v11 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Image(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for File(0LL);
  uint64_t v40 = v18;
  __int128 v41 = &protocol witness table for File;
  uint64_t v19 = sub_10001FA94(v39);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v19, a1, v18);
  uint64_t v20 = type metadata accessor for Image.Encoding(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v13, 1LL, 1LL, v20);
  uint64_t v21 = Image.init(provider:maxPixelDimension:enforcedEncoding:)(v39, 0LL, 1LL, v13);
  Image.provider.getter(v39, v21);
  uint64_t v22 = v40;
  uint64_t v23 = v41;
  sub_10000FFDC(v39, v40);
  uint64_t v38 = a2;
  uint64_t v35 = sub_10004EA48;
  char v36 = &v37;
  uint64_t v24 = type metadata accessor for EmojiImageMetadata(0LL);
  uint64_t v25 = v42;
  ImageProvider.withImageSource<A>(_:)(v10, sub_10004EA60, v34, v22, v24, v23);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    return sub_100010D60(v39);
  }

  else
  {
    uint64_t v27 = v33;
    sub_100010D60(v39);
    sub_10004EA78((uint64_t)v10, (uint64_t)v8);
    uint64_t v28 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v8, 1LL, v24) == 1)
    {
      sub_100012EF8((uint64_t)v8, &qword_1000B0EB0);
      uint64_t v29 = type metadata accessor for Explosion(0LL);
      uint64_t v30 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v29, v30, 0LL, 0LL);
      uint64_t v31 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000026LL,  0x800000010008BAC0LL,  0xD000000000000012LL,  0x800000010008BA60LL,  0x646174654D6C694ELL,  0xEB00000000617461LL);
      swift_willThrow(v31);
      sub_100012EF8((uint64_t)v10, &qword_1000B0EB0);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }

    else
    {
      sub_100012EF8((uint64_t)v10, &qword_1000B0EB0);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v27, v8, v24);
    }
  }

uint64_t sub_10004E140(CGImageSource *a1)
{
  int v2 = (id)CGImageSourceGetType(a1);
  if (!v2)
  {
    uint64_t v8 = type metadata accessor for Explosion(0LL);
    uint64_t v9 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v8, v9, 0LL, 0LL);
    unint64_t v10 = 0xD000000000000012LL;
    unint64_t v11 = 0xD000000000000014LL;
    unint64_t v12 = 0x800000010008BA60LL;
    unint64_t v13 = 0x800000010008B6E0LL;
LABEL_15:
    uint64_t v24 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000026LL, 0x800000010008BAC0LL, v10, v12, v11, v13);
    return swift_willThrow(v24);
  }

  int v3 = (__CFString *)v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v6 = v5;

  if (v4 == 0x682E63696C627570LL && v6 == 0xEB00000000636965LL)
  {
    unint64_t v7 = 0xEB00000000636965LL;
  }

  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 0x682E63696C627570LL, 0xEB00000000636965LL, 0LL) & 1) == 0)
    {
      uint64_t v22 = type metadata accessor for Explosion(0LL);
      uint64_t v23 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v22, v23, 0LL, 0LL);
      unint64_t v10 = 0xD000000000000011LL;
      unint64_t v12 = 0x800000010008BAA0LL;
      unint64_t v11 = v4;
      unint64_t v13 = v6;
      goto LABEL_15;
    }

    unint64_t v7 = v6;
  }

  swift_bridgeObjectRelease(v7);
  int64_t Count = CGImageSourceGetCount(a1);
  if (EmojiImageMetadata.Constraints.maxStrikeCount.getter() < Count)
  {
    uint64_t v15 = type metadata accessor for Explosion(0LL);
    uint64_t v16 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v15, v16, 0LL, 0LL);
    unint64_t v10 = 0xD000000000000013LL;
    unint64_t v12 = 0x800000010008BAF0LL;
    unint64_t v11 = 0x6B6972745378614DLL;
    unint64_t v13 = 0xEE00746E756F4365LL;
    goto LABEL_15;
  }

  if (Count < 1)
  {
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    CFDictionaryRef v17 = 0LL;
  }

  else
  {
    CFDictionaryRef v17 = CGImageSourceCopyPropertiesAtIndex(a1, 0LL, 0LL);
    if (v17)
    {
      uint64_t v18 = (id)kCGImagePropertyTIFFDictionary;
      uint64_t v19 = v17;
      id v20 = -[__CFDictionary __swift_objectForKeyedSubscript:](v19, "__swift_objectForKeyedSubscript:", v18);
      if (v20)
      {
        id v21 = v20;
        _bridgeAnyObjectToAny(_:)(&v56, v20);
        swift_unknownObjectRelease(v21);
      }

      else
      {
        __int128 v56 = 0u;
        __int128 v57 = 0u;
      }

      sub_10004C538((uint64_t)&v56, (uint64_t)v58);
      if (v59)
      {
        unint64_t v33 = sub_10004C580();
        if ((swift_dynamicCast(&v54, v58, (char *)&type metadata for Any + 8, v33, 6LL) & 1) != 0)
        {
          uint64_t v34 = v54;

          uint64_t v35 = (id)kCGImagePropertyTIFFDocumentName;
          id v36 = objc_msgSend(v34, "__swift_objectForKeyedSubscript:", v35);
          if (v36)
          {
            id v37 = v36;
            _bridgeAnyObjectToAny(_:)(&v56, v36);
            swift_unknownObjectRelease(v37);
          }

          else
          {
            __int128 v56 = 0u;
            __int128 v57 = 0u;
          }

          sub_10004C538((uint64_t)&v56, (uint64_t)v58);
          if (v59)
          {
            if (swift_dynamicCast( &v54,  v58,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
            {
              uint64_t v60 = v54;
              uint64_t v53 = v55;

              goto LABEL_34;
            }
          }

          else
          {

            sub_100012EF8((uint64_t)v58, &qword_1000B0018);
          }

          uint64_t v60 = 0LL;
          uint64_t v53 = 0LL;
LABEL_34:
          uint64_t v38 = (id)kCGImagePropertyTIFFImageDescription;
          id v39 = objc_msgSend(v34, "__swift_objectForKeyedSubscript:", v38);
          if (v39)
          {
            id v40 = v39;
            _bridgeAnyObjectToAny(_:)(&v56, v39);

            swift_unknownObjectRelease(v40);
          }

          else
          {

            __int128 v56 = 0u;
            __int128 v57 = 0u;
          }

          sub_10004C538((uint64_t)&v56, (uint64_t)v58);
          if (v59)
          {
            if (swift_dynamicCast( &v54,  v58,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
            {
              uint64_t v29 = v54;
              uint64_t v30 = v55;

              goto LABEL_43;
            }
          }

          else
          {

            sub_100012EF8((uint64_t)v58, &qword_1000B0018);
          }

          uint64_t v29 = 0LL;
          uint64_t v30 = 0LL;
LABEL_43:
          __int128 v41 = (id)kCGImagePropertyIPTCDictionary;
          id v42 = -[__CFDictionary __swift_objectForKeyedSubscript:](v19, "__swift_objectForKeyedSubscript:", v41);
          if (v42)
          {
            id v43 = v42;
            _bridgeAnyObjectToAny(_:)(&v56, v42);
            swift_unknownObjectRelease(v43);
          }

          else
          {
            __int128 v56 = 0u;
            __int128 v57 = 0u;
          }

          sub_10004C538((uint64_t)&v56, (uint64_t)v58);
          if (v59)
          {
            unint64_t v44 = sub_10004C580();
            if ((swift_dynamicCast(&v54, v58, (char *)&type metadata for Any + 8, v44, 6LL) & 1) != 0)
            {
              int v51 = v19;
              uint64_t v45 = v54;

              uint64_t v46 = (id)kCGImagePropertyIPTCCredit;
              id v47 = objc_msgSend(v45, "__swift_objectForKeyedSubscript:", v46);
              if (v47)
              {
                id v48 = v47;
                _bridgeAnyObjectToAny(_:)(&v56, v47);
                swift_unknownObjectRelease(v48);
              }

              else
              {
                __int128 v56 = 0u;
                __int128 v57 = 0u;
              }

              sub_10004C538((uint64_t)&v56, (uint64_t)v58);
              if (v59)
              {
                if (swift_dynamicCast( &v54,  v58,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
                {
                  uint64_t v28 = v54;
                  CFDictionaryRef v17 = v55;

                  goto LABEL_60;
                }
              }

              else
              {

                sub_100012EF8((uint64_t)v58, &qword_1000B0018);
              }

              uint64_t v28 = 0LL;
              CFDictionaryRef v17 = 0LL;
LABEL_60:
              uint64_t v52 = (id)kCGImagePropertyIPTCExtDigitalSourceType;
              id v49 = objc_msgSend(v45, "__swift_objectForKeyedSubscript:");
              if (v49)
              {
                id v50 = v49;
                _bridgeAnyObjectToAny(_:)(&v56, v49);

                swift_unknownObjectRelease(v50);
              }

              else
              {

                __int128 v56 = 0u;
                __int128 v57 = 0u;
              }

              sub_10004C538((uint64_t)&v56, (uint64_t)v58);
              if (v59)
              {
                if (swift_dynamicCast( &v54,  v58,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
                {
                  uint64_t v26 = v54;
                  uint64_t v27 = v55;

                  goto LABEL_69;
                }
              }

              else
              {

                sub_100012EF8((uint64_t)v58, &qword_1000B0018);
              }

              uint64_t v26 = 0LL;
              uint64_t v27 = 0LL;
              goto LABEL_69;
            }
          }

          else
          {

            sub_100012EF8((uint64_t)v58, &qword_1000B0018);
          }

          uint64_t v26 = 0LL;
          uint64_t v27 = 0LL;
          uint64_t v28 = 0LL;
          CFDictionaryRef v17 = 0LL;
LABEL_69:
          uint64_t v31 = v60;
          uint64_t v32 = v53;
          return EmojiImageMetadata.init(imageStrikeCountValue:contentIdentifier:shortDescription:imageCredit:digitalSourceType:)( Count,  v31,  v32,  v29,  v30,  v28,  v17,  v26,  v27);
        }
      }

      else
      {

        sub_100012EF8((uint64_t)v58, &qword_1000B0018);
      }

      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      uint64_t v60 = 0LL;
      uint64_t v53 = 0LL;
      goto LABEL_43;
    }

    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
  }

  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  return EmojiImageMetadata.init(imageStrikeCountValue:contentIdentifier:shortDescription:imageCredit:digitalSourceType:)( Count,  v31,  v32,  v29,  v30,  v28,  v17,  v26,  v27);
}

uint64_t sub_10004E96C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for EmojiImageMetadata(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = a2(a1);
  if (!v3)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a3, 0LL, 1LL, v7);
  }

  return result;
}

uint64_t sub_10004EA34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10004DDE8(a1, a2, a3);
}

uint64_t sub_10004EA48(CGImageSource *a1)
{
  return sub_10004E140(a1);
}

uint64_t sub_10004EA60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004E96C(a1, *(uint64_t (**)(uint64_t))(v2 + 16), a2);
}

uint64_t sub_10004EA78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B0EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

__n128 initializeWithTake for RelayReachabilityResultDictionary(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityResponseDictionary()
{
  return &type metadata for RelayReachabilityResponseDictionary;
}

uint64_t sub_10004EB00(uint64_t a1)
{
  return String.hash(into:)(a1, 114LL, 0xE100000000000000LL);
}

uint64_t sub_10004EB10@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1000A3C00;
  return sub_10004F404(v2, a1, a2);
}

uint64_t sub_10004EB1C()
{
  return 114LL;
}

uint64_t sub_10004EB28@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1000A3C38;
  return sub_10004F46C(a1, v2, a2);
}

uint64_t sub_10004EB34(uint64_t a1)
{
  unint64_t v2 = sub_1000501CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004EB5C(uint64_t a1)
{
  unint64_t v2 = sub_1000501CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004EB84@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0F50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_1000501CC();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys,  &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  char v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100010D60(a1);
  *a2 = v13 & 1;
  return result;
}

uint64_t sub_10004EC98(void *a1)
{
  uint64_t v3 = sub_10000E624(&qword_1000B0F60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000FFDC(a1, v8);
  unint64_t v10 = sub_1000501CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys,  &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys,  v10,  v8,  v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10004ED80(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B0F20);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10004FD7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityResultDictionary.CodingKeys,  &type metadata for RelayReachabilityResultDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v27 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v27, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    char v26 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v26, v5);
    uint64_t v25 = v3[4];
    char v24 = 2;
    uint64_t v16 = sub_10000E624(&qword_1000B0F08);
    uint64_t v17 = sub_10004FE04( &qword_1000B0F28,  (void (*)(void))sub_10004FE78,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, v16, v17);
    uint64_t v18 = *((unsigned __int8 *)v3 + 40);
    char v23 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, &v23, v5);
    uint64_t v19 = *((unsigned __int8 *)v3 + 41);
    char v22 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v22, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10004EF54(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000E624(&qword_1000B0ED0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000FFDC(a1, v8);
  unint64_t v10 = sub_10004F9C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityResponseDictionary.CodingKeys,  &type metadata for RelayReachabilityResponseDictionary.CodingKeys,  v10,  v8,  v9);
  __int128 v11 = v2[1];
  __int128 v15 = *v2;
  v16[0] = v11;
  *(_OWORD *)((char *)v16 + 10) = *(__int128 *)((char *)v2 + 26);
  unint64_t v12 = sub_10004FA48();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v13, v4, &type metadata for RelayReachabilityResultDictionary, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_10004F058(char *a1)
{
}

void sub_10004F064()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_10004F0A4()
{
  return Hasher._finalize()();
}

void sub_10004F0F0()
{
  __asm { BR              X10 }

uint64_t sub_10004F120(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_10004F158(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_10004F194()
{
  return Hasher._finalize()();
}

unint64_t sub_10004F1E0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004F560(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004F20C()
{
  return ((uint64_t (*)(void))((char *)sub_10004F230 + 4 * byte_100090BAF[*v0]))();
}

void sub_10004F230(void *a1@<X8>)
{
  *a1 = 101LL;
  a1[1] = v1;
}

void sub_10004F23C(void *a1@<X8>)
{
  *a1 = 114LL;
  a1[1] = v1;
}

void sub_10004F248(void *a1@<X8>)
{
  *a1 = 102LL;
  a1[1] = v1;
}

void sub_10004F254(void *a1@<X8>)
{
  *a1 = 29539LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_10004F264()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10004F288 + 4 * byte_100090BB4[*v0]))( 115LL,  0xE100000000000000LL);
}

uint64_t sub_10004F288()
{
  return 101LL;
}

uint64_t sub_10004F290()
{
  return 114LL;
}

uint64_t sub_10004F298()
{
  return 102LL;
}

uint64_t sub_10004F2A0()
{
  return 29539LL;
}

unint64_t sub_10004F2AC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10004F560(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10004F2D0(uint64_t a1)
{
  unint64_t v2 = sub_10004FD7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004F2F8(uint64_t a1)
{
  unint64_t v2 = sub_10004FD7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10004F320@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26) = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

uint64_t sub_10004F360(void *a1)
{
  return sub_10004ED80(a1);
}

Swift::Int sub_10004F374()
{
  return Hasher._finalize()();
}

Swift::Int sub_10004F3B8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10004F3F8@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1000A3D08;
  return sub_10004F404(v2, a1, a2);
}

uint64_t sub_10004F404@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  v4._countAndFlagsBits = *a2;
  __int128 v5 = (void *)a2[1];
  v4._object = v5;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_10004F450(void *a1@<X8>)
{
  *a1 = 114LL;
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_10004F460@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1000A3D40;
  return sub_10004F46C(a1, v2, a2);
}

uint64_t sub_10004F46C@<X0>( Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_10004F4BC(uint64_t a1)
{
  unint64_t v2 = sub_10004F9C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004F4E4(uint64_t a1)
{
  unint64_t v2 = sub_10004F9C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10004F50C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26) = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

uint64_t sub_10004F54C(void *a1)
{
  return sub_10004EF54(a1);
}

unint64_t sub_10004F560(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3C70, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

void sub_10004F5A8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0EF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10004FD7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityResultDictionary.CodingKeys,  &type metadata for RelayReachabilityResultDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
  }

  else
  {
    char v30 = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
    uint64_t v14 = v13;
    char v29 = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
    int v23 = v16;
    uint64_t v24 = v15;
    uint64_t v17 = sub_10000E624(&qword_1000B0F08);
    char v28 = 2;
    uint64_t v18 = sub_10004FE04( &qword_1000B0F10,  (void (*)(void))sub_10004FDC0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, v17, &v28, v5, v17, v18);
    char v27 = 3;
    uint64_t v22 = v25;
    swift_bridgeObjectRetain(v25);
    int v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v27, v5);
    char v26 = 4;
    LOBYTE(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v26, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100010D60(a1);
    uint64_t v19 = v22;
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v14);
    *(void *)a2 = v12;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v14;
    *(void *)(a2 + 16) = v24;
    *(_BYTE *)(a2 + 24) = v23 & 1;
    *(void *)(a2 + 32) = v19;
    *(_BYTE *)(a2 + 40) = v21;
    *(_BYTE *)(a2 + 41) = v17;
  }

uint64_t sub_10004F86C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0EB8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10004F9C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RelayReachabilityResponseDictionary.CodingKeys,  &type metadata for RelayReachabilityResponseDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_100010D60(a1);
  }
  unint64_t v12 = sub_10004FA04();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v20,  &type metadata for RelayReachabilityResultDictionary,  v13,  v5,  &type metadata for RelayReachabilityResultDictionary,  v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __int128 v19 = v20;
  uint64_t v14 = v21;
  char v15 = v22;
  uint64_t v16 = v23;
  __int16 v17 = v24;
  uint64_t result = sub_100010D60(a1);
  *(_OWORD *)a2 = v19;
  *(void *)(a2 + 16) = v14;
  *(_BYTE *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v16;
  *(_WORD *)(a2 + 40) = v17;
  return result;
}

unint64_t sub_10004F9C0()
{
  unint64_t result = qword_1000B0EC0;
  if (!qword_1000B0EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090DC4, &type metadata for RelayReachabilityResponseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0EC0);
  }

  return result;
}

unint64_t sub_10004FA04()
{
  unint64_t result = qword_1000B0EC8;
  if (!qword_1000B0EC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090D9C, &type metadata for RelayReachabilityResultDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0EC8);
  }

  return result;
}

unint64_t sub_10004FA48()
{
  unint64_t result = qword_1000B0ED8;
  if (!qword_1000B0ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090D74, &type metadata for RelayReachabilityResultDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0ED8);
  }

  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityResponseDictionary.CodingKeys()
{
  return &type metadata for RelayReachabilityResponseDictionary.CodingKeys;
}

uint64_t _s24MessagesBlastDoorService33RelayReachabilityResultDictionaryVwxx_0(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t _s24MessagesBlastDoorService33RelayReachabilityResultDictionaryVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s24MessagesBlastDoorService33RelayReachabilityResultDictionaryVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t _s24MessagesBlastDoorService33RelayReachabilityResultDictionaryVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t _s24MessagesBlastDoorService33RelayReachabilityResultDictionaryVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 42)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10004FC48(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 42) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityResultDictionary()
{
  return &type metadata for RelayReachabilityResultDictionary;
}

unint64_t sub_10004FCA8()
{
  unint64_t result = qword_1000B0EE0;
  if (!qword_1000B0EE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090D4C, &type metadata for RelayReachabilityResponseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0EE0);
  }

  return result;
}

unint64_t sub_10004FCF0()
{
  unint64_t result = qword_1000B0EE8;
  if (!qword_1000B0EE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090C84, &type metadata for RelayReachabilityResponseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0EE8);
  }

  return result;
}

unint64_t sub_10004FD38()
{
  unint64_t result = qword_1000B0EF0;
  if (!qword_1000B0EF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090CAC, &type metadata for RelayReachabilityResponseDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0EF0);
  }

  return result;
}

unint64_t sub_10004FD7C()
{
  unint64_t result = qword_1000B0F00;
  if (!qword_1000B0F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090F88, &type metadata for RelayReachabilityResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F00);
  }

  return result;
}

unint64_t sub_10004FDC0()
{
  unint64_t result = qword_1000B0F18;
  if (!qword_1000B0F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090F60, &type metadata for RelayReachabilityHandleResultDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0F18);
  }

  return result;
}

uint64_t sub_10004FE04(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_10001008C(&qword_1000B0F08);
    a2();
    uint64_t result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10004FE78()
{
  unint64_t result = qword_1000B0F30;
  if (!qword_1000B0F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090F38, &type metadata for RelayReachabilityHandleResultDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0F30);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RelayReachabilityResultDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10004FF08 + 4 * byte_100090BBE[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10004FF3C + 4 * byte_100090BB9[v4]))();
}

uint64_t sub_10004FF3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004FF44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10004FF4CLL);
  }
  return result;
}

uint64_t sub_10004FF58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10004FF60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10004FF64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004FF6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityResultDictionary.CodingKeys()
{
  return &type metadata for RelayReachabilityResultDictionary.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RelayReachabilityHandleResultDictionary( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for RelayReachabilityHandleResultDictionary( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100050074 + 4 * byte_100090BC8[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000500A8 + 4 * byte_100090BC3[v4]))();
}

uint64_t sub_1000500A8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000500B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000500B8LL);
  }
  return result;
}

uint64_t sub_1000500C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000500CCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000500D0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000500D8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityHandleResultDictionary()
{
  return &type metadata for RelayReachabilityHandleResultDictionary;
}

unint64_t sub_1000500F8()
{
  unint64_t result = qword_1000B0F38;
  if (!qword_1000B0F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090F10, &type metadata for RelayReachabilityResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F38);
  }

  return result;
}

unint64_t sub_100050140()
{
  unint64_t result = qword_1000B0F40;
  if (!qword_1000B0F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090E48, &type metadata for RelayReachabilityResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F40);
  }

  return result;
}

unint64_t sub_100050188()
{
  unint64_t result = qword_1000B0F48;
  if (!qword_1000B0F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090E70, &type metadata for RelayReachabilityResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F48);
  }

  return result;
}

unint64_t sub_1000501CC()
{
  unint64_t result = qword_1000B0F58;
  if (!qword_1000B0F58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000910C8,  &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F58);
  }

  return result;
}

uint64_t _s24MessagesBlastDoorService35RelayReachabilityResponseDictionaryV10CodingKeysOwst_0( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100050250 + 4 * byte_100090BCD[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100050270 + 4 * byte_100090BD2[v4]))();
  }
}

_BYTE *sub_100050250(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100050270(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100050278(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100050280(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100050288(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100050290(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RelayReachabilityHandleResultDictionary.CodingKeys()
{
  return &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys;
}

unint64_t sub_1000502B0()
{
  unint64_t result = qword_1000B0F68;
  if (!qword_1000B0F68)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000910A0,  &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F68);
  }

  return result;
}

unint64_t sub_1000502F8()
{
  unint64_t result = qword_1000B0F70;
  if (!qword_1000B0F70)
  {
    unint64_t result = swift_getWitnessTable( &unk_100090FD8,  &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F70);
  }

  return result;
}

unint64_t sub_100050340()
{
  unint64_t result = qword_1000B0F78;
  if (!qword_1000B0F78)
  {
    unint64_t result = swift_getWitnessTable( &unk_100091000,  &type metadata for RelayReachabilityHandleResultDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B0F78);
  }

  return result;
}

ValueMetadata *type metadata accessor for CombinedPluginAttachmentUnpacker()
{
  return &type metadata for CombinedPluginAttachmentUnpacker;
}

unint64_t sub_10005039C()
{
  unint64_t result = qword_1000B0F80;
  if (!qword_1000B0F80)
  {
    uint64_t v1 = type metadata accessor for CombinedPluginAttachment(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CombinedPluginAttachment, v1);
    atomic_store(result, (unint64_t *)&qword_1000B0F80);
  }

  return result;
}

void sub_1000503E4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = static os_log_type_t.info.getter(a1);
  sub_100012C44();
  uint64_t v5 = (void *)static OS_os_log.blastDoor.getter();
  uint64_t v6 = sub_10000E624(&qword_1000AFF48);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_10008D7D0;
  uint64_t v8 = CombinedPluginAttachment.BalloonPluginIdentifier.identifier.getter();
  uint64_t v10 = v9;
  v17[0] = v8;
  v17[1] = v9;
  uint64_t v11 = >> prefix<A>(_:)(v17);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease(v10);
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_100012CDC();
  *(void *)(v7 + 32) = v11;
  *(void *)(v7 + 40) = v13;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Unpacking combined plugin attachment (identifier: %@)",  53LL,  2LL,  v7);

  swift_bridgeObjectRelease(v7);
  uint64_t v14 = objc_autoreleasePoolPush();
  sub_100050518(a1, a2, a3);
  objc_autoreleasePoolPop(v14);
}

uint64_t sub_100050518@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = CombinedPluginAttachment.BalloonPluginIdentifier.identifier.getter();
  uint64_t v9 = v8;
  v55[0] = v7;
  v55[1] = v8;
  *(void *)&__int128 v52 = 58LL;
  *((void *)&v52 + 1) = 0xE100000000000000LL;
  unint64_t v10 = sub_100012BAC();
  uint64_t v11 = (void *)StringProtocol.components<A>(separatedBy:)( &v52,  &type metadata for String,  &type metadata for String,  v10,  v10);
  swift_bridgeObjectRelease(v9);
  if (!v11[2])
  {
    swift_bridgeObjectRelease(v11);
    uint64_t v21 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v21, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v23 = v22;
    uint64_t v24 = sub_10000E624(&qword_1000AFF80);
    uint64_t v25 = swift_allocObject(v24, 72LL, 7LL);
    *(_OWORD *)(v25 + 16) = xmmword_10008D7D0;
    *(void *)(v25 + 56) = &type metadata for MessageDictionary.CodingKeys;
    *(void *)(v25 + 64) = sub_10002F554();
    *(_BYTE *)(v25 + 32) = 22;
    unint64_t v26 = 0xD00000000000003BLL;
    unint64_t v27 = 0x800000010008BBB0LL;
    uint64_t v28 = v25;
LABEL_13:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, v26, v27, 0LL);
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  enum case for DecodingError.dataCorrupted(_:),  v21);
    return swift_willThrow(v32);
  }

  uint64_t v12 = v11[4];
  uint64_t v13 = v11[5];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v11);
  if (qword_1000AFCC0 != -1) {
    swift_once(&qword_1000AFCC0, sub_100050D10);
  }
  uint64_t v14 = qword_1000BC110;
  if (*(void *)(qword_1000BC110 + 16) && (unint64_t v15 = sub_100067C94(v12, v13), (v16 & 1) != 0))
  {
    sub_100012C98(*(void *)(v14 + 56) + 40 * v15, (uint64_t)&v52);
  }

  else
  {
    uint64_t v54 = 0LL;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
  }

  swift_bridgeObjectRelease(v13);
  if (!*((void *)&v53 + 1))
  {
    sub_100050A18((uint64_t)&v52);
    uint64_t v21 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v21, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v23 = v29;
    uint64_t v30 = sub_10000E624(&qword_1000AFF80);
    uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
    *(_OWORD *)(v31 + 16) = xmmword_10008D7D0;
    *(void *)(v31 + 56) = &type metadata for MessageDictionary.CodingKeys;
    *(void *)(v31 + 64) = sub_10002F554();
    *(_BYTE *)(v31 + 32) = 22;
    unint64_t v27 = 0x800000010008BB50LL;
    uint64_t v28 = v31;
    unint64_t v26 = 0xD00000000000002DLL;
    goto LABEL_13;
  }

  uint64_t v58 = a3;
  sub_100012C80(&v52, (uint64_t)v55);
  __int16 v17 = objc_autoreleasePoolPush();
  uint64_t v18 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = PropertyListDecoder.init()();
  unint64_t v20 = sub_100050A58();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &type metadata for CombinedPluginAttachmentDictionary,  a1,  a2,  &type metadata for CombinedPluginAttachmentDictionary,  v20);
  if (v3)
  {
    swift_errorRelease(v3);
    swift_release(v19);
    sub_100012A64(a1, a2);
    int v51 = &_swiftEmptyArrayStorage;
  }

  else
  {
    __int128 v34 = v52;
    unint64_t v35 = v53;
    id v36 = &_swiftEmptyArrayStorage;
    if ((void)v52) {
      id v36 = (void *)v52;
    }
    int v51 = v36;
    swift_bridgeObjectRetain(v52);
    sub_100012A64(*((uint64_t *)&v34 + 1), v35);
    a1 = Data._imOptionallyDecompress()(*((void *)&v34 + 1), v35);
    a2 = v37;
    swift_bridgeObjectRelease(v34);
    sub_100012B54(*((uint64_t *)&v34 + 1), v35);
    swift_release(v19);
    sub_100012B54(*((uint64_t *)&v34 + 1), v35);
  }

  objc_autoreleasePoolPop(v17);
  uint64_t v39 = static os_log_type_t.info.getter(v38);
  sub_100012C44();
  id v40 = (void *)static OS_os_log.blastDoor.getter();
  uint64_t v41 = sub_10000E624(&qword_1000AFF48);
  uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
  *(_OWORD *)(v42 + 16) = xmmword_10008D7D0;
  sub_100012C98((uint64_t)v55, (uint64_t)&v52);
  sub_10000E624(&qword_1000AFF50);
  uint64_t v43 = >> prefix<A>(_:)(&v52);
  uint64_t v45 = v44;
  sub_100050A18((uint64_t)&v52);
  *(void *)(v42 + 56) = &type metadata for String;
  *(void *)(v42 + 64) = sub_100012CDC();
  *(void *)(v42 + 32) = v43;
  *(void *)(v42 + 40) = v45;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Unpacking combined plugin using %@.", 35LL, 2LL, v42);

  swift_bridgeObjectRelease(v42);
  uint64_t v46 = v56;
  uint64_t v47 = v57;
  sub_10000FFDC(v55, v56);
  uint64_t v48 = CombinedPluginAttachment.BalloonPluginIdentifier.identifier.getter();
  uint64_t v50 = v49;
  (*(void (**)(uint64_t, unint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8))( a1,  a2,  v51,  v48,  v49,  v46,  v47);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v50);
  sub_100012B54(a1, a2);
  return sub_100010D60(v55);
}

void sub_100050A04(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_100050A18(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000AFF40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100050A58()
{
  unint64_t result = qword_1000B0F88;
  if (!qword_1000B0F88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10008E4AC, &type metadata for CombinedPluginAttachmentDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B0F88);
  }

  return result;
}

unint64_t sub_100050A9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_10000E624(&qword_1000B0F98);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100012D20(v7, (uint64_t)&v17, &qword_1000B0FA0);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = sub_100067C94(v17, v18);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_100012C80(&v19, v4[7] + 40 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    v4[2] = v15;
    v7 += 56LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100050BDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_10000E624(&qword_1000B0020);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100012D20(v7, (uint64_t)&v16, &qword_1000B0FA8);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100067C94(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100018278(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100050D10()
{
  uint64_t v0 = sub_10000E624(&qword_1000B0F90);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_10008EC90;
  *(void *)(inited + 32) = 0xD000000000000025LL;
  *(void *)(inited + 40) = 0x800000010008A3E0LL;
  *(void *)(inited + 72) = &type metadata for LinkPresentationUnpacker;
  *(void *)(inited + 80) = &off_1000A5AE8;
  *(void *)(inited + 8_Block_object_dispose(va, 8) = 0xD000000000000032LL;
  *(void *)(inited + 96) = 0x800000010008BBF0LL;
  *(void *)(inited + 12_Block_object_dispose(va, 8) = &type metadata for MessagesAppBalloonUnpacker;
  *(void *)(inited + 136) = &off_1000A5098;
  unint64_t result = sub_100050A9C(inited);
  qword_1000BC110 = result;
  return result;
}

ValueMetadata *type metadata accessor for TextMessageUnpacker()
{
  return &type metadata for TextMessageUnpacker;
}

uint64_t sub_100050DC0()
{
  return sub_10000E9D8( &qword_1000B0FB0,  (uint64_t (*)(uint64_t))&type metadata accessor for TextMessage,  (uint64_t)&protocol conformance descriptor for TextMessage);
}

void sub_100050DEC(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for MessageDictionary(0LL);
  uint64_t v4 = (uint64_t *)(v1 + v3[51]);
  if ((v4[1] & 1) != 0
    || (uint64_t v5 = v3, v6 = v1 + v3[54], (*(_BYTE *)(v6 + 8) & 1) != 0)
    || (uint64_t v7 = v1 + v3[55], (*(_BYTE *)(v7 + 8) & 1) != 0)
    || ((uint64_t v8 = *v4, v9 = *(void *)v7, *(void *)v6 >= 0x7FFFFFFFFFFFFFFFuLL)
      ? (uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL)
      : (uint64_t v10 = *(void *)v6),
        v10 == NSNotFound.getter(v3)))
  {
LABEL_14:
    uint64_t v28 = _s17AssociatedMessageVMa(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(a1, 1LL, 1LL, v28);
    return;
  }

  if (v9 >= 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v9;
  }
  uint64_t v12 = v10 + v11;
  if (!__OFADD__(v10, v11))
  {
    uint64_t v13 = (uint64_t *)(v1 + v5[52]);
    uint64_t v14 = v13[1];
    if (v14)
    {
      uint64_t v15 = *v13;
      __n128 v16 = swift_bridgeObjectRetain(v13[1]);
      TapBack.AssociatedMessageType.init(defaultingRawValue:)(v8, v16);
      uint64_t v17 = (uint64_t *)(v1 + v5[53]);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      unint64_t v20 = (uint64_t *)(v1 + v5[56]);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      uint64_t v23 = (int *)_s17AssociatedMessageVMa(0LL);
      uint64_t v24 = (void *)(a1 + v23[5]);
      *uint64_t v24 = v15;
      v24[1] = v14;
      uint64_t v25 = (void *)(a1 + v23[6]);
      *uint64_t v25 = v19;
      v25[1] = v18;
      unint64_t v26 = (uint64_t *)(a1 + v23[7]);
      uint64_t *v26 = v10;
      v26[1] = v12;
      unint64_t v27 = (void *)(a1 + v23[8]);
      *unint64_t v27 = v22;
      v27[1] = v21;
      (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v23 - 1) + 56LL))(a1, 0LL, 1LL, v23);
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v18);
      return;
    }

    goto LABEL_14;
  }

  __break(1u);
}

uint64_t sub_100050F78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v486 = a2;
  uint64_t v485 = a1;
  uint64_t v454 = a3;
  uint64_t v3 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v3);
  v460 = (char *)v328 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v471 = type metadata accessor for DecodingError(0LL);
  unint64_t v480 = *(void *)(v471 - 8);
  uint64_t v5 = __chkstk_darwin(v471);
  v459 = (char *)v328 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  v479 = (char *)v328 - v8;
  __chkstk_darwin(v7);
  uint64_t v470 = (char *)v328 - v9;
  uint64_t v10 = sub_10000E624(&qword_1000AFF08);
  uint64_t v11 = __chkstk_darwin(v10);
  v398 = (char *)v328 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v437 = (char *)v328 - v14;
  __chkstk_darwin(v13);
  Swift::Int v400 = (char *)v328 - v15;
  uint64_t v16 = sub_10000E624(&qword_1000B0FB8);
  uint64_t v17 = __chkstk_darwin(v16);
  v436 = (char *)v328 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v399 = (char *)v328 - v19;
  uint64_t v425 = type metadata accessor for BalloonPlugin(0LL);
  uint64_t v424 = *(void *)(v425 - 8);
  uint64_t v20 = __chkstk_darwin(v425);
  v420 = (char *)v328 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  v388 = (char *)v328 - v22;
  uint64_t v23 = sub_10000E624(&qword_1000B0FC0);
  __chkstk_darwin(v23);
  uint64_t v363 = (char *)v328 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v365 = type metadata accessor for StickerTapBack.AssociatedMessageType(0LL);
  uint64_t v364 = *(void *)(v365 - 8);
  uint64_t v25 = __chkstk_darwin(v365);
  uint64_t v344 = (char *)v328 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v352 = (char *)v328 - v27;
  uint64_t v28 = sub_10000E624(&qword_1000B0FC8);
  __chkstk_darwin(v28);
  v367 = (char *)v328 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v369 = type metadata accessor for EmojiTapBack.AssociatedMessageType(0LL);
  uint64_t v368 = *(void *)(v369 - 8);
  uint64_t v30 = __chkstk_darwin(v369);
  uint64_t v349 = (char *)v328 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  v358 = (char *)v328 - v32;
  uint64_t v33 = sub_10000E624(&qword_1000B0FD0);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v343 = (char *)v328 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v34);
  Swift::Int v348 = (char *)v328 - v37;
  __chkstk_darwin(v36);
  Swift::Int v378 = (char *)v328 - v38;
  uint64_t v433 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  uint64_t v432 = *(void *)(v433 - 8);
  uint64_t v39 = __chkstk_darwin(v433);
  uint64_t v377 = (char *)v328 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v39);
  uint64_t v431 = (char *)v328 - v41;
  uint64_t v42 = sub_10000E624(&qword_1000B0FD8);
  uint64_t v43 = __chkstk_darwin(v42);
  uint64_t v396 = (char *)v328 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  uint64_t v441 = (char *)v328 - v45;
  uint64_t v445 = _s17AssociatedMessageVMa(0LL);
  uint64_t v446 = *(void *)(v445 - 8);
  __chkstk_darwin(v445);
  uint64_t v439 = (char *)v328 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v448 = type metadata accessor for Message(0LL);
  uint64_t v447 = *(void *)(v448 - 8);
  uint64_t v47 = __chkstk_darwin(v448);
  uint64_t v342 = (char *)v328 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v47);
  v455 = (char *)v328 - v49;
  uint64_t v50 = sub_10000E624(&qword_1000B0118);
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v466 = (char *)v328 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v347 = (char *)v328 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  uint64_t v403 = (char *)v328 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v376 = (char *)v328 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  unint64_t v409 = (char *)v328 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v423 = (char *)v328 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  Swift::Int v381 = (char *)v328 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  uint64_t v332 = (char *)v328 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  uint64_t v335 = (char *)v328 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v362 = (char *)v328 - v70;
  __chkstk_darwin(v69);
  uint64_t v444 = (char *)v328 - v71;
  uint64_t v72 = sub_10000E624(&qword_1000B0FE0);
  uint64_t v73 = __chkstk_darwin(v72);
  v465 = (char *)v328 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = __chkstk_darwin(v73);
  v346 = (char *)v328 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  uint64_t v402 = (char *)v328 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v375 = (char *)v328 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  Swift::Int v408 = (char *)v328 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v422 = (char *)v328 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  uint64_t v380 = (char *)v328 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v331 = (char *)v328 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v334 = (char *)v328 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  uint64_t v361 = (char *)v328 - v92;
  __chkstk_darwin(v91);
  uint64_t v443 = (char *)v328 - v93;
  uint64_t v94 = sub_10000E624(&qword_1000B0FE8);
  uint64_t v95 = __chkstk_darwin(v94);
  v464 = (char *)v328 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = __chkstk_darwin(v95);
  v345 = (char *)v328 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  Swift::Int v414 = (char *)v328 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  Swift::Int v374 = (char *)v328 - v102;
  uint64_t v103 = __chkstk_darwin(v101);
  v419 = (char *)v328 - v104;
  uint64_t v105 = __chkstk_darwin(v103);
  v430 = (char *)v328 - v106;
  uint64_t v107 = __chkstk_darwin(v105);
  v379 = (char *)v328 - v108;
  uint64_t v109 = __chkstk_darwin(v107);
  Swift::Int v330 = (char *)v328 - v110;
  uint64_t v111 = __chkstk_darwin(v109);
  uint64_t v333 = (char *)v328 - v112;
  uint64_t v113 = __chkstk_darwin(v111);
  Swift::Int v360 = (char *)v328 - v114;
  __chkstk_darwin(v113);
  v442 = (char *)v328 - v115;
  uint64_t v116 = sub_10000E624(&qword_1000B0FF0);
  uint64_t v117 = __chkstk_darwin(v116);
  uint64_t v463 = (char *)v328 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = __chkstk_darwin(v117);
  uint64_t v356 = (char *)v328 - v120;
  uint64_t v121 = __chkstk_darwin(v119);
  uint64_t v413 = (char *)v328 - v122;
  uint64_t v123 = __chkstk_darwin(v121);
  uint64_t v386 = (char *)v328 - v124;
  uint64_t v125 = __chkstk_darwin(v123);
  v418 = (char *)v328 - v126;
  uint64_t v127 = __chkstk_darwin(v125);
  uint64_t v435 = (char *)v328 - v128;
  uint64_t v129 = __chkstk_darwin(v127);
  uint64_t v429 = (char *)v328 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  v392 = (char *)v328 - v132;
  uint64_t v133 = __chkstk_darwin(v131);
  uint64_t v394 = (char *)v328 - v134;
  uint64_t v135 = __chkstk_darwin(v133);
  v339 = (char *)v328 - v136;
  uint64_t v137 = __chkstk_darwin(v135);
  Swift::Int v341 = (char *)v328 - v138;
  uint64_t v139 = __chkstk_darwin(v137);
  uint64_t v373 = (char *)v328 - v140;
  __chkstk_darwin(v139);
  uint64_t v450 = (char *)v328 - v141;
  uint64_t v142 = sub_10000E624(&qword_1000B0FF8);
  uint64_t v143 = __chkstk_darwin(v142);
  uint64_t v474 = (char *)v328 - ((v144 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = __chkstk_darwin(v143);
  uint64_t v359 = (char *)v328 - v146;
  __chkstk_darwin(v145);
  v452 = (char *)v328 - v147;
  uint64_t v468 = type metadata accessor for TextMessage.MessageType(0LL);
  uint64_t v469 = *(void *)(v468 - 8);
  uint64_t v148 = __chkstk_darwin(v468);
  uint64_t v475 = (char *)v328 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = __chkstk_darwin(v148);
  uint64_t v370 = (char *)v328 - v151;
  uint64_t v152 = __chkstk_darwin(v150);
  v412 = (char *)v328 - v153;
  uint64_t v154 = __chkstk_darwin(v152);
  Swift::Int v395 = (char *)v328 - v155;
  uint64_t v156 = __chkstk_darwin(v154);
  uint64_t v417 = (char *)v328 - v157;
  uint64_t v158 = __chkstk_darwin(v156);
  v428 = (char *)v328 - v159;
  uint64_t v160 = __chkstk_darwin(v158);
  uint64_t v391 = (char *)v328 - v161;
  uint64_t v162 = __chkstk_darwin(v160);
  v351 = (char *)v328 - v163;
  uint64_t v164 = __chkstk_darwin(v162);
  v354 = (char *)v328 - v165;
  uint64_t v166 = __chkstk_darwin(v164);
  Swift::Int v384 = (char *)v328 - v167;
  __chkstk_darwin(v166);
  v458 = (char *)v328 - v168;
  uint64_t v453 = type metadata accessor for TextMessage(0LL);
  uint64_t v456 = *(void *)(v453 - 8);
  uint64_t v169 = __chkstk_darwin(v453);
  uint64_t v462 = (char *)v328 - ((v170 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = __chkstk_darwin(v169);
  uint64_t v350 = (char *)v328 - v172;
  uint64_t v173 = __chkstk_darwin(v171);
  uint64_t v401 = (char *)v328 - v174;
  uint64_t v175 = __chkstk_darwin(v173);
  v382 = (char *)v328 - v176;
  uint64_t v177 = __chkstk_darwin(v175);
  uint64_t v407 = (char *)v328 - v178;
  uint64_t v179 = __chkstk_darwin(v177);
  uint64_t v434 = (char *)v328 - v180;
  uint64_t v181 = __chkstk_darwin(v179);
  v421 = (char *)v328 - v182;
  uint64_t v183 = __chkstk_darwin(v181);
  uint64_t v383 = (char *)v328 - v184;
  uint64_t v185 = __chkstk_darwin(v183);
  v393 = (char *)v328 - v186;
  uint64_t v187 = __chkstk_darwin(v185);
  v336 = (char *)v328 - v188;
  uint64_t v189 = __chkstk_darwin(v187);
  uint64_t v337 = (char *)v328 - v190;
  uint64_t v191 = __chkstk_darwin(v189);
  uint64_t v366 = (char *)v328 - v192;
  uint64_t v193 = __chkstk_darwin(v191);
  v440 = (char *)v328 - v194;
  __chkstk_darwin(v193);
  uint64_t v438 = (char *)v328 - v195;
  uint64_t v484 = type metadata accessor for Metadata(0LL);
  uint64_t v481 = *(void *)(v484 - 8);
  uint64_t v196 = __chkstk_darwin(v484);
  uint64_t v473 = (char *)v328 - ((v197 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = __chkstk_darwin(v196);
  uint64_t v371 = (char *)v328 - v199;
  uint64_t v200 = __chkstk_darwin(v198);
  uint64_t v411 = (char *)v328 - v201;
  uint64_t v202 = __chkstk_darwin(v200);
  v397 = (char *)v328 - v203;
  uint64_t v204 = __chkstk_darwin(v202);
  uint64_t v416 = (char *)v328 - v205;
  uint64_t v206 = __chkstk_darwin(v204);
  v427 = (char *)v328 - v207;
  uint64_t v208 = __chkstk_darwin(v206);
  Swift::Int v390 = (char *)v328 - v209;
  uint64_t v210 = __chkstk_darwin(v208);
  Swift::Int v353 = (char *)v328 - v211;
  uint64_t v212 = __chkstk_darwin(v210);
  Swift::Int v357 = (char *)v328 - v213;
  uint64_t v214 = __chkstk_darwin(v212);
  v387 = (char *)v328 - v215;
  uint64_t v216 = __chkstk_darwin(v214);
  v457 = (char *)v328 - v217;
  __chkstk_darwin(v216);
  uint64_t v482 = (char *)v328 - v218;
  uint64_t v219 = sub_10000E624(&qword_1000B0000);
  uint64_t v220 = __chkstk_darwin(v219);
  v461 = (char *)v328 - ((v221 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v222 = __chkstk_darwin(v220);
  v355 = (char *)v328 - v223;
  uint64_t v224 = __chkstk_darwin(v222);
  uint64_t v410 = (char *)v328 - v225;
  uint64_t v226 = __chkstk_darwin(v224);
  v385 = (char *)v328 - v227;
  uint64_t v228 = __chkstk_darwin(v226);
  uint64_t v415 = (char *)v328 - v229;
  uint64_t v230 = __chkstk_darwin(v228);
  v426 = (char *)v328 - v231;
  uint64_t v232 = __chkstk_darwin(v230);
  uint64_t v389 = (char *)v328 - v233;
  uint64_t v234 = __chkstk_darwin(v232);
  Swift::Int v338 = (char *)v328 - v235;
  uint64_t v236 = __chkstk_darwin(v234);
  uint64_t v340 = (char *)v328 - v237;
  uint64_t v238 = __chkstk_darwin(v236);
  v372 = (char *)v328 - v239;
  uint64_t v240 = __chkstk_darwin(v238);
  uint64_t v449 = (char *)v328 - v241;
  __chkstk_darwin(v240);
  v483 = (char *)v328 - v242;
  uint64_t v476 = type metadata accessor for MessageDictionary(0LL);
  uint64_t v243 = __chkstk_darwin(v476);
  uint64_t v404 = (char *)v328 - ((v244 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v245 = __chkstk_darwin(v243);
  v406 = (char *)v328 - v246;
  uint64_t v247 = __chkstk_darwin(v245);
  uint64_t v405 = (char *)v328 - v248;
  uint64_t v249 = __chkstk_darwin(v247);
  v451 = (char *)v328 - v250;
  uint64_t v251 = __chkstk_darwin(v249);
  v472 = (char *)v328 - v252;
  __chkstk_darwin(v251);
  uint64_t v467 = (char *)v328 - v253;
  uint64_t v254 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v254);
  *(void *)&__int128 v477 = (char *)v328 - ((v255 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v478 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  uint64_t v256 = *(void *)(v478 - 8);
  __chkstk_darwin(v478);
  Swift::Int v258 = (char *)v328 - ((v257 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v259 = type metadata accessor for Explosion(0LL);
  uint64_t v260 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v262 = (char *)v328 - ((v261 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v263 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v264 = *(void *)(v263 - 8);
  __chkstk_darwin(v263);
  uint64_t v266 = (char *)v328 - ((v265 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v267 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v268 = swift_allocObject(v267, *(unsigned int *)(v267 + 48), *(unsigned __int16 *)(v267 + 52));
  uint64_t v269 = PropertyListDecoder.init()(v268);
  uint64_t v270 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  uint64_t v271 = v487;
  uint64_t v272 = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v263, v485, v486, v263, v270);
  *(void *)&__int128 v487 = v271;
  if (v271) {
    return swift_release(v269);
  }
  v328[1] = v258;
  v328[2] = v256;
  v328[4] = v262;
  v328[3] = v260;
  v328[5] = v259;
  uint64_t v486 = v269;
  uint64_t v329 = v264;
  uint64_t v485 = v263;
  uint64_t v274 = TopLevelDictionary.decryptedData.getter(v272);
  if (v275 >> 60 != 15)
  {
    uint64_t v474 = v266;
    uint64_t v466 = (char *)v274;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v304 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    uint64_t v305 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v304);
    Swift::Int v307 = v306;

    uint64_t v475 = v307;
    uint64_t v308 = (char *)&loc_10005294C + dword_100058E0C[(unint64_t)v307 >> 62];
    uint64_t v473 = (char *)v305;
    __asm { BR              X10 }
  }

  unint64_t v480 = sub_100012C44();
  uint64_t v276 = (void *)static OS_os_log.textMessageUnpacker.getter();
  v479 = (char *)sub_10000E624(&qword_1000AFF48);
  uint64_t v277 = swift_allocObject(v479, 72LL, 7LL);
  __int128 v478 = xmmword_10008D7D0;
  *(_OWORD *)(v277 + 16) = xmmword_10008D7D0;
  uint64_t v278 = v482;
  uint64_t v279 = TopLevelDictionary.metadata.getter(v277);
  uint64_t v280 = (uint64_t)v483;
  Metadata.messageGUID.getter(v279);
  uint64_t v481 = *(void *)(v481 + 8);
  ((void (*)(char *, uint64_t))v481)(v278, v484);
  uint64_t v281 = v266;
  uint64_t v282 = type metadata accessor for UUID(0LL);
  uint64_t v283 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v282 - 8) + 56LL);
  v283((char *)v280, 0LL, 1LL, v282);
  uint64_t v284 = >> prefix<A>(_:)(v280);
  uint64_t v286 = v285;
  sub_100012EF8(v280, &qword_1000B0000);
  *(void *)(v277 + 56) = &type metadata for String;
  unint64_t v287 = sub_100012CDC();
  *(void *)&__int128 v477 = v287;
  *(void *)(v277 + 64) = v287;
  *(void *)(v277 + 32) = v284;
  *(void *)(v277 + 40) = v286;
  uint64_t v288 = static os_log_type_t.default.getter(v287);
  os_log(_:dso:log:type:_:)( "Generating a typing indicator (guid: %@)",  40LL,  2LL,  &_mh_execute_header,  v276,  v288,  v277);

  v289 = v281;
  __n128 v290 = swift_bridgeObjectRelease(v277);
  uint64_t v291 = TopLevelDictionary.encrypted.getter(v290);
  if ((v291 & 1) != 0)
  {
    uint64_t v292 = (void *)static OS_os_log.textMessageUnpacker.getter();
    uint64_t v293 = swift_allocObject(v479, 72LL, 7LL);
    *(_OWORD *)(v293 + 16) = v478;
    uint64_t v294 = TopLevelDictionary.metadata.getter(v293);
    Metadata.messageGUID.getter(v294);
    ((void (*)(char *, uint64_t))v481)(v278, v484);
    v283((char *)v280, 0LL, 1LL, v282);
    uint64_t v295 = >> prefix<A>(_:)(v280);
    uint64_t v297 = v296;
    uint64_t v298 = sub_100012EF8(v280, &qword_1000B0000);
    uint64_t v299 = v477;
    *(void *)(v293 + 56) = &type metadata for String;
    *(void *)(v293 + 64) = v299;
    *(void *)(v293 + 32) = v295;
    *(void *)(v293 + 40) = v297;
    uint64_t v300 = static os_log_type_t.default.getter(v298);
    os_log(_:dso:log:type:_:)( "Missing encrypted data, but not a typing indicator (guid: %@)",  61LL,  2LL,  &_mh_execute_header,  v292,  v300,  v293);

    swift_bridgeObjectRelease(v293);
    unint64_t v301 = sub_100058E6C();
    uint64_t v302 = swift_allocError(&type metadata for TextMessageUnpacker.EncryptedMessageMissingData, v301, 0LL, 0LL);
    swift_willThrow(v302);
    swift_release(v486);
    return (*(uint64_t (**)(char *, uint64_t))(v329 + 8))(v289, v485);
  }

  v309 = (void (*)(char *, uint64_t))v481;
  v310 = v283;
  uint64_t v311 = v473;
  TopLevelDictionary.metadata.getter(v291);
  uint64_t v312 = type metadata accessor for TypingIndicator.Icon(0LL);
  v313 = v474;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v312 - 8) + 56LL))(v474, 1LL, 1LL, v312);
  uint64_t v314 = v475;
  uint64_t v315 = v487;
  TypingIndicator.init(with:icon:balloonPluginBundleID:participantDestinationIdentifiers:)(0LL, v313, 0LL, 0LL, 0LL);
  if (v315)
  {
    swift_release(v486);
    v309(v311, v484);
    return (*(uint64_t (**)(char *, uint64_t))(v329 + 8))(v289, v485);
  }

  uint64_t v474 = v289;
  (*(void (**)(char *, void, uint64_t))(v469 + 104))( v314,  enum case for TextMessage.MessageType.typingIndicator(_:),  v468);
  v316 = v461;
  v310(v461, 1LL, 1LL, v282);
  uint64_t v317 = type metadata accessor for TextMessage.MessageSummaryInfo(0LL);
  v318 = v463;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v317 - 8) + 56LL))(v463, 1LL, 1LL, v317);
  uint64_t v319 = type metadata accessor for NicknameInformation(0LL);
  Swift::Int v320 = v464;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v319 - 8) + 56LL))(v464, 1LL, 1LL, v319);
  uint64_t v321 = type metadata accessor for TextMessage.ScheduleType(0LL);
  uint64_t v322 = v465;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v321 - 8) + 56LL))(v465, 1LL, 1LL, v321);
  uint64_t v323 = type metadata accessor for Date(0LL);
  uint64_t v324 = v466;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v323 - 8) + 56LL))(v466, 1LL, 1LL, v323);
  uint64_t v327 = v324;
  BYTE2(v326) = 0;
  LOWORD(v326) = 0;
  uint64_t v325 = v462;
  TextMessage.init(with:messageSubType:replyToGUID:threadIdentifierGUID:threadOriginatorFallbackHash:expressiveSendStyleIdentifier:groupID:currentGroupName:groupParticipantVersion:groupProtocolVersion:groupPhotoCreationTime:messageSummaryInfo:isAutoReply:availabilityVerificationRecipientChannelIDPrefix:availabilityVerificationRecipientEncryptionValidationToken:availabilityOffGridRecipientSubscriptionValidationToken:availabilityOffGridRecipientEncryptionValidationToken:seenAsOffGrid:lastPublisherOfOffGridStatus:nicknameInformation:truncatedNicknameRecordKey:isExpirable:isSOS:isCritical:replicationSourceID:scheduleType:scheduledDate:replicatedFallbackGUIDs:)( v311,  v314,  v316,  0LL,  0LL,  0LL,  0LL,  0LL,  (__n128)0,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  1,  0LL,  1,  0LL,  1,  v318,  0,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  2,  0LL,  0LL,  v320,  0LL,  0LL,  v326,  0LL,  1,  v322,  v327,  0LL);
  (*(void (**)(char *, uint64_t))(v329 + 8))(v474, v485);
  swift_release(v486);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v456 + 32))(v454, v325, v453);
}

uint64_t sub_100058E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100050F78(a1, a2, a3);
}

uint64_t _s17AssociatedMessageVMa(uint64_t a1)
{
  uint64_t result = qword_1000B1070;
  if (!qword_1000B1070) {
    return swift_getSingletonMetadata(a1, &_s17AssociatedMessageVMn);
  }
  return result;
}

unint64_t sub_100058E6C()
{
  unint64_t result = qword_1000B1000;
  if (!qword_1000B1000)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091270, &type metadata for TextMessageUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000B1000);
  }

  return result;
}

uint64_t sub_100058EB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100058EF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_100058F30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for TextMessageUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for TextMessageUnpacker.EncryptedMessageMissingData;
}

uint64_t *sub_100058F84(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    void *v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v19);
  }

  return a1;
}

uint64_t sub_100059054(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
}

uint64_t sub_1000590BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t sub_100059160(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  void *v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v24 = v21[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_100059250(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_1000592C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  uint64_t v24 = v20[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  return a1;
}

uint64_t sub_100059374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059380);
}

uint64_t sub_100059380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_100059400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005940C);
}

uint64_t sub_10005940C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TapBack.AssociatedMessageType(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + _Block_object_dispose(va, 8) = (a2 - 1);
  return result;
}

uint64_t sub_100059488(uint64_t a1)
{
  uint64_t result = type metadata accessor for TapBack.AssociatedMessageType(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_100091228;
    v4[2] = &unk_100091240;
    v4[3] = &unk_100091258;
    v4[4] = &unk_100091240;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t MessageEditingDictionary.encode(to:)(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B10B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_1000596A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MessageEditingDictionary.CodingKeys,  &type metadata for MessageEditingDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v27 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v27, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    char v26 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v26, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v25 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v25, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = *((unsigned __int8 *)v3 + 56);
    char v24 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v24, v5);
    uint64_t v20 = *((unsigned __int8 *)v3 + 57);
    char v23 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v23, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000596A4()
{
  unint64_t result = qword_1000B10C0;
  if (!qword_1000B10C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageEditingDictionary.CodingKeys,  &type metadata for MessageEditingDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B10C0);
  }

  return result;
}

double MessageEditingDictionary.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 42) = *(_OWORD *)((char *)v7 + 10);
  }

  return result;
}

uint64_t sub_100059730(void *a1)
{
  return MessageEditingDictionary.encode(to:)(a1);
}

MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional __swiftcall MessageEditingDictionary.CodingKeys.init(stringValue:)( Swift::String stringValue)
{
  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3D78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return (MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional)5;
  }
  else {
    return (MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional)v3;
  }
}

uint64_t MessageEditingDictionary.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000597BC + 4 * byte_1000912B0[a1]))( 6778213LL,  0xE300000000000000LL);
}

uint64_t sub_1000597BC()
{
  return 6910053LL;
}

uint64_t sub_1000597C8()
{
  return 6451301LL;
}

uint64_t sub_1000597D4()
{
  return 29797LL;
}

uint64_t sub_1000597E0()
{
  return 29554LL;
}

uint64_t MessageEditingDictionary.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100059818 + 4 * byte_1000912B5[a1]))( 6778213LL,  0xE300000000000000LL);
}

uint64_t sub_100059818()
{
  return 6910053LL;
}

uint64_t sub_100059824()
{
  return 6451301LL;
}

uint64_t sub_100059830()
{
  return 29797LL;
}

uint64_t sub_10005983C()
{
  return 29554LL;
}

void sub_100059848(char *a1)
{
}

void sub_100059854()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_100059898()
{
  return Hasher._finalize()();
}

void sub_1000598F0()
{
  __asm { BR              X10 }

uint64_t sub_100059924(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_100059968(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1000599A8()
{
  return Hasher._finalize()();
}

MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional sub_100059A00@<W0>( Swift::String *a1@<X0>, MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional *a2@<X8>)
{
  result.CMTimeValue value = MessageEditingDictionary.CodingKeys.init(stringValue:)(*a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

uint64_t sub_100059A2C()
{
  return ((uint64_t (*)(void))((char *)sub_100059A54 + 4 * byte_1000912C9[*v0]))();
}

void sub_100059A54(void *a1@<X8>)
{
  *a1 = 6910053LL;
  a1[1] = v1;
}

void sub_100059A64(void *a1@<X8>)
{
  *a1 = 6451301LL;
  a1[1] = v1;
}

void sub_100059A74(void *a1@<X8>)
{
  *a1 = 29797LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_100059A84(void *a1@<X8>)
{
  *a1 = 29554LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_100059A94()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100059ABC + 4 * byte_1000912CE[*v0]))( 6778213LL,  0xE300000000000000LL);
}

uint64_t sub_100059ABC()
{
  return 6910053LL;
}

uint64_t sub_100059AC8()
{
  return 6451301LL;
}

uint64_t sub_100059AD4()
{
  return 29797LL;
}

uint64_t sub_100059AE0()
{
  return 29554LL;
}

MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional sub_100059AEC@<W0>( uint64_t a1@<X0>, MessagesBlastDoorService::MessageEditingDictionary::CodingKeys_optional *a2@<X8>)
{
  result.CMTimeValue value = MessageEditingDictionary.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

uint64_t sub_100059B10(uint64_t a1)
{
  unint64_t v2 = sub_1000596A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100059B38(uint64_t a1)
{
  unint64_t v2 = sub_1000596A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100059B60(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B10E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_1000596A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MessageEditingDictionary.CodingKeys,  &type metadata for MessageEditingDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
  }

  else
  {
    char v32 = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    uint64_t v14 = v13;
    char v31 = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    int v25 = v16;
    uint64_t v26 = v15;
    char v30 = 2;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    char v29 = 3;
    uint64_t v27 = v17;
    swift_bridgeObjectRetain(v17);
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v29, v5);
    HIDWORD(v22) = v19;
    uint64_t v23 = v18;
    char v28 = 4;
    char v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v28, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100010D60(a1);
    uint64_t v21 = v27;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v14);
    *(void *)a2 = v12;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v14;
    *(void *)(a2 + 16) = v26;
    *(_BYTE *)(a2 + 24) = v25 & 1;
    *(void *)(a2 + 32) = v24;
    *(void *)(a2 + 40) = v21;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v23;
    *(_BYTE *)(a2 + 56) = BYTE4(v22) & 1;
    *(_BYTE *)(a2 + 57) = v20;
  }

unint64_t sub_100059E00()
{
  unint64_t result = qword_1000B10C8;
  if (!qword_1000B10C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageEditingDictionary.CodingKeys,  &type metadata for MessageEditingDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B10C8);
  }

  return result;
}

unint64_t sub_100059E48()
{
  unint64_t result = qword_1000B10D0;
  if (!qword_1000B10D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageEditingDictionary.CodingKeys,  &type metadata for MessageEditingDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B10D0);
  }

  return result;
}

unint64_t sub_100059E90()
{
  unint64_t result = qword_1000B10D8;
  if (!qword_1000B10D8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageEditingDictionary.CodingKeys,  &type metadata for MessageEditingDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B10D8);
  }

  return result;
}

uint64_t destroy for MessageEditingDictionary(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 40));
}

uint64_t initializeWithCopy for MessageEditingDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for MessageEditingDictionary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v9;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for MessageEditingDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageEditingDictionary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageEditingDictionary( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 5_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 5_Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MessageEditingDictionary()
{
  return &type metadata for MessageEditingDictionary;
}

uint64_t storeEnumTagSinglePayload for MessageEditingDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10005A16C + 4 * byte_1000912D8[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10005A1A0 + 4 * byte_1000912D3[v4]))();
}

uint64_t sub_10005A1A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005A1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005A1B0LL);
  }
  return result;
}

uint64_t sub_10005A1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005A1C4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10005A1C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005A1D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageEditingDictionary.CodingKeys()
{
  return &type metadata for MessageEditingDictionary.CodingKeys;
}

uint64_t sub_10005A1EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000E624(&qword_1000B0FE8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = (int *)type metadata accessor for MessageDictionary(0LL);
  uint64_t v7 = (uint64_t *)(v1 + v6[36]);
  uint64_t v8 = v7[1];
  if (v8 && (uint64_t v9 = v6, v10 = (uint64_t *)(v1 + v6[37]), v11 = v10[1], v11 >> 60 != 15))
  {
    uint64_t v16 = *v7;
    uint64_t v17 = *v10;
    uint64_t v48 = v16;
    uint64_t v49 = v17;
    uint64_t v18 = (void *)(v1 + v6[40]);
    uint64_t v19 = v18[1];
    uint64_t v50 = a1;
    uint64_t v44 = v5;
    if (v19)
    {
      if (*v18 == 5457241LL && v19 == 0xE300000000000000LL) {
        int v47 = 1;
      }
      else {
        int v47 = _stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, 5457241LL, 0xE300000000000000LL, 0LL);
      }
    }

    else
    {
      int v47 = 0;
    }

    uint64_t v21 = v9[38];
    uint64_t v22 = (uint64_t *)(v1 + v9[39]);
    if (*((_BYTE *)v22 + 8)) {
      uint64_t v23 = 0LL;
    }
    else {
      uint64_t v23 = *v22;
    }
    uint64_t v24 = v1 + v21;
    uint64_t v25 = *(void *)(v1 + v21);
    uint64_t v26 = *(void *)(v24 + 8);
    uint64_t v45 = v23;
    uint64_t v46 = v25;
    uint64_t v27 = v9[41];
    char v28 = (uint64_t *)(v1 + v9[42]);
    uint64_t v29 = *v28;
    unint64_t v30 = v28[1];
    uint64_t v32 = *(void *)(v1 + v27);
    unint64_t v31 = *(void *)(v1 + v27 + 8);
    uint64_t v33 = (uint64_t *)(v1 + v9[43]);
    uint64_t v34 = *v33;
    unint64_t v35 = v33[1];
    uint64_t v36 = v49;
    sub_100012AA8(v49, v11);
    sub_100012AA8(v36, v11);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v8);
    sub_100012AA8(v29, v30);
    sub_100012AA8(v32, v31);
    sub_100012AA8(v34, v35);
    unint64_t v43 = v31;
    uint64_t v37 = v44;
    NicknameInformation.init(with:decryptionKey:includesWallpaperData:updateInfoIncluded:messageType:wallpaperTag:lowResWallpaperTag:wallpaperMetadataTag:)( v48,  v8,  v36,  v11,  v47 & 1,  v45,  0LL,  v46,  v26,  v29,  v30,  v32,  v43,  v34,  v35);
    uint64_t v38 = type metadata accessor for NicknameInformation(0LL);
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
    v40(v37, 0LL, 1LL, v38);
    sub_100012B98(v36, v11);
    uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v39 + 32);
    uint64_t v42 = v50;
    v41(v50, v37, v38);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v40)(v42, 0LL, 1LL, v38);
  }

  else
  {
    sub_100012C44();
    uint64_t v12 = (void *)static OS_os_log.textMessageUnpacker.getter();
    uint64_t v13 = static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:type:_:)( "<NicknameInformation> No nickname",  33LL,  2LL,  &_mh_execute_header,  v12,  v13,  &_swiftEmptyArrayStorage);

    uint64_t v14 = type metadata accessor for NicknameInformation(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a1,  1LL,  1LL,  v14);
  }

uint64_t sub_10005A568(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000B0FE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for WatchfacePreviewUnpacker()
{
  return &type metadata for WatchfacePreviewUnpacker;
}

uint64_t sub_10005A5B8()
{
  return sub_10000E9D8( &qword_1000B10E8,  (uint64_t (*)(uint64_t))&type metadata accessor for WatchfacePreview,  (uint64_t)&protocol conformance descriptor for WatchfacePreview);
}

uint64_t sub_10005A5E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v158 = a2;
  uint64_t v145 = a3;
  uint64_t v150 = type metadata accessor for ImageHeaderError(0LL);
  uint64_t v151 = *(void *)(v150 - 8);
  uint64_t v4 = __chkstk_darwin(v150);
  uint64_t v153 = (char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v152 = (char *)&v143 - v6;
  uint64_t v7 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v7);
  uint64_t v154 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v149 = type metadata accessor for Image(0LL);
  uint64_t v148 = *(void *)(v149 - 8);
  uint64_t v9 = __chkstk_darwin(v149);
  uint64_t v147 = (char *)&v143 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v155 = (char *)&v143 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v159 = (char *)&v143 - v14;
  __chkstk_darwin(v13);
  uint64_t v146 = (char *)&v143 - v15;
  uint64_t v157 = type metadata accessor for Logger(0LL);
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v163 = (char *)&v143 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v161 = type metadata accessor for ImageHeader(0LL);
  uint64_t v162 = *(void *)(v161 - 8);
  uint64_t v17 = __chkstk_darwin(v161);
  uint64_t v160 = (char *)&v143 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  char v20 = (char *)&v143 - v19;
  uint64_t v21 = type metadata accessor for File(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for Archive(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v143 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v143 - v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, a1, v21);
  uint64_t v32 = (uint64_t)v164;
  Archive.init(file:)(v24);
  if (v32)
  {
    uint64_t v175 = v32;
    swift_errorRetain(v32);
    uint64_t v33 = sub_10000E624(&qword_1000AFFC8);
    unint64_t v34 = sub_10005B5D8();
    if (!swift_dynamicCast(&v174, &v175, v33, v34, 0LL))
    {
      swift_errorRelease(v175);
      swift_getErrorValue(v32, v173, v172, v52);
      uint64_t DynamicType = swift_getDynamicType(v172[0], v172[1], 1LL);
      uint64_t v55 = _typeName(_:qualified:)(DynamicType, 0LL, v54);
      uint64_t v57 = v56;
      uint64_t v58 = type metadata accessor for Explosion(0LL);
      uint64_t v59 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v58, v59, 0LL, 0LL);
      uint64_t v60 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008C130LL,  v55,  v57,  0x7241657461657243LL,  0xED00006576696863LL);
      swift_willThrow(v60);
      uint64_t v61 = v32;
      return swift_errorRelease(v61);
    }

    swift_errorRelease(v32);
    id v35 = v174;
    id v36 = [v174 domain];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    unint64_t v39 = v38;

    unint64_t v167 = v37;
    unint64_t v168 = v39;
    v40._countAndFlagsBits = 45LL;
    v40._object = (void *)0xE100000000000000LL;
    String.append(_:)(v40);
    id v171 = [v35 code];
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v41._object;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(object);
    unint64_t v43 = v167;
    unint64_t v44 = v168;
    uint64_t v45 = type metadata accessor for Explosion(0LL);
    uint64_t v46 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v45, v46, 0LL, 0LL);
    uint64_t v47 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008C130LL,  v43,  v44,  0x7241657461657243LL,  0xED00006576696863LL);
    swift_willThrow(v47);

LABEL_21:
    uint64_t v61 = v175;
    return swift_errorRelease(v61);
  }

  uint64_t v48 = v162;
  uint64_t v49 = v163;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v31, v29, v25);
  uint64_t v50 = v25;
  uint64_t v51 = v31;
  uint64_t v62 = Archive.extract(_:)(0x746F687370616E73LL, 0xEC000000676E702ELL);
  unint64_t v64 = v63;
  uint64_t v164 = 0LL;
  uint64_t v143 = v26;
  uint64_t v144 = v50;
  uint64_t v65 = v161;
  (*(void (**)(char *, void, uint64_t))(v48 + 104))(v20, enum case for ImageHeader.png(_:), v161);
  sub_100012A64(v62, v64);
  uint64_t v66 = v62;
  LOBYTE(v62) = Data.hasValidHeader(for:)(v20, v62, v64);
  uint64_t v67 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
  uint64_t v68 = v67(v20, v65);
  if ((v62 & 1) == 0)
  {
    uint64_t v92 = static Log.textMessageUnpacker.getter(v68);
    uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
    os_log_type_t v94 = static os_log_type_t.info.getter(v93);
    if (os_log_type_enabled(v93, v94))
    {
      uint64_t v95 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v95 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "Failing watch face since image header was incorrect",  v95,  2u);
      swift_slowDealloc(v95, -1LL, -1LL);
    }

    v96.n128_f64[0] = (*(double (**)(char *, uint64_t))(v156 + 8))(v49, v157);
    uint64_t v97 = v160;
    uint64_t v98 = v66;
    uint64_t v99 = (uint64_t)v164;
    Data.sniffedImageUTType()(v66, v64, v96);
    if (v99)
    {
      uint64_t v100 = v99;
      sub_100012B54(v66, v64);
    }

    else
    {
      sub_100012B54(v66, v64);
      unint64_t v167 = 0LL;
      unint64_t v168 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(33LL);
      __n128 v112 = swift_bridgeObjectRelease(v168);
      unint64_t v167 = 0xD00000000000001FLL;
      unint64_t v168 = 0x800000010008C180LL;
      v113._countAndFlagsBits = ImageHeader.rawValue.getter(v112);
      uint64_t v114 = v113._object;
      String.append(_:)(v113);
      swift_bridgeObjectRelease(v114);
      unint64_t v115 = v167;
      unint64_t v116 = v168;
      uint64_t v117 = type metadata accessor for Explosion(0LL);
      uint64_t v118 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      uint64_t v100 = swift_allocError(v117, v118, 0LL, 0LL);
      uint64_t v98 = v66;
      uint64_t v119 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008C130LL,  0xD000000000000013LL,  0x800000010008C160LL,  v115,  v116);
      swift_willThrow(v119);
      v67(v97, v161);
    }

    uint64_t v120 = v150;
    uint64_t v121 = v151;
    uint64_t v122 = v153;
    uint64_t v123 = v152;
    uint64_t v175 = v100;
    swift_errorRetain(v100);
    uint64_t v124 = sub_10000E624(&qword_1000AFFC8);
    if (swift_dynamicCast(v123, &v175, v124, v120, 0LL))
    {
      swift_errorRelease(v100);
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v122, v123, v120);
      unint64_t v167 = 0LL;
      unint64_t v168 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(33LL);
      __n128 v125 = swift_bridgeObjectRelease(v168);
      uint64_t v164 = v51;
      unint64_t v167 = 0xD00000000000001FLL;
      unint64_t v168 = 0x800000010008C180LL;
      v126._countAndFlagsBits = ImageHeaderError.rawValue.getter(v125);
      uint64_t v127 = v126._object;
      String.append(_:)(v126);
      swift_bridgeObjectRelease(v127);
      uint64_t v128 = v120;
      unint64_t v129 = v167;
      unint64_t v130 = v168;
      uint64_t v131 = type metadata accessor for Explosion(0LL);
      uint64_t v132 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v131, v132, 0LL, 0LL);
      uint64_t v133 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008C130LL,  0xD000000000000013LL,  0x800000010008C160LL,  v129,  v130);
      swift_willThrow(v133);
      sub_100012B54(v98, v64);
      (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v128);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v164, v144);
      goto LABEL_21;
    }

    uint64_t v91 = v98;
LABEL_19:
    sub_100012B54(v91, v64);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v51, v144);
    goto LABEL_21;
  }

  uint64_t v169 = &type metadata for Data;
  uint64_t v170 = &protocol witness table for Data;
  unint64_t v167 = v66;
  unint64_t v168 = v64;
  uint64_t v69 = type metadata accessor for Image.Encoding(0LL);
  uint64_t v70 = v154;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v154, 1LL, 1LL, v69);
  uint64_t v71 = v155;
  uint64_t v72 = Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v167, 0LL, 1LL, v70);
  uint64_t v73 = WatchfacePreview.Constraints.maxPixelDimension.getter(v72);
  uint64_t v74 = v159;
  uint64_t v75 = (uint64_t)v164;
  Image.thumbnailImage(maxPixelDimension:imageIndex:)(0LL, (double)v73);
  if (!v75)
  {
    uint64_t v101 = v66;
    uint64_t v102 = v148;
    uint64_t v103 = v71;
    uint64_t v104 = *(void (**)(char *, uint64_t))(v148 + 8);
    unint64_t v105 = v64;
    uint64_t v106 = v74;
    uint64_t v107 = v149;
    v104(v103, v149);
    uint64_t v108 = v146;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v146, v106, v107);
    uint64_t v109 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
    uint64_t v110 = v147;
    v109(v147, v108, v107);
    WatchfacePreview.init(image:)(v110);
    sub_100012B54(v101, v105);
    v104(v108, v107);
    return (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v51, v144);
  }

  (*(void (**)(char *, uint64_t))(v148 + 8))(v71, v149);
  uint64_t v175 = v75;
  swift_errorRetain(v75);
  uint64_t v76 = sub_10000E624(&qword_1000AFFC8);
  unint64_t v77 = sub_10005B5D8();
  if (swift_dynamicCast(&v174, &v175, v76, v77, 0LL))
  {
    swift_errorRelease(v75);
    id v78 = v174;
    id v79 = [v174 domain];
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    unint64_t v82 = v81;

    unint64_t v167 = v80;
    unint64_t v168 = v82;
    v83._countAndFlagsBits = 45LL;
    v83._object = (void *)0xE100000000000000LL;
    String.append(_:)(v83);
    id v171 = [v78 code];
    v84._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    uint64_t v85 = v84._object;
    String.append(_:)(v84);
    swift_bridgeObjectRelease(v85);
    unint64_t v86 = v167;
    unint64_t v87 = v168;
    uint64_t v88 = type metadata accessor for Explosion(0LL);
    uint64_t v89 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v88, v89, 0LL, 0LL);
    uint64_t v90 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008C130LL,  v86,  v87,  0xD000000000000014LL,  0x800000010008C1A0LL);
    swift_willThrow(v90);

    uint64_t v91 = v66;
    goto LABEL_19;
  }

  swift_errorRelease(v175);
  swift_getErrorValue(v75, v166, v165, v134);
  uint64_t v135 = swift_getDynamicType(v165[0], v165[1], 1LL);
  uint64_t v137 = _typeName(_:qualified:)(v135, 0LL, v136);
  uint64_t v139 = v138;
  uint64_t v140 = type metadata accessor for Explosion(0LL);
  uint64_t v141 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v140, v141, 0LL, 0LL);
  uint64_t v142 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008C130LL,  v137,  v139,  0xD000000000000014LL,  0x800000010008C1A0LL);
  swift_willThrow(v142);
  swift_errorRelease(v75);
  sub_100012B54(v66, v64);
  return (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v51, v144);
}

uint64_t sub_10005B5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10005A5E4(a1, a2, a3);
}

unint64_t sub_10005B5D8()
{
  unint64_t result = qword_1000B10F0;
  if (!qword_1000B10F0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1000B10F0);
  }

  return result;
}

void sub_10005B614(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_10005B650(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10005B6C0(uint64_t a1, char a2)
{
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

void sub_10005B6EC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10005B730()
{
  return Hasher._finalize()();
}

Swift::Int sub_10005B79C(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

void sub_10005B7F4(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10005B840()
{
  return Hasher._finalize()();
}

void sub_10005B8C8(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10005B914()
{
  return Hasher._finalize()();
}

uint64_t SyndicationActionDictionary.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B10F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10005BBEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SyndicationActionDictionary.CodingKeys,  &type metadata for SyndicationActionDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = v3[1];
  LOBYTE(v28[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v28, v5);
  if (!v2)
  {
    uint64_t v13 = *((void *)v3 + 2);
    uint64_t v14 = v3[24];
    LOBYTE(v28[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v28, v5);
    uint64_t v15 = *((void *)v3 + 4);
    uint64_t v16 = v3[40];
    LOBYTE(v28[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v28, v5);
    uint64_t v17 = v3[2];
    LOBYTE(v28[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v28, v5);
    uint64_t v18 = *((void *)v3 + 1);
    LOBYTE(v28[0]) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v28, v5);
    uint64_t v19 = *((void *)v3 + 6);
    uint64_t v20 = *((void *)v3 + 7);
    LOBYTE(v28[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v28, v5);
    __int128 v21 = *((_OWORD *)v3 + 7);
    v28[2] = *((_OWORD *)v3 + 6);
    v28[3] = v21;
    unsigned __int8 v29 = v3[128];
    __int128 v22 = *((_OWORD *)v3 + 5);
    v28[0] = *((_OWORD *)v3 + 4);
    v28[1] = v22;
    char v27 = 6;
    unint64_t v23 = sub_10005BC30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v27, v5, &type metadata for GroupContextDictionary, v23);
    uint64_t v24 = *v3;
    LOBYTE(v28[0]) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v28, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10005BBEC()
{
  unint64_t result = qword_1000B1100;
  if (!qword_1000B1100)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SyndicationActionDictionary.CodingKeys,  &type metadata for SyndicationActionDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1100);
  }

  return result;
}

unint64_t sub_10005BC30()
{
  unint64_t result = qword_1000B1108;
  if (!qword_1000B1108)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GroupContextDictionary,  &type metadata for GroupContextDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B1108);
  }

  return result;
}

__n128 SyndicationActionDictionary.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_BYTE *)(a2 + 12_Block_object_dispose(va, 8) = v9;
    __int128 v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v6;
    __int128 v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_10005BCDC(void *a1)
{
  return SyndicationActionDictionary.encode(to:)(a1);
}

uint64_t SyndicationActionDictionary.CodingKeys.rawValue.getter(char a1)
{
  return *(void *)&aSait_1[8 * a1];
}

uint64_t sub_10005BD0C(char *a1, char *a2)
{
  return sub_10003FEF4(*a1, *a2);
}

Swift::Int sub_10005BD18()
{
  return sub_10005B79C(0LL, *v0);
}

uint64_t sub_10005BD24(uint64_t a1)
{
  return sub_10005B6C0(a1, *v1);
}

Swift::Int sub_10005BD2C(uint64_t a1)
{
  return sub_10005B79C(a1, *v1);
}

unint64_t sub_10005BD34@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s24MessagesBlastDoorService27SyndicationActionDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10005BD60(void *a1@<X8>)
{
  *a1 = *(void *)&aSait_1[8 * *v1];
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_10005BD7C()
{
  return *(void *)&aSait_1[8 * *v0];
}

unint64_t sub_10005BD94@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s24MessagesBlastDoorService27SyndicationActionDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005BDB8(uint64_t a1)
{
  unint64_t v2 = sub_10005BBEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005BDE0(uint64_t a1)
{
  unint64_t v2 = sub_10005BBEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10005BE08(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B1128);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __n128 v54 = a1;
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10005BBEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SyndicationActionDictionary.CodingKeys,  &type metadata for SyndicationActionDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(v54);
  }

  else
  {
    uint64_t v12 = v6;
    LOBYTE(v64) = 0;
    uint64_t v13 = v5;
    char v14 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v5);
    LOBYTE(v64) = 1;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v5, v15);
    char v84 = v16 & 1;
    LOBYTE(v64) = 2;
    int v17 = v16;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v13, v18);
    int v51 = v17;
    uint64_t v52 = v19;
    char v83 = v20 & 1;
    LOBYTE(v64) = 3;
    int v21 = v20;
    int v22 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v13);
    int v49 = v21;
    int v50 = v22;
    LOBYTE(v64) = 4;
    uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v13);
    LOBYTE(v64) = 5;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v64, v13);
    uint64_t v26 = v25;
    *(void *)&__int128 v48 = v24;
    LOBYTE(v55) = 6;
    unint64_t v27 = sub_10005C860();
    swift_bridgeObjectRetain(v26);
    *((void *)&v48 + 1) = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v64,  &type metadata for GroupContextDictionary,  &v55,  v13,  &type metadata for GroupContextDictionary,  v27);
    uint64_t v28 = v64;
    uint64_t v29 = v66;
    uint64_t v43 = v67;
    uint64_t v44 = v65;
    uint64_t v41 = v69;
    uint64_t v42 = v71;
    int v38 = v72;
    int v39 = v70;
    char v82 = v70;
    char v81 = v72;
    char v85 = 7;
    uint64_t v45 = v68;
    swift_bridgeObjectRetain(v68);
    uint64_t v47 = v28;
    swift_bridgeObjectRetain(v28);
    uint64_t v46 = v29;
    swift_bridgeObjectRetain(v29);
    uint64_t v40 = 0LL;
    LOBYTE(v29) = KeyedDecodingContainer.decode(_:forKey:)(&v85, v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v13);
    LOBYTE(v55) = v29;
    BYTE1(v55) = v14;
    BYTE2(v55) = v50;
    uint64_t v40 = v23;
    *((void *)&v55 + 1) = v23;
    *(void *)&__int128 v56 = v53;
    BYTE8(v56) = v51 & 1;
    *(void *)&__int128 v57 = v52;
    BYTE8(v57) = v49 & 1;
    uint64_t v30 = *((void *)&v48 + 1);
    __int128 v58 = v48;
    uint64_t v32 = v46;
    uint64_t v31 = v47;
    uint64_t v33 = v45;
    *(void *)&__int128 v59 = v47;
    *((void *)&v59 + 1) = v44;
    *(void *)&__int128 v60 = v46;
    *((void *)&v60 + 1) = v43;
    *(void *)&__int128 v61 = v45;
    *((void *)&v61 + 1) = v41;
    LOBYTE(v62) = v39;
    *((void *)&v62 + 1) = v42;
    char v63 = v38;
    sub_10005C8A4(&v55);
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v31);
    sub_100010D60(v54);
    LOBYTE(v64) = v29;
    BYTE1(v64) = v14;
    BYTE2(v64) = v50;
    uint64_t v65 = v40;
    uint64_t v66 = v53;
    LOBYTE(v67) = v84;
    uint64_t v68 = v52;
    LOBYTE(v69) = v83;
    uint64_t v70 = v48;
    uint64_t v71 = v30;
    uint64_t v72 = v31;
    uint64_t v73 = v44;
    uint64_t v74 = v32;
    uint64_t v75 = v43;
    uint64_t v76 = v33;
    uint64_t v77 = v41;
    char v78 = v82;
    uint64_t v79 = v42;
    char v80 = v81;
    sub_10003F50C(&v64);
    __int128 v34 = v62;
    *(_OWORD *)(a2 + 96) = v61;
    *(_OWORD *)(a2 + 112) = v34;
    *(_BYTE *)(a2 + 12_Block_object_dispose(va, 8) = v63;
    __int128 v35 = v58;
    *(_OWORD *)(a2 + 32) = v57;
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v35;
    __int128 v36 = v60;
    *(_OWORD *)(a2 + 64) = v59;
    *(_OWORD *)(a2 + 80) = v36;
    __int128 v37 = v56;
    *(_OWORD *)a2 = v55;
    *(_OWORD *)(a2 + 16) = v37;
  }

unint64_t _s24MessagesBlastDoorService27SyndicationActionDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0( Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3E10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10005C30C()
{
  unint64_t result = qword_1000B1110;
  if (!qword_1000B1110)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SyndicationActionDictionary.CodingKeys,  &type metadata for SyndicationActionDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1110);
  }

  return result;
}

unint64_t sub_10005C354()
{
  unint64_t result = qword_1000B1118;
  if (!qword_1000B1118)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SyndicationActionDictionary.CodingKeys,  &type metadata for SyndicationActionDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1118);
  }

  return result;
}

unint64_t sub_10005C39C()
{
  unint64_t result = qword_1000B1120;
  if (!qword_1000B1120)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SyndicationActionDictionary.CodingKeys,  &type metadata for SyndicationActionDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1120);
  }

  return result;
}

uint64_t destroy for SyndicationActionDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for SyndicationActionDictionary(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v5;
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = v7;
  uint64_t v10 = *(void *)(a2 + 96);
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v9;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 128);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for SyndicationActionDictionary(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  uint64_t v7 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(a2 + 88);
  uint64_t v12 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 104) = v14;
  uint64_t v15 = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 128);
  *(void *)(a1 + 120) = v15;
  return a1;
}

__n128 initializeWithTake for SyndicationActionDictionary(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for SyndicationActionDictionary(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(*(void *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 96);
  uint64_t v9 = *(void *)(a1 + 96);
  *(void *)(a1 + 8_Block_object_dispose(va, 8) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_BYTE *)(a1 + 12_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for SyndicationActionDictionary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 129)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SyndicationActionDictionary( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0LL;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 12_Block_object_dispose(va, 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 129) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 129) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SyndicationActionDictionary()
{
  return &type metadata for SyndicationActionDictionary;
}

uint64_t storeEnumTagSinglePayload for SyndicationActionDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10005C7E0 + 4 * byte_100091530[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10005C814 + 4 * byte_10009152B[v4]))();
}

uint64_t sub_10005C814(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005C81C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10005C824LL);
  }
  return result;
}

uint64_t sub_10005C830(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10005C838LL);
  }
  *(_BYTE *)__n128 result = a2 + 7;
  return result;
}

uint64_t sub_10005C83C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10005C844(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SyndicationActionDictionary.CodingKeys()
{
  return &type metadata for SyndicationActionDictionary.CodingKeys;
}

unint64_t sub_10005C860()
{
  unint64_t result = qword_1000B1130;
  if (!qword_1000B1130)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for GroupContextDictionary,  &type metadata for GroupContextDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B1130);
  }

  return result;
}

void *sub_10005C8A4(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  swift_bridgeObjectRetain(a1[12]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t SyndicationActionDictionary.messagePartRange()()
{
  uint64_t v1 = sub_10005C9B8((uint64_t)v7, (uint64_t)&v8);
  if ((v9 & 1) != 0
    || (unint64_t v2 = v8, sub_10005C9B8(v0 + 32, (uint64_t)v6), v1 = sub_10005C9B8((uint64_t)v6, (uint64_t)&v10), (v11 & 1) != 0))
  {
    uint64_t result = NSNotFound.getter(v1);
    if (result) {
      return 0LL;
    }
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v4 = v10;
  if (v2 >= 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t result = NSNotFound.getter(v1);
  if (v2 == result)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v4 >= 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  if (__OFADD__(v2, v5)) {
    goto LABEL_16;
  }
  if (((v2 + v5) & 0x8000000000000000LL) == 0) {
    return v2;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10005C9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for LargeImageUnpacker()
{
  return &type metadata for LargeImageUnpacker;
}

uint64_t sub_10005CA10()
{
  return sub_10000E9D8( &qword_1000B1140,  (uint64_t (*)(uint64_t))&type metadata accessor for LargeImage,  (uint64_t)&protocol conformance descriptor for LargeImage);
}

uint64_t sub_10005CA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a1;
  uint64_t v96 = a2;
  uint64_t v2 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v2);
  uint64_t v106 = (char *)v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Explosion(0LL);
  uint64_t v108 = *(void *)(v4 - 8);
  uint64_t v109 = v4;
  __chkstk_darwin(v4);
  uint64_t v107 = (char *)v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for MachImageError.Description(0LL);
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v103 = v6;
  __chkstk_darwin(v6);
  uint64_t v101 = (char *)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for MachImageError.ErrorKind(0LL);
  uint64_t v99 = *(void *)(v8 - 8);
  uint64_t v100 = v8;
  __chkstk_darwin(v8);
  uint64_t v98 = (char *)v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for MediaMetadata(0LL);
  __chkstk_darwin(v10);
  uint64_t v95 = (char *)v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for MachImageError(0LL);
  uint64_t v105 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  v94[1] = (char *)v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v104 = (char *)v94 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)v94 - v18;
  uint64_t v20 = type metadata accessor for MachPort(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)v94 - v26;
  uint64_t v28 = static Sandbox.enableHubbleStateFlag()(v25);
  uint64_t v29 = LargeImage.Context.machPort.getter(v28);
  uint64_t v30 = LargeImage.Context.bufferSize.getter(v29);
  uint64_t v110 = v27;
  uint64_t v111 = v21;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  uint64_t v112 = v20;
  v31(v24, v27, v20);
  uint64_t v32 = type metadata accessor for MachImage(0LL);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  uint64_t v33 = v113;
  uint64_t v34 = MachImage.init(machPort:bufferSize:)(v24, v30);
  if (!v33)
  {
    uint64_t v75 = v34;
    uint64_t v76 = v95;
    Swift::String v113 = (void (*)(void, void, void))v12;
    swift_retain(v34);
    uint64_t v77 = dispatch thunk of MachImage.initialize(from:)(v97);
    LargeImage.Context.metadata.getter(v77);
    LargeImage.init(image:metadata:)(v75, v76);
    swift_release(v75);
    return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v110, v112);
  }

  uint64_t v117 = v33;
  swift_errorRetain(v33);
  uint64_t v35 = sub_10000E624(&qword_1000AFFC8);
  if ((swift_dynamicCast(v19, &v117, v35, v12, 0LL) & 1) == 0)
  {
    swift_errorRelease(v117);
    uint64_t v79 = v107;
    Explosion.init(domain:errorType:keyPath:)( 0xD00000000000001ELL,  0x800000010008C1E0LL,  0xD000000000000015LL,  0x800000010008C1C0LL,  0LL,  0LL);
    sub_100012C44();
    char v80 = (void *)static OS_os_log.largeImageUnpacker.getter();
    uint64_t v81 = sub_10000E624(&qword_1000AFF48);
    uint64_t v82 = swift_allocObject(v81, 72LL, 7LL);
    *(_OWORD *)(v82 + 16) = xmmword_10008D7D0;
    uint64_t v84 = v108;
    uint64_t v83 = v109;
    Swift::String v113 = *(void (**)(void, void, void))(v108 + 16);
    uint64_t v85 = (uint64_t)v106;
    v113(v106, v79, v109);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v85, 0LL, 1LL, v83);
    uint64_t v86 = >> prefix<A>(_:)(v85);
    uint64_t v88 = v87;
    sub_10005D768(v85);
    *(void *)(v82 + 56) = &type metadata for String;
    unint64_t v89 = sub_100012CDC();
    *(void *)(v82 + 64) = v89;
    *(void *)(v82 + 32) = v86;
    *(void *)(v82 + 40) = v88;
    uint64_t v90 = static os_log_type_t.default.getter(v89);
    os_log(_:dso:log:type:_:)("LargeImage explosion: %{public}@", 32LL, 2LL, &_mh_execute_header, v80, v90, v82);

    swift_bridgeObjectRelease(v82);
    uint64_t v91 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v83, v91, 0LL, 0LL);
    uint64_t v93 = ((uint64_t (*)(uint64_t, char *, uint64_t))v113)(v92, v79, v83);
    swift_willThrow(v93);
    swift_errorRelease(v33);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v79, v83);
    return (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v110, v112);
  }

  swift_errorRelease(v33);
  __int128 v36 = *(uint64_t (**)(char *, char *, uint64_t))(v105 + 32);
  Swift::String v113 = (void (*)(void, void, void))v12;
  uint64_t v37 = v36(v104, v19, v12);
  uint64_t v115 = 0LL;
  unint64_t v116 = 0xE000000000000000LL;
  int v38 = v98;
  uint64_t v39 = MachImageError.kind.getter(v37);
  uint64_t v40 = MachImageError.ErrorKind.rawValue.getter(v39);
  unint64_t v42 = v41;
  (*(void (**)(char *, uint64_t))(v99 + 8))(v38, v100);
  swift_bridgeObjectRelease(v116);
  uint64_t v115 = v40;
  unint64_t v116 = v42;
  v43._countAndFlagsBits = 8250LL;
  v43._object = (void *)0xE200000000000000LL;
  String.append(_:)(v43);
  uint64_t v44 = v101;
  uint64_t v45 = MachImageError.description.getter();
  uint64_t v46 = MachImageError.Description.rawValue.getter(v45);
  __int128 v48 = v47;
  (*(void (**)(char *, uint64_t))(v102 + 8))(v44, v103);
  v49._countAndFlagsBits = v46;
  v49._object = v48;
  String.append(_:)(v49);
  __n128 v50 = swift_bridgeObjectRelease(v48);
  uint64_t v51 = v115;
  unint64_t v52 = v116;
  uint64_t v53 = MachImageError.extraInfo.getter(v50);
  if (v53)
  {
    uint64_t v54 = v53;
    v114._countAndFlagsBits = 0LL;
    v114._object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(16LL);
    __n128 v55 = swift_bridgeObjectRelease(v114._object);
    strcpy((char *)&v114, ". Extra Info: ");
    HIBYTE(v114._object) = -18;
    v56._countAndFlagsBits = Dictionary.description.getter( v54,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String,  v55);
    object = v56._object;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(object);
    __int128 v58 = v114._object;
    String.append(_:)(v114);
    swift_bridgeObjectRelease(v58);
    uint64_t v51 = v115;
    unint64_t v52 = v116;
  }

  __int128 v59 = v107;
  Explosion.init(domain:errorType:keyPath:)(0xD00000000000001ELL, 0x800000010008C1E0LL, v51, v52, 0LL, 0LL);
  sub_100012C44();
  __int128 v60 = (void *)static OS_os_log.largeImageUnpacker.getter();
  uint64_t v61 = sub_10000E624(&qword_1000AFF48);
  uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
  *(_OWORD *)(v62 + 16) = xmmword_10008D7D0;
  uint64_t v64 = v108;
  uint64_t v63 = v109;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v108 + 16);
  uint64_t v66 = (uint64_t)v106;
  v65(v106, v59, v109);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v66, 0LL, 1LL, v63);
  uint64_t v67 = >> prefix<A>(_:)(v66);
  uint64_t v69 = v68;
  sub_10005D768(v66);
  *(void *)(v62 + 56) = &type metadata for String;
  unint64_t v70 = sub_100012CDC();
  *(void *)(v62 + 64) = v70;
  *(void *)(v62 + 32) = v67;
  *(void *)(v62 + 40) = v69;
  uint64_t v71 = static os_log_type_t.default.getter(v70);
  os_log(_:dso:log:type:_:)("LargeImage explosion: %{public}@", 32LL, 2LL, &_mh_execute_header, v60, v71, v62);

  swift_bridgeObjectRelease(v62);
  uint64_t v72 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v63, v72, 0LL, 0LL);
  uint64_t v74 = ((uint64_t (*)(uint64_t, char *, uint64_t))v65)(v73, v59, v63);
  swift_willThrow(v74);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v59, v63);
  (*(void (**)(char *, void (*)(void, void, void)))(v105 + 8))(v104, v113);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v112);
  return swift_errorRelease(v117);
}

uint64_t sub_10005D754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10005CA3C(a1, a2);
}

uint64_t sub_10005D768(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000AFFB0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10005D7A8()
{
  uint64_t v0 = type metadata accessor for FileTransferAttribute.AttachmentSubtype(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v48 = v0;
  uint64_t v49 = v1;
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v45[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v2);
  uint64_t v6 = &v45[-v5];
  uint64_t v7 = sub_10000E624(&qword_1000B1148);
  __chkstk_darwin(v7);
  uint64_t v9 = &v45[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for FileTransferAttribute(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v45[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_10000E624(&qword_1000AFF08);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = &v45[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Message.content.getter(v15);
  uint64_t v18 = type metadata accessor for _AttributedString(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    sub_100012EF8((uint64_t)v17, &qword_1000AFF08);
    uint64_t v20 = &_swiftEmptyArrayStorage;
LABEL_18:
    uint64_t v44 = v20[2];
    swift_bridgeObjectRelease(v20);
    return v44 != 0;
  }

  uint64_t v47 = v13;
  uint64_t v51 = v4;
  unint64_t v52 = v6;
  uint64_t v21 = _AttributedString.attributes.getter();
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t))(v19 + 8))(v17, v18);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  __n128 v55 = &_swiftEmptyArrayStorage;
  uint64_t v50 = *(void *)(v21 + 16);
  if (!v50)
  {
LABEL_17:
    swift_bridgeObjectRelease(v21);
    goto LABEL_18;
  }

  unint64_t v23 = 0LL;
  uint64_t v24 = v21 + 32;
  int v46 = enum case for FileTransferAttribute.AttachmentSubtype.sticker(_:);
  uint64_t v25 = v51;
  while (v23 < *(void *)(v21 + 16))
  {
    sub_100012C98(v24, (uint64_t)v54);
    sub_100012C98((uint64_t)v54, (uint64_t)v53);
    uint64_t v26 = sub_10000E624(&qword_1000B0458);
    int v27 = swift_dynamicCast(v9, v53, v26, v10, 6LL);
    uint64_t v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    if (v27)
    {
      v28(v9, 0LL, 1LL, v10);
      uint64_t v29 = v47;
      uint64_t v30 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v47, v9, v10);
      FileTransferAttribute.attachmentSubtype.getter(v30);
      uint64_t v31 = v49;
      uint64_t v32 = v25;
      uint64_t v33 = v25;
      uint64_t v34 = v10;
      uint64_t v35 = v9;
      uint64_t v36 = v21;
      uint64_t v37 = v11;
      uint64_t v38 = v48;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v49 + 16))(v32, v52, v48);
      LODWORD(v33) = (*(uint64_t (**)(_BYTE *, uint64_t))(v31 + 88))(v33, v38);
      uint64_t v39 = *(void (**)(_BYTE *, uint64_t))(v31 + 8);
      v39(v51, v38);
      uint64_t v40 = v38;
      uint64_t v11 = v37;
      uint64_t v21 = v36;
      uint64_t v9 = v35;
      uint64_t v10 = v34;
      v39(v52, v40);
      uint64_t v25 = v51;
      (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v29, v10);
      if ((_DWORD)v33 == v46)
      {
        sub_100012C80(v54, (uint64_t)v53);
        unint64_t v41 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
        {
          sub_10005DC60(0, v41[2] + 1LL, 1);
          unint64_t v41 = v55;
        }

        unint64_t v43 = v41[2];
        unint64_t v42 = v41[3];
        if (v43 >= v42 >> 1)
        {
          sub_10005DC60(v42 > 1, v43 + 1, 1);
          unint64_t v41 = v55;
        }

        v41[2] = v43 + 1;
        uint64_t result = sub_100012C80(v53, (uint64_t)&v41[5 * v43 + 4]);
        uint64_t v25 = v51;
        goto LABEL_7;
      }
    }

    else
    {
      v28(v9, 1LL, 1LL, v10);
      sub_100012EF8((uint64_t)v9, &qword_1000B1148);
    }

    uint64_t result = sub_100010D60(v54);
LABEL_7:
    ++v23;
    v24 += 40LL;
    if (v50 == v23)
    {
      uint64_t v20 = v55;
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10005DB94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005DC7C(a1, a2, a3, *v3);
  unsigned __int8 *v3 = (char *)result;
  return result;
}

uint64_t sub_10005DBB0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005DDD8( a1,  a2,  a3,  (void *)*v3,  &qword_1000B1170,  (uint64_t (*)(void))&type metadata accessor for EncodedAttachments.Content);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10005DBDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005DDD8( a1,  a2,  a3,  (void *)*v3,  &qword_1000B1158,  (uint64_t (*)(void))&type metadata accessor for RelayReachabilityHandleResult);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10005DC08(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005DDD8( a1,  a2,  a3,  (void *)*v3,  &qword_1000B1150,  (uint64_t (*)(void))&type metadata accessor for SMSCTPart);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10005DC34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005DDD8( a1,  a2,  a3,  (void *)*v3,  &qword_1000B1160,  (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10005DC60(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10005DFB8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10005DC7C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000E624(&qword_1000B1168);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8]) {
      memmove(v14, v15, 4 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10005DDD8( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_10000E624(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  void v18[2] = v11;
  _OWORD v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  int v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v8 = 0LL;
    int64_t v10 = 1;
    goto LABEL_39;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  int64_t v10 = 1;
  uint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

    unint64_t v9 = 0;
    goto LABEL_37;
  }

  int64_t v7 = sub_100067E60(result, a2, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_1000681CC);
  unint64_t v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}

uint64_t sub_10005DFB8(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_10000E624(&qword_1000B0450);
    uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }

  else
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8) {
      memmove(v11 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_10000E624(&qword_1000B0458);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t Optional.tryUnwrap(_:file:line:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v29 = a5;
  v30._countAndFlagsBits = a1;
  v30._object = a2;
  uint64_t v11 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  unint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v14);
  uint64_t v16 = *(void *)(a6 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a6);
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  swift_bridgeObjectRetain(a4);
  v18._countAndFlagsBits = 58LL;
  v18._object = (void *)0xE100000000000000LL;
  String.append(_:)(v18);
  uint64_t v33 = v29;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  v21._countAndFlagsBits = 58LL;
  v21._object = (void *)0xE100000000000000LL;
  String.append(_:)(v21);
  String.append(_:)(v30);
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  uint64_t v24 = type metadata accessor for Explosion(0LL);
  unint64_t v25 = sub_10001295C();
  swift_allocError(v24, v25, 0LL, 0LL);
  uint64_t v26 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000002ELL,  0x800000010008C250LL,  0x6465746365707845LL,  0xEE0065756C615620LL,  v22,  v23);
  return swift_willThrow(v26);
}

ValueMetadata *type metadata accessor for NotifyRecipientCommandUnpacker()
{
  return &type metadata for NotifyRecipientCommandUnpacker;
}

unint64_t sub_10005E33C(uint64_t a1)
{
  unint64_t result = sub_10000E840();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_10005E364()
{
  unint64_t result = qword_1000B1178;
  if (!qword_1000B1178)
  {
    uint64_t v1 = type metadata accessor for NotifyRecipientCommand(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NotifyRecipientCommand, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1178);
  }

  return result;
}

uint64_t sub_10005E3AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075330(a1, a2, a3);
}

ValueMetadata *type metadata accessor for StyleSheetUnpacker()
{
  return &type metadata for StyleSheetUnpacker;
}

unint64_t sub_10005E3D4()
{
  unint64_t result = qword_1000B1180;
  if (!qword_1000B1180)
  {
    uint64_t v1 = type metadata accessor for StyleSheet(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for StyleSheet, v1);
    atomic_store(result, (unint64_t *)&qword_1000B1180);
  }

  return result;
}

uint64_t sub_10005E41C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v111 = a1;
  uint64_t v118 = type metadata accessor for Logger(0LL);
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  unint64_t v116 = (char *)&v103 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
  uint64_t v135 = *(void *)(v138 - 8);
  uint64_t v2 = __chkstk_darwin(v138);
  __n128 v134 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v137 = (char *)&v103 - v4;
  uint64_t v139 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
  uint64_t v140 = *(void *)(v139 - 8);
  uint64_t v5 = __chkstk_darwin(v139);
  uint64_t v132 = (char *)&v103 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  __n128 v136 = (char *)&v103 - v7;
  uint64_t v123 = type metadata accessor for StyleSheet.Rule(0LL);
  uint64_t v125 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v124 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for StyleSheet.Rule(0LL);
  uint64_t v133 = *(void *)(v127 - 8);
  uint64_t v9 = __chkstk_darwin(v127);
  unint64_t v129 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  Swift::String v126 = (char *)&v103 - v11;
  uint64_t v110 = type metadata accessor for StyleSheet(0LL);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  unint64_t v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Path(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = (char *)&v103 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = File.path.getter(v23);
  Path.fileURL.getter(v26);
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  static String.Encoding.utf8.getter(v27);
  uint64_t v28 = v131;
  uint64_t v29 = String.init(contentsOf:encoding:)(v20, v16);
  if (v28) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  uint64_t v32 = v29;
  uint64_t v33 = v30;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v34 = StyleSheet.init(css:)(v32, v33);
  uint64_t result = StyleSheet.rules.getter(v34);
  uint64_t v122 = *(void *)(result + 16);
  if (v122)
  {
    uint64_t v104 = v13;
    unint64_t v35 = 0LL;
    uint64_t v36 = v133;
    unint64_t v120 = result + ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    int v119 = enum case for StyleSheet.Rule.qualified(_:);
    int v114 = enum case for StyleSheet.Rule.atKeyword(_:);
    int v105 = enum case for StyleSheet.Rule.atKeyword(_:);
    int v108 = enum case for StyleSheet.Rule.qualified(_:);
    uint64_t v128 = &_swiftEmptyArrayStorage;
    uint64_t v37 = v134;
    uint64_t v38 = v135;
    uint64_t v39 = v137;
    uint64_t v40 = v123;
    unint64_t v42 = v126;
    uint64_t v41 = v127;
    uint64_t v121 = result;
    while (1)
    {
      if (v35 >= *(void *)(result + 16))
      {
        __break(1u);
        return result;
      }

      uint64_t v43 = *(void *)(v36 + 72);
      unint64_t v130 = v35;
      uint64_t v44 = *(void (**)(char *, unint64_t, uint64_t))(v133 + 16);
      v44(v42, v120 + v43 * v35, v41);
      uint64_t v45 = v42;
      int v46 = v129;
      v44(v129, (unint64_t)v45, v41);
      uint64_t v47 = v133;
      int v48 = (*(uint64_t (**)(char *, uint64_t))(v133 + 88))(v46, v41);
      if (v48 == v119)
      {
        (*(void (**)(char *, uint64_t))(v47 + 96))(v46, v41);
        uint64_t v50 = *(void *)v46;
        uint64_t v49 = *((void *)v46 + 1);
        uint64_t v51 = *((void *)v46 + 2);
        uint64_t v52 = *(void *)(v51 + 16);
        if (v52)
        {
          uint64_t v113 = *(void *)v46;
          uint64_t v131 = v49;
          uint64_t v53 = v140;
          uint64_t v54 = v51 + ((*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
          uint64_t v115 = v51;
          __n128 v55 = swift_bridgeObjectRetain(v51);
          uint64_t v56 = *(void *)(v53 + 72);
          __int128 v57 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v53 + 16);
          __int128 v58 = &_swiftEmptyArrayStorage;
          uint64_t v59 = v139;
          __int128 v60 = v136;
          do
          {
            v57(v60, v54, v59, v55);
            sub_10005EF00(v60, v39);
            if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0) {
              __int128 v58 = (void *)sub_1000331D0(0, v58[2] + 1LL, 1, (unint64_t)v58);
            }
            uint64_t v61 = v135;
            unint64_t v63 = v58[2];
            unint64_t v62 = v58[3];
            if (v63 >= v62 >> 1) {
              __int128 v58 = (void *)sub_1000331D0(v62 > 1, v63 + 1, 1, (unint64_t)v58);
            }
            v58[2] = v63 + 1;
            uint64_t v39 = v137;
            (*(void (**)(unint64_t, char *))(v61 + 32))( (unint64_t)v58 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))
            + *(void *)(v61 + 72) * v63,
              v137);
            __int128 v60 = v136;
            uint64_t v59 = v139;
            (*(void (**)(char *, uint64_t))(v140 + 8))(v136, v139);
            v54 += v56;
            --v52;
          }

          while (v52);
          swift_bridgeObjectRelease_n(v115, 2LL);
          uint64_t v38 = v135;
          uint64_t v40 = v123;
          uint64_t v84 = v124;
          uint64_t v85 = v125;
          unint64_t v42 = v126;
          uint64_t v49 = v131;
          uint64_t v50 = v113;
        }

        else
        {
          __n128 v83 = swift_bridgeObjectRelease(v51);
          __int128 v58 = &_swiftEmptyArrayStorage;
          uint64_t v84 = v124;
          uint64_t v85 = v125;
          unint64_t v42 = v126;
        }

        *(void *)uint64_t v84 = v50;
        *((void *)v84 + 1) = v49;
        *((void *)v84 + 2) = v58;
        uint64_t v37 = v134;
      }

      else
      {
        if (v48 != v114)
        {
          unint64_t v78 = sub_100060C24();
          uint64_t v79 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v78, 0LL, 0LL);
          *char v80 = 0;
          swift_willThrow(v79);
          uint64_t v81 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v129, v41);
          uint64_t v82 = v116;
          unint64_t v42 = v126;
          uint64_t v86 = static Log.messageUnpacker.getter(v81);
          uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
          os_log_type_t v88 = static os_log_type_t.info.getter(v87);
          if (os_log_type_enabled(v87, v88))
          {
            unint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)unint64_t v89 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Failed to unpack rule from LinkPresentation StyleSheet",  v89,  2u);
            uint64_t v90 = v89;
            uint64_t v39 = v137;
            swift_slowDealloc(v90, -1LL, -1LL);
          }

          swift_errorRelease(v79);

          (*(void (**)(char *, uint64_t))(v117 + 8))(v82, v118);
          uint64_t v37 = v134;
          uint64_t v40 = v123;
          goto LABEL_6;
        }

        uint64_t v64 = *(void (**)(char *, uint64_t))(v47 + 96);
        uint64_t v65 = v129;
        v64(v129, v41);
        uint64_t v113 = *(void *)v65;
        uint64_t v115 = *((void *)v65 + 1);
        uint64_t v66 = *((void *)v65 + 3);
        uint64_t v112 = *((void *)v65 + 2);
        uint64_t v67 = *((void *)v65 + 4);
        uint64_t v68 = *(void *)(v67 + 16);
        uint64_t v69 = v140;
        if (v68)
        {
          uint64_t v107 = v66;
          uint64_t v70 = v67 + ((*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
          uint64_t v106 = v67;
          __n128 v71 = swift_bridgeObjectRetain(v67);
          uint64_t v131 = *(void *)(v69 + 72);
          uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v69 + 16);
          uint64_t v73 = &_swiftEmptyArrayStorage;
          uint64_t v74 = v139;
          uint64_t v75 = v132;
          do
          {
            v72(v75, v70, v74, v71);
            sub_10005EF00(v75, v37);
            if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0) {
              uint64_t v73 = (void *)sub_1000331D0(0, v73[2] + 1LL, 1, (unint64_t)v73);
            }
            unint64_t v77 = v73[2];
            unint64_t v76 = v73[3];
            if (v77 >= v76 >> 1) {
              uint64_t v73 = (void *)sub_1000331D0(v76 > 1, v77 + 1, 1, (unint64_t)v73);
            }
            v73[2] = v77 + 1;
            uint64_t v37 = v134;
            (*(void (**)(unint64_t, char *))(v38 + 32))( (unint64_t)v73 + ((*(unsigned __int8 *)(v38 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))
            + *(void *)(v38 + 72) * v77,
              v134);
            uint64_t v75 = v132;
            uint64_t v74 = v139;
            (*(void (**)(char *, uint64_t))(v140 + 8))(v132, v139);
            v70 += v131;
            --v68;
          }

          while (v68);
          swift_bridgeObjectRelease_n(v106, 2LL);
          uint64_t v39 = v137;
          uint64_t v40 = v123;
          uint64_t v91 = v124;
          uint64_t v85 = v125;
          unint64_t v42 = v126;
          uint64_t v66 = v107;
        }

        else
        {
          __n128 v83 = swift_bridgeObjectRelease(v67);
          uint64_t v73 = &_swiftEmptyArrayStorage;
          uint64_t v39 = v137;
          uint64_t v91 = v124;
          uint64_t v85 = v125;
          unint64_t v42 = v126;
        }

        uint64_t v92 = v115;
        uint64_t v93 = v112;
        *(void *)uint64_t v91 = v113;
        *((void *)v91 + 1) = v92;
        *((void *)v91 + 2) = v93;
        *((void *)v91 + 3) = v66;
        *((void *)v91 + 4) = v73;
      }

      (*(void (**)(__n128))(v85 + 104))(v83);
      if ((swift_isUniquelyReferenced_nonNull_native(v128) & 1) != 0) {
        unint64_t v94 = (unint64_t)v128;
      }
      else {
        unint64_t v94 = sub_1000331E4(0, v128[2] + 1LL, 1, (unint64_t)v128);
      }
      unint64_t v96 = *(void *)(v94 + 16);
      unint64_t v95 = *(void *)(v94 + 24);
      uint64_t v97 = v125;
      if (v96 >= v95 >> 1)
      {
        unint64_t v94 = sub_1000331E4(v95 > 1, v96 + 1, 1, v94);
        uint64_t v97 = v125;
      }

      *(void *)(v94 + 16) = v96 + 1;
      unint64_t v98 = (*(unsigned __int8 *)(v97 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      uint64_t v128 = (void *)v94;
      (*(void (**)(unint64_t, char *, uint64_t))(v97 + 32))( v94 + v98 + *(void *)(v97 + 72) * v96,  v124,  v40);
LABEL_6:
      unint64_t v35 = v130 + 1;
      uint64_t v36 = v133;
      uint64_t v41 = v127;
      (*(void (**)(char *, uint64_t))(v133 + 8))(v42, v127);
      uint64_t result = v121;
      if (v35 == v122)
      {
        __n128 v99 = swift_bridgeObjectRelease(v121);
        unint64_t v13 = v104;
        uint64_t v100 = v128;
        goto LABEL_41;
      }
    }
  }

  __n128 v99 = swift_bridgeObjectRelease(result);
  uint64_t v100 = &_swiftEmptyArrayStorage;
LABEL_41:
  uint64_t v101 = v110;
  uint64_t v102 = v109;
  if (!v100[2])
  {
    __n128 v99 = swift_bridgeObjectRelease(v100);
    uint64_t v100 = &_swiftEmptyArrayStorage;
  }

  StyleSheet.init(rules:)(v100, v99);
  return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v13, v101);
}

uint64_t sub_10005EF00@<X0>(char *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v128 = a2;
  unint64_t v130 = a1;
  uint64_t v2 = sub_10000E624(&qword_1000B1190);
  __chkstk_darwin(v2);
  uint64_t v113 = (char *)&v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000E624(&qword_1000B1198);
  __chkstk_darwin(v4);
  uint64_t v115 = (uint64_t)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for StyleSheet.Font.System(0LL);
  uint64_t v111 = *(void *)(v6 - 8);
  uint64_t v112 = v6;
  __chkstk_darwin(v6);
  uint64_t v110 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v116 = type metadata accessor for StyleSheet.Font.System(0LL);
  uint64_t v114 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v117 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for StyleSheet.Font.Specified(0LL);
  uint64_t v118 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  int v119 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for StyleSheet.Font(0LL);
  uint64_t v121 = *(void *)(v123 - 8);
  uint64_t v10 = __chkstk_darwin(v123);
  uint64_t v124 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v122 = (char *)&v109 - v12;
  uint64_t v13 = type metadata accessor for StyleSheet.TextAlign(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v126 = v13;
  uint64_t v127 = v14;
  __chkstk_darwin(v13);
  uint64_t v125 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_10000E624(&qword_1000B11A0);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v109 - v20;
  uint64_t v22 = type metadata accessor for StyleSheet.Color(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v109 - v27;
  uint64_t v29 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v109 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v32, v130, v29);
  int v33 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v32, v29);
  if (v33 == enum case for StyleSheet.Rule.Declaration.invalid(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    uint64_t v34 = *((void *)v32 + 2);
    uint64_t v35 = *((void *)v32 + 3);
    uint64_t v36 = v128;
    *uint64_t v128 = *(_OWORD *)v32;
    *((void *)v36 + 2) = v34;
    *((void *)v36 + 3) = v35;
    uint64_t v37 = (unsigned int *)&enum case for StyleSheet.Rule.Declaration.invalid(_:);
LABEL_3:
    uint64_t v38 = *v37;
    uint64_t v39 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
    return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 104LL))(v36, v38, v39);
  }

  unint64_t v130 = v26;
  uint64_t v41 = v127;
  if (v33 == enum case for StyleSheet.Rule.Declaration.color(_:))
  {
    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    uint64_t v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v28, v32, v22);
    uint64_t v43 = StyleSheet.Color.red.getter(v42);
    uint64_t v44 = StyleSheet.Color.green.getter();
    uint64_t v45 = StyleSheet.Color.blue.getter();
    int v46 = v128;
    StyleSheet.Color.init(red:green:blue:)(v43, v44, v45);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v28, v22);
    uint64_t v47 = enum case for StyleSheet.Rule.Declaration.color(_:);
    uint64_t v48 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
    return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 104LL))(v46, v47, v48);
  }

  if (v33 != enum case for StyleSheet.Rule.Declaration.backgroundColor(_:))
  {
    if (v33 == enum case for StyleSheet.Rule.Declaration.textAlign(_:))
    {
      (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
      uint64_t v50 = v41;
      uint64_t v52 = v125;
      uint64_t v51 = v126;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v125, v32, v126);
      int v53 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v52, v51);
      if (v53 == enum case for StyleSheet.TextAlign.left(_:))
      {
        uint64_t v54 = (unsigned int *)&enum case for StyleSheet.TextAlign.left(_:);
      }

      else
      {
        int v74 = v53;
        if (v53 != enum case for StyleSheet.TextAlign.center(_:))
        {
          int v86 = enum case for StyleSheet.TextAlign.right(_:);
          uint64_t v76 = type metadata accessor for StyleSheet.TextAlign(0LL);
          unint64_t v77 = *(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v76 - 8) + 104LL);
          BOOL v87 = v74 == v86;
          uint64_t v73 = v128;
          if (!v87)
          {
            v77(v128, enum case for StyleSheet.TextAlign.left(_:), v76);
            uint64_t v95 = enum case for StyleSheet.Rule.Declaration.textAlign(_:);
            uint64_t v96 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v96 - 8) + 104LL))(v73, v95, v96);
            return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v52, v51);
          }

          uint64_t v79 = enum case for StyleSheet.TextAlign.right(_:);
          unint64_t v78 = v128;
          goto LABEL_20;
        }

        uint64_t v54 = (unsigned int *)&enum case for StyleSheet.TextAlign.center(_:);
      }

      uint64_t v75 = *v54;
      uint64_t v76 = type metadata accessor for StyleSheet.TextAlign(0LL);
      unint64_t v77 = *(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v76 - 8) + 104LL);
      uint64_t v73 = v128;
      unint64_t v78 = v128;
      uint64_t v79 = v75;
LABEL_20:
      v77(v78, v79, v76);
      char v80 = (unsigned int *)&enum case for StyleSheet.Rule.Declaration.textAlign(_:);
LABEL_38:
      uint64_t v107 = *v80;
      uint64_t v108 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
      return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v108 - 8) + 104LL))(v73, v107, v108);
    }

    uint64_t v64 = v129;
    if (v33 != enum case for StyleSheet.Rule.Declaration.font(_:))
    {
      if (v33 != enum case for StyleSheet.Rule.Declaration.backgroundImage(_:))
      {
        unint64_t v88 = sub_100060C24();
        uint64_t v89 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v88, 0LL, 0LL);
        *uint64_t v90 = 1;
        swift_willThrow(v89);
        return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      }

      (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
      uint64_t v73 = v128;
      *uint64_t v128 = *(_OWORD *)v32;
      char v80 = (unsigned int *)&enum case for StyleSheet.Rule.Declaration.backgroundImage(_:);
      goto LABEL_38;
    }

    (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
    uint64_t v66 = v121;
    uint64_t v65 = v122;
    uint64_t v67 = v123;
    (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v122, v32, v123);
    uint64_t v68 = v124;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v124, v65, v67);
    int v69 = (*(uint64_t (**)(char *, uint64_t))(v66 + 88))(v68, v67);
    if (v69 == enum case for StyleSheet.Font.specified(_:))
    {
      (*(void (**)(char *, uint64_t))(v66 + 96))(v68, v67);
      uint64_t v70 = v118;
      __n128 v71 = v119;
      uint64_t v72 = v120;
      (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v119, v68, v120);
      uint64_t v73 = v128;
      sub_10005F980((uint64_t)v128);
      if (v64)
      {
        (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      }

      (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      uint64_t v97 = (unsigned int *)&enum case for StyleSheet.Font.specified(_:);
    }

    else
    {
      if (v69 != enum case for StyleSheet.Font.system(_:))
      {
        unint64_t v91 = sub_100060C24();
        uint64_t v92 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v91, 0LL, 0LL);
        *uint64_t v93 = 2;
        swift_willThrow(v92);
        unint64_t v94 = *(void (**)(char *, uint64_t))(v66 + 8);
        v94(v65, v67);
        return ((uint64_t (*)(char *, uint64_t))v94)(v68, v67);
      }

      (*(void (**)(char *, uint64_t))(v66 + 96))(v68, v67);
      uint64_t v81 = v114;
      uint64_t v82 = v116;
      __n128 v83 = v117;
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v117, v68, v116);
      uint64_t v84 = (uint64_t)v113;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v113, v83, v82);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v84, 0LL, 1LL, v82);
      uint64_t v85 = v115;
      sub_10005FCBC(v84, v115);
      if (v64)
      {
        sub_100012EF8(v84, &qword_1000B1190);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v82);
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      }

      sub_100012EF8(v84, &qword_1000B1190);
      uint64_t v98 = v111;
      uint64_t v99 = v112;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v85, 1LL, v112) == 1)
      {
        sub_100012EF8(v85, &qword_1000B1198);
        unint64_t v100 = sub_100060C24();
        uint64_t v101 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v100, 0LL, 0LL);
        _BYTE *v102 = 7;
        swift_willThrow(v101);
        (*(void (**)(char *, uint64_t))(v81 + 8))(v117, v82);
        return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      }

      (*(void (**)(char *, uint64_t))(v81 + 8))(v117, v82);
      (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
      uint64_t v103 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 32);
      uint64_t v104 = v110;
      v103(v110, v85, v99);
      uint64_t v73 = v128;
      v103((char *)v128, (uint64_t)v104, v99);
      uint64_t v97 = (unsigned int *)&enum case for StyleSheet.Font.system(_:);
    }

    uint64_t v105 = *v97;
    uint64_t v106 = type metadata accessor for StyleSheet.Font(0LL);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v106 - 8) + 104LL))(v73, v105, v106);
    char v80 = (unsigned int *)&enum case for StyleSheet.Rule.Declaration.font(_:);
    goto LABEL_38;
  }

  (*(void (**)(char *, uint64_t))(v30 + 96))(v32, v29);
  sub_100060C68((uint64_t)v32, (uint64_t)v21);
  sub_100012D20((uint64_t)v21, (uint64_t)v19, &qword_1000B11A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v19, 1LL, v22) == 1)
  {
    sub_100012EF8((uint64_t)v21, &qword_1000B11A0);
    sub_100012EF8((uint64_t)v19, &qword_1000B11A0);
    uint64_t v49 = type metadata accessor for StyleSheet.Color(0LL);
    uint64_t v36 = v128;
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v128, 1LL, 1LL, v49);
    uint64_t v37 = (unsigned int *)&enum case for StyleSheet.Rule.Declaration.backgroundColor(_:);
    goto LABEL_3;
  }

  __n128 v55 = v130;
  uint64_t v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v130, v19, v22);
  uint64_t v57 = StyleSheet.Color.red.getter(v56);
  uint64_t v58 = StyleSheet.Color.green.getter();
  uint64_t v59 = StyleSheet.Color.blue.getter();
  __int128 v60 = v128;
  StyleSheet.Color.init(red:green:blue:)(v57, v58, v59);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v55, v22);
  sub_100012EF8((uint64_t)v21, &qword_1000B11A0);
  uint64_t v61 = type metadata accessor for StyleSheet.Color(0LL);
  (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v60, 0LL, 1LL, v61);
  uint64_t v62 = enum case for StyleSheet.Rule.Declaration.backgroundColor(_:);
  uint64_t v63 = type metadata accessor for StyleSheet.Rule.Declaration(0LL);
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 104LL))(v60, v62, v63);
}

uint64_t sub_10005F980@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = sub_10000E624(&qword_1000B11A8);
  __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_10000E624(&qword_1000B11B0);
  __chkstk_darwin(v4);
  uint64_t v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000E624(&qword_1000B11B8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000B11C0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_10000E624(&qword_1000B11C8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000E624(&qword_1000B11D0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_10000E624(&qword_1000B11D8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_10000E624(&qword_1000B11E0);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  StyleSheet.Font.Specified.size.getter(v22);
  sub_10005FEF0((uint64_t)v20, v24);
  uint64_t result = sub_100012EF8((uint64_t)v20, &qword_1000B11D8);
  if (!v1)
  {
    uint64_t v26 = (uint64_t)v11;
    uint64_t v27 = (uint64_t)v34;
    uint64_t v28 = (uint64_t)v35;
    StyleSheet.Font.Specified.weight.getter(result);
    sub_100060514((uint64_t)v14, (uint64_t)v17);
    uint64_t v29 = sub_100012EF8((uint64_t)v14, &qword_1000B11C8);
    StyleSheet.Font.Specified.style.getter(v29);
    sub_100060748((uint64_t)v8, v26);
    uint64_t v30 = sub_100012EF8((uint64_t)v8, &qword_1000B11B8);
    StyleSheet.Font.Specified.variant.getter(v30);
    sub_10006097C(v28, v27);
    uint64_t v31 = sub_100012EF8(v28, &qword_1000B11A8);
    uint64_t v32 = StyleSheet.Font.Specified.family.getter(v31);
    return StyleSheet.Font.Specified.init(size:weight:style:variant:family:)(v24, v17, v26, v27, v32);
  }

  return result;
}

uint64_t sub_10005FCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1198);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000E624(&qword_1000B1190);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for StyleSheet.Font.System(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100012D20(a1, (uint64_t)v9, &qword_1000B1190);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100012EF8((uint64_t)v9, &qword_1000B1190);
    uint64_t v14 = type metadata accessor for StyleSheet.Font.System(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v17 = StyleSheet.Font.System.rawValue.getter(v16);
    StyleSheet.Font.System.init(rawValue:)(v17);
    uint64_t v18 = type metadata accessor for StyleSheet.Font.System(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1LL, v18) == 1)
    {
      sub_100012EF8((uint64_t)v6, &qword_1000B1198);
      unint64_t v20 = sub_100060C24();
      uint64_t v21 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v20, 0LL, 0LL);
      *uint64_t v22 = 7;
      swift_willThrow(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v6, v18);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0LL, 1LL, v18);
    }
  }

uint64_t sub_10005FEF0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v96 = (char *)a1;
  uint64_t v95 = a2;
  uint64_t v2 = sub_10000E624(&qword_1000B11E8);
  __chkstk_darwin(v2);
  unint64_t v94 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for StyleSheet.Font.Size.Unit(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v89 = v4;
  uint64_t v90 = v5;
  __chkstk_darwin(v4);
  unint64_t v88 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for StyleSheet.Font.Size.Unit(0LL);
  uint64_t v92 = *(void *)(v7 - 8);
  uint64_t v93 = v7;
  __chkstk_darwin(v7);
  unint64_t v91 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000B11F0);
  __chkstk_darwin(v9);
  BOOL v87 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for StyleSheet.Font.Size.Absolute(0LL);
  uint64_t v85 = *(void *)(v11 - 8);
  uint64_t v86 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for StyleSheet.Font.Size.Absolute(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_10000E624(&qword_1000B11D8);
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for StyleSheet.Font.Size(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char **)((char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v82 - v26;
  sub_100012D20((uint64_t)v96, (uint64_t)v20, &qword_1000B11D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21) == 1)
  {
    sub_100012EF8((uint64_t)v20, &qword_1000B11D8);
    uint64_t v28 = type metadata accessor for StyleSheet.Font.Size(0LL);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))( v95,  1LL,  1LL,  v28);
  }

  uint64_t v82 = v13;
  __n128 v83 = v17;
  uint64_t v84 = v15;
  uint64_t v96 = (char *)v14;
  uint64_t v31 = v91;
  uint64_t v30 = v92;
  uint64_t v32 = v93;
  uint64_t v33 = (uint64_t)v94;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v27, v20, v21);
  (*(void (**)(void *, char *, uint64_t))(v22 + 16))(v25, v27, v21);
  int v34 = (*(uint64_t (**)(void *, uint64_t))(v22 + 88))(v25, v21);
  uint64_t v35 = v21;
  if (v34 == enum case for StyleSheet.Font.Size.specified(_:))
  {
    uint64_t v96 = v27;
    (*(void (**)(void *, uint64_t))(v22 + 96))(v25, v21);
    uint64_t v36 = *v25;
    uint64_t v37 = (char *)v25 + *(int *)(sub_10000E624(&qword_1000B11F8) + 48);
    uint64_t v38 = v30;
    uint64_t v39 = *(uint64_t (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v40 = v31;
    uint64_t v41 = v32;
    uint64_t v42 = v39(v31, v37, v32);
    uint64_t v43 = StyleSheet.Font.Size.Unit.rawValue.getter(v42);
    uint64_t v44 = v21;
    StyleSheet.Font.Size.Unit.init(rawValue:)(v43);
    uint64_t v46 = v89;
    uint64_t v45 = v90;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v33, 1LL, v89) == 1)
    {
      sub_100012EF8(v33, &qword_1000B11E8);
      unint64_t v47 = sub_100060C24();
      uint64_t v48 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v47, 0LL, 0LL);
      *uint64_t v49 = 4;
      swift_willThrow(v48);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v96, v44);
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v41);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v96, v35);
    uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 32);
    uint64_t v67 = v88;
    v66(v88, v33, v46);
    uint64_t v68 = sub_10000E624(&qword_1000B1200);
    int v69 = v95;
    uint64_t v70 = (char *)v95 + *(int *)(v68 + 48);
    *uint64_t v95 = v36;
    v66(v70, (uint64_t)v67, v46);
    __n128 v71 = (unsigned int *)&enum case for StyleSheet.Font.Size.specified(_:);
  }

  else
  {
    if (v34 != enum case for StyleSheet.Font.Size.absolute(_:))
    {
      unint64_t v72 = sub_100060C24();
      uint64_t v73 = v21;
      uint64_t v74 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v72, 0LL, 0LL);
      _BYTE *v75 = 5;
      swift_willThrow(v74);
      uint64_t v76 = *(void (**)(char *, uint64_t))(v22 + 8);
      v76(v27, v73);
      return ((uint64_t (*)(void *, uint64_t))v76)(v25, v73);
    }

    (*(void (**)(void *, uint64_t))(v22 + 96))(v25, v21);
    uint64_t v50 = v83;
    uint64_t v51 = v84;
    uint64_t v52 = v25;
    uint64_t v53 = (uint64_t)v96;
    uint64_t v54 = (*(uint64_t (**)(char *, void *, char *))(v84 + 32))(v83, v52, v96);
    uint64_t v55 = StyleSheet.Font.Size.Absolute.rawValue.getter(v54);
    uint64_t v56 = (uint64_t)v87;
    StyleSheet.Font.Size.Absolute.init(rawValue:)(v55);
    uint64_t v58 = v85;
    uint64_t v57 = v86;
    uint64_t v59 = v22;
    __int128 v60 = v50;
    uint64_t v61 = v59;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v56, 1LL, v86) == 1)
    {
      sub_100012EF8(v56, &qword_1000B11F0);
      unint64_t v62 = sub_100060C24();
      uint64_t v63 = v35;
      uint64_t v64 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v62, 0LL, 0LL);
      _BYTE *v65 = 3;
      swift_willThrow(v64);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v27, v63);
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v60, v53);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v27, v35);
    unint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 32);
    unint64_t v78 = v82;
    v77(v82, v56, v57);
    int v69 = v95;
    v77((char *)v95, (uint64_t)v78, v57);
    __n128 v71 = (unsigned int *)&enum case for StyleSheet.Font.Size.absolute(_:);
  }

  uint64_t v79 = *v71;
  uint64_t v80 = type metadata accessor for StyleSheet.Font.Size(0LL);
  uint64_t v81 = *(void *)(v80 - 8);
  (*(void (**)(void *, uint64_t, uint64_t))(v81 + 104))(v69, v79, v80);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v81 + 56))(v69, 0LL, 1LL, v80);
}

uint64_t sub_100060514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000E624(&qword_1000B11D0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000E624(&qword_1000B11C8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for StyleSheet.Font.Weight(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100012D20(a1, (uint64_t)v9, &qword_1000B11C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100012EF8((uint64_t)v9, &qword_1000B11C8);
    uint64_t v14 = type metadata accessor for StyleSheet.Font.Weight(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v17 = StyleSheet.Font.Weight.rawValue.getter(v16);
    StyleSheet.Font.Weight.init(rawValue:)(v17);
    uint64_t v18 = type metadata accessor for StyleSheet.Font.Weight(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1LL, v18) == 1)
    {
      sub_100012EF8((uint64_t)v6, &qword_1000B11D0);
      unint64_t v20 = sub_100060C24();
      uint64_t v21 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v20, 0LL, 0LL);
      *uint64_t v22 = 9;
      swift_willThrow(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v6, v18);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0LL, 1LL, v18);
    }
  }

uint64_t sub_100060748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000E624(&qword_1000B11C0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000E624(&qword_1000B11B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for StyleSheet.Font.Style(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100012D20(a1, (uint64_t)v9, &qword_1000B11B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100012EF8((uint64_t)v9, &qword_1000B11B8);
    uint64_t v14 = type metadata accessor for StyleSheet.Font.Style(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v17 = StyleSheet.Font.Style.rawValue.getter(v16);
    StyleSheet.Font.Style.init(rawValue:)(v17);
    uint64_t v18 = type metadata accessor for StyleSheet.Font.Style(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1LL, v18) == 1)
    {
      sub_100012EF8((uint64_t)v6, &qword_1000B11C0);
      unint64_t v20 = sub_100060C24();
      uint64_t v21 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v20, 0LL, 0LL);
      *uint64_t v22 = 9;
      swift_willThrow(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v6, v18);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0LL, 1LL, v18);
    }
  }

uint64_t sub_10006097C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000E624(&qword_1000B11B0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10000E624(&qword_1000B11A8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for StyleSheet.Font.Variant(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100012D20(a1, (uint64_t)v9, &qword_1000B11A8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100012EF8((uint64_t)v9, &qword_1000B11A8);
    uint64_t v14 = type metadata accessor for StyleSheet.Font.Variant(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a2,  1LL,  1LL,  v14);
  }

  else
  {
    uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v17 = StyleSheet.Font.Variant.rawValue.getter(v16);
    StyleSheet.Font.Variant.init(rawValue:)(v17);
    uint64_t v18 = type metadata accessor for StyleSheet.Font.Variant(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1LL, v18) == 1)
    {
      sub_100012EF8((uint64_t)v6, &qword_1000B11B0);
      unint64_t v20 = sub_100060C24();
      uint64_t v21 = swift_allocError(&type metadata for StyleSheetUnpackerErrors, v20, 0LL, 0LL);
      *uint64_t v22 = 8;
      swift_willThrow(v21);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v6, v18);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a2, 0LL, 1LL, v18);
    }
  }

uint64_t sub_100060BB0(uint64_t a1)
{
  v3[2] = a1;
  uint64_t v1 = type metadata accessor for StyleSheet(0LL);
  return File.withResource<A>(_:)(sub_100060C0C, v3, v1);
}

uint64_t sub_100060C0C@<X0>(uint64_t a1@<X8>)
{
  return sub_10005E41C(a1);
}

unint64_t sub_100060C24()
{
  unint64_t result = qword_1000B1188;
  if (!qword_1000B1188)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000918F4, &type metadata for StyleSheetUnpackerErrors);
    atomic_store(result, (unint64_t *)&qword_1000B1188);
  }

  return result;
}

uint64_t sub_100060C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B11A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for StyleSheetUnpackerErrors(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

uint64_t storeEnumTagSinglePayload for StyleSheetUnpackerErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_100060D8C + 4 * byte_100091815[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100060DC0 + 4 * byte_100091810[v4]))();
}

uint64_t sub_100060DC0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060DC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100060DD0LL);
  }
  return result;
}

uint64_t sub_100060DDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100060DE4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_100060DE8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100060DF0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StyleSheetUnpackerErrors()
{
  return &type metadata for StyleSheetUnpackerErrors;
}

unint64_t sub_100060E10()
{
  unint64_t result = qword_1000B1208;
  if (!qword_1000B1208)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000918CC, &type metadata for StyleSheetUnpackerErrors);
    atomic_store(result, (unint64_t *)&qword_1000B1208);
  }

  return result;
}

double sub_100060E54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100067C94(a1, a2), (v7 & 1) != 0))
  {
    sub_10001533C(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t sub_100060EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0LL;
  }
  unint64_t v4 = sub_100067C94(a1, a2);
  if ((v5 & 1) == 0) {
    return 0LL;
  }
  unint64_t v6 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v4);
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

uint64_t _AttributedString.init(fromNSAttributedString:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for _AttributedString(0LL);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  int v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [a1 string];
  NSString v10 = v9;
  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v12 = v11;
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v15 = v14;
  uint64_t v33 = &_swiftEmptyArrayStorage;
  uint64_t v32 = 0LL;
  uint64_t result = (uint64_t)[v10 length];
  if (result < 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v17 = result;
  uint64_t v29 = v13;
  uint64_t v26 = a2;
  uint64_t v18 = swift_allocObject(&unk_1000A7CA0, 32LL, 7LL);
  *(void *)(v18 + 16) = &v32;
  *(void *)(v18 + 24) = &v33;
  uint64_t v19 = swift_allocObject(&unk_1000A7CC8, 32LL, 7LL);
  *(void *)(v19 + 16) = sub_100067C44;
  *(void *)(v19 + 24) = v18;
  aBlock[4] = sub_100067C5C;
  uint64_t v31 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100064D20;
  aBlock[3] = &unk_1000A7CE0;
  unint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = v31;
  swift_retain(v19);
  swift_release(v21);
  objc_msgSend(a1, "enumerateAttributesInRange:options:usingBlock:", 0, v17, 0, v20);
  _Block_release(v20);
  LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v19, "", 114LL, 25LL, 82LL, 1LL);
  uint64_t result = swift_release(v19);
  if ((v17 & 1) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (!v32)
  {
    uint64_t v23 = swift_bridgeObjectRetain(v33);
    _AttributedString.init(with:string:)(v23, v29, v15);

    if (!v3) {
      (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v8, v28);
    }
    goto LABEL_10;
  }

  uint64_t result = swift_bridgeObjectRelease(v15);
  if (v32)
  {
    uint64_t v22 = swift_errorRetain(v32);
    swift_willThrow(v22);

LABEL_10:
    swift_errorRelease(v32);
    uint64_t v24 = v33;
    swift_release(v18);
    return swift_bridgeObjectRelease(v24);
  }

unint64_t sub_100061190(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v6)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    unint64_t v8 = sub_100067E60(a1, a2, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100067F50);
    char v10 = v22;
    goto LABEL_39;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    }
    unint64_t v8 = (unint64_t)sub_100067F50(v7, v5, 10LL);
    char v10 = v9 & 1;
    goto LABEL_39;
  }

  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4) {
      goto LABEL_52;
    }
    unint64_t v8 = (BYTE1(a1) - 48);
    uint64_t v15 = v4 - 2;
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        unsigned int v17 = *v16 - 48;
        if (v17 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        BOOL v14 = __CFADD__(10 * v8, v17);
        unint64_t v8 = 10 * v8 + v17;
        if (v14) {
          goto LABEL_36;
        }
        char v10 = 0;
        ++v16;
        if (!--v15) {
          goto LABEL_39;
        }
      }
    }

uint64_t sub_1000613F4(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((result & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      }
      uint64_t v7 = (uint64_t)sub_1000681CC(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_37;
    }

    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_50;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      uint64_t v14 = v3 - 2;
      if (v14)
      {
        uint64_t v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          unsigned int v16 = *v15 - 48;
          if (v16 > 9) {
            goto LABEL_34;
          }
          uint64_t v17 = 10 * v7;
          uint64_t v7 = v17 + v16;
          char v9 = 0;
          ++v15;
          if (!--v14) {
            goto LABEL_37;
          }
        }
      }
    }

    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
            uint64_t v10 = v3 - 2;
            if (v10)
            {
              uint64_t v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v12 = *v11 - 48;
                if (v12 > 9) {
                  goto LABEL_34;
                }
                uint64_t v13 = 10 * v7;
                uint64_t v7 = v13 - v12;
                char v9 = 0;
                ++v11;
                if (!--v10) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_36;
          }

LABEL_34:
          uint64_t v7 = 0LL;
          char v9 = 1;
          goto LABEL_37;
        }

        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        uint64_t v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          unsigned int v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          uint64_t v21 = 10 * v7;
          uint64_t v7 = v21 + v20;
          char v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

uint64_t sub_100061648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  uint64_t v202 = a5;
  uint64_t v201 = a4;
  uint64_t v10 = sub_10000E624(&qword_1000AFF60);
  __chkstk_darwin(v10);
  unsigned int v12 = (char *)&v178 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v178 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v178 - v18;
  uint64_t v20 = sub_10000E624(&qword_1000B1148);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v178 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = NSNotFound.getter(v21);
  if (result != a2)
  {
    uint64_t v206 = a2 + a3;
    if (!__OFADD__(a2, a3))
    {
      uint64_t v203 = v23;
      uint64_t v181 = v19;
      uint64_t v183 = v17;
      uint64_t v185 = v14;
      uint64_t v186 = v13;
      uint64_t v187 = v12;
      uint64_t v205 = a2;
      uint64_t v25 = *(void *)(a1 + 64);
      uint64_t v199 = a1 + 64;
      uint64_t v26 = 1LL << *(_BYTE *)(a1 + 32);
      uint64_t v27 = -1LL;
      uint64_t v210 = MBDIMFileTransferAttributeName;
      if (v26 < 64) {
        uint64_t v27 = ~(-1LL << v26);
      }
      unint64_t v28 = v27 & v25;
      uint64_t v200 = MBDIMLivePhotoAttributeName;
      uint64_t v198 = MBDIMBaseWritingDirectionAttributeName;
      uint64_t v207 = (uint64_t)&v217 + 8;
      uint64_t v209 = &v221;
      uint64_t v197 = MBDIMMessagePartAttributeName;
      uint64_t v196 = MBDIMBreadcrumbTextOptionFlags;
      uint64_t v195 = MBDIMBreadcrumbTextMarkerAttributeName;
      uint64_t v194 = MBDIMMentionConfirmedMention;
      uint64_t v192 = MBDIMTextEffectAttributeName;
      uint64_t v191 = MBDIMTextBoldAttributeName;
      uint64_t v190 = MBDIMTextItalicAttributeName;
      uint64_t v189 = MBDIMTextUnderlineAttributeName;
      uint64_t v188 = MBDIMTextStrikethroughAttributeName;
      uint64_t v184 = MBDIMLinkAttributeName;
      int64_t v204 = (unint64_t)(v26 + 63) >> 6;
      int64_t v193 = v204 - 1;
      uint64_t v182 = MBDIMLinkIsRichLinkAttributeName;
      uint64_t result = swift_bridgeObjectRetain(a1);
      int64_t v29 = 0LL;
      uint64_t v208 = (char *)&type metadata for Any + 8;
      __int128 v180 = xmmword_10008E2E0;
      while (1)
      {
        if (v28)
        {
          unint64_t v30 = __clz(__rbit64(v28));
          v28 &= v28 - 1;
          unint64_t v31 = v30 | (v29 << 6);
        }

        else
        {
          int64_t v35 = v29 + 1;
          if (__OFADD__(v29, 1LL))
          {
            __break(1u);
            break;
          }

          if (v35 >= v204) {
            goto LABEL_19;
          }
          unint64_t v36 = *(void *)(v199 + 8 * v35);
          if (!v36)
          {
            v29 += 2LL;
            if (v35 + 1 >= v204)
            {
              int64_t v29 = v35;
LABEL_19:
              unint64_t v28 = 0LL;
              uint64_t v219 = 0LL;
              __int128 v217 = 0u;
              __int128 v218 = 0u;
              goto LABEL_20;
            }

            unint64_t v36 = *(void *)(v199 + 8 * v29);
            if (v36)
            {
              ++v35;
            }

            else
            {
              if (v35 + 2 >= v204) {
                goto LABEL_19;
              }
              unint64_t v36 = *(void *)(v199 + 8 * (v35 + 2));
              if (v36)
              {
                v35 += 2LL;
              }

              else
              {
                int64_t v86 = v35 + 3;
                if (v35 + 3 >= v204)
                {
                  int64_t v29 = v35 + 2;
                  goto LABEL_19;
                }

                unint64_t v36 = *(void *)(v199 + 8 * v86);
                if (!v36)
                {
                  while (1)
                  {
                    int64_t v35 = v86 + 1;
                    if (__OFADD__(v86, 1LL)) {
                      goto LABEL_131;
                    }
                    if (v35 >= v204)
                    {
                      int64_t v29 = v193;
                      goto LABEL_19;
                    }

                    unint64_t v36 = *(void *)(v199 + 8 * v35);
                    ++v86;
                    if (v36) {
                      goto LABEL_14;
                    }
                  }
                }

                v35 += 3LL;
              }
            }
          }

LABEL_14:
          unint64_t v28 = (v36 - 1) & v36;
          unint64_t v31 = __clz(__rbit64(v36)) + (v35 << 6);
          int64_t v29 = v35;
        }

        uint64_t v32 = *(void *)(a1 + 56);
        *(void *)&__int128 v217 = *(void *)(*(void *)(a1 + 48) + 8 * v31);
        uint64_t v33 = (void *)v217;
        sub_10001533C(v32 + 32 * v31, v207);
        id v34 = v33;
LABEL_20:
        sub_100012DC8((uint64_t)&v217, (uint64_t)&v220, &qword_1000B1240);
        uint64_t v37 = v220;
        if (!v220) {
          return swift_release(a1);
        }
        sub_100018278(v209, &v216);
        uint64_t v219 = 0LL;
        __int128 v217 = 0u;
        __int128 v218 = 0u;
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v210);
        uint64_t v40 = v39;
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v43 = v41;
        if (v38 == v42 && v40 == v41) {
          goto LABEL_26;
        }
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v40, v42, v41, 0LL);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v43);
        if ((v44 & 1) != 0) {
          goto LABEL_27;
        }
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v200);
        uint64_t v40 = v46;
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v49 = v47;
        if (v45 == v48 && v40 == v47)
        {
LABEL_26:
          swift_bridgeObjectRelease_n(v40, 2LL);
LABEL_27:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          uint64_t v50 = sub_10000E624(&qword_1000B0030);
          if ((swift_dynamicCast(&v211, &v213, v208, v50, 6LL) & 1) == 0) {
            goto LABEL_37;
          }
          uint64_t v51 = (uint64_t)v203;
          FileTransferAttribute.init(fileTransferDict:range:)((uint64_t)v211, v205, v206, (uint64_t)v203);
          uint64_t v52 = type metadata accessor for FileTransferAttribute(0LL);
          uint64_t v53 = *(void *)(v52 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1LL, v52) != 1)
          {
            *((void *)&v214 + 1) = v52;
            uint64_t v215 = sub_10000E9D8( &qword_1000B12B0,  (uint64_t (*)(uint64_t))&type metadata accessor for FileTransferAttribute,  (uint64_t)&protocol conformance descriptor for FileTransferAttribute);
            uint64_t v61 = sub_10001FA94(&v213);
            (*(void (**)(void *, uint64_t, uint64_t))(v53 + 32))(v61, v51, v52);
            goto LABEL_35;
          }

          sub_100012EF8((uint64_t)&v217, &qword_1000B1248);
          sub_100012EF8(v51, &qword_1000B1148);
          __int128 v213 = 0u;
          __int128 v214 = 0u;
          uint64_t v215 = 0LL;
          goto LABEL_36;
        }

        char v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v40, v48, v47, 0LL);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v49);
        if ((v54 & 1) != 0) {
          goto LABEL_27;
        }
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v198);
        uint64_t v57 = v56;
        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v60 = v58;
        if (v55 == v59 && v57 == v58)
        {
          swift_bridgeObjectRelease_n(v57, 2LL);
LABEL_45:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          uint64_t v67 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
          if ((swift_dynamicCast(&v211, &v213, (char *)&type metadata for Any + 8, v67, 6LL) & 1) != 0)
          {
            id v68 = v211;
            uint64_t v69 = Int.init(truncating:)(v211);
            *((void *)&v214 + 1) = type metadata accessor for BaseWritingDirectionAttribute(0LL);
            uint64_t v215 = sub_10000E9D8( &qword_1000B12A8,  (uint64_t (*)(uint64_t))&type metadata accessor for BaseWritingDirectionAttribute,  (uint64_t)&protocol conformance descriptor for BaseWritingDirectionAttribute);
            sub_10001FA94(&v213);
            BaseWritingDirectionAttribute.init(range:direction:)(v205, v206, v69);
            sub_100012EF8((uint64_t)&v217, &qword_1000B1248);

            goto LABEL_36;
          }

          goto LABEL_37;
        }

        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v57, v59, v58, 0LL);
        swift_bridgeObjectRelease(v57);
        swift_bridgeObjectRelease(v60);
        if ((v66 & 1) != 0) {
          goto LABEL_45;
        }
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v197);
        uint64_t v72 = v71;
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v75 = v73;
        if (v70 == v74 && v72 == v73)
        {
          swift_bridgeObjectRelease_n(v72, 2LL);
LABEL_54:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          uint64_t v77 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
          id v78 = v211;
          uint64_t v79 = UInt.init(truncating:)(v211);
          *((void *)&v214 + 1) = type metadata accessor for MessagePartAttribute(0LL);
          uint64_t v215 = sub_10000E9D8( &qword_1000B12A0,  (uint64_t (*)(uint64_t))&type metadata accessor for MessagePartAttribute,  (uint64_t)&protocol conformance descriptor for MessagePartAttribute);
          sub_10001FA94(&v213);
          MessagePartAttribute.init(range:partNumber:)(v205, v206, v79);
LABEL_56:

LABEL_57:
          sub_100012EF8((uint64_t)&v217, &qword_1000B1248);
          sub_100012C80(&v213, (uint64_t)&v217);
          goto LABEL_37;
        }

        char v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v70, v72, v74, v73, 0LL);
        swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v75);
        if ((v76 & 1) != 0) {
          goto LABEL_54;
        }
        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v196);
        uint64_t v82 = v81;
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v85 = v83;
        if (v80 == v84 && v82 == v83)
        {
          swift_bridgeObjectRelease_n(v82, 2LL);
LABEL_69:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          uint64_t v88 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
          if ((swift_dynamicCast(&v211, &v213, (char *)&type metadata for Any + 8, v88, 6LL) & 1) != 0)
          {
            id v78 = v211;
            uint64_t v89 = UInt.init(truncating:)(v211);
            *((void *)&v214 + 1) = type metadata accessor for BreadcrumbTextOptionFlagsAttribute(0LL);
            uint64_t v215 = sub_10000E9D8( &qword_1000B1298,  (uint64_t (*)(uint64_t))&type metadata accessor for BreadcrumbTextOptionFlagsAttribute,  (uint64_t)&protocol conformance descriptor for BreadcrumbTextOptionFlagsAttribute);
            sub_10001FA94(&v213);
            BreadcrumbTextOptionFlagsAttribute.init(range:optionFlags:)(v205, v206, v89);
            goto LABEL_56;
          }

          goto LABEL_37;
        }

        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, v84, v83, 0LL);
        swift_bridgeObjectRelease(v82);
        swift_bridgeObjectRelease(v85);
        if ((v87 & 1) != 0) {
          goto LABEL_69;
        }
        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
        uint64_t v92 = v91;
        uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v95 = v93;
        if (v90 == v94 && v92 == v93)
        {
          swift_bridgeObjectRelease_n(v92, 2LL);
LABEL_76:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          if ((swift_dynamicCast(&v211, &v213, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
          {
            id v97 = v211;
            uint64_t v98 = v212;
            *((void *)&v214 + 1) = type metadata accessor for BreadcrumbTextMarkerAttribute(0LL);
            uint64_t v215 = sub_10000E9D8( &qword_1000B1290,  (uint64_t (*)(uint64_t))&type metadata accessor for BreadcrumbTextMarkerAttribute,  (uint64_t)&protocol conformance descriptor for BreadcrumbTextMarkerAttribute);
            sub_10001FA94(&v213);
            BreadcrumbTextMarkerAttribute.init(range:breadcrumbText:)(v205, v206, v97, v98);
            goto LABEL_57;
          }

          goto LABEL_37;
        }

        char v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v94, v93, 0LL);
        swift_bridgeObjectRelease(v92);
        swift_bridgeObjectRelease(v95);
        if ((v96 & 1) != 0) {
          goto LABEL_76;
        }
        uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
        uint64_t v101 = v100;
        uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v104 = v102;
        if (v99 == v103 && v101 == v102)
        {
          swift_bridgeObjectRelease_n(v101, 2LL);
LABEL_83:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          if ((swift_dynamicCast(&v211, &v213, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
          {
            id v106 = v211;
            uint64_t v107 = v212;
            *((void *)&v214 + 1) = type metadata accessor for MentionAttribute(0LL);
            uint64_t v215 = sub_10000E9D8( &qword_1000B1288,  (uint64_t (*)(uint64_t))&type metadata accessor for MentionAttribute,  (uint64_t)&protocol conformance descriptor for MentionAttribute);
            sub_10001FA94(&v213);
            MentionAttribute.init(range:uri:)(v205, v206, v106, v107);
            goto LABEL_57;
          }

          goto LABEL_37;
        }

        char v105 = _stringCompareWithSmolCheck(_:_:expecting:)(v99, v101, v103, v102, 0LL);
        swift_bridgeObjectRelease(v101);
        swift_bridgeObjectRelease(v104);
        if ((v105 & 1) != 0) {
          goto LABEL_83;
        }
        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
        uint64_t v110 = v109;
        uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v113 = v111;
        if (v108 == v112 && v110 == v111)
        {
          swift_bridgeObjectRelease_n(v110, 2LL);
LABEL_89:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          uint64_t v115 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
          if ((swift_dynamicCast(&v211, &v213, (char *)&type metadata for Any + 8, v115, 6LL) & 1) != 0)
          {
            id v78 = v211;
            uint64_t v116 = UInt.init(truncating:)(v211);
            *((void *)&v214 + 1) = type metadata accessor for TextEffectAttribute(0LL);
            uint64_t v215 = sub_10000E9D8( &qword_1000B1280,  (uint64_t (*)(uint64_t))&type metadata accessor for TextEffectAttribute,  (uint64_t)&protocol conformance descriptor for TextEffectAttribute);
            sub_10001FA94(&v213);
            TextEffectAttribute.init(range:type:)(v205, v206, v116);
            goto LABEL_56;
          }

          goto LABEL_37;
        }

        char v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v108, v110, v112, v111, 0LL);
        swift_bridgeObjectRelease(v110);
        swift_bridgeObjectRelease(v113);
        if ((v114 & 1) != 0) {
          goto LABEL_89;
        }
        uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v191);
        uint64_t v119 = v118;
        uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v122 = v120;
        if (v117 == v121 && v119 == v120)
        {
          swift_bridgeObjectRelease_n(v119, 2LL);
LABEL_95:
          *((void *)&v214 + 1) = type metadata accessor for TextBoldAttribute(0LL);
          uint64_t v215 = sub_10000E9D8( &qword_1000B1278,  (uint64_t (*)(uint64_t))&type metadata accessor for TextBoldAttribute,  (uint64_t)&protocol conformance descriptor for TextBoldAttribute);
          sub_10001FA94(&v213);
          TextBoldAttribute.init(range:)(v205, v206);
          goto LABEL_35;
        }

        char v123 = _stringCompareWithSmolCheck(_:_:expecting:)(v117, v119, v121, v120, 0LL);
        swift_bridgeObjectRelease(v119);
        swift_bridgeObjectRelease(v122);
        if ((v123 & 1) != 0) {
          goto LABEL_95;
        }
        uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
        uint64_t v126 = v125;
        uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v129 = v127;
        if (v124 == v128 && v126 == v127)
        {
          swift_bridgeObjectRelease_n(v126, 2LL);
LABEL_100:
          *((void *)&v214 + 1) = type metadata accessor for TextItalicAttribute(0LL);
          uint64_t v215 = sub_10000E9D8( &qword_1000B1270,  (uint64_t (*)(uint64_t))&type metadata accessor for TextItalicAttribute,  (uint64_t)&protocol conformance descriptor for TextItalicAttribute);
          sub_10001FA94(&v213);
          TextItalicAttribute.init(range:)(v205, v206);
          goto LABEL_35;
        }

        char v130 = _stringCompareWithSmolCheck(_:_:expecting:)(v124, v126, v128, v127, 0LL);
        swift_bridgeObjectRelease(v126);
        swift_bridgeObjectRelease(v129);
        if ((v130 & 1) != 0) {
          goto LABEL_100;
        }
        uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(v189);
        uint64_t v133 = v132;
        uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v136 = v134;
        if (v131 == v135 && v133 == v134)
        {
          swift_bridgeObjectRelease_n(v133, 2LL);
LABEL_105:
          *((void *)&v214 + 1) = type metadata accessor for TextUnderlineAttribute(0LL);
          uint64_t v215 = sub_10000E9D8( &qword_1000B1268,  (uint64_t (*)(uint64_t))&type metadata accessor for TextUnderlineAttribute,  (uint64_t)&protocol conformance descriptor for TextUnderlineAttribute);
          sub_10001FA94(&v213);
          TextUnderlineAttribute.init(range:)(v205, v206);
          goto LABEL_35;
        }

        char v137 = _stringCompareWithSmolCheck(_:_:expecting:)(v131, v133, v135, v134, 0LL);
        swift_bridgeObjectRelease(v133);
        swift_bridgeObjectRelease(v136);
        if ((v137 & 1) != 0) {
          goto LABEL_105;
        }
        uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
        uint64_t v140 = v139;
        uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v143 = v141;
        if (v138 == v142 && v140 == v141)
        {
          swift_bridgeObjectRelease_n(v140, 2LL);
LABEL_110:
          *((void *)&v214 + 1) = type metadata accessor for TextStrikethroughAttribute(0LL);
          uint64_t v215 = sub_10000E9D8( &qword_1000B1260,  (uint64_t (*)(uint64_t))&type metadata accessor for TextStrikethroughAttribute,  (uint64_t)&protocol conformance descriptor for TextStrikethroughAttribute);
          sub_10001FA94(&v213);
          TextStrikethroughAttribute.init(range:)(v205, v206);
LABEL_35:
          sub_100012EF8((uint64_t)&v217, &qword_1000B1248);
LABEL_36:
          sub_100012DC8((uint64_t)&v213, (uint64_t)&v217, &qword_1000B1248);
          goto LABEL_37;
        }

        char v144 = _stringCompareWithSmolCheck(_:_:expecting:)(v138, v140, v142, v141, 0LL);
        swift_bridgeObjectRelease(v140);
        swift_bridgeObjectRelease(v143);
        if ((v144 & 1) != 0) {
          goto LABEL_110;
        }
        uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v184);
        uint64_t v147 = v146;
        uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v150 = v148;
        if (v145 == v149 && v147 == v148)
        {
          swift_bridgeObjectRelease_n(v147, 2LL);
LABEL_115:
          sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
          int v152 = swift_dynamicCast(v187, &v213, (char *)&type metadata for Any + 8, v186, 6LL);
          uint64_t v153 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56);
          if (v152)
          {
            uint64_t v154 = (uint64_t)v187;
            uint64_t v155 = v186;
            v153(v187, 0LL, 1LL, v186);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v154, 1LL, v155) != 1)
            {
              uint64_t v156 = v185;
              uint64_t v157 = v181;
              uint64_t v158 = v186;
              (*(void (**)(char *, char *, uint64_t))(v185 + 32))(v181, v187, v186);
              (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v183, v157, v158);
              *((void *)&v214 + 1) = type metadata accessor for LinkAttribute(0LL);
              uint64_t v215 = sub_10000E9D8( &qword_1000B1258,  (uint64_t (*)(uint64_t))&type metadata accessor for LinkAttribute,  (uint64_t)&protocol conformance descriptor for LinkAttribute);
              sub_10001FA94(&v213);
              LinkAttribute.init(range:link:)(v205, v206, v183);
              (*(void (**)(char *, uint64_t))(v156 + 8))(v157, v158);
              goto LABEL_57;
            }
          }

          else
          {
            v153(v187, 1LL, 1LL, v186);
          }

          sub_100012EF8((uint64_t)v187, &qword_1000AFF60);
          goto LABEL_37;
        }

        char v151 = _stringCompareWithSmolCheck(_:_:expecting:)(v145, v147, v149, v148, 0LL);
        swift_bridgeObjectRelease(v147);
        swift_bridgeObjectRelease(v150);
        if ((v151 & 1) != 0) {
          goto LABEL_115;
        }
        uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v182);
        uint64_t v161 = v160;
        uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v164 = v162;
        if (v159 == v163 && v161 == v162)
        {
          swift_bridgeObjectRelease_n(v161, 2LL);
        }

        else
        {
          char v165 = _stringCompareWithSmolCheck(_:_:expecting:)(v159, v161, v163, v162, 0LL);
          swift_bridgeObjectRelease(v161);
          swift_bridgeObjectRelease(v164);
          if ((v165 & 1) == 0)
          {
            sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
            uint64_t v179 = static OS_os_log.textMessageUnpacker.getter();
            uint64_t v168 = sub_10000E624(&qword_1000AFF48);
            uint64_t v169 = swift_allocObject(v168, 152LL, 7LL);
            *(_OWORD *)(v169 + 16) = v180;
            uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
            uint64_t v172 = v171;
            *(void *)(v169 + 56) = &type metadata for String;
            unint64_t v173 = sub_100012CDC();
            *(void *)(v169 + 32) = v170;
            *(void *)(v169 + 40) = v172;
            *(void *)(v169 + 96) = &type metadata for Int;
            uint64_t v174 = v205;
            *(void *)(v169 + 64) = v173;
            *(void *)(v169 + 72) = v174;
            *(void *)(v169 + 136) = &type metadata for Int;
            *(void *)(v169 + 144) = &protocol witness table for Int;
            uint64_t v175 = v206;
            *(void *)(v169 + 104) = &protocol witness table for Int;
            *(void *)(v169 + 112) = v175;
            uint64_t v176 = static os_log_type_t.default.getter();
            uint64_t v177 = (void *)v179;
            os_log(_:dso:log:type:_:)( "Unhandled attribute '%{public}@' in NSAttributedString at range=[%ld,%ld)",  73LL,  2LL,  &_mh_execute_header,  v179,  v176,  v169);

            swift_bridgeObjectRelease(v169);
            goto LABEL_37;
          }
        }

        sub_10001533C((uint64_t)&v216, (uint64_t)&v213);
        uint64_t v166 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
        if ((swift_dynamicCast(&v211, &v213, (char *)&type metadata for Any + 8, v166, 6LL) & 1) != 0)
        {
          id v78 = v211;
          id v167 = [v211 BOOLValue];
          *((void *)&v214 + 1) = type metadata accessor for LinkIsRichLinkAttribute(0LL);
          uint64_t v215 = sub_10000E9D8( &qword_1000B1250,  (uint64_t (*)(uint64_t))&type metadata accessor for LinkIsRichLinkAttribute,  (uint64_t)&protocol conformance descriptor for LinkIsRichLinkAttribute);
          sub_10001FA94(&v213);
          LinkIsRichLinkAttribute.init(range:isRichLink:)(v205, v206, v167);
          goto LABEL_56;
        }

LABEL_37:
        sub_100012D20((uint64_t)&v217, (uint64_t)&v213, &qword_1000B1248);
        if (*((void *)&v214 + 1))
        {
          sub_100012EF8((uint64_t)&v213, &qword_1000B1248);
          uint64_t result = sub_100012D20((uint64_t)&v217, (uint64_t)&v213, &qword_1000B1248);
          if (!*((void *)&v214 + 1)) {
            goto LABEL_132;
          }
          unint64_t v62 = *a6;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
          *a6 = v62;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v62 = sub_10003320C(0LL, *((void *)v62 + 2) + 1LL, 1, v62);
            *a6 = v62;
          }

          unint64_t v65 = *((void *)v62 + 2);
          unint64_t v64 = *((void *)v62 + 3);
          if (v65 >= v64 >> 1)
          {
            unint64_t v62 = sub_10003320C((char *)(v64 > 1), v65 + 1, 1, v62);
            *a6 = v62;
          }

          *((void *)v62 + 2) = v65 + 1;
          sub_100012C80(&v213, (uint64_t)&v62[40 * v65 + 32]);
        }

        else
        {

          sub_100012EF8((uint64_t)&v213, &qword_1000B1248);
        }

        sub_100012EF8((uint64_t)&v217, &qword_1000B1248);
        uint64_t result = sub_100010D60(&v216);
      }
    }

    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
  }

  return result;
}

uint64_t FileTransferAttribute.init(fileTransferDict:range:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v309 = a3;
  uint64_t v308 = a2;
  uint64_t v334 = a4;
  uint64_t v7 = type metadata accessor for FileTransferAttribute(0LL);
  uint64_t v328 = *(void *)(v7 - 8);
  uint64_t v329 = v7;
  __chkstk_darwin(v7);
  v310 = (char *)&v274 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_10000E624(&qword_1000B1210);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v307 = (uint64_t)&v274 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v312 = (char *)&v274 - v13;
  __chkstk_darwin(v12);
  uint64_t v311 = (char *)&v274 - v14;
  uint64_t v295 = type metadata accessor for GeneralAttachmentInfo(0LL);
  uint64_t v294 = *(void *)(v295 - 8);
  __chkstk_darwin(v295);
  uint64_t v297 = (char *)&v274 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for LivePhotoAttachmentInfo(0LL);
  uint64_t v318 = *(void *)(v16 - 8);
  uint64_t v319 = v16;
  __chkstk_darwin(v16);
  uint64_t v296 = (char *)&v274 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for StickerAttachmentInfo(0LL);
  uint64_t v315 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v299 = (char *)&v274 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v314 = type metadata accessor for EmojiImageAttachmentInfo(0LL);
  uint64_t v316 = *(void *)(v314 - 8);
  __chkstk_darwin(v314);
  uint64_t v302 = (char *)&v274 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_10000E624(&qword_1000B1218);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v304 = (uint64_t)&v274 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v305 = (char *)&v274 - v25;
  __chkstk_darwin(v24);
  uint64_t v317 = (uint64_t)&v274 - v26;
  uint64_t v27 = sub_10000E624(&qword_1000B1220);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v301 = (uint64_t)&v274 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v274 - v31;
  __chkstk_darwin(v30);
  uint64_t v320 = (uint64_t)&v274 - v33;
  uint64_t v34 = sub_10000E624(&qword_1000B1228);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v298 = (uint64_t)&v274 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v274 - v38;
  __chkstk_darwin(v37);
  uint64_t v322 = (uint64_t)&v274 - v40;
  uint64_t v41 = sub_10000E624(&qword_1000B1230);
  uint64_t v42 = __chkstk_darwin(v41);
  v313 = (char *)&v274 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v300 = (char *)&v274 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v321 = (uint64_t)&v274 - v47;
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v274 - v48;
  uint64_t v50 = type metadata accessor for AudioMessageAttachmentInfo(0LL);
  unint64_t v326 = *(void *)(v50 - 8);
  uint64_t v327 = v50;
  uint64_t v51 = __chkstk_darwin(v50);
  uint64_t v303 = (char *)&v274 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = __chkstk_darwin(v51);
  uint64_t v55 = (char *)&v274 - v54;
  __chkstk_darwin(v53);
  uint64_t v57 = (char *)&v274 - v56;
  uint64_t v58 = type metadata accessor for FileTransferAttribute.AttachmentSubtype(0LL);
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v323 = v58;
  uint64_t v324 = v59;
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v306 = (char *)&v274 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v60);
  uint64_t v325 = (char *)&v274 - v62;
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferAttachmentsKey);
  uint64_t v65 = v64;
  if (!*(void *)(a1 + 16) || (v293 = v18, unint64_t v66 = sub_100067C94(v63, v64), (v67 & 1) == 0))
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
    swift_bridgeObjectRelease(v65);
    goto LABEL_10;
  }

  sub_10001533C(*(void *)(a1 + 56) + 32 * v66, (uint64_t)&v332);
  swift_bridgeObjectRelease(v65);
  if (!*((void *)&v333 + 1))
  {
LABEL_10:
    swift_bridgeObjectRelease(a1);
    uint64_t v76 = sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
LABEL_11:
    uint64_t v77 = static os_log_type_t.error.getter(v76);
    sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
    id v78 = (void *)static OS_os_log.textMessageUnpacker.getter();
    os_log(_:dso:log:_:_:)( v77,  &_mh_execute_header,  v78,  "File transfer attribute is missing attachment info (URL, etc) -- ignoring file transfer, but processing textual content.",  120LL,  2LL,  &_swiftEmptyArrayStorage);

    uint64_t v79 = 1LL;
    uint64_t v80 = v334;
    uint64_t v82 = v328;
    uint64_t v81 = v329;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v80, v79, 1LL, v81);
  }

  uint64_t v68 = sub_10000E624(&qword_1000B1238);
  if ((swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, v68, 6LL) & 1) == 0)
  {
    uint64_t v76 = swift_bridgeObjectRelease(a1);
    goto LABEL_11;
  }

  if (!*(void *)(v330 + 16))
  {
    swift_bridgeObjectRelease(v330);
    swift_bridgeObjectRelease(a1);
    uint64_t v84 = type metadata accessor for Explosion(0LL);
    uint64_t v85 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v84, v85, 0LL, 0LL);
    uint64_t v86 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000035LL,  0x800000010008C2B0LL,  0xD000000000000011LL,  0x800000010008C370LL,  0x656D686361747461LL,  0xEB0000000073746ELL);
    return swift_willThrow(v86);
  }

  uint64_t v288 = v330;
  uint64_t v69 = *(void **)(v330 + 32);
  uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferDatasizeKey);
  uint64_t v72 = v71;
  if (v69[2])
  {
    uint64_t v73 = v70;
    swift_bridgeObjectRetain(v69);
    unint64_t v74 = sub_100067C94(v73, v72);
    if ((v75 & 1) != 0)
    {
      sub_10001533C(v69[7] + 32 * v74, (uint64_t)&v332);
    }

    else
    {
      __int128 v332 = 0u;
      __int128 v333 = 0u;
    }
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
    swift_bridgeObjectRetain(v69);
  }

  swift_bridgeObjectRelease(v72);
  if (*((void *)&v333 + 1))
  {
    int v87 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v88 = v330;
    if (!v87) {
      uint64_t v88 = 0LL;
    }
    uint64_t v281 = v88;
    if (v87) {
      unint64_t v89 = v331;
    }
    else {
      unint64_t v89 = 0LL;
    }
    unint64_t v286 = v89;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v281 = 0LL;
    unint64_t v286 = 0LL;
  }

  uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferMimeTypeKey);
  uint64_t v92 = v91;
  if (v69[2] && (unint64_t v93 = sub_100067C94(v90, v91), (v94 & 1) != 0))
  {
    sub_10001533C(v69[7] + 32 * v93, (uint64_t)&v332);
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v92);
  if (*((void *)&v333 + 1))
  {
    int v95 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v96 = v330;
    if (!v95) {
      uint64_t v96 = 0LL;
    }
    uint64_t v280 = v96;
    if (v95) {
      unint64_t v97 = v331;
    }
    else {
      unint64_t v97 = 0LL;
    }
    unint64_t v285 = v97;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v280 = 0LL;
    unint64_t v285 = 0LL;
  }

  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferUTITypeKey);
  uint64_t v100 = v99;
  if (v69[2] && (unint64_t v101 = sub_100067C94(v98, v99), (v102 & 1) != 0))
  {
    sub_10001533C(v69[7] + 32 * v101, (uint64_t)&v332);
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v100);
  if (*((void *)&v333 + 1))
  {
    int v103 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v104 = v330;
    if (!v103) {
      uint64_t v104 = 0LL;
    }
    uint64_t v279 = v104;
    if (v103) {
      unint64_t v105 = v331;
    }
    else {
      unint64_t v105 = 0LL;
    }
    unint64_t v284 = v105;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v279 = 0LL;
    unint64_t v284 = 0LL;
  }

  uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferIrisKey);
  uint64_t v108 = v107;
  if (v69[2] && (unint64_t v109 = sub_100067C94(v106, v107), (v110 & 1) != 0))
  {
    sub_10001533C(v69[7] + 32 * v109, (uint64_t)&v332);
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v108);
  if (*((void *)&v333 + 1))
  {
    int v111 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v112 = v330;
    if (!v111) {
      uint64_t v112 = 0LL;
    }
    uint64_t v282 = v112;
    if (v111) {
      unint64_t v113 = v331;
    }
    else {
      unint64_t v113 = 0LL;
    }
    unint64_t v287 = v113;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v282 = 0LL;
    unint64_t v287 = 0LL;
  }

  uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferEmojiImageContentIdentifierKey);
  uint64_t v116 = v115;
  uint64_t v117 = *(void *)(a1 + 16);
  uint64_t v292 = v69;
  if (v117)
  {
    unint64_t v118 = sub_100067C94(v114, v115);
    if ((v119 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v118, (uint64_t)&v332);
    }

    else
    {
      __int128 v332 = 0u;
      __int128 v333 = 0u;
    }

    uint64_t v69 = v292;
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v116);
  if (*((void *)&v333 + 1))
  {
    int v120 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v121 = v330;
    if (!v120) {
      uint64_t v121 = 0LL;
    }
    uint64_t v278 = v121;
    if (v120) {
      uint64_t v122 = v331;
    }
    else {
      uint64_t v122 = 0LL;
    }
    uint64_t v291 = v122;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v278 = 0LL;
    uint64_t v291 = 0LL;
  }

  uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferEmojiImageShortDescriptionKey);
  uint64_t v125 = v124;
  if (*(void *)(a1 + 16))
  {
    unint64_t v126 = sub_100067C94(v123, v124);
    if ((v127 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v126, (uint64_t)&v332);
    }

    else
    {
      __int128 v332 = 0u;
      __int128 v333 = 0u;
    }

    uint64_t v69 = v292;
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v125);
  if (*((void *)&v333 + 1))
  {
    int v128 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v129 = v330;
    if (!v128) {
      uint64_t v129 = 0LL;
    }
    uint64_t v277 = v129;
    if (v128) {
      uint64_t v130 = v331;
    }
    else {
      uint64_t v130 = 0LL;
    }
    uint64_t v290 = v130;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v277 = 0LL;
    uint64_t v290 = 0LL;
  }

  uint64_t v131 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMAnimatedEmojiAttributeName);
  uint64_t v133 = v132;
  if (v69[2] && (unint64_t v134 = sub_100067C94(v131, v132), (v135 & 1) != 0))
  {
    sub_10001533C(v69[7] + 32 * v134, (uint64_t)&v332);
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v133);
  if (*((void *)&v333 + 1))
  {
    int v136 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v136) {
      uint64_t v137 = v330;
    }
    else {
      uint64_t v137 = 0LL;
    }
    if (v136) {
      unint64_t v138 = v331;
    }
    else {
      unint64_t v138 = 0LL;
    }
    unint64_t v289 = v138;
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v137 = 0LL;
    unint64_t v289 = 0LL;
  }

  uint64_t v139 = v292;
  uint64_t v140 = swift_bridgeObjectRetain(v292);
  AudioMessageAttachmentInfo.init(audioMessageDict:)(v140, (uint64_t)v49);
  uint64_t v283 = v5;
  if (v5)
  {
    swift_bridgeObjectRelease(v139);
    swift_bridgeObjectRelease(v288);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v290);
    swift_bridgeObjectRelease(v291);
    swift_bridgeObjectRelease(v289);
    swift_bridgeObjectRelease(v287);
    swift_bridgeObjectRelease(v284);
    swift_bridgeObjectRelease(v285);
    uint64_t v141 = &v318;
    return swift_bridgeObjectRelease(*(v141 - 32));
  }

  uint64_t v276 = v137;
  unint64_t v142 = v326;
  uint64_t v143 = v327;
  char v144 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v326 + 48);
  if (v144(v49, 1LL, v327) != 1)
  {
    swift_bridgeObjectRelease(v292);
    swift_bridgeObjectRelease(v288);
    swift_bridgeObjectRelease(v290);
    swift_bridgeObjectRelease(v291);
    swift_bridgeObjectRelease(v287);
    (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v57, v49, v143);
    uint64_t v148 = v325;
    (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v325, v57, v143);
    uint64_t v149 = v323;
    uint64_t v150 = v324;
    (*(void (**)(char *, void, uint64_t))(v324 + 104))( v148,  enum case for FileTransferAttribute.AttachmentSubtype.audioMessage(_:),  v323);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v57, v143);
    char v151 = &_swiftEmptyArrayStorage;
LABEL_109:
    unint64_t v152 = v289;
LABEL_110:
    uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferNameKey);
    uint64_t v155 = v154;
    if (*(void *)(a1 + 16) && (unint64_t v156 = sub_100067C94(v153, v154), (v157 & 1) != 0))
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v156, (uint64_t)&v332);
    }

    else
    {
      __int128 v332 = 0u;
      __int128 v333 = 0u;
    }

    swift_bridgeObjectRelease(v155);
    if (*((void *)&v333 + 1))
    {
      if (swift_dynamicCast( &v330,  &v332,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL))
      {
        unint64_t v158 = v331;
        if (v286)
        {
          uint64_t v159 = v330;
          unint64_t v160 = sub_100061190(v281, v286);
          if ((v161 & 1) != 0)
          {
            swift_bridgeObjectRelease(v158);
            swift_bridgeObjectRelease(a1);
            swift_bridgeObjectRelease(v151);
            swift_bridgeObjectRelease(v152);
            swift_bridgeObjectRelease(v284);
            swift_bridgeObjectRelease(v285);
            uint64_t v179 = type metadata accessor for Explosion(0LL);
            uint64_t v180 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
            swift_allocError(v179, v180, 0LL, 0LL);
            uint64_t v181 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000035LL,  0x800000010008C2B0LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  0x657A697361746164LL,  0xE800000000000000LL);
            swift_willThrow(v181);
            uint64_t v175 = *(uint64_t (**)(char *, uint64_t))(v150 + 8);
          }

          else
          {
            unint64_t v162 = v160;
            uint64_t v327 = v159;
            if (!v152)
            {
              uint64_t v166 = 0LL;
              uint64_t v164 = (uint64_t)v312;
              goto LABEL_143;
            }

            uint64_t v163 = sub_1000613F4(v276, v152);
            uint64_t v164 = (uint64_t)v312;
            if ((v165 & 1) == 0)
            {
              uint64_t v166 = v163;
LABEL_143:
              uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferImageInfoKey);
              uint64_t v195 = v194;
              if (*(void *)(a1 + 16) && (unint64_t v196 = sub_100067C94(v193, v194), (v197 & 1) != 0))
              {
                sub_10001533C(*(void *)(a1 + 56) + 32 * v196, (uint64_t)&v332);
              }

              else
              {
                __int128 v332 = 0u;
                __int128 v333 = 0u;
              }

              swift_bridgeObjectRelease(v195);
              swift_bridgeObjectRelease(a1);
              if (*((void *)&v333 + 1))
              {
                uint64_t v198 = sub_10000E624(&qword_1000B0030);
                char v199 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, v198, 6LL);
                uint64_t v200 = v323;
                uint64_t v201 = (uint64_t)v311;
                if ((v199 & 1) != 0)
                {
                  uint64_t v202 = v283;
                  FileTransferAttribute.ImageInfo.init(imageDict:)(v330, v164);
                  uint64_t v283 = v202;
                  if (v202)
                  {
                    (*(void (**)(char *, uint64_t))(v324 + 8))(v325, v200);
                    swift_bridgeObjectRelease(v158);
                    swift_bridgeObjectRelease(v151);
                    swift_bridgeObjectRelease(v284);
                    uint64_t v141 = &v317;
                    return swift_bridgeObjectRelease(*(v141 - 32));
                  }

                  uint64_t v322 = v166;
                  unint64_t v326 = v162;
                  sub_100012DC8(v164, v201, &qword_1000B1210);
                  goto LABEL_155;
                }
              }

              else
              {
                sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
                uint64_t v200 = v323;
                uint64_t v201 = (uint64_t)v311;
              }

              uint64_t v322 = v166;
              unint64_t v326 = v162;
              uint64_t v206 = type metadata accessor for FileTransferAttribute.ImageInfo(0LL);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 56LL))( v201,  1LL,  1LL,  v206);
LABEL_155:
              BOOL v207 = v152 == 0;
              uint64_t v208 = v307;
              sub_100012D20(v201, v307, &qword_1000B1210);
              uint64_t v209 = v201;
              uint64_t v210 = v324;
              id v211 = v325;
              uint64_t v212 = v306;
              (*(void (**)(char *, char *, uint64_t))(v324 + 16))(v306, v325, v200);
              BOOL v273 = v207;
              __int128 v213 = v310;
              uint64_t v214 = v283;
              FileTransferAttribute.init(with:attachments:imageInfo:datasize:utiType:mimeType:legacyAnimoji:attachmentSubtype:name:)( v308,  v309,  v151,  v208,  v326,  v279,  v284,  v280,  v285,  v322,  v273,  v212,  v327,  v158);
              if (v214)
              {
                sub_100012EF8(v209, &qword_1000B1210);
                return (*(uint64_t (**)(char *, uint64_t))(v210 + 8))(v211, v200);
              }

              sub_100012EF8(v209, &qword_1000B1210);
              (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v200);
              uint64_t v82 = v328;
              uint64_t v80 = v334;
              uint64_t v225 = v213;
              uint64_t v81 = v329;
              (*(void (**)(uint64_t, char *, uint64_t))(v328 + 32))(v334, v225, v329);
              uint64_t v79 = 0LL;
              return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v80, v79, 1LL, v81);
            }

            swift_bridgeObjectRelease(v158);
            swift_bridgeObjectRelease(a1);
            swift_bridgeObjectRelease(v151);
            swift_bridgeObjectRelease(v284);
            swift_bridgeObjectRelease(v285);
            uint64_t v203 = type metadata accessor for Explosion(0LL);
            uint64_t v204 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
            swift_allocError(v203, v204, 0LL, 0LL);
            uint64_t v205 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000035LL,  0x800000010008C2B0LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  0x6E4179636167656CLL,  0xED0000696A6F6D69LL);
            swift_willThrow(v205);
            uint64_t v175 = *(uint64_t (**)(char *, uint64_t))(v324 + 8);
          }

          uint64_t v176 = v325;
          return v175(v176, v149);
        }

        swift_bridgeObjectRelease(v331);
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v151);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v284);
        swift_bridgeObjectRelease(v285);
        uint64_t v177 = type metadata accessor for Explosion(0LL);
        uint64_t v178 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
        swift_allocError(v177, v178, 0LL, 0LL);
        uint64_t v172 = 0x657A697361746164LL;
        unint64_t v173 = 0xE800000000000000LL;
LABEL_126:
        uint64_t v174 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000035LL,  0x800000010008C2B0LL,  0x4B676E697373694DLL,  0xEA00000000007965LL,  v172,  v173);
        swift_willThrow(v174);
        uint64_t v175 = *(uint64_t (**)(char *, uint64_t))(v150 + 8);
        uint64_t v176 = v148;
        return v175(v176, v149);
      }

      swift_bridgeObjectRelease(v151);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v152);
      swift_bridgeObjectRelease(v284);
      swift_bridgeObjectRelease(v285);
      swift_bridgeObjectRelease(v286);
    }

    else
    {
      swift_bridgeObjectRelease(v151);
      swift_bridgeObjectRelease(a1);
      swift_bridgeObjectRelease(v152);
      swift_bridgeObjectRelease(v284);
      swift_bridgeObjectRelease(v285);
      swift_bridgeObjectRelease(v286);
      sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    }

    uint64_t v170 = type metadata accessor for Explosion(0LL);
    uint64_t v171 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v170, v171, 0LL, 0LL);
    uint64_t v172 = 1701667182LL;
    unint64_t v173 = 0xE400000000000000LL;
    goto LABEL_126;
  }

  sub_100012EF8((uint64_t)v49, &qword_1000B1230);
  uint64_t v145 = v288;
  uint64_t v146 = v283;
  uint64_t v147 = sub_100064FE8(v288);
  if (v146)
  {
    swift_bridgeObjectRelease(v292);
    swift_bridgeObjectRelease(v145);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v290);
    swift_bridgeObjectRelease(v291);
    swift_bridgeObjectRelease(v289);
    swift_bridgeObjectRelease(v287);
    swift_bridgeObjectRelease(v284);
    swift_bridgeObjectRelease(v285);
    return swift_bridgeObjectRelease(v286);
  }

  id v167 = v147;
  unint64_t v275 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v144;
  swift_bridgeObjectRelease(v145);
  uint64_t v168 = v319;
  uint64_t v169 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v318 + 56);
  v169(v322, 1LL, 1LL, v319);
  if (v287)
  {
    LivePhotoAttachmentInfo.init(with:)(v282);
    uint64_t v283 = 0LL;
    uint64_t v182 = v322;
    sub_100012EF8(v322, &qword_1000B1228);
    v169((uint64_t)v39, 0LL, 1LL, v168);
    sub_100012DC8((uint64_t)v39, v182, &qword_1000B1228);
  }

  else
  {
    uint64_t v283 = 0LL;
  }

  uint64_t v183 = v320;
  uint64_t v184 = v293;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v315 + 56))(v320, 1LL, 1LL, v293);
  uint64_t v185 = MBDIMFileTransferStickerInfoKey;
  uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferStickerInfoKey);
  uint64_t v188 = v187;
  if (*(void *)(a1 + 16))
  {
    unint64_t v189 = sub_100067C94(v186, v187);
    if ((v190 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v189, (uint64_t)&v332);
    }

    else
    {
      __int128 v332 = 0u;
      __int128 v333 = 0u;
    }

    uint64_t v184 = v293;
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v188);
  if (*((void *)&v333 + 1))
  {
    uint64_t v191 = sub_10000E624(&qword_1000B0030);
    if ((swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, v191, 6LL) & 1) != 0)
    {
      uint64_t v192 = v283;
      StickerAttachmentInfo.init(stickerDict:)(v330, (uint64_t)v32);
      uint64_t v283 = v192;
      if (v192)
      {
        swift_bridgeObjectRelease(v167);
        swift_bridgeObjectRelease(v292);
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v286);
        swift_bridgeObjectRelease(v285);
        swift_bridgeObjectRelease(v284);
        swift_bridgeObjectRelease(v289);
        swift_bridgeObjectRelease(v291);
        swift_bridgeObjectRelease(v290);
LABEL_168:
        sub_100012EF8(v183, &qword_1000B1220);
        return sub_100012EF8(v322, &qword_1000B1228);
      }

      sub_100012EF8(v183, &qword_1000B1220);
      uint64_t v184 = v293;
      sub_100012DC8((uint64_t)v32, v183, &qword_1000B1220);
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
  }

  uint64_t v215 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v326 + 56);
  v215(v321, 1LL, 1LL, v327);
  uint64_t v216 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferAudioTranscriptionKey);
  uint64_t v218 = v217;
  uint64_t v219 = v292;
  if (v292[2])
  {
    unint64_t v220 = sub_100067C94(v216, v217);
    if ((v221 & 1) != 0)
    {
      sub_10001533C(v219[7] + 32 * v220, (uint64_t)&v332);
    }

    else
    {
      __int128 v332 = 0u;
      __int128 v333 = 0u;
    }

    uint64_t v184 = v293;
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  swift_bridgeObjectRelease(v218);
  swift_bridgeObjectRelease(v292);
  if (*((void *)&v333 + 1))
  {
    char v222 = swift_dynamicCast(&v330, &v332, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v223 = v316;
    if ((v222 & 1) != 0)
    {
      uint64_t v224 = v283;
      AudioMessageAttachmentInfo.init(with:audioTranscription:)(0LL, 0LL, v330, v331);
      uint64_t v283 = v224;
      if (v224)
      {
        swift_bridgeObjectRelease(v167);
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v286);
        swift_bridgeObjectRelease(v285);
        swift_bridgeObjectRelease(v284);
        swift_bridgeObjectRelease(v289);
        swift_bridgeObjectRelease(v291);
        swift_bridgeObjectRelease(v290);
        sub_100012EF8(v321, &qword_1000B1230);
        goto LABEL_168;
      }

      uint64_t v292 = v167;
      uint64_t v226 = v327;
      uint64_t v227 = (uint64_t)v300;
      (*(void (**)(char *, char *, uint64_t))(v326 + 32))(v300, v55, v327);
      v215(v227, 0LL, 1LL, v226);
      uint64_t v228 = v321;
      sub_100012EF8(v321, &qword_1000B1230);
      uint64_t v229 = v228;
      uint64_t v223 = v316;
      uint64_t v184 = v293;
      sub_100012DC8(v227, v229, &qword_1000B1230);
    }

    else
    {
      uint64_t v292 = v167;
    }
  }

  else
  {
    uint64_t v292 = v167;
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v223 = v316;
  }

  uint64_t v230 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v223 + 56);
  v230(v317, 1LL, 1LL, v314);
  uint64_t v149 = v323;
  uint64_t v150 = v324;
  uint64_t v231 = (uint64_t)v313;
  if (!v291)
  {
    uint64_t v237 = &v322;
LABEL_185:
    swift_bridgeObjectRelease(*(v237 - 32));
    goto LABEL_186;
  }

  if (!v290)
  {
    uint64_t v237 = &v323;
    goto LABEL_185;
  }

  uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
  uint64_t v234 = v233;
  if (*(void *)(a1 + 16) && (unint64_t v235 = sub_100067C94(v232, v233), (v236 & 1) != 0))
  {
    sub_10001533C(*(void *)(a1 + 56) + 32 * v235, (uint64_t)&v332);
  }

  else
  {
    __int128 v332 = 0u;
    __int128 v333 = 0u;
  }

  unint64_t v238 = v289;
  swift_bridgeObjectRelease(v234);
  if (*((void *)&v333 + 1))
  {
    uint64_t v239 = sub_10000E624(&qword_1000B0030);
    else {
      uint64_t v240 = 0LL;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v332, &qword_1000B0018);
    uint64_t v240 = 0LL;
  }

  uint64_t v263 = v283;
  uint64_t v264 = v317;
  uint64_t v265 = v305;
  EmojiImageAttachmentInfo.init(contentIdentifier:shortDescription:stickerDict:)(v278, v291, v277, v290, v240);
  if (v263)
  {
    swift_bridgeObjectRelease(v292);
    swift_bridgeObjectRelease(a1);
    swift_bridgeObjectRelease(v286);
    swift_bridgeObjectRelease(v285);
    swift_bridgeObjectRelease(v284);
    swift_bridgeObjectRelease(v238);
    uint64_t v256 = v264;
    goto LABEL_198;
  }

  uint64_t v283 = 0LL;
  sub_100012EF8(v264, &qword_1000B1218);
  v230((uint64_t)v265, 0LL, 1LL, v314);
  uint64_t v266 = (uint64_t)v265;
  uint64_t v231 = (uint64_t)v313;
  uint64_t v184 = v293;
  sub_100012DC8(v266, v264, &qword_1000B1218);
LABEL_186:
  uint64_t v241 = v321;
  sub_100012D20(v321, v231, &qword_1000B1230);
  uint64_t v242 = v327;
  int v243 = v275(v231, 1LL, v327);
  uint64_t v148 = v325;
  if (v243 != 1)
  {
    sub_100012EF8(v317, &qword_1000B1218);
    sub_100012EF8(v241, &qword_1000B1230);
    sub_100012EF8(v320, &qword_1000B1220);
    sub_100012EF8(v322, &qword_1000B1228);
    uint64_t v257 = *(void (**)(char *, uint64_t, uint64_t))(v326 + 32);
    Swift::Int v258 = v303;
    v257(v303, v231, v242);
    v257(v148, (uint64_t)v258, v242);
    uint64_t v259 = (unsigned int *)&enum case for FileTransferAttribute.AttachmentSubtype.audioMessage(_:);
LABEL_194:
    (*(void (**)(char *, void, uint64_t))(v150 + 104))(v148, *v259, v149);
    unint64_t v152 = v289;
    char v151 = v292;
    goto LABEL_110;
  }

  sub_100012EF8(v231, &qword_1000B1230);
  uint64_t v244 = v317;
  uint64_t v245 = v304;
  sub_100012D20(v317, v304, &qword_1000B1218);
  uint64_t v246 = v316;
  uint64_t v247 = v314;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v316 + 48))(v245, 1LL, v314) != 1)
  {
    sub_100012EF8(v244, &qword_1000B1218);
    sub_100012EF8(v321, &qword_1000B1230);
    sub_100012EF8(v320, &qword_1000B1220);
    sub_100012EF8(v322, &qword_1000B1228);
    uint64_t v260 = v247;
    uint64_t v261 = *(void (**)(char *, uint64_t, uint64_t))(v246 + 32);
    uint64_t v262 = v302;
    v261(v302, v245, v260);
    v261(v148, (uint64_t)v262, v260);
    uint64_t v259 = (unsigned int *)&enum case for FileTransferAttribute.AttachmentSubtype.emojiImage(_:);
    goto LABEL_194;
  }

  sub_100012EF8(v245, &qword_1000B1218);
  uint64_t v248 = v320;
  uint64_t v249 = v301;
  sub_100012D20(v320, v301, &qword_1000B1220);
  uint64_t v250 = v315;
  int v251 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v315 + 48))(v249, 1LL, v184);
  char v151 = v292;
  if (v251 != 1)
  {
    sub_100012EF8(v317, &qword_1000B1218);
    sub_100012EF8(v321, &qword_1000B1230);
    sub_100012EF8(v248, &qword_1000B1220);
    sub_100012EF8(v322, &qword_1000B1228);
    uint64_t v267 = *(void (**)(char *, uint64_t, uint64_t))(v250 + 32);
    uint64_t v268 = v299;
    v267(v299, v249, v184);
    v267(v148, (uint64_t)v268, v184);
    uint64_t v269 = (unsigned int *)&enum case for FileTransferAttribute.AttachmentSubtype.sticker(_:);
LABEL_203:
    uint64_t v272 = *v269;
LABEL_204:
    (*(void (**)(char *, uint64_t, uint64_t))(v150 + 104))(v148, v272, v149);
    goto LABEL_109;
  }

  sub_100012EF8(v249, &qword_1000B1220);
  uint64_t v252 = v298;
  sub_100012D20(v322, v298, &qword_1000B1228);
  uint64_t v254 = v318;
  uint64_t v253 = v319;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v318 + 48))(v252, 1LL, v319) != 1)
  {
    sub_100012EF8(v317, &qword_1000B1218);
    sub_100012EF8(v321, &qword_1000B1230);
    sub_100012EF8(v320, &qword_1000B1220);
    sub_100012EF8(v322, &qword_1000B1228);
    uint64_t v270 = *(void (**)(char *, uint64_t, uint64_t))(v254 + 32);
    uint64_t v271 = v296;
    v270(v296, v252, v253);
    v270(v148, (uint64_t)v271, v253);
    uint64_t v269 = (unsigned int *)&enum case for FileTransferAttribute.AttachmentSubtype.livePhoto(_:);
    goto LABEL_203;
  }

  sub_100012EF8(v252, &qword_1000B1228);
  uint64_t v255 = v283;
  GeneralAttachmentInfo.init(with:)(0LL, 0xE000000000000000LL);
  if (!v255)
  {
    uint64_t v283 = 0LL;
    sub_100012EF8(v317, &qword_1000B1218);
    sub_100012EF8(v321, &qword_1000B1230);
    sub_100012EF8(v320, &qword_1000B1220);
    sub_100012EF8(v322, &qword_1000B1228);
    uint64_t v148 = v325;
    (*(void (**)(char *, char *, uint64_t))(v294 + 32))(v325, v297, v295);
    uint64_t v272 = enum case for FileTransferAttribute.AttachmentSubtype.unspecified(_:);
    uint64_t v149 = v323;
    uint64_t v150 = v324;
    goto LABEL_204;
  }

  swift_bridgeObjectRelease(v151);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v286);
  swift_bridgeObjectRelease(v285);
  swift_bridgeObjectRelease(v284);
  swift_bridgeObjectRelease(v289);
  uint64_t v256 = v317;
LABEL_198:
  sub_100012EF8(v256, &qword_1000B1218);
  sub_100012EF8(v321, &qword_1000B1230);
  sub_100012EF8(v320, &qword_1000B1220);
  return sub_100012EF8(v322, &qword_1000B1228);
}

uint64_t sub_100064D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  type metadata accessor for Key(0LL);
  uint64_t v11 = v10;
  uint64_t v12 = sub_10000E9D8( &qword_1000AFE50,  (uint64_t (*)(uint64_t))type metadata accessor for Key,  (uint64_t)&unk_10008D334);
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, v11, (char *)&type metadata for Any + 8, v12);
  v9(v13, a3, a4, a5);
  return swift_bridgeObjectRelease(v13);
}

uint64_t AudioMessageAttachmentInfo.init(audioMessageDict:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for AudioMessageAttachmentInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferInlineAttachmentKey);
  uint64_t v11 = v10;
  if (!*(void *)(a1 + 16) || (unint64_t v12 = sub_100067C94(v9, v10), (v13 & 1) == 0))
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    swift_bridgeObjectRelease(v11);
    goto LABEL_9;
  }

  sub_10001533C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v27);
  swift_bridgeObjectRelease(v11);
  if (!*((void *)&v28 + 1))
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    sub_100012EF8((uint64_t)&v27, &qword_1000B0018);
LABEL_10:
    uint64_t v20 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1LL, v5);
  }

  if ((swift_dynamicCast(&v25, &v27, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    goto LABEL_10;
  }

  uint64_t v14 = v26;
  uint64_t v29 = v25;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferAudioTranscriptionKey);
  uint64_t v17 = v16;
  if (*(void *)(a1 + 16) && (unint64_t v18 = sub_100067C94(v15, v16), (v19 & 1) != 0))
  {
    sub_10001533C(*(void *)(a1 + 56) + 32 * v18, (uint64_t)&v27);
  }

  else
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
  }

  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(a1);
  if (*((void *)&v28 + 1))
  {
    int v22 = swift_dynamicCast(&v25, &v27, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v22) {
      uint64_t v23 = v25;
    }
    else {
      uint64_t v23 = 0LL;
    }
    if (v22) {
      uint64_t v24 = v26;
    }
    else {
      uint64_t v24 = 0LL;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v27, &qword_1000B0018);
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
  }

  uint64_t result = AudioMessageAttachmentInfo.init(with:audioTranscription:)(v29, v14, v23, v24);
  if (!v2)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
    uint64_t v20 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1LL, v5);
  }

  return result;
}

void *sub_100064FE8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for FileTransferAttribute.AttachmentInfo(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v10 = 0LL;
  uint64_t v11 = &_swiftEmptyArrayStorage;
  uint64_t v17 = a1;
  while (1)
  {
    unint64_t v12 = swift_bridgeObjectRetain(*(void *)(a1 + 8 * v10 + 32));
    FileTransferAttribute.AttachmentInfo.init(attributes:)(v12);
    if (v1) {
      break;
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      uint64_t v11 = (void *)sub_1000331F8(0, v11[2] + 1LL, 1, (unint64_t)v11);
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = (void *)sub_1000331F8(v13 > 1, v14 + 1, 1, (unint64_t)v11);
    }
    ++v10;
    v11[2] = v14 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( (unint64_t)v11 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
    + *(void *)(v4 + 72) * v14,
      v7,
      v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    a1 = v17;
    if (v18 == v10)
    {
      swift_bridgeObjectRelease(v17);
      return v11;
    }
  }

  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a1);
  return v11;
}

uint64_t StickerAttachmentInfo.init(stickerDict:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for StickerAttachmentInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, 1LL, 1LL, v5);
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sid");
  uint64_t v11 = v10;
  if (!*(void *)(a1 + 16) || (unint64_t v12 = sub_100067C94(v9, v10), (v13 & 1) == 0))
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
    swift_bridgeObjectRelease(v11);
    goto LABEL_10;
  }

  sub_10001533C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v176);
  swift_bridgeObjectRelease(v11);
  if (!*((void *)&v177 + 1))
  {
LABEL_10:
    swift_bridgeObjectRelease(a1);
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
LABEL_11:
    uint64_t v21 = @"sid";
LABEL_12:
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;
    uint64_t v25 = type metadata accessor for Explosion(0LL);
    uint64_t v26 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v25, v26, 0LL, 0LL);
    uint64_t v27 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000035LL,  0x800000010008C390LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  v22,  v24);
    return swift_willThrow(v27);
  }

  if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    goto LABEL_11;
  }

  unint64_t v14 = v175;
  uint64_t v172 = a2;
  uint64_t v173 = v174;
  uint64_t v15 = @"pid";
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"pid");
  uint64_t v18 = v17;
  if (*(void *)(a1 + 16))
  {
    unint64_t v19 = sub_100067C94(v16, v17);
    if ((v20 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v19, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v18);
  if (!*((void *)&v177 + 1)) {
    goto LABEL_31;
  }
  if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(a1);
    uint64_t v21 = v15;
    goto LABEL_12;
  }

  uint64_t v170 = v174;
  unint64_t v171 = v175;
  uint64_t v15 = @"shash";
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"shash");
  uint64_t v31 = v30;
  if (*(void *)(a1 + 16))
  {
    unint64_t v32 = sub_100067C94(v29, v30);
    if ((v33 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v32, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v31);
  if (!*((void *)&v177 + 1))
  {
    swift_bridgeObjectRelease(v171);
LABEL_31:
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(a1);
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    uint64_t v21 = v15;
    goto LABEL_12;
  }

  if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v171);
    goto LABEL_33;
  }

  unint64_t v163 = v175;
  uint64_t v164 = v174;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"suri");
  uint64_t v36 = v35;
  if (*(void *)(a1 + 16))
  {
    unint64_t v37 = sub_100067C94(v34, v35);
    if ((v38 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v37, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v36);
  if (*((void *)&v177 + 1))
  {
    int v39 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v39) {
      uint64_t v40 = v174;
    }
    else {
      uint64_t v40 = 0LL;
    }
    if (v39) {
      unint64_t v41 = v175;
    }
    else {
      unint64_t v41 = 0LL;
    }
    unint64_t v168 = v41;
    uint64_t v169 = v40;
  }

  else
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    unint64_t v168 = 0LL;
    uint64_t v169 = 0LL;
  }

  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sbid");
  uint64_t v44 = v43;
  if (*(void *)(a1 + 16))
  {
    unint64_t v45 = sub_100067C94(v42, v43);
    if ((v46 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v45, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v44);
  if (*((void *)&v177 + 1))
  {
    int v47 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v47) {
      uint64_t v48 = v174;
    }
    else {
      uint64_t v48 = 0LL;
    }
    if (v47) {
      unint64_t v49 = v175;
    }
    else {
      unint64_t v49 = 0LL;
    }
    unint64_t v166 = v49;
    uint64_t v167 = v48;
  }

  else
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    unint64_t v166 = 0LL;
    uint64_t v167 = 0LL;
  }

  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sli");
  uint64_t v52 = v51;
  if (*(void *)(a1 + 16))
  {
    unint64_t v53 = sub_100067C94(v50, v51);
    if ((v54 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v53, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v52);
  if (*((void *)&v177 + 1))
  {
    if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      unint64_t v162 = sub_100061190(v174, v175);
      int v56 = v55 & 1;
      goto LABEL_69;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
  }

  unint64_t v162 = 0LL;
  int v56 = 1;
LABEL_69:
  int v178 = v56;
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sai");
  uint64_t v59 = v58;
  if (*(void *)(a1 + 16))
  {
    unint64_t v60 = sub_100067C94(v57, v58);
    if ((v61 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v60, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v59);
  if (*((void *)&v177 + 1))
  {
    if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      unint64_t v161 = sub_100061190(v174, v175);
      int v63 = v62 & 1;
      goto LABEL_79;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
  }

  unint64_t v161 = 0LL;
  int v63 = 1;
LABEL_79:
  int v160 = v63;
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"spw");
  uint64_t v66 = v65;
  if (*(void *)(a1 + 16))
  {
    unint64_t v67 = sub_100067C94(v64, v65);
    if ((v68 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v67, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v66);
  unint64_t v165 = v14;
  if (!*((void *)&v177 + 1))
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    goto LABEL_94;
  }

  uint64_t v69 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v69 & 1) == 0)
  {
LABEL_94:
    uint64_t v159 = 0LL;
    int v73 = 1;
    goto LABEL_105;
  }

  unint64_t v70 = v175;
  uint64_t v174 = 0LL;
  __chkstk_darwin(v69);
  uint64_t v149 = &v174;
  if ((v70 & 0x1000000000000000LL) != 0 || !(v70 & 0x2000000000000000LL | v71 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v179, sub_100068994, &v148);
  }

  else
  {
    if ((v70 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v176 = v71;
      *((void *)&v176 + 1) = v70 & 0xFFFFFFFFFFFFFFLL;
      if (v71 < 0x21u && ((0x100003E01uLL >> v71) & 1) != 0)
      {
        BOOL v75 = 0;
      }

      else
      {
        unint64_t v74 = (_BYTE *)_swift_stdlib_strtod_clocale(&v176, &v174);
        if (v74) {
          BOOL v75 = *v74 == 0;
        }
        else {
          BOOL v75 = 0;
        }
      }

      LOBYTE(v179) = v75;
      swift_bridgeObjectRelease(v70);
      goto LABEL_102;
    }

    if ((v71 & 0x1000000000000000LL) != 0) {
      uint64_t v72 = (_BYTE *)((v70 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v72 = (_BYTE *)_StringObject.sharedUTF8.getter(v71, v70);
    }
    sub_100068994(v72, (BOOL *)&v176);
    LOBYTE(v179) = v176;
  }

  swift_bridgeObjectRelease(v70);
LABEL_102:
  uint64_t v76 = v174;
  if (!(_BYTE)v179) {
    uint64_t v76 = 0LL;
  }
  uint64_t v159 = v76;
  int v73 = v179 ^ 1;
LABEL_105:
  int v158 = v73;
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sxs");
  uint64_t v79 = v78;
  if (*(void *)(a1 + 16))
  {
    unint64_t v80 = sub_100067C94(v77, v78);
    if ((v81 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v80, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v79);
  if (!*((void *)&v177 + 1))
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    goto LABEL_120;
  }

  uint64_t v82 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v82 & 1) == 0)
  {
LABEL_120:
    uint64_t v86 = 0LL;
    int v87 = 1;
    goto LABEL_132;
  }

  unint64_t v83 = v175;
  uint64_t v174 = 0LL;
  __chkstk_darwin(v82);
  uint64_t v149 = &v174;
  if ((v83 & 0x1000000000000000LL) != 0 || !(v83 & 0x2000000000000000LL | v84 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v179, sub_100068994, &v148);
  }

  else
  {
    if ((v83 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v176 = v84;
      *((void *)&v176 + 1) = v83 & 0xFFFFFFFFFFFFFFLL;
      if (v84 < 0x21u && ((0x100003E01uLL >> v84) & 1) != 0)
      {
        BOOL v89 = 0;
      }

      else
      {
        uint64_t v88 = (_BYTE *)_swift_stdlib_strtod_clocale(&v176, &v174);
        if (v88) {
          BOOL v89 = *v88 == 0;
        }
        else {
          BOOL v89 = 0;
        }
      }

      LOBYTE(v179) = v89;
      swift_bridgeObjectRelease(v83);
      goto LABEL_128;
    }

    if ((v84 & 0x1000000000000000LL) != 0) {
      uint64_t v85 = (_BYTE *)((v83 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v85 = (_BYTE *)_StringObject.sharedUTF8.getter(v84, v83);
    }
    sub_100068994(v85, (BOOL *)&v176);
    LOBYTE(v179) = v176;
  }

  swift_bridgeObjectRelease(v83);
LABEL_128:
  if ((_BYTE)v179) {
    uint64_t v86 = v174;
  }
  else {
    uint64_t v86 = 0LL;
  }
  int v87 = v179 ^ 1;
LABEL_132:
  uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sys");
  uint64_t v92 = v91;
  if (*(void *)(a1 + 16))
  {
    unint64_t v93 = sub_100067C94(v90, v91);
    if ((v94 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v93, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v92);
  if (!*((void *)&v177 + 1))
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    goto LABEL_147;
  }

  uint64_t v95 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v95 & 1) == 0)
  {
LABEL_147:
    uint64_t v100 = 0LL;
    int v101 = 1;
    goto LABEL_158;
  }

  uint64_t v157 = v86;
  unint64_t v96 = v175;
  uint64_t v174 = 0LL;
  __chkstk_darwin(v95);
  uint64_t v149 = &v174;
  uint64_t v156 = v98;
  if ((v96 & 0x1000000000000000LL) != 0 || !(v96 & 0x2000000000000000LL | v97 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v179, sub_100068994, &v148);
  }

  else
  {
    if ((v96 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v176 = v97;
      *((void *)&v176 + 1) = v96 & 0xFFFFFFFFFFFFFFLL;
      if (v97 < 0x21u && ((0x100003E01uLL >> v97) & 1) != 0)
      {
        BOOL v103 = 0;
      }

      else
      {
        char v102 = (_BYTE *)_swift_stdlib_strtod_clocale(&v176, &v174);
        if (v102) {
          BOOL v103 = *v102 == 0;
        }
        else {
          BOOL v103 = 0;
        }
      }

      LOBYTE(v179) = v103;
      swift_bridgeObjectRelease(v96);
      goto LABEL_155;
    }

    if ((v97 & 0x1000000000000000LL) != 0) {
      uint64_t v99 = (_BYTE *)((v96 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v99 = (_BYTE *)_StringObject.sharedUTF8.getter(v97, v96);
    }
    sub_100068994(v99, (BOOL *)&v176);
    LOBYTE(v179) = v176;
  }

  swift_bridgeObjectRelease(v96);
LABEL_155:
  uint64_t v100 = v174;
  if (!(_BYTE)v179) {
    uint64_t v100 = 0LL;
  }
  int v101 = v179 ^ 1;
  uint64_t v86 = v157;
LABEL_158:
  LODWORD(v157) = v87 | v101;
  BOOL v104 = (v87 | v101) == 0;
  if (v87 | v101) {
    uint64_t v105 = 0LL;
  }
  else {
    uint64_t v105 = v86;
  }
  uint64_t v156 = v105;
  if (!v104) {
    uint64_t v100 = 0LL;
  }
  uint64_t v155 = v100;
  uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ssa");
  uint64_t v108 = v107;
  if (*(void *)(a1 + 16))
  {
    unint64_t v109 = sub_100067C94(v106, v107);
    if ((v110 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v109, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v108);
  if (!*((void *)&v177 + 1))
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    goto LABEL_178;
  }

  uint64_t v111 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v111 & 1) == 0)
  {
LABEL_178:
    uint64_t v154 = 0LL;
    int v115 = 1;
    goto LABEL_189;
  }

  unint64_t v112 = v175;
  uint64_t v174 = 0LL;
  __chkstk_darwin(v111);
  uint64_t v149 = &v174;
  if ((v112 & 0x1000000000000000LL) != 0 || !(v112 & 0x2000000000000000LL | v113 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v179, sub_100068994, &v148);
  }

  else
  {
    if ((v112 & 0x2000000000000000LL) != 0)
    {
      *(void *)&__int128 v176 = v113;
      *((void *)&v176 + 1) = v112 & 0xFFFFFFFFFFFFFFLL;
      if (v113 < 0x21u && ((0x100003E01uLL >> v113) & 1) != 0)
      {
        BOOL v117 = 0;
      }

      else
      {
        uint64_t v116 = (_BYTE *)_swift_stdlib_strtod_clocale(&v176, &v174);
        if (v116) {
          BOOL v117 = *v116 == 0;
        }
        else {
          BOOL v117 = 0;
        }
      }

      LOBYTE(v179) = v117;
      swift_bridgeObjectRelease(v112);
      goto LABEL_186;
    }

    if ((v113 & 0x1000000000000000LL) != 0) {
      uint64_t v114 = (_BYTE *)((v112 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v114 = (_BYTE *)_StringObject.sharedUTF8.getter(v113, v112);
    }
    sub_100068994(v114, (BOOL *)&v176);
    LOBYTE(v179) = v176;
  }

  swift_bridgeObjectRelease(v112);
LABEL_186:
  uint64_t v118 = v174;
  if (!(_BYTE)v179) {
    uint64_t v118 = 0LL;
  }
  uint64_t v154 = v118;
  int v115 = v179 ^ 1;
LABEL_189:
  int v153 = v115;
  uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sro");
  uint64_t v121 = v120;
  if (*(void *)(a1 + 16))
  {
    unint64_t v122 = sub_100067C94(v119, v120);
    if ((v123 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v122, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v121);
  if (!*((void *)&v177 + 1))
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
    goto LABEL_204;
  }

  uint64_t v124 = swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v124 & 1) == 0)
  {
LABEL_204:
    uint64_t v152 = 0LL;
    int v128 = 1;
    goto LABEL_215;
  }

  unint64_t v125 = v175;
  uint64_t v174 = 0LL;
  __chkstk_darwin(v124);
  uint64_t v149 = &v174;
  if ((v125 & 0x1000000000000000LL) != 0 || !(v125 & 0x2000000000000000LL | v126 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v179, sub_100068994, &v148);
LABEL_202:
    swift_bridgeObjectRelease(v125);
    goto LABEL_212;
  }

  if ((v125 & 0x2000000000000000LL) == 0)
  {
    if ((v126 & 0x1000000000000000LL) != 0) {
      char v127 = (_BYTE *)((v125 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      char v127 = (_BYTE *)_StringObject.sharedUTF8.getter(v126, v125);
    }
    sub_100068994(v127, (BOOL *)&v176);
    LOBYTE(v179) = v176;
    goto LABEL_202;
  }

  *(void *)&__int128 v176 = v126;
  *((void *)&v176 + 1) = v125 & 0xFFFFFFFFFFFFFFLL;
  if (v126 < 0x21u && ((0x100003E01uLL >> v126) & 1) != 0)
  {
    BOOL v130 = 0;
  }

  else
  {
    uint64_t v129 = (_BYTE *)_swift_stdlib_strtod_clocale(&v176, &v174);
    if (v129) {
      BOOL v130 = *v129 == 0;
    }
    else {
      BOOL v130 = 0;
    }
  }

  LOBYTE(v179) = v130;
  swift_bridgeObjectRelease(v125);
LABEL_212:
  uint64_t v131 = v174;
  if (!(_BYTE)v179) {
    uint64_t v131 = 0LL;
  }
  uint64_t v152 = v131;
  int v128 = v179 ^ 1;
LABEL_215:
  int v151 = v128;
  uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"spv");
  uint64_t v134 = v133;
  if (*(void *)(a1 + 16))
  {
    unint64_t v135 = sub_100067C94(v132, v133);
    if ((v136 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v135, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v134);
  if (*((void *)&v177 + 1))
  {
    if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      unint64_t v137 = sub_100061190(v174, v175);
      char v139 = v138 & 1;
      goto LABEL_225;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
  }

  unint64_t v137 = 0LL;
  char v139 = 1;
LABEL_225:
  uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sir");
  uint64_t v142 = v141;
  if (*(void *)(a1 + 16))
  {
    unint64_t v143 = sub_100067C94(v140, v141);
    if ((v144 & 1) != 0)
    {
      sub_10001533C(*(void *)(a1 + 56) + 32 * v143, (uint64_t)&v176);
    }

    else
    {
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }
  }

  else
  {
    __int128 v176 = 0u;
    __int128 v177 = 0u;
  }

  swift_bridgeObjectRelease(v142);
  swift_bridgeObjectRelease(a1);
  if (*((void *)&v177 + 1))
  {
    if ((swift_dynamicCast(&v174, &v176, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      unint64_t v145 = v175;
      if (v174 == 49 && v175 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease(0xE100000000000000LL);
        char v146 = 1;
      }

      else
      {
        char v146 = _stringCompareWithSmolCheck(_:_:expecting:)(v174, v175, 49LL, 0xE100000000000000LL, 0LL);
        swift_bridgeObjectRelease(v145);
      }

      goto LABEL_237;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v176, &qword_1000B0018);
  }

  char v146 = 0;
LABEL_237:
  LOBYTE(v149) = v139;
  BYTE1(v14_Block_object_dispose(va, 8) = v146 & 1;
  LOBYTE(v14_Block_object_dispose(va, 8) = v151;
  uint64_t result = StickerAttachmentInfo.init(with:stickerPackIdentifier:stickerHash:stickerExternalURI:balloonBundleID:positionIntent:associatedPositionIntent:parentPreviewWidth:stickerOffset:stickerScale:stickerRotation:isReaction:stickerPositionVersion:)( v173,  v165,  v170,  v171,  v164,  v163,  v169,  v168,  v167,  v166,  v162,  (_BYTE)v178,  v161,  (_BYTE)v160,  v159,  (_BYTE)v158,  v156,  v155,  (_BYTE)v157,  v154,  (_BYTE)v153,  v152,  v148,  v137,  (_DWORD)v149);
  if (!v2)
  {
    uint64_t v147 = v172;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v172, v8, v5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v147, 0LL, 1LL, v5);
  }

  return result;
}

uint64_t AudioMessageAttachmentInfo.init(transcription:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AudioMessageAttachmentInfo(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = AudioMessageAttachmentInfo.init(with:audioTranscription:)(0LL, 0LL, a1, a2);
  if (!v3)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a3, 0LL, 1LL, v7);
  }

  return result;
}

uint64_t EmojiImageAttachmentInfo.init(contentIdentifier:shortDescription:stickerDict:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a5)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    uint64_t v31 = type metadata accessor for Explosion(0LL);
    uint64_t v32 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v31, v32, 0LL, 0LL);
    unint64_t v27 = 0xD000000000000018LL;
    unint64_t v28 = 0x800000010008C3D0LL;
    uint64_t v29 = 0LL;
    uint64_t v30 = 0LL;
    goto LABEL_14;
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sid");
  uint64_t v12 = v11;
  if (!*(void *)(a5 + 16) || (unint64_t v13 = sub_100067C94(v10, v11), (v14 & 1) == 0))
  {
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    swift_bridgeObjectRelease(v12);
    goto LABEL_10;
  }

  sub_10001533C(*(void *)(a5 + 56) + 32 * v13, (uint64_t)&v65);
  swift_bridgeObjectRelease(v12);
  if (!*((void *)&v66 + 1))
  {
LABEL_10:
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    sub_100012EF8((uint64_t)&v65, &qword_1000B0018);
LABEL_11:
    uint64_t v21 = @"sid";
LABEL_12:
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    uint64_t v24 = v23;
    uint64_t v25 = type metadata accessor for Explosion(0LL);
    uint64_t v26 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v25, v26, 0LL, 0LL);
    unint64_t v27 = 0x5664696C61766E49LL;
    unint64_t v28 = 0xEC00000065756C61LL;
    uint64_t v29 = v22;
    uint64_t v30 = v24;
LABEL_14:
    uint64_t v33 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000035LL, 0x800000010008C390LL, v27, v28, v29, v30);
    return swift_willThrow(v33);
  }

  if ((swift_dynamicCast(&v63, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    goto LABEL_11;
  }

  uint64_t v62 = v63;
  uint64_t v67 = v64;
  uint64_t v15 = @"pid";
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"pid");
  uint64_t v18 = v17;
  if (*(void *)(a5 + 16) && (unint64_t v19 = sub_100067C94(v16, v17), (v20 & 1) != 0))
  {
    sub_10001533C(*(void *)(a5 + 56) + 32 * v19, (uint64_t)&v65);
  }

  else
  {
    __int128 v65 = 0u;
    __int128 v66 = 0u;
  }

  swift_bridgeObjectRelease(v18);
  if (!*((void *)&v66 + 1)) {
    goto LABEL_29;
  }
  if ((swift_dynamicCast(&v63, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    uint64_t v21 = v15;
    goto LABEL_12;
  }

  uint64_t v60 = v63;
  uint64_t v61 = v64;
  uint64_t v15 = @"shash";
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"shash");
  uint64_t v37 = v36;
  if (*(void *)(a5 + 16) && (unint64_t v38 = sub_100067C94(v35, v36), (v39 & 1) != 0))
  {
    sub_10001533C(*(void *)(a5 + 56) + 32 * v38, (uint64_t)&v65);
  }

  else
  {
    __int128 v65 = 0u;
    __int128 v66 = 0u;
  }

  swift_bridgeObjectRelease(v37);
  if (!*((void *)&v66 + 1))
  {
    swift_bridgeObjectRelease(v61);
LABEL_29:
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    sub_100012EF8((uint64_t)&v65, &qword_1000B0018);
    uint64_t v21 = v15;
    goto LABEL_12;
  }

  if ((swift_dynamicCast(&v63, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(v61);
    goto LABEL_31;
  }

  uint64_t v40 = v63;
  uint64_t v58 = v64;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"suri");
  uint64_t v43 = v42;
  uint64_t v59 = v40;
  if (*(void *)(a5 + 16))
  {
    unint64_t v44 = sub_100067C94(v41, v42);
    if ((v45 & 1) != 0)
    {
      sub_10001533C(*(void *)(a5 + 56) + 32 * v44, (uint64_t)&v65);
    }

    else
    {
      __int128 v65 = 0u;
      __int128 v66 = 0u;
    }
  }

  else
  {
    __int128 v65 = 0u;
    __int128 v66 = 0u;
  }

  swift_bridgeObjectRelease(v43);
  if (*((void *)&v66 + 1))
  {
    int v46 = swift_dynamicCast(&v63, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v46) {
      uint64_t v47 = v63;
    }
    else {
      uint64_t v47 = 0LL;
    }
    if (v46) {
      uint64_t v48 = v64;
    }
    else {
      uint64_t v48 = 0LL;
    }
    uint64_t v57 = v48;
  }

  else
  {
    sub_100012EF8((uint64_t)&v65, &qword_1000B0018);
    uint64_t v47 = 0LL;
    uint64_t v57 = 0LL;
  }

  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"sbid");
  uint64_t v51 = v50;
  if (*(void *)(a5 + 16) && (unint64_t v52 = sub_100067C94(v49, v50), (v53 & 1) != 0))
  {
    sub_10001533C(*(void *)(a5 + 56) + 32 * v52, (uint64_t)&v65);
  }

  else
  {
    __int128 v65 = 0u;
    __int128 v66 = 0u;
  }

  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(a5);
  if (*((void *)&v66 + 1))
  {
    int v54 = swift_dynamicCast(&v63, &v65, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    uint64_t v55 = v63;
    uint64_t v56 = v64;
    if (!v54)
    {
      uint64_t v55 = 0LL;
      uint64_t v56 = 0LL;
    }
  }

  else
  {
    sub_100012EF8((uint64_t)&v65, &qword_1000B0018);
    uint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
  }

  return EmojiImageAttachmentInfo.init(with:emojiImageShortDescription:stickerIdentifier:stickerPackIdentifier:stickerHash:stickerExternalURI:stickerBalloonBundleID:)( a1,  a2,  a3,  a4,  v62,  v67,  v60,  v61,  v59,  v58,  v47,  v57,  v55,  v56);
}

uint64_t FileTransferAttribute.ImageInfo.init(imageDict:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FileTransferAttribute.ImageInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMInlineMediaHeightAttributeName);
  uint64_t v11 = v10;
  if (!*(void *)(a1 + 16) || (unint64_t v12 = sub_100067C94(v9, v10), (v13 & 1) == 0))
  {
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    swift_bridgeObjectRelease(v11);
    goto LABEL_9;
  }

  sub_10001533C(*(void *)(a1 + 56) + 32 * v12, (uint64_t)&v47);
  swift_bridgeObjectRelease(v11);
  if (!*((void *)&v48 + 1))
  {
LABEL_9:
    uint64_t v20 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v20);
    sub_100012EF8((uint64_t)&v47, &qword_1000B0018);
LABEL_11:
    uint64_t v21 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1LL, v5);
  }

  if ((swift_dynamicCast(&v45, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    uint64_t v23 = a1;
LABEL_34:
    swift_bridgeObjectRelease(v23);
    goto LABEL_11;
  }

  uint64_t v14 = v46;
  double v43 = v45;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMInlineMediaWidthAttributeName);
  uint64_t v17 = v16;
  if (*(void *)(a1 + 16) && (unint64_t v18 = sub_100067C94(v15, v16), (v19 & 1) != 0))
  {
    sub_10001533C(*(void *)(a1 + 56) + 32 * v18, (uint64_t)&v47);
  }

  else
  {
    __int128 v47 = 0u;
    __int128 v48 = 0u;
  }

  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v48 + 1))
  {
    uint64_t v20 = v14;
    goto LABEL_10;
  }

  uint64_t v24 = swift_dynamicCast(&v45, &v47, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v24 & 1) == 0)
  {
    uint64_t v23 = v14;
    goto LABEL_34;
  }

  uint64_t v42 = v46;
  double v45 = 0.0;
  __chkstk_darwin(v24);
  *(&v41 - 2) = (uint64_t)&v45;
  if ((v14 & 0x1000000000000000LL) != 0 || !(v14 & 0x2000000000000000LL | *(void *)&v43 & 0x1000000000000000LL))
  {
    uint64_t v41 = v25;
    _StringGuts._slowWithCString<A>(_:)(&v44, sub_100068994, &v41 - 4);
    uint64_t v28 = swift_bridgeObjectRelease(v14);
    if ((v44 & 1) != 0) {
      goto LABEL_24;
    }
LABEL_38:
    swift_bridgeObjectRelease(v42);
    goto LABEL_39;
  }

  if ((v14 & 0x2000000000000000LL) != 0)
  {
    *(double *)&__int128 v47 = v43;
    *((void *)&v47 + 1) = v14 & 0xFFFFFFFFFFFFFFLL;
    if (LOBYTE(v43) <= 0x20u && ((1LL << SLOBYTE(v43)) & 0x100003E01LL) != 0
      || (v41 = v25, (uint64_t v37 = (unsigned __int8 *)_swift_stdlib_strtod_clocale(&v47, &v45)) == 0LL))
    {
      swift_bridgeObjectRelease(v14);
    }

    else
    {
      int v38 = *v37;
      uint64_t v28 = swift_bridgeObjectRelease(v14);
      if (!v38) {
        goto LABEL_24;
      }
    }

    goto LABEL_38;
  }

  uint64_t v41 = v25;
  if ((*(void *)&v43 & 0x1000000000000000LL) != 0) {
    uint64_t v26 = (_BYTE *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v26 = (_BYTE *)_StringObject.sharedUTF8.getter(*(void *)&v43, v14);
  }
  sub_100068994(v26, (BOOL *)&v47);
  char v27 = v47;
  uint64_t v28 = swift_bridgeObjectRelease(v14);
  if ((v27 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_24:
  double v29 = v45;
  double v45 = 0.0;
  __chkstk_darwin(v28);
  *(&v41 - 2) = (uint64_t)&v45;
  uint64_t v30 = v42;
  if ((v42 & 0x1000000000000000LL) != 0 || !(v42 & 0x2000000000000000LL | v41 & 0x1000000000000000LL))
  {
    _StringGuts._slowWithCString<A>(_:)(&v44, sub_100068994, &v41 - 4);
    uint64_t v33 = swift_bridgeObjectRelease(v30);
    if ((v44 & 1) != 0) {
      goto LABEL_30;
    }
    goto LABEL_39;
  }

  if ((v42 & 0x2000000000000000LL) != 0)
  {
    *(void *)&__int128 v47 = v41;
    *((void *)&v47 + 1) = v42 & 0xFFFFFFFFFFFFFFLL;
    if (v41 <= 0x20u && ((1LL << v41) & 0x100003E01LL) != 0
      || (char v39 = (unsigned __int8 *)_swift_stdlib_strtod_clocale(&v47, &v45)) == 0LL)
    {
      swift_bridgeObjectRelease(v30);
    }

    else
    {
      int v40 = *v39;
      uint64_t v33 = swift_bridgeObjectRelease(v30);
      if (!v40) {
        goto LABEL_30;
      }
    }

LABEL_39:
    uint64_t v34 = type metadata accessor for Explosion(0LL);
    uint64_t v35 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v34, v35, 0LL, 0LL);
    uint64_t v36 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000003FLL,  0x800000010008C3F0LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  0LL,  0LL);
    return swift_willThrow(v36);
  }

  if ((v41 & 0x1000000000000000LL) != 0) {
    uint64_t v31 = (_BYTE *)((v42 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v31 = (_BYTE *)_StringObject.sharedUTF8.getter(v41, v42);
  }
  sub_100068994(v31, (BOOL *)&v47);
  char v32 = v47;
  uint64_t v33 = swift_bridgeObjectRelease(v30);
  if ((v32 & 1) == 0) {
    goto LABEL_39;
  }
LABEL_30:
  uint64_t result = FileTransferAttribute.ImageInfo.init(with:)(v33, v29, v45);
  if (!v2)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
    uint64_t v21 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v21, 1LL, v5);
  }

  return result;
}

uint64_t FileTransferAttribute.AttachmentInfo.init(attributes:)(unint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000AFF60);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v98 - v10;
  uint64_t v12 = MBDIMFileTransferURLKey;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferURLKey);
  uint64_t v15 = v14;
  if (!*(void *)(a1 + 16) || (unint64_t v16 = sub_100067C94(v13, v14), (v17 & 1) == 0))
  {
    __int128 v108 = 0u;
    __int128 v109 = 0u;
    swift_bridgeObjectRelease(v15);
    goto LABEL_8;
  }

  sub_10001533C(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v108);
  swift_bridgeObjectRelease(v15);
  if (!*((void *)&v109 + 1))
  {
LABEL_8:
    swift_bridgeObjectRelease(a1);
    sub_100012EF8((uint64_t)&v108, &qword_1000B0018);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v21 = v20;
    uint64_t v22 = type metadata accessor for Explosion(0LL);
    uint64_t v23 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v22, v23, 0LL, 0LL);
    uint64_t v24 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000045LL,  0x800000010008C430LL,  0x4B676E697373694DLL,  0xEA00000000007965LL,  v19,  v21);
    return swift_willThrow(v24);
  }

  sub_100018278(&v108, v110);
  sub_10001533C((uint64_t)v110, (uint64_t)&v108);
  if ((swift_dynamicCast(&v106, &v108, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    goto LABEL_10;
  }

  uint64_t v18 = *((void *)&v106 + 1);
  URL.init(string:)(v106, *((void *)&v106 + 1));
  swift_bridgeObjectRelease(v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
    unint64_t v32 = MBDIMFileTransferSignatureHexKey;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferSignatureHexKey);
    uint64_t v35 = v34;
    if (*(void *)(a1 + 16))
    {
      unint64_t v36 = sub_100067C94(v33, v34);
      if ((v37 & 1) != 0)
      {
        sub_10001533C(*(void *)(a1 + 56) + 32 * v36, (uint64_t)&v108);
      }

      else
      {
        __int128 v108 = 0u;
        __int128 v109 = 0u;
      }
    }

    else
    {
      __int128 v108 = 0u;
      __int128 v109 = 0u;
    }

    swift_bridgeObjectRelease(v35);
    if (*((void *)&v109 + 1))
    {
      if ((swift_dynamicCast(&v106, &v108, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
      {
        uint64_t v38 = *((void *)&v106 + 1);
        uint64_t v103 = v106;
        unint64_t v39 = MBDIMFileTransferMMCSOwnerKey;
        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferMMCSOwnerKey);
        uint64_t v42 = v41;
        if (*(void *)(a1 + 16) && (unint64_t v43 = sub_100067C94(v40, v41), (v44 & 1) != 0))
        {
          sub_10001533C(*(void *)(a1 + 56) + 32 * v43, (uint64_t)&v108);
        }

        else
        {
          __int128 v108 = 0u;
          __int128 v109 = 0u;
        }

        swift_bridgeObjectRelease(v42);
        if (*((void *)&v109 + 1))
        {
          if ((swift_dynamicCast(&v106, &v108, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
          {
            unint64_t v52 = *((void *)&v106 + 1);
            uint64_t v101 = v106;
            unint64_t v102 = MBDIMFileTransferSizeKey;
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferSizeKey);
            uint64_t v55 = v54;
            if (*(void *)(a1 + 16) && (unint64_t v56 = sub_100067C94(v53, v54), (v57 & 1) != 0))
            {
              sub_10001533C(*(void *)(a1 + 56) + 32 * v56, (uint64_t)&v106);
            }

            else
            {
              __int128 v106 = 0u;
              __int128 v107 = 0u;
            }

            swift_bridgeObjectRelease(v55);
            if (*((void *)&v107 + 1))
            {
              sub_100018278(&v106, &v108);
              sub_10001533C((uint64_t)&v108, (uint64_t)&v106);
              if ((swift_dynamicCast(&v104, &v106, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
              {
                swift_bridgeObjectRelease(v52);
                swift_bridgeObjectRelease(v38);
                unint64_t v66 = a1;
LABEL_81:
                swift_bridgeObjectRelease(v66);
                unint64_t v80 = v102;
                goto LABEL_82;
              }

              unint64_t v59 = v105;
              unint64_t v60 = HIBYTE(v105) & 0xF;
              uint64_t v61 = v104 & 0xFFFFFFFFFFFFLL;
              if ((v105 & 0x2000000000000000LL) != 0) {
                unint64_t v62 = HIBYTE(v105) & 0xF;
              }
              else {
                unint64_t v62 = v104 & 0xFFFFFFFFFFFFLL;
              }
              if (!v62)
              {
                swift_bridgeObjectRelease(v38);
                swift_bridgeObjectRelease(a1);
LABEL_80:
                swift_bridgeObjectRelease(v59);
                unint64_t v66 = v52;
                goto LABEL_81;
              }

              if ((v105 & 0x1000000000000000LL) != 0)
              {
                uint64_t v99 = sub_100067E60( v104,  v105,  10LL,  (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100067F50);
                int v100 = v97;
                goto LABEL_75;
              }

              if ((v105 & 0x2000000000000000LL) == 0)
              {
                if ((v104 & 0x1000000000000000LL) != 0) {
                  uint64_t v63 = (unsigned __int8 *)((v105 & 0xFFFFFFFFFFFFFFFLL) + 32);
                }
                else {
                  uint64_t v63 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v104, v105);
                }
                uint64_t v64 = v111;
                uint64_t v99 = (uint64_t)sub_100067F50(v63, v61, 10LL);
                uint64_t v111 = v64;
                LODWORD(v60) = v65 & 1;
                goto LABEL_74;
              }

              *(void *)&__int128 v106 = v104;
              *((void *)&v106 + 1) = v105 & 0xFFFFFFFFFFFFFFLL;
              if (v104 == 43)
              {
                if (!v60) {
                  goto LABEL_118;
                }
                if (v60 == 1) {
                  goto LABEL_116;
                }
                unint64_t v70 = (BYTE1(v104) - 48);
                if (v60 == 2) {
                  goto LABEL_92;
                }
                uint64_t v99 = 10LL * (BYTE1(v104) - 48) + (BYTE2(v104) - 48);
                unint64_t v71 = v60 - 3;
                if (v71)
                {
                  uint64_t v72 = (unsigned __int8 *)&v106 + 3;
                  while (1)
                  {
                    unsigned int v73 = *v72 - 48;
                    if (v73 > 9) {
                      goto LABEL_72;
                    }
                    if (!is_mul_ok(v99, 0xAuLL)) {
                      goto LABEL_72;
                    }
                    BOOL v68 = __CFADD__(10 * v99, v73);
                    uint64_t v99 = 10 * v99 + v73;
                    if (v68) {
                      goto LABEL_72;
                    }
                    int v100 = 0;
                    ++v72;
                    if (!--v71) {
                      goto LABEL_75;
                    }
                  }
                }
              }

              else
              {
                if (v104 == 45)
                {
                  if (v60)
                  {
                    if (v60 != 1)
                    {
                      unsigned __int8 v67 = BYTE1(v104) - 48;
                      if ((BYTE1(v104) - 48) <= 9u)
                      {
                        unint64_t v58 = 0LL;
                        BOOL v68 = v67 == 0LL;
                        unint64_t v69 = -(uint64_t)v67;
                        if (!v68) {
                          goto LABEL_119;
                        }
                        if (v60 == 2)
                        {
                          int v100 = 0;
                          uint64_t v99 = v69;
LABEL_75:
                          swift_bridgeObjectRelease(v59);
                          if ((v100 & 1) == 0)
                          {
                            unint64_t v102 = v52;
                            unint64_t v74 = MBDIMFileTransferDecryptionKeyKey;
                            uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(MBDIMFileTransferDecryptionKeyKey);
                            uint64_t v77 = v76;
                            if (*(void *)(a1 + 16) && (unint64_t v78 = sub_100067C94(v75, v76), (v79 & 1) != 0))
                            {
                              sub_10001533C(*(void *)(a1 + 56) + 32 * v78, (uint64_t)&v106);
                            }

                            else
                            {
                              __int128 v106 = 0u;
                              __int128 v107 = 0u;
                            }

                            swift_bridgeObjectRelease(v77);
                            swift_bridgeObjectRelease(a1);
                            if (*((void *)&v107 + 1))
                            {
                              if ((swift_dynamicCast( &v104,  &v106,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL) & 1) != 0)
                              {
                                uint64_t v87 = v104;
                                unint64_t v88 = v105;
                                (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
                                FileTransferAttribute.AttachmentInfo.init(with:signature:ownerID:expectedFileSize:encryptionKey:)( v9,  v103,  v38,  v101,  v102,  v99,  v87,  v88);
                                goto LABEL_83;
                              }

                              swift_bridgeObjectRelease(v102);
                              swift_bridgeObjectRelease(v38);
                            }

                            else
                            {
                              swift_bridgeObjectRelease(v102);
                              swift_bridgeObjectRelease(v38);
                              sub_100012EF8((uint64_t)&v106, &qword_1000B0018);
                            }

                            unint64_t v80 = v74;
LABEL_82:
                            uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
                            uint64_t v83 = v82;
                            uint64_t v84 = type metadata accessor for Explosion(0LL);
                            uint64_t v85 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
                            swift_allocError(v84, v85, 0LL, 0LL);
                            uint64_t v86 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000045LL,  0x800000010008C430LL,  0x5664696C61766E49LL,  0xEC00000065756C61LL,  v81,  v83);
                            swift_willThrow(v86);
LABEL_83:
                            sub_100010D60(&v108);
                            goto LABEL_25;
                          }

                          swift_bridgeObjectRelease(v38);
                          unint64_t v59 = a1;
                          goto LABEL_80;
                        }

                        unsigned __int8 v92 = BYTE2(v104) - 48;
                        if ((BYTE2(v104) - 48) <= 9u && is_mul_ok(v69, 0xAuLL))
                        {
                          unint64_t v93 = 10 * v69;
                          uint64_t v99 = v93 - v92;
                          if (v93 >= v92)
                          {
                            unint64_t v94 = v60 - 3;
                            if (!v94) {
                              goto LABEL_105;
                            }
                            uint64_t v95 = (unsigned __int8 *)&v106 + 3;
                            while (1)
                            {
                              unsigned int v96 = *v95 - 48;
                              if (v96 > 9) {
                                break;
                              }
                              if (!is_mul_ok(v99, 0xAuLL)) {
                                break;
                              }
                              BOOL v68 = 10 * v99 >= (unint64_t)v96;
                              uint64_t v99 = 10 * v99 - v96;
                              if (!v68) {
                                break;
                              }
                              int v100 = 0;
                              ++v95;
                              if (!--v94) {
                                goto LABEL_75;
                              }
                            }
                          }
                        }
                      }

LABEL_72:
                      uint64_t v99 = 0LL;
LABEL_73:
                      LODWORD(v60) = 1;
LABEL_74:
                      int v100 = v60;
                      goto LABEL_75;
                    }

  sub_100012B98(*(void *)((char *)v217 + v216[43]), *(void *)((char *)v217 + v216[43] + 8));
  if ((v207 & 1) != 0)
  {
LABEL_35:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[44] + 8));
    if ((v209 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }

LABEL_116:
                    uint64_t v99 = 0LL;
                    goto LABEL_74;
                  }

                  __break(1u);
LABEL_118:
                  __break(1u);
LABEL_119:
                  uint64_t v99 = v58;
                  goto LABEL_73;
                }

                unint64_t v70 = (v104 - 48);
                if (v60 == 1)
                {
LABEL_92:
                  uint64_t v99 = v70;
                  int v100 = 0;
                  goto LABEL_75;
                }

                uint64_t v99 = 10LL * (v104 - 48) + (BYTE1(v104) - 48);
                unint64_t v89 = v60 - 2;
                if (v89)
                {
                  uint64_t v90 = (unsigned __int8 *)&v106 + 2;
                  while (1)
                  {
                    unsigned int v91 = *v90 - 48;
                    if (v91 > 9) {
                      goto LABEL_72;
                    }
                    if (!is_mul_ok(v99, 0xAuLL)) {
                      goto LABEL_72;
                    }
                    BOOL v68 = __CFADD__(10 * v99, v91);
                    uint64_t v99 = 10 * v99 + v91;
                    if (v68) {
                      goto LABEL_72;
                    }
                    int v100 = 0;
                    ++v90;
                    if (!--v89) {
                      goto LABEL_75;
                    }
                  }
                }
              }

LABEL_105:
              int v100 = 0;
              goto LABEL_75;
            }

            swift_bridgeObjectRelease(v52);
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(a1);
            sub_100012EF8((uint64_t)&v106, &qword_1000B0018);
            unint64_t v45 = v102;
          }

          else
          {
            swift_bridgeObjectRelease(v38);
            swift_bridgeObjectRelease(a1);
            unint64_t v45 = v39;
          }
        }

        else
        {
          swift_bridgeObjectRelease(v38);
          swift_bridgeObjectRelease(a1);
          sub_100012EF8((uint64_t)&v108, &qword_1000B0018);
          unint64_t v45 = v39;
        }

uint64_t sub_100067C34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100067C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100061648(a1, a2, a3, a4, *(void *)(v4 + 16), *(char ***)(v4 + 24));
}

uint64_t sub_100067C4C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100067C5C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100067C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100067C8C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100067C94(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_100067CF8(a1, a2, v5);
}

unint64_t sub_100067CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

_BYTE *sub_100067DD8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

unsigned __int8 *sub_100067E40(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_100067F50(a1, a2, a3);
}

uint64_t sub_100067E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100067E60(a1, a2, a3, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_100067F50);
}

uint64_t sub_100067E60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t, uint64_t))
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v6 = String.init<A>(_:)( &v16,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  if ((v7 & 0x1000000000000000LL) == 0)
  {
    if ((v7 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v11 = HIBYTE(v9) & 0xF;
    uint64_t v16 = v8;
    uint64_t v17 = v9 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v10 = &v16;
    goto LABEL_7;
  }

  uint64_t v8 = sub_100068448(v6, v7);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v9);
  unint64_t v9 = v13;
  if ((v13 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v8 & 0x1000000000000000LL) != 0)
  {
    uint64_t v10 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v10 = (uint64_t *)_StringObject.sharedUTF8.getter(v8, v9);
  }

LABEL_7:
  uint64_t v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

unsigned __int8 *sub_100067F50(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  uint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_1000681CC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v13 = v9 * a3;
              uint64_t v9 = v13 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_65;
    }

    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }

      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }

      if (result)
      {
        uint64_t v25 = 0LL;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0LL;
              }
              char v27 = -87;
            }

            else
            {
              char v27 = -55;
            }
          }

          else
          {
            char v27 = -48;
          }

          uint64_t v28 = v25 * a3;
          uint64_t v25 = v28 + (v26 + v27);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }

  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }

  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0LL;
        }
        char v20 = -87;
      }

      else
      {
        char v20 = -55;
      }
    }

    else
    {
      char v20 = -48;
    }

    uint64_t v21 = v9 * a3;
    uint64_t v9 = v21 + (v19 + v20);
    ++v18;
    --v14;
  }

  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100068448(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    uint64_t v2 = a1;
  }
  uint64_t v3 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v3 = 11LL;
  }
  unint64_t v4 = String.subscript.getter(15LL, v3 | (v2 << 16), a1, a2);
  unint64_t v6 = v5;
  uint64_t v9 = sub_1000684C4(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_1000684C4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a3;
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v12 = sub_100068608(a1, a2, a3, a4);
    if (v12)
    {
      uint64_t v9 = v12;
      unint64_t v8 = (unint64_t)sub_100015114(v12, 0LL);
      unint64_t v5 = sub_1000686F4((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      uint64_t v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = (unint64_t)&_swiftEmptyArrayStorage;
    }

    uint64_t v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(void *)(v8 + 16));
    swift_release(v8);
    return v14;
  }

  else
  {
    unint64_t v8 = a1 >> 16;
    uint64_t v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000LL) == 0)
    {
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }

unint64_t sub_100068608( unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v_Block_object_dispose(va, 8) = 1;
  }
  uint64_t v9 = 4LL << v8;
  if ((result & 0xC) == 4LL << v8)
  {
    uint64_t result = sub_100015178(result, a3, a4);
    unint64_t v7 = result;
  }

  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_100015178(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000LL) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }

  else if ((a4 & 0x1000000000000000LL) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }

  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }

  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }

  __break(1u);
  return result;
}

unint64_t sub_1000686F4( unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0LL;
    goto LABEL_33;
  }

  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0LL;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }

  uint64_t v11 = 0LL;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4LL << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000LL) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100015178(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }

    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }

      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000LL) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter(a6, a7);
        }
        char v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000LL) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }

    uint64_t result = sub_100015178(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000LL) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_29;
    }

uint64_t sub_100068904(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }

  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0LL, 0LL);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }

  return v4 & 1;
}

void *sub_100068958@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X2>, _BYTE *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

_BYTE *sub_100068994@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000689A8(a1, a2);
}

_BYTE *sub_1000689A8@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_100068A14(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

uint64_t sub_100068A48(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012LL && a2 == 0x800000010008A0E0LL) {
    return 1LL;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000012LL, 0x800000010008A0E0LL, 0LL) & 1) != 0
    || a1 == 0x702E63696C627570LL && a2 == 0xEA0000000000676ELL)
  {
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x702E63696C627570LL, 0xEA0000000000676ELL, 0LL) & 1) != 0
    || a1 == 0xD000000000000014LL && a2 == 0x8000000100089D20LL)
  {
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000014LL, 0x8000000100089D20LL, 0LL) & 1) != 0
    || a1 == 0x682E63696C627570LL && a2 == 0xEB00000000666965LL)
  {
    return 1LL;
  }

  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x682E63696C627570LL, 0xEB00000000666965LL, 0LL);
  BOOL v5 = a1 == 0x682E63696C627570LL && a2 == 0xEB00000000636965LL;
  BOOL v6 = v5;
  if ((v4 & 1) != 0 || v6) {
    return 1LL;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x682E63696C627570LL, 0xEB00000000636965LL, 0LL);
  BOOL v8 = a1 == 0x682E63696C627570LL && a2 == 0xEC00000073636965LL;
  BOOL v9 = v8;
  if ((v7 & 1) != 0 || v9) {
    return 1LL;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0x682E63696C627570LL, 0xEC00000073636965LL, 0LL);
  BOOL v11 = a1 == 0xD000000000000014LL && a2 == 0x800000010008C4D0LL;
  BOOL v12 = v11;
  if ((v10 & 1) != 0 || v12) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000014LL, 0x800000010008C4D0LL, 0LL);
  }
}

uint64_t sub_100068C88@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v162 = a4;
  uint64_t v169 = a2;
  uint64_t v8 = sub_10000E624(&qword_1000B0118);
  __chkstk_darwin(v8);
  char v10 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_10000E624(&qword_1000B0FE0);
  __chkstk_darwin(v11);
  uint64_t v164 = (char *)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_10000E624(&qword_1000B0FE8);
  __chkstk_darwin(v13);
  uint64_t v163 = (uint64_t)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_10000E624(&qword_1000B0FF0);
  __chkstk_darwin(v15);
  uint64_t v167 = (uint64_t)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v17);
  uint64_t v168 = (uint64_t)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Message(0LL);
  uint64_t v170 = *(void *)(v19 - 8);
  uint64_t v171 = v19;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v138 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_10000E624(&qword_1000B0FD8);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v138 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v138 - v26;
  uint64_t v28 = type metadata accessor for TextMessage.MessageType(0LL);
  uint64_t v165 = *(void *)(v28 - 8);
  uint64_t v166 = v28;
  __chkstk_darwin(v28);
  uint64_t v173 = (char *)&v138 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for Metadata(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v174 = (char *)&v138 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v175 = a1;
  uint64_t v34 = *a1;
  if (!*a1)
  {
    sub_100012C44();
    char v44 = (void *)static OS_os_log.textMessageUnpacker.getter();
    uint64_t v45 = static os_log_type_t.default.getter(v44);
    os_log(_:dso:log:type:_:)( "<Sticker> No participants",  25LL,  2LL,  &_mh_execute_header,  v44,  v45,  &_swiftEmptyArrayStorage);

    uint64_t v46 = type metadata accessor for Explosion(0LL);
    unint64_t v47 = sub_10001295C();
    swift_allocError(v46, v47, 0LL, 0LL);
    unint64_t v48 = 0xD000000000000015LL;
    uint64_t v49 = "NoStickerParticipants";
LABEL_7:
    uint64_t v54 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000013LL,  0x800000010008BE20LL,  v48,  (unint64_t)(v49 - 32) | 0x8000000000000000LL,  0LL,  0LL);
    return swift_willThrow(v54);
  }

  uint64_t v160 = v32;
  uint64_t v156 = v10;
  __n128 v35 = swift_bridgeObjectRetain(v34);
  uint64_t v161 = a3;
  uint64_t v36 = Message.attributionInfo.getter(v35);
  uint64_t v37 = *(void *)(v36 + 16);
  swift_bridgeObjectRelease(v36);
  if (!v37)
  {
    swift_bridgeObjectRelease(v34);
    sub_100012C44();
    uint64_t v50 = (void *)static OS_os_log.textMessageUnpacker.getter();
    uint64_t v51 = static os_log_type_t.default.getter(v50);
    os_log(_:dso:log:type:_:)( "<Sticker> No attribution info.",  30LL,  2LL,  &_mh_execute_header,  v50,  v51,  &_swiftEmptyArrayStorage);

    uint64_t v52 = type metadata accessor for Explosion(0LL);
    unint64_t v53 = sub_10001295C();
    swift_allocError(v52, v53, 0LL, 0LL);
    unint64_t v48 = 0xD000000000000018LL;
    uint64_t v49 = "NoStickerAttributionInfo";
    goto LABEL_7;
  }

  uint64_t v154 = a5;
  TopLevelDictionary.metadata.getter(v38);
  uint64_t v155 = (int *)type metadata accessor for MessageDictionary(0LL);
  unint64_t v39 = (void *)((char *)v175 + v155[52]);
  uint64_t v40 = v39[1];
  uint64_t v169 = *v39;
  uint64_t v159 = v40;
  swift_bridgeObjectRetain(v40);
  sub_100050DEC((uint64_t)v27);
  uint64_t v41 = _s17AssociatedMessageVMa(0LL);
  uint64_t v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48LL);
  int v43 = v42(v27, 1LL, v41);
  if (v43 == 1)
  {
    sub_100069920((uint64_t)v27);
    uint64_t v157 = 0LL;
    uint64_t v158 = 0LL;
  }

  else
  {
    unint64_t v56 = &v27[*(int *)(v41 + 28)];
    uint64_t v57 = *(void *)v56;
    uint64_t v157 = *((void *)v56 + 1);
    uint64_t v158 = v57;
    sub_100069960((uint64_t)v27);
  }

  sub_100050DEC((uint64_t)v25);
  int v58 = v42(v25, 1LL, v41);
  unint64_t v59 = v173;
  if (v58 == 1)
  {
    sub_100069920((uint64_t)v25);
    uint64_t v60 = 0LL;
    uint64_t v61 = 0LL;
  }

  else
  {
    unint64_t v62 = &v25[*(int *)(v41 + 24)];
    uint64_t v60 = *(void *)v62;
    uint64_t v61 = *((void *)v62 + 1);
    swift_bridgeObjectRetain(v61);
    sub_100069960((uint64_t)v25);
  }

  uint64_t v63 = v172;
  uint64_t v64 = v169;
  (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v21, v161, v171);
  Sticker.init(with:associatedMessageRange:associatedMessageFallbackHash:messageContent:participantDestinationIdentifiers:)( v64,  v159,  v158,  v157,  v43 == 1,  v60,  v61,  v21,  v34);
  if (v63) {
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v174, v160);
  }
  (*(void (**)(char *, void, uint64_t))(v165 + 104))( v59,  enum case for TextMessage.MessageType.sticker(_:),  v166);
  char v65 = v155;
  unint64_t v66 = v175;
  sub_100012D20((uint64_t)v175 + v155[18], v168, &qword_1000B0000);
  unsigned __int8 v67 = (void *)((char *)v66 + v65[31]);
  uint64_t v68 = v67[1];
  unint64_t v69 = (void *)((char *)v66 + v65[32]);
  uint64_t v70 = v69[1];
  unint64_t v71 = (void *)((char *)v66 + v65[33]);
  uint64_t v72 = (void *)((char *)v66 + v65[23]);
  unsigned int v73 = (void *)((char *)v66 + v65[24]);
  unint64_t v74 = (void *)((char *)v66 + v65[21]);
  uint64_t v75 = (void *)((char *)v66 + v65[22]);
  uint64_t v76 = v75[1];
  if (v76)
  {
    uint64_t v77 = *v75;
    unint64_t v78 = v75[1];
  }

  else
  {
    unint64_t v78 = 0xE100000000000000LL;
    uint64_t v77 = 56LL;
  }

  uint64_t v79 = *v67;
  uint64_t v80 = *v69;
  uint64_t v81 = *v71;
  uint64_t v82 = v71[1];
  uint64_t v83 = *v72;
  uint64_t v84 = v72[1];
  uint64_t v85 = *v73;
  uint64_t v86 = v73[1];
  uint64_t v87 = HIBYTE(v78) & 0xF;
  uint64_t v88 = *v74;
  uint64_t v89 = v77 & 0xFFFFFFFFFFFFLL;
  if ((v78 & 0x2000000000000000LL) != 0) {
    uint64_t v90 = HIBYTE(v78) & 0xF;
  }
  else {
    uint64_t v90 = v77 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t result = *((unsigned __int8 *)v74 + 8);
  uint64_t v171 = v68;
  uint64_t v172 = v70;
  uint64_t v169 = v80;
  uint64_t v170 = v81;
  uint64_t v165 = v82;
  uint64_t v166 = v79;
  uint64_t v160 = v84;
  uint64_t v161 = v83;
  uint64_t v158 = v86;
  uint64_t v159 = v85;
  uint64_t v157 = v88;
  int v177 = result;
  if (!v90)
  {
    uint64_t v153 = 0LL;
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRelease(v78);
    unint64_t v152 = 0LL;
    int v149 = 1;
LABEL_58:
    unint64_t v102 = v155;
    uint64_t v103 = v175;
    uint64_t v104 = (char *)v175 + v155[25];
    uint64_t v151 = *(void *)v104;
    int v150 = v104[8];
    sub_100012D20(v162, v167, &qword_1000B0FF0);
    uint64_t v105 = v102[46];
    __int128 v106 = (void *)((char *)v103 + v102[45]);
    uint64_t v107 = v106[1];
    uint64_t v162 = *v106;
    uint64_t v145 = v107;
    uint64_t v108 = *(void *)((char *)v103 + v105 + 8);
    uint64_t v148 = *(void *)((char *)v103 + v105);
    uint64_t v143 = v108;
    uint64_t v109 = v102[48];
    char v110 = (void *)((char *)v103 + v102[47]);
    uint64_t v111 = v110[1];
    uint64_t v147 = *v110;
    uint64_t v141 = v111;
    uint64_t v112 = *(void *)((char *)v103 + v109 + 8);
    uint64_t v146 = *(void *)((char *)v103 + v109);
    uint64_t v140 = v112;
    uint64_t v113 = v102[50];
    int v144 = *((unsigned __int8 *)v103 + v102[49]);
    uint64_t v114 = *(void *)((char *)v103 + v113 + 8);
    uint64_t v142 = *(void *)((char *)v103 + v113);
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v107);
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v112);
    uint64_t v115 = v163;
    sub_10005A1EC(v163);
    uint64_t v116 = (void *)((char *)v103 + v102[44]);
    uint64_t v117 = v116[1];
    uint64_t v138 = *v116;
    int v139 = *((unsigned __int8 *)v103 + 97);
    uint64_t v118 = v103[13];
    char v119 = *((_BYTE *)v103 + 112);
    uint64_t v120 = (void *)((char *)v103 + v102[19]);
    uint64_t v121 = *v120;
    uint64_t v122 = *((unsigned __int8 *)v120 + 8);
    __n128 v123 = swift_bridgeObjectRetain(v117);
    uint64_t v124 = v164;
    TextMessage.ScheduleType.init(defaultingRawValue:)(v121, v122, v123);
    uint64_t v125 = (uint64_t)v156;
    sub_100012D20((uint64_t)v103 + v102[20], (uint64_t)v156, &qword_1000B0118);
    LOBYTE(v121) = v149 & 1;
    __n128 v126 = swift_bridgeObjectRetain(*(void *)((char *)v103 + v102[57]));
    BYTE2(v137) = 0;
    LOWORD(v137) = v139 & 1;
    return TextMessage.init(with:messageSubType:replyToGUID:threadIdentifierGUID:threadOriginatorFallbackHash:expressiveSendStyleIdentifier:groupID:currentGroupName:groupParticipantVersion:groupProtocolVersion:groupPhotoCreationTime:messageSummaryInfo:isAutoReply:availabilityVerificationRecipientChannelIDPrefix:availabilityVerificationRecipientEncryptionValidationToken:availabilityOffGridRecipientSubscriptionValidationToken:availabilityOffGridRecipientEncryptionValidationToken:seenAsOffGrid:lastPublisherOfOffGridStatus:nicknameInformation:truncatedNicknameRecordKey:isExpirable:isSOS:isCritical:replicationSourceID:scheduleType:scheduledDate:replicatedFallbackGUIDs:)( v174,  v173,  v168,  v166,  v171,  v169,  v172,  v170,  v126,  v165,  v161,  v160,  v159,  v158,  v157,  (_BYTE)v177,  v152,  (_BYTE)v121,  v151,  (_BYTE)v150,  v167,  0,  v162,  v145,  v148,  v143,  v147,  v141,  v146,  v140,  (_BYTE)v144,  v142,  v114,  v115,  v138,  v117,  v137,  v118,  v119,  v124,  v125,  v127);
  }

  if ((v78 & 0x1000000000000000LL) != 0)
  {
    swift_bridgeObjectRetain(v76);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v86);
    unint64_t v92 = sub_100067E54(v77, v78, 10LL);
    char v94 = v136;
    goto LABEL_54;
  }

  if ((v78 & 0x2000000000000000LL) == 0)
  {
    if ((v77 & 0x1000000000000000LL) != 0) {
      unsigned int v91 = (unsigned __int8 *)((v78 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unsigned int v91 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v77, v78);
    }
    unint64_t v92 = (unint64_t)sub_100067E40(v91, v89, 10LL);
    char v94 = v93 & 1;
    goto LABEL_53;
  }

  v176[0] = v77;
  v176[1] = v78 & 0xFFFFFFFFFFFFFFLL;
  if (v77 == 43)
  {
    if (v87)
    {
      if (v87 != 1 && (BYTE1(v77) - 48) <= 9u)
      {
        unint64_t v92 = (BYTE1(v77) - 48);
        if (v87 == 2) {
          goto LABEL_52;
        }
        if ((BYTE2(v77) - 48) <= 9u)
        {
          unint64_t v92 = 10LL * (BYTE1(v77) - 48) + (BYTE2(v77) - 48);
          uint64_t v98 = v87 - 3;
          if (v98)
          {
            uint64_t v99 = (unsigned __int8 *)v176 + 3;
            while (1)
            {
              unsigned int v100 = *v99 - 48;
              if (v100 > 9) {
                goto LABEL_49;
              }
              if (!is_mul_ok(v92, 0xAuLL)) {
                goto LABEL_49;
              }
              BOOL v96 = __CFADD__(10 * v92, v100);
              unint64_t v92 = 10 * v92 + v100;
              if (v96) {
                goto LABEL_49;
              }
              char v94 = 0;
              ++v99;
              if (!--v98) {
                goto LABEL_53;
              }
            }
          }

          goto LABEL_52;
        }
      }

      goto LABEL_49;
    }
  }

  else
  {
    if (v77 != 45)
    {
      if (v87 && (v77 - 48) <= 9u)
      {
        unint64_t v92 = (v77 - 48);
        if (v87 == 1) {
          goto LABEL_52;
        }
        if ((BYTE1(v77) - 48) <= 9u)
        {
          unint64_t v92 = 10LL * (v77 - 48) + (BYTE1(v77) - 48);
          uint64_t v128 = v87 - 2;
          if (v128)
          {
            uint64_t v129 = (unsigned __int8 *)v176 + 2;
            while (1)
            {
              unsigned int v130 = *v129 - 48;
              if (v130 > 9) {
                goto LABEL_49;
              }
              if (!is_mul_ok(v92, 0xAuLL)) {
                goto LABEL_49;
              }
              BOOL v96 = __CFADD__(10 * v92, v130);
              unint64_t v92 = 10 * v92 + v130;
              if (v96) {
                goto LABEL_49;
              }
              char v94 = 0;
              ++v129;
              if (!--v128) {
                goto LABEL_53;
              }
            }
          }

          goto LABEL_52;
        }
      }

LABEL_52:
              char v94 = 0;
              goto LABEL_53;
            }
          }
        }
      }

      goto LABEL_49;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  sub_100012EF8((uint64_t)v217 + v216[20], &qword_1000B0118);
  if ((v26 & 0x40000) == 0)
  {
LABEL_14:
    if ((v26 & 0x80000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }

uint64_t sub_100069920(uint64_t a1)
{
  uint64_t v2 = sub_10000E624(&qword_1000B0FD8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100069960(uint64_t a1)
{
  uint64_t v2 = _s17AssociatedMessageVMa(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

Swift::Int sub_10006999C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000699E0(uint64_t a1)
{
  return String.hash(into:)(a1, 0LL, 0xE000000000000000LL);
}

Swift::Int sub_1000699EC(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_100069A2C(void *a1@<X8>)
{
  *a1 = &off_1000A3EF0;
}

void sub_100069A3C()
{
  uint64_t v0 = 85LL;
  uint64_t v1 = &byte_1000A3F10;
  while (1)
  {
    char v3 = *v1++;
    char v2 = v3;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    unint64_t v6 = sub_100067C94(0LL, 0xE000000000000000LL);
    uint64_t v7 = _swiftEmptyDictionarySingleton[2];
    BOOL v8 = (v5 & 1) == 0;
    uint64_t v9 = v7 + v8;
    if (__OFADD__(v7, v8)) {
      break;
    }
    char v10 = v5;
    if (_swiftEmptyDictionarySingleton[3] >= v9)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v5 & 1) != 0) {
          goto LABEL_2;
        }
      }

      else
      {
        sub_10002A698();
        if ((v10 & 1) != 0) {
          goto LABEL_2;
        }
      }
    }

    else
    {
      sub_100029F1C(v9, isUniquelyReferenced_nonNull_native);
      unint64_t v11 = sub_100067C94(0LL, 0xE000000000000000LL);
      if ((v10 & 1) != (v12 & 1)) {
        goto LABEL_18;
      }
      unint64_t v6 = v11;
      if ((v10 & 1) != 0)
      {
LABEL_2:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v6) = v2;
        goto LABEL_3;
      }
    }

    _swiftEmptyDictionarySingleton[(v6 >> 6) + 8] |= 1LL << v6;
    uint64_t v13 = (void *)(_swiftEmptyDictionarySingleton[6] + 16 * v6);
    void *v13 = 0LL;
    v13[1] = 0xE000000000000000LL;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v6) = v2;
    uint64_t v14 = _swiftEmptyDictionarySingleton[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_17;
    }
    _swiftEmptyDictionarySingleton[2] = v16;
LABEL_3:
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (!--v0)
    {
      off_1000B12B8 = _swiftEmptyDictionarySingleton;
      return;
    }
  }

  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100069BC8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = a1[1];
  char v4 = sub_100069C18(*a1, v3);
  swift_bridgeObjectRelease(v3);
  *a2 = v4;
}

void sub_100069C0C(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
}

uint64_t sub_100069C18(uint64_t a1, uint64_t a2)
{
  if (qword_1000AFCC8 != -1) {
    swift_once(&qword_1000AFCC8, sub_100069A3C);
  }
  char v4 = off_1000B12B8;
  if (*((void *)off_1000B12B8 + 2) && (unint64_t v5 = sub_100067C94(a1, a2), (v6 & 1) != 0)) {
    return *(unsigned __int8 *)(v4[7] + v5);
  }
  else {
    return 85LL;
  }
}

uint64_t getEnumTagSinglePayload for MetadataKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xAC) {
    goto LABEL_17;
  }
  if (a2 + 84 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 84) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 84;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 84;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 84;
    }
  }

uint64_t storeEnumTagSinglePayload for MetadataKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 84 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 84) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xAC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xAB) {
    return ((uint64_t (*)(void))((char *)&loc_100069D74 + 4 * byte_100091945[v4]))();
  }
  *a1 = a2 + 84;
  return ((uint64_t (*)(void))((char *)sub_100069DA8 + 4 * byte_100091940[v4]))();
}

uint64_t sub_100069DA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069DB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100069DB8LL);
  }
  return result;
}

uint64_t sub_100069DC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100069DCCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 84;
  return result;
}

uint64_t sub_100069DD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100069DD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetadataKey()
{
  return &type metadata for MetadataKey;
}

unint64_t sub_100069DF8()
{
  unint64_t result = qword_1000B12C0;
  if (!qword_1000B12C0)
  {
    uint64_t v1 = sub_10001008C(&qword_1000B12C8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1000B12C0);
  }

  return result;
}

unint64_t sub_100069E48()
{
  unint64_t result = qword_1000B12D0;
  if (!qword_1000B12D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091A20, &type metadata for MetadataKey);
    atomic_store(result, (unint64_t *)&qword_1000B12D0);
  }

  return result;
}

ValueMetadata *type metadata accessor for NicknameDataUnpacker()
{
  return &type metadata for NicknameDataUnpacker;
}

uint64_t sub_100069E9C()
{
  return sub_10000E9D8( &qword_1000B12D8,  (uint64_t (*)(uint64_t))&type metadata accessor for Nickname,  (uint64_t)&protocol conformance descriptor for Nickname);
}

uint64_t sub_100069EC8@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  if (a6 >> 60 == 15)
  {
    swift_bridgeObjectRetain(a4);
    v9._countAndFlagsBits = 58LL;
    v9._object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    object = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(object);
    v12._countAndFlagsBits = 58LL;
    v12._object = (void *)0xE100000000000000LL;
    String.append(_:)(v12);
    v13._countAndFlagsBits = a1;
    v13._object = a2;
    String.append(_:)(v13);
    uint64_t v14 = type metadata accessor for Explosion(0LL);
    uint64_t v15 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v14, v15, 0LL, 0LL);
    uint64_t v16 = Explosion.init(domain:errorType:keyPath:)( 0xD00000000000002ELL,  0x800000010008C250LL,  0x6465746365707845LL,  0xEE0065756C615620LL,  a3,  a4);
    return swift_willThrow(v16);
  }

  else
  {
    *a7 = a5;
    a7[1] = a6;
    return sub_100012A64(a5, a6);
  }

void sub_10006A02C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v58 = a2;
  uint64_t v45 = type metadata accessor for ImageHeaderError(0LL);
  uint64_t v44 = *(void *)(v45 - 8);
  uint64_t v4 = __chkstk_darwin(v45);
  int v43 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  v38[84] = (char *)v38 - v6;
  uint64_t v7 = sub_10000E624(&qword_1000B12E0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v48 = (char *)v38 - v10;
  __chkstk_darwin(v9);
  uint64_t v11 = sub_10000E624(&qword_1000B12E8);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v47 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = sub_10000E624(&qword_1000B12F0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v46 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v17);
  uint64_t v41 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Image(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v40 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  v38[81] = (char *)v38 - v22;
  uint64_t v39 = type metadata accessor for Image.Encoding(0LL);
  v38[85] = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  v38[82] = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for ImageHeader(0LL);
  uint64_t v49 = *(void *)(v51 - 8);
  uint64_t v24 = __chkstk_darwin(v51);
  v38[83] = (char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v50 = (char *)v38 - v26;
  uint64_t v56 = type metadata accessor for Morphology(0LL);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v52 = (char *)v38 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_10000E624(&qword_1000B12F8);
  __chkstk_darwin(v28);
  uint64_t v54 = (char *)v38 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_10000E624(&qword_1000B1300);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v42 = (char *)v38 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  unint64_t v53 = (char *)v38 - v33;
  uint64_t v34 = sub_10000E624(&qword_1000B1308);
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v57 = (char *)v38 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = a1;
  Nickname.Context.nnkey.getter(v35);
  __asm { BR              X10 }

uint64_t sub_10006A46C()
{
  uint64_t v2 = sub_100012B54(v1, v0);
  if (BYTE6(v0) == 16LL)
  {
    uint64_t v3 = ((uint64_t (*)(uint64_t))Nickname.Context.recordTag.getter)(v2);
    uint64_t v5 = v4;
    ((void (*)(uint64_t))Data.init(base64Encoded:options:))(v3);
    unint64_t v7 = v6;
    swift_bridgeObjectRelease(v5);
    if (v7 >> 60 != 15) {
      __asm { BR              X10 }
    }

    uint64_t v14 = type metadata accessor for Explosion(0LL);
    uint64_t v15 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v14, v15, 0LL, 0LL);
    unint64_t v11 = 0xD000000000000016LL;
    unint64_t v10 = 0xE900000000000074LL;
    unint64_t v12 = 0x800000010008B920LL;
    uint64_t v13 = 0x616D726F46676154LL;
  }

  else
  {
    uint64_t v8 = type metadata accessor for Explosion(0LL);
    uint64_t v9 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v8, v9, 0LL, 0LL);
    unint64_t v10 = 0xE900000000000068LL;
    unint64_t v11 = 0x6D726F4661746144LL;
    unint64_t v12 = 0xEF726F7272457461LL;
    uint64_t v13 = 0x74676E654C79654BLL;
  }

  uint64_t v16 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000028LL, 0x800000010008C570LL, v11, v12, v13, v10);
  return swift_willThrow(v16);
}

void sub_10006E4D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = type metadata accessor for WallpaperType(0LL);
  uint64_t v60 = *(void *)(v64 - 8);
  uint64_t v5 = __chkstk_darwin(v64);
  unint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = sub_10000E624(&qword_1000B0180);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v55 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v55 - v17;
  uint64_t v19 = type metadata accessor for Color(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20);
  if (!a1)
  {
    uint64_t v35 = type metadata accessor for Wallpaper.WallpaperMetadata(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(a2, 1LL, 1LL, v35);
    return;
  }

  uint64_t v56 = a2;
  uint64_t v57 = (char *)&v55 - v24;
  uint64_t v58 = v25;
  uint64_t v59 = v23;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_18;
  }
  unint64_t v26 = sub_100067C94(0x656D614E746E6F66LL, 0xEB0000000079654BLL);
  if ((v27 & 1) == 0) {
    goto LABEL_18;
  }
  sub_10001533C(*(void *)(a1 + 56) + 32 * v26, (uint64_t)v63);
  uint64_t v28 = v62;
  if (!*(void *)(a1 + 16)
    || (v55 = v61, unint64_t v29 = sub_100067C94(0x657A6953746E6F66LL, 0xEB0000000079654BLL), (v30 & 1) == 0)
    || (sub_10001533C(*(void *)(a1 + 56) + 32 * v29, (uint64_t)v63),
        (swift_dynamicCast(&v61, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v28);
    uint64_t v36 = type metadata accessor for Explosion(0LL);
    uint64_t v37 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v36, v37, 0LL, 0LL);
    unint64_t v38 = 0xD000000000000039LL;
    uint64_t v39 = "WallpaperDataOrMetadataDeserialization: Invalid font size";
LABEL_19:
    uint64_t v44 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0xD000000000000016LL,  0x800000010008B920LL,  v38,  (unint64_t)(v39 - 32) | 0x8000000000000000LL);
    swift_willThrow(v44);
    return;
  }

  if (!*(void *)(a1 + 16)
    || (v31 = v61, unint64_t v32 = sub_100067C94(0x67696557746E6F66LL, 0xED000079654B7468LL), (v33 & 1) == 0)
    || (sub_10001533C(*(void *)(a1 + 56) + 32 * v32, (uint64_t)v63),
        (swift_dynamicCast(&v61, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v28);
    uint64_t v40 = type metadata accessor for Explosion(0LL);
    uint64_t v41 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v40, v41, 0LL, 0LL);
    unint64_t v38 = 0xD00000000000003BLL;
    uint64_t v39 = "WallpaperDataOrMetadataDeserialization: Invalid font weight";
    goto LABEL_19;
  }

  double v34 = v61;
  sub_10006ECA4(a1, 0x6F6C6F43746E6F66LL, 0xEC00000079654B72LL, (uint64_t)v18);
  if (v2)
  {
    swift_bridgeObjectRelease(v28);
    return;
  }

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v18, 1LL, v59) == 1)
  {
    swift_bridgeObjectRelease(v28);
    sub_100012EF8((uint64_t)v18, &qword_1000B0180);
LABEL_18:
    uint64_t v42 = type metadata accessor for Explosion(0LL);
    uint64_t v43 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v42, v43, 0LL, 0LL);
    unint64_t v38 = 0xD000000000000039LL;
    uint64_t v39 = "WallpaperDataOrMetadataDeserialization: Invalid font name";
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v57, v18, v59);
  if (*(void *)(a1 + 16) && (unint64_t v45 = sub_100067C94(0x6369747265567369LL, 0xED000079654B6C61LL), (v46 & 1) != 0))
  {
    sub_10001533C(*(void *)(a1 + 56) + 32 * v45, (uint64_t)v63);
    char v47 = swift_dynamicCast(&v61, v63, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
    uint64_t v48 = (v47 & LOBYTE(v61));
  }

  else
  {
    uint64_t v48 = 0LL;
  }

  if (*(void *)(a1 + 16)
    && (unint64_t v49 = sub_100067C94(0x79654B65707974LL, 0xE700000000000000LL), (v50 & 1) != 0)
    && (sub_10001533C(*(void *)(a1 + 56) + 32 * v49, (uint64_t)v63),
        (swift_dynamicCast(&v61, v63, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0))
  {
    WallpaperType.init(_:)(*(void *)&v61, v62);
    sub_10006ECA4(a1, 0xD000000000000012LL, 0x800000010008C9A0LL, (uint64_t)v16);
    (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v22, v57, v59);
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v7, v9, v64);
    sub_100012D20((uint64_t)v16, (uint64_t)v13, &qword_1000B0180);
    Wallpaper.WallpaperMetadata.init(with:fontSize:fontWeight:fontColor:isVertical:type:backgroundColor:)( *(void *)&v55,  v28,  v22,  v48,  v7,  v13,  v31,  v34);
    sub_100012EF8((uint64_t)v16, &qword_1000B0180);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v64);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
    uint64_t v54 = type metadata accessor for Wallpaper.WallpaperMetadata(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))(v56, 0LL, 1LL, v54);
  }

  else
  {
    swift_bridgeObjectRelease(v28);
    uint64_t v51 = type metadata accessor for Explosion(0LL);
    uint64_t v52 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v51, v52, 0LL, 0LL);
    uint64_t v53 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0xD000000000000016LL,  0x800000010008B920LL,  0xD000000000000014LL,  0x800000010008C980LL);
    swift_willThrow(v53);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  }

uint64_t sub_10006ECA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (!a1) {
    goto LABEL_23;
  }
  if (!*(void *)(a1 + 16))
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    goto LABEL_22;
  }

  swift_bridgeObjectRetain(a3);
  unint64_t v10 = sub_100067C94(a2, a3);
  if ((v11 & 1) == 0)
  {
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    swift_bridgeObjectRelease(a3);
    goto LABEL_22;
  }

  sub_10001533C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v39);
  swift_bridgeObjectRelease(a3);
  if (!*((void *)&v40 + 1))
  {
LABEL_22:
    sub_100012EF8((uint64_t)&v39, &qword_1000B0018);
    goto LABEL_23;
  }

  uint64_t v12 = sub_10000E624(&qword_1000B1320);
  if ((swift_dynamicCast(&v41, &v39, (char *)&type metadata for Any + 8, v12, 6LL) & 1) == 0)
  {
LABEL_23:
    uint64_t v35 = type metadata accessor for Color(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))( a4,  1LL,  1LL,  v35);
  }

  uint64_t v13 = v41;
  if (!*(void *)(v41 + 16)) {
    goto LABEL_25;
  }
  unint64_t v14 = sub_100067C94(6579570LL, 0xE300000000000000LL);
  if ((v15 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
  *(void *)&__int128 v39 = 0LL;
  BYTE8(v39) = 1;
  id v17 = v16;
  ((void (*)(void))static Double._conditionallyBridgeFromObjectiveC(_:result:))();

  if ((BYTE8(v39) & 1) != 0) {
    goto LABEL_25;
  }
  if (!*(void *)(v13 + 16)) {
    goto LABEL_25;
  }
  double v18 = *(double *)&v39;
  unint64_t v19 = sub_100067C94(0x6E65657267LL, 0xE500000000000000LL);
  if ((v20 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v21 = *(void **)(*(void *)(v13 + 56) + 8 * v19);
  *(void *)&__int128 v39 = 0LL;
  BYTE8(v39) = 1;
  id v22 = v21;
  ((void (*)(void))static Double._conditionallyBridgeFromObjectiveC(_:result:))();

  if ((BYTE8(v39) & 1) != 0) {
    goto LABEL_25;
  }
  if (!*(void *)(v13 + 16)) {
    goto LABEL_25;
  }
  double v23 = *(double *)&v39;
  unint64_t v24 = sub_100067C94(1702194274LL, 0xE400000000000000LL);
  if ((v25 & 1) == 0) {
    goto LABEL_25;
  }
  unint64_t v26 = *(void **)(*(void *)(v13 + 56) + 8 * v24);
  *(void *)&__int128 v39 = 0LL;
  BYTE8(v39) = 1;
  id v27 = v26;
  ((void (*)(void))static Double._conditionallyBridgeFromObjectiveC(_:result:))();

  if ((BYTE8(v39) & 1) != 0
    || !*(void *)(v13 + 16)
    || (v28 = *(double *)&v39, unint64_t v29 = sub_100067C94(0x6168706C61LL, 0xE500000000000000LL), (v30 & 1) == 0))
  {
LABEL_25:
    swift_bridgeObjectRelease(v13);
    goto LABEL_26;
  }

  id v31 = *(id *)(*(void *)(v13 + 56) + 8 * v29);
  __n128 v32 = swift_bridgeObjectRelease(v13);
  *(void *)&__int128 v39 = 0LL;
  BYTE8(v39) = 1;
  static Double._conditionallyBridgeFromObjectiveC(_:result:)(v31, &v39, v32);

  if ((BYTE8(v39) & 1) != 0)
  {
LABEL_26:
    uint64_t v36 = type metadata accessor for Explosion(0LL);
    uint64_t v37 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v36, v37, 0LL, 0LL);
    uint64_t v38 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0xD000000000000016LL,  0x800000010008B920LL,  0xD000000000000035LL,  0x800000010008C9C0LL);
    return swift_willThrow(v38);
  }

  uint64_t result = Color.init(with:green:blue:alpha:)(v18, v23, v28, *(double *)&v39);
  if (!v5)
  {
    uint64_t v34 = type metadata accessor for Color(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))( a4,  0LL,  1LL,  v34);
  }

  return result;
}

void sub_10006EFF8(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, uint64_t *a5)
{
  id v9 = [objc_allocWithZone(NSData) initWithBytes:a1 length:16];
  unint64_t v10 = *a3;
  *a3 = v9;

  if (a1)
  {
    uint64_t v11 = sub_100071780((_BYTE *)(a1 + 16), 16LL);
    uint64_t v12 = *a4;
    unint64_t v13 = a4[1];
    *a4 = v11;
    a4[1] = v14;
    sub_100012B54(v12, v13);
    uint64_t v15 = sub_100071780((_BYTE *)(a1 + 32), 16LL);
    uint64_t v16 = *a5;
    unint64_t v17 = a5[1];
    *a5 = v15;
    a5[1] = v18;
    sub_100012B54(v16, v17);
  }

  else
  {
    __break(1u);
  }

void sub_10006F0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_10006F108( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b2, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  uint64_t v30 = v22;
  __int16 v31 = v23;
  char v32 = BYTE2(v23);
  char v33 = BYTE3(v23);
  char v34 = BYTE4(v23);
  char v35 = BYTE5(v23);
  uint64_t result = timingsafe_bcmp(v25, &v30, v24);
  if ((_DWORD)result)
  {
    uint64_t v27 = type metadata accessor for Explosion(0LL);
    uint64_t v28 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v27, v28, 0LL, 0LL);
    uint64_t v29 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0xD000000000000012LL,  0x800000010008CA20LL,  0xD000000000000017LL,  0x800000010008CA60LL);
    return swift_willThrow(v29);
  }

  return result;
}

uint64_t sub_10006F488(const void *a1, int a2, id a3, uint64_t a4)
{
  CCCryptorRef cryptorRef = 0LL;
  id v6 = a3;
  id v7 = [v6 bytes];
  id v8 = v6;
  uint64_t v9 = NSData.startIndex.getter();
  uint64_t v10 = NSData.endIndex.getter();
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();
  if (v9 < v11 || v12 < v9)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v13 = NSData.startIndex.getter();
  uint64_t v14 = NSData.endIndex.getter();

  if (v10 < v13 || v14 < v10) {
    goto LABEL_11;
  }
  if (__OFSUB__(v10, v9))
  {
LABEL_12:
    __break(1u);
    JUMPOUT(0x10006F754LL);
  }

  if (!CCCryptorCreateWithMode(1u, 4u, 0, 0, a1, v7, v10 - v9, 0LL, 0LL, 0, 0, &cryptorRef) && cryptorRef)
  {
    __int128 v20 = *(_OWORD *)(a4 + 16);
    sub_1000716B4((uint64_t)&v20, (uint64_t)v21);
    sub_1000716B4((uint64_t)v21, (uint64_t)v22);
    __asm { BR              X11 }
  }

  uint64_t v15 = type metadata accessor for Explosion(0LL);
  uint64_t v16 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
  swift_allocError(v15, v16, 0LL, 0LL);
  uint64_t v17 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0x6C616E7265746E49LL,  0xED0000726F727245LL,  0xD000000000000014LL,  0x800000010008CA00LL);
  return swift_willThrow(v17);
}

void sub_10006F770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3 = *(_OWORD *)(a3 + 16);
  sub_1000716B4((uint64_t)&v3, (uint64_t)v4);
  sub_1000716B4((uint64_t)v4, (uint64_t)v5);
  __asm { BR              X11 }

uint64_t sub_10006F7FC@<X0>( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t dataIn, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  *((void *)&v34 + 1) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  *(void *)char v33 = v34;
  *(void *)&v33[6] = *(void *)((char *)&v34 + 6);
  return sub_10006F9E8(v33, (uint64_t)&v33[BYTE6(a1)], v31, v30, v29, v28, v27);
}

uint64_t sub_10006F9E8( void *dataIn, uint64_t a2, _CCCryptor **a3, void *a4, int a5, size_t dataOutAvailable, size_t *dataOutMoved)
{
  uint64_t v10 = *a3;
  if (dataIn) {
    size_t v11 = a2 - (void)dataIn;
  }
  else {
    size_t v11 = 0LL;
  }
  uint64_t result = CCCryptorUpdate(v10, dataIn, v11, a4, dataOutAvailable, dataOutMoved);
  if ((_DWORD)result || *dataOutMoved != dataOutAvailable)
  {
    uint64_t v13 = type metadata accessor for Explosion(0LL);
    uint64_t v14 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v13, v14, 0LL, 0LL);
    uint64_t v15 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0xD000000000000012LL,  0x800000010008CA20LL,  0x636544646C656946LL,  0xEF6E6F6974707972LL);
    return swift_willThrow(v15);
  }

  return result;
}

void sub_10006FAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_autoreleasePoolPush();
  sub_10006A02C(a3, a1, a2);
  objc_autoreleasePoolPop(v6);
}

uint64_t sub_10006FB78(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return Data._Representation.append(contentsOf:)(v5, v11);
}

char *sub_10006FC08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = (char *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v10 += a1 - (void)result;
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    int v14 = v12;
  }
  else {
    int v14 = v13;
  }
  int v15 = (_DWORD)v10 + v14;
  if (v10) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  sub_10006F488(v10, v16, a4, (uint64_t)a5);

  return (char *)sub_100070E18(a5);
}

void sub_10006FCD4(uint64_t a1)
{
  __asm { BR              X12 }

void *sub_10006FD40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v10 = v1;
  LOWORD(v11) = a1;
  BYTE2(v11) = BYTE2(a1);
  HIBYTE(v11) = BYTE3(a1);
  unsigned __int8 v12 = BYTE4(a1);
  unsigned __int8 v13 = BYTE5(a1);
  unsigned __int8 v14 = BYTE6(a1);
  sub_10006F770((uint64_t)&v10, (uint64_t)&v10 + BYTE6(a1), (uint64_t)v2);
  uint64_t v4 = v10;
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  uint64_t result = sub_100070E18(v2);
  void *v3 = v4;
  v3[1] = v5 | (v6 << 32) | (v7 << 40) | (v8 << 48);
  return result;
}

void sub_10006FF80(int *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((int)v4 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v5 - v8;
  if (__OFSUB__(v5, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v10 = v4 - v5;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v11;
  }
  sub_10006F770(v7 + v9, v7 + v9 + v12, (uint64_t)a2);
  sub_100070E18(a2);
}

void sub_100070060(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  void v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1000700C4
     + *((int *)qword_100070268 + (sub_10000FFDC(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_1000700D4()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  sub_100012A64(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_100010D60(&v11);
}

uint64_t sub_100070278@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  int v29 = a3;
  uint64_t v5 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  char v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  int v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.ascii.getter(v13);
  uint64_t v16 = String.data(using:allowLossyConversion:)(v15, 0LL, 110LL, 0xE100000000000000LL);
  unint64_t v18 = v17;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  if (v18 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    *(void *)&__int128 v32 = a1;
    *((void *)&v32 + 1) = a2;
    sub_100012A64(a1, a2);
    SymmetricKey.init<A>(data:)(&v32, &type metadata for Data, &protocol witness table for Data);
    *(void *)&__int128 v32 = v16;
    *((void *)&v32 + 1) = v18;
    *(void *)&__int128 v31 = v16;
    *((void *)&v31 + 1) = v18;
    uint64_t v20 = type metadata accessor for SHA256(0LL);
    uint64_t v21 = sub_10000E9D8( &qword_1000B1330,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    unint64_t v22 = sub_100071600();
    static HKDF.deriveKey<A, B>(inputKeyMaterial:salt:info:outputByteCount:)( v10,  &v32,  &v31,  48LL,  v20,  &type metadata for Data,  &type metadata for Data,  v21,  v22,  v22);
    id v30 = [objc_allocWithZone(NSData) init];
    __int128 v31 = xmmword_100091A50;
    __int128 v32 = xmmword_100091A50;
    __chkstk_darwin(v30);
    *(&v28 - 4) = (uint64_t)&v30;
    *(&v28 - 3) = (uint64_t)&v32;
    uint64_t v27 = &v31;
    SymmetricKey.withUnsafeBytes<A>(_:)(sub_100071764);
    sub_100012B98(v16, v18);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v28 + 8);
    v23(v8, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v10, v5);
    __int128 v24 = v31;
    __int128 v25 = v32;
    unint64_t v26 = v29;
    *int v29 = v30;
    *(_OWORD *)(v26 + 1) = v25;
    *(_OWORD *)(v26 + 3) = v24;
  }

  return result;
}

uint64_t sub_1000704F0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___NSPropertyListSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&__int128 v46 = 0LL;
  id v15 = [v13 propertyListWithData:isa options:0 format:0 error:&v46];

  uint64_t v16 = v46;
  if (!v15)
  {
    id v28 = (id)v46;
    swift_bridgeObjectRelease(a2);
    _convertNSErrorToError(_:)(v16);

LABEL_20:
    swift_willThrow(v29);
    sub_100012B98(a5, a6);
    return sub_100012B54(a3, a4);
  }

  id v17 = (id)v46;
  _bridgeAnyObjectToAny(_:)(&v46, v15);
  swift_unknownObjectRelease(v15);
  uint64_t v18 = sub_10000E624(&qword_1000B0030);
  uint64_t v19 = v44;
  if (*(void *)(v44 + 16))
  {
    unint64_t v20 = sub_100067C94(118LL, 0xE100000000000000LL);
    if ((v21 & 1) != 0)
    {
      sub_10001533C(*(void *)(v19 + 56) + 32 * v20, (uint64_t)&v46);
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(a2);
      sub_100012EF8((uint64_t)&v46, &qword_1000B0018);
      uint64_t v22 = type metadata accessor for Explosion(0LL);
      uint64_t v23 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v22, v23, 0LL, 0LL);
      unint64_t v24 = 0x6D726F4661746144LL;
      unint64_t v25 = 0xEF726F7272457461LL;
      unint64_t v26 = 0x566E776F6E6B6E55LL;
      unint64_t v27 = 0xEE006E6F69737265LL;
LABEL_19:
      uint64_t v29 = Explosion.init(domain:errorType:keyPath:)(0xD000000000000028LL, 0x800000010008C570LL, v24, v25, v26, v27);
      goto LABEL_20;
    }
  }

  __int128 v46 = 0u;
  __int128 v47 = 0u;
  sub_100012EF8((uint64_t)&v46, &qword_1000B0018);
  if (!*(void *)(v19 + 16)
    || (unint64_t v30 = sub_100067C94(105LL, 0xE100000000000000LL), (v31 & 1) == 0)
    || (sub_10001533C(*(void *)(v19 + 56) + 32 * v30, (uint64_t)&v46),
        (swift_dynamicCast(&v44, &v46, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v19);
LABEL_17:
    swift_bridgeObjectRelease(a2);
LABEL_18:
    uint64_t v36 = type metadata accessor for Explosion(0LL);
    uint64_t v37 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v36, v37, 0LL, 0LL);
    unint64_t v26 = 0xD000000000000014LL;
    unint64_t v24 = 0xD000000000000016LL;
    unint64_t v25 = 0x800000010008B920LL;
    unint64_t v27 = 0x800000010008CA80LL;
    goto LABEL_19;
  }

  uint64_t v41 = v44;
  unint64_t v42 = v45;
  if (!*(void *)(v19 + 16)
    || (unint64_t v32 = sub_100067C94(100LL, 0xE100000000000000LL), (v33 & 1) == 0)
    || (sub_10001533C(*(void *)(v19 + 56) + 32 * v32, (uint64_t)&v46),
        (swift_dynamicCast(&v44, &v46, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(a2);
    sub_100012B54(v41, v42);
    goto LABEL_18;
  }

  uint64_t v39 = v44;
  unint64_t v40 = v45;
  if (*(void *)(v19 + 16) && (unint64_t v34 = sub_100067C94(116LL, 0xE100000000000000LL), (v35 & 1) != 0))
  {
    sub_10001533C(*(void *)(v19 + 56) + 32 * v34, (uint64_t)&v46);
  }

  else
  {
    __int128 v46 = 0u;
    __int128 v47 = 0u;
  }

  swift_bridgeObjectRelease(v19);
  if (!*((void *)&v47 + 1))
  {
    swift_bridgeObjectRelease(a2);
    sub_100012B54(v41, v42);
    sub_100012B54(v39, v40);
    sub_100012EF8((uint64_t)&v46, &qword_1000B0018);
    goto LABEL_18;
  }

  if ((swift_dynamicCast(&v44, &v46, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    sub_100012B54(v41, v42);
    sub_100012B54(v39, v40);
    goto LABEL_18;
  }

  sub_100012B54(a3, a4);
  uint64_t result = v44;
  if (a6 >> 60 == 15)
  {
    a5 = v44;
    a6 = v45;
  }

  else
  {
    uint64_t result = sub_100012B54(v44, v45);
  }

  *a7 = a1;
  a7[1] = a2;
  a7[2] = v39;
  a7[3] = v40;
  a7[4] = v41;
  a7[5] = v42;
  a7[6] = a5;
  a7[7] = a6;
  return result;
}

void sub_1000709D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_100070A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a3) == a4)
  {
    __chkstk_darwin(a1);
    v12[2] = v4;
    uint64_t v12[3] = v5;
    v12[4] = v6;
    uint64_t v7 = sub_10000E624(&qword_1000B1328);
    return ((uint64_t (*)(void (*)(uint64_t, uint64_t), void *, uint64_t, char *))HashedAuthenticationCode.withUnsafeBytes<A>(_:))( sub_100071748,  v12,  v7,  (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v9 = type metadata accessor for Explosion(0LL);
    uint64_t v10 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v11 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000028LL,  0x800000010008C570LL,  0xD000000000000012LL,  0x800000010008CA20LL,  0xD000000000000016LL,  0x800000010008CA40LL);
    return swift_willThrow(v11);
  }

uint64_t sub_100070B70( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v26 = a9;
  uint64_t v27 = a10;
  uint64_t v16 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v28 = *(void *)(v16 - 8);
  uint64_t v29 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_10000E624(&qword_1000B1328);
  uint64_t v30 = *(void *)(v19 - 8);
  uint64_t v31 = v19;
  __chkstk_darwin(v19);
  char v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v36 = xmmword_100091A50;
  if (a6 >> 60 != 15)
  {
    sub_100012A64(a5, a6);
    Data.append(_:)(a5, a6);
    sub_100012B98(a5, a6);
  }

  if (a8 >> 60 != 15)
  {
    sub_100012A64(a7, a8);
    Data.append(_:)(a7, a8);
    sub_100012B98(a7, a8);
  }

  Data.append(_:)(v26, v27);
  __int128 v35 = v36;
  v34[0] = a3;
  v34[1] = a4;
  sub_100012A64(v36, *((unint64_t *)&v36 + 1));
  sub_100012A64(a3, a4);
  SymmetricKey.init<A>(data:)(v34, &type metadata for Data, &protocol witness table for Data);
  uint64_t v22 = type metadata accessor for SHA256(0LL);
  uint64_t v23 = sub_10000E9D8( &qword_1000B1330,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  unint64_t v24 = sub_100071600();
  static HMAC.authenticationCode<A>(for:using:)(&v35, v18, v22, &type metadata for Data, v23, v24);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  sub_100012B54(v35, *((unint64_t *)&v35 + 1));
  sub_1000709D8((uint64_t)v21, v32, v33);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v31);
  return sub_100012B54(v36, *((unint64_t *)&v36 + 1));
}

uint64_t sub_100070DA8( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    sub_100012B54(a3, a4);
    sub_100012B54(a5, a6);
    return sub_100012B54(a7, a8);
  }

  return result;
}

void *sub_100070E18(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  swift_bridgeObjectRelease(a1[1]);
  sub_100012B54(v2, v3);
  sub_100012B54(v4, v5);
  sub_100012B54(v6, v7);
  return a1;
}

uint64_t sub_100070E88(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100070F48(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t sub_100070FE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&__int128 v36 = a3;
  *((void *)&v36 + 1) = a4;
  v33[1] = a2;
  uint64_t v5 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000E624(&qword_1000B1328);
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  __chkstk_darwin(v8);
  unint64_t v40 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *a1;
  uint64_t v16 = a1[1];
  static String.Encoding.utf8.getter(v12);
  uint64_t v17 = String.data(using:allowLossyConversion:)(v14, 0LL, v15, v16);
  unint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (v19 >> 60 == 15) {
    __break(1u);
  }
  uint64_t v21 = a1[4];
  unint64_t v20 = a1[5];
  *(void *)&__int128 v41 = v17;
  *((void *)&v41 + 1) = v19;
  sub_100012A64(v21, v20);
  sub_100012AA8(v17, v19);
  sub_100070060(v21, v20);
  sub_100012B54(v21, v20);
  sub_100012B98(v17, v19);
  __int128 v22 = v41;
  uint64_t v23 = a1;
  uint64_t v24 = a1[2];
  unint64_t v25 = a1[3];
  __int128 v42 = v41;
  sub_100012A64(v24, v25);
  sub_100012A64(v22, *((unint64_t *)&v22 + 1));
  sub_100070060(v24, v25);
  sub_100012B54(v24, v25);
  sub_100012B54(v22, *((unint64_t *)&v22 + 1));
  __int128 v26 = v42;
  __int128 v41 = v36;
  sub_100012A64(v36, *((unint64_t *)&v36 + 1));
  SymmetricKey.init<A>(data:)(&v41, &type metadata for Data, &protocol witness table for Data);
  uint64_t v27 = type metadata accessor for SHA256(0LL);
  uint64_t v28 = sub_10000E9D8( &qword_1000B1330,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  unint64_t v29 = sub_100071600();
  uint64_t v30 = (uint64_t)v40;
  static HMAC.authenticationCode<A>(for:using:)(&v42, v7, v27, &type metadata for Data, v28, v29);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v38);
  uint64_t v31 = v39;
  sub_1000709D8(v30, v23[6], v23[7]);
  if (!v31)
  {
    uint64_t v38 = *((void *)&v26 + 1);
    uint64_t v39 = v26;
    __int128 v42 = xmmword_100091A50;
    __asm { BR              X10 }
  }

  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v30, v35);
  return sub_100012B54(v26, *((unint64_t *)&v26 + 1));
}

unint64_t sub_100071600()
{
  unint64_t result = qword_1000B1338;
  if (!qword_1000B1338)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1000B1338);
  }

  return result;
}

void *sub_100071644(void *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  swift_bridgeObjectRetain(a1[1]);
  sub_100012A64(v2, v3);
  sub_100012A64(v4, v5);
  sub_100012A64(v6, v7);
  return a1;
}

uint64_t sub_1000716B4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000716F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10007171C(uint64_t a1)
{
  return a1;
}

void sub_100071748(uint64_t a1, uint64_t a2)
{
}

void sub_100071764(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100071780(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_100070E88(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CrossServiceAssociationMessageUnpacker()
{
  return &type metadata for CrossServiceAssociationMessageUnpacker;
}

unint64_t sub_10007183C(uint64_t a1)
{
  unint64_t result = sub_10000EA18();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_100071860()
{
  return sub_10000E9D8( &qword_1000B1340,  (uint64_t (*)(uint64_t))&type metadata accessor for CrossServiceAssociationMessage,  (uint64_t)&protocol conformance descriptor for CrossServiceAssociationMessage);
}

uint64_t sub_10007188C@<X0>(uint64_t a1@<X8>)
{
  v50[9] = a1;
  uint64_t v1 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v1);
  v50[3] = (char *)v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for DecodingError(0LL);
  v50[11] = *(void *)(v51 - 8);
  uint64_t v3 = __chkstk_darwin(v51);
  _BYTE v50[4] = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v50[10] = (char *)v50 - v6;
  __chkstk_darwin(v5);
  v50[12] = (char *)v50 - v7;
  uint64_t v8 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v50[8] = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Metadata(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  v50[7] = (char *)v50 - v19;
  uint64_t v20 = type metadata accessor for CrossServiceAssociationMessageContents(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  v50[5] = (char *)v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v60 = (char *)v50 - v24;
  __chkstk_darwin(v23);
  v50[6] = (char *)v50 - v25;
  uint64_t v26 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v26);
  double v55 = (char *)v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  uint64_t v53 = *(void *)(v28 - 8);
  uint64_t v54 = v28;
  __chkstk_darwin(v28);
  uint64_t v52 = (char *)v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for Explosion(0LL);
  uint64_t v57 = *(void *)(v59 - 8);
  uint64_t v30 = __chkstk_darwin(v59);
  uint64_t v56 = (char *)v50 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = TopLevelDictionary.decryptedData.getter(v30);
  if (v33 >> 60 != 15)
  {
    v50[1] = v32;
    v50[2] = v33;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v47 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v49 = v48;

    uint64_t v58 = v49;
    __asm { BR              X10 }
  }

  sub_100012C44();
  uint64_t v60 = (char *)static OS_os_log.crossServiceAssociationMessage.getter();
  uint64_t v34 = sub_10000E624(&qword_1000AFF48);
  uint64_t v35 = swift_allocObject(v34, 72LL, 7LL);
  *(_OWORD *)(v35 + 16) = xmmword_10008D7D0;
  uint64_t v36 = TopLevelDictionary.metadata.getter(v35);
  Metadata.messageGUID.getter(v36);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0LL, 1LL, v11);
  uint64_t v37 = >> prefix<A>(_:)(v10);
  uint64_t v39 = v38;
  sub_100012EF8((uint64_t)v10, &qword_1000B0000);
  *(void *)(v35 + 56) = &type metadata for String;
  unint64_t v40 = sub_100012CDC();
  *(void *)(v35 + 64) = v40;
  *(void *)(v35 + 32) = v37;
  *(void *)(v35 + 40) = v39;
  uint64_t v41 = static os_log_type_t.default.getter(v40);
  __int128 v42 = v60;
  os_log(_:dso:log:type:_:)( "Missing encrypted data (crossServiceAssociationGUID: %@)",  56LL,  2LL,  &_mh_execute_header,  v60,  v41,  v35);

  swift_bridgeObjectRelease(v35);
  unint64_t v43 = sub_1000728EC();
  uint64_t v44 = swift_allocError( &type metadata for CrossServiceAssociationMessageUnpacker.EncryptedMessageMissingData,  v43,  0LL,  0LL);
  return swift_willThrow(v44);
}

uint64_t sub_1000725CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_10000E624(&qword_1000B13E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for CrossServiceAssociationMessageContents(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_10000FFDC(a1, v12);
  unint64_t v14 = sub_100072F44();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for CrossServiceAssociationMessageContents.CodingKeys,  &type metadata for CrossServiceAssociationMessageContents.CodingKeys,  v14,  v12,  v13);
  if (!v2)
  {
    uint64_t v15 = sub_10000E9D8( &qword_1000B13F8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, void *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_100072930((uint64_t)v11, v20);
  }

  return sub_100010D60(a1);
}

uint64_t sub_100072790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v6 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v12 = PropertyListDecoder.init()(v11);
  uint64_t v13 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v13);
  uint64_t result = swift_release(v12);
  if (!v3)
  {
    sub_10007188C(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return result;
}

uint64_t type metadata accessor for CrossServiceAssociationMessageContents(uint64_t a1)
{
  uint64_t result = qword_1000B13B0;
  if (!qword_1000B13B0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CrossServiceAssociationMessageContents);
  }
  return result;
}

unint64_t sub_1000728EC()
{
  unint64_t result = qword_1000B1348;
  if (!qword_1000B1348)
  {
    unint64_t result = swift_getWitnessTable( &unk_100091BD8,  &type metadata for CrossServiceAssociationMessageUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000B1348);
  }

  return result;
}

uint64_t sub_100072930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrossServiceAssociationMessageContents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100072974(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CrossServiceAssociationMessageContents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000729B8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CrossServiceAssociationMessageContents(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for CrossServiceAssociationMessageUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for CrossServiceAssociationMessageUnpacker.EncryptedMessageMissingData;
}

uint64_t sub_100072A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_100072A40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_100072A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100072AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100072AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100072B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_100072B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100072B90);
}

uint64_t sub_100072B90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_100072BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072BD8);
}

uint64_t sub_100072BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_100072C18(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

Swift::Int sub_100072C80()
{
  return Hasher._finalize()();
}

uint64_t sub_100072CC4(uint64_t a1)
{
  return String.hash(into:)(a1, 29269LL, 0xE200000000000000LL);
}

Swift::Int sub_100072CD0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100072D10@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3F68, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100072D60(void *a1@<X8>)
{
  *a1 = 29269LL;
  a1[1] = 0xE200000000000000LL;
}

uint64_t sub_100072D70()
{
  return 29269LL;
}

uint64_t sub_100072D7C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3FA0, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100072DD0(uint64_t a1)
{
  unint64_t v2 = sub_100072F44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072DF8(uint64_t a1)
{
  unint64_t v2 = sub_100072F44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100072E20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000725CC(a1, a2);
}

uint64_t sub_100072E34(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000E624(&qword_1000B1400);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000FFDC(a1, v8);
  unint64_t v10 = sub_100072F44();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for CrossServiceAssociationMessageContents.CodingKeys,  &type metadata for CrossServiceAssociationMessageContents.CodingKeys,  v10,  v8,  v9);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = sub_10000E9D8( &qword_1000B1408,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_100072F44()
{
  unint64_t result = qword_1000B13F0;
  if (!qword_1000B13F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091D14, &type metadata for CrossServiceAssociationMessageContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B13F0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for CrossServiceAssociationMessageContents.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100072FC8 + 4 * byte_100091AB0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100072FE8 + 4 * byte_100091AB5[v4]))();
  }
}

_BYTE *sub_100072FC8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100072FE8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100072FF0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100072FF8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100073000(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100073008(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CrossServiceAssociationMessageContents.CodingKeys()
{
  return &type metadata for CrossServiceAssociationMessageContents.CodingKeys;
}

unint64_t sub_100073028()
{
  unint64_t result = qword_1000B1410;
  if (!qword_1000B1410)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091CEC, &type metadata for CrossServiceAssociationMessageContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1410);
  }

  return result;
}

unint64_t sub_100073070()
{
  unint64_t result = qword_1000B1418;
  if (!qword_1000B1418)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091C24, &type metadata for CrossServiceAssociationMessageContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1418);
  }

  return result;
}

unint64_t sub_1000730B8()
{
  unint64_t result = qword_1000B1420;
  if (!qword_1000B1420)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091C4C, &type metadata for CrossServiceAssociationMessageContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1420);
  }

  return result;
}

char *sub_1000730FC()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_10000E624(&qword_1000B1428);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v114 - v8;
  __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v114 - v10;
  uint64_t v11 = sub_10000E624(&qword_1000B1430);
  __chkstk_darwin(v11);
  int v139 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for AttributionInfo(0LL);
  uint64_t v13 = *(void *)(v138 - 8);
  uint64_t v14 = __chkstk_darwin(v138);
  uint64_t v16 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v114 - v17;
  uint64_t v19 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessageDictionary(0LL) + 116));
  unint64_t v20 = v19[1];
  if (v20 >> 60 == 15) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  char v119 = v18;
  unsigned __int8 v131 = v16;
  uint64_t v133 = v13;
  uint64_t v121 = v9;
  uint64_t v21 = *v19;
  sub_100012A64(*v19, v20);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v23 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  unint64_t v26 = v25;

  uint64_t v27 = sub_10000E624(&qword_1000B0040);
  uint64_t v28 = swift_allocObject(v27, 288LL, 7LL);
  *(_OWORD *)(v28 + 16) = xmmword_10008EC60;
  uint64_t v29 = sub_100018290(0LL, &qword_1000B1438, &OBJC_CLASS___NSArray_ptr);
  *(void *)(v28 + 56) = sub_10000E624(&qword_1000B1440);
  *(void *)(v28 + 32) = v29;
  uint64_t v30 = sub_100018290(0LL, &qword_1000B0050, &OBJC_CLASS___NSString_ptr);
  *(void *)(v28 + 8_Block_object_dispose(va, 8) = sub_10000E624(&qword_1000B0058);
  *(void *)(v28 + 64) = v30;
  uint64_t v31 = sub_100018290(0LL, (unint64_t *)&qword_1000AFEA8, &OBJC_CLASS___NSNumber_ptr);
  *(void *)(v28 + 120) = sub_10000E624(&qword_1000B0070);
  *(void *)(v28 + 96) = v31;
  uint64_t v32 = sub_100018290(0LL, (unint64_t *)&qword_1000B0038, &OBJC_CLASS___NSDictionary_ptr);
  *(void *)(v28 + 152) = sub_10000E624(&qword_1000B0048);
  *(void *)(v28 + 12_Block_object_dispose(va, 8) = v32;
  uint64_t v33 = sub_100018290(0LL, &qword_1000B1448, &OBJC_CLASS___NSMutableArray_ptr);
  *(void *)(v28 + 184) = sub_10000E624(&qword_1000B1450);
  *(void *)(v28 + 160) = v33;
  uint64_t v34 = sub_100018290(0LL, &qword_1000B00A0, &OBJC_CLASS___NSMutableDictionary_ptr);
  *(void *)(v28 + 216) = sub_10000E624(&qword_1000B00A8);
  *(void *)(v28 + 192) = v34;
  uint64_t v35 = sub_100018290(0LL, &qword_1000B00C0, &OBJC_CLASS___NSMutableString_ptr);
  *(void *)(v28 + 24_Block_object_dispose(va, 8) = sub_10000E624(&qword_1000B00C8);
  *(void *)(v28 + 224) = v35;
  uint64_t v36 = sub_100018290(0LL, &qword_1000B1458, &OBJC_CLASS___NSNull_ptr);
  *(void *)(v28 + 280) = sub_10000E624(&qword_1000B1460);
  *(void *)(v28 + 256) = v36;
  sub_100018290(0LL, &qword_1000B00D0, &OBJC_CLASS___NSSet_ptr);
  uint64_t v37 = (void *)NSSet.init(arrayLiteral:)(v28);
  *(void *)&v149[0] = 0LL;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)( v37,  v149,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);
  uint64_t v38 = *(void *)&v149[0];
  unint64_t v134 = v26;
  uint64_t v135 = v21;
  uint64_t v137 = v24;
  if (!*(void *)&v149[0])
  {
    uint64_t v89 = type metadata accessor for Explosion(0LL);
    unint64_t v90 = sub_10001295C();
    uint64_t v64 = swift_allocError(v89, v90, 0LL, 0LL);
    uint64_t v91 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000023LL,  0x800000010008CBD0LL,  0xD000000000000021LL,  0x800000010008CC00LL,  0LL,  0LL);
    swift_willThrow(v91);

    goto LABEL_27;
  }

  id v117 = v37;
  uint64_t v120 = v6;
  uint64_t v39 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedUnarchiver);
  Class v40 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v38);
  Class v41 = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v149[0] = 0LL;
  id v42 = [v39 _strictlyUnarchivedObjectOfClasses:v40 fromData:v41 error:v149];

  id v43 = *(id *)&v149[0];
  if (!v42)
  {
    unint64_t v92 = v43;
    uint64_t v64 = _convertNSErrorToError(_:)(v43);

    swift_willThrow(v93);
    goto LABEL_27;
  }

  _bridgeAnyObjectToAny(_:)(v151, v42);
  swift_unknownObjectRelease(v42);
  sub_10001533C((uint64_t)v151, (uint64_t)v149);
  uint64_t v44 = sub_10000E624(&qword_1000B1468);
  if (!swift_dynamicCast(&v140, v149, (char *)&type metadata for Any + 8, v44, 6LL))
  {
    uint64_t v94 = type metadata accessor for Explosion(0LL);
    unint64_t v95 = sub_10001295C();
    uint64_t v64 = swift_allocError(v94, v95, 0LL, 0LL);
    uint64_t v96 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000023LL,  0x800000010008CBD0LL,  0xD000000000000014LL,  0x800000010008CC70LL,  0LL,  0LL);
    swift_willThrow(v96);

    sub_100010D60(v151);
    goto LABEL_27;
  }

  uint64_t v45 = v140;
  uint64_t v122 = *(void *)(v140 + 16);
  if (!v122)
  {
    __int128 v106 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v49 = v137;
LABEL_32:
    sub_100012B98(v21, v20);

    sub_100012B54(v49, v26);
    sub_100010D60(v151);
    swift_bridgeObjectRelease(v45);
    return v106;
  }

  __n128 v46 = swift_bridgeObjectRetain(v140);
  uint64_t v47 = 0LL;
  uint64_t v118 = (char *)&_swiftEmptyArrayStorage;
  unint64_t v115 = v20;
  uint64_t v116 = (char *)&type metadata for Any + 8;
  uint64_t v49 = v137;
  uint64_t v48 = v138;
  uint64_t v50 = (uint64_t)v139;
  uint64_t v114 = v45;
  while (1)
  {
    uint64_t v132 = v47;
    if (!*(void *)(v45 + 8 * v47 + 32))
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v133 + 56))(v50, 1LL, 1LL, v48);
      goto LABEL_8;
    }

    uint64_t v51 = *(void *)(v45 + 8 * v47 + 32);
    uint64_t v52 = type metadata accessor for JSONDecoder(0LL, v46);
    swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    uint64_t v53 = swift_bridgeObjectRetain_n(v51, 2LL);
    uint64_t v54 = JSONDecoder.init()(v53);
    double v55 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class v56 = Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v130 = v51;
    *(void *)&double v57 = swift_bridgeObjectRelease(v51).n128_u64[0];
    *(void *)&__int128 v140 = 0LL;
    id v58 = objc_msgSend(v55, "dataWithJSONObject:options:error:", v56, 0, &v140, v57);

    id v59 = (id)v140;
    if (!v58)
    {
      uint64_t v108 = v59;
      swift_release(v54);
      uint64_t v64 = _convertNSErrorToError(_:)(v108);

      swift_willThrow(v109);
LABEL_35:
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v130);

      goto LABEL_37;
    }

    uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
    unint64_t v62 = v61;

    unint64_t v63 = sub_100073DA8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( v149,  &type metadata for AttributionInfoKeyedUnarchiverSchema,  v60,  v62,  &type metadata for AttributionInfoKeyedUnarchiverSchema,  v63);
    uint64_t v64 = v2;
    if (v2)
    {
      swift_release(v54);
      sub_100012B54(v60, v62);
      goto LABEL_35;
    }

    swift_release(v54);
    sub_100012B54(v60, v62);
    __int128 v146 = v149[6];
    __int128 v147 = v149[7];
    v148[0] = v150[0];
    *(_OWORD *)((char *)v148 + 10) = *(_OWORD *)((char *)v150 + 10);
    __int128 v142 = v149[2];
    __int128 v143 = v149[3];
    __int128 v144 = v149[4];
    __int128 v145 = v149[5];
    __int128 v140 = v149[0];
    __int128 v141 = v149[1];
    if ((WORD4(v150[1]) & 0xFF00) == 0x200)
    {
      uint64_t v123 = 0LL;
      uint64_t v65 = type metadata accessor for AttributionInfo.PreviewGenerationConstraints(0LL);
      uint64_t v66 = v136;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))(v136, 1LL, 1LL, v65);
    }

    else
    {
      LOBYTE(v113) = BYTE9(v150[1]) & 1;
      uint64_t v67 = (uint64_t)v121;
      AttributionInfo.PreviewGenerationConstraints.init(with:minThumbSizeHeight:minThumbSizeWidth:scale:isSticker:)( v146,  BYTE8(v146) & 1,  v147,  BYTE8(v147) & 1,  *(void *)&v148[0],  BYTE8(v148[0]) & 1,  *(void *)&v148[1],  BYTE8(v150[1]) & 1,  v113);
      uint64_t v123 = 0LL;
      uint64_t v68 = type metadata accessor for AttributionInfo.PreviewGenerationConstraints(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))(v67, 0LL, 1LL, v68);
      uint64_t v69 = v67;
      uint64_t v66 = v136;
      sub_100073E34(v69, v136);
    }

    uint64_t v129 = v140;
    unsigned int v128 = BYTE8(v140);
    uint64_t v70 = *((void *)&v141 + 1);
    uint64_t v71 = *((void *)&v142 + 1);
    uint64_t v126 = v142;
    uint64_t v127 = v141;
    uint64_t v72 = *((void *)&v143 + 1);
    uint64_t v124 = v144;
    uint64_t v125 = v143;
    char v73 = BYTE8(v144);
    uint64_t v74 = v145;
    char v75 = BYTE8(v145);
    uint64_t v76 = (uint64_t)v120;
    sub_100073DEC(v66, (uint64_t)v120);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
    __n128 v77 = swift_bridgeObjectRetain(v72);
    LOBYTE(v112) = v75;
    uint64_t v111 = v74;
    LOBYTE(v110) = v73;
    uint64_t v50 = (uint64_t)v139;
    uint64_t v78 = v123;
    AttributionInfo.init(with:accessibilityStickerName:bundleID:packName:previewGenerationSizeHeight:previewGenerationSizeWidth:previewGenerationConstraints:)( v129,  v128,  v127,  v70,  v126,  v71,  v125,  v72,  v77,  v124,  v110,  v111,  v112,  v76);
    uint64_t v2 = v78;
    if (v78) {
      break;
    }
    sub_10004D830(&v140);
    sub_100012EF8(v66, &qword_1000B1428);
    uint64_t v79 = v133;
    uint64_t v48 = v138;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v133 + 56))(v50, 0LL, 1LL, v138);
    __n128 v80 = swift_bridgeObjectRelease(v130);
    int v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v79 + 48))(v50, 1LL, v48, v80);
    unint64_t v20 = v115;
    unint64_t v26 = v134;
    uint64_t v21 = v135;
    uint64_t v49 = v137;
    if (v81 != 1)
    {
      uint64_t v82 = v50;
      uint64_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 32);
      uint64_t v84 = v119;
      v83(v119, v82, v48);
      v83(v131, (uint64_t)v84, v48);
      unint64_t v85 = (unint64_t)v118;
      if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0) {
        unint64_t v85 = sub_100032E90(0, *(void *)(v85 + 16) + 1LL, 1, v85);
      }
      unint64_t v87 = *(void *)(v85 + 16);
      unint64_t v86 = *(void *)(v85 + 24);
      uint64_t v118 = (char *)v85;
      if (v87 >= v86 >> 1) {
        uint64_t v118 = (char *)sub_100032E90(v86 > 1, v87 + 1, 1, (unint64_t)v118);
      }
      uint64_t v88 = v118;
      *((void *)v118 + 2) = v87 + 1;
      uint64_t v48 = v138;
      v83( &v88[((*(unsigned __int8 *)(v133 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80))
           + *(void *)(v133 + 72) * v87],
        (uint64_t)v131,
        v138);
      uint64_t v50 = (uint64_t)v139;
      uint64_t v45 = v114;
      goto LABEL_9;
    }

    uint64_t v45 = v114;
LABEL_8:
    sub_100012EF8(v50, &qword_1000B1430);
LABEL_9:
    uint64_t v47 = v132 + 1;
    if (v122 == v132 + 1)
    {
      swift_bridgeObjectRelease(v45);
      __int128 v106 = v118;
      goto LABEL_32;
    }
  }

  sub_10004D830(&v140);
  sub_100012EF8(v66, &qword_1000B1428);

  swift_bridgeObjectRelease(v118);
  uint64_t v45 = v114;
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v130);
  uint64_t v64 = v78;
  unint64_t v20 = v115;
LABEL_37:
  sub_100010D60(v151);
  swift_bridgeObjectRelease(v45);
LABEL_27:
  sub_100018290(0LL, (unint64_t *)&qword_1000AFF38, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v97 = (void *)static OS_os_log.textMessageUnpacker.getter();
  uint64_t v98 = sub_10000E624(&qword_1000AFF48);
  uint64_t v99 = swift_allocObject(v98, 72LL, 7LL);
  *(_OWORD *)(v99 + 16) = xmmword_10008D7D0;
  *(void *)&v149[0] = v64;
  sub_10000E624(&qword_1000AFFC8);
  uint64_t v100 = >> prefix<A>(_:)(v149);
  uint64_t v101 = v64;
  uint64_t v103 = v102;
  *(void *)(v99 + 56) = &type metadata for String;
  unint64_t v104 = sub_100012CDC();
  *(void *)(v99 + 64) = v104;
  *(void *)(v99 + 32) = v100;
  *(void *)(v99 + 40) = v103;
  uint64_t v105 = static os_log_type_t.default.getter(v104);
  os_log(_:dso:log:type:_:)( "Unpacking attribution unpacking error: %{public}@",  49LL,  2LL,  &_mh_execute_header,  v97,  v105,  v99);

  swift_bridgeObjectRelease(v99);
  sub_100012B98(v135, v20);
  sub_100012B54(v137, v134);
  swift_errorRelease(v101);
  return (char *)&_swiftEmptyArrayStorage;
}

unint64_t sub_100073DA8()
{
  unint64_t result = qword_1000B1470;
  if (!qword_1000B1470)
  {
    unint64_t result = swift_getWitnessTable(&unk_100090888, &type metadata for AttributionInfoKeyedUnarchiverSchema);
    atomic_store(result, (unint64_t *)&qword_1000B1470);
  }

  return result;
}

uint64_t sub_100073DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100073E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1428);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100073E7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = a1[2];
    uint64_t v5 = a1[3];
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = *((unsigned __int8 *)a1 + 48);
    uint64_t v14 = a1[7];
    char v9 = *((_BYTE *)a1 + 64);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    GroupContext.init(with:groupID:currentGroupName:groupParticipantVersion:groupProtocolVersion:)( v2,  v3,  v4,  v5,  v6,  v7,  v8,  v14,  v9);
    return sub_100073FC8(a1);
  }

  else
  {
    sub_100073FC8(a1);
    uint64_t v11 = type metadata accessor for Explosion(0LL);
    unint64_t v12 = sub_10001295C();
    swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v13 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000024LL,  0x800000010008CC90LL,  0x7069636974726150LL,  0xEC00000073746E61LL,  0LL,  0LL);
    return (void *)swift_willThrow(v13);
  }

void *sub_100073FC8(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for PreviewImageUnpacker()
{
  return &type metadata for PreviewImageUnpacker;
}

uint64_t sub_100074020()
{
  return sub_10000E9D8( &qword_1000B1478,  (uint64_t (*)(uint64_t))&type metadata accessor for PreviewImage,  (uint64_t)&protocol conformance descriptor for PreviewImage);
}

uint64_t sub_10007404C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v173 = a2;
  uint64_t v166 = a3;
  uint64_t v158 = type metadata accessor for StickerEffect(0LL);
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v162 = (char *)&v152 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_10000E624(&qword_1000B1480);
  __chkstk_darwin(v5);
  uint64_t v170 = (uint64_t *)((char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v175 = type metadata accessor for ImageProperties(0LL);
  uint64_t v168 = *(void *)(v175 - 8);
  uint64_t v7 = __chkstk_darwin(v175);
  uint64_t v167 = (char *)&v152 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v164 = (char *)&v152 - v9;
  uint64_t v10 = sub_10000E624(&qword_1000B1488);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v165 = (char *)&v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v155 = (char *)&v152 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v161 = (char *)&v152 - v16;
  __chkstk_darwin(v15);
  uint64_t v180 = (uint64_t)&v152 - v17;
  uint64_t v18 = sub_10000E624(&qword_1000AFFE0);
  __chkstk_darwin(v18);
  uint64_t v169 = (char *)&v152 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v172 = type metadata accessor for Image(0LL);
  uint64_t v174 = *(void *)(v172 - 8);
  uint64_t v20 = __chkstk_darwin(v172);
  uint64_t v156 = (char *)&v152 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v160 = (char *)&v152 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v159 = (char *)&v152 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v152 - v26;
  uint64_t v28 = type metadata accessor for Path(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v152 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for BlastDoorServer(0LL);
  static BlastDoorServer.disableRawDecoding()();
  unint64_t v163 = sub_100012C44();
  uint64_t v32 = (void *)((uint64_t (*)(void))static OS_os_log.image.getter)();
  uint64_t v33 = sub_10000E624(&qword_1000AFF48);
  uint64_t v34 = swift_allocObject(v33, 72LL, 7LL);
  *(_OWORD *)(v34 + 16) = xmmword_10008D7D0;
  uint64_t v35 = File.path.getter(v34);
  *(double *)&uint64_t v36 = COERCE_DOUBLE(Path.absolutePath.getter(v35));
  double v38 = v37;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  double v176 = *(double *)&v36;
  double v177 = v38;
  uint64_t v39 = >> prefix<A>(_:)(&v176);
  uint64_t v41 = v40;
  double v42 = v38;
  uint64_t v43 = v180;
  swift_bridgeObjectRelease(*(void *)&v42);
  *(void *)(v34 + 56) = &type metadata for String;
  unint64_t v44 = sub_100012CDC();
  *(void *)(v34 + 64) = v44;
  *(void *)(v34 + 32) = v39;
  *(void *)(v34 + 40) = v41;
  uint64_t v45 = static os_log_type_t.default.getter(v44);
  os_log(_:dso:log:type:_:)("Unpacking image at path %{public}@", 34LL, 2LL, &_mh_execute_header, v32, v45, v34);

  uint64_t v46 = v175;
  swift_bridgeObjectRelease(v34);
  uint64_t v47 = type metadata accessor for File(0LL);
  uint64_t v178 = v47;
  uint64_t v179 = &protocol witness table for File;
  uint64_t v48 = sub_10001FA94(&v176);
  uint64_t v49 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16LL))(v48, a1, v47);
  uint64_t v50 = PreviewImage.Constraints.maxPixelDimension.getter(v49);
  uint64_t v51 = type metadata accessor for Image.Encoding(0LL);
  uint64_t v52 = v169;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v169, 1LL, 1LL, v51);
  Image.init(provider:maxPixelDimension:enforcedEncoding:)(&v176, v50, 0LL, v52);
  uint64_t v53 = type metadata accessor for PreviewImage(0LL);
  uint64_t v54 = *(void *)(v53 - 8);
  double v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
  uint64_t v56 = v55(v43, 1LL, 1LL, v53);
  Image.provider.getter(&v176, v56);
  uint64_t v57 = v178;
  id v58 = v179;
  sub_10000FFDC(&v176, v178);
  id v59 = v171;
  uint64_t v60 = v170;
  ImageProvider.withImageSource<A>(_:)(v170, sub_100074EB0, 0LL, v57, v46, v58);
  if (v59)
  {
    sub_100012EF8(v43, &qword_1000B1488);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v27, v172);
    return sub_100010D60(&v176);
  }

  uint64_t v154 = v53;
  uint64_t v169 = 0LL;
  uint64_t v153 = v55;
  uint64_t v171 = v27;
  uint64_t v62 = v172;
  uint64_t v64 = v167;
  uint64_t v63 = v168;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v168 + 48))(v60, 1LL, v46) == 1)
  {
    sub_100012EF8((uint64_t)v60, &qword_1000B1480);
    sub_100010D60(&v176);
    uint64_t v65 = v62;
    uint64_t v66 = v174;
    uint64_t v67 = v180;
    uint64_t v69 = (uint64_t)v165;
    uint64_t v68 = v166;
    uint64_t v70 = v154;
    goto LABEL_25;
  }

  uint64_t v71 = v164;
  (*(void (**)(char *, void *, uint64_t))(v63 + 32))(v164, v60, v46);
  uint64_t v72 = sub_100010D60(&v176);
  uint64_t v73 = ImageProperties.utTypeString.getter(v72);
  uint64_t v74 = v46;
  uint64_t v75 = v174;
  uint64_t v170 = v76;
  if (!v76)
  {
    uint64_t v84 = type metadata accessor for Explosion(0LL);
    uint64_t v85 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v84, v85, 0LL, 0LL);
    uint64_t v86 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008CD10LL,  0xD000000000000012LL,  0x800000010008BA60LL,  0xD000000000000014LL,  0x800000010008B6E0LL);
    swift_willThrow(v86);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v71, v74);
    sub_100012EF8(v180, &qword_1000B1488);
    unint64_t v87 = *(uint64_t (**)(char *, uint64_t))(v75 + 8);
    goto LABEL_13;
  }

  uint64_t v77 = v73;
  if ((PreviewImage.Constraints.isEmojiImage.getter() & 1) != 0)
  {
    if ((v77 != 0x682E63696C627570LL || v170 != (void *)0xEB00000000636965LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v77, v170, 0x682E63696C627570LL, 0xEB00000000636965LL, 0LL) & 1) == 0)
    {
      swift_bridgeObjectRelease(v170);
      uint64_t v114 = type metadata accessor for Explosion(0LL);
      uint64_t v115 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
      swift_allocError(v114, v115, 0LL, 0LL);
      uint64_t v116 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008CD10LL,  0xD000000000000012LL,  0x800000010008BA60LL,  0x636965487369LL,  0xE600000000000000LL);
      swift_willThrow(v116);
      (*(void (**)(char *, uint64_t))(v168 + 8))(v71, v175);
      sub_100012EF8(v180, &qword_1000B1488);
      return (*(uint64_t (**)(char *, uint64_t))(v174 + 8))(v171, v172);
    }

    uint64_t v78 = PreviewImage.Constraints.index.getter();
    uint64_t v79 = PreviewImage.Constraints.maxPixelDimension.getter(v78);
    double v176 = 0.0;
    double v177 = 0.0;
    __n128 v80 = v159;
    int v81 = v171;
    uint64_t v82 = v169;
    Image.emojiStrikeImage(atIndex:maxPixelDimension:alignmentInset:)(v78, &v176, (double)v79);
    uint64_t v169 = v82;
    if (v82)
    {
      __n128 v83 = swift_bridgeObjectRelease(v170);
      (*(void (**)(char *, uint64_t, __n128))(v168 + 8))(v71, v175, v83);
      sub_100012EF8(v180, &qword_1000B1488);
      return (*(uint64_t (**)(char *, uint64_t))(v174 + 8))(v81, v172);
    }

    uint64_t v66 = v174;
    uint64_t v108 = v160;
    uint64_t v65 = v172;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v160, v80, v172);
    double v109 = v176;
    double v110 = v177;
    uint64_t v111 = v162;
    (*(void (**)(char *, void, uint64_t))(v157 + 104))(v162, enum case for StickerEffect.none(_:), v158);
    uint64_t v112 = (uint64_t)v161;
    PreviewImage.init(image:frameCount:frameDuration:isScreenshot:stickerEffect:utTypeString:isMonoskiAsset:alignmentInset:)( v108,  1LL,  0LL,  1LL,  0LL,  v111,  v77,  v170,  v109,  v110,  0);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v80, v65);
    (*(void (**)(char *, uint64_t))(v168 + 8))(v71, v175);
    uint64_t v67 = v180;
    sub_100012EF8(v180, &qword_1000B1488);
    uint64_t v113 = v112;
    uint64_t v70 = v154;
    goto LABEL_23;
  }

  char v90 = sub_100068A48(v77, (uint64_t)v170);
  uint64_t v91 = v168;
  unint64_t v92 = v64;
  uint64_t v93 = v64;
  uint64_t v94 = v175;
  uint64_t v95 = (*(uint64_t (**)(char *, char *, uint64_t))(v168 + 16))(v93, v71, v175);
  if ((v90 & 1) != 0)
  {
    uint64_t v96 = ImageProperties.frameCount.getter(v95);
    unint64_t v97 = *(uint64_t (**)(char *, uint64_t))(v91 + 8);
    uint64_t v98 = v97(v92, v94);
    if (v96 > 1)
    {
      uint64_t v99 = (void *)static OS_os_log.image.getter(v98);
      uint64_t v100 = static os_log_type_t.default.getter(v99);
      os_log(_:dso:log:type:_:)( "Unpacking image with thumbnailer because it is animated",  55LL,  2LL,  &_mh_execute_header,  v99,  v100,  &_swiftEmptyArrayStorage);

      uint64_t v101 = PreviewImage.Constraints.index.getter();
      uint64_t v102 = v164;
      uint64_t v103 = ImageProperties.frameCount.getter(v101);
      uint64_t v104 = PreviewImage.Constraints.maxCount.getter();
      uint64_t v105 = v169;
      uint64_t v106 = sub_100074FAC(v101, v103, v104);
      if (!v105)
      {
        uint64_t v138 = v106;
        uint64_t v159 = (char *)v77;
        uint64_t v139 = PreviewImage.Constraints.maxPixelDimension.getter(v106);
        __int128 v140 = v156;
        uint64_t v141 = Image.thumbnailImage(maxPixelDimension:imageIndex:)(v138, (double)v139);
        uint64_t v65 = v62;
        uint64_t v169 = 0LL;
        uint64_t v142 = ImageProperties.frameCount.getter(v141);
        __n128 v143 = ImageProperties.isMonoskiAsset.getter(v142);
        char v145 = v144;
        __int128 v146 = v102;
        __int128 v147 = v140;
        uint64_t v148 = v162;
        (*(void (**)(char *, void, uint64_t, __n128))(v157 + 104))( v162,  enum case for StickerEffect.none(_:),  v158,  v143);
        char v151 = v145 & 1;
        uint64_t v149 = (uint64_t)v155;
        PreviewImage.init(image:frameCount:frameDuration:isScreenshot:stickerEffect:utTypeString:isMonoskiAsset:alignmentInset:)( v147,  v142,  0LL,  1LL,  0LL,  v148,  v159,  v170,  0.0,  0.0,  v151);
        v97(v146, v175);
        uint64_t v67 = v180;
        sub_100012EF8(v180, &qword_1000B1488);
        uint64_t v70 = v154;
        v153(v149, 0LL, 1LL, v154);
        sub_100074F64(v149, v67);
        uint64_t v66 = v174;
        goto LABEL_24;
      }

      __n128 v107 = swift_bridgeObjectRelease(v170);
      ((void (*)(char *, uint64_t, __n128))v97)(v102, v175, v107);
      sub_100012EF8(v180, &qword_1000B1488);
      unint64_t v87 = *(uint64_t (**)(char *, uint64_t))(v174 + 8);
LABEL_13:
      uint64_t v88 = v171;
      uint64_t v89 = v62;
      return v87(v88, v89);
    }

    uint64_t v159 = (char *)v77;
  }

  else
  {
    uint64_t v159 = (char *)v77;
    unint64_t v97 = *(uint64_t (**)(char *, uint64_t))(v91 + 8);
    uint64_t v98 = v97(v92, v94);
  }

  id v117 = v160;
  uint64_t v118 = v172;
  uint64_t v70 = v154;
  uint64_t v119 = v174;
  uint64_t v120 = (void *)static OS_os_log.image.getter(v98);
  uint64_t v121 = static os_log_type_t.default.getter(v120);
  os_log(_:dso:log:type:_:)( "Unpacking image with software HEIF->ASTC decoder",  48LL,  2LL,  &_mh_execute_header,  v120,  v121,  &_swiftEmptyArrayStorage);

  uint64_t v122 = (*(uint64_t (**)(char *, char *, uint64_t))(v119 + 16))(v117, v171, v118);
  uint64_t v123 = v164;
  uint64_t v173 = ImageProperties.frameCount.getter(v122);
  char v124 = ImageProperties.isScreenshot.getter();
  uint64_t v125 = ImageProperties.stickerEffect.getter();
  uint64_t v126 = v117;
  uint64_t v127 = v162;
  uint64_t v128 = StickerEffect.init(defaultingRawValue:)(v125);
  ImageProperties.isMonoskiAsset.getter(v128);
  char v150 = v129 & 1;
  uint64_t v130 = v124 & 1;
  uint64_t v65 = v62;
  uint64_t v112 = (uint64_t)v161;
  unsigned __int8 v131 = v126;
  uint64_t v66 = v174;
  PreviewImage.init(image:frameCount:frameDuration:isScreenshot:stickerEffect:utTypeString:isMonoskiAsset:alignmentInset:)( v131,  v173,  0LL,  1LL,  v130,  v127,  v159,  v170,  0.0,  0.0,  v150);
  v97(v123, v175);
  uint64_t v67 = v180;
  sub_100012EF8(v180, &qword_1000B1488);
  uint64_t v113 = v112;
LABEL_23:
  v153(v113, 0LL, 1LL, v70);
  sub_100074F64(v112, v67);
LABEL_24:
  uint64_t v69 = (uint64_t)v165;
  uint64_t v68 = v166;
LABEL_25:
  sub_100074F1C(v67, v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v69, 1LL, v70) == 1)
  {
    uint64_t v132 = sub_100012EF8(v69, &qword_1000B1488);
    uint64_t v133 = (void *)static OS_os_log.image.getter(v132);
    uint64_t v134 = static os_log_type_t.default.getter(v133);
    os_log(_:dso:log:type:_:)( "Failed to generate astc image",  29LL,  2LL,  &_mh_execute_header,  v133,  v134,  &_swiftEmptyArrayStorage);

    uint64_t v135 = type metadata accessor for Explosion(0LL);
    uint64_t v136 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v135, v136, 0LL, 0LL);
    uint64_t v137 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008CD10LL,  0xD000000000000013LL,  0x800000010008CD40LL,  0LL,  0LL);
    swift_willThrow(v137);
    sub_100012EF8(v67, &qword_1000B1488);
    unint64_t v87 = *(uint64_t (**)(char *, uint64_t))(v66 + 8);
    uint64_t v88 = v171;
    uint64_t v89 = v65;
    return v87(v88, v89);
  }

  sub_100012EF8(v67, &qword_1000B1488);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v171, v65);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v68, v69, v70);
}

uint64_t sub_100074EB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ImageProperties(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 0LL, 1LL, v2);
}

uint64_t sub_100074F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10007404C(a1, a2, a3);
}

uint64_t sub_100074F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100074F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100074FAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a3)
  {
    uint64_t v4 = type metadata accessor for Explosion(0LL);
    uint64_t v5 = sub_10000E9D8( (unint64_t *)&qword_1000AFF20,  (uint64_t (*)(uint64_t))&type metadata accessor for Explosion,  (uint64_t)&protocol conformance descriptor for Explosion);
    swift_allocError(v4, v5, 0LL, 0LL);
    uint64_t v6 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000020LL,  0x800000010008CD10LL,  0xD000000000000010LL,  0x800000010008CDE0LL,  0x4977656976657270LL,  0xEC0000007865646ELL);
    return swift_willThrow(v6);
  }

  else if (a3 < a2)
  {
    double v3 = (double)a2 / (double)a3 * (double)result;
    if ((~*(void *)&v3 & 0x7FF0000000000000LL) != 0)
    {
      if (v3 > -9.22337204e18)
      {
        if (v3 < 9.22337204e18) {
          return (uint64_t)v3;
        }
        goto LABEL_11;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_11:
    __break(1u);
  }

  return result;
}

ValueMetadata *type metadata accessor for MarkUnreadRequestUnpacker()
{
  return &type metadata for MarkUnreadRequestUnpacker;
}

unint64_t sub_1000750EC(uint64_t a1)
{
  unint64_t result = sub_10000E664();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_100075110()
{
  return sub_10000E9D8( &qword_1000B1490,  (uint64_t (*)(uint64_t))&type metadata accessor for MarkUnreadRequest,  (uint64_t)&protocol conformance descriptor for MarkUnreadRequest);
}

uint64_t sub_10007513C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&DeliveryReceipt.init(with:), a3);
}

uint64_t sub_100075158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&PlayedReceipt.init(with:), a3);
}

uint64_t sub_100075174@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a3;
  v18[1] = a4;
  uint64_t v7 = type metadata accessor for Metadata(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = PropertyListDecoder.init()();
  uint64_t v16 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v10, a1, a2, v10, v16);
  uint64_t result = swift_release(v15);
  if (!v4)
  {
    TopLevelDictionary.metadata.getter(result);
    v19(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  return result;
}

uint64_t sub_1000752DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&ReadReceipt.init(with:), a3);
}

uint64_t sub_1000752F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&DeliveredQuietlyReceipt.init(with:), a3);
}

uint64_t sub_100075314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&RecoverJunkCommand.init(with:), a3);
}

uint64_t sub_100075330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&NotifyRecipientCommand.init(with:), a3);
}

uint64_t sub_10007534C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100075174(a1, a2, (void (*)(char *))&MarkUnreadRequest.init(with:), a3);
}

uint64_t destroy for SMSFilteringSettingsDictionary(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t initializeWithCopy for SMSFilteringSettingsDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for SMSFilteringSettingsDictionary(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  return a1;
}

uint64_t assignWithTake for SMSFilteringSettingsDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SMSFilteringSettingsDictionary(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SMSFilteringSettingsDictionary( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SMSFilteringSettingsDictionary()
{
  return &type metadata for SMSFilteringSettingsDictionary;
}

uint64_t sub_100075510(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v19 = a5;
  uint64_t v18 = a4;
  uint64_t v9 = sub_10000E624(&qword_1000B14A8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_10000FFDC(a1, v14);
  unint64_t v15 = sub_100075A80();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SMSFilteringSettingsDictionary.CodingKeys,  &type metadata for SMSFilteringSettingsDictionary.CodingKeys,  v15,  v14,  v13);
  char v21 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v21, v9);
  if (!v5)
  {
    char v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19 & 1, &v20, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100075644@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000758F8(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v5;
    *(void *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7 & 1;
  }

  return result;
}

uint64_t sub_100075678(void *a1)
{
  return sub_100075510(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100075698(char *a1, char *a2)
{
  return sub_10003FC90(*a1, *a2);
}

Swift::Int sub_1000756A4()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    uint64_t v2 = 7299942LL;
  }
  else {
    uint64_t v2 = 7234918LL;
  }
  String.hash(into:)(v4, v2, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_100075708(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 7299942LL;
  }
  else {
    uint64_t v2 = 7234918LL;
  }
  String.hash(into:)(a1, v2, 0xE300000000000000LL);
  return swift_bridgeObjectRelease(0xE300000000000000LL);
}

Swift::Int sub_100075740(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    uint64_t v3 = 7299942LL;
  }
  else {
    uint64_t v3 = 7234918LL;
  }
  String.hash(into:)(v5, v3, 0xE300000000000000LL);
  swift_bridgeObjectRelease(0xE300000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1000757A0@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  int v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3FD8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_1000757FC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 7234918LL;
  if (*v1) {
    uint64_t v2 = 7299942LL;
  }
  *a1 = v2;
  a1[1] = 0xE300000000000000LL;
}

uint64_t sub_100075824()
{
  if (*v0) {
    return 7299942LL;
  }
  else {
    return 7234918LL;
  }
}

uint64_t sub_100075848@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A3FD8, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1000758A8(uint64_t a1)
{
  unint64_t v2 = sub_100075A80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000758D0(uint64_t a1)
{
  unint64_t v2 = sub_100075A80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000758F8(void *a1)
{
  uint64_t v3 = sub_10000E624(&qword_1000B1498);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10000FFDC(a1, v7);
  unint64_t v9 = sub_100075A80();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SMSFilteringSettingsDictionary.CodingKeys,  &type metadata for SMSFilteringSettingsDictionary.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    sub_100010D60(a1);
    swift_bridgeObjectRelease(0LL);
  }

  else
  {
    char v14 = 0;
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v14, v3);
    char v13 = 1;
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v13, v3, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100010D60(a1);
  }

  return v8;
}

unint64_t sub_100075A80()
{
  unint64_t result = qword_1000B14A0;
  if (!qword_1000B14A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091FAC, &type metadata for SMSFilteringSettingsDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B14A0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SMSFilteringSettingsDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100075B10 + 4 * byte_100091E35[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100075B44 + 4 * byte_100091E30[v4]))();
}

uint64_t sub_100075B44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100075B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100075B54LL);
  }
  return result;
}

uint64_t sub_100075B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100075B68LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100075B6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100075B74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SMSFilteringSettingsDictionary.CodingKeys()
{
  return &type metadata for SMSFilteringSettingsDictionary.CodingKeys;
}

unint64_t sub_100075B94()
{
  unint64_t result = qword_1000B14B0;
  if (!qword_1000B14B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091F84, &type metadata for SMSFilteringSettingsDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B14B0);
  }

  return result;
}

unint64_t sub_100075BDC()
{
  unint64_t result = qword_1000B14B8;
  if (!qword_1000B14B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091EBC, &type metadata for SMSFilteringSettingsDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B14B8);
  }

  return result;
}

unint64_t sub_100075C24()
{
  unint64_t result = qword_1000B14C0;
  if (!qword_1000B14C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091EE4, &type metadata for SMSFilteringSettingsDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B14C0);
  }

  return result;
}

ValueMetadata *type metadata accessor for MediaMetadataUnpacker()
{
  return &type metadata for MediaMetadataUnpacker;
}

unint64_t sub_100075C7C()
{
  unint64_t result = qword_1000B14C8;
  if (!qword_1000B14C8)
  {
    uint64_t v1 = type metadata accessor for MediaMetadata(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for MediaMetadata, v1);
    atomic_store(result, (unint64_t *)&qword_1000B14C8);
  }

  return result;
}

uint64_t sub_100075CC4()
{
  uint64_t v0 = sub_10000E624(&qword_1000B14D0);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for MediaMetadata.LargeImageContextualInfo(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  return MediaMetadata.init(largeImageContextualInfo:)(v2);
}

ValueMetadata *type metadata accessor for SMSFilteringSettingsMessageUnpacker()
{
  return &type metadata for SMSFilteringSettingsMessageUnpacker;
}

unint64_t sub_100075D6C(uint64_t a1)
{
  unint64_t result = sub_10000E994();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_100075D90()
{
  return sub_10000E9D8( &qword_1000B14D8,  (uint64_t (*)(uint64_t))&type metadata accessor for SMSFilteringSettingsMessage,  (uint64_t)&protocol conformance descriptor for SMSFilteringSettingsMessage);
}

uint64_t sub_100075DBC@<X0>(uint64_t a1@<X8>)
{
  v21[11] = a1;
  uint64_t v1 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v1);
  uint64_t v22 = type metadata accessor for DecodingError(0LL);
  v21[12] = *(void *)(v22 - 8);
  uint64_t v2 = __chkstk_darwin(v22);
  uint64_t v3 = __chkstk_darwin(v2);
  v21[14] = (char *)v21 - v4;
  __chkstk_darwin(v3);
  uint64_t v5 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for Explosion(0LL);
  _BYTE v21[16] = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  v21[15] = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = TopLevelDictionary.decryptedData.getter(v8);
  if (v11 >> 60 != 15)
  {
    v21[8] = v7;
    v21[9] = v10;
    v21[10] = v11;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v18 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
    uint64_t v20 = v19;

    v21[17] = v20;
    __asm { BR              X10 }
  }

  sub_100012C44();
  uint64_t v12 = (void *)static OS_os_log.smsFilteringSettingsMessageUnpacker.getter();
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)( "Missing encrypted data for SMSFilteringSettingsMessage",  54LL,  2LL,  &_mh_execute_header,  v12,  v13,  &_swiftEmptyArrayStorage);

  unint64_t v14 = sub_1000769A4();
  uint64_t v15 = swift_allocError( &type metadata for SMSFilteringSettingsMessageUnpacker.EncryptedMessageMissingData,  v14,  0LL,  0LL);
  return swift_willThrow(v15);
}

uint64_t sub_100076884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v6 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v12 = PropertyListDecoder.init()(v11);
  uint64_t v13 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v13);
  uint64_t result = swift_release(v12);
  if (!v3)
  {
    sub_100075DBC(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return result;
}

unint64_t sub_1000769A4()
{
  unint64_t result = qword_1000B14E0;
  if (!qword_1000B14E0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1000920EC,  &type metadata for SMSFilteringSettingsMessageUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000B14E0);
  }

  return result;
}

unint64_t sub_1000769E8()
{
  unint64_t result = qword_1000B14E8;
  if (!qword_1000B14E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100091E88, &type metadata for SMSFilteringSettingsDictionary);
    atomic_store(result, (unint64_t *)&qword_1000B14E8);
  }

  return result;
}

ValueMetadata *type metadata accessor for SMSFilteringSettingsMessageUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for SMSFilteringSettingsMessageUnpacker.EncryptedMessageMissingData;
}

uint64_t sub_100076A3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t v4 = type metadata accessor for MessageContent(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_10000E624(&qword_1000AFF08);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v45 - v11;
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_10000FFDC(a1, v15);
  uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  uint64_t v51 = v17;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_10000FFDC(a1, v18);
  uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
  uint64_t v55 = v20;
  id v21 = [(id)objc_opt_self(MBDXMLParser) sharedInstance];
  uint64_t v23 = a1[3];
  uint64_t v22 = a1[4];
  sub_10000FFDC(a1, v23);
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v23, v22);
  uint64_t v25 = v24;
  sub_100012C98((uint64_t)a1, (uint64_t)v52);
  if (v25)
  {
    sub_100010D60(v52);
  }

  else
  {
    uint64_t v26 = v53;
    uint64_t v27 = v54;
    sub_10000FFDC(v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v27 + 24))(v26, v27);
    uint64_t v25 = v28;
    sub_100010D60(v52);
    if (!v25)
    {
      uint64_t v36 = a1[3];
      uint64_t v37 = a1[4];
      sub_10000FFDC(a1, v36);
      (*(void (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
      swift_bridgeObjectRelease(v38);
      uint64_t v39 = type metadata accessor for _AttributedString(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v14, 1LL, 1LL, v39);
      goto LABEL_10;
    }
  }

  id v29 = objc_allocWithZone((Class)&OBJC_CLASS___MBDMessageToSuperParserContext);
  NSString v30 = String._bridgeToObjectiveC()();
  id v31 = objc_msgSend(v29, "initWithContent:", v30, swift_bridgeObjectRelease(v25).n128_f64[0]);

  if (![v21 parseContext:v31])
  {
    swift_bridgeObjectRelease(v51);
    swift_bridgeObjectRelease(v55);
    uint64_t v32 = type metadata accessor for Explosion(0LL);
    unint64_t v33 = sub_10001295C();
    swift_allocError(v32, v33, 0LL, 0LL);
    uint64_t v34 = Explosion.init(domain:errorType:keyPath:)( 0xD000000000000027LL,  0x800000010008CF60LL,  0xD000000000000011LL,  0x800000010008CF90LL,  0LL,  0LL);
    swift_willThrow(v34);

    return sub_100010D60(a1);
  }

  _AttributedString.init(fromNSAttributedString:)( [v31 body],  (uint64_t)v12);
  if (v2)
  {

    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v51);
    return sub_100010D60(a1);
  }

  uint64_t v35 = type metadata accessor for _AttributedString(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v12, 0LL, 1LL, v35);
  sub_100077B34((uint64_t)v12, (uint64_t)v14);
LABEL_10:
  uint64_t v40 = v50;
  uint64_t v41 = v51;
  uint64_t v43 = v48;
  uint64_t v42 = v49;
  sub_100077AEC((uint64_t)v14, (uint64_t)v9);
  MessageContent.init(with:plainTextSubject:content:)(v43, v55, v42, v41, v9);
  sub_10001FAD0((uint64_t)v14);

  if (!v2) {
    (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v40, v46);
  }
  return sub_100010D60(a1);
}

void __swiftcall MessageEditedPartDictionary.init(xhtmlBody:)( MessagesBlastDoorService::MessageEditedPartDictionary *__return_ptr retstr, Swift::String_optional xhtmlBody)
{
  retstr->xhtmlBody = xhtmlBody;
  retstr->plainTextSubject = 0u;
  retstr->plainTextBody = 0u;
  retstr->auxXHTMLBody = 0u;
}

uint64_t MessageContent.init(messageEditedPartDictionary:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  v8[3] = &type metadata for MessageEditedPartDictionary;
  void v8[4] = &off_1000A8410;
  uint64_t v4 = (_OWORD *)swift_allocObject(&unk_1000A83D0, 80LL, 7LL);
  v8[0] = v4;
  __int128 v5 = a1[1];
  v4[1] = *a1;
  v4[2] = v5;
  __int128 v6 = a1[3];
  v4[3] = a1[2];
  v4[4] = v6;
  return sub_100076A3C(v8, a2);
}

uint64_t sub_100076EEC()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100076F28()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100076F5C + 4 * byte_100092130[*v0]))( 0x646F426C6D746878LL,  0xE900000000000079LL);
}

unint64_t sub_100076F5C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_100076F78()
{
  return 0x7865546E69616C70LL;
}

uint64_t sub_100076F9C()
{
  return 0x4C4D544858787561LL;
}

uint64_t sub_100076FBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000772DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100076FE0(uint64_t a1)
{
  unint64_t v2 = sub_100077194();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100077008(uint64_t a1)
{
  unint64_t v2 = sub_100077194();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessageEditedPartDictionary.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B14F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100077194();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MessageEditedPartDictionary.CodingKeys,  &type metadata for MessageEditedPartDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v25 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v25, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v24 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v24, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100077194()
{
  unint64_t result = qword_1000B14F8;
  if (!qword_1000B14F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000922C0, &type metadata for MessageEditedPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B14F8);
  }

  return result;
}

double MessageEditedPartDictionary.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t sub_100077218(void *a1)
{
  return MessageEditedPartDictionary.encode(to:)(a1);
}

uint64_t sub_10007722C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100077258()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t sub_100077284()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_1000772B0()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain(*(void *)(v0 + 56));
  return v1;
}

uint64_t sub_1000772DC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x646F426C6D746878LL && a2 == 0xE900000000000079LL)
  {
    unint64_t v5 = 0xE900000000000079LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F426C6D746878LL, 0xE900000000000079LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010008CF40LL;
    if (a2 == 0x800000010008CF40LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010008CF40LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0x7865546E69616C70LL && a2 == 0xED000079646F4274LL)
  {
    unint64_t v8 = 0xED000079646F4274LL;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865546E69616C70LL, 0xED000079646F4274LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_19;
  }

  if (a1 == 0x4C4D544858787561LL && a2 == 0xEC00000079646F42LL)
  {
    swift_bridgeObjectRelease(0xEC00000079646F42LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C4D544858787561LL, 0xEC00000079646F42LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

void sub_1000774D4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B1518);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100077194();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MessageEditedPartDictionary.CodingKeys,  &type metadata for MessageEditedPartDictionary.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
  }

  else
  {
    char v34 = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
    uint64_t v14 = v13;
    uint64_t v30 = v12;
    char v33 = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
    uint64_t v17 = v16;
    uint64_t v28 = v15;
    id v29 = a2;
    char v32 = 2;
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v5);
    uint64_t v20 = v19;
    uint64_t v27 = v18;
    char v31 = 3;
    swift_bridgeObjectRetain(v19);
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
    uint64_t v23 = v22;
    char v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v25 = v21;
    v24(v8, v5);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease(0LL);
    sub_100010D60(a1);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v14);
    uint64_t v26 = v29;
    *id v29 = v30;
    v26[1] = v14;
    _OWORD v26[2] = v28;
    v26[3] = v17;
    v26[4] = v27;
    v26[5] = v20;
    v26[6] = v25;
    v26[7] = v23;
  }

uint64_t destroy for MessageEditedPartDictionary(void *a1)
{
  return swift_bridgeObjectRelease(a1[7]);
}

void *initializeWithCopy for MessageEditedPartDictionary(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for MessageEditedPartDictionary(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for MessageEditedPartDictionary(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[7];
  uint64_t v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

ValueMetadata *type metadata accessor for MessageEditedPartDictionary()
{
  return &type metadata for MessageEditedPartDictionary;
}

uint64_t storeEnumTagSinglePayload for MessageEditedPartDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100077994 + 4 * byte_100092139[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000779C8 + 4 * byte_100092134[v4]))();
}

uint64_t sub_1000779C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000779D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000779D8LL);
  }
  return result;
}

uint64_t sub_1000779E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000779ECLL);
  }
  *(_BYTE *)double result = a2 + 3;
  return result;
}

uint64_t sub_1000779F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000779F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageEditedPartDictionary.CodingKeys()
{
  return &type metadata for MessageEditedPartDictionary.CodingKeys;
}

unint64_t sub_100077A18()
{
  unint64_t result = qword_1000B1500;
  if (!qword_1000B1500)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092298, &type metadata for MessageEditedPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1500);
  }

  return result;
}

unint64_t sub_100077A60()
{
  unint64_t result = qword_1000B1508;
  if (!qword_1000B1508)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092208, &type metadata for MessageEditedPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1508);
  }

  return result;
}

unint64_t sub_100077AA8()
{
  unint64_t result = qword_1000B1510;
  if (!qword_1000B1510)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092230, &type metadata for MessageEditedPartDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1510);
  }

  return result;
}

uint64_t sub_100077AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000AFF08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000AFF08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077B80()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t sub_100077BAC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t sub_100077BD8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain(*(void *)(v0 + 48));
  return v1;
}

uint64_t sub_100077C04()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(*(void *)(v0 + 64));
  return v1;
}

void MessageDictionary.init(from:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B0118);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v198 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v8);
  uint64_t v10 = (uint64_t *)((char *)&v198 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v214 = sub_10000E624(&qword_1000B1520);
  uint64_t v11 = *(void *)(v214 - 8);
  __chkstk_darwin(v214);
  uint64_t v13 = (char *)&v198 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = (int *)type metadata accessor for MessageDictionary(0LL);
  __chkstk_darwin(v216);
  uint64_t v217 = (uint64_t *)((char *)&v198 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v213 = (uint64_t)a1;
  sub_10000FFDC(a1, v15);
  unint64_t v17 = sub_10002F554();
  uint64_t v212 = (uint64_t)v13;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MessageDictionary.CodingKeys,  &type metadata for MessageDictionary.CodingKeys,  v17,  v15,  v16);
  uint64_t v215 = v2;
  if (v2)
  {
    LODWORD(v214) = 0;
    unint64_t v26 = 0LL;
    goto LABEL_4;
  }

  uint64_t v18 = v7;
  uint64_t v19 = v11;
  LOBYTE(v218[0]) = 0;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v22 = v216;
  uint64_t v21 = v217;
  uint64_t v23 = (char *)v217 + v216[21];
  *(void *)uint64_t v23 = v20;
  v23[8] = v24 & 1;
  LOBYTE(v218[0]) = 1;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  char v34 = (void *)((char *)v21 + v22[22]);
  uint64_t *v34 = v25;
  v34[1] = v35;
  uint64_t v36 = type metadata accessor for UUID(0LL);
  LOBYTE(v218[0]) = 2;
  uint64_t v37 = sub_10000E9D8( &qword_1000B13F8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, v36, v218, v214, v36, v37);
  sub_100012DC8((uint64_t)v10, (uint64_t)v21 + v22[18], &qword_1000B0000);
  LOBYTE(v218[0]) = 3;
  uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v39 = (void *)((char *)v21 + v22[23]);
  uint64_t *v39 = v38;
  v39[1] = v40;
  LOBYTE(v218[0]) = 4;
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v42 = (void *)((char *)v21 + v22[24]);
  uint64_t *v42 = v41;
  v42[1] = v43;
  LOBYTE(v218[0]) = 5;
  uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214, v44);
  uint64_t v46 = (char *)v21 + v22[25];
  *(void *)uint64_t v46 = v45;
  v46[8] = v47 & 1;
  uint64_t v48 = sub_10000E624(&qword_1000AFED0);
  char v222 = 6;
  uint64_t v49 = sub_100010D80( &qword_1000AFF00,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v218, v48, &v222, v214, v48, v49);
  *uint64_t v21 = *(void *)&v218[0];
  LOBYTE(v218[0]) = 7;
  uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = 0LL;
  uint64_t v52 = v217;
  v217[1] = v50;
  v52[2] = v51;
  LOBYTE(v218[0]) = 8;
  uint64_t v53 = v215;
  uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v53;
  if (v53)
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
    LODWORD(v214) = 0;
    uint64_t v56 = -28LL;
LABEL_89:
    unint64_t v26 = (v56 & 0xFFFFFFFFFFFFLL | 0x3F000000000000LL) + 1851423;
    goto LABEL_4;
  }

  uint64_t v57 = v217;
  v217[3] = v54;
  v57[4] = v55;
  LOBYTE(v218[0]) = 9;
  uint64_t v58 = v215;
  uint64_t v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v58;
  if (v58)
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
    LODWORD(v214) = 0;
    uint64_t v56 = -24LL;
    goto LABEL_89;
  }

  unint64_t v61 = v217;
  v217[5] = v59;
  v61[6] = v60;
  LOBYTE(v218[0]) = 10;
  uint64_t v62 = v215;
  uint64_t v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v62;
  if (v62)
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
    LODWORD(v214) = 0;
    unint64_t v26 = 0x400000001C400FLL;
    goto LABEL_4;
  }

  uint64_t v65 = v217;
  v217[7] = v63;
  v65[8] = v64;
  LOBYTE(v218[0]) = 11;
  uint64_t v66 = v215;
  char v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v66;
  if (v66) {
    goto LABEL_98;
  }
  *((_BYTE *)v217 + 72) = v67;
  LOBYTE(v218[0]) = 12;
  uint64_t v68 = v215;
  char v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v68;
  if (v68) {
    goto LABEL_98;
  }
  *((_BYTE *)v217 + 73) = v69;
  LOBYTE(v218[0]) = 13;
  uint64_t v70 = v215;
  char v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v70;
  if (v70) {
    goto LABEL_98;
  }
  *((_BYTE *)v217 + 96) = v71;
  LOBYTE(v218[0]) = 14;
  uint64_t v72 = v215;
  char v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v72;
  if (v72) {
    goto LABEL_98;
  }
  *((_BYTE *)v217 + 9_Block_object_dispose(va, 8) = v73;
  LOBYTE(v218[0]) = 15;
  uint64_t v74 = v215;
  char v75 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v74;
  if (v74
    || (*((_BYTE *)v217 + 99) = v75,
        char v222 = 16,
        unint64_t v76 = sub_10002FFD4(),
        uint64_t v77 = v215,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76),  (uint64_t v215 = v77) != 0))
  {
LABEL_98:
    unsigned __int16 v78 = 16415;
LABEL_83:
    unint64_t v26 = v78 | 0x1C0000u;
LABEL_84:
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
    LODWORD(v214) = 0;
    goto LABEL_4;
  }

  *((_OWORD *)v217 + 5) = v218[0];
  LOBYTE(v218[0]) = 17;
  uint64_t v79 = v215;
  char v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v79;
  if (v79) {
    goto LABEL_102;
  }
  *((_BYTE *)v217 + 97) = v80;
  LOBYTE(v218[0]) = 18;
  uint64_t v81 = v215;
  uint64_t v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
  uint64_t v215 = v81;
  if (v81
    || (uint64_t v84 = v217,
        v217[13] = v82,
        *((_BYTE *)v84 + 112) = v83 & 1,
        LOBYTE(v218[0]) = 19,
        uint64_t v85 = v215,
        uint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214),
        (uint64_t v215 = v85) != 0))
  {
LABEL_102:
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
    LODWORD(v214) = 0;
    unint64_t v26 = 1851551LL;
  }

  else
  {
    uint64_t v88 = v217;
    v217[15] = v86;
    v88[16] = v87;
    LOBYTE(v218[0]) = 22;
    uint64_t v89 = v215;
    uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
    uint64_t v215 = v89;
    if (v89)
    {
      unsigned __int16 v78 = 24735;
      goto LABEL_83;
    }

    unint64_t v92 = (void *)((char *)v217 + v216[26]);
    *unint64_t v92 = v90;
    v92[1] = v91;
    char v222 = 23;
    uint64_t v93 = v215;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
    uint64_t v215 = v93;
    if (v93)
    {
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
      LODWORD(v214) = 0;
      unint64_t v26 = 6054047LL;
    }

    else
    {
      *(_OWORD *)((char *)v217 + v216[27]) = v218[0];
      char v222 = 24;
      unint64_t v94 = sub_10007A5D0();
      uint64_t v95 = v215;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for BalloonPluginPayloadAttachment,  &v222,  v214,  &type metadata for BalloonPluginPayloadAttachment,  v94);
      uint64_t v215 = v95;
      if (v95)
      {
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
        LODWORD(v214) = 0;
        unint64_t v26 = 14442655LL;
      }

      else
      {
        int v96 = v219;
        char v97 = v220;
        uint64_t v98 = (char *)v217 + v216[28];
        __int128 v99 = v218[1];
        *(_OWORD *)uint64_t v98 = v218[0];
        *((_OWORD *)v98 + 1) = v99;
        __int128 v100 = v218[3];
        *((_OWORD *)v98 + 2) = v218[2];
        *((_OWORD *)v98 + 3) = v100;
        v98[68] = v97;
        *((_DWORD *)v98 + 16) = v96;
        LOBYTE(v218[0]) = 25;
        uint64_t v101 = v215;
        uint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
        uint64_t v215 = v101;
        if (v101)
        {
          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
          LODWORD(v214) = 0;
          unint64_t v26 = 31219871LL;
        }

        else
        {
          uint64_t v104 = (void *)((char *)v217 + v216[31]);
          *uint64_t v104 = v102;
          v104[1] = v103;
          LOBYTE(v218[0]) = 26;
          uint64_t v105 = v215;
          uint64_t v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
          uint64_t v215 = v105;
          if (v105)
          {
            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
            LODWORD(v214) = 0;
            unint64_t v26 = 165437599LL;
          }

          else
          {
            uint64_t v108 = (void *)((char *)v217 + v216[32]);
            *uint64_t v108 = v106;
            v108[1] = v107;
            LOBYTE(v218[0]) = 27;
            uint64_t v109 = v215;
            uint64_t v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
            uint64_t v215 = v109;
            if (v109)
            {
              (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
              LODWORD(v214) = 0;
              unint64_t v26 = 433873055LL;
            }

            else
            {
              uint64_t v112 = (void *)((char *)v217 + v216[33]);
              *uint64_t v112 = v110;
              v112[1] = v111;
              char v222 = 28;
              uint64_t v113 = v215;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
              uint64_t v215 = v113;
              if (v113)
              {
                (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                LODWORD(v214) = 0;
                unint64_t v26 = 970743967LL;
              }

              else
              {
                *(_OWORD *)((char *)v217 + v216[30]) = v218[0];
                char v222 = 29;
                uint64_t v114 = v215;
                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                uint64_t v215 = v114;
                if (v114)
                {
                  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                  LODWORD(v214) = 0;
                  unint64_t v26 = 1037852831LL;
                }

                else
                {
                  *(_OWORD *)((char *)v217 + v216[34]) = v218[0];
                  char v222 = 30;
                  uint64_t v115 = v215;
                  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                  uint64_t v215 = v115;
                  if (v115)
                  {
                    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                    LODWORD(v214) = 0;
                    unint64_t v26 = 2111594655LL;
                  }

                  else
                  {
                    *(_OWORD *)((char *)v217 + v216[29]) = v218[0];
                    char v222 = 31;
                    uint64_t v116 = v215;
                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                    uint64_t v215 = v116;
                    if (v116)
                    {
                      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                      LODWORD(v214) = 0;
                      unint64_t v26 = 2145149087LL;
                    }

                    else
                    {
                      *(_OWORD *)((char *)v217 + v216[35]) = v218[0];
                      LOBYTE(v218[0]) = 32;
                      uint64_t v117 = v215;
                      uint64_t v118 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                      uint64_t v215 = v117;
                      if (v117)
                      {
                        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                        LODWORD(v214) = 0;
                        unint64_t v26 = 4292632735LL;
                      }

                      else
                      {
                        uint64_t v120 = (void *)((char *)v217 + v216[36]);
                        *uint64_t v120 = v118;
                        v120[1] = v119;
                        char v222 = 33;
                        uint64_t v121 = v215;
                        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                        uint64_t v215 = v121;
                        if (v121)
                        {
                          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                          LODWORD(v214) = 0;
                          unint64_t v26 = 0x1FFDC609FLL;
                        }

                        else
                        {
                          *(_OWORD *)((char *)v217 + v216[37]) = v218[0];
                          LOBYTE(v218[0]) = 20;
                          uint64_t v122 = v215;
                          uint64_t v123 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                          uint64_t v215 = v122;
                          if (v122) {
                            goto LABEL_129;
                          }
                          uint64_t v125 = (char *)v217 + v216[19];
                          *(void *)uint64_t v125 = v123;
                          v125[8] = v124 & 1;
                          uint64_t v126 = type metadata accessor for Date(0LL);
                          LOBYTE(v218[0]) = 21;
                          uint64_t v127 = sub_10000E9D8( &qword_1000B0DC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                          uint64_t v128 = v215;
                          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, v126, v218, v214, v126, v127);
                          uint64_t v215 = v128;
                          if (v128)
                          {
LABEL_129:
                            unint64_t v26 = 0x3FFDC609FLL;
                            goto LABEL_84;
                          }

                          sub_100012DC8((uint64_t)v18, (uint64_t)v217 + v216[20], &qword_1000B0118);
                          LOBYTE(v218[0]) = 36;
                          uint64_t v129 = v215;
                          uint64_t v130 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                          uint64_t v215 = v129;
                          if (v129)
                          {
                            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                            LODWORD(v214) = 0;
                            unint64_t v26 = 0x3FFDD609FLL;
                          }

                          else
                          {
                            uint64_t v132 = (void *)((char *)v217 + v216[40]);
                            *uint64_t v132 = v130;
                            v132[1] = v131;
                            LOBYTE(v218[0]) = 35;
                            uint64_t v133 = v215;
                            uint64_t v134 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                            uint64_t v215 = v133;
                            if (v133
                              || (uint64_t v136 = (char *)v217 + v216[39],
                                  *(void *)uint64_t v136 = v134,
                                  v136[8] = v135 & 1,
                                  LOBYTE(v218[0]) = 34,
                                  uint64_t v137 = v215,
                                  uint64_t v138 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214),
                                  (uint64_t v215 = v137) != 0))
                            {
                              unint64_t v26 = 0x13FFDD609FLL;
                              goto LABEL_84;
                            }

                            __int128 v140 = (void *)((char *)v217 + v216[38]);
                            *__int128 v140 = v138;
                            v140[1] = v139;
                            char v222 = 38;
                            uint64_t v141 = v215;
                            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                            uint64_t v215 = v141;
                            if (v141)
                            {
                              (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                              LODWORD(v214) = 0;
                              unint64_t v26 = 0x17FFDD609FLL;
                            }

                            else
                            {
                              *(_OWORD *)((char *)v217 + v216[42]) = v218[0];
                              char v222 = 37;
                              uint64_t v142 = v215;
                              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                              uint64_t v215 = v142;
                              if (v142)
                              {
                                (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                LODWORD(v214) = 0;
                                unint64_t v26 = 0x57FFDD609FLL;
                              }

                              else
                              {
                                *(_OWORD *)((char *)v217 + v216[41]) = v218[0];
                                char v222 = 39;
                                uint64_t v143 = v215;
                                KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  &type metadata for Data,  &v222,  v214,  &type metadata for Data,  v76);
                                uint64_t v215 = v143;
                                if (v143)
                                {
                                  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                  LODWORD(v214) = 0;
                                  unint64_t v26 = 0x77FFDD609FLL;
                                }

                                else
                                {
                                  *(_OWORD *)((char *)v217 + v216[43]) = v218[0];
                                  LOBYTE(v218[0]) = 40;
                                  uint64_t v144 = v215;
                                  uint64_t v145 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                  uint64_t v215 = v144;
                                  if (v144)
                                  {
                                    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                    LODWORD(v214) = 0;
                                    unint64_t v26 = 0xF7FFDD609FLL;
                                  }

                                  else
                                  {
                                    __int128 v147 = (void *)((char *)v217 + v216[44]);
                                    *__int128 v147 = v145;
                                    v147[1] = v146;
                                    LOBYTE(v218[0]) = 41;
                                    uint64_t v148 = v215;
                                    uint64_t v149 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                    uint64_t v215 = v148;
                                    if (v148)
                                    {
                                      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                      LODWORD(v214) = 0;
                                      unint64_t v26 = 0x1F7FFDD609FLL;
                                    }

                                    else
                                    {
                                      char v151 = (void *)((char *)v217 + v216[45]);
                                      *char v151 = v149;
                                      v151[1] = v150;
                                      LOBYTE(v218[0]) = 42;
                                      uint64_t v152 = v215;
                                      uint64_t v153 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                      uint64_t v215 = v152;
                                      if (v152)
                                      {
                                        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                        LODWORD(v214) = 0;
                                        unint64_t v26 = 0x3F7FFDD609FLL;
                                      }

                                      else
                                      {
                                        uint64_t v155 = (void *)((char *)v217 + v216[46]);
                                        *uint64_t v155 = v153;
                                        v155[1] = v154;
                                        LOBYTE(v218[0]) = 43;
                                        uint64_t v156 = v215;
                                        uint64_t v157 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                        uint64_t v215 = v156;
                                        if (v156)
                                        {
                                          (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                          LODWORD(v214) = 0;
                                          unint64_t v26 = 0x7F7FFDD609FLL;
                                        }

                                        else
                                        {
                                          uint64_t v159 = (void *)((char *)v217 + v216[47]);
                                          *uint64_t v159 = v157;
                                          v159[1] = v158;
                                          LOBYTE(v218[0]) = 44;
                                          uint64_t v160 = v215;
                                          uint64_t v161 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                          uint64_t v215 = v160;
                                          if (v160)
                                          {
                                            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                            LODWORD(v214) = 0;
                                            unint64_t v26 = 0xFF7FFDD609FLL;
                                          }

                                          else
                                          {
                                            unint64_t v26 = 0x1FF7FFDD609FLL;
                                            unint64_t v163 = (void *)((char *)v217 + v216[48]);
                                            *unint64_t v163 = v161;
                                            v163[1] = v162;
                                            LOBYTE(v218[0]) = 45;
                                            uint64_t v164 = v215;
                                            char v165 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                            uint64_t v215 = v164;
                                            if (v164) {
                                              goto LABEL_84;
                                            }
                                            *((_BYTE *)v217 + v216[49]) = v165;
                                            LOBYTE(v218[0]) = 46;
                                            uint64_t v166 = v215;
                                            uint64_t v167 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                            uint64_t v215 = v166;
                                            if (v166) {
                                              goto LABEL_84;
                                            }
                                            unint64_t v26 = 0x5FF7FFDD609FLL;
                                            uint64_t v169 = (void *)((char *)v217 + v216[50]);
                                            *uint64_t v169 = v167;
                                            v169[1] = v168;
                                            LOBYTE(v218[0]) = 47;
                                            uint64_t v170 = v215;
                                            uint64_t v171 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                            uint64_t v215 = v170;
                                            if (v170) {
                                              goto LABEL_84;
                                            }
                                            uint64_t v173 = (char *)v217 + v216[51];
                                            *(void *)uint64_t v173 = v171;
                                            char v173[8] = v172 & 1;
                                            LOBYTE(v218[0]) = 48;
                                            uint64_t v174 = v215;
                                            uint64_t v175 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                            uint64_t v215 = v174;
                                            if (v174) {
                                              goto LABEL_84;
                                            }
                                            double v177 = (void *)((char *)v217 + v216[52]);
                                            *double v177 = v175;
                                            v177[1] = v176;
                                            LOBYTE(v218[0]) = 52;
                                            uint64_t v178 = v215;
                                            uint64_t v179 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                            uint64_t v215 = v178;
                                            if (!v178)
                                            {
                                              uint64_t v181 = (void *)((char *)v217 + v216[56]);
                                              *uint64_t v181 = v179;
                                              v181[1] = v180;
                                              LOBYTE(v218[0]) = 49;
                                              uint64_t v182 = v215;
                                              uint64_t v183 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                              BOOL v221 = v182 == 0;
                                              uint64_t v215 = v182;
                                              if (!v182)
                                              {
                                                uint64_t v185 = (void *)((char *)v217 + v216[53]);
                                                *uint64_t v185 = v183;
                                                v185[1] = v184;
                                                LOBYTE(v218[0]) = 50;
                                                uint64_t v186 = v215;
                                                uint64_t v187 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v218, v214);
                                                uint64_t v215 = v186;
                                                if (!v186)
                                                {
                                                  char v190 = (char *)v217 + v216[54];
                                                  *(void *)char v190 = v187;
                                                  v190[8] = v188 & 1;
                                                  LOBYTE(v218[0]) = 51;
                                                  uint64_t v191 = v215;
                                                  uint64_t v192 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)( v218,  v214,  v189);
                                                  uint64_t v215 = v191;
                                                  if (!v191)
                                                  {
                                                    uint64_t v194 = (char *)v217 + v216[55];
                                                    *(void *)uint64_t v194 = v192;
                                                    v194[8] = v193 & 1;
                                                    char v222 = 53;
                                                    uint64_t v195 = v215;
                                                    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v218,  v48,  &v222,  v214,  v48,  v49);
                                                    uint64_t v215 = v195;
                                                    if (!v195)
                                                    {
                                                      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                                      uint64_t v197 = (uint64_t)v217;
                                                      *(void *)((char *)v217 + v216[57]) = *(void *)&v218[0];
                                                      sub_100012F34(v197, a2);
                                                      sub_100010D60((void *)v213);
                                                      sub_100012FE4(v197);
                                                      return;
                                                    }
                                                  }
                                                }
                                              }

                                              (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                              sub_100010D60((void *)v213);
                                              unint64_t v196 = v217;
                                              swift_bridgeObjectRelease(*v217);
                                              swift_bridgeObjectRelease(v196[2]);
                                              swift_bridgeObjectRelease(v196[4]);
                                              swift_bridgeObjectRelease(v196[6]);
                                              swift_bridgeObjectRelease(v196[8]);
                                              sub_100012B98(v196[10], v196[11]);
                                              swift_bridgeObjectRelease(v196[16]);
                                              uint64_t v30 = v216;
                                              sub_100012EF8((uint64_t)v196 + v216[18], &qword_1000B0000);
                                              sub_100012EF8((uint64_t)v196 + v30[20], &qword_1000B0118);
                                              swift_bridgeObjectRelease(*(void *)((char *)v196 + v30[22] + 8));
                                              swift_bridgeObjectRelease(*(void *)((char *)v196 + v30[23] + 8));
                                              swift_bridgeObjectRelease(*(void *)((char *)v196 + v30[24] + 8));
                                              swift_bridgeObjectRelease(*(void *)((char *)v196 + v30[26] + 8));
                                              int v208 = 1;
                                              LODWORD(v214) = 1;
                                              uint64_t v213 = 1LL;
                                              uint64_t v212 = 1LL;
                                              uint64_t v211 = 1LL;
                                              uint64_t v210 = 1LL;
                                              uint64_t v209 = 1LL;
                                              uint64_t v207 = 1LL;
                                              uint64_t v206 = 1LL;
                                              uint64_t v205 = 1LL;
                                              LODWORD(v32) = 1;
                                              uint64_t v204 = 1LL;
                                              uint64_t v203 = 1LL;
                                              uint64_t v202 = 1LL;
                                              uint64_t v201 = 1LL;
                                              uint64_t v200 = 1LL;
                                              uint64_t v199 = 1LL;
                                              LODWORD(v31) = 1;
                                              LODWORD(v30) = 1;
                                              LODWORD(v19) = 1;
                                              LODWORD(v29) = 1;
                                              LODWORD(v2_Block_object_dispose(va, 8) = 1;
                                              LOBYTE(v27) = 1;
LABEL_19:
                                              sub_100012B98( *(void *)((char *)v217 + v216[27]),  *(void *)((char *)v217 + v216[27] + 8));
                                              if ((v27 & 1) == 0) {
                                                goto LABEL_20;
                                              }
                                              goto LABEL_58;
                                            }

                                            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v212, v214);
                                            unint64_t v26 = 0x15FF7FFDD609FLL;
                                            LODWORD(v214) = 1;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

LABEL_46:
  swift_bridgeObjectRelease(v217[4]);
  if ((v26 & 8) == 0)
  {
LABEL_8:
    if ((v26 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }

LABEL_47:
  swift_bridgeObjectRelease(v217[6]);
  if ((v26 & 0x10) == 0)
  {
LABEL_9:
    if ((v26 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }

LABEL_48:
  swift_bridgeObjectRelease(v217[8]);
  if ((v26 & 0x80) == 0)
  {
LABEL_10:
    if ((v26 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }

LABEL_50:
  swift_bridgeObjectRelease(v217[16]);
  if ((v26 & 0x4000) == 0)
  {
LABEL_12:
    if ((v26 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }

LABEL_51:
  sub_100012EF8((uint64_t)v217 + v216[18], &qword_1000B0000);
  if ((v26 & 0x10000) == 0)
  {
LABEL_13:
    if ((v26 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }

LABEL_53:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[22] + 8));
  if ((v26 & 0x80000) == 0)
  {
LABEL_15:
    if ((v26 & 0x100000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }

LABEL_54:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[23] + 8));
  if ((v26 & 0x100000) == 0)
  {
LABEL_16:
    if ((v26 & 0x400000) == 0) {
      goto LABEL_17;
    }
LABEL_56:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[26] + 8));
    if ((v26 & 0x800000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_57;
  }

LABEL_55:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[24] + 8));
  if ((v26 & 0x400000) != 0) {
    goto LABEL_56;
  }
LABEL_17:
  if ((v26 & 0x800000) != 0)
  {
LABEL_18:
    int v208 = 0;
    BOOL v221 = 0;
    goto LABEL_19;
  }

LABEL_57:
  BOOL v221 = 0;
  int v208 = 0;
  if ((v26 & 0x1000000) == 0)
  {
LABEL_20:
    if ((_DWORD)v28) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }

LABEL_58:
  char v33 = (char *)v217 + v216[28];
  sub_10007A564( *(void *)v33,  *((void *)v33 + 1),  *((void *)v33 + 2),  *((void *)v33 + 3),  *((void *)v33 + 4),  *((void *)v33 + 5),  *((void *)v33 + 6),  *((void *)v33 + 7));
  if ((v28 & 1) != 0)
  {
LABEL_21:
    sub_100012B98(*(void *)((char *)v217 + v216[29]), *(void *)((char *)v217 + v216[29] + 8));
    if ((v29 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }

LABEL_59:
  if (!(_DWORD)v29)
  {
LABEL_22:
    if ((_DWORD)v19) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }

LABEL_60:
  sub_100012B98(*(void *)((char *)v217 + v216[30]), *(void *)((char *)v217 + v216[30] + 8));
  if ((v19 & 1) != 0)
  {
LABEL_23:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[31] + 8));
    goto LABEL_62;
  }

LABEL_61:
  if (!(_DWORD)v30)
  {
LABEL_24:
    if ((_DWORD)v31) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }

LABEL_62:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[32] + 8));
  if ((v31 & 1) != 0)
  {
LABEL_25:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[33] + 8));
    if ((v199 & 1) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }

LABEL_64:
  sub_100012B98(*(void *)((char *)v217 + v216[34]), *(void *)((char *)v217 + v216[34] + 8));
  if ((v200 & 1) != 0)
  {
LABEL_27:
    sub_100012B98(*(void *)((char *)v217 + v216[35]), *(void *)((char *)v217 + v216[35] + 8));
    if ((v201 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }

LABEL_65:
  if (!(_DWORD)v201)
  {
LABEL_28:
    if ((_DWORD)v202) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }

LABEL_66:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[36] + 8));
  if ((v202 & 1) != 0)
  {
LABEL_29:
    sub_100012B98(*(void *)((char *)v217 + v216[37]), *(void *)((char *)v217 + v216[37] + 8));
    if ((v203 & 1) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }

LABEL_67:
  if (!(_DWORD)v203)
  {
LABEL_30:
    if ((_DWORD)v204) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }

LABEL_68:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[38] + 8));
  if ((v204 & 1) != 0)
  {
LABEL_31:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[40] + 8));
    if ((v32 & 1) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }

LABEL_69:
  if (!(_DWORD)v32)
  {
LABEL_32:
    if ((_DWORD)v205) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }

LABEL_70:
  sub_100012B98(*(void *)((char *)v217 + v216[41]), *(void *)((char *)v217 + v216[41] + 8));
  if ((v205 & 1) != 0)
  {
LABEL_33:
    sub_100012B98(*(void *)((char *)v217 + v216[42]), *(void *)((char *)v217 + v216[42] + 8));
    if ((v206 & 1) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }

LABEL_71:
  if (!(_DWORD)v206)
  {
LABEL_34:
    if ((_DWORD)v207) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }

LABEL_73:
  if (!(_DWORD)v209)
  {
LABEL_36:
    if ((_DWORD)v210) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }

LABEL_74:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[45] + 8));
  if ((v210 & 1) != 0)
  {
LABEL_37:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[46] + 8));
    if ((v211 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }

LABEL_75:
  if (!(_DWORD)v211)
  {
LABEL_38:
    if ((_DWORD)v212) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }

LABEL_76:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[47] + 8));
  if ((v212 & 1) != 0)
  {
LABEL_39:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[48] + 8));
    if ((v213 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }

LABEL_77:
  if (!(_DWORD)v213)
  {
LABEL_40:
    if ((_DWORD)v214) {
      goto LABEL_41;
    }
    goto LABEL_79;
  }

LABEL_78:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[50] + 8));
  if ((v214 & 1) != 0)
  {
LABEL_41:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[52] + 8));
    if (!v221) {
      goto LABEL_42;
    }
LABEL_80:
    swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[53] + 8));
    if ((v208 & 1) == 0) {
      return;
    }
    goto LABEL_81;
  }

LABEL_79:
  if (v221) {
    goto LABEL_80;
  }
LABEL_42:
  if (!v208) {
    return;
  }
LABEL_81:
  swift_bridgeObjectRelease(*(void *)((char *)v217 + v216[56] + 8));
}

uint64_t MessageDictionary.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B1530);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10002F554();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MessageDictionary.CodingKeys,  &type metadata for MessageDictionary.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = (int *)type metadata accessor for MessageDictionary(0LL);
  uint64_t v13 = (uint64_t *)(v3 + v12[21]);
  uint64_t v14 = *v13;
  uint64_t v15 = *((unsigned __int8 *)v13 + 8);
  LOBYTE(v126[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, v126, v5);
  if (!v2)
  {
    uint64_t v16 = (uint64_t *)(v3 + v12[22]);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    LOBYTE(v126[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v126, v5);
    uint64_t v19 = v3 + v12[18];
    LOBYTE(v126[0]) = 2;
    uint64_t v20 = type metadata accessor for UUID(0LL);
    uint64_t v21 = sub_10000E9D8( &qword_1000B1408,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, v126, v5, v20, v21);
    uint64_t v22 = (uint64_t *)(v3 + v12[23]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    LOBYTE(v126[0]) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, v126, v5);
    uint64_t v25 = (uint64_t *)(v3 + v12[24]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    LOBYTE(v126[0]) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, v126, v5);
    uint64_t v28 = (uint64_t *)(v3 + v12[25]);
    uint64_t v29 = *v28;
    uint64_t v30 = *((unsigned __int8 *)v28 + 8);
    LOBYTE(v126[0]) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, v126, v5);
    *(void *)&v126[0] = *(void *)v3;
    char v129 = 6;
    uint64_t v31 = sub_10000E624(&qword_1000AFED0);
    uint64_t v32 = sub_100010D80( &qword_1000AFED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, v31, v32);
    uint64_t v33 = *(void *)(v3 + 8);
    uint64_t v34 = *(void *)(v3 + 16);
    LOBYTE(v126[0]) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v34, v126, v5);
    uint64_t v35 = *(void *)(v3 + 24);
    uint64_t v36 = *(void *)(v3 + 32);
    LOBYTE(v126[0]) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, v126, v5);
    uint64_t v37 = *(void *)(v3 + 40);
    uint64_t v38 = *(void *)(v3 + 48);
    LOBYTE(v126[0]) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, v126, v5);
    uint64_t v39 = *(void *)(v3 + 56);
    uint64_t v40 = *(void *)(v3 + 64);
    LOBYTE(v126[0]) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v39, v40, v126, v5);
    uint64_t v41 = *(unsigned __int8 *)(v3 + 72);
    LOBYTE(v126[0]) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v41, v126, v5);
    uint64_t v42 = *(unsigned __int8 *)(v3 + 73);
    LOBYTE(v126[0]) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v126, v5);
    uint64_t v43 = *(unsigned __int8 *)(v3 + 96);
    LOBYTE(v126[0]) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v126, v5);
    uint64_t v44 = *(unsigned __int8 *)(v3 + 98);
    LOBYTE(v126[0]) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v126, v5);
    uint64_t v45 = *(unsigned __int8 *)(v3 + 99);
    LOBYTE(v126[0]) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, v126, v5);
    v126[0] = *(_OWORD *)(v3 + 80);
    char v129 = 16;
    unint64_t v125 = sub_100030080();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    uint64_t v46 = *(unsigned __int8 *)(v3 + 97);
    LOBYTE(v126[0]) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v126, v5);
    uint64_t v47 = *(void *)(v3 + 104);
    uint64_t v48 = *(unsigned __int8 *)(v3 + 112);
    LOBYTE(v126[0]) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v47, v48, v126, v5);
    uint64_t v49 = *(void *)(v3 + 120);
    uint64_t v50 = *(void *)(v3 + 128);
    LOBYTE(v126[0]) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v49, v50, v126, v5);
    uint64_t v51 = (uint64_t *)(v3 + v12[19]);
    uint64_t v52 = *v51;
    uint64_t v53 = *((unsigned __int8 *)v51 + 8);
    LOBYTE(v126[0]) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v53, v126, v5);
    uint64_t v124 = v3 + v12[20];
    LOBYTE(v126[0]) = 21;
    uint64_t v54 = type metadata accessor for Date(0LL);
    uint64_t v55 = sub_10000E9D8( &qword_1000B0DF8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v124, v126, v5, v54, v55);
    uint64_t v56 = (uint64_t *)(v3 + v12[26]);
    uint64_t v57 = *v56;
    uint64_t v58 = v56[1];
    LOBYTE(v126[0]) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, v58, v126, v5);
    v126[0] = *(_OWORD *)(v3 + v12[27]);
    char v129 = 23;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    uint64_t v59 = v3 + v12[28];
    int v60 = *(_DWORD *)(v59 + 64);
    char v61 = *(_BYTE *)(v59 + 68);
    __int128 v62 = *(_OWORD *)(v59 + 16);
    v126[0] = *(_OWORD *)v59;
    v126[1] = v62;
    __int128 v63 = *(_OWORD *)(v59 + 48);
    v126[2] = *(_OWORD *)(v59 + 32);
    _OWORD v126[3] = v63;
    char v128 = v61;
    int v127 = v60;
    char v129 = 24;
    unint64_t v64 = sub_10007A614();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v126,  &v129,  v5,  &type metadata for BalloonPluginPayloadAttachment,  v64);
    uint64_t v65 = (uint64_t *)(v3 + v12[31]);
    uint64_t v66 = *v65;
    uint64_t v67 = v65[1];
    LOBYTE(v126[0]) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, v126, v5);
    uint64_t v68 = (uint64_t *)(v3 + v12[32]);
    uint64_t v69 = *v68;
    uint64_t v70 = v68[1];
    LOBYTE(v126[0]) = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v69, v70, v126, v5);
    char v71 = (uint64_t *)(v3 + v12[33]);
    uint64_t v72 = *v71;
    uint64_t v73 = v71[1];
    LOBYTE(v126[0]) = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72, v73, v126, v5);
    v126[0] = *(_OWORD *)(v3 + v12[30]);
    char v129 = 28;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    v126[0] = *(_OWORD *)(v3 + v12[34]);
    char v129 = 29;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    v126[0] = *(_OWORD *)(v3 + v12[29]);
    char v129 = 30;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    v126[0] = *(_OWORD *)(v3 + v12[35]);
    char v129 = 31;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    uint64_t v74 = (uint64_t *)(v3 + v12[36]);
    uint64_t v75 = *v74;
    uint64_t v76 = v74[1];
    LOBYTE(v126[0]) = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v75, v76, v126, v5);
    v126[0] = *(_OWORD *)(v3 + v12[37]);
    char v129 = 33;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    uint64_t v77 = (uint64_t *)(v3 + v12[38]);
    uint64_t v78 = *v77;
    uint64_t v79 = v77[1];
    LOBYTE(v126[0]) = 34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v78, v79, v126, v5);
    char v80 = (uint64_t *)(v3 + v12[39]);
    uint64_t v81 = *v80;
    uint64_t v82 = *((unsigned __int8 *)v80 + 8);
    LOBYTE(v126[0]) = 35;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v81, v82, v126, v5);
    char v83 = (uint64_t *)(v3 + v12[40]);
    uint64_t v84 = *v83;
    uint64_t v85 = v83[1];
    LOBYTE(v126[0]) = 36;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v84, v85, v126, v5);
    v126[0] = *(_OWORD *)(v3 + v12[41]);
    char v129 = 37;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    v126[0] = *(_OWORD *)(v3 + v12[42]);
    char v129 = 38;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    v126[0] = *(_OWORD *)(v3 + v12[43]);
    char v129 = 39;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, &type metadata for Data, v125);
    uint64_t v86 = (uint64_t *)(v3 + v12[44]);
    uint64_t v87 = *v86;
    uint64_t v88 = v86[1];
    LOBYTE(v126[0]) = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v87, v88, v126, v5);
    uint64_t v89 = (uint64_t *)(v3 + v12[45]);
    uint64_t v90 = *v89;
    uint64_t v91 = v89[1];
    LOBYTE(v126[0]) = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v90, v91, v126, v5);
    unint64_t v92 = (uint64_t *)(v3 + v12[46]);
    uint64_t v93 = *v92;
    uint64_t v94 = v92[1];
    LOBYTE(v126[0]) = 42;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v93, v94, v126, v5);
    uint64_t v95 = (uint64_t *)(v3 + v12[47]);
    uint64_t v96 = *v95;
    uint64_t v97 = v95[1];
    LOBYTE(v126[0]) = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v96, v97, v126, v5);
    uint64_t v98 = (uint64_t *)(v3 + v12[48]);
    uint64_t v99 = *v98;
    uint64_t v100 = v98[1];
    LOBYTE(v126[0]) = 44;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v99, v100, v126, v5);
    uint64_t v101 = *(unsigned __int8 *)(v3 + v12[49]);
    LOBYTE(v126[0]) = 45;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v101, v126, v5);
    uint64_t v102 = (uint64_t *)(v3 + v12[50]);
    uint64_t v103 = *v102;
    uint64_t v104 = v102[1];
    LOBYTE(v126[0]) = 46;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v103, v104, v126, v5);
    uint64_t v105 = (uint64_t *)(v3 + v12[51]);
    uint64_t v106 = *v105;
    uint64_t v107 = *((unsigned __int8 *)v105 + 8);
    LOBYTE(v126[0]) = 47;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v106, v107, v126, v5);
    uint64_t v108 = (uint64_t *)(v3 + v12[52]);
    uint64_t v109 = *v108;
    uint64_t v110 = v108[1];
    LOBYTE(v126[0]) = 48;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v109, v110, v126, v5);
    uint64_t v111 = (uint64_t *)(v3 + v12[53]);
    uint64_t v112 = *v111;
    uint64_t v113 = v111[1];
    LOBYTE(v126[0]) = 49;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v112, v113, v126, v5);
    uint64_t v114 = (uint64_t *)(v3 + v12[54]);
    uint64_t v115 = *v114;
    uint64_t v116 = *((unsigned __int8 *)v114 + 8);
    LOBYTE(v126[0]) = 50;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v115, v116, v126, v5);
    uint64_t v117 = (uint64_t *)(v3 + v12[55]);
    uint64_t v118 = *v117;
    uint64_t v119 = *((unsigned __int8 *)v117 + 8);
    LOBYTE(v126[0]) = 51;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v118, v119, v126, v5);
    uint64_t v120 = (uint64_t *)(v3 + v12[56]);
    uint64_t v121 = *v120;
    uint64_t v122 = v120[1];
    LOBYTE(v126[0]) = 52;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v121, v122, v126, v5);
    *(void *)&v126[0] = *(void *)(v3 + v12[57]);
    char v129 = 53;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v126, &v129, v5, v31, v32);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10007A180(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10007A194(void *a1)
{
  return MessageDictionary.encode(to:)(a1);
}

MessagesBlastDoorService::MessageDictionary::CodingKeys_optional __swiftcall MessageDictionary.CodingKeys.init(intValue:)( Swift::Int intValue)
{
  return (MessagesBlastDoorService::MessageDictionary::CodingKeys_optional)54;
}

uint64_t MessageDictionary.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007A1DC + 4 * byte_100092310[a1]))( 30320LL,  0xE200000000000000LL);
}

uint64_t sub_10007A1DC()
{
  return 30311LL;
}

uint64_t sub_10007A1E4()
{
  return 114LL;
}

uint64_t sub_10007A1F0()
{
  return 6580583LL;
}

uint64_t sub_10007A208()
{
  return 110LL;
}

uint64_t sub_10007A214()
{
  return 1970434151LL;
}

uint64_t sub_10007A224()
{
  return 112LL;
}

uint64_t sub_10007A230()
{
  return 115LL;
}

uint64_t sub_10007A23C()
{
  return 116LL;
}

uint64_t sub_10007A248()
{
  return 120LL;
}

uint64_t sub_10007A254()
{
  return 30825LL;
}

uint64_t sub_10007A25C()
{
  return 117LL;
}

uint64_t sub_10007A268()
{
  return 97LL;
}

uint64_t sub_10007A274()
{
  return 29281LL;
}

uint64_t sub_10007A27C()
{
  return 7565171LL;
}

uint64_t sub_10007A28C()
{
  return 99LL;
}

uint64_t sub_10007A298()
{
  return 808280425LL;
}

uint64_t sub_10007A2A8()
{
  return 101LL;
}

uint64_t sub_10007A2B4()
{
  return 28786LL;
}

uint64_t sub_10007A2BC()
{
  return 29549LL;
}

uint64_t sub_10007A2C4()
{
  return 29811LL;
}

uint64_t sub_10007A2CC()
{
  return 25715LL;
}

uint64_t sub_10007A2D4()
{
  return 6580578LL;
}

uint64_t sub_10007A2E4()
{
  return 28770LL;
}

uint64_t sub_10007A2EC()
{
  return 1768190050LL;
}

uint64_t sub_10007A2FC()
{
  return 26484LL;
}

uint64_t sub_10007A304()
{
  return 6711156LL;
}

uint64_t sub_10007A314()
{
  return 6580585LL;
}

uint64_t sub_10007A328()
{
  return 6515060LL;
}

uint64_t sub_10007A338()
{
  return 6910829LL;
}

uint64_t sub_10007A348()
{
  return 6911073LL;
}

uint64_t sub_10007A35C()
{
  return 6581363LL;
}

unint64_t sub_10007A370()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10007A3AC()
{
  return 0x546567617373654DLL;
}

unint64_t sub_10007A3CC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10007A3F4()
{
  return 0x4B4457524C6ELL;
}

uint64_t sub_10007A408()
{
  return 1262770030LL;
}

uint64_t sub_10007A418()
{
  return 1263359854LL;
}

uint64_t sub_10007A430()
{
  return 1145655920LL;
}

uint64_t sub_10007A440()
{
  return 6517345LL;
}

uint64_t sub_10007A454()
{
  return 6648417LL;
}

uint64_t sub_10007A468()
{
  return 0x7372676F61LL;
}

uint64_t sub_10007A47C()
{
  return 0x6572676F61LL;
}

uint64_t sub_10007A490()
{
  return 1734766451LL;
}

uint64_t sub_10007A4A0()
{
  return 0x646967666F73LL;
}

uint64_t sub_10007A4B4()
{
  return 7630177LL;
}

uint64_t sub_10007A4C4()
{
  return 7040353LL;
}

uint64_t sub_10007A4D4()
{
  return 6712673LL;
}

uint64_t sub_10007A4E8()
{
  return 0x636C726D61LL;
}

uint64_t sub_10007A4FC()
{
  return 0x6E6C726D61LL;
}

uint64_t sub_10007A510()
{
  return 6647137LL;
}

uint64_t sub_10007A520()
{
  return 26226LL;
}

uint64_t type metadata accessor for MessageDictionary(uint64_t a1)
{
  uint64_t result = qword_1000B15D0;
  if (!qword_1000B15D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessageDictionary);
  }
  return result;
}

uint64_t sub_10007A564( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    sub_100012B98(a3, a4);
    swift_bridgeObjectRelease(a6);
    return sub_100012B98(a7, a8);
  }

  return result;
}

unint64_t sub_10007A5D0()
{
  unint64_t result = qword_1000B1528;
  if (!qword_1000B1528)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BalloonPluginPayloadAttachment,  &type metadata for BalloonPluginPayloadAttachment);
    atomic_store(result, (unint64_t *)&qword_1000B1528);
  }

  return result;
}

unint64_t sub_10007A614()
{
  unint64_t result = qword_1000B1538;
  if (!qword_1000B1538)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BalloonPluginPayloadAttachment,  &type metadata for BalloonPluginPayloadAttachment);
    atomic_store(result, (unint64_t *)&qword_1000B1538);
  }

  return result;
}

uint64_t sub_10007A658(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = MessageDictionary.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = MessageDictionary.CodingKeys.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10007A6E0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = MessageDictionary.CodingKeys.rawValue.getter(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10007A740(uint64_t a1)
{
  uint64_t v3 = MessageDictionary.CodingKeys.rawValue.getter(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(void *)&double result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10007A780(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = MessageDictionary.CodingKeys.rawValue.getter(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10007A7DC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = _s24MessagesBlastDoorService17MessageDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10007A808@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MessageDictionary.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10007A830()
{
  return MessageDictionary.CodingKeys.rawValue.getter(*v0);
}

uint64_t sub_10007A838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = _s24MessagesBlastDoorService17MessageDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007A85C(_BYTE *a1@<X8>)
{
  *a1 = 54;
}

uint64_t sub_10007A868(uint64_t a1)
{
  unint64_t v2 = sub_10002F554();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A890(uint64_t a1)
{
  unint64_t v2 = sub_10002F554();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BalloonPluginPayloadAttachment.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B1540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 4];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100012E88();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BalloonPluginPayloadAttachment.CodingKeys,  &type metadata for BalloonPluginPayloadAttachment.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v22[0] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v22, v5);
  if (!v2)
  {
    sub_100012DC8((uint64_t)(v3 + 2), (uint64_t)v24, &qword_1000AFF70);
    sub_100012DC8((uint64_t)v24, (uint64_t)v22, &qword_1000AFF70);
    v21[0] = 1;
    unint64_t v14 = sub_100030080();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, v21, v5, &type metadata for Data, v14);
    uint64_t v15 = v3[4];
    uint64_t v16 = v3[5];
    v22[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, v22, v5);
    sub_100012DC8((uint64_t)(v3 + 6), (uint64_t)v23, &qword_1000AFF70);
    sub_100012DC8((uint64_t)v23, (uint64_t)v22, &qword_1000AFF70);
    v21[0] = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, v21, v5, &type metadata for Data, v14);
    uint64_t v17 = *((unsigned int *)v3 + 16);
    unsigned __int8 v18 = *((_BYTE *)v3 + 68);
    v22[0] = 4;
    v21[0] = v18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17 | ((unint64_t)v18 << 32), v22, v5);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 BalloonPluginPayloadAttachment.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = *(_OWORD *)v7;
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v5;
    *(void *)(a2 + 61) = *(void *)&v7[13];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_10007AB14(void *a1)
{
  return BalloonPluginPayloadAttachment.encode(to:)(a1);
}

MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional __swiftcall BalloonPluginPayloadAttachment.CodingKeys.init(stringValue:)( Swift::String stringValue)
{
  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A4558, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return (MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional)5;
  }
  else {
    return (MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional)v3;
  }
}

uint64_t BalloonPluginPayloadAttachment.CodingKeys.rawValue.getter(char a1)
{
  return *(void *)&aO_0[8 * a1];
}

uint64_t sub_10007ABB8(char *a1, char *a2)
{
  return sub_10003FCFC(*a1, *a2);
}

Swift::Int sub_10007ABC4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, *(void *)&aO_0[8 * v1], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_10007AC1C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_10007AC48(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, *(void *)&aO_0[8 * v2], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional sub_10007AC9C@<W0>( Swift::String *a1@<X0>, MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional *a2@<X8>)
{
  result.CMTimeValue value = BalloonPluginPayloadAttachment.CodingKeys.init(stringValue:)(*a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

void sub_10007ACC8(void *a1@<X8>)
{
  *a1 = *(void *)&aO_0[8 * *v1];
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_10007ACE4()
{
  return *(void *)&aO_0[8 * *v0];
}

MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional sub_10007ACFC@<W0>( uint64_t a1@<X0>, MessagesBlastDoorService::BalloonPluginPayloadAttachment::CodingKeys_optional *a2@<X8>)
{
  result.CMTimeValue value = BalloonPluginPayloadAttachment.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->CMTimeValue value = result.value;
  return result;
}

uint64_t sub_10007AD20(uint64_t a1)
{
  unint64_t v2 = sub_100012E88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007AD48(uint64_t a1)
{
  unint64_t v2 = sub_100012E88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t _s24MessagesBlastDoorService17MessageDictionaryV10CodingKeysO8rawValueAESgSS_tcfC_0( uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1000A4028, a1, a2, &unk_1000AFCE0);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x36) {
    return 54LL;
  }
  else {
    return v3;
  }
}

void sub_10007ADC0(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B16E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100012E88();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BalloonPluginPayloadAttachment.CodingKeys,  &type metadata for BalloonPluginPayloadAttachment.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(a1);
  }

  else
  {
    LOBYTE(v40) = 0;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    uint64_t v14 = v13;
    uint64_t v39 = v12;
    char v42 = 1;
    unint64_t v15 = sub_10002FFD4();
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v40,  &type metadata for Data,  &v42,  v5,  &type metadata for Data,  v15);
    uint64_t v37 = v14;
    uint64_t v16 = v40;
    unint64_t v17 = v41;
    LOBYTE(v40) = 2;
    uint64_t v36 = v16;
    sub_100012AA8(v16, v41);
    uint64_t v35 = 0LL;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    unint64_t v38 = v17;
    uint64_t v33 = v18;
    char v42 = 3;
    uint64_t v20 = v19;
    swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v40,  &type metadata for Data,  &v42,  v5,  &type metadata for Data,  v15);
    uint64_t v34 = v20;
    uint64_t v21 = v40;
    unint64_t v22 = v41;
    LOBYTE(v40) = 4;
    uint64_t v32 = v21;
    sub_100012AA8(v21, v41);
    uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    unint64_t v24 = v38;
    uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v35 = v23;
    v25(v8, v5);
    unint64_t v26 = v22;
    uint64_t v27 = v37;
    swift_bridgeObjectRetain(v37);
    uint64_t v28 = v36;
    sub_100012AA8(v36, v24);
    uint64_t v29 = v34;
    swift_bridgeObjectRetain(v34);
    uint64_t v30 = v32;
    sub_100012AA8(v32, v26);
    sub_100012B98(v30, v26);
    swift_bridgeObjectRelease(v29);
    sub_100012B98(v28, v24);
    swift_bridgeObjectRelease(v27);
    sub_100010D60(a1);
    swift_bridgeObjectRelease(v27);
    sub_100012B98(v28, v24);
    swift_bridgeObjectRelease(v29);
    sub_100012B98(v30, v26);
    *(void *)a2 = v39;
    *(void *)(a2 + _Block_object_dispose(va, 8) = v27;
    *(void *)(a2 + 16) = v28;
    *(void *)(a2 + 24) = v24;
    *(void *)(a2 + 32) = v33;
    *(void *)(a2 + 40) = v29;
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v30;
    *(void *)(a2 + 56) = v26;
    char v31 = BYTE4(v35);
    *(_DWORD *)(a2 + 64) = v35;
    *(_BYTE *)(a2 + 6_Block_object_dispose(va, 8) = v31 & 1;
  }

unint64_t sub_10007B200()
{
  unint64_t result = qword_1000B1548;
  if (!qword_1000B1548)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageDictionary.CodingKeys,  &type metadata for MessageDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1548);
  }

  return result;
}

unint64_t sub_10007B248()
{
  unint64_t result = qword_1000B1550;
  if (!qword_1000B1550)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageDictionary.CodingKeys,  &type metadata for MessageDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1550);
  }

  return result;
}

unint64_t sub_10007B290()
{
  unint64_t result = qword_1000B1558;
  if (!qword_1000B1558)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessageDictionary.CodingKeys,  &type metadata for MessageDictionary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1558);
  }

  return result;
}

unint64_t sub_10007B2D8()
{
  unint64_t result = qword_1000B1560;
  if (!qword_1000B1560)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BalloonPluginPayloadAttachment.CodingKeys,  &type metadata for BalloonPluginPayloadAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1560);
  }

  return result;
}

unint64_t sub_10007B320()
{
  unint64_t result = qword_1000B1568;
  if (!qword_1000B1568)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BalloonPluginPayloadAttachment.CodingKeys,  &type metadata for BalloonPluginPayloadAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1568);
  }

  return result;
}

unint64_t sub_10007B368()
{
  unint64_t result = qword_1000B1570;
  if (!qword_1000B1570)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for BalloonPluginPayloadAttachment.CodingKeys,  &type metadata for BalloonPluginPayloadAttachment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1570);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MessageDictionary(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2[2];
    *(void *)(a1 + _Block_object_dispose(va, 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v10;
    uint64_t v11 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v11;
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    uint64_t v12 = a2 + 10;
    unint64_t v13 = a2[11];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)v12;
    }

    else
    {
      uint64_t v14 = *v12;
      sub_100012A64(*v12, v13);
      *(void *)(a1 + 80) = v14;
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v13;
    }

    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    *(void *)(a1 + 104) = a2[13];
    *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
    uint64_t v15 = a2[16];
    uint64_t v16 = a3[18];
    unint64_t v17 = (void *)(a1 + v16);
    uint64_t v18 = (char *)a2 + v16;
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 12_Block_object_dispose(va, 8) = v15;
    uint64_t v19 = type metadata accessor for UUID(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v20 + 48);
    __n128 v22 = swift_bridgeObjectRetain(v15);
    if (v21(v18, 1LL, v19, v22))
    {
      uint64_t v23 = sub_10000E624(&qword_1000B0000);
      memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }

    uint64_t v24 = a3[19];
    uint64_t v25 = a3[20];
    uint64_t v26 = a1 + v24;
    uint64_t v27 = (uint64_t)a2 + v24;
    *(void *)uint64_t v26 = *(void *)v27;
    *(_BYTE *)(v26 + _Block_object_dispose(va, 8) = *(_BYTE *)(v27 + 8);
    uint64_t v28 = (void *)(a1 + v25);
    uint64_t v29 = (char *)a2 + v25;
    uint64_t v30 = type metadata accessor for Date(0LL);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
    {
      uint64_t v32 = sub_10000E624(&qword_1000B0118);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
    }

    uint64_t v33 = a3[21];
    uint64_t v34 = a3[22];
    uint64_t v35 = a1 + v33;
    uint64_t v36 = (uint64_t)a2 + v33;
    *(void *)uint64_t v35 = *(void *)v36;
    *(_BYTE *)(v35 + _Block_object_dispose(va, 8) = *(_BYTE *)(v36 + 8);
    uint64_t v37 = (void *)(a1 + v34);
    unint64_t v38 = (uint64_t *)((char *)a2 + v34);
    uint64_t v39 = v38[1];
    void *v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = a3[23];
    uint64_t v41 = a3[24];
    char v42 = (void *)(a1 + v40);
    uint64_t v43 = (uint64_t *)((char *)a2 + v40);
    uint64_t v44 = v43[1];
    void *v42 = *v43;
    v42[1] = v44;
    uint64_t v45 = (void *)(a1 + v41);
    uint64_t v46 = (uint64_t *)((char *)a2 + v41);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = a3[25];
    uint64_t v49 = a3[26];
    uint64_t v50 = a1 + v48;
    uint64_t v51 = (uint64_t)a2 + v48;
    *(void *)uint64_t v50 = *(void *)v51;
    *(_BYTE *)(v50 + _Block_object_dispose(va, 8) = *(_BYTE *)(v51 + 8);
    uint64_t v52 = (void *)(a1 + v49);
    uint64_t v53 = (uint64_t *)((char *)a2 + v49);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    uint64_t v55 = a3[27];
    uint64_t v56 = a1 + v55;
    uint64_t v57 = (uint64_t *)((char *)a2 + v55);
    unint64_t v58 = *(uint64_t *)((char *)a2 + v55 + 8);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v54);
    if (v58 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    }

    else
    {
      uint64_t v59 = *v57;
      sub_100012A64(*v57, v58);
      *(void *)uint64_t v56 = v59;
      *(void *)(v56 + _Block_object_dispose(va, 8) = v58;
    }

    uint64_t v60 = a3[28];
    uint64_t v61 = a1 + v60;
    uint64_t v62 = (uint64_t)a2 + v60;
    uint64_t v63 = *(uint64_t *)((char *)a2 + v60 + 8);
    if (v63 == 1)
    {
      __int128 v64 = *(_OWORD *)(v62 + 48);
      *(_OWORD *)(v61 + 32) = *(_OWORD *)(v62 + 32);
      *(_OWORD *)(v61 + 4_Block_object_dispose(va, 8) = v64;
      *(void *)(v61 + 61) = *(void *)(v62 + 61);
      __int128 v65 = *(_OWORD *)(v62 + 16);
      *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
      *(_OWORD *)(v61 + 16) = v65;
    }

    else
    {
      *(void *)uint64_t v61 = *(void *)v62;
      *(void *)(v61 + _Block_object_dispose(va, 8) = v63;
      uint64_t v66 = (_OWORD *)(v62 + 16);
      unint64_t v67 = *(void *)(v62 + 24);
      swift_bridgeObjectRetain(v63);
      if (v67 >> 60 == 15)
      {
        *(_OWORD *)(v61 + 16) = *v66;
      }

      else
      {
        uint64_t v68 = *(void *)v66;
        sub_100012A64(v68, v67);
        *(void *)(v61 + 16) = v68;
        *(void *)(v61 + 24) = v67;
      }

      uint64_t v69 = *(void *)(v62 + 40);
      *(void *)(v61 + 32) = *(void *)(v62 + 32);
      *(void *)(v61 + 40) = v69;
      uint64_t v70 = (_OWORD *)(v62 + 48);
      unint64_t v71 = *(void *)(v62 + 56);
      swift_bridgeObjectRetain(v69);
      if (v71 >> 60 == 15)
      {
        *(_OWORD *)(v61 + 4_Block_object_dispose(va, 8) = *v70;
      }

      else
      {
        uint64_t v72 = *(void *)v70;
        sub_100012A64(v72, v71);
        *(void *)(v61 + 4_Block_object_dispose(va, 8) = v72;
        *(void *)(v61 + 56) = v71;
      }

      *(_DWORD *)(v61 + 64) = *(_DWORD *)(v62 + 64);
      *(_BYTE *)(v61 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(v62 + 68);
    }

    uint64_t v73 = a3[29];
    uint64_t v74 = a1 + v73;
    uint64_t v75 = (uint64_t *)((char *)a2 + v73);
    unint64_t v76 = v75[1];
    if (v76 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    }

    else
    {
      uint64_t v77 = *v75;
      sub_100012A64(*v75, v75[1]);
      *(void *)uint64_t v74 = v77;
      *(void *)(v74 + _Block_object_dispose(va, 8) = v76;
    }

    uint64_t v78 = a3[30];
    uint64_t v79 = a1 + v78;
    char v80 = (uint64_t *)((char *)a2 + v78);
    unint64_t v81 = v80[1];
    if (v81 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    }

    else
    {
      uint64_t v82 = *v80;
      sub_100012A64(*v80, v80[1]);
      *(void *)uint64_t v79 = v82;
      *(void *)(v79 + _Block_object_dispose(va, 8) = v81;
    }

    uint64_t v83 = a3[31];
    uint64_t v84 = a3[32];
    uint64_t v85 = (void *)(a1 + v83);
    uint64_t v86 = (uint64_t *)((char *)a2 + v83);
    uint64_t v87 = v86[1];
    void *v85 = *v86;
    v85[1] = v87;
    uint64_t v88 = (void *)(a1 + v84);
    uint64_t v89 = (uint64_t *)((char *)a2 + v84);
    uint64_t v90 = v89[1];
    void *v88 = *v89;
    v88[1] = v90;
    uint64_t v91 = a3[33];
    uint64_t v92 = a3[34];
    uint64_t v93 = (void *)(a1 + v91);
    uint64_t v94 = (uint64_t *)((char *)a2 + v91);
    uint64_t v95 = v94[1];
    *uint64_t v93 = *v94;
    v93[1] = v95;
    uint64_t v96 = a1 + v92;
    uint64_t v97 = (uint64_t *)((char *)a2 + v92);
    unint64_t v98 = *(uint64_t *)((char *)a2 + v92 + 8);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v90);
    swift_bridgeObjectRetain(v95);
    if (v98 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
    }

    else
    {
      uint64_t v99 = *v97;
      sub_100012A64(*v97, v98);
      *(void *)uint64_t v96 = v99;
      *(void *)(v96 + _Block_object_dispose(va, 8) = v98;
    }

    uint64_t v100 = a3[35];
    uint64_t v101 = a1 + v100;
    uint64_t v102 = (uint64_t *)((char *)a2 + v100);
    unint64_t v103 = v102[1];
    if (v103 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
    }

    else
    {
      uint64_t v104 = *v102;
      sub_100012A64(*v102, v102[1]);
      *(void *)uint64_t v101 = v104;
      *(void *)(v101 + _Block_object_dispose(va, 8) = v103;
    }

    uint64_t v105 = a3[36];
    uint64_t v106 = a3[37];
    uint64_t v107 = (void *)(a1 + v105);
    uint64_t v108 = (uint64_t *)((char *)a2 + v105);
    uint64_t v109 = v108[1];
    *uint64_t v107 = *v108;
    v107[1] = v109;
    uint64_t v110 = a1 + v106;
    uint64_t v111 = (_OWORD *)((char *)a2 + v106);
    unint64_t v112 = *(uint64_t *)((char *)a2 + v106 + 8);
    swift_bridgeObjectRetain(v109);
    if (v112 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v110 = *v111;
    }

    else
    {
      uint64_t v113 = *(void *)v111;
      sub_100012A64(v113, v112);
      *(void *)uint64_t v110 = v113;
      *(void *)(v110 + _Block_object_dispose(va, 8) = v112;
    }

    uint64_t v114 = a3[38];
    uint64_t v115 = a3[39];
    uint64_t v116 = (void *)(a1 + v114);
    uint64_t v117 = (uint64_t *)((char *)a2 + v114);
    uint64_t v118 = v117[1];
    *uint64_t v116 = *v117;
    v116[1] = v118;
    uint64_t v119 = a1 + v115;
    uint64_t v120 = (uint64_t)a2 + v115;
    *(_BYTE *)(v119 + _Block_object_dispose(va, 8) = *(_BYTE *)(v120 + 8);
    *(void *)uint64_t v119 = *(void *)v120;
    uint64_t v121 = a3[40];
    uint64_t v122 = a3[41];
    uint64_t v123 = (void *)(a1 + v121);
    uint64_t v124 = (uint64_t *)((char *)a2 + v121);
    uint64_t v125 = v124[1];
    *uint64_t v123 = *v124;
    v123[1] = v125;
    uint64_t v126 = a1 + v122;
    int v127 = (uint64_t *)((char *)a2 + v122);
    unint64_t v128 = *(uint64_t *)((char *)a2 + v122 + 8);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v125);
    if (v128 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
    }

    else
    {
      uint64_t v129 = *v127;
      sub_100012A64(*v127, v128);
      *(void *)uint64_t v126 = v129;
      *(void *)(v126 + _Block_object_dispose(va, 8) = v128;
    }

    uint64_t v130 = a3[42];
    uint64_t v131 = a1 + v130;
    uint64_t v132 = (uint64_t *)((char *)a2 + v130);
    unint64_t v133 = v132[1];
    if (v133 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
    }

    else
    {
      uint64_t v134 = *v132;
      sub_100012A64(*v132, v132[1]);
      *(void *)uint64_t v131 = v134;
      *(void *)(v131 + _Block_object_dispose(va, 8) = v133;
    }

    uint64_t v135 = a3[43];
    uint64_t v136 = a1 + v135;
    uint64_t v137 = (uint64_t *)((char *)a2 + v135);
    unint64_t v138 = v137[1];
    if (v138 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
    }

    else
    {
      uint64_t v139 = *v137;
      sub_100012A64(*v137, v137[1]);
      *(void *)uint64_t v136 = v139;
      *(void *)(v136 + _Block_object_dispose(va, 8) = v138;
    }

    uint64_t v140 = a3[44];
    uint64_t v141 = a3[45];
    uint64_t v142 = (void *)(a1 + v140);
    uint64_t v143 = (uint64_t *)((char *)a2 + v140);
    uint64_t v144 = v143[1];
    *uint64_t v142 = *v143;
    v142[1] = v144;
    uint64_t v145 = (void *)(a1 + v141);
    uint64_t v146 = (uint64_t *)((char *)a2 + v141);
    uint64_t v147 = v146[1];
    *uint64_t v145 = *v146;
    v145[1] = v147;
    uint64_t v148 = a3[46];
    uint64_t v149 = a3[47];
    uint64_t v150 = (void *)(a1 + v148);
    char v151 = (uint64_t *)((char *)a2 + v148);
    uint64_t v152 = v151[1];
    *uint64_t v150 = *v151;
    v150[1] = v152;
    uint64_t v153 = (void *)(a1 + v149);
    uint64_t v154 = (uint64_t *)((char *)a2 + v149);
    uint64_t v155 = v154[1];
    *uint64_t v153 = *v154;
    v153[1] = v155;
    uint64_t v156 = a3[48];
    uint64_t v157 = a3[49];
    uint64_t v158 = (void *)(a1 + v156);
    uint64_t v159 = (uint64_t *)((char *)a2 + v156);
    uint64_t v160 = v159[1];
    *uint64_t v158 = *v159;
    v158[1] = v160;
    *(_BYTE *)(a1 + v157) = *((_BYTE *)a2 + v157);
    uint64_t v161 = a3[50];
    uint64_t v162 = a3[51];
    unint64_t v163 = (void *)(a1 + v161);
    uint64_t v164 = (uint64_t *)((char *)a2 + v161);
    uint64_t v165 = v164[1];
    *unint64_t v163 = *v164;
    v163[1] = v165;
    uint64_t v166 = a1 + v162;
    uint64_t v167 = (uint64_t)a2 + v162;
    *(void *)uint64_t v166 = *(void *)v167;
    *(_BYTE *)(v166 + _Block_object_dispose(va, 8) = *(_BYTE *)(v167 + 8);
    uint64_t v168 = a3[52];
    uint64_t v169 = a3[53];
    uint64_t v170 = (void *)(a1 + v168);
    uint64_t v171 = (uint64_t *)((char *)a2 + v168);
    uint64_t v172 = v171[1];
    *uint64_t v170 = *v171;
    v170[1] = v172;
    uint64_t v173 = (void *)(a1 + v169);
    uint64_t v174 = (uint64_t *)((char *)a2 + v169);
    uint64_t v175 = v174[1];
    *uint64_t v173 = *v174;
    v173[1] = v175;
    uint64_t v176 = a3[54];
    uint64_t v177 = a3[55];
    uint64_t v178 = a1 + v176;
    uint64_t v179 = (uint64_t)a2 + v176;
    *(void *)uint64_t v178 = *(void *)v179;
    *(_BYTE *)(v178 + _Block_object_dispose(va, 8) = *(_BYTE *)(v179 + 8);
    uint64_t v180 = a1 + v177;
    uint64_t v181 = (uint64_t)a2 + v177;
    *(void *)uint64_t v180 = *(void *)v181;
    *(_BYTE *)(v180 + _Block_object_dispose(va, 8) = *(_BYTE *)(v181 + 8);
    uint64_t v182 = a3[56];
    uint64_t v183 = a3[57];
    uint64_t v184 = (void *)(a1 + v182);
    uint64_t v185 = (uint64_t *)((char *)a2 + v182);
    uint64_t v186 = v185[1];
    *uint64_t v184 = *v185;
    v184[1] = v186;
    uint64_t v187 = *(uint64_t *)((char *)a2 + v183);
    *(void *)(a1 + v183) = v187;
    swift_bridgeObjectRetain(v144);
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRetain(v152);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v160);
    swift_bridgeObjectRetain(v165);
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRetain(v175);
    swift_bridgeObjectRetain(v186);
    swift_bridgeObjectRetain(v187);
  }

  return a1;
}

double destroy for MessageDictionary(void *a1, int *a2)
{
  unint64_t v4 = a1[11];
  if (v4 >> 60 != 15) {
    sub_100012B54(a1[10], v4);
  }
  swift_bridgeObjectRelease(a1[16]);
  uint64_t v5 = (char *)a1 + a2[18];
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = (char *)a1 + a2[20];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[22] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[23] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[24] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[26] + 8));
  uint64_t v11 = (void *)((char *)a1 + a2[27]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_100012B54(*v11, v12);
  }
  unint64_t v13 = (void *)((char *)a1 + a2[28]);
  uint64_t v14 = v13[1];
  if (v14 != 1)
  {
    swift_bridgeObjectRelease(v14);
    unint64_t v15 = v13[3];
    if (v15 >> 60 != 15) {
      sub_100012B54(v13[2], v15);
    }
    swift_bridgeObjectRelease(v13[5]);
    unint64_t v16 = v13[7];
    if (v16 >> 60 != 15) {
      sub_100012B54(v13[6], v16);
    }
  }

  unint64_t v17 = (void *)((char *)a1 + a2[29]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100012B54(*v17, v18);
  }
  uint64_t v19 = (void *)((char *)a1 + a2[30]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100012B54(*v19, v20);
  }
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[31] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[32] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[33] + 8));
  uint64_t v21 = (void *)((char *)a1 + a2[34]);
  unint64_t v22 = v21[1];
  if (v22 >> 60 != 15) {
    sub_100012B54(*v21, v22);
  }
  uint64_t v23 = (void *)((char *)a1 + a2[35]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_100012B54(*v23, v24);
  }
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[36] + 8));
  uint64_t v25 = (void *)((char *)a1 + a2[37]);
  unint64_t v26 = v25[1];
  if (v26 >> 60 != 15) {
    sub_100012B54(*v25, v26);
  }
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[38] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[40] + 8));
  uint64_t v27 = (void *)((char *)a1 + a2[41]);
  unint64_t v28 = v27[1];
  if (v28 >> 60 != 15) {
    sub_100012B54(*v27, v28);
  }
  uint64_t v29 = (void *)((char *)a1 + a2[42]);
  unint64_t v30 = v29[1];
  if (v30 >> 60 != 15) {
    sub_100012B54(*v29, v30);
  }
  uint64_t v31 = (void *)((char *)a1 + a2[43]);
  unint64_t v32 = v31[1];
  if (v32 >> 60 != 15) {
    sub_100012B54(*v31, v32);
  }
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[44] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[45] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[46] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[47] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[48] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[50] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[52] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[53] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[56] + 8));
  *(void *)&double result = swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[57])).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for MessageDictionary(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v8;
  uint64_t v11 = a2[4];
  uint64_t v10 = a2[5];
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  uint64_t v13 = a2[6];
  uint64_t v12 = a2[7];
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v13;
  *(void *)(a1 + 56) = v12;
  uint64_t v14 = a2[8];
  *(void *)(a1 + 64) = v14;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  unint64_t v15 = a2 + 10;
  unint64_t v16 = a2[11];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v15;
  }

  else
  {
    uint64_t v17 = *v15;
    sub_100012A64(*v15, v16);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = v16;
  }

  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(void *)(a1 + 104) = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  uint64_t v18 = a2[16];
  uint64_t v19 = a3[18];
  unint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (char *)a2 + v19;
  *(void *)(a1 + 120) = a2[15];
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v18;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v23 + 48);
  __n128 v25 = swift_bridgeObjectRetain(v18);
  if (v24(v21, 1LL, v22, v25))
  {
    uint64_t v26 = sub_10000E624(&qword_1000B0000);
    memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
  }

  uint64_t v27 = a3[19];
  uint64_t v28 = a3[20];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = (uint64_t)a2 + v27;
  *(void *)uint64_t v29 = *(void *)v30;
  *(_BYTE *)(v29 + _Block_object_dispose(va, 8) = *(_BYTE *)(v30 + 8);
  uint64_t v31 = (void *)(a1 + v28);
  unint64_t v32 = (char *)a2 + v28;
  uint64_t v33 = type metadata accessor for Date(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1LL, v33))
  {
    uint64_t v35 = sub_10000E624(&qword_1000B0118);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0LL, 1LL, v33);
  }

  uint64_t v36 = a3[21];
  uint64_t v37 = a3[22];
  uint64_t v38 = a1 + v36;
  uint64_t v39 = (uint64_t)a2 + v36;
  *(void *)uint64_t v38 = *(void *)v39;
  *(_BYTE *)(v38 + _Block_object_dispose(va, 8) = *(_BYTE *)(v39 + 8);
  uint64_t v40 = (void *)(a1 + v37);
  uint64_t v41 = (uint64_t *)((char *)a2 + v37);
  uint64_t v42 = v41[1];
  void *v40 = *v41;
  v40[1] = v42;
  uint64_t v43 = a3[23];
  uint64_t v44 = a3[24];
  uint64_t v45 = (void *)(a1 + v43);
  uint64_t v46 = (uint64_t *)((char *)a2 + v43);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  uint64_t v48 = (void *)(a1 + v44);
  uint64_t v49 = (uint64_t *)((char *)a2 + v44);
  uint64_t v50 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = a3[25];
  uint64_t v52 = a3[26];
  uint64_t v53 = a1 + v51;
  uint64_t v54 = (uint64_t)a2 + v51;
  *(void *)uint64_t v53 = *(void *)v54;
  *(_BYTE *)(v53 + _Block_object_dispose(va, 8) = *(_BYTE *)(v54 + 8);
  uint64_t v55 = (void *)(a1 + v52);
  uint64_t v56 = (uint64_t *)((char *)a2 + v52);
  uint64_t v57 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v57;
  uint64_t v58 = a3[27];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = (uint64_t *)((char *)a2 + v58);
  unint64_t v61 = *(uint64_t *)((char *)a2 + v58 + 8);
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v57);
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  }

  else
  {
    uint64_t v62 = *v60;
    sub_100012A64(*v60, v61);
    *(void *)uint64_t v59 = v62;
    *(void *)(v59 + _Block_object_dispose(va, 8) = v61;
  }

  uint64_t v63 = a3[28];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = (uint64_t)a2 + v63;
  uint64_t v66 = *(uint64_t *)((char *)a2 + v63 + 8);
  if (v66 == 1)
  {
    __int128 v67 = *(_OWORD *)(v65 + 48);
    *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
    *(_OWORD *)(v64 + 4_Block_object_dispose(va, 8) = v67;
    *(void *)(v64 + 61) = *(void *)(v65 + 61);
    __int128 v68 = *(_OWORD *)(v65 + 16);
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
    *(_OWORD *)(v64 + 16) = v68;
  }

  else
  {
    *(void *)uint64_t v64 = *(void *)v65;
    *(void *)(v64 + _Block_object_dispose(va, 8) = v66;
    uint64_t v69 = (_OWORD *)(v65 + 16);
    unint64_t v70 = *(void *)(v65 + 24);
    swift_bridgeObjectRetain(v66);
    if (v70 >> 60 == 15)
    {
      *(_OWORD *)(v64 + 16) = *v69;
    }

    else
    {
      uint64_t v71 = *(void *)v69;
      sub_100012A64(v71, v70);
      *(void *)(v64 + 16) = v71;
      *(void *)(v64 + 24) = v70;
    }

    uint64_t v72 = *(void *)(v65 + 40);
    *(void *)(v64 + 32) = *(void *)(v65 + 32);
    *(void *)(v64 + 40) = v72;
    uint64_t v73 = (_OWORD *)(v65 + 48);
    unint64_t v74 = *(void *)(v65 + 56);
    swift_bridgeObjectRetain(v72);
    if (v74 >> 60 == 15)
    {
      *(_OWORD *)(v64 + 4_Block_object_dispose(va, 8) = *v73;
    }

    else
    {
      uint64_t v75 = *(void *)v73;
      sub_100012A64(v75, v74);
      *(void *)(v64 + 4_Block_object_dispose(va, 8) = v75;
      *(void *)(v64 + 56) = v74;
    }

    *(_DWORD *)(v64 + 64) = *(_DWORD *)(v65 + 64);
    *(_BYTE *)(v64 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(v65 + 68);
  }

  uint64_t v76 = a3[29];
  uint64_t v77 = a1 + v76;
  uint64_t v78 = (uint64_t *)((char *)a2 + v76);
  unint64_t v79 = v78[1];
  if (v79 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
  }

  else
  {
    uint64_t v80 = *v78;
    sub_100012A64(*v78, v78[1]);
    *(void *)uint64_t v77 = v80;
    *(void *)(v77 + _Block_object_dispose(va, 8) = v79;
  }

  uint64_t v81 = a3[30];
  uint64_t v82 = a1 + v81;
  uint64_t v83 = (uint64_t *)((char *)a2 + v81);
  unint64_t v84 = v83[1];
  if (v84 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  }

  else
  {
    uint64_t v85 = *v83;
    sub_100012A64(*v83, v83[1]);
    *(void *)uint64_t v82 = v85;
    *(void *)(v82 + _Block_object_dispose(va, 8) = v84;
  }

  uint64_t v86 = a3[31];
  uint64_t v87 = a3[32];
  uint64_t v88 = (void *)(a1 + v86);
  uint64_t v89 = (uint64_t *)((char *)a2 + v86);
  uint64_t v90 = v89[1];
  void *v88 = *v89;
  v88[1] = v90;
  uint64_t v91 = (void *)(a1 + v87);
  uint64_t v92 = (uint64_t *)((char *)a2 + v87);
  uint64_t v93 = v92[1];
  *uint64_t v91 = *v92;
  v91[1] = v93;
  uint64_t v94 = a3[33];
  uint64_t v95 = a3[34];
  uint64_t v96 = (void *)(a1 + v94);
  uint64_t v97 = (uint64_t *)((char *)a2 + v94);
  uint64_t v98 = v97[1];
  *uint64_t v96 = *v97;
  v96[1] = v98;
  uint64_t v99 = a1 + v95;
  uint64_t v100 = (uint64_t *)((char *)a2 + v95);
  unint64_t v101 = *(uint64_t *)((char *)a2 + v95 + 8);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v98);
  if (v101 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
  }

  else
  {
    uint64_t v102 = *v100;
    sub_100012A64(*v100, v101);
    *(void *)uint64_t v99 = v102;
    *(void *)(v99 + _Block_object_dispose(va, 8) = v101;
  }

  uint64_t v103 = a3[35];
  uint64_t v104 = a1 + v103;
  uint64_t v105 = (uint64_t *)((char *)a2 + v103);
  unint64_t v106 = v105[1];
  if (v106 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
  }

  else
  {
    uint64_t v107 = *v105;
    sub_100012A64(*v105, v105[1]);
    *(void *)uint64_t v104 = v107;
    *(void *)(v104 + _Block_object_dispose(va, 8) = v106;
  }

  uint64_t v108 = a3[36];
  uint64_t v109 = a3[37];
  uint64_t v110 = (void *)(a1 + v108);
  uint64_t v111 = (uint64_t *)((char *)a2 + v108);
  uint64_t v112 = v111[1];
  *uint64_t v110 = *v111;
  v110[1] = v112;
  uint64_t v113 = a1 + v109;
  uint64_t v114 = (_OWORD *)((char *)a2 + v109);
  unint64_t v115 = *(uint64_t *)((char *)a2 + v109 + 8);
  swift_bridgeObjectRetain(v112);
  if (v115 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v113 = *v114;
  }

  else
  {
    uint64_t v116 = *(void *)v114;
    sub_100012A64(v116, v115);
    *(void *)uint64_t v113 = v116;
    *(void *)(v113 + _Block_object_dispose(va, 8) = v115;
  }

  uint64_t v117 = a3[38];
  uint64_t v118 = a3[39];
  uint64_t v119 = (void *)(a1 + v117);
  uint64_t v120 = (uint64_t *)((char *)a2 + v117);
  uint64_t v121 = v120[1];
  *uint64_t v119 = *v120;
  v119[1] = v121;
  uint64_t v122 = a1 + v118;
  uint64_t v123 = (uint64_t)a2 + v118;
  *(_BYTE *)(v122 + _Block_object_dispose(va, 8) = *(_BYTE *)(v123 + 8);
  *(void *)uint64_t v122 = *(void *)v123;
  uint64_t v124 = a3[40];
  uint64_t v125 = a3[41];
  uint64_t v126 = (void *)(a1 + v124);
  int v127 = (uint64_t *)((char *)a2 + v124);
  uint64_t v128 = v127[1];
  *uint64_t v126 = *v127;
  v126[1] = v128;
  uint64_t v129 = a1 + v125;
  uint64_t v130 = (uint64_t *)((char *)a2 + v125);
  unint64_t v131 = *(uint64_t *)((char *)a2 + v125 + 8);
  swift_bridgeObjectRetain(v121);
  swift_bridgeObjectRetain(v128);
  if (v131 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v129 = *(_OWORD *)v130;
  }

  else
  {
    uint64_t v132 = *v130;
    sub_100012A64(*v130, v131);
    *(void *)uint64_t v129 = v132;
    *(void *)(v129 + _Block_object_dispose(va, 8) = v131;
  }

  uint64_t v133 = a3[42];
  uint64_t v134 = a1 + v133;
  uint64_t v135 = (uint64_t *)((char *)a2 + v133);
  unint64_t v136 = v135[1];
  if (v136 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v134 = *(_OWORD *)v135;
  }

  else
  {
    uint64_t v137 = *v135;
    sub_100012A64(*v135, v135[1]);
    *(void *)uint64_t v134 = v137;
    *(void *)(v134 + _Block_object_dispose(va, 8) = v136;
  }

  uint64_t v138 = a3[43];
  uint64_t v139 = a1 + v138;
  uint64_t v140 = (uint64_t *)((char *)a2 + v138);
  unint64_t v141 = v140[1];
  if (v141 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v139 = *(_OWORD *)v140;
  }

  else
  {
    uint64_t v142 = *v140;
    sub_100012A64(*v140, v140[1]);
    *(void *)uint64_t v139 = v142;
    *(void *)(v139 + _Block_object_dispose(va, 8) = v141;
  }

  uint64_t v143 = a3[44];
  uint64_t v144 = a3[45];
  uint64_t v145 = (void *)(a1 + v143);
  uint64_t v146 = (uint64_t *)((char *)a2 + v143);
  uint64_t v147 = v146[1];
  *uint64_t v145 = *v146;
  v145[1] = v147;
  uint64_t v148 = (void *)(a1 + v144);
  uint64_t v149 = (uint64_t *)((char *)a2 + v144);
  uint64_t v150 = v149[1];
  *uint64_t v148 = *v149;
  v148[1] = v150;
  uint64_t v151 = a3[46];
  uint64_t v152 = a3[47];
  uint64_t v153 = (void *)(a1 + v151);
  uint64_t v154 = (uint64_t *)((char *)a2 + v151);
  uint64_t v155 = v154[1];
  *uint64_t v153 = *v154;
  v153[1] = v155;
  uint64_t v156 = (void *)(a1 + v152);
  uint64_t v157 = (uint64_t *)((char *)a2 + v152);
  uint64_t v158 = v157[1];
  *uint64_t v156 = *v157;
  v156[1] = v158;
  uint64_t v159 = a3[48];
  uint64_t v160 = a3[49];
  uint64_t v161 = (void *)(a1 + v159);
  uint64_t v162 = (uint64_t *)((char *)a2 + v159);
  uint64_t v163 = v162[1];
  *uint64_t v161 = *v162;
  v161[1] = v163;
  *(_BYTE *)(a1 + v160) = *((_BYTE *)a2 + v160);
  uint64_t v164 = a3[50];
  uint64_t v165 = a3[51];
  uint64_t v166 = (void *)(a1 + v164);
  uint64_t v167 = (uint64_t *)((char *)a2 + v164);
  uint64_t v168 = v167[1];
  *uint64_t v166 = *v167;
  v166[1] = v168;
  uint64_t v169 = a1 + v165;
  uint64_t v170 = (uint64_t)a2 + v165;
  *(void *)uint64_t v169 = *(void *)v170;
  *(_BYTE *)(v169 + _Block_object_dispose(va, 8) = *(_BYTE *)(v170 + 8);
  uint64_t v171 = a3[52];
  uint64_t v172 = a3[53];
  uint64_t v173 = (void *)(a1 + v171);
  uint64_t v174 = (uint64_t *)((char *)a2 + v171);
  uint64_t v175 = v174[1];
  *uint64_t v173 = *v174;
  v173[1] = v175;
  uint64_t v176 = (void *)(a1 + v172);
  uint64_t v177 = (uint64_t *)((char *)a2 + v172);
  uint64_t v178 = v177[1];
  *uint64_t v176 = *v177;
  v176[1] = v178;
  uint64_t v179 = a3[54];
  uint64_t v180 = a3[55];
  uint64_t v181 = a1 + v179;
  uint64_t v182 = (uint64_t)a2 + v179;
  *(void *)uint64_t v181 = *(void *)v182;
  *(_BYTE *)(v181 + _Block_object_dispose(va, 8) = *(_BYTE *)(v182 + 8);
  uint64_t v183 = a1 + v180;
  uint64_t v184 = (uint64_t)a2 + v180;
  *(void *)uint64_t v183 = *(void *)v184;
  *(_BYTE *)(v183 + _Block_object_dispose(va, 8) = *(_BYTE *)(v184 + 8);
  uint64_t v185 = a3[56];
  uint64_t v186 = a3[57];
  uint64_t v187 = (void *)(a1 + v185);
  char v188 = (uint64_t *)((char *)a2 + v185);
  uint64_t v189 = v188[1];
  *uint64_t v187 = *v188;
  v187[1] = v189;
  uint64_t v190 = *(uint64_t *)((char *)a2 + v186);
  *(void *)(a1 + v186) = v190;
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRetain(v158);
  swift_bridgeObjectRetain(v163);
  swift_bridgeObjectRetain(v168);
  swift_bridgeObjectRetain(v175);
  swift_bridgeObjectRetain(v178);
  swift_bridgeObjectRetain(v189);
  swift_bridgeObjectRetain(v190);
  return a1;
}

uint64_t *assignWithCopy for MessageDictionary(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  a1[1] = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[3] = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  a1[4] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[5] = a2[5];
  uint64_t v12 = a2[6];
  uint64_t v13 = a1[6];
  a1[6] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  a1[7] = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a1 + 73) = *((_BYTE *)a2 + 73);
  unint64_t v16 = a2 + 10;
  unint64_t v17 = a2[11];
  if ((unint64_t)a1[11] >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v16;
      sub_100012A64(*v16, a2[11]);
      a1[10] = v18;
      a1[11] = v17;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v17 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)(a1 + 10));
LABEL_6:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v16;
    goto LABEL_8;
  }

  uint64_t v19 = *v16;
  sub_100012A64(*v16, a2[11]);
  uint64_t v20 = a1[10];
  unint64_t v21 = a1[11];
  a1[10] = v19;
  a1[11] = v17;
  sub_100012B54(v20, v21);
LABEL_8:
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  *((_BYTE *)a1 + 97) = *((_BYTE *)a2 + 97);
  *((_BYTE *)a1 + 9_Block_object_dispose(va, 8) = *((_BYTE *)a2 + 98);
  *((_BYTE *)a1 + 99) = *((_BYTE *)a2 + 99);
  uint64_t v22 = a2[13];
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  a1[13] = v22;
  a1[15] = a2[15];
  uint64_t v23 = a2[16];
  uint64_t v24 = a1[16];
  a1[16] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  uint64_t v25 = a3[18];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1LL, v28);
  int v32 = v30(v27, 1LL, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0LL, 1LL, v28);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_13:
    uint64_t v33 = sub_10000E624(&qword_1000B0000);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64LL));
    goto LABEL_14;
  }

  (*(void (**)(char *, char *, uint64_t))(v29 + 24))(v26, v27, v28);
LABEL_14:
  uint64_t v34 = a3[19];
  uint64_t v35 = (uint64_t)a1 + v34;
  uint64_t v36 = (uint64_t *)((char *)a2 + v34);
  uint64_t v37 = *v36;
  *(_BYTE *)(v35 + _Block_object_dispose(va, 8) = *((_BYTE *)v36 + 8);
  *(void *)uint64_t v35 = v37;
  uint64_t v38 = a3[20];
  uint64_t v39 = (char *)a1 + v38;
  uint64_t v40 = (char *)a2 + v38;
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v42 + 48);
  int v44 = v43(v39, 1LL, v41);
  int v45 = v43(v40, 1LL, v41);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0LL, 1LL, v41);
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
LABEL_19:
    uint64_t v46 = sub_10000E624(&qword_1000B0118);
    memcpy(v39, v40, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_20;
  }

  (*(void (**)(char *, char *, uint64_t))(v42 + 24))(v39, v40, v41);
LABEL_20:
  uint64_t v47 = a3[21];
  uint64_t v48 = (uint64_t)a1 + v47;
  uint64_t v49 = (uint64_t *)((char *)a2 + v47);
  uint64_t v50 = *v49;
  *(_BYTE *)(v48 + _Block_object_dispose(va, 8) = *((_BYTE *)v49 + 8);
  *(void *)uint64_t v48 = v50;
  uint64_t v51 = a3[22];
  uint64_t v52 = (uint64_t *)((char *)a1 + v51);
  uint64_t v53 = (uint64_t *)((char *)a2 + v51);
  *uint64_t v52 = *v53;
  uint64_t v54 = v53[1];
  uint64_t v55 = v52[1];
  v52[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
  uint64_t v56 = a3[23];
  uint64_t v57 = (uint64_t *)((char *)a1 + v56);
  uint64_t v58 = (uint64_t *)((char *)a2 + v56);
  void *v57 = *v58;
  uint64_t v59 = v58[1];
  uint64_t v60 = v57[1];
  v57[1] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  uint64_t v61 = a3[24];
  uint64_t v62 = (uint64_t *)((char *)a1 + v61);
  uint64_t v63 = (uint64_t *)((char *)a2 + v61);
  void *v62 = *v63;
  uint64_t v64 = v63[1];
  uint64_t v65 = v62[1];
  v62[1] = v64;
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRelease(v65);
  uint64_t v66 = a3[25];
  uint64_t v67 = (uint64_t)a1 + v66;
  __int128 v68 = (uint64_t *)((char *)a2 + v66);
  uint64_t v69 = *v68;
  *(_BYTE *)(v67 + _Block_object_dispose(va, 8) = *((_BYTE *)v68 + 8);
  *(void *)uint64_t v67 = v69;
  uint64_t v70 = a3[26];
  uint64_t v71 = (uint64_t *)((char *)a1 + v70);
  uint64_t v72 = (uint64_t *)((char *)a2 + v70);
  void *v71 = *v72;
  uint64_t v73 = v72[1];
  uint64_t v74 = v71[1];
  v71[1] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  uint64_t v75 = a3[27];
  uint64_t v76 = (uint64_t *)((char *)a1 + v75);
  uint64_t v77 = (uint64_t *)((char *)a2 + v75);
  unint64_t v78 = *(uint64_t *)((char *)a2 + v75 + 8);
  if (*(unint64_t *)((char *)a1 + v75 + 8) >> 60 == 15)
  {
    if (v78 >> 60 != 15)
    {
      uint64_t v79 = *v77;
      sub_100012A64(v79, v78);
      *uint64_t v76 = v79;
      v76[1] = v78;
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  if (v78 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v76);
LABEL_25:
    *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
    goto LABEL_27;
  }

  uint64_t v80 = *v77;
  sub_100012A64(v80, v78);
  uint64_t v81 = *v76;
  unint64_t v82 = v76[1];
  *uint64_t v76 = v80;
  v76[1] = v78;
  sub_100012B54(v81, v82);
LABEL_27:
  uint64_t v83 = a3[28];
  uint64_t v84 = (uint64_t)a1 + v83;
  uint64_t v85 = (uint64_t)a2 + v83;
  uint64_t v86 = *(uint64_t *)((char *)a1 + v83 + 8);
  uint64_t v87 = *(uint64_t *)((char *)a2 + v83 + 8);
  if (v86 != 1)
  {
    if (v87 == 1)
    {
      sub_10007D4C8((void *)v84);
      *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
      __int128 v92 = *(_OWORD *)(v85 + 32);
      __int128 v91 = *(_OWORD *)(v85 + 48);
      __int128 v93 = *(_OWORD *)(v85 + 16);
      *(void *)(v84 + 61) = *(void *)(v85 + 61);
      *(_OWORD *)(v84 + 32) = v92;
      *(_OWORD *)(v84 + 4_Block_object_dispose(va, 8) = v91;
      *(_OWORD *)(v84 + 16) = v93;
      goto LABEL_56;
    }

    *(void *)uint64_t v84 = *(void *)v85;
    uint64_t v97 = *(void *)(v85 + 8);
    *(void *)(v84 + _Block_object_dispose(va, 8) = v97;
    swift_bridgeObjectRetain(v97);
    swift_bridgeObjectRelease(v86);
    uint64_t v98 = (uint64_t *)(v85 + 16);
    unint64_t v99 = *(void *)(v85 + 24);
    if (*(void *)(v84 + 24) >> 60 == 15LL)
    {
      if (v99 >> 60 != 15)
      {
        uint64_t v100 = *v98;
        sub_100012A64(*v98, *(void *)(v85 + 24));
        *(void *)(v84 + 16) = v100;
        *(void *)(v84 + 24) = v99;
        goto LABEL_47;
      }
    }

    else
    {
      if (v99 >> 60 != 15)
      {
        uint64_t v106 = *v98;
        sub_100012A64(*v98, *(void *)(v85 + 24));
        uint64_t v107 = *(void *)(v84 + 16);
        unint64_t v108 = *(void *)(v84 + 24);
        *(void *)(v84 + 16) = v106;
        *(void *)(v84 + 24) = v99;
        sub_100012B54(v107, v108);
LABEL_47:
        *(void *)(v84 + 32) = *(void *)(v85 + 32);
        uint64_t v109 = *(void *)(v85 + 40);
        uint64_t v110 = *(void *)(v84 + 40);
        *(void *)(v84 + 40) = v109;
        swift_bridgeObjectRetain(v109);
        swift_bridgeObjectRelease(v110);
        uint64_t v111 = (uint64_t *)(v85 + 48);
        unint64_t v104 = *(void *)(v85 + 56);
        if (*(void *)(v84 + 56) >> 60 == 15LL)
        {
          if (v104 >> 60 != 15)
          {
            uint64_t v105 = *v111;
            goto LABEL_50;
          }
        }

        else
        {
          if (v104 >> 60 != 15)
          {
            uint64_t v112 = *v111;
            sub_100012A64(*v111, *(void *)(v85 + 56));
            uint64_t v113 = *(void *)(v84 + 48);
            unint64_t v114 = *(void *)(v84 + 56);
            *(void *)(v84 + 4_Block_object_dispose(va, 8) = v112;
            *(void *)(v84 + 56) = v104;
            sub_100012B54(v113, v114);
            goto LABEL_55;
          }

          sub_100033BD0(v84 + 48);
        }

        *(_OWORD *)(v84 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v111;
        goto LABEL_55;
      }

      sub_100033BD0(v84 + 16);
    }

    *(_OWORD *)(v84 + 16) = *(_OWORD *)v98;
    goto LABEL_47;
  }

  if (v87 == 1)
  {
    *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
    __int128 v88 = *(_OWORD *)(v85 + 16);
    __int128 v89 = *(_OWORD *)(v85 + 32);
    __int128 v90 = *(_OWORD *)(v85 + 48);
    *(void *)(v84 + 61) = *(void *)(v85 + 61);
    *(_OWORD *)(v84 + 32) = v89;
    *(_OWORD *)(v84 + 4_Block_object_dispose(va, 8) = v90;
    *(_OWORD *)(v84 + 16) = v88;
    goto LABEL_56;
  }

  *(void *)uint64_t v84 = *(void *)v85;
  uint64_t v94 = *(void *)(v85 + 8);
  *(void *)(v84 + _Block_object_dispose(va, 8) = v94;
  uint64_t v95 = (_OWORD *)(v85 + 16);
  unint64_t v96 = *(void *)(v85 + 24);
  swift_bridgeObjectRetain(v94);
  if (v96 >> 60 == 15)
  {
    *(_OWORD *)(v84 + 16) = *v95;
  }

  else
  {
    uint64_t v101 = *(void *)v95;
    sub_100012A64(v101, v96);
    *(void *)(v84 + 16) = v101;
    *(void *)(v84 + 24) = v96;
  }

  *(void *)(v84 + 32) = *(void *)(v85 + 32);
  uint64_t v102 = *(void *)(v85 + 40);
  *(void *)(v84 + 40) = v102;
  uint64_t v103 = (uint64_t *)(v85 + 48);
  unint64_t v104 = *(void *)(v85 + 56);
  swift_bridgeObjectRetain(v102);
  if (v104 >> 60 != 15)
  {
    uint64_t v105 = *v103;
LABEL_50:
    sub_100012A64(v105, v104);
    *(void *)(v84 + 4_Block_object_dispose(va, 8) = v105;
    *(void *)(v84 + 56) = v104;
    goto LABEL_55;
  }

  *(_OWORD *)(v84 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v103;
LABEL_55:
  int v115 = *(_DWORD *)(v85 + 64);
  *(_BYTE *)(v84 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(v85 + 68);
  *(_DWORD *)(v84 + 64) = v115;
LABEL_56:
  uint64_t v116 = a3[29];
  uint64_t v117 = (uint64_t *)((char *)a1 + v116);
  uint64_t v118 = (uint64_t *)((char *)a2 + v116);
  unint64_t v119 = *(uint64_t *)((char *)a2 + v116 + 8);
  if (*(unint64_t *)((char *)a1 + v116 + 8) >> 60 == 15)
  {
    if (v119 >> 60 != 15)
    {
      uint64_t v120 = *v118;
      sub_100012A64(v120, v119);
      *uint64_t v117 = v120;
      v117[1] = v119;
      goto LABEL_63;
    }

    goto LABEL_61;
  }

  if (v119 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v117);
LABEL_61:
    *(_OWORD *)uint64_t v117 = *(_OWORD *)v118;
    goto LABEL_63;
  }

  uint64_t v121 = *v118;
  sub_100012A64(v121, v119);
  uint64_t v122 = *v117;
  unint64_t v123 = v117[1];
  *uint64_t v117 = v121;
  v117[1] = v119;
  sub_100012B54(v122, v123);
LABEL_63:
  uint64_t v124 = a3[30];
  uint64_t v125 = (uint64_t *)((char *)a1 + v124);
  uint64_t v126 = (uint64_t *)((char *)a2 + v124);
  unint64_t v127 = *(uint64_t *)((char *)a2 + v124 + 8);
  if (*(unint64_t *)((char *)a1 + v124 + 8) >> 60 == 15)
  {
    if (v127 >> 60 != 15)
    {
      uint64_t v128 = *v126;
      sub_100012A64(v128, v127);
      *uint64_t v125 = v128;
      v125[1] = v127;
      goto LABEL_70;
    }

    goto LABEL_68;
  }

  if (v127 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v125);
LABEL_68:
    *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
    goto LABEL_70;
  }

  uint64_t v129 = *v126;
  sub_100012A64(v129, v127);
  uint64_t v130 = *v125;
  unint64_t v131 = v125[1];
  *uint64_t v125 = v129;
  v125[1] = v127;
  sub_100012B54(v130, v131);
LABEL_70:
  uint64_t v132 = a3[31];
  uint64_t v133 = (uint64_t *)((char *)a1 + v132);
  uint64_t v134 = (uint64_t *)((char *)a2 + v132);
  *uint64_t v133 = *v134;
  uint64_t v135 = v134[1];
  uint64_t v136 = v133[1];
  v133[1] = v135;
  swift_bridgeObjectRetain(v135);
  swift_bridgeObjectRelease(v136);
  uint64_t v137 = a3[32];
  uint64_t v138 = (uint64_t *)((char *)a1 + v137);
  uint64_t v139 = (uint64_t *)((char *)a2 + v137);
  *uint64_t v138 = *v139;
  uint64_t v140 = v139[1];
  uint64_t v141 = v138[1];
  v138[1] = v140;
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRelease(v141);
  uint64_t v142 = a3[33];
  uint64_t v143 = (uint64_t *)((char *)a1 + v142);
  uint64_t v144 = (uint64_t *)((char *)a2 + v142);
  *uint64_t v143 = *v144;
  uint64_t v145 = v144[1];
  uint64_t v146 = v143[1];
  v143[1] = v145;
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRelease(v146);
  uint64_t v147 = a3[34];
  uint64_t v148 = (uint64_t *)((char *)a1 + v147);
  uint64_t v149 = (uint64_t *)((char *)a2 + v147);
  unint64_t v150 = *(uint64_t *)((char *)a2 + v147 + 8);
  if (*(unint64_t *)((char *)a1 + v147 + 8) >> 60 == 15)
  {
    if (v150 >> 60 != 15)
    {
      uint64_t v151 = *v149;
      sub_100012A64(v151, v150);
      *uint64_t v148 = v151;
      v148[1] = v150;
      goto LABEL_77;
    }

    goto LABEL_75;
  }

  if (v150 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v148);
LABEL_75:
    *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
    goto LABEL_77;
  }

  uint64_t v152 = *v149;
  sub_100012A64(v152, v150);
  uint64_t v153 = *v148;
  unint64_t v154 = v148[1];
  *uint64_t v148 = v152;
  v148[1] = v150;
  sub_100012B54(v153, v154);
LABEL_77:
  uint64_t v155 = a3[35];
  uint64_t v156 = (uint64_t *)((char *)a1 + v155);
  uint64_t v157 = (uint64_t *)((char *)a2 + v155);
  unint64_t v158 = *(uint64_t *)((char *)a2 + v155 + 8);
  if (*(unint64_t *)((char *)a1 + v155 + 8) >> 60 == 15)
  {
    if (v158 >> 60 != 15)
    {
      uint64_t v159 = *v157;
      sub_100012A64(v159, v158);
      *uint64_t v156 = v159;
      v156[1] = v158;
      goto LABEL_84;
    }

    goto LABEL_82;
  }

  if (v158 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v156);
LABEL_82:
    *(_OWORD *)uint64_t v156 = *(_OWORD *)v157;
    goto LABEL_84;
  }

  uint64_t v160 = *v157;
  sub_100012A64(v160, v158);
  uint64_t v161 = *v156;
  unint64_t v162 = v156[1];
  *uint64_t v156 = v160;
  v156[1] = v158;
  sub_100012B54(v161, v162);
LABEL_84:
  uint64_t v163 = a3[36];
  uint64_t v164 = (uint64_t *)((char *)a1 + v163);
  uint64_t v165 = (uint64_t *)((char *)a2 + v163);
  *uint64_t v164 = *v165;
  uint64_t v166 = v165[1];
  uint64_t v167 = v164[1];
  v164[1] = v166;
  swift_bridgeObjectRetain(v166);
  swift_bridgeObjectRelease(v167);
  uint64_t v168 = a3[37];
  uint64_t v169 = (uint64_t *)((char *)a1 + v168);
  uint64_t v170 = (uint64_t *)((char *)a2 + v168);
  unint64_t v171 = *(uint64_t *)((char *)a2 + v168 + 8);
  if (*(unint64_t *)((char *)a1 + v168 + 8) >> 60 == 15)
  {
    if (v171 >> 60 != 15)
    {
      uint64_t v172 = *v170;
      sub_100012A64(v172, v171);
      *uint64_t v169 = v172;
      v169[1] = v171;
      goto LABEL_91;
    }

    goto LABEL_89;
  }

  if (v171 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v169);
LABEL_89:
    *(_OWORD *)uint64_t v169 = *(_OWORD *)v170;
    goto LABEL_91;
  }

  uint64_t v173 = *v170;
  sub_100012A64(v173, v171);
  uint64_t v174 = *v169;
  unint64_t v175 = v169[1];
  *uint64_t v169 = v173;
  v169[1] = v171;
  sub_100012B54(v174, v175);
LABEL_91:
  uint64_t v176 = a3[38];
  uint64_t v177 = (uint64_t *)((char *)a1 + v176);
  uint64_t v178 = (uint64_t *)((char *)a2 + v176);
  *uint64_t v177 = *v178;
  uint64_t v179 = v178[1];
  uint64_t v180 = v177[1];
  v177[1] = v179;
  swift_bridgeObjectRetain(v179);
  swift_bridgeObjectRelease(v180);
  uint64_t v181 = a3[39];
  uint64_t v182 = (uint64_t)a1 + v181;
  uint64_t v183 = (uint64_t *)((char *)a2 + v181);
  uint64_t v184 = *v183;
  *(_BYTE *)(v182 + _Block_object_dispose(va, 8) = *((_BYTE *)v183 + 8);
  *(void *)uint64_t v182 = v184;
  uint64_t v185 = a3[40];
  uint64_t v186 = (uint64_t *)((char *)a1 + v185);
  uint64_t v187 = (uint64_t *)((char *)a2 + v185);
  *uint64_t v186 = *v187;
  uint64_t v188 = v187[1];
  uint64_t v189 = v186[1];
  v186[1] = v188;
  swift_bridgeObjectRetain(v188);
  swift_bridgeObjectRelease(v189);
  uint64_t v190 = a3[41];
  uint64_t v191 = (uint64_t *)((char *)a1 + v190);
  uint64_t v192 = (uint64_t *)((char *)a2 + v190);
  unint64_t v193 = *(uint64_t *)((char *)a2 + v190 + 8);
  if (*(unint64_t *)((char *)a1 + v190 + 8) >> 60 == 15)
  {
    if (v193 >> 60 != 15)
    {
      uint64_t v194 = *v192;
      sub_100012A64(v194, v193);
      *uint64_t v191 = v194;
      v191[1] = v193;
      goto LABEL_98;
    }

    goto LABEL_96;
  }

  if (v193 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v191);
LABEL_96:
    *(_OWORD *)uint64_t v191 = *(_OWORD *)v192;
    goto LABEL_98;
  }

  uint64_t v195 = *v192;
  sub_100012A64(v195, v193);
  uint64_t v196 = *v191;
  unint64_t v197 = v191[1];
  *uint64_t v191 = v195;
  v191[1] = v193;
  sub_100012B54(v196, v197);
LABEL_98:
  uint64_t v198 = a3[42];
  uint64_t v199 = (uint64_t *)((char *)a1 + v198);
  uint64_t v200 = (uint64_t *)((char *)a2 + v198);
  unint64_t v201 = *(uint64_t *)((char *)a2 + v198 + 8);
  if (*(unint64_t *)((char *)a1 + v198 + 8) >> 60 == 15)
  {
    if (v201 >> 60 != 15)
    {
      uint64_t v202 = *v200;
      sub_100012A64(v202, v201);
      *uint64_t v199 = v202;
      v199[1] = v201;
      goto LABEL_105;
    }

    goto LABEL_103;
  }

  if (v201 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)v199);
LABEL_103:
    *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
    goto LABEL_105;
  }

  uint64_t v203 = *v200;
  sub_100012A64(v203, v201);
  uint64_t v204 = *v199;
  unint64_t v205 = v199[1];
  *uint64_t v199 = v203;
  v199[1] = v201;
  sub_100012B54(v204, v205);
LABEL_105:
  uint64_t v206 = a3[43];
  uint64_t v207 = (uint64_t *)((char *)a1 + v206);
  int v208 = (uint64_t *)((char *)a2 + v206);
  unint64_t v209 = *(uint64_t *)((char *)a2 + v206 + 8);
  if (*(unint64_t *)((char *)a1 + v206 + 8) >> 60 != 15)
  {
    if (v209 >> 60 != 15)
    {
      uint64_t v211 = *v208;
      sub_100012A64(v211, v209);
      uint64_t v212 = *v207;
      unint64_t v213 = v207[1];
      *uint64_t v207 = v211;
      v207[1] = v209;
      sub_100012B54(v212, v213);
      goto LABEL_112;
    }

    sub_100033BD0((uint64_t)v207);
    goto LABEL_110;
  }

  if (v209 >> 60 == 15)
  {
LABEL_110:
    *(_OWORD *)uint64_t v207 = *(_OWORD *)v208;
    goto LABEL_112;
  }

  uint64_t v210 = *v208;
  sub_100012A64(v210, v209);
  *uint64_t v207 = v210;
  v207[1] = v209;
LABEL_112:
  uint64_t v214 = a3[44];
  uint64_t v215 = (uint64_t *)((char *)a1 + v214);
  uint64_t v216 = (uint64_t *)((char *)a2 + v214);
  *uint64_t v215 = *v216;
  uint64_t v217 = v216[1];
  uint64_t v218 = v215[1];
  v215[1] = v217;
  swift_bridgeObjectRetain(v217);
  swift_bridgeObjectRelease(v218);
  uint64_t v219 = a3[45];
  char v220 = (uint64_t *)((char *)a1 + v219);
  BOOL v221 = (uint64_t *)((char *)a2 + v219);
  *char v220 = *v221;
  uint64_t v222 = v221[1];
  uint64_t v223 = v220[1];
  v220[1] = v222;
  swift_bridgeObjectRetain(v222);
  swift_bridgeObjectRelease(v223);
  uint64_t v224 = a3[46];
  uint64_t v225 = (uint64_t *)((char *)a1 + v224);
  uint64_t v226 = (uint64_t *)((char *)a2 + v224);
  *uint64_t v225 = *v226;
  uint64_t v227 = v226[1];
  uint64_t v228 = v225[1];
  v225[1] = v227;
  swift_bridgeObjectRetain(v227);
  swift_bridgeObjectRelease(v228);
  uint64_t v229 = a3[47];
  uint64_t v230 = (uint64_t *)((char *)a1 + v229);
  uint64_t v231 = (uint64_t *)((char *)a2 + v229);
  *uint64_t v230 = *v231;
  uint64_t v232 = v231[1];
  uint64_t v233 = v230[1];
  v230[1] = v232;
  swift_bridgeObjectRetain(v232);
  swift_bridgeObjectRelease(v233);
  uint64_t v234 = a3[48];
  unint64_t v235 = (uint64_t *)((char *)a1 + v234);
  char v236 = (uint64_t *)((char *)a2 + v234);
  *unint64_t v235 = *v236;
  uint64_t v237 = v236[1];
  uint64_t v238 = v235[1];
  v235[1] = v237;
  swift_bridgeObjectRetain(v237);
  swift_bridgeObjectRelease(v238);
  *((_BYTE *)a1 + a3[49]) = *((_BYTE *)a2 + a3[49]);
  uint64_t v239 = a3[50];
  uint64_t v240 = (uint64_t *)((char *)a1 + v239);
  uint64_t v241 = (uint64_t *)((char *)a2 + v239);
  *uint64_t v240 = *v241;
  uint64_t v242 = v241[1];
  uint64_t v243 = v240[1];
  v240[1] = v242;
  swift_bridgeObjectRetain(v242);
  swift_bridgeObjectRelease(v243);
  uint64_t v244 = a3[51];
  uint64_t v245 = (uint64_t)a1 + v244;
  uint64_t v246 = (uint64_t *)((char *)a2 + v244);
  uint64_t v247 = *v246;
  *(_BYTE *)(v245 + _Block_object_dispose(va, 8) = *((_BYTE *)v246 + 8);
  *(void *)uint64_t v245 = v247;
  uint64_t v248 = a3[52];
  uint64_t v249 = (uint64_t *)((char *)a1 + v248);
  uint64_t v250 = (uint64_t *)((char *)a2 + v248);
  *uint64_t v249 = *v250;
  uint64_t v251 = v250[1];
  uint64_t v252 = v249[1];
  v249[1] = v251;
  swift_bridgeObjectRetain(v251);
  swift_bridgeObjectRelease(v252);
  uint64_t v253 = a3[53];
  uint64_t v254 = (uint64_t *)((char *)a1 + v253);
  uint64_t v255 = (uint64_t *)((char *)a2 + v253);
  *uint64_t v254 = *v255;
  uint64_t v256 = v255[1];
  uint64_t v257 = v254[1];
  v254[1] = v256;
  swift_bridgeObjectRetain(v256);
  swift_bridgeObjectRelease(v257);
  uint64_t v258 = a3[54];
  uint64_t v259 = (uint64_t)a1 + v258;
  uint64_t v260 = (uint64_t *)((char *)a2 + v258);
  uint64_t v261 = *v260;
  *(_BYTE *)(v259 + _Block_object_dispose(va, 8) = *((_BYTE *)v260 + 8);
  *(void *)uint64_t v259 = v261;
  uint64_t v262 = a3[55];
  uint64_t v263 = (uint64_t)a1 + v262;
  uint64_t v264 = (uint64_t *)((char *)a2 + v262);
  uint64_t v265 = *v264;
  *(_BYTE *)(v263 + _Block_object_dispose(va, 8) = *((_BYTE *)v264 + 8);
  *(void *)uint64_t v263 = v265;
  uint64_t v266 = a3[56];
  uint64_t v267 = (uint64_t *)((char *)a1 + v266);
  uint64_t v268 = (uint64_t *)((char *)a2 + v266);
  *uint64_t v267 = *v268;
  uint64_t v269 = v268[1];
  uint64_t v270 = v267[1];
  v267[1] = v269;
  swift_bridgeObjectRetain(v269);
  swift_bridgeObjectRelease(v270);
  uint64_t v271 = a3[57];
  uint64_t v272 = *(uint64_t *)((char *)a1 + v271);
  uint64_t v273 = *(uint64_t *)((char *)a2 + v271);
  *(uint64_t *)((char *)a1 + v271) = v273;
  swift_bridgeObjectRetain(v273);
  swift_bridgeObjectRelease(v272);
  return a1;
}

void *sub_10007D4C8(void *a1)
{
  return a1;
}

uint64_t initializeWithTake for MessageDictionary(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(void *)(a1 + 104) = v6;
  uint64_t v7 = a3[18];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_10000E624(&qword_1000B0000);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[19];
  uint64_t v14 = a3[20];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + _Block_object_dispose(va, 8) = *(_BYTE *)(v16 + 8);
  unint64_t v17 = (void *)(a1 + v14);
  uint64_t v18 = (const void *)(a2 + v14);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
  {
    uint64_t v21 = sub_10000E624(&qword_1000B0118);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
  }

  uint64_t v22 = a3[21];
  uint64_t v23 = a3[22];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(void *)uint64_t v24 = *(void *)v25;
  *(_BYTE *)(v24 + _Block_object_dispose(va, 8) = *(_BYTE *)(v25 + 8);
  *(_OWORD *)(a1 + v23) = *(_OWORD *)(a2 + v23);
  uint64_t v26 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v26) = *(_OWORD *)(a2 + v26);
  uint64_t v27 = a3[25];
  uint64_t v28 = a3[26];
  uint64_t v29 = a1 + v27;
  uint64_t v30 = a2 + v27;
  *(void *)uint64_t v29 = *(void *)v30;
  *(_BYTE *)(v29 + _Block_object_dispose(va, 8) = *(_BYTE *)(v30 + 8);
  *(_OWORD *)(a1 + v2_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + v28);
  uint64_t v31 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  uint64_t v32 = a1 + v31;
  uint64_t v33 = a2 + v31;
  *(void *)(v32 + 61) = *(void *)(v33 + 61);
  __int128 v34 = *(_OWORD *)(v33 + 48);
  *(_OWORD *)(v32 + 32) = *(_OWORD *)(v33 + 32);
  *(_OWORD *)(v32 + 4_Block_object_dispose(va, 8) = v34;
  __int128 v35 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v35;
  uint64_t v36 = a3[30];
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  uint64_t v37 = a3[32];
  *(_OWORD *)(a1 + a3[31]) = *(_OWORD *)(a2 + a3[31]);
  *(_OWORD *)(a1 + v37) = *(_OWORD *)(a2 + v37);
  uint64_t v38 = a3[34];
  *(_OWORD *)(a1 + a3[33]) = *(_OWORD *)(a2 + a3[33]);
  *(_OWORD *)(a1 + v3_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + v38);
  uint64_t v39 = a3[36];
  *(_OWORD *)(a1 + a3[35]) = *(_OWORD *)(a2 + a3[35]);
  *(_OWORD *)(a1 + v39) = *(_OWORD *)(a2 + v39);
  uint64_t v40 = a3[38];
  *(_OWORD *)(a1 + a3[37]) = *(_OWORD *)(a2 + a3[37]);
  *(_OWORD *)(a1 + v40) = *(_OWORD *)(a2 + v40);
  uint64_t v41 = a3[39];
  uint64_t v42 = a3[40];
  uint64_t v43 = a1 + v41;
  uint64_t v44 = a2 + v41;
  *(void *)uint64_t v43 = *(void *)v44;
  *(_BYTE *)(v43 + _Block_object_dispose(va, 8) = *(_BYTE *)(v44 + 8);
  *(_OWORD *)(a1 + v42) = *(_OWORD *)(a2 + v42);
  uint64_t v45 = a3[42];
  *(_OWORD *)(a1 + a3[41]) = *(_OWORD *)(a2 + a3[41]);
  *(_OWORD *)(a1 + v45) = *(_OWORD *)(a2 + v45);
  uint64_t v46 = a3[44];
  *(_OWORD *)(a1 + a3[43]) = *(_OWORD *)(a2 + a3[43]);
  *(_OWORD *)(a1 + v46) = *(_OWORD *)(a2 + v46);
  uint64_t v47 = a3[46];
  *(_OWORD *)(a1 + a3[45]) = *(_OWORD *)(a2 + a3[45]);
  *(_OWORD *)(a1 + v47) = *(_OWORD *)(a2 + v47);
  uint64_t v48 = a3[48];
  *(_OWORD *)(a1 + a3[47]) = *(_OWORD *)(a2 + a3[47]);
  *(_OWORD *)(a1 + v4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + v48);
  uint64_t v49 = a3[50];
  *(_BYTE *)(a1 + a3[49]) = *(_BYTE *)(a2 + a3[49]);
  *(_OWORD *)(a1 + v49) = *(_OWORD *)(a2 + v49);
  uint64_t v50 = a3[51];
  uint64_t v51 = a3[52];
  uint64_t v52 = a1 + v50;
  uint64_t v53 = a2 + v50;
  *(void *)uint64_t v52 = *(void *)v53;
  *(_BYTE *)(v52 + _Block_object_dispose(va, 8) = *(_BYTE *)(v53 + 8);
  *(_OWORD *)(a1 + v51) = *(_OWORD *)(a2 + v51);
  uint64_t v54 = a3[54];
  *(_OWORD *)(a1 + a3[53]) = *(_OWORD *)(a2 + a3[53]);
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  *(void *)uint64_t v55 = *(void *)v56;
  *(_BYTE *)(v55 + _Block_object_dispose(va, 8) = *(_BYTE *)(v56 + 8);
  uint64_t v57 = a3[55];
  uint64_t v58 = a3[56];
  uint64_t v59 = a1 + v57;
  uint64_t v60 = a2 + v57;
  *(_BYTE *)(v59 + _Block_object_dispose(va, 8) = *(_BYTE *)(v60 + 8);
  *(void *)uint64_t v59 = *(void *)v60;
  *(_OWORD *)(a1 + v5_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + v58);
  *(void *)(a1 + a3[57]) = *(void *)(a2 + a3[57]);
  return a1;
}

uint64_t *assignWithTake for MessageDictionary(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[2];
  uint64_t v8 = a1[2];
  a1[1] = a2[1];
  a1[2] = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a2[4];
  uint64_t v10 = a1[4];
  a1[3] = a2[3];
  a1[4] = v9;
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = a2[6];
  uint64_t v12 = a1[6];
  a1[5] = a2[5];
  a1[6] = v11;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a2[8];
  uint64_t v14 = a1[8];
  a1[7] = a2[7];
  a1[8] = v13;
  swift_bridgeObjectRelease(v14);
  *((_WORD *)a1 + 36) = *((_WORD *)a2 + 36);
  uint64_t v15 = a2 + 10;
  unint64_t v16 = a1[11];
  if (v16 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v17 = a2[11];
  if (v17 >> 60 == 15)
  {
    sub_100033BD0((uint64_t)(a1 + 10));
LABEL_4:
    *((_OWORD *)a1 + 5) = *v15;
    goto LABEL_6;
  }

  uint64_t v18 = a1[10];
  a1[10] = *(void *)v15;
  a1[11] = v17;
  sub_100012B54(v18, v16);
LABEL_6:
  *((_DWORD *)a1 + 24) = *((_DWORD *)a2 + 24);
  a1[13] = a2[13];
  *((_BYTE *)a1 + 112) = *((_BYTE *)a2 + 112);
  uint64_t v19 = a2[16];
  uint64_t v20 = a1[16];
  a1[15] = a2[15];
  a1[16] = v19;
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[18];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_11:
    uint64_t v29 = sub_10000E624(&qword_1000B0000);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_12;
  }

  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_12:
  uint64_t v30 = a3[19];
  uint64_t v31 = a3[20];
  uint64_t v32 = (uint64_t)a1 + v30;
  uint64_t v33 = (uint64_t)a2 + v30;
  *(void *)uint64_t v32 = *(void *)v33;
  *(_BYTE *)(v32 + _Block_object_dispose(va, 8) = *(_BYTE *)(v33 + 8);
  __int128 v34 = (char *)a1 + v31;
  __int128 v35 = (char *)a2 + v31;
  uint64_t v36 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1LL, v36);
  int v40 = v38(v35, 1LL, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v36);
      goto LABEL_18;
    }

    goto LABEL_17;
  }

  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v36);
LABEL_17:
    uint64_t v41 = sub_10000E624(&qword_1000B0118);
    memcpy(v34, v35, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_18;
  }

  (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_18:
  uint64_t v42 = a3[21];
  uint64_t v43 = a3[22];
  uint64_t v44 = (uint64_t)a1 + v42;
  uint64_t v45 = (uint64_t)a2 + v42;
  *(void *)uint64_t v44 = *(void *)v45;
  *(_BYTE *)(v44 + _Block_object_dispose(va, 8) = *(_BYTE *)(v45 + 8);
  uint64_t v46 = (uint64_t *)((char *)a1 + v43);
  uint64_t v47 = (uint64_t *)((char *)a2 + v43);
  uint64_t v49 = *v47;
  uint64_t v48 = v47[1];
  uint64_t v50 = v46[1];
  *uint64_t v46 = v49;
  v46[1] = v48;
  swift_bridgeObjectRelease(v50);
  uint64_t v51 = a3[23];
  uint64_t v52 = (uint64_t *)((char *)a1 + v51);
  uint64_t v53 = (uint64_t *)((char *)a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  uint64_t v56 = v52[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease(v56);
  uint64_t v57 = a3[24];
  uint64_t v58 = (uint64_t *)((char *)a1 + v57);
  uint64_t v59 = (uint64_t *)((char *)a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  uint64_t v62 = v58[1];
  void *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease(v62);
  uint64_t v63 = a3[25];
  uint64_t v64 = a3[26];
  uint64_t v65 = (uint64_t)a1 + v63;
  uint64_t v66 = (uint64_t)a2 + v63;
  *(void *)uint64_t v65 = *(void *)v66;
  *(_BYTE *)(v65 + _Block_object_dispose(va, 8) = *(_BYTE *)(v66 + 8);
  uint64_t v67 = (uint64_t *)((char *)a1 + v64);
  __int128 v68 = (uint64_t *)((char *)a2 + v64);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  uint64_t v71 = v67[1];
  *uint64_t v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease(v71);
  uint64_t v72 = a3[27];
  uint64_t v73 = (uint64_t)a1 + v72;
  uint64_t v74 = (uint64_t)a2 + v72;
  unint64_t v75 = *(uint64_t *)((char *)a1 + v72 + 8);
  if (v75 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    goto LABEL_23;
  }

  unint64_t v76 = *(void *)(v74 + 8);
  if (v76 >> 60 == 15)
  {
    sub_100033BD0(v73);
    goto LABEL_21;
  }

  uint64_t v77 = *(void *)v73;
  *(void *)uint64_t v73 = *(void *)v74;
  *(void *)(v73 + _Block_object_dispose(va, 8) = v76;
  sub_100012B54(v77, v75);
LABEL_23:
  uint64_t v78 = a3[28];
  uint64_t v79 = (uint64_t)a1 + v78;
  uint64_t v80 = (uint64_t)a2 + v78;
  uint64_t v81 = *(uint64_t *)((char *)a1 + v78 + 8);
  if (v81 == 1)
  {
LABEL_26:
    __int128 v83 = *(_OWORD *)(v80 + 48);
    *(_OWORD *)(v79 + 32) = *(_OWORD *)(v80 + 32);
    *(_OWORD *)(v79 + 4_Block_object_dispose(va, 8) = v83;
    *(void *)(v79 + 61) = *(void *)(v80 + 61);
    __int128 v84 = *(_OWORD *)(v80 + 16);
    *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    *(_OWORD *)(v79 + 16) = v84;
    goto LABEL_40;
  }

  uint64_t v82 = *(void *)(v80 + 8);
  if (v82 == 1)
  {
    sub_10007D4C8((void *)v79);
    goto LABEL_26;
  }

  *(void *)uint64_t v79 = *(void *)v80;
  *(void *)(v79 + _Block_object_dispose(va, 8) = v82;
  swift_bridgeObjectRelease(v81);
  uint64_t v85 = (_OWORD *)(v80 + 16);
  unint64_t v86 = *(void *)(v79 + 24);
  if (v86 >> 60 == 15) {
    goto LABEL_30;
  }
  unint64_t v87 = *(void *)(v80 + 24);
  if (v87 >> 60 == 15)
  {
    sub_100033BD0(v79 + 16);
LABEL_30:
    *(_OWORD *)(v79 + 16) = *v85;
    goto LABEL_34;
  }

  uint64_t v88 = *(void *)(v79 + 16);
  *(void *)(v79 + 16) = *(void *)v85;
  *(void *)(v79 + 24) = v87;
  sub_100012B54(v88, v86);
LABEL_34:
  uint64_t v89 = *(void *)(v80 + 40);
  uint64_t v90 = *(void *)(v79 + 40);
  *(void *)(v79 + 32) = *(void *)(v80 + 32);
  *(void *)(v79 + 40) = v89;
  swift_bridgeObjectRelease(v90);
  __int128 v91 = (void *)(v80 + 48);
  unint64_t v92 = *(void *)(v79 + 56);
  if (v92 >> 60 != 15)
  {
    unint64_t v93 = *(void *)(v80 + 56);
    if (v93 >> 60 != 15)
    {
      uint64_t v94 = *(void *)(v79 + 48);
      *(void *)(v79 + 4_Block_object_dispose(va, 8) = *v91;
      *(void *)(v79 + 56) = v93;
      sub_100012B54(v94, v92);
      goto LABEL_39;
    }

    sub_100033BD0(v79 + 48);
  }

  *(_OWORD *)(v79 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v91;
LABEL_39:
  *(_DWORD *)(v79 + 64) = *(_DWORD *)(v80 + 64);
  *(_BYTE *)(v79 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(v80 + 68);
LABEL_40:
  uint64_t v95 = a3[29];
  uint64_t v96 = (uint64_t)a1 + v95;
  uint64_t v97 = (uint64_t)a2 + v95;
  unint64_t v98 = *(uint64_t *)((char *)a1 + v95 + 8);
  if (v98 >> 60 == 15)
  {
LABEL_43:
    *(_OWORD *)uint64_t v96 = *(_OWORD *)v97;
    goto LABEL_45;
  }

  unint64_t v99 = *(void *)(v97 + 8);
  if (v99 >> 60 == 15)
  {
    sub_100033BD0(v96);
    goto LABEL_43;
  }

  uint64_t v100 = *(void *)v96;
  *(void *)uint64_t v96 = *(void *)v97;
  *(void *)(v96 + _Block_object_dispose(va, 8) = v99;
  sub_100012B54(v100, v98);
LABEL_45:
  uint64_t v101 = a3[30];
  uint64_t v102 = (uint64_t)a1 + v101;
  uint64_t v103 = (uint64_t)a2 + v101;
  unint64_t v104 = *(uint64_t *)((char *)a1 + v101 + 8);
  if (v104 >> 60 == 15)
  {
LABEL_48:
    *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
    goto LABEL_50;
  }

  unint64_t v105 = *(void *)(v103 + 8);
  if (v105 >> 60 == 15)
  {
    sub_100033BD0(v102);
    goto LABEL_48;
  }

  uint64_t v106 = *(void *)v102;
  *(void *)uint64_t v102 = *(void *)v103;
  *(void *)(v102 + _Block_object_dispose(va, 8) = v105;
  sub_100012B54(v106, v104);
LABEL_50:
  uint64_t v107 = a3[31];
  unint64_t v108 = (uint64_t *)((char *)a1 + v107);
  uint64_t v109 = (uint64_t *)((char *)a2 + v107);
  uint64_t v111 = *v109;
  uint64_t v110 = v109[1];
  uint64_t v112 = v108[1];
  *unint64_t v108 = v111;
  v108[1] = v110;
  swift_bridgeObjectRelease(v112);
  uint64_t v113 = a3[32];
  unint64_t v114 = (uint64_t *)((char *)a1 + v113);
  int v115 = (uint64_t *)((char *)a2 + v113);
  uint64_t v117 = *v115;
  uint64_t v116 = v115[1];
  uint64_t v118 = v114[1];
  *unint64_t v114 = v117;
  v114[1] = v116;
  swift_bridgeObjectRelease(v118);
  uint64_t v119 = a3[33];
  uint64_t v120 = (uint64_t *)((char *)a1 + v119);
  uint64_t v121 = (uint64_t *)((char *)a2 + v119);
  uint64_t v123 = *v121;
  uint64_t v122 = v121[1];
  uint64_t v124 = v120[1];
  *uint64_t v120 = v123;
  v120[1] = v122;
  swift_bridgeObjectRelease(v124);
  uint64_t v125 = a3[34];
  uint64_t v126 = (uint64_t)a1 + v125;
  uint64_t v127 = (uint64_t)a2 + v125;
  unint64_t v128 = *(uint64_t *)((char *)a1 + v125 + 8);
  if (v128 >> 60 == 15)
  {
LABEL_53:
    *(_OWORD *)uint64_t v126 = *(_OWORD *)v127;
    goto LABEL_55;
  }

  unint64_t v129 = *(void *)(v127 + 8);
  if (v129 >> 60 == 15)
  {
    sub_100033BD0(v126);
    goto LABEL_53;
  }

  uint64_t v130 = *(void *)v126;
  *(void *)uint64_t v126 = *(void *)v127;
  *(void *)(v126 + _Block_object_dispose(va, 8) = v129;
  sub_100012B54(v130, v128);
LABEL_55:
  uint64_t v131 = a3[35];
  uint64_t v132 = (uint64_t)a1 + v131;
  uint64_t v133 = (uint64_t)a2 + v131;
  unint64_t v134 = *(uint64_t *)((char *)a1 + v131 + 8);
  if (v134 >> 60 == 15)
  {
LABEL_58:
    *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
    goto LABEL_60;
  }

  unint64_t v135 = *(void *)(v133 + 8);
  if (v135 >> 60 == 15)
  {
    sub_100033BD0(v132);
    goto LABEL_58;
  }

  uint64_t v136 = *(void *)v132;
  *(void *)uint64_t v132 = *(void *)v133;
  *(void *)(v132 + _Block_object_dispose(va, 8) = v135;
  sub_100012B54(v136, v134);
LABEL_60:
  uint64_t v137 = a3[36];
  uint64_t v138 = (uint64_t *)((char *)a1 + v137);
  uint64_t v139 = (uint64_t *)((char *)a2 + v137);
  uint64_t v141 = *v139;
  uint64_t v140 = v139[1];
  uint64_t v142 = v138[1];
  *uint64_t v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease(v142);
  uint64_t v143 = a3[37];
  uint64_t v144 = (uint64_t)a1 + v143;
  uint64_t v145 = (uint64_t)a2 + v143;
  unint64_t v146 = *(uint64_t *)((char *)a1 + v143 + 8);
  if (v146 >> 60 == 15)
  {
LABEL_63:
    *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
    goto LABEL_65;
  }

  unint64_t v147 = *(void *)(v145 + 8);
  if (v147 >> 60 == 15)
  {
    sub_100033BD0(v144);
    goto LABEL_63;
  }

  uint64_t v148 = *(void *)v144;
  *(void *)uint64_t v144 = *(void *)v145;
  *(void *)(v144 + _Block_object_dispose(va, 8) = v147;
  sub_100012B54(v148, v146);
LABEL_65:
  uint64_t v149 = a3[38];
  unint64_t v150 = (uint64_t *)((char *)a1 + v149);
  uint64_t v151 = (uint64_t *)((char *)a2 + v149);
  uint64_t v153 = *v151;
  uint64_t v152 = v151[1];
  uint64_t v154 = v150[1];
  *unint64_t v150 = v153;
  v150[1] = v152;
  swift_bridgeObjectRelease(v154);
  uint64_t v155 = a3[39];
  uint64_t v156 = a3[40];
  uint64_t v157 = (uint64_t)a1 + v155;
  uint64_t v158 = (uint64_t)a2 + v155;
  *(void *)uint64_t v157 = *(void *)v158;
  *(_BYTE *)(v157 + _Block_object_dispose(va, 8) = *(_BYTE *)(v158 + 8);
  uint64_t v159 = (uint64_t *)((char *)a1 + v156);
  uint64_t v160 = (uint64_t *)((char *)a2 + v156);
  uint64_t v162 = *v160;
  uint64_t v161 = v160[1];
  uint64_t v163 = v159[1];
  *uint64_t v159 = v162;
  v159[1] = v161;
  swift_bridgeObjectRelease(v163);
  uint64_t v164 = a3[41];
  uint64_t v165 = (uint64_t)a1 + v164;
  uint64_t v166 = (uint64_t)a2 + v164;
  unint64_t v167 = *(uint64_t *)((char *)a1 + v164 + 8);
  if (v167 >> 60 == 15)
  {
LABEL_68:
    *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
    goto LABEL_70;
  }

  unint64_t v168 = *(void *)(v166 + 8);
  if (v168 >> 60 == 15)
  {
    sub_100033BD0(v165);
    goto LABEL_68;
  }

  uint64_t v169 = *(void *)v165;
  *(void *)uint64_t v165 = *(void *)v166;
  *(void *)(v165 + _Block_object_dispose(va, 8) = v168;
  sub_100012B54(v169, v167);
LABEL_70:
  uint64_t v170 = a3[42];
  uint64_t v171 = (uint64_t)a1 + v170;
  uint64_t v172 = (uint64_t)a2 + v170;
  unint64_t v173 = *(uint64_t *)((char *)a1 + v170 + 8);
  if (v173 >> 60 == 15)
  {
LABEL_73:
    *(_OWORD *)uint64_t v171 = *(_OWORD *)v172;
    goto LABEL_75;
  }

  unint64_t v174 = *(void *)(v172 + 8);
  if (v174 >> 60 == 15)
  {
    sub_100033BD0(v171);
    goto LABEL_73;
  }

  uint64_t v175 = *(void *)v171;
  *(void *)uint64_t v171 = *(void *)v172;
  *(void *)(v171 + _Block_object_dispose(va, 8) = v174;
  sub_100012B54(v175, v173);
LABEL_75:
  uint64_t v176 = a3[43];
  uint64_t v177 = (uint64_t *)((char *)a1 + v176);
  uint64_t v178 = (uint64_t *)((char *)a2 + v176);
  unint64_t v179 = *(uint64_t *)((char *)a1 + v176 + 8);
  if (v179 >> 60 != 15)
  {
    unint64_t v180 = v178[1];
    if (v180 >> 60 != 15)
    {
      uint64_t v181 = *v177;
      *uint64_t v177 = *v178;
      v177[1] = v180;
      sub_100012B54(v181, v179);
      goto LABEL_80;
    }

    sub_100033BD0((uint64_t)v177);
  }

  *(_OWORD *)uint64_t v177 = *(_OWORD *)v178;
LABEL_80:
  uint64_t v182 = a3[44];
  uint64_t v183 = (uint64_t *)((char *)a1 + v182);
  uint64_t v184 = (uint64_t *)((char *)a2 + v182);
  uint64_t v186 = *v184;
  uint64_t v185 = v184[1];
  uint64_t v187 = v183[1];
  *uint64_t v183 = v186;
  v183[1] = v185;
  swift_bridgeObjectRelease(v187);
  uint64_t v188 = a3[45];
  uint64_t v189 = (uint64_t *)((char *)a1 + v188);
  uint64_t v190 = (uint64_t *)((char *)a2 + v188);
  uint64_t v192 = *v190;
  uint64_t v191 = v190[1];
  uint64_t v193 = v189[1];
  *uint64_t v189 = v192;
  v189[1] = v191;
  swift_bridgeObjectRelease(v193);
  uint64_t v194 = a3[46];
  uint64_t v195 = (uint64_t *)((char *)a1 + v194);
  uint64_t v196 = (uint64_t *)((char *)a2 + v194);
  uint64_t v198 = *v196;
  uint64_t v197 = v196[1];
  uint64_t v199 = v195[1];
  *uint64_t v195 = v198;
  v195[1] = v197;
  swift_bridgeObjectRelease(v199);
  uint64_t v200 = a3[47];
  unint64_t v201 = (uint64_t *)((char *)a1 + v200);
  uint64_t v202 = (uint64_t *)((char *)a2 + v200);
  uint64_t v204 = *v202;
  uint64_t v203 = v202[1];
  uint64_t v205 = v201[1];
  *unint64_t v201 = v204;
  v201[1] = v203;
  swift_bridgeObjectRelease(v205);
  uint64_t v206 = a3[48];
  uint64_t v207 = (uint64_t *)((char *)a1 + v206);
  int v208 = (uint64_t *)((char *)a2 + v206);
  uint64_t v210 = *v208;
  uint64_t v209 = v208[1];
  uint64_t v211 = v207[1];
  *uint64_t v207 = v210;
  v207[1] = v209;
  swift_bridgeObjectRelease(v211);
  uint64_t v212 = a3[50];
  *((_BYTE *)a1 + a3[49]) = *((_BYTE *)a2 + a3[49]);
  unint64_t v213 = (uint64_t *)((char *)a1 + v212);
  uint64_t v214 = (uint64_t *)((char *)a2 + v212);
  uint64_t v216 = *v214;
  uint64_t v215 = v214[1];
  uint64_t v217 = v213[1];
  *unint64_t v213 = v216;
  v213[1] = v215;
  swift_bridgeObjectRelease(v217);
  uint64_t v218 = a3[51];
  uint64_t v219 = a3[52];
  uint64_t v220 = (uint64_t)a1 + v218;
  uint64_t v221 = (uint64_t)a2 + v218;
  *(void *)uint64_t v220 = *(void *)v221;
  *(_BYTE *)(v220 + _Block_object_dispose(va, 8) = *(_BYTE *)(v221 + 8);
  uint64_t v222 = (uint64_t *)((char *)a1 + v219);
  uint64_t v223 = (uint64_t *)((char *)a2 + v219);
  uint64_t v225 = *v223;
  uint64_t v224 = v223[1];
  uint64_t v226 = v222[1];
  *uint64_t v222 = v225;
  v222[1] = v224;
  swift_bridgeObjectRelease(v226);
  uint64_t v227 = a3[53];
  uint64_t v228 = (uint64_t *)((char *)a1 + v227);
  uint64_t v229 = (uint64_t *)((char *)a2 + v227);
  uint64_t v231 = *v229;
  uint64_t v230 = v229[1];
  uint64_t v232 = v228[1];
  *uint64_t v228 = v231;
  v228[1] = v230;
  swift_bridgeObjectRelease(v232);
  uint64_t v233 = a3[54];
  uint64_t v234 = a3[55];
  uint64_t v235 = (uint64_t)a1 + v233;
  uint64_t v236 = (uint64_t)a2 + v233;
  *(void *)uint64_t v235 = *(void *)v236;
  *(_BYTE *)(v235 + _Block_object_dispose(va, 8) = *(_BYTE *)(v236 + 8);
  uint64_t v237 = (uint64_t)a1 + v234;
  uint64_t v238 = (uint64_t)a2 + v234;
  *(void *)uint64_t v237 = *(void *)v238;
  *(_BYTE *)(v237 + _Block_object_dispose(va, 8) = *(_BYTE *)(v238 + 8);
  uint64_t v239 = a3[56];
  uint64_t v240 = (uint64_t *)((char *)a1 + v239);
  uint64_t v241 = (uint64_t *)((char *)a2 + v239);
  uint64_t v243 = *v241;
  uint64_t v242 = v241[1];
  uint64_t v244 = v240[1];
  *uint64_t v240 = v243;
  v240[1] = v242;
  swift_bridgeObjectRelease(v244);
  uint64_t v245 = a3[57];
  uint64_t v246 = *(uint64_t *)((char *)a1 + v245);
  *(uint64_t *)((char *)a1 + v245) = *(uint64_t *)((char *)a2 + v245);
  swift_bridgeObjectRelease(v246);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessageDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007E200);
}

uint64_t sub_10007E200(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_10000E624(&qword_1000B0000);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = *(int *)(a3 + 72);
    }

    else
    {
      uint64_t v11 = sub_10000E624(&qword_1000B0118);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a3 + 80);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }

uint64_t storeEnumTagSinglePayload for MessageDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10007E2C0);
}

char *sub_10007E2C0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)double result = a2;
  }

  else
  {
    uint64_t v8 = sub_10000E624(&qword_1000B0000);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 72);
    }

    else
    {
      uint64_t v10 = sub_10000E624(&qword_1000B0118);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 80);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_10007E364(uint64_t a1)
{
  _OWORD v6[2] = &unk_1000926B0;
  _OWORD v6[3] = &unk_1000926B0;
  _OWORD v6[4] = &unk_1000926B0;
  v6[5] = &unk_1000926C8;
  v6[6] = &unk_1000926C8;
  v6[7] = &unk_1000926E0;
  v6[8] = &unk_1000926C8;
  void v6[9] = &unk_1000926C8;
  v6[10] = &unk_1000926C8;
  v6[11] = &unk_1000926C8;
  v6[12] = &unk_1000926F8;
  v6[13] = &unk_1000926B0;
  sub_100048A78( 319LL,  (unint64_t *)&unk_1000B15E0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[14] = *(void *)(v2 - 8) + 64LL;
    v6[15] = &unk_1000926F8;
    sub_100048A78( 319LL,  (unint64_t *)&unk_1000B0D18,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      _BYTE v6[16] = *(void *)(v4 - 8) + 64LL;
      v6[17] = &unk_1000926F8;
      v6[18] = &unk_1000926B0;
      v6[19] = &unk_1000926B0;
      v6[20] = &unk_1000926B0;
      v6[21] = &unk_1000926F8;
      v6[22] = &unk_1000926B0;
      v6[23] = &unk_1000926E0;
      v6[24] = &unk_100092710;
      v6[25] = &unk_1000926E0;
      v6[26] = &unk_1000926E0;
      void v6[27] = &unk_1000926B0;
      v6[28] = &unk_1000926B0;
      v6[29] = &unk_1000926B0;
      v6[30] = &unk_1000926E0;
      v6[31] = &unk_1000926E0;
      v6[32] = &unk_1000926B0;
      v6[33] = &unk_1000926E0;
      v6[34] = &unk_1000926B0;
      v6[35] = &unk_1000926F8;
      v6[36] = &unk_1000926B0;
      v6[37] = &unk_1000926E0;
      v6[38] = &unk_1000926E0;
      v6[39] = &unk_1000926E0;
      v6[40] = &unk_1000926B0;
      v6[41] = &unk_1000926B0;
      v6[42] = &unk_1000926B0;
      v6[43] = &unk_1000926B0;
      v6[44] = &unk_1000926B0;
      v6[45] = &unk_1000926C8;
      v6[46] = &unk_1000926B0;
      v6[47] = &unk_1000926F8;
      v6[48] = &unk_1000926B0;
      v6[49] = &unk_1000926B0;
      v6[50] = &unk_1000926F8;
      v6[51] = &unk_1000926F8;
      v6[52] = &unk_1000926B0;
      v6[53] = "\b";
      swift_initStructMetadata(a1, 256LL, 54LL, v6, a1 + 16);
    }
  }

uint64_t getEnumTagSinglePayload for MessageDictionary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xCB) {
    goto LABEL_17;
  }
  if (a2 + 53 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 53) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 53;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 53;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 53;
    }
  }

uint64_t storeEnumTagSinglePayload for MessageDictionary.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 53 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 53) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xCB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xCA) {
    return ((uint64_t (*)(void))((char *)&loc_10007E58C + 4 * byte_10009234B[v4]))();
  }
  *a1 = a2 + 53;
  return ((uint64_t (*)(void))((char *)sub_10007E5C0 + 4 * byte_100092346[v4]))();
}

uint64_t sub_10007E5C0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007E5C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007E5D0LL);
  }
  return result;
}

uint64_t sub_10007E5DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007E5E4LL);
  }
  *(_BYTE *)double result = a2 + 53;
  return result;
}

uint64_t sub_10007E5E8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007E5F0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageDictionary.CodingKeys()
{
  return &type metadata for MessageDictionary.CodingKeys;
}

void destroy for BalloonPluginPayloadAttachment(void *a1)
{
  unint64_t v2 = a1[3];
  if (v2 >> 60 != 15) {
    sub_100012B54(a1[2], v2);
  }
  swift_bridgeObjectRelease(a1[5]);
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    sub_100012B54(a1[6], v3);
  }
}

uint64_t initializeWithCopy for BalloonPluginPayloadAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  unint64_t v5 = (_OWORD *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }

  else
  {
    uint64_t v7 = *(void *)v5;
    sub_100012A64(v7, v6);
    *(void *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v6;
  }

  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = (_OWORD *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain(v8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *v9;
  }

  else
  {
    uint64_t v11 = *(void *)v9;
    sub_100012A64(v11, v10);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v11;
    *(void *)(a1 + 56) = v10;
  }

  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t assignWithCopy for BalloonPluginPayloadAttachment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = (uint64_t *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 == 15LL)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100012A64(*v6, *(void *)(a2 + 24));
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v7;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v7 >> 60 == 15)
  {
    sub_100033BD0(a1 + 16);
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
    goto LABEL_8;
  }

  uint64_t v9 = *v6;
  sub_100012A64(*v6, *(void *)(a2 + 24));
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v7;
  sub_100012B54(v10, v11);
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = (uint64_t *)(a2 + 48);
  unint64_t v15 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 != 15LL)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v17 = *v14;
      sub_100012A64(*v14, *(void *)(a2 + 56));
      uint64_t v18 = *(void *)(a1 + 48);
      unint64_t v19 = *(void *)(a1 + 56);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v17;
      *(void *)(a1 + 56) = v15;
      sub_100012B54(v18, v19);
      goto LABEL_15;
    }

    sub_100033BD0(a1 + 48);
    goto LABEL_13;
  }

  if (v15 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v14;
    goto LABEL_15;
  }

  uint64_t v16 = *v14;
  sub_100012A64(*v14, *(void *)(a2 + 56));
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = v16;
  *(void *)(a1 + 56) = v15;
LABEL_15:
  int v20 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v20;
  return a1;
}

uint64_t assignWithTake for BalloonPluginPayloadAttachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  unint64_t v6 = (_OWORD *)(a2 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 24);
  if (v8 >> 60 == 15)
  {
    sub_100033BD0(a1 + 16);
LABEL_4:
    *(_OWORD *)(a1 + 16) = *v6;
    goto LABEL_6;
  }

  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v6;
  *(void *)(a1 + 24) = v8;
  sub_100012B54(v9, v7);
LABEL_6:
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = (void *)(a2 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = *(void *)(a2 + 56);
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = *v12;
      *(void *)(a1 + 56) = v14;
      sub_100012B54(v15, v13);
      goto LABEL_11;
    }

    sub_100033BD0(a1 + 48);
  }

  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v12;
LABEL_11:
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 6_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for BalloonPluginPayloadAttachment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 69)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BalloonPluginPayloadAttachment( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(_BYTE *)(result + 6_Block_object_dispose(va, 8) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(void *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 69) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 69) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(va, 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for BalloonPluginPayloadAttachment()
{
  return &type metadata for BalloonPluginPayloadAttachment;
}

uint64_t storeEnumTagSinglePayload for BalloonPluginPayloadAttachment.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10007EAC8 + 4 * byte_100092355[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10007EAFC + 4 * byte_100092350[v4]))();
}

uint64_t sub_10007EAFC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007EB04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10007EB0CLL);
  }
  return result;
}

uint64_t sub_10007EB18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10007EB20LL);
  }
  *(_BYTE *)double result = a2 + 4;
  return result;
}

uint64_t sub_10007EB24(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007EB2C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BalloonPluginPayloadAttachment.CodingKeys()
{
  return &type metadata for BalloonPluginPayloadAttachment.CodingKeys;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandUnpacker()
{
  return &type metadata for RepositionStickerCommandUnpacker;
}

unint64_t sub_10007EB58(uint64_t a1)
{
  unint64_t result = sub_10000E6EC();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10007EB7C()
{
  return sub_10000E9D8( &qword_1000B16E8,  (uint64_t (*)(uint64_t))&type metadata accessor for RepositionStickerCommand,  (uint64_t)&protocol conformance descriptor for RepositionStickerCommand);
}

uint64_t sub_10007EBA8@<X0>(uint64_t a1@<X8>)
{
  v44[8] = a1;
  uint64_t v1 = sub_10000E624(&qword_1000AFFA8);
  __chkstk_darwin(v1);
  v44[10] = (char *)v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for DecodingError(0LL);
  v44[13] = *(void *)(v45 - 8);
  uint64_t v3 = __chkstk_darwin(v45);
  v44[11] = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  v44[15] = (char *)v44 - v6;
  __chkstk_darwin(v5);
  v44[14] = (char *)v44 - v7;
  uint64_t v8 = sub_10000E624(&qword_1000B0000);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Metadata(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  v44[5] = (char *)v44 - v16;
  uint64_t v17 = type metadata accessor for StickerAttachmentInfo(0LL);
  v44[6] = *(void *)(v17 - 8);
  v44[7] = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  _BYTE v44[4] = (char *)v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  v44[12] = (char *)v44 - v20;
  uint64_t v21 = sub_10000E624(&qword_1000AFFB0);
  __chkstk_darwin(v21);
  uint64_t v47 = (char *)v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = type metadata accessor for TopLevelDictionary.CodingKeys(0LL);
  __chkstk_darwin(v46);
  uint64_t v51 = type metadata accessor for Explosion(0LL);
  uint64_t v49 = *(void *)(v51 - 8);
  uint64_t v23 = __chkstk_darwin(v51);
  uint64_t v48 = (char *)v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = TopLevelDictionary.decryptedData.getter(v23);
  if (v26 >> 60 != 15)
  {
    _OWORD v44[2] = v25;
    v44[3] = v26;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v41 = -[objc_class _imOptionallyDecompressData](isa, "_imOptionallyDecompressData");

    static Data._unconditionallyBridgeFromObjectiveC(_:)(v41);
    uint64_t v43 = v42;

    uint64_t v50 = v43;
    __asm { BR              X10 }
  }

  sub_100012C44();
  int v27 = (void *)static OS_os_log.textMessageUnpacker.getter();
  uint64_t v28 = sub_10000E624(&qword_1000AFF48);
  uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
  *(_OWORD *)(v29 + 16) = xmmword_10008D7D0;
  uint64_t v30 = TopLevelDictionary.metadata.getter(v29);
  Metadata.messageGUID.getter(v30);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v10, 0LL, 1LL, v31);
  uint64_t v32 = >> prefix<A>(_:)(v10);
  uint64_t v34 = v33;
  sub_100012EF8((uint64_t)v10, &qword_1000B0000);
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v35 = sub_100012CDC();
  *(void *)(v29 + 64) = v35;
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  uint64_t v36 = static os_log_type_t.default.getter(v35);
  os_log(_:dso:log:type:_:)( "Missing encrypted data (repositionCommandGUID: %@)",  50LL,  2LL,  &_mh_execute_header,  v27,  v36,  v29);

  swift_bridgeObjectRelease(v29);
  unint64_t v37 = sub_10007FE70();
  uint64_t v38 = swift_allocError(&type metadata for RepositionStickerCommandUnpacker.EncryptedMessageMissingData, v37, 0LL, 0LL);
  return swift_willThrow(v38);
}

uint64_t sub_10007F964()
{
  if (*((_BYTE *)v0 + 72)) {
    uint64_t v1 = 0LL;
  }
  else {
    uint64_t v1 = v0[8];
  }
  if (v1 < 0) {
    goto LABEL_15;
  }
  if ((v0[11] & 1) == 0)
  {
    uint64_t v2 = v0[10];
    if ((v2 & 0x8000000000000000LL) == 0) {
      goto LABEL_8;
    }
LABEL_15:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
    return result;
  }

  uint64_t v2 = 0LL;
LABEL_8:
  sub_10008003C((uint64_t)(v0 + 14), (uint64_t)v27);
  sub_10008003C((uint64_t)v27, (uint64_t)&v28);
  if ((v29 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v3 = v28;
  sub_10008003C((uint64_t)(v0 + 16), (uint64_t)v26);
  sub_10008003C((uint64_t)v26, (uint64_t)&v30);
  if ((v31 & 1) != 0
    || (uint64_t v4 = v30,
        sub_10008003C((uint64_t)(v0 + 18), (uint64_t)v25),
        sub_10008003C((uint64_t)v25, (uint64_t)&v32),
        (v33 & 1) != 0)
    || (uint64_t v5 = v32,
        sub_10008003C((uint64_t)(v0 + 20), (uint64_t)v24),
        sub_10008003C((uint64_t)v24, (uint64_t)&v34),
        (v35 & 1) != 0)
    || (v0[23] & 1) != 0)
  {
LABEL_13:
    unint64_t v6 = sub_100080084();
    uint64_t v7 = swift_allocError(&type metadata for RepositionStickerCommandContents.UnpackingError, v6, 0LL, 0LL);
    return swift_willThrow(v7);
  }

  else
  {
    uint64_t v17 = v0[22];
    uint64_t v18 = v34;
    uint64_t v9 = v0[1];
    uint64_t v36 = *v0;
    uint64_t v10 = v0[3];
    uint64_t v11 = v0[5];
    uint64_t v22 = v0[4];
    uint64_t v23 = v0[2];
    uint64_t v21 = v0[24];
    uint64_t v19 = v9;
    uint64_t v20 = v0[6];
    uint64_t v14 = v0[25];
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[12];
    char v12 = *((_BYTE *)v0 + 104);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    return StickerAttachmentInfo.init(with:stickerPackIdentifier:stickerHash:stickerExternalURI:balloonBundleID:positionIntent:associatedPositionIntent:parentPreviewWidth:stickerOffset:stickerScale:stickerRotation:isReaction:stickerPositionVersion:)( v36,  v19,  v23,  v10,  v22,  v11,  v21,  v14,  v20,  v13,  v1,  0,  v2,  0,  v16,  v12,  v3,  v4,  0,  v5,  0,  v18,  0,  v17,  0);
  }

uint64_t sub_10007FBCC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B1728);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_100081380();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RepositionStickerCommandContents.CodingKeys,  &type metadata for RepositionStickerCommandContents.CodingKeys,  v11,  v9,  v10);
  __int128 v12 = v3[11];
  v24[10] = v3[10];
  v24[11] = v12;
  v24[12] = v3[12];
  __int128 v13 = v3[7];
  v24[6] = v3[6];
  v24[7] = v13;
  __int128 v14 = v3[9];
  v24[8] = v3[8];
  v24[9] = v14;
  __int128 v15 = v3[3];
  _OWORD v24[2] = v3[2];
  __int128 v16 = v3[4];
  v24[5] = v3[5];
  v24[3] = v15;
  v24[4] = v16;
  __int128 v17 = *v3;
  v24[1] = v3[1];
  v24[0] = v17;
  char v23 = 0;
  unint64_t v18 = sub_10008147C();
  KeyedEncodingContainer.encode<A>(_:forKey:)( v24,  &v23,  v5,  &type metadata for RepositionStickerCommandStickerContents,  v18);
  if (!v2)
  {
    uint64_t v19 = *((void *)v3 + 26);
    uint64_t v20 = *((void *)v3 + 27);
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, v24, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10007FD50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v6 = type metadata accessor for TopLevelDictionary(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v12 = PropertyListDecoder.init()(v11);
  uint64_t v13 = sub_10000E9D8( &qword_1000AFFA0,  (uint64_t (*)(uint64_t))&type metadata accessor for TopLevelDictionary,  (uint64_t)&protocol conformance descriptor for TopLevelDictionary);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a1, a2, v6, v13);
  uint64_t result = swift_release(v12);
  if (!v3)
  {
    sub_10007EBA8(v16);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return result;
}

unint64_t sub_10007FE70()
{
  unint64_t result = qword_1000B16F0;
  if (!qword_1000B16F0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10009292C,  &type metadata for RepositionStickerCommandUnpacker.EncryptedMessageMissingData);
    atomic_store(result, (unint64_t *)&qword_1000B16F0);
  }

  return result;
}

unint64_t sub_10007FEB4()
{
  unint64_t result = qword_1000B16F8;
  if (!qword_1000B16F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092904, &type metadata for RepositionStickerCommandContents);
    atomic_store(result, (unint64_t *)&qword_1000B16F8);
  }

  return result;
}

void *sub_10007FEF8(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[25];
  swift_bridgeObjectRelease(a1[27]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *sub_10007FF6C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRetain(a1[25]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *sub_10007FFD4(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[25];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_10008003C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000E624(&qword_1000B1700);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100080084()
{
  unint64_t result = qword_1000B1708;
  if (!qword_1000B1708)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000928C4, &type metadata for RepositionStickerCommandContents.UnpackingError);
    atomic_store(result, (unint64_t *)&qword_1000B1708);
  }

  return result;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandContents.UnpackingError()
{
  return &type metadata for RepositionStickerCommandContents.UnpackingError;
}

uint64_t destroy for RepositionStickerCommandContents(void *a1)
{
  return swift_bridgeObjectRelease(a1[27]);
}

uint64_t initializeWithCopy for RepositionStickerCommandContents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_WORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v8;
  uint64_t v9 = *(void *)(a2 + 216);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for RepositionStickerCommandContents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v12;
  uint64_t v13 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v13;
  uint64_t v14 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v14;
  uint64_t v15 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v15;
  uint64_t v16 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v16;
  uint64_t v17 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v17;
  uint64_t v18 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 16_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v18;
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  uint64_t v19 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v20 = *(void *)(a2 + 200);
  uint64_t v21 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = *(void *)(a2 + 208);
  uint64_t v22 = *(void *)(a2 + 216);
  uint64_t v23 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

__n128 initializeWithTake for RepositionStickerCommandContents(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 20_Block_object_dispose(va, 8) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t assignWithTake for RepositionStickerCommandContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v12 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v12;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_WORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 200);
  uint64_t v14 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 216);
  uint64_t v16 = *(void *)(a1 + 216);
  *(void *)(a1 + 20_Block_object_dispose(va, 8) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v15;
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepositionStickerCommandContents(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 224)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepositionStickerCommandContents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 216) = 0LL;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 224) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 224) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandContents()
{
  return &type metadata for RepositionStickerCommandContents;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandUnpacker.EncryptedMessageMissingData()
{
  return &type metadata for RepositionStickerCommandUnpacker.EncryptedMessageMissingData;
}

uint64_t sub_1000805C0(char *a1, char *a2)
{
  return sub_10003FC24(*a1, *a2);
}

Swift::Int sub_1000805CC()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    uint64_t v2 = 1734959987LL;
  }
  else {
    uint64_t v2 = 1768977011LL;
  }
  String.hash(into:)(v4, v2, 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_100080630(uint64_t a1)
{
  if (*v1) {
    uint64_t v2 = 1734959987LL;
  }
  else {
    uint64_t v2 = 1768977011LL;
  }
  String.hash(into:)(a1, v2, 0xE400000000000000LL);
  return swift_bridgeObjectRelease(0xE400000000000000LL);
}

Swift::Int sub_100080668(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    uint64_t v3 = 1734959987LL;
  }
  else {
    uint64_t v3 = 1768977011LL;
  }
  String.hash(into:)(v5, v3, 0xE400000000000000LL);
  swift_bridgeObjectRelease(0xE400000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1000806C8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A45F0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100080724(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1768977011LL;
  if (*v1) {
    uint64_t v2 = 1734959987LL;
  }
  *a1 = v2;
  a1[1] = 0xE400000000000000LL;
}

uint64_t sub_10008074C()
{
  if (*v0) {
    return 1734959987LL;
  }
  else {
    return 1768977011LL;
  }
}

uint64_t sub_100080770@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A45F0, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1000807D0(uint64_t a1)
{
  unint64_t v2 = sub_100081380();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000807F8(uint64_t a1)
{
  unint64_t v2 = sub_100081380();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100080820@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v12[11];
    a2[10] = v12[10];
    a2[11] = v5;
    __int128 v6 = v12[13];
    a2[12] = v12[12];
    a2[13] = v6;
    __int128 v7 = v12[7];
    a2[6] = v12[6];
    a2[7] = v7;
    __int128 v8 = v12[9];
    a2[8] = v12[8];
    a2[9] = v8;
    __int128 v9 = v12[3];
    a2[2] = v12[2];
    a2[3] = v9;
    __int128 v10 = v12[5];
    a2[4] = v12[4];
    a2[5] = v10;
    double result = *(double *)v12;
    __int128 v11 = v12[1];
    *a2 = v12[0];
    a2[1] = v11;
  }

  return result;
}

uint64_t sub_100080888(void *a1)
{
  return sub_10007FBCC(a1);
}

uint64_t sub_10008089C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000808CC
                                                            + 4 * asc_100092790[a1]))( 6580595LL,  0xE300000000000000LL);
}

uint64_t sub_1000808CC()
{
  return 6580592LL;
}

uint64_t sub_1000808D8()
{
  return 0x6873616873LL;
}

uint64_t sub_1000808EC()
{
  return 1684628083LL;
}

uint64_t sub_1000808FC()
{
  return 6909043LL;
}

uint64_t sub_10008090C()
{
  return 6906227LL;
}

uint64_t sub_100080918()
{
  return 7827571LL;
}

uint64_t sub_100080928()
{
  return 7567475LL;
}

uint64_t sub_100080934()
{
  return 7567731LL;
}

uint64_t sub_100080944()
{
  return 6386547LL;
}

uint64_t sub_100080950()
{
  return 7303795LL;
}

uint64_t sub_10008095C()
{
  return 7498099LL;
}

uint64_t sub_100080968()
{
  return 7762035LL;
}

uint64_t sub_100080974()
{
  return 1769108851LL;
}

uint64_t sub_100080984(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000809B4 + 4 * byte_10009279E[a1]))( 6580595LL,  0xE300000000000000LL);
}

uint64_t sub_1000809B4()
{
  return 6580592LL;
}

uint64_t sub_1000809C0()
{
  return 0x6873616873LL;
}

uint64_t sub_1000809D4()
{
  return 1684628083LL;
}

uint64_t sub_1000809E4()
{
  return 6909043LL;
}

uint64_t sub_1000809F4()
{
  return 6906227LL;
}

uint64_t sub_100080A00()
{
  return 7827571LL;
}

uint64_t sub_100080A10()
{
  return 7567475LL;
}

uint64_t sub_100080A1C()
{
  return 7567731LL;
}

uint64_t sub_100080A2C()
{
  return 6386547LL;
}

uint64_t sub_100080A38()
{
  return 7303795LL;
}

uint64_t sub_100080A44()
{
  return 7498099LL;
}

uint64_t sub_100080A50()
{
  return 7762035LL;
}

uint64_t sub_100080A5C()
{
  return 1769108851LL;
}

uint64_t sub_100080A6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10008089C(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10008089C(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100080AF4()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10008089C(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_100080B54(uint64_t a1)
{
  uint64_t v3 = sub_10008089C(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(void *)&double result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_100080B94(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10008089C(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100080BF0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100081AF0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100080C1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10008089C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100080C44()
{
  return sub_100080984(*v0);
}

unint64_t sub_100080C4C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100081AF0(a1);
  *a2 = result;
  return result;
}

void sub_100080C70(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_100080C7C(uint64_t a1)
{
  unint64_t v2 = sub_10008230C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100080CA4(uint64_t a1)
{
  unint64_t v2 = sub_10008230C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100080CCC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000E624(&qword_1000B1760);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10008230C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RepositionStickerCommandStickerContents.CodingKeys,  &type metadata for RepositionStickerCommandStickerContents.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v48 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v48, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v47 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v47, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v46 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v46, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v45 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v45, v5);
    uint64_t v20 = v3[8];
    uint64_t v21 = *((unsigned __int8 *)v3 + 72);
    char v44 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v44, v5);
    uint64_t v22 = v3[10];
    uint64_t v23 = *((unsigned __int8 *)v3 + 88);
    char v43 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v43, v5);
    uint64_t v24 = v3[12];
    uint64_t v25 = *((unsigned __int8 *)v3 + 104);
    char v42 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v42, v5);
    uint64_t v26 = v3[14];
    uint64_t v27 = *((unsigned __int8 *)v3 + 120);
    char v41 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v41, v5);
    uint64_t v28 = v3[16];
    uint64_t v29 = *((unsigned __int8 *)v3 + 136);
    HIBYTE(v40) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, (char *)&v40 + 7, v5);
    uint64_t v30 = v3[18];
    uint64_t v31 = *((unsigned __int8 *)v3 + 152);
    BYTE6(v40) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, (char *)&v40 + 6, v5);
    uint64_t v32 = v3[20];
    uint64_t v33 = *((unsigned __int8 *)v3 + 168);
    BYTE5(v40) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, (char *)&v40 + 5, v5);
    uint64_t v34 = *((unsigned __int8 *)v3 + 169);
    BYTE4(v40) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, (char *)&v40 + 4, v5);
    uint64_t v35 = v3[22];
    uint64_t v36 = *((unsigned __int8 *)v3 + 184);
    BYTE3(v40) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, (char *)&v40 + 3, v5);
    uint64_t v37 = v3[24];
    uint64_t v38 = v3[25];
    BYTE2(v40) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, (char *)&v40 + 2, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_100080FE0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v10[11];
    *(_OWORD *)(a2 + 160) = v10[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v10[12];
    __int128 v6 = v10[7];
    *(_OWORD *)(a2 + 96) = v10[6];
    *(_OWORD *)(a2 + 112) = v6;
    __int128 v7 = v10[9];
    *(_OWORD *)(a2 + 12_Block_object_dispose(va, 8) = v10[8];
    *(_OWORD *)(a2 + 144) = v7;
    __int128 v8 = v10[3];
    *(_OWORD *)(a2 + 32) = v10[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = v8;
    __int128 v9 = v10[5];
    *(_OWORD *)(a2 + 64) = v10[4];
    *(_OWORD *)(a2 + 80) = v9;
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a2 = v10[0];
    *(__n128 *)(a2 + 16) = result;
  }

  return result;
}

uint64_t sub_100081048(void *a1)
{
  return sub_100080CCC(a1);
}

void *sub_10008105C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v26 = sub_10000E624(&qword_1000B1710);
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  __int128 v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10000FFDC(a1, v8);
  unint64_t v10 = sub_100081380();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RepositionStickerCommandContents.CodingKeys,  &type metadata for RepositionStickerCommandContents.CodingKeys,  v10,  v8,  v9);
  if (v2) {
    return (void *)sub_100010D60(a1);
  }
  uint64_t v11 = v5;
  char v84 = 0;
  unint64_t v12 = sub_1000813C4();
  uint64_t v13 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v57,  &type metadata for RepositionStickerCommandStickerContents,  &v84,  v26,  &type metadata for RepositionStickerCommandStickerContents,  v12);
  __int128 v54 = v67;
  __int128 v55 = v68;
  __int128 v56 = v69;
  __int128 v50 = v63;
  __int128 v51 = v64;
  __int128 v52 = v65;
  __int128 v53 = v66;
  __int128 v46 = v59;
  __int128 v47 = v60;
  __int128 v48 = v61;
  __int128 v49 = v62;
  __int128 v44 = v57;
  __int128 v45 = v58;
  __int128 v80 = v67;
  __int128 v81 = v68;
  __int128 v82 = v69;
  __int128 v76 = v63;
  __int128 v77 = v64;
  __int128 v78 = v65;
  __int128 v79 = v66;
  __int128 v72 = v59;
  __int128 v73 = v60;
  __int128 v74 = v61;
  __int128 v75 = v62;
  __int128 v70 = v57;
  __int128 v71 = v58;
  char v83 = 1;
  sub_10007FF6C(&v44);
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)(&v83, v13);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v13);
  __int128 v37 = v54;
  __int128 v38 = v55;
  __int128 v39 = v56;
  __int128 v33 = v50;
  __int128 v34 = v51;
  __int128 v35 = v52;
  __int128 v36 = v53;
  __int128 v29 = v46;
  __int128 v30 = v47;
  __int128 v31 = v48;
  __int128 v32 = v49;
  __int128 v27 = v44;
  __int128 v28 = v45;
  *(void *)&__int128 v40 = v14;
  *((void *)&v40 + 1) = v16;
  sub_100081408(&v27);
  sub_10007FFD4(&v44);
  sub_100010D60(a1);
  v41[10] = v80;
  v41[11] = v81;
  v41[12] = v82;
  v41[6] = v76;
  v41[7] = v77;
  char v41[8] = v78;
  v41[9] = v79;
  v41[2] = v72;
  _OWORD v41[3] = v73;
  v41[4] = v74;
  v41[5] = v75;
  v41[0] = v70;
  v41[1] = v71;
  uint64_t v42 = v14;
  uint64_t v43 = v16;
  __n128 result = sub_10007FEF8(v41);
  __int128 v18 = v38;
  a2[10] = v37;
  a2[11] = v18;
  __int128 v19 = v40;
  a2[12] = v39;
  a2[13] = v19;
  __int128 v20 = v34;
  a2[6] = v33;
  a2[7] = v20;
  __int128 v21 = v36;
  a2[8] = v35;
  a2[9] = v21;
  __int128 v22 = v30;
  a2[2] = v29;
  a2[3] = v22;
  __int128 v23 = v32;
  a2[4] = v31;
  a2[5] = v23;
  __int128 v24 = v28;
  *a2 = v27;
  a2[1] = v24;
  return result;
}

unint64_t sub_100081380()
{
  unint64_t result = qword_1000B1718;
  if (!qword_1000B1718)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092AE8, &type metadata for RepositionStickerCommandContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1718);
  }

  return result;
}

unint64_t sub_1000813C4()
{
  unint64_t result = qword_1000B1720;
  if (!qword_1000B1720)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092AC0, &type metadata for RepositionStickerCommandStickerContents);
    atomic_store(result, (unint64_t *)&qword_1000B1720);
  }

  return result;
}

void *sub_100081408(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[27];
  swift_bridgeObjectRetain(a1[25]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

unint64_t sub_10008147C()
{
  unint64_t result = qword_1000B1730;
  if (!qword_1000B1730)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092A98, &type metadata for RepositionStickerCommandStickerContents);
    atomic_store(result, (unint64_t *)&qword_1000B1730);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for RepositionStickerCommandContents.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10008150C + 4 * byte_1000927B1[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100081540 + 4 * byte_1000927AC[v4]))();
}

uint64_t sub_100081540(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081548(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100081550LL);
  }
  return result;
}

uint64_t sub_10008155C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100081564LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100081568(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100081570(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandContents.CodingKeys()
{
  return &type metadata for RepositionStickerCommandContents.CodingKeys;
}

uint64_t destroy for RepositionStickerCommandStickerContents(void *a1)
{
  return swift_bridgeObjectRelease(a1[25]);
}

uint64_t initializeWithCopy for RepositionStickerCommandStickerContents(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_WORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 168);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  uint64_t v8 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for RepositionStickerCommandStickerContents(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v12;
  uint64_t v13 = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 80) = v13;
  uint64_t v14 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v14;
  uint64_t v15 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v15;
  uint64_t v16 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v16;
  uint64_t v17 = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = v17;
  uint64_t v18 = *(void *)(a2 + 160);
  *(_BYTE *)(a1 + 16_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 160) = v18;
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  uint64_t v19 = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(void *)(a1 + 176) = v19;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v20 = *(void *)(a2 + 200);
  uint64_t v21 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

__n128 initializeWithTake for RepositionStickerCommandStickerContents(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __int128 v5 = *(_OWORD *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(va, 8) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  __int128 v9 = *(_OWORD *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for RepositionStickerCommandStickerContents(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 8_Block_object_dispose(va, 8) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  uint64_t v12 = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v12;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_WORD *)(a1 + 16_Block_object_dispose(va, 8) = *(_WORD *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 200);
  uint64_t v14 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v13;
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for RepositionStickerCommandStickerContents(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RepositionStickerCommandStickerContents( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 16_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(va, 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 20_Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 20_Block_object_dispose(va, 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandStickerContents()
{
  return &type metadata for RepositionStickerCommandStickerContents;
}

unint64_t sub_100081A1C()
{
  unint64_t result = qword_1000B1738;
  if (!qword_1000B1738)
  {
    unint64_t result = swift_getWitnessTable(&unk_100092A70, &type metadata for RepositionStickerCommandContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1738);
  }

  return result;
}

unint64_t sub_100081A64()
{
  unint64_t result = qword_1000B1740;
  if (!qword_1000B1740)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000929A8, &type metadata for RepositionStickerCommandContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1740);
  }

  return result;
}

unint64_t sub_100081AAC()
{
  unint64_t result = qword_1000B1748;
  if (!qword_1000B1748)
  {
    unint64_t result = swift_getWitnessTable(&unk_1000929D0, &type metadata for RepositionStickerCommandContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1748);
  }

  return result;
}

unint64_t sub_100081AF0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1000A4640, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

void sub_100081B38(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_10000E624(&qword_1000B1750);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v129 = 1;
  char v127 = 1;
  char v125 = 1;
  char v123 = 1;
  char v121 = 1;
  char v119 = 1;
  char v117 = 1;
  char v114 = 1;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v130 = a1;
  sub_10000FFDC(a1, v9);
  unint64_t v11 = sub_10008230C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RepositionStickerCommandStickerContents.CodingKeys,  &type metadata for RepositionStickerCommandStickerContents.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    sub_100010D60(v130);
    swift_bridgeObjectRelease(0LL);
    swift_bridgeObjectRelease(0LL);
  }

  else
  {
    LOBYTE(v84[0]) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(v84, v5);
    uint64_t v14 = v13;
    LOBYTE(v84[0]) = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v84, v5);
    uint64_t v67 = v12;
    uint64_t v68 = v15;
    LOBYTE(v84[0]) = 2;
    uint64_t v17 = v16;
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(v84, v5);
    uint64_t v70 = v17;
    uint64_t v66 = v18;
    LOBYTE(v84[0]) = 3;
    uint64_t v69 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5);
    uint64_t v22 = v21;
    uint64_t v65 = v20;
    LOBYTE(v84[0]) = 4;
    swift_bridgeObjectRetain(v21);
    uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5);
    char v129 = v23 & 1;
    LOBYTE(v84[0]) = 5;
    int v63 = v23;
    uint64_t v62 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5);
    char v127 = v24 & 1;
    LOBYTE(v84[0]) = 6;
    int v61 = v24;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5, v25);
    int v59 = v26;
    char v125 = v26 & 1;
    LOBYTE(v84[0]) = 7;
    uint64_t v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5, v27);
    int v56 = v28;
    char v123 = v28 & 1;
    LOBYTE(v84[0]) = 8;
    uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5, v29);
    int v53 = v30;
    char v121 = v30 & 1;
    LOBYTE(v84[0]) = 9;
    uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5, v31);
    int v55 = v32;
    char v119 = v32 & 1;
    LOBYTE(v84[0]) = 10;
    uint64_t v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5, v33);
    int v52 = v34;
    char v117 = v34 & 1;
    LOBYTE(v84[0]) = 11;
    int v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5);
    LOBYTE(v84[0]) = 12;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v84, v5);
    HIDWORD(v47) = v35 & 1;
    char v114 = v35 & 1;
    char v112 = 13;
    uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v112, v5);
    uint64_t v37 = v36;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(0LL);
    uint64_t v38 = v67;
    *(void *)&__int128 v71 = v67;
    *((void *)&v71 + 1) = v14;
    uint64_t v40 = v69;
    uint64_t v39 = v70;
    *(void *)&__int128 v72 = v68;
    *((void *)&v72 + 1) = v70;
    *(void *)&__int128 v73 = v66;
    *((void *)&v73 + 1) = v69;
    *(void *)&__int128 v74 = v65;
    *((void *)&v74 + 1) = v22;
    *(void *)&__int128 v75 = v64;
    BYTE8(v75) = v63 & 1;
    *(void *)&__int128 v76 = v62;
    BYTE8(v76) = v61 & 1;
    *(void *)&__int128 v77 = v60;
    BYTE8(v77) = v59 & 1;
    *(void *)&__int128 v78 = v58;
    BYTE8(v7_Block_object_dispose(va, 8) = v56 & 1;
    *(void *)&__int128 v79 = v57;
    BYTE8(v79) = v53 & 1;
    *(void *)&__int128 v80 = v54;
    BYTE8(v80) = v55 & 1;
    *(void *)&__int128 v81 = v51;
    BYTE8(v81) = v52 & 1;
    BYTE9(v81) = v50;
    *(void *)&__int128 v82 = v49;
    BYTE8(v82) = BYTE4(v47);
    *(void *)&__int128 v83 = v48;
    *((void *)&v83 + 1) = v37;
    sub_10007FF6C(&v71);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v37);
    sub_100010D60(v130);
    v84[0] = v38;
    v84[1] = v14;
    v84[2] = v68;
    v84[3] = v39;
    v84[4] = v66;
    v84[5] = v40;
    v84[6] = v65;
    v84[7] = v22;
    v84[8] = v64;
    char v85 = v129;
    *(_DWORD *)unint64_t v86 = *(_DWORD *)v128;
    *(_DWORD *)&v86[3] = *(_DWORD *)&v128[3];
    uint64_t v87 = v62;
    char v88 = v127;
    *(_DWORD *)&v89[3] = *(_DWORD *)&v126[3];
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v126;
    uint64_t v90 = v60;
    char v91 = v125;
    *(_DWORD *)unint64_t v92 = *(_DWORD *)v124;
    *(_DWORD *)&v92[3] = *(_DWORD *)&v124[3];
    uint64_t v93 = v58;
    char v94 = v123;
    *(_DWORD *)uint64_t v95 = *(_DWORD *)v122;
    *(_DWORD *)&v95[3] = *(_DWORD *)&v122[3];
    uint64_t v96 = v57;
    char v97 = v121;
    *(_DWORD *)&v98[3] = *(_DWORD *)&v120[3];
    *(_DWORD *)unint64_t v98 = *(_DWORD *)v120;
    uint64_t v99 = v54;
    char v100 = v119;
    *(_DWORD *)&v101[3] = *(_DWORD *)&v118[3];
    *(_DWORD *)uint64_t v101 = *(_DWORD *)v118;
    uint64_t v102 = v51;
    char v103 = v117;
    char v104 = v50;
    __int16 v106 = v116;
    int v105 = v115;
    uint64_t v107 = v49;
    char v108 = v114;
    *(_DWORD *)&v109[3] = *(_DWORD *)&v113[3];
    *(_DWORD *)uint64_t v109 = *(_DWORD *)v113;
    uint64_t v110 = v48;
    uint64_t v111 = v37;
    sub_10007FFD4(v84);
    __int128 v41 = v82;
    a2[10] = v81;
    a2[11] = v41;
    a2[12] = v83;
    __int128 v42 = v78;
    a2[6] = v77;
    a2[7] = v42;
    __int128 v43 = v80;
    a2[8] = v79;
    a2[9] = v43;
    __int128 v44 = v74;
    a2[2] = v73;
    a2[3] = v44;
    __int128 v45 = v76;
    a2[4] = v75;
    a2[5] = v45;
    __int128 v46 = v72;
    *a2 = v71;
    a2[1] = v46;
  }

unint64_t sub_10008230C()
{
  unint64_t result = qword_1000B1758;
  if (!qword_1000B1758)
  {
    unint64_t result = swift_getWitnessTable( &unk_100092C28,  &type metadata for RepositionStickerCommandStickerContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1758);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RepositionStickerCommandStickerContents.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for RepositionStickerCommandStickerContents.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_10008242C + 4 * byte_1000927BB[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100082460 + 4 * byte_1000927B6[v4]))();
}

uint64_t sub_100082460(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100082468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100082470LL);
  }
  return result;
}

uint64_t sub_10008247C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100082484LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_100082488(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100082490(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepositionStickerCommandStickerContents.CodingKeys()
{
  return &type metadata for RepositionStickerCommandStickerContents.CodingKeys;
}

unint64_t sub_1000824B0()
{
  unint64_t result = qword_1000B1768;
  if (!qword_1000B1768)
  {
    unint64_t result = swift_getWitnessTable( &unk_100092C00,  &type metadata for RepositionStickerCommandStickerContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1768);
  }

  return result;
}

unint64_t sub_1000824F8()
{
  unint64_t result = qword_1000B1770;
  if (!qword_1000B1770)
  {
    unint64_t result = swift_getWitnessTable( &unk_100092B38,  &type metadata for RepositionStickerCommandStickerContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1770);
  }

  return result;
}

unint64_t sub_100082540()
{
  unint64_t result = qword_1000B1778;
  if (!qword_1000B1778)
  {
    unint64_t result = swift_getWitnessTable( &unk_100092B60,  &type metadata for RepositionStickerCommandStickerContents.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1000B1778);
  }

  return result;
}

void sub_100082584(os_log_t log)
{
  *(_WORD *)__int16 v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Could not parse data", v1, 2u);
}

id objc_msgSend__addAttachmentPartWithSource_toContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAttachmentPartWithSource:toContext:");
}

id objc_msgSend__addPart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPart:");
}

id objc_msgSend__clearIvars(void *a1, const char *a2, ...)
{
  return _[a1 _clearIvars];
}

id objc_msgSend__currentMessagePart(void *a1, const char *a2, ...)
{
  return _[a1 _currentMessagePart];
}

id objc_msgSend__inferredMessagePartForNewFile(void *a1, const char *a2, ...)
{
  return _[a1 _inferredMessagePartForNewFile];
}

id objc_msgSend__inferredMessagePartForNewText(void *a1, const char *a2, ...)
{
  return _[a1 _inferredMessagePartForNewText];
}

id objc_msgSend__initIvars(void *a1, const char *a2, ...)
{
  return _[a1 _initIvars];
}

id objc_msgSend__lastCharacterInCurrentBodyIsAttachment(void *a1, const char *a2, ...)
{
  return _[a1 _lastCharacterInCurrentBodyIsAttachment];
}

id objc_msgSend__messagePartForLastCharacterInCurrentBody(void *a1, const char *a2, ...)
{
  return _[a1 _messagePartForLastCharacterInCurrentBody];
}

id objc_msgSend__stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForKey:");
}

id objc_msgSend_addAttachmentPart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachmentPart:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCharactersInString:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addTextPart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextPart:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendBreadcrumbText_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBreadcrumbText:withOptions:");
}

id objc_msgSend_appendFileTransferAttribute_attachments_imageInfo_stickerInfo_emojiImageInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFileTransferAttribute:attachments:imageInfo:stickerInfo:emojiImageInfo:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendLivePhotoAttribute_attachments_imageInfo_stickerInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendLivePhotoAttribute:attachments:imageInfo:stickerInfo:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendText:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attachmentCharacterString(void *a1, const char *a2, ...)
{
  return _[a1 attachmentCharacterString];
}

id objc_msgSend_attribute_atIndex_effectiveRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attribute:atIndex:effectiveRange:");
}

id objc_msgSend_avatarContacts(void *a1, const char *a2, ...)
{
  return _[a1 avatarContacts];
}

id objc_msgSend_bd_stringByRemovingURLEscapes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bd_stringByRemovingURLEscapes");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characterIsMember_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterIsMember:");
}

id objc_msgSend_contactCount(void *a1, const char *a2, ...)
{
  return _[a1 contactCount];
}

id objc_msgSend_containsIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsIndex:");
}

id objc_msgSend_controlCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 controlCharacterSet];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_decrementBoldCount(void *a1, const char *a2, ...)
{
  return _[a1 decrementBoldCount];
}

id objc_msgSend_decrementItalicCount(void *a1, const char *a2, ...)
{
  return _[a1 decrementItalicCount];
}

id objc_msgSend_decrementStrikethroughCount(void *a1, const char *a2, ...)
{
  return _[a1 decrementStrikethroughCount];
}

id objc_msgSend_decrementUnderlineCount(void *a1, const char *a2, ...)
{
  return _[a1 decrementUnderlineCount];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_emojiImageInfoExtractedFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emojiImageInfoExtractedFrom:");
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateSubstringsInRange:options:usingBlock:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_fileAttachmentsExtractedFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileAttachmentsExtractedFrom:");
}

id objc_msgSend_fileTransferInfoWithName_attachments_imageInfo_stickerInfo_emojiImageInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileTransferInfoWithName:attachments:imageInfo:stickerInfo:emojiImageInfo:");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_formUnionWithCharacterSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formUnionWithCharacterSet:");
}

id objc_msgSend_getCString_maxLength_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCString:maxLength:encoding:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_imageInfoExtractedFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageInfoExtractedFrom:");
}

id objc_msgSend_inContentAsData(void *a1, const char *a2, ...)
{
  return _[a1 inContentAsData];
}

id objc_msgSend_incrementBoldCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementBoldCount];
}

id objc_msgSend_incrementItalicCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementItalicCount];
}

id objc_msgSend_incrementStrikethroughCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementStrikethroughCount];
}

id objc_msgSend_incrementUnderlineCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementUnderlineCount];
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCharacters_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharacters:length:");
}

id objc_msgSend_initWithCharactersNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCharactersNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithContentAsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentAsData:");
}

id objc_msgSend_initWithContentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentLocation:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInteger:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_invert(void *a1, const char *a2, ...)
{
  return _[a1 invert];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isLivePhotoAttribute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLivePhotoAttribute:");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_lastIndex(void *a1, const char *a2, ...)
{
  return _[a1 lastIndex];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _[a1 lowercaseString];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 newlineCharacterSet];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_orderedParts(void *a1, const char *a2, ...)
{
  return _[a1 orderedParts];
}

id objc_msgSend_parser_context_didEndElement_namespaceURI_qualifiedName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:context:didEndElement:namespaceURI:qualifiedName:");
}

id objc_msgSend_parser_context_didStartElement_namespaceURI_qualifiedName_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:context:didStartElement:namespaceURI:qualifiedName:attributes:");
}

id objc_msgSend_parser_context_foundCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:context:foundCharacters:");
}

id objc_msgSend_parser_context_foundIgnorableWhitespace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parser:context:foundIgnorableWhitespace:");
}

id objc_msgSend_popFontFamily(void *a1, const char *a2, ...)
{
  return _[a1 popFontFamily];
}

id objc_msgSend_popFontSize(void *a1, const char *a2, ...)
{
  return _[a1 popFontSize];
}

id objc_msgSend_popIsRichLink(void *a1, const char *a2, ...)
{
  return _[a1 popIsRichLink];
}

id objc_msgSend_popLink(void *a1, const char *a2, ...)
{
  return _[a1 popLink];
}

id objc_msgSend_popMentionAttribute(void *a1, const char *a2, ...)
{
  return _[a1 popMentionAttribute];
}

id objc_msgSend_popMessagePartNumber(void *a1, const char *a2, ...)
{
  return _[a1 popMessagePartNumber];
}

id objc_msgSend_popTextBoldAttribute(void *a1, const char *a2, ...)
{
  return _[a1 popTextBoldAttribute];
}

id objc_msgSend_popTextEffectAttribute(void *a1, const char *a2, ...)
{
  return _[a1 popTextEffectAttribute];
}

id objc_msgSend_popTextItalicAttribute(void *a1, const char *a2, ...)
{
  return _[a1 popTextItalicAttribute];
}

id objc_msgSend_popTextStrikethroughAttribute(void *a1, const char *a2, ...)
{
  return _[a1 popTextStrikethroughAttribute];
}

id objc_msgSend_popTextUnderlineAttribute(void *a1, const char *a2, ...)
{
  return _[a1 popTextUnderlineAttribute];
}

id objc_msgSend_pushFontFamily_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushFontFamily:");
}

id objc_msgSend_pushIsRichLink_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushIsRichLink:");
}

id objc_msgSend_pushLink_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushLink:");
}

id objc_msgSend_pushMentionAttributeWithURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushMentionAttributeWithURI:");
}

id objc_msgSend_pushMessagePartNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushMessagePartNumber:");
}

id objc_msgSend_pushTextBoldAttribute(void *a1, const char *a2, ...)
{
  return _[a1 pushTextBoldAttribute];
}

id objc_msgSend_pushTextEffectAttributeWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushTextEffectAttributeWithType:");
}

id objc_msgSend_pushTextItalicAttribute(void *a1, const char *a2, ...)
{
  return _[a1 pushTextItalicAttribute];
}

id objc_msgSend_pushTextStrikethroughAttribute(void *a1, const char *a2, ...)
{
  return _[a1 pushTextStrikethroughAttribute];
}

id objc_msgSend_pushTextUnderlineAttribute(void *a1, const char *a2, ...)
{
  return _[a1 pushTextUnderlineAttribute];
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_removeCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeCharactersInString:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _[a1 removeLastObject];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_setBaseWritingDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaseWritingDirection:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setPowerLevels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerLevels:");
}

id objc_msgSend_stickerInfoExtractedFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stickerInfoExtractedFrom:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByRemovingCharactersFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByRemovingCharactersFromSet:");
}

id objc_msgSend_summaryOfVCard_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summaryOfVCard:error:");
}

id objc_msgSend_supportsMessagePartNumbersInAttributes(void *a1, const char *a2, ...)
{
  return _[a1 supportsMessagePartNumbersInAttributes];
}

id objc_msgSend_textParts(void *a1, const char *a2, ...)
{
  return _[a1 textParts];
}

id objc_msgSend_trimmedString(void *a1, const char *a2, ...)
{
  return _[a1 trimmedString];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _[a1 whitespaceAndNewlineCharacterSet];
}