uint64_t sub_10004182C(uint64_t a1, uint64_t a2, __int16 *a3, int *a4)
{
  int *v4;
  uint64_t v7;
  uint64_t v9;
  int32x4_t v10;
  double v11;
  int32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  int v26;
  int v27;
  unsigned int v29;
  v29 = 0;
  *a4 = 2;
  if (!*(_DWORD *)(a1 + 5672)) {
    return 11LL;
  }
  v4 = a4;
  if (!*(_DWORD *)(a1 + 6448))
  {
    result = 0LL;
    *a4 = 1;
    return result;
  }

  if (!a2)
  {
    if (!*(_DWORD *)(a1 + 348))
    {
      *a4 = 0;
      goto LABEL_31;
    }

    if (*(_DWORD *)(a1 + 352))
    {
      *a4 = 0;
      goto LABEL_30;
    }

    if (*(_DWORD *)(a1 + 356))
    {
      *a4 = 0;
      v29 = 12;
      goto LABEL_31;
    }

    v26 = 3;
    goto LABEL_26;
  }

  v7 = *(unsigned int *)(a1 + 6320);
  if ((int)v7 >= 1)
  {
    v9 = sub_1000398C4(*(void *)(a1 + 5512));
    if (*(_DWORD *)(a1 + 6336)) {
      *(_DWORD *)(a1 + 6328) += sub_1000A221C(**(void **)(a1 + 6312), a2, a3, v9, v10, v11, v12, v13, v14, v15);
    }
    v16 = 0LL;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v27 = v7;
    do
    {
      v20 = (uint64_t *)(*(void *)(a1 + 6312) + v16);
      v21 = v20[1];
      v22 = sub_1000A227C(*v20, a2, a3, v9, v10, v11, v12, v13, v14, v15);
      ++*(_DWORD *)(v21 + 64);
      if (v22)
      {
        if (v22 == 2)
        {
          ++v18;
        }

        else if (v22 == 3)
        {
          ++v17;
        }
      }

      else
      {
        ++v19;
      }

      v16 += 24LL;
      --v7;
    }

    while (v7);
    v4 = a4;
    if (v18 + v19 + v17 == v27 || v19 == v27 || v17 == v27) {
      v26 = 0;
    }
    else {
      v26 = 2;
    }
LABEL_26:
    *v4 = v26;
  }

int *sub_100041A00(void *a1, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1[13] || a1[689] == a1[14])
  {
    v4 = a1 + 101;
    if ((a2 & 0x80000000) != 0)
    {
LABEL_15:
      result = 0LL;
      *a3 = 0;
      return result;
    }
  }

  else
  {
    v4 = a1 + 100;
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_15;
    }
  }

  uint64_t v5 = *v4;
  v6 = *(int **)(v5 + 40);
  uint64_t v7 = -1LL;
  int v8 = a2;
  v9 = v6;
  do
  {
    v10 = v9;
    v11 = v6;
    v12 = (char *)(v9 - 1);
    do
    {
      int v13 = *v9++;
      v12 += 4;
    }

    while (v13 != -1);
    *a3 = ((unint64_t)(v12 - (char *)&v6[v7]) >> 2) - 1;
    v6 = *(int **)(v5 + 40);
    uint64_t v7 = (v12 - (char *)v6) >> 2;
  }

  while (v8-- > 0);
  if (a4)
  {
    *a4 = *(_DWORD *)(*(void *)(v5 + 8) + 4LL * a2);
    v6 = *(int **)(v5 + 40);
  }

  return &v6[(int)(v10 - v11)];
}

uint64_t sub_100041AC8(uint64_t a1, int a2)
{
  uint64_t v19 = 0LL;
  if (!*(_DWORD *)(a1 + 6232)) {
    return 2LL;
  }
  int v4 = sub_100059840(*(void *)a1);
  uint64_t v5 = sub_1000C1074(v4);
  if (!v5) {
    return 4LL;
  }
  uint64_t v6 = v5;
  if (!sub_100059848(*(void *)a1))
  {
    sub_1000C0EF8(v6);
    return 3LL;
  }

  int v7 = sub_100059850(*(void *)a1);
  if (a2)
  {
    if (v7)
    {
      if (sub_10004877C(a1) && sub_100048BB8(a1, -2))
      {
        int v18 = 0;
        sub_10009D1D4(*(void *)(a1 + 256));
        **(_DWORD **)(a1 + 6296) = 0;
        BOOL v9 = sub_10003AB20( *(void *)(a1 + 112),  *(unsigned int *)(a1 + 6232),  (unsigned int *)(a1 + 5720),  *(int **)(a1 + 256),  &v18,  &v19,  1LL,  v8);
        if (v9)
        {
          **(_DWORD **)(a1 + 6296) = v18;
          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3480))
          {
            unsigned int v10 = 0;
            **(_DWORD **)(a1 + 6296) = sub_10003AB90(*(void *)(a1 + 5512), v19, *(int **)(a1 + 256), 0, 0, 0LL, 0LL);
          }

          else
          {
            unsigned int v10 = 0;
          }
        }

        else
        {
          unsigned int v10 = 2;
        }
      }

      else
      {
        unsigned int v10 = 0;
        BOOL v9 = 0;
      }

      if (sub_100059848(*(void *)a1))
      {
        uint64_t v12 = 1LL;
        while (1)
        {
          int v18 = 0;
          sub_10009D1D4(*(void *)(a1 + 256));
          if (!qword_1000FDCC0) {
            break;
          }
          int v14 = *(_DWORD *)(qword_1000FDCC0 + 1936);
          *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = 0;
          if (!v14) {
            goto LABEL_38;
          }
          BOOL v9 = sub_10003AB20( *(void *)(a1 + 112),  *(unsigned int *)(a1 + 6232),  (unsigned int *)(a1 + 5720),  *(int **)(a1 + 256),  &v18,  &v19,  1LL,  v13);
          if (v9)
          {
            *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = v18;
            char v15 = 1;
            goto LABEL_39;
          }

          unsigned int v10 = 2;
LABEL_46:
          if (++v12 == 5) {
            goto LABEL_50;
          }
        }

        *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = 0;
LABEL_38:
        char v15 = 0;
        if (v9)
        {
LABEL_39:
          int v16 = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            int v16 = *(_DWORD *)(qword_1000FDCC0 + 3480);
          }
          if (v16) {
            char v15 = 0;
          }
          if ((v15 & 1) == 0) {
            *(_DWORD *)(*(void *)(a1 + 6296) + 4 * v12) = sub_10003AB90( *(void *)(a1 + 5512),  v19,  *(int **)(a1 + 256),  v16 == 0,  0,  0LL,  0LL);
          }
        }

LABEL_45:
        goto LABEL_46;
      }
    }
  }

  else if (v7)
  {
    sub_10004877C(a1);
    if (sub_100059848(*(void *)a1))
    {
      if (sub_100059850(*(void *)a1))
      {
        sub_10004877C(a1);
        if (sub_100059848(*(void *)a1))
        {
          if (sub_100059850(*(void *)a1))
          {
            sub_10004877C(a1);
            if (sub_100059848(*(void *)a1))
            {
              if (sub_100059850(*(void *)a1))
              {
                sub_10004877C(a1);
                if (sub_100059848(*(void *)a1))
                {
                  unsigned int v10 = 3;
                  if (sub_100059850(*(void *)a1))
                  {
                    sub_10004877C(a1);
                    else {
                      unsigned int v10 = 3;
                    }
                  }

                  goto LABEL_50;
                }
              }
            }
          }
        }
      }
    }
  }

  result = *(void *)(a1 + 384);
  v40 = *v24;
  v41 = *(unsigned __int16 *)(*(void *)(result + 1792) + 2 * v40);
  if (v41 == 0x4000)
  {
    result = sub_100015BC0(result, v40);
    LOWORD(v41) = result;
  }

  v20 = 0;
  *(_WORD *)(a3 + 2) = v28 - v43 + v41;
  *(_WORD *)(a3 + 6) = v30;
LABEL_48:
  *(_BYTE *)(a3 + 10) = v20;
  *(_BYTE *)(a3 + 11) = *((_BYTE *)a2 + 11);
  return result;
}

  if (!sub_100021140( *(int **)(a1 + 416),  *(void *)(a1 + 368),  v8,  *(_DWORD *)(a1 + 320),  *(_DWORD *)(a1 + 476),  *(_DWORD *)(a1 + 492)))
  {
    v24 = *(_DWORD *)(a1 + 468);
    if (v24 + 1 < *(_DWORD *)(a1 + 320)) {
      v25 = v24 + 1;
    }
    else {
      v25 = 0;
    }
    *(_DWORD *)(a1 + 468) = v25;
    int v16 = 3LL;
    goto LABEL_67;
  }

  int v18 = *(void *)(a1 + 384);
  if ((*(_BYTE *)(v18 + v8) & 2) != 0) {
    int v16 = 5LL;
  }
  else {
    int v16 = 6LL;
  }
  *(_BYTE *)(v18 + v15) |= 4u;
  if (*(_DWORD *)(a1 + 488)) {
    sub_100022378( *(void *)(a1 + 424),  *(void *)(*(void *)(a1 + 368) + 8LL * v15),  *(_BYTE *)(*(void *)(a1 + 384) + v15));
  }
  if (*(_DWORD *)(a1 + 340))
  {
    if (!*(_DWORD *)(a1 + 352))
    {
      uint64_t v19 = *(_DWORD *)(a1 + 476);
      v20 = *(_DWORD *)(a1 + 324);
      v17 = *(_DWORD *)(a1 + 332);
      if (v19 >= v17 + 2 * v20 || *(_DWORD *)(a1 + 348) && v19 >= v17 + v20) {
        goto LABEL_56;
      }
    }
  }

        if (!v38)
        {
          v38 = v87 - v44;
          if (v87 == v44) {
            goto LABEL_23;
          }
        }

        goto LABEL_28;
      }

    char v15 = 0LL;
    goto LABEL_46;
  }

  return 0LL;
}

  *v22 = 0LL;
  *uint64_t v13 = 0LL;
  if ((int)v101 >= 1)
  {
    v89 = 0LL;
    do
    {
      if (v89 && *(double *)&v22[v89] != 0.0)
      {
        for (i = 0LL; i != v89; ++i)
        {
          v91 = 0LL;
          v92 = 0.0;
          do
          {
            v92 = v92
            ++v91;
          }

          while (v89 != v91);
          for (j = 0LL; j != v89; ++j)
          {
            v94 = *(void *)(*(void *)(a3 + 8) + 8 * j);
            *(double *)(v94 + 8 * i) = *(double *)(v94 + 8 * i) - v92 * *(double *)(v94 + 8 * v89);
          }
        }
      }

      v95 = v89;
      v22[v95] = *(void *)(*(void *)(*(void *)(a3 + 8) + 8 * v89) + 8 * v89);
      *(void *)(*(void *)(*(void *)(a3 + 8) + 8 * v89) + v95 * 8) = 0x3FF0000000000000LL;
      if (v89)
      {
        for (k = 0LL; k != v89; ++k)
        {
          *(void *)(*(void *)(*(void *)(a3 + 8) + 8 * v89) + 8 * k) = 0LL;
          *(void *)(*(void *)(*(void *)(a3 + 8) + 8 * k) + 8 * v89) = 0LL;
        }
      }

      ++v89;
    }

    while (v89 != v11);
  }

  if (*a2 >= 1)
  {
    v97 = 0LL;
    do
    {
      *(void *)(*(void *)(*((void *)a2 + 1) + 8 * v97) + 8 * v97) = v22[v97];
      ++v97;
    }

    while (v97 < *a2);
  }

  if ((int)v11 > 1)
  {
    v98 = 0LL;
    v99 = v13 + 1;
    do
    {
      *(void *)(*(void *)(*((void *)a2 + 1) + v98 + 8) + v98) = v99[v98 / 8];
      *(void *)(*(void *)(*((void *)a2 + 1) + v98) + v98 + 8) = v99[v98 / 8];
      v98 += 8LL;
    }

    while (8LL * v101 - 8 != v98);
  }

  sub_1000C0EF8(v31);
  sub_1000C0EF8((uint64_t)v22);
  return sub_1000C0EF8((uint64_t)v13);
}

LABEL_49:
  unsigned int v10 = 3;
LABEL_50:
  else {
    uint64_t v11 = 3LL;
  }
  sub_1000C0EF8(v6);
  return v11;
}

  *(void *)(a1 + 848) = 0LL;
  LODWORD(v19) = (__int16)v19;
  v50 = v19 + *(__int16 *)(a1 + 550);
  if (v50 >= 0x4000) {
    LOWORD(v50) = 0x4000;
  }
  *(_WORD *)(a1 + 992) = sub_1000533D8(a1, (__int16)v50);
  *(_DWORD *)(a1 + 568) += *(__int16 *)(a1 + 544);
  *(_DWORD *)(a1 + 544) = 1073758208;
  *(_WORD *)(a1 + 996) = 0x4000;
  if (*(_WORD *)(a1 + 994) == 0x4000)
  {
    result = sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v206);
    *(_DWORD *)(a1 + 568) = 0x40000000;
    *(_DWORD *)(a1 + 524) = 5;
    int v14 = *(_WORD *)(a1 + 572);
    goto LABEL_55;
  }

  v211 = (unsigned __int16 *)(a1 + 572);
  v51 = *(void *)(a1 + 840);
  v52 = v51 - 12;
  if ((int)v13 >= 1)
  {
    v53 = 0;
    v54 = (_WORD *)(v15 + 12LL * v16);
    v55 = v54 - 6;
    v210 = v13;
LABEL_58:
    *(void *)(a1 + 1016) = sub_100062FAC(*(void *)(a1 + 656), v53);
    *(void *)(a1 + 1008) = sub_100062FC4(*(void *)(a1 + 656), v53);
    *(void *)(a1 + 680) = sub_100062FB8(*(void *)(a1 + 656), v53);
    *(_DWORD *)(a1 + 668) = v53;
    v213 = v55;
    v215 = v52;
    if (!sub_100062FD0(*(void *)(a1 + 656)))
    {
      v64 = *(__int16 *)(a1 + 992);
      v65 = *(_WORD **)(a1 + 1016);
      for (i = v54 - 6; ; i -= 6)
      {
        v69 = *i;
        v70 = &v65[2 * v69];
        if ((*v70 & 0x80000000) == 0)
        {
          *(_WORD *)(a1 + 722) = v70[1];
          if ((*v70 & 0x7FFF) != 0)
          {
            v67 = *(int *)(a1 + 528);
            v68 = (__int16)(*(_WORD *)(a1 + 564) + i[v67]);
            if (v68 <= v64)
            {
              v71 = i[v67 + 2];
LABEL_87:
              *(_WORD *)(a1 + 718) = v71;
LABEL_88:
              v222 = i;
              *(_WORD *)(a1 + 716) = v68;
              v76 = &v65[2 * v69 + 2];
              do
              {
                v77 = *v76;
                v76 += 2;
              }

              while (v77 < 0);
              LOWORD(v78) = *(v76 - 1) - 1;
              *(_WORD *)(a1 + 720) = v78;
              v78 = (unsigned __int16)v78;
              v79 = *v55;
LABEL_191:
              v134 = (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v78));
              if (v134 > *(__int16 *)(a1 + 992))
              {
LABEL_196:
              }

              else
              {
                if (v52 > (unint64_t)v55)
                {
                  v218 = v53;
                  v135 = v13;
                  v136 = v54;
                  v137 = v222;
                  v138 = *(void *)(a1 + 384);
                  v139 = *(_WORD *)(*(void *)(a1 + 1016) + 4 * v78);
                  *(_WORD *)v52 = v78;
                  *(_WORD *)(v52 + 4) = 0x4000;
                  v140 = *(unsigned __int16 *)sub_100015BAC(v138, v139 & 0x7FFF);
                  v141 = *(unsigned __int16 *)(*(void *)(v138 + 1792) + 2 * v140);
                  if (v141 == 0x4000) {
                    LOWORD(v141) = sub_100015BC0(v138, v140);
                  }
                  *(_WORD *)(v52 + 2) = v141 + v134 - *(_WORD *)(a1 + 994);
                  *(_BYTE *)(v52 + 10) = 0;
                  *(_BYTE *)(v52 + 11) = *((_BYTE *)v137 + 11) + 1;
                  *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                  v52 -= 12LL;
                  LODWORD(v78) = *(unsigned __int16 *)(a1 + 720);
                  v54 = v136;
                  uint64_t v13 = v135;
                  v53 = v218;
                  goto LABEL_196;
                }

                *(_DWORD *)(a1 + 524) = 3;
                if (*(unsigned __int16 *)(a1 + 722) < v78)
                {
LABEL_184:
                  v132 = v78 - 1;
LABEL_185:
                  *(_WORD *)(a1 + 720) = v132;
                  goto LABEL_186;
                }
              }

              v142 = v222;
              v143 = *(void *)(a1 + 1016);
              while (1)
              {
                while (1)
                {
                  do
                  {
                    v147 = (unsigned __int16)*(v142 - 6);
                    v142 -= 6;
                    v146 = v147;
                    v148 = (__int16 *)(v143 + 4LL * v147);
                  }

                  while (*v148 < 0);
                  *(_WORD *)(a1 + 722) = v148[1];
                  if ((*v148 & 0x7FFF) == 0) {
                    break;
                  }
                  v144 = *(int *)(a1 + 528);
                  v145 = (__int16)(*(_WORD *)(a1 + 564) + v142[v144]);
                  if (v145 <= *(__int16 *)(a1 + 992))
                  {
                    v149 = v142[v144 + 2];
LABEL_208:
                    *(_WORD *)(a1 + 718) = v149;
LABEL_209:
                    v222 = v142;
                    *(_WORD *)(a1 + 716) = v145;
                    v150 = (__int16 *)(v143 + 4 * v146 + 4);
                    do
                    {
                      v151 = *v150;
                      v150 += 2;
                    }

                    while (v151 < 0);
                    v132 = *(v150 - 1) - 1;
                    goto LABEL_185;
                  }
                }

                v145 = (__int16)v142[1];
                if (!*v142) {
                  break;
                }
                if (v145 <= *(__int16 *)(a1 + 992))
                {
                  v149 = v142[3];
                  goto LABEL_208;
                }
              }

              v145 = (__int16)(v145 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
              if (v145 <= *(__int16 *)(a1 + 992) && *v211)
              {
                *(_WORD *)(a1 + 718) = *v211;
                *(_WORD *)(a1 + 722) = 0;
                goto LABEL_209;
              }

              *(_WORD *)(a1 + 720) = 0;
              v222 = v142;
              while (1)
              {
LABEL_186:
                if (*(_DWORD *)(a1 + 524) == 3) {
                  goto LABEL_182;
                }
                v78 = *(unsigned __int16 *)(a1 + 720);
                v79 = *v55;
                while (1)
                {
LABEL_188:
                  if (!(_WORD)v79)
                  {
                    v152 = (__int16)v55[1];
                    if (v152 <= *(__int16 *)(a1 + 992))
                    {
                      v154 = *(void *)(a1 + 384);
                      v155 = (unsigned __int16 *)sub_100015BAC(v154, *v65 & 0x7FFF);
                      *(_WORD *)v52 = 0;
                      v156 = (__int16)v55[1];
                      v157 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                      v158 = v157 <= v156;
                      if (v157 >= v156) {
                        v159 = (__int16)v55[1];
                      }
                      else {
                        v159 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                      }
                      v160 = (__int16 *)(a1 + 572);
                      if (!v158) {
                        v160 = (__int16 *)(v55 + 3);
                      }
                      if (v159 <= *(__int16 *)(a1 + 992))
                      {
                        v161 = *v160;
                        v162 = *v155;
                        v163 = *(unsigned __int16 *)(*(void *)(v154 + 1792) + 2 * v162);
                        if (v163 == 0x4000) {
                          LOWORD(v163) = sub_100015BC0(v154, v162);
                        }
                        v153 = v163 + v159 - *(_WORD *)(a1 + 994);
                        *(_WORD *)(v52 + 6) = v161;
                      }

                      else
                      {
                        v153 = 0x4000;
                      }
                    }

                    else
                    {
                      *(_WORD *)v52 = 0;
                      v153 = 0x4000;
                    }

                    *(_WORD *)(v52 + 2) = v153;
                    *(_WORD *)(v52 + 10) = 0;
                    v55 -= 6;
                    v52 -= 12LL;
                    v54 = v222;
                    goto LABEL_233;
                  }

                  v133 = *(v55 - 6);
                  v55 -= 6;
                  LOWORD(v79) = v133;
                }

                sub_10005661C(a1, v55, v52, &v222, v65[2 * (unsigned __int16)v79]);
                v55 -= 6;
                v52 -= 12LL;
              }
            }
          }

          else
          {
            v68 = (__int16)i[1];
            if (!*i)
            {
              v68 = (__int16)(v68 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
              if (v68 > v64 || !*v211)
              {
                *(_WORD *)(a1 + 720) = 0;
                v222 = i;
                v78 = 0LL;
                LOWORD(v79) = *v55;
                goto LABEL_188;
              }

              *(_WORD *)(a1 + 718) = *v211;
              *(_WORD *)(a1 + 722) = 0;
              goto LABEL_88;
            }

            if (v68 <= v64)
            {
              v71 = i[3];
              goto LABEL_87;
            }
          }
        }
      }
    }

    v221 = 0;
    v220 = 0LL;
    v56 = *(__int16 *)(a1 + 992);
    v57 = *(_WORD **)(a1 + 1016);
    v58 = v54 - 6;
    v208 = *(void *)(a1 + 680);
    while (1)
    {
      v61 = *v58;
      v62 = &v57[2 * v61];
      if ((*v62 & 0x80000000) == 0)
      {
        *(_WORD *)(a1 + 722) = v62[1];
        if ((*v62 & 0x7FFF) != 0)
        {
          v59 = *(int *)(a1 + 528);
          v60 = (__int16)(*(_WORD *)(a1 + 564) + v58[v59]);
          if (v60 <= v56)
          {
            v63 = v58[v59 + 2];
            goto LABEL_76;
          }
        }

        else
        {
          v60 = (__int16)v58[1];
          if (!*v58)
          {
            v60 = (__int16)(v60 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
            if (v60 > v56 || !*v211)
            {
              *(_WORD *)(a1 + 720) = 0;
              v219 = v58;
              v74 = 0LL;
              LOWORD(v75) = *v55;
              goto LABEL_97;
            }

            *(_WORD *)(a1 + 718) = *v211;
            *(_WORD *)(a1 + 722) = 0;
LABEL_77:
            v219 = v58;
            *(_WORD *)(a1 + 716) = v60;
            v72 = &v57[2 * v61 + 2];
            do
            {
              v73 = *v72;
              v72 += 2;
            }

            while (v73 < 0);
            LOWORD(v74) = *(v72 - 1) - 1;
            *(_WORD *)(a1 + 720) = v74;
            v74 = (unsigned __int16)v74;
            v75 = *v55;
            while (1)
            {
LABEL_97:
              if (!(_WORD)v75)
              {
                v120 = (__int16)v55[1];
                if (v120 <= *(__int16 *)(a1 + 992))
                {
                  v122 = *(void *)(a1 + 384);
                  v123 = (unsigned __int16 *)sub_100015BAC(v122, *v57 & 0x7FFF);
                  *(_WORD *)v52 = 0;
                  v124 = (__int16)v55[1];
                  v125 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                  v126 = v125 <= v124;
                  if (v125 >= v124) {
                    v127 = (__int16)v55[1];
                  }
                  else {
                    v127 = (__int16)(*(_WORD *)(a1 + 714) + **(unsigned __int8 **)(a1 + 1008));
                  }
                  v128 = (__int16 *)(a1 + 572);
                  if (!v126) {
                    v128 = (__int16 *)(v55 + 3);
                  }
                  uint64_t v13 = v210;
                  if (v127 <= *(__int16 *)(a1 + 992))
                  {
                    v129 = *v128;
                    v130 = *v123;
                    v131 = *(unsigned __int16 *)(*(void *)(v122 + 1792) + 2 * v130);
                    if (v131 == 0x4000) {
                      LOWORD(v131) = sub_100015BC0(v122, v130);
                    }
                    v121 = v131 + v127 - *(_WORD *)(a1 + 994);
                    *(_WORD *)(v52 + 6) = v129;
                  }

                  else
                  {
                    v121 = 0x4000;
                  }
                }

                else
                {
                  *(_WORD *)v52 = 0;
                  v121 = 0x4000;
                  uint64_t v13 = v210;
                }

                *(_WORD *)(v52 + 2) = v121;
                *(_WORD *)(v52 + 10) = 0;
                v55 -= 6;
                v52 -= 12LL;
                v54 = v219;
                goto LABEL_233;
              }

              v81 = *(v55 - 6);
              v55 -= 6;
              LOWORD(v75) = v81;
            }

            v97 = &v57[2 * (unsigned __int16)v75];
            if (qword_1000FDCC0 && *(void *)(qword_1000FDCC0 + 3688) > (uint64_t)*((unsigned __int8 *)v55 + 11)
              || (*v97 & 0x80000000) == 0)
            {
LABEL_116:
              sub_10005661C(a1, v55, v52, &v219, *v97);
              v55 -= 6;
              v52 -= 12LL;
              goto LABEL_95;
            }

            sub_10009B1B8( *(void *)(a1 + 728),  (unsigned __int16)v57[2 * (unsigned __int16)v75 + 1],  0LL,  &v220,  &v221);
            v100 = *((unsigned __int8 *)v55 + 11);
            v207 = v97;
            if (v221 <= (int)v100)
            {
              v217 = v220;
              v222 = v219;
              v101 = *v55;
              v108 = *((unsigned __int8 *)v55 + 11);
              if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v108) <= v101) {
                goto LABEL_138;
              }
LABEL_142:
              sub_1000568DC(a1, v55, v52, v217[v108 - 1]);
              v52 -= 12LL;
              v109 = v55 - 6;
              if (*(v55 - 6) != v101)
              {
LABEL_139:
                v55 = v109;
                goto LABEL_160;
              }
            }

            else
            {
              v217 = v220;
              v222 = v219;
              v101 = *v55;
              v102 = (__int16)(*(_WORD *)(a1 + 564) + v55[*(int *)(a1 + 528)]);
              if (v102 <= *(__int16 *)(a1 + 992))
              {
                if (v52 <= (unint64_t)v55)
                {
                  *(_DWORD *)(a1 + 524) = 3;
                }

                else
                {
                  v103 = v54;
                  v104 = v220[v100];
                  v105 = *(void *)(a1 + 384);
                  *(_WORD *)v52 = v101;
                  *(_WORD *)(v52 + 4) = 0x4000;
                  v106 = *(unsigned __int16 *)sub_100015BAC(v105, v104);
                  v107 = *(unsigned __int16 *)(*(void *)(v105 + 1792) + 2 * v106);
                  if (v107 == 0x4000) {
                    LOWORD(v107) = sub_100015BC0(v105, v106);
                  }
                  *(_WORD *)(v52 + 2) = v107 + v102 - *(_WORD *)(a1 + 994);
                  *(_BYTE *)(v52 + 10) = 0;
                  *(_BYTE *)(v52 + 11) = *((_BYTE *)v55 + 11) + 1;
                  *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                  v52 -= 12LL;
                  v54 = v103;
                }
              }

              v97 = v207;
              v108 = *((unsigned __int8 *)v55 + 11);
LABEL_138:
              sub_10005661C(a1, v55, v52, &v222, *v97);
              v52 -= 12LL;
              v109 = v55 - 6;
              if (*(v55 - 6) != v101) {
                goto LABEL_139;
              }
            }

            v205 = v54;
            while (2)
            {
              v112 = v55 - 6;
              v113 = *((unsigned __int8 *)v55 - 1);
              if ((int)v113 + 1 >= *((unsigned __int8 *)v55 + 11)
                || (v114 = (__int16)(*(_WORD *)(a1 + 564) + v55[*(int *)(a1 + 528) - 6]), v114 > *(__int16 *)(a1 + 992)))
              {
LABEL_155:
                v119 = *((unsigned __int8 *)v55 - 1);
              }

              else
              {
                if (v52 > (unint64_t)v112)
                {
                  v115 = v217[v113];
                  v116 = *(void *)(a1 + 384);
                  *(_WORD *)v52 = v101;
                  *(_WORD *)(v52 + 4) = 0x4000;
                  v117 = *(unsigned __int16 *)sub_100015BAC(v116, v115);
                  v118 = *(unsigned __int16 *)(*(void *)(v116 + 1792) + 2 * v117);
                  if (v118 == 0x4000) {
                    LOWORD(v118) = sub_100015BC0(v116, v117);
                  }
                  *(_WORD *)(v52 + 2) = v118 + v114 - *(_WORD *)(a1 + 994);
                  *(_BYTE *)(v52 + 10) = 0;
                  *(_BYTE *)(v52 + 11) = *((_BYTE *)v55 - 1) + 1;
                  *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                  v52 -= 12LL;
                  v97 = v207;
                  goto LABEL_155;
                }

                *(_DWORD *)(a1 + 524) = 3;
                v119 = *((unsigned __int8 *)v55 - 1);
                if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v119) > (int)*(v55 - 6))
                {
LABEL_144:
                  sub_1000568DC(a1, v55 - 6, v52, v217[v119 - 1]);
                  goto LABEL_145;
                }
              }

              sub_10005661C(a1, v55 - 6, v52, &v222, *v97);
LABEL_145:
              else {
                v110 = -1LL;
              }
              v52 += 12 * v110;
              v111 = *(v55 - 12);
              v55 -= 6;
              if (v111 == v101) {
                continue;
              }
              break;
            }

            v55 = v112 - 6;
            v54 = v205;
LABEL_160:
            v219 = v222;
LABEL_95:
            while (2)
            {
              if (*(_DWORD *)(a1 + 524) != 3)
              {
                v74 = *(unsigned __int16 *)(a1 + 720);
                v75 = *v55;
LABEL_100:
                v82 = (__int16)(*(_WORD *)(a1 + 716) + *(unsigned __int8 *)(*(void *)(a1 + 1008) + v74));
                if (v82 > *(__int16 *)(a1 + 992))
                {
LABEL_105:
                }

                else
                {
                  if (v52 > (unint64_t)v55)
                  {
                    v83 = v54;
                    v84 = v219;
                    v85 = *(void *)(a1 + 384);
                    v86 = *(_WORD *)(*(void *)(a1 + 1016) + 4 * v74);
                    *(_WORD *)v52 = v74;
                    *(_WORD *)(v52 + 4) = 0x4000;
                    v87 = *(unsigned __int16 *)sub_100015BAC(v85, v86 & 0x7FFF);
                    v88 = *(unsigned __int16 *)(*(void *)(v85 + 1792) + 2 * v87);
                    if (v88 == 0x4000) {
                      LOWORD(v88) = sub_100015BC0(v85, v87);
                    }
                    *(_WORD *)(v52 + 2) = v88 + v82 - *(_WORD *)(a1 + 994);
                    *(_BYTE *)(v52 + 10) = 0;
                    *(_BYTE *)(v52 + 11) = *((_BYTE *)v84 + 11) + 1;
                    *(_WORD *)(v52 + 6) = *(_WORD *)(a1 + 718);
                    v52 -= 12LL;
                    LODWORD(v74) = *(unsigned __int16 *)(a1 + 720);
                    v54 = v83;
                    goto LABEL_105;
                  }

                  *(_DWORD *)(a1 + 524) = 3;
                  if (*(unsigned __int16 *)(a1 + 722) < v74)
                  {
LABEL_93:
                    v80 = v74 - 1;
                    goto LABEL_94;
                  }
                }

                v89 = v219;
                v90 = *(void *)(a1 + 1016);
                do
                {
                  while (1)
                  {
                    do
                    {
                      v94 = (unsigned __int16)*(v89 - 6);
                      v89 -= 6;
                      v93 = v94;
                      v95 = (__int16 *)(v90 + 4LL * v94);
                    }

                    while (*v95 < 0);
                    *(_WORD *)(a1 + 722) = v95[1];
                    if ((*v95 & 0x7FFF) != 0) {
                      break;
                    }
                    v92 = (__int16)v89[1];
                    if (!*v89)
                    {
                      v92 = (__int16)(v92 + *(_WORD *)(a1 + 562) + *(_WORD *)(a1 + 564));
                      if (v92 > *(__int16 *)(a1 + 992) || !*v211)
                      {
                        *(_WORD *)(a1 + 720) = 0;
                        v219 = v89;
                        goto LABEL_95;
                      }

                      *(_WORD *)(a1 + 718) = *v211;
                      *(_WORD *)(a1 + 722) = 0;
                      goto LABEL_121;
                    }

                    if (v92 <= *(__int16 *)(a1 + 992))
                    {
                      v96 = v89[3];
                      goto LABEL_120;
                    }
                  }

                  v91 = *(int *)(a1 + 528);
                  v92 = (__int16)(*(_WORD *)(a1 + 564) + v89[v91]);
                }

                while (v92 > *(__int16 *)(a1 + 992));
                v96 = v89[v91 + 2];
LABEL_120:
                *(_WORD *)(a1 + 718) = v96;
LABEL_121:
                v219 = v89;
                *(_WORD *)(a1 + 716) = v92;
                v98 = (__int16 *)(v90 + 4 * v93 + 4);
                do
                {
                  v99 = *v98;
                  v98 += 2;
                }

                while (v99 < 0);
                v80 = *(v98 - 1) - 1;
LABEL_94:
                *(_WORD *)(a1 + 720) = v80;
                continue;
              }

              break;
            }

            uint64_t v13 = v210;
LABEL_182:
            v55 = v213;
            v52 = v215;
LABEL_233:
            if (*(_DWORD *)(a1 + 524) != 3)
            {
              if (++v53 == (_DWORD)v13)
              {
                v51 = *(void *)(a1 + 840);
                break;
              }

              goto LABEL_58;
            }

            return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v206);
          }

          if (v60 <= v56)
          {
            v63 = v58[3];
LABEL_76:
            *(_WORD *)(a1 + 718) = v63;
            goto LABEL_77;
          }
        }
      }

      v58 -= 6;
    }
  }

  v164 = (const void *)(v52 + 12);
  v165 = v51 - (v52 + 12);
  v166 = 0xAAAAAAAAAAAAAAABLL * (v165 >> 2);
  sub_100062F94(*(void *)(a1 + 656));
  v167 = v52;
  v168 = *(void *)(a1 + 840);
  v169 = *(int **)(a1 + 736);
  v170 = (void *)*((void *)v169 + 1);
  v171 = *v169;
  bzero(v170, 2 * v171);
  v172 = sub_100062F94(*(void *)(a1 + 656));
  if ((int)v166 < 1)
  {
    v174 = 0x4000;
  }

  else
  {
    v173 = v168 - 0xFFFFFFFC00000004LL * (v165 >> 2);
    v174 = 0x4000;
    do
    {
      v175 = *(_WORD *)v173 == 0;
      v176 = *(__int16 *)(v173 + 2LL * *(unsigned __int8 *)(v173 + 10) + 2);
      v172 -= v175;
      if ((int)v176 < v174 && *(_WORD *)v173)
      {
        *(void *)(a1 + 848) = v173;
        *(_DWORD *)(a1 + 672) = v172;
        v174 = v176;
      }

      v173 += 12LL;
    }

    while (v173 < v168);
  }

  *(_WORD *)(a1 + 546) = v174;
  v177 = *(_WORD *)(v167 + 18);
  v178 = *(__int16 *)(v167 + 14);
  v179 = *(__int16 *)(a1 + 996);
  if (v178 < v179)
  {
    *(_WORD *)(a1 + 996) = *(_WORD *)(v167 + 14);
    v179 = v178;
  }

  if (v179 < v174)
  {
    *(void *)(a1 + 848) = v164;
    *(_DWORD *)(a1 + 672) = 0;
    v174 = v179;
  }

  *(_WORD *)(a1 + 544) = v174;
  if (v178 < (__int16)(*(_WORD *)(a1 + 554) + v174))
  {
    LODWORD(v222) = 0;
    v180 = *v211;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3224) && *(_DWORD *)(qword_1000FDCC0 + 3024)) {
      ++v180;
    }
    sub_1000D06E4(*(void *)(a1 + 472), v177, v180, 65534, *(_DWORD *)(a1 + 568) + v178, &v222);
    if ((_DWORD)v222)
    {
LABEL_258:
      *(_DWORD *)(a1 + 524) = 3;
      return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v206);
    }
  }

  *(_DWORD *)(a1 + 532) = v166;
  v181 = *(__int16 *)(a1 + 544);
  v182 = *(_WORD *)(a1 + 552) + v181;
  v183 = sub_100062FD0(*(void *)(a1 + 656));
  v184 = *(void *)(a1 + 840);
  v185 = sub_100062FAC(*(void *)(a1 + 656), 0);
  v186 = sub_100062F94(*(void *)(a1 + 656));
  if (v183)
  {
    for (j = 0; ; v185 = sub_100062FAC(*(void *)(a1 + 656), j))
    {
      while (1)
      {
        v189 = *(unsigned __int16 *)(v184 - 12);
        v184 -= 12LL;
        v188 = v189;
        if (!v189) {
          break;
        }
        v190 = (__int16 *)(v185 + 4 * v188);
        if (*v190 < 0
          && sub_10009B978(*(void *)(a1 + 728), (unsigned __int16)v190[1]) == *(unsigned __int8 *)(v184 + 11))
        {
          sub_100056A8C(a1, (uint64_t)v190, v184, v182);
        }
      }

      if (++j == v186) {
        break;
      }
    }
  }

  else
  {
    v193 = *(unsigned __int16 *)(v184 - 12);
    v192 = v184 - 12;
    v191 = v193;
    if (v193) {
      goto LABEL_277;
    }
    while (++v183 != v186)
    {
      v185 = sub_100062FAC(*(void *)(a1 + 656), v183);
      v196 = *(unsigned __int16 *)(v192 - 12);
      v192 -= 12LL;
      v191 = v196;
      if (v196)
      {
        do
        {
LABEL_277:
          v195 = (__int16 *)(v185 + 4 * v191);
          if (*v195 < 0) {
            sub_100056A8C(a1, (uint64_t)v195, v192, v182);
          }
          v194 = *(unsigned __int16 *)(v192 - 12);
          v192 -= 12LL;
          v191 = v194;
        }

        while (v194);
      }
    }
  }

  j__memmove(*(void **)(a1 + 832), v164, (int)v165);
  *(void *)(a1 + 848) += 12 * ((int)v166 - (uint64_t)*(int *)(a1 + 880));
  if (*(_BYTE *)(a1 + 424)) {
    sub_100039B9C(a1, v197, v198, v199, v200, v201, v202, v203);
  }
  sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v206);
  ++*(_WORD *)(a1 + 572);
  result = sub_1000B25CC((unsigned int *)(a1 + 756), *(unsigned __int16 *)(a1 + 996) == *(unsigned __int16 *)(a1 + 544));
  if (*(_DWORD *)(a1 + 524) != 3)
  {
    result = sub_100053590((_DWORD *)a1);
    if ((_DWORD)result) {
      v204 = 2;
    }
    else {
      v204 = 1;
    }
    *(_DWORD *)(a1 + 524) = v204;
  }

  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1064)) {
    return sub_100038EB4(a1);
  }
  return result;
}

      if (v38) {
        break;
      }
LABEL_23:
      v36 = v86;
      v37 = v85 + 1;
      if (v85 + 1 == v83) {
        goto LABEL_74;
      }
    }

    if (v86 > v40) {
      j__memmove(&v23[v40 + 1], &v23[v40], 2 * (v86 - v40));
    }
    v23[v40] = v87;
    v36 = v86 + 1;
    v37 = v85 + 1;
  }

  while (v85 + 1 != v83);
LABEL_74:
  v72 = sub_1000B3298((uint64_t)v90);
  v73 = sub_1000C1074(8LL * (v72 + 1));
  if (!v73)
  {
    sub_1000C0EF8((uint64_t)v23);
    sub_1000C0EF8((uint64_t)v88);
    sub_1000C0EF8(v79);
    sub_1000C0EF8((uint64_t)v33);
    v31 = (uint64_t)v35;
    goto LABEL_81;
  }

  v74 = v73;
  v75 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    v76 = *(_DWORD *)(qword_1000FDCC0 + 3688);
    v75 = *(_DWORD *)(qword_1000FDCC0 + 3680);
  }

  else
  {
    v76 = 0;
  }

  v77 = sub_100060520(v80, v90, v89, v36, v23, 0LL, 0, v76, v75, v73, v81, a5, 1, v93, v14);
  if (v14) {
    sub_10009ACA8(v14);
  }
  sub_1000C0EF8(v74);
  sub_1000C0EF8((uint64_t)v35);
  sub_1000C0EF8((uint64_t)v33);
  sub_1000C0EF8(v79);
  sub_1000C0EF8((uint64_t)v88);
  sub_1000C0EF8((uint64_t)v23);
  return v77;
}

  v92 = sub_10008EBF4( *(void *)(a1 + 528),  a2,  a3,  (unint64_t *)a5,  a4,  (_DWORD *)(a1 + 512),  (_DWORD *)(a1 + 516),  (_DWORD *)(a1 + 524),  (_DWORD *)(a1 + 520),  a6,  a7);
  sub_1000CB094(v14);
  return v92;
}

    if (!sub_10003927C( *(void *)(a1 + 536),  a3,  v115,  v116,  (unsigned int **)(a1 + 8760),  4LL,  v113,  v107,  v114))
    {
      sub_100039820(*(void *)(a1 + 520), 0LL);
      sub_1000B2170(a1);
      sub_10003991C(*(void *)(a1 + 536));
      v32 = 0LL;
      *v109 = 1;
      return v32;
    }

    v32 = sub_10003927C(*(void *)(a1 + 528), a3, v115, v111, (unsigned int **)(a1 + 16952), 3LL, v113, v107, v114);
    if ((_DWORD)v32) {
      goto LABEL_51;
    }
    sub_100039820(*(void *)(a1 + 520), 0LL);
    sub_100039820(*(void *)(a1 + 536), 0LL);
    sub_1000B2170(a1);
    goto LABEL_54;
  }

  v32 = sub_10003927C(*(void *)(a1 + 536), a3, v39, a5, a4, 4LL, v113, a8, __SPAIR64__(v40, v114));
  if ((_DWORD)v32) {
    goto LABEL_51;
  }
  sub_100039820(*(void *)(a1 + 520), 0LL);
  sub_1000B2170(a1);
  sub_10003991C(*(void *)(a1 + 536));
  *v47 = 1;
  return v32;
}

        v99 = 0LL;
LABEL_50:
        v116 = v99;
        v132 = sub_10003967C(v21, a13, a14, a2, v135, v131, a5, v130, v129, v127, v126, v125, v128, v99, 0LL);
        v39 = (uint64_t *)(a1 + 520);
        if (v134 != 5)
        {
LABEL_23:
          v114 = v39;
          v133 = (_DWORD *)sub_1000CAF58(4LL * (int)a2, v32, v33, v34, v35, v36, v37, v38);
          v124 = sub_1000CAF58(2LL * (int)a2, v40, v41, v42, v43, v44, v45, v46);
          v123 = (_DWORD *)sub_1000CAF58(4LL * (int)a5, v47, v48, v49, v50, v51, v52, v53);
          v122 = sub_1000CAF58((int)a5, v54, v55, v56, v57, v58, v59, v60);
          if (a11)
          {
            v121 = sub_1000CAF58(2LL * (int)a5, v61, v62, v63, v64, v65, v66, v67);
            if (a8) {
              goto LABEL_25;
            }
          }

          else
          {
            v121 = 0LL;
            if (a8)
            {
LABEL_25:
              v120 = sub_1000CAF58(4LL * (int)a5, v61, v62, v63, v64, v65, v66, v67);
              if (a9) {
                goto LABEL_26;
              }
              goto LABEL_40;
            }
          }

          v120 = 0LL;
          if (a9)
          {
LABEL_26:
            v119 = sub_1000CAF58(4LL * (int)a5, v61, v62, v63, v64, v65, v66, v67);
            if (a10) {
              goto LABEL_27;
            }
            goto LABEL_41;
          }

    v63 = (const __CFArray *)VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassElements", v46);
    if (v63)
    {
      v64 = (const __CFArray *)VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassElementValues", v46);
      v65 = CFArrayGetCount(v63);
      v20 = v130;
      if (v64 && CFArrayGetCount(v64) != v65) {
        v52 = 0;
      }
      v66 = 0LL;
      if (v65 >= 1 && v52)
      {
        v66 = 0LL;
        v67 = 1LL;
        while (1)
        {
          v68 = VSCFArrayGetValueAtIndexIfType(v63, v67 - 1, v20);
          v52 = v68 != 0;
          if (v64)
          {
            v69 = (const void *)v68;
            if (v68)
            {
              v70 = VSCFArrayGetValueAtIndexIfType(v64, v67 - 1, v130);
              if (!v70)
              {
                v52 = 0;
                v20 = v130;
                break;
              }

              v71 = (const void *)v70;
              if (!v66) {
                v66 = CFDictionaryCreateMutable( v129,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              }
              CFDictionarySetValue(v66, v69, v71);
              v52 = 1;
            }
          }

          v20 = v130;
          if (v67 < v65)
          {
            ++v67;
            if (v52) {
              continue;
            }
          }

          break;
        }
      }

      if (!v65) {
        v52 = v114;
      }
      v46 = v123;
      if (!v52) {
        goto LABEL_95;
      }
    }

    else
    {
      v72 = (const __CFArray *)VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassSequences", v46);
      v20 = v130;
      if (v72 && CFArrayGetCount(v72) >= 1)
      {
        v73 = v125;
        if (!v125) {
          v73 = CFArrayCreateMutable(v129, 0LL, &kCFTypeArrayCallBacks);
        }
        v125 = v73;
        CFArrayAppendValue(v73, v48);
        v52 = 1;
        v43 = theDict;
        v26 = v120;
        goto LABEL_105;
      }

      v65 = 0LL;
      v66 = 0LL;
      v52 = v114;
      if (!v114) {
        goto LABEL_95;
      }
    }

    v75 = VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassType", v20);
    if (v75
      && (v76 = (const void *)v75, pthread_once(&stru_1000FD8E0, sub_1000E6974), qword_100102AB0)
      && CFDictionaryContainsKey((CFDictionaryRef)qword_100102AB0, v76))
    {
      v77 = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)qword_100102AB0, v76);
    }

    else
    {
      v77 = -1LL;
    }

    v78 = (const __CFNumber *)VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassWeight", v112);
    v79 = (const __CFBoolean *)VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassContainsKeywords", v113);
    if (v79)
    {
      v80 = CFBooleanGetValue(v79) != 0;
      if (!v78) {
        goto LABEL_89;
      }
    }

    else
    {
      v80 = 0;
      if (!v78)
      {
LABEL_89:
        v81 = 0LL;
        valuePtr[0] = 0LL;
        goto LABEL_90;
      }
    }

    CFNumberGetValue(v78, kCFNumberCFIndexType, valuePtr);
    v81 = valuePtr[0];
LABEL_90:
    if (v65 <= 0) {
      v82 = 0LL;
    }
    else {
      v82 = v63;
    }
    v83 = (void *)sub_1000E90D0((uint64_t)v129, v50, v77, v80, v81, v82, 1);
    if (!v83)
    {
      v43 = theDict;
      v20 = v130;
      v26 = v120;
      if (!v66) {
        break;
      }
      v52 = 0;
      goto LABEL_104;
    }

    v84 = v83;
    sub_1000E6A40(v129, v83, v50, &v139, &v138);
    CFRelease(v84);
    v20 = v130;
LABEL_95:
    if (v52 && v66)
    {
      v43 = theDict;
      v26 = v120;
      if (!theDict) {
        v43 = CFDictionaryCreateMutable(v129, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      }
      CFDictionarySetValue(v43, v50, v66);
      v52 = 1;
LABEL_104:
      CFRelease(v66);
      goto LABEL_105;
    }

    v43 = theDict;
    v26 = v120;
    if (v66) {
      goto LABEL_104;
    }
LABEL_105:
    v45 = v126 + 1;
    v85 = v52;
    if (v126 + 1 >= Count || !v52) {
      goto LABEL_111;
    }
  }

  v85 = 0;
  v52 = 0;
LABEL_111:
  if (!v125)
  {
    uint64_t v5 = v111;
LABEL_128:
    int v7 = v108;
    v42 = v119;
    if (v52)
    {
      v41 = sub_1000E6ADC(v129, theArray, v138, 0, (const void **)&v131, cf);
      *(void *)&v132 = sub_1000E6F1C;
      *((void *)&v132 + 1) = sub_1000E712C;
      v133 = sub_1000E7444;
      v134 = sub_1000E75C4;
      v135 = sub_1000E7678;
      v136 = sub_1000E77A0;
      v137 = 0LL;
      if (number) {
        CFNumberGetValue(number, kCFNumberCFIndexType, valuePtr);
      }
      else {
        valuePtr[0] = 0LL;
      }
      if (BOOLean) {
        v103 = CFBooleanGetValue(BOOLean);
      }
      else {
        v103 = 0;
      }
      unsigned int v10 = (const __CFString *)sub_1000E8048(v129, v119, valuePtr[0], v103, v139, v41, v131, v107, &v132, v118);
      if (v10 && v43)
      {
        v104 = *(__CFDictionary **)(v118 + 104);
        if (!v104)
        {
          v104 = CFDictionaryCreateMutable(v129, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          *(void *)(v118 + 104) = v104;
        }

        CFDictionarySetValue(v104, v119, v43);
      }
    }

    else
    {
      v41 = 0LL;
      unsigned int v10 = 0LL;
    }

    goto LABEL_145;
  }

  v86 = CFArrayGetCount(v125);
  v87 = !v85;
  if (v86 < 1) {
    v87 = 1;
  }
  uint64_t v5 = v111;
  if ((v87 & 1) != 0) {
    goto LABEL_128;
  }
  v88 = v86;
  v89 = 1LL;
  while (1)
  {
    v90 = CFArrayGetValueAtIndex(v125, v89 - 1);
    v91 = (const __CFArray *)VSCFDictionaryGetValueIfType(v90, @"VSRecognitionClassSequences", v123);
    v92 = sub_1000E6ADC(v129, v91, v138, 1, 0LL, cf);
    v41 = v92;
    if (!v92) {
      break;
    }
    v93 = CFArrayGetCount(v92);
    if (v93 < 1)
    {
      v52 = 0;
    }

    else
    {
      v94 = (const void *)VSCFDictionaryGetValueIfType(v90, @"VSRecognitionClassIdentifier", v130);
      v95 = sub_1000E90D0((uint64_t)v129, v94, -1LL, 0, 0LL, v41, 0);
      if (v95)
      {
        v96 = (void *)v95;
        v97 = (const void *)VSCFDictionaryGetValueIfType(v90, @"VSRecognitionClassIdentifier", v130);
        sub_1000E6A40(v129, v96, v97, &v139, &v138);
        CFRelease(v96);
      }

      v52 = 1;
      uint64_t v5 = v111;
    }

    CFRelease(v41);
    if (v89 < v88)
    {
      ++v89;
      if (v93 > 0) {
        continue;
      }
    }

    goto LABEL_128;
  }

  unsigned int v10 = 0LL;
  int v7 = v108;
LABEL_109:
  v42 = v119;
LABEL_145:
  if (v139) {
    CFRelease(v139);
  }
  if (v41) {
    CFRelease(v41);
  }
  if (v138) {
    CFRelease(v138);
  }
  v3 = v118;
  if (v131) {
    CFRelease(v131);
  }
  if (v125) {
    CFRelease(v125);
  }
  if (v43) {
    CFRelease(v43);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(valuea);
  if (v10)
  {
    v105 = *(__CFDictionary **)(v118 + 112);
    if (!v105)
    {
      v105 = CFDictionaryCreateMutable(allocator, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *(void *)(v118 + 112) = v105;
    }

    CFDictionarySetValue(v105, v42, v10);
  }

uint64_t sub_100041E90(uint64_t a1, uint64_t a2, __int32 a3, unsigned int a4, void *a5)
{
  uint64_t v9 = sub_1000BDA88(a2, "elvisversion", 0LL);
  if (!v9) {
    return 9LL;
  }
  uint64_t v11 = v9;
  sub_1000BDB78(v9, 0x7FFFFFFF, v10);
  sub_1000BDB78(v11, 2, v12);
  sub_1000BDB78(v11, *(_DWORD *)(a1 + 152), v13);
  __int32 v14 = sub_10009AA58();
  sub_1000BDB78(v11, v14, v15);
  sub_1000BDB78(v11, *(_DWORD *)(a1 + 156), v16);
  sub_1000BDB78(v11, *(_DWORD *)(a1 + 160), v17);
  sub_1000BDB78(v11, 2, v18);
  sub_1000BDB78(v11, 4, v19);
  sub_1000BDB78(v11, 8, v20);
  sub_1000BDB78(v11, 2, v21);
  sub_1000BDB78(v11, 2, v22);
  sub_1000BDB78(v11, 4, v23);
  sub_1000BDB78(v11, 2, v24);
  sub_1000BDB78(v11, a3, v25);
  char v43 = 0;
  int v42 = 0;
  sub_1000B31D8(*(uint64_t **)(a1 + 8), 5, &v42);
  sub_1000BDBCC(v11, &v42, 4u, 1, v26);
  __int32 v27 = sub_1000597E0(*(void *)a1);
  sub_1000BDB78(v11, v27, v28);
  sub_1000BDB78(v11, *(_DWORD *)(a1 + 164), v29);
  sub_1000BDB78(v11, *(_DWORD *)(a1 + 168), v30);
  __int32 v31 = sub_100059858(*(void *)a1, 0LL);
  __int32 v32 = sub_100007200(*(void *)(a1 + 16), 0LL);
  __int32 v33 = sub_1000BBCE8(*(uint64_t **)(a1 + 8));
  sub_1000BDB78(v11, v31, v34);
  sub_1000BDB78(v11, v32, v35);
  sub_1000BDB78(v11, v33, v36);
  if (a5) {
    unsigned int v38 = a4;
  }
  else {
    unsigned int v38 = 0;
  }
  sub_1000BDBCC(v11, a5, v38, 1, v37);
  if (*(void *)(a1 + 48)) {
    __int32 v40 = sub_100050540(a1);
  }
  else {
    __int32 v40 = 0;
  }
  sub_1000BDB78(v11, v40, v39);
  sub_1000BDB48(v11);
  return 0LL;
}

uint64_t sub_100042098( uint64_t a1, unsigned __int32 *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, unsigned __int32 *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12, _DWORD *a13, int a14, _BYTE *a15, int a16, void *a17)
{
  uint8x8_t v24 = sub_1000BCAE8(a1, "elvisversion", 0LL, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  if (!v24) {
    return 0LL;
  }
  uint64_t v25 = (uint64_t)v24;
  *a5 = -1;
  int v37 = 0;
  LODWORD(v26) = sub_1000BCD38((uint64_t)v24, a5);
  if (!(_DWORD)v26)
  {
    int v29 = 0;
    *a5 = -1;
    goto LABEL_25;
  }

  if (*a5 == 0x7FFFFFFF)
  {
    if (!sub_1000BCD38(v25, &v37)) {
      goto LABEL_49;
    }
    int v27 = v37;
    *a3 = 0;
    *a6 = 0;
    if (v27)
    {
      __int32 v32 = a15;
      unsigned __int32 v28 = 0;
      goto LABEL_37;
    }
  }

  else
  {
    *a3 = 0;
    *a6 = 0;
  }

  v35[0].i8[4] = 0;
  v35[0].i32[0] = 0;
  if (!sub_1000BCE28(v25, v35, 4, 1)) {
    goto LABEL_49;
  }
  sub_1000C896C(a15, (char *)v35, a14);
  unsigned __int32 v36 = 0;
  if (!sub_1000BCD38(v25, &v36)) {
    goto LABEL_49;
  }
  __int32 v32 = a15;
  unsigned __int32 v28 = v36;
  if ((v37 - 1) > 1)
  {
LABEL_7:
    if (v28 <= 5) {
      goto LABEL_8;
    }
    return 0LL;
  }

BOOL sub_100042450(uint64_t a1, uint64_t a2)
{
  return sub_1000BCD38(a1, (void *)(a2 + 24));
}

uint64_t sub_1000424B8(const char *a1, uint64_t *a2, unsigned int a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v11 = sub_1000C8EE4(a1);
  uint64_t v19 = 4LL;
  if (a3 > 2) {
    return v19;
  }
  uint64_t v20 = v11;
  if (!v11) {
    return v19;
  }
  unsigned __int32 v28 = (_BYTE *)sub_1000CAF58(13LL, v12, v13, v14, v15, v16, v17, v18);
  *(void *)unsigned __int32 v28 = 0LL;
  *(void *)(v28 + 5) = 0LL;
  if (a3 == 2)
  {
    uint64_t v29 = *a2;
  }

  else
  {
    sub_1000C0BFC(0x1FF0uLL, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v29 = v30;
    *(void *)(v30 + 8168) = "Elvis Magic";
  }

  uint64_t v87 = 0LL;
  uint64_t v88 = 0LL;
  int v86 = 0;
  unsigned __int32 v81 = 0;
  if (!sub_100042098( v20,  &v81,  &v87,  &v88,  (_DWORD *)&v88 + 1,  (_DWORD *)&v87 + 1,  &v86,  &v85,  &v84,  &v83,  a4,  a5,  a6,  5,  v82,  13,  v28)) {
    goto LABEL_10;
  }
  int v31 = v87;
  int v32 = sub_10009AA58();
  int v39 = HIDWORD(v88);
  if (HIDWORD(v88) != v32 && !(_DWORD)v87) {
    goto LABEL_10;
  }
  if ((_DWORD)v87) {
    BOOL v42 = 1;
  }
  else {
    BOOL v42 = (_DWORD)v88 == v32;
  }
  int v40 = 1;
  if (!v42 || v81 != a3) {
    goto LABEL_11;
  }
  *(_DWORD *)(v29 + 152) = v87;
  *(_DWORD *)(v29 + 156) = v39;
  *(_DWORD *)(v29 + 160) = HIDWORD(v87);
  uint64_t v43 = *(void *)(v29 + 6512);
  uint64_t v44 = sub_1000C2984(v20, 0LL, v33, v34, v35, v36, v37, v38);
  *(void *)(v29 + 6512) = v44;
  if (!v44) {
    goto LABEL_10;
  }
  qword_1000FDCC0 = v44;
  *(void *)(v29 + 6504) = v44;
  sub_1000C0EF8(v43);
  if (a3 == 2)
  {
LABEL_25:
    v51 = sub_1000BC21C(v20, 0LL, v45, v46, v47, v48, v49, v50);
    *(void *)(v29 + 8) = v51;
    if (!v51) {
      goto LABEL_10;
    }
    if (*v28)
    {
      uint64_t v58 = sub_1000B252C(v20, 0LL);
      *(void *)(v29 + 48) = v58;
      if (!v58) {
        goto LABEL_10;
      }
    }

    if (*(void *)(v29 + 136)) {
      goto LABEL_10;
    }
    if (*(void *)(v29 + 144)) {
      goto LABEL_10;
    }
    if (v28[7])
    {
      uint64_t v59 = sub_10003AF78( v20,  "bdec0/",  *(void *)(v29 + 8),  *(void *)(v29 + 16),  *(void *)(v29 + 24),  *(void *)(v29 + 40));
      *(void *)(v29 + 104) = v59;
      if (!v59) {
        goto LABEL_10;
      }
    }

    if (v28[8])
    {
      uint64_t v60 = sub_10003AF78(v20, "bdec1/", *(void *)(v29 + 8), *(void *)(v29 + 16), 0LL, 0LL);
      *(void *)(v29 + 112) = v60;
      if (!v60) {
        goto LABEL_10;
      }
    }

    if (v28[9])
    {
      uint64_t v61 = sub_10003AF78(v20, "bdec2/", *(void *)(v29 + 8), *(void *)(v29 + 24), 0LL, 0LL);
      *(void *)(v29 + 136) = v61;
      if (!v61) {
        goto LABEL_10;
      }
    }

    if (v28[10])
    {
      uint64_t v62 = sub_10003AF78(v20, "bdec3/", *(void *)(v29 + 8), *(void *)(v29 + 40), 0LL, 0LL);
      *(void *)(v29 + 144) = v62;
      if (!v62) {
        goto LABEL_10;
      }
    }

    if (v28[11])
    {
      uint64_t v63 = sub_10003AF78(v20, "bdec4/", *(void *)(v29 + 8), *(void *)(v29 + 32), 0LL, 0LL);
      *(void *)(v29 + 120) = v63;
      if (!v63) {
        goto LABEL_10;
      }
    }

    if (v28[2])
    {
      int v64 = qword_1000FDCC0 ? *(_DWORD *)(qword_1000FDCC0 + 1920) : 0;
      v76 = sub_10002F09C(v64);
      *(void *)(v29 + 72) = v76;
      if (!v76) {
        goto LABEL_10;
      }
    }

    if (v28[1])
    {
      v77 = sub_100036584(v20, 0LL, *(void *)(v29 + 8), *(void *)(v29 + 16), *(void *)(v29 + 72), v55, v56, v57);
      *(void *)(v29 + 80) = v77;
      if (!v77) {
        goto LABEL_10;
      }
    }

    if (v28[12])
    {
      uint64_t v78 = *(void *)(v29 + 56);
      if (v78) {
        sub_10005BC4C(v78);
      }
      v79 = sub_10005CB78(v20, 0LL, *(void *)(v29 + 8), v53, v54, v55, v56, v57);
      *(void *)(v29 + 56) = v79;
      if (!v79) {
        goto LABEL_10;
      }
    }

    uint64_t v80 = sub_1000516D0(v20, 0LL, v52, v53, v54, v55, v56, v57);
    *(void *)(v29 + 5624) = v80;
    if (!v80 || !*(void *)(v29 + 104) && !*(void *)(v29 + 112)) {
      goto LABEL_10;
    }
LABEL_56:
    int v40 = 0;
    goto LABEL_11;
  }

  uint64_t v65 = sub_1000599E0(v20, 0LL, v45, v46, v47, v48, v49, v50);
  *(void *)uint64_t v29 = v65;
  if (!v65
    || (int v66 = sub_1000597E0(v65), v66 != v86)
    || !sub_100059818(*(void *)v29) && qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 764)
    || (v72 = sub_10000F3F8(v20, 0LL, 0, v67, v68, v69, v70, v71), (*(void *)(v29 + 16) = v72) == 0LL))
  {
LABEL_10:
    int v40 = 1;
    goto LABEL_11;
  }

  if (!v28[4]
    || (int v40 = 1, v73 = sub_10000F3F8(v20, 0LL, 1u, v46, v47, v48, v49, v50), (*(void *)(v29 + 24) = v73) != 0LL))
  {
    if (!v28[5] || (v74 = sub_10000F3F8(v20, 0LL, 2u, v46, v47, v48, v49, v50), (*(void *)(v29 + 40) = v74) != 0LL))
    {
      if (!v28[6] || (v75 = sub_10000F3F8(v20, 0LL, 3u, v46, v47, v48, v49, v50), (*(void *)(v29 + 32) = v75) != 0LL))
      {
        *a2 = v29;
        if ((a3 & 0xFFFFFFFD) != 0) {
          goto LABEL_56;
        }
        goto LABEL_25;
      }
    }

    goto LABEL_10;
  }

uint64_t sub_100042918(const char *a1, const char *a2, uint64_t a3, void *a4)
{
  unsigned int v24 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  int v21 = 0;
  int v19 = -1;
  uint64_t v20 = -1LL;
  uint64_t v16 = 0LL;
  uint64_t v18 = sub_1000C0BA8(a3);
  uint64_t v17 = sub_1000CAEC8(0LL);
  uint64_t v14 = sub_1000BEAC4();
  uint64_t v15 = sub_1000CF8F8(0LL, 0LL, &v16);
  memset(v25, 0, 512);
  if (sub_10003F844(v25) && (sub_1000BEAB0(v25), uint64_t v8 = (int *)sub_1000BE9FC(), !setjmp(v8)))
  {
    if (a4 && a1 && *a1 && a2 && *a2)
    {
      sub_10003FA1C();
      unsigned int v24 = sub_1000424B8(a1, (uint64_t *)&v23, 1u, &v22, (_DWORD *)&v22 + 1, &v21);
      if (!v24) {
        unsigned int v24 = sub_1000424B8(a2, (uint64_t *)&v23, 2u, &v20, (_DWORD *)&v20 + 1, &v19);
      }
      if (!v24 && v22 != v20 && v21 != v19) {
        unsigned int v24 = 3;
      }
      if (!v24)
      {
        uint64_t v9 = v23;
        sub_10003F3F8((uint64_t)v23);
        unsigned int v24 = v10;
        if (!v10)
        {
          *a4 = v9;
          v9[810] = a3;
          v9[811] = sub_1000CAEDC();
          v9[812] = sub_1000045C8();
          v9[813] = v11;
        }
      }

      int v12 = v24;
    }

    else
    {
      int v12 = 4;
    }

    unsigned int v24 = v12;
    sub_1000BEA60();
  }

  else
  {
    unsigned int v24 = 1;
  }

  sub_1000504B4(v24);
  sub_1000CF8F8(v15, v16, 0LL);
  sub_1000BEAB0(v14);
  sub_1000CAEC8(v17);
  sub_1000C0BA8(v18);
  return v24;
}

uint64_t sub_100042B9C(uint64_t a1)
{
  uint64_t v2 = sub_100023CAC(512);
  *(void *)(a1 + 6408) = v2;
  return 2 * (v2 == 0);
}

uint64_t *sub_100042BD4(uint64_t a1)
{
  result = *(uint64_t **)(a1 + 6408);
  if (result)
  {
    result = sub_100023D0C(result);
    *(void *)(a1 + 6408) = 0LL;
  }

  return result;
}

uint64_t sub_100042C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 72);
  if (v2) {
    return sub_10002F438(v2, a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100042C14(uint64_t a1, unsigned int a2)
{
  if (a2 == -1) {
    return 0LL;
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return sub_10002F660(result, a2) != 0;
  }
  return result;
}

uint64_t sub_100042C48(uint64_t a1, unsigned int a2)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  if (!a1)
  {
    uint64_t v13 = sub_1000C0BA8(0LL);
    uint64_t v12 = sub_1000CAEC8(0LL);
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    unsigned int v10 = sub_1000CF8F8(0LL, 0LL, &v11);
    nullsub_1(v10);
LABEL_8:
    unsigned int v14 = 1;
    goto LABEL_9;
  }

  uint64_t v13 = sub_1000C0BA8(*(void *)(a1 + 6480));
  uint64_t v12 = sub_1000CAEC8(*(void *)(a1 + 6488));
  uint64_t v9 = sub_1000BEAC4();
  sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
  unsigned int v10 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
  nullsub_1(v10);
  if (*(_DWORD *)(a1 + 8160)) {
    return 1LL;
  }
  sub_1000BEAB0((void *)(a1 + 6648));
  uint64_t v5 = (int *)sub_1000BE9FC();
  if (setjmp(v5))
  {
    *(_DWORD *)(a1 + 8160) = 1;
    goto LABEL_8;
  }

  if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
  {
    if (*(_DWORD *)(a1 + 8160) || (uint64_t v6 = *(void *)(a1 + 72)) == 0)
    {
      unsigned int v14 = 1;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (a2 != -1 && sub_10002F660(v6, a2) && (a2 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a1 + 6448))
      {
        unsigned int v14 = 7;
        sub_1000BEA60();
      }

      else if (sub_10002F614(*(void *)(a1 + 72), a2))
      {
        uint64_t v7 = *(void *)(a1 + 112);
        if (v7) {
          sub_100042EC0(a1, v7, a2);
        }
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4728))
        {
          uint64_t v8 = *(void *)(a1 + 104);
          if (v8) {
            sub_100042EC0(a1, v8, a2);
          }
        }

        sub_100042F8C(a1);
        sub_10002F1E4(*(void *)(a1 + 72), a2);
        *(void *)(a1 + 5512) = 0LL;
        unsigned int v14 = 0;
        sub_1000BEA60();
      }

      else
      {
        unsigned int v14 = 17;
        sub_1000BEA60();
      }

      goto LABEL_9;
    }
  }

  unsigned int v14 = 4;
  sub_1000BEA60();
LABEL_9:
  sub_1000504B4(v14);
  sub_1000CF8F8(v10, v11, 0LL);
  sub_1000BEAB0(v9);
  sub_1000CAEC8(v12);
  sub_1000C0BA8(v13);
  return v14;
}

uint64_t sub_100042EC0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
    uint64_t v6 = (uint64_t *)(a1 + 808);
  }
  else {
    uint64_t v6 = (uint64_t *)(a1 + 800);
  }
  uint64_t v7 = *v6;
  uint64_t v8 = sub_10002F660(*(void *)(a1 + 72), a3);
  uint64_t result = sub_100039030(a2);
  if (*(void *)(a1 + 5456) == v8) {
    *(void *)(a1 + 5456) = 0LL;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 1320);
  if ((int)v10 >= 1)
  {
    uint64_t v11 = (int *)(a1 + 1324);
    while (1)
    {
      int v12 = *v11++;
      if (v12 == a3) {
        break;
      }
      if (!--v10) {
        return result;
      }
    }

    *(_DWORD *)(a1 + 1320) = 0;
    *(_DWORD *)(v7 + 4) = 0;
    *(_DWORD *)(v7 + 140) = 0;
  }

  return result;
}

uint64_t sub_100042F8C(uint64_t result)
{
  if (*(_DWORD *)(result + 5500))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 104);
    if (!v2 || *(void *)(result + 5512) == *(void *)(result + 112))
    {
      uint64_t v3 = *(void *)(result + 808);
      if (!*(void *)(result + 5464)) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v3 = *(void *)(result + 800);
      if (!*(void *)(result + 5464))
      {
LABEL_5:
        LODWORD(v4) = *(_DWORD *)(result + 5472);
LABEL_14:
        if ((int)v4 >= 1)
        {
          *(_DWORD *)(v1 + 5472) = 0;
          *(_DWORD *)(v3 + 4) = 0;
          *(_DWORD *)(v3 + 140) = 0;
        }

        return result;
      }
    }

    if (qword_1000FDCC0)
    {
      uint64_t v5 = 112LL;
      if (!*(_DWORD *)(qword_1000FDCC0 + 1912)) {
        uint64_t v5 = 104LL;
      }
      uint64_t v2 = *(void *)(result + v5);
    }

    if (*(int *)(result + 5472) >= 1)
    {
      uint64_t v6 = 0LL;
      do
      {
        uint64_t v7 = *(void *)(*(void *)(v1 + 5464) + 8 * v6);
        sub_100039030(v2);
        uint64_t result = sub_10002F480(*(void *)(v1 + 72), v7);
        *(void *)(*(void *)(v1 + 5464) + 8 * v6++) = 0LL;
        uint64_t v4 = *(int *)(v1 + 5472);
      }

      while (v6 < v4);
      goto LABEL_14;
    }
  }

  return result;
}

BOOL sub_100043088(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)sub_100025C9C(a1);
  int v2 = sub_1000C88E4((unint64_t)"_SHADOWIR_");
  return sub_1000C8928(v1, "_SHADOWIR_", v2, v3) == 0;
}

uint64_t sub_1000430D0(uint64_t a1, uint64_t *a2, int a3)
{
  int v3 = a3;
  if (*(_DWORD *)(a1 + 5476) < a3)
  {
    sub_1000C0EF8(*(void *)(a1 + 5464));
    sub_1000C0BFC(8LL * v3, v6, v7, v8, v9, v10, v11, v12);
    *(void *)(a1 + 5464) = v13;
    *(_DWORD *)(a1 + 5476) = v3;
  }

  if (v3 < 1)
  {
    uint64_t v14 = 0LL;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = v3;
    uint64_t v16 = a2;
    do
    {
      if (sub_10003C6A4((_DWORD **)v16, 1))
      {
        v20[0] = 0;
        __sprintf_chk(v20, 0, 0x100uLL, "%s_%d", "_SHADOWIR_", v14);
        uint64_t v17 = sub_100028610(*v16, (unsigned __int8 *)v20);
        int v18 = sub_10002F438(*(uint64_t **)(a1 + 72), *v16);
        sub_10002F298(*(void *)(a1 + 72), v17, v18);
        *(void *)(*(void *)(a1 + 5464) + 8LL * (int)v14) = v17;
        a2[v3++] = v17;
        uint64_t v14 = (v14 + 1);
      }

      ++v16;
      --v15;
    }

    while (v15);
  }

  *(_DWORD *)(a1 + 5472) = v14;
  return v14;
}

uint64_t sub_10004321C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = sub_10002F690(v2);
  int v4 = v3;
  if (*(_DWORD *)(a1 + 5476) <= v3)
  {
    int v13 = v3 + 1;
    sub_1000C0EF8(*(void *)(a1 + 5464));
    uint64_t v14 = sub_1000C1074(8LL * v13);
    *(void *)(a1 + 5464) = v14;
    *(_DWORD *)(a1 + 5476) = v13;
    if (v14) {
      goto LABEL_3;
    }
    return 1LL;
  }

  if (!*(void *)(a1 + 5464)) {
    return 1LL;
  }
LABEL_3:
  int v5 = 0;
  if ((v4 & 0x80000000) == 0)
  {
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = sub_10002F660(v2, v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = (unsigned __int8 *)sub_100025C9C(v7);
        int v10 = sub_1000C88E4((unint64_t)"_SHADOWIR_");
      }

      ++v6;
    }

    while (v4 + 1 != v6);
  }

  uint64_t result = 0LL;
  *(_DWORD *)(a1 + 5472) = v5;
  return result;
}

uint64_t sub_100043328(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  unsigned int v15 = 0;
  int v14 = -1;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  if (a1)
  {
    uint64_t v13 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v10 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000BE9FC();
    if (!setjmp(v7))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        unsigned int v15 = 4;
        sub_1000BEA60();
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        unsigned int v15 = 1;
        sub_1000BEA60();
      }

      else
      {
        *a3 = -1;
        uint64_t v8 = *(void *)(a1 + 72);
        if (v8) {
          int v14 = sub_10002F69C(v8, a2);
        }
        if (v14 != -1) {
          *a3 = v14;
        }
        unsigned int v15 = 0;
        sub_1000BEA60();
      }

      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v13 = sub_1000C0BA8(0LL);
    uint64_t v12 = sub_1000CAEC8(0LL);
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    int v10 = sub_1000CF8F8(0LL, 0LL, &v11);
    nullsub_1(v10);
  }

  unsigned int v15 = 1;
LABEL_9:
  sub_1000504B4(v15);
  sub_1000CF8F8(v10, v11, 0LL);
  sub_1000BEAB0(v9);
  sub_1000CAEC8(v12);
  sub_1000C0BA8(v13);
  return v15;
}

uint64_t sub_100043530( uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, _DWORD *a11)
{
  int v19 = sub_1000514EC(a5);
  if (!a2) {
    return 4LL;
  }
  int v20 = v19;
  if (!sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START")
    || !sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END")
    || !*a2)
  {
    return 4LL;
  }

  sub_1000C8900("_ ", *a2);
  uint64_t result = 4LL;
  if ((a4 & 0x80000000) == 0 && a3 <= 0x2000000 && a11)
  {
    uint64_t v22 = *(void *)(a1 + 80);
    if (v22)
    {
      if (*(_DWORD *)(a1 + 6448))
      {
        return 7LL;
      }

      else
      {
        if (a8)
        {
          int v23 = sub_100031D90(v22, a2, a4, v20, a9, a10);
        }

        else
        {
          int v24 = sub_1000514EC(a5);
          int v23 = sub_100031AD4(v22, a2, a3, a4, v24, a6, a7);
        }

        int v25 = v23;
        uint64_t result = 0LL;
        *a11 = v25;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100043678( uint64_t a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, _DWORD *a8)
{
  unsigned int v24 = 0;
  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v21 = 0LL;
  if (a1)
  {
    uint64_t v23 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v22 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v19 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v20 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v21);
    nullsub_1(v20);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v17 = (int *)sub_1000BE9FC();
    if (setjmp(v17))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v18 = 1;
        goto LABEL_14;
      }

      if (a2 && *a2 && !sub_1000C8900("_ ", *a2))
      {
        unsigned int v24 = sub_100043530(a1, a2, a3, a4, a5, a6, a7, 0, 0LL, -1, a8);
        int v18 = v24;
        goto LABEL_14;
      }
    }

    int v18 = 4;
LABEL_14:
    unsigned int v24 = v18;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v23 = sub_1000C0BA8(0LL);
  uint64_t v22 = sub_1000CAEC8(0LL);
  int v19 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  int v20 = sub_1000CF8F8(0LL, 0LL, &v21);
  nullsub_1(v20);
LABEL_8:
  unsigned int v24 = 1;
LABEL_9:
  sub_1000504B4(v24);
  sub_1000CF8F8(v20, v21, 0LL);
  sub_1000BEAB0(v19);
  sub_1000CAEC8(v22);
  sub_1000C0BA8(v23);
  return v24;
}

uint64_t sub_1000438B0(uint64_t a1, unsigned __int8 *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a2) {
    return 4LL;
  }
  if (!*a2) {
    return 4LL;
  }
  if (!sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START"))
  {
    int v8 = 1;
    goto LABEL_11;
  }

  if (!sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END"))
  {
    uint64_t result = 0LL;
    *a3 = 1;
    return result;
  }

  int v8 = *a2;
  if (!*a2)
  {
LABEL_11:
    uint64_t result = 0LL;
    *a3 = v8;
    return result;
  }

  sub_1000C8900("_ ", v8);
  uint64_t v9 = *(void *)(a1 + 80);
  if (!v9) {
    return 1LL;
  }
  BOOL v10 = sub_100031640(v9, a2, a4) != -1;
  uint64_t result = 0LL;
  *a3 = v10;
  return result;
}

uint64_t sub_1000439B8(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v15 = 0;
  int v14 = 0;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  if (a1)
  {
    uint64_t v13 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    BOOL v10 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000BE9FC();
    if (!setjmp(v7))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v8 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v8 = 1;
      }

      else
      {
        unsigned int v15 = sub_1000438B0(a1, a2, a3, &v14);
        int v8 = v15;
      }

      unsigned int v15 = v8;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v13 = sub_1000C0BA8(0LL);
    uint64_t v12 = sub_1000CAEC8(0LL);
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    BOOL v10 = sub_1000CF8F8(0LL, 0LL, &v11);
    nullsub_1(v10);
  }

  unsigned int v15 = 1;
LABEL_9:
  sub_1000504B4(v15);
  sub_1000CF8F8(v10, v11, 0LL);
  sub_1000BEAB0(v9);
  sub_1000CAEC8(v12);
  sub_1000C0BA8(v13);
  return v15;
}

uint64_t sub_100043B94(uint64_t a1, _DWORD *a2)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  if (!a1)
  {
    uint64_t v13 = sub_1000C0BA8(0LL);
    uint64_t v12 = sub_1000CAEC8(0LL);
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    BOOL v10 = sub_1000CF8F8(0LL, 0LL, &v11);
    nullsub_1(v10);
LABEL_8:
    unsigned int v14 = 1;
    goto LABEL_9;
  }

  uint64_t v13 = sub_1000C0BA8(*(void *)(a1 + 6480));
  uint64_t v12 = sub_1000CAEC8(*(void *)(a1 + 6488));
  uint64_t v9 = sub_1000BEAC4();
  sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
  BOOL v10 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
  nullsub_1(v10);
  if (*(_DWORD *)(a1 + 8160)) {
    return 1LL;
  }
  sub_1000BEAB0((void *)(a1 + 6648));
  int v5 = (int *)sub_1000BE9FC();
  if (setjmp(v5))
  {
    *(_DWORD *)(a1 + 8160) = 1;
    goto LABEL_8;
  }

  if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
  {
    int v6 = 4;
  }

  else if (*(_DWORD *)(a1 + 8160))
  {
    int v6 = 1;
  }

  else
  {
    if (a2) {
      *a2 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 80);
    if (!v7)
    {
      unsigned int v14 = 0;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (*(_DWORD *)(a1 + 6448))
    {
      int v6 = 7;
    }

    else
    {
      int v8 = sub_100033290(v7);
      if (a2) {
        *a2 = v8;
      }
      int v6 = v14;
    }
  }

  unsigned int v14 = v6;
  sub_1000BEA60();
LABEL_9:
  sub_1000504B4(v14);
  sub_1000CF8F8(v10, v11, 0LL);
  sub_1000BEAB0(v9);
  sub_1000CAEC8(v12);
  sub_1000C0BA8(v13);
  return v14;
}

uint64_t sub_100043D8C( uint64_t a1, unsigned __int8 *a2, int a3, unsigned int *a4, __int16 *a5, int a6, int a7, _DWORD *a8)
{
  int v47 = a7;
  if (a8) {
    *a8 = 0;
  }
  int v46 = 0;
  if (!a2 || !*a2) {
    return 4LL;
  }
  if (sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START")
    && sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END"))
  {
    if (!*a2) {
      return 4LL;
    }
    sub_1000C8900("_ ", *a2);
    uint64_t v22 = *(void *)(a1 + 80);
    if (!v22) {
      return 1LL;
    }
  }

  if (a3 > 0)
  {
    int v44 = a6;
    int v25 = *(uint64_t **)(a1 + 8);
    uint64_t v26 = a3;
    uint64_t v27 = a4;
    while (1)
    {
      unsigned int v28 = *v27++;
      if (!--v26)
      {
        int v45 = a3;
        uint64_t v43 = 2LL * a3;
        uint64_t v36 = (__int16 *)sub_1000CAF58(v43, v29, v30, v31, v32, v33, v34, v35);
        uint64_t v37 = 0LL;
        do
        {
          int v38 = sub_1000B3A9C((uint64_t)v25, a4[v37]);
          if (v38 == 0xFFFF)
          {
            uint64_t v39 = sub_1000505E8(a1, a4[v37], 0LL);
            if ((_DWORD)v39)
            {
              uint64_t v23 = v39;
              int v42 = 0;
              uint64_t v40 = v43;
              goto LABEL_31;
            }

            LOWORD(v38) = sub_1000B3A9C((uint64_t)v25, a4[v37]);
          }

          v36[v37++] = v38;
        }

        while (a3 != v37);
        a6 = v44;
        uint64_t v40 = 2LL * a3;
        goto LABEL_28;
      }
    }
  }

  int v45 = a3;
  uint64_t v40 = 2LL * a3;
  uint64_t v36 = (__int16 *)sub_1000CAF58(v40, v15, v16, v17, v18, v19, v20, v21);
  if (sub_100032044(*(void *)(a1 + 80), a2, a5, (unsigned int *)&v47))
  {
LABEL_23:
    if (a6 >= 255) {
      int v41 = 255;
    }
    else {
      int v41 = a6;
    }
    int v42 = sub_1000323C8(*(void *)(a1 + 80), a2, v36, v45, v41 & ~(v41 >> 31), v47);
    uint64_t v23 = 0LL;
  }

  else
  {
LABEL_28:
    uint64_t v23 = 0LL;
    int v42 = 0;
  }

LABEL_31:
  sub_1000CB038(v36, v40);
  *a8 = v42;
  return v23;
}

    sub_1000CB038(v30, v64);
    goto LABEL_32;
  }

  uint64_t v69 = sub_1000C0BA8(0LL);
  uint64_t v68 = sub_1000CAEC8(0LL);
  uint64_t v65 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  int v66 = sub_1000CF8F8(0LL, 0LL, &v67);
  nullsub_1(v66);
LABEL_8:
  uint64_t v70 = 1;
LABEL_9:
  sub_1000504B4(v70);
  sub_1000CF8F8(v66, v67, 0LL);
  sub_1000BEAB0(v65);
  sub_1000CAEC8(v68);
  sub_1000C0BA8(v69);
  return v70;
}

    sub_10003991C(*v14);
LABEL_32:
    uint64_t v2 = 0LL;
    uint64_t v27 = 0;
  }

  else
  {
LABEL_17:
    uint64_t v2 = 0LL;
  }

  uint64_t result = sub_1000C1074((uint64_t)(int)v16 << 7);
  int v86 = result;
  if (!result) {
    return result;
  }
  unsigned __int32 v85 = sub_1000C1074(4LL * (int)v16);
  if (!v85) {
    return sub_1000C0EF8(v86);
  }
  int v84 = sub_1000C1074(4LL * (int)v16);
  if (!v84)
  {
    sub_1000C0EF8(v86);
    return sub_1000C0EF8(v85);
  }

  if ((int)v9 >= 1)
  {
    v75 = a4;
    v76 = v12;
    __nel = v13;
    uint64_t v40 = 0LL;
    int v41 = 0;
    uint64_t v78 = v11;
    for (i = v9; i != v40; uint64_t v9 = i)
    {
      int v42 = &v11[32 * v40];
      int v44 = v42[1];
      uint64_t v43 = v42 + 1;
      int v45 = 1 << (v44 - 1);
      if (v44 != 32)
      {
        int v46 = 0;
        int v47 = v42 + 4;
        uint64_t v48 = v41;
        if (v45 <= 1) {
          uint64_t v49 = 1;
        }
        else {
          uint64_t v49 = v45;
        }
        do
        {
          v51 = v86 + (v48 << 7);
          *(_DWORD *)(v51 + 4) = *v43;
          j__memmove((void *)(v51 + 16), v47, 2LL * *v43);
          uint64_t v52 = *v43;
          if (*v43 >= 1)
          {
            uint64_t v53 = (_BYTE *)(v51 + 88);
            uint64_t v54 = v46;
            do
            {
              *v53++ = v54 & 1;
              v54 >>= 1;
              --v52;
            }

            while (v52);
          }

          uint64_t v50 = 4 * v48;
          *(_DWORD *)(v85 + v50) = v40;
          *(_DWORD *)(v84 + v50) = v46++;
          ++v48;
        }

        while (v46 != v49);
      }

      v41 += v45;
      ++v40;
      uint64_t v11 = v78;
    }

    uint64_t v12 = v76;
    uint64_t v13 = __nel;
    unsigned int v14 = a9;
    a4 = v75;
  }

  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v33 = *(void *)(a1 + 32);
  while (sub_1000C8AB4(a2, (unsigned __int8 *)(v34 + *(__int16 *)(v33 + 2 * v32))))
  {
    ++v32;
    v31 -= 0x100000000LL;
    if (v30 == v32) {
      goto LABEL_36;
    }
  }

  if (v32 != 0xFFFFFFFFLL)
  {
    int v47 = *(void *)(a1 + 40);
    if (*(__int16 *)(v47 + (((uint64_t)&_mh_execute_header - v31) >> 31)) - *(__int16 *)(v47 + 2 * v32) == v10
      && *(char *)(*(void *)(a1 + 48) + v32) == v48)
    {
      uint64_t v18 = 2
          * (memcmp( v21,  (const void *)(*(void *)(a1 + 64) + 4LL * *(__int16 *)(v47 + 2 * v32)),  4LL * v10) != 0);
    }

    else
    {
      uint64_t v18 = 2LL;
    }

    sub_1000CB038(v21, 4LL * v10);
    return v18;
  }

      int v42 = v14 - v41;
      if (v14 < a8) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }

    int v41 = 0;
    int v42 = v14;
    if (v14 < a8)
    {
LABEL_32:
      *a7 = v14 + 1;
      if (v42 < 1)
      {
LABEL_34:
        memcpy(a6, v24, 0x448uLL);
        return sub_1000CB038(v24, 1096LL);
      }

      int v42 = v14 - v41;
      if (v14 < a8) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }

    int v41 = 0;
    int v42 = v14;
    if (v14 < a8)
    {
LABEL_32:
      *a7 = v14 + 1;
      if (v42 < 1)
      {
LABEL_34:
        memcpy(a6, v24, 0x448uLL);
        return sub_1000CB038(v24, 1096LL);
      }
      }
    }
  }

  else
  {
    v73 = 0;
    uint64_t v34 = 0LL;
    uint64_t v33 = 128;
    int v38 = *(_DWORD *)(a1 + 652);
    uint64_t v36 = v38 - 1;
    v74 = 4 * v13 + 4;
    LODWORD(v37) = 0;
    if (v38 >= 1) {
      goto LABEL_16;
    }
  }

  uint64_t v49 = *(_DWORD *)(a1 + 72);
  if ((int)v35 < v49)
  {
    while (v14 != *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v35 >> 8))
                                       + 2LL * v35))
    {
      if (v49 == ++v35)
      {
        *(_DWORD *)(a1 + 72) = v49 - 1;
        goto LABEL_38;
      }
    }
  }

  uint64_t v50 = v49 - 1;
  *(_DWORD *)(a1 + 72) = v50;
  if ((int)v35 < v50)
  {
    do
    {
      *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v35 >> 8)) + 2LL * v35) = *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8LL * ((v35 + 1) >> 8)) + 2LL * (v35 + 1));
      ++v35;
    }

    while ((signed int)v35 < *(_DWORD *)(a1 + 72));
    int v44 = *(_DWORD *)(a1 + 20);
  }

  int v46 = sub_1000BE644(0xFFFFFFFF, 4, v44);
  int v47 = *(void *)(*(void *)(a1 + 144) + 72LL);
  if (v47)
  {
LABEL_17:
    uint64_t v48 = sub_1000BE644(-1431655765 * ((unint64_t)(v47 - *(void *)(a1 + 128)) >> 1), 4, v46);
    uint64_t v49 = *(void *)(*(void *)(a1 + 144) + 80LL);
    if (v49) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }

  v85[0] = 0;
  int v44 = (uint64_t *)v20;
  int v45 = (uint64_t *)v20;
  int v46 = v19;
  uint64_t v43 = sub_1000A7D60(v45, a4, a5, a6, a7, a8, a10, v19, a2, v21, v85);
  if (*v21)
  {
    uint64_t v52 = a14 + 1;
    uint64_t v53 = *v82;
    if (*v82 >= v85[0])
    {
      uint64_t v55 = 0;
      if (*v21 == 3 && v21[4] > 0)
      {
LABEL_47:
        uint64_t v60 = v84;
        if (*(unsigned __int16 *)(v84 + 2LL * v53) == **(unsigned __int16 **)(v81 + 416))
        {
          uint64_t v80 = a4;
          int v42 = v55 + 1;
          if (v21[7 * (v55 + 1)] == 2)
          {
            uint64_t v61 = *(_WORD **)(v81 + 64);
            if (v61)
            {
              int v83 = v52;
              if ((int)sub_1000B3680(v44, v61, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
              {
                else {
                  uint64_t v63 = *a9;
                }
                sub_1000B8938(v80, a5, a6, a7, 0LL, a8, a10, v46, v63, *v83, 0, 0, 0);
              }

              else
              {
                sub_1000B8938(v80, a5, a6, a7, 0LL, a8, a10, v46, *a9, *v83, 0, 0, 1);
              }

              LODWORD(v43) = v43 + 1;
              uint64_t v60 = v84;
            }

            uint64_t v78 = a7;
            int v64 = &v21[7 * v42];
            uint64_t v67 = v64[2];
            int v66 = v64 + 2;
            uint64_t v65 = v67;
            if (*(_DWORD *)(v81 + 536) && (int)v65 <= 3)
            {
              uint64_t v68 = sub_1000CAFC0(2LL * ((int)v65 + 1), (uint64_t)v61, v47, v65, v48, v49, v50, v51);
              uint64_t v69 = v21;
              uint64_t v70 = v68;
              uint64_t v71 = &v69[7 * v42];
              sub_1000CC548(v68, (__int16 *)(v84 + 2LL * v71[1]), *v66 + 1);
              sub_1000CB038(v70, 2LL * *v66 + 2);
            }

            else
            {
              v72 = v21[7 * v42 + 1];
            }
          }

          goto LABEL_53;
        }
      }
    }

    else
    {
      uint64_t v54 = v21 + 8;
      uint64_t v55 = 1;
      while (1)
      {
        uint64_t v56 = *(v54 - 1);
        if (!v56) {
          break;
        }
        uint64_t v57 = *v54;
        v54 += 7;
        uint64_t v53 = v57;
        ++v55;
        if (v57 >= v85[0])
        {
          --v55;
          uint64_t v52 = v54 - 7;
          if (v56 != 3 || v21[4] <= v55) {
            break;
          }
          goto LABEL_47;
        }
      }
    }
  }

  else
  {
    uint64_t v55 = 0;
  }

  int v42 = v55 - 1;
LABEL_53:
  *a13 = v42;
  return v43;
}

        uint64_t v21 = v12;
LABEL_32:
        *(void *)(*(void *)(v2 + 80) + 8 * v21) = sub_1000C8B7C(*(char **)a1);
        *(_DWORD *)(*(void *)(v2 + 88) + 4 * v21) = *(_DWORD *)(a1 + 32);
        ++*(_WORD *)(v2 + 12);
        goto LABEL_33;
      }
    }

      uint64_t v23 = 0xFFFFFFFFLL;
      goto LABEL_32;
    }
  }

  else
  {
    if (*(void *)(a1 + 40)) {
      uint64_t v21 = *(_DWORD *)(a1 + 48);
    }
    else {
      uint64_t v21 = -1;
    }
    uint64_t v35 = 0u;
    *(void *)&uint64_t v36 = 0LL;
    *((void *)&v36 + 1) = a1;
    uint64_t v37 = v19;
  }

  *(_DWORD *)(a1 + 48) = v19;
  if (!sub_1000C96D4((uint64_t)&v35, *(_DWORD *)(a1 + 20)))
  {
LABEL_54:
    uint64_t v23 = 0LL;
    goto LABEL_55;
  }

uint64_t sub_100043FC4( unint64_t a1, unsigned __int8 *a2, __int16 *a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  unint64_t v15 = a1;
  uint64_t v193 = 0LL;
  *a8 = 0;
  unsigned int v16 = sub_100031764(*(void *)(a1 + 80), a2);
  unsigned int v24 = (unsigned int *)sub_1000CAF58(400LL, v17, v18, v19, v20, v21, v22, v23);
  if (!v24) {
    return 2LL;
  }
  uint64_t v27 = v24;
  int v28 = v193;
  if ((v193 - 5) < 7)
  {
    unsigned int v174 = v193 - 5;
    int v169 = a6;
    int v167 = a7;
    v196[0] = a4;
    *a8 = 0;
    int v29 = sub_1000CC52C((unint64_t)a3);
    uint64_t v177 = 2LL * (v29 + 1);
    uint64_t v37 = (__int16 *)sub_1000CAF58(v177, v30, v31, v32, v33, v34, v35, v36);
    int v38 = v37;
    unsigned int v189 = v28;
    int v168 = v29;
    if ((v28 & 0xFFFFFFFE) == 0xA)
    {
      sub_1000CC548(v37, a3, v29 + 2);
      v172 = a3;
      unsigned __int8 v170 = a5;
      v176 = a8;
      v178 = v27;
      int v195 = 0;
      if (!a2) {
        goto LABEL_26;
      }
    }

    else
    {
      sub_1000CE164(a3, v29 + 1, v37);
      v172 = a3;
      unsigned __int8 v170 = a5;
      v176 = a8;
      v178 = v27;
      int v195 = 0;
      if (!a2) {
        goto LABEL_26;
      }
    }

    if (*a2)
    {
      if (sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START"))
      {
        if (sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END"))
        {
          if (*a2)
          {
            sub_1000C8900("_ ", *a2);
            uint64_t v62 = *(void *)(v15 + 80);
            if (v62) {
              sub_100031640(v62, a2, &v195);
            }
          }
        }
      }
    }

LABEL_82:
    uint64_t v27 = v178;
    goto LABEL_83;
  }

  if (v193 > 4)
  {
    uint64_t v60 = 0LL;
LABEL_83:
    LODWORD(v46) = 100;
LABEL_84:
    sub_1000CB038(v27, 4LL * (int)v46);
    return v60;
  }

  LODWORD(v46) = 100;
  uint64_t v47 = sub_1000508EC(v15, a3, 100LL, v24, (unsigned int *)&v193 + 1, 1LL, v25, v26);
  int v48 = HIDWORD(v193);
  if (SHIDWORD(v193) < 101)
  {
    uint64_t v60 = v47;
    return 4LL;
  }

  sub_1000CB038(v27, 400LL);
  uint64_t v46 = SHIDWORD(v193);
  uint64_t v56 = (unsigned int *)sub_1000CAF58(4LL * SHIDWORD(v193), v49, v50, v51, v52, v53, v54, v55);
  if (v56)
  {
    uint64_t v27 = v56;
    unsigned int v59 = sub_1000508EC(v15, a3, v46, v56, (unsigned int *)&v193 + 1, 1LL, v57, v58);
    int v48 = HIDWORD(v193);
    if (HIDWORD(v193) == (_DWORD)v46) {
      uint64_t v60 = v59;
    }
    else {
      uint64_t v60 = 1LL;
    }
    if (v60 | HIDWORD(v193))
    {
LABEL_14:
      if (!(_DWORD)v60)
      {
        unsigned int v61 = sub_100043D8C(v15, a2, v48, v27, a3, a5, a4, a8);
        if (*a8) {
          uint64_t v60 = v61;
        }
        else {
          uint64_t v60 = 1LL;
        }
      }

      goto LABEL_84;
    }

    return 4LL;
  }

  return 2LL;
}

        if (sub_10009D1D4(*(void *)(a1 + 9000)))
        {
          *(_DWORD *)(a1 + 552) = 3;
          return;
        }

        if (!v19) {
          goto LABEL_85;
        }
        --v19;
LABEL_40:
        uint64_t v35 = *(void *)(a1 + 9024);
        uint64_t v21 = *(void *)(v35 + 8LL * (v19 >> 8)) + 48LL * v19;
        --v22;
        uint64_t v23 = (_OWORD *)(*(void *)(v35 + 8LL * (v22 >> 8)) + 48LL * v22);
        uint64_t v27 = v2[63];
      }

      if ((__int16)(v2[56] + v2[66] + v66) <= v2[63])
      {
        unsigned int v59 = v50;
        (*(void (**)(uint64_t))(a1 + 9400))(a1);
        uint64_t v50 = v59;
      }

    uint64_t v138 = v202 - 1;
    uint64_t v139 = v134-- <= 1;
    uint64_t v76 = v207;
  }

  while (!v139);
  if (v136 >= (int)v204)
  {
    int v155 = 0;
    LODWORD(v92) = 0;
  }

  else
  {
    LODWORD(v92) = 0;
    int v156 = v136;
    do
    {
      sub_1000B33F8((char *)v213, *(_DWORD *)&v209[4 * v156], v137, v124);
      v156 += sub_1000CC52C(v137);
      LODWORD(v92) = v92 + 1;
    }

    while (v156 < (int)v204);
    int v155 = 1;
  }

uint64_t sub_1000447E4( unint64_t a1, unsigned __int8 *a2, __int16 *a3, int a4, int a5, int a6, int a7, _DWORD *a8)
{
  unsigned int v26 = 0;
  int v24 = 0;
  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v21 = 0LL;
  if (a1)
  {
    uint64_t v23 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v22 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v19 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v20 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v21);
    nullsub_1(v20);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v17 = (int *)sub_1000BE9FC();
    if (setjmp(v17))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 8160)) {
      goto LABEL_13;
    }
    if (a8) {
      *a8 = 0;
    }
    if (!a2 || !a3 || !*a2 || !a8 || !*a3) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 6448))
    {
      int v18 = 7;
      goto LABEL_14;
    }

    if (!sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START")
      || !sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END"))
    {
      goto LABEL_11;
    }

    if (!*(void *)(a1 + 80))
    {
LABEL_13:
      int v18 = 1;
      goto LABEL_14;
    }

    int v25 = 0;
    unsigned int v26 = sub_1000438B0(a1, a2, &v25, &v24);
    if (!v26)
    {
      if (!v25 || v24)
      {
LABEL_11:
        int v18 = 4;
LABEL_14:
        unsigned int v26 = v18;
        sub_1000BEA60();
        goto LABEL_9;
      }

      unsigned int v26 = sub_100043FC4(a1, a2, a3, a4, a5, a6, a7, a8);
    }

    int v18 = v26;
    goto LABEL_14;
  }

  uint64_t v23 = sub_1000C0BA8(0LL);
  uint64_t v22 = sub_1000CAEC8(0LL);
  uint64_t v19 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v20 = sub_1000CF8F8(0LL, 0LL, &v21);
  nullsub_1(v20);
LABEL_8:
  unsigned int v26 = 1;
LABEL_9:
  sub_1000504B4(v26);
  sub_1000CF8F8(v20, v21, 0LL);
  sub_1000BEAB0(v19);
  sub_1000CAEC8(v22);
  sub_1000C0BA8(v23);
  return v26;
}

uint64_t sub_100044A8C( unint64_t a1, unsigned __int8 *a2, char *a3, char *a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  unsigned int v29 = 0;
  int v27 = 0;
  uint64_t v26 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v24 = 0LL;
  if (a1)
  {
    uint64_t v26 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v25 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v22 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v23 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v24);
    nullsub_1(v23);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v18 = (int *)sub_1000BE9FC();
    if (setjmp(v18))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 8160)) {
      goto LABEL_13;
    }
    if (a9) {
      *a9 = 0;
    }
    if (!a2) {
      goto LABEL_11;
    }
    if (!a3) {
      goto LABEL_11;
    }
    if (!*a2) {
      goto LABEL_11;
    }
    int v20 = sub_1000CC52C((unint64_t)a3);
    if (!a9 || !v20) {
      goto LABEL_11;
    }
    if (*(_DWORD *)(a1 + 6448))
    {
      int v19 = 7;
      goto LABEL_14;
    }

    if (!sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START")
      || !sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END"))
    {
      goto LABEL_11;
    }

    if (!*(void *)(a1 + 80))
    {
LABEL_13:
      int v19 = 1;
      goto LABEL_14;
    }

    int v28 = 0;
    unsigned int v29 = sub_1000438B0(a1, a2, &v28, &v27);
    if (!v29)
    {
      if (!v28 || v27)
      {
LABEL_11:
        int v19 = 4;
LABEL_14:
        unsigned int v29 = v19;
        sub_1000BEA60();
        goto LABEL_9;
      }

      else {
        unsigned int v21 = sub_100043FC4(a1, a2, (__int16 *)a3, a5, a6, a7, a8, a9);
      }
      unsigned int v29 = v21;
    }

    int v19 = v29;
    goto LABEL_14;
  }

  uint64_t v26 = sub_1000C0BA8(0LL);
  uint64_t v25 = sub_1000CAEC8(0LL);
  uint64_t v22 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v23 = sub_1000CF8F8(0LL, 0LL, &v24);
  nullsub_1(v23);
LABEL_8:
  unsigned int v29 = 1;
LABEL_9:
  sub_1000504B4(v29);
  sub_1000CF8F8(v23, v24, 0LL);
  sub_1000BEAB0(v22);
  sub_1000CAEC8(v25);
  sub_1000C0BA8(v26);
  return v29;
}

uint64_t sub_100044D7C( unint64_t a1, unsigned __int8 *a2, char *a3, char *a4, int a5, int a6, int a7, int a8, _DWORD *a9)
{
  *a9 = 0;
  int v16 = sub_1000CCA00(a3, asc_1000F24E0);
  uint64_t v54 = a2;
  int v55 = a5;
  int v56 = a6;
  int v61 = 0;
  uint64_t v24 = (unint64_t *)sub_1000CAF58(8LL * v16, v17, v18, v19, v20, v21, v22, v23);
  unint64_t v32 = sub_1000CAF58(8LL * v16, v25, v26, v27, v28, v29, v30, v31);
  sub_100045F64((__int16 *)a3, v16, (uint64_t)v24);
  int v33 = sub_100045F64((__int16 *)a4, v16, v32);
  uint64_t v41 = (unsigned int *)sub_1000CAF58(4LL * v33, v34, v35, v36, v37, v38, v39, v40);
  uint64_t v42 = (__int16 *)a3;
  uint64_t v58 = (uint64_t *)v24;
  uint64_t v60 = 8LL * v16;
  uint64_t v57 = (uint64_t *)v32;
  int v43 = 0;
  if (v33 < 1)
  {
LABEL_6:
    uint64_t v46 = sub_100043D8C(a1, v54, v43, v41, v42, v56, v55, a9);
  }

  else
  {
    uint64_t v44 = (_WORD **)v32;
    uint64_t v45 = v33;
    while (1)
    {
      uint64_t v46 = sub_100050BDC(a1, *v24, *v44, v33 - v43, (uint64_t)&v41[v43], &v61);
      if ((_DWORD)v46) {
        break;
      }
      v43 += v61;
      ++v44;
      ++v24;
      if (!--v45) {
        goto LABEL_6;
      }
    }
  }

  uint64_t v47 = v46;
  sub_1000CB038(v41, 4LL * v33);
  if (v16 >= 1)
  {
    uint64_t v48 = v16;
    uint64_t v49 = v58;
    uint64_t v50 = v57;
    do
    {
      uint64_t v51 = *v49++;
      sub_1000C0EF8(v51);
      uint64_t v52 = *v50++;
      sub_1000C0EF8(v52);
      --v48;
    }

    while (v48);
  }

  sub_1000CB038(v57, v60);
  sub_1000CB038(v58, v60);
  return v47;
}

uint64_t sub_100044F80(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v15 = 0;
  uint64_t v14 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  if (a1)
  {
    uint64_t v14 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v13 = sub_1000CAEC8(*(void *)(a1 + 6488));
    BOOL v10 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v11 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v12);
    nullsub_1(v11);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000BE9FC();
    if (setjmp(v7))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
LABEL_11:
      int v8 = 4;
LABEL_16:
      unsigned int v15 = v8;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (!*(_DWORD *)(a1 + 8160))
    {
      if (*(_DWORD *)(a1 + 6448))
      {
        int v8 = 7;
        goto LABEL_16;
      }

      if (!a2
        || !sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_START")
        || !sub_1000C8AB4(a2, "_CONSTRAINT_CLASS_END")
        || !*a2)
      {
        goto LABEL_11;
      }

      uint64_t v9 = *(void *)(a1 + 80);
      if (v9)
      {
        *a3 = sub_100032D44(v9, a2);
        int v8 = v15;
        goto LABEL_16;
      }
    }

    int v8 = 1;
    goto LABEL_16;
  }

  uint64_t v14 = sub_1000C0BA8(0LL);
  uint64_t v13 = sub_1000CAEC8(0LL);
  BOOL v10 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v11 = sub_1000CF8F8(0LL, 0LL, &v12);
  nullsub_1(v11);
LABEL_8:
  unsigned int v15 = 1;
LABEL_9:
  sub_1000504B4(v15);
  sub_1000CF8F8(v11, v12, 0LL);
  sub_1000BEAB0(v10);
  sub_1000CAEC8(v13);
  sub_1000C0BA8(v14);
  return v15;
}

uint64_t sub_100045198(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _WORD *a5)
{
  unsigned int v20 = 0;
  uint64_t v19 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v17 = 0LL;
  if (a1)
  {
    uint64_t v19 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v18 = sub_1000CAEC8(*(void *)(a1 + 6488));
    unsigned int v15 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v16 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v17);
    nullsub_1(v16);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v11 = (int *)sub_1000BE9FC();
    if (setjmp(v11))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      int v12 = 1;
      goto LABEL_14;
    }

    if (a4 < 1 || !a5 || !a2 || !*a2 || (_DWORD)a3 == -1)
    {
LABEL_11:
      int v12 = 4;
LABEL_14:
      unsigned int v20 = v12;
      sub_1000BEA60();
      goto LABEL_9;
    }

    int v13 = sub_100036C04(*(void *)(a1 + 80), a2, a3, a4, a5);
    if (v13 >= a4)
    {
      int v14 = 10;
    }

    else
    {
      if (v13 != -1)
      {
LABEL_25:
        int v12 = v20;
        goto LABEL_14;
      }

      int v14 = 4;
    }

    unsigned int v20 = v14;
    goto LABEL_25;
  }

  uint64_t v19 = sub_1000C0BA8(0LL);
  uint64_t v18 = sub_1000CAEC8(0LL);
  unsigned int v15 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  int v16 = sub_1000CF8F8(0LL, 0LL, &v17);
  nullsub_1(v16);
LABEL_8:
  unsigned int v20 = 1;
LABEL_9:
  sub_1000504B4(v20);
  sub_1000CF8F8(v16, v17, 0LL);
  sub_1000BEAB0(v15);
  sub_1000CAEC8(v18);
  sub_1000C0BA8(v19);
  return v20;
}

uint64_t sub_1000453C4(uint64_t a1, unsigned __int8 *a2, int a3, int a4, int a5, _DWORD *a6)
{
  unsigned int v20 = 0;
  int v19 = a4;
  uint64_t v18 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v16 = 0LL;
  if (a1)
  {
    uint64_t v18 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v17 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v14 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    unsigned int v15 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v16);
    nullsub_1(v15);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v12 = (int *)sub_1000BE9FC();
    if (setjmp(v12))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160)) {
        goto LABEL_13;
      }
      if (*(_DWORD *)(a1 + 6448))
      {
        unsigned int v20 = 7;
        sub_1000BEA60();
        goto LABEL_9;
      }

      if (a3 < 0 || v19 < 0) {
        goto LABEL_11;
      }
      if (!*(void *)(a1 + 80) || !*(void *)(a1 + 72))
      {
LABEL_13:
        unsigned int v20 = 1;
        sub_1000BEA60();
        goto LABEL_9;
      }

      if (a2
        && *a2
        && (int)sub_1000C88E4((unint64_t)a2) < 20
        && sub_10002F69C(*(void *)(a1 + 72), a2) == -1)
      {
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1928)) {
          v19 += a3;
        }
        uint64_t v13 = sub_100026E48(a2, *(void *)(a1 + 80), a3, v19, a5);
        if (v13)
        {
          *a6 = sub_10002F298(*(void *)(a1 + 72), v13, -1);
          unsigned int v20 = 0;
        }

        else
        {
          unsigned int v20 = 2;
        }

        sub_1000BEA60();
        goto LABEL_9;
      }
    }

uint64_t sub_100045674(uint64_t a1, unsigned int a2, char *a3, char *a4, unsigned int a5, _DWORD *a6)
{
  unsigned int v26 = 0;
  int v25 = 0;
  uint64_t v24 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
  if (a1)
  {
    uint64_t v24 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v23 = sub_1000CAEC8(*(void *)(a1 + 6488));
    unsigned int v20 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v21 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v22);
    nullsub_1(v21);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v13 = (int *)sub_1000BE9FC();
    if (setjmp(v13))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160)) {
        goto LABEL_13;
      }
      *a6 = 0;
      if (a2 == -1) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(a1 + 6448))
      {
        int v14 = 7;
        goto LABEL_14;
      }

      if (!a3
        || !a4
        || !*a3
        || !*a4
        || !sub_1000C8AB4(a4, "_CONSTRAINT_CLASS_START")
        || !sub_1000C8AB4(a3, "_CONSTRAINT_CLASS_END"))
      {
        goto LABEL_11;
      }

      if (!*(void *)(a1 + 80) || (uint64_t v15 = *(void *)(a1 + 72)) == 0)
      {
LABEL_13:
        int v14 = 1;
        goto LABEL_14;
      }

      if (sub_10002F660(v15, a2))
      {
        uint64_t v16 = (unsigned int *)sub_10002F660(*(void *)(a1 + 72), a2);
        if (sub_100025C94(v16) == 3)
        {
          uint64_t v17 = (unsigned __int8 *)(sub_1000C8AB4(a4, "_CONSTRAINT_CLASS_END") ? a4 : "<e>");
          int v18 = sub_100031640(*(void *)(a1 + 80), (unsigned __int8 *)a3, &v25);
          unsigned int v19 = sub_100031640(*(void *)(a1 + 80), v17, &v25);
          if (v18 != -1 && v19 != -1 && a5 < 0x100)
          {
            *a6 = sub_100027AB4((uint64_t)v16, v18, v19, a5);
            int v14 = v26;
            goto LABEL_14;
          }
        }
      }
    }

uint64_t sub_100045970( uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int *a6, void *a7, uint64_t a8, _DWORD *a9)
{
  unsigned int v39 = 4;
  if (!a6) {
    return v39;
  }
  *a6 = -1;
  if (*(void *)(a1 + 72))
  {
    *a7 = 0LL;
    uint64_t v16 = a2;
    uint64_t v17 = a2;
    int v18 = a3;
    while (1)
    {
      unsigned int v20 = *v18++;
      unsigned int v19 = v20;
      if (v20 == -1) {
        break;
      }
      uint64_t v21 = *(void *)(a1 + 72);
      if (!v21) {
        break;
      }
      uint64_t v22 = v16;
      if (!sub_10002F660(v21, v19)) {
        break;
      }
      uint64_t v16 = v22;
      if (!--v17)
      {
        uint64_t v23 = 0LL;
        do
        {
          if (!sub_1000B3608(*(uint64_t **)(a1 + 8), *(_DWORD *)(a5 + v23))
            || *(_DWORD *)(a5 + v23) > 0xFFFFFFFA)
          {
            return 4LL;
          }

          v23 += 4LL;
        }

        while (4LL * a4 != v23);
        uint64_t v38 = 0LL;
        unsigned int v39 = 0;
        uint64_t v31 = (void *)sub_1000CAF58(8 * v22, v24, v25, v26, v27, v28, v29, v30);
        for (uint64_t i = 0LL; i != v22; ++i)
          v31[i] = sub_10002F660(*(void *)(a1 + 72), a3[i]);
        int v37 = 0;
        bzero(a7, 8LL * a4);
        if (sub_1000265C0(v31, a2, a4, a5, &v38, a7, &v37, a8))
        {
          int v33 = *(uint64_t **)(a1 + 72);
          if (v33) {
            int v34 = sub_10002F438(v33, v38);
          }
          else {
            int v34 = -1;
          }
          *a6 = v34;
        }

        sub_1000CB038(v31, 8 * v22);
        uint64_t result = 0LL;
        if (a9) {
          *a9 = v37;
        }
        return result;
      }
    }

    return v39;
  }

  return 1LL;
}

uint64_t sub_100045B5C( uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, int *a6, void *a7, uint64_t a8, uint64_t a9, _DWORD *a10, _DWORD *a11)
{
  unsigned int v70 = 0;
  uint64_t v69 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v67 = 0LL;
  if (a1)
  {
    uint64_t v69 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v68 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v65 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v66 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v67);
    nullsub_1(v66);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    unsigned int v20 = (int *)sub_1000BE9FC();
    if (setjmp(v20))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      unsigned int v70 = 1;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (!a8 || !a9 || !a10)
    {
LABEL_11:
      unsigned int v70 = 4;
      sub_1000BEA60();
      goto LABEL_9;
    }

    uint64_t v64 = (int)a4 + 1;
    unint64_t v28 = sub_1000CAF58(v64, v21, v22, v23, v24, v25, v26, v27);
    uint64_t v29 = a6;
    uint64_t v30 = (void *)v28;
    unsigned int v70 = sub_100045970(a1, a2, a3, a4, a5, v29, a7, v28, a11);
    if (v70)
    {
LABEL_32:
      unsigned int v70 = 0;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if ((int)a4 < 1)
    {
      LODWORD(v37) = 0;
      uint64_t v35 = a10;
      uint64_t v34 = a9;
    }

    else
    {
      uint64_t v31 = 0LL;
      uint64_t v32 = 0LL;
      int v33 = 0;
      uint64_t v35 = a10;
      uint64_t v34 = a9;
      do
      {
        uint64_t v37 = v32;
        if (a4 - 1LL == v31 || *((_BYTE *)v30 + v31 + 1))
        {
          uint64_t v36 = 4LL * (int)v32;
          *(_DWORD *)(a8 + v36) = v33;
          *(_DWORD *)(a9 + v36) = v31 + 1 - v33;
          a7[(int)v37] = a7[v31];
          uint64_t v37 = (v37 + 1);
          int v33 = v31 + 1;
        }

        uint64_t v32 = v37;
        ++v31;
      }

      while (v64 - 1LL != v31);
    }

    *uint64_t v35 = v37;
    if ((int)v37 < (int)a4)
    {
      uint64_t v38 = (int)v37;
      uint64_t v39 = (int)v37;
      unint64_t v40 = (int)a4 - (uint64_t)(int)v37;
      if (v40 < 0x14) {
        goto LABEL_28;
      }
      uint64_t v46 = 4LL * (int)v37;
      unint64_t v47 = a8 + 4 * v38;
      unint64_t v48 = a8 + 4LL * (int)a4;
      unint64_t v49 = v34 + 4 * v38;
      unint64_t v50 = v34 + 4LL * (int)a4;
      uint64_t v51 = &a7[v38];
      uint64_t v52 = &a7[(int)a4];
      BOOL v53 = v47 >= (unint64_t)v52 || (unint64_t)v51 >= v48;
      BOOL v54 = !v53;
      BOOL v55 = v49 >= (unint64_t)v52 || (unint64_t)v51 >= v50;
      BOOL v56 = !v55;
      if (v49 >= v48 || v47 >= v50)
      {
        uint64_t v41 = v39;
        if (!v54 && !v56)
        {
          unint64_t v58 = v40 & 0xFFFFFFFFFFFFFFF8LL;
          uint64_t v41 = (v40 & 0xFFFFFFFFFFFFFFF8LL) + v38;
          unsigned int v59 = &a7[v38 + 4];
          uint64_t v60 = v46 + 16;
          int v61 = (_OWORD *)(a8 + v46 + 16);
          uint64_t v62 = (_OWORD *)(v34 + v60);
          *(void *)&__int128 v63 = -1LL;
          *((void *)&v63 + 1) = -1LL;
          do
          {
            *(v61 - 1) = v63;
            *int v61 = v63;
            *(v62 - 1) = v63;
            *uint64_t v62 = v63;
            *(v59 - 2) = 0uLL;
            *(v59 - 1) = 0uLL;
            *unsigned int v59 = 0uLL;
            v59[1] = 0uLL;
            v59 += 4;
            v61 += 2;
            v62 += 2;
            v58 -= 8LL;
          }

          while (v58);
          if (v40 == (v40 & 0xFFFFFFFFFFFFFFF8LL)) {
            goto LABEL_31;
          }
        }
      }

      else
      {
LABEL_28:
        uint64_t v41 = v39;
      }

      uint64_t v42 = (_DWORD *)(a8 + 4 * v41);
      int v43 = (_DWORD *)(v34 + 4 * v41);
      uint64_t v44 = &a7[v41];
      uint64_t v45 = (int)a4 - v41;
      do
      {
        *v42++ = -1;
        *v43++ = -1;
        *v44++ = 0LL;
        --v45;
      }

      while (v45);
    }

unint64_t sub_100045F64(__int16 *a1, int a2, uint64_t a3)
{
  uint64_t v32 = 0LL;
  int v6 = sub_1000CC52C((unint64_t)a1) + 1;
  sub_1000C0BFC(2LL * v6, v7, v8, v9, v10, v11, v12, v13);
  uint64_t v15 = v14;
  sub_1000CC548(v14, a1, v6);
  uint64_t v16 = sub_1000CC804(v15, asc_1000F24E0, &v32);
  if (v16) {
    BOOL v17 = a2 < 1;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    unint64_t v19 = 0LL;
  }

  else
  {
    int v18 = (__int16 *)v16;
    unint64_t v19 = 0LL;
    do
    {
      int v20 = sub_1000CC52C((unint64_t)v18) + 1;
      sub_1000C0BFC(2LL * v20, v21, v22, v23, v24, v25, v26, v27);
      uint64_t v29 = v28;
      sub_1000CC548(v28, v18, v20);
      *(void *)(a3 + 8 * v19++) = v29;
      int v18 = (__int16 *)sub_1000CC804(0LL, asc_1000F24E0, &v32);
      if (v18) {
        BOOL v30 = v19 >= a2;
      }
      else {
        BOOL v30 = 1;
      }
    }

    while (!v30);
  }

  sub_1000C0EF8((uint64_t)v15);
  return v19;
}

uint64_t sub_100046060(uint64_t a1, _DWORD *a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (a1)
  {
    uint64_t v11 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v5 = (int *)sub_1000BE9FC();
    if (!setjmp(v5))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v6 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
      }

      else
      {
        *a2 = 0;
        if (*(void *)a1)
        {
          *a2 = sub_1000597E0(*(void *)a1);
          unsigned int v12 = 0;
        }

        else
        {
          unsigned int v12 = 1;
        }

        int v6 = v12;
      }

      unsigned int v12 = v6;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v11 = sub_1000C0BA8(0LL);
    uint64_t v10 = sub_1000CAEC8(0LL);
    uint64_t v7 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v8 = sub_1000CF8F8(0LL, 0LL, &v9);
    nullsub_1(v8);
  }

  unsigned int v12 = 1;
LABEL_9:
  sub_1000504B4(v12);
  sub_1000CF8F8(v8, v9, 0LL);
  sub_1000BEAB0(v7);
  sub_1000CAEC8(v10);
  sub_1000C0BA8(v11);
  return v12;
}

uint64_t sub_100046244(uint64_t a1)
{
  unsigned int v10 = 0;
  uint64_t v9 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v7 = 0LL;
  if (a1)
  {
    uint64_t v9 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v8 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v5 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v6 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v7);
    nullsub_1(v6);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v3 = (int *)sub_1000BE9FC();
    if (!setjmp(v3))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v4 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v4 = 1;
      }

      else
      {
        sub_100059758(*(void *)a1);
        int v4 = v10;
      }

      unsigned int v10 = v4;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v9 = sub_1000C0BA8(0LL);
    uint64_t v8 = sub_1000CAEC8(0LL);
    int v5 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    int v6 = sub_1000CF8F8(0LL, 0LL, &v7);
    nullsub_1(v6);
  }

  unsigned int v10 = 1;
LABEL_9:
  sub_1000504B4(v10);
  sub_1000CF8F8(v6, v7, 0LL);
  sub_1000BEAB0(v5);
  sub_1000CAEC8(v8);
  sub_1000C0BA8(v9);
  return v10;
}

double sub_100046414(uint64_t a1)
{
  if (*(void *)(a1 + 192)) {
    goto LABEL_2;
  }
  if (!qword_1000FDCC0) {
    goto LABEL_2;
  }
  uint64_t v22 = *(void *)(qword_1000FDCC0 + 4136);
  if (v22 < 1) {
    goto LABEL_2;
  }
  *(_DWORD *)(a1 + 236) = v22;
  int v23 = sub_1000597F8(*(void *)a1);
  *(_DWORD *)(a1 + 232) = v23;
  sub_1000C0BFC(*(int *)(a1 + 236) * (uint64_t)v23, v24, v25, v26, v27, v28, v29, v30);
  *(void *)(a1 + 192) = v31;
  sub_1000C0BFC(4LL * *(int *)(a1 + 236), v32, v33, v34, v35, v36, v37, v38);
  *(void *)(a1 + 296) = v39;
  sub_1000C0BFC(*(int *)(a1 + 236), v40, v41, v42, v43, v44, v45, v46);
  *(void *)(a1 + 200) = v47;
  sub_1000C0BFC(*(int *)(a1 + 236), v48, v49, v50, v51, v52, v53, v54);
  *(void *)(a1 + 208) = v62;
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1904))
  {
    sub_1000C0BFC(*(int *)(a1 + 236), v55, v56, v57, v58, v59, v60, v61);
    *(void *)(a1 + 216) = v63;
  }

  sub_1000C0BFC(*(int *)(a1 + 232), v55, v56, v57, v58, v59, v60, v61);
  *(void *)(a1 + 184) = v64;
  int v66 = *(_DWORD *)(a1 + 228);
  int v65 = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 224) = v66;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = v66;
  *(void *)(a1 + 248) = -1LL;
  uint64_t v67 = sub_1000B287C(*(void *)(a1 + 192), *(void *)(a1 + 296), *(_DWORD *)(a1 + 236), v65);
  *(void *)(a1 + 256) = v67;
  if (v67)
  {
LABEL_2:
    int v2 = sub_100059840(*(void *)a1);
    sub_1000C0BFC(v2, v3, v4, v5, v6, v7, v8, v9);
    *(void *)(a1 + 408) = v10;
    *(_DWORD *)(a1 + 364) = 0;
    int v11 = sub_1000597E8(*(void *)a1);
    *(_DWORD *)(a1 + 304) = v11;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 2016))
    {
      *(_DWORD *)(a1 + 724) = 1;
      v11 *= 2;
      *(_DWORD *)(a1 + 304) = v11;
    }

    int v19 = 1000 * v11 / (int)sub_1000597E0(*(void *)a1);
    *(_DWORD *)(a1 + 728) = v19;
    uint64_t v20 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v21 = *(void *)(qword_1000FDCC0 + 2320);
    }
    else {
      uint64_t v21 = 0LL;
    }
    *(_DWORD *)(a1 + 308) = v21 / v19;
    *(void *)(a1 + 656) = 0LL;
    *(void *)(a1 + 672) = 0LL;
    *(void *)(a1 + 664) = 0LL;
    if (!v20 || !*(_DWORD *)(v20 + 2848))
    {
      uint64_t v76 = 0LL;
      if (sub_1000A2908(0, *(void *)a1, (_DWORD *)&v76 + 1, (int *)&v76))
      {
        *(_DWORD *)(a1 + 656) = 0;
        *(_DWORD *)(a1 + 660) = HIDWORD(v76);
        *(_DWORD *)(a1 + 664) = v76;
        *(_DWORD *)(a1 + 668) = sub_1000597F0(*(void *)a1);
        *(void *)(a1 + 672) = 0x100000001LL;
      }
    }

    uint64_t v69 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      uint64_t v70 = *(void *)(qword_1000FDCC0 + 2232);
      if (v70 == 1)
      {
        uint64_t v76 = 0LL;
        if (sub_1000A2908(1, *(void *)a1, (_DWORD *)&v76 + 1, (int *)&v76))
        {
          *(_DWORD *)(a1 + 680) = 1;
          *(_DWORD *)(a1 + 684) = HIDWORD(v76);
          *(_DWORD *)(a1 + 688) = v76;
          *(_DWORD *)(a1 + 692) = sub_1000597F0(*(void *)a1);
          *(void *)(a1 + 696) = 0LL;
        }
      }

      else
      {
        if (v70)
        {
LABEL_28:
          uint64_t v71 = *(void *)(v69 + 2176);
          if ((v71 & 0x8000000000000000LL) == 0)
          {
            *(_DWORD *)(a1 + 708) = v71;
            if ((int)v71 >= 1)
            {
              sub_1000C0BFC(24LL * v71, v12, v13, v14, v15, v16, v17, v18);
              *(void *)(a1 + 712) = v72;
              if (*(int *)(a1 + 708) >= 1)
              {
                uint64_t v73 = 0LL;
                uint64_t v74 = 16LL;
                do
                {
                  *(void *)(*(void *)(a1 + 712) + v74) = 0xFFFFFFFFLL;
                  ++v73;
                  v74 += 24LL;
                }

                while (v73 < *(int *)(a1 + 708));
              }
            }

            goto LABEL_35;
          }

uint64_t sub_10004672C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 312);
  if (v2)
  {
    sub_1000C0EF8(v2);
    *(void *)(a1 + 312) = 0LL;
    *(_DWORD *)(a1 + 320) = 0;
  }

  sub_1000C0EF8(*(void *)(a1 + 712));
  *(void *)(a1 + 712) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 408));
  *(void *)(a1 + 408) = 0LL;
  sub_1000B2E64(*(void *)(a1 + 280));
  *(void *)(a1 + 280) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 272));
  *(void *)(a1 + 272) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 424));
  *(void *)(a1 + 424) = 0LL;
  sub_1000B2D5C(*(void *)(a1 + 256));
  *(void *)(a1 + 256) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 184));
  *(void *)(a1 + 184) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 216));
  *(void *)(a1 + 216) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 208));
  *(void *)(a1 + 208) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 200));
  *(void *)(a1 + 200) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 296));
  *(void *)(a1 + 296) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 192));
  *(void *)(a1 + 192) = 0LL;
  return sub_10003FE8C(a1);
}

void sub_1000467F0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(a1 + 736) = 0u;
  if (*(void *)(a1 + 88))
  {
    int v9 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v9 = *(_DWORD *)(qword_1000FDCC0 + 4136);
    }
    *(_DWORD *)(a1 + 748) = v9;
    sub_1000C0BFC(2LL * v9, a2, a3, a4, a5, a6, a7, a8);
    *(void *)(a1 + 736) = v10;
  }

double sub_100046840(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 736) = 0u;
  return result;
}

uint64_t sub_10004686C(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 348)) {
    sub_100046B00(a1);
  }
  uint64_t result = sub_10004760C(a1, a2, a3, a4);
  *(_DWORD *)(a1 + 348) = 1;
  *(void *)(a1 + 352) = 0LL;
  *(void *)(a1 + 648) = 0LL;
  *(_DWORD *)(a1 + 6636) = 0;
  *(_DWORD *)(a1 + 6440) = 0;
  int v9 = *(_DWORD *)(a1 + 384);
  if (v9 >= 1)
  {
    int v10 = *(_DWORD *)(a1 + 400);
    int v11 = *(_BYTE **)(a1 + 392);
    if (v10 >= v9)
    {
      v11[v10 - 1] = 102;
    }

    else
    {
      *(_DWORD *)(a1 + 400) = 1;
      _BYTE *v11 = 108;
    }
  }

  return result;
}

uint64_t sub_100046924(uint64_t a1, _DWORD *a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (a1)
  {
    uint64_t v11 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000BE9FC();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
        goto LABEL_16;
      }

      if (a2)
      {
        sub_10004686C(a1, 1, 1, a2);
        unsigned int v12 = 0;
        int v6 = 0;
        goto LABEL_16;
      }
    }

    int v6 = 4;
LABEL_16:
    unsigned int v12 = v6;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v11 = sub_1000C0BA8(0LL);
  uint64_t v10 = sub_1000CAEC8(0LL);
  uint64_t v7 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v8 = sub_1000CF8F8(0LL, 0LL, &v9);
  nullsub_1(v8);
LABEL_8:
  unsigned int v12 = 1;
LABEL_9:
  sub_1000504B4(v12);
  sub_1000CF8F8(v8, v9, 0LL);
  sub_1000BEAB0(v7);
  sub_1000CAEC8(v10);
  sub_1000C0BA8(v11);
  return v12;
}

uint64_t sub_100046B00(uint64_t a1)
{
  unsigned int v31 = 0;
  uint64_t v30 = 0LL;
  uint64_t v29 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  uint64_t v26 = 0LL;
  if (a1)
  {
    uint64_t v30 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v29 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v26 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v27 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v28);
    nullsub_1(v27);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v3 = (int *)sub_1000BE9FC();
    if (!setjmp(v3))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v4 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v4 = 1;
      }

      else
      {
        if (*(_DWORD *)(a1 + 348))
        {
          unsigned int v5 = *(_DWORD *)(a1 + 6416);
          sub_100046EFC(a1, 1);
          unsigned int v31 = 0;
          int v6 = *(_DWORD *)(a1 + 384);
          if (v6 >= 1)
          {
            uint64_t v7 = *(int *)(a1 + 400);
            uint64_t v8 = *(void *)(a1 + 392);
            if (*(_DWORD *)(a1 + 400) >= v6)
            {
              uint64_t v7 = (v7 - 1);
              char v9 = 102;
            }

            else
            {
              *(_DWORD *)(a1 + 400) = v7 + 1;
              char v9 = 76;
            }

            *(_BYTE *)(v8 + v7) = v9;
          }

          while (!v31)
          {
            uint64_t v18 = *(uint8x16_t **)(a1 + 184);
            while (1)
            {
              int v19 = sub_100059820(*(void *)a1);
              int v20 = v19;
              int v21 = *(_DWORD *)(a1 + 6636);
              if (*(_DWORD *)(a1 + 724))
              {
                int v21 = v21 == 0;
                *(_DWORD *)(a1 + 6636) = v21;
              }

              if (!v21)
              {
                sub_100006D74(*(void *)(a1 + 16), v18);
                int v25 = v20;
                goto LABEL_55;
              }
            }

            int v25 = v19;
            BOOL v22 = v19 != 4 || *(_DWORD *)(a1 + 724) == 0;
LABEL_55:
            int v23 = *(_DWORD *)(a1 + 228);
            if (v23 + 1 == *(_DWORD *)(a1 + 236)) {
              int v24 = 0;
            }
            else {
              int v24 = v23 + 1;
            }
            if (v24 != *(_DWORD *)(a1 + 224)) {
              sub_100047254(a1, a1 + 176, v25 == 6);
            }
          }

          int v10 = *(_DWORD *)(a1 + 228);
          int v11 = v10 - 2;
          if (v10 <= 1) {
            int v11 = *(_DWORD *)(a1 + 236) + v10 - 2;
          }
          if (v11 != *(_DWORD *)(a1 + 224))
          {
            int v15 = v11;
            do
            {
              int v11 = v15;
              if (!*(_BYTE *)(*(void *)(a1 + 200) + v15)) {
                break;
              }
              *(_BYTE *)(*(void *)(a1 + 208) + v15) = -1;
              int v16 = v15 - 1;
              int v17 = v11 - 1;
              if (v11 <= 0) {
                int v17 = *(_DWORD *)(a1 + 236) + v16;
              }
              int v11 = v17;
              int v15 = v17;
            }

            while (v17 != *(_DWORD *)(a1 + 224));
          }

          if (*(_DWORD *)(a1 + 252) == -1)
          {
            int v12 = v11 + *(_DWORD *)(a1 + 240) - *(_DWORD *)(a1 + 228) + 1;
            if (v12 >= *(_DWORD *)(a1 + 236)) {
              int v13 = *(_DWORD *)(a1 + 236);
            }
            else {
              int v13 = 0;
            }
            if (v12 >= 0) {
              int v14 = -v13;
            }
            else {
              int v14 = *(_DWORD *)(a1 + 236);
            }
            *(_DWORD *)(a1 + 252) = v12 + v14;
          }

          *(_DWORD *)(a1 + 348) = 0;
        }

        *(_DWORD *)(a1 + 352) = 1;
        int v4 = v31;
      }

      unsigned int v31 = v4;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v30 = sub_1000C0BA8(0LL);
    uint64_t v29 = sub_1000CAEC8(0LL);
    uint64_t v26 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v27 = sub_1000CF8F8(0LL, 0LL, &v28);
    nullsub_1(v27);
  }

  unsigned int v31 = 1;
LABEL_9:
  sub_1000504B4(v31);
  sub_1000CF8F8(v27, v28, 0LL);
  sub_1000BEAB0(v26);
  sub_1000CAEC8(v29);
  sub_1000C0BA8(v30);
  return v31;
}

uint64_t sub_100046EFC(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 176) != 2)
  {
    uint64_t v3 = result;
    if (*(_DWORD *)(result + 6452))
    {
      *(_DWORD *)(result + 6452) = 0;
      uint64_t result = sub_1000398BC(*(void *)result);
      *(_DWORD *)(v3 + 6460) = 0;
    }

    if (a2) {
      uint64_t result = sub_1000597D0(*(void *)v3);
    }
    if (*(_DWORD *)(v3 + 5672))
    {
      if (*(_DWORD *)(v3 + 6536))
      {
        if (!*(_DWORD *)(v3 + 6248))
        {
          int v4 = *(_DWORD *)(v3 + 336);
          int v5 = *(_DWORD *)(v3 + 340);
          if (v4 != v5)
          {
            uint64_t v6 = *(unsigned int *)(v3 + 304);
            if ((int)v6 < 1)
            {
              int v11 = 0;
              do
              {
                int v4 = (v4 + 1) % *(_DWORD *)(v3 + 344);
                ++v11;
              }

              while (v4 != v5);
              *(_DWORD *)(v3 + 336) = v5;
              *(_DWORD *)(v3 + 6248) = v11;
            }

            else
            {
              uint64_t v7 = *(_WORD **)(v3 + 6240);
              if (v6 > 0xF)
              {
                uint64_t v12 = v6 & 0xFFFFFFF0;
                if ((v6 & 0xFFFFFFF0) == v6)
                {
                  do
                  {
                    int v23 = (__int16 *)(*(void *)(v3 + 328) + 2LL * v4 * (int)v6);
                    if ((unint64_t)((char *)v7 - (char *)v23) > 0x1F)
                    {
                      uint64_t v26 = &v7[v12];
                      uint64_t v27 = (__int128 *)(v23 + 8);
                      uint64_t v28 = v7 + 8;
                      uint64_t v29 = v6 & 0xFFFFFFF0;
                      do
                      {
                        __int128 v30 = *v27;
                        *(v28 - 1) = *(v27 - 1);
                        *uint64_t v28 = v30;
                        v27 += 2;
                        v28 += 2;
                        v29 -= 16LL;
                      }

                      while (v29);
                      uint64_t v7 = v26;
                    }

                    else
                    {
                      int v24 = v6;
                      do
                      {
                        __int16 v25 = *v23++;
                        *v7++ = v25;
                        --v24;
                      }

                      while (v24);
                    }

                    int v4 = (*(_DWORD *)(v3 + 336) + 1) % *(_DWORD *)(v3 + 344);
                    *(_DWORD *)(v3 + 336) = v4;
                    ++*(_DWORD *)(v3 + 6248);
                  }

                  while (v4 != *(_DWORD *)(v3 + 340));
                }

                else
                {
                  do
                  {
                    uint64_t v13 = *(void *)(v3 + 328) + 2LL * v4 * (int)v6;
                    if ((unint64_t)v7 - v13 >= 0x20)
                    {
                      int v16 = &v7[v12];
                      int v15 = (__int16 *)(v13 + v12 * 2);
                      int v17 = (__int128 *)(v13 + 16);
                      uint64_t v18 = v7 + 8;
                      uint64_t v19 = v6 & 0xFFFFFFF0;
                      do
                      {
                        __int128 v20 = *v17;
                        *(v18 - 1) = *(v17 - 1);
                        *uint64_t v18 = v20;
                        v17 += 2;
                        v18 += 2;
                        v19 -= 16LL;
                      }

                      while (v19);
                      uint64_t v7 = v16;
                      int v14 = v6 & 0xFFFFFFF0;
                    }

                    else
                    {
                      int v14 = 0;
                      int v15 = (__int16 *)(*(void *)(v3 + 328) + 2LL * v4 * (int)v6);
                    }

                    int v21 = v6 - v14;
                    do
                    {
                      __int16 v22 = *v15++;
                      *v7++ = v22;
                      --v21;
                    }

                    while (v21);
                    int v4 = (*(_DWORD *)(v3 + 336) + 1) % *(_DWORD *)(v3 + 344);
                    *(_DWORD *)(v3 + 336) = v4;
                    ++*(_DWORD *)(v3 + 6248);
                  }

                  while (v4 != *(_DWORD *)(v3 + 340));
                }
              }

              else
              {
                do
                {
                  uint64_t v8 = (__int16 *)(*(void *)(v3 + 328) + 2LL * v4 * (int)v6);
                  int v9 = v6;
                  do
                  {
                    __int16 v10 = *v8++;
                    *v7++ = v10;
                    --v9;
                  }

                  while (v9);
                  int v4 = (*(_DWORD *)(v3 + 336) + 1) % *(_DWORD *)(v3 + 344);
                  *(_DWORD *)(v3 + 336) = v4;
                  ++*(_DWORD *)(v3 + 6248);
                }

                while (v4 != *(_DWORD *)(v3 + 340));
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10004715C(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 384);
  if (v2 >= 1)
  {
    int v3 = *(_DWORD *)(result + 400);
    if (v3 >= v2)
    {
      *(_BYTE *)(*(void *)(result + 392) + (v3 - 1)) = 102;
    }

    else
    {
      if (a2 == 108) {
        int v3 = 0;
      }
      uint64_t v4 = *(void *)(result + 392);
      *(_DWORD *)(result + 400) = v3 + 1;
      *(_BYTE *)(v4 + v3) = a2;
    }
  }

  return result;
}

uint64_t sub_1000471A4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *(uint8x16_t **)(a2 + 8);
  while (1)
  {
    int v7 = sub_100059820(*(void *)a1);
    int v8 = *(_DWORD *)(a1 + 6636);
    if (*(_DWORD *)(a2 + 548))
    {
      int v8 = v8 == 0;
      *(_DWORD *)(a1 + 6636) = v8;
    }

    if (!v8)
    {
      sub_100006D74(*(void *)(a1 + 16), v6);
      uint64_t result = 1LL;
      *a3 = v7;
      return result;
    }
  }

  uint64_t result = 0LL;
  *a3 = v7;
  return result;
}

uint64_t sub_100047254(uint64_t a1, uint64_t a2, int a3)
{
  int v7 = *(_DWORD *)(a2 + 52);
  uint64_t v6 = *(unsigned int *)(a2 + 56);
  int v8 = *(_BYTE **)(a2 + 8);
  if ((int)v6 >= 1)
  {
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = v7 * (int)v6;
    if (v6 < 8 || (unint64_t)(v9 + v10 - (void)v8) < 0x20)
    {
      uint64_t v11 = 0LL;
LABEL_5:
      uint64_t v12 = (_BYTE *)(v9 + v11 + v10);
      uint64_t v13 = &v8[v11];
      uint64_t v14 = v6 - v11;
      do
      {
        char v15 = *v13++;
        *v12++ = v15;
        --v14;
      }

      while (v14);
LABEL_7:
      int v7 = *(_DWORD *)(a2 + 52);
      goto LABEL_8;
    }

    if (v6 >= 0x20)
    {
      uint64_t v11 = v6 & 0x7FFFFFE0;
      uint64_t v26 = (__int128 *)(v8 + 16);
      uint64_t v27 = (_OWORD *)(v10 + v9 + 16);
      uint64_t v28 = v6 & 0xFFFFFFE0;
      do
      {
        __int128 v29 = *v26;
        *(v27 - 1) = *(v26 - 1);
        *uint64_t v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 32LL;
      }

      while (v28);
      if (v11 == v6) {
        goto LABEL_7;
      }
      if ((v6 & 0x18) == 0) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v11 = 0LL;
    }

    uint64_t v30 = v11;
    uint64_t v11 = v6 & 0xFFFFFFF8;
    unsigned int v31 = (uint64_t *)&v8[v30];
    uint64_t v32 = (void *)(v9 + v30 + v10);
    uint64_t v33 = v30 - v11;
    do
    {
      uint64_t v34 = *v31++;
      *v32++ = v34;
      v33 += 8LL;
    }

    while (v33);
    if (v11 == v6) {
      goto LABEL_7;
    }
    goto LABEL_5;
  }

uint64_t sub_100047458(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 == -2) {
    a2 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 708);
  if ((int)v3 >= 1)
  {
    int v4 = 0;
    uint64_t v5 = 0LL;
    int v6 = 0;
    uint64_t v7 = *(void *)(a1 + 712);
    uint64_t v8 = 24 * v3;
    do
    {
      uint64_t v9 = *(void *)(v7 + v5 + 16);
      if (v9 == 0xFFFFFFFFLL) {
        break;
      }
      if (v9 == a2)
      {
        if (a3)
        {
          *a3 = v4;
          uint64_t v7 = *(void *)(a1 + 712);
        }

        if (*(_DWORD *)(v7 + v5 + 4) + v6 < *(_DWORD *)(a1 + 236)) {
          return 1LL;
        }
        else {
          return 2LL;
        }
      }

      v6 += *(_DWORD *)(v7 + v5 + 4);
      v5 += 24LL;
      ++v4;
    }

    while (v8 != v5);
  }

  return 0LL;
}

unsigned int *sub_1000474F8(unsigned int *result, unsigned int a2, int a3)
{
  unsigned int v3 = a2;
  int v4 = result;
  unsigned int v6 = result[59];
  signed int v5 = result[60];
  int v7 = (int)(result[56] - result[61] + v6) % (int)v6;
  signed int v8 = v6 + v7;
  else {
    unsigned int v9 = result[60];
  }
  if (v8 >= v5) {
    unsigned int v10 = v6 + v7;
  }
  else {
    unsigned int v10 = v8 + 1;
  }
  unsigned int v11 = v9 - v10;
  if (v6 <= 1) {
    unsigned int v12 = 1;
  }
  else {
    unsigned int v12 = result[59];
  }
  BOOL v13 = v8 < v5;
  int v14 = v11 / v12;
  if (v13) {
    ++v14;
  }
  unsigned int v15 = v7 + v6 * v14;
  if (result[189] == 6) {
    unsigned int v16 = result[60];
  }
  else {
    unsigned int v16 = v15;
  }
  if (a3) {
    unsigned int v17 = result[60];
  }
  else {
    unsigned int v17 = v16;
  }
  if (a2 == -2) {
    unsigned int v3 = result[1604];
  }
  int v18 = result[177];
  int v19 = (uint64_t *)*((void *)result + 89);
  uint64_t v20 = v3;
  if (v18 >= 1)
  {
    BOOL v21 = v19 + 2;
    uint64_t v22 = result[177];
    do
    {
      uint64_t v24 = *v21;
      v21 += 3;
      uint64_t v23 = v24;
      if (v24 == 0xFFFFFFFFLL) {
        break;
      }
      if (v23 == v20) {
        return result;
      }
      --v22;
    }

    while (v22);
  }

  result[60] = v5 - v17;
  uint64_t result = (unsigned int *)j__memmove(v19 + 3, v19, 24 * v18 - 24);
  **((_DWORD **)v4 + 89) = v4[61];
  *(void *)(*((void *)v4 + 89) + 16LL) = v20;
  *(_DWORD *)(*((void *)v4 + 89) + 4LL) = v17;
  *(_DWORD *)(*((void *)v4 + 89) + 8LL) = v16;
  return result;
}

uint64_t sub_10004760C(uint64_t result, int a2, int a3, _DWORD *a4)
{
  uint64_t v7 = result;
  *(_DWORD *)(result + 176) = a2;
  uint64_t v8 = *(void *)(result + 6432);
  *(void *)(result + 6432) = v8 + 1;
  *(void *)(result + 6416) = v8;
  *a4 = v8;
  *(_DWORD *)(result + 288) = 0;
  if (*(void *)(result + 408)) {
    uint64_t result = sub_100059848(*(void *)result);
  }
  if (*(void *)(v7 + 424)) {
    uint64_t result = sub_100059848(*(void *)v7);
  }
  *(_DWORD *)(v7 + 436) = *a4;
  if (!a3)
  {
    *(_DWORD *)(v7 + 6452) = 0;
    if (a2 != 2)
    {
      unsigned int v9 = (_DWORD *)(v7 + 6452);
      goto LABEL_17;
    }

uint64_t sub_1000477D4(uint64_t a1, int a2)
{
  uint64_t result = sub_1000B25CC(*(unsigned int **)(a1 + 440), a2);
  switch((_DWORD)result)
  {
    case 3:
      if (*(_DWORD *)(a1 + 248) == -1)
      {
        *(_DWORD *)(a1 + 248) = sub_1000B278C(*(_DWORD **)(a1 + 440));
        return 3LL;
      }

      else
      {
        uint64_t result = 3LL;
        if (a2 && qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 2096))
        {
          int v5 = sub_100059800(*(void *)a1);
          if (v5 < 1) {
            return 3LL;
          }
          else {
            return sub_1000B27FC(*(unsigned int **)(a1 + 440), v5, 1);
          }
        }
      }

      break;
    case 2:
      if (*(_DWORD *)(a1 + 252) == -1) {
        *(_DWORD *)(a1 + 252) = sub_1000B27A8(*(_DWORD **)(a1 + 440));
      }
      return 2LL;
    case 1:
      *(void *)(a1 + 248) = -1LL;
      break;
  }

  return result;
}

uint64_t sub_1000478D4(_DWORD *a1)
{
  return ((a1[56] - a1[61] + a1[59]) % a1[59]);
}

uint64_t sub_1000478F4(uint64_t a1, char *a2, int a3, int *a4)
{
  unsigned int v29 = 0;
  uint64_t v28 = 0LL;
  uint64_t v27 = 0LL;
  uint64_t v26 = 0LL;
  if (a1)
  {
    uint64_t v28 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v27 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v24 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    __int16 v25 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v26);
    nullsub_1(v25);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    unsigned int v9 = (int *)sub_1000BE9FC();
    if (setjmp(v9))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      int v17 = 1;
      goto LABEL_14;
    }

    *a4 = 0;
    if (!a2)
    {
LABEL_11:
      int v17 = 4;
LABEL_14:
      unsigned int v29 = v17;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (!*(_DWORD *)(a1 + 348))
    {
      *a4 = 2;
      unsigned int v29 = 0;
      sub_1000BEA60();
      goto LABEL_9;
    }

    uint64_t v18 = *(unsigned int *)(a1 + 320);
    if ((int)v18 >= 1)
    {
      int v19 = *(_DWORD *)(a1 + 304) - (int)v18 >= a3 ? a3 : *(_DWORD *)(a1 + 304) - v18;
      memcpy((void *)(*(void *)(a1 + 312) + 2 * v18), a2, 2LL * v19);
      int v20 = *(_DWORD *)(a1 + 320) + v19;
      *(_DWORD *)(a1 + 320) = v20;
      a3 -= v19;
      a2 += 2 * v19;
      if (v20 == *(_DWORD *)(a1 + 304))
      {
        unsigned int v29 = sub_100047BEC(a1, *(char **)(a1 + 312));
        if (v29) {
          goto LABEL_38;
        }
        *(_DWORD *)(a1 + 320) = 0;
      }
    }

    LODWORD(v21) = *(_DWORD *)(a1 + 304);
    while (a3 >= (int)v21)
    {
      unsigned int v29 = sub_100047BEC(a1, a2);
      uint64_t v21 = *(int *)(a1 + 304);
      a2 += 2 * v21;
      a3 -= v21;
      if (v29) {
        goto LABEL_38;
      }
    }

    if (a3 >= 1)
    {
      uint64_t v22 = *(void **)(a1 + 312);
      if (!v22)
      {
        *(_DWORD *)(a1 + 320) = 0;
        sub_1000C0BFC(2LL * (int)v21, v10, v11, v12, v13, v14, v15, v16);
        *(void *)(a1 + 312) = v22;
      }

      memcpy(v22, a2, 2LL * a3);
      *(_DWORD *)(a1 + 320) = a3;
    }

    *a4 = 0;
    if (*(_DWORD *)(a1 + 640))
    {
      int v23 = 2;
LABEL_37:
      *a4 = v23;
      goto LABEL_38;
    }

    if (*(_DWORD *)(a1 + 648))
    {
      int v23 = 1;
      goto LABEL_37;
    }

uint64_t sub_100047BEC(uint64_t a1, char *a2)
{
  unsigned int v128 = 0;
  int v4 = sub_100048910(a1);
  int v5 = v4;
  if (*(_DWORD *)(a1 + 5672) && *(_DWORD *)(a1 + 6536))
  {
    switch(v4)
    {
      case 1:
        int v6 = *(_DWORD *)(a1 + 6248);
        if (v6)
        {
          int v7 = *(_DWORD *)(*(void *)(a1 + 440) + 8LL);
          uint64_t v8 = *(int *)(a1 + 304);
          *(void *)(a1 + 6248) = 0LL;
          *(void *)(a1 + 336) = 0LL;
          if (v7 >= 2)
          {
            uint64_t v9 = 0LL;
            int v10 = 0;
            int v11 = 0;
            int v12 = v7 - 1;
            uint64_t v13 = *(void *)(a1 + 6240) + 2LL * (v6 - v12) * (int)v8;
            uint64_t v14 = 2 * v8;
            uint64_t v15 = (__int16 *)v13;
            while (1)
            {
              uint64_t v16 = *(unsigned int *)(a1 + 304);
LABEL_15:
              int v25 = *(_DWORD *)(a1 + 344);
              int v11 = (v11 + 1) % v25;
              *(_DWORD *)(a1 + 340) = v11;
              if (v11 == v10)
              {
                int v10 = (v10 + 1) % v25;
                *(_DWORD *)(a1 + 336) = v10;
              }

              uint64_t v15 = (__int16 *)((char *)v15 + v14);
              if ((_DWORD)++v9 == v12) {
                goto LABEL_53;
              }
            }

            uint64_t v17 = *(void *)(a1 + 328);
            int v18 = v16 * v11;
            int v19 = (_WORD *)(v17 + 2LL * (int)v16 * v11);
            if (v16 >= 0x10
              && (uint64_t v20 = 2LL * v18, (unint64_t)(v20 + v17 - (v13 + v14 * v9)) >= 0x20))
            {
              unint64_t v26 = 0LL;
              uint64_t v21 = v16 & 0xFFFFFFF0;
              v19 += v21;
              uint64_t v22 = &v15[v21];
              uint64_t v27 = v17 + v20 + 16;
              do
              {
                uint64_t v28 = (_OWORD *)(v27 + v26);
                __int128 v29 = *(_OWORD *)&v15[v26 / 2 + 8];
                *(v28 - 1) = *(_OWORD *)&v15[v26 / 2];
                *uint64_t v28 = v29;
                v26 += 32LL;
              }

              while (((2 * v16) & 0x1FFFFFFE0LL) != v26);
              if (v21 == v16) {
                goto LABEL_14;
              }
            }

            else
            {
              LODWORD(v21) = 0;
              uint64_t v22 = v15;
            }

            int v23 = v16 - v21;
            do
            {
              __int16 v24 = *v22++;
              *v19++ = v24;
              --v23;
            }

            while (v23);
LABEL_14:
            int v11 = *(_DWORD *)(a1 + 340);
            int v10 = *(_DWORD *)(a1 + 336);
            goto LABEL_15;
          }

          int v11 = 0;
LABEL_53:
          *(_DWORD *)(a1 + 6248) = 0;
        }

        else
        {
          int v11 = *(_DWORD *)(a1 + 340);
        }

        uint64_t v64 = *(unsigned int *)(a1 + 304);
        uint64_t v65 = *(void *)(a1 + 328);
        int v66 = (_WORD *)(v65 + 2LL * (int)v64 * v11);
        if (v64 >= 0x10
          && (uint64_t v67 = 2LL * (int)v64 * v11 + v65, (unint64_t)(v67 - (void)a2) >= 0x20))
        {
          uint64_t v68 = v64 & 0x7FFFFFF0;
          uint64_t v88 = 2LL * (v64 & 0xFFFFFFF0);
          int v66 = (_WORD *)((char *)v66 + v88);
          uint64_t v69 = &a2[v88];
          uint64_t v89 = (__int128 *)(a2 + 16);
          uint64_t v90 = (_OWORD *)(v67 + 16);
          uint64_t v91 = v64 & 0xFFFFFFF0;
          do
          {
            __int128 v92 = *v89;
            *(v90 - 1) = *(v89 - 1);
            *uint64_t v90 = v92;
            v89 += 2;
            v90 += 2;
            v91 -= 16LL;
          }

          while (v91);
          if (v68 == v64) {
            goto LABEL_60;
          }
        }

        else
        {
          LODWORD(v68) = 0;
          uint64_t v69 = a2;
        }

        int v70 = v64 - v68;
        do
        {
          __int16 v71 = *(_WORD *)v69;
          v69 += 2;
          *v66++ = v71;
          --v70;
        }

        while (v70);
LABEL_60:
        int v11 = *(_DWORD *)(a1 + 340);
LABEL_61:
        int v63 = v11 + 1;
        goto LABEL_62;
      case 2:
        int v30 = *(_DWORD *)(a1 + 6248);
        if (v30 >= *(_DWORD *)(a1 + 6256)) {
          break;
        }
        uint64_t v31 = *(unsigned int *)(a1 + 304);
        uint64_t v32 = *(void *)(a1 + 6240);
        int v33 = v30 * v31;
        uint64_t v34 = (_WORD *)(v32 + 2LL * v30 * (int)v31);
        if (v31 < 0x10 || (uint64_t v35 = 2LL * v33 + v32, (unint64_t)(v35 - (void)a2) < 0x20))
        {
          LODWORD(v36) = 0;
          uint64_t v37 = a2;
LABEL_26:
          int v38 = v31 - v36;
          do
          {
            __int16 v39 = *(_WORD *)v37;
            v37 += 2;
            *v34++ = v39;
            --v38;
          }

          while (v38);
          goto LABEL_28;
        }

        uint64_t v36 = v31 & 0x7FFFFFF0;
        uint64_t v93 = 2LL * (v31 & 0xFFFFFFF0);
        uint64_t v34 = (_WORD *)((char *)v34 + v93);
        uint64_t v37 = &a2[v93];
        uint64_t v94 = (__int128 *)(a2 + 16);
        uint64_t v95 = (_OWORD *)(v35 + 16);
        uint64_t v96 = v31 & 0xFFFFFFF0;
        do
        {
          __int128 v97 = *v94;
          *(v95 - 1) = *(v94 - 1);
          *uint64_t v95 = v97;
          v94 += 2;
          v95 += 2;
          v96 -= 16LL;
        }

        while (v96);
        if (v36 != v31) {
          goto LABEL_26;
        }
LABEL_28:
        int v30 = *(_DWORD *)(a1 + 6248);
LABEL_29:
        int v40 = v30 + 1;
        goto LABEL_97;
      case 3:
        int v41 = *(_DWORD *)(a1 + 6248);
        if (v41) {
          goto LABEL_88;
        }
        int v42 = *(_DWORD *)(a1 + 336);
        int v43 = *(_DWORD *)(a1 + 340);
        if (v42 == v43)
        {
          int v41 = 0;
          goto LABEL_88;
        }

        uint64_t v74 = *(unsigned int *)(a1 + 304);
        if ((int)v74 >= 1)
        {
          int v75 = *(_WORD **)(a1 + 6240);
          uint64_t v76 = v74 & 0xFFFFFFF0;
          while (1)
          {
            uint64_t v77 = *(void *)(a1 + 328);
            uint64_t v78 = (__int16 *)(v77 + 2LL * v42 * (int)v74);
            if (v74 >= 0x10 && (uint64_t v79 = 2LL * v42 * (int)v74, (unint64_t)v75 - v77 - v79 >= 0x20))
            {
              uint64_t v81 = &v75[v76];
              uint64_t v78 = (__int16 *)((char *)v78 + v76 * 2);
              uint64_t v84 = (__int128 *)(v77 + v79 + 16);
              uint64_t v85 = v75 + 8;
              uint64_t v86 = v74 & 0xFFFFFFF0;
              do
              {
                __int128 v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *uint64_t v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 16LL;
              }

              while (v86);
              int v80 = v74 & 0x7FFFFFF0;
              if ((v74 & 0xFFFFFFF0) == v74) {
                goto LABEL_66;
              }
            }

            else
            {
              int v80 = 0;
              uint64_t v81 = v75;
            }

            int v82 = v74 - v80;
            do
            {
              __int16 v83 = *v78++;
              *v81++ = v83;
              --v82;
            }

            while (v82);
LABEL_66:
            int v42 = (*(_DWORD *)(a1 + 336) + 1) % *(_DWORD *)(a1 + 344);
            *(_DWORD *)(a1 + 336) = v42;
            int v41 = *(_DWORD *)(a1 + 6248) + 1;
            *(_DWORD *)(a1 + 6248) = v41;
            int v75 = v81;
            if (v42 == *(_DWORD *)(a1 + 340)) {
              goto LABEL_88;
            }
          }
        }

        int v41 = 0;
        do
        {
          int v42 = (v42 + 1) % *(_DWORD *)(a1 + 344);
          ++v41;
        }

        while (v42 != v43);
        *(_DWORD *)(a1 + 336) = v43;
        *(_DWORD *)(a1 + 6248) = v41;
LABEL_88:
        if (v41 >= *(_DWORD *)(a1 + 6256)) {
          break;
        }
        uint64_t v98 = *(unsigned int *)(a1 + 304);
        uint64_t v99 = *(void *)(a1 + 6240);
        int v100 = v98 * v41;
        int v101 = (_WORD *)(v99 + 2LL * v100);
        if (v98 < 0x10 || (uint64_t v102 = 2LL * v100 + v99, (unint64_t)(v102 - (void)a2) < 0x20))
        {
          LODWORD(v103) = 0;
          int v104 = a2;
LABEL_93:
          int v105 = v98 - v103;
          do
          {
            __int16 v106 = *(_WORD *)v104;
            v104 += 2;
            *v101++ = v106;
            --v105;
          }

          while (v105);
          goto LABEL_95;
        }

        uint64_t v103 = v98 & 0x7FFFFFF0;
        uint64_t v113 = 2LL * (v98 & 0xFFFFFFF0);
        int v101 = (_WORD *)((char *)v101 + v113);
        int v104 = &a2[v113];
        int v114 = (__int128 *)(a2 + 16);
        int v115 = (_OWORD *)(v102 + 16);
        uint64_t v116 = v98 & 0xFFFFFFF0;
        do
        {
          __int128 v117 = *v114;
          *(v115 - 1) = *(v114 - 1);
          *int v115 = v117;
          v114 += 2;
          v115 += 2;
          v116 -= 16LL;
        }

        while (v116);
        if (v103 != v98) {
          goto LABEL_93;
        }
LABEL_95:
        int v41 = *(_DWORD *)(a1 + 6248);
LABEL_96:
        int v40 = v41 + 1;
LABEL_97:
        *(_DWORD *)(a1 + 6248) = v40;
        break;
      case 5:
        uint64_t v44 = *(unsigned int *)(a1 + 304);
        if (*(_DWORD *)(a1 + 6452))
        {
          int v45 = *(_DWORD *)(a1 + 6248);
          if (v45 >= *(_DWORD *)(a1 + 6256)) {
            break;
          }
          uint64_t v46 = *(void *)(a1 + 6240);
          int v47 = v45 * v44;
          uint64_t v48 = (_WORD *)(v46 + 2LL * v45 * (int)v44);
          if (v44 >= 0x10 && (uint64_t v49 = 2LL * v47 + v46, (unint64_t)(v49 - (void)a2) >= 0x20))
          {
            uint64_t v50 = v44 & 0x7FFFFFF0;
            uint64_t v123 = 2LL * (v44 & 0xFFFFFFF0);
            uint64_t v48 = (_WORD *)((char *)v48 + v123);
            uint64_t v51 = &a2[v123];
            uint64_t v124 = (__int128 *)(a2 + 16);
            v125 = (_OWORD *)(v49 + 16);
            uint64_t v126 = v44 & 0xFFFFFFF0;
            do
            {
              __int128 v127 = *v124;
              *(v125 - 1) = *(v124 - 1);
              _OWORD *v125 = v127;
              v124 += 2;
              v125 += 2;
              v126 -= 16LL;
            }

            while (v126);
            if (v50 == v44) {
              goto LABEL_41;
            }
          }

          else
          {
            LODWORD(v50) = 0;
            uint64_t v51 = a2;
          }

          int v52 = v44 - v50;
          do
          {
            __int16 v53 = *(_WORD *)v51;
            v51 += 2;
            *v48++ = v53;
            --v52;
          }

          while (v52);
LABEL_41:
          int v45 = *(_DWORD *)(a1 + 6248);
LABEL_42:
          int v40 = v45 + 1;
          goto LABEL_97;
        }

        int v54 = *(_DWORD *)(a1 + 340);
        uint64_t v55 = *(void *)(a1 + 328);
        int v56 = v54 * v44;
        uint64_t v57 = (_WORD *)(v55 + 2LL * v54 * (int)v44);
        if (v44 < 0x10 || (uint64_t v58 = 2LL * v56 + v55, (unint64_t)(v58 - (void)a2) < 0x20))
        {
          LODWORD(v59) = 0;
          uint64_t v60 = a2;
LABEL_48:
          int v61 = v44 - v59;
          do
          {
            __int16 v62 = *(_WORD *)v60;
            v60 += 2;
            *v57++ = v62;
            --v61;
          }

          while (v61);
          goto LABEL_50;
        }

        uint64_t v59 = v44 & 0x7FFFFFF0;
        uint64_t v118 = 2LL * (v44 & 0xFFFFFFF0);
        uint64_t v57 = (_WORD *)((char *)v57 + v118);
        uint64_t v60 = &a2[v118];
        uint64_t v119 = (__int128 *)(a2 + 16);
        uint64_t v120 = (_OWORD *)(v58 + 16);
        uint64_t v121 = v44 & 0xFFFFFFF0;
        do
        {
          __int128 v122 = *v119;
          *(v120 - 1) = *(v119 - 1);
          *uint64_t v120 = v122;
          v119 += 2;
          v120 += 2;
          v121 -= 16LL;
        }

        while (v121);
        if (v59 != v44) {
          goto LABEL_48;
        }
LABEL_50:
        int v54 = *(_DWORD *)(a1 + 340);
LABEL_51:
        int v63 = v54 + 1;
LABEL_62:
        int v72 = *(_DWORD *)(a1 + 344);
        int v73 = v63 % v72;
        *(_DWORD *)(a1 + 340) = v73;
        if (v73 == *(_DWORD *)(a1 + 336)) {
          *(_DWORD *)(a1 + 336) = (v73 + 1) % v72;
        }
        break;
      default:
        break;
    }
  }

  if (*(_DWORD *)(a1 + 364))
  {
    if (v5 != 4)
    {
      int v107 = *(_DWORD *)(a1 + 372);
      if (v107 < *(_DWORD *)(a1 + 368))
      {
        memcpy((void *)(*(void *)(a1 + 376) + 2LL * *(_DWORD *)(a1 + 304) * v107), a2, 2LL * *(int *)(a1 + 304));
        ++*(_DWORD *)(a1 + 372);
      }
    }
  }

  int v108 = *(_DWORD *)(a1 + 384);
  if (v108 >= 1)
  {
    uint64_t v109 = *(int *)(a1 + 400);
    uint64_t v110 = *(void *)(a1 + 392);
    if ((int)v109 >= v108)
    {
      uint64_t v109 = (v109 - 1);
      char v111 = 102;
    }

    else
    {
      *(_DWORD *)(a1 + 400) = v109 + 1;
      char v111 = 119;
    }

    *(_BYTE *)(v110 + v109) = v111;
  }

  if (v5 == 4)
  {
    *(_DWORD *)(a1 + 356) = 1;
    if (*(_DWORD *)(a1 + 6452))
    {
      *(_DWORD *)(a1 + 6452) = 0;
      sub_1000398BC(*(void *)a1);
      *(_DWORD *)(a1 + 6460) = 0;
    }

    unsigned int v128 = 14;
  }

  else if (v5 == 2 && !*(_DWORD *)(a1 + 640))
  {
    *(_DWORD *)(a1 + 640) = 1;
    *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 240);
    if (*(_DWORD *)(a1 + 6452))
    {
      *(_DWORD *)(a1 + 6452) = 0;
      sub_1000398BC(*(void *)a1);
      *(_DWORD *)(a1 + 6460) = 0;
    }

    unsigned int v128 = 0;
  }

  if (!*(_DWORD *)(a1 + 648)) {
    *(_DWORD *)(a1 + 648) = v5 == 3;
  }
  return v128;
}

uint64_t sub_100048378(uint64_t result, int a2, int a3)
{
  if (a2 == -2) {
    a2 = *(_DWORD *)(result + 6416);
  }
  uint64_t v3 = *(unsigned int *)(result + 708);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = *(void *)(result + 712) + 8LL;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5 == 0xFFFFFFFFLL) {
        break;
      }
      if (v5 == a2)
      {
        int v6 = *(_DWORD *)(v4 - 4);
        if (v6 >= a3) {
          int v6 = a3;
        }
        *(_DWORD *)uint64_t v4 = v6;
        return result;
      }

      v4 += 24LL;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_1000483D8(uint64_t a1, int a2, _DWORD *a3)
{
  int v3 = a2;
  if (a2 == -2) {
    int v3 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 708);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = (void *)(*(void *)(a1 + 712) + 16LL);
    while (*v5 != 0xFFFFFFFFLL)
    {
      if (*v5 == v3)
      {
        *a3 = *((_DWORD *)v5 - 3);
        return 0LL;
      }

      v5 += 3;
      if (!--v4) {
        break;
      }
    }
  }

  if (*(void *)(a1 + 6416) == a2) {
    *a3 = *(_DWORD *)(a1 + 240);
  }
  else {
    *a3 = -1;
  }
  return 0LL;
}

uint64_t sub_100048460(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v3 = a2;
  if (a2 == -2) {
    unsigned int v3 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v4 = *(unsigned int *)(a1 + 708);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = v3;
    uint64_t v6 = *(void *)(a1 + 712) + 8LL;
    do
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7 == 0xFFFFFFFFLL) {
        break;
      }
      if (v7 == v5) {
        goto LABEL_10;
      }
      v6 += 24LL;
      --v4;
    }

    while (v4);
  }

  if (*(void *)(a1 + 6416) == a2)
  {
    uint64_t v6 = a1 + 240;
LABEL_10:
    *a3 = *(_DWORD *)v6;
    return 0LL;
  }

  else
  {
    *a3 = -1;
    return 0LL;
  }

uint64_t sub_1000484DC(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, void *a5)
{
  *a2 = 0;
  *a5 = 0LL;
  if (*(_DWORD *)(a1 + 6456)) {
    return sub_1000B2CAC(*(int **)(a1 + 256), a5);
  }
  if (*(_DWORD *)(a1 + 224) == *(_DWORD *)(a1 + 228) && *(void *)(a1 + 6416) == *(void *)(a1 + 6424))
  {
    int v11 = *(uint8x16_t **)(a1 + 184);
    while (1)
    {
      int v12 = sub_100059820(*(void *)a1);
      int v13 = v12;
      int v14 = *(_DWORD *)(a1 + 6636);
      if (*(_DWORD *)(a1 + 724))
      {
        int v14 = v14 == 0;
        *(_DWORD *)(a1 + 6636) = v14;
      }

      if (!v14)
      {
        sub_100006D74(*(void *)(a1 + 16), v11);
        sub_100047254(a1, a1 + 176, v13 == 6);
        if (*(_DWORD *)(a1 + 348))
        {
          if (sub_100025C94(*(unsigned int **)(a1 + 440)) == 2)
          {
            *(_DWORD *)(a1 + 640) = 1;
            if (*(_DWORD *)(a1 + 6452))
            {
              *(_DWORD *)(a1 + 6452) = 0;
              sub_1000398BC(*(void *)a1);
              *(_DWORD *)(a1 + 6460) = 0;
            }
          }
        }

        goto LABEL_19;
      }
    }

    if (v12 == 2 && *(_DWORD *)(a1 + 348) != 0) {
      *(_DWORD *)(a1 + 352) = 1;
    }
  }

BOOL sub_100048740(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 6456)) {
    return (int)sub_100062F94(*(void *)(a1 + 256)) > 0;
  }
  else {
    return *(_DWORD *)(a1 + 224) != *(_DWORD *)(a1 + 228);
  }
}

uint64_t sub_10004877C(uint64_t a1)
{
  *(_DWORD *)(a1 + 6252) = 0;
  int v2 = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a1 + 224) = v2;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = v2;
  *(void *)(a1 + 248) = -1LL;
  uint64_t v3 = *(void *)(a1 + 6432);
  *(void *)(a1 + 6432) = v3 + 1;
  *(void *)(a1 + 6416) = v3;
  uint64_t v4 = 1LL;
  if (*(int *)(a1 + 6248) >= 1)
  {
    uint64_t v5 = *(void *)(a1 + 6240);
    *(_DWORD *)(a1 + 6252) = 1;
    if (v5)
    {
      do
      {
        else {
          uint64_t v4 = v4;
        }
        int v6 = *(_DWORD *)(a1 + 6252);
        if (v6 >= *(_DWORD *)(a1 + 6248)) {
          break;
        }
        uint64_t v7 = *(void *)(a1 + 6240);
        *(_DWORD *)(a1 + 6252) = v6 + 1;
      }

      while (v7);
    }
  }

  sub_1000398BC(*(void *)a1);
  sub_1000597D0(*(void *)a1);
LABEL_9:
  uint64_t v8 = *(uint8x16_t **)(a1 + 184);
  while (1)
  {
    int v9 = sub_100059820(*(void *)a1);
    int v10 = v9;
    int v11 = *(_DWORD *)(a1 + 6636);
    if (*(_DWORD *)(a1 + 724))
    {
      int v11 = v11 == 0;
      *(_DWORD *)(a1 + 6636) = v11;
    }

    if (!v11)
    {
      sub_100006D74(*(void *)(a1 + 16), v8);
      int v12 = *(_DWORD *)(a1 + 228);
      if (v12 + 1 == *(_DWORD *)(a1 + 236)) {
        int v13 = 0;
      }
      else {
        int v13 = v12 + 1;
      }
      if (v13 == *(_DWORD *)(a1 + 224)) {
        uint64_t v4 = 0LL;
      }
      else {
        sub_100047254(a1, a1 + 176, v10 == 6);
      }
      goto LABEL_9;
    }
  }

  sub_1000474F8((unsigned int *)a1, *(_DWORD *)(a1 + 6416), 1);
  return v4;
}

uint64_t sub_100048910(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 228);
  if (v1 + 1 == *(_DWORD *)(a1 + 236)) {
    int v2 = 0;
  }
  else {
    int v2 = v1 + 1;
  }
  if (v2 == *(_DWORD *)(a1 + 224))
  {
    return 4LL;
  }

  else
  {
    int v6 = sub_1000597D8(*(void *)a1);
    if (*(_DWORD *)(a1 + 724)) {
      int v6 = sub_1000597D8(*(void *)a1);
    }
    int v7 = v6;
    if (v6 == 7)
    {
      *(_DWORD *)(a1 + 6440) = 1;
      uint64_t v8 = *(void *)(a1 + 5512);
      if (v8) {
        sub_1000393F8(v8);
      }
      sub_1000597C0(*(void *)a1);
      int v15 = *(_DWORD *)(a1 + 244);
      *(_DWORD *)(a1 + 224) = v15;
      *(_DWORD *)(a1 + 228) = v15;
      *(_DWORD *)(a1 + 240) = 0;
      *(void *)(a1 + 248) = -1LL;
      *(_DWORD *)(a1 + 348) = 1;
      *(void *)(a1 + 352) = 0LL;
      *(void *)(a1 + 648) = 0LL;
      *(_DWORD *)(a1 + 6636) = 0;
      *(_DWORD *)(a1 + 6440) = 0;
      return 3LL;
    }

    else
    {
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1984)) {
        sub_100059858(*(void *)a1, 1LL);
      }
      if ((v7 - 5) <= 1)
      {
        if (*(_DWORD *)(a1 + 6452))
        {
          int v9 = *(_DWORD *)(a1 + 6460);
          if (v7 == 5) {
            *(_DWORD *)(a1 + 6460) = ++v9;
          }
          uint64_t v10 = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            uint64_t v10 = *(void *)(qword_1000FDCC0 + 1880);
          }
          if (v10 <= v9)
          {
            *(_DWORD *)(a1 + 6452) = 0;
            sub_1000398BC(*(void *)a1);
            *(_DWORD *)(a1 + 6460) = 0;
          }
        }

        if (!*(_DWORD *)(a1 + 360) || *(_DWORD *)(a1 + 5672) || *(_DWORD *)(a1 + 752) == 6)
        {
          int v11 = *(uint8x16_t **)(a1 + 184);
          while (1)
          {
            int v12 = sub_100059820(*(void *)a1);
            int v13 = v12;
            int v14 = *(_DWORD *)(a1 + 6636);
            if (*(_DWORD *)(a1 + 724))
            {
              int v14 = v14 == 0;
              *(_DWORD *)(a1 + 6636) = v14;
            }

            if (!v14)
            {
              sub_100006D74(*(void *)(a1 + 16), v11);
              BOOL v16 = v13 == 6;
LABEL_34:
              int v17 = v16;
              uint64_t v3 = sub_100047254(a1, a1 + 176, v17);
              int v18 = *(_DWORD *)(a1 + 228);
              if (v18 + 1 == *(_DWORD *)(a1 + 236)) {
                int v19 = 0;
              }
              else {
                int v19 = v18 + 1;
              }
              if (v19 != *(_DWORD *)(a1 + 224))
              {
                int v20 = *(uint8x16_t **)(a1 + 184);
                while (1)
                {
                  int v21 = sub_100059820(*(void *)a1);
                  int v22 = v21;
                  int v23 = *(_DWORD *)(a1 + 6636);
                  if (*(_DWORD *)(a1 + 724))
                  {
                    int v23 = v23 == 0;
                    *(_DWORD *)(a1 + 6636) = v23;
                  }

                  if (!v23)
                  {
                    sub_100006D74(*(void *)(a1 + 16), v20);
                    BOOL v16 = v22 == 6;
                    goto LABEL_34;
                  }
                }
              }

              return v3;
            }
          }
        }
      }

      return 5LL;
    }
  }

uint64_t sub_100048BB8(uint64_t a1, int a2)
{
  if (a2 == -2) {
    a2 = *(_DWORD *)(a1 + 6416);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 708);
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0LL;
    int v5 = 0;
    int v6 = *(_DWORD **)(a1 + 256);
    uint64_t v7 = *(void *)(a1 + 712);
    uint64_t v8 = 24 * v3;
    do
    {
      uint64_t v9 = *(void *)(v7 + v4 + 16);
      if (v9 == 0xFFFFFFFFLL) {
        break;
      }
      if (v9 == a2)
      {
        uint64_t v10 = (int *)(v7 + v4);
        if (*(_DWORD *)(v7 + v4 + 4) + v5 >= *(_DWORD *)(a1 + 236)) {
          return 0LL;
        }
        int v11 = v10[2];
        if (!v11) {
          int v11 = *(_DWORD *)(v7 + v4 + 4);
        }
        sub_1000B2DA4(v6, *v10, v11);
        *(void *)(a1 + 6416) = *(void *)(*(void *)(a1 + 712) + v4 + 16);
        return 1LL;
      }

      v5 += *(_DWORD *)(v7 + v4 + 4);
      v4 += 24LL;
    }

    while (v8 != v4);
  }

  return 0LL;
}

uint64_t sub_100048C94(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (*(_DWORD *)(a1 + 6456))
  {
    uint64_t result = sub_10009D1D4(*(void *)(a1 + 256));
    *a3 = result;
    *a4 = result;
    *a2 = 0;
  }

  else
  {
    uint64_t result = sub_100059838(*(void *)a1);
    *a2 += *(_DWORD *)(a1 + 236);
    *a3 += (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 224) + *(_DWORD *)(a1 + 236)) % *(_DWORD *)(a1 + 236);
    *a4 += *(_DWORD *)(a1 + 264);
  }

  return result;
}

BOOL sub_100048D48(uint64_t a1)
{
  uint64_t v2 = sub_10005DEC8(*(void *)(a1 + 8));
  *(void *)(a1 + 64) = v2;
  return v2 == 0;
}

uint64_t sub_100048D78(uint64_t a1)
{
  *(void *)(a1 + 64) = 0LL;
  return 0LL;
}

uint64_t sub_100048DA4(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6 = sub_1000C8EE4(a2);
  if (!v6) {
    return 3LL;
  }
  uint64_t v14 = v6;
  int v15 = (_BYTE *)sub_1000CAF58(13LL, v7, v8, v9, v10, v11, v12, v13);
  *(void *)int v15 = 0LL;
  *(void *)(v15 + 5) = 0LL;
  *int v15 = *(void *)(a1 + 48) != 0LL;
  v15[1] = *(void *)(a1 + 80) != 0LL;
  v15[2] = *(void *)(a1 + 72) != 0LL;
  v15[3] = *(void *)(a1 + 64) != 0LL;
  v15[4] = *(void *)(a1 + 24) != 0LL;
  v15[5] = *(void *)(a1 + 40) != 0LL;
  v15[7] = *(void *)(a1 + 104) != 0LL;
  v15[8] = *(void *)(a1 + 112) != 0LL;
  v15[9] = *(void *)(a1 + 136) != 0LL;
  v15[10] = *(void *)(a1 + 144) != 0LL;
  v15[11] = *(void *)(a1 + 120) != 0LL;
  v15[12] = *(void *)(a1 + 56) != 0LL;
  uint64_t v43 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v41 = 0LL;
  uint64_t v42 = 0LL;
  unsigned __int32 v39 = 0;
  if (!sub_100042098( v14,  &v39,  &v43,  (_DWORD *)&v44 + 1,  &v44,  (_DWORD *)&v43 + 1,  (_DWORD *)&v42 + 1,  (unsigned __int32 *)&v42,  (_DWORD *)&v41 + 1,  &v41,  0LL,  0LL,  0LL,  5,  v40,  13,  v15)) {
    goto LABEL_45;
  }
  int v16 = v43;
  int v17 = sub_10009AA58();
  if ((_DWORD)v44 != v17 && !(_DWORD)v43) {
    goto LABEL_45;
  }
  if (HIDWORD(v44) != v17 && !(_DWORD)v43) {
    goto LABEL_45;
  }
  if ((_DWORD)v44 != *(_DWORD *)(a1 + 156))
  {
    if (!(_DWORD)v43) {
      goto LABEL_45;
    }
    *(_DWORD *)(a1 + 156) = v44;
  }

  if (v39 != a3) {
    goto LABEL_45;
  }
  unsigned int v18 = a3 - 3;
  if ((a3 - 3) <= 1)
  {
    if (!sub_1000599D8(*(void *)a1)
      || !sub_10001C7F4(*(void *)(a1 + 16), v14, 0LL, 0LL, 0LL, v19, v20, v21)
      || v15[4] && !sub_10001C7F4(*(void *)(a1 + 24), v14, 0LL, 1LL, 0LL, v24, v25, v26)
      || v15[5] && !sub_10001C7F4(*(void *)(a1 + 40), v14, 0LL, 0LL, 1LL, v24, v25, v26))
    {
      goto LABEL_45;
    }

    if (a3 != 3)
    {
      unsigned int v36 = 3;
LABEL_55:
      if (!sub_100023DBC(*(void *)(a1 + 6408), v14, 0LL, v22, v23, v24, v25, v26)) {
        goto LABEL_46;
      }
LABEL_56:
      unsigned int v36 = 0;
      goto LABEL_46;
    }
  }

  if (a3 == 5)
  {
    uint64_t v32 = 0LL;
  }

  else
  {
    if (a3 != 3)
    {
      unsigned int v36 = 3;
      goto LABEL_52;
    }

    uint64_t v27 = *(void *)(a1 + 104);
    uint64_t v28 = *(void *)(a1 + 112);
    if (v28)
    {
    }

    uint64_t v29 = *(void *)(a1 + 136);
    if (v29)
    {
    }

    uint64_t v30 = *(void *)(a1 + 144);
    if (v30)
    {
    }

    uint64_t v31 = *(void *)(a1 + 120);
    if (v31)
    {
    }

    uint64_t v32 = 1LL;
  }

  uint64_t v33 = *(void *)(a1 + 64);
  if (v33)
  {
  }

  uint64_t v34 = *(_DWORD **)(a1 + 80);
  if (v34)
  {
  }

  uint64_t v35 = *(void *)(a1 + 72);
  if (!v35)
  {
    unsigned int v36 = 3;
    goto LABEL_58;
  }

  if (!sub_10002F8F0(v35, v14, 0LL, *(void *)(a1 + 8), *(void *)(a1 + 80), v24, v25, v26))
  {
LABEL_45:
    unsigned int v36 = 3;
    goto LABEL_46;
  }

  unsigned int v36 = sub_10004321C(a1);
LABEL_58:
  int v38 = *(uint64_t **)(a1 + 56);
  if (!v38 || sub_10005C6F8(v38, v14, 0LL, v22, v23, v24, v25, v26))
  {
LABEL_52:
    if (v18 > 1) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }

uint64_t sub_1000491C0(uint64_t a1, const char *a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (a1)
  {
    uint64_t v11 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v5 = (int *)sub_1000BE9FC();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
        goto LABEL_18;
      }

      if (a2)
      {
        if (*(_DWORD *)(a1 + 6448) || *(_DWORD *)(a1 + 348))
        {
          int v6 = 7;
        }

        else
        {
          unsigned int v12 = sub_1000493A4(a1, a2);
          int v6 = v12;
        }

        goto LABEL_18;
      }
    }

    int v6 = 4;
LABEL_18:
    unsigned int v12 = v6;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v11 = sub_1000C0BA8(0LL);
  uint64_t v10 = sub_1000CAEC8(0LL);
  uint64_t v7 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v8 = sub_1000CF8F8(0LL, 0LL, &v9);
  nullsub_1(v8);
LABEL_8:
  unsigned int v12 = 1;
LABEL_9:
  sub_1000504B4(v12);
  sub_1000CF8F8(v8, v9, 0LL);
  sub_1000BEAB0(v7);
  sub_1000CAEC8(v10);
  sub_1000C0BA8(v11);
  return v12;
}

uint64_t sub_1000493A4(uint64_t a1, const char *a2)
{
  uint64_t v3 = sub_1000C99C0(a2);
  if (!v3) {
    return 9LL;
  }
  uint64_t v11 = v3;
  unsigned int v12 = (_BYTE *)sub_1000CAF58(13LL, v4, v5, v6, v7, v8, v9, v10);
  *(void *)unsigned int v12 = 0LL;
  *(void *)(v12 + 5) = 0LL;
  _BYTE *v12 = *(void *)(a1 + 48) != 0LL;
  v12[1] = *(void *)(a1 + 80) != 0LL;
  v12[2] = *(void *)(a1 + 72) != 0LL;
  v12[3] = *(void *)(a1 + 64) != 0LL;
  v12[4] = *(void *)(a1 + 24) != 0LL;
  v12[5] = *(void *)(a1 + 40) != 0LL;
  v12[7] = *(void *)(a1 + 104) != 0LL;
  v12[8] = *(void *)(a1 + 112) != 0LL;
  v12[9] = *(void *)(a1 + 136) != 0LL;
  v12[10] = *(void *)(a1 + 144) != 0LL;
  v12[11] = *(void *)(a1 + 120) != 0LL;
  v12[12] = *(void *)(a1 + 56) != 0LL;
  uint64_t result = sub_100041E90(a1, v11, 3, 0xDu, v12);
  if (!(_DWORD)result)
  {
    if (!sub_1000599D0(*(void *)a1)
      || !sub_10001C3EC(*(void *)(a1 + 16), v11, 0LL, 0, 0)
      || v12[4] && !sub_10001C3EC(*(void *)(a1 + 24), v11, 0LL, 1, 0))
    {
      goto LABEL_33;
    }

    if (v12[5] && !sub_10001C3EC(*(void *)(a1 + 40), v11, 0LL, 0, 1)) {
      goto LABEL_33;
    }
    uint64_t v19 = *(void *)(a1 + 104);
    if (v19)
    {
    }

    uint64_t v20 = *(void *)(a1 + 112);
    if (((uint64_t v21 = *(void *)(a1 + 136)) == 0 || sub_100038EC8(v21))
      && ((uint64_t v22 = *(void *)(a1 + 144)) == 0 || sub_100038EC8(v22))
      && ((uint64_t v23 = *(void *)(a1 + 120)) == 0 || sub_100038EC8(v23))
      && ((uint64_t v24 = *(void *)(a1 + 64)) == 0 || sub_10005EB30(v24, v11, 0LL))
      && ((uint64_t v25 = *(void *)(a1 + 80)) == 0 || sub_1000354EC(v25, v11, 0LL, v14, v15, v16, v17, v18))
      && ((uint64_t v26 = *(void *)(a1 + 72)) == 0 || sub_10002F72C(v26, v11, 0LL))
      && ((uint64_t v27 = *(void *)(a1 + 56)) == 0 || sub_10005C430(v27, v11, 0LL)))
    {
      else {
        unsigned int v28 = 9;
      }
    }

    else
    {
LABEL_33:
      unsigned int v28 = 9;
    }

    else {
      uint64_t v29 = v28;
    }
    sub_1000CB038(v12, 13LL);
    return v29;
  }

  return result;
}

uint64_t sub_1000496B8(uint64_t a1, const char *a2, const char *a3)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  if (a1)
  {
    uint64_t v13 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v10 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000BE9FC();
    if (setjmp(v7))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v8 = 1;
        goto LABEL_18;
      }

      if ((unint64_t)a2 | (unint64_t)a3)
      {
        if (*(_DWORD *)(a1 + 6448) || *(_DWORD *)(a1 + 348))
        {
          int v8 = 7;
        }

        else
        {
          if (a2) {
            unsigned int v14 = sub_100048DA4(a1, a2, 4);
          }
          if (!v14)
          {
            if (a3) {
              unsigned int v14 = sub_100048DA4(a1, a3, 5);
            }
          }

          int v8 = v14;
        }

        goto LABEL_18;
      }
    }

    int v8 = 4;
LABEL_18:
    unsigned int v14 = v8;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v13 = sub_1000C0BA8(0LL);
  uint64_t v12 = sub_1000CAEC8(0LL);
  uint64_t v9 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v10 = sub_1000CF8F8(0LL, 0LL, &v11);
  nullsub_1(v10);
LABEL_8:
  unsigned int v14 = 1;
LABEL_9:
  sub_1000504B4(v14);
  sub_1000CF8F8(v10, v11, 0LL);
  sub_1000BEAB0(v9);
  sub_1000CAEC8(v12);
  sub_1000C0BA8(v13);
  return v14;
}

uint64_t sub_1000498D4(uint64_t a1, const char *a2, const char *a3)
{
  unsigned int v14 = 0;
  uint64_t v13 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v11 = 0LL;
  if (a1)
  {
    uint64_t v13 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v12 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v9 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v10 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v11);
    nullsub_1(v10);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v7 = (int *)sub_1000BE9FC();
    if (setjmp(v7))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v8 = 1;
        goto LABEL_18;
      }

      if ((unint64_t)a2 | (unint64_t)a3)
      {
        if (*(_DWORD *)(a1 + 6448) || *(_DWORD *)(a1 + 348))
        {
          int v8 = 7;
        }

        else
        {
          unsigned int v14 = 0;
          if (!a2 || (unsigned int v14 = sub_100049AE8((uint64_t *)a1, a2)) == 0)
          {
            if (a3) {
              unsigned int v14 = sub_100049CE8(a1, a3);
            }
          }

          int v8 = v14;
        }

        goto LABEL_18;
      }
    }

    int v8 = 4;
LABEL_18:
    unsigned int v14 = v8;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v13 = sub_1000C0BA8(0LL);
  uint64_t v12 = sub_1000CAEC8(0LL);
  uint64_t v9 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v10 = sub_1000CF8F8(0LL, 0LL, &v11);
  nullsub_1(v10);
LABEL_8:
  unsigned int v14 = 1;
LABEL_9:
  sub_1000504B4(v14);
  sub_1000CF8F8(v10, v11, 0LL);
  sub_1000BEAB0(v9);
  sub_1000CAEC8(v12);
  sub_1000C0BA8(v13);
  return v14;
}

uint64_t sub_100049AE8(uint64_t *a1, const char *a2)
{
  uint64_t v3 = sub_1000C99C0(a2);
  if (!v3) {
    return 9LL;
  }
  uint64_t v11 = v3;
  uint64_t v12 = (_BYTE *)sub_1000CAF58(13LL, v4, v5, v6, v7, v8, v9, v10);
  *(void *)uint64_t v12 = 0LL;
  *(void *)(v12 + 5) = 0LL;
  _BYTE *v12 = a1[6] != 0;
  v12[1] = a1[10] != 0;
  v12[2] = a1[9] != 0;
  v12[3] = a1[8] != 0;
  v12[4] = a1[3] != 0;
  v12[5] = a1[5] != 0;
  v12[7] = a1[13] != 0;
  v12[8] = a1[14] != 0;
  v12[9] = a1[17] != 0;
  v12[10] = a1[18] != 0;
  v12[11] = a1[15] != 0;
  v12[12] = a1[7] != 0;
  unsigned int v13 = sub_100041E90((uint64_t)a1, v11, 4, 0xDu, v12);
  if (!v13)
  {
    if (sub_1000599D0(*a1)
      && sub_10001C3EC(a1[2], v11, 0LL, 0, 0)
      && (!v12[4] || sub_10001C3EC(a1[3], v11, 0LL, 1, 0))
      && (!v12[5] || sub_10001C3EC(a1[5], v11, 0LL, 0, 1)))
    {
      else {
        unsigned int v13 = 9;
      }
    }

    else
    {
      unsigned int v13 = 9;
    }
  }

  else {
    uint64_t v15 = v13;
  }
  sub_1000CB038(v12, 13LL);
  return v15;
}

uint64_t sub_100049CE8(uint64_t a1, const char *a2)
{
  uint64_t v3 = sub_1000C99C0(a2);
  if (!v3) {
    return 9LL;
  }
  uint64_t v11 = v3;
  uint64_t v12 = (char *)sub_1000CAF58(13LL, v4, v5, v6, v7, v8, v9, v10);
  *(void *)uint64_t v12 = 0LL;
  *(void *)(v12 + 5) = 0LL;
  char *v12 = *(void *)(a1 + 48) != 0LL;
  v12[1] = *(void *)(a1 + 80) != 0LL;
  v12[2] = *(void *)(a1 + 72) != 0LL;
  v12[3] = *(void *)(a1 + 64) != 0LL;
  v12[4] = *(void *)(a1 + 24) != 0LL;
  v12[5] = *(void *)(a1 + 40) != 0LL;
  v12[7] = *(void *)(a1 + 104) != 0LL;
  v12[8] = *(void *)(a1 + 112) != 0LL;
  v12[9] = *(void *)(a1 + 136) != 0LL;
  v12[10] = *(void *)(a1 + 144) != 0LL;
  v12[11] = *(void *)(a1 + 120) != 0LL;
  v12[12] = *(void *)(a1 + 56) != 0LL;
  unsigned int v13 = sub_100041E90(a1, v11, 5, 0xDu, v12);
  if (!v13)
  {
    uint64_t v19 = *(void *)(a1 + 104);
    if (v19)
    {
    }

    uint64_t v20 = *(void *)(a1 + 112);
    if (((uint64_t v21 = *(void *)(a1 + 136)) == 0 || sub_100038EC8(v21))
      && ((uint64_t v22 = *(void *)(a1 + 144)) == 0 || sub_100038EC8(v22))
      && ((uint64_t v23 = *(void *)(a1 + 120)) == 0 || sub_100038EC8(v23))
      && ((uint64_t v24 = *(void *)(a1 + 64)) == 0 || sub_10005EB30(v24, v11, 0LL))
      && ((uint64_t v25 = *(void *)(a1 + 80)) == 0 || sub_1000354EC(v25, v11, 0LL, v14, v15, v16, v17, v18))
      && ((uint64_t v26 = *(void *)(a1 + 72)) == 0 || sub_10002F72C(v26, v11, 0LL))
      && ((uint64_t v27 = *(void *)(a1 + 56)) == 0 || sub_10005C430(v27, v11, 0LL)))
    {
      unsigned int v13 = 0;
    }

    else
    {
LABEL_24:
      unsigned int v13 = 9;
    }
  }

  else {
    uint64_t v29 = v13;
  }
  sub_1000CB038(v12, 13LL);
  return v29;
}

uint64_t sub_100049F58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1000FDCC0)
  {
    uint64_t v9 = *(unsigned int *)(qword_1000FDCC0 + 1136);
    int v10 = *(_DWORD *)(qword_1000FDCC0 + 1152);
    *(_DWORD *)(a1 + 5500) = 0;
    if (!*(void *)(a1 + 104)) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    int v10 = 0;
    *(_DWORD *)(a1 + 5500) = 0;
    if (!*(void *)(a1 + 104)) {
      goto LABEL_6;
    }
  }

  uint64_t result = (uint64_t)sub_10003FA40(v10, v9, a3, a4, a5, a6, a7, a8);
  *(void *)(a1 + 800) = result;
  if (!result) {
    return result;
  }
LABEL_6:
  if (*(void *)(a1 + 112))
  {
    uint64_t result = (uint64_t)sub_10003FA40(v10, v9, a3, a4, a5, a6, a7, a8);
    *(void *)(a1 + 808) = result;
    if (!result) {
      return result;
    }
  }

  uint64_t result = sub_1000C1074(28LL);
  *(void *)(a1 + 768) = result;
  if (!result) {
    return result;
  }
  if ((int)sub_100011CD8(*(void *)(a1 + 16)) < 1)
  {
    *(void *)(a1 + 5480) = 0LL;
  }

  else
  {
    int v12 = sub_100011CD8(*(void *)(a1 + 16));
    uint64_t result = sub_1000C1074(v12);
    *(void *)(a1 + 5480) = result;
    if (!result) {
      return result;
    }
  }

  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 832) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 848) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 864) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 880) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 896) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 912) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 928) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 944) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 960) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 976) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 992) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1008) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1024) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1040) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1056) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1072) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1088) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1104) = xmmword_1000F0500;
  *(_OWORD *)(a1 + 1120) = xmmword_1000F0500;
  *(void *)&__int128 v13 = -1LL;
  *((void *)&v13 + 1) = -1LL;
  *(_OWORD *)(a1 + 1280) = v13;
  *(_OWORD *)(a1 + 1264) = v13;
  *(_OWORD *)(a1 + 1248) = v13;
  *(_OWORD *)(a1 + 1232) = v13;
  *(_OWORD *)(a1 + 1216) = v13;
  *(_OWORD *)(a1 + 1200) = v13;
  *(_OWORD *)(a1 + 1184) = v13;
  *(_OWORD *)(a1 + 1168) = v13;
  *(_OWORD *)(a1 + 1152) = v13;
  *(_OWORD *)(a1 + 1136) = v13;
  if (!qword_1000FDCC0) {
    goto LABEL_27;
  }
  uint64_t v14 = *(void *)(qword_1000FDCC0 + 2144);
  if ((_DWORD)v14)
  {
    uint64_t result = sub_1000C1074(4LL * (int)v14);
    *(void *)(a1 + 1304) = result;
    if (!result) {
      return result;
    }
    uint64_t result = sub_1000C1074((uint64_t)(int)v14 << 7);
    *(void *)(a1 + 1312) = result;
    if (!result) {
      return result;
    }
    *(_DWORD *)(a1 + 1296) = v14;
    if ((int)v14 >= 1)
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = 0LL;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 1304) + v15) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16) = 0;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 4) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 88) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 48) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 8) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 92) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 52) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 12) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 96) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 56) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 16) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 100) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 60) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 20) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 104) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 64) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 24) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 108) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 68) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 28) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 112) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 72) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 32) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 116) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 76) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 36) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 120) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 80) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 40) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 124) = -1;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 84) = 0x40000000;
        *(_DWORD *)(*(void *)(a1 + 1312) + v16 + 44) = 0x40000000;
        v16 += 128LL;
        v15 += 4LL;
      }

      while ((unint64_t)v14 << 7 != v16);
    }
  }

  if (!qword_1000FDCC0)
  {
LABEL_27:
    *(_DWORD *)(a1 + 5496) = 0;
    *(void *)(a1 + 5488) = 0LL;
    goto LABEL_28;
  }

  uint64_t v17 = *(void *)(qword_1000FDCC0 + 2160);
  *(_DWORD *)(a1 + 5496) = v17;
  *(void *)(a1 + 5488) = 0LL;
  if ((int)v17 < 1)
  {
LABEL_28:
    *(void *)(a1 + 5500) = 0xFFFFFFFF00000001LL;
    return 1LL;
  }

  uint64_t result = sub_1000C1074((unint64_t)v17 << 6);
  *(void *)(a1 + 5488) = result;
  if (result)
  {
    if (*(int *)(a1 + 5496) >= 1)
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = 0LL;
      do
      {
        *(_DWORD *)(*(void *)(a1 + 5488) + v18 + 32) = -1;
        *(_DWORD *)(*(void *)(a1 + 5488) + v18) = 0;
        *(_DWORD *)(*(void *)(a1 + 5488) + v18 + 4) = 1;
        ++v19;
        v18 += 64LL;
      }

      while (v19 < *(int *)(a1 + 5496));
    }

    goto LABEL_28;
  }

  return result;
}

uint64_t sub_10004A324(uint64_t a1)
{
  *(_DWORD *)(a1 + 5500) = 0;
  sub_1000C0EF8(*(void *)(a1 + 1304));
  *(void *)(a1 + 1304) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 1312));
  *(void *)(a1 + 1312) = 0LL;
  uint64_t v2 = *(void *)(a1 + 5488);
  if (v2)
  {
    if (*(int *)(a1 + 5496) >= 1)
    {
      int v3 = 0;
      do
        sub_10004F7DC(v2, v3++);
      while (v3 < *(_DWORD *)(a1 + 5496));
      uint64_t v2 = *(void *)(a1 + 5488);
    }

    sub_1000C0EF8(v2);
    *(void *)(a1 + 5488) = 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 768));
  *(void *)(a1 + 768) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 784));
  *(void *)(a1 + 784) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 5480));
  *(void *)(a1 + 5480) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 5424));
  sub_1000C0EF8(*(void *)(a1 + 5432));
  sub_1000C0EF8(*(void *)(a1 + 5440));
  *(_DWORD *)(a1 + 5448) = 0;
  *(void *)(a1 + 5440) = 0LL;
  *(_OWORD *)(a1 + 5424) = 0u;
  sub_10003FB88(*(void *)(a1 + 808));
  *(void *)(a1 + 808) = 0LL;
  sub_10003FB88(*(void *)(a1 + 800));
  *(void *)(a1 + 800) = 0LL;
  uint64_t v4 = *(void *)(a1 + 5456);
  if (v4)
  {
    sub_10002F480(*(void *)(a1 + 72), v4);
    *(void *)(a1 + 5456) = 0LL;
  }

  return sub_1000C0EF8(*(void *)(a1 + 5464));
}

uint64_t sub_10004A428(uint64_t result, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = a2 & ~(a2 >> 31);
  else {
    int v6 = a2 & ~(a2 >> 31);
  }
  *(_DWORD *)(result + 776) = v6;
  if (v6 >= 1)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0LL;
    uint64_t v10 = a4;
    if (a4 >= v5) {
      uint64_t v10 = a2 & ~(a2 >> 31);
    }
    uint64_t v11 = a3 - 4 * v10 + 4LL * v5;
    do
    {
      *(_DWORD *)(*(void *)(result + 768) + 4 * v9) = *(_DWORD *)(v11 + 4 * v9);
      ++v9;
      uint64_t v12 = *(int *)(result + 776);
    }

    while (v9 < v12);
    if ((int)v12 >= 1)
    {
      uint64_t v13 = 0LL;
      do
      {
        uint64_t result = sub_1000B3A9C(*(void *)(v8 + 8), *(_DWORD *)(*(void *)(v8 + 768) + 4 * v13));
        *(_WORD *)(a5 + 2 * v13++) = result;
      }

      while (v13 < *(int *)(v8 + 776));
    }
  }

  return result;
}

uint64_t sub_10004A4D0(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v100 = 0;
  int v99 = a3;
  int v98 = 1;
  int v97 = 0;
  int v96 = a4;
  int v95 = a6;
  uint64_t v94 = 0LL;
  uint64_t v93 = 0LL;
  uint64_t v92 = 0LL;
  if (a1)
  {
    uint64_t v94 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v93 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v90 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v91 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v92);
    nullsub_1(v91);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v12 = (int *)sub_1000BE9FC();
    if (setjmp(v12))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      int v13 = 1;
      goto LABEL_108;
    }

    sub_10004715C(a1, 114);
    memset(v101, 0, 14);
    *(_DWORD *)(a1 + 6448) = 0;
    *(_DWORD *)(a1 + 6464) = 0;
    if (*(_DWORD *)(a1 + 5500))
    {
      uint64_t v20 = (uint64_t *)(!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112) ? a1 + 808 : a1 + 800);
      uint64_t v21 = *v20;
      *(void *)(v21 + 136) = 0LL;
      *(_DWORD *)(v21 + 128) = 0;
      *(_DWORD *)(v21 + 4) = -1;
      *(void *)(v21 + 88) = 0x7FFFFFFF00000000LL;
      *(void *)(v21 + 104) = 0LL;
      *(_DWORD *)(v21 + 112) = -1;
      if (*(_DWORD *)(a1 + 5500)) {
        goto LABEL_22;
      }
    }

    if (v99 == 6)
    {
LABEL_22:
      if (!*(_DWORD *)(a1 + 96) || v99 == 6)
      {
        if (!a5 && v96 >= 1 || v95 >= 1025 || !v99 || v95 >= 1024)
        {
LABEL_11:
          int v13 = 4;
          goto LABEL_108;
        }

        uint64_t v22 = a2;
        *(void *)(a1 + 6424) = a2;
        if (*(_DWORD *)(a1 + 6472))
        {
          if (*(void *)(a1 + 6416) == a2)
          {
            uint64_t v23 = *(char **)(a1 + 5480);
            if (v23) {
              sub_100011CF4(*(void *)(a1 + 16), v23);
            }
          }
        }

        if (qword_1000FDCC0 && (*(_DWORD *)(qword_1000FDCC0 + 2024) || *(_DWORD *)(qword_1000FDCC0 + 2212))) {
          int v97 = 1;
        }
        if (*(_DWORD *)(a1 + 6468) && *(void *)(a1 + 6416) == a2 && v99 != 7) {
          sub_1000114A8(*(void *)(a1 + 16), v97);
        }
        uint64_t v24 = *(void *)(a1 + 104);
        *(void *)(a1 + 5512) = v24;
        else {
          int v25 = dword_1000F0524[v99 - 2];
        }
        *(_DWORD *)(a1 + 756) = v25;
        *(_DWORD *)(a1 + 752) = v99;
        *(_DWORD *)(a1 + 1320) = 0;
        *(_DWORD *)(a1 + 6476) = 0;
        uint64_t v26 = (uint64_t *)(a1 + 5456);
        uint64_t v27 = *(void *)(a1 + 5456);
        if (v27)
        {
          if (v24)
          {
            sub_100039030(v24);
            uint64_t v27 = *v26;
          }

          uint64_t v28 = *(void *)(a1 + 120);
          if (v28)
          {
            sub_100039030(v28);
            uint64_t v27 = *v26;
          }

          uint64_t v29 = *(void *)(a1 + 112);
          if (v29)
          {
            sub_100039030(v29);
            uint64_t v27 = *v26;
          }

          sub_10002F480(*(void *)(a1 + 72), v27);
          *(void *)(a1 + 5456) = 0LL;
        }

        int v30 = *(_DWORD *)(a1 + 5672);
        if (!v30 || v99 == 8 || v99 == 9)
        {
          if (v99 == 8 || v99 == 9)
          {
            if (!v30)
            {
              *(void *)(a1 + 5512) = 0LL;
              int v13 = 11;
              goto LABEL_108;
            }

            *(void *)(a1 + 5512) = *(void *)(a1 + 112);
            unsigned int v100 = sub_100040448(a1);
            *(_DWORD *)(a1 + 5688) = 1;
LABEL_59:
            if (*(_DWORD *)(a1 + 5500))
            {
              if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
                uint64_t v31 = (uint64_t *)(a1 + 808);
              }
              else {
                uint64_t v31 = (uint64_t *)(a1 + 800);
              }
              uint64_t v46 = *v31;
              *(_DWORD *)(v46 + 4) = -1;
              *(void *)(v46 + 88) = 0x7FFFFFFF00000000LL;
              *(void *)(v46 + 136) = 0LL;
            }

            *(_DWORD *)(a1 + 6464) = 0;
            sub_1000B25A8(a1 + 448);
            sub_1000B25A8(a1 + 496);
            sub_1000B25A8(a1 + 544);
            sub_1000B25A8(a1 + 592);
            *(void *)(a1 + 440) = a1 + 496;
            uint64_t v47 = a1 + 448;
            if (!*(_DWORD *)(a1 + 5672))
            {
              uint64_t v47 = a1 + 592;
              if (v99 != 6)
              {
                if (v99 == 1)
                {
                  uint64_t v47 = a1 + 544;
                }

                else
                {
                  uint64_t v47 = a1 + 544;
                  if (v99 != 7)
                  {
LABEL_111:
                    *(void *)(a1 + 640) = 0xFFFFFFFF00000000LL;
                    *(_DWORD *)(a1 + 6456) = 1;
                    if (!sub_100048BB8(a1, a2))
                    {
                      *(_DWORD *)(a1 + 6456) = 0;
                      if (*(void *)(a1 + 6432) != a2 + 1)
                      {
                        *(void *)(a1 + 5512) = 0LL;
                        int v13 = 13;
                        goto LABEL_108;
                      }

                      *(void *)(a1 + 6416) = v22;
                    }

                    *(_DWORD *)(a1 + 6448) = 1;
                    int v13 = v100;
LABEL_108:
                    unsigned int v100 = v13;
                    sub_1000BEA60();
                    goto LABEL_9;
                  }
                }
              }
            }

            *(void *)(a1 + 440) = v47;
            goto LABEL_111;
          }

          if (*(_DWORD *)(a1 + 5500))
          {
            if (v95 >= 1)
            {
              uint64_t v32 = 0LL;
              while (sub_100042C14(a1, *(_DWORD *)(a7 + 4 * v32)))
              {
                if (++v32 >= v95) {
                  goto LABEL_69;
                }
              }

              goto LABEL_178;
            }

LABEL_155:
                  if (v66) {
                    uint64_t v76 = 2LL;
                  }
                  else {
                    uint64_t v76 = 0LL;
                  }
                  if (*(void *)(a1 + 5456))
                  {
                    uint64_t v77 = 1LL;
                    uint64_t v78 = (unsigned int **)(a1 + 5456);
                  }

                  else
                  {
                    uint64_t v77 = v95;
                    uint64_t v78 = (unsigned int **)v37;
                  }

                  unsigned int v79 = qword_1000FDCC0;
                  if (qword_1000FDCC0)
                  {
                    unsigned int v80 = *(_DWORD *)(qword_1000FDCC0 + 1448);
                    unsigned int v81 = *(_DWORD *)(qword_1000FDCC0 + 1764);
                    unsigned int v79 = *(_DWORD *)(qword_1000FDCC0 + 1652);
                  }

                  else
                  {
                    unsigned int v80 = 0;
                    unsigned int v81 = 0;
                  }

                  int v82 = sub_10003927C( v75,  *(unsigned int *)(a1 + 776),  (uint64_t)v101,  v77,  v78,  v72,  v76,  v80,  __SPAIR64__(v81, v79));
                  if (*(void *)(a1 + 120))
                  {
                    uint64_t v83 = *(void *)(a1 + 120);
                    *(_DWORD *)(a1 + 6476) = 1;
                    *(void *)(a1 + 128) = *(void *)(a1 + 5512);
                    *(void *)(a1 + 5512) = v83;
                    uint64_t v84 = (unsigned int **)(a1 + 5456);
                    uint64_t v85 = 1LL;
                    if (!*(void *)(a1 + 5456))
                    {
                      uint64_t v85 = v95;
                      uint64_t v84 = (unsigned int **)v37;
                    }

                    unsigned int v86 = qword_1000FDCC0;
                    if (qword_1000FDCC0)
                    {
                      unsigned int v87 = *(_DWORD *)(qword_1000FDCC0 + 1448);
                      unsigned int v88 = *(_DWORD *)(qword_1000FDCC0 + 1764);
                      unsigned int v86 = *(_DWORD *)(qword_1000FDCC0 + 1652);
                    }

                    else
                    {
                      unsigned int v87 = 0;
                      unsigned int v88 = 0;
                    }

                    int v82 = sub_10003927C( v83,  *(unsigned int *)(a1 + 776),  (uint64_t)v101,  v85,  v84,  11LL,  v76,  v87,  __SPAIR64__(v88, v86));
                  }

                  if (v82)
                  {
                    if (!*(_DWORD *)(a1 + 5672)) {
                      int v98 = sub_100038D14(*(void *)(a1 + 5512));
                    }
                    sub_1000CB038(v37, v89);
                    uint64_t v22 = a2;
                    if (v98) {
                      goto LABEL_59;
                    }
                  }

                  else
                  {
                    sub_1000CB038(v37, v89);
                  }

      int v101 = v155;
      if (!v171) {
        int v101 = 0;
      }
      if (v101 != 1 || v61) {
        goto LABEL_213;
      }
      uint64_t v102 = 0LL;
      while (1)
      {
        uint64_t v103 = CFArrayGetValueAtIndex(v19, v102);
        int v156 = (CFArrayRef)v102;
        if (*((_BYTE *)v103 + 41))
        {
          if (a9 && (int v104 = (const __CFArray *)CFDictionaryGetValue(a9, v103)) != 0LL) {
            MutableCopy = CFArrayCreateMutableCopy(v16, 0LL, v104);
          }
          else {
            MutableCopy = CFArrayCreateMutable(v16, 0LL, 0LL);
          }
          __int16 v106 = MutableCopy;
          int v107 = CFDictionaryGetValue(a8, v103);
          CFArrayAppendValue(v106, v107);
          int v108 = v106;
        }

        else
        {
          int v108 = CFArrayCreateMutable(v16, 0LL, 0LL);
          __int16 v106 = CFArrayCreateMutable(v16, 0LL, 0LL);
          if (!*((_BYTE *)v103 + 41))
          {
            uint64_t v109 = (const void *)*((void *)v103 + 6);
            CFRetain(v109);
            if (v109)
            {
              uint64_t v110 = CFArrayGetCount((CFArrayRef)v109);
              if (v110 >= 1)
              {
                char v111 = v110;
                for (k = 0LL; k != v111; ++k)
                {
                  uint64_t v113 = (CFArrayRef *)CFArrayGetValueAtIndex((CFArrayRef)v109, k);
                  int v114 = CFArrayGetCount(v113[2]);
                  if (v114 >= 1)
                  {
                    int v115 = CFArrayGetValueAtIndex(v113[2], v114 - 1);
                    uint64_t v116 = CFDictionaryGetValue(a8, v115);
                    if (v116) {
                      CFArrayAppendValue(v108, v116);
                    }
                    if (a9)
                    {
                      __int128 v117 = (const __CFArray *)CFDictionaryGetValue(a9, v115);
                      if (v117)
                      {
                        uint64_t v118 = v117;
                        v177.length = CFArrayGetCount(v117);
                        v177.location = 0LL;
                        CFArrayAppendArray(v108, v118, v177);
                      }
                    }

                    uint64_t v119 = CFArrayGetValueAtIndex(v113[2], 0LL);
                    uint64_t v120 = CFDictionaryGetValue(a8, v119);
                    if (v120) {
                      CFArrayAppendValue(v106, v120);
                    }
                    if (a9)
                    {
                      uint64_t v121 = (const __CFArray *)CFDictionaryGetValue(a9, v119);
                      if (v121)
                      {
                        __int128 v122 = v121;
                        v178.length = CFArrayGetCount(v121);
                        v178.location = 0LL;
                        CFArrayAppendArray(v106, v122, v178);
                      }
                    }
                  }
                }
              }

              CFRelease(v109);
            }
          }
        }

        uint64_t v123 = CFArrayGetCount(v108);
        uint64_t v124 = CFArrayGetCount(v106);
        v165 = v123;
        if (v123 < 1)
        {
          uint64_t v61 = 0;
          if (!v108) {
            goto LABEL_202;
          }
        }

        else
        {
          v125 = v124;
          uint64_t v61 = 0;
          uint64_t v126 = 0LL;
          do
          {
            if (v125 >= 1)
            {
              for (m = 0LL; m != v125; ++m)
              {
                unsigned int v128 = (char *)CFArrayGetValueAtIndex(v108, v126);
                v129 = (void *)CFArrayGetValueAtIndex(v106, m);
                v130 = a6;
                if (a6)
                {
                  v130 = (void *)CFDictionaryGetValue(a6, v129);
                  uint64_t v131 = v130;
                }

                else
                {
                  uint64_t v131 = 0;
                }

                unsigned int v132 = (os_log_s *)VSGetLogDefault(v130);
                if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)newValues = 136315650;
                  *(void *)&newValues[4] = v128;
                  *(_WORD *)&newValues[12] = 2080;
                  *(void *)&newValues[14] = v129;
                  *(_WORD *)&newValues[22] = 1024;
                  v175[0] = v131;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEBUG,  "%s -> %s (%d)\n",  newValues,  0x1Cu);
                }

                uint64_t v133 = sub_100045674(a1, v172, v128, (char *)v129, v131, &v171);
                else {
                  uint64_t v61 = 1;
                }
                if (v61)
                {
                  uint64_t v134 = (os_log_s *)VSGetLogDefault(v133);
                  if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)newValues = 67109890;
                    *(_DWORD *)&newValues[4] = v61;
                    *(_WORD *)&newValues[8] = 2080;
                    *(void *)&newValues[10] = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
                    *(_WORD *)&newValues[18] = 1024;
                    *(_DWORD *)&newValues[20] = 956;
                    LOWORD(v175[0]) = 2080;
                    *(void *)((char *)v175 + 2) = "couldn't add modified class transition to constraint";
                    _os_log_error_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_ERROR,  "Error %d at %s:%d (%s)\n",  newValues,  0x22u);
                  }
                }
              }
            }

            ++v126;
          }

          while (v126 != v165);
          if (!v108) {
            goto LABEL_202;
          }
        }

        CFRelease(v108);
LABEL_202:
        uint64_t v19 = v151;
        uint64_t v16 = kCFAllocatorDefault;
        if (v108 != v106) {
          CFRelease(v106);
        }
        uint64_t v102 = (CFIndex)v156 + 1;
      }
    }
  }

  else
  {
    v146 = 0LL;
    uint64_t v148 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    int v144 = 0LL;
    theSet = 0LL;
    uint64_t v138 = Count;
    while (2)
    {
      v163 = CFArrayGetCount(Mutable);
      uint64_t v139 = v21;
      uint64_t v22 = (CFArrayRef *)CFArrayGetValueAtIndex(theArraya, v21);
      uint64_t v23 = CFArrayGetCount(v22[2]);
      if (v20) {
        CFArrayRemoveAllValues(v20);
      }
      CFRetain(v22);
      while (1)
      {
        uint64_t v149 = CFArrayCreateMutable(v16, 0LL, 0LL);
        if (v23 >= 1)
        {
          uint64_t v24 = 0LL;
          while (1)
          {
            int v25 = sub_1000E9724((uint64_t)v22, v24, &v173);
            if (v173)
            {
              uint64_t v26 = theSet;
              if (!v19)
              {
                uint64_t v19 = CFArrayCreateMutable(v16, 0LL, &kCFTypeArrayCallBacks);
                uint64_t v26 = CFSetCreateMutable(v16, 0LL, &kCFTypeSetCallBacks);
              }

              theSet = v26;
              if (!CFSetContainsValue(v26, v25))
              {
                CFArrayAppendValue(v19, v25);
                CFSetAddValue(theSet, v25);
              }

              if (v173 == 2)
              {
                uint64_t v27 = v24;
                uint64_t v28 = (const void *)sub_1000E9598(v16, (uint64_t)v22, v24, 0LL);
                if (!v20) {
                  uint64_t v20 = CFArrayCreateMutable(v16, 0LL, &kCFTypeArrayCallBacks);
                }
                CFArrayAppendValue(v20, v28);
                CFRelease(v28);
                uint64_t v24 = v27;
              }
            }

            if (!*((_BYTE *)v25 + 41))
            {
              uint64_t v166 = v24;
              uint64_t v29 = v148;
              if (!v148) {
                uint64_t v29 = CFSetCreateMutable(v16, 0LL, &kCFTypeSetCallBacks);
              }
              int v30 = v29;
              uint64_t v148 = v29;
              if (!CFSetContainsValue(v29, v25))
              {
                CFSetAddValue(v30, v25);
                uint64_t v31 = v146;
                if (!v146) {
                  uint64_t v31 = CFArrayCreateMutable(v16, 0LL, &kCFTypeArrayCallBacks);
                }
                v146 = v31;
                CFArrayAppendValue(v31, v25);
              }

              uint64_t v24 = v166;
              if (!*((_BYTE *)v25 + 41))
              {
                uint64_t v32 = (const void *)*((void *)v25 + 6);
                CFRetain(v32);
                if (v32)
                {
                  uint64_t v158 = v23;
                  cf = v22;
                  uint64_t v153 = CFArrayGetCount((CFArrayRef)v32);
                  if (v153 >= 1)
                  {
                    for (n = 0LL; n != v153; ++n)
                    {
                      int v34 = (CFTypeRef *)CFArrayGetValueAtIndex((CFArrayRef)v32, n);
                      CFRetain(v34[2]);
                      int v35 = (const __CFArray *)v34[2];
                      int v36 = CFArrayGetCount(v35);
                      if (v36 >= 1)
                      {
                        uint64_t v37 = v36;
                        uint64_t v38 = CFArrayGetValueAtIndex((CFArrayRef)v34[2], 0LL);
                        uint64_t v39 = (void *)sub_1000E9598(kCFAllocatorDefault, (uint64_t)cf, v166, v35);
                        if (n)
                        {
                          if (!v20) {
                            uint64_t v20 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0LL, theArraya);
                          }
                          CFArrayAppendValue(v20, v39);
                          CFRelease(v39);
                        }

                        else
                        {
                          CFRelease(cf);
                          uint64_t v158 = v158 + v37 - 1;
                          cf = (CFArrayRef *)v39;
                          int v25 = v38;
                        }
                      }

                      CFRelease(v35);
                    }
                  }

                  CFRelease(v32);
                  uint64_t v16 = kCFAllocatorDefault;
                  uint64_t v22 = cf;
                  uint64_t v23 = v158;
                  uint64_t v24 = v166;
                }
              }
            }

            uint64_t v40 = CFDictionaryGetValue(a8, v25);
            *(void *)newValues = v40;
            if (!v40) {
              break;
            }
            CFArrayAppendValue(v149, v40);
            if (++v24 >= v23) {
              goto LABEL_40;
            }
          }

          CFRelease(v149);
          CFRelease(v22);
          CFRelease(Mutable);
          Mutable = 0LL;
          uint64_t v15 = a9;
          goto LABEL_63;
        }

LABEL_178:
                  *(void *)(a1 + 5512) = 0LL;
                  int v13 = 4;
                  goto LABEL_108;
              }

              *(void *)(a1 + 5512) = v73;
              uint64_t v75 = v73;
              goto LABEL_155;
            }

            uint64_t v68 = 0LL;
            while (sub_1000267E4(v37[v68]))
            {
              if (++v68 >= v95) {
                goto LABEL_133;
              }
            }
          }

          BOOL v66 = 0;
          goto LABEL_134;
        }

        *(void *)(a1 + 5512) = 0LL;
      }
    }

    int v13 = 7;
    goto LABEL_108;
  }

  uint64_t v94 = sub_1000C0BA8(0LL);
  uint64_t v93 = sub_1000CAEC8(0LL);
  uint64_t v90 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v91 = sub_1000CF8F8(0LL, 0LL, &v92);
  nullsub_1(v91);
LABEL_8:
  unsigned int v100 = 1;
LABEL_9:
  sub_1000504B4(v100);
  sub_1000CF8F8(v91, v92, 0LL);
  sub_1000BEAB0(v90);
  sub_1000CAEC8(v93);
  sub_1000C0BA8(v94);
  return v100;
}

uint64_t sub_10004B084(uint64_t a1, int a2)
{
  unsigned int v27 = 2;
  if (*(_DWORD *)(a1 + 96)) {
    return 0LL;
  }
  if (!*(_DWORD *)(a1 + 6448))
  {
    uint64_t v18 = *(void *)(a1 + 104);
    if (v18)
    {
      sub_10003991C(v18);
      sub_10003AAF8(*(void *)(a1 + 104));
    }

    uint64_t v19 = *(void *)(a1 + 112);
    if (v19)
    {
      sub_10003991C(v19);
      sub_10003AAF8(*(void *)(a1 + 112));
    }

    return 0LL;
  }

  int v26 = 0;
  uint64_t v6 = *(void *)(a1 + 6424);
  int v7 = sub_100047458(a1, v6, &v26);
  if (!*(_DWORD *)(a1 + 6448))
  {
    uint64_t v2 = 0LL;
    uint64_t v14 = (uint64_t *)(a1 + 5512);
    if (!*(void *)(a1 + 5512)) {
      goto LABEL_52;
    }
LABEL_46:
    if (!*(_DWORD *)(a1 + 5672) && *(_DWORD *)(a1 + 756) != 6)
    {
      else {
        uint64_t v22 = 0LL;
      }
      sub_100039820(*(void *)(a1 + 5512), v22);
    }

    goto LABEL_52;
  }

  int v13 = v7;
  if (*(_DWORD *)(a1 + 756) == 6) {
    unsigned int v27 = 0;
  }
  uint64_t v14 = (uint64_t *)(a1 + 5512);
  uint64_t v15 = *(void *)(a1 + 5512);
  if (!v15)
  {
    uint64_t v2 = 0LL;
    goto LABEL_52;
  }

  if (*(_DWORD *)(a1 + 5672))
  {
    unsigned int v27 = 2;
    goto LABEL_11;
  }

  switch(sub_10003982C(v15))
  {
    case 0u:
    case 3u:
      goto LABEL_32;
    case 1u:
      if (a2) {
        goto LABEL_31;
      }
      break;
    case 2u:
      if (a2) {
        goto LABEL_31;
      }
      goto LABEL_32;
    default:
      break;
  }

  if (v27)
  {
LABEL_11:
    while (!sub_1000CF924())
    {
      uint64_t v16 = sub_10004B3AC(a1, (int *)&v27);
      if ((_DWORD)v16)
      {
        uint64_t v2 = v16;
        goto LABEL_33;
      }

      if (v27 <= 3 && v27 != 2) {
        goto LABEL_17;
      }
    }

uint64_t sub_10004B3AC(uint64_t a1, int *a2)
{
  int v38 = 0;
  int v36 = 0;
  int v37 = 0;
  unsigned __int16 v35 = 0;
  int v34 = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v31 = 0LL;
  if (a1)
  {
    uint64_t v33 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v32 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v29 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    int v30 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v31);
    nullsub_1(v30);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v6 = (int *)sub_1000BE9FC();
    if (setjmp(v6))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      uint64_t v5 = 1LL;
      goto LABEL_12;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      uint64_t v5 = 1LL;
      goto LABEL_11;
    }

    if (!a2)
    {
LABEL_8:
      uint64_t v5 = 4LL;
LABEL_11:
      sub_1000BEA60();
      goto LABEL_12;
    }

    if (!*(_DWORD *)(a1 + 6448))
    {
      *a2 = 0;
      uint64_t v5 = 7LL;
      goto LABEL_11;
    }

    *a2 = 2;
    uint64_t v7 = sub_1000484DC(a1, &v36, &v38, &v37, &v34);
    uint64_t v8 = v7;
    *(void *)(a1 + 6560) = v7;
    *(_DWORD *)(a1 + 6568) = v36;
    if (*(_DWORD *)(a1 + 5672))
    {
      uint64_t v9 = sub_10004182C(a1, v7, v34, a2);
      if (*a2 == 2 && !sub_100048740(a1) && *(_DWORD *)(a1 + 348)) {
        *a2 = 3;
      }
LABEL_75:
      if (*(_DWORD *)(a1 + 756) != 6) {
        sub_10004BFF0(a1);
      }
      uint64_t v5 = v9;
      goto LABEL_11;
    }

    if (v7)
    {
      sub_10004715C(a1, 112);
      if (*(_DWORD *)(a1 + 6468)) {
        sub_100011754(*(void *)(a1 + 16), v8, v36);
      }
      if (*(_DWORD *)(a1 + 756) == 6)
      {
        if (!*(_DWORD *)(a1 + 640))
        {
LABEL_37:
          int v10 = 0;
          goto LABEL_52;
        }

uint64_t sub_10004B9DC( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 4LL;
  }
  if (!*(_DWORD *)(a1 + 5500)) {
    return 7LL;
  }
  uint64_t v10 = *(void *)(a1 + 5512);
  if (!v10)
  {
    uint64_t result = 18LL;
    goto LABEL_71;
  }

  unsigned int v11 = *(_DWORD *)(a1 + 756);
  BOOL v12 = v11 > 9;
  int v13 = (1 << v11) & 0x340;
  if (v12 || v13 == 0)
  {
    unsigned int v16 = a2;
    if (!*(void *)(a1 + 104) || v10 == *(void *)(a1 + 112)) {
      uint64_t v17 = (unsigned int **)(a1 + 808);
    }
    else {
      uint64_t v17 = (unsigned int **)(a1 + 800);
    }
    uint64_t v18 = *v17;
    if ((*v17)[1] != -1 && !v18[22] && v18[23] == 0x7FFFFFFF)
    {
LABEL_70:
      uint64_t result = 0LL;
      LODWORD(v10) = v18[1];
      goto LABEL_71;
    }

    if (qword_1000FDCC0
      && *(_DWORD *)(qword_1000FDCC0 + 1904)
      && (int v46 = 0, sub_100047458(a1, a2, &v46) == 1))
    {
      uint64_t v19 = *(void *)(a1 + 712);
      uint64_t v20 = *(unsigned int *)(v19 + 24LL * v46 + 4);
      if ((int)v20 <= 0)
      {
        uint64_t v23 = 0LL;
        *((void *)v18 + 11) = 0x7FFFFFFF00000000LL;
        uint64_t v25 = *(unsigned int *)(a1 + 1320);
LABEL_28:
        if (*(void *)(a1 + 5456))
        {
          uint64_t v26 = (void *)sub_1000CAF58(8 * v25 + 8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          for (uint64_t i = 0LL; i != v25; ++i)
            v26[i] = sub_10002F660(*(void *)(a1 + 72), *(_DWORD *)(a1 + 1324 + 4 * i));
          goto LABEL_34;
        }

uint64_t sub_10004BE18(uint64_t a1, int a2)
{
  unsigned int v12 = 0;
  uint64_t v11 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v9 = 0LL;
  if (a1)
  {
    uint64_t v11 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v10 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v7 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v8 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v9);
    nullsub_1(v8);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v5 = (int *)sub_1000BE9FC();
    if (!setjmp(v5))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v6 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v6 = 1;
      }

      else
      {
        sub_10004715C(a1, 82);
        unsigned int v12 = sub_10004B084(a1, a2);
        int v6 = v12;
      }

      unsigned int v12 = v6;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v11 = sub_1000C0BA8(0LL);
    uint64_t v10 = sub_1000CAEC8(0LL);
    uint64_t v7 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v8 = sub_1000CF8F8(0LL, 0LL, &v9);
    nullsub_1(v8);
  }

  unsigned int v12 = 1;
LABEL_9:
  sub_1000504B4(v12);
  sub_1000CF8F8(v8, v9, 0LL);
  sub_1000BEAB0(v7);
  sub_1000CAEC8(v10);
  sub_1000C0BA8(v11);
  return v12;
}

uint64_t sub_10004BFF0(uint64_t result)
{
  if (!*(_DWORD *)(result + 6448)) {
    return result;
  }
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 756) == 6) {
    return result;
  }
  uint64_t v2 = *(unsigned int *)(result + 5448);
  int v3 = *(_DWORD *)(result + 308);
  uint64_t v4 = *(int32x4_t **)(result + 5432);
  BOOL v5 = *(_DWORD *)(result + 5672) || v3 == 0;
  BOOL v6 = v5 || v4 == 0LL;
  if (v2 < 8)
  {
    uint64_t v8 = 0LL;
    int v9 = 0;
    goto LABEL_20;
  }

  uint64_t v8 = v2 & 0xFFFFFFF8;
  uint64_t v10 = v4 + 1;
  int8x16_t v11 = 0uLL;
  uint64_t v12 = v8;
  int8x16_t v13 = 0uLL;
  do
  {
    int8x16_t v11 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v11, (int8x16_t)vceqzq_s32(v10[-1])), vtstq_s32(v10[-1], v10[-1]));
    int8x16_t v13 = (int8x16_t)vsubq_s32((int32x4_t)vandq_s8(v13, (int8x16_t)vceqzq_s32(*v10)), vtstq_s32(*v10, *v10));
    v10 += 2;
    v12 -= 8LL;
  }

  while (v12);
  int32x4_t v14 = (int32x4_t)vorrq_s8(v11, v13);
  int v9 = vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v14, v14))) & 1;
  if (v8 != v2)
  {
LABEL_20:
    uint64_t v15 = &v4->i32[v8];
    uint64_t v16 = v2 - v8;
    do
    {
      if (*v15++) {
        int v9 = 1;
      }
      --v16;
    }

    while (v16);
  }

  if (v9)
  {
    uint64_t v18 = *(_DWORD **)(result + 440);
    sub_1000B27A8(v18);
    else {
      int v19 = 0;
    }
    return sub_1000B2868((uint64_t)v18, v19);
  }

  return result;
}

uint64_t sub_10004C134( uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  unsigned int v24 = 0;
  uint64_t v23 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v21 = 0LL;
  if (a1)
  {
    uint64_t v23 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v22 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v19 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v20 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v21);
    nullsub_1(v20);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v17 = (int *)sub_1000BE9FC();
    if (!setjmp(v17))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v18 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v18 = 1;
      }

      else
      {
        unsigned int v24 = sub_10004C344(a1, a2, a3, a4, a5, a6, a7, a8, 0LL, 0LL, 0LL, 0LL);
        int v18 = v24;
      }

      unsigned int v24 = v18;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v23 = sub_1000C0BA8(0LL);
    uint64_t v22 = sub_1000CAEC8(0LL);
    int v19 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v20 = sub_1000CF8F8(0LL, 0LL, &v21);
    nullsub_1(v20);
  }

  unsigned int v24 = 1;
LABEL_9:
  sub_1000504B4(v24);
  sub_1000CF8F8(v20, v21, 0LL);
  sub_1000BEAB0(v19);
  sub_1000CAEC8(v22);
  sub_1000C0BA8(v23);
  return v24;
}

uint64_t sub_10004C344( uint64_t a1, unsigned int a2, int a3, uint64_t a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v33 = 0;
  uint64_t result = 4LL;
  if (!a5 || !a6 || !a7) {
    return result;
  }
  if (!*(_DWORD *)(a1 + 5500)) {
    return 7LL;
  }
  if (*(_DWORD *)(a1 + 756) == 6)
  {
    int v18 = 0;
    uint64_t result = 0LL;
    *a5 = -1;
    *a6 = 0;
    *a7 = 0;
    if (a8)
    {
LABEL_7:
      uint64_t result = 0LL;
      *a8 = v18;
    }
  }

  else
  {
    if (*(_DWORD *)(a1 + 6448)) {
      return 18LL;
    }
    int v19 = a4;
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      uint64_t v22 = (uint64_t *)(a1 + 808);
    }
    else {
      uint64_t v22 = (uint64_t *)(a1 + 800);
    }
    int v32 = 0;
    uint64_t v23 = *v22;
    *a5 = -1;
    *a6 = 0;
    int v24 = sub_10004B9DC(a1, *(unsigned int *)(a1 + 6424), &v32, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
    uint64_t result = 4LL;
    if ((a2 & 0x80000000) != 0 || v24) {
      return result;
    }
    *a7 = *(_DWORD *)(*(void *)(v23 + 8) + 4LL * a2);
    uint64_t v25 = *(int **)(v23 + 40);
    int v26 = 0;
    if (a2)
    {
      unint64_t v27 = (unint64_t)&v25[*(int *)(v23 + 32)];
      do
      {
        ++v26;
        uint64_t v28 = v25;
        while (1)
        {
          int v29 = *v28++;
          if (v29 == -1) {
            break;
          }
          ++v26;
          uint64_t v25 = v28;
          if ((unint64_t)v28 >= v27)
          {
            int v26 = 0;
            uint64_t v25 = 0LL;
            goto LABEL_26;
          }
        }

        ++v25;
        --a2;
      }

      while (a2);
    }

uint64_t sub_10004C55C( uint64_t a1, signed int a2, int a3, _DWORD *a4, int *a5, _DWORD *a6, _DWORD *a7, uint64_t a8, _DWORD *a9)
{
  unsigned int v82 = 0;
  int v80 = 0;
  int v81 = -1;
  uint64_t v79 = 0LL;
  uint64_t v78 = 0LL;
  uint64_t v77 = 0LL;
  if (a1)
  {
    uint64_t v79 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v78 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v75 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v76 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v77);
    nullsub_1(v76);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    int v18 = (int *)sub_1000BE9FC();
    if (setjmp(v18))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      int v26 = 4;
LABEL_51:
      unsigned int v82 = v26;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      int v26 = 1;
      goto LABEL_51;
    }

    if (a9) {
      *a9 = -1;
    }
    *a4 = -1;
    *a5 = 0;
    unint64_t v72 = sub_1000CAF58(a3, v19, v20, v21, v22, v23, v24, v25);
    uint64_t v71 = (void *)sub_1000CAF58(4LL * a3, v27, v28, v29, v30, v31, v32, v33);
    unint64_t v41 = sub_1000CAF58(4LL * a3, v34, v35, v36, v37, v38, v39, v40);
    uint64_t v73 = 4LL * a3;
    int v49 = (_DWORD *)sub_1000CAF58(v73, v42, v43, v44, v45, v46, v47, v48);
    uint64_t v70 = (void *)v41;
    unsigned int v82 = sub_10004C344(a1, a2, a3, 0LL, v49, &v80, a6, a7, &v81, v72, (uint64_t)v71, v41);
    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      uint64_t v50 = (uint64_t *)(a1 + 808);
    }
    else {
      uint64_t v50 = (uint64_t *)(a1 + 800);
    }
    uint64_t v51 = (void *)v72;
    uint64_t v74 = v49;
    uint64_t v52 = *v50;
    if (!v82)
    {
      uint64_t v58 = *(void *)(*(void *)(v52 + 24) + 8LL * a2);
      if (v58)
      {
        if (sub_100043088(v58))
        {
          unsigned int v82 = 7;
        }

        else
        {
          if (!a9) {
            goto LABEL_50;
          }
          *a9 = sub_100042C00(a1, *(void *)(*(void *)(v52 + 24) + 8LL * a2));
        }
      }
    }

    if (!a9
      || v82
      || v80 < 1
      || *a9 == -1
      || sub_100025C94(*(unsigned int **)(*(void *)(v52 + 24) + 8LL * a2)) != 3)
    {
      goto LABEL_50;
    }

    int v53 = v80;
    if (v80 < 1)
    {
      int v57 = 0;
    }

    else
    {
      uint64_t v54 = 0LL;
      int v55 = 0;
      do
      {
        if (v54 + 1 == v53 || *(_BYTE *)(v72 + 1 + v54))
        {
          *(void *)(a8 + 8LL * v55) = sub_100031858(*(void *)(a1 + 80), *((_DWORD *)v71 + v54));
          a4[v55++] = *((_DWORD *)v70 + v54);
          int v53 = v80;
        }

        BOOL v56 = ++v54 < v53;
        int v57 = v55;
      }

      while (v56);
    }

    *a5 = v57;
    uint64_t v51 = (void *)v72;
    if (v57 >= a3) {
      goto LABEL_50;
    }
    unint64_t v59 = a3 - (uint64_t)v57;
    if (v59 >= 0xC)
    {
      unint64_t v61 = a8 + 8LL * v57;
      unint64_t v62 = (unint64_t)&a4[v57];
      if (v61 >= (unint64_t)&a4[(unint64_t)v73 / 4] || (unint64_t v60 = v57, v62 >= a8 + 8LL * a3))
      {
        unint64_t v60 = (v59 & 0xFFFFFFFFFFFFFFF8LL) + v57;
        uint64_t v63 = (_OWORD *)(v62 + 16);
        *(void *)&__int128 v64 = -1LL;
        *((void *)&v64 + 1) = -1LL;
        uint64_t v65 = (_OWORD *)(v61 + 32);
        unint64_t v66 = v59 & 0xFFFFFFFFFFFFFFF8LL;
        do
        {
          *(v65 - 2) = 0uLL;
          *(v65 - 1) = 0uLL;
          *uint64_t v65 = 0uLL;
          v65[1] = 0uLL;
          v65 += 4;
          *(v63 - 1) = v64;
          *uint64_t v63 = v64;
          v63 += 2;
          v66 -= 8LL;
        }

        while (v66);
        if (v59 == (v59 & 0xFFFFFFFFFFFFFFF8LL)) {
          goto LABEL_50;
        }
      }
    }

    else
    {
      unint64_t v60 = v57;
    }

    BOOL v67 = (void *)(a8 + 8 * v60);
    uint64_t v68 = &a4[v60];
    unint64_t v69 = a3 - v60;
    do
    {
      *v67++ = 0LL;
      *v68++ = -1;
      --v69;
    }

    while (v69);
LABEL_50:
    sub_1000CB038(v74, v73);
    sub_1000CB038(v70, v73);
    sub_1000CB038(v71, v73);
    sub_1000CB038(v51, a3);
    int v26 = v82;
    goto LABEL_51;
  }

  uint64_t v79 = sub_1000C0BA8(0LL);
  uint64_t v78 = sub_1000CAEC8(0LL);
  uint64_t v75 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v76 = sub_1000CF8F8(0LL, 0LL, &v77);
  nullsub_1(v76);
LABEL_8:
  unsigned int v82 = 1;
LABEL_9:
  sub_1000504B4(v82);
  sub_1000CF8F8(v76, v77, 0LL);
  sub_1000BEAB0(v75);
  sub_1000CAEC8(v78);
  sub_1000C0BA8(v79);
  return v82;
}

uint64_t sub_10004CA44(unint64_t a1, int a2)
{
  unsigned int v20 = 0;
  int v19 = 0;
  uint64_t v18 = 0LL;
  uint64_t v17 = 0LL;
  uint64_t v16 = 0LL;
  if (a1)
  {
    uint64_t v18 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v17 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int32x4_t v14 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v15 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v16);
    nullsub_1(v15);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    BOOL v5 = (int *)sub_1000BE9FC();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v11 = 1;
        goto LABEL_14;
      }

      if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
        uint64_t v12 = (int **)(a1 + 808);
      }
      else {
        uint64_t v12 = (int **)(a1 + 800);
      }
      int8x16_t v13 = *v12;
      unsigned int v20 = sub_10004B9DC(a1, *(unsigned int *)(a1 + 6424), &v19, v6, v7, v8, v9, v10);
      if ((a2 & 0x80000000) == 0 && !v20 && v13[1] > a2)
      {
        sub_10004CC6C(a1, v13, a2, 1);
        int v11 = v20;
        goto LABEL_14;
      }
    }

    int v11 = 4;
LABEL_14:
    unsigned int v20 = v11;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v18 = sub_1000C0BA8(0LL);
  uint64_t v17 = sub_1000CAEC8(0LL);
  int32x4_t v14 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v15 = sub_1000CF8F8(0LL, 0LL, &v16);
  nullsub_1(v15);
LABEL_8:
  unsigned int v20 = 1;
LABEL_9:
  sub_1000504B4(v20);
  sub_1000CF8F8(v15, v16, 0LL);
  sub_1000BEAB0(v14);
  sub_1000CAEC8(v17);
  sub_1000C0BA8(v18);
  return v20;
}

unint64_t sub_10004CC6C(unint64_t result, int *a2, int a3, int a4)
{
  unint64_t v6 = result;
  int v7 = a2[1];
  if (v7 - 1 == a3)
  {
    LODWORD(v8) = v7 - 1;
    a2[1] = v8;
    if ((_DWORD)v8) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v9 = (int *)*((void *)a2 + 5);
    uint64_t v10 = a2[8];
    int v11 = v9;
    unint64_t v37 = result;
    int v35 = a3 + 1;
    int v36 = a4;
    if (a3 == -1) {
      goto LABEL_13;
    }
    int v11 = (int *)*((void *)a2 + 5);
    int v12 = a3 + 1;
    do
    {
      int8x16_t v13 = v11;
      while (1)
      {
        int v14 = *v13++;
        if (v14 == -1) {
          break;
        }
        int v11 = v13;
        if (v13 >= &v9[v10])
        {
          int v11 = 0LL;
          goto LABEL_12;
        }
      }

      ++v11;
      --v12;
    }

    while (v12);
LABEL_12:
    if (a3)
    {
LABEL_13:
      uint64_t v15 = (int *)*((void *)a2 + 5);
      int v16 = a3;
      do
      {
        uint64_t v17 = v15;
        while (1)
        {
          int v18 = *v17++;
          if (v18 == -1) {
            break;
          }
          uint64_t v15 = v17;
          if (v17 >= &v9[v10])
          {
            uint64_t v15 = 0LL;
            goto LABEL_19;
          }
        }

        ++v15;
        --v16;
      }

      while (v16);
    }

    else
    {
      uint64_t v15 = (int *)*((void *)a2 + 5);
    }

uint64_t sub_10004CFE0(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v20 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v18 = 0LL;
  if (a1)
  {
    uint64_t v20 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v19 = sub_1000CAEC8(*(void *)(a1 + 6488));
    int v16 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v17 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v18);
    nullsub_1(v17);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v8 = (int *)sub_1000BE9FC();
    if (setjmp(v8))
    {
      uint64_t v7 = 1LL;
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_12;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        uint64_t v14 = 1LL;
        goto LABEL_11;
      }

      if (a2)
      {
        if (*(_DWORD *)(a1 + 6448))
        {
          uint64_t v14 = 18LL;
        }

        else
        {
          uint64_t v14 = sub_10004B9DC(a1, *(unsigned int *)(a1 + 6424), a2, v9, v10, v11, v12, v13);
          if (!(_DWORD)v14)
          {
            if (*(_DWORD *)(a1 + 756) != 6)
            {
              if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
                uint64_t v15 = a1 + 808;
              }
              else {
                uint64_t v15 = a1 + 800;
              }
              if (a3) {
                *a3 = *(_DWORD *)(*(void *)v15 + 140LL) & ~(*(int *)(*(void *)v15 + 140LL) >> 31);
              }
            }

            uint64_t v14 = 0LL;
          }
        }

        goto LABEL_11;
      }
    }

    uint64_t v14 = 4LL;
LABEL_11:
    uint64_t v7 = v14;
    sub_1000BEA60();
    goto LABEL_12;
  }

  uint64_t v20 = sub_1000C0BA8(0LL);
  uint64_t v19 = sub_1000CAEC8(0LL);
  int v16 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v17 = sub_1000CF8F8(0LL, 0LL, &v18);
  nullsub_1(v17);
  uint64_t v7 = 1LL;
LABEL_12:
  sub_1000504B4(v7);
  sub_1000CF8F8(v17, v18, 0LL);
  sub_1000BEAB0(v16);
  sub_1000CAEC8(v19);
  sub_1000C0BA8(v20);
  return v7;
}

uint64_t sub_10004D20C(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v19 = 0;
  int v18 = 0;
  uint64_t v17 = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v15 = 0LL;
  if (a1)
  {
    uint64_t v17 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v16 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v13 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v14 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v15);
    nullsub_1(v14);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v11 = (int *)sub_1000BE9FC();
    if (!setjmp(v11))
    {
      if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
      {
        int v12 = 4;
      }

      else if (*(_DWORD *)(a1 + 8160))
      {
        int v12 = 1;
      }

      else if (*(_DWORD *)(a1 + 6448))
      {
        int v12 = 18;
      }

      else
      {
        unsigned int v19 = sub_10004C344(a1, a2, a3, 0LL, a4, a5, &v18, 0LL, 0LL, 0LL, 0LL, 0LL);
        int v12 = v19;
      }

      unsigned int v19 = v12;
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v17 = sub_1000C0BA8(0LL);
    uint64_t v16 = sub_1000CAEC8(0LL);
    uint64_t v13 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v14 = sub_1000CF8F8(0LL, 0LL, &v15);
    nullsub_1(v14);
  }

  unsigned int v19 = 1;
LABEL_9:
  sub_1000504B4(v19);
  sub_1000CF8F8(v14, v15, 0LL);
  sub_1000BEAB0(v13);
  sub_1000CAEC8(v16);
  sub_1000C0BA8(v17);
  return v19;
}

uint64_t sub_10004D428( uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  LODWORD(v12) = a2;
  int v14 = sub_1000B324C(*(uint64_t **)(a1 + 8)) + 1;
  int v15 = sub_1000B3288(*(uint64_t **)(a1 + 8)) + 1;
  uint64_t v16 = 2LL * v14;
  uint64_t v24 = (_WORD *)sub_1000CAF58(v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v25 = 2LL * v15;
  int v33 = (_WORD *)sub_1000CAF58(v25, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v54 = v25;
  uint64_t v55 = v16;
  if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
    uint64_t v34 = (uint64_t *)(a1 + 808);
  }
  else {
    uint64_t v34 = (uint64_t *)(a1 + 800);
  }
  uint64_t v35 = *v34;
  uint64_t v36 = *(void *)(*v34 + 40);
  unint64_t v37 = (unsigned int *)(v36 + 4LL * (int)v12);
  if (*(_DWORD *)(*v34 + 32) <= (int)v12)
  {
    int v38 = 0;
    unsigned int v40 = 0;
    goto LABEL_42;
  }

  uint64_t v12 = (int)v12;
  int v57 = a3 - 1;
  if (a4)
  {
    int v38 = 0;
    while (*v37 != -1)
    {
      sub_1000B33F8(*(char **)(a1 + 8), *v37, (uint64_t)v24, v33);
      if (sub_1000CCE40(v24, L"<s>") && sub_1000CCE40(v24, L"<e>"))
      {
        if (v38 >= v57) {
          goto LABEL_75;
        }
        if (a6) {
          *(_BYTE *)(a6 + v38) = *(_BYTE *)(*(void *)(v35 + 64) + v12);
        }
        if (a7) {
          *(_DWORD *)(a7 + 4LL * v38) = *(_DWORD *)(*(void *)(v35 + 48) + 4 * v12);
        }
        if (a8) {
          *(_DWORD *)(a8 + 4LL * v38) = *(_DWORD *)(*(void *)(v35 + 56) + 4 * v12);
        }
        uint64_t v39 = v38 + 1LL;
        *(_DWORD *)(a5 + 4LL * v38) = *v37;
        if (!*(_BYTE *)(*(void *)(v35 + 80) + v12) || v37[1] == -1)
        {
          ++v38;
        }

        else
        {
          if (a6) {
            *(_BYTE *)(a6 + v39) = 0;
          }
          if (a7) {
            *(_DWORD *)(a7 + 4LL * (int)v39) = *(_DWORD *)(a7 + 4LL * v38);
          }
          if (a8) {
            *(_DWORD *)(a8 + 4LL * (int)v39) = *(_DWORD *)(a8 + 4LL * v38);
          }
          v38 += 2;
          *(_DWORD *)(a5 + 4LL * (int)v39) = -2;
        }
      }

      ++v37;
      ++v12;
    }

LABEL_66:
    ++v37;
    v50 += 4LL;
    uint64_t v51 = (unsigned int *)(v36 + v50);
    if (v36 + v50 >= (unint64_t)(*(void *)(v35 + 40) + 4LL * *(int *)(v35 + 32)))
    {
      unsigned int v40 = 0;
      int v38 = a6;
      unint64_t v37 = v51;
      goto LABEL_42;
    }
  }

  if ((int)a6 < v57)
  {
    if (a7) {
      *(_DWORD *)(a7 + 4LL * (int)a6) = *(_DWORD *)(*(void *)(v35 + 48) + v50);
    }
    uint64_t v53 = (int)a6;
    if (a8) {
      *(_DWORD *)(a8 + 4LL * (int)a6) = *(_DWORD *)(*(void *)(v35 + 56) + v50);
    }
    LODWORD(a6) = a6 + 1;
    *(_DWORD *)(a5 + 4 * v53) = *(_DWORD *)(v36 + v50);
    goto LABEL_66;
  }

  unsigned int v40 = 10;
LABEL_80:
  int v38 = a6;
LABEL_42:
  int v41 = a3;
LABEL_43:
  uint64_t v43 = *(void *)(v35 + 40);
  uint64_t v44 = *(int *)(v35 + 32);
  int v45 = v38;
  if ((v38 & 0x80000000) == 0)
  {
    int v45 = v38;
    if (v38 < v41)
    {
      int v45 = v38 + 1;
      *(_DWORD *)(a5 + 4LL * v38) = -1;
    }
  }

  if (a9) {
    *a9 = v45 - 1;
  }
  else {
    uint64_t v47 = 10LL;
  }
  sub_1000CB038(v33, v54);
  sub_1000CB038(v24, v55);
  return v47;
}

      uint64_t v29 = *(char *)(v31 + 4 * v33 + 3);
      goto LABEL_68;
    }

    LODWORD(v45) = -4009;
    goto LABEL_67;
  }

  uint64_t v63 = (uint64_t (*)(void *, __CFString *))a3[8];
  if (!v63) {
    goto LABEL_66;
  }
  LODWORD(v45) = v63(a3, v39);
  if (!(_DWORD)v45)
  {
    CFDictionarySetValue(v24, v39, v40);
    int v57 = (uint64_t)a3;
    uint64_t v58 = v7;
    unint64_t v59 = (uint64_t)v39;
    unint64_t v60 = 0LL;
    goto LABEL_65;
  }

uint64_t sub_10004D938(unint64_t a1, int a2)
{
  unsigned int v197 = 0;
  uint64_t v196 = 0LL;
  uint64_t v195 = 0LL;
  uint64_t v193 = 0LL;
  uint64_t v194 = 0LL;
  v192 = 0LL;
  if (a1)
  {
    uint64_t v196 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v195 = sub_1000CAEC8(*(void *)(a1 + 6488));
    v192 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v193 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v194);
    nullsub_1(v193);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    BOOL v5 = (int *)sub_1000BE9FC();
    if (setjmp(v5))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      int v6 = 4;
LABEL_14:
      unsigned int v197 = v6;
      sub_1000BEA60();
      goto LABEL_9;
    }

    if (*(_DWORD *)(a1 + 8160))
    {
      int v6 = 1;
      goto LABEL_14;
    }

    if (!*(_DWORD *)(a1 + 5500))
    {
      int v6 = 7;
      goto LABEL_14;
    }

    if (*(_DWORD *)(a1 + 6448))
    {
      int v6 = 18;
      goto LABEL_14;
    }

    if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
      unint64_t v7 = a1 + 808;
    }
    else {
      unint64_t v7 = a1 + 800;
    }
    uint64_t v8 = *(void *)v7;
    if (*(int *)(*(void *)v7 + 4LL) <= 0 || a2 <= 0 || !*(void *)(a1 + 112))
    {
LABEL_164:
      int v6 = v197;
      goto LABEL_14;
    }

    if (!sub_100048BB8(a1, -2))
    {
      int v6 = 13;
      goto LABEL_14;
    }

    uint64_t v16 = sub_10003FC28((int *)v8, v9, v10, v11, v12, v13, v14, v15);
    if (!v16)
    {
      int v6 = 2;
      goto LABEL_14;
    }

    uint64_t v24 = (uint64_t)v16;
    uint64_t v25 = *(int **)(a1 + 256);
    if (*(_DWORD *)(v8 + 4) >= a2) {
      int v26 = a2;
    }
    else {
      int v26 = *(_DWORD *)(v8 + 4);
    }
    if (v26 >= 1024) {
      uint64_t v27 = 1024LL;
    }
    else {
      uint64_t v27 = v26;
    }
    int v28 = v27;
    uint64_t v29 = (unsigned int **)sub_1000CAFC0(8LL * (int)v27, v17, v18, v19, v20, v21, v22, v23);
    uint64_t v36 = (uint64_t)v29;
    unint64_t v37 = v29;
    int v186 = v26;
    int v187 = v27;
    uint64_t v189 = 8LL * (int)v27;
    v184 = v25;
    int v185 = v29;
    if (v26 < 1)
    {
      uint64_t v188 = v29;
      if (!*(void *)(a1 + 80))
      {
LABEL_101:
        uint64_t v90 = v27;
LABEL_102:
        uint64_t v104 = *(int *)(a1 + 776);
        if ((_DWORD)v104)
        {
          unint64_t v105 = sub_1000CAF58(2 * v104, v30, v36, v31, v32, v33, v34, v35);
          if (*(int *)(a1 + 776) < 1)
          {
            uint64_t v108 = *(unsigned int *)(a1 + 776);
          }

          else
          {
            uint64_t v106 = 0LL;
            do
            {
              uint64_t v107 = v106;
              *(_WORD *)(v105 + 2 * v106) = sub_1000B3A9C( *(void *)(a1 + 8),  *(_DWORD *)(*(void *)(a1 + 768) + 4 * v106));
              uint64_t v106 = v107 + 1;
            }

            while (v107 + 1 < *(int *)(a1 + 776));
            uint64_t v108 = *(int *)(a1 + 776);
          }
        }

        else
        {
          uint64_t v108 = 0LL;
          unint64_t v105 = 0LL;
        }

        unsigned int v183 = (void *)v105;
        uint64_t v109 = *(void *)(a1 + 112);
        *(void *)(a1 + 5512) = v109;
        uint64_t v110 = *(unsigned int **)(a1 + 808);
        int v111 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          int v111 = *(_DWORD *)(qword_1000FDCC0 + 1764);
        }
        LODWORD(v179) = 0;
        HIDWORD(v179) = v111;
        if (sub_100039BF0(v109, v108, v105, v90, v188, 3LL, 1LL, 1u, v179, v184) == 3)
        {
          v110[1] = 0;
          v110[35] = -1;
        }

        else
        {
          unsigned int v112 = v110[35];
          v110[1] = sub_10003967C( *(void *)(a1 + 5512),  0,  0LL,  *v110,  *((_DWORD **)v110 + 1),  *((void *)v110 + 2),  v110[8],  *((_DWORD **)v110 + 5),  *((void *)v110 + 10),  *((void *)v110 + 6),  *((void *)v110 + 7),  *((void *)v110 + 8),  *((void *)v110 + 9),  *((void *)v110 + 3),  v110 + 35);
          if (v112 == -1) {
            v110[35] = -1;
          }
          v110[34] = sub_100039800(*(void *)(a1 + 5512));
        }

        if (!*(_DWORD *)(a1 + 1320)) {
          goto LABEL_158;
        }
        int v191 = 0;
        unsigned int v113 = (2 * sub_10004E4F4(*((int **)v110 + 5), v110[1], v110[8])) | 1;
        uint64_t v182 = 4LL * v113;
        __int128 v127 = (void *)sub_1000CAF58(v182, v114, v115, v116, v117, v118, v119, v120);
        if ((int)v110[1] >= 1)
        {
          uint64_t v128 = 0LL;
          do
          {
            int v190 = 0;
            v130 = (int *)*((void *)v110 + 5);
            if (v128)
            {
              int v131 = 0;
              unsigned int v132 = (_DWORD *)*((void *)v110 + 5);
              int v133 = v128;
              do
              {
                int v134 = v131 + 1;
                uint64_t v135 = v132;
                while (1)
                {
                  unint64_t v136 = (unint64_t)(v135 + 1);
                  if (*v135 == -1) {
                    break;
                  }
                  ++v135;
                  ++v134;
                  if (v136 >= *((void *)v110 + 5) + 4LL * (int)v110[8])
                  {
                    int v138 = 0;
                    v130 = 0LL;
                    goto LABEL_136;
                  }
                }

                uint64_t v137 = v135 + 1;
                unsigned int v132 = v137;
                int v131 = v134;
                --v133;
              }

              while (v133);
              int v138 = v134;
              v130 = v137;
            }

            else
            {
              int v138 = 0;
            }

LABEL_136:
            uint64_t v139 = v130;
            unsigned int v197 = sub_10004D428(a1, v138, v113, 1, (uint64_t)v127, 0LL, 0LL, 0LL, &v190);
            int v146 = -1;
            unsigned int v147 = 0;
            uint64_t v148 = v139;
            do
            {
              unsigned int v149 = v147;
              int v150 = *v148++;
              int v151 = ++v146;
              ++v147;
            }

            while (v150 != -1);
            uint64_t v152 = (void *)sub_1000CAF58(8LL * v190, 0LL, v140, v141, v142, v143, v144, v145);
            uint64_t v160 = (void *)sub_1000CAF58(v190, v153, v154, v155, v156, v157, v158, v159);
            int v161 = *(_DWORD *)(*((void *)v110 + 7) + 4LL * v138);
            if (v161)
            {
              int v162 = *(_DWORD *)(*((void *)v110 + 7) + 4LL * v138);
              int v163 = 0;
              unsigned int v164 = *(_DWORD **)(v24 + 40);
              do
              {
                int v165 = v163 + 1;
                uint64_t v166 = v164;
                while (1)
                {
                  unint64_t v167 = (unint64_t)(v166 + 1);
                  if (*v166 == -1) {
                    break;
                  }
                  ++v166;
                  ++v165;
                  if (v167 >= *(void *)(v24 + 40) + 4LL * *(int *)(v24 + 32))
                  {
                    int v165 = -1;
                    goto LABEL_147;
                  }
                }

                unsigned int v164 = v166 + 1;
                int v163 = v165;
                --v162;
              }

              while (v162);
            }

            else
            {
              int v165 = 0;
            }

LABEL_147:
            *(void *)(*((void *)v110 + 3) + 8 * v128) = *(void *)(*(void *)(v24 + 24) + 8LL * v161);
            if (v151 >= 1)
            {
              int v168 = v165;
              uint64_t v169 = v138;
              uint64_t v170 = v168;
              uint64_t v171 = v149;
              do
              {
                uint64_t v172 = 4 * v169;
                *(_DWORD *)(*((void *)v110 + 6) + v172) = *(_DWORD *)(*(void *)(v24 + 48) + 4 * v170);
                *(_DWORD *)(*((void *)v110 + 7) + v172) = *(_DWORD *)(*(void *)(v24 + 56) + 4 * v170);
                *(_BYTE *)(*((void *)v110 + 8) + v169++) = *(_BYTE *)(*(void *)(v24 + 64) + v170++);
                --v171;
              }

              while (v171);
            }

            uint64_t v129 = 2LL * v161;
            *(_DWORD *)(*((void *)v110 + 1) + 4 * v128) = *(_DWORD *)(*((void *)v110 + 1) + 4 * v128)
            *(_WORD *)(*((void *)v110 + 2) + 2 * v128) = *(_WORD *)(*(void *)(v24 + 16) + v129);
            sub_1000CB038(v160, v190);
            sub_1000CB038(v152, 8LL * v190);
            ++v128;
          }

          while (v128 < (int)v110[1]);
        }

        sub_10004E580(a1, &v191, v121, v122, v123, v124, v125, v126);
        int v173 = v110[1];
        if (v173 <= 1)
        {
          if (v173 != 1 || !v191) {
            goto LABEL_157;
          }
          int v174 = 100;
        }

        else
        {
          int v174 = sub_100039924( *(void *)(a1 + 5512),  **((_DWORD **)v110 + 1),  *(_DWORD *)(*((void *)v110 + 1) + 4LL));
        }

        v110[35] = v174;
LABEL_157:
        sub_1000CB038(v127, v182);
LABEL_158:
        if (v186 >= 1)
        {
          int v175 = v187 + 1;
          v176 = (uint64_t *)&v185[v187 - 1];
          do
          {
            int v177 = v175;
            v178 = v176;
            sub_100039030(*(void *)(a1 + 5512));
            sub_10002613C(*v178);
            int v175 = v177 - 1;
            v176 = v178 - 1;
          }

          while (v177 - 1 > 1);
        }

        if (v183) {
          sub_1000CB038(v183, 2LL * *(int *)(a1 + 776));
        }
        sub_1000CB038(v188, v189);
        sub_10003FB88(v24);
        goto LABEL_164;
      }

      uint64_t v55 = *(void *)(a1 + 80);
      BOOL v56 = (uint64_t *)(a1 + 80);
      unsigned int v58 = 0;
      unsigned int v57 = 0;
    }

    else
    {
      else {
        uint64_t v38 = v27;
      }
      int v39 = 0;
      unsigned int v40 = 0;
      int v41 = 0;
      do
      {
        unsigned int v42 = v40;
        uint64_t v43 = *(int **)(v8 + 40);
        if (v41)
        {
          uint64_t v44 = *(_DWORD **)(v8 + 40);
          int v45 = v41;
          do
          {
            uint64_t v46 = v44;
            while (1)
            {
              unint64_t v47 = (unint64_t)(v46 + 1);
              if (*v46 == -1) {
                break;
              }
              ++v46;
              if (v47 >= *(void *)(v8 + 40) + 4LL * *(int *)(v8 + 32))
              {
                uint64_t v43 = 0LL;
                goto LABEL_47;
              }
            }

            uint64_t v48 = v46 + 1;
            uint64_t v44 = v48;
            --v45;
          }

          while (v45);
          uint64_t v43 = v48;
        }

LABEL_93:
          uint64_t v99 = 0LL;
          do
          {
            int v100 = *(_DWORD *)(v94 + 4 * v99);
            int v101 = ++v99;
          }

          while (v100 != -1);
          int v102 = qword_1000FDCC0 ? *(_DWORD *)(qword_1000FDCC0 + 4928) : 0;
          uint64_t v103 = sub_10002FF9C(v94, v101 - 1, *(uint64_t **)(a1 + 8), v102);
          v37[v93] = (unsigned int *)v103;
          if (!v103) {
            break;
          }
          ++v93;
          ++v92;
          if (v93 == v91)
          {
            uint64_t v188 = v37;
            goto LABEL_101;
          }
        }

        if ((_DWORD)v93)
        {
          do
            sub_10002613C((uint64_t)v37[(v92-- - 2)]);
          while (v92 > 1);
        }

        sub_1000CB038(v37, v189);
        sub_10003FB88(v24);
        int v6 = 2;
        goto LABEL_14;
      }

      uint64_t v188 = v37;
      uint64_t v55 = *(void *)(a1 + 80);
      BOOL v56 = (uint64_t *)(a1 + 80);
      unsigned int v57 = v54;
      unsigned int v58 = v53;
    }

    uint64_t v181 = v56;
    if (!sub_100031AD4(v55, "\x01SCL", v28, v58, 0, 0, 1))
    {
      sub_1000CB038(v188, v189);
      sub_10003FB88(v24);
      int v6 = 4;
      goto LABEL_14;
    }

    uint64_t v180 = 2LL * v57;
    unint64_t v66 = (__int16 *)sub_1000CAF58(v180, v59, v60, v61, v62, v63, v64, v65);
    if (v186 >= 1)
    {
      int v67 = 0;
      if (v187 <= 1) {
        int v68 = 1;
      }
      else {
        int v68 = v187;
      }
      while (1)
      {
        unint64_t v69 = *(_DWORD **)(v8 + 40);
        if (v67)
        {
          int v70 = v67;
          do
          {
            uint64_t v71 = v69;
            while (1)
            {
              unint64_t v72 = (unint64_t)(v71 + 1);
              if (*v71 == -1) {
                break;
              }
              ++v71;
              if (v72 >= *(void *)(v8 + 40) + 4LL * *(int *)(v8 + 32))
              {
                unint64_t v69 = 0LL;
                goto LABEL_72;
              }
            }

            uint64_t v73 = v71 + 1;
            unint64_t v69 = v73;
            --v70;
          }

          while (v70);
          unint64_t v69 = v73;
        }

      uint64_t v60 = *v19;
      if (v53) {
        goto LABEL_112;
      }
      if (v60) {
        uint64_t v61 = *v60;
      }
      else {
        uint64_t v61 = 0LL;
      }
      int v41 = v161;
      int v68 = sub_10004C134(v61, v161, 1024, 0LL, v189, (_DWORD *)&v171 + 1, &key[2], &key[1]);
      if ((_DWORD)v68)
      {
        unint64_t v69 = v68;
        int v70 = (os_log_s *)VSGetLogDefault(v68);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v199 = 67109890;
          *(_DWORD *)&v199[4] = v69;
          *(_WORD *)&v199[8] = 2080;
          *(void *)&v199[10] = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
          v200 = 1024;
          v201 = 2316;
          v202 = 2080;
          v203 = "couldn't get choice";
          _os_log_error_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_ERROR,  "Error %d at %s:%d (%s)\n",  v199,  0x22u);
        }
      }

      uint64_t v71 = HIDWORD(v171);
      if (SHIDWORD(v171) >= 1025)
      {
        uint64_t v71 = 1024LL;
        HIDWORD(v171) = 1024;
      }

      unint64_t v72 = *v19 ? **v19 : 0LL;
      uint64_t v73 = sub_100045B5C(v72, a7, a6, v71, (uint64_t)v189, key, &v181, (uint64_t)v180, (uint64_t)v179, &v170, 0LL);
      if ((_DWORD)v73) {
        break;
      }
      uint64_t v60 = *v19;
LABEL_112:
      int v67 = v52 + 1;
      int v74 = (int *)&v171 + 1;
      if (v52 < v170 - 1LL) {
        int v74 = &v180[v52 + 1];
      }
      if (v60) {
        int v75 = *v60;
      }
      else {
        int v75 = 0LL;
      }
      uint64_t v76 = (int)v180[v52];
      uint64_t v77 = *v74 - v76;
      if (v77 >= 1)
      {
        int v78 = v40;
        int v79 = v12;
        Mutable = 0LL;
        int v80 = 0LL;
        __s = (char *)*(&v181 + v52);
        int v81 = &v189[v76];
        while (1)
        {
          unsigned int v82 = sub_10005127C(v75, v81[v80], 1024, v199);
          if ((_DWORD)v82)
          {
            uint64_t v86 = v82;
            uint64_t v87 = (os_log_s *)VSGetLogDefault(v82);
            if (!os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
              goto LABEL_132;
            }
            int v191 = 67109890;
            v192 = v86;
            uint64_t v193 = 2080;
            uint64_t v194 = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
            uint64_t v195 = 1024;
            uint64_t v196 = 2005;
            unsigned int v197 = 2080;
            v198 = "word surface form\n";
            unsigned int v88 = v87;
            int v89 = "Error %d at %s:%d (%s)\n";
            uint64_t v90 = 34;
            goto LABEL_143;
          }

          if (!*(_WORD *)v199) {
            break;
          }
          uint64_t v83 = 1LL;
          do
            uint64_t v84 = v83;
          while (*(unsigned __int16 *)&v199[2 * v83++]);
          if (Mutable) {
            CFStringAppend(Mutable, @" ");
          }
          else {
            Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0LL);
          }
          CFStringAppendCharacters(Mutable, (const UniChar *)v199, v84);
          if (++v80 == v77) {
            goto LABEL_132;
          }
        }

        uint64_t v91 = (os_log_s *)VSGetLogDefault(v82);
        if (!os_log_type_enabled(v91, OS_LOG_TYPE_ERROR)) {
          goto LABEL_132;
        }
        LOWORD(v191) = 0;
        unsigned int v88 = v91;
        int v89 = "word has zero length!\n";
        uint64_t v90 = 2;
LABEL_143:
        _os_log_error_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, v89, (uint8_t *)&v191, v90);
LABEL_132:
        uint64_t v12 = v79;
        if (!Mutable)
        {
          unsigned int v53 = 1;
          uint64_t v19 = a1;
          unsigned int v40 = v78;
          goto LABEL_136;
        }

        sub_1000DCC50((uint64_t)v164, __s, v162, (CFMutableArrayRef *)&v174, (CFMutableArrayRef *)&cf1, Mutable);
        unsigned int v53 = 1;
        uint64_t v19 = a1;
        unsigned int v40 = v78;
        goto LABEL_134;
      }

      unsigned int v53 = 1;
LABEL_136:
      int v52 = v67;
      if (v67 >= (int)v171)
      {
        unint64_t v47 = 0;
        a5 = v155;
        int v41 = v161;
        goto LABEL_148;
      }
    }

    unint64_t v47 = v73;
    int v96 = (os_log_s *)VSGetLogDefault(v73);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v199 = 67109890;
      *(_DWORD *)&v199[4] = v47;
      *(_WORD *)&v199[8] = 2080;
      *(void *)&v199[10] = "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSElvis.c";
      v200 = 1024;
      v201 = 2323;
      v202 = 2080;
      v203 = "finding matched classes";
      _os_log_error_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "Error %d at %s:%d (%s)\n", v199, 0x22u);
    }

    a5 = v155;
LABEL_148:
    if (!v174) {
      goto LABEL_197;
    }
    if (!cf1) {
      goto LABEL_197;
    }
    unint64_t v97 = (const void *)VSRecognitionResultCreate(kCFAllocatorDefault, v157);
    cf = v97;
    if (!v97) {
      goto LABEL_197;
    }
    int v98 = CFRetain(v97);
    Count = v164[71];
    if (Count)
    {
      Count = CFArrayGetCount((CFArrayRef)Count);
      int v100 = v164;
      if (cf)
      {
        int v101 = Count;
        if (Count >= 1)
        {
          int v163 = (uint64_t)v98;
          int v102 = 0LL;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v100[71], v102);
            uint64_t v104 = (uint64_t)ValueAtIndex;
            unint64_t v105 = cf;
            *(void *)v199 = 0LL;
            if (cf)
            {
              PhraseCount = VSRecognitionResultGetPhraseCount(cf);
              Count = sub_1000EB890(v104, (uint64_t)v105, v199, PhraseCount);
            }

            else
            {
              Count = sub_1000EB890((uint64_t)ValueAtIndex, 0LL, v199, 0LL);
              PhraseCount = 0LL;
            }

            uint64_t v107 = v102 + 1;
            if ((_DWORD)Count) {
              uint64_t v108 = *(void *)v199 < PhraseCount;
            }
            else {
              uint64_t v108 = 1;
            }
            uint64_t v109 = v108;
            ++v102;
            uint64_t v110 = v109 == 1 && v107 < v101;
            int v100 = v164;
          }

          while (v110);
          a5 = v155;
          int v41 = v161;
          int v98 = (CFTypeRef)v163;
          if (!v109)
          {
            uint64_t v118 = (uint64_t (*)(void *, CFTypeRef *, void, void))v164[75];
            if (v118) {
              uint64_t v119 = v118(v164, &cf, 0LL, v164[82]) != 0;
            }
            else {
              uint64_t v119 = 1;
            }
            if (!v119 || !cf) {
              goto LABEL_171;
            }
            if (v40)
            {
              uint64_t v124 = v167;
              if (key[2] <= v167)
              {
                if (v167 - key[2] > 2) {
                  goto LABEL_236;
                }
              }

              else if (key[2] - v167 >= 3)
              {
                goto LABEL_236;
              }

              if (!theString2 || !v157 || !cf2 || !cf1)
              {
LABEL_236:
                unint64_t v167 = v124;
                if (v12) {
                  sub_1000DCE80((uint64_t)cf, v163, key[2], 1, (__CFArray **)&v178);
                }
                goto LABEL_194;
              }

              if (CFStringCompare(v157, theString2, 0LL) == kCFCompareEqualTo && CFEqual(cf1, cf2)) {
                CFArrayAppendValue(v40, cf);
              }
            }

            else if (a2 && v161 | v147)
            {
              unsigned int v40 = 0LL;
            }

            else
            {
              unsigned int v40 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
              CFArrayAppendValue(v40, cf);
              uint64_t v125 = v167;
              if (!v161) {
                uint64_t v125 = key[2];
              }
              unint64_t v167 = v125;
              if (v157) {
                CFRetain(v157);
              }
              if (cf1)
              {
                cf2 = cf1;
                CFRetain(cf1);
              }

              else
              {
                cf2 = 0LL;
              }

              theString2 = v157;
            }

            uint64_t v124 = v167;
            goto LABEL_236;
          }
        }
      }
    }

    int v111 = (os_log_s *)VSGetLogDefault(Count);
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v199 = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEBUG,  "result did not parse through sequences - rejecting\n",  v199,  2u);
    }

LABEL_110:
    sub_10002613C(v86);
    sub_10003FB88(v24);
    sub_1000CB038(v188, v189);
    goto LABEL_164;
  }

  uint64_t v196 = sub_1000C0BA8(0LL);
  uint64_t v195 = sub_1000CAEC8(0LL);
  v192 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v193 = sub_1000CF8F8(0LL, 0LL, &v194);
  nullsub_1(v193);
LABEL_8:
  unsigned int v197 = 1;
LABEL_9:
  sub_1000504B4(v197);
  sub_1000CF8F8(v193, v194, 0LL);
  sub_1000BEAB0(v192);
  sub_1000CAEC8(v195);
  sub_1000C0BA8(v196);
  return v197;
}

      if (v116 && v114 < 0) {
        goto LABEL_115;
      }
      uint64_t v145 = v60;
      uint64_t v142 = *(_WORD *)(*(void *)(v10 + 16) + 2LL * v59);
      uint64_t v143 = *(void *)(*(void *)(v10 + 24) + 8LL * v59);
      uint64_t v61 = v12;
      uint64_t v62 = v75 >> 32;
      uint64_t v63 = 4 * (v75 >> 32);
      j__memmove(v61, v70, v63);
      j__memmove(v20, (const void *)(*(void *)(v10 + 80) + (((uint64_t)v70 - *(void *)(v10 + 40)) >> 2)), v62);
      j__memmove(v147, (char *)v70 + *(void *)(v10 + 48) - *(void *)(v10 + 40), v63);
      j__memmove(v146, (char *)v70 + *(void *)(v10 + 56) - *(void *)(v10 + 40), v63);
      j__memmove(__dst, (const void *)(*(void *)(v10 + 64) + (((uint64_t)v70 - *(void *)(v10 + 40)) >> 2)), v62);
      j__memmove(v140, (const void *)(*(void *)(v10 + 72) + (((uint64_t)v70 - *(void *)(v10 + 40)) >> 1)), 2 * v62);
      sub_10004CC6C(a1, (int *)v10, v59, 0);
      if (v114)
      {
        int v28 = v147;
        uint64_t v20 = v138;
        uint64_t v12 = v139;
        uint64_t v64 = sub_10004FCEC(a1, v10, 0LL, v77, v142, v143, v115, v139, v138, (int *)v147, (int *)v146, __dst, v140, 0);
        uint64_t v65 = v64 == v59;
        unint64_t v66 = v144;
        if (v64 != v59) {
          unint64_t v66 = 1;
        }
        uint64_t v144 = v66;
        if (v64 == v59) {
          ++v59;
        }
        else {
          uint64_t v59 = 0;
        }
        if (v65) {
          int v67 = v145;
        }
        else {
          int v67 = 0xFFFFFFFFLL;
        }
        goto LABEL_16;
      }

      uint64_t v144 = 1;
      int v67 = v145;
      uint64_t v20 = v138;
      uint64_t v12 = v139;
LABEL_116:
      int v28 = v147;
LABEL_16:
      sub_10004B9DC(a1, *(unsigned int *)(a1 + 6424), v148, v55, v56, v57, v58, v60);
      uint64_t v60 = v67;
      if (v59 >= v148[0]) {
        goto LABEL_119;
      }
    }

    else {
      BOOL v56 = v94;
    }
    while (1)
    {
      int v111 = *v80++;
      unsigned int v57 = v111;
      unsigned int v112 = *v68++;
      unsigned int v58 = v112;
      unsigned int v113 = v57 > v112;
      if (v113)
      {
        uint64_t v114 = 1;
        uint64_t v115 = v74 - 1;
        uint64_t v116 = (_DWORD)v60 == v77;
        goto LABEL_115;
      }

      if (!--v56) {
        goto LABEL_67;
      }
    }

          int v102 = 0;
LABEL_111:
          uint64_t v8 = v130;
          unint64_t v7 = v131;
          uint64_t v103 = *(_DWORD *)(v143 + 4 * v42);
          uint64_t v104 = &v44[28 * v103];
          if (v39 > v103)
          {
            unint64_t v105 = v102 + v151;
            uint64_t v106 = &v44[28 * *(int *)(v143 + 4 * v42)];
            do
            {
              if (*((_DWORD *)v106 + 3) <= v105)
              {
                uint64_t v107 = *(_OWORD *)v106;
                *(_OWORD *)(v104 + 12) = *(_OWORD *)(v106 + 12);
                *(_OWORD *)uint64_t v104 = v107;
                v104 += 28;
              }

              v106 += 28;
            }

            while (v106 < &v44[28 * v39]);
            uint64_t v103 = *(_DWORD *)(v143 + 4 * v42);
          }

          uint64_t v108 = -1227133513 * ((unint64_t)(v104 - v44) >> 2);
          uint64_t v109 = (v108 - v103);
          if ((int)v109 > 1)
          {
            int v111 = &v44[28 * v103];
            qsort( v111,  (v108 - v103),  0x1CuLL,  (int (__cdecl *)(const void *, const void *))sub_1000D6400);
            unsigned int v112 = 0;
            unsigned int v113 = 1LL;
            while (1)
            {
              uint64_t v117 = &v111[28 * v113];
              uint64_t v118 = v112;
              if (*((unsigned __int16 *)v117 + 1) == *(unsigned __int16 *)&v111[28 * v112 + 2]
                && *(unsigned __int16 *)&v111[28 * v113 + 4] == *(unsigned __int16 *)&v111[28 * v112 + 4])
              {
                uint64_t v119 = *(__int16 *)&v111[28 * v113 + 16];
                if (v119 == *(__int16 *)&v111[28 * v112 + 16])
                {
                  if (v119 < 2) {
                    goto LABEL_122;
                  }
                  uint64_t v120 = v119 - 1;
                  while (1)
                  {
                    --v120;
                    if (v120 < 1) {
                      goto LABEL_122;
                    }
                  }
                }
              }

              ++v112;
              uint64_t v114 = *(_OWORD *)v117;
              uint64_t v115 = *(_OWORD *)(v117 + 12);
              uint64_t v116 = &v111[28 * v118 + 28];
              *(_OWORD *)(v116 + 12) = v115;
              *(_OWORD *)uint64_t v116 = v114;
LABEL_122:
              if (++v113 == v109)
              {
                uint64_t v110 = v44;
                uint64_t v121 = v103 + v112 + 1;
                uint64_t v103 = *(_DWORD *)(v143 + 4 * v42);
                int v39 = v121;
                LODWORD(v109) = v121 - v103;
                if (v121 - v103 >= 1) {
                  goto LABEL_133;
                }
                goto LABEL_138;
              }
            }
          }

          int v39 = v108;
          uint64_t v110 = v44;
          if ((int)v109 >= 1)
          {
LABEL_133:
            uint64_t v122 = (int *)&v110[28 * v103 + 8];
            do
            {
              uint64_t v123 = *((unsigned __int16 *)v122 - 3);
              if (v123 != 65534)
              {
                uint64_t v124 = *((unsigned __int16 *)v122 - 2);
                uint64_t v125 = sub_10009C670( v139,  *v122,  v123,  0x7FFFFFFFFFFFFFFFLL,  *((_WORD *)v122 - 2) == 0,  0,  *((_WORD *)v122 - 4));
                *uint64_t v122 = v125;
                if (!v124) {
                  sub_10009CAD8((uint64_t)v139, v125, v122[1]);
                }
              }

              v122 += 7;
              LODWORD(v109) = v109 - 1;
            }

            while ((_DWORD)v109);
          }

uint64_t sub_10004E4F4(int *a1, int a2, int a3)
{
  if (a2 < 1 || !a1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  for (int i = 0; i != a2; ++i)
  {
    int v6 = a1;
    if (i)
    {
      int v6 = a1;
      int v7 = i;
      do
      {
        uint64_t v8 = v6;
        while (1)
        {
          int v9 = *v8++;
          if (v9 == -1) {
            break;
          }
          int v6 = v8;
          if (v8 >= &a1[a3]) {
            return result;
          }
        }

        ++v6;
        --v7;
      }

      while (v7);
    }

    int v10 = -1;
    do
    {
      int v11 = *v6++;
      ++v10;
    }

    while (v11 != -1);
    else {
      uint64_t result = result;
    }
  }

  return result;
}

void *sub_10004E580( unint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a1 + 104) || *(void *)(a1 + 5512) == *(void *)(a1 + 112)) {
    int v9 = (uint64_t *)(a1 + 808);
  }
  else {
    int v9 = (uint64_t *)(a1 + 800);
  }
  v148[0] = 0;
  uint64_t v10 = *v9;
  uint64_t v11 = *(int *)(*v9 + 32);
  uint64_t v12 = (int *)sub_1000CAF58(4 * v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v20 = (void *)sub_1000CAF58(v11, v13, v14, v15, v16, v17, v18, v19);
  int v28 = (void *)sub_1000CAF58(4 * v11, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v137 = 4 * v11;
  int v146 = (void *)sub_1000CAF58(4 * v11, v29, v30, v31, v32, v33, v34, v35);
  __dst = (void *)sub_1000CAF58(v11, v36, v37, v38, v39, v40, v41, v42);
  uint64_t v140 = (void *)sub_1000CAF58(2 * v11, v43, v44, v45, v46, v47, v48, v49);
  sub_10004B9DC(a1, *(unsigned int *)(a1 + 6424), v148, v50, v51, v52, v53, v54);
  if (v148[0] >= 1)
  {
    int v59 = 0;
    int v144 = 0;
    uint64_t v60 = 0xFFFFFFFFLL;
    unsigned int v147 = v28;
    int v138 = v20;
    uint64_t v139 = v12;
    while (1)
    {
      int v68 = *(unsigned int **)(v10 + 40);
      uint64_t v69 = *(int *)(v10 + 32);
      int v70 = v68;
      if (v59)
      {
        int v70 = *(unsigned int **)(v10 + 40);
        int v71 = v59;
        do
        {
          unint64_t v72 = v70;
          while (1)
          {
            int v73 = *v72++;
            if (v73 == -1) {
              break;
            }
            int v70 = v72;
            if (v72 >= &v68[v69])
            {
              int v70 = 0LL;
              goto LABEL_24;
            }
          }

          ++v70;
          --v71;
        }

        while (v71);
      }

LABEL_73:
    int v114 = -1;
    int v115 = v74 - 1;
    BOOL v116 = (_DWORD)v60 == v77;
    goto LABEL_110;
  }

  int v144 = 0;
LABEL_119:
  if (a2) {
    *a2 = v144;
  }
  sub_1000CB038(v140, 2 * v11);
  sub_1000CB038(__dst, v11);
  sub_1000CB038(v146, v137);
  sub_1000CB038(v28, v137);
  sub_1000CB038(v20, v11);
  return sub_1000CB038(v12, v137);
}

      if (v78 >= 2)
      {
        if (v24 == 0x4000) {
          goto LABEL_75;
        }
        goto LABEL_80;
      }

            BOOL v113 = sub_1000B230C( a5,  v109,  v107,  v106,  a7,  a8,  a9,  a10,  v112,  v108,  v142,  &v140,  (uint64_t)v135,  v131,  (uint64_t)v130,  v129,  v127,  v126,  v125,  v128,  v116,  (int *)&v141 + 1,  (int *)&v139 + 1);
LABEL_74:
            int v28 = v140;
            if (v113)
            {
              if (v140 < (int)a2)
              {
                uint64_t v102 = v139;
                BOOL v103 = HIDWORD(v139);
                uint64_t v104 = (int)v139 < v100;
                unint64_t v105 = SHIDWORD(v139) < v132;
                BOOL v108 = a12;
              }
            }

            goto LABEL_78;
          }
        }

          if (!a3) {
            goto LABEL_75;
          }
          uint64_t v107 = 1;
          continue;
        }

        uint64_t v139 = v138;
        uint64_t v140 = 0LL;
        if (v138 >= 30) {
          uint64_t v141 = 30LL;
        }
        else {
          uint64_t v141 = v138;
        }
        uint64_t v140 = v141 & 0x18;
        *(void *)&__int16 v142 = __PAIR64__(HIDWORD(*(void *)v137), *(_OWORD *)v137) | 0xC0000000C0000000LL;
        DWORD2(v142) = *(void *)(v137 + 8) | 0xC0000000;
        HIDWORD(v142) = HIDWORD(*(_OWORD *)v137) | 0xC0000000;
        uint64_t v143 = *(_OWORD *)(v137 + 16) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
        *(_OWORD *)uint64_t v42 = v142;
        *(_OWORD *)(v42 + 16) = v143;
        if ((v141 & 0xFFFFFFF8) != 8)
        {
          int v144 = *(_OWORD *)(v137 + 48) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
          *(_OWORD *)(v42 + 32) = *(_OWORD *)(v137 + 32) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
          *(_OWORD *)(v42 + 48) = v144;
          if (v140 != 16)
          {
            unsigned int v145 = *(_OWORD *)(v137 + 80) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
            *(_OWORD *)(v42 + 64) = *(_OWORD *)(v137 + 64) | __PAIR128__(0xC0000000C0000000LL, 0xC0000000C0000000LL);
            *(_OWORD *)(v42 + 80) = v145;
          }
        }

        if (v140 != v141)
        {
LABEL_48:
          int v146 = v141 - v140;
          unsigned int v147 = 4 * v140;
          uint64_t v148 = (unsigned int *)(v42 + 4 * v140);
          unsigned int v149 = (int *)(v137 + v147);
          do
          {
            int v150 = *v149++;
            *v148++ = v150 | 0xC0000000;
            --v146;
          }

          while (v146);
        }

        sub_1000CB038((void *)v137, 120LL);
        v223 = v234 - 1;
        v227 = -(uint64_t)v111;
        int v151 = v139 + 1LL;
        v235 = -1;
        v219 = v125;
        uint64_t v126 = v125;
        do
        {
          uint64_t v152 = (v151 - 2);
          sub_1000B33F8((char *)a1, *(_DWORD *)(v42 + 4LL * v152), v106, v241);
          uint64_t v153 = sub_1000CC52C(v106);
          if (v153 >= v126)
          {
            uint64_t v154 = v153;
            uint64_t v155 = v153 - 1;
            if (sub_1000CBA60(*(unsigned __int16 *)(v106 + 2LL * (v153 - 1))))
            {
              uint64_t v42 = (unint64_t)v240;
            }

            else
            {
              uint64_t v156 = (int)((uint64_t)(v230 + v110 + v109 + 2LL * v155) >> 1) + 1LL;
              if ((int)v156 < v232
                && ((uint64_t v157 = (v227 + ((uint64_t)v155 << 32)) >> 32, sub_1000CB0C4(v236[v157]))
                 && v236[v157] == v236[(int)v156]
                 && (*((_DWORD *)v229 + v157) && *((_DWORD *)v229 + (int)v156)
                  || *((_DWORD *)v228 + v157) && *((_DWORD *)v228 + (int)v156))
                 || *((_DWORD *)v222 + v157)
                 || *((_DWORD *)v215 + v156)))
              {
                uint64_t v106 = (unint64_t)v239;
                uint64_t v42 = (unint64_t)v240;
              }

              else
              {
                uint64_t v106 = (unint64_t)v239;
                uint64_t v42 = (unint64_t)v240;
                if (v235 == -1 || v154 > v126)
                {
                  v235 = *((_DWORD *)v240 + v152);
                  v224 = v236[v223 + v154];
                  uint64_t v126 = v154;
                }
              }
            }
          }

          --v151;
        }

        while (v151 > 1);
        if (v235 == -1)
        {
          LODWORD(v125) = v219;
          goto LABEL_73;
        }

        uint64_t v158 = (unint64_t)v225 >> 1;
        uint64_t v160 = v243[0];
        if (v160 < (int)v212)
        {
          uint64_t v166 = v160;
          a7[v160] = v235;
          if (v217) {
            *(_DWORD *)(v217 + 4LL * v160) = v158;
          }
          if (a9) {
            *(_DWORD *)(a9 + 4LL * v160) = v126;
          }
          if (v211) {
            *((_DWORD *)v211 + v160) = v224;
          }
          goto LABEL_116;
        }

        goto LABEL_118;
      }
    }

    if (*((_DWORD *)v229 + v119) || *((_DWORD *)v228 + v119))
    {
      int v121 = v236;
      if (*v117)
      {
        do
        {
          BOOL v122 = v114 >> 32;
          BOOL v123 = (int)(v115 >> 1);
          if (*((_DWORD *)v229 + v123) != *((_DWORD *)v229 + v122)) {
            break;
          }
          if (*((_DWORD *)v228 + v123) != *((_DWORD *)v228 + v122)) {
            break;
          }
          int v124 = (unsigned __int16)v117[1];
          ++v117;
          v114 += (uint64_t)&_mh_execute_header;
          v115 += 2LL;
        }

        while (v124);
      }
    }

    else
    {
      int v121 = v236;
    }

    uint64_t v125 = ((unint64_t)&v117[v109 / 0xFFFFFFFFFFFFFFFELL + 1] - v110) >> 1;
    v233 = &v121[v118];
    uint64_t v126 = v125;
    if (!v237) {
      goto LABEL_35;
    }
LABEL_75:
    uint64_t v158 = (unint64_t)v225 >> 1;
    if (*((_DWORD *)v229 + v231))
    {
      uint64_t v159 = sub_1000B8998( a1,  v110 + v109 - 2,  (unint64_t)v225 >> 1,  v125,  a4,  v212,  (uint64_t)a7,  v217,  a9,  (uint64_t)v211,  a11,  v243,  v236[v231])
           + v214;
LABEL_119:
      v214 = v159;
      goto LABEL_120;
    }

    uint64_t v160 = v243[0];
    int v161 = (v243[0] - 1);
    int v162 = v243[0] >= 1 && v243[0] <= (int)v212;
    if (!v162
      || (a7[v161] == -1 ? (int v163 = v210 == (_DWORD)v158 - 1) : (int v163 = 0),
          !v163 || v236[v231] != v236[v210] || !*((_DWORD *)v228 + v231) || !*((_DWORD *)v228 + v210)))
    {
      if (v160 < (int)v212)
      {
        int v165 = *v233;
        uint64_t v166 = v160;
        a7[v160] = -1;
        if (v217) {
          *(_DWORD *)(v217 + 4LL * v160) = v158;
        }
        if (a9) {
          *(_DWORD *)(a9 + 4LL * v160) = v125;
        }
        if (v211) {
          *((_DWORD *)v211 + v160) = v165;
        }
LABEL_116:
        if (a11) {
          *(_BYTE *)(a11 + v166) = 0;
        }
      }

uint64_t sub_10004EB2C(_DWORD *a1, int a2, unsigned int *a3)
{
  int v3 = a1 + 204;
  if (a2 == -2) {
    a2 = a1[1606];
  }
  if (*v3 == -1) {
    return 0LL;
  }
  if (*v3 != a2)
  {
    int v6 = a1[208];
    if (v6 != -1)
    {
      int v5 = a1[207];
      if (v6 == a2)
      {
        unsigned int v4 = 1;
        goto LABEL_63;
      }

      int v7 = a1[212];
      if (v7 != -1)
      {
        v5 += a1[211];
        if (v7 == a2)
        {
          unsigned int v4 = 2;
          goto LABEL_63;
        }

        int v8 = a1[216];
        if (v8 != -1)
        {
          v5 += a1[215];
          if (v8 == a2)
          {
            unsigned int v4 = 3;
            goto LABEL_63;
          }

          int v9 = a1[220];
          if (v9 != -1)
          {
            v5 += a1[219];
            if (v9 == a2)
            {
              unsigned int v4 = 4;
              goto LABEL_63;
            }

            int v10 = a1[224];
            if (v10 != -1)
            {
              v5 += a1[223];
              if (v10 == a2)
              {
                unsigned int v4 = 5;
                goto LABEL_63;
              }

              int v11 = a1[228];
              if (v11 != -1)
              {
                v5 += a1[227];
                if (v11 == a2)
                {
                  unsigned int v4 = 6;
                  goto LABEL_63;
                }

                int v12 = a1[232];
                if (v12 != -1)
                {
                  v5 += a1[231];
                  if (v12 == a2)
                  {
                    unsigned int v4 = 7;
                    goto LABEL_63;
                  }

                  int v13 = a1[236];
                  if (v13 != -1)
                  {
                    v5 += a1[235];
                    if (v13 == a2)
                    {
                      unsigned int v4 = 8;
                      goto LABEL_63;
                    }

                    int v14 = a1[240];
                    if (v14 != -1)
                    {
                      v5 += a1[239];
                      if (v14 == a2)
                      {
                        unsigned int v4 = 9;
                        goto LABEL_63;
                      }

                      int v15 = a1[244];
                      if (v15 != -1)
                      {
                        v5 += a1[243];
                        if (v15 == a2)
                        {
                          unsigned int v4 = 10;
                          goto LABEL_63;
                        }

                        int v16 = a1[248];
                        if (v16 != -1)
                        {
                          v5 += a1[247];
                          if (v16 == a2)
                          {
                            unsigned int v4 = 11;
                            goto LABEL_63;
                          }

                          int v17 = a1[252];
                          if (v17 != -1)
                          {
                            v5 += a1[251];
                            if (v17 == a2)
                            {
                              unsigned int v4 = 12;
                              goto LABEL_63;
                            }

                            int v18 = a1[256];
                            if (v18 != -1)
                            {
                              v5 += a1[255];
                              if (v18 == a2)
                              {
                                unsigned int v4 = 13;
                                goto LABEL_63;
                              }

                              int v19 = a1[260];
                              if (v19 != -1)
                              {
                                v5 += a1[259];
                                if (v19 == a2)
                                {
                                  unsigned int v4 = 14;
                                  goto LABEL_63;
                                }

                                int v20 = a1[264];
                                if (v20 != -1)
                                {
                                  v5 += a1[263];
                                  if (v20 == a2)
                                  {
                                    unsigned int v4 = 15;
                                    goto LABEL_63;
                                  }

                                  int v21 = a1[268];
                                  if (v21 != -1)
                                  {
                                    v5 += a1[267];
                                    if (v21 == a2)
                                    {
                                      unsigned int v4 = 16;
                                      goto LABEL_63;
                                    }

                                    int v22 = a1[272];
                                    if (v22 != -1)
                                    {
                                      v5 += a1[271];
                                      if (v22 == a2)
                                      {
                                        unsigned int v4 = 17;
                                        goto LABEL_63;
                                      }

                                      int v23 = a1[276];
                                      if (v23 != -1)
                                      {
                                        v5 += a1[275];
                                        if (v23 == a2)
                                        {
                                          unsigned int v4 = 18;
                                          goto LABEL_63;
                                        }

                                        int v24 = a1[280];
                                        if (v24 != -1 && v24 == a2)
                                        {
                                          v5 += a1[279];
                                          unsigned int v4 = 19;
                                          goto LABEL_63;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return 0LL;
  }

  unsigned int v4 = 0;
  int v5 = 0;
LABEL_63:
  if (a3) {
    *a3 = v4;
  }
  if (v3[4 * v4 + 3] + v5 <= 40) {
    return 1LL;
  }
  else {
    return 2LL;
  }
}

void *sub_10004EE2C(uint64_t a1, int a2, int a3, __int128 *a4, int a5)
{
  int v8 = a2;
  if (a2 == -2) {
    int v8 = *(_DWORD *)(a1 + 6424);
  }
  int v10 = (void *)(a1 + 816);
  int v126 = 0;
  int v11 = sub_10004EB2C((_DWORD *)a1, v8, (unsigned int *)&v126);
  if (v11 == 1)
  {
    uint64_t v85 = v126;
    int v86 = &v10[2 * v126];
    uint64_t v87 = *((int *)v86 + 3);
    if ((_DWORD)v87 == a3)
    {
      int v88 = *((_DWORD *)v86 + 2);
      uint64_t result = (void *)memcmp((const void *)(a1 + 4LL * v88 + 1136), a4, 4LL * a3);
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v90 = v88;
    }

    else
    {
      int v88 = *((_DWORD *)v86 + 2);
      uint64_t v90 = v88;
    }

    uint64_t v119 = a1 + 4 * v90;
    j__memmove(&v10[2 * v85], &v10[2 * v85 + 2], 16LL * (19 - (int)v85));
    j__memmove((void *)(v119 + 1136), (const void *)(v119 + 1136 + 4 * v87), 4LL * (39 - v88 - (int)v87));
    uint64_t result = j__memmove((void *)(a1 + 832), (const void *)(a1 + 816), 0x130uLL);
    if (a3 <= 39) {
      goto LABEL_135;
    }
  }

  else
  {
    if (v11 == 2)
    {
      int v125 = a5;
      int v19 = (_BYTE *)sub_1000CAF58(20LL, v12, v13, v14, v15, v16, v17, v18);
      int v20 = v19;
      int v21 = *(_DWORD *)(a1 + 824);
      BOOL v23 = (*(_DWORD *)(a1 + 828) | v21) >= 0 && v21 > 40;
      *int v19 = v23;
      int v24 = *(_DWORD *)(a1 + 840);
      BOOL v26 = (*(_DWORD *)(a1 + 844) | v24) >= 0 && v24 > 40;
      v19[1] = v26;
      int v27 = *(_DWORD *)(a1 + 856);
      BOOL v29 = (*(_DWORD *)(a1 + 860) | v27) >= 0 && v27 > 40;
      v19[2] = v29;
      int v30 = *(_DWORD *)(a1 + 872);
      BOOL v32 = (*(_DWORD *)(a1 + 876) | v30) >= 0 && v30 > 40;
      v19[3] = v32;
      int v33 = *(_DWORD *)(a1 + 888);
      BOOL v35 = (*(_DWORD *)(a1 + 892) | v33) >= 0 && v33 > 40;
      v19[4] = v35;
      int v36 = *(_DWORD *)(a1 + 904);
      BOOL v38 = (*(_DWORD *)(a1 + 908) | v36) >= 0 && v36 > 40;
      v19[5] = v38;
      int v39 = *(_DWORD *)(a1 + 920);
      BOOL v41 = (*(_DWORD *)(a1 + 924) | v39) >= 0 && v39 > 40;
      v19[6] = v41;
      int v42 = *(_DWORD *)(a1 + 936);
      BOOL v44 = (*(_DWORD *)(a1 + 940) | v42) >= 0 && v42 > 40;
      v19[7] = v44;
      int v45 = *(_DWORD *)(a1 + 952);
      BOOL v47 = (*(_DWORD *)(a1 + 956) | v45) >= 0 && v45 > 40;
      v19[8] = v47;
      int v48 = *(_DWORD *)(a1 + 968);
      BOOL v50 = (*(_DWORD *)(a1 + 972) | v48) >= 0 && v48 > 40;
      v19[9] = v50;
      int v51 = *(_DWORD *)(a1 + 984);
      BOOL v53 = (*(_DWORD *)(a1 + 988) | v51) >= 0 && v51 > 40;
      v19[10] = v53;
      int v54 = *(_DWORD *)(a1 + 1000);
      BOOL v56 = (*(_DWORD *)(a1 + 1004) | v54) >= 0 && v54 > 40;
      v19[11] = v56;
      int v57 = *(_DWORD *)(a1 + 1016);
      BOOL v59 = (*(_DWORD *)(a1 + 1020) | v57) >= 0 && v57 > 40;
      v19[12] = v59;
      int v60 = *(_DWORD *)(a1 + 1032);
      BOOL v62 = (*(_DWORD *)(a1 + 1036) | v60) >= 0 && v60 > 40;
      v19[13] = v62;
      int v63 = *(_DWORD *)(a1 + 1048);
      BOOL v65 = (*(_DWORD *)(a1 + 1052) | v63) >= 0 && v63 > 40;
      v19[14] = v65;
      int v66 = *(_DWORD *)(a1 + 1064);
      BOOL v68 = (*(_DWORD *)(a1 + 1068) | v66) >= 0 && v66 > 40;
      v19[15] = v68;
      int v69 = *(_DWORD *)(a1 + 1080);
      BOOL v71 = (*(_DWORD *)(a1 + 1084) | v69) >= 0 && v69 > 40;
      v19[16] = v71;
      int v72 = *(_DWORD *)(a1 + 1096);
      BOOL v74 = (*(_DWORD *)(a1 + 1100) | v72) >= 0 && v72 > 40;
      v19[17] = v74;
      int v75 = *(_DWORD *)(a1 + 1112);
      BOOL v77 = (*(_DWORD *)(a1 + 1116) | v75) >= 0 && v75 > 40;
      v19[18] = v77;
      int v78 = *(_DWORD *)(a1 + 1128);
      BOOL v80 = (*(_DWORD *)(a1 + 1132) | v78) >= 0 && v78 > 40;
      v19[19] = v80;
      int v81 = (_DWORD *)(a1 + 1120);
      for (uint64_t i = 19LL; i != -1; --i)
      {
        if (*((_BYTE *)v20 + i))
        {
          uint64_t v83 = v81[3];
          uint64_t v84 = (int)v81[2];
          *((void *)v81 + 1) = 0xFFFFFFFFLL;
          *int v81 = -1;
        }

        v81 -= 4;
      }

      sub_1000CB038(v20, 20LL);
      a5 = v125;
    }

    uint64_t result = j__memmove((void *)(a1 + 832), (const void *)(a1 + 816), 0x130uLL);
    if (a3 <= 39) {
LABEL_135:
    }
      uint64_t result = j__memmove((void *)(a1 + 1136 + 4LL * a3), (const void *)(a1 + 1136), 160 - 4 * a3);
  }

  void *v10 = 0LL;
  *(void *)(a1 + 824) = 0LL;
  int v91 = *(_DWORD *)(a1 + 840);
  if ((v91 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 840) = v91 + a3;
  }
  int v92 = *(_DWORD *)(a1 + 856);
  if ((v92 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 856) = v92 + a3;
  }
  int v93 = *(_DWORD *)(a1 + 872);
  if ((v93 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 872) = v93 + a3;
  }
  int v94 = *(_DWORD *)(a1 + 888);
  if ((v94 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 888) = v94 + a3;
  }
  int v95 = *(_DWORD *)(a1 + 904);
  if ((v95 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 904) = v95 + a3;
  }
  int v96 = *(_DWORD *)(a1 + 920);
  if ((v96 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 920) = v96 + a3;
  }
  int v97 = *(_DWORD *)(a1 + 936);
  if ((v97 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 936) = v97 + a3;
  }
  int v98 = *(_DWORD *)(a1 + 952);
  if ((v98 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 952) = v98 + a3;
  }
  int v99 = *(_DWORD *)(a1 + 968);
  if ((v99 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 968) = v99 + a3;
  }
  int v100 = *(_DWORD *)(a1 + 984);
  if ((v100 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 984) = v100 + a3;
  }
  int v101 = *(_DWORD *)(a1 + 1000);
  if ((v101 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1000) = v101 + a3;
  }
  int v102 = *(_DWORD *)(a1 + 1016);
  if ((v102 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1016) = v102 + a3;
  }
  int v103 = *(_DWORD *)(a1 + 1032);
  if ((v103 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1032) = v103 + a3;
  }
  int v104 = *(_DWORD *)(a1 + 1048);
  if ((v104 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1048) = v104 + a3;
  }
  int v105 = *(_DWORD *)(a1 + 1064);
  if ((v105 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1064) = v105 + a3;
  }
  int v106 = *(_DWORD *)(a1 + 1080);
  if ((v106 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1080) = v106 + a3;
  }
  int v107 = *(_DWORD *)(a1 + 1096);
  if ((v107 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1096) = v107 + a3;
  }
  int v108 = *(_DWORD *)(a1 + 1112);
  if ((v108 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1112) = v108 + a3;
  }
  int v109 = *(_DWORD *)(a1 + 1128);
  if ((v109 & 0x80000000) == 0) {
    *(_DWORD *)(a1 + 1128) = v109 + a3;
  }
  *(_DWORD *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 816) = v8;
  *(_DWORD *)(a1 + 828) = a3;
  *(_DWORD *)(a1 + 820) = a5;
  if (*(void *)(a1 + 104) && *(void *)(a1 + 5512) != *(void *)(a1 + 112))
  {
    uint64_t v110 = *(void *)(a1 + 800);
    unint64_t v111 = (a3 - 1);
    if (a3 < 1) {
      goto LABEL_191;
    }
LABEL_179:
    else {
      unsigned int v112 = v111;
    }
    if (v112 >= 7 && (unint64_t)(a1 - (void)a4 + 1136) >= 0x20)
    {
      uint64_t v120 = v112 + 1;
      uint64_t v113 = ((_BYTE)v112 + 1) & 0x78;
      int v121 = a4 + 1;
      BOOL v122 = (_OWORD *)(a1 + 1152);
      uint64_t v123 = v113;
      do
      {
        __int128 v124 = *v121;
        *(v122 - 1) = *(v121 - 1);
        *BOOL v122 = v124;
        v121 += 2;
        v122 += 2;
        v123 -= 8LL;
      }

      while (v123);
      if (v113 == v120)
      {
LABEL_189:
        uint64_t v118 = 0LL;
        do
        {
          *(_DWORD *)(*(void *)(v110 + 120) + v118) = *(_DWORD *)((char *)a4 + v118);
          v118 += 4LL;
        }

        while (4LL * a3 != v118);
        goto LABEL_191;
      }
    }

    else
    {
      uint64_t v113 = 0LL;
    }

    int v114 = (int *)a4 + v113;
    int v115 = (_DWORD *)(4 * v113 + a1 + 1136);
    if (v111 >= 0x27) {
      unint64_t v111 = 39LL;
    }
    uint64_t v116 = v111 - v113 + 1;
    do
    {
      int v117 = *v114++;
      *v115++ = v117;
      --v116;
    }

    while (v116);
    goto LABEL_189;
  }

  uint64_t v110 = *(void *)(a1 + 808);
  unint64_t v111 = (a3 - 1);
  if (a3 >= 1) {
    goto LABEL_179;
  }
LABEL_191:
  *(_DWORD *)(v110 + 128) = a3;
  return result;
}

uint64_t sub_10004F474(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 1296);
  uint64_t v4 = 0LL;
  while (*(_DWORD *)(*(void *)(a1 + 1304) + 4 * v4) != a2)
  {
    if (v3 == ++v4) {
      return 0LL;
    }
  }

  if (a3) {
    *a3 = v4;
  }
  return 1LL;
}

void sub_10004F4B8(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 800);
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 4);
    if (v5 >= 1)
    {
      do
      {
        int v26 = v5;
        int v27 = *(unsigned int **)(v4 + 40);
        if (--v5)
        {
          int v28 = &v27[*(int *)(v4 + 32)];
          int v29 = v5;
          do
          {
            int v30 = v27;
            while (1)
            {
              int v31 = *v30++;
              if (v31 == -1) {
                break;
              }
              int v27 = v30;
              if (v30 >= v28)
              {
                int v27 = 0LL;
                goto LABEL_24;
              }
            }

            ++v27;
            --v29;
          }

          while (v29);
        }

double sub_10004F7DC(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + ((uint64_t)a2 << 6);
  if (*(_DWORD *)v2)
  {
    sub_1000A266C(*(void *)(v2 + 16));
    *(void *)(v2 + 16) = 0LL;
    sub_1000D0174(*(void *)(v2 + 8));
    *(void *)(v2 + 8) = 0LL;
    sub_1000B2D5C(*(void *)(v2 + 24));
    *(void *)(v2 + 24) = 0LL;
    sub_1000C0EF8(*(void *)(v2 + 40));
    *(void *)(v2 + 40) = 0LL;
    sub_1000C0EF8(*(void *)(v2 + 56));
    *(void *)(v2 + 56) = 0LL;
    *(void *)(v2 + 32) = 0xFFFFFFFFLL;
    *(_DWORD *)(v2 + 48) = 0;
    double result = COERCE_DOUBLE(&_mh_execute_header);
    *(void *)uint64_t v2 = &_mh_execute_header;
  }

  return result;
}

double sub_10004F858(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 5488);
  uint64_t v9 = *(unsigned int *)(a1 + 5496);
  if ((int)v9 < 1)
  {
    LODWORD(v12) = -1;
LABEL_9:
    sub_10004F7DC(*(void *)(a1 + 5488), v12);
    uint64_t v16 = sub_1000399BC(*(void *)(a1 + 5512));
    uint64_t v12 = (int)v12;
    uint64_t v17 = v8 + ((uint64_t)(int)v12 << 6);
    *(void *)(v17 + 8) = v16;
    if (!v16) {
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
    int v11 = (unsigned int *)(v8 + 32);
    LODWORD(v12) = -1;
    unsigned int v13 = -1;
    while (1)
    {
      unsigned int v15 = *v11;
      v11 += 16;
      unsigned int v14 = v15;
      if (v15 == -1) {
        break;
      }
      if (v14 < v13)
      {
        unsigned int v13 = v14;
        LODWORD(v12) = v10;
      }

      if (v9 == ++v10) {
        goto LABEL_9;
      }
    }

    LODWORD(v12) = v10;
    uint64_t v18 = sub_1000399BC(*(void *)(a1 + 5512));
    uint64_t v12 = (int)v12;
    uint64_t v17 = v8 + ((uint64_t)(int)v12 << 6);
    *(void *)(v17 + 8) = v18;
    if (!v18) {
      goto LABEL_22;
    }
  }

  *(void *)(v17 + 16) = 0LL;
  uint64_t v19 = sub_1000B28CC(*(int **)(a1 + 256));
  *(void *)(v17 + 24) = v19;
  if (!v19) {
    goto LABEL_22;
  }
  uint64_t v20 = v8 + (v12 << 6);
  *(_DWORD *)(v20 + 32) = a2;
  *(_DWORD *)(v20 + 36) = a3;
  uint64_t v21 = sub_1000C1074(4LL * (a3 + 1));
  *(void *)(v20 + 40) = v21;
  uint64_t v22 = (void *)(v20 + 40);
  if (!v21) {
    goto LABEL_22;
  }
  if (a3 >= 1)
  {
    uint64_t v23 = 0LL;
    do
    {
      *(_DWORD *)(*v22 + v23) = *(_DWORD *)(a4 + v23);
      v23 += 4LL;
    }

    while (4LL * a3 != v23);
  }

  uint64_t v24 = *(unsigned int *)(a1 + 776);
  uint64_t v25 = v8 + (v12 << 6);
  *(_DWORD *)(v25 + 48) = v24;
  uint64_t v26 = sub_1000C1074(4LL * ((int)v24 + 1));
  *(void *)(v25 + 56) = v26;
  int v27 = (void *)(v25 + 56);
  if (!v26)
  {
LABEL_22:
    *(_DWORD *)uint64_t v17 = 1;
    return sub_10004F7DC(v8, v12);
  }

  if ((int)v24 >= 1)
  {
    uint64_t v28 = 0LL;
    do
    {
      *(_DWORD *)(*v27 + v28) = *(_DWORD *)(*(void *)(a1 + 768) + v28);
      v28 += 4LL;
    }

    while (4 * v24 != v28);
  }

  *(void *)&double result = 1LL;
  *(void *)uint64_t v17 = 1LL;
  return result;
}

uint64_t sub_10004FA00(uint64_t result, uint64_t a2, unsigned int a3)
{
  int v3 = *(_DWORD *)(result + 1296);
  if (v3 < 1) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int **)(result + 1304);
  unsigned int v7 = *v6;
  if (*v6 == -1)
  {
    LODWORD(v9) = 0;
  }

  else
  {
    if (v3 < 2)
    {
      uint64_t v12 = 0LL;
      unsigned int *v6 = a3;
      unsigned int v13 = *(int **)(result + 1312);
      unsigned int v14 = v13;
      if (!*(_DWORD *)(result + 776)) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }

    int v8 = 0;
    uint64_t v9 = 1LL;
    int v10 = *(_DWORD *)(result + 1296);
    while (1)
    {
      unsigned int v11 = v6[v9];
      if (v11 == -1) {
        break;
      }
      if (v11 < v7)
      {
        int v8 = v9;
        int v10 = *(_DWORD *)(result + 1296);
        unsigned int v7 = v6[v9];
      }

      if (++v9 >= v10)
      {
        uint64_t v12 = v8;
        v6[v8] = a3;
        unsigned int v13 = *(int **)(result + 1312);
        unsigned int v14 = &v13[32 * (uint64_t)v8];
        if (!*(_DWORD *)(result + 776)) {
          goto LABEL_13;
        }
        goto LABEL_10;
      }
    }
  }

  uint64_t v12 = (int)v9;
  v6[(int)v9] = a3;
  unsigned int v13 = *(int **)(result + 1312);
  unsigned int v14 = &v13[32 * (uint64_t)(int)v9];
  if (!*(_DWORD *)(result + 776))
  {
LABEL_13:
    int v15 = -1;
    goto LABEL_14;
  }

uint64_t sub_10004FCEC( unint64_t a1, uint64_t a2, uint64_t a3, int a4, __int16 a5, uint64_t a6, int a7, int *a8, const void *a9, int *a10, int *a11, const void *a12, const void *a13, int a14)
{
  int v21 = *(_DWORD *)(a2 + 4);
  else {
    uint64_t v22 = v21;
  }
  if (v21 <= (int)a3)
  {
    uint64_t v23 = v22;
    else {
      int v26 = v22;
    }
    if (v26 >= 1)
    {
LABEL_13:
      int v27 = 0;
      uint64_t v29 = *(void *)(a2 + 48);
      uint64_t v28 = *(void *)(a2 + 56);
      uint64_t v30 = *(void *)(a2 + 40);
      int v31 = -1;
      while (1)
      {
        if (v27)
        {
          int v32 = 0;
          __int128 v33 = *(int **)(a2 + 40);
          int v34 = v27;
          do
          {
            ++v32;
            uint64_t v35 = v33;
            while (1)
            {
              int v36 = *v35++;
              if (v36 == -1) {
                break;
              }
              ++v32;
              __int128 v33 = v35;
              if ((unint64_t)v35 >= v30 + 4LL * *(int *)(a2 + 32))
              {
                __int128 v33 = 0LL;
                goto LABEL_25;
              }
            }

            ++v33;
            --v34;
          }

          while (v34);
          int v31 = v32;
        }

        else
        {
          int v31 = 0;
          __int128 v33 = *(int **)(a2 + 40);
        }

LABEL_78:
    int v73 = a7 + 1;
    BOOL v74 = v69;
    do
    {
      int v75 = *v74++;
      --v73;
    }

    while (v75 != -1);
    uint64_t v76 = 4LL * v31;
    BOOL v77 = (int *)(v65 + v76);
    if (!v65) {
      BOOL v77 = 0LL;
    }
    int v78 = (int *)(v66 + v76);
    if (!v66) {
      int v78 = 0LL;
    }
    if (v73) {
      goto LABEL_68;
    }
    int v79 = a8;
    uint64_t v80 = a7;
    if (a7 < 1) {
      break;
    }
    while (1)
    {
      int v82 = *v69++;
      int v81 = v82;
      int v83 = *v79++;
      if (v81 != v83) {
        break;
      }
      if (!--v80)
      {
        int v84 = 0;
        if (v78)
        {
          uint64_t v85 = a10;
          uint64_t v86 = a7 - 1LL;
          do
          {
            int v88 = *v78++;
            int v87 = v88;
            int v89 = *v85++;
            BOOL v90 = v87 == v89;
            BOOL v91 = v87 < v89;
            if (v87 != v89) {
              int v84 = 1;
            }
            if (v91) {
              int v84 = -1;
            }
          }

          while (v90 && v86-- != 0);
        }

        if (v77)
        {
          int v93 = a11;
          uint64_t v94 = a7 - 1LL;
          do
          {
            int v96 = *v77++;
            int v95 = v96;
            int v97 = *v93++;
            BOOL v98 = v95 == v97;
            BOOL v99 = v95 < v97;
            if (v95 != v97) {
              int v84 = 1;
            }
            if (v99) {
              int v84 = -1;
            }
          }

          while (v98 && v94-- != 0);
        }

        if (!v84) {
          goto LABEL_113;
        }
        break;
      }
    }

    if (*((unsigned __int16 *)v52 + 16) != *((unsigned __int16 *)v14 + 16)
      || ((*(void *)v14 ^ *(void *)v52) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      *a2 = v10;
      *a3 = v47;
      return v97;
    }

    uint64_t v85 = v14[2];
    uint64_t v86 = *v14;
    *(_OWORD *)(i + 16) = v14[1];
    *(_OWORD *)(i + 32) = v85;
    *(_OWORD *)uint64_t i = v86;
    LOWORD(v107) = 0x4000;
    HIDWORD(v107) = -1;
    LOWORD(v108) = -1;
    HIDWORD(v108) = 0;
    if (*(_WORD *)(i + 34))
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9416))(a1, &v107, i);
    }

    else
    {
      int v87 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
      int v88 = (__int16)v107;
      int v89 = *(__int16 *)(i + 24);
      if ((__int16)v107 < v89)
      {
        *(_WORD *)(i + 24) = v107;
        *(_DWORD *)(i + 16) = HIDWORD(v107);
        *(_WORD *)(i + 28) = v108;
        *(_DWORD *)(i + 8) = HIDWORD(v108);
        int v89 = v88;
      }

      if (v89 <= (__int16)v8[58])
      {
        BOOL v90 = *v87;
        BOOL v91 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v90);
        if (v91 == 0x4000)
        {
          LOWORD(v91) = sub_100015BC0(*(void *)(a1 + 384), v90);
          LOWORD(v89) = *(_WORD *)(i + 24);
        }

        int v92 = v91 - v8[56] + v89;
        *(_WORD *)(i + 24) = v92;
        *(_DWORD *)(i + 8) += (__int16)v91;
        *(_WORD *)(i + 36) = v92;
        if (v92 < (__int16)v8[51])
        {
          v8[51] = v92;
          v8[53] = *(_WORD *)(i + 32);
          v8[119] = *(_WORD *)(i + 34);
        }
      }

      else
      {
        *(_WORD *)(i + 36) = 0x4000;
        *(_WORD *)(i + 24) = 0x4000;
      }
    }

    LODWORD(v10) = v10 + 1;
    int v49 = *(void *)(a1 + 9024);
    uint64_t v18 = *(void *)(v49 + 8LL * (v10 >> 8)) + 48LL * v10;
    ++v47;
  }

  if ((int)v10 - 2 > (int)v47)
  {
    *(_WORD *)(i + 32) = *((_WORD *)v52 + 16);
    *(_BYTE *)(i + 38) = *((_BYTE *)v52 + 38) + 1;
    *(void *)uint64_t i = *(void *)v52;
    if (v69 - 1 != *((unsigned __int8 *)v52 + 38))
    {
      *(_DWORD *)(i + 24) = 1073758208;
      int v79 = v106[*((unsigned __int8 *)v52 + 38) + 1];
      *(_WORD *)(i + 34) = v79;
      if (v79)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9416))(a1, &v107, i);
      }

      else
      {
        int v82 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
        int v83 = (__int16)v107;
        int v84 = *(__int16 *)(i + 24);
        if ((__int16)v107 < v84)
        {
          *(_WORD *)(i + 24) = v107;
          *(_DWORD *)(i + 16) = HIDWORD(v107);
          *(_WORD *)(i + 28) = v108;
          *(_DWORD *)(i + 8) = HIDWORD(v108);
          int v84 = v83;
        }

        if (v84 <= (__int16)v8[58])
        {
          int v93 = *v82;
          uint64_t v94 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v93);
          if (v94 == 0x4000)
          {
            LOWORD(v94) = sub_100015BC0(*(void *)(a1 + 384), v93);
            LOWORD(v84) = *(_WORD *)(i + 24);
          }

          int v95 = v94 - v8[56] + v84;
          *(_WORD *)(i + 24) = v95;
          *(_DWORD *)(i + 8) += (__int16)v94;
          *(_WORD *)(i + 36) = v95;
          if (v95 < (__int16)v8[51])
          {
            v8[51] = v95;
            v8[53] = *(_WORD *)(i + 32);
            v8[119] = *(_WORD *)(i + 34);
          }
        }

        else
        {
          *(_WORD *)(i + 36) = 0x4000;
          *(_WORD *)(i + 24) = 0x4000;
        }
      }

      goto LABEL_77;
    }

    int v73 = *v8;
    *(_WORD *)(i + 34) = v73;
    *(_WORD *)(i + 24) = 0x4000;
    BOOL v74 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), v73);
    int v75 = (__int16)v107;
    uint64_t v76 = *(__int16 *)(i + 24);
    if ((__int16)v107 < v76)
    {
      *(_WORD *)(i + 24) = v107;
      *(_DWORD *)(i + 16) = HIDWORD(v107);
      *(_WORD *)(i + 28) = v108;
      *(_DWORD *)(i + 8) = HIDWORD(v108);
      uint64_t v76 = v75;
    }

    if (v76 <= (__int16)v8[58])
    {
      uint64_t v80 = *v74;
      int v81 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v80);
      if (v81 == 0x4000)
      {
        LOWORD(v81) = sub_100015BC0(*(void *)(a1 + 384), v80);
        LOWORD(v76) = *(_WORD *)(i + 24);
      }

      BOOL v77 = v81 - v8[56] + v76;
      *(_WORD *)(i + 24) = v77;
      *(_DWORD *)(i + 8) += (__int16)v81;
      *(_WORD *)(i + 36) = v77;
      if (v77 < (__int16)v8[51])
      {
        v8[51] = v77;
        v8[53] = *(_WORD *)(i + 32);
        v8[119] = *(_WORD *)(i + 34);
        BOOL v77 = *(_WORD *)(i + 24);
        int v78 = *(void *)(a1 + 9240);
        if (*(_DWORD *)v78 > v77) {
          goto LABEL_75;
        }
      }

      else
      {
        int v78 = *(void *)(a1 + 9240);
        if (*(_DWORD *)v78 > v77) {
          goto LABEL_75;
        }
      }
    }

    else
    {
      BOOL v77 = 0x4000;
      *(_WORD *)(i + 36) = 0x4000;
      *(_WORD *)(i + 24) = 0x4000;
      int v78 = *(void *)(a1 + 9240);
      if (*(int *)v78 > 0x4000)
      {
LABEL_75:
        ++*(_WORD *)(*(void *)(v78 + 8) + 2LL * v77);
        ++*(_DWORD *)(*(void *)(a1 + 9240) + 4LL);
        if ((__int16)v8[52] <= v77)
        {
LABEL_77:
          ++v47;
          uint64_t i = *(void *)(*(void *)(a1 + 9024) + 8LL * (v47 >> 8)) + 48LL * v47;
          goto LABEL_78;
        }

        int v70 = *(int *)(a1 + 172);
        int v27 = v25;
        if ((_DWORD)v70)
        {
          BOOL v71 = 0;
          while (1)
          {
            while (1)
            {
              int v72 = v70 - 1;
              if (v70 - 1 < 0) {
                int v72 = v70;
              }
              int v73 = v72 >> 1;
              BOOL v74 = v71 + v73;
              int v75 = *(unsigned __int16 *)(*(void *)(a1 + 176) + 2LL * (v71 + (int)v73));
              if (v75 <= v139) {
                break;
              }
              int v70 = (int)v73;
              if (!(_DWORD)v73) {
                goto LABEL_86;
              }
            }

            if (v75 == v139) {
              break;
            }
            v70 -= (int)v73 + 1;
            BOOL v71 = v74 + 1;
            if (!v70)
            {
LABEL_86:
              int v27 = v25;
              goto LABEL_90;
            }
          }

          int v27 = v25;
          if (v74 != -1)
          {
            int v69 = (_WORD *)(*(void *)(a1 + 192) + 2LL * v74);
            goto LABEL_89;
          }
        }
      }

      int v53 = *(_OWORD *)(v9 + 6);
      BOOL v54 = *(_OWORD *)v9;
      v9 += 14;
      *(_OWORD *)int v10 = v54;
      *(_OWORD *)(v10 + 12) = v53;
      if (!*(_BYTE *)(v10 + 2)) {
        goto LABEL_103;
      }
      goto LABEL_99;
    }

    BOOL v74 = a5;
LABEL_11:
    uint64_t v24 = 0x4000;
    int v25 = -1;
    int v26 = -1;
    int v27 = 1;
    BOOL v71 = *((unsigned __int8 *)v9 + 2);
    uint64_t v28 = v20;
    uint64_t v29 = 1;
    do
    {
      if (v20 && ((uint64_t v30 = v22 > v19, v31 = *(unsigned __int16 *)(v11 + 4), v32 = v9[2], v30 || !v27) || v31 <= v32))
      {
        uint64_t v35 = *(_WORD *)(v11 + 8);
        int v36 = *(_DWORD *)v11;
        if (v31 != v32 || !v23)
        {
          *(_DWORD *)(v10 + 6) = 1073758208;
          *(_WORD *)int v10 = *(_WORD *)(v11 + 6);
          *(_BYTE *)(v10 + 2) = v22;
          *(_WORD *)(v10 + 4) = *(_WORD *)(v11 + 4);
          *(_BYTE *)(v10 + 3) = *(_BYTE *)(v11 + 10);
        }

        else
        {
          int v37 = *(_OWORD *)v9;
          *(_OWORD *)(v10 + 12) = *(_OWORD *)(v9 + 6);
          *(_OWORD *)int v10 = v37;
          if ((__int16)v9[3] < v24 && (v22 > 1 || *((_BYTE *)v9 + 3)))
          {
            int v25 = v9[5];
            int v26 = *((_DWORD *)v9 + 4);
            uint64_t v24 = v9[3];
          }

          unsigned int v38 = v9[14];
          v9 += 14;
          uint64_t v29 = v38 == v18;
        }

        do
        {
          int v39 = *(unsigned __int16 *)(v11 + 20);
          v11 += 12LL;
        }

        while (v39 == 0x4000);
        uint64_t v28 = *(unsigned __int16 *)(v11 + 6) == v18;
      }

      else
      {
        __int128 v33 = *(_OWORD *)v9;
        *(_OWORD *)(v10 + 12) = *(_OWORD *)(v9 + 6);
        *(_OWORD *)int v10 = v33;
        if ((__int16)v9[3] < v24 && (v22 > 1 || *((_BYTE *)v9 + 3)))
        {
          int v25 = v9[5];
          int v26 = *((_DWORD *)v9 + 4);
          uint64_t v24 = v9[3];
        }

        int v34 = v9[14];
        v9 += 14;
        uint64_t v29 = v34 == v18;
        uint64_t v35 = 0x4000;
        int v36 = -1;
      }

      double result = sub_1000A0EA0(a1, v35, *(_WORD *)(a1 + 812), v36, v10);
      v10 += 28LL;
      uint64_t v19 = *((unsigned __int8 *)v9 + 2);
      uint64_t v22 = v78;
      int v27 = v29;
      uint64_t v23 = v29 && v78 == v19;
      LOBYTE(v20) = v28;
    }

    while (v23 || v28);
    uint64_t v19 = v71;
    int *v74 = v11;
    if (v22 == v71 && v22 != 1) {
      goto LABEL_39;
    }
    goto LABEL_40;
  }

  uint64_t v22 = v78;
  if (v78 == v19 || v78 == 1)
  {
    int v73 = a3;
    BOOL v74 = a5;
    int v72 = a2;
    uint64_t v23 = v78 == v19;
    goto LABEL_11;
  }

  *(_DWORD *)(v10 + 6) = 1073758208;
  *(_WORD *)int v10 = *(_WORD *)(v11 + 6);
  *(_BYTE *)(v10 + 2) = v22;
  *(_WORD *)(v10 + 4) = *(_WORD *)(v11 + 4);
  double result = sub_1000A0EA0(a1, *(__int16 *)(v11 + 8), *(_WORD *)(a1 + 812), *(_DWORD *)v11, v10);
  *a3 += 28LL;
  do
  {
    int v51 = *(unsigned __int16 *)(v11 + 20);
    v11 += 12LL;
  }

  while (v51 == 0x4000);
  *a5 = v11;
  return result;
}

LABEL_113:
  sub_10004CC6C(a1, (int *)a2, v67, a14);
  int v21 = *(_DWORD *)(a2 + 4);
LABEL_114:
  if (v21 > (int)v23)
  {
    do
    {
      uint64_t v101 = *(void *)(a2 + 40);
      uint64_t v102 = *(int *)(a2 + 32);
      int v103 = v21 - 1;
      if (v21 == 1)
      {
        int v104 = *(int **)(a2 + 40);
      }

      else
      {
        int v104 = *(int **)(a2 + 40);
        int v105 = v21 - 1;
        do
        {
          int v106 = v104;
          while (1)
          {
            int v107 = *v106++;
            if (v107 == -1) {
              break;
            }
            int v104 = v106;
            if ((unint64_t)v106 >= v101 + 4 * v102)
            {
              int v104 = 0LL;
              goto LABEL_127;
            }
          }

          ++v104;
          --v105;
        }

        while (v105);
      }

LABEL_127:
      int v108 = a7 + 1 + (((unint64_t)v104 - v101) >> 2);
      do
      {
        int v109 = *v104++;
        ++v108;
      }

      while (v109 != -1);
      int v21 = v103;
    }

    while (v103 > (int)v23);
  }

  int v110 = v23 - 1;
  if ((int)v23 < 1)
  {
    uint64_t v116 = *(int *)(a2 + 32);
    return 0xFFFFFFFFLL;
  }

  uint64_t v111 = *(void *)(a2 + 40);
  if ((_DWORD)v23 == 1)
  {
    uint64_t v116 = *(int *)(a2 + 32);
    return 0xFFFFFFFFLL;
  }

  unsigned int v112 = *(int **)(a2 + 40);
  do
  {
    uint64_t v113 = v112;
    while (1)
    {
      int v114 = *v113++;
      if (v114 == -1) {
        break;
      }
      unsigned int v112 = v113;
      if ((unint64_t)v113 >= v111 + 4LL * *(int *)(a2 + 32))
      {
        unsigned int v112 = 0LL;
        goto LABEL_140;
      }
    }

    ++v112;
    --v110;
  }

  while (v110);
LABEL_140:
  int v115 = (((unint64_t)v112 - v111) >> 2) + a7;
  uint64_t v116 = *(int *)(a2 + 32);
LABEL_141:
  uint64_t v117 = *(void *)(a2 + 40);
  uint64_t v136 = a6;
  __int16 v135 = a5;
  __src = a8;
  if ((_DWORD)v23)
  {
    uint64_t v118 = *(int **)(a2 + 40);
    int v119 = v23;
    do
    {
      uint64_t v120 = v118;
      while (1)
      {
        int v121 = *v120++;
        if (v121 == -1) {
          break;
        }
        uint64_t v118 = v120;
        if ((unint64_t)v120 >= v117 + 4 * v116)
        {
          uint64_t v118 = 0LL;
          goto LABEL_154;
        }
      }

      ++v118;
      --v119;
    }

    while (v119);
  }

  else
  {
    uint64_t v118 = *(int **)(a2 + 40);
  }

        sub_1000B8938(a4, a5, a6, v110, 0LL, v111, a10, a3, *a9, *v35, 0, 0, 1);
LABEL_133:
        uint64_t v29 = (v29 + 1);
      }
    }

    else
    {
      BOOL v91 = *(_WORD **)(v108 + 304);
      if (v91)
      {
        if ((int)sub_1000B3680(v31, v91, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
        {
          int v70 = *(_WORD **)(v108 + 304);
          goto LABEL_129;
        }

        goto LABEL_127;
      }
    }
  }

  int v93 = &a12[7 * v37];
  int v96 = v93[1];
  uint64_t v94 = v93 + 1;
  int v95 = v96;
  if (*(_WORD *)(a2 + 2 * v96) == 48 && *(_WORD *)(a2 + 2LL * (v95 + 1)) == 48) {
    goto LABEL_136;
  }
  BOOL v99 = v94;
  if ((_DWORD)v19)
  {
    if (a12[7 * (v19 - 1)] == 2)
    {
      int v100 = *(_WORD **)(v108 + 336);
      if (v100)
      {
        if ((int)sub_1000B3680(v31, v100, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
        {
          else {
            uint64_t v101 = *a9;
          }
          sub_1000B8938(a4, a5, a6, v110, 0LL, v111, a10, a3, v101, *v35, 0, 0, 0);
        }

        else
        {
          sub_1000B8938(a4, a5, a6, v110, 0LL, v111, a10, a3, *a9, *v35, 0, 0, 1);
        }

        LODWORD(v29) = v29 + 1;
        int v95 = *v99;
      }
    }
  }

  if (*(_DWORD *)(v108 + 536))
  {
    uint64_t v102 = 3;
  }

  else
  {
    if (*(_WORD *)(a2 + 2LL * v95) == 48) {
      uint64_t v102 = 2;
    }
    else {
      uint64_t v102 = 3;
    }
    if (*(_WORD *)(a2 + 2LL * v95) == 48) {
      ++v95;
    }
  }

  sub_1000CC548(v116, (__int16 *)(a2 + 2LL * v95), v102);
  if (v115 == 36)
  {
    if (sub_1000CC52C((unint64_t)v116) == 1 && v116[0] == 49)
    {
      int v103 = *(_WORD **)(v108 + 288);
      if (v103)
      {
        if ((int)sub_1000B3680(v31, v103, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
        {
          int v104 = *(_WORD **)(v108 + 288);
LABEL_167:
          else {
            int v106 = *a9;
          }
          sub_1000B8938(a4, a5, a6, v110, 0LL, v111, a10, a3, v106, *v99 + 2, 0, 0, 0);
          goto LABEL_171;
        }

        goto LABEL_165;
      }
    }

    else
    {
      int v105 = *(_WORD **)(v108 + 272);
      if (v105)
      {
        if ((int)sub_1000B3680(v31, v105, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
        {
          int v104 = *(_WORD **)(v108 + 272);
          goto LABEL_167;
        }

LABEL_154:
  uint64_t v122 = (uint64_t)v118 - v117;
  uint64_t v123 = (int)(v122 >> 2);
  uint64_t v124 = 4 * v123;
  uint64_t v131 = 4LL * (a7 + 1);
  int v125 = ((unint64_t)v122 >> 2) + a7;
  int v126 = ~v125;
  j__memmove((void *)(v117 + 4 * v123 + v131), (const void *)(v117 + 4 * v123), 4 * ((int)v116 + ~v125));
  j__memmove((void *)(*(void *)(a2 + 40) + 4 * v123), __src, 4LL * a7);
  uint64_t v127 = v125;
  int v132 = v125;
  __srca = (void *)v125;
  uint64_t v128 = 4LL * v125;
  *(_DWORD *)(*(void *)(a2 + 40) + v128) = -1;
  j__memmove( (void *)(*(void *)(a2 + 80) + v123 + a7 + 1),  (const void *)(*(void *)(a2 + 80) + v123),  *(_DWORD *)(a2 + 32) + v126);
  j__memmove((void *)(*(void *)(a2 + 80) + v123), a9, a7);
  *(_BYTE *)(*(void *)(a2 + 80) + v127) = 0;
  j__memmove( (void *)(*(void *)(a2 + 48) + v124 + v131),  (const void *)(*(void *)(a2 + 48) + v124),  4 * (*(_DWORD *)(a2 + 32) + v126));
  j__memmove((void *)(*(void *)(a2 + 48) + 4 * v123), a10, 4LL * a7);
  *(_DWORD *)(*(void *)(a2 + 48) + v128) = -1;
  j__memmove( (void *)(*(void *)(a2 + 56) + v124 + v131),  (const void *)(*(void *)(a2 + 56) + v124),  4 * (*(_DWORD *)(a2 + 32) + v126));
  j__memmove((void *)(*(void *)(a2 + 56) + 4 * v123), a11, 4LL * a7);
  *(_DWORD *)(*(void *)(a2 + 56) + v128) = -1;
  j__memmove( (void *)(*(void *)(a2 + 64) + v123 + a7 + 1),  (const void *)(*(void *)(a2 + 64) + v123),  *(_DWORD *)(a2 + 32) + v126);
  j__memmove((void *)(*(void *)(a2 + 64) + v123), a12, a7);
  *((_BYTE *)__srca + *(void *)(a2 + 64)) = 0;
  j__memmove( (void *)(*(void *)(a2 + 72) + 2 * v123 + 2LL * (a7 + 1)),  (const void *)(*(void *)(a2 + 72) + 2 * v123),  2 * (*(_DWORD *)(a2 + 32) + v126));
  j__memmove((void *)(*(void *)(a2 + 72) + 2 * v123), a13, 2LL * a7);
  *(_WORD *)(*(void *)(a2 + 72) + 2LL * v132) = -1;
  uint64_t v129 = (int)v23 + 1LL;
  j__memmove( (void *)(*(void *)(a2 + 8) + 4 * v129),  (const void *)(*(void *)(a2 + 8) + 4LL * (int)v23),  4 * (*(_DWORD *)a2 + ~(_DWORD)v23));
  *(_DWORD *)(*(void *)(a2 + 8) + 4LL * (int)v23) = v137;
  j__memmove( (void *)(*(void *)(a2 + 16) + 2 * v129),  (const void *)(*(void *)(a2 + 16) + 2LL * (int)v23),  2 * (*(_DWORD *)a2 + ~(_DWORD)v23));
  *(_WORD *)(*(void *)(a2 + 16) + 2LL * (int)v23) = v135;
  j__memmove( (void *)(*(void *)(a2 + 24) + 8 * v129),  (const void *)(*(void *)(a2 + 24) + 8LL * (int)v23),  8 * (*(_DWORD *)a2 + ~(_DWORD)v23));
  *(void *)(*(void *)(a2 + 24) + 8LL * (int)v23) = v136;
  ++*(_DWORD *)(a2 + 4);
  return v23;
}

  int v105 = 0LL;
LABEL_227:
  uint64_t v140 = (os_log_s *)VSGetLogDefault(v70);
  if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = "_SaveEngineToCache";
    _os_log_error_impl( (void *)&_mh_execute_header,  v140,  OS_LOG_TYPE_ERROR,  "%s: couldn't move temp cache into place... deleting\n",  buf,  0xCu);
  }

  VSCFURLDeleteDirectoryContents(url);
  VSDeleteItemAtURL(url, 0LL);
LABEL_230:
  CFRelease(url);
  if (v105) {
    CFRelease(v105);
  }
  sub_1000E2AAC(0LL, 0);
  if (v24) {
    goto LABEL_110;
  }
LABEL_111:
  if (cf) {
    CFRelease(cf);
  }
  if (v51) {
    CFRelease(v51);
  }
  return v50;
}

uint64_t sub_1000504B4(uint64_t a1)
{
  if (sub_1000C877C())
  {
    uint64_t v2 = sub_10003F3EC();
    __sprintf_chk(v4, 0, 0x80uLL, "%d %s", a1, v2);
    sub_1000C8790();
  }

  return a1;
}

uint64_t sub_100050540(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    LODWORD(result) = sub_1000B2524(result);
    else {
      return result;
    }
  }

  return result;
}

double sub_100050568(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 6384)) {
    sub_1000C0EF8(*(void *)(a1 + 6376));
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 6360) = 0u;
  *(_OWORD *)(a1 + 6376) = 0u;
  *(void *)(a1 + 6392) = 0LL;
  *(_OWORD *)(a1 + 6344) = 0u;
  *(_DWORD *)(a1 + 6368) = 0;
  *(_DWORD *)(a1 + 6388) = 0;
  *(_DWORD *)(a1 + 6396) = -1;
  return result;
}

uint64_t sub_1000505BC(uint64_t a1)
{
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 5520));
  *(void *)(a1 + 5520) = 0LL;
  *(_DWORD *)(a1 + 5528) = 0;
  return result;
}

uint64_t sub_1000505E8(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  if (a2 == -1) {
    return 4LL;
  }
  int v6 = sub_1000B3918(*(void *)(a1 + 8), a2);
  if (v6 == 0xFFFFFF) {
    return 4LL;
  }
  int v8 = v6;
  int v9 = sub_1000B3A9C(*(void *)(a1 + 8), a2);
  if (a3) {
    *a3 = v9 != 0xFFFF;
  }
  if (v9 != 0xFFFF) {
    return 0LL;
  }
  unsigned int v10 = sub_1000B91B4(*(uint64_t **)(a1 + 8), v8);
  if (v10 != 0xFFFF)
  {
    unsigned int v11 = v10;
    uint64_t v12 = *(void *)(a1 + 104);
    if (v12 && !sub_100039A14(*(void *)(a1 + 104)))
    {
LABEL_40:
LABEL_44:
      uint64_t result = 1LL;
      uint64_t v20 = *(_WORD **)(a1 + 5520);
      if (!v20) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }

    uint64_t v13 = *(void *)(a1 + 112);
    if (v13) {
      int v14 = sub_100039A14(*(void *)(a1 + 112));
    }
    else {
      int v14 = 1;
    }
    uint64_t v15 = *(void *)(a1 + 136);
    if (v15) {
      int v16 = sub_100039A14(*(void *)(a1 + 136));
    }
    else {
      int v16 = 1;
    }
    uint64_t v17 = *(void *)(a1 + 144);
    if (v17)
    {
      BOOL v18 = sub_100039A14(v17) != 0;
      BOOL v19 = v18;
    }

    else
    {
      BOOL v19 = 0;
      BOOL v18 = 1;
    }

    if (v14 && v16 && v18)
    {
      uint64_t result = 0LL;
      uint64_t v20 = *(_WORD **)(a1 + 5520);
      if (!v20) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }

    if (v12) {
      int v21 = sub_100039A3C(*(void *)(a1 + 104)) & 1;
    }
    else {
      int v21 = 1;
    }
    if (v13 && v14) {
      v21 &= sub_100039A3C(*(void *)(a1 + 112));
    }
    if (v15 && v16)
    {
      v21 &= sub_100039A3C(*(void *)(a1 + 136));
      if (!v19)
      {
LABEL_39:
        if (!v21) {
          goto LABEL_44;
        }
        goto LABEL_40;
      }
    }

    else if (!v19)
    {
      goto LABEL_39;
    }

    v21 &= sub_100039A3C(*(void *)(a1 + 144));
    goto LABEL_39;
  }

uint64_t sub_1000507F4(uint64_t a1, _WORD *a2, _WORD *a3, _DWORD *a4)
{
  if (!a2) {
    return 4LL;
  }
  int v15 = 0;
  *a4 = -1;
  unsigned int v8 = sub_1000B32B0(*(uint64_t **)(a1 + 8), a2);
  unsigned int v14 = v8;
  if (v8 != -1)
  {
    uint64_t result = sub_1000505E8(a1, v8, 0LL);
    if ((_DWORD)result)
    {
LABEL_5:
      unsigned int v10 = *(_WORD **)(a1 + 5520);
      if (v10) {
        _WORD *v10 = 0;
      }
      *(_DWORD *)(a1 + 5532) = 0;
      return result;
    }

uint64_t sub_1000508EC( unint64_t a1, _WORD *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v24 = 1;
  uint64_t v8 = 4LL;
  if (a2 && a5)
  {
    unsigned int v10 = a6;
    unsigned int v25 = 0;
    *a5 = 0;
    uint64_t v15 = (int)a3;
    int v16 = sub_1000CAFC0((int)a3, (uint64_t)a2, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
    int v17 = sub_1000BA058(*(uint64_t **)(a1 + 8), a2, v10, a3, a4, &v25, v16);
    if (v17)
    {
      if (v17 == 1) {
        unsigned int v21 = 16;
      }
      else {
        unsigned int v21 = 1;
      }
      if (v17 == 2) {
        uint64_t v8 = 15LL;
      }
      else {
        uint64_t v8 = v21;
      }
      sub_1000CB038(v16, v15);
    }

    else
    {
      uint64_t v8 = sub_100050A1C(a1, v25, (uint64_t)a4, (uint64_t)v16, (uint64_t)&v24, v18, v19, v20);
      sub_1000CB038(v16, v15);
      if ((_DWORD)v8) {
        unsigned int v25 = 0;
      }
      if (!v24)
      {
        unsigned int v25 = 0;
        uint64_t v8 = 1LL;
      }

      uint64_t v22 = *(_WORD **)(a1 + 5520);
      if (v22) {
        *uint64_t v22 = 0;
      }
      *(_DWORD *)(a1 + 5532) = 0;
      *a5 = v25;
    }
  }

  return v8;
}

uint64_t sub_100050A1C( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (_DWORD *)a5;
  int v9 = (_BYTE *)a4;
  unsigned int v10 = (unsigned int *)a3;
  int v11 = a2;
  uint64_t v13 = 4LL * (int)a2;
  unsigned int v14 = (void *)sub_1000CAF58(v13, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = v14;
  if (v11 < 1)
  {
    uint64_t v17 = 0LL;
    int v26 = 1;
  }

  else
  {
    uint64_t v38 = v13;
    int v39 = v8;
    uint64_t v16 = v11;
    bzero(v14, 4LL * v11);
    uint64_t v17 = 0LL;
    int v18 = 1;
    uint64_t v19 = v16;
    uint64_t v20 = v10;
    unsigned int v21 = v15;
    do
    {
      unsigned int v23 = *v20++;
      unsigned int v22 = v23;
      if (v23 == -1)
      {
        int v26 = 1;
        goto LABEL_15;
      }

      unsigned int v24 = sub_1000505E8(a1, v22, v21);
      if ((_DWORD)v17) {
        unsigned int v25 = v17;
      }
      else {
        unsigned int v25 = v24;
      }
      if (v24)
      {
        int v18 = 0;
        uint64_t v17 = v25;
      }

      else
      {
        uint64_t v17 = v17;
      }

      ++v21;
      --v19;
    }

    while (v19);
    int v26 = 1;
    if (v18)
    {
      uint64_t v13 = v38;
      uint64_t v8 = v39;
      goto LABEL_29;
    }

uint64_t sub_100050BDC(unint64_t a1, unint64_t a2, _WORD *a3, int a4, uint64_t a5, _DWORD *a6)
{
  int v123 = 1;
  *a6 = 0;
  unint64_t v9 = sub_1000CC52C(a2);
  uint64_t v10 = 4LL * (int)v9;
  int v18 = (char *)sub_1000CAF58(v10, v11, v12, v13, v14, v15, v16, v17);
  int v26 = (char *)sub_1000CAF58(v10, v19, v20, v21, v22, v23, v24, v25);
  unint64_t v34 = sub_1000CAF58(v10, v27, v28, v29, v30, v31, v32, v33);
  int v42 = (void *)sub_1000CAF58(v10, v35, v36, v37, v38, v39, v40, v41);
  uint64_t v50 = (void *)sub_1000CAF58(v10, v43, v44, v45, v46, v47, v48, v49);
  uint64_t v120 = (void *)v34;
  int v121 = v26;
  unint64_t v118 = a2;
  int v119 = a3;
  uint64_t v122 = v18;
  int v51 = sub_1000B3D48(*(uint64_t **)(a1 + 8), a2, a3, 1, 1LL, v9, (uint64_t)v50, v18, v26, v34, (uint64_t)v42);
  if (v51 < 1)
  {
    unsigned int v69 = 0;
    BOOL v99 = 1;
    goto LABEL_47;
  }

  uint64_t v115 = 4LL * (int)v9;
  uint64_t v59 = v51;
  int v67 = sub_1000CAFC0(v51, v52, v53, v54, v55, v56, v57, v58);
  uint64_t v68 = 0LL;
  uint64_t v116 = v67;
  uint64_t v117 = v59;
  while (1)
  {
    if (*((_DWORD *)v50 + v68) != -1) {
      goto LABEL_6;
    }
    uint64_t v70 = a1;
    BOOL v71 = v50;
    uint64_t v72 = *(int *)&v121[4 * v68] + 1LL;
    uint64_t v73 = *((int *)v42 + v68) + 1LL;
    uint64_t v74 = 2 * v72;
    int v75 = (_WORD *)sub_1000CAF58(2 * v72, v60, v61, v62, v63, v64, v65, v66);
    uint64_t v76 = 2 * v73;
    int v84 = (_WORD *)sub_1000CAF58(2 * v73, v77, v78, v79, v80, v81, v82, v83);
    sub_1000CC548(v75, (__int16 *)(v118 + 2LL * *(int *)&v122[4 * v68]), v72);
    sub_1000CC548(v84, &v119[*((int *)v120 + v68)], v73);
    if (!v75)
    {
      unsigned int v69 = 4;
      uint64_t v50 = v71;
      a1 = v70;
      goto LABEL_4;
    }

    int v125 = 0;
    uint64_t v50 = v71;
    *((_DWORD *)v71 + v68) = -1;
    a1 = v70;
    unsigned int v85 = sub_1000B32B0(*(uint64_t **)(v70 + 8), v75);
    unsigned int v124 = v85;
    if (v85 != -1)
    {
      unsigned int v69 = sub_1000505E8(v70, v85, 0LL);
      if (!v69) {
        goto LABEL_22;
      }
      goto LABEL_11;
    }

    int v87 = sub_1000B9330(*(uint64_t **)(v70 + 8), (unint64_t)v75, v84, 0LL, &v124, &v125);
    if (v87 == 1) {
      int v88 = 16;
    }
    else {
      int v88 = 1;
    }
    if (v87 == 2) {
      unsigned int v69 = 15;
    }
    else {
      unsigned int v69 = v88;
    }
    if (!v87)
    {
      unsigned int v69 = sub_1000505E8(v70, v124, 0LL);
      if (!v69)
      {
LABEL_22:
        *((_DWORD *)v50 + v68) = v124;
        uint64_t v86 = *(_WORD **)(v70 + 5520);
        if (!v86) {
          goto LABEL_13;
        }
LABEL_12:
        *uint64_t v86 = 0;
LABEL_13:
        *(_DWORD *)(v70 + 5532) = 0;
        goto LABEL_4;
      }

uint64_t sub_100051018(unint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 5500)) {
    sub_10004F4B8(a1, a2);
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    uint64_t result = sub_100039A3C(v3);
    if (!(_DWORD)result) {
      goto LABEL_13;
    }
    uint64_t v5 = *(void *)(a1 + 112);
    if (!v5) {
      goto LABEL_9;
    }
LABEL_8:
    uint64_t result = sub_100039A3C(v5);
    if (!(_DWORD)result) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }

  uint64_t result = 1LL;
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5) {
    goto LABEL_8;
  }
LABEL_9:
  if (!*(void *)(a1 + 136) || (uint64_t result = sub_100039A3C(*(void *)(a1 + 136)), (_DWORD)result))
  {
    if (*(void *)(a1 + 144)) {
      uint64_t result = sub_100039A3C(*(void *)(a1 + 144));
    }
  }

uint64_t sub_1000510C4(uint64_t a1)
{
  unsigned int v9 = 0;
  uint64_t v8 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t v6 = 0LL;
  if (a1)
  {
    uint64_t v8 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v7 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v4 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v5 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v6);
    nullsub_1(v5);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    uint64_t v3 = (int *)sub_1000BE9FC();
    if (!setjmp(v3))
    {
      else {
        unsigned int v9 = *(_DWORD *)(a1 + 8160) != 0;
      }
      sub_1000BEA60();
      goto LABEL_9;
    }

    *(_DWORD *)(a1 + 8160) = 1;
  }

  else
  {
    uint64_t v8 = sub_1000C0BA8(0LL);
    uint64_t v7 = sub_1000CAEC8(0LL);
    uint64_t v4 = sub_1000BEAC4();
    sub_1000045A4(0LL, 0LL);
    uint64_t v5 = sub_1000CF8F8(0LL, 0LL, &v6);
    nullsub_1(v5);
  }

  unsigned int v9 = 1;
LABEL_9:
  sub_1000504B4(v9);
  sub_1000CF8F8(v5, v6, 0LL);
  sub_1000BEAB0(v4);
  sub_1000CAEC8(v7);
  sub_1000C0BA8(v8);
  return v9;
}

uint64_t sub_10005127C(uint64_t a1, unsigned int a2, int a3, _WORD *a4)
{
  unsigned int v37 = 0;
  uint64_t v36 = 0LL;
  uint64_t v35 = 0LL;
  uint64_t v34 = 0LL;
  if (a1)
  {
    uint64_t v36 = sub_1000C0BA8(*(void *)(a1 + 6480));
    uint64_t v35 = sub_1000CAEC8(*(void *)(a1 + 6488));
    uint64_t v32 = sub_1000BEAC4();
    sub_1000045A4(*(void *)(a1 + 6496), *(void *)(a1 + 6504));
    uint64_t v33 = sub_1000CF8F8(*(void **)(a1 + 6520), *(void *)(a1 + 6528), &v34);
    nullsub_1(v33);
    if (*(_DWORD *)(a1 + 8160)) {
      return 1LL;
    }
    sub_1000BEAB0((void *)(a1 + 6648));
    unsigned int v9 = (int *)sub_1000BE9FC();
    if (setjmp(v9))
    {
      *(_DWORD *)(a1 + 8160) = 1;
      goto LABEL_8;
    }

    if (!sub_1000C8AB4(*(_BYTE **)(a1 + 8168), "Elvis Magic"))
    {
      if (*(_DWORD *)(a1 + 8160))
      {
        int v10 = 1;
        goto LABEL_14;
      }

      if (a3 >= 1 && a4 && sub_1000B3608(*(uint64_t **)(a1 + 8), a2))
      {
        uint64_t v11 = *(uint64_t **)(a1 + 8);
        int v12 = sub_1000B324C(v11) + 1;
        int v13 = sub_1000B3288(v11) + 1;
        uint64_t v14 = 2LL * v12;
        uint64_t v22 = (__int16 *)sub_1000CAF58(v14, v15, v16, v17, v18, v19, v20, v21);
        uint64_t v23 = 2LL * v13;
        uint64_t v31 = (_WORD *)sub_1000CAF58(v23, v24, v25, v26, v27, v28, v29, v30);
        sub_1000B33F8(*(char **)(a1 + 8), a2, (uint64_t)v22, v31);
        if (!sub_1000CC548(a4, v22, a3)) {
          unsigned int v37 = 10;
        }
        sub_1000CB038(v31, v23);
        sub_1000CB038(v22, v14);
        int v10 = v37;
        goto LABEL_14;
      }
    }

    int v10 = 4;
LABEL_14:
    unsigned int v37 = v10;
    sub_1000BEA60();
    goto LABEL_9;
  }

  uint64_t v36 = sub_1000C0BA8(0LL);
  uint64_t v35 = sub_1000CAEC8(0LL);
  uint64_t v32 = sub_1000BEAC4();
  sub_1000045A4(0LL, 0LL);
  uint64_t v33 = sub_1000CF8F8(0LL, 0LL, &v34);
  nullsub_1(v33);
LABEL_8:
  unsigned int v37 = 1;
LABEL_9:
  sub_1000504B4(v37);
  sub_1000CF8F8(v33, v34, 0LL);
  sub_1000BEAB0(v32);
  sub_1000CAEC8(v35);
  sub_1000C0BA8(v36);
  return v37;
}

uint64_t sub_1000514EC(int a1)
{
  else {
    return dword_1000F0548[a1 - 1];
  }
}

uint64_t sub_100051510(int a1, int a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v6 = sub_1000C1074(48LL);
  uint64_t v7 = v6;
  if (!v6) {
    return v7;
  }
  *(void *)uint64_t v6 = a3;
  *(_DWORD *)(v6 + 16) = sub_100005A74(a3);
  if (a2 >= 0) {
    int v13 = a2;
  }
  else {
    int v13 = a2 + 1;
  }
  *(void *)(v7 + 8) = sub_1000C1F48(a2, (uint64_t)v13 >> 1, 2LL, v8, v9, v10, v11, v12);
  uint64_t v14 = sub_1000C1074(4LL * a1);
  *(void *)(v7 + 24) = v14;
  if (v14)
  {
    uint64_t v15 = sub_1000C1074(8LL * a1);
    *(void *)(v7 + 32) = v15;
    if (v15)
    {
      *(_DWORD *)(v7 + 40) = a1;
      *(_DWORD *)(v7 + 44) = 0;
      return v7;
    }
  }

  sub_1000C1FE8(*(void *)(v7 + 8));
  sub_1000C0EF8(*(void *)(v7 + 32));
  sub_1000C0EF8(v7);
  return 0LL;
}

uint64_t sub_1000515F0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C1FE8(*(void *)(result + 8));
    sub_1000C0EF8(*(void *)(v1 + 32));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100051628(uint64_t result)
{
  if (result)
  {
    *(_DWORD *)(result + 44) = 0;
    return sub_1000C22D4(*(void *)(result + 8), 0LL);
  }

  return result;
}

uint64_t sub_100051640(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      if (*(int *)(v1 + 16) >= 1)
      {
        uint64_t v3 = 0LL;
        do
          sub_1000C0EF8(*(void *)(*(void *)(v1 + 8) + 8 * v3++));
        while (v3 < *(int *)(v1 + 16));
        uint64_t v2 = *(void *)(v1 + 8);
      }

      sub_1000C0EF8(v2);
    }

    *(void *)uint64_t v1 = 0LL;
    *(void *)(v1 + 8) = 0LL;
    *(_DWORD *)(v1 + 24) = 0;
    *(void *)(v1 + 16) = 0LL;
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_1000516B0(uint64_t a1, void *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(void *)a1;
  *a3 = *(_DWORD *)(a1 + 20);
  *a4 = *(_DWORD *)(a1 + 24);
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1000516D0( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BCAE8(a1, "ber0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = sub_1000C1074(32LL);
  uint64_t v11 = v10;
  if (!v10)
  {
    sub_1000BCBC8(v9);
    return v11;
  }

  uint64_t v12 = (int *)(v10 + 16);
  if (!sub_1000BCD38(v9, (void *)(v10 + 16))
    || !sub_1000BCD38(v9, (void *)(v11 + 20))
    || !sub_1000BCD38(v9, (void *)(v11 + 24)))
  {
    goto LABEL_14;
  }

  uint64_t v13 = *(int *)(v11 + 16);
  *(void *)(v11 + 8) = 0LL;
  if (!(_DWORD)v13)
  {
    char v18 = 0;
    *(void *)uint64_t v11 = 0LL;
    goto LABEL_15;
  }

  uint64_t v14 = sub_1000C1074(8 * v13);
  *(void *)(v11 + 8) = v14;
  if (v14)
  {
    int v15 = *(_DWORD *)(v11 + 16);
    *(void *)uint64_t v11 = v14;
    if (v15 >= 1)
    {
      uint64_t v16 = 0LL;
      uint64_t v17 = 0LL;
      while (1)
      {
        int v23 = 0;
        if (!sub_1000BCED0(v9, 4, (uint64_t *)(*(void *)(v11 + 8) + v16), &v23)
          || v23 > *(_DWORD *)(v11 + 24) + 1)
        {
          break;
        }

        char v18 = 0;
        ++v17;
        v16 += 8LL;
        if (v17 >= *v12) {
          goto LABEL_15;
        }
      }
    }

    char v18 = 0;
  }

  else
  {
LABEL_14:
    char v18 = 1;
  }

unsigned int *sub_100051884(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    uint64_t v2 = *result;
    if ((int)v2 >= 1)
    {
      unint64_t v3 = v2 + 1;
      do
      {
        uint64_t v4 = *(uint64_t **)(*(void *)(v1 + 8) + 8LL * (v3 - 2));
        if (v4)
        {
          sub_1000C0EF8(v4[11]);
          sub_10007A9B0(v4[7]);
          sub_10007AECC(v4[5]);
          sub_1000C0EF8(v4[1]);
          sub_1000C0EF8(v4[3]);
          sub_1000C0EF8((uint64_t)v4);
        }

        --v3;
      }

      while (v3 > 1);
    }

    sub_1000C0EF8(*(void *)(v1 + 8));
    *(void *)(v1 + 8) = 0LL;
    return (unsigned int *)sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100051924(unsigned int *a1)
{
  uint64_t v2 = sub_1000BE644(*a1, 4, 0xFFFFFFFF);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      uint64_t v4 = *(void *)(*((void *)a1 + 1) + 8 * v3);
      unsigned int v5 = sub_1000BE644(*(char *)(v4 + 64), 1, 0xFFFFFFFF);
      unsigned int v6 = sub_1000BE644(*(_DWORD *)(v4 + 68), 4, v5);
      unsigned int v7 = sub_1000BE644(*(_DWORD *)(v4 + 72), 4, v6);
      uint64_t v8 = sub_1000BE644(*(_DWORD *)(v4 + 76), 4, v7);
      uint64_t v9 = sub_1000BE4A0(*(void *)v4, v8);
      int v10 = sub_1000BE4A0(*(void *)(v4 + 16), v9);
      int v11 = sub_10007B06C(*(void *)(v4 + 32));
      int v12 = sub_10007AA4C(*(void *)(v4 + 48));
      int v13 = *(_DWORD *)(v4 + 76);
      if (v13 >= 1)
      {
        int v14 = v12;
        int v15 = sub_1000BE770(*(unint64_t **)(v4 + 80), 4, v13, 0xFFFFFFFFLL);
        uint64_t v2 = sub_1000BE644(v11 + v10 + v14 + v15, 4, v2);
      }

      ++v3;
    }

    while (v3 < (int)*a1);
  }

  return v2;
}

uint64_t sub_100051A4C( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BCAE8(a1, "bep0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    int v23 = 0;
    if (sub_1000BCD38((uint64_t)v8, &v23))
    {
      uint64_t v10 = v23;
      if (!v23)
      {
LABEL_31:
        uint64_t v12 = 0LL;
        goto LABEL_32;
      }

      int v11 = (_DWORD *)sub_1000C1074(16LL);
      if (v11)
      {
        uint64_t v12 = (uint64_t)v11;
        _DWORD *v11 = v10;
        uint64_t v13 = sub_1000C1074(8LL * (int)v10);
        *(void *)(v12 + 8) = v13;
        if (v13)
        {
          if ((int)v10 < 1)
          {
LABEL_10:
            if (v23 < 1)
            {
LABEL_32:
              sub_1000BCBC8(v9);
              return v12;
            }

            uint64_t v16 = 0LL;
            while (1)
            {
              uint64_t v17 = *(void *)(*(void *)(v12 + 8) + 8 * v16);
              *(void *)uint64_t v17 = *(void *)(v17 + 8);
              *(void *)(v17 + 16) = *(void *)(v17 + 24);
              uint64_t v18 = sub_10007B148(v9);
              *(void *)(v17 + 40) = v18;
              if (!v18) {
                goto LABEL_30;
              }
              *(void *)(v17 + 32) = v18;
              BOOL v19 = sub_10007AABC(v9);
              *(void *)(v17 + 56) = v19;
              if (!v19) {
                goto LABEL_30;
              }
              *(void *)(v17 + 48) = v19;
              int v22 = 0;
              uint64_t v20 = (void *)(v17 + 88);
              if (*v20)
              {
                if (v22 != *(_DWORD *)(v17 + 76)) {
                  goto LABEL_30;
                }
                *(void *)(v17 + 80) = *v20;
              }

              *(void *)(*(void *)(v12 + 8) + 8 * v16++) = v17;
              if (v16 >= v23) {
                goto LABEL_32;
              }
            }
          }

          uint64_t v14 = 0LL;
          uint64_t v15 = 8 * v10;
          while (1)
          {
            *(void *)(*(void *)(v12 + 8) + v14) = sub_1000C1074(96LL);
            if (!*(void *)(*(void *)(v12 + 8) + v14)) {
              break;
            }
            v14 += 8LL;
            if (v15 == v14) {
              goto LABEL_10;
            }
          }

          sub_100051884((unsigned int *)v12);
        }

        else
        {
          sub_1000C0EF8(v12);
        }
      }
    }

    uint64_t v12 = 0LL;
LABEL_30:
    sub_100051884((unsigned int *)v12);
    goto LABEL_31;
  }

  return 0LL;
}

uint64_t sub_100051C50(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v9 = (void *)sub_1000C1074(1072LL);
  uint64_t v10 = (uint64_t)v9;
  if (v9)
  {
    memcpy(v9, &off_1000F91F0, 0x208uLL);
    *(void *)(v10 + 376) = a1;
    *(void *)(v10 + 384) = a2;
    *(_DWORD *)(v10 + 432) = a3;
    *(_DWORD *)(v10 + 368) = 1;
    if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 1776))
    {
      if (a4)
      {
        *(_DWORD *)(v10 + 608) = a4;
      }

      else
      {
        *(void *)(v10 + 656) = sub_1000045EC();
        *(_DWORD *)(v10 + 608) = 0;
      }

uint64_t sub_100051D80(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 532) = 0;
  *(_WORD *)(a1 + 544) = 0x4000;
  *(_DWORD *)(a1 + 568) = 0;
  int v4 = sub_10000462C(*(void *)(a1 + 384));
  uint64_t v5 = 0LL;
  *(_DWORD *)(a1 + 528) = v4;
  *(void *)(a1 + 456) = 0xFFFFFFFFLL;
  if (v4 > 2) {
    return v5;
  }
  *(void *)(a1 + 920) = sub_1000570F8;
  *(void *)(a1 + 968) = sub_1000575F8;
  *(void *)(a1 + 944) = sub_100054050;
  *(void *)(a1 + 952) = sub_1000540E4;
  *(void *)(a1 + 928) = sub_1000540EC;
  *(void *)(a1 + 976) = sub_100054108;
  *(void *)(a1 + 936) = sub_10005430C;
  *(void *)(a1 + 960) = sub_100056BA8;
  uint64_t v6 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    *(_DWORD *)(a1 + 596) = *(_DWORD *)(qword_1000FDCC0 + 3728);
    uint64_t v6 = *(void *)(v6 + 3296);
  }

  else
  {
    *(_DWORD *)(a1 + 596) = 0;
  }

  *(_WORD *)(a1 + 806) = v6;
  *(_WORD *)(a1 + 572) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 736) = sub_10005DD24();
  uint64_t v7 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
    *(_DWORD *)(a1 + 812) = 0;
    *(_WORD *)(a1 + 554) = 0;
    uint64_t v13 = sub_1000C1074(0LL);
    *(void *)(a1 + 816) = v13;
    if (v13) {
      goto LABEL_7;
    }
    return 0LL;
  }

  uint64_t v8 = *(void *)(qword_1000FDCC0 + 3520);
  *(_DWORD *)(a1 + 812) = v8;
  *(_WORD *)(a1 + 554) = *(void *)(v7 + 3240);
  uint64_t v9 = sub_1000C1074(4LL * (int)v8);
  *(void *)(a1 + 816) = v9;
  if (!v9) {
    return 0LL;
  }
LABEL_7:
  *(_DWORD *)(a1 + 824) = 0;
  if (qword_1000FDCC0)
  {
    uint64_t v10 = *(void *)(qword_1000FDCC0 + 4144);
    if (v10)
    {
      uint64_t v11 = *(void *)(qword_1000FDCC0 + 4136);
      if (v11)
      {
        int v12 = *(_DWORD *)(qword_1000FDCC0 + 4720)
           && *(uint64_t *)(qword_1000FDCC0 + 4128) >= 1
           && *(_DWORD *)(qword_1000FDCC0 + 5340) == 0;
        *(void *)(a1 + 472) = sub_1000D0010(0LL, *(void *)(a1 + 376), a2, v11, v10, 0, v12, 0);
      }
    }
  }

  *(_WORD *)(a1 + 804) = sub_100004688(*(void *)(a1 + 384));
  int v15 = sub_1000045F4(*(void *)(a1 + 384));
  uint64_t v16 = sub_1000C1074(v15);
  *(void *)(a1 + 616) = v16;
  if (!v16) {
    return 0LL;
  }
  if (qword_1000FDCC0)
  {
    uint64_t v17 = *(void *)(qword_1000FDCC0 + 584);
    if (v17 >= 1)
    {
      uint64_t v18 = sub_1000C1074(8 * v17);
      *(void *)(a1 + 640) = v18;
      if (!v18) {
        return 0LL;
      }
      uint64_t v19 = qword_1000FDCC0 ? *(void *)(qword_1000FDCC0 + 584) : 0LL;
      int v20 = sub_1000045F4(*(void *)(a1 + 384));
      uint64_t v21 = sub_1000C1074(v19 * v20);
      *(void *)(a1 + 624) = v21;
      if (!v21) {
        return 0LL;
      }
      uint64_t v22 = qword_1000FDCC0;
      if (qword_1000FDCC0)
      {
        uint64_t v23 = 0LL;
        int v24 = 0;
        do
        {
          if (*(void *)(v22 + 584) <= v23) {
            break;
          }
          *(void *)(*(void *)(a1 + 640) + 8 * v23) = *(void *)(a1 + 624) + v24;
          v24 += sub_1000045F4(*(void *)(a1 + 384));
          ++v23;
          uint64_t v22 = qword_1000FDCC0;
        }

        while (qword_1000FDCC0);
      }
    }
  }

  sub_10003AF54(a1);
  if (!*(void *)(a1 + 408)) {
    return 0LL;
  }
  if (!qword_1000FDCC0)
  {
    uint64_t v5 = 1LL;
    sub_100038FBC(a1, 1, 0);
    if (*(void *)(a1 + 376)) {
      goto LABEL_35;
    }
    return v5;
  }

  uint64_t v5 = 1LL;
  sub_100038FBC(a1, 1, *(_DWORD *)(qword_1000FDCC0 + 5368));
  if (!*(void *)(a1 + 376)) {
    return v5;
  }
LABEL_35:
  uint64_t v25 = *(void *)(a1 + 656);
  if (v25) {
    sub_100062F3C(v25, *(unsigned int *)(a1 + 528));
  }
  uint64_t v26 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    int v27 = *(_DWORD *)(qword_1000FDCC0 + 3160);
    *(_DWORD *)(a1 + 744) = v27;
    if (v27 <= 65533)
    {
      LODWORD(v26) = *(_DWORD *)(v26 + 3144);
      goto LABEL_41;
    }

    return 0LL;
  }

  *(_DWORD *)(a1 + 744) = 0;
LABEL_41:
  *(_DWORD *)(a1 + 700) = v26;
  uint64_t v28 = sub_1000C1074(2LL * (int)v26);
  *(void *)(a1 + 688) = v28;
  if (!v28) {
    return 0LL;
  }
  *(_DWORD *)(a1 + 696) = 0;
  *(void *)(a1 + 728) = 0LL;
  uint64_t v29 = *(void *)(a1 + 656);
  if (v29)
  {
    if (sub_100062FD0(v29))
    {
      if (qword_1000FDCC0)
      {
        int v30 = *(_DWORD *)(qword_1000FDCC0 + 4508);
        int v31 = *(_DWORD *)(qword_1000FDCC0 + 4512);
      }

      else
      {
        int v30 = 0;
        int v31 = 0;
      }

      uint64_t v32 = sub_10009AA7C(1, v30, v31, 0, 1, *(uint64_t **)(a1 + 376), *(void *)(a1 + 384));
      *(void *)(a1 + 728) = v32;
      if (!v32) {
        return 0LL;
      }
    }
  }

  uint64_t v33 = (_DWORD *)qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    *(_DWORD *)(a1 + 916) = *(void *)(qword_1000FDCC0 + 3064);
    int v34 = v33[762];
    int v35 = v33[774];
    int v36 = v33[808];
    int v37 = v33[737];
    LODWORD(v33) = v33[796];
  }

  else
  {
    int v37 = 0;
    int v35 = 0;
    int v34 = 0;
    int v36 = 0;
    *(_DWORD *)(a1 + 916) = 0;
  }

  *(_DWORD *)(a1 + 896) = v34;
  *(_DWORD *)(a1 + 900) = v35;
  *(_DWORD *)(a1 + 904) = v36;
  *(_DWORD *)(a1 + 908) = v37;
  *(_DWORD *)(a1 + 912) = (_DWORD)v33;
  return 1LL;
}

uint64_t sub_100052160(uint64_t *a1)
{
  uint64_t v2 = a1[59];
  if (v2) {
    sub_1000D0174(v2);
  }
  uint64_t v3 = a1[92];
  if (v3) {
    sub_10005DD98(v3);
  }
  sub_1000C0EF8(a1[77]);
  int v4 = (_DWORD *)a1[82];
  if (v4) {
    sub_1000600D0(v4);
  }
  sub_1000C0EF8(a1[86]);
  sub_1000C0EF8(a1[78]);
  sub_1000C0EF8(a1[80]);
  sub_1000C0EF8(a1[128]);
  sub_1000C0EF8(a1[130]);
  uint64_t v5 = a1[91];
  if (v5) {
    sub_10009ACA8(v5);
  }
  sub_100006EFC(a1[51]);
  return sub_1000C0EF8((uint64_t)a1);
}

uint64_t sub_100052200( uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, int a8, int a9)
{
  uint64_t v9 = *a2;
  if (!(_DWORD)v9) {
    return result;
  }
  uint64_t v11 = (_DWORD *)a3;
  int v12 = a2;
  uint64_t v13 = result;
  int v14 = a9;
  int v87 = 0LL;
  if (!a9)
  {
    uint64_t v84 = 0LL;
    uint64_t v85 = 0LL;
    uint64_t v16 = v9;
    uint64_t v86 = a3;
    goto LABEL_7;
  }

  if ((int)v9 < 1)
  {
    uint64_t v16 = 0LL;
  }

  else
  {
    if ((_DWORD)v9 == 1)
    {
      uint64_t v15 = 0LL;
      LODWORD(v16) = 0;
    }

    else
    {
      int v33 = 0;
      int v34 = 0;
      uint64_t v15 = v9 & 0xFFFFFFFE;
      int v35 = (_DWORD *)(a3 + 132);
      uint64_t v36 = v15;
      do
      {
        v33 += 1 << (*(v35 - 32) - 1);
        v34 += 1 << (*v35 - 1);
        v35 += 64;
        v36 -= 2LL;
      }

      while (v36);
      uint64_t v16 = (v34 + v33);
      if (v15 == v9) {
        goto LABEL_31;
      }
    }

    uint64_t v37 = v9 - v15;
    uint64_t v38 = (int *)(a3 + (v15 << 7) + 4);
    do
    {
      int v39 = *v38;
      v38 += 32;
      uint64_t v16 = ((1 << (v39 - 1)) + v16);
      --v37;
    }

    while (v37);
  }

uint64_t sub_1000527CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned int a10)
{
  uint64_t v16 = *(void *)(a1 + 656);
  uint64_t v17 = sub_100056BA8;
  uint64_t v18 = sub_100054108;
  uint64_t v19 = sub_1000540EC;
  int v20 = sub_100054050;
  int v21 = sub_1000575F8;
  int v22 = sub_1000570F8;
  if ((_DWORD)a6 != 1)
  {
    int v22 = sub_100054BE8;
    int v21 = sub_100055138;
    int v20 = sub_1000544D0;
  }

  int v23 = sub_1000540E4;
  if ((_DWORD)a6 != 1) {
    int v23 = sub_100054580;
  }
  *(void *)(a1 + 920) = v22;
  *(void *)(a1 + 968) = v21;
  *(void *)(a1 + 944) = v20;
  if ((_DWORD)a6 != 1) {
    uint64_t v19 = (void (*)(uint64_t))nullsub_9;
  }
  *(void *)(a1 + 952) = v23;
  if ((_DWORD)a6 != 1) {
    uint64_t v18 = sub_10005458C;
  }
  *(void *)(a1 + 928) = v19;
  *(void *)(a1 + 976) = v18;
  int v24 = sub_10005430C;
  if ((_DWORD)a6 != 1) {
    int v24 = sub_10005459C;
  }
  *(void *)(a1 + 936) = v24;
  if ((_DWORD)a6 != 1) {
    uint64_t v17 = sub_1000546D8;
  }
  *(void *)(a1 + 960) = v17;
  if ((_DWORD)a6 != 1)
  {
    sub_1000C0EF8(*(void *)(a1 + 856));
    *(void *)(a1 + 856) = 0LL;
    if (*(void *)(a1 + 832)) {
      goto LABEL_19;
    }
    if (*(void *)(a1 + 376))
    {
      if (qword_1000FDCC0)
      {
LABEL_24:
        LODWORD(v28) = *(_DWORD *)(qword_1000FDCC0 + 2984);
        goto LABEL_35;
      }
    }

    else if (qword_1000FDCC0)
    {
      uint64_t v28 = *(void *)(qword_1000FDCC0 + 2992);
      if (!v28) {
        goto LABEL_24;
      }
LABEL_35:
      *(_DWORD *)(a1 + 880) = v28;
      if (!(_DWORD)v28) {
        return 0LL;
      }
      uint64_t v30 = sub_1000C1074(12LL * (int)v28);
      *(void *)(a1 + 832) = v30;
      if (!v30) {
        return 0LL;
      }
      *(void *)(a1 + 840) = v30 + 12LL * *(int *)(a1 + 880);
      goto LABEL_19;
    }

    LODWORD(v28) = 0;
    goto LABEL_35;
  }

  sub_1000C0EF8(*(void *)(a1 + 832));
  *(void *)(a1 + 832) = 0LL;
  if (*(void *)(a1 + 856)) {
    goto LABEL_19;
  }
  LODWORD(v25) = qword_1000FDCC0;
  if (*(void *)(a1 + 376))
  {
    if (!qword_1000FDCC0) {
      goto LABEL_28;
    }
    goto LABEL_17;
  }

  if (qword_1000FDCC0)
  {
    if (!*(void *)(qword_1000FDCC0 + 3088))
    {
LABEL_17:
      LODWORD(v25) = *(_DWORD *)(qword_1000FDCC0 + 3080);
      goto LABEL_28;
    }

    uint64_t v25 = *(void *)(qword_1000FDCC0 + 3088);
  }

uint64_t *sub_100052A3C(uint64_t *result, const void *a2, int *a3)
{
  uint64_t v5 = result;
  int v6 = *((_DWORD *)result + 162);
  uint64_t v7 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_24;
  }
  if (*(uint64_t *)(qword_1000FDCC0 + 584) >= 1 && v6 != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = *(void **)result[80];
    if (qword_1000FDCC0) {
      goto LABEL_9;
    }
    while (1)
    {
      uint64_t v12 = v7 - 1;
      uint64_t v13 = result[80];
      if (v12 <= v9) {
        break;
      }
      uint64_t v11 = (void *)(v13 + 8 * v9++);
      void *v11 = v11[1];
      uint64_t v7 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
LABEL_9:
      }
        uint64_t v7 = *(void *)(v7 + 584);
    }

    *(void *)(v13 + 8 * v9) = v10;
    int v14 = sub_1000045F4(result[48]);
    uint64_t result = (uint64_t *)memcpy(v10, a2, v14);
    uint64_t v15 = *((int *)v5 + 163);
    uint64_t v7 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(void *)(qword_1000FDCC0 + 584) - 1LL > v15)
      {
LABEL_13:
        *((_DWORD *)v5 + 163) = v15 + 1;
        return result;
      }
    }

    else if (v15 < -1)
    {
      goto LABEL_13;
    }

    a2 = *(const void **)v5[80];
    if (!qword_1000FDCC0) {
      goto LABEL_24;
    }
  }

  if (!*(_DWORD *)(v7 + 3224) || *((_DWORD *)v5 + 151))
  {
    if (!*(_DWORD *)(v7 + 3272) && !*(_DWORD *)(v7 + 3276) || *((__int16 *)v5 + 286) < 1)
    {
      uint64_t v17 = 0x4000LL;
      int v18 = *(_DWORD *)(v7 + 3272);
      if (!v18) {
        goto LABEL_29;
      }
LABEL_27:
      if (*((__int16 *)v5 + 286) < 1)
      {
        LOBYTE(v18) = 0;
        int v24 = *a3;
        if (*((_DWORD *)v5 + 227))
        {
LABEL_30:
          if (*((_DWORD *)v5 + 150))
          {
            uint64_t v19 = (void *)v5[77];
            int v20 = sub_1000045F4(v5[48]);
            memcpy(v19, a2, v20);
            *((_DWORD *)v5 + 158) = *a3;
          }

          else if ((v18 & 1) == 0 && *(_DWORD *)(v7 + 2968))
          {
            int v24 = *((_DWORD *)v5 + 158);
            a2 = (const void *)v5[77];
          }
        }

uint64_t sub_100052D28(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 928))();
  int v9 = *(_DWORD *)(a1 + 524);
  if (v9 != 5)
  {
    if (v9 == 1) {
      *(_DWORD *)(a1 + 524) = 0;
    }
    uint64_t result = sub_10003941C(a1, *(unsigned int *)(a1 + 428), v3, v4, v5, v6, v7, v8);
    if ((_DWORD)result) {
      return sub_10003991C(a1);
    }
  }

  return result;
}

uint64_t sub_100052D84(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a1 + 12) - *(_DWORD *)(a2 + 12));
}

uint64_t sub_100052D94(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((int)sub_10000462C(a4) <= 2)
  {
    uint64_t v10 = sub_1000633FC(a1, a2, a4, a3);
    if (v10)
    {
      uint64_t v11 = v10;
      if ((int)sub_10000462C(a4) <= 2)
      {
        uint64_t v12 = (void *)sub_1000C1074(1072LL);
        uint64_t v13 = (uint64_t)v12;
        if (!v12) {
          return v13;
        }
        memcpy(v12, &off_1000F91F0, 0x208uLL);
        *(void *)(v13 + 376) = a3;
        *(void *)(v13 + 384) = a4;
        *(_DWORD *)(v13 + 432) = a5;
        *(void *)(v13 + 656) = v11;
        sub_100052160((uint64_t *)v13);
      }
    }
  }

  return 0LL;
}

uint64_t sub_100052E74(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 808);
  uint64_t v3 = *(void *)(a1 + 384);
  uint64_t v4 = *(unsigned __int16 *)(a1 + 804);
  uint64_t result = *(unsigned __int16 *)(*(void *)(v3 + 1792) + 2 * v4);
  if ((_DWORD)result == 0x4000) {
    uint64_t result = sub_100015BC0(v3, v4);
  }
  uint64_t v6 = *(__int16 **)(a1 + 816);
  int v9 = 0;
  if (v2 > 0)
  {
    int v7 = (__int16)(result - *(_WORD *)(a1 + 994));
    do
    {
      while (1)
      {
        int v8 = v6[1] + v7;
        if (v8 < 0x4000) {
          break;
        }
        uint64_t result = (uint64_t)j__memmove(v6, v6 + 2, 4 * (--v2 - v9));
        if (v9 >= v2) {
          return result;
        }
      }

      v6[1] = v8;
      if ((__int16)v8 < *(__int16 *)(a1 + 996))
      {
        *(_WORD *)(a1 + 996) = v8;
      }

      v6 += 2;
      ++v9;
    }

    while (v9 < v2);
  }

  return result;
}

uint64_t sub_100052F8C(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 808);
  uint64_t v4 = (int)v3;
  if (*(__int16 *)(result + 996) > a2)
  {
    *(_WORD *)(result + 996) = a2;
  }

  uint64_t v5 = *(void *)(result + 816);
  if ((int)v3 >= *(_DWORD *)(result + 812))
  {
    if ((int)v3 < 1)
    {
      unsigned __int16 v9 = 0;
      uint64_t v13 = -1LL;
      if (a2 >= 0)
      {
LABEL_19:
      }
    }

    else
    {
      uint64_t v8 = 0LL;
      unsigned __int16 v9 = 0;
      uint64_t v10 = (unsigned __int16 *)(v5 + 2);
      int v11 = -1;
      do
      {
        int v12 = (__int16)*v10;
        if (*(v10 - 1) == a3)
        {
          if (v12 > a2) {
            unsigned __int16 *v10 = a2;
          }
          return result;
        }

        if (v12 > (__int16)v9)
        {
          int v11 = v8;
          unsigned __int16 v9 = *v10;
        }

        ++v8;
        v10 += 2;
      }

      while (v3 != v8);
      uint64_t v13 = v11;
    }

    int v14 = (_WORD *)(v5 + 4 * v13);
    v14[1] = a2;
    *int v14 = a3;
    return result;
  }

  if ((int)v3 < 1)
  {
LABEL_9:
    int v7 = (_WORD *)(v5 + 4 * v4);
    *int v7 = a3;
    v7[1] = a2;
    ++*(_DWORD *)(result + 808);
  }

  else
  {
    uint64_t v6 = (__int16 *)(v5 + 2);
    while ((unsigned __int16)*(v6 - 1) != a3)
    {
      v6 += 2;
      if (!--v3) {
        goto LABEL_9;
      }
    }

    if (*v6 > a2) {
      __int16 *v6 = a2;
    }
  }

  return result;
}

uint64_t sub_1000530BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  int v3 = sub_100062F94(v2);
  int v4 = sub_100062F9C(v2);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 696);
    if (v5 < 1) {
      goto LABEL_11;
    }
    uint64_t v6 = *(void *)(a1 + 688);
    int v7 = *(_DWORD *)(a1 + 744);
    if (*(_DWORD *)(a1 + 708))
    {
      uint64_t result = sub_100061BFC(v2, v6, v5, v7, 0);
      if (!(_DWORD)result) {
        return result;
      }
      goto LABEL_11;
    }

    uint64_t result = sub_100062210(v2, v6, v5, v7, 0);
    if ((_DWORD)result)
    {
LABEL_11:
      *(_DWORD *)(a1 + 696) = 0;
      if (*(_DWORD *)(a1 + 744)) {
        int v9 = *(_DWORD *)(a1 + 744);
      }
      else {
        int v9 = 65533;
      }
      *(_DWORD *)(a1 + 704) = sub_1000619DC(*(void *)(a1 + 656), v9);
      if (qword_1000FDCC0)
      {
        if (*(_DWORD *)(qword_1000FDCC0 + 5360)) {
          sub_100062A38(v2, (v3 - 1), *(unsigned int *)(a1 + 528));
        }
      }

      return 1LL;
    }
  }

  else
  {
    uint64_t result = sub_1000531C0(a1);
    ++v3;
    if ((_DWORD)result) {
      goto LABEL_11;
    }
  }

  return result;
}

uint64_t sub_1000531C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  uint64_t v3 = sub_100062F94(v2);
  int v4 = sub_1000BBBA0(*(void *)(a1 + 376));
  uint64_t result = sub_1000C1074(2LL * v4);
  if (result)
  {
    uint64_t v6 = (unsigned __int16 *)result;
    int v9 = 0;
    sub_1000BBBA8(*(void *)(a1 + 376), result, v4);
    sub_1000601F4(*(uint64_t **)(a1 + 376), *(void *)(a1 + 384), v6, v4, 0, 0LL, 0LL);
    int v7 = sub_100060520( *(void *)(a1 + 656),  *(uint64_t **)(a1 + 376),  *(void *)(a1 + 384),  v4,  v6,  0LL,  0,  0x7FFFFFFF,  0x7FFFFFFF,  0LL,  *(_DWORD *)(a1 + 744),  (int)&_mh_execute_header,  (unint64_t)&_mh_execute_header >> 32,  &v9,  0LL);
    sub_1000C0EF8((uint64_t)v6);
    if (v7)
    {
      if (*(_DWORD *)(a1 + 744)) {
        int v8 = *(_DWORD *)(a1 + 744);
      }
      else {
        int v8 = 65533;
      }
      *(_DWORD *)(a1 + 704) = sub_1000619DC(v2, v8);
      if (qword_1000FDCC0)
      {
        if (*(_DWORD *)(qword_1000FDCC0 + 5360)) {
          sub_100062A38(v2, v3, *(unsigned int *)(a1 + 528));
        }
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100053308(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 656);
  uint64_t result = sub_100062F94(v2);
  if (*(void *)(a1 + 376))
  {
    uint64_t v4 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      int v5 = result;
      if (*(_DWORD *)(qword_1000FDCC0 + 3284))
      {
        *(_WORD *)(a1 + 580) = -1;
        *(_DWORD *)(a1 + 584) = 0;
      }

      if (*(_DWORD *)(v4 + 5264))
      {
        int v6 = *(_DWORD *)(a1 + 584);
        if (v6)
        {
          if ((int)result >= 1)
          {
            int v7 = 0;
            uint64_t v8 = *(unsigned __int16 *)(a1 + 2LL * (v6 - 1) + 580);
            do
              uint64_t result = sub_100062B2C(*(void *)(a1 + 376), v2, v7++, *(unsigned int *)(a1 + 528), v8);
            while (v5 != v7);
          }
        }

        else
        {
          return sub_1000627EC(v2, *(unsigned int *)(a1 + 528));
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000533D8(uint64_t a1, int a2)
{
  __int16 v3 = *(_WORD *)(a1 + 994);
  else {
    int v4 = (__int16)(v3 + *(_WORD *)(a1 + 548));
  }
  int v5 = *(_DWORD *)(a1 + 752);
  if (v5 <= 0x3FFFFFFF)
  {
    int v6 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v6 = *(_DWORD *)(qword_1000FDCC0 + 5224);
    }
    v4 -= (*(_DWORD *)(a1 + 568) + *(__int16 *)(a1 + 544) - (v5 + v6)) & ~((*(_DWORD *)(a1 + 568)
                                                                          + *(__int16 *)(a1 + 544)
                                                                          - (v5
                                                                           + v6)) >> 31);
    *(_DWORD *)(a1 + 752) = 0x40000000;
  }

  int v7 = v3 & ~(v3 >> 31);
  int v9 = sub_10005DDF8(*(int **)(a1 + 736), *(_DWORD *)(a1 + 536), (unsigned __int16)(v3 & ~(v3 >> 15)), (__int16)v4);
  if (qword_1000FDCC0)
  {
    uint64_t v10 = *(void *)(qword_1000FDCC0 + 3200);
    uint64_t v11 = v10 + (unsigned __int16)v7;
    __int16 v12 = v7 + v10;
    if (v11 <= v9) {
      LOWORD(v4) = v9;
    }
    else {
      LOWORD(v4) = v12;
    }
    int v13 = *(__int16 *)(a1 + 996);
    int v14 = *(unsigned __int16 *)(a1 + 996);
  }

  else
  {
    if (v7 <= v9) {
      LOWORD(v4) = v9;
    }
    else {
      LOWORD(v4) = v7;
    }
    int v13 = *(__int16 *)(a1 + 996);
    int v14 = *(unsigned __int16 *)(a1 + 996);
  }

  if (v14 != 0x4000)
  {
    uint64_t v15 = *(unsigned __int16 *)(a1 + 994);
    if (qword_1000FDCC0)
    {
      uint64_t v16 = *(void *)(qword_1000FDCC0 + 3248) + v15;
      double v17 = *(double *)(qword_1000FDCC0 + 3264);
    }

    else
    {
      double v17 = 0.0;
      LOWORD(v16) = *(_WORD *)(a1 + 994);
    }

    double v18 = v17 * (double)(v13 - (__int16)v15);
  }

BOOL sub_100053590(_DWORD *a1)
{
  if (sub_1000B2750(a1 + 189)) {
    return 1LL;
  }
  if (a1[226] && a1[130] == 1 && a1[148]) {
    return 1LL;
  }
  return sub_1000398FC((uint64_t)a1);
}

uint64_t sub_100053604(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(_DWORD *)(result + 568) + *(__int16 *)(result + 544);
  int v4 = *(__int16 *)(result + 996);
  if (v4 == 0x4000)
  {
    *a3 = 0x40000000;
    int v5 = *(__int16 *)(result + 712);
    if (v5 != 0x4000)
    {
LABEL_3:
      *a4 = *(_DWORD *)(result + 568) + v5;
      return result;
    }
  }

  else
  {
    *a3 = *(_DWORD *)(result + 568) + v4;
    int v5 = *(__int16 *)(result + 712);
    if (v5 != 0x4000) {
      goto LABEL_3;
    }
  }

  *a4 = 0x40000000;
  return result;
}

uint64_t sub_100053668(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 656);
  uint64_t result = sub_1000530BC(a1);
  if ((_DWORD)result) {
    return sub_10006314C(v5, a2, a3);
  }
  return result;
}

uint64_t *sub_1000536B8( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 656);
  uint64_t v10 = sub_1000633A8(v9, a2, a3, a4, a5, a6, a7, a8);
  if ((int)sub_100062F9C(v9) >= 1)
  {
    if (*(_DWORD *)(a1 + 744)) {
      int v11 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v11 = 65533;
    }
    *(_DWORD *)(a1 + 704) = sub_1000619DC(v9, v11);
  }

  return v10;
}

uint64_t sub_100053720(uint64_t a1)
{
  return *(unsigned int *)(a1 + 524);
}

uint64_t sub_100053728(uint64_t a1)
{
  return *(__int16 *)(a1 + 572);
}

uint64_t sub_100053730(unsigned int *a1, int a2)
{
  uint64_t result = a1[131];
  if ((_DWORD)result == 1)
  {
    int v4 = sub_1000B27FC(a1 + 189, a2, 0);
    uint64_t result = 1LL;
    if (v4 == 2)
    {
      if (a1[202]) {
        return 2LL;
      }
      else {
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t sub_100053780(uint64_t result)
{
  *(_DWORD *)(result + 524) = 3;
  return result;
}

uint64_t sub_10005378C(uint64_t a1)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1000537BC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = (a5 - 1);
  if ((int)a5 < 1)
  {
    LOWORD(v13) = 0;
  }

  else
  {
    uint64_t v9 = (unsigned __int8 *)a7;
    uint64_t v10 = (unsigned int *)a6;
    int v11 = a5;
    int v13 = sub_100039A64(a1, a2, a3, a4, a5, a6, a7, a8) + *(_DWORD *)(a1 + 896) + v8 * *(unsigned __int16 *)(a1 + 562);
    if (*(_DWORD *)(a1 + 520) == 1) {
      LOWORD(v13) = *(_WORD *)(a1 + 806) + v13;
    }
    if (*(_WORD *)(a1 + 564))
    {
      __int16 v30 = *(_WORD *)(a1 + 564);
      int v14 = *(uint64_t **)(a1 + 376);
      uint64_t v29 = 2LL * (int)(sub_1000B32A0(v14) + 1);
      BOOL v22 = (_DWORD *)sub_1000CAF58(v29, v15, v16, v17, v18, v19, v20, v21);
      int v23 = 0;
      uint64_t v24 = v11;
      do
      {
        unsigned int v25 = *v10++;
        unsigned int v26 = sub_1000BB8B0((uint64_t)v14, v25);
        v23 += sub_1000B9044(v14, v26, v22);
        --v24;
      }

      while (v24);
      sub_1000CB038(v22, v29);
      LOWORD(v13) = v13 + v30 * v23;
    }

    if (v9 && v11 >= 2)
    {
      do
      {
        if (*v9++) {
          LOWORD(v13) = *(_WORD *)(a1 + 560) + v13;
        }
        --v8;
      }

      while (v8);
    }
  }

  return (__int16)v13;
}

uint64_t sub_1000538E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 944))();
}

uint64_t sub_1000538EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 952))();
}

uint64_t sub_1000538F8(uint64_t a1)
{
  return *(__int16 *)(a1 + 574);
}

uint64_t sub_100053900(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 568) + *(__int16 *)(a1 + 544));
}

uint64_t sub_100053910(uint64_t result, int a2)
{
  *(_DWORD *)(result + 752) = a2;
  return result;
}

double sub_100053918(_DWORD *a1, int a2)
{
  if (a2 < 0) {
    int v2 = -1;
  }
  else {
    int v2 = a2;
  }
  if (v2 >= 1) {
    int v2 = 1;
  }
  uint64_t v3 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    a1[225] = *(_DWORD *)(qword_1000FDCC0 + 3096) + *(_DWORD *)(qword_1000FDCC0 + 3104) * v2;
    a1[224] = *(_DWORD *)(v3 + 3048) + *(_DWORD *)(v3 + 3056) * v2;
    a1[229] = *(void *)(v3 + 3064) + *(void *)(v3 + 3072) * v2;
  }

  else
  {
    double result = 0.0;
    *((void *)a1 + 112) = 0LL;
    a1[229] = 0;
  }

  return result;
}

uint64_t sub_100053984(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 608)) {
    return 1LL;
  }
  if (!*(_DWORD *)(a1 + 700)) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 656);
  if (sub_100062F9C(v5))
  {
    if (*(_DWORD *)(a1 + 744)) {
      int v6 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v6 = 65533;
    }
    int v7 = sub_1000B3C5C(*(uint64_t **)(a1 + 376), a2);
    if (v7 > *(_DWORD *)(a1 + 700)) {
      return 0LL;
    }
    int v8 = v7;
    uint64_t v9 = (int16x8_t *)sub_1000C1074(2LL * v7);
    if (!v9) {
      return 0LL;
    }
    uint64_t v10 = v9;
    sub_1000B39A4(*(void *)(a1 + 376), a2, v9, v8);
    int v11 = *(_DWORD *)(a1 + 696);
    if (!*(_DWORD *)(a1 + 708))
    {
      if (v11 >= 1)
      {
        *(_DWORD *)(a1 + 704) = sub_1000619DC(v5, v6);
      }

      int v11 = 0;
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 708) = 1;
    }

    if (v11 + v8 > *(_DWORD *)(a1 + 700))
    {
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 704) = sub_1000619DC(v5, v6);
    }

    int v25 = 0;
    if (v8 < 1)
    {
      int v16 = *(_DWORD *)(a1 + 704);
      int v17 = v16;
      if (v16 < 0) {
        goto LABEL_22;
      }
    }

    else
    {
      int v12 = 0;
      uint64_t v13 = v8;
      int v14 = v10;
      do
      {
        unsigned int v15 = v14->u16[0];
        int v14 = (int16x8_t *)((char *)v14 + 2);
        sub_1000619F0(v5, v15, *(_DWORD *)(a1 + 744), &v25);
        v12 += v25;
        --v13;
      }

      while (v13);
      int v16 = *(_DWORD *)(a1 + 704);
      int v17 = v16 - v12;
      if (v16 < v12)
      {
LABEL_22:
        int v18 = *(_DWORD *)(a1 + 696);
        if (v18 < 1
          || (int v19 = sub_100061BFC(v5, *(void *)(a1 + 688), v18, *(_DWORD *)(a1 + 744), 0),
              int v16 = sub_1000619DC(v5, v6),
              *(_DWORD *)(a1 + 704) = v16,
              v19))
        {
          if (v8 < 1)
          {
            int v20 = 0;
          }

          else
          {
            int v20 = 0;
            uint64_t v21 = v8;
            BOOL v22 = v10;
            do
            {
              unsigned int v23 = v22->u16[0];
              BOOL v22 = (int16x8_t *)((char *)v22 + 2);
              sub_1000619F0(v5, v23, *(_DWORD *)(a1 + 744), &v25);
              v20 += v25;
              --v21;
            }

            while (v21);
            int v16 = *(_DWORD *)(a1 + 704);
          }

          if (v20 > v16)
          {
            *(_DWORD *)(a1 + 696) = 0;
            uint64_t v2 = 0LL;
            *(_DWORD *)(a1 + 704) = sub_1000619DC(v5, v6);
LABEL_38:
            sub_1000C0EF8((uint64_t)v10);
            return v2;
          }

          memcpy(*(void **)(a1 + 688), v10, 2 * v8);
          *(_DWORD *)(a1 + 696) = v8;
          *(_DWORD *)(a1 + 704) -= v20;
LABEL_37:
          uint64_t v2 = 1LL;
          goto LABEL_38;
        }

        return 0LL;
      }
    }

    *(_DWORD *)(a1 + 704) = v17;
    memcpy((void *)(*(void *)(a1 + 688) + 2LL * *(int *)(a1 + 696)), v10, 2 * v8);
    *(_DWORD *)(a1 + 696) += v8;
    goto LABEL_37;
  }

  return sub_1000531C0(a1);
}

uint64_t sub_100053C48(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 608)) {
    return 1LL;
  }
  if (!*(_DWORD *)(a1 + 700)) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 656);
  int v6 = *(_DWORD *)(a1 + 744);
  if (v6) {
    int v7 = *(_DWORD *)(a1 + 744);
  }
  else {
    int v7 = 65533;
  }
  int v8 = *(_DWORD *)(a1 + 696);
  if (*(_DWORD *)(a1 + 708))
  {
    if (v8 < *(_DWORD *)(a1 + 700)) {
      goto LABEL_19;
    }
  }

  else
  {
    if (v8 >= 1)
    {
      uint64_t result = sub_100062210(v5, *(void *)(a1 + 688), v8, *(_DWORD *)(a1 + 744), 0);
      if (!(_DWORD)result) {
        return result;
      }
      *(_DWORD *)(a1 + 704) = sub_1000619DC(v5, v7);
      int v6 = *(_DWORD *)(a1 + 744);
    }

    int v8 = 0;
    *(_DWORD *)(a1 + 696) = 0;
    *(_DWORD *)(a1 + 708) = 1;
  }

  uint64_t result = sub_100061BFC(v5, *(void *)(a1 + 688), v8, v6, 0);
  if (!(_DWORD)result) {
    return result;
  }
  *(_DWORD *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 704) = sub_1000619DC(v5, v7);
  int v6 = *(_DWORD *)(a1 + 744);
LABEL_19:
  int v11 = 0;
  sub_1000619F0(v5, a2, v6, &v11);
  if (*(_DWORD *)(a1 + 704) >= v11)
  {
    *(_WORD *)(*(void *)(a1 + 688) + 2LL * (int)(*(_DWORD *)(a1 + 696))++) = a2;
    *(_DWORD *)(a1 + 704) -= v11;
    return 1LL;
  }

  int v9 = *(_DWORD *)(a1 + 696);
  if (v9 >= 1)
  {
    int v10 = sub_100061BFC(v5, *(void *)(a1 + 688), v9, *(_DWORD *)(a1 + 744), 0);
    *(_DWORD *)(a1 + 704) = sub_1000619DC(v5, v7);
    if (!v10) {
      return 0LL;
    }
  }

  uint64_t result = sub_1000619F0(v5, a2, *(_DWORD *)(a1 + 744), &v11);
  if ((_DWORD)result)
  {
    **(_WORD **)(a1 + 688) = a2;
    *(_DWORD *)(a1 + 696) = 1;
    *(_DWORD *)(a1 + 704) -= v11;
  }

  else
  {
    *(_DWORD *)(a1 + 696) = 0;
  }

  return result;
}

uint64_t sub_100053E80(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 608)) {
    return 1LL;
  }
  int v5 = sub_1000B3C5C(*(uint64_t **)(a1 + 376), a2);
  int v6 = (int16x8_t *)sub_1000C1074(2LL * v5);
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = (uint64_t)v6;
  sub_1000B39A4(*(void *)(a1 + 376), a2, v6, v5);
  if (v5 < 1)
  {
LABEL_8:
    uint64_t v11 = 1LL;
  }

  else
  {
    uint64_t v8 = v5;
    int v9 = (__int16 *)v7;
    while (1)
    {
      __int16 v10 = *v9++;
      if (!--v8) {
        goto LABEL_8;
      }
    }

    uint64_t v11 = 0LL;
  }

  sub_1000C0EF8(v7);
  return v11;
}

uint64_t sub_100053F50(uint64_t a1, __int16 a2)
{
  if (!*(_DWORD *)(a1 + 608))
  {
    int v3 = *(_DWORD *)(a1 + 744);
    if (v3) {
      int v4 = *(_DWORD *)(a1 + 744);
    }
    else {
      int v4 = 65533;
    }
    int v5 = *(_DWORD *)(a1 + 700);
    if (!v5) {
      return 0LL;
    }
    uint64_t v7 = *(void *)(a1 + 656);
    int v8 = *(_DWORD *)(a1 + 696);
    if (*(_DWORD *)(a1 + 708))
    {
      if (v8 >= 1)
      {
        uint64_t result = sub_100061BFC(*(void *)(a1 + 656), *(void *)(a1 + 688), v8, v3, 0);
        if (!(_DWORD)result) {
          return result;
        }
        *(_DWORD *)(a1 + 704) = sub_1000619DC(v7, v4);
        int v5 = *(_DWORD *)(a1 + 700);
      }

      int v8 = 0;
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 708) = 0;
    }

    if (v8 >= v5)
    {
      uint64_t result = sub_100062210(v7, *(void *)(a1 + 688), v8, *(_DWORD *)(a1 + 744), 0);
      if (!(_DWORD)result) {
        return result;
      }
      *(_DWORD *)(a1 + 696) = 0;
      *(_DWORD *)(a1 + 704) = sub_1000619DC(v7, v4);
      int v8 = *(_DWORD *)(a1 + 696);
    }

    *(_WORD *)(*(void *)(a1 + 688) + 2LL * v8) = a2;
    ++*(_DWORD *)(a1 + 696);
    *(_DWORD *)(a1 + 524) = 4;
  }

  return 1LL;
}

BOOL sub_100054050(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  BOOL result = sub_1000B2760((_DWORD *)(a1 + 756));
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 808);
    if (v6)
    {
      if (v6 < 1)
      {
        unsigned __int16 v9 = -1;
      }

      else
      {
        uint64_t v7 = *(unsigned __int16 **)(a1 + 816);
        __int16 v8 = 0x4000;
        unsigned __int16 v9 = -1;
        do
        {
          if ((__int16)v7[1] < v8)
          {
            unsigned __int16 v9 = *v7;
            __int16 v8 = v7[1];
          }

          --v6;
        }

        while (v6);
      }

      *a3 = sub_1000BB870(*(void *)(a1 + 376), v9);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000540E4(uint64_t a1)
{
  return sub_1000D0454(*(__int128 **)(a1 + 472));
}

void sub_1000540EC(uint64_t a1)
{
}

uint64_t sub_100054108(uint64_t a1, int a2, _WORD *a3, uint64_t a4, _DWORD *a5)
{
  int v9 = *(_DWORD *)(a1 + 824);
  __int16 v10 = *(_WORD **)(a1 + 816);
  int v11 = *(_DWORD *)(a1 + 808);
  if (v9) {
    goto LABEL_30;
  }
  qsort(v10, v11, 4uLL, (int (__cdecl *)(const void *, const void *))sub_100054694);
  uint64_t v12 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
    __int16 v10 = *(_WORD **)(a1 + 816);
    __int16 v18 = v10[1];
    LODWORD(v19) = 1;
    goto LABEL_22;
  }

  if (!*(_DWORD *)(qword_1000FDCC0 + 3228) || !*(void *)(a1 + 376)) {
    goto LABEL_19;
  }
  if (*(int *)(a1 + 808) < 1)
  {
    *(_DWORD *)(a1 + 808) = 0;
LABEL_19:
    __int16 v10 = *(_WORD **)(a1 + 816);
    __int16 v18 = v10[1];
    goto LABEL_20;
  }

  uint64_t v13 = 0LL;
  int v14 = 0;
  do
  {
    int v15 = sub_1000BB868(*(void *)(a1 + 376), *(unsigned __int16 *)(*(void *)(a1 + 816) + 4 * v13), 0LL);
    if (v14 < 1)
    {
LABEL_13:
      if (v13 != v14) {
        *(_DWORD *)(*(void *)(a1 + 816) + 4LL * v14) = *(_DWORD *)(*(void *)(a1 + 816) + 4 * v13);
      }
      ++v14;
    }

    else
    {
      int v16 = v15;
      uint64_t v17 = 0LL;
      while (v16 != sub_1000BB868( *(void *)(a1 + 376),  *(unsigned __int16 *)(*(void *)(a1 + 816) + v17),  0LL))
      {
        v17 += 4LL;
      }
    }

    ++v13;
  }

  while (v13 < *(int *)(a1 + 808));
  uint64_t v12 = qword_1000FDCC0;
  *(_DWORD *)(a1 + 808) = v14;
  __int16 v10 = *(_WORD **)(a1 + 816);
  __int16 v18 = v10[1];
  if (!v12)
  {
    LODWORD(v19) = 1;
    goto LABEL_22;
  }

uint64_t sub_10005430C( uint64_t a1, int a2, _DWORD *a3, uint64_t a4, int a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  uint64_t v17 = *(void *)(a1 + 376);
  if (a7) {
    bzero(a7, a5);
  }
  int v18 = 4 * a5;
  if (a8) {
    bzero(a8, v18);
  }
  if (a9) {
    bzero(a9, v18);
  }
  if (a10) {
    bzero(a10, a5);
  }
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v19 = a11;
  unsigned __int16 v29 = 0;
  unsigned int v20 = 2 * a2;
  uint64_t v21 = a2;
  if (v17)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    while (sub_100054108(a1, v22, &v29, a4, a3) && (int)v23 + 2 < a5)
    {
      int v24 = sub_1000BB870(v17, v29);
      int v25 = (_DWORD *)(a6 + 4 * v23);
      *int v25 = v24;
      v25[1] = -1;
      ++v22;
      ++a3;
      v23 += 2LL;
      if (v21 == v22)
      {
        uint64_t v17 = v21;
        uint64_t v19 = a11;
        if (a11) {
          goto LABEL_27;
        }
        return v17;
      }
    }

    uint64_t v17 = v22;
    unsigned int v20 = v23;
    uint64_t v19 = a11;
    if (a11) {
      goto LABEL_27;
    }
  }

  else
  {
    uint64_t v26 = 0LL;
    while (sub_100054108(a1, v17, &v29, a4, a3) && (int)v26 + 2 < a5)
    {
      int v27 = (_DWORD *)(a6 + 4 * v26);
      *int v27 = v29;
      v27[1] = -1;
      ++v17;
      ++a3;
      v26 += 2LL;
      if (v21 == v17)
      {
        uint64_t v17 = v21;
        if (!a11) {
          return v17;
        }
        goto LABEL_27;
      }
    }

    unsigned int v20 = v26;
    if (!a11) {
      return v17;
    }
LABEL_27:
    if (v20) {
      memset(v19, 255, 2LL * v20);
    }
  }

  return v17;
}

uint64_t sub_1000544D0(uint64_t a1, int a2, char *a3)
{
  int v6 = *(unsigned __int16 **)(a1 + 848);
  if ((*(_WORD *)(sub_100062FAC(*(void *)(a1 + 656), *(_DWORD *)(a1 + 672)) + 4LL * *v6) & 0x7FFF) != 0
    && (uint64_t v7 = *(unsigned int *)(a1 + 528), (int)v7 >= 2))
  {
    uint64_t v8 = 0LL;
    LODWORD(v9) = 0;
    signed __int16 v10 = v6[1];
    uint64_t v11 = v7 - 1;
    do
    {
      int v12 = (__int16)v6[v8++ + 2];
      if (v12 < v10)
      {
        LODWORD(v9) = v8;
        signed __int16 v10 = v12;
      }
    }

    while (v11 != v8);
    uint64_t v9 = (int)v9;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return sub_1000D10B0(*(void **)(a1 + 472), (__int16)v6[v9 + 3], a2, a3);
}

uint64_t sub_100054580(uint64_t a1)
{
  return sub_1000D0454(*(__int128 **)(a1 + 472));
}

uint64_t sub_10005458C(uint64_t a1, int a2, unint64_t a3, int a4, _DWORD *a5)
{
  return sub_1000D0EC4(*(void *)(a1 + 472), a2, a3, a4, a5, 0LL, 0);
}

_DWORD *sub_10005459C( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (qword_1000FDCC0)
  {
    BOOL result = (_DWORD *)sub_1000C1074(*(void *)(qword_1000FDCC0 + 4008) << 7);
    if (!result) {
      return result;
    }
  }

  else
  {
    BOOL result = (_DWORD *)sub_1000C1074(0LL);
    if (!result) {
      return result;
    }
  }

  uint64_t v18 = (uint64_t)result;
  if (qword_1000FDCC0) {
    int v19 = *(_DWORD *)(qword_1000FDCC0 + 4008);
  }
  else {
    int v19 = 0;
  }
  unsigned int v20 = sub_1000D11F8(*(void *)(a1 + 472), result, v19, 0xFFFFu, 0LL, 0);
  if (v20) {
    sub_100023688(v18, *(void *)(a1 + 376), (int *)&v20, a2, a3, a5, a6, a7, a11);
  }
  *(_DWORD *)(a1 + 824) = 1;
  sub_1000C0EF8(v18);
  return (_DWORD *)v20;
}

uint64_t sub_100054694(unsigned __int16 *a1, unsigned __int16 *a2)
{
  else {
    uint64_t v2 = a1[1] != a2[1];
  }
  if ((_DWORD)v2) {
    return v2;
  }
  unsigned int v4 = *a1;
  unsigned int v5 = *a2;
  BOOL v6 = v4 >= v5;
  LODWORD(v7) = v4 != v5;
  if (v6) {
    return v7;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1000546D8(uint64_t a1)
{
  unsigned int v2 = sub_100038DA8(a1);
  unsigned int v3 = sub_1000BE540(*(_DWORD *)(a1 + 520), v2);
  unsigned int v4 = sub_1000BE540(*(_DWORD *)(a1 + 524), v3);
  unsigned int v5 = sub_1000BE540(*(_DWORD *)(a1 + 528), v4);
  unsigned int v6 = sub_1000BE540(*(_DWORD *)(a1 + 532), v5);
  unsigned int v7 = sub_1000BE540(*(_DWORD *)(a1 + 536), v6);
  unsigned int v8 = sub_1000BE540(*(_DWORD *)(a1 + 540), v7);
  unsigned int v9 = sub_1000BE514(*(unsigned __int16 *)(a1 + 544), v8);
  unsigned int v10 = sub_1000BE514(*(unsigned __int16 *)(a1 + 546), v9);
  unsigned int v11 = sub_1000BE514(*(unsigned __int16 *)(a1 + 548), v10);
  unsigned int v12 = sub_1000BE514(*(unsigned __int16 *)(a1 + 550), v11);
  unsigned int v13 = sub_1000BE514(*(unsigned __int16 *)(a1 + 552), v12);
  unsigned int v14 = sub_1000BE514(*(unsigned __int16 *)(a1 + 554), v13);
  unsigned int v15 = sub_1000BE514(*(unsigned __int16 *)(a1 + 556), v14);
  unsigned int v16 = sub_1000BE514(*(unsigned __int16 *)(a1 + 558), v15);
  unsigned int v17 = sub_1000BE514(*(unsigned __int16 *)(a1 + 560), v16);
  unsigned int v18 = sub_1000BE514(*(unsigned __int16 *)(a1 + 562), v17);
  unsigned int v19 = sub_1000BE514(*(unsigned __int16 *)(a1 + 564), v18);
  unsigned int v20 = sub_1000BE540(*(_DWORD *)(a1 + 568), v19);
  uint64_t v21 = sub_1000BE514(*(unsigned __int16 *)(a1 + 572), v20);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1068)) {
    uint64_t v21 = sub_1000BE540(*(_DWORD *)(a1 + 576), v21);
  }
  unsigned int v22 = sub_1000BE770((unint64_t *)(a1 + 580), 2, *(_DWORD *)(a1 + 584), v21);
  unsigned int v23 = sub_1000BE540(*(_DWORD *)(a1 + 584), v22);
  unsigned int v24 = sub_1000BE540(*(_DWORD *)(a1 + 588), v23);
  unsigned int v25 = sub_1000BE540(*(_DWORD *)(a1 + 592), v24);
  unsigned int v26 = sub_1000BE540(*(_DWORD *)(a1 + 596), v25);
  unsigned int v27 = sub_1000BE540(*(_DWORD *)(a1 + 600), v26);
  unsigned int v28 = sub_1000BE540(*(_DWORD *)(a1 + 604), v27);
  uint64_t v29 = sub_1000BE540(*(_DWORD *)(a1 + 608), v28);
  __int16 v30 = *(unint64_t **)(a1 + 616);
  int v31 = sub_1000045F4(*(void *)(a1 + 384));
  uint64_t v32 = sub_1000BE770(v30, 1, v31, v29);
  int v33 = *(unint64_t **)(a1 + 624);
  if (v33)
  {
    if (qword_1000FDCC0) {
      int v34 = *(_DWORD *)(qword_1000FDCC0 + 584);
    }
    else {
      int v34 = 0;
    }
    int v35 = sub_1000045F4(*(void *)(a1 + 384));
    LODWORD(v32) = sub_1000BE770(v33, 1, v35 * v34, v32);
  }

  unsigned int v36 = sub_1000BE514(*(unsigned __int16 *)(a1 + 632), v32);
  unsigned int v37 = sub_1000BE514(*(unsigned __int16 *)(a1 + 634), v36);
  unsigned int v38 = sub_1000BE540(*(_DWORD *)(a1 + 648), v37);
  unsigned int v39 = sub_1000BE540(*(_DWORD *)(a1 + 652), v38);
  unsigned int v40 = sub_1000625B8(*(void *)(a1 + 656));
  unsigned int v41 = sub_1000BE540(v40, v39);
  unsigned int v42 = sub_1000BE540(*(_DWORD *)(a1 + 668), v41);
  uint64_t v43 = sub_1000BE540(*(_DWORD *)(a1 + 672), v42);
  unsigned int v44 = sub_1000BE770(*(unint64_t **)(a1 + 688), 2, *(_DWORD *)(a1 + 696), v43);
  unsigned int v45 = sub_1000BE540(*(_DWORD *)(a1 + 696), v44);
  unsigned int v46 = sub_1000BE540(*(_DWORD *)(a1 + 700), v45);
  unsigned int v47 = sub_1000BE540(*(_DWORD *)(a1 + 704), v46);
  unsigned int v48 = sub_1000BE540(*(_DWORD *)(a1 + 708), v47);
  unsigned int v49 = sub_1000BE514(*(unsigned __int16 *)(a1 + 712), v48);
  unsigned int v50 = sub_1000BE514(*(unsigned __int16 *)(a1 + 714), v49);
  unsigned int v51 = sub_1000BE514(*(unsigned __int16 *)(a1 + 716), v50);
  unsigned int v52 = sub_1000BE514(*(unsigned __int16 *)(a1 + 718), v51);
  unsigned int v53 = sub_1000BE514(*(unsigned __int16 *)(a1 + 720), v52);
  unsigned int v54 = sub_1000BE514(*(unsigned __int16 *)(a1 + 722), v53);
  uint64_t v55 = *(void *)(a1 + 728);
  if (v55)
  {
    unsigned int v56 = sub_10009BB4C(v55);
    unsigned int v54 = sub_1000BE540(v56, v54);
  }

  unsigned int v57 = sub_10005DE60(*(unsigned int **)(a1 + 736));
  unsigned int v58 = sub_1000BE540(v57, v54);
  unsigned int v59 = sub_1000BE540(*(_DWORD *)(a1 + 748), v58);
  unsigned int v60 = sub_1000BE540(*(_DWORD *)(a1 + 756), v59);
  unsigned int v61 = sub_1000BE540(*(_DWORD *)(a1 + 760), v60);
  unsigned int v62 = sub_1000BE540(*(_DWORD *)(a1 + 764), v61);
  unsigned int v63 = sub_1000BE540(*(_DWORD *)(a1 + 800), v62);
  unsigned int v64 = sub_1000BE514(*(unsigned __int16 *)(a1 + 804), v63);
  unsigned int v65 = sub_1000BE514(*(unsigned __int16 *)(a1 + 806), v64);
  uint64_t v66 = *(void *)(a1 + 832);
  int v67 = *(_DWORD *)(a1 + 532);
  uint64_t v68 = sub_100062FAC(*(void *)(a1 + 656), 0);
  if (*(int *)(a1 + 532) >= 1)
  {
    uint64_t v69 = v68;
    int v70 = 0;
    int v71 = 0;
    uint64_t v72 = (unsigned __int16 *)(v66 + 12LL * v67);
    int v73 = v72;
    while (1)
    {
      unsigned int v75 = *(v73 - 6);
      v73 -= 6;
      unsigned int v76 = sub_1000BE514(v75, v65);
      if ((*(_WORD *)(v69 + 4LL * *v73) & 0x7FFF) == 0) {
        break;
      }
      uint64_t v77 = *(unsigned int *)(a1 + 528);
LABEL_13:
      unsigned int v74 = sub_1000BE4F8(*((_BYTE *)v72 - 2), v76);
      unsigned int v65 = sub_1000BE4F8(*((_BYTE *)v72 - 1), v74);
      if (*(v72 - 6))
      {
        ++v71;
        uint64_t v72 = v73;
        if (v71 >= *(_DWORD *)(a1 + 532)) {
          goto LABEL_25;
        }
      }

      else
      {
        uint64_t v69 = sub_100062FAC(*(void *)(a1 + 656), ++v70);
        ++v71;
        uint64_t v72 = v73;
        if (v71 >= *(_DWORD *)(a1 + 532)) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v77 = 1LL;
LABEL_21:
    for (uint64_t i = 0LL; i != v77; ++i)
    {
      uint64_t v79 = &v72[i];
      unsigned int v76 = sub_1000BE514(*(v79 - 5), v76);
      if (*(v79 - 5) != 0x4000) {
        unsigned int v76 = sub_1000BE514(*(v79 - 3), v76);
      }
    }

    goto LABEL_13;
  }

uint64_t sub_100054BE8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, unsigned int a6, int a7)
{
  uint64_t v8 = 0LL;
  int v9 = 4;
  if (a6 > 5 || ((1 << a6) & 0x26) == 0) {
    goto LABEL_28;
  }
  unsigned int v15 = *(uint64_t **)(a1 + 376);
  *(_DWORD *)(a1 + 520) = a6;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 572) = -65536;
  *(_DWORD *)(a1 + 1064) = 0;
  *(void *)(a1 + 848) = 0LL;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 648) = 1LL;
  *(_DWORD *)(a1 + 752) = 0x40000000;
  uint64_t v16 = a1 + 756;
  int v17 = *(_DWORD *)(a1 + 432);
  if (qword_1000FDCC0)
  {
    sub_1000B2560( v16,  v17,  *(_DWORD *)(qword_1000FDCC0 + 3192),  *(_DWORD *)(a1 + 912),  *(void *)(qword_1000FDCC0 + 1440),  0);
    uint64_t v18 = *(void *)(a1 + 728);
    uint64_t v19 = qword_1000FDCC0;
    if (v18) {
      goto LABEL_5;
    }
LABEL_9:
    if (v19) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }

  sub_1000B2560(v16, v17, 0, *(_DWORD *)(a1 + 912), 0, 0);
  uint64_t v18 = *(void *)(a1 + 728);
  uint64_t v19 = qword_1000FDCC0;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_5:
  if (v19)
  {
LABEL_12:
    uint64_t v19 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (!*(_DWORD *)(qword_1000FDCC0 + 4464) || (sub_10009ABAC(*(void *)(a1 + 728)), (uint64_t v19 = qword_1000FDCC0) != 0))
      {
LABEL_15:
        *(_WORD *)(a1 + 564) = *(void *)(v19 + 3208);
        if (!*(void *)(v19 + 4144)) {
          goto LABEL_25;
        }
        if (!*(void *)(v19 + 4136)) {
          goto LABEL_25;
        }
        uint64_t v20 = *(void *)(v19 + 3288);
        if (v20 >= *(void *)(v19 + 3000)) {
          goto LABEL_25;
        }
        *(_WORD *)(a1 + 562) = v20;
        uint64_t v21 = *(void *)(v19 + 2976);
        if (!v21) {
          goto LABEL_25;
        }
        *(_DWORD *)(a1 + 536) = v21;
        *(_WORD *)(a1 + 548) = *(void *)(v19 + 3000);
        __int16 v22 = *(_WORD *)(v19 + 3016);
        *(_WORD *)(a1 + 552) = v22;
        *(_WORD *)(a1 + 550) = *(void *)(v19 + 3008);
        *(_DWORD *)(a1 + 824) = 0;
        if (*(void *)(v19 + 3240) == 5000LL) {
          *(_WORD *)(a1 + 554) = v22;
        }
        *(void *)(a1 + 600) = 0x100000001LL;
        unsigned int v23 = a3 - 1;
        if (a3 < 1)
        {
          *(_DWORD *)(a1 + 584) = 0;
          __int16 v26 = -1;
        }

        else
        {
          if (a3 != 1 && *(_DWORD *)(v19 + 3280))
          {
            *(_DWORD *)(a1 + 584) = 2;
            *(_WORD *)(a1 + 580) = *(_WORD *)(a2 + 2LL * (a3 - 2));
            *(_WORD *)(a1 + 582) = *(_WORD *)(a2 + 2LL * v23);
            goto LABEL_33;
          }

          *(_DWORD *)(a1 + 584) = 1;
          __int16 v26 = *(_WORD *)(a2 + 2LL * v23);
        }

        *(_WORD *)(a1 + 580) = v26;
LABEL_33:
        sub_100053308(a1);
        if (!qword_1000FDCC0) {
          goto LABEL_70;
        }
        if (!*(_DWORD *)(qword_1000FDCC0 + 1776)) {
          goto LABEL_41;
        }
        uint64_t v54 = a2;
        int v55 = a7;
        unsigned int v56 = v15;
        if (a5 < 1)
        {
          unsigned int v28 = -1;
        }

        else
        {
          uint64_t v27 = a5;
          unsigned int v28 = -1;
          uint64_t v29 = a4;
          do
          {
            uint64_t v30 = *v29++;
            unsigned int v31 = sub_100026B1C(v30);
            unsigned int v28 = sub_1000BE644(v31, 4, v28);
            --v27;
          }

          while (v27);
        }

        unsigned int v15 = v56;
        if (v28 == *(_DWORD *)(a1 + 828)) {
          goto LABEL_41;
        }
        int v33 = sub_100025EA0(a4, a5, 0LL);
        int v34 = v33;
        if (v33 <= *(_DWORD *)(a1 + 1032))
        {
          unsigned int v36 = *(unsigned __int16 **)(a1 + 1024);
        }

        else
        {
          uint64_t v35 = sub_1000C1074(2LL * v33);
          if (!v35) {
            return 0LL;
          }
          unsigned int v36 = (unsigned __int16 *)v35;
          sub_1000C0EF8(*(void *)(a1 + 1024));
          *(void *)(a1 + 1024) = v36;
          *(_DWORD *)(a1 + 1032) = v34;
        }

        uint64_t v37 = sub_100025EA0(a4, a5, v36);
        int v38 = 3 * (int)v37 / 2;
        if (*(_DWORD *)(a1 + 1048) < v38)
        {
          uint64_t v39 = sub_1000C1074(2LL * v38);
          if (!v39) {
            return 0LL;
          }
          uint64_t v40 = v39;
          sub_1000C0EF8(*(void *)(a1 + 1040));
          *(void *)(a1 + 1040) = v40;
          *(_DWORD *)(a1 + 1048) = v38;
        }

        uint64_t v41 = sub_1000B31C8((uint64_t)v56);
        if ((int)v37 < 1)
        {
          uint64_t v43 = 0LL;
LABEL_63:
          unsigned int v15 = v56;
          if (sub_10006135C( *(void *)(a1 + 656),  *(unsigned __int16 **)(a1 + 1040),  v43,  v56,  *(void *)(a1 + 384),  0LL,  0LL,  1LL,  0,  *(void *)(a1 + 728)))
          {
            *(_DWORD *)(a1 + 828) = v28;
            if (*(_DWORD *)(a1 + 744)) {
              int v50 = *(_DWORD *)(a1 + 744);
            }
            else {
              int v50 = 65533;
            }
            *(_DWORD *)(a1 + 704) = sub_1000619DC(*(void *)(a1 + 656), v50);
            a7 = v55;
            a2 = v54;
            if (!qword_1000FDCC0) {
              goto LABEL_70;
            }
            if (*(_DWORD *)(qword_1000FDCC0 + 5360)) {
              sub_1000627EC(*(void *)(a1 + 656), *(unsigned int *)(a1 + 528));
            }
LABEL_41:
            if (qword_1000FDCC0)
            {
              if (*(_DWORD *)(qword_1000FDCC0 + 1776)) {
                BOOL v32 = 1;
              }
              else {
                BOOL v32 = v15 == 0LL;
              }
              if (v32) {
                goto LABEL_72;
              }
LABEL_71:
              if (!*(_DWORD *)(a1 + 608))
              {
                uint64_t v8 = sub_1000530BC(a1);
                goto LABEL_74;
              }

uint64_t sub_100055138(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t result = sub_100062F94(*(void *)(a1 + 656));
  uint64_t v13 = result;
  __int16 v14 = *(_WORD *)(a1 + 572);
  if (*(_WORD *)(a1 + 994) == 0x4000 && *(_WORD *)(a1 + 572))
  {
    *(_DWORD *)(a1 + 568) = 0x40000000;
LABEL_55:
    *(_WORD *)(a1 + 572) = v14 + 1;
    return result;
  }

  uint64_t v15 = *(void *)(a1 + 832);
  int v16 = *(_DWORD *)(a1 + 532);
  uint64_t v17 = *(void *)(a1 + 384);
  *(void *)(a1 + 1000) = a2;
  sub_100006F08( v17,  a2,  a3,  *(void *)(a1 + 408),  v14 - (*(_DWORD *)(a1 + 600) == 0),  *(_DWORD *)(a1 + 600),  v7,  v8,  v9,  v10,  v11,  v12);
  uint64_t v18 = qword_1000FDCC0;
  if (*(_DWORD *)(a1 + 520) == 1 && qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4716)) {
    *(_WORD *)(a1 + 712) = 0x4000;
  }
  LOWORD(v19) = *(_WORD *)(a1 + 712);
  __int16 v20 = v19;
  *(_WORD *)(a1 + 714) = v19;
  *(_WORD *)(a1 + 994) = v20;
  *(_WORD *)(a1 + 712) = 0x4000;
  *(_WORD *)(a1 + 558) = 0x4000;
  v206 = (_DWORD *)(a1 + 436);
  if (v18)
  {
    if (*(_DWORD *)(v18 + 724))
    {
      uint64_t v21 = *(unsigned __int16 **)(a1 + 848);
      if (v21)
      {
        int v214 = v16;
        uint64_t v216 = v15;
        unsigned int v209 = v13;
        uint64_t v22 = *v21;
        int v23 = *(_DWORD *)(a1 + 672);
        uint64_t v24 = sub_100062FAC(*(void *)(a1 + 656), v23);
        unsigned int v25 = (__int16 *)(v24 + 4 * v22);
        uint64_t v212 = sub_100062FC4(*(void *)(a1 + 656), v23);
        int v26 = *v25 & 0x7FFF;
        uint64_t v27 = sub_100015BAC(v17, v26);
        uint64_t v28 = *(unsigned __int8 *)(*(void *)(a1 + 848) + 10LL);
        uint64_t v29 = *(unsigned __int16 *)(v27 + 2 * v28);
        int v30 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v29);
        if (v30 == 0x4000) {
          LOWORD(v30) = sub_100015BC0(v17, v29);
        }
        if (v26 && *(_DWORD *)(a1 + 528) - 1 > (int)v28)
        {
          uint64_t v31 = *(unsigned __int16 *)(v27 + 2 * v28 + 2);
          int v32 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v31);
          if (v32 == 0x4000) {
            LOWORD(v32) = sub_100015BC0(v17, v31);
          }
          goto LABEL_33;
        }

        if ((*v25 & 0x80000000) == 0)
        {
          if (**(_WORD **)(a1 + 848))
          {
            uint64_t v33 = v24 + 4 * v22;
            uint64_t v34 = *(unsigned __int16 *)(v33 + 2);
            uint64_t v35 = (__int16 *)(v33 + 4);
            do
            {
              int v36 = *v35;
              v35 += 2;
            }

            while (v36 < 0);
            uint64_t v37 = (unsigned __int16)*(v35 - 1);
            uint64_t v13 = v209;
            int v16 = v214;
            uint64_t v15 = v216;
            if (v34 < v37)
            {
              int v38 = (_WORD *)(v24 + 4 * v34);
              uint64_t v39 = v37 - v34;
              uint64_t v40 = (unsigned __int8 *)(v212 + v34);
              do
              {
                uint64_t v43 = *(unsigned __int16 *)sub_100015BAC(v17, *v38 & 0x7FFF);
                int v44 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v43);
                if (v44 == 0x4000) {
                  LOWORD(v44) = sub_100015BC0(v17, v43);
                }
                __int16 v41 = *v40++;
                int v42 = (__int16)(*(_WORD *)(a1 + 564) + v44 + v41);
                v38 += 2;
                --v39;
              }

              while (v39);
            }

uint64_t sub_10005652C(uint64_t result, _WORD **a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = *(void *)(result + 1016);
  while (1)
  {
    while (1)
    {
      do
      {
        unsigned int v7 = (unsigned __int16)*(v2 - 6);
        v2 -= 6;
        uint64_t v6 = v7;
        double v8 = (__int16 *)(v3 + 4LL * v7);
      }

      while (*v8 < 0);
      *(_WORD *)(result + 722) = v8[1];
      if ((*v8 & 0x7FFF) == 0) {
        break;
      }
      uint64_t v4 = *(int *)(result + 528);
      int v5 = (__int16)(*(_WORD *)(result + 564) + v2[v4]);
      if (v5 <= *(__int16 *)(result + 992))
      {
        __int16 v9 = v2[v4 + 2];
        goto LABEL_9;
      }
    }

    int v5 = (__int16)v2[1];
    if (!*v2) {
      break;
    }
    if (v5 <= *(__int16 *)(result + 992))
    {
      __int16 v9 = v2[3];
LABEL_9:
      *(_WORD *)(result + 718) = v9;
      goto LABEL_10;
    }
  }

  int v5 = (__int16)(v5 + *(_WORD *)(result + 562) + *(_WORD *)(result + 564));
  if (v5 > *(__int16 *)(result + 992) || !*(_WORD *)(result + 572))
  {
    *(_WORD *)(result + 720) = 0;
    *a2 = v2;
    return result;
  }

  *(_WORD *)(result + 718) = *(_WORD *)(result + 572);
  *(_WORD *)(result + 722) = 0;
LABEL_10:
  *a2 = v2;
  *(_WORD *)(result + 716) = v5;
  int32x4_t v10 = (__int16 *)(v3 + 4 * v6 + 4);
  do
  {
    int v11 = *v10;
    v10 += 2;
  }

  while (v11 < 0);
  *(_WORD *)(result + 720) = *(v10 - 1) - 1;
  return result;
}

uint64_t sub_10005661C(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4, __int16 a5)
{
  int v9 = *(__int16 *)(a1 + 992);
  __int16 v43 = *(_WORD *)(a1 + 994);
  uint64_t v10 = *(void *)(a1 + 384);
  if ((a5 & 0x7FFF) != 0)
  {
    uint64_t result = sub_100015BAC(v10, a5 & 0x7FFF);
    int8x16_t v12 = (unsigned __int16 *)result;
    uint64_t v13 = *a2;
    *(_WORD *)a3 = v13;
    __int16 v14 = *(unsigned __int8 *)(*(void *)(a1 + 1008) + v13);
    int v15 = (__int16)(a2[1] + v14);
    int v16 = (__int16)a2[2];
    BOOL v17 = v16 < v15;
    if (v16 >= v15) {
      int v18 = (__int16)(a2[1] + v14);
    }
    else {
      int v18 = (__int16)a2[2];
    }
    uint64_t v19 = 3LL;
    if (v17) {
      uint64_t v19 = 4LL;
    }
    if (v18 <= v9)
    {
      unsigned __int16 v31 = a2[v19];
      uint64_t v32 = *(unsigned __int16 *)(result + 2);
      uint64_t result = *(unsigned __int16 *)(*(void *)(v10 + 1792) + 2 * v32);
      if ((_DWORD)result == 0x4000) {
        uint64_t result = sub_100015BC0(v10, v32);
      }
      int v33 = (__int16)(result + v18 - v43);
      *(_WORD *)(a3 + 4) = result + v18 - v43;
      *(_WORD *)(a3 + 8) = v31;
      BOOL v20 = v33 < 0x4000;
      if (v33 >= 0x4000) {
        __int16 v21 = 0x4000;
      }
      else {
        __int16 v21 = result + v18 - v43;
      }
      if (*(unsigned __int16 *)(a1 + 720) != (_DWORD)v13)
      {
LABEL_9:
        signed __int16 v22 = a2[1];
        unsigned __int16 v23 = a2[3];
        if (v9 >= v22) {
          goto LABEL_39;
        }
        goto LABEL_38;
      }
    }

    else
    {
      BOOL v20 = 0;
      __int16 v21 = 0x4000;
      *(_WORD *)(a3 + 4) = 0x4000;
    }

    uint64_t v34 = a2 + 3;
    int v35 = (__int16)(*(_WORD *)(a1 + 716) + v14);
    int v36 = (__int16)a2[1];
    if (v36 >= v35) {
      signed __int16 v22 = *(_WORD *)(a1 + 716) + v14;
    }
    else {
      signed __int16 v22 = a2[1];
    }
    if (v36 >= v35) {
      uint64_t v34 = (unsigned __int16 *)(a1 + 718);
    }
    unsigned __int16 v23 = *v34;
    if (*(unsigned __int16 *)(a1 + 722) >= v13)
    {
      uint64_t result = sub_10005652C(a1, a4);
      if (v9 >= v22)
      {
LABEL_39:
        uint64_t result = *(void *)(a1 + 384);
        uint64_t v37 = *v12;
        int v38 = *(unsigned __int16 *)(*(void *)(result + 1792) + 2 * v37);
        if (v38 == 0x4000)
        {
          uint64_t result = sub_100015BC0(result, v37);
          LOWORD(v38) = result;
        }

        __int16 v39 = v38 + v22 - v43;
        *(_WORD *)(a3 + 2) = v39;
        *(_WORD *)(a3 + 6) = v23;
        if (v39 < v21) {
          BOOL v20 = 0;
        }
        goto LABEL_48;
      }
    }

    else
    {
      *(_WORD *)(a1 + 720) = v13 - 1;
      if (v9 >= v22) {
        goto LABEL_39;
      }
    }

uint64_t sub_1000568DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4)
{
  int v7 = *(__int16 *)(a1 + 992);
  __int16 v8 = *(_WORD *)(a1 + 994);
  uint64_t v9 = *(void *)(a1 + 384);
  uint64_t result = sub_100015BAC(v9, a4);
  int v11 = (unsigned __int16 *)result;
  *(_WORD *)a3 = *a2;
  int v12 = (__int16)a2[1];
  int v13 = (__int16)a2[2];
  BOOL v14 = v13 < v12;
  if (v13 >= v12) {
    int v15 = (__int16)a2[1];
  }
  else {
    int v15 = (__int16)a2[2];
  }
  uint64_t v16 = 3LL;
  if (v14) {
    uint64_t v16 = 4LL;
  }
  if (v15 <= v7)
  {
    unsigned __int16 v20 = a2[v16];
    uint64_t v21 = *(unsigned __int16 *)(result + 2);
    uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v21);
    if ((_DWORD)result == 0x4000) {
      uint64_t result = sub_100015BC0(v9, v21);
    }
    int v22 = (__int16)(result + v15 - v8);
    *(_WORD *)(a3 + 4) = result + v15 - v8;
    *(_WORD *)(a3 + 8) = v20;
    BOOL v17 = v22 < 0x4000;
    if (v22 >= 0x4000) {
      __int16 v18 = 0x4000;
    }
    else {
      __int16 v18 = v22;
    }
    uint64_t v19 = a2 + 3;
    if (*(a2 - 6) != *a2) {
      goto LABEL_27;
    }
  }

  else
  {
    BOOL v17 = 0;
    __int16 v18 = 0x4000;
    *(_WORD *)(a3 + 4) = 0x4000;
    uint64_t v19 = a2 + 3;
    if (*(a2 - 6) != *a2) {
      goto LABEL_27;
    }
  }

  if (*((unsigned __int8 *)a2 - 1) + 1 == *((unsigned __int8 *)a2 + 11))
  {
    unsigned __int16 v23 = &a2[*(int *)(a1 + 528)];
    int v24 = (__int16)(*(_WORD *)(a1 + 564) + *(v23 - 6));
    uint64_t v25 = v23 - 4;
    int v26 = (__int16)a2[1];
    if (v26 >= v24) {
      signed __int16 v27 = v24;
    }
    else {
      signed __int16 v27 = a2[1];
    }
    if (v26 >= v24) {
      uint64_t v19 = v25;
    }
    if (v7 < v27) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }

uint64_t sub_100056A8C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(__int16 *)(a3 + 2LL * *(int *)(result + 528));
  if (v4 < a4)
  {
    uint64_t v7 = result;
    int v12 = 0;
    uint64_t v8 = *(void *)(result + 376);
    unsigned __int16 v9 = *(_WORD *)(result + 572);
    uint64_t v10 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 5360))
      {
        LOWORD(v4) = v4 + *(unsigned __int8 *)(result + 664);
        goto LABEL_7;
      }

      if (*(_DWORD *)(qword_1000FDCC0 + 1776)) {
        goto LABEL_7;
      }
    }

    unsigned int v11 = sub_1000BB868(*(void *)(result + 376), *(unsigned __int16 *)(a2 + 2), 0LL);
    LOWORD(v4) = sub_1000BBBB0(v8, 0LL, 0, v11) + v4;
    uint64_t v10 = qword_1000FDCC0;
    if (!qword_1000FDCC0)
    {
LABEL_10:
      uint64_t result = sub_1000D06E4( *(void *)(v7 + 472),  *(__int16 *)(a3 + 2LL * *(int *)(v7 + 528) + 4),  v9,  *(_WORD *)(a2 + 2),  *(_DWORD *)(v7 + 568) + (__int16)v4,  &v12);
      if (v12)
      {
        *(_DWORD *)(v7 + 524) = 3;
      }

      else if (*(__int16 *)(v7 + 712) > (__int16)v4)
      {
        *(_WORD *)(v7 + 712) = v4;
      }

      return result;
    }

uint64_t sub_100056BA8(uint64_t a1)
{
  unsigned int v2 = sub_100038DA8(a1);
  unsigned int v3 = sub_1000BE540(*(_DWORD *)(a1 + 520), v2);
  unsigned int v4 = sub_1000BE540(*(_DWORD *)(a1 + 524), v3);
  unsigned int v5 = sub_1000BE540(*(_DWORD *)(a1 + 528), v4);
  unsigned int v6 = sub_1000BE540(*(_DWORD *)(a1 + 532), v5);
  unsigned int v7 = sub_1000BE540(*(_DWORD *)(a1 + 536), v6);
  unsigned int v8 = sub_1000BE540(*(_DWORD *)(a1 + 540), v7);
  unsigned int v9 = sub_1000BE514(*(unsigned __int16 *)(a1 + 544), v8);
  unsigned int v10 = sub_1000BE514(*(unsigned __int16 *)(a1 + 546), v9);
  unsigned int v11 = sub_1000BE514(*(unsigned __int16 *)(a1 + 548), v10);
  unsigned int v12 = sub_1000BE514(*(unsigned __int16 *)(a1 + 550), v11);
  unsigned int v13 = sub_1000BE514(*(unsigned __int16 *)(a1 + 552), v12);
  unsigned int v14 = sub_1000BE514(*(unsigned __int16 *)(a1 + 554), v13);
  unsigned int v15 = sub_1000BE514(*(unsigned __int16 *)(a1 + 556), v14);
  unsigned int v16 = sub_1000BE514(*(unsigned __int16 *)(a1 + 558), v15);
  unsigned int v17 = sub_1000BE514(*(unsigned __int16 *)(a1 + 560), v16);
  unsigned int v18 = sub_1000BE514(*(unsigned __int16 *)(a1 + 562), v17);
  unsigned int v19 = sub_1000BE514(*(unsigned __int16 *)(a1 + 564), v18);
  unsigned int v20 = sub_1000BE540(*(_DWORD *)(a1 + 568), v19);
  uint64_t v21 = sub_1000BE514(*(unsigned __int16 *)(a1 + 572), v20);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1068)) {
    uint64_t v21 = sub_1000BE540(*(_DWORD *)(a1 + 576), v21);
  }
  unsigned int v22 = sub_1000BE770((unint64_t *)(a1 + 580), 2, *(_DWORD *)(a1 + 584), v21);
  unsigned int v23 = sub_1000BE540(*(_DWORD *)(a1 + 584), v22);
  unsigned int v24 = sub_1000BE540(*(_DWORD *)(a1 + 588), v23);
  unsigned int v25 = sub_1000BE540(*(_DWORD *)(a1 + 592), v24);
  unsigned int v26 = sub_1000BE540(*(_DWORD *)(a1 + 596), v25);
  unsigned int v27 = sub_1000BE540(*(_DWORD *)(a1 + 600), v26);
  unsigned int v28 = sub_1000BE540(*(_DWORD *)(a1 + 604), v27);
  uint64_t v29 = sub_1000BE540(*(_DWORD *)(a1 + 608), v28);
  unsigned __int16 v30 = *(unint64_t **)(a1 + 616);
  int v31 = sub_1000045F4(*(void *)(a1 + 384));
  uint64_t v32 = sub_1000BE770(v30, 1, v31, v29);
  int v33 = *(unint64_t **)(a1 + 624);
  if (v33)
  {
    if (qword_1000FDCC0) {
      int v34 = *(_DWORD *)(qword_1000FDCC0 + 584);
    }
    else {
      int v34 = 0;
    }
    int v35 = sub_1000045F4(*(void *)(a1 + 384));
    LODWORD(v32) = sub_1000BE770(v33, 1, v35 * v34, v32);
  }

  unsigned int v36 = sub_1000BE514(*(unsigned __int16 *)(a1 + 632), v32);
  unsigned int v37 = sub_1000BE514(*(unsigned __int16 *)(a1 + 634), v36);
  unsigned int v38 = sub_1000BE540(*(_DWORD *)(a1 + 648), v37);
  unsigned int v39 = sub_1000BE540(*(_DWORD *)(a1 + 652), v38);
  unsigned int v40 = sub_1000625B8(*(void *)(a1 + 656));
  unsigned int v41 = sub_1000BE540(v40, v39);
  unsigned int v42 = sub_1000BE540(*(_DWORD *)(a1 + 668), v41);
  uint64_t v43 = sub_1000BE540(*(_DWORD *)(a1 + 672), v42);
  unsigned int v44 = sub_1000BE770(*(unint64_t **)(a1 + 688), 2, *(_DWORD *)(a1 + 696), v43);
  unsigned int v45 = sub_1000BE540(*(_DWORD *)(a1 + 696), v44);
  unsigned int v46 = sub_1000BE540(*(_DWORD *)(a1 + 700), v45);
  unsigned int v47 = sub_1000BE540(*(_DWORD *)(a1 + 704), v46);
  unsigned int v48 = sub_1000BE540(*(_DWORD *)(a1 + 708), v47);
  unsigned int v49 = sub_1000BE514(*(unsigned __int16 *)(a1 + 712), v48);
  unsigned int v50 = sub_1000BE514(*(unsigned __int16 *)(a1 + 714), v49);
  unsigned int v51 = sub_1000BE514(*(unsigned __int16 *)(a1 + 716), v50);
  unsigned int v52 = sub_1000BE514(*(unsigned __int16 *)(a1 + 718), v51);
  unsigned int v53 = sub_1000BE514(*(unsigned __int16 *)(a1 + 720), v52);
  unsigned int v54 = sub_1000BE514(*(unsigned __int16 *)(a1 + 722), v53);
  uint64_t v55 = *(void *)(a1 + 728);
  if (v55)
  {
    unsigned int v56 = sub_10009BB4C(v55);
    unsigned int v54 = sub_1000BE540(v56, v54);
  }

  unsigned int v57 = sub_10005DE60(*(unsigned int **)(a1 + 736));
  unsigned int v58 = sub_1000BE540(v57, v54);
  unsigned int v59 = sub_1000BE540(*(_DWORD *)(a1 + 748), v58);
  unsigned int v60 = sub_1000BE540(*(_DWORD *)(a1 + 756), v59);
  unsigned int v61 = sub_1000BE540(*(_DWORD *)(a1 + 760), v60);
  unsigned int v62 = sub_1000BE540(*(_DWORD *)(a1 + 764), v61);
  unsigned int v63 = sub_1000BE540(*(_DWORD *)(a1 + 800), v62);
  unsigned int v64 = sub_1000BE514(*(unsigned __int16 *)(a1 + 804), v63);
  unsigned int v65 = sub_1000BE514(*(unsigned __int16 *)(a1 + 806), v64);
  unsigned int v66 = sub_1000BE540(*(_DWORD *)(a1 + 808), v65);
  unsigned int v67 = sub_1000BE540(*(_DWORD *)(a1 + 812), v66);
  if (*(int *)(a1 + 808) >= 1)
  {
    uint64_t v68 = 0LL;
    uint64_t v69 = 0LL;
    do
    {
      unsigned int v70 = sub_1000BE644(*(unsigned __int16 *)(*(void *)(a1 + 816) + v68), 2, v67);
      unsigned int v67 = sub_1000BE644(*(__int16 *)(*(void *)(a1 + 816) + v68 + 2), 2, v70);
      ++v69;
      v68 += 4LL;
    }

    while (v69 < *(int *)(a1 + 808));
  }

  unsigned int v71 = sub_1000BE540(*(_DWORD *)(a1 + 824), v67);
  uint64_t v72 = *(void *)(a1 + 856);
  uint64_t v73 = *(int *)(a1 + 532);
  uint64_t v74 = sub_100062FAC(*(void *)(a1 + 656), 0);
  if (*(int *)(a1 + 532) >= 1)
  {
    uint64_t v75 = v74;
    int v76 = 0;
    int v77 = 0;
    uint64_t v78 = (unsigned __int16 *)(v72 + 8 * v73);
    unsigned int v79 = v78;
    while (1)
    {
      unsigned int v80 = *(v79 - 4);
      v79 -= 4;
      unsigned int v81 = sub_1000BE514(v80, v71);
      if ((*(_WORD *)(v75 + 4LL * *v79) & 0x7FFF) == 0) {
        break;
      }
      uint64_t v82 = *(unsigned int *)(a1 + 528);
LABEL_23:
      unsigned int v84 = sub_1000BE4F8(*((_BYTE *)v78 - 2), v81);
      unsigned int v71 = sub_1000BE4F8(*((_BYTE *)v78 - 1), v84);
      if (!*(v78 - 4)) {
        uint64_t v75 = sub_100062FAC(*(void *)(a1 + 656), ++v76);
      }
      ++v77;
      uint64_t v78 = v79;
      if (v77 >= *(_DWORD *)(a1 + 532)) {
        goto LABEL_25;
      }
    }

    uint64_t v82 = 1LL;
LABEL_21:
    for (uint64_t i = 0LL; i != v82; ++i)
      unsigned int v81 = sub_1000BE514(v78[i - 3], v81);
    goto LABEL_23;
  }

uint64_t sub_1000570F8(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, int a5, unsigned int a6)
{
  uint64_t v7 = 0LL;
  int v8 = 4;
  if (a6 > 5 || ((1 << a6) & 0x26) == 0) {
    goto LABEL_27;
  }
  unsigned int v13 = *(uint64_t **)(a1 + 376);
  *(_DWORD *)(a1 + 520) = a6;
  *(_DWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 572) = -65536;
  *(_DWORD *)(a1 + 1064) = 0;
  *(void *)(a1 + 872) = 0LL;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 648) = 1LL;
  *(_DWORD *)(a1 + 752) = 0x40000000;
  uint64_t v14 = a1 + 756;
  int v15 = *(_DWORD *)(a1 + 432);
  if (!qword_1000FDCC0)
  {
    sub_1000B2560(v14, v15, 0, *(_DWORD *)(a1 + 912), 0, 0);
    uint64_t v16 = *(void *)(a1 + 728);
    uint64_t v17 = qword_1000FDCC0;
    if (v16) {
      goto LABEL_5;
    }
LABEL_9:
    if (v17) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }

  sub_1000B2560( v14,  v15,  *(_DWORD *)(qword_1000FDCC0 + 3192),  *(_DWORD *)(a1 + 912),  *(void *)(qword_1000FDCC0 + 1440),  0);
  uint64_t v16 = *(void *)(a1 + 728);
  uint64_t v17 = qword_1000FDCC0;
  if (!v16) {
    goto LABEL_9;
  }
LABEL_5:
  if (v17)
  {
  }

  else if (!sub_10009AE4C(v16, 0, 0))
  {
LABEL_25:
    uint64_t v7 = 0LL;
    goto LABEL_26;
  }

  uint64_t v17 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (!*(_DWORD *)(qword_1000FDCC0 + 4464) || (sub_10009ABAC(*(void *)(a1 + 728)), (uint64_t v17 = qword_1000FDCC0) != 0))
    {
LABEL_15:
      *(_WORD *)(a1 + 564) = *(void *)(v17 + 3208);
      int v18 = *(_DWORD *)(a1 + 896);
      int v19 = *(_DWORD *)(a1 + 900);
      if (v18 >= v19) {
        goto LABEL_25;
      }
      *(_WORD *)(a1 + 562) = v18;
      uint64_t v20 = *(void *)(v17 + 3064);
      if (!v20) {
        goto LABEL_25;
      }
      *(_DWORD *)(a1 + 536) = v20;
      *(_WORD *)(a1 + 548) = v19;
      __int16 v21 = *(_WORD *)(v17 + 3120);
      *(_WORD *)(a1 + 552) = v21;
      *(_WORD *)(a1 + 550) = *(void *)(v17 + 3112);
      *(_DWORD *)(a1 + 824) = 0;
      if (*(void *)(v17 + 3240) == 5000LL) {
        *(_WORD *)(a1 + 554) = v21;
      }
      *(void *)(a1 + 600) = 0x100000001LL;
      unsigned int v22 = a3 - 1;
      if (a3 < 1)
      {
        *(_DWORD *)(a1 + 584) = 0;
        __int16 v25 = -1;
      }

      else
      {
        if (a3 != 1 && *(_DWORD *)(v17 + 3280))
        {
          *(_DWORD *)(a1 + 584) = 2;
          *(_WORD *)(a1 + 580) = *(_WORD *)(a2 + 2LL * (a3 - 2));
          *(_WORD *)(a1 + 582) = *(_WORD *)(a2 + 2LL * v22);
          goto LABEL_32;
        }

        *(_DWORD *)(a1 + 584) = 1;
        __int16 v25 = *(_WORD *)(a2 + 2LL * v22);
      }

      *(_WORD *)(a1 + 580) = v25;
LABEL_32:
      sub_100053308(a1);
      if (!qword_1000FDCC0) {
        goto LABEL_69;
      }
      if (!*(_DWORD *)(qword_1000FDCC0 + 1776)) {
        goto LABEL_62;
      }
      if (a5 < 1)
      {
        unsigned int v27 = -1;
        if (*(_DWORD *)(a1 + 828) == -1) {
          goto LABEL_62;
        }
      }

      else
      {
        uint64_t v26 = a5;
        unsigned int v27 = -1;
        unsigned int v28 = a4;
        do
        {
          uint64_t v29 = *v28++;
          unsigned int v30 = sub_100026B1C(v29);
          unsigned int v31 = sub_1000BE644(v30, 4, v27);
          unsigned int v27 = v31;
          --v26;
        }

        while (v26);
        if (v31 == *(_DWORD *)(a1 + 828)) {
          goto LABEL_62;
        }
      }

      int v32 = sub_100025EA0(a4, a5, 0LL);
      int v33 = v32;
      if (v32 <= *(_DWORD *)(a1 + 1032))
      {
        int v35 = *(unsigned __int16 **)(a1 + 1024);
      }

      else
      {
        uint64_t v34 = sub_1000C1074(2LL * v32);
        if (!v34) {
          return 0LL;
        }
        int v35 = (unsigned __int16 *)v34;
        sub_1000C0EF8(*(void *)(a1 + 1024));
        *(void *)(a1 + 1024) = v35;
        *(_DWORD *)(a1 + 1032) = v33;
      }

      int v36 = sub_100025EA0(a4, a5, v35);
      int v37 = 3 * v36 / 2;
      if (*(_DWORD *)(a1 + 1048) < v37)
      {
        uint64_t v38 = sub_1000C1074(2LL * v37);
        if (!v38) {
          return 0LL;
        }
        uint64_t v39 = v38;
        sub_1000C0EF8(*(void *)(a1 + 1040));
        *(void *)(a1 + 1040) = v39;
        *(_DWORD *)(a1 + 1048) = v37;
      }

      uint64_t v40 = sub_1000B31C8((uint64_t)v13);
      if (v36 < 1)
      {
        uint64_t v43 = 0LL;
LABEL_55:
        if (sub_10006135C( *(void *)(a1 + 656),  *(unsigned __int16 **)(a1 + 1040),  v43,  v13,  *(void *)(a1 + 384),  0LL,  0LL,  1LL,  0,  *(void *)(a1 + 728)))
        {
          *(_DWORD *)(a1 + 828) = v27;
          if (*(_DWORD *)(a1 + 744)) {
            int v48 = *(_DWORD *)(a1 + 744);
          }
          else {
            int v48 = 65533;
          }
          *(_DWORD *)(a1 + 704) = sub_1000619DC(*(void *)(a1 + 656), v48);
          if (!qword_1000FDCC0) {
            goto LABEL_69;
          }
          if (*(_DWORD *)(qword_1000FDCC0 + 5360)) {
            sub_1000627EC(*(void *)(a1 + 656), *(unsigned int *)(a1 + 528));
          }
LABEL_62:
          if (qword_1000FDCC0)
          {
            if (*(_DWORD *)(qword_1000FDCC0 + 1776)) {
              BOOL v49 = 1;
            }
            else {
              BOOL v49 = v13 == 0LL;
            }
            if (v49) {
              goto LABEL_71;
            }
LABEL_70:
            if (!*(_DWORD *)(a1 + 608))
            {
              uint64_t v7 = sub_1000530BC(a1);
              goto LABEL_73;
            }

LABEL_71:
            uint64_t v7 = 1LL;
LABEL_73:
            *(_BYTE *)(a1 + 664) = sub_100062FA4(*(void *)(a1 + 656));
            int v50 = sub_100062F94(*(void *)(a1 + 656));
            uint64_t v51 = *(void *)(a1 + 856);
            *(_DWORD *)(a1 + 532) = 0;
            if (v50 >= 1)
            {
              uint64_t v52 = v51 + 7;
              do
              {
                *(_DWORD *)(v52 - 7) = 0;
                *(_WORD *)(v52 - 1) = 0;
                ++*(_DWORD *)(a1 + 532);
                v52 += 8LL;
                --v50;
              }

              while (v50);
            }

            *(_DWORD *)(a1 + 568) = 0;
            *(_WORD *)(a1 + 996) = 0;
            int v8 = 1;
            goto LABEL_27;
          }

uint64_t sub_1000575F8(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t result = sub_100062F94(*(void *)(a1 + 656));
  int v13 = result;
  if (*(_WORD *)(a1 + 994) == 0x4000)
  {
    __int16 v14 = *(_WORD *)(a1 + 572);
    if (v14)
    {
      *(_DWORD *)(a1 + 568) = 0x40000000;
LABEL_67:
      *(_WORD *)(a1 + 572) = v14 + 1;
      return result;
    }
  }

  uint64_t v15 = *(void *)(a1 + 856);
  uint64_t v16 = *(int *)(a1 + 532);
  uint64_t v17 = *(void *)(a1 + 384);
  *(void *)(a1 + 1000) = a2;
  sub_100006F08( v17,  a2,  a3,  *(void *)(a1 + 408),  *(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0),  *(_DWORD *)(a1 + 600),  v7,  v8,  v9,  v10,  v11,  v12);
  *(_WORD *)(a1 + 994) = *(_WORD *)(a1 + 544);
  *(_WORD *)(a1 + 558) = 0x4000;
  if (!qword_1000FDCC0) {
    goto LABEL_49;
  }
  if (!*(_DWORD *)(qword_1000FDCC0 + 724)) {
    goto LABEL_49;
  }
  int v18 = *(unsigned __int16 **)(a1 + 872);
  if (!v18) {
    goto LABEL_49;
  }
  uint64_t v183 = v16;
  uint64_t v185 = v15;
  int v179 = v13;
  uint64_t v19 = *v18;
  int v20 = *(_DWORD *)(a1 + 672);
  uint64_t v21 = sub_100062FAC(*(void *)(a1 + 656), v20);
  unsigned int v22 = (__int16 *)(v21 + 4 * v19);
  uint64_t v23 = sub_100062FC4(*(void *)(a1 + 656), v20);
  int v24 = *v22 & 0x7FFF;
  uint64_t v25 = sub_100015BAC(v17, v24);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)(a1 + 872) + 6LL);
  uint64_t v27 = *(unsigned __int16 *)(v25 + 2 * v26);
  int v28 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v27);
  if (v28 == 0x4000) {
    LOWORD(v28) = sub_100015BC0(v17, v27);
  }
  if (v24 && *(_DWORD *)(a1 + 528) - 1 > (int)v26)
  {
    uint64_t v29 = *(unsigned __int16 *)(v25 + 2 * v26 + 2);
    int v30 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v29);
    if (v30 == 0x4000) {
      LOWORD(v30) = sub_100015BC0(v17, v29);
    }
    goto LABEL_31;
  }

  if (*v22 < 0)
  {
    uint64_t v44 = *(void *)(a1 + 376);
    int v45 = *(unsigned __int16 *)(a1 + 806);
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 5264))
    {
      LOWORD(v45) = v45 + *(unsigned __int8 *)(a1 + 664);
    }

    else if (v44)
    {
      unsigned int v46 = sub_1000BB868(*(void *)(a1 + 376), *(unsigned __int16 *)(v21 + 4 * v19 + 2), 0LL);
      v45 += sub_1000BBBB0(v44, a1 + 580, *(_DWORD *)(a1 + 584), v46);
      if (qword_1000FDCC0)
      {
        int v13 = v179;
        if (*(_DWORD *)(qword_1000FDCC0 + 5360)) {
          LOWORD(v45) = v45 - sub_100062DE4(v44, v46, *(unsigned __int8 *)(a1 + 664)) + *(unsigned __int8 *)(a1 + 664);
        }
LABEL_42:
        uint64_t v47 = *(unsigned __int16 *)sub_100015BAC(v17, 0);
        int v48 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v47);
        if (v48 == 0x4000) {
          LOWORD(v48) = sub_100015BC0(v17, v47);
        }
        uint64_t v16 = v183;
        uint64_t v43 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          goto LABEL_33;
        }
LABEL_47:
        *(_WORD *)(a1 + 558) = v28;
        goto LABEL_48;
      }
    }

    int v13 = v179;
    goto LABEL_42;
  }

  if (!**(_WORD **)(a1 + 872))
  {
LABEL_31:
    int v13 = v179;
    uint64_t v16 = v183;
    goto LABEL_32;
  }

  uint64_t v31 = v21 + 4 * v19;
  uint64_t v32 = *(unsigned __int16 *)(v31 + 2);
  int v33 = (__int16 *)(v31 + 4);
  int v13 = v179;
  uint64_t v16 = v183;
  do
  {
    int v34 = *v33;
    v33 += 2;
  }

  while (v34 < 0);
  uint64_t v35 = (unsigned __int16)*(v33 - 1);
  if (v32 < v35)
  {
    int v36 = (_WORD *)(v21 + 4 * v32);
    uint64_t v37 = v35 - v32;
    uint64_t v38 = (unsigned __int8 *)(v23 + v32);
    do
    {
      uint64_t v41 = *(unsigned __int16 *)sub_100015BAC(v17, *v36 & 0x7FFF);
      int v42 = *(unsigned __int16 *)(*(void *)(v17 + 1792) + 2 * v41);
      if (v42 == 0x4000) {
        LOWORD(v42) = sub_100015BC0(v17, v41);
      }
      __int16 v39 = *v38++;
      int v40 = (__int16)(*(_WORD *)(a1 + 564) + v42 + v39);
      v36 += 2;
      --v37;
    }

    while (v37);
  }

LABEL_174:
                      unsigned __int16 v118 = *(_WORD *)(a1 + 720);
                      goto LABEL_153;
                    }
                  }
                }
              }
            }
          }

          if (v113 <= v110) {
            goto LABEL_149;
          }
        }

        v111 -= 4;
      }
    }

    int v190 = 0;
    unsigned int v189 = 0LL;
    int v73 = *(__int16 *)(a1 + 992);
    __int16 v182 = v68;
    int v187 = v68;
    uint64_t v74 = *(_WORD **)(a1 + 1016);
    uint64_t v75 = v70 - 4;
    uint64_t v184 = *(void *)(a1 + 680);
    while (1)
    {
      uint64_t v77 = *v75;
      uint64_t v78 = &v74[2 * v77];
      if (*v78 < 0) {
        goto LABEL_77;
      }
      *(_WORD *)(a1 + 722) = v78[1];
      if ((*v78 & 0x7FFF) != 0)
      {
        int v76 = (__int16)(*(_WORD *)(a1 + 564) + v75[*(int *)(a1 + 528)]);
        goto LABEL_76;
      }

      int v76 = (__int16)v75[1];
      if (!*v75) {
        break;
      }
LABEL_76:
      if (v76 <= v73) {
        goto LABEL_84;
      }
LABEL_77:
      v75 -= 4;
    }

    int v76 = (__int16)(*(_WORD *)(a1 + 562) + v76 + *(_WORD *)(a1 + 564));
    if (v76 > v73 || !*(_WORD *)(a1 + 572))
    {
      unsigned __int16 v81 = 0;
      *(_WORD *)(a1 + 720) = 0;
      uint64_t v188 = v75;
      int v181 = v71;
      uint64_t v82 = (unsigned __int8 *)v71 - 1;
      uint64_t v83 = *v71;
      goto LABEL_87;
    }

    *(_WORD *)(a1 + 722) = 0;
LABEL_84:
    uint64_t v188 = v75;
    *(_WORD *)(a1 + 716) = v76;
    unsigned int v79 = &v74[2 * v77 + 2];
    do
    {
      int v80 = *v79;
      v79 += 2;
    }

    while (v80 < 0);
    unsigned __int16 v81 = *(v79 - 1) - 1;
    *(_WORD *)(a1 + 720) = v81;
    int v181 = v71;
    uint64_t v82 = (unsigned __int8 *)v71 - 1;
    uint64_t v83 = *v71;
LABEL_90:
    unsigned int v85 = v188;
    sub_1000586F4(a1, (unint64_t)v71, (unint64_t *)&v187, (uint64_t)v188);
    LODWORD(v86) = *(unsigned __int16 *)(a1 + 720);
    if (*(unsigned __int16 *)(a1 + 722) < v86)
    {
LABEL_104:
      *(_WORD *)(a1 + 720) = (_WORD)v86 - 1;
      if (*(_DWORD *)(a1 + 524) == 3) {
        goto LABEL_134;
      }
      while (1)
      {
        while (1)
        {
LABEL_110:
          unsigned __int16 v81 = *(_WORD *)(a1 + 720);
          uint64_t v82 = (unsigned __int8 *)v71 - 1;
          uint64_t v83 = *v71;
          while (1)
          {
LABEL_87:
            if (!(_DWORD)v83)
            {
              uint64_t v106 = v187;
              if (v71[1] > *(_WORD *)(a1 + 992))
              {
                _WORD *v187 = 0;
                __int16 v72 = 0x4000;
              }

              else
              {
                uint64_t v107 = *(void *)(a1 + 384);
                uint64_t v108 = (unsigned __int16 *)sub_100015BAC(v107, *v74 & 0x7FFF);
                *uint64_t v106 = 0;
                int v109 = (__int16)v71[1];
                if (v109 <= *(__int16 *)(a1 + 992))
                {
                  uint64_t v135 = *v108;
                  int v136 = *(unsigned __int16 *)(*(void *)(v107 + 1792) + 2 * v135);
                  if (v136 == 0x4000) {
                    LOWORD(v136) = sub_100015BC0(v107, v135);
                  }
                  __int16 v72 = v136 + v109 - *(_WORD *)(a1 + 994);
                }

                else
                {
                  __int16 v72 = 0x4000;
                }
              }

              v106[1] = v72;
              v106[3] = 0;
              v71 -= 4;
              uint64_t v68 = v106 - 4;
              unsigned int v70 = v188;
              if (*(_DWORD *)(a1 + 524) == 3) {
                return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v178);
              }
              goto LABEL_72;
            }

            v82 -= 8;
            unsigned int v84 = *(v71 - 4);
            v71 -= 4;
            uint64_t v83 = v84;
            if (v84 < v81) {
              goto LABEL_90;
            }
          }

          uint64_t v93 = &v74[2 * v83];
          if ((!qword_1000FDCC0 || *(void *)(qword_1000FDCC0 + 3688) <= (uint64_t)*((unsigned __int8 *)v71 + 7))
            && *v93 < 0)
          {
            sub_10009B1B8(*(void *)(a1 + 728), (unsigned __int16)v74[2 * v83 + 1], 0LL, &v189, &v190);
            uint64_t v95 = *((unsigned __int8 *)v71 + 7);
          }

          unsigned int v94 = v187;
          sub_100058840(a1, v71, (uint64_t)v187, &v188, *v93);
          v71 -= 4;
          int v187 = v94 - 4;
          unsigned int v70 = v186;
          if (*(_DWORD *)(a1 + 524) == 3) {
            goto LABEL_134;
          }
        }

        __int16 v96 = v189;
        uint64_t v191 = v188;
        uint64_t v192 = v187;
        int v97 = *v71;
        uint64_t v98 = *((unsigned __int8 *)v71 + 7);
        sub_100058C14(a1, v71, (uint64_t *)&v192, (uint64_t)v71, v189[v98]);
        uint64_t v98 = *((unsigned __int8 *)v71 + 7);
LABEL_116:
        int v99 = v192;
        sub_100058840(a1, v71, (uint64_t)v192, &v191, *v93);
        uint64_t v100 = v99 - 4;
        uint64_t v192 = v100;
        int v101 = *(v71 - 4);
        v71 -= 4;
        if (v101 == v97) {
          goto LABEL_125;
        }
LABEL_133:
        int v187 = v100;
        uint64_t v188 = v191;
        int v13 = v180;
        unsigned int v70 = v186;
        if (*(_DWORD *)(a1 + 524) == 3) {
          goto LABEL_134;
        }
      }

      if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v98) <= v97) {
        goto LABEL_116;
      }
LABEL_121:
      int v102 = v192;
      sub_100058D60(a1, v71, (uint64_t)v192, v96[v98 - 1]);
      uint64_t v100 = v102 - 4;
      uint64_t v192 = v100;
      int v103 = *(v71 - 4);
      v71 -= 4;
      if (v103 != v97) {
        goto LABEL_133;
      }
      while (1)
      {
LABEL_125:
        uint64_t v105 = *v82;
        if ((int)v105 + 1 >= v82[8])
        {
          if (*(_DWORD *)(*(void *)(a1 + 680) + 4 * v105) <= v97)
          {
LABEL_127:
            uint64_t v100 = v192;
            sub_100058840(a1, (unsigned __int16 *)(v82 - 7), (uint64_t)v192, &v191, *v93);
            goto LABEL_123;
          }
        }

        else
        {
          sub_100058C14(a1, v82 - 7, (uint64_t *)&v192, (uint64_t)(v82 - 7), v96[v105]);
          uint64_t v105 = *v82;
        }

        uint64_t v100 = v192;
        sub_100058D60(a1, (unsigned __int16 *)(v82 - 7), (uint64_t)v192, v96[v105 - 1]);
LABEL_123:
        v100 -= 4;
        uint64_t v192 = v100;
LABEL_124:
        int v104 = *(unsigned __int16 *)(v82 - 15);
        v82 -= 8;
        if (v104 != v97)
        {
          unsigned int v71 = (unsigned __int16 *)(v82 - 7);
          goto LABEL_133;
        }
      }
    }

    uint64_t v87 = *(void *)(a1 + 1016);
    unsigned int v88 = v85 - 4;
    while (2)
    {
      uint64_t v90 = *v88;
      uint64_t v91 = (__int16 *)(v87 + 4 * v90);
      if (*v91 < 0) {
        goto LABEL_94;
      }
      *(_WORD *)(a1 + 722) = v91[1];
      if ((*v91 & 0x7FFF) != 0)
      {
        int v89 = (__int16)(*(_WORD *)(a1 + 564) + v88[*(int *)(a1 + 528)]);
LABEL_93:
LABEL_94:
        v88 -= 4;
        continue;
      }

      break;
    }

    int v89 = (__int16)v88[1];
    if (*v88) {
      goto LABEL_93;
    }
    int v89 = (__int16)(*(_WORD *)(a1 + 562) + v89 + *(_WORD *)(a1 + 564));
    if (v89 <= *(__int16 *)(a1 + 992) && *(_WORD *)(a1 + 572))
    {
      *(_WORD *)(a1 + 722) = 0;
LABEL_101:
      uint64_t v188 = v88;
      *(_WORD *)(a1 + 716) = v89;
      __int16 v86 = (__int16 *)(v87 + 4 * v90 + 4);
      do
      {
        int v92 = *v86;
        v86 += 2;
      }

      while (v92 < 0);
      LOWORD(v86) = *(v86 - 1);
      goto LABEL_104;
    }

    *(_WORD *)(a1 + 720) = 0;
    uint64_t v188 = v88;
    if (*(_DWORD *)(a1 + 524) != 3) {
      goto LABEL_110;
    }
LABEL_134:
    unsigned int v71 = v181;
    uint64_t v68 = v182;
    if (*(_DWORD *)(a1 + 524) == 3) {
      return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v178);
    }
LABEL_72:
    if (++v69 != v13) {
      continue;
    }
    break;
  }

  uint64_t v67 = *(void *)(a1 + 864);
LABEL_193:
  __int16 v139 = v68 + 4;
  unint64_t v140 = v67 - (void)(v68 + 4);
  unint64_t v141 = v140 >> 3;
  int v142 = sub_100062F94(*(void *)(a1 + 656));
  if (*(_DWORD *)(a1 + 880) <= (int)(v140 >> 3))
  {
    *(_DWORD *)(a1 + 524) = 3;
    return sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v178);
  }

  int v143 = v142;
  unint64_t v144 = *(void *)(a1 + 864);
  int v145 = *(int **)(a1 + 736);
  uint64_t v146 = (void *)*((void *)v145 + 1);
  uint64_t v147 = *v145;
  bzero(v146, 2 * v147);
  int v148 = sub_100062F94(*(void *)(a1 + 656));
  if ((int)v141 < 1)
  {
    __int16 v150 = 0x4000;
  }

  else
  {
    unint64_t v149 = v144 - (v140 & 0x7FFFFFFF8LL);
    __int16 v150 = 0x4000;
    do
    {
      int v151 = *(_WORD *)v149 == 0;
      uint64_t v152 = *(__int16 *)(v149 + 2LL * *(unsigned __int8 *)(v149 + 6) + 2);
      v148 -= v151;
      if ((int)v152 < v150 && *(_WORD *)v149)
      {
        *(void *)(a1 + 872) = v149;
        *(_DWORD *)(a1 + 672) = v148;
        __int16 v150 = v152;
      }

      v149 += 8LL;
    }

    while (v149 < v144);
  }

  *(_WORD *)(a1 + 546) = v150;
  int v153 = (__int16)v68[5];
  int v154 = *(__int16 *)(a1 + 996);
  if (v153 < v154)
  {
    *(_WORD *)(a1 + 996) = v68[5];
    int v154 = v153;
    if (v153 >= v150) {
      goto LABEL_208;
    }
LABEL_212:
    *(void *)(a1 + 872) = v139;
    *(_DWORD *)(a1 + 672) = 0;
    __int16 v150 = v154;
    *(_WORD *)(a1 + 544) = v154;
    if (v153 != 0x4000) {
      goto LABEL_213;
    }
LABEL_209:
    *(_DWORD *)(a1 + 648) = 0;
    *(_DWORD *)(a1 + 532) = v141;
    if (v154 != 0x4000) {
      goto LABEL_216;
    }
LABEL_214:
    goto LABEL_216;
  }

  if (v154 < v150) {
    goto LABEL_212;
  }
LABEL_208:
  *(_WORD *)(a1 + 544) = v150;
  if (v153 == 0x4000) {
    goto LABEL_209;
  }
LABEL_213:
  *(_DWORD *)(a1 + 532) = v141;
  if (v154 == 0x4000) {
    goto LABEL_214;
  }
LABEL_216:
  __int16 v155 = *(_WORD *)(a1 + 552) + v150;
  int v156 = sub_100062FD0(*(void *)(a1 + 656));
  uint64_t v157 = *(void *)(a1 + 864);
  uint64_t v158 = sub_100062FAC(*(void *)(a1 + 656), 0);
  int v159 = sub_100062F94(*(void *)(a1 + 656));
  if (v156)
  {
    for (j = 0; ; uint64_t v158 = sub_100062FAC(*(void *)(a1 + 656), j))
    {
      while (1)
      {
        unsigned int v162 = *(unsigned __int16 *)(v157 - 8);
        v157 -= 8LL;
        uint64_t v161 = v162;
        if (!v162) {
          break;
        }
        int v163 = (__int16 *)(v158 + 4 * v161);
        if (*v163 < 0
          && sub_10009B978(*(void *)(a1 + 728), (unsigned __int16)v163[1]) == *(unsigned __int8 *)(v157 + 7))
        {
          sub_100058EE4(a1, (uint64_t)v163, v157, v155);
        }
      }

      if (++j == v159) {
        break;
      }
    }
  }

  else
  {
    unsigned int v166 = *(unsigned __int16 *)(v157 - 8);
    uint64_t v165 = v157 - 8;
    uint64_t v164 = v166;
    if (v166) {
      goto LABEL_227;
    }
    while (++v156 != v159)
    {
      uint64_t v158 = sub_100062FAC(*(void *)(a1 + 656), v156);
      unsigned int v169 = *(unsigned __int16 *)(v165 - 8);
      v165 -= 8LL;
      uint64_t v164 = v169;
      if (v169)
      {
        do
        {
LABEL_227:
          unint64_t v168 = (__int16 *)(v158 + 4 * v164);
          if (*v168 < 0) {
            sub_100058EE4(a1, (uint64_t)v168, v165, v155);
          }
          unsigned int v167 = *(unsigned __int16 *)(v165 - 8);
          v165 -= 8LL;
          uint64_t v164 = v167;
        }

        while (v167);
      }
    }
  }

  j__memmove(*(void **)(a1 + 856), v139, 8 * (int)v141);
  *(void *)(a1 + 872) -= 8 * (*(int *)(a1 + 880) - (uint64_t)(int)v141);
  if (*(_DWORD *)(a1 + 532) == v143 && *(_WORD *)(*(void *)(a1 + 856) + 2LL) == 0x4000) {
    *(_DWORD *)(a1 + 592) = 1;
  }
  if (*(_BYTE *)(a1 + 424)) {
    sub_100039B9C(a1, v170, v171, v172, v173, v174, v175, v176);
  }
  sub_1000070E0( *(void *)(a1 + 384),  (__int16)(*(_WORD *)(a1 + 572) - (*(_DWORD *)(a1 + 600) == 0)),  v178);
  ++*(_WORD *)(a1 + 572);
  uint64_t result = sub_1000B25CC((unsigned int *)(a1 + 756), *(unsigned __int16 *)(a1 + 996) == *(unsigned __int16 *)(a1 + 544));
  if (*(_DWORD *)(a1 + 524) != 3)
  {
    uint64_t result = sub_100053590((_DWORD *)a1);
    if ((_DWORD)result) {
      int v177 = 2;
    }
    else {
      int v177 = 1;
    }
    *(_DWORD *)(a1 + 524) = v177;
  }

  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1064)) {
    return sub_100038EB4(a1);
  }
  return result;
}

                            v222 = v230;
                          }

                          v234 = *((_DWORD *)v110 + 7 * v223 + 3);
                          v236 = v234 != 15 && v234 != 0 || v227 == 3;
                          v448 = v223;
                          if (v236)
                          {
                            v237 = *((_DWORD *)v231 + (int)v222);
                            v238 = (char *)v110 + 28 * v223;
                            v241 = *((_DWORD *)v238 + 2);
                            v239 = v238 + 8;
                            v240 = v241;
                            if (v237 >= v241)
                            {
                              v242 = (int)v222;
                              v243 = v450[(int)v222];
                              if (v243 != -1)
                              {
                                v244 = v222;
                                if (v60) {
                                  v245 = *((_BYTE *)v60 + (int)v222);
                                }
                                else {
                                  v245 = 0;
                                }
                                sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v243,  *((_DWORD *)v459 + (int)v222),  v237,  0,  v245);
                                if (*((_DWORD *)v110 + 7 * v223 + 7))
                                {
                                  v282 = v223 + 1;
                                  v283 = *((_DWORD *)v455 + v242) + *((_DWORD *)v459 + v242);
                                  v284 = 1;
                                  do
                                  {
                                    if (*((_DWORD *)v110 + 7 * v282 + 1) >= v283) {
                                      break;
                                    }
                                    LODWORD(v461) = v284++;
                                    v282 = v284 + v223;
                                  }

                                  while (*((_DWORD *)v110 + 7 * v282));
                                }

                                unsigned __int128 v61 = (v61 + 1);
                                v222 = (v244 + 1);
                                goto LABEL_161;
                              }
                            }

                            if (v227 == 4) {
                              goto LABEL_162;
                            }
                            v246 = (char *)v110 + 28 * v223;
                            v248 = *((int *)v246 + 1);
                            v247 = (int *)(v246 + 4);
                            v249 = (char *)&v458[v248];
                            v224 = (char *)v459 + 4;
                            if (v227 == 3)
                            {
                              switch(*(_WORD *)v249)
                              {
                                case '#':
                                  if (*((_DWORD *)v110 + 7 * v223 + 7) == 2)
                                  {
                                    v288 = *(_WORD **)(*(void *)&v414 + 112LL);
                                    if (v288)
                                    {
                                      v417 = v247;
                                      v433 = v222;
                                      v289 = sub_1000B3680(v441, v288, 0LL, 1LL, 0LL, 30, (uint64_t)v440);
                                      if (v289 >= 1)
                                      {
                                        LODWORD(v460) = 1;
                                        v290 = sub_1000A6858( v441,  v289,  *(_WORD **)(*(void *)&v414 + 112LL),  (uint64_t)v440,  (int *)&v460,  (_DWORD *)&v460 + 1);
                                        sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v290,  *v417,  0,  0,  SBYTE4(v460));
                                        unsigned __int128 v61 = (v61 + 1);
                                      }

                                      goto LABEL_333;
                                    }
                                  }

                                  goto LABEL_163;
                                case '$':
                                  if (v223 < 1)
                                  {
                                    if (v234 == 3) {
                                      goto LABEL_318;
                                    }
                                  }

                                  else if (v234 == 3 && *((_DWORD *)v110 + 7 * (v223 - 1)) != 1)
                                  {
                                    goto LABEL_318;
                                  }

                                  goto LABEL_163;
                                case '&':
                                  v291 = v247;
                                  v292 = v222;
                                  v293 = v441;
                                  v294 = &unk_1000F1438;
                                  goto LABEL_270;
                                case '\'':
                                  if (v223 >= v419 || *((_DWORD *)v110 + 7 * v223 + 7) != 1) {
                                    goto LABEL_163;
                                  }
                                  v250 = v247;
                                  v433 = v222;
                                  v251 = sub_1000B37CC(v441, v249, 0LL, 0LL, 2LL, 30LL, (uint64_t)v440);
                                  if (v251 >= 1)
                                  {
                                    LODWORD(v460) = 1;
                                    v252 = sub_1000A6858( v441,  v251,  &v458[*v250],  (uint64_t)v440,  (int *)&v460,  (_DWORD *)&v460 + 1);
                                    sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v252,  *v250,  0,  0,  SBYTE4(v460));
                                    unsigned __int128 v61 = (v61 + 1);
                                    LODWORD(v461) = 1;
                                  }

                                  goto LABEL_332;
                                case '-':
                                  v411 = v239;
                                  v418 = v247;
                                  v431 = v223;
                                  v292 = v222;
                                  LODWORD(v460) = v240;
                                  v295 = v223 - 1;
                                  if (v223 >= 1
                                    && *((_DWORD *)v110 + 7 * v295 + 3) != 15
                                    && *((_DWORD *)v110 + 7 * v295) == 2
                                    && *((_DWORD *)v110 + 7 * (v223 + 1)) == 2)
                                  {
                                    v296 = sub_1000B3680( v441,  *(_WORD **)(*(void *)&v414 + 224LL),  0LL,  1LL,  0LL,  30,  (uint64_t)v440);
                                    if (v296 < 1)
                                    {
                                      v299 = 0;
                                      v298 = -1;
                                    }

                                    else
                                    {
                                      v297 = v296;
                                      v463[0] = sub_1000CC52C(*(void *)(*(void *)&v414 + 224LL));
                                      v298 = sub_1000A6858( v441,  v297,  *(_WORD **)(*(void *)&v414 + 224LL),  (uint64_t)v440,  v463,  (_DWORD *)&v460 + 1);
                                      v299 = BYTE4(v460);
                                    }

                                    sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v298,  *v418,  0,  0,  v299);
                                    v223 = v448;
                                  }

                                  else
                                  {
                                    v463[0] = 45;
                                    if ((int)sub_1000B3680(v441, v463, 0LL, 1LL, 0LL, 30, (uint64_t)v440) < 1)
                                    {
LABEL_280:
                                      v224 = (char *)v459 + 4;
                                      v222 = v292;
                                      goto LABEL_163;
                                    }

                                    v319 = *v440;
                                    HIDWORD(v460) = 1;
                                    sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v319,  *v418,  1,  0,  1);
                                  }

                                  v224 = (char *)v459 + 4;
                                  unsigned __int128 v61 = (v61 + 1);
                                  v222 = v292;
                                  if ((int)v240 > *v411)
                                  {
                                    v320 = v431 + 1;
                                    if (*((_DWORD *)v110 + 7 * v431 + 7))
                                    {
                                      v321 = (int *)v413 + 7 * (int)v431;
                                      v322 = 1LL;
                                      do
                                      {
                                        v320 = ++v322 + v431;
                                        v323 = *v321;
                                        v321 += 7;
                                      }

                                      while (v323);
                                    }

                                    else
                                    {
                                      LODWORD(v322) = 1;
                                    }

                                    v223 = v223 + v322 - 1;
                                  }

                                  goto LABEL_163;
                                case ':':
                                  if (v223 >= v419) {
                                    goto LABEL_163;
                                  }
                                  v300 = v223 + 1LL;
                                  v301 = (_DWORD *)v110 + 7 * v300;
                                  if (*v301 != 1) {
                                    goto LABEL_316;
                                  }
                                  v302 = v247;
                                  v433 = v222;
                                  v425 = v61;
                                  v303 = sub_1000B37CC(v441, v249, 0LL, 0LL, 1LL, 30LL, (uint64_t)v440);
                                  if (v303 < 1) {
                                    goto LABEL_384;
                                  }
                                  LODWORD(v304) = 1;
                                  LODWORD(v460) = 1;
                                  v305 = sub_1000A6858( v441,  v303,  &v458[*v302],  (uint64_t)v440,  (int *)&v460,  (_DWORD *)&v460 + 1);
                                  v306 = v460;
                                  sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v305,  *v302,  v460,  0,  SBYTE4(v460));
                                  if (!*v301) {
                                    goto LABEL_388;
                                  }
                                  v307 = *v302 + v306;
                                  v222 = v433;
                                  v308 = (int *)v413 + 7 * v223;
                                  v304 = 1LL;
                                  int16x8_t v58 = v456;
                                  unsigned __int128 v60 = v446;
                                  do
                                  {
                                    if (*((_DWORD *)v110 + 7 * v300 + 1) >= v307) {
                                      break;
                                    }
                                    v300 = ++v304 + v223;
                                    v309 = *v308;
                                    v308 += 7;
                                  }

                                  while (v309);
                                  goto LABEL_389;
                                case '<':
                                  if (v223 >= v419) {
                                    goto LABEL_163;
                                  }
                                  v310 = v223 + 1LL;
                                  v311 = (_DWORD *)v110 + 7 * v310;
                                  if (*v311 != 1)
                                  {
LABEL_316:
                                    unsigned __int128 v60 = v446;
                                    goto LABEL_162;
                                  }

                                  v312 = v247;
                                  v433 = v222;
                                  v425 = v61;
                                  v313 = sub_1000B37CC(v441, v249, 0LL, 0LL, 1LL, 30LL, (uint64_t)v440);
                                  if (v313 < 1)
                                  {
LABEL_384:
                                    int16x8_t v58 = v456;
                                    unsigned __int128 v60 = v446;
                                    unsigned __int128 v61 = v425;
                                    goto LABEL_333;
                                  }

                                  LODWORD(v304) = 1;
                                  LODWORD(v460) = 1;
                                  v314 = sub_1000A6858( v441,  v313,  &v458[*v312],  (uint64_t)v440,  (int *)&v460,  (_DWORD *)&v460 + 1);
                                  v315 = v460;
                                  sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v314,  *v312,  v460,  0,  SBYTE4(v460));
                                  if (*v311)
                                  {
                                    v316 = *v312 + v315;
                                    v222 = v433;
                                    v317 = (int *)v413 + 7 * v223;
                                    v304 = 1LL;
                                    int16x8_t v58 = v456;
                                    unsigned __int128 v60 = v446;
                                    do
                                    {
                                      if (*((_DWORD *)v110 + 7 * v310 + 1) >= v316) {
                                        break;
                                      }
                                      v310 = ++v304 + v223;
                                      v318 = *v317;
                                      v317 += 7;
                                    }

                                    while (v318);
                                  }

                                  else
                                  {
LABEL_388:
                                    int16x8_t v58 = v456;
                                    unsigned __int128 v60 = v446;
                                    LODWORD(v61) = v425;
                                    v222 = v433;
                                  }

uint64_t sub_1000586F4(uint64_t result, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned __int16 *)(result + 720);
  int v5 = (__int16)(*(_WORD *)(result + 716) + *(unsigned __int8 *)(*(void *)(result + 1008) + v4));
  if (v5 <= *(__int16 *)(result + 992))
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result + 384);
    int v11 = *(_WORD *)(*(void *)(result + 1016) + 4 * v4) & 0x7FFF;
    uint64_t result = sub_10001D544(*(void *)(result + 384), v11);
    uint64_t v12 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v12 = *(void *)(qword_1000FDCC0 + 4904);
    }
    if (v12 >= (__int16)(result + v5 - *(_WORD *)(v9 + 994)))
    {
LABEL_8:
      unint64_t v13 = *a3;
      if (*a3 <= a2)
      {
        *(_DWORD *)(v9 + 524) = 3;
      }

      else
      {
        *(_WORD *)unint64_t v13 = v4;
        *(_WORD *)(v13 + 4) = 0x4000;
        uint64_t v14 = *(unsigned __int16 *)sub_100015BAC(v10, v11);
        uint64_t result = *(unsigned __int16 *)(*(void *)(v10 + 1792) + 2 * v14);
        if ((_DWORD)result == 0x4000) {
          uint64_t result = sub_100015BC0(v10, v14);
        }
        *(_WORD *)(v13 + 2) = result + v5 - *(_WORD *)(v9 + 994);
        *(_BYTE *)(v13 + 6) = 0;
        *(_BYTE *)(v13 + 7) = *(_BYTE *)(a4 + 7) + 1;
        *a3 -= 8LL;
      }
    }
  }

  return result;
}

uint64_t sub_100058840(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4, __int16 a5)
{
  int v9 = *(__int16 *)(a1 + 992);
  __int16 v10 = *(_WORD *)(a1 + 994);
  uint64_t v11 = *(void *)(a1 + 384);
  if ((a5 & 0x7FFF) == 0)
  {
    uint64_t result = sub_100015BAC(*(void *)(a1 + 384), 0);
    uint64_t v22 = *a2;
    *(_WORD *)a3 = v22;
    if (*(unsigned __int16 *)(a1 + 720) != (_DWORD)v22)
    {
      signed __int16 v23 = a2[1];
      if (v9 < v23) {
        goto LABEL_35;
      }
      goto LABEL_15;
    }

    else {
      signed __int16 v23 = a2[1];
    }
    if (*(unsigned __int16 *)(a1 + 722) < v22)
    {
      *(_WORD *)(a1 + 720) = v22 - 1;
      if (v9 < v23) {
        goto LABEL_35;
      }
      goto LABEL_15;
    }

    uint64_t v38 = *a4;
    uint64_t v39 = *(void *)(a1 + 1016);
    while (1)
    {
      do
      {
        unsigned int v42 = (unsigned __int16)*(v38 - 4);
        v38 -= 4;
        uint64_t v41 = v42;
        uint64_t v43 = (__int16 *)(v39 + 4LL * v42);
      }

      while (*v43 < 0);
      *(_WORD *)(a1 + 722) = v43[1];
      if ((*v43 & 0x7FFF) != 0)
      {
        int v40 = (__int16)(*(_WORD *)(a1 + 564) + v38[*(int *)(a1 + 528)]);
      }

      else
      {
        int v40 = (__int16)v38[1];
        if (!*v38)
        {
          int v40 = (__int16)(*(_WORD *)(a1 + 562) + v40 + *(_WORD *)(a1 + 564));
          if (v40 <= *(__int16 *)(a1 + 992) && *(_WORD *)(a1 + 572))
          {
            *(_WORD *)(a1 + 722) = 0;
LABEL_61:
            *a4 = v38;
            *(_WORD *)(a1 + 716) = v40;
            uint64_t v44 = (__int16 *)(v39 + 4 * v41 + 4);
            do
            {
              int v45 = *v44;
              v44 += 2;
            }

            while (v45 < 0);
            *(_WORD *)(a1 + 720) = *(v44 - 1) - 1;
            if (v9 < v23)
            {
LABEL_35:
              __int16 v21 = 0x4000;
LABEL_36:
              BOOL v18 = 0;
              goto LABEL_37;
            }
          }

          else
          {
            *(_WORD *)(a1 + 720) = 0;
            *a4 = v38;
            if (v9 < v23) {
              goto LABEL_35;
            }
          }

uint64_t sub_100058C14(uint64_t result, _WORD *a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  int v5 = (__int16)(*(_WORD *)(result + 564) + a2[*(int *)(result + 528)]);
  if (v5 <= *(__int16 *)(result + 992))
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void *)(result + 384);
    uint64_t result = sub_10001D544(*(void *)(result + 384), a5);
    uint64_t v12 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v12 = *(void *)(qword_1000FDCC0 + 4904);
    }
    if (v12 >= (__int16)(result + v5 - *(_WORD *)(v10 + 994)))
    {
LABEL_8:
      uint64_t v13 = *a3;
      if (*a3 <= (unint64_t)a2)
      {
        *(_DWORD *)(v10 + 524) = 3;
      }

      else
      {
        *(_WORD *)uint64_t v13 = *a2;
        *(_WORD *)(v13 + 4) = 0x4000;
        uint64_t v14 = *(unsigned __int16 *)sub_100015BAC(v11, a5);
        uint64_t result = *(unsigned __int16 *)(*(void *)(v11 + 1792) + 2 * v14);
        if ((_DWORD)result == 0x4000) {
          uint64_t result = sub_100015BC0(v11, v14);
        }
        *(_WORD *)(v13 + 2) = result + v5 - *(_WORD *)(v10 + 994);
        *(_BYTE *)(v13 + 6) = 0;
        *(_BYTE *)(v13 + 7) = *(_BYTE *)(a4 + 7) + 1;
        *a3 -= 8LL;
      }
    }
  }

  return result;
}

uint64_t sub_100058D60(uint64_t a1, unsigned __int16 *a2, uint64_t a3, int a4)
{
  int v7 = *(__int16 *)(a1 + 992);
  __int16 v8 = *(_WORD *)(a1 + 994);
  uint64_t v9 = *(void *)(a1 + 384);
  uint64_t result = sub_100015BAC(v9, a4);
  uint64_t v11 = (unsigned __int16 *)result;
  *(_WORD *)a3 = *a2;
  else {
    int v12 = (__int16)a2[2];
  }
  if (v12 <= v7)
  {
    uint64_t v15 = *(unsigned __int16 *)(result + 2);
    uint64_t result = *(unsigned __int16 *)(*(void *)(v9 + 1792) + 2 * v15);
    if ((_DWORD)result == 0x4000) {
      uint64_t result = sub_100015BC0(v9, v15);
    }
    int v16 = (__int16)(result + v12 - v8);
    *(_WORD *)(a3 + 4) = result + v12 - v8;
    BOOL v13 = v16 < 0x4000;
    if (v16 >= 0x4000) {
      __int16 v14 = 0x4000;
    }
    else {
      __int16 v14 = v16;
    }
    if (*(a2 - 4) != *a2) {
      goto LABEL_23;
    }
  }

  else
  {
    BOOL v13 = 0;
    __int16 v14 = 0x4000;
    *(_WORD *)(a3 + 4) = 0x4000;
    if (*(a2 - 4) != *a2) {
      goto LABEL_23;
    }
  }

  if (*((unsigned __int8 *)a2 - 1) + 1 == *((unsigned __int8 *)a2 + 7))
  {
    else {
      signed __int16 v17 = a2[1];
    }
    if (v7 < v17) {
      goto LABEL_24;
    }
    goto LABEL_18;
  }

uint64_t sub_100058EE4(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  int v4 = *(__int16 *)(a3 + 2LL * *(int *)(result + 528));
  if (v4 < a4)
  {
    uint64_t v5 = result;
    unsigned int v6 = *(unsigned __int16 *)(a2 + 2);
    int v7 = *(unsigned __int16 *)(result + 806) + v4;
    if (*(_DWORD *)(result + 608)) {
      return sub_100052F8C(v5, (__int16)v7, v6);
    }
    uint64_t v8 = *(void *)(result + 376);
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 5264))
      {
        LOWORD(v7) = v7 + *(unsigned __int8 *)(result + 664);
        return sub_100052F8C(v5, (__int16)v7, v6);
      }

      if (!v8 || *(_DWORD *)(qword_1000FDCC0 + 1776)) {
        return sub_100052F8C(v5, (__int16)v7, v6);
      }
    }

    else if (!v8)
    {
      return sub_100052F8C(v5, (__int16)v7, v6);
    }

    unsigned int v9 = sub_1000BB868(*(void *)(result + 376), *(unsigned __int16 *)(a2 + 2), 0LL);
    v7 += sub_1000BBBB0(v8, v5 + 580, *(_DWORD *)(v5 + 584), v9);
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 5360)) {
        LOWORD(v7) = v7 - sub_100062DE4(v8, v9, *(unsigned __int8 *)(v5 + 664)) + *(unsigned __int8 *)(v5 + 664);
      }
    }

    return sub_100052F8C(v5, (__int16)v7, v6);
  }

  return result;
}

uint64_t sub_100058FEC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 48));
    sub_1000C0EF8(*(void *)(v1 + 16));
    sub_1000C0EF8(*(void *)(v1 + 32));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10005902C(int *a1, _WORD *a2)
{
  uint64_t v2 = *a1;
  else {
    int v3 = v2 + 1;
  }
  unsigned int v4 = v3 >> 1;
  if ((v2 + 1) >= 3)
  {
    unsigned int v9 = (unsigned __int16 *)*((void *)a1 + 5);
    uint64_t v10 = a2;
    int v11 = v3 >> 1;
    do
    {
      int v12 = *v9++;
      BOOL v13 = &a2[v12];
      if (v10 < v13)
      {
        int v14 = *(_DWORD *)v13;
        *BOOL v13 = *v10;
        v13[1] = v10[1];
        *(_DWORD *)uint64_t v10 = v14;
      }

      v10 += 2;
      --v11;
    }

    while (v11);
  }

  if (v4 >= 2)
  {
    uint64_t v5 = a2 + 2;
    unsigned int v6 = v4 >> 1;
    uint64_t v7 = (v4 >> 1) - 1;
    if (v7 >= 7)
    {
      uint64_t v15 = v7 + 1;
      uint64_t v16 = (v7 + 1) & 0x1FFFFFFF8LL;
      v5 += 4 * v16;
      uint64_t v8 = &a2[4 * v16];
      v6 -= v16;
      v17.i64[0] = 0x100000001LL;
      v17.i64[1] = 0x100000001LL;
      uint64_t v18 = v16;
      __int16 v19 = a2;
      do
      {
        int16x8x4_t v80 = vld4q_s16(v19);
        v81.val[3] = vuzp1q_s16( (int16x8_t)vhaddq_s32(vsubl_s16(*(int16x4_t *)v80.val[1].i8, *(int16x4_t *)v80.val[3].i8), v17),  (int16x8_t)vhaddq_s32(vsubl_high_s16(v80.val[1], v80.val[3]), v17));
        v81.val[1] = vrhaddq_s16(v80.val[1], v80.val[3]);
        v81.val[2] = vuzp1q_s16( (int16x8_t)vhaddq_s32(vsubl_s16(*(int16x4_t *)v80.val[0].i8, *(int16x4_t *)v80.val[2].i8), v17),  (int16x8_t)vhaddq_s32(vsubl_high_s16(v80.val[0], v80.val[2]), v17));
        v81.val[0] = vrhaddq_s16(v80.val[0], v80.val[2]);
        vst4q_s16(v19, v81);
        v19 += 32;
        v18 -= 8LL;
      }

      while (v18);
      if (v15 == v16)
      {
LABEL_17:
        if (v4 >= 4)
        {
          unsigned int v26 = v4 >> 2;
          uint64_t v27 = a2 + 5;
          unsigned int v28 = v4 >> 2;
          do
          {
            int v29 = *v27;
            int v30 = *(v27 - 4) + 1;
            *uint64_t v27 = (v30 - v29) >> 1;
            *(v27 - 4) = (v30 + v29) >> 1;
            int v31 = *(v27 - 1);
            int v32 = *(v27 - 5) + 1;
            *(v27 - 1) = (v32 - v31) >> 1;
            *(v27 - 5) = (v32 + v31) >> 1;
            v27 += 8;
            --v28;
          }

          while (v28);
          uint64_t v33 = a2 + 6;
          do
          {
            int v34 = *v33;
            int v35 = v33[1];
            int v36 = *(v33 - 3) + 1;
            v33[1] = (v36 + v34) >> 1;
            *(v33 - 3) = (v36 - v34) >> 1;
            int v37 = *(v33 - 4) + 1;
            *uint64_t v33 = (v37 - v35) >> 1;
            *(v33 - 4) = (v37 + v35) >> 1;
            v33 += 8;
            --v26;
          }

          while (v26);
        }

        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v8 = a2;
    }

    signed __int16 v20 = v5 + 1;
    __int16 v21 = v8 + 1;
    do
    {
      int v22 = *v20;
      int v23 = *v21 + 1;
      *signed __int16 v20 = (v23 - v22) >> 1;
      *__int16 v21 = (v23 + v22) >> 1;
      int v24 = *(v20 - 1);
      int v25 = *(v21 - 1) + 1;
      *(v20 - 1) = (v25 - v24) >> 1;
      *(v21 - 1) = (v25 + v24) >> 1;
      v20 += 4;
      v21 += 4;
      --v6;
    }

    while (v6);
    goto LABEL_17;
  }

void *sub_100059444( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BCAE8(a1, "bfc0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    uint64_t v10 = (void *)sub_1000C1074(56LL);
    if (v10)
    {
      if (!sub_1000BCD38(v9, v10)) {
        goto LABEL_17;
      }
      int v17 = 0;
      int v11 = v10 + 2;
      if (*v11)
      {
        if (v17 != *(_DWORD *)v10) {
          goto LABEL_17;
        }
        v10[1] = *v11;
      }

      int v16 = 0;
      int v12 = v10 + 4;
      if (*v12)
      {
        if (v16 != *(_DWORD *)v10 / 2) {
          goto LABEL_17;
        }
        v10[3] = *v12;
      }

      int v15 = 0;
      BOOL v13 = v10 + 6;
      if (*v13)
      {
        if (v15 == *(_DWORD *)v10 / 2)
        {
          v10[5] = *v13;
          goto LABEL_18;
        }

uint64_t sub_1000595C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C1074(32LL);
  if (!v4) {
    return v4;
  }
  uint64_t v5 = sub_1000C13F8(1LL, a2, a1);
  *(void *)uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = sub_1000C1074(4LL * (int)a2);
    *(void *)(v4 + 8) = v6;
    if (v6)
    {
      *(_DWORD *)(v4 + 20) = a2;
      *(_DWORD *)(v4 + 24) = 0;
      *(_DWORD *)(v4 + 16) = a1;
      return v4;
    }

    if (*(void *)v4)
    {
      sub_1000C133C(*(void *)v4);
      sub_1000C0EF8(*(void *)(v4 + 8));
    }
  }

  *(void *)uint64_t v4 = 0LL;
  *(_DWORD *)(v4 + 20) = 0;
  *(_DWORD *)(v4 + 24) = 0;
  sub_1000C0EF8(v4);
  return 0LL;
}

uint64_t sub_100059670(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)a1;
    if (*(void *)a1)
    {
      sub_1000C133C(v2);
      sub_1000C0EF8(*(void *)(a1 + 8));
    }

    *(void *)a1 = 0LL;
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
  }

  return sub_1000C0EF8(a1);
}

uint64_t sub_1000596B0(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1000596B8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1000596C0(uint64_t a1, const void *a2, _DWORD *a3)
{
  uint64_t v3 = *(int *)(a1 + 24);
  memcpy(*(void **)(*(void *)a1 + 8 * v3), a2, *(int *)(a1 + 16));
  *(_DWORD *)(*(void *)(a1 + 8) + 4LL * (int)(*(_DWORD *)(a1 + 24))++) = *a3;
  return 1LL;
}

uint64_t sub_100059730(void *a1, int a2, void *a3)
{
  *a3 = a1[1] + 4LL * a2;
  return *(void *)(*a1 + 8LL * a2);
}

uint64_t (**sub_100059748(uint64_t (**result)(void)))(void)
{
  if (result) {
    return (uint64_t (**)(void))(*result)();
  }
  return result;
}

uint64_t sub_100059758(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_100059760(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a1 + 96))();
  (*(void (**)(uint64_t, uint64_t))(a1 + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 104))(a1, v4);
}

uint64_t sub_1000597B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 104))();
}

uint64_t sub_1000597B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_1000597C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t sub_1000597C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1000597D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

uint64_t sub_1000597D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 48))();
}

uint64_t sub_1000597E0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 280);
}

uint64_t sub_1000597E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 292);
}

uint64_t sub_1000597F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 300);
}

uint64_t sub_1000597F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

uint64_t sub_100059800(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

uint64_t sub_100059808(uint64_t a1)
{
  return *(unsigned int *)(a1 + 316);
}

uint64_t sub_100059810(uint64_t a1)
{
  return *(unsigned int *)(a1 + 304);
}

uint64_t sub_100059818(uint64_t a1)
{
  return *(unsigned int *)(a1 + 360);
}

uint64_t sub_100059820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 128))();
}

uint64_t sub_100059828(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 136))();
}

uint64_t sub_100059830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 144))();
}

uint64_t sub_100059838(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 200))();
}

uint64_t sub_100059840(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 224))();
}

uint64_t sub_100059848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 232))();
}

uint64_t sub_100059850(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 240))();
}

uint64_t sub_100059858(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = sub_1000BE644(*(_DWORD *)(a1 + 280), 4, 0xFFFFFFFF);
  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 292), 4, v4);
  unsigned int v6 = sub_1000BE644(*(_DWORD *)(a1 + 296), 4, v5);
  unsigned int v7 = sub_1000BE644(*(_DWORD *)(a1 + 300), 4, v6);
  unsigned int v8 = sub_1000BE644(*(_DWORD *)(a1 + 304), 4, v7);
  unsigned int v9 = sub_1000BE644(*(_DWORD *)(a1 + 312), 4, v8);
  unsigned int v10 = sub_1000BE644(*(_DWORD *)(a1 + 316), 4, v9);
  if ((_DWORD)a2) {
    unsigned int v10 = sub_1000BE644(*(_DWORD *)(a1 + 320), 4, v10);
  }
  unsigned int v11 = sub_1000BE644(*(_DWORD *)(a1 + 324), 4, v10);
  unsigned int v12 = sub_1000BE644(*(_DWORD *)(a1 + 328), 4, v11);
  unsigned int v13 = sub_1000BE644(*(_DWORD *)(a1 + 332), 4, v12);
  unsigned int v14 = sub_1000BE644(*(_DWORD *)(a1 + 340), 4, v13);
  unsigned int v15 = sub_1000BE644(*(_DWORD *)(a1 + 344), 4, v14);
  unsigned int v16 = sub_1000BE644(*(_DWORD *)(a1 + 348), 4, v15);
  unsigned int v17 = sub_1000BE644(*(_DWORD *)(a1 + 352), 4, v16);
  unsigned int v18 = sub_1000BE644(*(_DWORD *)(a1 + 356), 4, v17);
  uint64_t v19 = sub_1000BE644(*(_DWORD *)(a1 + 360), 4, v18);
  signed __int16 v20 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 264);
  if (v20)
  {
    unsigned int v21 = v20(a1, a2);
    return sub_1000BE644(v21, 4, v19);
  }

  return v19;
}

uint64_t sub_1000599D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 248))();
}

uint64_t sub_1000599D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 256))();
}

uint64_t sub_1000599E0( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = sub_1000BCAE8(a1, "bfty", a2, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    int v21 = 0;
    if (!sub_1000BCCEC((uint64_t)v10, &v21) || v21 == 0)
    {
      sub_1000BCBC8(v11);
    }

    else
    {
      uint64_t v19 = sub_100059B1C(a1, a2, v12, v13, v14, v15, v16, v17);
      sub_1000BCBC8(v11);
      if (v19) {
        return v19;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100059A8C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 340)) {
    sub_100022F18(*(void *)(a1 + 432));
  }
  if (*(_DWORD *)(a1 + 344))
  {
    sub_100006EFC(*(void *)(a1 + 440));
    sub_1000C133C(*(void *)(a1 + 400));
  }

  return sub_1000C0EF8(a1);
}

uint64_t sub_100059B1C( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = sub_1000BCAE8(a1, "bfx1", a2, a4, a5, a6, a7, a8);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = (uint64_t (**)(uint64_t))sub_1000C1074(520LL);
  uint64_t v13 = (uint64_t)v12;
  if (v12)
  {
    void *v12 = sub_100059A8C;
    v12[1] = (uint64_t (*)(uint64_t))sub_100059F98;
    v12[2] = sub_10005A05C;
    v12[3] = (uint64_t (*)(uint64_t))sub_10005A068;
    v12[4] = (uint64_t (*)(uint64_t))sub_10005A1A0;
    v12[5] = sub_10005A27C;
    v12[6] = (uint64_t (*)(uint64_t))sub_10005A40C;
    v12[7] = (uint64_t (*)(uint64_t))sub_10005A4DC;
    v12[8] = (uint64_t (*)(uint64_t))sub_10005A950;
    v12[9] = (uint64_t (*)(uint64_t))sub_10005AA20;
    v12[10] = sub_10005AB7C;
    v12[11] = sub_10005AC00;
    v12[12] = sub_10005AC08;
    v12[13] = (uint64_t (*)(uint64_t))sub_10005AC10;
    v12[14] = sub_10005AC18;
    v12[16] = (uint64_t (*)(uint64_t))sub_10005ACBC;
    v12[17] = (uint64_t (*)(uint64_t))sub_10005B090;
    v12[18] = (uint64_t (*)(uint64_t))sub_10005B210;
    v12[19] = sub_10005B230;
    v12[20] = (uint64_t (*)(uint64_t))sub_10005B2B4;
    v12[21] = (uint64_t (*)(uint64_t))sub_10005B2BC;
    v12[22] = (uint64_t (*)(uint64_t))sub_10005B2C4;
    v12[23] = (uint64_t (*)(uint64_t))sub_10005B2CC;
    v12[24] = sub_10005B2D4;
    v12[25] = (uint64_t (*)(uint64_t))sub_10005B2DC;
    v12[26] = sub_10005B3CC;
    v12[28] = (uint64_t (*)(uint64_t))sub_10005B3D4;
    v12[29] = (uint64_t (*)(uint64_t))sub_10005B3DC;
    v12[30] = (uint64_t (*)(uint64_t))sub_10005B52C;
    v12[31] = (uint64_t (*)(uint64_t))sub_10005B65C;
    v12[32] = (uint64_t (*)(uint64_t))sub_10005B6E4;
    v12[33] = 0LL;
    if (!sub_1000BCD38(v11, v12 + 35)
      || !sub_1000BCD38(v11, (void *)(v13 + 284))
      || !sub_1000BCD38(v11, (void *)(v13 + 288))
      || !sub_1000BCD38(v11, (void *)(v13 + 292))
      || !sub_1000BCD38(v11, (void *)(v13 + 296))
      || !sub_1000BCD38(v11, (void *)(v13 + 300))
      || !sub_1000BCD38(v11, (void *)(v13 + 304))
      || !sub_1000BCD38(v11, (void *)(v13 + 308))
      || !sub_1000BCD38(v11, (void *)(v13 + 312))
      || !sub_1000BCD38(v11, (void *)(v13 + 316))
      || !sub_1000BCD38(v11, (void *)(v13 + 320))
      || !sub_1000BCD38(v11, (void *)(v13 + 324))
      || !sub_1000BCD38(v11, (void *)(v13 + 328))
      || !sub_1000BCD38(v11, (void *)(v13 + 332))
      || !sub_1000BCCEC(v11, (_DWORD *)(v13 + 340))
      || (uint64_t v14 = (_DWORD *)(v13 + 344), !sub_1000BCCEC(v11, (_DWORD *)(v13 + 344)))
      || !sub_1000BCCEC(v11, (_DWORD *)(v13 + 348))
      || !sub_1000BCCEC(v11, (_DWORD *)(v13 + 352))
      || !sub_1000BCCEC(v11, (_DWORD *)(v13 + 356)))
    {
      sub_1000BCBC8(v11);
      *(_DWORD *)(v13 + 484) = 3;
      *(_DWORD *)(v13 + 492) = 0;
LABEL_30:
      sub_100059A8C(v13);
      return 0LL;
    }

    BOOL v15 = sub_1000BCCEC(v11, (_DWORD *)(v13 + 360));
    sub_1000BCBC8(v11);
    *(_DWORD *)(v13 + 484) = 3;
    *(_DWORD *)(v13 + 492) = 0;
    if (!v15) {
      goto LABEL_30;
    }
    uint64_t v22 = sub_1000A12A4(a1, a2, v16, v17, v18, v19, v20, v21);
    *(void *)(v13 + 408) = v22;
    if (!v22) {
      goto LABEL_30;
    }
    uint64_t v29 = sub_100021A70(a1, a2, v23, v24, v25, v26, v27, v28);
    *(void *)(v13 + 416) = v29;
    if (!v29) {
      goto LABEL_30;
    }
    uint64_t v36 = sub_100022C78(a1, a2, v30, v31, v32, v33, v34, v35);
    *(void *)(v13 + 424) = v36;
    if (!v36) {
      goto LABEL_30;
    }
    if (*(_DWORD *)(v13 + 340))
    {
      uint64_t v43 = sub_10002342C(a1, a2, v37, v38, v39, v40, v41, v42);
      *(void *)(v13 + 432) = v43;
      if (!v43) {
        goto LABEL_30;
      }
    }

    else
    {
      *(void *)(v13 + 432) = 0LL;
    }

    if (*v14)
    {
      uint64_t v45 = sub_100022108(a1, a2, v37, v38, v39, v40, v41, v42);
      *(void *)(v13 + 440) = v45;
      if (!v45) {
        goto LABEL_30;
      }
    }

    else
    {
      *(void *)(v13 + 440) = 0LL;
    }

    uint64_t v46 = sub_10005FDE8(a1, a2, (void *)(v13 + 456), v38, v39, v40, v41, v42);
    *(void *)(v13 + 448) = v46;
    if (!v46) {
      goto LABEL_30;
    }
    int v47 = sub_100059840(v13);
    uint64_t v48 = sub_1000C1074(v47);
    *(void *)(v13 + 392) = v48;
    if (!v48) {
      goto LABEL_30;
    }
    unsigned int v49 = *(_DWORD *)(v13 + 320);
    if (*(_DWORD *)(v13 + 352)) {
      uint64_t v50 = v49 + 100;
    }
    else {
      uint64_t v50 = *(_DWORD *)(v13 + 356) ? v49 + 1000 : v49;
    }
    uint64_t v51 = sub_1000C13F8(2LL, v50, *(unsigned int *)(v13 + 304));
    *(void *)(v13 + 368) = v51;
    if (!v51) {
      goto LABEL_30;
    }
    uint64_t v52 = sub_1000C1074((int)v50);
    *(void *)(v13 + 384) = v52;
    if (!v52) {
      goto LABEL_30;
    }
    uint64_t v53 = sub_1000C1074(2LL * *(int *)(v13 + 304));
    *(void *)(v13 + 376) = v53;
    if (!v53) {
      goto LABEL_30;
    }
    if (!*v14)
    {
      *(void *)(v13 + 400) = 0LL;
      return v13;
    }

    int v54 = sub_1000220FC(*(void *)(v13 + 440));
    uint64_t v55 = sub_1000C13F8(2LL, v50, (v54 + 1));
    *(void *)(v13 + 400) = v55;
    if (!v55) {
      goto LABEL_30;
    }
  }

  return v13;
}

void sub_100059F98(uint64_t a1, int a2)
{
  if (!a2)
  {
    *(void *)(a1 + 476) = 0LL;
    *(void *)(a1 + 508) = 0LL;
    *(_DWORD *)(a1 + 464) = 0;
    *(_DWORD *)(a1 + 468) = *(_DWORD *)(a1 + 320) - *(_DWORD *)(a1 + 324);
    *(_DWORD *)(a1 + 500) = 0;
    sub_10002222C(*(void *)(a1 + 424));
  }

  if (*(_DWORD *)(a1 + 340)) {
    sub_100022F64(*(int **)(a1 + 432), a2);
  }
  if (a2)
  {
    sub_1000A17F8(*(void *)(a1 + 408), 0);
    goto LABEL_9;
  }

  sub_1000A1484(*(void *)(a1 + 408));
  sub_1000A17F8(*(void *)(a1 + 408), 0);
  if (!*(_DWORD *)(a1 + 344))
  {
LABEL_9:
    if (a2) {
      return;
    }
    goto LABEL_10;
  }

  sub_100021C00(*(void *)(a1 + 440));
LABEL_10:
  bzero(*(void **)(a1 + 384), *(int *)(a1 + 320));
}

uint64_t sub_10005A05C(uint64_t result)
{
  *(_DWORD *)(result + 336) = 1;
  return result;
}

uint64_t sub_10005A068(uint64_t a1, int a2)
{
  *(void *)(a1 + 352) = 0LL;
  uint64_t result = sub_1000222E0(*(void *)(a1 + 424));
  int v5 = *(_DWORD *)(a1 + 464);
  int v6 = v5 - *(_DWORD *)(a1 + 468);
  if (v6 < 0) {
    v6 += *(_DWORD *)(a1 + 320);
  }
  int v7 = (2 * *(_DWORD *)(a1 + 324)) | 1;
  if (v6 <= v7) {
    int v7 = 0;
  }
  int v8 = v6 - v7;
  if (v8 >= a2 / *(_DWORD *)(a1 + 284)) {
    int v8 = a2 / *(_DWORD *)(a1 + 284);
  }
  int v9 = v5 + ~v8;
  if (v9 < 0)
  {
    v9 += *(_DWORD *)(a1 + 320);
    *(_DWORD *)(a1 + 468) = v9;
    if (v9 == v5) {
      return result;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 468) = v9;
    if (v9 == v5) {
      return result;
    }
  }

  BOOL v10 = v8 > *(_DWORD *)(a1 + 332);
  do
  {
    uint64_t v12 = v9;
    if ((*(_BYTE *)(*(void *)(a1 + 384) + v9) & 4) != 0)
    {
      int v13 = *(_DWORD *)(a1 + 332) + v9;
      int v14 = *(_DWORD *)(a1 + 320);
      if (v13 < v14) {
        int v14 = 0;
      }
      int v15 = v13 - v14;
      uint64_t result = (uint64_t)sub_100023044( *(int **)(a1 + 432),  *(__int16 **)(*(void *)(a1 + 368) + 8 * v12),  *(void *)(a1 + 424));
      int v5 = *(_DWORD *)(a1 + 464);
      if (v15 == v5 || !v10)
      {
        BOOL v10 = 0;
      }

      else
      {
        *(_BYTE *)(*(void *)(a1 + 384) + v12) |= 0x10u;
        int v5 = *(_DWORD *)(a1 + 464);
        BOOL v10 = 1;
      }
    }

    int v11 = *(_DWORD *)(a1 + 320);
    int v9 = v12 + 1 - v11;
  }

  while (v9 != v5);
  return result;
}

void sub_10005A1A0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 484) = 3;
  *(_DWORD *)(a1 + 492) = 0;
  *(void *)(a1 + 496) = 0LL;
  uint64_t v4 = qword_1000FDCC0;
  if (*(_DWORD *)(a1 + 340))
  {
    if (qword_1000FDCC0) {
      int v5 = *(_DWORD *)(qword_1000FDCC0 + 2744);
    }
    else {
      int v5 = 0;
    }
    *(_DWORD *)(a1 + 332) = v5;
    *(_DWORD *)(a1 + 336) = 0;
  }

  if (v4)
  {
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(v4 + 2908);
    LODWORD(v4) = *(_DWORD *)(v4 + 2452);
  }

  else
  {
    *(_DWORD *)(a1 + 352) = 0;
  }

  *(_DWORD *)(a1 + 356) = v4;
  *(_DWORD *)(a1 + 488) = a2 != 0;
  sub_1000A148C(*(void *)(a1 + 408));
  sub_1000222FC(*(void *)(a1 + 424), a2);
  bzero(*(void **)(a1 + 384), *(int *)(a1 + 320));
  int v6 = *(_DWORD *)(a1 + 320) - *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 468) = v6;
  if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356)) {
    *(_DWORD *)(a1 + 472) = v6;
  }
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 476) = 0;
  *(void *)(a1 + 508) = 0LL;
}

uint64_t sub_10005A27C(uint64_t a1)
{
  uint64_t result = nullsub_1(*(void *)(a1 + 408));
  int v3 = *(_DWORD *)(a1 + 492);
  if (*(_DWORD *)(a1 + 340))
  {
    if (v3)
    {
LABEL_3:
      int v4 = 2;
LABEL_18:
      *(_DWORD *)(a1 + 484) = v4;
    }
  }

  else
  {
    if (v3 && !*(_DWORD *)(a1 + 348) && !*(_DWORD *)(a1 + 496)) {
      goto LABEL_3;
    }
    if (*(_DWORD *)(a1 + 488))
    {
      if (*(_DWORD *)(a1 + 348))
      {
        int v5 = *(_DWORD *)(a1 + 464);
        int v6 = v5 - *(_DWORD *)(a1 + 324);
        if (v6 < 0) {
          v6 += *(_DWORD *)(a1 + 320);
        }
        if (v6 != v5)
        {
          uint64_t v10 = *(void *)(a1 + 384);
          int v11 = (_BYTE *)(v10 + v6);
          do
          {
            if ((*v11 & 4) == 0)
            {
              int v12 = sub_100021140( *(int **)(a1 + 416),  *(void *)(a1 + 368),  v5,  *(_DWORD *)(a1 + 320),  *(_DWORD *)(a1 + 476),  1);
              uint64_t v10 = *(void *)(a1 + 384);
              if (v12)
              {
                sub_100022378( *(void *)(a1 + 424),  *(void *)(*(void *)(a1 + 368) + 8LL * v6),  *(_BYTE *)(v10 + v6));
                *v11++ |= 4u;
                uint64_t v13 = *(int *)(a1 + 320);
                else {
                  int v5 = 0;
                }
                else {
                  int v6 = 0;
                }
                uint64_t v10 = *(void *)(a1 + 384);
              }
            }
          }

          while (v11 != (_BYTE *)(v10 + *(int *)(a1 + 464)));
        }
      }

      uint64_t result = sub_100022430(*(void *)(a1 + 424));
      if ((_DWORD)result)
      {
        uint64_t v7 = *(int *)(a1 + 468);
        int v8 = (_BYTE *)(*(void *)(a1 + 384) + v7);
        if ((_DWORD)v7 != *(_DWORD *)(a1 + 464))
        {
          do
          {
            *v8++ |= 8u;
            uint64_t v9 = *(void *)(a1 + 384);
          }

          while (v8 != (_BYTE *)(v9 + *(int *)(a1 + 464)));
        }

        *v8 |= 8u;
        int v4 = 6;
        goto LABEL_18;
      }
    }
  }

  *(_DWORD *)(a1 + 492) = 1;
  return result;
}

uint64_t sub_10005A40C(uint64_t a1, __int16 *a2)
{
  if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
  {
    int v3 = *(_DWORD *)(a1 + 468);
    int v4 = *(_DWORD *)(a1 + 464);
    int v5 = v3 - v4;
    if (v3 - v4 >= 0)
    {
      if (v5 > 1) {
        goto LABEL_11;
      }
LABEL_7:
      if (v3 + 1 < *(_DWORD *)(a1 + 320)) {
        int v6 = v3 + 1;
      }
      else {
        int v6 = 0;
      }
      *(_DWORD *)(a1 + 468) = v6;
      goto LABEL_11;
    }

    if (*(_DWORD *)(a1 + 320) + v5 <= 1) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v7 = sub_1000A14DC( *(void *)(a1 + 408),  a2,  *(void **)(*(void *)(a1 + 368) + 8LL * v4),  (_BYTE *)(*(void *)(a1 + 384) + v4));
    return sub_10005B788(a1, v7);
  }

  int v4 = *(_DWORD *)(a1 + 464);
  if (v4 == *(_DWORD *)(a1 + 468))
  {
    *(_DWORD *)(a1 + 500) = 1;
    return 4LL;
  }

  else
  {
    if (*(_DWORD *)(a1 + 500) != 1) {
      goto LABEL_11;
    }
    return 4LL;
  }

uint64_t sub_10005A4DC(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (!*(_DWORD *)(a1 + 352) && !*(_DWORD *)(a1 + 356))
  {
    int v8 = *(_DWORD *)(a1 + 464);
    if (v8 == *(_DWORD *)(a1 + 468))
    {
      *(_DWORD *)(a1 + 500) = 1;
    }

    else if (*(_DWORD *)(a1 + 500) != 1)
    {
      goto LABEL_11;
    }

    return 4LL;
  }

  int v7 = *(_DWORD *)(a1 + 468);
  int v8 = *(_DWORD *)(a1 + 464);
  int v9 = v7 - v8;
  if (v7 - v8 < 0)
  {
    if (*(_DWORD *)(a1 + 320) + v9 > 1) {
      goto LABEL_11;
    }
  }

  else if (v9 > 1)
  {
    goto LABEL_11;
  }

  if (v7 + 1 < *(_DWORD *)(a1 + 320)) {
    int v10 = v7 + 1;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 468) = v10;
LABEL_11:
  if (a3 >= 1)
  {
    uint64_t v11 = 0LL;
    float v12 = (float)(1 << *(_DWORD *)(a1 + 308));
    do
    {
      int v13 = vcvtmd_s64_f64((float)(*(float *)(a2 + 4 * v11) * v12) + 0.5);
      if (v13 >= 0x7FFF) {
        int v13 = 0x7FFF;
      }
      if (v13 <= -32768) {
        LOWORD(v13) = 0x8000;
      }
      *(_WORD *)(*(void *)(*(void *)(a1 + 368) + 8LL * v8) + 2 * v11++) = v13;
    }

    while (a3 != v11);
  }

  if (a4)
  {
    if (a5) {
      *(_BYTE *)(*(void *)(a1 + 384) + v8) = 3;
    }
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_22;
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(a1 + 384) + v8) = sub_1000A17E0( *(void *)(a1 + 408),  **(__int16 **)(*(void *)(a1 + 368) + 8LL * v8));
    if (*(_DWORD *)(a1 + 352))
    {
LABEL_22:
      sub_10002300C(*(void *)(a1 + 432), **(__int16 **)(*(void *)(a1 + 368) + 8LL * v8));
      goto LABEL_29;
    }
  }

  if (*(_DWORD *)(a1 + 340)
    && (!qword_1000FDCC0
     || !*(_DWORD *)(qword_1000FDCC0 + 2440)
     || *(void *)(qword_1000FDCC0 + 2376) > *(int *)(a1 + 480)))
  {
    sub_100023044(*(int **)(a1 + 432), *(__int16 **)(*(void *)(a1 + 368) + 8LL * v8), *(void *)(a1 + 424));
  }

LABEL_67:
  int v26 = *(_DWORD *)(a1 + 320);
  if (v8 + 1 < v26) {
    int v27 = v8 + 1;
  }
  else {
    int v27 = 0;
  }
  *(_DWORD *)(a1 + 464) = v27;
  ++*(_DWORD *)(a1 + 476);
  ++*(_DWORD *)(a1 + 508);
  int v28 = (v27 + v26 - *(_DWORD *)(a1 + 468)) % v26 - *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 492))
  {
    if (v28 < 0) {
      goto LABEL_75;
    }
  }

  else
  {
    v28 -= *(_DWORD *)(a1 + 332);
    if (v28 < 0)
    {
LABEL_75:
      int v28 = 0;
      goto LABEL_76;
    }
  }

  sub_1000CB038(v36, v78);
  sub_1000CB038(v23, v78);
  if ((_DWORD)v34) {
    int v64 = a6 <= (int)v52;
  }
  else {
    int v64 = 0;
  }
  int v65 = v64;
  if (!a8 && (v65 & 1) == 0) {
    return sub_1000919D8( *(void *)(a1 + 848),  v74,  v81,  (__int16 *)v73,  v77 + 4LL * (int)v52,  a6 - (int)v52,  v34)
  }
         + v52;
  return v52;
}

    uint64_t v67 = v27;
    LODWORD(v69) = 0;
    if (!(_DWORD)v33) {
      goto LABEL_68;
    }
    goto LABEL_59;
  }

  uint64_t v29 = *(void *)(v13 + 104);
  uint64_t v30 = *(unsigned __int16 *)(v29 + 2 * v28);
  uint64_t v31 = *(unsigned __int16 *)(v29 + 2 * v28 + 2) + ~(_DWORD)v30;
  uint64_t v32 = (unsigned __int8 *)(*(void *)(v13 + 88) + v30);
  uint64_t v68 = v32 + 1;
  if (*v32 == 255) {
    goto LABEL_17;
  }
LABEL_12:
  if (*(__int16 *)(v13 + 752) != -1)
  {
    ++v67;
    LODWORD(v69) = v31;
  }

  LODWORD(v33) = 1;
LABEL_59:
  int v62 = 0;
  uint64_t v34 = 0;
  int v25 = 0LL;
  do
  {
    sub_10008B028(v13, &v65, &v67);
    if ((_DWORD)v66)
    {
      ++v34;
      if ((int)v25 < v11)
      {
        BOOL v63 = HIDWORD(v66);
        a4[(int)v25] = HIDWORD(v66);
        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3892)) {
          a4[(int)v25] = (v63 >> 8) + (v63 >> 8) * *(unsigned __int16 *)(v13 + 728) + v63;
        }
        a5[(int)v25] = v62;
        int v25 = (v25 + 1);
      }
    }

    ++v62;
  }

  while ((_DWORD)v33 != v62);
LABEL_69:
  *a6 = v34;
  return v25;
}

    int v23 = v72;
LABEL_30:
    int v21 = (_OWORD *)((char *)v21 - 28);
    int v22 = *(_WORD *)(a1 + 744);
  }

  while (v20 != *(unsigned __int16 **)(a1 + 712))
  {
    int v28 = v20 - 14;
    uint64_t v29 = (__int16)*(v20 - 2);
    v20 -= 14;
    if (v29 <= v22)
    {
      int v20 = v28;
      goto LABEL_35;
    }
  }

      int v76 = sub_100031764(v108, (unsigned __int8 *)v119);
      int v77 = v66;
      if (!sub_100027AB4(v66, v102, v76, 0))
      {
        if ((_DWORD)v105)
        {
          int v97 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v97++));
          while (v105 != v97);
        }

        goto LABEL_79;
      }

      uint64_t v78 = sub_100031764(v108, (unsigned __int8 *)v118);
      if (!sub_100027AB4(v77, v76, v78, 0))
      {
        if ((_DWORD)v105)
        {
          uint64_t v98 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v98++));
          while (v105 != v98);
        }

        goto LABEL_79;
      }

      if (!sub_100027AB4(v77, v78, v101, 0))
      {
        if ((_DWORD)v105)
        {
          int v99 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v99++));
          while (v105 != v99);
        }

        goto LABEL_79;
      }

      BOOL v63 = v105 + 1;
      int v64 = v103 + 1;
      uint64_t v39 = v115;
    }

    if ((v63 & 0xFFFFFFFE) != 0)
    {
      uint64_t v90 = v103;
      do
      {
        uint64_t v91 = *(void *)v32;
        v32 += 8LL;
        sub_10002613C(v91);
        --v90;
      }

      while (v90);
    }

    goto LABEL_115;
  }

  uint64_t v46 = 1;
LABEL_68:
  sub_1000E3E30(0LL);
  if (v39) {
    goto LABEL_69;
  }
LABEL_70:
  if (v48) {
    CFRelease(v48);
  }
  if (v40) {
    CFRelease(v40);
  }
  __int16 v155 = v45;
  if ((_DWORD)v45) {
    int v54 = 0;
  }
  else {
    int v54 = v46;
  }
  uint64_t v51 = v47;
LABEL_78:
  int v64 = (os_log_s *)VSGetLogDefault(v38);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
  {
    int v65 = mach_absolute_time();
    int v66 = (os_log_s *)VSGetLogDefault(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v94 = VSAbsoluteTimeToSecond(v65 - v148);
      uint64_t v95 = "all";
      *(_DWORD *)context = 134218754;
      *(double *)&context[4] = v94;
      __int16 v96 = (const char *)v152;
      if (!theString) {
        __int16 v96 = "all";
      }
      unsigned int v169 = 1024;
      if (v156) {
        uint64_t v95 = (const char *)v15;
      }
      *(_DWORD *)uint64_t v170 = v155;
      *(_WORD *)&v170[4] = 2080;
      *(void *)&v170[6] = v96;
      uint64_t v171 = 2080;
      uint64_t v172 = v95;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEBUG,  "... finished caching model in %g s with error %d <%s> class <%s>\n",  context,  0x26u);
    }

    if (theString && v152 && v152 != v165) {
      free(v152);
    }
    if (v156 && v15 && v15 != v164) {
      free(v15);
    }
  }

  NSPopAutoreleasePool(v22);
  if (!v54)
  {
    uint64_t v50 = v155;
    goto LABEL_109;
  }

  uint64_t v67 = cf;
  uint64_t v68 = (void *)a3[4];
  pthread_once(&stru_1000FD8C0, sub_1000E652C);
  int v69 = qword_100102AA0;
  url = 0LL;
  pthread_once(&stru_1000FD8C0, sub_1000E652C);
  int v70 = (const __CFArray *)qword_100102AA0;
  if (qword_100102AA0)
  {
    int v70 = (const __CFArray *)VSCopyContentsOfDirectoryAtURL(qword_100102AA0, 0LL);
    if (v70)
    {
      int v71 = v70;
      int v142 = v51;
      value = v68;
      unint64_t v149 = a3;
      int v153 = v24;
      Count = CFArrayGetCount(v70);
      if (Count >= 1)
      {
        int v73 = Count;
        for (uint64_t i = 0LL; i != v73; ++i)
        {
          ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v71, i);
          PathComponent = CFURLCopyLastPathComponent(ValueAtIndex);
          if (PathComponent)
          {
            int v77 = PathComponent;
            uint64_t v78 = CFStringGetLength(PathComponent);
            if (v78 == CFStringGetLength(@"temp.vscache.XXXXX") && CFStringHasPrefix(v77, @"temp.vscache."))
            {
              VSCFURLDeleteDirectoryContents(ValueAtIndex);
              VSDeleteItemAtURL(ValueAtIndex, 0LL);
            }

            CFRelease(v77);
          }
        }
      }

      CFRelease(v71);
      int v24 = v153;
      a3 = v149;
      uint64_t v51 = v142;
      uint64_t v68 = value;
    }
  }

  if (!v69
    || (int v70 = (const __CFArray *)VSCreateTemporaryDirectory(v69, @"temp.vscache.XXXXX", &url), !(_DWORD)v70))
  {
    int16x8x4_t v81 = (os_log_s *)VSGetLogDefault(v70);
    uint64_t v50 = v155;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)context = 136315138;
      *(void *)&context[4] = "_SaveEngineToCache";
      _os_log_error_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "%s: couldn't save cache; no base dir exists or couldn't create temp cache\n",
        context,
        0xCu);
      if (!v24) {
        goto LABEL_111;
      }
LABEL_110:
      CFRelease(v24);
      goto LABEL_111;
    }

LABEL_76:
  if (v28 <= *(_DWORD *)(a1 + 516))
  {
    if (!*(_DWORD *)(a1 + 488)) {
      goto LABEL_78;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 516) = v28;
    if (!*(_DWORD *)(a1 + 488))
    {
LABEL_78:
      *(_DWORD *)(a1 + 484) = v16;
      return v16;
    }
  }

  return v16;
}

        v8[52] = v77;
        goto LABEL_77;
      }
    }

    goto LABEL_76;
  }

  *a2 = v10;
  *a3 = v47;
  *(_DWORD *)(a1 + 552) = 3;
  return v97;
}

            int v62 = (__int16 *)(v48 + 2 * v61);
            BOOL v63 = (unsigned __int8 *)(v52 + v61);
            int v64 = (double *)(a2 + 8 * v61);
            int v65 = &v20->f64[v61];
            int v66 = &v12->f64[v61];
            uint64_t v67 = v148 - v61;
            do
            {
              int v69 = *v62++;
              uint64_t v68 = v69;
              int v70 = *v63++;
              int v71 = v68 + v70 * v45;
              int v72 = *v64++;
              int v73 = (double)v71 + v50 * v72;
              *v65++ = v73;
              *v66++ = v51 * (v73 / v49);
              --v67;
            }

            while (v67);
LABEL_44:
            sub_1000BF278((uint64_t)v12, (uint64_t)v20, v21);
            sub_1000BFA34(v150, v21, v150);
LABEL_45:
            if (++v44 == v43) {
              goto LABEL_21;
            }
          }
        }

        if (v151 == -1)
        {
          for (uint64_t i = 0LL; i != v43; ++i)
          {
            if (*(_WORD *)(*(void *)(v40 + 8) + 2 * i))
            {
              sub_100004868(a1, v38, i, v152);
              sub_1000BF278((uint64_t)v12, (uint64_t)v20, v21);
              sub_1000BFA34(v150, v21, v150);
            }
          }
        }

        else
        {
          for (int j = 0LL; j != v43; ++j)
          {
            unsigned int v133 = *(unsigned __int16 *)(*(void *)(v40 + 8) + 2 * j);
            sub_100005528(a1, v38, j);
            if (v133)
            {
              sub_100004868(a1, v38, j, v152);
              sub_1000BF278((uint64_t)v12, (uint64_t)v20, v21);
              sub_1000BFA34(v150, v21, v150);
            }
          }
        }
      }

      if (v42)
      {
        if (*v9 != v18) {
          goto LABEL_86;
        }
        goto LABEL_78;
      }

          if ((_DWORD)v105)
          {
            uint64_t v82 = 0LL;
            do
              sub_10002613C(*(void *)(v32 + 8 * v82++));
            while (v105 != v82);
          }

          if (!v27 && v11[5] && (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 5256)))
          {
            uint64_t result = sub_100039820(v37, 0LL);
            v11[5] = 0;
            if (v11[6]) {
              uint64_t result = sub_1000398A4(v36);
            }
          }

          goto LABEL_100;
        }

        uint64_t v53 = v4;
        int v57 = (unsigned int **)(v5 + 25144);
        if ((int)v56 < 1)
        {
          uint64_t v31 = 0LL;
          uint64_t v30 = 0;
        }

        else
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0LL;
          uint64_t v32 = v56;
          uint64_t v33 = (unsigned __int8 *)v25;
          uint64_t v34 = (uint64_t *)(v5 + 544);
          do
          {
            if (*v33++)
            {
              v57[(int)v31] = (unsigned int *)*v34;
              uint64_t v31 = (v31 + 1);
            }

            ++v34;
            --v32;
          }

          while (v32);
        }

        uint64_t result = (uint64_t)sub_1000CB038(v25, v56);
        uint64_t v11 = (_DWORD *)(v5 + 33336);
        *(_DWORD *)(v5 + 33336) = v31;
        *(_DWORD *)(v5 + 33352) = 0;
        *(_DWORD *)(v5 + 33364) = v30;
        if (v30)
        {
          int v4 = v53;
          if (!qword_1000FDCC0)
          {
            *(_DWORD *)(v5 + 33360) = v30;
            uint64_t v41 = (_DWORD *)(v5 + 33360);
            *(_DWORD *)(v5 + 33356) = 0;
            uint64_t v42 = v54;
            uint64_t v43 = v55;
LABEL_87:
            LODWORD(v52) = 0;
            HIDWORD(v52) = *(_DWORD *)(v5 + 33348);
            uint64_t result = sub_10003927C(v43, *(unsigned int *)(v5 + 33372), v5 + 33368, v31, v57, 4LL, 0LL, 1u, v52);
            if ((_DWORD)result) {
              goto LABEL_88;
            }
            if (*(_DWORD *)(v5 + 33356)) {
              sub_100039820(v42, 0LL);
            }
            return sub_10003991C(v5);
          }

          uint64_t v38 = *(_DWORD *)(qword_1000FDCC0 + 5256);
          uint64_t v39 = v38 == 0;
          if (v38) {
            uint64_t v31 = v56;
          }
          else {
            uint64_t v31 = v31;
          }
          uint64_t v40 = (unsigned int **)(v5 + 25144);
          if (!v39) {
            uint64_t v40 = (unsigned int **)(v5 + 544);
          }
          int v57 = v40;
          *(_DWORD *)(v5 + 33360) = v30;
          uint64_t v41 = (_DWORD *)(v5 + 33360);
          *(_DWORD *)(v5 + 33356) = 0;
          uint64_t v42 = v54;
          goto LABEL_57;
        }

        int v4 = v53;
        if (!qword_1000FDCC0
          || ((v44 = *(_DWORD *)(qword_1000FDCC0 + 5260)) != 0 ? (uint64_t v31 = 0LL) : (uint64_t v31 = v31),
              v44 ? (uint64_t v45 = (int)v56 < 1) : (uint64_t v45 = 1),
              v45))
        {
          uint64_t v42 = v54;
          uint64_t v43 = v55;
          uint64_t v41 = (_DWORD *)(v5 + 33360);
          *(void *)(v5 + 33356) = 1LL;
        }

        else
        {
          uint64_t v31 = 0LL;
          do
          {
            uint64_t result = sub_10002A328(*v23);
            if (!(_DWORD)result)
            {
              v57[(int)v31] = (unsigned int *)*v23;
              uint64_t v31 = (v31 + 1);
            }

            ++v23;
            --v24;
          }

          while (v24);
          uint64_t v50 = *(_DWORD *)(v5 + 33364);
          *(_DWORD *)(v5 + 33360) = v50;
          uint64_t v41 = (_DWORD *)(v5 + 33360);
          *(_DWORD *)(v5 + 33356) = v50 == 0;
          uint64_t v42 = v54;
          uint64_t v43 = v55;
          if (v50)
          {
LABEL_57:
            if (qword_1000FDCC0)
            {
              uint64_t v43 = v55;
              if (*(_DWORD *)(qword_1000FDCC0 + 5236)) {
                uint64_t result = sub_100038D98(v42);
              }
            }

            else
            {
              uint64_t v43 = v55;
            }

uint64_t sub_10005A950(uint64_t a1, const void *a2, int a3)
{
  if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
  {
    int v4 = *(_DWORD *)(a1 + 468);
    int v5 = *(_DWORD *)(a1 + 464);
    int v6 = v4 - v5;
    if (v4 - v5 >= 0)
    {
      if (v6 > 1) {
        goto LABEL_11;
      }
LABEL_7:
      if (v4 + 1 < *(_DWORD *)(a1 + 320)) {
        int v7 = v4 + 1;
      }
      else {
        int v7 = 0;
      }
      *(_DWORD *)(a1 + 468) = v7;
      goto LABEL_11;
    }

    if (*(_DWORD *)(a1 + 320) + v6 <= 1) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v8 = sub_1000A174C( *(void *)(a1 + 408),  a2,  a3,  *(void **)(*(void *)(a1 + 368) + 8LL * v5),  (_BYTE *)(*(void *)(a1 + 384) + v5));
    return sub_10005B788(a1, v8);
  }

  int v5 = *(_DWORD *)(a1 + 464);
  if (v5 == *(_DWORD *)(a1 + 468))
  {
    *(_DWORD *)(a1 + 500) = 1;
    return 4LL;
  }

  else
  {
    if (*(_DWORD *)(a1 + 500) != 1) {
      goto LABEL_11;
    }
    return 4LL;
  }

uint64_t sub_10005AA20(uint64_t a1, void *__dst)
{
  int v2 = *(_DWORD *)(a1 + 484);
  if (v2 == 2) {
    return 2LL;
  }
  if (*(_DWORD *)(a1 + 492))
  {
    *(_DWORD *)(a1 + 484) = 2;
    return 2LL;
  }

  else
  {
    int v6 = *(_DWORD *)(a1 + 512);
    if (*(_DWORD *)(a1 + 508) == v6)
    {
      return 4LL;
    }

    else
    {
      uint64_t v7 = v6 % *(_DWORD *)(a1 + 320);
      memcpy(__dst, *(const void **)(*(void *)(a1 + 368) + 8 * v7), 2LL * *(int *)(a1 + 300));
      if ((*(_BYTE *)(*(void *)(a1 + 384) + v7) & 2) != 0) {
        uint64_t v3 = 5LL;
      }
      else {
        uint64_t v3 = 6LL;
      }
      ++*(_DWORD *)(a1 + 512);
      int v8 = *(_DWORD *)(a1 + 468);
      if (v2 == 3)
      {
        int v9 = *(_DWORD *)(a1 + 320);
      }

      else
      {
        int v9 = *(_DWORD *)(a1 + 320);
        if (v8 + 1 < v9) {
          ++v8;
        }
        else {
          int v8 = 0;
        }
        *(_DWORD *)(a1 + 468) = v8;
      }

      int v10 = (*(_DWORD *)(a1 + 464) - v8 + v9) % v9 - *(_DWORD *)(a1 + 324);
      if (!*(_DWORD *)(a1 + 492)) {
        v10 -= *(_DWORD *)(a1 + 332);
      }
      if (v10 <= *(_DWORD *)(a1 + 516)) {
        return v3;
      }
      *(_DWORD *)(a1 + 516) = v10;
      return v3;
    }
  }

uint64_t sub_10005AB7C(uint64_t a1)
{
  uint64_t result = sub_100022430(*(void *)(a1 + 424));
  if ((_DWORD)result)
  {
    uint64_t v3 = *(int *)(a1 + 468);
    int v4 = (_BYTE *)(*(void *)(a1 + 384) + v3);
    if ((_DWORD)v3 != *(_DWORD *)(a1 + 464))
    {
      do
      {
        *v4++ |= 8u;
        uint64_t v5 = *(void *)(a1 + 384);
      }

      while (v4 != (_BYTE *)(v5 + *(int *)(a1 + 464)));
    }

    *v4 |= 8u;
    *(_DWORD *)(a1 + 484) = 6;
  }

  return result;
}

uint64_t sub_10005AC00(uint64_t a1)
{
  return sub_1000A17E8(*(void *)(a1 + 408));
}

uint64_t sub_10005AC08(uint64_t a1)
{
  return sub_1000A17F0(*(void *)(a1 + 408));
}

uint64_t sub_10005AC10(uint64_t a1, int a2)
{
  return sub_1000A17F8(*(void *)(a1 + 408), a2);
}

uint64_t sub_10005AC18(uint64_t a1)
{
  uint64_t v2 = 472LL;
  if (!*(_DWORD *)(a1 + 356)) {
    uint64_t v2 = 468LL;
  }
  int v3 = *(_DWORD *)(a1 + v2);
  int v4 = *(_DWORD *)(a1 + 464);
  int v5 = v4 - v3;
  if (v4 - v3 >= 0)
  {
    int v6 = *(_DWORD *)(a1 + 324);
    if (v5 > v6) {
      goto LABEL_5;
    }
    return 0LL;
  }

  int v6 = *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 320) + v5 <= v6) {
    return 0LL;
  }
LABEL_5:
  uint64_t result = 0LL;
  int v8 = v4 - v6;
  int v9 = *(_DWORD *)(a1 + 320);
  int v10 = v8 + (v9 & (v8 >> 31));
  if (v3 + 1 < v9) {
    int v11 = v3 + 1;
  }
  else {
    int v11 = 0;
  }
  if (v11 != v10)
  {
    uint64_t result = 0LL;
    uint64_t v12 = *(void *)(a1 + 384);
    do
    {
      if ((*(_BYTE *)(v12 + v11) & 2) != 0) {
        break;
      }
      uint64_t result = (result + 1);
      if (v11 + 1 < v9) {
        ++v11;
      }
      else {
        int v11 = 0;
      }
    }

    while (v11 != v10);
  }

  return result;
}

uint64_t sub_10005ACBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 484);
  if ((v3 & 0xFFFFFFFE) == 2) {
    return v3;
  }
  if (*(_DWORD *)(a1 + 492))
  {
    uint64_t v3 = 2LL;
    *(_DWORD *)(a1 + 484) = 2;
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_7;
    }
  }

  else
  {
    uint64_t v3 = 4LL;
    if (*(_DWORD *)(a1 + 352)) {
      goto LABEL_7;
    }
  }

  if (*(_DWORD *)(a1 + 356))
  {
LABEL_7:
    uint64_t v7 = *(int *)(a1 + 472);
    *(_WORD *)(a3 + 2) = v7;
    int v8 = *(_DWORD *)(a1 + 492);
    if (!v8) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }

  uint64_t v7 = *(int *)(a1 + 468);
  *(_WORD *)(a3 + 2) = v7;
  int v8 = *(_DWORD *)(a1 + 492);
  if (!v8) {
    goto LABEL_21;
  }
LABEL_8:
  if (*(_DWORD *)(a1 + 348) || *(_DWORD *)(a1 + 496))
  {
    int v9 = *(_DWORD *)(a1 + 464);
    if ((_DWORD)v7 == v9)
    {
      *(_BYTE *)(*(void *)(a1 + 384) + v7) = 0;
    }

    else
    {
      int v10 = v9 + ~(_DWORD)v7;
      *(_DWORD *)(a1 + 476) = v10;
      if (v10 < 0)
      {
        v10 += *(_DWORD *)(a1 + 320);
        *(_DWORD *)(a1 + 476) = v10;
      }

      if ((*(_BYTE *)(*(void *)(a1 + 384) + v7) & 4) == 0)
      {
        int v11 = *(_DWORD *)(a1 + 324) + v7;
        int v12 = *(_DWORD *)(a1 + 320);
        int v13 = v11 >= v12 ? *(_DWORD *)(a1 + 320) : 0;
      }
    }

    uint64_t v3 = 2LL;
  }

void *sub_10005B090( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_DWORD *)result + 86))
  {
    int v8 = a3;
    uint64_t v10 = (uint64_t)result;
    int v32 = 0;
    int v11 = (void *)sub_1000CAF58(*((int *)result + 76), a2, a3, a4, a5, a6, a7, a8);
    int v19 = (void *)sub_1000CAF58(2LL * *(int *)(v10 + 304), v12, v13, v14, v15, v16, v17, v18);
    uint64_t v27 = (int16x8_t *)sub_1000CAF58(2LL * *(int *)(v10 + 304), v20, v21, v22, v23, v24, v25, v26);
    if ((sub_1000220FC(*(void *)(v10 + 440)) & 0x80000000) != 0)
    {
      LODWORD(v28) = 0;
      if (*(int *)(v10 + 304) <= 0)
      {
LABEL_10:
        sub_10005FC0C(*(int **)(v10 + 448), v27, (uint64_t)v11);
        sub_10005FD68(*(int **)(v10 + 448), (uint64_t)v19, &v32);
        uint64_t v31 = sub_10005FDE0(*(void *)(v10 + 448));
        sub_100021C0C( v10,  *(int **)(v10 + 440),  (uint64_t)v27,  **(__int16 **)(*(void *)(v10 + 368) + 8LL * v8),  (uint64_t)v19,  v32,  v31,  (uint64_t)v11,  a2);
        sub_1000CB038(v27, 2LL * *(int *)(v10 + 304));
        sub_1000CB038(v19, 2LL * *(int *)(v10 + 304));
        return sub_1000CB038(v11, *(int *)(v10 + 304));
      }
    }

    else
    {
      uint64_t v28 = 0LL;
      do
      {
        uint64_t v29 = v28;
        v27->i16[v28] = *(_WORD *)(*(void *)(*(void *)(v10 + 400) + 8LL * v8) + 2 * v28);
        ++v28;
      }

      while (v29 < (int)sub_1000220FC(*(void *)(v10 + 440)));
    }

    uint64_t v30 = v28;
    do
      v27->i16[v30++] = 0;
    while (*(_DWORD *)(v10 + 304) > (int)v30);
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_10005B210(uint64_t result, _WORD *a2, _WORD *a3)
{
  if (*(_DWORD *)(result + 340)) {
    return sub_100022FF8(*(void *)(result + 432), a2, a3);
  }
  *a2 = 1;
  *a3 = 0;
  return result;
}

uint64_t sub_10005B230(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 340)) {
    return 0LL;
  }
  int v4 = 0;
  sub_100022FF8(*(void *)(a1 + 432), (_WORD *)&v4 + 1, &v4);
  int v2 = 200 * ((__int16)v4 - SHIWORD(v4));
  return (v2 / (int)((23 << *(_DWORD *)(a1 + 308)) * sub_1000A1800(*(void *)(a1 + 408))));
}

uint64_t sub_10005B2B4(uint64_t a1, uint64_t a2)
{
  return sub_100022AC4(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005B2BC(uint64_t a1, uint64_t a2)
{
  return sub_100022AF8(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005B2C4(uint64_t a1, uint64_t a2)
{
  return sub_100022BCC(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005B2CC(uint64_t a1, uint64_t a2)
{
  return sub_100022C00(*(void *)(a1 + 424), a2);
}

uint64_t sub_10005B2D4(uint64_t a1)
{
  return sub_1000A1808(*(void *)(a1 + 408));
}

uint64_t sub_10005B2DC(uint64_t result, _DWORD *a2, int *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(result + 320);
  if (v6 <= 0)
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    return result;
  }

  uint64_t v7 = result;
  uint64_t v8 = 472LL;
  if (!*(_DWORD *)(result + 356)) {
    uint64_t v8 = 468LL;
  }
  int v9 = *(_DWORD *)(result + v8);
  *a2 = v6 - *(_DWORD *)(result + 324);
  int v10 = (*(_DWORD *)(result + 464) - v9 + *(_DWORD *)(result + 320)) % *(_DWORD *)(result + 320);
  *a3 = v10;
  int v11 = v10 - *(_DWORD *)(result + 324);
  *a3 = v11;
  if (*(_DWORD *)(result + 492))
  {
    if (v11 < 0) {
      goto LABEL_10;
    }
  }

  else
  {
    *a3 = v11 - *(_DWORD *)(result + 332);
    *a2 -= *(_DWORD *)(result + 332);
    if (*a3 < 0)
    {
LABEL_10:
      *a3 = 0;
      goto LABEL_11;
    }
  }

  uint64_t result = sub_1000225A8(*(void *)(result + 424));
  if ((_DWORD)result) {
    goto LABEL_10;
  }
LABEL_11:
  *a4 = *(_DWORD *)(v7 + 516);
  return result;
}

uint64_t sub_10005B3CC(uint64_t result)
{
  *(_DWORD *)(result + 516) = 0;
  return result;
}

uint64_t sub_10005B3D4()
{
  return 468LL;
}

uint64_t sub_10005B3DC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 464) = 0;
  *(_OWORD *)(a2 + 432) = 0u;
  *(_OWORD *)(a2 + 448) = 0u;
  *(_OWORD *)(a2 + 400) = 0u;
  *(_OWORD *)(a2 + 416) = 0u;
  *(_OWORD *)(a2 + 368) = 0u;
  *(_OWORD *)(a2 + 384) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 352) = 0u;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  int v4 = (_DWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 208) = 0u;
  uint64_t v5 = a2 + 208;
  int v6 = (_DWORD *)(a2 + 464);
  uint64_t v7 = (_WORD *)(a2 + 448);
  *(void *)a2 = 0x100000003LL;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 480);
  *(_DWORD *)(a2 + 44) = sub_100059810(a1);
  sub_100022AC4(*(void *)(a1 + 424), a2 + 52);
  sub_100022AF8(*(void *)(a1 + 424), a2 + 130);
  sub_100022B60(*(void *)(a1 + 424), v5);
  *(_DWORD *)(a2 + 32) = sub_1000A17F0(*(void *)(a1 + 408));
  sub_1000A1810(*(void *)(a1 + 408), (_WORD *)(a2 + 36));
  sub_1000A1820(*(void *)(a1 + 408), (_DWORD *)(a2 + 20), (_DWORD *)(a2 + 24), (_DWORD *)(a2 + 28));
  sub_100023338( *(void *)(a1 + 432),  *(_DWORD *)(a1 + 300),  (char *)(a2 + 364),  (_WORD *)(a2 + 442),  (_WORD *)(a2 + 444),  (_WORD *)(a2 + 446),  v4);
  sub_1000220A0(*(void *)(a1 + 440), (_DWORD *)(a2 + 452), (_DWORD *)(a2 + 456), (_DWORD *)(a2 + 460), v6, v7);
  return 1LL;
}

uint64_t sub_10005B52C(uint64_t a1, const void *a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    memcpy(__dst, a2, sizeof(__dst));
    if (__dst[1] == 1
      && __dst[2] == *(_DWORD *)(a1 + 284)
      && __dst[3] == *(_DWORD *)(a1 + 288)
      && (int v4 = __dst[11], v4 == sub_100059810(a1)))
    {
      *(_DWORD *)(a1 + 480) = __dst[10];
      sub_1000A1818(*(void *)(a1 + 408), &__dst[9]);
      sub_1000A17F8(*(void *)(a1 + 408), __dst[8]);
      sub_100022BCC(*(void *)(a1 + 424), (uint64_t)&__dst[13]);
      sub_100022C00(*(void *)(a1 + 424), (uint64_t)&__dst[32] + 2);
      sub_100022C3C(*(void *)(a1 + 424), (uint64_t)&__dst[52]);
      sub_1000A1828(*(void *)(a1 + 408), __dst[5], __dst[6], __dst[7]);
      sub_1000233E4( *(int **)(a1 + 432),  (uint64_t)&__dst[91],  SHIWORD(__dst[110]),  __dst[111],  SHIWORD(__dst[111]),  __dst[12]);
      sub_1000220E8(*(void *)(a1 + 440), __dst[113], __dst[114], __dst[115], __dst[116], __dst[112]);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10005B65C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BDA88(a2, "bfx0", a3);
  unsigned int v5 = sub_100059840(a1);
  if (sub_100059848(a1))
  {
    uint64_t v7 = *(void **)(a1 + 392);
    if (v7) {
      unsigned int v8 = v5;
    }
    else {
      unsigned int v8 = 0;
    }
    uint64_t v9 = 1LL;
    sub_1000BDBCC(v4, v7, v8, 1, v6);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  sub_1000BDB48(v4);
  return v9;
}

BOOL sub_10005B6E4(uint64_t a1, uint64_t a2, char *a3)
{
  int v6 = sub_100059840(a1);
  uint64_t v12 = sub_1000BCAE8(a2, "bfx0", a3, v7, v8, v9, v10, v11);
  if (!v12) {
    return 0LL;
  }
  uint64_t v13 = (uint64_t)v12;
  BOOL v14 = sub_1000BCE28((uint64_t)v12, *(void **)(a1 + 392), v6, 1) && sub_100059850(a1) != 0;
  sub_1000BCBC8(v13);
  return v14;
}

uint64_t sub_10005B788(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(int *)(a1 + 464);
  unsigned int v5 = a2 - 5;
  if ((a2 - 5) <= 1
    && (!qword_1000FDCC0
     || !*(_DWORD *)(qword_1000FDCC0 + 2440)
     || *(void *)(qword_1000FDCC0 + 2376) > *(int *)(a1 + 480)))
  {
    if (*(_DWORD *)(a1 + 352))
    {
      sub_10002300C(*(void *)(a1 + 432), **(__int16 **)(*(void *)(a1 + 368) + 8 * v4));
    }

    else if (*(_DWORD *)(a1 + 340))
    {
      sub_100023044(*(int **)(a1 + 432), *(__int16 **)(*(void *)(a1 + 368) + 8 * v4), *(void *)(a1 + 424));
      if ((*(_BYTE *)(*(void *)(a1 + 384) + v4) & 1) != 0) {
        ++*(_DWORD *)(a1 + 480);
      }
    }
  }

  int v6 = v4 - *(_DWORD *)(a1 + 324);
  if (v6 < 0) {
    v6 += *(_DWORD *)(a1 + 320);
  }
  uint64_t v7 = v6;
  *(_BYTE *)(*(void *)(a1 + 384) + v6) &= ~2u;
  *(_BYTE *)(*(void *)(a1 + 384) + v6) |= *(_BYTE *)(*(void *)(a1 + 384) + v4) & 2;
  if (v5 >= 2)
  {
    int v15 = *(_DWORD *)(a1 + 464);
    int v16 = *(_DWORD *)(a1 + 320);
  }

  else
  {
    if (sub_100021140( *(int **)(a1 + 416),  *(void *)(a1 + 368),  v4,  *(_DWORD *)(a1 + 320),  *(_DWORD *)(a1 + 476),  *(_DWORD *)(a1 + 492)))
    {
      *(_BYTE *)(*(void *)(a1 + 384) + v7) |= 4u;
      if (*(_DWORD *)(a1 + 488)) {
        sub_100022378( *(void *)(a1 + 424),  *(void *)(*(void *)(a1 + 368) + 8 * v7),  *(_BYTE *)(*(void *)(a1 + 384) + v7));
      }
      if (*(_DWORD *)(a1 + 340))
      {
        if (!*(_DWORD *)(a1 + 352))
        {
          int v8 = *(_DWORD *)(a1 + 476);
          int v9 = *(_DWORD *)(a1 + 324);
          int v10 = *(_DWORD *)(a1 + 332);
          if (v8 >= v10 + 2 * v9 || *(_DWORD *)(a1 + 348) && v8 >= v10 + v9)
          {
            int v11 = v7 - v10;
            if (v11 < 0) {
              v11 += *(_DWORD *)(a1 + 320);
            }
            *(_BYTE *)(*(void *)(a1 + 384) + v11) |= 0x10u;
            if (*(_DWORD *)(a1 + 336))
            {
              int v12 = *(_DWORD *)(a1 + 332);
              if (v12 >= 2)
              {
                *(_DWORD *)(a1 + 332) = v12 - 1;
                uint64_t v13 = v11 + 1LL;
                int v14 = *(_DWORD *)(a1 + 320);
                *(_BYTE *)(*(void *)(a1 + 384) + v13 - v14) |= 0x10u;
              }
            }
          }
        }
      }
    }

    else
    {
      if (*(_DWORD *)(a1 + 352) || *(_DWORD *)(a1 + 356))
      {
        int v17 = *(_DWORD *)(a1 + 472);
        if (v17 + 1 < *(_DWORD *)(a1 + 320)) {
          int v18 = v17 + 1;
        }
        else {
          int v18 = 0;
        }
        *(_DWORD *)(a1 + 472) = v18;
      }

      else
      {
        int v22 = *(_DWORD *)(a1 + 468);
        if (v22 + 1 < *(_DWORD *)(a1 + 320)) {
          int v23 = v22 + 1;
        }
        else {
          int v23 = 0;
        }
        *(_DWORD *)(a1 + 468) = v23;
      }

      uint64_t v2 = 3LL;
    }

    int v16 = *(_DWORD *)(a1 + 320);
    else {
      int v15 = 0;
    }
    *(_DWORD *)(a1 + 464) = v15;
    ++*(_DWORD *)(a1 + 476);
    ++*(_DWORD *)(a1 + 508);
  }

  int v19 = (v15 - *(_DWORD *)(a1 + 468) + v16) % v16 - *(_DWORD *)(a1 + 324);
  if (*(_DWORD *)(a1 + 492))
  {
    if (v19 < 0) {
      goto LABEL_42;
    }
LABEL_41:
    goto LABEL_42;
  }

  v19 -= *(_DWORD *)(a1 + 332);
  if ((v19 & 0x80000000) == 0) {
    goto LABEL_41;
  }
LABEL_42:
  int v19 = 0;
LABEL_43:
  if (v19 > *(_DWORD *)(a1 + 516))
  {
    *(_DWORD *)(a1 + 516) = v19;
    if (*(_DWORD *)(a1 + 488))
    {
LABEL_45:
      if (!*(_DWORD *)(a1 + 356)) {
        return v2;
      }
      goto LABEL_49;
    }
  }

  else if (*(_DWORD *)(a1 + 488))
  {
    goto LABEL_45;
  }

  *(_DWORD *)(a1 + 484) = v2;
  if (!*(_DWORD *)(a1 + 356)) {
    return v2;
  }
LABEL_49:
  if (*(_DWORD *)(a1 + 476) > ((2 * *(_DWORD *)(a1 + 324)) | 1))
  {
    uint64_t v20 = *(__int16 **)(a1 + 432);
    if (v20)
    {
      if (sub_1000232FC(v20)) {
        return 7LL;
      }
      else {
        return v2;
      }
    }
  }

  return v2;
}

uint64_t sub_10005BAC4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  int v9 = a2;
  sub_1000C0BFC(0xA0uLL, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v12 = v11;
  *(void *)uint64_t v11 = a1;
  *(_DWORD *)(v11 + 8) = v9;
  *(_DWORD *)(v11 + 12) = 0;
  *(_DWORD *)(v11 + 16) = 16 * v9;
  *(_DWORD *)(v11 + 56) = v8;
  sub_1000C0BFC(16 * v9, v13, v14, v15, v16, v17, v18, v19);
  *(void *)(v12 + 24) = v20;
  sub_1000C0BFC(2LL * *(int *)(v12 + 8) + 2, v21, v22, v23, v24, v25, v26, v27);
  *(void *)(v12 + 32) = v28;
  sub_1000C0BFC(2LL * *(int *)(v12 + 8) + 2, v29, v30, v31, v32, v33, v34, v35);
  *(void *)(v12 + 40) = v36;
  sub_1000C0BFC(*(int *)(v12 + 8), v37, v38, v39, v40, v41, v42, v43);
  *(void *)(v12 + 48) = v44;
  sub_1000C0BFC(4LL * *(int *)(v12 + 56), v45, v46, v47, v48, v49, v50, v51);
  *(void *)(v12 + 64) = v52;
  *(_DWORD *)(v12 + 72) = v9;
  *(_DWORD *)(v12 + 76) = 0;
  *(_DWORD *)(v12 + 80) = 16 * v9;
  *(_DWORD *)(v12 + 128) = 8 * v9;
  *(_DWORD *)(v12 + 112) = 4 * v9;
  sub_1000C0BFC(16 * v9, v53, v54, v55, v56, v57, v58, v59);
  *(void *)(v12 + 88) = v60;
  sub_1000C0BFC(2LL * *(int *)(v12 + 72) + 2, v61, v62, v63, v64, v65, v66, v67);
  *(void *)(v12 + 96) = v68;
  sub_1000C0BFC(2LL * *(int *)(v12 + 72) + 2, v69, v70, v71, v72, v73, v74, v75);
  *(void *)(v12 + 104) = v76;
  sub_1000C0BFC(2LL * *(int *)(v12 + 112) + 2, v77, v78, v79, v80, v81, v82, v83);
  *(void *)(v12 + 120) = v84;
  sub_1000C0BFC(2LL * *(int *)(v12 + 128), v85, v86, v87, v88, v89, v90, v91);
  *(void *)(v12 + 136) = v92;
  sub_1000C0BFC(*(int *)(v12 + 128), v93, v94, v95, v96, v97, v98, v99);
  *(void *)(v12 + 144) = v100;
  sub_1000C0BFC(*(int *)(v12 + 128), v101, v102, v103, v104, v105, v106, v107);
  *(void *)(v12 + 152) = v108;
  if (sub_10005BE50(v12, ".", 0LL, 0LL, 0LL, v109, v110, v111)
    || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3392) && !sub_10005BCD4((uint64_t **)v12))
  {
    sub_10005BC4C(v12);
    return 0LL;
  }

  return v12;
}

uint64_t sub_10005BC4C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 152));
    sub_1000C0EF8(v1[18]);
    sub_1000C0EF8(v1[17]);
    sub_1000C0EF8(v1[15]);
    sub_1000C0EF8(v1[13]);
    sub_1000C0EF8(v1[12]);
    sub_1000C0EF8(v1[11]);
    sub_1000C0EF8(v1[8]);
    sub_1000C0EF8(v1[6]);
    sub_1000C0EF8(v1[5]);
    sub_1000C0EF8(v1[4]);
    sub_1000C0EF8(v1[3]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_10005BCD4(uint64_t **a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = *a1;
  do
  {
    uint64_t v16 = 0LL;
    uint64_t v3 = &off_1000F93F8[2 * v1];
    uint64_t v4 = v3[1];
    int v5 = sub_1000C88E4((unint64_t)v4) + 1;
    int v6 = (unsigned __int16 *)sub_1000C1074(2LL * v5);
    if (!v6) {
      return 0LL;
    }
    uint64_t v7 = (char *)v6;
    sub_1000CC72C(v6, v4, v5);
    int v8 = sub_1000CC804(v7, asc_1000F24E0, &v16);
    if (v8)
    {
      int v9 = v8;
      LODWORD(v10) = 0;
      do
      {
        int v9 = sub_1000CC804(0LL, asc_1000F24E0, &v16);
      }

      while (v9);
      sub_1000C0EF8((uint64_t)v7);
    }

    else
    {
      sub_1000C0EF8((uint64_t)v7);
    }

    ++v1;
  }

  while (v1 != 16);
  return 1LL;
}

uint64_t sub_10005BE50( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v10 = a3;
  if ((int)a3 <= 0)
  {
    sub_1000C8AB4(a2, ".");
    uint64_t v13 = *(unsigned int *)(a1 + 76);
  }

  else
  {
    uint64_t v13 = *(unsigned int *)(a1 + 76);
  }

  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v14 = *(__int16 **)(a1 + 96);
  uint64_t v16 = 0xFFFFFFFFLL;
  while (1)
  {
    uint64_t v17 = *v14++;
    --v16;
    if (!--v13) {
      goto LABEL_10;
    }
  }

  if (v16) {
    return 2LL;
  }
LABEL_10:
  if (v10 >= 1 && !a4) {
    return 2LL;
  }
  int v48 = v8;
  if (v10)
  {
    uint64_t v20 = (void *)sub_1000CAF58(4LL * v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v21 = v20;
    if (v10 <= 0)
    {
      qsort(v20, v10, 4uLL, (int (__cdecl *)(const void *, const void *))sub_10005CF6C);
      int v10 = 1;
    }

    else
    {
      uint64_t v22 = 0LL;
      do
      {
        int v23 = sub_1000B3918(*(void *)a1, *(_DWORD *)(a4 + v22));
        unsigned int v24 = sub_1000B3990(*(void *)a1, v23);
        if (v24 == 0xFFFF
          || (unsigned int v25 = v24, sub_1000B3A9C(*(void *)a1, v24) == 0xFFFF)
          || (*(_DWORD *)((char *)v21 + v22) = v25, v25 == -1))
        {
          sub_1000CB038(v21, 4LL * v10);
          return 2LL;
        }

        v22 += 4LL;
      }

      while (4LL * v10 != v22);
      qsort(v21, v10, 4uLL, (int (__cdecl *)(const void *, const void *))sub_10005CF6C);
      if (v10 <= 1)
      {
        int v10 = 1;
        uint64_t v30 = *(unsigned int *)(a1 + 12);
        goto LABEL_31;
      }

      uint64_t v26 = 4LL * v10;
      int v10 = 1;
      uint64_t v27 = 4LL;
      do
      {
        unsigned int v28 = *(_DWORD *)((char *)v21 + v27);
        if (v28 > *((_DWORD *)v21 + v10 - 1))
        {
          uint64_t v29 = v10++;
          *((_DWORD *)v21 + v29) = v28;
        }

        v27 += 4LL;
      }

      while (v26 != v27);
    }

    uint64_t v30 = *(unsigned int *)(a1 + 12);
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v30 = *(unsigned int *)(a1 + 12);
  }

BOOL sub_10005C228( uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  if ((int)v12 < 1)
  {
LABEL_5:
    LODWORD(v13) = -1;
  }

  else
  {
    uint64_t v13 = 0LL;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v14 = *(void *)(a1 + 32);
    while (sub_1000C8AB4(a2, (unsigned __int8 *)(v15 + *(__int16 *)(v14 + 2 * v13))))
    {
      if (v12 == ++v13) {
        goto LABEL_5;
      }
    }
  }

  uint64_t v16 = *(unsigned int *)(a1 + 76);
  if ((int)v16 < 1)
  {
LABEL_10:
    LODWORD(v17) = -1;
  }

  else
  {
    uint64_t v17 = 0LL;
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 96);
    while (sub_1000C8AB4(a2, (unsigned __int8 *)(v19 + *(__int16 *)(v18 + 2 * v17))))
    {
      if (v16 == ++v17) {
        goto LABEL_10;
      }
    }
  }

  BOOL v20 = 0LL;
  if ((int)a3 >= 1 && (v17 & v13) != 0xFFFFFFFF)
  {
    uint64_t v21 = (void *)sub_1000CAF58(4LL * a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    uint64_t v22 = 0LL;
    do
    {
      uint64_t v23 = *(void *)a1;
      int v24 = sub_1000B3918(*(void *)a1, *(_DWORD *)(a4 + v22));
      *(_DWORD *)((char *)v21 + v22) = sub_1000B3990(v23, v24);
      v22 += 4LL;
    }

    while (4LL * a3 != v22);
    if ((_DWORD)v13 == -1)
    {
      uint64_t v36 = 0LL;
      uint64_t v30 = (__int16 *)(*(void *)(a1 + 104) + 2LL * (int)v17);
      uint64_t v31 = (v30[1] - *v30);
      if ((int)v31 < 1)
      {
LABEL_25:
        BOOL v20 = 0LL;
      }

      else
      {
        uint64_t v32 = (__int16 *)(*(void *)(a1 + 120) + 2LL * *v30 + 2);
        while (1)
        {
          int v33 = *v32;
          v35[0] = *(v32 - 1);
          v35[1] = v33;
          uint64_t v37 = 0LL;
          ++v32;
          if (!--v31) {
            goto LABEL_25;
          }
        }

        BOOL v20 = 1LL;
      }
    }

    else
    {
      uint64_t v26 = *(void *)(a1 + 40);
      uint64_t v25 = *(__int16 *)(v26 + 2LL * ~(_DWORD)v13);
      LODWORD(v26) = (__int16)(*(_WORD *)(v26 + 2LL * -(int)v13) - v25);
      if ((int)v26 < 1)
      {
LABEL_20:
        int v29 = 0;
      }

      else
      {
        uint64_t v27 = (int *)(*(void *)(a1 + 64) + 4 * v25);
        uint64_t v26 = (unsigned __int16)v26;
        while (1)
        {
          int v28 = *v27++;
          if (*(_DWORD *)v21 == v28) {
            break;
          }
          if (!--v26) {
            goto LABEL_20;
          }
        }

        int v29 = 1;
      }

      BOOL v20 = v29 == *(char *)(*(void *)(a1 + 48) + ~(_DWORD)v13);
    }

    sub_1000CB038(v21, 4LL * a3);
  }

  return v20;
}

BOOL sub_10005C430(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BDA88(a2, "grm1", a3);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v4;
  if (!sub_1000BDB78(v4, *(_DWORD *)(a1 + 8), v5)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 12), v7)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 16), v8)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 56), v9)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 72), v10)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 76), v11)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 80), v12)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 112), v13)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 128), v14))
  {
    goto LABEL_58;
  }

  uint64_t v16 = *(void **)(a1 + 24);
  unsigned int v17 = v16 ? *(_DWORD *)(a1 + 16) : 0;
  BOOL v20 = *(void **)(a1 + 32);
  unsigned int v21 = v20 ? *(_DWORD *)(a1 + 8) + 1 : 0;
  uint64_t v23 = *(void **)(a1 + 40);
  unsigned int v24 = v23 ? *(_DWORD *)(a1 + 8) + 1 : 0;
  uint64_t v26 = *(void **)(a1 + 48);
  unsigned int v27 = v26 ? *(_DWORD *)(a1 + 8) : 0;
  int v29 = *(void **)(a1 + 64);
  unsigned int v30 = v29 ? *(_DWORD *)(a1 + 56) : 0;
  uint64_t v32 = *(void **)(a1 + 88);
  unsigned int v33 = v32 ? *(_DWORD *)(a1 + 80) : 0;
  uint64_t v35 = *(void **)(a1 + 96);
  unsigned int v36 = v35 ? *(_DWORD *)(a1 + 72) + 1 : 0;
  uint64_t v38 = *(void **)(a1 + 104);
  unsigned int v39 = v38 ? *(_DWORD *)(a1 + 72) + 1 : 0;
  if (sub_1000BDBCC(v6, v38, v39, 2, v37)
    && ((v41 = *(void **)(a1 + 120)) == 0LL ? (unsigned int v42 = 0) : (unsigned int v42 = *(_DWORD *)(a1 + 112) + 1),
        sub_1000BDBCC(v6, v41, v42, 2, v40)
     && ((int v44 = *(void **)(a1 + 136)) == 0LL ? (v45 = 0) : (v45 = *(_DWORD *)(a1 + 128)),
         sub_1000BDBCC(v6, v44, v45, 2, v43)
      && ((uint64_t v47 = *(void **)(a1 + 144)) == 0LL ? (v48 = 0) : (v48 = *(_DWORD *)(a1 + 128)),
          sub_1000BDBCC(v6, v47, v48, 1, v46)))))
  {
    uint64_t v50 = *(void **)(a1 + 152);
    if (v50) {
      unsigned int v51 = *(_DWORD *)(a1 + 128);
    }
    else {
      unsigned int v51 = 0;
    }
    BOOL v52 = sub_1000BDBCC(v6, v50, v51, 1, v49) != 0;
    sub_1000BDB48(v6);
    return v52;
  }

  else
  {
LABEL_58:
    sub_1000BDB48(v6);
    return 0LL;
  }

uint64_t sub_10005C6F8( uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BCAE8(a2, "grm1", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = (uint64_t)v9;
  unsigned int v27 = a1 + 19;
  sub_1000C0EF8(a1[19]);
  uint8x8_t v28 = a1 + 18;
  sub_1000C0EF8(a1[18]);
  int v29 = a1 + 17;
  sub_1000C0EF8(a1[17]);
  unsigned int v30 = a1 + 15;
  sub_1000C0EF8(a1[15]);
  uint8x8_t v31 = a1 + 13;
  sub_1000C0EF8(a1[13]);
  uint8x8_t v11 = a1 + 12;
  sub_1000C0EF8(a1[12]);
  uint8x8_t v12 = a1 + 11;
  sub_1000C0EF8(a1[11]);
  uint8x8_t v13 = a1 + 8;
  sub_1000C0EF8(a1[8]);
  uint8x8_t v14 = a1 + 6;
  sub_1000C0EF8(a1[6]);
  uint8x8_t v15 = a1 + 5;
  sub_1000C0EF8(a1[5]);
  uint64_t v16 = a1 + 4;
  sub_1000C0EF8(a1[4]);
  unsigned int v17 = a1 + 3;
  sub_1000C0EF8(a1[3]);
  uint64_t v18 = a1 + 1;
  if (!sub_1000BCD38(v10, a1 + 1)) {
    goto LABEL_48;
  }
  uint64_t v26 = a1 + 2;
  if (!sub_1000BCD38(v10, a1 + 2)) {
    goto LABEL_48;
  }
  uint8x8_t v25 = a1 + 7;
  if (!sub_1000BCD38(v10, a1 + 7)) {
    goto LABEL_48;
  }
  unsigned int v24 = a1 + 9;
  if (!sub_1000BCD38(v10, a1 + 9)) {
    goto LABEL_48;
  }
  uint64_t v23 = a1 + 10;
  if (!sub_1000BCD38(v10, a1 + 10)) {
    goto LABEL_48;
  }
  uint8x8_t v22 = a1 + 14;
  if (!sub_1000BCD38(v10, a1 + 14)) {
    goto LABEL_48;
  }
  uint8x8_t v19 = a1 + 16;
  if (!sub_1000BCD38(v10, v19)) {
    goto LABEL_48;
  }
  int v32 = 0;
  int v32 = 0;
  int v32 = 0;
  int v32 = 0;
  int v32 = 0;
  if ((int v32 = 0, sub_1000BCED0(v10, 1, v12, &v32))
    && (!*v12 || v32 == *v23)
    && (int v32 = 0, sub_1000BCED0(v10, 2, v11, &v32))
    && (!*v11 || v32 == *v24 + 1)
    && (int v32 = 0, sub_1000BCED0(v10, 2, v31, &v32))
    && (!*v31 || v32 == *v24 + 1)
    && (int v32 = 0, sub_1000BCED0(v10, 2, v30, &v32))
    && (!*v30 || v32 == *v22 + 1)
    && (int v32 = 0, sub_1000BCED0(v10, 2, v29, &v32))
    && (!*v29 || v32 == *v19)
    && (int v32 = 0, sub_1000BCED0(v10, 1, v28, &v32))
    && (!*v28 || v32 == *v19)
    && (int v32 = 0, sub_1000BCED0(v10, 1, v27, &v32))
    && (!*v27 || v32 == *v19))
  {
    uint64_t v20 = 1LL;
  }

  else
  {
LABEL_48:
    uint64_t v20 = 0LL;
  }

  sub_1000BCBC8(v10);
  return v20;
}

uint64_t *sub_10005CB78( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BCAE8(a1, "grm1", a2, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = (uint64_t)v9;
  uint8x8_t v11 = (void *)sub_1000C1074(160LL);
  uint8x8_t v12 = v11;
  if (v11)
  {
    void *v11 = a3;
    uint8x8_t v13 = v11 + 1;
    if (!sub_1000BCD38(v10, v11 + 1)) {
      goto LABEL_49;
    }
    if (!sub_1000BCD38(v10, v12 + 2)) {
      goto LABEL_49;
    }
    if (!sub_1000BCD38(v10, v12 + 7)) {
      goto LABEL_49;
    }
    uint8x8_t v14 = v12 + 9;
    if (!sub_1000BCD38(v10, v12 + 9)) {
      goto LABEL_49;
    }
    if (!sub_1000BCD38(v10, v12 + 10)) {
      goto LABEL_49;
    }
    if (!sub_1000BCD38(v10, v12 + 14)) {
      goto LABEL_49;
    }
    uint8x8_t v15 = v12 + 16;
    if (!sub_1000BCD38(v10, v12 + 16)) {
      goto LABEL_49;
    }
    int v17 = 0;
    int v17 = 0;
    int v17 = 0;
    int v17 = 0;
    int v17 = 0;
    if ((int v17 = 0, !sub_1000BCED0(v10, 1, v12 + 11, &v17))
      || v12[11] && v17 != *((_DWORD *)v12 + 20)
      || (int v17 = 0, !sub_1000BCED0(v10, 2, v12 + 12, &v17))
      || v12[12] && v17 != *v14 + 1
      || (int v17 = 0, !sub_1000BCED0(v10, 2, v12 + 13, &v17))
      || v12[13] && v17 != *v14 + 1
      || (int v17 = 0, !sub_1000BCED0(v10, 2, v12 + 15, &v17))
      || v12[15] && v17 != *((_DWORD *)v12 + 28) + 1
      || (int v17 = 0, !sub_1000BCED0(v10, 2, v12 + 17, &v17))
      || v12[17] && v17 != *v15
      || (int v17 = 0, !sub_1000BCED0(v10, 1, v12 + 18, &v17))
      || v12[18] && v17 != *v15
      || (int v17 = 0, !sub_1000BCED0(v10, 1, v12 + 19, &v17))
      || v12[19] && v17 != *v15)
    {
LABEL_49:
      sub_1000BCBC8(v10);
      sub_10005BC4C((uint64_t)v12);
      return 0LL;
    }
  }

  sub_1000BCBC8(v10);
  return v12;
}

uint64_t sub_10005CF6C(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

BOOL sub_10005CF84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (!a5) {
    return (_DWORD)a4 == (_DWORD)a2;
  }
  uint64_t v6 = a5;
  unint64_t v72 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v8 = a1[17];
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[19];
  while (2)
  {
    uint64_t v11 = *v6;
    int v12 = v6[2];
    do
    {
LABEL_4:
      int v13 = *(__int16 *)(v8 + 2 * v11);
      int v14 = *(unsigned __int8 *)(v9 + v11);
      int v15 = *(unsigned __int8 *)(v10 + v11);
      if ((v13 & 0x80000000) == 0)
      {
        if (v12 < v14)
        {
          int v41 = v12 + 1;
          if (v12 + 1 >= v15)
          {
            LODWORD(v11) = v11 + 1;
            unsigned int v42 = (unint64_t *)*((void *)v6 + 2);
            int v41 = 0;
          }

          else
          {
            unsigned int v42 = (unint64_t *)*((void *)v6 + 2);
          }

          uint64_t v74 = v42;
          LODWORD(v73) = v41;
          unint64_t v72 = __PAIR64__(v6[1], v11);
          unsigned int v42 = &v72;
LABEL_52:
          uint64_t v77 = 0LL;
          uint64_t v47 = a1[13];
          uint64_t v48 = (*(__int16 *)(v47 + 2LL * (v13 + 1)) - *(__int16 *)(v47 + 2LL * (unsigned __int16)v13));
          if ((int)v48 >= 1)
          {
            uint8x8_t v49 = (__int16 *)(a1[15] + 2LL * *(__int16 *)(v47 + 2LL * (unsigned __int16)v13) + 2);
            while (1)
            {
              int v50 = *v49;
              int v75 = *(v49 - 1);
              int v76 = v50;
              LODWORD(v77) = 0;
              uint64_t v78 = v42;
              uint64_t v51 = a2;
              uint64_t v52 = a3;
              ++v49;
              --v48;
              a2 = v51;
              a3 = v52;
              if (!v48) {
                return 0LL;
              }
            }

            return 1LL;
          }

          return 0LL;
        }

        uint64_t v71 = v11;
        int v43 = v11 + 1;
        int v44 = (unint64_t *)*((void *)v6 + 2);
        if ((int)v11 + 1 >= v6[1])
        {
          unsigned int v45 = v6;
        }

        else
        {
          uint64_t v74 = (unint64_t *)*((void *)v6 + 2);
          LODWORD(v73) = 0;
          unsigned int v45 = v6;
          int v46 = v6[1];
          LODWORD(v72) = v11 + 1;
          HIDWORD(v72) = v46;
          int v44 = &v72;
        }

        uint64_t v53 = a2;
        uint64_t v54 = a3;
        uint64_t v55 = v53;
        int v56 = v12 + 1;
        if (v12 + 1 >= *(unsigned __int8 *)(v10 + v71))
        {
          uint64_t v58 = (unint64_t *)*((void *)v45 + 2);
          uint64_t v59 = v55;
          uint64_t v60 = v54;
          if (v43 >= v45[1]) {
            goto LABEL_65;
          }
          uint64_t v57 = v45;
          int v56 = 0;
          unsigned int v61 = v43;
        }

        else
        {
          uint64_t v57 = v45;
          uint64_t v58 = (unint64_t *)*((void *)v45 + 2);
          uint64_t v59 = v55;
          uint64_t v60 = v54;
          unsigned int v61 = v71;
        }

        uint64_t v74 = v58;
        LODWORD(v73) = v56;
        unint64_t v72 = __PAIR64__(v57[1], v61);
        uint64_t v58 = &v72;
LABEL_65:
        uint64_t v77 = 0LL;
        uint64_t v62 = a1[13];
        uint64_t v63 = (*(__int16 *)(v62 + 2LL * (v13 + 1)) - *(__int16 *)(v62 + 2LL * (unsigned __int16)v13));
        if ((int)v63 >= 1)
        {
          uint64_t v64 = (__int16 *)(a1[15] + 2LL * *(__int16 *)(v62 + 2LL * (unsigned __int16)v13) + 2);
          while (1)
          {
            int v65 = *v64;
            int v75 = *(v64 - 1);
            int v76 = v65;
            LODWORD(v77) = 0;
            uint64_t v78 = v58;
            ++v64;
            --v63;
            uint64_t v59 = v55;
            uint64_t v60 = v54;
            if (!v63) {
              return 0LL;
            }
          }

          return 1LL;
        }

        return 0LL;
      }

      int v16 = ~v13;
      if (v12 < v14)
      {
        uint64_t v17 = (int)a4;
        else {
          int v18 = a4;
        }
        while (v17 != v18)
        {
          uint64_t v19 = a1[5];
          __int16 v20 = *(_WORD *)(v19 + 2LL * -v13);
          uint64_t v21 = *(__int16 *)(v19 + 2LL * v16);
          LODWORD(v22) = (__int16)(v20 - v21);
          if ((int)v22 < 1)
          {
LABEL_9:
            if (*(_BYTE *)(a1[6] + v16)) {
              return 0LL;
            }
          }

          else
          {
            uint64_t v23 = (int *)(a1[8] + 4 * v21);
            uint64_t v22 = (unsigned __int16)v22;
            while (1)
            {
              int v24 = *v23++;
              if (*(_DWORD *)(a3 + 4 * v17) == v24) {
                break;
              }
              if (!--v22) {
                goto LABEL_9;
              }
            }

            if (*(_BYTE *)(a1[6] + v16) != 1) {
              return 0LL;
            }
          }

          ++v12;
          ++v17;
          if (v12 == v14)
          {
            a4 = v17;
            if (v14 < v15) {
              goto LABEL_20;
            }
            goto LABEL_39;
          }
        }

        return 0LL;
      }

      int v14 = v12;
      if (v12 < v15)
      {
LABEL_20:
        uint8x8_t v25 = (unint64_t *)*((void *)v6 + 2);
        uint64_t v69 = v6;
        uint64_t v70 = v11;
        uint64_t v67 = v8;
        uint64_t v68 = v10;
        uint64_t v66 = v9;
        if (v11 + 1 < v6[1])
        {
          uint64_t v74 = (unint64_t *)*((void *)v6 + 2);
          LODWORD(v73) = 0;
          int v26 = v6[1];
          LODWORD(v72) = v11 + 1;
          HIDWORD(v72) = v26;
          uint8x8_t v25 = &v72;
        }

        uint64_t v27 = v16;
        uint64_t v28 = -v13;
        uint64_t v29 = (int)a4;
        else {
          int v30 = a4;
        }
        uint64_t v31 = v30;
        while (1)
        {
          uint64_t v32 = a2;
          uint64_t v33 = a3;
          if (v29 == v31) {
            return 0LL;
          }
          uint64_t v34 = a1[5];
          __int16 v35 = *(_WORD *)(v34 + 2 * v28);
          uint64_t v36 = *(__int16 *)(v34 + 2 * v27);
          LODWORD(v37) = (__int16)(v35 - v36);
          if ((int)v37 >= 1)
          {
            uint64_t v38 = (int *)(a1[8] + 4 * v36);
            uint64_t v37 = (unsigned __int16)v37;
            a3 = v33;
            a2 = v32;
            while (1)
            {
              int v39 = *v38++;
              if (*(_DWORD *)(v33 + 4 * v29) == v39) {
                break;
              }
              if (!--v37)
              {
                if (!*(_BYTE *)(a1[6] + v27)) {
                  goto LABEL_27;
                }
                return 0LL;
              }
            }

            if (*(_BYTE *)(a1[6] + v27) == 1) {
              goto LABEL_27;
            }
            return 0LL;
          }

          a2 = v32;
          a3 = v33;
          if (*(_BYTE *)(a1[6] + v27)) {
            return 0LL;
          }
LABEL_27:
          ++v14;
          ++v29;
          if (v14 == v15)
          {
            a4 = v29;
            uint64_t v6 = v69;
            uint64_t v8 = v67;
            uint64_t v10 = v68;
            uint64_t v9 = v66;
            int v12 = 0;
            uint64_t v11 = v70 + 1;
            if (v70 + 1 < v69[1]) {
              goto LABEL_4;
            }
            goto LABEL_42;
          }
        }
      }

uint64_t sub_10005D430(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 24));
    *(void *)(v1 + 16) = 0LL;
    *(void *)(v1 + 24) = 0LL;
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10005D464(unsigned int *a1, int16x8_t *a2, unint64_t a3)
{
  uint64_t v3 = *a1;
  if ((int)v3 < 1)
  {
    unsigned __int32 v4 = 0;
    goto LABEL_13;
  }

  if (v3 >= 0x10)
  {
    uint64_t v5 = v3 & 0x7FFFFFF0;
    uint64_t v6 = (int16x8_t *)((char *)a2 + 2 * (v3 & 0xFFFFFFF0));
    uint8x8_t v7 = a2 + 1;
    int8x16_t v8 = 0uLL;
    uint64_t v9 = v3 & 0xFFFFFFF0;
    int8x16_t v10 = 0uLL;
    int8x16_t v11 = 0uLL;
    int8x16_t v12 = 0uLL;
    do
    {
      uint16x8_t v13 = (uint16x8_t)vabsq_s16(v7[-1]);
      uint16x8_t v14 = (uint16x8_t)vabsq_s16(*v7);
      int8x16_t v10 = vorrq_s8(v10, (int8x16_t)vmovl_high_u16(v13));
      int8x16_t v8 = vorrq_s8(v8, (int8x16_t)vmovl_u16(*(uint16x4_t *)v13.i8));
      int8x16_t v12 = vorrq_s8(v12, (int8x16_t)vmovl_high_u16(v14));
      int8x16_t v11 = vorrq_s8(v11, (int8x16_t)vmovl_u16(*(uint16x4_t *)v14.i8));
      v7 += 2;
      v9 -= 16LL;
    }

    while (v9);
    int8x16_t v15 = vorrq_s8(vorrq_s8(v11, v8), vorrq_s8(v12, v10));
    *(int8x8_t *)v15.i8 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    unsigned __int32 v4 = v15.i32[0] | v15.i32[1];
    if (v5 == v3) {
      goto LABEL_12;
    }
  }

  else
  {
    unsigned __int32 v4 = 0;
    LODWORD(v5) = 0;
    uint64_t v6 = a2;
  }

  int v16 = v3 - v5;
  do
  {
    int v18 = v6->i16[0];
    uint64_t v6 = (int16x8_t *)((char *)v6 + 2);
    int v17 = v18;
    if (v18 < 0) {
      int v17 = -v17;
    }
    v4 |= v17;
    --v16;
  }

  while (v16);
LABEL_12:
  if (v4 >> 14)
  {
    uint64_t v20 = 0LL;
    goto LABEL_19;
  }

LABEL_112:
  bzero((void *)(a3 + 2LL * (int)v3), 2LL * (int)(a1[1] - v3));
  return v20;
}

  uint64_t v133 = v209;
LABEL_113:
  int32x4_t v158 = v186;
LABEL_114:
  if (v136) {
    int32x4_t v92 = (v92 + 1);
  }
  else {
    int32x4_t v92 = v92;
  }
  else {
    int v160 = v92 - v158;
  }
  if (v136)
  {
    if (v160 < 1)
    {
      *uint64_t v197 = 0;
      *uint64_t v195 = v136;
      if (v211)
      {
        j__memmove(__dsta, v94, 2 * v136);
        *(_WORD *)&__dsta[2 * v136] = 0;
        uint64_t v164 = __dsta;
        uint64_t v133 = v209;
        while (1)
        {
          int32x4_t v165 = (unsigned __int16)*v164;
          if (!*v164) {
            break;
          }
          ++v164;
          if (!sub_1000CBA60(v165))
          {
            unsigned int v166 = sub_100082B9C(*v213);
            unsigned int v167 = v166 | 0xC0000000;
            if (v166 == 0xFFFFFF) {
              unsigned int v167 = -1;
            }
            goto LABEL_140;
          }
        }
      }

      unsigned int v167 = -1;
LABEL_140:
      *unsigned int v193 = v167;
      int v161 = 1;
      unint64_t v168 = v155 ^ 1;
      if (v76 < 1) {
        unint64_t v168 = 1;
      }
      if ((v168 & 1) == 0) {
        goto LABEL_143;
      }
    }

    else
    {
      int v161 = 0;
      --v160;
      int v162 = v155 ^ 1;
      if (v76 < 0) {
        int v162 = 1;
      }
      if ((v162 & 1) == 0) {
        goto LABEL_143;
      }
    }
  }

  else
  {
    int v161 = 0;
    int v163 = v155 ^ 1;
    if (v76 < 0) {
      int v163 = 1;
    }
    if ((v163 & 1) == 0)
    {
      do
      {
LABEL_143:
        int32x4_t v169 = *(_DWORD *)&v133[4 * v136];
        sub_1000B33F8((char *)v213, v169, (uint64_t)v115, v124);
        uint64_t v170 = sub_1000CC52C((unint64_t)v115);
        if (v160 < 1)
        {
          int16x8_t v171 = v161;
          v197[v171] = v136;
          v195[v171] = v170;
          v193[v171] = v169;
          ++v161;
          v136 += v170;
        }

        else
        {
          --v160;
          v136 += v170;
        }
      }

      while (v161 <= v76);
    }
  }

  sub_1000CB038(v133, 4LL * (int)(v204 + 1));
  sub_1000CB038(v124, v187);
  sub_1000CB038(v115, v188);
  sub_1000CB038(__dsta, 2LL * (int)(v204 + 1));
  if ((int)v92 >= 1)
  {
    if (v92 < 8)
    {
      int16x8_t v172 = 0LL;
      goto LABEL_154;
    }

    int16x8_t v172 = v92 & 0x7FFFFFF8;
    int32x4_t v173 = vdupq_n_s32(v189);
    int32x4_t v174 = (int32x4_t *)(a7 + 4 * v191 + 16);
    int16x8_t v175 = v92 & 0xFFFFFFF8;
    do
    {
      uint64_t v176 = vaddq_s32(*v174, v173);
      v174[-1] = vaddq_s32(v174[-1], v173);
      *int32x4_t v174 = v176;
      v174 += 2;
      v175 -= 8LL;
    }

    while (v175);
    if (v172 != v92)
    {
LABEL_154:
      int v177 = (_DWORD *)(a7 + 4 * (v172 + v191));
      int v178 = v92 - v172;
      do
      {
        *v177++ += v189;
        --v178;
      }

      while (v178);
    }
  }

  return (v191 + v92);
}

_DWORD *sub_10005DC1C( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int8x16_t v8 = sub_1000BCAE8(a1, "bh0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  int8x16_t v10 = (_DWORD *)sub_1000C1074(32LL);
  if (v10)
  {
    if (!sub_1000BCD38(v9, v10)) {
      goto LABEL_11;
    }
    if (!sub_1000BCD38(v9, v10 + 1)) {
      goto LABEL_11;
    }
    if (!sub_1000BCCEC(v9, v10 + 2)) {
      goto LABEL_11;
    }
    int v13 = 0;
    int8x16_t v11 = v10 + 6;
    if (*v11)
    {
      if (v13 == *v10 / 2)
      {
        *((void *)v10 + 2) = *v11;
        goto LABEL_12;
      }

uint64_t sub_10005DD24()
{
  v0 = (_DWORD *)sub_1000C1074(16LL);
  uint64_t v1 = (uint64_t)v0;
  if (!v0) {
    return v1;
  }
  int v2 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v2 = *(_DWORD *)(qword_1000FDCC0 + 3416);
  }
  _DWORD *v0 = v2;
  uint64_t v3 = sub_1000C1074(2LL * (v2 + 1));
  *(void *)(v1 + 8) = v3;
  if (v3) {
    return v1;
  }
  sub_1000C0EF8(v1);
  return 0LL;
}

uint64_t sub_10005DD98(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 8));
    return sub_1000C0EF8(v1);
  }

  return result;
}

void sub_10005DDC8(int *a1)
{
  a1[1] = 0;
}

uint64_t sub_10005DDF8(int *a1, int a2, int a3, int a4)
{
  int v4 = *a1;
  if (*a1 > a3)
  {
    if (v4 - 1 > a4) {
      int v4 = a4 + 1;
    }
    *(_WORD *)(*((void *)a1 + 1) + 2LL * v4) = a2 + 1;
    uint64_t v5 = *((void *)a1 + 1);
    uint64_t v6 = 2LL * (a3 & ~(a3 >> 31));
    int v7 = *(unsigned __int16 *)(v5 + v6);
    unint64_t v8 = v6 + 2;
    do
    {
      v7 += *(unsigned __int16 *)(v5 + v8);
      v8 += 2LL;
    }

    while (v7 <= a2);
    unint64_t v9 = v8 >> 1;
    __int16 v10 = (v8 >> 1) - 2;
  }

  return (__int16)a4;
}

uint64_t sub_10005DE60(unsigned int *a1)
{
  uint64_t v2 = sub_1000BE644(*a1, 4, 0xFFFFFFFF);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0LL;
    do
      uint64_t v2 = sub_1000BE644(*(unsigned __int16 *)(*((void *)a1 + 1) + 2 * v3++), 2, v2);
    while (v3 < (int)*a1);
  }

  return v2;
}

uint64_t sub_10005DEC8(uint64_t a1)
{
  uint64_t result = sub_1000C1074(40LL);
  if (result)
  {
    *(void *)uint64_t result = a1;
    *(_DWORD *)(result + 32) = 1;
  }

  return result;
}

uint64_t sub_10005DEFC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int *)(result + 8);
    if ((int)v2 >= 1)
    {
      unint64_t v3 = v2 + 1;
      do
      {
        uint64_t v4 = (v3 - 2);
        uint64_t v5 = *(void *)(v1 + 24);
        uint64_t v6 = *(void *)(v5 + 8LL * v4);
        if (v6)
        {
          sub_10005E054(*(void *)(v5 + 8LL * v4));
          sub_1000C0EF8(v6);
          uint64_t v5 = *(void *)(v1 + 24);
        }

        *(void *)(v5 + 8 * v4) = 0LL;
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 16) + 8 * v4));
        *(void *)(*(void *)(v1 + 16) + 8 * v4) = 0LL;
        --v3;
      }

      while (v3 > 1);
    }

    *(void *)(v1 + 8) = 0LL;
    sub_1000C0EF8(*(void *)(v1 + 24));
    *(void *)(v1 + 24) = 0LL;
    sub_1000C0EF8(*(void *)(v1 + 16));
    *(void *)(v1 + 16) = 0LL;
    *(_DWORD *)(v1 + 32) = 0;
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10005DFB0(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      uint64_t v6 = *(_BYTE **)(*(void *)(a1 + 16) + 8 * i);
      if (v6)
      {
        int v7 = sub_1000C8AB4(v6, a2);
        int v3 = *(_DWORD *)(a1 + 8);
        if (!v7) {
          break;
        }
      }
    }

    if ((_DWORD)i != v3 && (_DWORD)i != -1) {
      goto LABEL_13;
    }
    return 0LL;
  }

  LODWORD(i) = 0;
  if (!v3) {
    return 0LL;
  }
LABEL_13:
  sub_10005E054(*(void *)(*(void *)(a1 + 24) + 8LL * (int)i));
  return 1LL;
}

uint64_t sub_10005E054(uint64_t a1)
{
  if (*(int *)(a1 + 60) >= 1)
  {
    uint64_t v2 = 0LL;
    for (uint64_t i = 0LL; i < *(int *)(a1 + 60); ++i)
    {
      uint64_t v4 = *(void *)(a1 + 72) + v2;
      int v5 = *(_DWORD *)(a1 + 28);
      if (v5 < *(unsigned __int16 *)(v4 + 26))
      {
        sub_1000C0EF8(*(void *)(v4 + 32));
        if (*(_DWORD *)(a1 + 28) < (int)*(unsigned __int16 *)(v4 + 10)) {
LABEL_8:
        }
          sub_1000C0EF8(*(void *)(*(void *)(a1 + 72) + v2 + 16));
      }

      else if (v5 < *(unsigned __int16 *)(v4 + 10))
      {
        goto LABEL_8;
      }

      v2 += 40LL;
    }
  }

  sub_1000C0EF8(*(void *)(a1 + 88));
  *(void *)(a1 + 88) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 80));
  *(void *)(a1 + 80) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 72));
  *(void *)(a1 + 72) = 0LL;
  int v6 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0LL;
  *(_WORD *)(a1 + 100) = 255;
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    do
    {
      sub_1000C0EF8(*(void *)(*(void *)(a1 + 40) + v7 + 24));
      sub_1000C0EF8(*(void *)(*(void *)(a1 + 40) + v7 + 8));
      ++v8;
      v7 += 32LL;
    }

    while (v8 < *(int *)(a1 + 32));
  }

  sub_1000C0EF8(*(void *)(a1 + 40));
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_1000BEC30(*(uint64_t **)(a1 + 48));
  *(void *)(a1 + 48) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 16));
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 12) = -1;
  sub_1000C0EF8(*(void *)(a1 + 112));
  *(void *)(a1 + 112) = 0LL;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 104));
  *(void *)(a1 + 104) = 0LL;
  *(_WORD *)(a1 + 102) = -1;
  return result;
}

uint64_t sub_10005E1C4(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= 1)
  {
    for (uint64_t i = 0LL; i < v3; ++i)
    {
      int v6 = *(_BYTE **)(*(void *)(a1 + 16) + 8 * i);
      if (v6)
      {
        int v7 = sub_1000C8AB4(v6, a2);
        int v3 = *(_DWORD *)(a1 + 8);
        if (!v7) {
          break;
        }
      }
    }

    if ((_DWORD)i != v3 && (_DWORD)i != -1) {
      goto LABEL_13;
    }
    return 0LL;
  }

  LODWORD(i) = 0;
  if (!v3) {
    return 0LL;
  }
LABEL_13:
  uint64_t v10 = 8LL * (int)i;
  sub_1000C0EF8(*(void *)(*(void *)(a1 + 16) + v10));
  *(void *)(*(void *)(a1 + 16) + v10) = 0LL;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(v11 + v10);
  if (v12)
  {
    sub_10005E054(v12);
    sub_1000C0EF8(v12);
    uint64_t v11 = *(void *)(a1 + 24);
  }

  *(void *)(v11 + 8LL * (int)i) = 0LL;
  return 1LL;
}

uint64_t sub_10005E2A0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 24) + 8LL * a2);
  uint64_t v3 = *(int *)(v2 + 60);
  if (!(_DWORD)v3 || *(void *)(v2 + 104)) {
    return 1LL;
  }
  *(void *)(v2 + 104) = sub_1000C0F68(2 * v3);
  int v5 = sub_1000C0F68(2LL * *(int *)(v2 + 60));
  *(void *)(v2 + 112) = v5;
  int v6 = *(_WORD **)(v2 + 104);
  if (v6) {
    BOOL v7 = v5 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    sub_1000C0EF8((uint64_t)v5);
    sub_1000C0EF8(*(void *)(v2 + 104));
    return 0LL;
  }

  uint64_t v8 = **(int **)(v2 + 72) - (uint64_t)*(int *)(v2 + 24);
  if ((int)v8 >= 257)
  {
    if (v8 < 0x10000)
    {
      unsigned int v10 = 0;
      unsigned int v12 = **(_DWORD **)(v2 + 72) - *(_DWORD *)(v2 + 24);
    }

    else
    {
      unsigned int v10 = 0;
      unsigned int v11 = **(_DWORD **)(v2 + 72) - *(_DWORD *)(v2 + 24);
      do
      {
        ++v10;
        unsigned int v12 = v11 >> 1;
        unsigned int v13 = v11 >> 17;
        v11 >>= 1;
      }

      while (v13);
    }

    unint64_t v14 = byte_1000F06CB[(unint64_t)v12 >> 8] + (unint64_t)v10;
    __int16 v9 = byte_1000F0570[((1 << (v14 - 1)) + v8) >> v14] + byte_1000F0671[v14];
  }

  else
  {
    __int16 v9 = byte_1000F0570[v8];
  }

  __int16 v15 = *(_WORD *)(v2 + 98) - v9 + *(_WORD *)(v2 + 100);
  _WORD *v6 = v15;
  **(_WORD **)(v2 + 112) = v15;
  if (*(int *)(v2 + 60) >= 2)
  {
    uint64_t v16 = 1LL;
    uint64_t v17 = 44LL;
    do
    {
      __int16 v18 = *(_WORD *)(v2 + 100) + *(_WORD *)(v2 + 98) - *(_DWORD *)(*(void *)(v2 + 72) + v17);
      *(_WORD *)(*(void *)(v2 + 104) + 2 * v16) = v18;
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3464)) {
        v18 -= *(_WORD *)(v2 + 98);
      }
      *(_WORD *)(*(void *)(v2 + 112) + 2 * v16++) = v18;
      v17 += 40LL;
    }

    while (v16 < *(int *)(v2 + 60));
  }

  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3464)) {
    return 1LL;
  }
  uint64_t v19 = *(void *)(v2 + 72);
  uint64_t result = 1LL;
  if (*(_WORD *)(v19 + 8))
  {
    uint64_t v20 = 0LL;
    unint64_t v21 = 0LL;
    do
    {
      unsigned int v22 = (unsigned __int16 *)(*(void *)(v19 + 16) + v20);
      unint64_t v23 = v22[1];
      if (v23 > 0x100) {
        int v24 = byte_1000F0570[((1 << (byte_1000F06CB[v23 >> 8] - 1)) + v23) >> byte_1000F06CB[v23 >> 8]]
      }
            + byte_1000F0671[byte_1000F06CB[v23 >> 8]];
      else {
        int v24 = byte_1000F0570[v23];
      }
      uint64_t v25 = *v22;
      uint64_t v26 = *(void *)(v2 + 112);
      int v27 = *(__int16 *)(v26 + 2 * v25);
      int v28 = *(_DWORD *)(v19 + 4) - v24 + *(unsigned __int16 *)(v2 + 96);
      int v29 = (__int16)v28;
      __int16 v30 = v28 - v27;
      __int16 v31 = v27 - v28;
      if (v29 >= v27) {
        __int16 v32 = v30;
      }
      else {
        __int16 v32 = v31;
      }
      if (v32 <= 73) {
        LOWORD(v28) = v28 - byte_1000F0681[v32];
      }
      *(_WORD *)(v26 + 2 * v25) = v28;
      ++v21;
      v20 += 4LL;
    }

    while (v21 < *(unsigned __int16 *)(v19 + 8));
    return 1LL;
  }

  return result;
}

uint64_t sub_10005E540(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4, unsigned int a5)
{
  uint64_t v5 = *a4;
  if (v5 == 65533)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 8LL * a2);
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 8LL * a2);
  if (a5 != 65532)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    unsigned int v12 = *(unsigned __int16 *)(v11 + 2LL * a5);
    uint64_t v13 = *(void *)(v8 + 72);
    unsigned int v14 = *(unsigned __int16 *)(v11 + 2 * v5);
    int v10 = (__int16)(*(_WORD *)(v8 + 100)
    uint64_t v15 = *(unsigned __int16 *)(v13 + 40LL * v14 + 8);
    if (qword_1000FDCC0 && *(void *)(qword_1000FDCC0 + 3432) > v15)
    {
      if (!*(_WORD *)(v13 + 40LL * v14 + 8)) {
        return (__int16)v10;
      }
      uint64_t v16 = 0LL;
      uint64_t v17 = *(unsigned __int16 **)(v13 + 40LL * v14 + 16);
      while (1)
      {
        unsigned int v18 = *v17;
        v17 += 2;
        BOOL v19 = v18 == v12;
        if (v18 >= v12) {
          break;
        }
        if (v15 == ++v16) {
          return (__int16)v10;
        }
      }

      if (!v19) {
        return (__int16)v10;
      }
      unint64_t v24 = *(unsigned __int16 *)(*(void *)(v13 + 40LL * v14 + 16) + 4LL * (int)v16 + 2);
      if (v24 > 0x100)
      {
LABEL_36:
        int v25 = byte_1000F0570[((1 << (byte_1000F06CB[v24 >> 8] - 1)) + v24) >> byte_1000F06CB[v24 >> 8]]
            + byte_1000F0671[byte_1000F06CB[v24 >> 8]];
LABEL_37:
        int v31 = *(unsigned __int16 *)(v8 + 96) + *(_DWORD *)(v13 + 40LL * v14 + 4) - v25;
        int v33 = (__int16)v31;
        __int16 v34 = v31 - v10;
        LOWORD(v31) = v10 - v31;
        if (v10 <= v33) {
          LOWORD(v31) = v34;
        }
        int v31 = (__int16)v31;
        if (v10 >= v33) {
          LOWORD(v10) = v33;
        }
        return (__int16)v10;
      }
    }

    else
    {
      uint64_t v20 = *(void *)(v13 + 40LL * v14 + 16);
      int v21 = 0;
      if (*(_WORD *)(v13 + 40LL * v14 + 8))
      {
        signed int v22 = v15 - 1;
        do
        {
          unsigned int v23 = (v21 + v22) >> 1;
          else {
            int v21 = v23 + 1;
          }
        }

        while (v21 <= v22);
      }

      unint64_t v24 = *(unsigned __int16 *)(v20 + 4LL * v21 + 2);
      if (v24 > 0x100) {
        goto LABEL_36;
      }
    }

    int v25 = byte_1000F0570[v24];
    goto LABEL_37;
  }

  int v9 = **(__int16 **)(v8 + 112);
  LOWORD(v10) = **(_WORD **)(v8 + 112);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3464)) {
    return (__int16)v10;
  }
  unsigned int v26 = *(unsigned __int16 *)(*(void *)(v8 + 16) + 2 * v5);
  uint64_t v27 = *(void *)(v8 + 72);
  int v28 = *(_WORD **)(v27 + 40LL * v26 + 16);
  if (*v28) {
    return (__int16)v10;
  }
  unint64_t v29 = (unsigned __int16)v28[1];
  int v30 = v29 > 0x100
      ? byte_1000F0570[((1 << (byte_1000F06CB[v29 >> 8] - 1)) + v29) >> byte_1000F06CB[v29 >> 8]]
      + byte_1000F0671[byte_1000F06CB[v29 >> 8]]
      : byte_1000F0570[v29];
  int v31 = *(_DWORD *)(v27 + 40LL * v26 + 4) - v30 + *(unsigned __int16 *)(v8 + 96);
  __int16 v32 = v10 - v31;
  if ((__int16)v31 >= v9)
  {
    LOWORD(v31) = v31 - v10;
  }

  else
  {
    LOWORD(v10) = v31;
    LOWORD(v31) = v32;
  }

  int v31 = (__int16)v31;
  return (__int16)(v10 - byte_1000F0681[v31]);
}

uint64_t sub_10005E814(uint64_t result, int a2, unsigned int a3, int a4, unsigned __int16 *a5, _WORD *a6)
{
  if (a4)
  {
    uint64_t v6 = *(void *)(*(void *)(result + 24) + 8LL * a2);
    unsigned int v7 = *(unsigned __int16 *)(*(void *)(v6 + 16) + 2LL * a3);
    int v8 = *(unsigned __int16 *)(v6 + 102);
    if (v7 != v8)
    {
      if (v8 != 0xFFFF)
      {
        uint64_t v9 = *(void *)(v6 + 72);
        uint64_t v10 = v9 + 40LL * *(unsigned __int16 *)(v6 + 102);
        unsigned int v13 = *(unsigned __int16 *)(v10 + 8);
        uint64_t v11 = (unsigned __int16 *)(v10 + 8);
        unsigned int v12 = v13;
        if (v13)
        {
          uint64_t v14 = 0LL;
          unint64_t v15 = 0LL;
          uint64_t v16 = (void *)(v9 + 40LL * *(unsigned __int16 *)(v6 + 102) + 16);
          do
          {
            if (*(_WORD *)(*v16 + v14))
            {
              *(_WORD *)(*(void *)(v6 + 104) + 2LL * *(unsigned __int16 *)(*v16 + v14)) = *(_WORD *)(v6 + 100)
                                                                                          + *(_WORD *)(v6 + 98)
                                                                                          - *(_DWORD *)(*(void *)(v6 + 72) + 40LL * *(unsigned __int16 *)(*v16 + v14) + 4);
              unsigned int v12 = *v11;
            }

            ++v15;
            v14 += 4LL;
          }

          while (v15 < v12);
        }
      }

      uint64_t v17 = *(void *)(v6 + 72);
      uint64_t v18 = v17 + 40LL * v7;
      unsigned int v21 = *(unsigned __int16 *)(v18 + 8);
      uint64_t v20 = (unsigned __int16 *)(v18 + 8);
      unsigned int v19 = v21;
      if (v21)
      {
        uint64_t v22 = 0LL;
        unint64_t v23 = 0LL;
        uint64_t v24 = v17 + 40LL * v7;
        int v25 = (void *)(v24 + 16);
        unsigned int v26 = (_DWORD *)(v24 + 4);
        uint64_t result = 1LL;
        do
        {
          uint64_t v27 = *(unsigned __int16 *)(*v25 + v22);
          if (*(_WORD *)(*v25 + v22))
          {
            unint64_t v28 = *(unsigned __int16 *)(*v25 + v22 + 2);
            if (v28 > 0x100) {
              int v29 = byte_1000F0570[((1 << (byte_1000F06CB[v28 >> 8] - 1)) + v28) >> byte_1000F06CB[v28 >> 8]]
            }
                  + byte_1000F0671[byte_1000F06CB[v28 >> 8]];
            else {
              int v29 = byte_1000F0570[v28];
            }
            uint64_t v30 = *(void *)(v6 + 104);
            int v31 = *(__int16 *)(v30 + 2 * v27);
            int v32 = *v26 - v29 + *(unsigned __int16 *)(v6 + 96);
            int v33 = (__int16)v32;
            __int16 v34 = v32 - v31;
            __int16 v35 = v31 - v32;
            if (v33 >= v31) {
              __int16 v36 = v34;
            }
            else {
              __int16 v36 = v35;
            }
            if (v36 <= 73) {
              LOWORD(v32) = v32 - byte_1000F0681[v36];
            }
            *(_WORD *)(v30 + 2 * v27) = v32;
            unsigned int v19 = *v20;
          }

          ++v23;
          v22 += 4LL;
        }

        while (v23 < v19);
      }
    }

    if (a4 >= 1)
    {
      uint64_t v37 = a4;
      do
      {
        unsigned int v38 = *a5++;
        *a6++ = *(_WORD *)(*(void *)(v6 + 104) + 2LL * *(unsigned __int16 *)(*(void *)(v6 + 16) + 2LL * v38));
        --v37;
      }

      while (v37);
    }

    *(_WORD *)(v6 + 102) = v7;
  }

  return result;
}

uint64_t sub_10005E9F4(uint64_t result, int a2, int a3, unsigned __int16 *a4, _WORD *a5)
{
  if (a3 >= 1)
  {
    uint64_t v5 = *(void *)(*(void *)(result + 24) + 8LL * a2);
    uint64_t v6 = a3;
    do
    {
      unsigned int v7 = *a4++;
      *a5++ = *(_WORD *)(*(void *)(v5 + 112) + 2LL * *(unsigned __int16 *)(*(void *)(v5 + 16) + 2LL * v7));
      --v6;
    }

    while (v6);
  }

  return result;
}

uint64_t sub_10005EA2C(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 8LL * a2);
  int v4 = **(__int16 **)(v3 + 112);
  __int16 v5 = **(_WORD **)(v3 + 112);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3464)) {
    return v5;
  }
  uint64_t v7 = *(void *)(v3 + 72);
  int v8 = *(_WORD **)(v7 + 40LL * *(unsigned __int16 *)(*(void *)(v3 + 16) + 2LL * a3) + 16);
  if (*v8) {
    return v5;
  }
  unint64_t v9 = (unsigned __int16)v8[1];
  int v10 = v9 > 0x100
      ? byte_1000F0570[((1 << (byte_1000F06CB[v9 >> 8] - 1)) + v9) >> byte_1000F06CB[v9 >> 8]]
      + byte_1000F0671[byte_1000F06CB[v9 >> 8]]
      : byte_1000F0570[v9];
  int v11 = *(_DWORD *)(v7 + 40LL * *(unsigned __int16 *)(*(void *)(v3 + 16) + 2LL * a3) + 4)
      - v10
      + *(unsigned __int16 *)(v3 + 96);
  __int16 v12 = v5 - v11;
  if ((__int16)v11 >= v4)
  {
    __int16 v13 = v11 - v5;
  }

  else
  {
    __int16 v5 = v11;
    __int16 v13 = v12;
  }

  if (v13 > 73) {
    return v5;
  }
  else {
    return (__int16)(v5 - byte_1000F0681[v13]);
  }
}

BOOL sub_10005EB30(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_1000BDA88(a2, v100, a3);
  if (!v6) {
    return 0LL;
  }
  uint64_t v8 = v6;
  if (!sub_1000BDB78(v6, *(_DWORD *)(a1 + 8), v7)) {
    goto LABEL_18;
  }
  int v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= 1)
  {
    uint64_t v11 = 0LL;
    while (1)
    {
      unint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8 * v11);
      if (v12)
      {
        __int32 v13 = sub_1000C88E4(v12) + 1;
        if (!sub_1000BDB78(v8, v13, v14)
          || ((unint64_t v15 = *(void **)(*(void *)(a1 + 16) + 8 * v11)) != 0LL ? (v16 = v13) : (v16 = 0),
              !sub_1000BDBCC(v8, v15, v16, 1, v9)))
        {
LABEL_13:
          int v10 = *(_DWORD *)(a1 + 8);
          if ((_DWORD)v11 == v10) {
            goto LABEL_14;
          }
LABEL_18:
          BOOL v18 = 0LL;
          goto LABEL_102;
        }
      }

      else if (!sub_1000BDB78(v8, 0, v9))
      {
        goto LABEL_13;
      }
    }
  }

  if (v10) {
    goto LABEL_18;
  }
LABEL_14:
  if (v10 >= 1)
  {
    uint64_t v17 = 0LL;
    while (1)
    {
      if (*(void *)(*(void *)(a1 + 16) + 8 * v17))
      {
        uint64_t v19 = *(void *)(*(void *)(a1 + 24) + 8 * v17);
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 8), v9)) {
          goto LABEL_99;
        }
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 12), v20)) {
          goto LABEL_99;
        }
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 24), v21)) {
          goto LABEL_99;
        }
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 28), v22)) {
          goto LABEL_99;
        }
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 32), v23)) {
          goto LABEL_99;
        }
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 56), v24)) {
          goto LABEL_99;
        }
        if (!sub_1000BDB78(v8, *(_DWORD *)(v19 + 60), v25)) {
          goto LABEL_99;
        }
        unint64_t v28 = *(void **)(v19 + 16);
        if (v28)
        {
        }

        int v29 = *(_DWORD *)(v19 + 32);
        if (v29 < 1)
        {
          if (v29) {
            goto LABEL_99;
          }
        }

        else
        {
          uint64_t v30 = 0LL;
          for (uint64_t i = 0LL; i < *(int *)(v19 + 32); ++i)
          {
            uint64_t v32 = *(void *)(v19 + 40);
            if (!sub_1000BDB78(v8, *(_DWORD *)(v32 + v30), v27)) {
              break;
            }
            uint64_t v33 = v32 + v30;
            if (!sub_1000BDB78(v8, *(_DWORD *)(v32 + v30 + 16), v27)) {
              break;
            }
            __int32 v34 = sub_1000CC52C(*(void *)(v33 + 8));
            if (!sub_1000BDB78(v8, v34, v35)) {
              break;
            }
            if (v34 >= 1)
            {
              __int16 v36 = *(void **)(v33 + 8);
              unsigned int v37 = v36 ? v34 + 1 : 0;
            }

            unsigned int v38 = *(void **)(v32 + v30 + 24);
            if (v38)
            {
            }

            else if (!sub_1000BDBCC(v8, 0LL, 0, 2, v27))
            {
              break;
            }

            v30 += 32LL;
          }

          if ((_DWORD)i != *(_DWORD *)(v19 + 32))
          {
LABEL_99:
            int v10 = *(_DWORD *)(a1 + 8);
            goto LABEL_101;
          }
        }

        int v39 = *(_DWORD *)(v19 + 60);
        if (v39 < 1)
        {
          if (v39) {
            goto LABEL_99;
          }
        }

        else
        {
          uint64_t v99 = v17;
          for (uint64_t j = 0LL; j < *(int *)(v19 + 60); ++j)
          {
            uint64_t v41 = *(void *)(v19 + 72);
            if (!sub_1000BDB78(v8, *(_DWORD *)(v41 + 40 * j), v27)) {
              break;
            }
            if (!sub_1000BDB78(v8, *(_DWORD *)(v41 + 40 * j + 4), v27)) {
              break;
            }
            uint64_t v42 = v41 + 40 * j;
            __int32 v44 = *(unsigned __int16 *)(v42 + 8);
            uint64_t v43 = (_WORD *)(v42 + 8);
            if (!sub_1000BDB78(v8, v44, v27)) {
              break;
            }
            uint64_t v45 = v41 + 40 * j;
            __int32 v47 = *(unsigned __int16 *)(v45 + 10);
            uint64_t v46 = (unsigned __int16 *)(v45 + 10);
            if (!sub_1000BDB78(v8, v47, v27)) {
              break;
            }
            uint64_t v48 = v41 + 40 * j;
            __int32 v50 = *(unsigned __int16 *)(v48 + 24);
            uint8x8_t v49 = (_WORD *)(v48 + 24);
            if (!sub_1000BDB78(v8, v50, v27)) {
              break;
            }
            uint64_t v51 = v41 + 40 * j;
            __int32 v53 = *(unsigned __int16 *)(v51 + 26);
            uint64_t v52 = (unsigned __int16 *)(v51 + 26);
            if (!sub_1000BDB78(v8, v53, v27)) {
              break;
            }
            if (*v43 && *(_DWORD *)(v19 + 28) < (int)*v46)
            {
              int16x8_t v61 = (char *)sub_1000CAF58(2LL * (unsigned __int16)*v43, v54, v55, v56, v57, v58, v59, v60);
              unint64_t v69 = sub_1000CAF58(2LL * (unsigned __int16)*v43, v62, v63, v64, v65, v66, v67, v68);
              uint64_t v71 = (void *)v69;
              if (*v43)
              {
                uint64_t v72 = 0LL;
                unint64_t v73 = 0LL;
                uint64_t v74 = (void *)(v41 + 40 * j + 16);
                do
                {
                  uint64_t v75 = 2 * v73;
                  *(_WORD *)&v61[v75] = *(_WORD *)(*v74 + v72);
                  *(_WORD *)(v69 + v75) = *(_WORD *)(*v74 + v72 + 2);
                  ++v73;
                  unint64_t v76 = (unsigned __int16)*v43;
                  v72 += 4LL;
                }

                while (v73 < v76);
              }

              else
              {
                LODWORD(v76) = 0;
              }

              if (v61) {
                unsigned int v77 = v76;
              }
              else {
                unsigned int v77 = 0;
              }
              if (v71)
              {
              }

              else if (!sub_1000BDBCC(v8, 0LL, 0, 2, v27))
              {
                break;
              }

              sub_1000CB038(v71, 2LL * (unsigned __int16)*v43);
              sub_1000CB038(v61, 2LL * (unsigned __int16)*v43);
            }

            if (*v49 && *(_DWORD *)(v19 + 28) < (int)*v52)
            {
              uint64_t v78 = (char *)sub_1000CAF58(2LL * (unsigned __int16)*v49, v54, v55, v56, v57, v58, v59, v60);
              unint64_t v86 = sub_1000CAF58(2LL * (unsigned __int16)*v49, v79, v80, v81, v82, v83, v84, v85);
              int16x8_t v88 = (void *)v86;
              if (*v49)
              {
                uint64_t v89 = 0LL;
                unint64_t v90 = 0LL;
                int16x8_t v91 = (void *)(v41 + 40 * j + 32);
                do
                {
                  uint64_t v92 = 2 * v90;
                  *(_WORD *)&v78[v92] = *(_WORD *)(*v91 + v89);
                  *(_WORD *)(v86 + v92) = *(_WORD *)(*v91 + v89 + 2);
                  ++v90;
                  unint64_t v93 = (unsigned __int16)*v49;
                  v89 += 4LL;
                }

                while (v90 < v93);
              }

              else
              {
                LODWORD(v93) = 0;
              }

              if (v78) {
                unsigned int v94 = v93;
              }
              else {
                unsigned int v94 = 0;
              }
              if (v88)
              {
              }

              else if (!sub_1000BDBCC(v8, 0LL, 0, 2, v27))
              {
                break;
              }

              sub_1000CB038(v88, 2LL * (unsigned __int16)*v49);
              sub_1000CB038(v78, 2LL * (unsigned __int16)*v49);
            }
          }

          int v39 = *(_DWORD *)(v19 + 60);
          uint64_t v17 = v99;
          if ((_DWORD)j != v39) {
            goto LABEL_99;
          }
        }

        int32x4_t v95 = *(void **)(v19 + 80);
        if (v95)
        {
        }

        else if (!sub_1000BDBCC(v8, 0LL, 0, 4, v27))
        {
          goto LABEL_99;
        }

        int v97 = *(void **)(v19 + 88);
        if (v97)
        {
        }

        else if (!sub_1000BDBCC(v8, 0LL, 0, 4, v96))
        {
          goto LABEL_99;
        }

        int v10 = *(_DWORD *)(a1 + 8);
      }

      if (++v17 >= v10) {
        goto LABEL_99;
      }
    }
  }

  LODWORD(v17) = 0;
LABEL_101:
  BOOL v18 = (_DWORD)v17 == v10;
LABEL_102:
  sub_1000BDB48(v8);
  return v18;
}

uint64_t sub_10005F1A4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v11 = sub_1000BCAE8(a2, v106, a3, v6, v7, v8, v9, v10);
  if (v11)
  {
    uint64_t v12 = (uint64_t)v11;
    __int32 v13 = (int *)(a1 + 8);
    BOOL v14 = sub_1000BCD38((uint64_t)v11, (void *)(a1 + 8));
    uint64_t v15 = *(unsigned int *)(a1 + 8);
    if (!v14) {
      goto LABEL_132;
    }
    *(_DWORD *)(a1 + 12) = v15;
    *(void *)(a1 + 16) = sub_1000C1074(8 * v15);
    unsigned int v16 = (uint64_t *)(a1 + 16);
    uint64_t v17 = sub_1000C1074(8LL * *(int *)(a1 + 8));
    *(void *)(a1 + 24) = v17;
    if (*(void *)(a1 + 16)) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18)
    {
      sub_1000C0EF8(v17);
      sub_1000C0EF8(*v16);
      *__int32 v13 = 0;
      *unsigned int v16 = 0LL;
      *(void *)(a1 + 24) = 0LL;
LABEL_136:
      sub_10005DEFC(a1);
      uint64_t v19 = 0LL;
      goto LABEL_137;
    }

    LODWORD(v15) = *v13;
    if (*v13 < 1)
    {
LABEL_21:
      if (!(_DWORD)v15) {
        goto LABEL_22;
      }
      goto LABEL_132;
    }

    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    do
    {
      int v105 = 0;
      if (!sub_1000BCD38(v12, &v105)
        || v105 >= 1
        && ((int v104 = 0, !sub_1000BCED0(v12, 1, (uint64_t *)(*v16 + v20), &v104))
         || *(void *)(*v16 + 8 * v21) && v104 != v105))
      {
        LODWORD(v15) = *v13;
        if ((_DWORD)v21 == *v13) {
          goto LABEL_22;
        }
        goto LABEL_132;
      }

      ++v21;
      uint64_t v15 = *v13;
      v20 += 8LL;
    }

    while (v21 < v15);
    if ((_DWORD)v21 != (_DWORD)v15) {
      goto LABEL_132;
    }
LABEL_22:
    if ((int)v15 >= 1)
    {
      uint64_t v22 = 0LL;
      while (1)
      {
        if (*(void *)(*(void *)(a1 + 16) + 8 * v22))
        {
          *(void *)(*(void *)(a1 + 24) + 8 * v22) = sub_1000C1074(336LL);
          uint8x8_t v23 = *(void **)(*(void *)(a1 + 24) + 8 * v22);
          if (!v23) {
            goto LABEL_118;
          }
          *uint8x8_t v23 = *(void *)a1;
          LODWORD(v23) = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            uint8x8_t v23 = *(void **)(qword_1000FDCC0 + 3472);
          }
          uint64_t v101 = v22;
          int v24 = (int)v23 / 5;
          *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v22) + 96LL) = asc_1000F2B41[20 - v24];
          *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v22) + 98LL) = asc_1000F2B41[v24];
          *(_WORD *)(*(void *)(*(void *)(a1 + 24) + 8 * v22) + 102LL) = -1;
          uint64_t v100 = 8 * v22;
          uint8x8_t v25 = *(_DWORD **)(*(void *)(a1 + 24) + 8 * v22);
          int v105 = 0;
          if (!sub_1000BCD38(v12, &v105)) {
            goto LABEL_124;
          }
          v25[2] = v105;
          if (!sub_1000BCD38(v12, v25 + 3)) {
            goto LABEL_124;
          }
          if (!sub_1000BCD38(v12, v25 + 6)) {
            goto LABEL_124;
          }
          uint64_t v102 = v25 + 7;
          if (!sub_1000BCD38(v12, v25 + 7)) {
            goto LABEL_124;
          }
          uint8x8_t v26 = v25 + 8;
          if (!sub_1000BCD38(v12, v25 + 8)) {
            goto LABEL_124;
          }
          if (!sub_1000BCD38(v12, v25 + 14)) {
            goto LABEL_124;
          }
          uint64_t v103 = v25 + 15;
          uint64_t v27 = v25[8];
          v25[9] = v27;
          v25[16] = v25[15];
          if ((v25[3] & 0x80000000) == 0)
          {
            int v105 = 0;
            if (!sub_1000BCED0(v12, 2, (uint64_t *)v25 + 2, &v105)
              || *((void *)v25 + 2) && v105 != v25[3] + 1)
            {
              goto LABEL_124;
            }

            uint64_t v27 = *v26;
          }

          uint64_t v28 = sub_1000C1074(32 * v27);
          *((void *)v25 + 5) = v28;
          if (!v28)
          {
            *uint8x8_t v26 = 0;
LABEL_123:
            int *v103 = 0;
LABEL_124:
            sub_1000C0EF8(*(void *)(*(void *)(a1 + 24) + v100));
            *(void *)(*(void *)(a1 + 24) + v100) = 0LL;
            LODWORD(v15) = *v13;
            if ((_DWORD)v101 == *v13) {
              goto LABEL_131;
            }
            goto LABEL_132;
          }

          if (*v26 < 1)
          {
LABEL_141:
            if (*v26) {
              goto LABEL_124;
            }
          }

          else
          {
            int v29 = v13;
            uint64_t v30 = a1;
            uint64_t v31 = 0LL;
            uint64_t v32 = 0LL;
            do
            {
              uint64_t v33 = *((void *)v25 + 5);
              int v105 = 0;
              if (!sub_1000BCD38(v12, &v105)) {
                break;
              }
              if (v105 >= 1)
              {
                int v104 = 0;
                if (!sub_1000BCED0(v12, 2, (uint64_t *)(v33 + v31 + 8), &v104)
                  || *(void *)(v33 + v31 + 8) && v104 != v105 + 1)
                {
                  break;
                }
              }

              int v104 = 0;
              if (!sub_1000BCED0(v12, 2, (uint64_t *)(v33 + v31 + 24), &v104)
                || *(void *)(v33 + v31 + 24) && v104 != *(_DWORD *)(v33 + v31 + 16))
              {
                break;
              }

              ++v32;
              v31 += 32LL;
            }

            while (v32 < *v26);
            a1 = v30;
            __int32 v13 = v29;
            if ((_DWORD)v32 != *v26) {
              goto LABEL_124;
            }
          }

          uint64_t v34 = *v103;
          if ((int)v34 <= 0)
          {
            LODWORD(i) = 0;
            __int16 v36 = (uint64_t *)(v25 + 18);
          }

          else
          {
            uint64_t v35 = sub_1000C1074(40 * v34);
            *((void *)v25 + 9) = v35;
            __int16 v36 = (uint64_t *)(v25 + 18);
            if (!v35) {
              goto LABEL_123;
            }
            LODWORD(v34) = *v103;
            if (*v103 < 1)
            {
              LODWORD(i) = 0;
            }

            else
            {
              int v98 = v13;
              uint64_t v99 = a1;
              for (uint64_t i = 0LL; i < *v103; ++i)
              {
                uint64_t v39 = *v36;
                int v40 = (_WORD *)(v39 + 40 * i + 8);
                if (!sub_1000BCDD4(v12, v40)
                  || (uint64_t v41 = (_WORD *)(v39 + 40 * i + 10), !sub_1000BCDD4(v12, v41))
                  || (uint64_t v42 = (_WORD *)(v39 + 40 * i + 24), !sub_1000BCDD4(v12, v42))
                  || (uint64_t v43 = (unsigned __int16 *)(v39 + 40 * i + 26), !sub_1000BCDD4(v12, v43)))
                {
LABEL_95:
                  uint8x8_t v26 = v25 + 8;
                  break;
                }

                if (*v40 && *v102 < (int)(unsigned __int16)*v41)
                {
                  uint64_t v51 = (void *)sub_1000CAF58(2LL * (unsigned __int16)*v40, v44, v45, v46, v47, v48, v49, v50);
                  uint64_t v59 = (void *)sub_1000CAF58(2LL * (unsigned __int16)*v40, v52, v53, v54, v55, v56, v57, v58);
                  uint64_t v60 = sub_1000C1074(4LL * (unsigned __int16)*v41);
                  uint64_t v61 = v39 + 40 * i;
                  *(void *)(v61 + 16) = v60;
                  uint64_t v62 = (void *)(v61 + 16);
                  if (!v60) {
                    goto LABEL_95;
                  }
                  if (*v40)
                  {
                    uint64_t v63 = 0LL;
                    unint64_t v64 = 0LL;
                    do
                    {
                      *(_WORD *)(*v62 + v63) = *((_WORD *)v51 + v64);
                      *(_WORD *)(*v62 + v63 + 2) = *((_WORD *)v59 + v64++);
                      unint64_t v65 = (unsigned __int16)*v40;
                      v63 += 4LL;
                    }

                    while (v64 < v65);
                  }

                  else
                  {
                    unint64_t v65 = 0LL;
                  }

                  sub_1000CB038(v59, 2 * v65);
                  sub_1000CB038(v51, 2LL * (unsigned __int16)*v40);
                  uint64_t v43 = (unsigned __int16 *)(v39 + 40 * i + 26);
                }

                uint8x8_t v26 = v25 + 8;
                if (*v42 && *v102 < (int)*v43)
                {
                  uint64_t v66 = v43;
                  uint64_t v67 = (void *)sub_1000CAF58(2LL * (unsigned __int16)*v42, v44, v45, v46, v47, v48, v49, v50);
                  uint64_t v75 = (void *)sub_1000CAF58(2LL * (unsigned __int16)*v42, v68, v69, v70, v71, v72, v73, v74);
                  uint64_t v76 = sub_1000C1074(4LL * *v66);
                  uint64_t v77 = v39 + 40 * i;
                  *(void *)(v77 + 32) = v76;
                  uint64_t v78 = (void *)(v77 + 32);
                  if (!v76) {
                    break;
                  }
                  if (*v42)
                  {
                    uint64_t v79 = 0LL;
                    unint64_t v80 = 0LL;
                    do
                    {
                      *(_WORD *)(*v78 + v79) = *((_WORD *)v67 + v80);
                      *(_WORD *)(*v78 + v79 + 2) = *((_WORD *)v75 + v80++);
                      unint64_t v38 = (unsigned __int16)*v42;
                      v79 += 4LL;
                    }

                    while (v80 < v38);
                  }

                  else
                  {
                    unint64_t v38 = 0LL;
                  }

                  sub_1000CB038(v75, 2 * v38);
                  sub_1000CB038(v67, 2LL * (unsigned __int16)*v42);
                }
              }

              LODWORD(v34) = *v103;
              __int32 v13 = v98;
              a1 = v99;
            }
          }

          if ((_DWORD)i != (_DWORD)v34) {
            goto LABEL_124;
          }
          int v105 = 0;
          uint64_t v81 = v25 + 20;
          int v105 = 0;
          uint64_t v82 = v25 + 22;
          int v88 = *v103;
          if (*v82)
          {
            if (v105 != *v102 * v88) {
              goto LABEL_124;
            }
          }

          if (v88 >= 1)
          {
            uint64_t v89 = 0LL;
            for (uint64_t j = 0LL; j < *v103; ++j)
            {
              uint64_t v91 = *v36;
              uint64_t v92 = *v36 + v89;
              uint64_t v93 = *v102;
              if ((int)v93 >= *(unsigned __int16 *)(v92 + 10))
              {
                *(void *)(v92 + 16) = *v81 + 4 * j * v93;
                uint64_t v93 = *v102;
                if ((int)v93 >= *(unsigned __int16 *)(v92 + 26)) {
LABEL_111:
                }
                  *(void *)(v91 + v89 + 32) = *v82 + 0x3333333333333334LL * ((v89 + v91 - *v36) >> 3) * v93;
              }

              else if ((int)v93 >= *(unsigned __int16 *)(v92 + 26))
              {
                goto LABEL_111;
              }

              v89 += 40LL;
            }
          }

          uint64_t v94 = sub_1000BEB34(2 * v25[8], (uint64_t)sub_10005FBAC, 0LL, v83, v84, v85, v86, v87);
          *((void *)v25 + 6) = v94;
          if (!v94) {
            goto LABEL_124;
          }
          sub_1000BEBFC(v94, 0.5);
          uint64_t v22 = v101;
          if (*v26 >= 1)
          {
            uint64_t v95 = 0LL;
            uint64_t v96 = 0LL;
            do
            {
              sub_1000BEDD4(*((void *)v25 + 6), *((void *)v25 + 5) + v95);
              ++v96;
              v95 += 32LL;
            }

            while (v96 < (int)v25[8]);
          }
        }

        if (++v22 >= *v13) {
          goto LABEL_118;
        }
      }
    }

    LODWORD(v22) = 0;
LABEL_118:
    LODWORD(v15) = *v13;
    if ((_DWORD)v22 == *v13)
    {
LABEL_131:
      uint64_t v19 = 1LL;
LABEL_137:
      sub_1000BCBC8(v12);
      return v19;
    }

LABEL_132:
    goto LABEL_136;
  }

  return 0LL;
}

uint64_t sub_10005FBAC(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 24);
  return (2 * *(_DWORD *)(a1 + 16));
}

uint64_t sub_10005FBC0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    sub_1000C0EF8(*(void *)(result + 72));
    v1[8] = 0LL;
    v1[9] = 0LL;
    sub_1000C133C(v1[7]);
    v1[6] = 0LL;
    v1[7] = 0LL;
    sub_1000C0EF8(v1[5]);
    v1[4] = 0LL;
    v1[5] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

int *sub_10005FC0C(int *result, int16x8_t *a2, uint64_t a3)
{
  if (*result >= 1)
  {
    uint64_t v3 = 0LL;
    int v4 = result[4] + result[6];
    int v5 = v4 - result[5];
    int v6 = 1 << (*((_BYTE *)result + 16) + *((_BYTE *)result + 24) - 1);
    uint64_t v7 = *((void *)result + 4);
    while (1)
    {
      uint64_t v10 = *(int *)(v7 + 4 * v3);
      uint64_t v11 = result[1];
      if ((_DWORD)v11 == 1)
      {
        int v8 = **(__int16 **)(*((void *)result + 6) + 8 * v10) * a2->i16[v10];
        goto LABEL_4;
      }

      if ((int)v11 < 1)
      {
        int v8 = 0;
        goto LABEL_4;
      }

      uint64_t v12 = *(int16x8_t **)(*((void *)result + 6) + 8 * v10);
      uint64_t v13 = v11 & 0x7FFFFFF0;
      uint64_t v16 = v11 & 0xFFFFFFF0;
      BOOL v14 = &v12->i16[v16];
      uint64_t v15 = (int16x8_t *)((char *)a2 + v16 * 2);
      uint64_t v17 = v12 + 1;
      int32x4_t v18 = 0uLL;
      uint64_t v19 = v11 & 0xFFFFFFF0;
      uint64_t v20 = a2 + 1;
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = 0uLL;
      int32x4_t v23 = 0uLL;
      do
      {
        int16x8_t v24 = v20[-1];
        int16x8_t v25 = v17[-1];
        int32x4_t v21 = vmlal_high_s16(v21, v25, v24);
        int32x4_t v18 = vmlal_s16(v18, *(int16x4_t *)v25.i8, *(int16x4_t *)v24.i8);
        int32x4_t v23 = vmlal_high_s16(v23, *v17, *v20);
        int32x4_t v22 = vmlal_s16(v22, *(int16x4_t *)v17->i8, *(int16x4_t *)v20->i8);
        v20 += 2;
        v17 += 2;
        v19 -= 16LL;
      }

      while (v19);
      int v8 = vaddvq_s32(vaddq_s32(vaddq_s32(v22, v18), vaddq_s32(v23, v21)));
      if (v13 != v11) {
        goto LABEL_15;
      }
LABEL_4:
      int v9 = (v8 + v6 + (*(__int16 *)(*((void *)result + 8) + 2 * v10) << v5)) >> v4;
      if (v9 >= 255) {
        int v9 = 255;
      }
      *(_BYTE *)(a3 + v3++) = v9 & ~(v9 >> 31);
      if (v3 >= *result) {
        return result;
      }
    }

    int v8 = 0;
    LODWORD(v13) = 0;
    BOOL v14 = *(__int16 **)(*((void *)result + 6) + 8 * v10);
    uint64_t v15 = a2;
LABEL_15:
    int v26 = v11 - v13;
    do
    {
      int v28 = v15->i16[0];
      uint64_t v15 = (int16x8_t *)((char *)v15 + 2);
      int v27 = v28;
      int v29 = *v14++;
      v8 += v29 * v27;
      --v26;
    }

    while (v26);
    goto LABEL_4;
  }

  return result;
}

int *sub_10005FD68(int *result, uint64_t a2, _DWORD *a3)
{
  *a3 = result[4] + result[6];
  if (*((void *)result + 6))
  {
    if (result[3] >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        *(_WORD *)(a2 + 2 * v3) = **(_WORD **)(*((void *)result + 6) + 8 * v3);
        ++v3;
      }

      while (v3 < result[3]);
    }
  }

  else if (*result >= 1)
  {
    uint64_t v4 = 0LL;
    do
      *(_WORD *)(a2 + 2 * v4++) = 1;
    while (v4 < *result);
  }

  return result;
}

uint64_t sub_10005FDE0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void *sub_10005FDE8( uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = sub_1000BCAE8(a1, "bld0", a2, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = (uint64_t)v9;
  int v14 = 0;
  *a3 = 0LL;
  uint64_t v11 = (void *)sub_1000C1074(80LL);
  if (v11)
  {
    int v14 = 0;
    if (sub_10005FF24(v10, v11))
    {
      if (!sub_1000BCCEC(v10, &v14) || !v14) {
        goto LABEL_14;
      }
      uint64_t v12 = (void *)sub_1000C1074(80LL);
      if (v12 && sub_10005FF24(v10, v12))
      {
        *a3 = v12;
        goto LABEL_14;
      }
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    sub_1000C0EF8(v11[9]);
    v11[8] = 0LL;
    v11[9] = 0LL;
    sub_1000C133C(v11[7]);
    v11[6] = 0LL;
    v11[7] = 0LL;
    sub_1000C0EF8(v11[5]);
    v11[4] = 0LL;
    v11[5] = 0LL;
    sub_1000C0EF8((uint64_t)v11);
    if (v12)
    {
      sub_1000C0EF8(v12[9]);
      v12[8] = 0LL;
      v12[9] = 0LL;
      sub_1000C133C(v12[7]);
      v12[6] = 0LL;
      v12[7] = 0LL;
      sub_1000C0EF8(v12[5]);
      v12[4] = 0LL;
      v12[5] = 0LL;
      sub_1000C0EF8((uint64_t)v12);
    }

    uint64_t v11 = 0LL;
  }

uint64_t sub_10005FF24(uint64_t a1, void *a2)
{
  uint64_t result = sub_1000BCD38(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1000BCD38(a1, (char *)a2 + 4);
    if ((_DWORD)result)
    {
      int v5 = a2 + 1;
      uint64_t result = sub_1000BCD38(a1, a2 + 1);
      if ((_DWORD)result)
      {
        uint64_t result = sub_1000BCD38(a1, (char *)a2 + 12);
        if ((_DWORD)result)
        {
          uint64_t result = sub_1000BCD38(a1, a2 + 2);
          if ((_DWORD)result)
          {
            uint64_t result = sub_1000BCD38(a1, (char *)a2 + 20);
            if ((_DWORD)result)
            {
              uint64_t result = sub_1000BCD38(a1, a2 + 3);
              if ((_DWORD)result)
              {
                int v10 = 0;
                int v6 = a2 + 5;
                if (sub_1000BCED0(a1, 4, a2 + 5, &v10))
                {
                  if (!*v6) {
                    goto LABEL_12;
                  }
                  if (v10 == *(_DWORD *)a2)
                  {
                    a2[4] = *v6;
LABEL_12:
                    unsigned int v9 = 0;
                    uint64_t v7 = a2 + 9;
                    if (sub_1000BCED0(a1, 2, a2 + 9, (int *)&v9))
                    {
                      if (!*v7)
                      {
                        uint64_t v8 = *v5;
LABEL_20:
                        uint64_t result = sub_1000C13F8(2LL, v8, *((unsigned int *)a2 + 1));
                        a2[7] = result;
                        if (result)
                        {
                          a2[6] = result;
                          return sub_1000BD3B4( a1,  (void **)result,  *((_DWORD *)a2 + 2),  *((_DWORD *)a2 + 1),  2) != 0;
                        }

                        return result;
                      }

                      uint64_t v8 = v9;
                      if (v9 == *v5)
                      {
                        a2[8] = *v7;
                        goto LABEL_20;
                      }
                    }

                    return 0LL;
                  }
                }

                return 0LL;
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000600A4()
{
  uint64_t result = sub_1000C1074(888LL);
  if (result) {
    *(_DWORD *)(result + 16) = 1;
  }
  return result;
}

void *sub_1000600C8(void *result, uint64_t a2, uint64_t a3)
{
  _DWORD *result = a3;
  result[1] = a2;
  return result;
}

uint64_t sub_1000600D0(_DWORD *a1)
{
  LODWORD(v2) = a1[7];
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0LL;
    do
    {
      if (a1[4] || v3 == (_DWORD)v2 - 1 && a1[8] == 1)
      {
        uint64_t v4 = &a1[2 * v3];
        sub_1000C0EF8(v4[77]);
        v4[77] = 0LL;
        uint64_t v5 = v4[93];
        if (v5)
        {
          sub_1000C0EF8(v5);
          v4[93] = 0LL;
        }

        uint64_t v6 = v4[21];
        if (v6)
        {
          sub_1000C0EF8(v6);
          v4[21] = 0LL;
        }
      }

      ++v3;
      uint64_t v2 = (int)a1[7];
    }

    while (v3 < v2);
  }

  return sub_1000C0EF8((uint64_t)a1);
}

uint64_t sub_100060174(uint64_t a1)
{
  if (*(int *)(a1 + 28) >= 1)
  {
    uint64_t v2 = 0LL;
    do
    {
      uint64_t v3 = (void *)(a1 + 8 * v2);
      sub_1000C0EF8(v3[77]);
      v3[77] = 0LL;
      uint64_t v4 = v3[93];
      if (v4)
      {
        sub_1000C0EF8(v4);
        v3[93] = 0LL;
      }

      uint64_t v5 = v3[21];
      if (v5)
      {
        sub_1000C0EF8(v5);
        v3[21] = 0LL;
      }

      ++v2;
    }

    while (v2 < *(int *)(a1 + 28));
  }

  return sub_1000C0EF8(a1);
}

void *sub_1000601F4( uint64_t *a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5, uint64_t a6, uint64_t *a7)
{
  int v13 = sub_1000B32A0(a1) + 3;
  int32x4_t v21 = sub_1000CAFC0(4LL * v13, v14, v15, v16, v17, v18, v19, v20);
  qword_1000FDCF0 = (uint64_t)v21;
  *(void *)algn_1000FDCF8 = &v21[v13];
  *int32x4_t v21 = 0;
  v21[v13] = 0;
  if (a5)
  {
    qword_1000FDD00 = a6;
    qsort(a3, a4, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000603E0);
    qword_1000FDD00 = 0LL;
  }

  else
  {
    qword_1000FDD08 = (uint64_t)a1;
    qword_1000FDD10 = a2;
    qsort(a3, a4, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000604AC);
  }

  return sub_1000CB038((void *)qword_1000FDCF0, 4LL * v13);
}

uint64_t *sub_1000602D4( uint64_t *result, uint64_t a2, unsigned __int16 *a3, int a4, int a5, uint64_t a6, uint64_t *a7)
{
  if (a5)
  {
    uint64_t v12 = result;
    int v13 = sub_1000B32A0(result);
    uint64_t v39 = 2LL * (v13 + 1);
    int32x4_t v21 = (unsigned __int16 *)sub_1000CAFC0(v39, v14, v15, v16, v17, v18, v19, v20);
    *a7 = sub_1000C1F48(v13 * a4, (uint64_t)(v13 * a4 + (v13 * a4 < 0)) >> 1, 2LL, v22, v23, v24, v25, v26);
    if (a4 >= 1)
    {
      uint64_t v27 = a4;
      do
      {
        unsigned int v28 = *a3++;
        int v29 = sub_1000B9044(v12, v28, v21);
        __int16 v36 = (_WORD *)sub_1000C20F4(*a7, 2LL * (v29 + 1), v30, v31, v32, v33, v34, v35);
        sub_1000059CC(a2, v21, v29, v36, 0LL, 0LL, v37, v38);
        v36[v29] = 0x7FFF;
        *(void *)(a6 + 8LL * v28) = v36;
        --v27;
      }

      while (v27);
    }

    return sub_1000CB038(v21, v39);
  }

  return result;
}

uint64_t sub_1000603E0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = *(unsigned __int16 **)(qword_1000FDD00 + 8LL * *a1);
  uint64_t v5 = *(unsigned __int16 **)(qword_1000FDD00 + 8LL * *a2);
  signed int v6 = sub_100099EFC((unint64_t)v4);
  signed int v7 = sub_100099EFC((unint64_t)v5);
  if (v6 >= v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = v6;
  }
  if ((int)v8 < 1)
  {
LABEL_10:
    if (v6 == v7)
    {
      unsigned int v14 = *a1;
      unsigned int v15 = *a2;
      BOOL v12 = v14 >= v15;
      LODWORD(v13) = v14 != v15;
      if (v12) {
        return v13;
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }

    else if (v6 > v7)
    {
      return 1LL;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    while (1)
    {
      unsigned int v10 = *v4++;
      unsigned int v9 = v10;
      unsigned int v11 = *v5++;
      BOOL v12 = v9 >= v11;
      LODWORD(v13) = v9 != v11;
      uint64_t v13 = v12 ? v13 : 0xFFFFFFFFLL;
      if ((_DWORD)v13) {
        break;
      }
      if (!--v8) {
        goto LABEL_10;
      }
    }
  }

  return v13;
}

uint64_t sub_1000604AC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = (unsigned __int16 *)(qword_1000FDCF0 + 2);
  uint64_t v5 = (unsigned __int16 *)(*(void *)algn_1000FDCF8 + 2LL);
  sub_1000B9044((uint64_t *)qword_1000FDD08, *a1, (_DWORD *)(qword_1000FDCF0 + 2));
  sub_1000B9044((uint64_t *)qword_1000FDD08, *a2, v5);
  return sub_1000636E0(v4, v5, *a1, *a2, v6, v7, v8, v9);
}

uint64_t sub_100060520( uint64_t a1, uint64_t *a2, uint64_t a3, int a4, unsigned __int16 *a5, uint64_t a6, int a7, int a8, int a9, uint64_t a10, int a11, int a12, int a13, int *a14, uint64_t a15)
{
  int v20 = a13;
  uint64_t v28 = sub_1000CB0B0();
  v206 = a2;
  if (a2)
  {
    int v29 = sub_1000B32A0(a2);
    if (a12) {
      int v37 = 2;
    }
    else {
      int v37 = 1;
    }
    int v38 = v29 + v37;
    uint64_t v203 = (unsigned __int16 *)sub_1000CAFC0(2LL * (v29 + v37 + 1), v30, v31, v32, v33, v34, v35, v36);
  }

  else
  {
    if (a4 < 1)
    {
      int v39 = 0;
    }

    else
    {
      int v39 = 0;
      uint64_t v40 = a4;
      uint64_t v41 = a5;
      do
      {
        unsigned int v42 = *v41++;
        int v43 = sub_100099EE0(*(void *)(a6 + 8LL * v42));
        if (v43 > v39) {
          int v39 = v43;
        }
        --v40;
      }

      while (v40);
    }

    a7 = 0;
    uint64_t v203 = 0LL;
    if (a12) {
      int v44 = 2;
    }
    else {
      int v44 = 1;
    }
    int v38 = v39 + v44;
    int v20 = a13;
  }

  BOOL v45 = v20 == 0;
  BOOL v46 = v38 + 100 >= a8;
  BOOL v47 = !v45 || !v46;
  if (!v45 || !v46) {
    a9 = v38 + 100;
  }
  if (v47) {
    int v49 = v38 + 100;
  }
  else {
    int v49 = a8;
  }
  int v230 = v49;
  int v231 = a9;
  uint64_t v210 = v28;
  v207 = 0LL;
  if (a4)
  {
    v223 = 0LL;
    uint64_t v50 = 0LL;
    if (!a7)
    {
      size_t v51 = 2LL * (v38 + 2);
      v207 = (unsigned __int16 *)sub_1000CAFC0(v51, v21, v22, v23, v24, v25, v26, v27);
      v223 = sub_1000CAFC0(v51, v52, v53, v54, v55, v56, v57, v58);
      uint64_t v50 = (unsigned __int16 *)sub_1000CAFC0(v51, v59, v60, v61, v62, v63, v64, v65);
    }

    uint64_t v215 = 4LL * v38;
    uint64_t v73 = sub_1000CAFC0(v215, v21, v22, v23, v24, v25, v26, v27);
    int v74 = *(_DWORD *)(a1 + 28);
    if (v20) {
      goto LABEL_27;
    }
  }

  else
  {
    v223 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v215 = 4LL * v38;
    uint64_t v73 = sub_1000CAFC0(v215, v21, v22, v23, v24, v25, v26, v27);
    int v74 = *(_DWORD *)(a1 + 28);
    if (v20) {
LABEL_27:
    }
      v74 -= *(_DWORD *)(a1 + 32) == 1;
  }

  uint64_t v214 = v74;
  uint64_t v75 = a1 + 4LL * v74;
  int v77 = *(_DWORD *)(v75 + 104);
  uint64_t v76 = (_DWORD *)(v75 + 104);
  int v221 = v73;
  if (v38 > v77)
  {
    uint64_t v78 = sub_1000C1074(4LL * (v38 + 5));
    if (!v78) {
      goto LABEL_202;
    }
    uint64_t v79 = v78;
    uint64_t v80 = a1 + 8 * v214;
    sub_1000C0EF8(*(void *)(v80 + 168));
    *(void *)(v80 + 168) = v79;
    _DWORD *v76 = v38 + 5;
  }

  v236[0] = 0;
  v235 = 0LL;
  v220 = sub_1000CAFC0(v215, v66, v67, v68, v69, v70, v71, v72);
  if (a11) {
    int v81 = a11;
  }
  else {
    int v81 = 65533;
  }
  int v228 = v81;
  int v211 = a4;
  uint64_t v208 = a1;
  uint64_t v204 = a6;
  int v202 = v38;
  if (!a4)
  {
    int v233 = 0;
    _DWORD *v73 = 1;
    goto LABEL_119;
  }

  if (!a7)
  {
    uint64_t v114 = *a5;
    if (a15)
    {
      sub_10009B1B8(a15, v114, 0LL, &v235, v236);
      LODWORD(v83) = v236[0];
      memcpy(v50, v235, 2LL * v236[0]);
      if (a12)
      {
        v50[(int)v83] = 0;
        LODWORD(v83) = v83 + 1;
        v236[0] = v83;
      }
    }

    else
    {
      if (v206)
      {
        int16x8_t v122 = v203;
        int v123 = sub_1000B9044(v206, v114, v203);
        LODWORD(v83) = v123;
        v236[0] = v123;
        if (a12)
        {
          v203[v123] = 0;
          uint64_t v83 = v123 + 1LL;
          v236[0] = v123 + 1;
          v203[v83] = -1;
        }
      }

      else
      {
        int16x8_t v122 = *(unsigned __int16 **)(a6 + 8 * v114);
        LODWORD(v83) = sub_100099EE0((unint64_t)v122);
        v236[0] = v83;
      }

      sub_1000059CC(a3, v122, v83, v50, 0LL, 0LL, v124, v125);
    }

    uint64_t v84 = v207;
    v50[(int)v83] = 0x7FFF;
    uint64_t v82 = v50;
    _DWORD *v73 = 1;
    uint64_t v226 = (a4 - 1);
    if (a4 >= 1) {
      goto LABEL_37;
    }
    goto LABEL_118;
  }

  uint64_t v82 = *(unsigned __int16 **)(a10 + 8LL * *a5);
  LODWORD(v83) = sub_100099EFC((unint64_t)v82);
  uint64_t v84 = 0LL;
  _DWORD *v73 = 1;
  uint64_t v226 = (a4 - 1);
  if (a4 < 1)
  {
LABEL_118:
    int v233 = 0;
LABEL_119:
    int v89 = 2;
LABEL_120:
    sub_1000CB038(v220, v215);
    int v115 = v89;
    int v121 = v211;
    uint64_t v117 = v208;
    unsigned __int16 v118 = a5;
    uint64_t v119 = v214;
    int v120 = a11;
    goto LABEL_121;
  }

LABEL_131:
    uint64_t v132 = sub_1000C1074(v120);
    *(void *)(v130 + 744) = v132;
    if (!v132)
    {
      sub_1000C0EF8(*(void *)(v130 + 616));
      goto LABEL_202;
    }

    *(_DWORD *)(v117 + 4 * v119 + 296) = v120;
    ++*(_DWORD *)(v117 + 28);
    if (a13) {
      *(_DWORD *)(v117 + 32) = 1;
    }
  }

  else
  {
    uint64_t v128 = v117 + 8 * v119;
    sub_1000C0EF8(*(void *)(v128 + 616));
    sub_1000C0EF8(*(void *)(v128 + 744));
    int v120 = v115;
    uint64_t v127 = v204;
    if (!a13) {
      goto LABEL_130;
    }
    int v126 = *(_DWORD *)(v117 + 32);
    int v120 = v115;
    if (v126 == 1)
    {
      *(void *)(v117 + 28) = (*(_DWORD *)(v117 + 28) - 1);
      int v120 = v115;
      uint64_t v129 = sub_1000C1074(4LL * v115);
      uint64_t v130 = v117 + 8 * v119;
      *(void *)(v130 + 616) = v129;
      if (!v129) {
        goto LABEL_202;
      }
      goto LABEL_131;
    }

      uint64_t v97 = *(int *)(a1 + 172);
      if ((_DWORD)v97)
      {
        uint64_t v98 = 0;
        while (1)
        {
          while (1)
          {
            uint64_t v99 = v97 - 1;
            if (v97 - 1 < 0) {
              uint64_t v99 = v97;
            }
            uint64_t v100 = v99 >> 1;
            int v101 = *(unsigned __int16 *)(*(void *)(a1 + 176) + 2LL * (v98 + (int)v100));
            if (v101 <= v139) {
              break;
            }
            uint64_t v97 = (int)v100;
            if (!(_DWORD)v100) {
              goto LABEL_150;
            }
          }

          int v102 = v98 + (int)v100;
          if (v101 == v139) {
            break;
          }
          v97 -= (int)v100 + 1;
          uint64_t v98 = v102 + 1;
          if (!v97) {
            goto LABEL_150;
          }
        }

LABEL_129:
    if (!v126)
    {
LABEL_130:
      uint64_t v131 = sub_1000C1074(4LL * v120);
      uint64_t v130 = v117 + 8 * v119;
      *(void *)(v130 + 616) = v131;
      if (!v131) {
        goto LABEL_202;
      }
      goto LABEL_131;
    }
  }

  uint64_t v133 = *(_WORD **)(v117 + 8 * v119 + 616);
  *uint64_t v133 = sub_100004690(a3);
  v133[1] = 1;
  uint64_t v134 = v115 - 1LL;
  uint64_t v135 = &v133[2 * v134];
  *uint64_t v135 = 0;
  v135[1] = v134;
  v236[0] = 0;
  v235 = 0LL;
  int v143 = sub_1000CAFC0(4LL * (v202 + 5), v136, v137, v138, v139, v140, v141, v142);
  unint64_t v144 = v143;
  int32x4_t v145 = v221;
  if (v202 >= 1)
  {
    int v146 = 0;
    uint64_t v147 = v143;
    uint64_t v148 = v202;
    do
    {
      *v147++ = v146;
      int v149 = *v145++;
      v146 += v149;
      --v148;
    }

    while (v148);
  }

  int v219 = v115;
  int v212 = v121;
  if (!v121)
  {
    int v154 = 0;
    int32x4_t v158 = v143;
    *int v143 = 1;
    goto LABEL_213;
  }

  if (!a7)
  {
    uint64_t v191 = *v118;
    if (a15)
    {
      sub_10009B1B8(a15, v191, 0LL, &v235, v236);
      LODWORD(v150) = v236[0];
      memcpy(v50, v235, 2LL * v236[0]);
      if (a12)
      {
        v50[(int)v150] = 0;
        LODWORD(v150) = v150 + 1;
        v236[0] = v150;
      }
    }

    else
    {
      if (v206)
      {
        uint64_t v192 = v203;
        int v193 = sub_1000B9044(v206, v191, v203);
        LODWORD(v150) = v193;
        v236[0] = v193;
        if (a12)
        {
          v203[v193] = 0;
          uint64_t v150 = v193 + 1LL;
          v236[0] = v193 + 1;
          v203[v150] = -1;
        }
      }

      else
      {
        uint64_t v192 = *(unsigned __int16 **)(v127 + 8 * v191);
        LODWORD(v150) = sub_100099EE0((unint64_t)v192);
        v236[0] = v150;
      }

      sub_1000059CC(a3, v192, v150, v50, 0LL, 0LL, v194, v195);
    }

    int8x16_t v151 = v207;
    v50[(int)v150] = 0x7FFF;
    *unint64_t v144 = 1;
    uint64_t v229 = (v121 - 1);
    if (v121 < 1) {
      goto LABEL_212;
    }
LABEL_140:
    unsigned int v152 = v121;
    uint64_t v153 = 0LL;
    int v154 = 0;
    int v155 = 0;
    int v156 = 0;
    if (a12) {
      int v157 = 2;
    }
    else {
      int v157 = 1;
    }
    int v227 = v157;
    int32x4_t v158 = v144;
    v225 = v144 + 1;
    uint64_t v159 = v152;
    while (1)
    {
      if (a7)
      {
        if (v153 == v229)
        {
          unint64_t v160 = 0LL;
          int v161 = 0;
          v223 = v151;
          LODWORD(v162) = 0;
        }

        else
        {
          unint64_t v160 = *(void *)(a10 + 8LL * a5[v153 + 1]);
          uint64_t v164 = v151;
          int v161 = sub_100099EFC(v160);
          v223 = v164;
          LODWORD(v162) = 0;
          else {
            int v165 = v150;
          }
          if (v160) {
            goto LABEL_169;
          }
        }
      }

      else
      {
        int v163 = v151;
        if (v153)
        {
          memcpy(v223, v151, 2 * v156 + 2);
          int8x16_t v151 = v163;
        }

        memcpy(v151, v50, 2 * (int)v150 + 2);
        if (v153 == v229)
        {
          int v161 = 0;
        }

        else
        {
          uint64_t v166 = a5[v153 + 1];
          if (a15)
          {
            sub_10009B1B8(a15, v166, 0LL, &v235, v236);
            memcpy(v50, v235, 2LL * v236[0]);
            int v161 = v236[0];
            if (a12)
            {
              v50[v236[0]] = 0;
              int v161 = ++v236[0];
            }
          }

          else
          {
            if (v206)
            {
              unsigned int v167 = v203;
              int v168 = sub_1000B9044(v206, v166, v203);
              LODWORD(v171) = v168;
              v236[0] = v168;
              if (a12)
              {
                v203[v168] = 0;
                uint64_t v171 = v168 + 1LL;
                v236[0] = v168 + 1;
                v203[v171] = -1;
              }
            }

            else
            {
              unsigned int v167 = *(unsigned __int16 **)(v204 + 8 * v166);
              LODWORD(v171) = sub_100099EE0((unint64_t)v167);
              v236[0] = v171;
            }

            sub_1000059CC(a3, v167, v171, v50, 0LL, 0LL, v169, v170);
            int v161 = v236[0];
          }
        }

        v50[v161] = 0x7FFF;
        unint64_t v160 = (unint64_t)v50;
        uint64_t v50 = v163;
        LODWORD(v162) = 0;
        else {
          int v165 = v150;
        }
        if (v160)
        {
LABEL_169:
          if (v165 >= 2)
          {
            uint64_t v172 = 0LL;
            uint64_t v162 = (v165 - 1);
            while (v50[v172] == *(unsigned __int16 *)(v160 + 2 * v172))
            {
              if (v162 == ++v172) {
                goto LABEL_175;
              }
            }

            LODWORD(v162) = v172;
          }
        }
      }

  if ((int)v413 <= 0)
  {
    v284 = v189;
    v292 = sub_1000CAF58(v397, v179, v180, v181, v182, v183, v184, v185);
    v296 = v409;
    v295 = v410;
    goto LABEL_190;
  }

  v251 = 0LL;
  do
  {
    v255 = v430[v251];
    if (v255 == -1 || !v425[v251]) {
      goto LABEL_138;
    }
    v256 = v255 >> 30;
    if (v255 >> 30 == 1)
    {
      v257 = v432;
      v258 = v436;
      if ((_WORD)v255 != 0xFFFF && sub_10001EDF8(v52[1], (unsigned __int16)v430[v251], 0LL) != 0xFFFF)
      {
        v259 = 1;
        goto LABEL_150;
      }

      goto LABEL_148;
    }

    v257 = v432;
    v258 = v436;
    if (v256 != 2)
    {
      if (v256 == 3)
      {
        v259 = sub_100082D28(*v52);
        goto LABEL_150;
      }

LABEL_175:
      else {
        int v173 = v155;
      }
      else {
        int v174 = v150;
      }
      if (v173 + 1 >= v230) {
        int v175 = v173 + 1;
      }
      else {
        int v175 = v174;
      }
      if (v155 >= v231) {
        int v176 = v231;
      }
      else {
        int v176 = v155;
      }
      if (v175 <= v231) {
        int v177 = v155;
      }
      else {
        int v177 = v176;
      }
      if (v175 > v231) {
        int v175 = v231 + 1;
      }
      if (v177 < v175)
      {
        uint64_t v178 = v175 - 1;
        uint64_t v179 = v175;
        int v180 = &v225[v177];
        uint64_t v181 = v178 - v177;
        uint64_t v182 = v179 - v177;
        uint64_t v183 = &v50[v177];
        do
        {
          uint64_t v185 = *v180;
          int v186 = &v133[2 * v185];
          __int16 v188 = *v183++;
          __int16 v187 = v188;
          _WORD *v186 = v188;
          if (v181)
          {
            int v184 = v180[1];
          }

          else
          {
            LOWORD(v184) = a5[v153];
            _WORD *v186 = v187 | 0x8000;
          }

          v133[2 * v185 + 1] = v184;
          ++*v180++;
          --v181;
          --v182;
        }

        while (v182);
      }

      v154 += v227 + v150;
      ++v153;
      int v155 = v162;
      int v156 = v150;
      int8x16_t v151 = v50;
      LODWORD(v150) = v161;
      uint64_t v50 = (unsigned __int16 *)v160;
      if (v153 == v159) {
        goto LABEL_213;
      }
    }
  }

  uint64_t v50 = *(unsigned __int16 **)(a10 + 8LL * *v118);
  LODWORD(v150) = sub_100099EFC((unint64_t)v50);
  int8x16_t v151 = 0LL;
  *unint64_t v144 = 1;
  uint64_t v229 = (v121 - 1);
  if (v121 >= 1) {
    goto LABEL_140;
  }
LABEL_212:
  int32x4_t v158 = v144;
  int v154 = 0;
LABEL_213:
  sub_1000CB038(v158, 4LL * (v202 + 5));
  unsigned int v196 = (_DWORD *)(v208 + 4 * v214);
  v196[106] = *v221;
  v196[90] = v219;
  v196[122] = v212;
  v196[138] = v154;
  if (v233) {
    *(_DWORD *)(v208 + 20) = 1;
  }
  if (v202 < 1)
  {
    int v198 = 0;
  }

  else
  {
    uint64_t v197 = 0LL;
    int v198 = 0;
    int v199 = 0;
    uint64_t v200 = *(void *)(v208 + 8 * v214 + 168);
    do
    {
      *(_DWORD *)(v200 + 4 * v197) = v199;
      int v201 = v221[v197];
      v199 += v201;
      if (v201 > 0) {
        int v198 = v197;
      }
      ++v197;
    }

    while (v202 != v197);
  }

  *(_DWORD *)(v208 + 4 * v214 + 40) = v198;
  sub_1000CB094(v210);
  *a14 = v212;
  return 1LL;
}

uint64_t sub_10006135C( uint64_t a1, unsigned __int16 *__base, uint64_t __nel, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  int v29 = a8;
  int v10 = a7;
  int v13 = __nel;
  uint64_t v31 = 0LL;
  if ((_DWORD)a7)
  {
    BOOL v16 = 0;
    *(void *)a1 = a5;
    *(void *)(a1 + 8) = a4;
    if ((_DWORD)__nel)
    {
      uint64_t v17 = 0LL;
      int v18 = 0;
      int v19 = a9;
      int v32 = 0;
      if (!a4) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }

    return sub_100060520(a1, a4, a5, 0, __base, a6, v16, 0x7FFFFFFF, 0x7FFFFFFF, 0LL, 0, 0, 0, &v32, a10);
  }

  if (!qword_1000FDCC0)
  {
    *(void *)a1 = a5;
    *(void *)(a1 + 8) = a4;
    if (!(_DWORD)__nel)
    {
      BOOL v16 = 1;
      return sub_100060520(a1, a4, a5, 0, __base, a6, v16, 0x7FFFFFFF, 0x7FFFFFFF, 0LL, 0, 0, 0, &v32, a10);
    }

    goto LABEL_15;
  }

  int v20 = *(_DWORD *)(qword_1000FDCC0 + 3664);
  BOOL v16 = v20 == 0;
  *(void *)a1 = a5;
  *(void *)(a1 + 8) = a4;
  if (!(_DWORD)__nel) {
    return sub_100060520(a1, a4, a5, 0, __base, a6, v16, 0x7FFFFFFF, 0x7FFFFFFF, 0LL, 0, 0, 0, &v32, a10);
  }
  if (!v20)
  {
LABEL_15:
    int v18 = __nel;
    if (a4) {
      int v18 = sub_1000B3298((uint64_t)a4) + 1;
    }
    uint64_t v17 = sub_1000CAFC0(8LL * v18, (uint64_t)__base, __nel, (uint64_t)a4, a5, a6, a7, a8);
    BOOL v16 = 1;
    int v19 = a9;
    int v32 = 0;
    if (!a4) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }

  BOOL v16 = 0;
  int v18 = 0;
  uint64_t v17 = 0LL;
  int v19 = a9;
  int v32 = 0;
  if (!a4)
  {
LABEL_9:
    qword_1000FDD10 = a5;
    qword_1000FDD18 = a6;
    if (v13 > 0)
    {
      int v28 = v18;
      qsort(__base, v13, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100061660);
      int v21 = 0;
      *(_DWORD *)(a1 + 20) = 0;
      while (sub_100060520( a1,  0LL,  a5,  v13 - v21,  &__base[v21],  a6,  v16,  0x7FFFFFFF,  0x7FFFFFFF,  (uint64_t)v17,  v19,  v10,  v29,  &v32,  a10))
      {
        v21 += v32;
        if (v21 >= v13) {
          goto LABEL_25;
        }
      }

      goto LABEL_26;
    }

    *(_DWORD *)(a1 + 20) = 0;
    uint64_t v25 = 1LL;
    uint64_t v26 = qword_1000FDCC0;
    if (!qword_1000FDCC0)
    {
LABEL_33:
      sub_1000C1FE8(v31);
      sub_1000CB038(v17, 8LL * v18);
      return v25;
    }

    goto LABEL_32;
  }

uint64_t sub_100061660( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *a1;
  unsigned int v11 = *(unsigned __int16 **)(qword_1000FDD18 + 8 * v10);
  uint64_t v12 = *a2;
  int v13 = *(unsigned __int16 **)(qword_1000FDD18 + 8 * v12);
  uint64_t v14 = *v11;
  unsigned int v17 = v11[1];
  BOOL v16 = v11 + 1;
  unsigned int v15 = v17;
  if (__PAIR64__(v17, v14) == __PAIR64__(v13[1], *v13)) {
    return sub_1000636E0(v16, v13 + 1, v10, v12, a5, a6, a7, a8);
  }
  if (v15 == 0xFFFF) {
    uint64_t v18 = 0LL;
  }
  else {
    uint64_t v18 = v15;
  }
  unsigned int v23 = sub_1000057B0(qword_1000FDD10, 0LL, v14, v18, a5, a6, a7, a8);
  if (v13[1] == 0xFFFF) {
    uint64_t v24 = 0LL;
  }
  else {
    uint64_t v24 = v13[1];
  }
  unsigned int v25 = sub_1000057B0(qword_1000FDD10, 0LL, *v13, v24, v19, v20, v21, v22);
  if (v23 < v25) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = v23 != v25;
  }
  if (!(_DWORD)result)
  {
    LODWORD(v10) = *a1;
    LODWORD(v12) = *a2;
    return sub_1000636E0(v16, v13 + 1, v10, v12, a5, a6, a7, a8);
  }

  return result;
}

uint64_t sub_100061748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000CB0B0();
  uint64_t v16 = sub_1000C1074(888LL);
  if (v16)
  {
    unint64_t v24 = sub_1000CAF58(8LL * (int)a2, v9, v10, v11, v12, v13, v14, v15);
    if ((int)a2 < 1)
    {
      int v37 = 0LL;
      goto LABEL_32;
    }

    uint64_t v46 = v8;
    uint64_t v25 = 0LL;
    uint64_t v47 = a2;
    uint64_t v26 = a2;
    do
    {
      if (*(int *)(a3 + 4) < 1)
      {
        int v29 = 0;
      }

      else
      {
        uint64_t v28 = 0LL;
        int v29 = 0;
        do
        {
          int v30 = sub_10009B978(a4, *(unsigned __int16 *)(a3 + 2 * v28 + 16)) + v29;
          uint64_t v31 = *(int *)(a3 + 4);
          if (v28 >= v31 - 1) {
            int v32 = v30;
          }
          else {
            int v32 = v30 + 1;
          }
          if (*(_BYTE *)(a3 + v28 + 88)) {
            int v29 = v32;
          }
          else {
            int v29 = v30;
          }
          ++v28;
        }

        while (v28 < v31);
      }

      unint64_t v33 = sub_1000CAF58(2LL * (v29 + 1), v17, v18, v19, v20, v21, v22, v23);
      *(void *)(v24 + 8 * v25) = v33;
      if (*(int *)(a3 + 4) < 1)
      {
        int v27 = 0;
      }

      else
      {
        uint64_t v34 = 0LL;
        int v27 = 0;
        int v49 = 0;
        __src = 0LL;
        do
        {
          sub_10009B1B8(a4, *(unsigned __int16 *)(a3 + 2 * v34 + 16), &__src, 0LL, &v49);
          j__memmove((void *)(v33 + 2LL * v27), __src, 2LL * v49);
          v27 += v49;
          int v35 = *(_DWORD *)(a3 + 4);
          if (*(_BYTE *)(a3 + v34 + 88) && v34 < v35 - 1LL)
          {
            *(_WORD *)(v33 + 2LL * v27++) = 0;
            int v35 = *(_DWORD *)(a3 + 4);
          }

          ++v34;
        }

        while (v34 < v35);
      }

      *(_WORD *)(v33 + 2LL * v27) = -1;
      a3 += 128LL;
      ++v25;
    }

    while (v25 != v26);
    uint64_t v36 = sub_1000C1074(2 * v26);
    uint64_t v8 = v46;
    if (!v36) {
      goto LABEL_33;
    }
    int v37 = (unsigned __int16 *)v36;
    if (v47 >= 0x10)
    {
      uint64_t v39 = 0LL;
      uint64_t v38 = v26 & 0xFFFFFFF0;
      int16x8_t v40 = (int16x8_t)xmmword_1000F03C0;
      v41.i64[0] = 0x8000800080008LL;
      v41.i64[1] = 0x8000800080008LL;
      v42.i64[0] = 0x10001000100010LL;
      v42.i64[1] = 0x10001000100010LL;
      do
      {
        int v43 = (int16x8_t *)(v36 + v39);
        *int v43 = v40;
        v43[1] = vaddq_s16(v40, v41);
        int16x8_t v40 = vaddq_s16(v40, v42);
        v39 += 32LL;
      }

      while (((2 * v26) & 0x1FFFFFFE0LL) != v39);
      if (v38 == v26) {
        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v38 = 0LL;
    }

    do
    {
      *(_WORD *)(v36 + 2 * v38) = v38;
      ++v38;
    }

    while (v26 != v38);
LABEL_31:
    a2 = v47;
LABEL_32:
    int v44 = sub_10006135C(v16, v37, a2, 0LL, a1, v24, 0LL, 0LL, 0, 0LL);
    sub_1000C0EF8((uint64_t)v37);
    if (v44)
    {
LABEL_34:
      sub_1000CB094(v8);
      return v16;
    }

uint64_t sub_1000619DC(uint64_t a1, int a2)
{
  return (a2 - *(_DWORD *)(a1 + 4LL * *(int *)(a1 + 28) + 356));
}

BOOL sub_1000619F0(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t v8 = *(uint64_t **)(a1 + 8);
  sub_1000B32A0(v8);
  if (a3) {
    int v9 = a3;
  }
  else {
    int v9 = 65533;
  }
  if (!*(_DWORD *)(a1 + 32))
  {
    uint64_t v43 = 2LL * (int)(sub_1000B32A0(v8) + 1);
    size_t v51 = (_DWORD *)sub_1000CAF58(v43, v44, v45, v46, v47, v48, v49, v50);
    int v52 = sub_1000B9044(v8, a2, v51);
    *a4 = v52;
    sub_1000CB038(v51, v43);
    return v52 <= v9;
  }

  uint64_t v11 = *(void *)a1;
  uint64_t v10 = *(uint64_t **)(a1 + 8);
  uint64_t v12 = 2LL * (int)(sub_1000B32A0(v10) + 1);
  uint64_t v20 = (unsigned __int16 *)sub_1000CAF58(v12, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = *(int *)(a1 + 28) - 1LL;
  uint64_t v22 = *(__int16 **)(a1 + 8 * v21 + 616);
  int v30 = sub_1000B9044(v10, a2, v20);
  if (!*(_DWORD *)(a1 + 4 * v21 + 488))
  {
    sub_1000CB038(v20, v12);
    goto LABEL_24;
  }

  uint64_t v31 = (_WORD *)sub_1000CAF58(v12, v23, v24, v25, v26, v27, v28, v29);
  sub_1000059CC(v11, v20, v30, v31, 0LL, 0LL, v32, v33);
  LODWORD(v11) = 0;
  if (v30 < 2) {
    goto LABEL_23;
  }
  uint64_t v34 = 0LL;
  int v35 = 0LL;
  uint64_t v11 = (v30 - 1);
  uint64_t v36 = v22;
  while (1)
  {
    int v37 = v36 + 2;
    do
    {
      int v38 = *v37;
      v37 += 2;
    }

    while (v38 < 0);
    uint64_t v39 = (unsigned __int16)v36[1];
    uint64_t v40 = (unsigned __int16)*(v37 - 1) - v39;
    if (!(_DWORD)v40) {
      goto LABEL_22;
    }
LABEL_18:
    ++v34;
    uint64_t v36 = v35;
    if (v34 == v11) {
      goto LABEL_23;
    }
  }

  uint64_t v41 = 0LL;
  int v35 = &v22[2 * v39];
  while (1)
  {
    int v42 = *v35;
    ++v41;
    v35 += 2;
    if (v40 == v41) {
      goto LABEL_22;
    }
  }

  if ((_DWORD)v41 != (_DWORD)v40) {
    goto LABEL_18;
  }
LABEL_22:
  LODWORD(v11) = v34;
LABEL_23:
  sub_1000CB038(v31, v12);
  sub_1000CB038(v20, v12);
  v30 -= v11;
LABEL_24:
  *a4 = v30;
  return v30 <= v9 - *(_DWORD *)(a1 + 4LL * *(int *)(a1 + 28) + 356);
}

uint64_t sub_100061BFC(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v89 = *(void *)a1;
  int32x4_t v90 = *(uint64_t **)(a1 + 8);
  uint64_t v8 = *(int *)(a1 + 28) - 1LL;
  int v9 = (int *)(a1 + 4 * v8 + 488);
  int v10 = *v9 + a3;
  int v11 = sub_1000B32A0(v90);
  int v12 = v11;
  if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 3696))
  {
    int v81 = a4;
    uint64_t v14 = 0LL;
    uint64_t v15 = sub_1000C1074(2LL * v10);
    if (v15) {
      goto LABEL_7;
    }
    return 0LL;
  }

  int v13 = *(_DWORD *)(a1 + 4 * v8 + 552) + (v11 + 2) * a3 + *v9;
  uint64_t v14 = sub_10009AA7C(0, *(_DWORD *)(qword_1000FDCC0 + 4508), *(_DWORD *)(qword_1000FDCC0 + 4512), 0, 1, v90, v89);
  if (!sub_10009AE4C(v14, v10, v13))
  {
    sub_10009ACA8(v14);
    return 0LL;
  }

  int v81 = a4;
  uint64_t v15 = sub_1000C1074(2LL * v10);
  if (!v15) {
    return 0LL;
  }
LABEL_7:
  uint64_t v23 = (unsigned __int16 *)v15;
  uint64_t v24 = *(void *)(a1 + 8 * v8 + 616);
  uint64_t v25 = *(unsigned int *)(a1 + 4 * v8 + 424);
  v93[0] = 0;
  if (v14)
  {
    uint64_t v26 = (void *)sub_1000CAF58(2LL * (v12 + 1), v16, v17, v18, v19, v20, v21, v22);
    uint64_t v92 = 0LL;
    int v91 = 0LL;
  }

  else
  {
    uint64_t v26 = 0LL;
    uint64_t v92 = 0LL;
    int v91 = 0LL;
  }

  uint64_t v27 = 0LL;
  uint64_t v28 = 4 * v25;
  do
  {
    sub_100063830(v24, (__int16 *)(v24 + v27), (uint64_t)v23, v93, v14, (uint64_t)v26, 0LL);
    v27 += 4LL;
  }

  while (v28 != v27);
LABEL_13:
  uint64_t v29 = 2LL * (v12 + 1);
  sub_1000CB038(v26, v29);
  int v88 = (unsigned __int16 *)sub_1000C1074(v29);
  if (!v88)
  {
    uint64_t v31 = (uint64_t)v23;
LABEL_81:
    sub_1000C0EF8(v31);
    return 0LL;
  }

  if (v14)
  {
    uint64_t v30 = 0LL;
  }

  else
  {
    uint64_t v30 = sub_1000C1074(v29);
    if (!v30)
    {
      sub_1000C0EF8((uint64_t)v23);
      uint64_t v31 = (uint64_t)v88;
      goto LABEL_81;
    }
  }

  uint64_t v80 = a1;
  uint64_t v32 = sub_1000C1074(v29);
  if (!v32)
  {
    sub_1000C0EF8((uint64_t)v23);
    sub_1000C0EF8((uint64_t)v88);
    uint64_t v31 = v30;
    goto LABEL_81;
  }

  uint64_t v33 = (unsigned __int16 *)v32;
  uint64_t v34 = sub_1000C1074(v29);
  if (!v34)
  {
    sub_1000C0EF8((uint64_t)v23);
    sub_1000C0EF8((uint64_t)v88);
    sub_1000C0EF8(v30);
    uint64_t v31 = (uint64_t)v33;
    goto LABEL_81;
  }

  int v35 = (unsigned __int16 *)v34;
  int v36 = *v9;
  uint64_t v79 = v30;
  if (a3 < 1) {
    goto LABEL_74;
  }
  uint64_t v37 = 0LL;
  int v38 = -1;
  uint64_t v83 = a3;
  do
  {
    while (1)
    {
      uint64_t v39 = *(unsigned __int16 *)(a2 + 2 * v37);
      int v86 = v36;
      int v87 = *(unsigned __int16 *)(a2 + 2 * v37);
      uint64_t v85 = v37;
      if (!v14)
      {
        HIDWORD(v92) = sub_1000B9044(v90, v39, v88);
        sub_1000059CC(v89, v88, SHIDWORD(v92), v33, 0LL, 0LL, v55, v56);
        v33[SHIDWORD(v92)] = 0x7FFF;
        int v40 = 0;
        int v57 = v36 - 1;
        if (v36 < 1) {
          goto LABEL_49;
        }
        while (1)
        {
          int v58 = v57 + v40;
          if (v57 + v40 < 0 != __OFADD__(v57, v40)) {
            ++v58;
          }
          int v59 = v58 >> 1;
          unsigned int v60 = v23[v58 >> 1];
          LODWORD(v92) = sub_1000B9044(v90, v60, v88);
          sub_1000059CC(v89, v88, v92, v35, 0LL, 0LL, v61, v62);
          v35[(int)v92] = 0x7FFF;
          signed int v63 = sub_100099EFC((unint64_t)v33);
          signed int v64 = sub_100099EFC((unint64_t)v35);
          uint64_t v65 = v63 >= v64 ? v64 : v63;
LABEL_69:
          int v38 = v63 != v64;
          if (v63 >= v64) {
            goto LABEL_70;
          }
          int v38 = -1;
LABEL_53:
          if (v38 < 0) {
            int v57 = v59 - 1;
          }
          else {
            int v40 = v59 + 1;
          }
          if (v40 > v57) {
            goto LABEL_49;
          }
        }

        uint64_t v66 = v33;
        uint64_t v67 = v35;
        while (1)
        {
          unsigned int v69 = *v66++;
          unsigned int v68 = v69;
          unsigned int v70 = *v67++;
          BOOL v53 = v68 >= v70;
          BOOL v71 = v68 != v70;
          int v38 = v53 ? v71 : -1;
          if (v38) {
            break;
          }
          if (!--v65) {
            goto LABEL_69;
          }
        }

uint64_t sub_100062210(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5 = *(int *)(a1 + 28) - 1LL;
  uint64_t v6 = a1 + 4 * v5;
  uint64_t v7 = *(int *)(v6 + 488);
  if (!(_DWORD)v7) {
    return 1LL;
  }
  int v13 = *(uint64_t **)(a1 + 8);
  uint64_t v58 = *(void *)a1;
  int v59 = (int *)(v6 + 488);
  int v14 = sub_1000B32A0(v13);
  if (v14 <= *(_DWORD *)(v6 + 40)) {
    int v15 = *(_DWORD *)(v6 + 40);
  }
  else {
    int v15 = v14;
  }
  int v56 = a5;
  int v57 = v13;
  if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 3696))
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = sub_1000C1074(2 * v7);
    if (v18) {
      goto LABEL_11;
    }
    return 0LL;
  }

  int v16 = *v59 + *(_DWORD *)(a1 + 4 * v5 + 552);
  uint64_t v17 = sub_10009AA7C(0, *(_DWORD *)(qword_1000FDCC0 + 4508), *(_DWORD *)(qword_1000FDCC0 + 4512), 0, 1, v13, v58);
  if (!sub_10009AE4C(v17, v7, v16))
  {
    sub_10009ACA8(v17);
    return 0LL;
  }

  uint64_t v18 = sub_1000C1074(2 * v7);
  if (!v18) {
    return 0LL;
  }
LABEL_11:
  uint64_t v26 = (unsigned __int16 *)v18;
  uint64_t v27 = *(void *)(a1 + 8 * v5 + 616);
  uint64_t v28 = *(unsigned int *)(a1 + 4 * v5 + 424);
  int v61 = 0;
  int v55 = a4;
  if (v17)
  {
    uint64_t v29 = (void *)sub_1000CAF58(2LL * (v15 + 1), v19, v20, v21, v22, v23, v24, v25);
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  uint64_t v31 = 0LL;
  uint64_t v32 = 4 * v28;
  do
  {
    sub_100063830(v27, (__int16 *)(v27 + v31), (uint64_t)v26, &v61, v17, (uint64_t)v29, 0LL);
    v31 += 4LL;
  }

  while (v32 != v31);
LABEL_18:
  uint64_t v33 = 2LL * (v15 + 1);
  sub_1000CB038(v29, v33);
  uint64_t v34 = sub_1000C1074(v33);
  if (!v34)
  {
    uint64_t v46 = (uint64_t)v26;
LABEL_40:
    sub_1000C0EF8(v46);
    return 0LL;
  }

  uint64_t v35 = v34;
  uint64_t v36 = sub_1000C1074(v33);
  if (!v36)
  {
    sub_1000C0EF8((uint64_t)v26);
    uint64_t v46 = v35;
    goto LABEL_40;
  }

  uint64_t v37 = v36;
  uint64_t v38 = sub_1000C1074(v33);
  if (!v38)
  {
    sub_1000C0EF8((uint64_t)v26);
    sub_1000C0EF8(v35);
    uint64_t v46 = v37;
    goto LABEL_40;
  }

  uint64_t v39 = v38;
  uint64_t v40 = sub_1000C1074(v33);
  if (!v40)
  {
    sub_1000C0EF8((uint64_t)v26);
    sub_1000C0EF8(v35);
    sub_1000C0EF8(v37);
    uint64_t v46 = v39;
    goto LABEL_40;
  }

  int v41 = *v59;
  uint64_t v53 = v40;
  uint64_t v54 = v39;
  if (a3 >= 1)
  {
    uint64_t v42 = 0LL;
    do
    {
      if (v41 >= 1)
      {
        uint64_t v43 = v41;
        int v44 = 2 * v41 - 2;
        signed int v45 = v26;
        while (*(unsigned __int16 *)(a2 + 2 * v42) != *v45)
        {
          v44 -= 2;
          ++v45;
          if (!--v43) {
            goto LABEL_25;
          }
        }

        j__memmove(v45, v45 + 1, v44);
        --v41;
      }

uint64_t sub_1000625B8(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 20), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE644(*(_DWORD *)(a1 + 24), 4, v2);
  unsigned int v4 = sub_1000BE644(*(_DWORD *)(a1 + 28), 4, v3);
  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 32), 4, v4);
  uint64_t v6 = sub_1000BE644(*(unsigned __int8 *)(a1 + 36), 1, v5);
  uint64_t v7 = sub_1000BE770((unint64_t *)(a1 + 40), 4, *(_DWORD *)(a1 + 28), v6);
  uint64_t v8 = sub_1000BE770((unint64_t *)(a1 + 104), 4, *(_DWORD *)(a1 + 28), v7);
  LODWORD(v9) = *(_DWORD *)(a1 + 28);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0LL;
    do
    {
      uint64_t v8 = sub_1000BE770(*(unint64_t **)(a1 + 104 + 8 * v10 + 64), 4, *(_DWORD *)(a1 + 104 + 4 * v10), v8);
      ++v10;
      uint64_t v9 = *(int *)(a1 + 28);
    }

    while (v10 < v9);
  }

  uint64_t v11 = sub_1000BE770((unint64_t *)(a1 + 296), 4, v9, v8);
  uint64_t v12 = sub_1000BE770((unint64_t *)(a1 + 360), 4, *(_DWORD *)(a1 + 28), v11);
  uint64_t v13 = sub_1000BE770((unint64_t *)(a1 + 424), 4, *(_DWORD *)(a1 + 28), v12);
  uint64_t v14 = sub_1000BE770((unint64_t *)(a1 + 488), 4, *(_DWORD *)(a1 + 28), v13);
  uint64_t v15 = sub_1000BE770((unint64_t *)(a1 + 552), 4, *(_DWORD *)(a1 + 28), v14);
  LODWORD(v16) = *(_DWORD *)(a1 + 28);
  if ((int)v16 >= 1)
  {
    uint64_t v17 = 0LL;
    do
    {
      uint64_t v18 = a1 + 4 * v17;
      if (*(int *)(v18 + 360) >= 1)
      {
        uint64_t v19 = 0LL;
        uint64_t v20 = 0LL;
        uint64_t v21 = (int *)(v18 + 360);
        uint64_t v22 = (void *)(a1 + 8 * v17 + 616);
        do
        {
          unsigned int v23 = sub_1000BE644(*(unsigned __int16 *)(*v22 + v19), 2, v15);
          LODWORD(v15) = sub_1000BE644(*(unsigned __int16 *)(*v22 + v19 + 2), 2, v23);
          ++v20;
          uint64_t v24 = *v21;
          v19 += 4LL;
        }

        while (v20 < v24);
        if ((int)v24 >= 2)
        {
          uint64_t v25 = 0LL;
          do
            LODWORD(v15) = sub_1000BE644(*(unsigned __int8 *)(*(void *)(a1 + 8 * v17 + 744) + v25++), 1, v15);
          while (v25 < *v21 - 1LL);
        }
      }

      uint64_t v15 = sub_1000BE644(*(unsigned __int8 *)(a1 + v17++ + 872), 1, v15);
      uint64_t v16 = *(int *)(a1 + 28);
    }

    while (v17 < v16);
  }

  return sub_1000BE770((unint64_t *)(a1 + 872), 1, v16, v15);
}

uint64_t sub_1000627EC(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 36) = -1;
  if (*(int *)(result + 28) >= 1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t result = sub_100062920(v3, v4, a2, 0, 0LL);
      unsigned int v6 = **(unsigned __int8 **)(v3 + 8 * v4 + 744);
      *(_BYTE *)(v3 + v4 + 872) = v6;
      ++v4;
      uint64_t v5 = *(int *)(v3 + 28);
    }

    while (v4 < v5);
    if ((int)v5 >= 1)
    {
      uint64_t v7 = 0LL;
      do
      {
        uint64_t v8 = v3 + 8 * v7;
        uint64_t v9 = *(void *)(v8 + 616);
        uint64_t v10 = *(_BYTE **)(v8 + 744);
        int v11 = *(unsigned __int8 *)(v3 + 36);
        _BYTE *v10 = 0;
        int v12 = *(unsigned __int16 *)(v9 + 2);
        uint64_t v13 = (__int16 *)(v9 + 4);
        do
        {
          int v14 = *v13;
          v13 += 2;
        }

        while (v14 < 0);
        int v15 = (unsigned __int16)*(v13 - 1);
        unsigned __int16 v16 = v15 - v12;
        if (v15 != v12)
        {
          int v17 = 0;
          do
            uint64_t result = sub_100062E24(v9, a2, (uint64_t)v10, (unsigned __int16)(v17++ + v12), v11, 1);
          while ((unsigned __int16)v17 < v16);
        }

        ++v7;
      }

      while (v7 < *(int *)(v3 + 28));
    }
  }

  return result;
}

uint64_t sub_100062920(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v7 = a1 + 8LL * (int)a2;
  uint64_t v8 = *(void *)(v7 + 616);
  uint64_t v9 = *(void *)(v7 + 744);
  uint64_t v10 = a4;
  if (*(__int16 *)(v8 + 4LL * a4) < 0)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    unsigned int v21 = sub_1000BB868(v20, *(unsigned __int16 *)(v8 + 4LL * a4 + 2), 0LL);
    int v22 = sub_1000BBBF8(v20, 0LL, 0, v21);
    if (v22 >= 255) {
      int v23 = 255;
    }
    else {
      int v23 = v22;
    }
    else {
      unsigned __int8 v19 = v23;
    }
  }

  else
  {
    uint64_t v13 = v8 + 4LL * a4;
    int v14 = *(unsigned __int16 *)(v13 + 2);
    int v15 = (__int16 *)(v13 + 4);
    do
    {
      int v16 = *v15;
      v15 += 2;
    }

    while (v16 < 0);
    int v17 = (unsigned __int16)*(v15 - 1);
    unsigned __int16 v18 = v17 - v14;
    if (v17 == v14)
    {
      unsigned __int8 v19 = -1;
    }

    else
    {
      unsigned __int16 v24 = 0;
      unsigned __int8 v19 = -1;
      do
      {
        unsigned int v25 = sub_100062920(a1, a2, a3, (unsigned __int16)(v24 + v14), a5);
        if (v25 < v19) {
          unsigned __int8 v19 = v25;
        }
        ++v24;
      }

      while (v24 < v18);
    }
  }

  *(_BYTE *)(v9 + v10) = v19;
  return v19;
}

uint64_t sub_100062A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = a2;
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 36);
  }
  uint64_t result = sub_100062920(a1, a2, a3, 0, v6);
  uint64_t v8 = v4;
  uint64_t v9 = *(_BYTE **)(a1 + 8LL * v4 + 744);
  int v10 = *v9;
  *(_BYTE *)(a1 + v8 + 872) = v10;
  else {
    *(_BYTE *)(a1 + 36) = v10;
  }
  uint64_t v11 = *(void *)(a1 + 8 * v8 + 616);
  _BYTE *v9 = 0;
  int v12 = *(unsigned __int16 *)(v11 + 2);
  uint64_t v13 = (__int16 *)(v11 + 4);
  do
  {
    int v14 = *v13;
    v13 += 2;
  }

  while (v14 < 0);
  int v15 = (unsigned __int16)*(v13 - 1);
  unsigned __int16 v16 = v15 - v12;
  if (v15 != v12)
  {
    int v17 = 0;
    do
      uint64_t result = sub_100062E24(v11, a3, (uint64_t)v9, (unsigned __int16)(v17++ + v12), v10, 1);
    while ((unsigned __int16)v17 < v16);
  }

  return result;
}

uint64_t sub_100062B2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a2 + 8LL * a3;
  uint64_t v9 = *(void *)(v8 + 616);
  int v10 = *(_BYTE **)(v8 + 744);
  uint64_t result = sub_100062CB8(a1, v9, a4, (uint64_t)v10, 0, a5);
  unsigned int v13 = *v10;
  *(_BYTE *)(a2 + a3 + 872) = v13;
  unsigned int v14 = *(unsigned __int8 *)(a2 + 36);
  if (v13 >= v14)
  {
    _BYTE *v10 = 0;
    int v25 = *(unsigned __int16 *)(v9 + 2);
    uint64_t v26 = (__int16 *)(v9 + 4);
    do
    {
      int v27 = *v26;
      v26 += 2;
    }

    while (v27 < 0);
    int v28 = (unsigned __int16)*(v26 - 1);
    unsigned __int16 v29 = v28 - v25;
    if (v28 != v25)
    {
      int v30 = 0;
      do
        uint64_t result = sub_100062E24(v9, a4, (uint64_t)v10, (unsigned __int16)(v30++ + v25), v14, 1);
      while ((unsigned __int16)v30 < v29);
    }
  }

  else
  {
    *(_BYTE *)(a2 + 36) = v13;
    if (*(int *)(a2 + 28) >= 1)
    {
      uint64_t v15 = 0LL;
      do
      {
        uint64_t v16 = a2 + 8 * v15;
        uint64_t v17 = *(void *)(v16 + 616);
        unsigned __int16 v18 = *(_BYTE **)(v16 + 744);
        uint64_t result = sub_100062CB8(a1, v17, a4, (uint64_t)v18, 0, a5);
        *unsigned __int16 v18 = 0;
        int v19 = *(unsigned __int16 *)(v17 + 2);
        uint64_t v20 = (__int16 *)(v17 + 4);
        do
        {
          int v21 = *v20;
          v20 += 2;
        }

        while (v21 < 0);
        int v22 = (unsigned __int16)*(v20 - 1);
        unsigned __int16 v23 = v22 - v19;
        if (v22 != v19)
        {
          int v24 = 0;
          do
            uint64_t result = sub_100062E24(v17, a4, (uint64_t)v18, (unsigned __int16)(v24++ + v19), v13, 1);
          while ((unsigned __int16)v24 < v23);
        }

        ++v15;
      }

      while (v15 < *(int *)(a2 + 28));
    }
  }

  return result;
}

uint64_t sub_100062CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  __int16 v27 = a6;
  uint64_t v9 = a5;
  int v10 = (__int16 *)(a2 + 4LL * a5);
  int v11 = (unsigned __int16)v10[1];
  if (*v10 < 0)
  {
    unsigned int v19 = sub_1000BB868(a1, (unsigned __int16)v10[1], 0LL);
    if ((_DWORD)a6 == 0xFFFF)
    {
      uint64_t v21 = a1;
      uint64_t v20 = 0LL;
      unsigned int v22 = 0;
    }

    else
    {
      uint64_t v20 = &v27;
      uint64_t v21 = a1;
      unsigned int v22 = 1;
    }

    int v25 = sub_1000BBBB0(v21, (uint64_t)v20, v22, v19);
    if (v25 >= 255) {
      unsigned __int8 v18 = -1;
    }
    else {
      unsigned __int8 v18 = v25;
    }
  }

  else
  {
    unsigned int v14 = (__int16 *)(a2 + 4LL * a5 + 4);
    do
    {
      int v15 = *v14;
      v14 += 2;
    }

    while (v15 < 0);
    int v16 = (unsigned __int16)*(v14 - 1);
    unsigned __int16 v17 = v16 - v11;
    if (v16 == v11)
    {
      unsigned __int8 v18 = -1;
    }

    else
    {
      unsigned __int16 v23 = 0;
      unsigned __int8 v18 = -1;
      do
      {
        unsigned int v24 = sub_100062CB8(a1, a2, a3, a4, (unsigned __int16)(v23 + v11), a6);
        if (v24 < v18) {
          unsigned __int8 v18 = v24;
        }
        ++v23;
      }

      while (v23 < v17);
    }
  }

  *(_BYTE *)(a4 + v9) = v18;
  return v18;
}

uint64_t sub_100062DE4(uint64_t a1, unsigned int a2, int a3)
{
  int v4 = sub_1000BBBF8(a1, 0LL, 0, a2);
  if (v4 >= 255) {
    int v5 = 255;
  }
  else {
    int v5 = v4;
  }
  if (v5 <= a3) {
    return a3;
  }
  else {
    return v5;
  }
}

uint64_t sub_100062E24(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  else {
    int v6 = a2 + 1;
  }
  int v7 = (*(unsigned __int8 *)(a3 + a4) - a5 + (v6 >> 1)) / (int)a2;
  *(_BYTE *)(a3 + a4) = v7;
  uint64_t v10 = result;
  int v7 = v7;
  if (qword_1000FDCC0)
  {
    unsigned int v11 = *(unsigned __int8 *)(qword_1000FDCC0 + 3168);
    if (*(void *)(qword_1000FDCC0 + 3176) < a6) {
      goto LABEL_11;
    }
LABEL_9:
    if (v11 < v7)
    {
      *(_BYTE *)(a3 + a4) = v11;
      int v7 = v11;
    }

    goto LABEL_11;
  }

  unsigned int v11 = 0;
  if (a6 <= 0LL) {
    goto LABEL_9;
  }
LABEL_11:
  int v12 = a5 + v7 * a2;
  if (v12 >= 255) {
    LOBYTE(v12) = -1;
  }
  uint64_t v13 = result + 4LL * a4;
  int v14 = *(unsigned __int16 *)(v13 + 2);
  int v15 = (__int16 *)(v13 + 4);
  do
  {
    int v16 = *v15;
    v15 += 2;
  }

  while (v16 < 0);
  int v17 = (unsigned __int16)*(v15 - 1);
  unsigned __int16 v18 = v17 - v14;
  if (v17 != v14)
  {
    int v19 = 0;
    uint64_t v20 = (a6 + 1);
    uint64_t v21 = v12;
    do
      uint64_t result = sub_100062E24(v10, a2, a3, (unsigned __int16)(v19++ + v14), v21, v20);
    while ((unsigned __int16)v19 < v18);
  }

  return result;
}

uint64_t sub_100062F3C(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 16))
  {
    uint64_t v2 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 5360))
      {
        *(_BYTE *)(result + 36) = -1;
        if (!*(_DWORD *)(v2 + 5360)) {
          return result;
        }
        return sub_1000627EC(result, a2);
      }

      if (*(_DWORD *)(qword_1000FDCC0 + 5264)) {
        char v3 = -1;
      }
      else {
        char v3 = 0;
      }
      *(_BYTE *)(result + 36) = v3;
      if (*(_DWORD *)(v2 + 5360)) {
        return sub_1000627EC(result, a2);
      }
    }

    else
    {
      *(_BYTE *)(result + 36) = 0;
    }
  }

  return result;
}

uint64_t sub_100062F94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_100062F9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_100062FA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

uint64_t sub_100062FAC(uint64_t a1, int a2)
{
  return *(void *)(a1 + 8LL * a2 + 616);
}

uint64_t sub_100062FB8(uint64_t a1, int a2)
{
  return *(void *)(a1 + 8LL * a2 + 168);
}

uint64_t sub_100062FC4(uint64_t a1, int a2)
{
  return *(void *)(a1 + 8LL * a2 + 744);
}

uint64_t sub_100062FD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

int8x8_t *sub_100062FD8(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 32), a3);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 32) != 1) {
      return (int8x8_t *)1;
    }
    uint64_t v7 = *(int *)(a1 + 28) - 1LL;
    uint64_t v8 = a1 + 4 * v7;
    uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(v8 + 40), v6);
    if ((_DWORD)result)
    {
      __int32 v11 = *(_DWORD *)(v8 + 104);
      uint64_t v10 = (_DWORD *)(v8 + 104);
      uint64_t result = (int8x8_t *)sub_1000BDB78(a2, v11, v9);
      if ((_DWORD)result)
      {
        uint64_t v13 = a1 + 4 * v7;
        uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(v13 + 296), v12);
        if ((_DWORD)result)
        {
          uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(v13 + 360), v14);
          if ((_DWORD)result)
          {
            uint64_t v16 = a1 + 4 * v7;
            uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(v16 + 424), v15);
            if ((_DWORD)result)
            {
              uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(v16 + 488), v17);
              if ((_DWORD)result)
              {
                uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 4 * v7 + 552), v18);
                if ((_DWORD)result)
                {
                  uint64_t result = (int8x8_t *)sub_1000BDB78(a2, *(unsigned __int8 *)(a1 + v7 + 872), v19);
                  if ((_DWORD)result)
                  {
                    uint64_t v21 = *(void **)(a1 + 8 * v7 + 168);
                    unsigned int v22 = v21 ? *v10 : 0;
                    uint64_t result = sub_1000BDBCC(a2, v21, v22, 4, v20);
                    if ((_DWORD)result)
                    {
                      unsigned int v24 = (_DWORD *)(v13 + 296);
                      int v25 = *(void **)(a1 + 8 * v7 + 616);
                      unsigned int v26 = v25 ? *v24 : 0;
                      uint64_t result = sub_1000BDBCC(a2, v25, v26, 4, v23);
                      if ((_DWORD)result)
                      {
                        int v28 = *(void **)(a1 + 8 * v7 + 744);
                        unsigned int v29 = v28 ? *v24 : 0;
                        uint64_t result = sub_1000BDBCC(a2, v28, v29, 1, v27);
                        if ((_DWORD)result) {
                          return (int8x8_t *)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10006314C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = sub_1000BDA88(a2, "blt0", a3);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_100062FD8(a1, result, v5);
    sub_1000BDB48(v6);
    return (uint64_t)v7;
  }

  return result;
}

uint64_t sub_1000631A0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  char v3 = (_DWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32)) {
    return 0LL;
  }
  uint64_t result = sub_1000BCD38(a2, v3);
  if ((_DWORD)result)
  {
    if (*v3 != 1) {
      return 1LL;
    }
    uint64_t v6 = *(int *)(a1 + 28);
    uint64_t v7 = a1 + 4 * v6;
    uint64_t result = sub_1000BCD38(a2, (void *)(v7 + 40));
    if ((_DWORD)result)
    {
      uint64_t v8 = (_DWORD *)(v7 + 104);
      uint64_t result = sub_1000BCD38(a2, (void *)(v7 + 104));
      if ((_DWORD)result)
      {
        uint64_t v9 = a1 + 4 * v6;
        uint64_t v10 = (_DWORD *)(v9 + 296);
        uint64_t result = sub_1000BCD38(a2, (void *)(v9 + 296));
        if ((_DWORD)result)
        {
          uint64_t result = sub_1000BCD38(a2, (void *)(v9 + 360));
          if ((_DWORD)result)
          {
            uint64_t v11 = a1 + 4 * v6;
            uint64_t result = sub_1000BCD38(a2, (void *)(v11 + 424));
            if ((_DWORD)result)
            {
              uint64_t result = sub_1000BCD38(a2, (void *)(v11 + 488));
              if ((_DWORD)result)
              {
                uint64_t result = sub_1000BCD38(a2, (void *)(a1 + 4 * v6 + 552));
                if ((_DWORD)result)
                {
                  uint64_t result = sub_1000BCD80(a2, (_BYTE *)(a1 + v6 + 872));
                  if ((_DWORD)result)
                  {
                    int v14 = 0;
                    if (!sub_1000BCED0(a2, 4, (uint64_t *)(a1 + 8 * v6 + 168), &v14)
                      || *(void *)(a1 + 8 * v6 + 168) && v14 != *v8)
                    {
                      return 0LL;
                    }

                    int v13 = 0;
                    if (!sub_1000BCED0(a2, 4, (uint64_t *)(a1 + 8 * v6 + 616), &v13)
                      || *(void *)(a1 + 8 * v6 + 616) && v13 != *v10)
                    {
                      return 0LL;
                    }

                    int v12 = 0;
                    if (!sub_1000BCED0(a2, 1, (uint64_t *)(a1 + 8 * v6 + 744), &v12)
                      || *(void *)(a1 + 8 * v6 + 744) && v12 != *v10)
                    {
                      return 0LL;
                    }

                    ++*(_DWORD *)(a1 + 28);
                    return 1LL;
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t *sub_1000633A8( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1000BCAE8(a2, "blt0", a3, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    uint64_t v11 = sub_1000631A0(a1, (uint64_t)result);
    sub_1000BCBC8(v10);
    return (uint64_t *)v11;
  }

  return result;
}

uint64_t sub_1000633FC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = sub_1000C1074(888LL);
  if (v13)
  {
    int v14 = sub_1000BCAE8(a1, "blt0", a2, v8, v9, v10, v11, v12);
    if (!v14) {
      return 0LL;
    }
    uint64_t v15 = (uint64_t)v14;
    *(void *)uint64_t v13 = a3;
    *(void *)(v13 + 8) = a4;
    *(_DWORD *)(v13 + 16) = 1;
    uint64_t v16 = (int *)(v13 + 28);
    if (!sub_1000BCD38(v15, (void *)(v13 + 28))
      || !sub_1000BCD38(v15, (void *)(v13 + 32))
      || !sub_1000BCD80(v15, (_BYTE *)(v13 + 36))
      || !sub_1000BCE28(v15, (void *)(v13 + 40), 16, 4)
      || !sub_1000BCE28(v15, (void *)(v13 + 104), 16, 4))
    {
      goto LABEL_23;
    }

    if (*v16 >= 1)
    {
      uint64_t v17 = 0LL;
      uint8x8_t v18 = (uint64_t *)(v13 + 168);
      do
      {
        LODWORD(v27) = 0;
        if (!sub_1000BCED0(v15, 4, v18, (int *)&v27)
          || *v18 && (_DWORD)v27 != *(_DWORD *)(v13 + 104 + 4 * v17))
        {
          break;
        }

        ++v17;
        ++v18;
      }

      while (v17 < *v16);
    }

    if (!sub_1000BCE28(v15, (void *)(v13 + 296), 16, 4)
      || !sub_1000BCE28(v15, (void *)(v13 + 360), 16, 4)
      || !sub_1000BCE28(v15, (void *)(v13 + 424), 16, 4)
      || !sub_1000BCE28(v15, (void *)(v13 + 488), 16, 4)
      || !sub_1000BCE28(v15, (void *)(v13 + 552), 16, 4))
    {
LABEL_23:
      sub_1000BCBC8(v15);
LABEL_24:
      sub_1000600D0((_DWORD *)v13);
      return 0LL;
    }

    if (*v16 >= 1)
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = v13 + 616;
      while (1)
      {
        uint64_t v27 = 0LL;
        int v26 = 0;
        *(void *)(v20 + 8 * v19++) = v27;
        uint64_t v22 = *v16;
        if (v19 >= v22) {
          goto LABEL_32;
        }
      }

      LODWORD(v22) = *v16;
LABEL_32:
      if ((int)v22 >= 1)
      {
        uint64_t v23 = 0LL;
        unsigned int v24 = (uint64_t *)(v13 + 744);
        do
        {
          LODWORD(v27) = 0;
          if (!sub_1000BCED0(v15, 1, v24, (int *)&v27)
            || *v24 && (_DWORD)v27 != *(_DWORD *)(v13 + 296 + 4 * v23))
          {
            break;
          }

          ++v23;
          ++v24;
        }

        while (v23 < *v16);
      }
    }

    BOOL v25 = sub_1000BCE28(v15, (void *)(v13 + 872), 16, 1);
    sub_1000BCBC8(v15);
    if (!v25) {
      goto LABEL_24;
    }
  }

  return v13;
}

uint64_t sub_1000636E0( unsigned __int16 *a1, unsigned __int16 *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = *a1;
  int v11 = *a2;
  if (v10 == v11)
  {
    int v12 = *a1;
    while (v12 != 0xFFFF)
    {
      int v13 = a1[1];
      ++a1;
      int v12 = v13;
      int v14 = a2[1];
      ++a2;
      if (v12 != v14) {
        goto LABEL_5;
      }
    }

    return (a3 - a4);
  }

  else
  {
LABEL_5:
    if (v10 == v11) {
      uint64_t v15 = -1LL;
    }
    else {
      uint64_t v15 = 0LL;
    }
    uint64_t v16 = v15;
    uint64_t v17 = &a2[v16];
    uint8x8_t v18 = &a1[v16];
    while (1)
    {
      uint64_t v19 = *v18;
      int v20 = *v17;
      if ((_DWORD)v19 == 0xFFFF) {
        break;
      }
      if (v20 == 0xFFFF) {
        return 1LL;
      }
      unsigned int v22 = v18[1];
      ++v18;
      unsigned int v21 = v22;
      if (v22 == 0xFFFF) {
        uint64_t v23 = 0LL;
      }
      else {
        uint64_t v23 = v21;
      }
      unsigned int v28 = sub_1000057B0(qword_1000FDD10, *(v18 - 2), v19, v23, a5, a6, a7, a8);
      if (v17[1] == 0xFFFF) {
        uint64_t v29 = 0LL;
      }
      else {
        uint64_t v29 = v17[1];
      }
      unsigned int v30 = sub_1000057B0(qword_1000FDD10, *(v17 - 1), *v17, v29, v24, v25, v26, v27);
      if (v28 < v30) {
        uint64_t result = 0xFFFFFFFFLL;
      }
      else {
        uint64_t result = v28 != v30;
      }
      ++v17;
      if ((_DWORD)result) {
        return result;
      }
    }

    if (v20 == 0xFFFF) {
      return (a3 - a4);
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }

uint64_t sub_100063830( uint64_t result, __int16 *a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = result;
  if (*a2 < 0)
  {
    uint64_t v20 = (unsigned __int16)a2[1];
    *(_WORD *)(a3 + 2LL * (int)(*a4)++) = v20;
    if (a5)
    {
      *(_WORD *)(a6 + 2LL * (int)a7) = 0x7FFF;
      return sub_10009B84C(a5, v20, a6, a7);
    }
  }

  else
  {
    int v13 = a2 + 2;
    do
    {
      int v14 = *v13;
      v13 += 2;
    }

    while (v14 < 0);
    int v15 = (unsigned __int16)*(v13 - 1);
    int v16 = (unsigned __int16)a2[1];
    if (v15 - v16 >= 1)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = (a7 + 1);
      int v19 = v15 - v16;
      do
      {
        uint64_t result = sub_100063830(v12, v12 + 4 * (v17 + (unsigned __int16)a2[1]), a3, a4, a5, a6, v18);
        ++v17;
      }

      while (v19 != (_DWORD)v17);
    }
  }

  return result;
}

uint64_t sub_100063950(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_100074AC8(*(void *)(result + 144));
    sub_10007A4F8(v1[15]);
    sub_1000C0EF8(v1[11]);
    sub_10007ABE4(v1[13]);
    sub_10007ABE4(v1[9]);
    sub_10007A4F8(v1[7]);
    sub_10007ABE4(v1[5]);
    sub_10007ABE4(v1[2]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_1000639B8(uint64_t a1)
{
  unsigned int v2 = sub_1000BE540(*(_DWORD *)a1, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE540(*(_DWORD *)(a1 + 24), v2);
  unsigned int v4 = sub_1000BE540(*(_DWORD *)(a1 + 128), v3);
  unsigned int v5 = sub_10007AC2C(*(void *)(a1 + 8));
  unsigned int v6 = sub_1000BE644(v5, 4, v4);
  unsigned int v7 = sub_10007AC2C(*(void *)(a1 + 32));
  unsigned int v8 = sub_1000BE644(v7, 4, v6);
  unsigned int v9 = sub_10007A534(*(void *)(a1 + 48));
  unsigned int v10 = sub_1000BE644(v9, 4, v8);
  unsigned int v11 = sub_10007AC2C(*(void *)(a1 + 64));
  unsigned int v12 = sub_1000BE644(v11, 4, v10);
  uint64_t v13 = *(void *)(a1 + 96);
  if (v13)
  {
    unsigned int v14 = sub_10007AC2C(v13);
    unsigned int v12 = sub_1000BE644(v14, 4, v12);
  }

  int v15 = *(unint64_t **)(a1 + 80);
  if (v15)
  {
    unsigned int v16 = sub_1000BE770(v15, 2, 256, 0xFFFFFFFFLL);
    unsigned int v12 = sub_1000BE644(v16, 4, v12);
  }

  uint64_t v17 = *(void *)(a1 + 112);
  if (v17)
  {
    unsigned int v18 = sub_10007A534(v17);
    unsigned int v12 = sub_1000BE644(v18, 4, v12);
  }

  unsigned int v19 = sub_100078948(*(void *)(a1 + 136));
  return sub_1000BE644(v19, 4, v12);
}

uint64_t *sub_100063ACC( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = sub_1000BCAE8(a1, "blid0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (uint64_t *)sub_1000C1074(152LL);
  if (!v10)
  {
LABEL_22:
    sub_1000BCBC8(v9);
    return v10;
  }

  int v22 = 0;
  if (sub_1000BCD38(v9, v10) && sub_1000BCD38(v9, v10 + 3) && sub_1000BCD38(v9, v10 + 16))
  {
    uint64_t v11 = sub_10007AD08(v9);
    v10[2] = v11;
    if (v11)
    {
      v10[1] = v11;
      uint64_t v12 = sub_10007AD08(v9);
      v10[5] = v12;
      if (v12)
      {
        v10[4] = v12;
        uint64_t v13 = sub_10007A574(v9);
        v10[7] = v13;
        if (v13)
        {
          v10[6] = v13;
          uint64_t v14 = sub_10007AD08(v9);
          v10[9] = v14;
          if (v14)
          {
            v10[8] = v14;
            int v21 = 0;
            int v15 = v10 + 11;
            if (sub_1000BCED0(v9, 2, v10 + 11, &v21))
            {
              uint64_t v16 = *v15;
              if (!*v15 || v21 == 256)
              {
                if (v16) {
                  v10[10] = v16;
                }
                if (sub_1000BCD38(v9, &v22))
                {
                  if (v22 != 1) {
                    goto LABEL_20;
                  }
                  uint64_t v17 = sub_10007AD08(v9);
                  v10[13] = v17;
                  if (v17)
                  {
                    v10[12] = v17;
                    uint64_t v18 = sub_10007A574(v9);
                    v10[15] = v18;
                    if (v18)
                    {
                      v10[14] = v18;
LABEL_20:
                      unsigned int v19 = sub_100078964(v9);
                      v10[18] = (uint64_t)v19;
                      if (v19)
                      {
                        v10[17] = (uint64_t)v19;
                        goto LABEL_22;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  sub_1000BCBC8(v9);
  sub_100063950((uint64_t)v10);
  return 0LL;
}

uint64_t sub_100063C6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 552);
}

uint64_t sub_100063C74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8892) = a2;
  return result;
}

uint64_t sub_100063C7C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 9364);
  if ((int)v4 < 1)
  {
    uint64_t result = 0LL;
    if ((int)v4 >= *(_DWORD *)(a1 + 9360))
    {
LABEL_10:
      uint64_t result = 0LL;
      *(_DWORD *)(a1 + 552) = 3;
    }

    else
    {
LABEL_12:
      *(void *)(*(void *)(a1 + 9328) + 8LL * result) = *(void *)(a3 + 24);
      *(_WORD *)(*(void *)(a1 + 9336) + 2LL * result) = a2;
      *(_DWORD *)(*(void *)(a1 + 9344) + 4LL * result) = (*(void *)(a3 + 8) >> 35) & 0x3FFFF;
      uint64_t v7 = *(void *)(a1 + 9352);
      if (v7) {
        *(_DWORD *)(v7 + 4LL * result) = *(_DWORD *)(a1 + 9376);
      }
      ++*(_DWORD *)(a1 + 9364);
    }
  }

  else
  {
    uint64_t result = 0LL;
    while (1)
    {
      if (((*(void *)(a3 + 8) >> 35) & 0x3FFFF) == *(_DWORD *)(*(void *)(a1 + 9344) + 4 * result)
        && *(unsigned __int16 *)(*(void *)(a1 + 9336) + 2 * result) == a2)
      {
        uint64_t v6 = *(void *)(a1 + 9352);
        if (!v6 || *(_DWORD *)(v6 + 4 * result) == *(_DWORD *)(a1 + 9376)) {
          break;
        }
      }

      if (v4 == ++result)
      {
        uint64_t result = v4;
        goto LABEL_10;
      }
    }
  }

  return result;
}

uint64_t sub_100063D5C(uint64_t result)
{
  *(_DWORD *)(result + 552) = 3;
  return result;
}

uint64_t sub_100063D68(uint64_t a1)
{
  unsigned int v2 = (_WORD *)(a1 + 9048);
  int v3 = *(__int16 *)(a1 + 9048);
  int v4 = (__int16)(*(_WORD *)(a1 + 9048) + *(_WORD *)(a1 + 9064));
  else {
    __int16 v5 = *(_WORD *)(a1 + 9050) + *(_WORD *)(a1 + 9066);
  }
  int v6 = *(_DWORD *)(a1 + 9212);
  uint64_t v7 = *(int **)(a1 + 9240);
  if (v6 >= v7[1]) {
    return (__int16)(v5 - v3);
  }
  else {
    return (__int16)(sub_10005DDF8(v7, v6, v3, v5) - *v2);
  }
}

uint64_t sub_100063E04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a5 - 1;
  uint64_t v9 = (unsigned __int8 *)a7;
  unsigned int v11 = a5;
  uint64_t v12 = (_WORD *)(a1 + 9068);
  __int16 v13 = sub_100039A64(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a6 + 4LL * v8) == -4) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = v11;
  }
  uint64_t v15 = v14 - 1;
  __int16 v16 = v12[1] + v13 + *v12 * (v14 - 1);
  if (v14 >= 2 && v9 != 0LL)
  {
    do
    {
      if (*v9++) {
        v16 += v12[2];
      }
      --v15;
    }

    while (v15);
  }

  return v16;
}

uint64_t sub_100063EB8(uint64_t result, uint64_t a2, int a3)
{
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 5308))
    {
      if (*(_BYTE *)(qword_1000FDCC0 + 4220))
      {
        uint64_t v3 = result;
        if (*(void *)(result + 9296))
        {
          uint64_t v5 = sub_10002BA84(result + 680, *(_DWORD *)(result + 8872));
          uint64_t v36 = v3;
          if (*(_DWORD *)(v3 + 8900))
          {
            int v6 = *(_DWORD *)(v3 + 8872);
            if (v6 >= 1 && a3 >= 1)
            {
              uint64_t v7 = 0LL;
              int v8 = -1;
              int v9 = -1;
              do
              {
                if (*(void *)(*(void *)(v3 + 9296) + 8 * v7))
                {
                  uint64_t v10 = 0LL;
                  uint64_t v35 = (void *)(v3 + 8 * v7 + 680);
                  uint64_t v11 = a2 + 384;
                  do
                  {
                    if (*v35 == *(void *)(a2 + 1096 * v10 + 16))
                    {
                      uint64_t v12 = a2 + 1096 * v10;
                      int v14 = *(_DWORD *)(v12 + 8);
                      __int16 v13 = (int *)(v12 + 8);
                      if (v14 >= 1)
                      {
                        uint64_t v15 = 0LL;
                        do
                        {
                          __int16 v16 = (char *)sub_100031858(v5, *(_DWORD *)(v11 + 4 * v15));
                          if (sub_100034540(v16))
                          {
                            int v17 = *(_DWORD *)(v11 + 4 * v15);
                            if (v17 != v8)
                            {
                              int v9 = sub_1000277AC( *(void *)(*(void *)(v36 + 9288) + 8 * v7),  *(_DWORD *)(v11 + 4 * v15));
                              int v8 = v17;
                            }

                            *(_DWORD *)(v11 + 4 * v15) = v9;
                          }

                          ++v15;
                        }

                        while (v15 < *v13);
                      }
                    }

                    ++v10;
                    v11 += 1096LL;
                  }

                  while (v10 != a3);
                  uint64_t v3 = v36;
                  int v6 = *(_DWORD *)(v36 + 8872);
                }

                ++v7;
              }

              while (v7 < v6);
            }
          }

          if (qword_1000FDCC0) {
            uint64_t v18 = (unsigned __int8 *)(qword_1000FDCC0 + 4220);
          }
          else {
            uint64_t v18 = 0LL;
          }
          uint64_t result = sub_100031764(v5, v18);
          if ((_DWORD)result != -1)
          {
            int v19 = *(_DWORD *)(v3 + 8872);
            if (v19 >= 1 && a3 >= 1)
            {
              int v20 = result;
              for (uint64_t i = 0LL; i < v19; ++i)
              {
                if (*(void *)(*(void *)(v3 + 9296) + 8 * i))
                {
                  uint64_t v22 = 0LL;
                  uint64_t v34 = i;
                  uint64_t v23 = (void *)(v3 + 8 * i + 680);
                  uint64_t v24 = a2;
                  do
                  {
                    uint64_t v25 = a2;
                    if (*v23 == *(void *)(a2 + 1096 * v22 + 16))
                    {
                      uint64_t v26 = a2 + 1096 * v22;
                      int v28 = *(_DWORD *)(v26 + 8);
                      uint64_t v27 = (int *)(v26 + 8);
                      if (v28 >= 1)
                      {
                        uint64_t v29 = 0LL;
                        int v30 = 0;
                        do
                        {
                          uint64_t v31 = v24 + 4 * v29;
                          uint64_t v32 = (char *)sub_100031858(v5, *(_DWORD *)(v31 + 384));
                          uint64_t result = sub_100034540(v32);
                          if ((_DWORD)result)
                          {
                            *(_DWORD *)(v31 + 384) = v20;
                            if (v30) {
                              *(_BYTE *)(v24 + v29 + 323) = 0;
                            }
                          }

                          ++v29;
                          int v30 = result;
                        }

                        while (v29 < *v27);
                      }
                    }

                    ++v22;
                    v24 += 1096LL;
                    a2 = v25;
                  }

                  while (v22 != a3);
                  uint64_t v3 = v36;
                  int v19 = *(_DWORD *)(v36 + 8872);
                  uint64_t i = v34;
                }
              }
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_100064184(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_100025C94(*(unsigned int **)(a1 + 680));
  if ((_DWORD)result == 3 && *(void *)(a1 + 9296))
  {
    int v7 = *(_DWORD *)(a1 + 8872);
    if (v7 >= 1 && a3 >= 1)
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)(*(void *)(a1 + 9296) + 8 * v9))
        {
          uint64_t v10 = *(void *)(*(void *)(a1 + 9288) + 8 * v9);
          uint64_t v11 = a3;
          uint64_t v12 = (void *)(a2 + 16);
          do
          {
            if (*(void *)(a1 + 8 * v9 + 680) == *v12) {
              void *v12 = v10;
            }
            v12 += 137;
            --v11;
          }

          while (v11);
          int v7 = *(_DWORD *)(a1 + 8872);
        }

        ++v9;
      }

      while (v9 < v7);
    }
  }

  return result;
}

uint64_t sub_100064248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 472);
  *(_OWORD *)(a2 + 88) = 0u;
  uint64_t v5 = a2 + 88;
  *(_DWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  if (sub_10003982C(a1) == 3)
  {
    int v6 = (_DWORD *)(a2 + 12);
  }

  else
  {
    if (v4)
    {
      if (qword_1000FDCC0) {
        int v7 = *(_DWORD *)(qword_1000FDCC0 + 1512);
      }
      else {
        int v7 = 0;
      }
      sub_1000D3E24(v4, v7, *(_DWORD *)(a1 + 452), a1 + 448);
      int v8 = (uint64_t *)(v4 + 128);
    }

    else
    {
      int v8 = (uint64_t *)(a1 + 9000);
    }

    int v6 = (_DWORD *)(a2 + 12);
    int v9 = sub_10009D200( *v8,  a2 + 16,  0LL,  0LL,  0LL,  0LL,  36,  (_DWORD *)(a2 + 4),  (_DWORD *)(a2 + 12),  0LL,  *(_DWORD *)(a1 + 8884),  v5,  0LL);
    int v10 = *(_DWORD *)(a2 + 4);
    if (v10 && v10 <= 36 && v9) {
      return 1LL;
    }
    *(_DWORD *)(a1 + 552) = 3;
  }

  uint64_t result = 0LL;
  _DWORD *v6 = 0x40000000;
  return result;
}

uint64_t sub_10006435C(uint64_t a1)
{
  return sub_1000D0454(*(__int128 **)(a1 + 472));
}

uint64_t sub_100064364( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  uint64_t v15 = 0LL;
  uint64_t v11 = 2LL * (int)a2;
  uint64_t v12 = (void *)sub_1000CAF58(v11, a2, a3, a4, a5, a6, a7, a8);
  sub_10009D200( *(void *)(a1 + 9000),  (uint64_t)v12,  0LL,  0LL,  0LL,  0LL,  v9,  (_DWORD *)&v15 + 1,  &v15,  0LL,  0,  0LL,  0LL);
  if (SHIDWORD(v15) >= 1)
  {
    uint64_t v13 = 0LL;
    do
    {
      *(_DWORD *)(a3 + 4 * v13) = sub_1000BB870(*(void *)(a1 + 376), *((unsigned __int16 *)v12 + v13));
      ++v13;
    }

    while (v13 < SHIDWORD(v15));
  }

  sub_1000CB038(v12, v11);
  return HIDWORD(v15);
}

uint64_t sub_100064428(uint64_t a1)
{
  return sub_10009ADAC(*(void *)(a1 + 9256));
}

uint64_t sub_100064430(uint64_t a1)
{
  return sub_10009ADAC(*(void *)(a1 + 9256));
}

uint64_t sub_100064438(uint64_t a1)
{
  *(_DWORD *)(a1 + 552) = 4;
  return 1LL;
}

uint64_t sub_100064470(uint64_t a1)
{
  *(_DWORD *)(a1 + 552) = 4;
  return 1LL;
}

uint64_t sub_1000644A0(uint64_t a1)
{
  uint64_t v2 = qword_1000FDCC0;
  if (!*(void *)(a1 + 576))
  {
    if (!qword_1000FDCC0)
    {
      int v3 = 0;
      int v4 = 0;
      *(_DWORD *)(a1 + 584) = 0;
      goto LABEL_10;
    }

    *(_DWORD *)(a1 + 584) = *(void *)(qword_1000FDCC0 + 1576);
    uint64_t v5 = *(void *)(v2 + 1576);
    if (v5 < 1) {
      goto LABEL_3;
    }
    uint64_t result = sub_1000C1074(4 * v5);
    *(void *)(a1 + 576) = result;
    if (!result) {
      return result;
    }
    uint64_t v2 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_3;
    }
LABEL_8:
    int v3 = 0;
    int v4 = 0;
    goto LABEL_10;
  }

  if (!qword_1000FDCC0) {
    goto LABEL_8;
  }
LABEL_3:
  int v3 = *(_DWORD *)(v2 + 4508);
  int v4 = *(_DWORD *)(v2 + 4512);
LABEL_10:
  uint64_t result = sub_10009AA7C(1, v3, v4, *(_DWORD *)(a1 + 556), 1, *(uint64_t **)(a1 + 376), *(void *)(a1 + 384));
  *(void *)(a1 + 9256) = result;
  if (result)
  {
    if (!qword_1000FDCC0) {
      return 1LL;
    }
    uint64_t v7 = *(void *)(qword_1000FDCC0 + 2288);
    if (v7 < 1) {
      return 1LL;
    }
    uint64_t result = sub_100051510(v7, 8 * (int)v7, *(void *)(a1 + 384));
    *(void *)(a1 + 9264) = result;
    if (result) {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100064570(uint64_t a1)
{
  int v2 = sub_1000B3298(*(void *)(a1 + 376));
  if (*(_DWORD *)(a1 + 8896))
  {
    int v3 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v3 = *(_DWORD *)(qword_1000FDCC0 + 4176);
    }
    int v4 = v2 + *(_DWORD *)(a1 + 9360) + v3 + 2;
  }

  else
  {
    int v4 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v4 = *(_DWORD *)(qword_1000FDCC0 + 4160);
    }
  }

  signed int v5 = (v4 + 255) >> 8;
  if (v5 <= *(_DWORD *)(a1 + 608)) {
    return 1LL;
  }
  uint64_t result = sub_1000C1074((8 * v5));
  if (!result) {
    return result;
  }
  uint64_t v7 = (void *)result;
  if (!*(_DWORD *)(a1 + 556))
  {
    int v8 = 0LL;
    signed int v9 = *(_DWORD *)(a1 + 608);
    if (v9 >= v5) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }

  int v8 = (void *)sub_1000C1074((8 * v5));
  if (!v8)
  {
    uint64_t v16 = (uint64_t)v7;
LABEL_33:
    sub_1000C0EF8(v16);
    return 0LL;
  }

  signed int v9 = *(_DWORD *)(a1 + 608);
  if (v9 < v5)
  {
LABEL_14:
    uint64_t v10 = v9;
    uint64_t v11 = &v7[v10];
    uint64_t v12 = &v8[v10];
    while (1)
    {
      uint64_t v13 = sub_1000C1074(6144LL);
      uint64_t *v11 = v13;
      if (!v13) {
        break;
      }
      if (*(_DWORD *)(a1 + 556))
      {
        uint64_t v14 = sub_1000C1074(256LL);
        uint64_t *v12 = v14;
        if (!v14)
        {
          sub_1000C0EF8(*v11);
          break;
        }
      }

      ++v9;
      ++v11;
      ++v12;
      if (v5 == v9) {
        goto LABEL_21;
      }
    }
  }

uint64_t sub_10006477C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13, int a14, unsigned int a15, _DWORD *a16)
{
  int v16 = a7;
  uint64_t v18 = a2;
  uint64_t v20 = 2LL * (int)a2;
  unint64_t v21 = sub_1000CAF58(v20, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v26 = (unsigned __int16 *)v21;
  if ((int)v18 >= 1)
  {
    uint64_t v27 = v18;
    int v28 = (unsigned int *)a3;
    uint64_t v29 = (_WORD *)v21;
    do
    {
      unsigned int v30 = *v28++;
      *v29++ = sub_1000BB8B0(*(void *)(a1 + 376), v30);
      --v27;
    }

    while (v27);
  }

  int v31 = sub_10005C228(a12, a13, a15, a3 + 4LL * a14, v22, v23, v24, v25);
  if (v16 >= 1 && v31) {
    int v31 = sub_100026308(a8, v16, v26, v18);
  }
  if (v31)
  {
    *a16 = 0;
    sub_1000CB038(v26, v20);
  }

  else
  {
    int v32 = *(_DWORD *)(a1 + 9324);
    if (v32 < 1)
    {
LABEL_19:
      sub_1000CB038(v26, v20);
      return 0xFFFFFFFFLL;
    }

    else
    {
      uint64_t v33 = (_DWORD *)(*(void *)(a1 + 9312) + 28LL);
      while (*(v33 - 5) != (_DWORD)v18 || memcmp(v26, v33, 2 * (int)v18))
      {
        v33 += 274;
        if (!--v32) {
          goto LABEL_19;
        }
      }

      int v38 = 0;
      v39[0] = v18;
      if (sub_10003B330((uint64_t)v26, a9, a10, a11, a4, v39, &v38) && v39[0] >= 1)
      {
        uint64_t v34 = 0LL;
        do
        {
          *(_DWORD *)(a3 + 4 * v34) = sub_1000BB870(*(void *)(a1 + 376), v26[v34]);
          ++v34;
        }

        while (v34 < v39[0]);
      }

      *a16 = v38;
      sub_1000CB038(v26, v20);
      return v39[0];
    }
  }

  return v18;
}

uint64_t sub_100064994(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 9296);
  if (v2)
  {
    if (*(int *)(a1 + 9304) >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        uint64_t v4 = *(void *)(a1 + 9296);
        uint64_t v5 = *(void *)(v4 + 8 * v3);
        if (v5)
        {
          sub_10002613C(v5);
          uint64_t v4 = *(void *)(a1 + 9296);
        }

        *(void *)(v4 + 8 * v3++) = 0LL;
      }

      while (v3 < *(int *)(a1 + 9304));
      uint64_t v2 = *(void *)(a1 + 9296);
    }

    sub_1000C0EF8(v2);
    *(void *)(a1 + 9296) = 0LL;
    *(_DWORD *)(a1 + 9304) = 0;
  }

  uint64_t result = *(void *)(a1 + 9288);
  if (a1 + 680 != result && result != 0)
  {
    uint64_t result = sub_1000C0EF8(result);
    *(void *)(a1 + 9288) = 0LL;
  }

  return result;
}

_DWORD *sub_100064A28(_DWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v3 = result[2218];
    if ((int)v3 >= 1)
    {
      unint64_t v5 = v3 + 1;
      int v6 = -(int)v3;
      uint64_t v7 = (char *)&result[2 * v3 + 170];
      do
      {
        uint64_t v8 = (v5 - 2);
        if (*(void *)&v2[2 * v8 + 170] == a2)
        {
          uint64_t result = j__memmove(&v2[2 * v8 + 170], v7, 8 * ((int)v3 + v6));
          LODWORD(v3) = v2[2218] - 1;
          v2[2218] = v3;
        }

        --v5;
        ++v6;
        v7 -= 8;
      }

      while (v5 > 1);
    }
  }

  else
  {
    result[2218] = 0;
  }

  return result;
}

uint64_t sub_100064AD0(uint64_t a1)
{
  return *(__int16 *)(a1 + 9200);
}

void sub_100064ADC(uint64_t a1)
{
  size_t v1 = *(int *)(a1 + 588);
  if ((_DWORD)v1)
  {
    qsort(*(void **)(a1 + 576), v1, 4uLL, (int (__cdecl *)(const void *, const void *))sub_100064B90);
    int v3 = *(_DWORD *)(a1 + 588);
    if (v3 < 2)
    {
      int v4 = 0;
    }

    else
    {
      int v4 = 0;
      uint64_t v5 = *(void *)(a1 + 576);
      int v6 = (unsigned __int16 *)(v5 + 4);
      for (uint64_t i = 1LL; i < v3; ++i)
      {
        uint64_t v8 = v4;
        if (*v6 != *(unsigned __int16 *)(v5 + 4LL * v4) || v6[1] != *(unsigned __int16 *)(v5 + 4LL * v4 + 2))
        {
          ++v4;
          *(_DWORD *)(v5 + 4 * (v8 + 1)) = *(_DWORD *)v6;
          int v3 = *(_DWORD *)(a1 + 588);
        }

        v6 += 2;
      }
    }

    *(_DWORD *)(a1 + 588) = v4 + 1;
  }

uint64_t sub_100064B90(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = a1[1];
  int v3 = a2[1];
  if (v2 != v3) {
    return ((__int16)v2 - (__int16)v3);
  }
  unsigned int v4 = *a1 - *a2;
  if (v4) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100064BC4(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 648);
  return *(void *)(a1 + 640);
}

void *sub_100064BD4(uint64_t a1, const void *a2, _DWORD *a3)
{
  int v6 = *(void **)(a1 + 640);
  int v7 = sub_1000045F4(*(void *)(a1 + 384));
  uint64_t result = memcpy(v6, a2, v7);
  *(_DWORD *)(a1 + 648) = *a3;
  return result;
}

uint64_t sub_100064C24(uint64_t result)
{
  size_t v1 = (__int16 *)(result + 9048);
  __int16 v2 = *(_WORD *)(result + 9048);
  if (*(_DWORD *)(result + 8896))
  {
    int v3 = *(_DWORD *)(result + 9360) + *(_DWORD *)(result + 620);
    if (v3 >= 0)
    {
      unsigned int v4 = 0;
      uint64_t v5 = *(void *)(result + 592);
      do
      {
        uint64_t v7 = *(void *)(v5 + 8LL * (v4 >> 8));
        int v8 = *(__int16 *)(v7 + 24LL * v4 + 16);
        if (v8 < 0x4000)
        {
          if (v8 < v2) {
            __int16 v2 = *(_WORD *)(v7 + 24LL * v4 + 16);
          }
          for (unsigned int i = *(unsigned __int16 *)(v7 + 24LL * v4 + 14);
                i != 0xFFFF;
                unsigned int i = *(unsigned __int16 *)(v10 + 14))
          {
            uint64_t v10 = *(void *)(v5 + 8LL * (i >> 8)) + 24LL * i;
          }
        }
      }

      while (v4++ != v3);
    }

    goto LABEL_28;
  }

  int v11 = *(_DWORD *)(result + 612);
  if (v11 < 1) {
    goto LABEL_28;
  }
  uint64_t v12 = *(void *)(result + 592);
  if (v11 == 1)
  {
    for (unsigned int j = 0; j != v11; ++j)
    {
LABEL_25:
    }

    goto LABEL_28;
  }

  unsigned int v14 = 0;
  unsigned int j = v11 & 0xFFFFFFFE;
  __int16 v15 = *(_WORD *)(result + 9048);
  do
  {
    uint64_t v16 = *(void *)(v12 + 8LL * (v14 >> 8));
    uint64_t result = v14 & 0xFE | 1;
    int v17 = *(__int16 *)(v16 + 24LL * (v14 & 0xFE) + 16);
    int v18 = *(__int16 *)(v16 + 24LL * result + 16);
    if (v17 < v2) {
      __int16 v2 = v17;
    }
    if (v18 < v15) {
      __int16 v15 = v18;
    }
    v14 += 2;
  }

  while (j != v14);
  if (v2 >= v15) {
    __int16 v2 = v15;
  }
  if (v11 != j) {
    goto LABEL_25;
  }
LABEL_28:
  *size_t v1 = v2;
  return result;
}

uint64_t *sub_100064D98(uint64_t a1, __int128 *a2)
{
  int v4 = *(_DWORD *)(a1 + 612);
  unsigned int v5 = *((unsigned __int16 *)a2 + 7);
  int v6 = v4 - 1;
  int v7 = *(_DWORD *)(a1 + 8904);
  uint64_t result = *(uint64_t **)(a1 + 592);
  int v9 = 0;
  if (v7)
  {
    if (v4 >= 1)
    {
      unint64_t v10 = *(void *)a2 & 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        unsigned int v11 = (v9 + v6) / 2;
        uint64_t v12 = result[v11 >> 8];
        uint64_t v13 = v12 + 24LL * v11;
        unsigned int v14 = *(unsigned __int16 *)(v13 + 14);
        if (v5 < v14) {
          goto LABEL_4;
        }
        if (v5 > v14) {
          goto LABEL_9;
        }
        unint64_t v15 = *(void *)v13 & 0x7FFFFFFFFFFFFFFFLL;
        if (v10 < v15)
        {
LABEL_4:
          int v6 = v11 - 1;
        }

        else
        {
          if (v10 <= v15)
          {
            uint64_t v32 = v12 + 24LL * ((v9 + v6) / 2);
            int v35 = *(__int16 *)(v32 + 16);
            uint64_t v34 = (_WORD *)(v32 + 16);
            __int16 v33 = v35;
            __int16 v36 = *((_WORD *)a2 + 8);
            int v37 = v35 - v36;
            if (v37 < 1)
            {
              int v37 = -v37;
              __int16 v38 = v36 - *(_WORD *)(a1 + 9048);
              int v27 = *(_DWORD *)(v12 + 24LL * v11 + 8);
              int v29 = *((_DWORD *)a2 + 2);
              if (v29 != v27) {
                goto LABEL_38;
              }
            }

            else
            {
              __int16 v38 = v33 - *(_WORD *)(a1 + 9048);
              int v27 = *((_DWORD *)a2 + 2);
              uint64_t v39 = v12 + 24LL * v11;
              int v29 = *(_DWORD *)(v39 + 8);
              *uint64_t v34 = v36;
              *(_DWORD *)(v39 + 8) = *((_DWORD *)a2 + 2);
              if (v29 != v27)
              {
LABEL_38:
                if (*(_DWORD *)(a1 + 9008))
                {
                  uint64_t v40 = *(uint64_t **)(a1 + 9016);
                  __int16 v41 = v37;
                  __int16 v42 = v38;
                  return sub_100024188(v40, v29, v27, v41, v42);
                }
              }
            }

            return result;
          }

__n128 sub_1000650E8(uint64_t a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u16[7];
  uint64_t v3 = *(void *)(a1 + 592);
  uint64_t v4 = *(void *)(v3 + ((v2 >> 5) & 0x7F8));
  unsigned int v5 = a2->n128_u16[7];
  int v6 = (__n128 *)(v4 + 24LL * a2->n128_u16[7]);
  if (v6[1].n128_u16[0] == 0x4000)
  {
    __n128 result = *a2;
    v6[1].n128_u64[0] = a2[1].n128_u64[0];
    __n128 *v6 = result;
    return result;
  }

  if (*(_DWORD *)(a1 + 620) >= (int)v2)
  {
    unint64_t v8 = a2->n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v9 = v6->n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL;
    LOWORD(v10) = -1;
    if (v8 <= v9)
    {
      uint64_t v12 = 0LL;
    }

    else
    {
      unsigned int v11 = *(unsigned __int16 *)(v4 + 24LL * a2->n128_u16[7] + 14);
      if (v11 == 0xFFFF)
      {
        uint64_t v12 = 0LL;
        goto LABEL_20;
      }

      unsigned int v10 = v11;
      while (1)
      {
        uint64_t v19 = *(void *)(v3 + 8LL * (v10 >> 8));
        uint64_t v12 = v6;
        int v6 = (__n128 *)(v19 + 24LL * v10);
        unint64_t v9 = v6->n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL;
        if (v8 <= v9) {
          break;
        }
        unsigned int v10 = *(unsigned __int16 *)(v19 + 24LL * v10 + 14);
        if (v10 == 0xFFFF)
        {
          LOWORD(v10) = -1;
          goto LABEL_20;
        }
      }
    }

    if (v8 != v9)
    {
LABEL_20:
      int v20 = *(_DWORD *)(a1 + 612);
      if (v20 < (*(_DWORD *)(a1 + 608) << 8) - 2)
      {
        if (v8 <= v9)
        {
          if (v12)
          {
            LOWORD(v10) = v12->n128_u16[7];
            v12->n128_u16[7] = v20;
          }

          else
          {
            __n128 v22 = *v6;
            *(void *)(v21 + 16) = v6[1].n128_u64[0];
            *(__n128 *)uint64_t v21 = v22;
            unsigned int v10 = *(_DWORD *)(a1 + 612);
            uint64_t v21 = (uint64_t)v6;
          }
        }

        else
        {
          v6->n128_u16[7] = v20;
        }

        ++*(_DWORD *)(a1 + 612);
        unint64_t v23 = a2[1].n128_u64[0];
        __n128 result = *a2;
        *(__n128 *)uint64_t v21 = *a2;
        *(void *)(v21 + 16) = v23;
        *(_WORD *)(v21 + 14) = v10;
      }

      return result;
    }
  }

  int v13 = v6[1].n128_i16[0];
  signed __int16 v14 = a2[1].n128_i16[0];
  int v15 = v13 - v14;
  if (v15 < 1)
  {
    LOWORD(v15) = a2[1].n128_u16[0] - v13;
    __int16 v16 = v14 - *(_WORD *)(a1 + 9048);
    int v17 = v6->n128_i32[2];
    int v18 = a2->n128_i32[2];
    if (v18 == v17) {
      return result;
    }
  }

  else
  {
    __int16 v16 = v13 - *(_WORD *)(a1 + 9048);
    int v17 = a2->n128_i32[2];
    int v18 = v6->n128_i32[2];
    v6[1].n128_u16[0] = v14;
    v6->n128_u32[2] = a2->n128_u32[2];
    if (v18 == v17) {
      return result;
    }
  }

  if (*(_DWORD *)(a1 + 9008)) {
    sub_100024188(*(uint64_t **)(a1 + 9016), v18, v17, v15, v16);
  }
  return result;
}

uint64_t *sub_1000652E8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result[74] + (((unint64_t)*(unsigned __int16 *)(a2 + 14) >> 5) & 0x7F8));
  uint64_t v3 = v2 + 24LL * *(_WORD *)(a2 + 14);
  int v6 = *(__int16 *)(v3 + 16);
  unsigned int v5 = (_WORD *)(v3 + 16);
  int v4 = v6;
  if (v6 == 0x4000)
  {
    uint64_t v7 = v2 + 24LL * *(_WORD *)(a2 + 14);
    uint64_t v8 = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    *(void *)(v7 + 16) = v8;
    *(_WORD *)(v7 + 14) = -1;
    return result;
  }

  __int16 v9 = *(_WORD *)(a2 + 16);
  int v10 = v4 - v9;
  if (v10 < 1)
  {
    LOWORD(v10) = *(_WORD *)(a2 + 16) - v4;
    __int16 v11 = v9 - *((_WORD *)result + 4524);
    int v12 = *(_DWORD *)(v2 + 24LL * *(_WORD *)(a2 + 14) + 8);
    int v14 = *(_DWORD *)(a2 + 8);
    if (v14 == v12) {
      return result;
    }
  }

  else
  {
    __int16 v11 = v4 - *((_WORD *)result + 4524);
    int v12 = *(_DWORD *)(a2 + 8);
    uint64_t v13 = v2 + 24LL * *(_WORD *)(a2 + 14);
    int v14 = *(_DWORD *)(v13 + 8);
    *unsigned int v5 = v9;
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(a2 + 8);
    if (v14 == v12) {
      return result;
    }
  }

  if (*((_DWORD *)result + 2252)) {
    return sub_100024188((uint64_t *)result[1127], v14, v12, v10, v11);
  }
  return result;
}

uint64_t sub_1000653C8(uint64_t result, __int16 a2)
{
  if (*(int *)(result + 612) >= 1)
  {
    uint64_t v3 = result;
    unsigned int v4 = 0;
    unsigned int v5 = (__int16 *)(result + 9070);
    uint64_t v6 = result + 9202;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v3 + 592) + 8LL * (v4 >> 8));
      __int16 v9 = *v5;
      if (*(_DWORD *)(v3 + 9280))
      {
        unsigned int v10 = sub_1000BB868(*(void *)(v3 + 376), *(unsigned __int16 *)(v8 + 24LL * v4 + 14), 0LL);
        __n128 result = sub_1000BBBB0(*(void *)(v3 + 376), v6, *(_DWORD *)(v3 + 9204), v10);
        v9 += result;
      }

      uint64_t v7 = v8 + 24LL * v4;
      *(_WORD *)(v7 + 16) = v9 + a2;
      *(_DWORD *)(v7 + 8) = -1;
      ++v4;
    }

    while ((signed int)v4 < *(_DWORD *)(v3 + 612));
  }

  return result;
}

uint64_t sub_1000654A0(uint64_t result, __int16 a2)
{
  uint64_t v2 = *(unsigned int *)(result + 612);
  if (!(_DWORD)v2) {
    return result;
  }
  uint64_t v4 = result;
  uint64_t v5 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v5 = *(void *)(qword_1000FDCC0 + 3616);
  }
  if (v5 >= (int)v2)
  {
LABEL_19:
    int v12 = 0;
    do
    {
      uint64_t v14 = *(void *)(*(void *)(v4 + 592) + 8LL * (v12 >> 8));
      __int16 v15 = *(_WORD *)(v4 + 9070);
      if (*(_DWORD *)(v4 + 9280))
      {
        unsigned int v16 = sub_1000BB868(*(void *)(v4 + 376), *(unsigned __int16 *)(v14 + 24LL * v12 + 14), 0LL);
        __n128 result = sub_1000BBBB0(*(void *)(v4 + 376), v4 + 9202, *(_DWORD *)(v4 + 9204), v16);
        v15 += result;
      }

      uint64_t v13 = v14 + 24LL * v12;
      *(_WORD *)(v13 + 16) = v15 + a2;
      *(_DWORD *)(v13 + 8) = -1;
      ++v12;
      uint64_t v2 = *(unsigned int *)(v4 + 612);
    }

    while (v12 < (int)v2);
    goto LABEL_11;
  }

uint64_t sub_100065654(uint64_t a1, __int16 a2)
{
  uint64_t v20 = 0LL;
  memset(v19, 0, sizeof(v19));
  unint64_t v16 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t v17 = 0xFFFFFFFFLL;
  uint64_t result = (uint64_t)sub_100028C70(*(_DWORD **)(a1 + 680), (uint64_t)v19);
  if (*(int *)(a1 + 8872) >= 1)
  {
    for (uint64_t i = 0LL; i < *(int *)(a1 + 8872); ++i)
    {
      uint64_t v6 = *(unsigned __int16 **)(a1 + 9192);
      uint64_t v7 = *(void *)(a1 + 8 * i + 680);
      unint64_t v8 = sub_100026150(v7, i);
      uint64_t result = sub_100028C90( v7,  65534,  0xFFFEu,  v8,  *(_DWORD *)(a1 + 9224),  *(void *)(a1 + 9216),  *(_DWORD *)(a1 + 9188),  (unint64_t)v6);
      int v9 = result;
      if ((int)result > *(_DWORD *)(a1 + 9188))
      {
        int v10 = 2 * result;
        uint64_t result = sub_1000C1074(48LL * (_DWORD)result);
        if (!result)
        {
          *(_DWORD *)(a1 + 552) = 3;
          return result;
        }

        uint64_t v6 = (unsigned __int16 *)result;
        sub_1000C0EF8(*(void *)(a1 + 9192));
        *(_DWORD *)(a1 + 9188) = v10;
        *(void *)(a1 + 9192) = v6;
        unint64_t v11 = sub_100026150(v7, i);
        uint64_t result = sub_100028C90( v7,  65534,  0xFFFEu,  v11,  *(_DWORD *)(a1 + 9224),  *(void *)(a1 + 9216),  *(_DWORD *)(a1 + 9188),  (unint64_t)v6);
        int v9 = result;
      }

      if (v9 >= 1)
      {
        do
        {
          __int16 v14 = *(_WORD *)(a1 + 9070);
          if (*(_DWORD *)(a1 + 9280))
          {
            unsigned int v15 = sub_1000BB868(*(void *)(a1 + 376), *v6, 0LL);
            v14 += sub_1000BBBB0(*(void *)(a1 + 376), a1 + 9202, *(_DWORD *)(a1 + 9204), v15);
          }

          LOWORD(v18) = v14 + a2 + v6[1];
          if (*((_DWORD *)v6 + 4)) {
            unint64_t v12 = *((void *)v6 + 1) | 0x8000000000000000LL;
          }
          else {
            unint64_t v12 = *((void *)v6 + 1);
          }
          unint64_t v16 = v12;
          __int16 v13 = *v6;
          v6 += 12;
          HIWORD(v17) = v13;
          uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v16);
          --v9;
        }

        while (v9);
      }
    }
  }

  return result;
}

_DWORD *sub_100065850(uint64_t a1, __int16 a2)
{
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  memset(v23, 0, sizeof(v23));
  __int128 v21 = 0u;
  unint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v19 = 0xFFFFFFFFLL;
  uint64_t result = sub_100028C70(*(_DWORD **)(a1 + 680), (uint64_t)v23);
  if (*(int *)(a1 + 8872) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(void *)(a1 + 8 * v5 + 680);
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4544)) {
        sub_1000298B0((uint64_t)v23, -1, a2);
      }
      uint64_t v7 = *(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 104);
      uint64_t v8 = sub_100026150(v6, v5);
      v7(v6, v23, 65534LL, v8, 0xFFFFLL);
      while (1)
      {
        uint64_t result = (_DWORD *)(*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v6 + 112))(v23, v6, &v21);
        if (!(_DWORD)result) {
          break;
        }
        __int16 v11 = *(_WORD *)(a1 + 9070);
        if (*(_DWORD *)(a1 + 9280))
        {
          unsigned int v12 = sub_1000BB868(*(void *)(a1 + 376), (unsigned __int16)v21, 0LL);
          v11 += sub_1000BBBB0(*(void *)(a1 + 376), a1 + 9202, *(_DWORD *)(a1 + 9204), v12);
        }

        LOWORD(v20) = v11 + a2 + WORD1(v21);
        if ((_DWORD)v22) {
          unint64_t v13 = *((void *)&v21 + 1) | 0x8000000000000000LL;
        }
        else {
          unint64_t v13 = *((void *)&v21 + 1);
        }
        unint64_t v18 = v13;
        if (*((void *)&v22 + 1))
        {
          uint64_t v14 = (*((void *)&v21 + 1) >> 35) & 0x3FFFFLL;
          uint64_t v15 = *(unsigned int *)(a1 + 9364);
          if ((int)v15 < 1)
          {
            LODWORD(v9) = 0;
            if ((int)v15 >= *(_DWORD *)(a1 + 9360))
            {
LABEL_8:
              LODWORD(v9) = 0;
              *(_DWORD *)(a1 + 552) = 3;
            }

            else
            {
LABEL_30:
              *(void *)(*(void *)(a1 + 9328) + 8LL * v9) = *((void *)&v22 + 1);
              *(_WORD *)(*(void *)(a1 + 9336) + 2LL * v9) = v5;
              *(_DWORD *)(*(void *)(a1 + 9344) + 4LL * v9) = v14;
              uint64_t v17 = *(void *)(a1 + 9352);
              if (v17) {
                *(_DWORD *)(v17 + 4LL * v9) = *(_DWORD *)(a1 + 9376);
              }
              ++*(_DWORD *)(a1 + 9364);
            }
          }

          else
          {
            uint64_t v9 = 0LL;
            while (1)
            {
              if ((_DWORD)v14 == *(_DWORD *)(*(void *)(a1 + 9344) + 4 * v9)
                && *(unsigned __int16 *)(*(void *)(a1 + 9336) + 2 * v9) == (unsigned __int16)v5)
              {
                uint64_t v16 = *(void *)(a1 + 9352);
                if (!v16 || *(_DWORD *)(v16 + 4 * v9) == *(_DWORD *)(a1 + 9376)) {
                  break;
                }
              }

              if (v15 == ++v9)
              {
                LODWORD(v9) = *(_DWORD *)(a1 + 9364);
                goto LABEL_30;
              }
            }
          }

          int v10 = v9 + *(_DWORD *)(a1 + 620) + 1;
        }

        else
        {
          LOWORD(v10) = v21;
        }

        HIWORD(v19) = v10;
        (*(void (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v18);
      }

      ++v5;
    }

    while (v5 < *(int *)(a1 + 8872));
  }

  return result;
}

uint64_t sub_100065AE0(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 592)
                        + (((unint64_t)*(unsigned int *)(result + 612) >> 5) & 0x7FFFFF8))
  return result;
}

_DWORD *sub_100065B0C(_DWORD *result)
{
  uint64_t v1 = result[147];
  if ((int)v1 < 1)
  {
LABEL_5:
    result[147] = 0;
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = (char *)*((void *)result + 72);
    while (*((__int16 *)result + 4600) - *((__int16 *)result + 4454) > *(__int16 *)&v4[v2 + 2])
    {
      ++v3;
      v2 += 4LL;
      if (v1 == v3) {
        goto LABEL_5;
      }
    }

    if ((_DWORD)v3)
    {
      result[147] = v1 - v3;
      return j__memmove(v4, &v4[v2], 4 * (int)v1 - (int)v2);
    }
  }

  return result;
}

void sub_100065B84(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 544) == 5)
  {
    sub_100065DC8(a1);
  }

  else
  {
    int v2 = *(_DWORD *)(a1 + 608) << 8;
    if (*(int *)(a1 + 588) <= 0)
    {
      LODWORD(v4) = 0;
      unsigned int v11 = 0;
      uint64_t v8 = (int *)(a1 + 612);
      *(_DWORD *)(a1 + 612) = 0;
    }

    else
    {
      uint64_t v3 = 0LL;
      uint64_t v4 = 0LL;
      do
      {
        uint64_t v5 = *(void *)(a1 + 576);
        uint64_t v7 = *(void *)(*(void *)(a1 + 592) + 8LL * (v4 >> 8)) + 24LL * v4;
        *(_WORD *)(v7 + 14) = *(_WORD *)(v5 + v3);
        *(_WORD *)(v7 + 16) = 0x4000;
        ++v4;
        v3 += 4LL;
      }

      while (v4 < *(int *)(a1 + 588));
      uint64_t v8 = (int *)(a1 + 612);
      *(_DWORD *)(a1 + 612) = v4;
      if ((_DWORD)v4)
      {
        sub_1000663C8(a1, 0, (v4 - 1));
        int v9 = *(_DWORD *)(a1 + 612);
        if (v9 < 2)
        {
          unsigned int v11 = 1;
        }

        else
        {
          uint64_t v10 = **(void **)(a1 + 592);
          unsigned int v11 = 1;
          for (int i = 1; i < v9; ++i)
          {
            uint64_t v13 = *(void *)(a1 + 592);
            uint64_t v14 = *(void *)(v13 + 8LL * (i >> 8));
            if (*(unsigned __int16 *)(v14 + 24LL * i + 14) != *(unsigned __int16 *)(v10 + 14))
            {
              uint64_t v15 = (__int128 *)(v14 + 24LL * i);
              uint64_t v10 = *(void *)(v13 + 8LL * (v11 >> 8)) + 24LL * v11;
              __int128 v16 = *v15;
              *(void *)(v10 + 16) = *((void *)v15 + 2);
              *(_OWORD *)uint64_t v10 = v16;
              ++v11;
              int v9 = *v8;
            }
          }
        }

        *uint64_t v8 = v11;
      }

      else
      {
        unsigned int v11 = 0;
      }
    }

    *(_DWORD *)(*(void *)(*(void *)(a1 + 592) + 8LL * (v11 >> 8)) + 24LL * v11 + 14) = 0xFFFF;
    if (*(_DWORD *)(a1 + 9280))
    {
      uint64_t v17 = *v8;
      if ((int)v17 >= 1)
      {
        uint64_t v18 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          uint64_t v18 = *(void *)(qword_1000FDCC0 + 3616);
        }
        if (v18 >= v17)
        {
          uint64_t v19 = 0LL;
          uint64_t v20 = *(void *)(a1 + 376);
          *(_DWORD *)(a1 + 672) = -1;
          do
          {
            *(_WORD *)(*(void *)(a1 + 656) + 2 * v19) = sub_1000BB868( v20,  *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 592)
                                                                                            + 8LL
                                                                                            * (v19 >> 8))
                                                                                + 24LL * v19
                                                                                + 14),
                                                            0LL);
            ++v19;
          }

          while (v19 < *(int *)(a1 + 612));
        }
      }
    }
  }

void sub_100065DC8(uint64_t a1)
{
  int v2 = (__int16 *)(a1 + 8910);
  if (*(int *)(a1 + 588) <= 0)
  {
    uint64_t v14 = 0LL;
    int v20 = 0;
    uint64_t v5 = (int *)(a1 + 9224);
    *(_DWORD *)(a1 + 9224) = 0;
    uint64_t v21 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_35;
    }
    goto LABEL_31;
  }

  uint64_t v3 = 0LL;
  int v4 = 0;
  uint64_t v5 = (int *)(a1 + 9224);
  do
  {
    uint64_t v7 = *(void *)(a1 + 576);
    uint64_t v8 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      size_t v6 = v4;
      if (*(void *)(qword_1000FDCC0 + 4064) <= v4) {
        goto LABEL_10;
      }
    }

    else
    {
      size_t v6 = v4;
      if (v4 >= 0LL)
      {
LABEL_10:
        *uint64_t v5 = v4;
        if (v4)
        {
          qsort(*(void **)(a1 + 9216), v6, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100066540);
          int v9 = *(_DWORD *)(a1 + 9224);
          if (v9 < 2)
          {
            LODWORD(v10) = 0;
          }

          else
          {
            LODWORD(v10) = 0;
            uint64_t v11 = *(void *)(a1 + 9216);
            for (uint64_t i = 1LL; i < v9; ++i)
            {
              int v13 = *(unsigned __int16 *)(v11 + 2 * i);
              if (v13 != *(unsigned __int16 *)(v11 + 2LL * (int)v10))
              {
                uint64_t v10 = (int)v10 + 1LL;
                *(_WORD *)(v11 + 2 * v10) = v13;
                int v9 = *v5;
              }
            }
          }

          int v4 = v10 + 1;
          *uint64_t v5 = v10 + 1;
          uint64_t v8 = qword_1000FDCC0;
        }

        if (v8)
        {
          size_t v6 = v4;
          if (*(void *)(v8 + 4064) <= v4) {
            break;
          }
        }

        else
        {
          size_t v6 = v4;
          if (v4 >= 0LL) {
            break;
          }
        }

        uint64_t v7 = *(void *)(a1 + 576);
      }
    }

    *(_WORD *)(*(void *)(a1 + 9216) + 2 * v6) = *(_WORD *)(v7 + 4 * v3);
    ++v4;
    ++v3;
  }

  while (v3 < *(int *)(a1 + 588));
  *uint64_t v5 = v4;
  if (!v4)
  {
    uint64_t v14 = 0LL;
    int v20 = 0;
    uint64_t v21 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_35;
    }
LABEL_31:
    if (v14 >= 0) {
      goto LABEL_36;
    }
    goto LABEL_37;
  }

  uint64_t v14 = v4;
  qsort(*(void **)(a1 + 9216), v4, 2uLL, (int (__cdecl *)(const void *, const void *))sub_100066540);
  int v15 = *(_DWORD *)(a1 + 9224);
  if (v15 < 2)
  {
    LODWORD(v16) = 0;
  }

  else
  {
    LODWORD(v16) = 0;
    uint64_t v17 = *(void *)(a1 + 9216);
    for (uint64_t j = 1LL; j < v15; ++j)
    {
      int v19 = *(unsigned __int16 *)(v17 + 2 * j);
      if (v19 != *(unsigned __int16 *)(v17 + 2LL * (int)v16))
      {
        uint64_t v16 = (int)v16 + 1LL;
        *(_WORD *)(v17 + 2 * v16) = v19;
        int v15 = *v5;
      }
    }
  }

  int v20 = v16 + 1;
  *uint64_t v5 = v16 + 1;
  uint64_t v21 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_31;
  }
LABEL_35:
  if (*(void *)(v21 + 4064) <= v14) {
LABEL_36:
  }
    *uint64_t v5 = --v20;
LABEL_37:
  if ((!v21 || !*(_DWORD *)(v21 + 4544))
    && !sub_100026070((uint64_t *)(a1 + 680), *(_DWORD *)(a1 + 8872), *(void *)(a1 + 9216), v20, v2[145]))
  {
    *(_DWORD *)(a1 + 552) = 3;
  }

uint64_t sub_10006605C(uint64_t result, __int16 a2, __int16 a3)
{
  uint64_t v3 = *(int *)(result + 588);
  if ((int)v3 < *(_DWORD *)(result + 584))
  {
    int v4 = (_WORD *)(*(void *)(result + 576) + 4 * v3);
    _WORD *v4 = a2;
    v4[1] = a3;
    ++*(_DWORD *)(result + 588);
  }

  return result;
}

uint64_t sub_10006608C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 9076) + *(__int16 *)(a1 + 9048));
}

uint64_t sub_1000660A0(uint64_t result, int a2)
{
  int v2 = qword_1000FDCC0;
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1648) && !*(_DWORD *)(result + 632))
  {
    *(_DWORD *)(result + 632) = 1;
  }

  else if (*(_DWORD *)(result + 8892))
  {
    int v3 = *(_DWORD *)(result + 552);
    BOOL v4 = v3 == 3 || v3 == 5;
    if (!v4 && a2 <= 0x3FFFFFFF)
    {
      int v6 = *(__int16 *)(result + 9048);
      if (qword_1000FDCC0) {
        int v2 = *(_DWORD *)(qword_1000FDCC0 + 5224);
      }
      int v7 = *(_DWORD *)(result + 9076) + v6 - (v2 + a2);
      if (v7 >= 1)
      {
        __int16 v8 = *(_WORD *)(result + 9060) - v7 + v6;
      }
    }
  }

  return result;
}

uint64_t sub_10006613C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 9080) = a2;
  return result;
}

BOOL sub_100066144(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 9184) == 0;
}

uint64_t sub_100066188(uint64_t a1)
{
  return *(__int16 *)(a1 + 8992);
}

uint64_t sub_100066194(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8896) = a2;
  return result;
}

uint64_t sub_10006619C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  if (a2 || (result = sub_10002BA84(a1 + 680, *(_DWORD *)(a1 + 8872)), (uint64_t v4 = result) != 0))
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t result = sub_100039044(a1, v4, 0LL, 0LL, 3LL, 0LL, (int *)&v13 + 1, (int *)&v13, (int *)&v12 + 1, (int *)&v12);
    if ((_DWORD)result)
    {
      uint64_t result = sub_10009AE4C(*(void *)(a1 + 9256), SHIDWORD(v12), v12);
      if ((_DWORD)result) {
        return sub_100035418(v4, *(void *)(a1 + 9256), a3, v7, v8, v9, v10, v11);
      }
    }
  }

  return result;
}

uint64_t sub_100066240(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(_DWORD *)(a1 + 560)) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(a1 + 9296);
  if (v7)
  {
    if (*(int *)(a1 + 9304) >= 1)
    {
      uint64_t v8 = 0LL;
      do
      {
        uint64_t v9 = *(void *)(a1 + 9296);
        uint64_t v10 = *(void *)(v9 + 8 * v8);
        if (v10)
        {
          sub_10002613C(v10);
          uint64_t v9 = *(void *)(a1 + 9296);
        }

        *(void *)(v9 + 8 * v8++) = 0LL;
      }

      while (v8 < *(int *)(a1 + 9304));
      uint64_t v7 = *(void *)(a1 + 9296);
    }

    sub_1000C0EF8(v7);
    *(void *)(a1 + 9296) = 0LL;
    *(_DWORD *)(a1 + 9304) = 0;
  }

  uint64_t v11 = *(void *)(a1 + 9288);
  if (a1 + 680 != v11 && v11 != 0)
  {
    sub_1000C0EF8(v11);
    *(void *)(a1 + 9288) = 0LL;
  }

  uint64_t v13 = *(void *)(a1 + 9256);
  if (!v13) {
    return 1LL;
  }
  uint64_t result = sub_10009BE24(v13, a2, a3);
  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

uint64_t sub_100066318( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(_DWORD **)(a1 + 9256);
  if (!v8) {
    return 1LL;
  }
  uint64_t result = sub_10009C0AC(v8, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

uint64_t sub_10006633C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (a5) {
    return sub_10006D510(a1, a2, a3, a4);
  }
  return sub_100066624(a1, a2, a3, a4);
}

uint64_t sub_1000663C8(uint64_t a1, int a2, uint64_t a3)
{
  while (1)
  {
    uint64_t v3 = a3;
    uint64_t v4 = a1;
    uint64_t v5 = *(void *)(a1 + 592);
    unsigned int v6 = *(unsigned __int16 *)(*(void *)(v5 + 8LL * ((a3 + a2) >> 9))
    unsigned int v7 = a3;
    unsigned int v8 = a2;
LABEL_2:
    unsigned int v9 = v8 + 1;
    unsigned int v10 = v7 - v8;
    do
    {
      unsigned int v11 = v8;
      unsigned int v12 = v9;
      LODWORD(result) = v10;
      uint64_t v14 = *(void *)(v5 + 8LL * (v8 >> 8)) + 24LL * v8;
      ++v8;
      ++v9;
      --v10;
    }

    while (*(unsigned __int16 *)(v14 + 14) < v6);
    ++v7;
    do
    {
      --v7;
      int v15 = result;
      uint64_t v16 = *(void *)(v5 + 8LL * (v7 >> 8)) + 24LL * v7;
      unsigned int v17 = *(unsigned __int16 *)(v16 + 14);
      uint64_t result = (result - 1);
    }

    while (v17 > v6);
    if (v11 == v7)
    {
      unsigned int v7 = v8 - 1;
    }

    else
    {
      do
      {
        if (*(unsigned __int16 *)(v14 + 14) != v17)
        {
          __int128 v18 = *(_OWORD *)v14;
          uint64_t v19 = *(void *)(v14 + 16);
          uint64_t v20 = *(void *)(v16 + 16);
          *(_OWORD *)uint64_t v14 = *(_OWORD *)v16;
          *(void *)(v14 + 16) = v20;
          *(_OWORD *)uint64_t v16 = v18;
          *(void *)(v16 + 16) = v19;
          uint64_t v5 = *(void *)(v4 + 592);
          unsigned int v8 = v12 - 1;
          goto LABEL_2;
        }

        uint64_t v14 = *(void *)(v5 + 8LL * (v12 >> 8)) + 24LL * v12;
        ++v12;
        --v15;
      }

      while (v15);
      if ((int)(v7 - 1) > a2) {
LABEL_12:
      }
        uint64_t result = sub_1000663C8(v4);
    }

    a2 = v7 + 1;
    a1 = v4;
    a3 = v3;
  }

uint64_t sub_100066540(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 - *a2;
}

uint64_t sub_100066550(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 9040) << 8;
  int v3 = *(_DWORD *)(result + 9044);
  __int16 v5 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    __int16 v5 = *(_WORD *)(qword_1000FDCC0 + 3352);
  }
  int v6 = (__int16)(v5 + *(_WORD *)(result + 9048));
  int v7 = 1 - v3;
  int v8 = *(unsigned __int16 *)(v4 + 18);
  if (v8 != 0xFFFF)
  {
LABEL_4:
    if ((qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3484)
       || v8 == *(unsigned __int16 *)(result + 9054)
       || !*(_WORD *)(v4 + 16))
      && *(__int16 *)(v4 + 24) <= v6)
    {
      *(_BYTE *)(a2 + ((*(void *)v4 >> 53) & 0x3FFLL)) = 1;
    }
  }

  while (v7)
  {
    ++v7;
    int v8 = *(unsigned __int16 *)(v4 + 18);
    if (v8 != 0xFFFF) {
      goto LABEL_4;
    }
  }

  return result;
}

uint64_t sub_100066624(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8 = (_WORD *)sub_1000C1074(9432LL);
  uint64_t v9 = (uint64_t)v8;
  if (!v8) {
    return v9;
  }
  unsigned int v10 = v8 + 4454;
  memcpy(v8, off_1000F94F8, 0x208uLL);
  *(void *)(v9 + 376) = a1;
  *(void *)(v9 + 384) = a2;
  *(_DWORD *)(v9 + 432) = a3;
  *(_DWORD *)(v9 + 560) = a4;
  int v11 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v11 = *(_DWORD *)(qword_1000FDCC0 + 5276);
  }
  *(_DWORD *)(v9 + 8896) = v11;
  *(_DWORD *)(v9 + 368) = 3;
  *(_WORD *)(v9 + 8976) = sub_100004690(a2);
  *(_DWORD *)(v9 + 556) = 0;
  uint64_t v12 = *(int *)(v9 + 432);
  int v13 = sub_10000462C(*(void *)(v9 + 384));
  *(_DWORD *)(v9 + 568) = v13;
  uint64_t v14 = sub_10006C944;
  if (v13 == 1) {
    uint64_t v14 = sub_10006B23C;
  }
  *(void *)(v9 + 9424) = v14;
  *(void *)(v9 + 592) = 0LL;
  *(_DWORD *)(v9 + 588) = 0;
  *(void *)(v9 + 576) = 0LL;
  uint64_t v15 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v16 = *(void *)(qword_1000FDCC0 + 5208) / v12;
    *(_WORD *)(v9 + 8910) = v16;
    _WORD *v10 = *(void *)(v15 + 5216) / v12 - v16;
    *(_OWORD *)(v9 + 9024) = 0u;
    *(_WORD *)(v9 + 9064) = *(void *)(v15 + 1688);
    *(_WORD *)(v9 + 9066) = *(void *)(v15 + 1456);
    *(_WORD *)(v9 + 9070) = *(void *)(v15 + 1496);
    __int16 v17 = *(_WORD *)(v15 + 1664);
  }

  else
  {
    __int16 v17 = 0;
    *(_DWORD *)unsigned int v10 = 0;
    *(_DWORD *)(v9 + 9064) = 0;
    *(_WORD *)(v9 + 9070) = 0;
    *(_OWORD *)(v9 + 9024) = 0u;
  }

  *(_WORD *)(v9 + 9072) = v17;
  *(_WORD *)(v9 + 9202) = -1;
  *(void *)(v9 + 456) = 0xFFFFFFFFLL;
  *(_DWORD *)(v9 + 9204) = 0;
  if (v15)
  {
    uint64_t v18 = sub_10009C484(*(_DWORD *)(v15 + 4120));
    *(void *)(v9 + 9000) = v18;
    if (!v18) {
      goto LABEL_34;
    }
  }

  else
  {
    uint64_t v18 = sub_10009C484(0);
    *(void *)(v9 + 9000) = v18;
    if (!v18) {
      goto LABEL_34;
    }
  }

  sub_10009C5B0(v18, *(void *)(v9 + 376));
  *(void *)(v9 + 9016) = 0LL;
  *(_DWORD *)(v9 + 8872) = 0;
  sub_10003AF54(v9);
  if (!*(void *)(v9 + 408)) {
    goto LABEL_34;
  }
  *(void *)(v9 + 9232) = sub_10005DD24();
  *(void *)(v9 + 9240) = sub_10005DD24();
  int v19 = sub_1000045F4(*(void *)(v9 + 384));
  *(void *)(v9 + 640) = sub_1000C1074(v19);
  *(void *)(v9 + 528) = sub_10006AA14;
  *(void *)(v9 + 536) = sub_10006CB6C;
  uint64_t v20 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_23;
  }
  uint64_t v21 = *(void *)(qword_1000FDCC0 + 4064);
  if (v21 < 1)
  {
LABEL_19:
    *(void *)(v9 + 9360) = *(void *)(v20 + 1520);
    uint64_t v23 = sub_1000C1074(8LL * *(void *)(v20 + 1520));
    *(void *)(v9 + 9328) = v23;
    if (!v23) {
      goto LABEL_34;
    }
    uint64_t v24 = qword_1000FDCC0 ? 2LL * *(void *)(qword_1000FDCC0 + 1520) : 0LL;
    uint64_t v26 = sub_1000C1074(v24);
    *(void *)(v9 + 9336) = v26;
    if (!v26) {
      goto LABEL_34;
    }
    uint64_t v27 = qword_1000FDCC0 ? 4LL * *(void *)(qword_1000FDCC0 + 1520) : 0LL;
    uint64_t v28 = sub_1000C1074(v27);
    *(void *)(v9 + 9344) = v28;
    if (!v28) {
      goto LABEL_34;
    }
    uint64_t v20 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
LABEL_33:
      *(_DWORD *)(v9 + 9368) = *(void *)(v20 + 1608);
      *(_DWORD *)(v9 + 9372) = *(_DWORD *)(v20 + 1616);
      return v9;
    }

    goto LABEL_24;
  }

  uint64_t v22 = sub_1000C1074(2 * v21);
  *(void *)(v9 + 9216) = v22;
  if (v22)
  {
    uint64_t v20 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_19;
    }
LABEL_23:
    *(void *)(v9 + 9360) = 0LL;
LABEL_24:
    *(void *)(v9 + 9368) = 0LL;
    return v9;
  }

uint64_t sub_10006690C(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 9016);
  if (v2)
  {
    sub_100024158(v2);
    *(void *)(a1 + 9016) = 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 640));
  sub_10005DD98(*(void *)(a1 + 9232));
  sub_10005DD98(*(void *)(a1 + 9240));
  sub_100006EFC(*(void *)(a1 + 408));
  sub_1000C1BC8(*(void *)(a1 + 592), *(unsigned int *)(a1 + 608), *(_DWORD *)(a1 + 608));
  sub_1000C1BC8(*(void *)(a1 + 600), *(unsigned int *)(a1 + 608), *(_DWORD *)(a1 + 608));
  sub_10009ACA8(*(void *)(a1 + 9256));
  sub_1000515F0(*(void *)(a1 + 9264));
  sub_1000C0EF8(*(void *)(a1 + 576));
  sub_1000C1BC8(*(void *)(a1 + 9032), *(unsigned int *)(a1 + 9040), *(_DWORD *)(a1 + 9040));
  sub_10009C54C(*(void *)(a1 + 9000));
  sub_1000C0EF8(*(void *)(a1 + 9216));
  sub_1000C0EF8(*(void *)(a1 + 9312));
  sub_1000C0EF8(*(void *)(a1 + 9328));
  sub_1000C0EF8(*(void *)(a1 + 9336));
  sub_1000C0EF8(*(void *)(a1 + 9344));
  sub_1000C0EF8(*(void *)(a1 + 9352));
  sub_1000C0EF8(*(void *)(a1 + 656));
  sub_1000C0EF8(*(void *)(a1 + 664));
  sub_1000C0EF8(*(void *)(a1 + 9192));
  sub_10002613C(*(void *)(a1 + 9384));
  return sub_1000C0EF8(a1);
}

uint64_t sub_100066A00(uint64_t a1, int a2)
{
  *(void *)(a1 + 592) = 0LL;
  if (*(_DWORD *)(a1 + 556))
  {
    sub_1000C1BC8(*(void *)(a1 + 600), *(unsigned int *)(a1 + 608), *(_DWORD *)(a1 + 608));
    *(void *)(a1 + 600) = 0LL;
    int v4 = *(_DWORD *)(a1 + 556);
    *(_DWORD *)(a1 + 608) = 0;
    if (v4)
    {
      sub_1000C0EF8(0LL);
      *(void *)(a1 + 600) = 0LL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 608) = 0;
  }

  sub_1000C1BC8(*(void *)(a1 + 9032), *(unsigned int *)(a1 + 9040), *(_DWORD *)(a1 + 9040));
  *(void *)(a1 + 9032) = 0LL;
  *(_DWORD *)(a1 + 9040) = 0;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 9192));
  *(void *)(a1 + 9192) = 0LL;
  *(_DWORD *)(a1 + 9188) = 0;
  if (a2) {
    return sub_10009AD10(*(void *)(a1 + 9256));
  }
  return result;
}

uint64_t sub_100066AAC( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10)
{
  uint64_t v109 = 0LL;
  uint64_t v110 = 0LL;
  *(_DWORD *)(a1 + 552) = 4;
  *(_DWORD *)(a1 + 544) = a6;
  *(_DWORD *)(a1 + 548) = a7;
  uint64_t v15 = a5;
  uint64_t v16 = (char *)a4;
  int v19 = *(_DWORD *)(a1 + 8896);
  if (v19)
  {
    if ((_DWORD)a6 == 5 || (_DWORD)a6 == 2) {
      goto LABEL_2;
    }
  }

  uint64_t v20 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
    if ((_DWORD)a6 != 11) {
      goto LABEL_15;
    }
LABEL_2:
    uint64_t result = 0LL;
LABEL_3:
    *(_DWORD *)(a1 + 552) = 3;
    return result;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 4452) && *(_DWORD *)(qword_1000FDCC0 + 4544)
    || (_DWORD)a6 == 11 && *(uint64_t *)(qword_1000FDCC0 + 4912) <= 0)
  {
    goto LABEL_2;
  }

LABEL_254:
                unsigned int v101 = sub_1000B3338(*(uint64_t **)(a1 + 376));
                *(_WORD *)(a1 + 9054) = sub_1000BB8B0(*(void *)(a1 + 376), v101);
                sub_10006B070(a1);
                return 1LL;
              }

                unsigned int v101 = sub_1000B3338(*(uint64_t **)(a1 + 376));
                *(_WORD *)(a1 + 9054) = sub_1000BB8B0(*(void *)(a1 + 376), v101);
                sub_100072290(a1);
                return 1LL;
              }

LABEL_96:
          LODWORD(v48) = qword_1000FDCC0;
          if (qword_1000FDCC0)
          {
            uint64_t v49 = *(void *)(qword_1000FDCC0 + 1536);
            if (v49) {
              BOOL v50 = v49 < 65534;
            }
            else {
              BOOL v50 = 0;
            }
            int v47 = v50;
            HIDWORD(v110) = *(void *)(qword_1000FDCC0 + 1536);
            LODWORD(v110) = *(void *)(qword_1000FDCC0 + 1560);
            if ((v45 & 1) != 0)
            {
              HIDWORD(v109) = *(void *)(qword_1000FDCC0 + 4488);
              uint64_t v51 = *(void *)(qword_1000FDCC0 + 4496);
LABEL_106:
              LODWORD(v109) = v51;
              goto LABEL_107;
            }

            HIDWORD(v109) = *(void *)(qword_1000FDCC0 + 4472);
            uint64_t v48 = *(void *)(qword_1000FDCC0 + 4480);
          }

          else
          {
            int v47 = 0;
            LODWORD(v51) = 0;
            uint64_t v110 = 0LL;
            HIDWORD(v109) = 0;
            if ((v45 & 1) != 0) {
              goto LABEL_106;
            }
          }

          char v52 = 0;
          LODWORD(v109) = v48;
          goto LABEL_110;
        }
      }

      else
      {
        int v42 = a10;
        if (!v38 || (int v42 = a10, v46 != 5))
        {
LABEL_85:
          uint64_t v43 = (_DWORD *)(a1 + 8888);
          *(_DWORD *)(a1 + 8888) = v42;
          int v44 = (_DWORD *)(a1 + 8884);
          *(_DWORD *)(a1 + 8884) = a10;
          if (v38)
          {
            char v45 = 0;
            goto LABEL_96;
          }

          goto LABEL_90;
        }
      }

      char v45 = 0;
      uint64_t v43 = (_DWORD *)(a1 + 8888);
      *(_DWORD *)(a1 + 8888) = 1;
      int v44 = (_DWORD *)(a1 + 8884);
      *(_DWORD *)(a1 + 8884) = a10;
      goto LABEL_96;
    }

          LODWORD(v48) = qword_1000FDCC0;
          if (qword_1000FDCC0)
          {
            uint64_t v49 = *(void *)(qword_1000FDCC0 + 1536);
            if (v49) {
              BOOL v50 = v49 < 65534;
            }
            else {
              BOOL v50 = 0;
            }
            int v47 = v50;
            HIDWORD(v110) = *(void *)(qword_1000FDCC0 + 1536);
            LODWORD(v110) = *(void *)(qword_1000FDCC0 + 1560);
            if ((v45 & 1) != 0)
            {
              HIDWORD(v109) = *(void *)(qword_1000FDCC0 + 4488);
              uint64_t v51 = *(void *)(qword_1000FDCC0 + 4496);
LABEL_106:
              LODWORD(v109) = v51;
              goto LABEL_107;
            }

            HIDWORD(v109) = *(void *)(qword_1000FDCC0 + 4472);
            uint64_t v48 = *(void *)(qword_1000FDCC0 + 4480);
          }

          else
          {
            int v47 = 0;
            LODWORD(v51) = 0;
            uint64_t v110 = 0LL;
            HIDWORD(v109) = 0;
            if ((v45 & 1) != 0) {
              goto LABEL_106;
            }
          }

          char v52 = 0;
          LODWORD(v109) = v48;
          goto LABEL_110;
        }
      }

      else
      {
        int v42 = a10;
        if (!v38 || (int v42 = a10, v46 != 5))
        {
LABEL_85:
          uint64_t v43 = (_DWORD *)(a1 + 8888);
          *(_DWORD *)(a1 + 8888) = v42;
          int v44 = (_DWORD *)(a1 + 8884);
          *(_DWORD *)(a1 + 8884) = a10;
          if (v38)
          {
            char v45 = 0;
            goto LABEL_96;
          }

          goto LABEL_90;
        }
      }

      char v45 = 0;
      uint64_t v43 = (_DWORD *)(a1 + 8888);
      *(_DWORD *)(a1 + 8888) = 1;
      int v44 = (_DWORD *)(a1 + 8884);
      *(_DWORD *)(a1 + 8884) = a10;
      goto LABEL_96;
    }

      switch(v379[7 * (int)v111 + 3])
      {
        case 0:
        case 8:
          v370 = v111;
          uint64_t v132 = &v379[7 * (int)v111];
          uint64_t v133 = v132[2];
          v387 = v132 + 2;
          uint64_t v134 = sub_1000B37CC(a1, v119, 0LL, 0LL, v133, 30LL, (uint64_t)v384);
          if (v134 < 1)
          {
            LOBYTE(v394) = 0;
            uint64_t v136 = -1;
LABEL_412:
            sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v136,  *v118,  v133,  0,  v394);
            ++v392;
            if ((int)v133 > *v387)
            {
              v334 = v117 + 1;
              LODWORD(v111) = v370;
              if (!v379[7 * v117 + 7]) {
                goto LABEL_427;
              }
              v335 = (int *)v365 + 7 * (int)v117;
              int v155 = 1LL;
              do
              {
                v334 = ++v155 + v117;
                v336 = *v335;
                v335 += 7;
              }

              while (v336);
              goto LABEL_410;
            }

            LODWORD(v111) = v370;
            goto LABEL_79;
          }

          v394 = 0;
          uint64_t v135 = v134 + 1LL;
          uint64_t v136 = -1;
          uint64_t v137 = v133;
          while (2)
          {
            while (1)
            {
              uint64_t v138 = (v135 - 2);
              sub_1000B33F8((char *)a1, v384[v138], (uint64_t)v383, v382);
              uint64_t v139 = sub_1000CC52C((unint64_t)v383);
              if (v139 < v137) {
                break;
              }
              LODWORD(v133) = v139;
              uint64_t v140 = v139;
              uint64_t v141 = v139 - 1LL;
              if (sub_1000CBA60(*(unsigned __int16 *)&v119[2 * v141])
                || sub_1000CB890(*(unsigned __int16 *)&v119[2 * v141])
                && sub_1000CB890(*(unsigned __int16 *)&v119[2 * v140]))
              {
                break;
              }

              if (sub_1000CBA3C(*(unsigned __int16 *)&v119[2 * v141])
                && sub_1000CBA3C(*(unsigned __int16 *)&v119[2 * v140]))
              {
                break;
              }

              uint64_t v142 = sub_1000CD3EC(v119, v383, v133);
              if ((_DWORD)v133 != v137) {
                break;
              }
              if (v394 && v142)
              {
                v394 = 1;
                LODWORD(v133) = v137;
                if (--v135 <= 1) {
                  goto LABEL_412;
                }
              }

              else
              {
LABEL_114:
                uint64_t v136 = v384[v138];
                v394 = v142 == 0;
                --v135;
                uint64_t v137 = v133;
                if (v135 <= 1) {
                  goto LABEL_412;
                }
              }
            }

            LODWORD(v133) = v137;
            if (--v135 <= 1) {
              goto LABEL_412;
            }
            continue;
          }

        case 2:
          if (*(_DWORD *)(*(void *)(a1[7] + 216) + 536LL))
          {
            unsigned int v167 = &v379[7 * (int)v111];
            uint64_t v170 = v167[4];
            uint64_t v169 = v167 + 4;
            LODWORD(v168) = v170;
            if (v170 >= 1)
            {
              uint64_t v171 = 0LL;
              uint64_t v172 = 0;
              int v173 = v384;
              v396 = v169;
              v372 = v111;
              while (v116[7 * v171] != 2)
              {
                int v174 = v171 + 1;
LABEL_158:
                uint64_t v171 = v174;
              }

              int v175 = &v116[7 * v171];
              uint64_t v178 = v175[2];
              int v177 = v175 + 2;
              int v176 = v178;
              if ((v178 - 1) >= 3)
              {
                if (v176 != 4) {
                  goto LABEL_171;
                }
                if ((int)sub_1000B3680(a1, L"0", 1LL, 1LL, 0LL, 30, (uint64_t)v173) < 1)
                {
                  uint64_t v181 = v172;
                  else {
                    int v186 = *v173;
                  }
                  int32x4_t v111 = (uint64_t)a5;
                  uint64_t v182 = v380;
                  uint64_t v183 = (uint64_t)a9;
                  uint64_t v185 = v376;
                  int v184 = a3;
                  sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v186,  v116[7 * v171 + 1],  1,  0,  0);
                }

                else
                {
                  uint64_t v181 = v172;
                  v360 = *v173;
                  uint64_t v182 = v380;
                  uint64_t v183 = (uint64_t)a9;
                  int v184 = a3;
                  uint64_t v185 = v376;
                  int32x4_t v111 = (uint64_t)a5;
                  sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v360,  v116[7 * v171 + 1],  1,  0,  1);
                }

                int v180 = v181 + 1;
                __int16 v187 = &v116[7 * v171];
                sub_1000CC548(v401, &v390[v187[1] + 1], *v177);
                uint64_t v172 = sub_1000AF7E0( a1,  v182,  v111,  v185,  (uint64_t)a7,  v183,  (int *)&v400 + 1,  v184,  (unint64_t)v401,  v187[1] + 1);
                int v173 = v384;
                LODWORD(v111) = v372;
                uint64_t v169 = v396;
              }

              else
              {
                uint64_t v179 = &v116[7 * v171];
                sub_1000CC548(v401, &v390[v179[1]], v176 + 1);
                int v180 = sub_1000AF7E0( a1,  v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  (unint64_t)v401,  v179[1]);
              }

              v172 += v180;
              LODWORD(v168) = *v169;
LABEL_171:
              int v174 = v171 + 1;
              if (v171 + 1 < (int)v168)
              {
                if ((int)sub_1000B3680(a1, L",", 1LL, 1LL, 0LL, 30, (uint64_t)v173) < 1)
                {
                  else {
                    __int16 v188 = *v173;
                  }
                  v362 = (*v177 + v116[7 * v171 + 1]);
                  sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  v188,  v362,  SHIDWORD(v362),  0,  0);
                }

                else
                {
                  v361 = (*v177 + v116[7 * v171 + 1]);
                  sub_1000B8938( v380,  (uint64_t)a5,  v376,  (uint64_t)a7,  0LL,  (uint64_t)a9,  (int *)&v400 + 1,  a3,  *v173,  v361,  SHIDWORD(v361),  0,  1);
                }

                uint64_t v169 = v396;
                ++v172;
                LODWORD(v168) = *v396;
              }

              goto LABEL_158;
            }

LABEL_130:
    sub_1000C0EF8(*(void *)(a1 + 9288));
    uint64_t result = 0LL;
    *(void *)(a1 + 9288) = 0LL;
  }

  return result;
}

    sub_1000C0EF8(*(void *)(a1 + 9288));
    uint64_t result = 0LL;
    *(void *)(a1 + 9288) = 0LL;
  }

  return result;
}

    uint64_t v21 = 0LL;
    goto LABEL_131;
  }

  return 0LL;
}

void sub_100067780(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 9040))
  {
    if (*(_DWORD *)(a1 + 9008))
    {
      uint64_t v2 = *(void *)(a1 + 9016);
      if (v2) {
        sub_100024180(v2);
      }
    }

    sub_1000B25A8(a1 + 9084);
    if (*(_DWORD *)(a1 + 9180)) {
      sub_1000B25A8(a1 + 9132);
    }
    unsigned int v7 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      unsigned int v7 = *(_DWORD *)(qword_1000FDCC0 + 1072);
    }
    if (*(_DWORD *)(a1 + 548) == 1) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_100025FA8(a1 + 680, *(unsigned int *)(a1 + 8872), v8, *(void *)(a1 + 9256), v3, v4, v5, v6);
    sub_10006B070(a1);
  }

uint64_t sub_100067818( uint64_t result, const void *a2, int *a3, int32x4_t a4, double a5, int32x4_t a6, int32x4_t a7, int8x16_t a8, int8x16_t a9)
{
  uint64_t v11 = result;
  uint64_t v12 = (unsigned __int16 *)(result + 8976);
  int v82 = 0;
  uint64_t v13 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1648) && !*(_DWORD *)(result + 632))
    {
      BOOL v15 = 1;
      goto LABEL_145;
    }

    if (!*(_DWORD *)(qword_1000FDCC0 + 1680) || *(__int16 *)(result + 9200) < 1)
    {
LABEL_8:
      int v82 = *a3;
      if (*(_DWORD *)(v13 + 1464))
      {
        if (*(_DWORD *)(v11 + 628))
        {
          uint64_t result = (uint64_t)sub_100064BD4(v11, a2, a3);
          if (v12[41] != 0x4000) {
            goto LABEL_20;
          }
LABEL_18:
          unsigned __int16 v16 = v12[112];
          if (v16)
          {
            *(_DWORD *)(v11 + 9076) = 0x40000000;
LABEL_30:
            v12[112] = v16 + 1;
            goto LABEL_140;
          }

          goto LABEL_20;
        }

        uint64_t result = sub_100064BC4(v11, &v82);
        a2 = (const void *)result;
      }

      if (v12[41] != 0x4000) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }

    uint64_t v14 = sub_100064BC4(result, &v82);
    uint64_t result = sub_100015698(*(void *)(v11 + 384), (uint64_t)a2, v14);
    uint64_t v13 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      *(_DWORD *)(v11 + 628) = *(void *)(qword_1000FDCC0 + 1472) < (int)result;
      goto LABEL_8;
    }

    *(_DWORD *)(v11 + 628) = (int)result > 0;
  }

  int v82 = *a3;
  if (v12[41] == 0x4000) {
    goto LABEL_18;
  }
LABEL_20:
  if (a2) {
    sub_100006F08( *(void *)(v11 + 384),  (uint64_t)a2,  (__int16 *)&v82,  *(void *)(v11 + 408),  v12[112],  *(_DWORD *)(v11 + 628),  a4,  a5,  a6,  a7,  a8,  a9);
  }
  sub_10009C660(*(void *)(v11 + 9000));
  int v17 = (__int16)v12[36];
  v12[41] = v17;
  *(_DWORD *)(v11 + 9076) += v17;
  *((_DWORD *)v12 + 18) = 1073758208;
  v12[38] = -1;
  if (qword_1000FDCC0
    && *(_DWORD *)(qword_1000FDCC0 + 4544)
    && !sub_100026070((uint64_t *)(v11 + 680), *(_DWORD *)(v11 + 8872), 0LL, 0, v12[112]))
  {
    *(_DWORD *)(v11 + 552) = 3;
    sub_10005DDC8(*(int **)(v11 + 9240));
    if (v12[41] == 0x4000) {
      goto LABEL_29;
    }
  }

  else
  {
    sub_10005DDC8(*(int **)(v11 + 9240));
    if (v12[41] == 0x4000)
    {
LABEL_29:
      uint64_t result = sub_1000070E0(*(void *)(v11 + 384), (__int16)v12[112], (_DWORD *)(v11 + 436));
      *(_DWORD *)(v11 + 9076) = 0x40000000;
      *(_DWORD *)(v11 + 552) = 5;
      unsigned __int16 v16 = v12[112];
      goto LABEL_30;
    }
  }

  (*(void (**)(uint64_t))(v11 + 520))(v11);
  if (*(_DWORD *)(v11 + 552) == 3)
  {
    uint64_t result = sub_1000070E0(*(void *)(v11 + 384), (__int16)v12[112], (_DWORD *)(v11 + 436));
    goto LABEL_140;
  }

  BOOL v18 = sub_10003C6A4((_DWORD **)(v11 + 680), *(_DWORD *)(v11 + 8872));
  int v19 = *(_DWORD *)(v11 + 9044);
  int v20 = *(_DWORD *)(v11 + 9208);
  if (v18)
  {
    if (v19 > v20)
    {
      uint64_t v21 = *(int **)(v11 + 9232);
      int v22 = (char *)*((void *)v21 + 1);
      uint64_t v23 = *v21;
      bzero(v22, 2 * v23);
      int v24 = *(_DWORD *)(v11 + 9044);
      if (v24 >= 2)
      {
        int v25 = 0;
        do
        {
          int v26 = *(__int16 *)(*(void *)(*(void *)(v11 + 9032) + 8LL * (v25 >> 8))
                           + 32LL * v25
                           + 24);
          if ((int)v23 > v26)
          {
            uint64_t v27 = 2LL * ((__int16)v26 & ~((__int16)v26 >> 31));
            ++*(_WORD *)&v22[v27];
            int v24 = *(_DWORD *)(v11 + 9044);
          }

          ++v25;
        }

        while (v25 < v24 - 1);
      }
    }
  }

  else if (v19 > v20)
  {
    uint64_t v28 = *(int **)(v11 + 9232);
    uint64_t v29 = (void *)*((void *)v28 + 1);
    uint64_t v30 = *v28;
    bzero(v29, 2 * v30);
    int v31 = *(_DWORD *)(v11 + 9044);
    if (v31 >= 2)
    {
      int v32 = 0;
      do
      {
        int v33 = *(__int16 *)(*(void *)(*(void *)(v11 + 9032) + 8LL * (v32 >> 8))
                         + 32LL * v32
                         + 24);
        if ((int)v30 > v33)
        {
          ++*((_WORD *)v29 + v33);
          int v31 = *(_DWORD *)(v11 + 9044);
        }

        ++v32;
      }

      while (v32 < v31 - 1);
    }
  }

  (*(void (**)(uint64_t))(v11 + 528))(v11);
  if (*(_BYTE *)(v11 + 424)) {
    sub_100039B9C(v11, v34, v35, v36, v37, v38, v39, v40);
  }
  sub_1000070E0(*(void *)(v11 + 384), (__int16)v12[112], (_DWORD *)(v11 + 436));
  if (!qword_1000FDCC0
    || !*(_DWORD *)(qword_1000FDCC0 + 1492)
    || sub_100025C94((unsigned int *)(v11 + 9084)) != 3)
  {
    BOOL v50 = v12[104] == *v12;
    goto LABEL_78;
  }

  int v41 = 0;
  int v42 = *(_DWORD *)(v11 + 9040) << 8;
  unsigned int v43 = v42 - *(_DWORD *)(v11 + 9044);
  uint64_t v44 = *(void *)(v11 + 9032);
  uint64_t v45 = *(void *)(v44 + 8LL * (v43 >> 8)) + 32LL * -*(_BYTE *)(v11 + 9044);
  signed __int16 v81 = v12[2];
  __int16 v46 = 0x4000;
  unsigned __int16 v47 = -1;
  while (1)
  {
    int v48 = *(unsigned __int16 *)(v45 + 18);
    if (v48 != 0xFFFF) {
      break;
    }
    if (v42 - 1 == v43) {
      goto LABEL_115;
    }
    ++v43;
LABEL_62:
    uint64_t v45 = *(void *)(v44 + 8LL * (v43 >> 8)) + 32LL * v43;
  }

  if (v48 != v47)
  {
    int v41 = sub_10009B978(*(void *)(v11 + 9256), *(unsigned __int16 *)(v45 + 18));
    unsigned __int16 v47 = v48;
  }

  if (v41 == *(unsigned __int8 *)(v45 + 26))
  {
  }

  else
  {
    int v49 = *(__int16 *)(v45 + 24);
    if (v49 >= v81) {
      LOWORD(v49) = v81;
    }
    signed __int16 v81 = v49;
  }

  if (++v43 != v42)
  {
    uint64_t v44 = *(void *)(v11 + 9032);
    goto LABEL_62;
  }

LABEL_115:
  BOOL v50 = v46 <= v81;
LABEL_78:
  uint64_t result = sub_1000B25CC((unsigned int *)(v11 + 9084), v50);
  if (*(_DWORD *)(v11 + 9180)) {
    uint64_t result = sub_1000B25CC((unsigned int *)(v11 + 9132), v50);
  }
  if (*(_DWORD *)(v11 + 544) != 11) {
    goto LABEL_86;
  }
  uint64_t v51 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v51 = *(void *)(qword_1000FDCC0 + 4912);
  }
  if (v51 < (__int16)(v12[2] - v12[36]))
  {
    if (*(_DWORD *)(v11 + 552) != 6) {
      *(_DWORD *)(v11 + 552) = 6;
    }
LABEL_87:
    uint64_t result = sub_1000B2750((_DWORD *)(v11 + 9084));
    if ((_DWORD)result)
    {
LABEL_88:
      int v58 = 0;
      BOOL v59 = 0;
      goto LABEL_102;
    }

    uint64_t v83 = 0LL;
    if (*(_DWORD *)(v11 + 9180))
    {
      if (sub_1000B2750((_DWORD *)(v11 + 9132)))
      {
        uint64_t result = sub_10009D1EC(*(void *)(v11 + 9000), &v83, (_DWORD *)&v83 + 1);
        if (*(_DWORD *)(v11 + 9076) + (__int16)v12[36] == HIDWORD(v83) && (_DWORD)v83 != -1)
        {
          if (!*(_DWORD *)(v11 + 8880)) {
            goto LABEL_88;
          }
          if (v12[2] == 0x4000)
          {
            int v60 = *(_DWORD *)(v11 + 9040) << 8;
            int v61 = *(_DWORD *)(v11 + 9044);
            if (v60 - v61 >= v60 - 1)
            {
LABEL_100:
              uint64_t result = sub_10006BDF0(v11);
              if ((_DWORD)result) {
                goto LABEL_88;
              }
            }

            else
            {
              int v62 = -v61;
              while (1)
              {
                uint64_t v64 = *(unsigned int **)(v11 + 8 * ((v63 >> 53) & 0x3FF) + 680);
                if (++v62 == -1) {
                  goto LABEL_100;
                }
              }
            }
          }
        }
      }
    }

    uint64_t result = sub_1000398FC(v11);
    int v58 = 0;
    BOOL v59 = result == 0;
    if ((_DWORD)result)
    {
LABEL_102:
      if (qword_1000FDCC0)
      {
        int v58 = *(_DWORD *)(qword_1000FDCC0 + 5364);
        if (v58)
        {
          uint64_t result = sub_10003941C(v11, *(unsigned int *)(qword_1000FDCC0 + 5376), v52, v53, v54, v55, v56, v57);
          int v58 = result != 0;
        }
      }
    }

    if ((v59 | v58) == 1)
    {
      if (*(_DWORD *)(v11 + 552) != 6)
      {
        int v65 = 1;
        goto LABEL_109;
      }
    }

    else
    {
      int v65 = 2;
LABEL_109:
      *(_DWORD *)(v11 + 552) = v65;
    }

    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 816) && v12[2] == 0x4000)
    {
      unsigned int v66 = (*(_DWORD *)(v11 + 9040) << 8) - *(_DWORD *)(v11 + 9044);
      uint64_t v67 = *(void *)(v11 + 9032);
      uint64_t v68 = *(void *)(v67 + 8LL * (v66 >> 8));
      uint64_t v69 = -*(_BYTE *)(v11 + 9044);
      uint64_t v70 = v68 + 32 * v69;
      if (*(_DWORD *)(v11 + 620) >= (int)*(unsigned __int16 *)(v70 + 18))
      {
        __int16 v72 = 0x4000;
        __int16 v71 = 0x4000;
        do
        {
          uint64_t result = sub_10002BA64(*(void *)(v11 + 8 * ((*(void *)v70 >> 53) & 0x3FFLL) + 680), *(void *)v70);
          int v73 = *(__int16 *)(v68 + 32 * v69 + 24);
          __int16 v74 = v71;
          if (v73 < v71) {
            __int16 v74 = *(_WORD *)(v68 + 32 * v69 + 24);
          }
          __int16 v75 = v72;
          if (v73 < v72) {
            __int16 v75 = *(_WORD *)(v68 + 32 * v69 + 24);
          }
          if ((_DWORD)result) {
            __int16 v71 = v74;
          }
          ++v66;
          uint64_t v67 = *(void *)(v11 + 9032);
          uint64_t v68 = *(void *)(v67 + 8LL * (v66 >> 8));
          if (!(_DWORD)result) {
            __int16 v72 = v75;
          }
          uint64_t v69 = v66;
          uint64_t v70 = v68 + 32LL * v66;
        }

        while (*(_DWORD *)(v11 + 620) >= (int)*(unsigned __int16 *)(v70 + 18));
      }

      else
      {
        __int16 v71 = 0x4000;
        __int16 v72 = 0x4000;
      }

      while (*(__int16 *)(v70 + 18) != -1)
      {
        uint64_t v70 = *(void *)(v67 + 8LL * (v66 >> 8)) + 32LL * v66;
        ++v66;
      }

      uint64_t v76 = qword_1000FDCC0;
      if (qword_1000FDCC0) {
        uint64_t v76 = *(void *)(qword_1000FDCC0 + 1504);
      }
    }
  }

  else
  {
LABEL_86:
    if (*(_DWORD *)(v11 + 552) != 3) {
      goto LABEL_87;
    }
  }

  ++v12[112];
  int v77 = *(_DWORD *)(v11 + 9380) + 1;
  *(_DWORD *)(v11 + 9380) = v77;
  if (v77 == *(_DWORD *)(v11 + 9372))
  {
    *(_DWORD *)(v11 + 9380) = 0;
    int v78 = *(_DWORD *)(v11 + 9376);
    if (v78 + 1 == *(_DWORD *)(v11 + 9368)) {
      int v79 = 0;
    }
    else {
      int v79 = v78 + 1;
    }
    *(_DWORD *)(v11 + 9376) = v79;
  }

                ++v192;
                uint64_t v194 = v163;
              }

              while (v193 != (_DWORD)v192);
            }
          }

          v175[3].i32[0] = 0;
          v213 = (int32x2_t *)v175[4];
          int v165 = -1;
          uint64_t v214 = 3LL;
          v175[4] = 0LL;
          do
          {
            uint64_t v215 = v161[v214];
            ++v165;
            v214 += 5LL;
          }

          while (v215);
          if (v447 <= v165) {
            goto LABEL_156;
          }
          int v175 = v213;
        }

        while (v213);
        if (v163)
        {
          uint64_t v216 = v163;
          do
          {
            if (*(_DWORD *)(*(void *)(*(void *)v216 + 8LL) + 8LL * v216[1].i32[1] + 4))
            {
              int v217 = v216[2].i32[0];
              int v218 = (char *)v110 + 28 * v217;
              v220 = *((_DWORD *)v218 + 3);
              int v219 = (__int32 *)(v218 + 12);
              int v221 = v216[1].i32[0];
              if (v220 != v221 || *((_DWORD *)v110 + 7 * v217 + 4) != (_DWORD)v162 + 1 - v217)
              {
                _WORD *v219 = v221;
                *((_DWORD *)v110 + 7 * v216[2].i32[0] + 4) = v439 - v216[2].i32[0];
              }
            }

            uint64_t v216 = (int32x2_t *)v216[4];
          }

          while (v216);
        }

        uint64_t v162 = v439;
      }

      while (v439 != v422);
    }

    sub_10003991C(*(void *)(a1 + 528));
    int v32 = 0LL;
    goto LABEL_116;
  }

uint64_t sub_1000680EC(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if ((_DWORD)v2 != 1) {
    return v2;
  }
  BOOL v5 = 1;
  if (sub_1000B27FC((unsigned int *)(a1 + 9084), a2, 0) == 2)
  {
    BOOL v6 = sub_10009D1DC(*(void *)(a1 + 9000));
    if (v6) {
      uint64_t v2 = 2LL;
    }
    else {
      uint64_t v2 = 1LL;
    }
    BOOL v5 = !v6;
    if (!*(_DWORD *)(a1 + 9180)) {
      return v2;
    }
  }

  else
  {
    uint64_t v2 = 1LL;
    if (!*(_DWORD *)(a1 + 9180)) {
      return v2;
    }
  }

  if (sub_1000B27FC((unsigned int *)(a1 + 9132), a2, 0) == 2 && v5)
  {
    uint64_t v14 = 0LL;
    sub_10009D1EC(*(void *)(a1 + 9000), &v14, (_DWORD *)&v14 + 1);
    uint64_t v2 = 1LL;
    if (*(_DWORD *)(a1 + 9076) + *(__int16 *)(a1 + 9048) == HIDWORD(v14) && (_DWORD)v14 != -1)
    {
      if (*(_DWORD *)(a1 + 8880))
      {
        if (*(_WORD *)(a1 + 8980) == 0x4000)
        {
          int v8 = *(_DWORD *)(a1 + 9040) << 8;
          int v9 = *(_DWORD *)(a1 + 9044);
          if (v8 - v9 >= v8 - 1)
          {
LABEL_22:
            else {
              return 1LL;
            }
          }

          else
          {
            int v10 = -v9;
            while (1)
            {
              uint64_t v12 = *(unsigned int **)(a1 + 8 * ((v11 >> 53) & 0x3FF) + 680);
              if (++v10 == -1) {
                goto LABEL_22;
              }
            }
          }
        }
      }

      else
      {
        return 2LL;
      }
    }
  }

  return v2;
}

uint64_t sub_100068290( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5, _DWORD *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v22 = sub_10003982C(a1);
  if (v22 == 4 || v22 == 3 || v22 == 1) {
    goto LABEL_9;
  }
  unsigned int v23 = *(_DWORD *)(a1 + 544);
  BOOL v24 = v23 > 0xB;
  int v25 = (1 << v23) & 0x828;
  if (v24 || v25 == 0)
  {
    int v27 = *(_DWORD *)(a1 + 8872);
  }

  else
  {
    int v27 = *(_DWORD *)(a1 + 8872);
    if (!v27)
    {
LABEL_9:
      uint64_t result = 0LL;
LABEL_10:
      *a6 = -1;
      *a3 = 0x40000000;
      return result;
    }
  }

  uint64_t v33 = sub_10002BA84(a1 + 680, v27);
  if (*(_DWORD *)(a1 + 9320) < (int)a2)
  {
    sub_1000C0EF8(*(void *)(a1 + 9312));
    uint64_t result = sub_1000C1074(1096LL * (int)a2);
    *(void *)(a1 + 9312) = result;
    if (!result) {
      goto LABEL_10;
    }
    *(_DWORD *)(a1 + 9320) = a2;
  }

  uint64_t v68 = (_DWORD **)(a1 + 680);
  BOOL v69 = *(int *)(a1 + 8872) >= 1 && sub_100025C94(*(unsigned int **)(a1 + 680)) == 3;
  *(void *)uint64_t v70 = 0LL;
  unint64_t v34 = *(void *)(a1 + 9312);
  if (*(_DWORD *)(a1 + 9008))
  {
    uint64_t v66 = a8;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4736))
    {
      uint64_t v65 = a4;
      if (*(_DWORD *)(a1 + 556)) {
        v70[1] = sub_10006BEDC(a1, v34, a2, 0LL, v29, v30, v31, v32);
      }
      else {
        v70[1] = sub_10006C2D0(a1, (char *)v34, a2, 0);
      }
LABEL_55:
      signed int v52 = *(_DWORD *)(a1 + 8872);
      if (v52 >= 1 && (v53 = sub_100025C94(*(unsigned int **)(a1 + 680)), signed int v52 = *(_DWORD *)(a1 + 8872), v53 == 3))
      {
        sub_100024518( *(void *)(a1 + 376),  v33,  *(void *)(a1 + 9016),  (char *)v34,  &v70[1],  a2,  (uint64_t)v68,  v52,  a14);
        if (qword_1000FDCC0 && *(void *)(qword_1000FDCC0 + 1272) == 0x7FFFFFFFLL) {
          int v54 = *(_DWORD *)(a1 + 9284);
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = v65;
        uint64_t v57 = a10;
        uint64_t v56 = a9;
        sub_10003BAE8(v34, v70[1], v68, *(unsigned int *)(a1 + 8872), v54);
      }

      else
      {
        sub_100024FB4( *(void **)(a1 + 376),  v33,  *(int **)(a1 + 9016),  (char *)v34,  &v70[1],  a2,  (uint64_t)v68,  v52,  a14);
        uint64_t v55 = v65;
        uint64_t v57 = a10;
        uint64_t v56 = a9;
      }

      bzero(a7, a5);
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4592) && *(_DWORD *)(qword_1000FDCC0 + 4596))
      {
        if (*(void *)(qword_1000FDCC0 + 4104) < v70[1]) {
          v70[1] = *(void *)(qword_1000FDCC0 + 4104);
        }
        sub_10003C430(a1, 0LL, (char *)v34, &v70[1]);
      }

      if (v69) {
        sub_100063EB8(a1, v34, v70[1]);
      }
      sub_100064184(a1, v34, v70[1]);
      sub_10003B344( v34,  &v70[1],  a2,  (uint64_t)a3,  v55,  a5,  (uint64_t)a6,  (uint64_t)a7,  v66,  v56,  v57,  a11,  a12,  *(void *)(a1 + 376));
      uint64_t result = v70[1];
      *(_DWORD *)(a1 + 9324) = v70[1];
      return result;
    }

    uint64_t result = sub_10009D200( *(void *)(a1 + 9000),  v34 + 28,  v34 + 384,  v34 + 856,  v34 + 323,  (__int16 *)(v34 + 146),  59,  (_DWORD *)(v34 + 8),  (_DWORD *)v34,  (_DWORD *)(v34 + 24),  0,  0LL,  v70);
    *(_WORD *)(v34 + 4) = 0;
    *(_OWORD *)(v34 + 264) = 0u;
    *(_OWORD *)(v34 + 280) = 0u;
    *(_OWORD *)(v34 + 296) = 0u;
    *(_OWORD *)(v34 + 307) = 0u;
    if ((_DWORD)result)
    {
      uint64_t v40 = *(int *)(v34 + 8);
      if (!(_DWORD)v40) {
        return 0LL;
      }
      uint64_t v65 = a4;
      if (v33)
      {
        if ((int)v40 >= 1)
        {
          uint64_t v41 = 0LL;
          do
          {
            *(_DWORD *)(v34 + 4 * v41 + 620) = sub_1000315D4( v33,  *(unsigned int *)(v34 + 4 * v41 + 384),  *(unsigned int *)(v34 + 4 * v41 + 856),  v35,  v36,  v37,  v38,  v39);
            ++v41;
          }

          while (v41 < *(int *)(v34 + 8));
        }
      }

      else
      {
        bzero((void *)(v34 + 620), 4 * v40);
      }

      v70[1] = 1;
      goto LABEL_55;
    }
  }

  else
  {
    if (a7) {
      bzero(a7, a5);
    }
    uint64_t v42 = *(unsigned int *)(a1 + 8884);
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4152))
    {
      if (*(_DWORD *)(a1 + 556)) {
        int v43 = sub_10006BEDC(a1, v34, a2, v42, v29, v30, v31, v32);
      }
      else {
        int v43 = sub_10006C2D0(a1, (char *)v34, a2, v42);
      }
      v70[1] = v43;
      if (v69)
      {
        sub_100024410(*(void *)(a1 + 9000), v33, (uint64_t)v68, v34, v43);
        sub_100024DB8(*(void *)(a1 + 376), v34, &v70[1]);
        sub_10003BAE8(v34, v70[1], v68, *(unsigned int *)(a1 + 8872), *(_DWORD *)(a1 + 9284));
        sub_100063EB8(a1, v34, v70[1]);
      }

      if (qword_1000FDCC0
        && *(_DWORD *)(qword_1000FDCC0 + 4592)
        && *(_DWORD *)(qword_1000FDCC0 + 4596)
        && !*(_DWORD *)(qword_1000FDCC0 + 5196))
      {
        if (*(void *)(qword_1000FDCC0 + 4104) < v70[1]) {
          v70[1] = *(void *)(qword_1000FDCC0 + 4104);
        }
        sub_10003C430(a1, 0LL, (char *)v34, &v70[1]);
      }

      sub_100064184(a1, v34, v70[1]);
      sub_10003B344( v34,  &v70[1],  a2,  (uint64_t)a3,  a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  a12,  *(void *)(a1 + 376));
      uint64_t result = v70[1];
      *(_DWORD *)(a1 + 9324) = v70[1];
      if (!(_DWORD)result)
      {
        *(_DWORD *)(a1 + 552) = 3;
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v67 = a8;
      int v44 = sub_10009D200( *(void *)(a1 + 9000),  v34 + 28,  v34 + 384,  v34 + 856,  v34 + 323,  (__int16 *)(v34 + 146),  59,  (_DWORD *)(v34 + 8),  (_DWORD *)v34,  (_DWORD *)(v34 + 24),  v42,  v34 + 264,  v70);
      *(_WORD *)(v34 + 4) = 0;
      if (v69)
      {
        int v64 = v44;
        sub_10003BAE8(v34, 1, v68, *(unsigned int *)(a1 + 8872), *(_DWORD *)(a1 + 9284));
        int v44 = v64;
      }

      uint64_t v50 = *(int *)(v34 + 8);
      if (!(_DWORD)v50 || !v44)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 552) = 3;
        *a6 = -1;
        return result;
      }

      if (v33)
      {
        if ((int)v50 >= 1)
        {
          uint64_t v51 = 0LL;
          do
          {
            *(_DWORD *)(v34 + 4 * v51 + 620) = sub_1000315D4( v33,  *(unsigned int *)(v34 + 4 * v51 + 384),  *(unsigned int *)(v34 + 4 * v51 + 856),  v45,  v46,  v47,  v48,  v49);
            ++v51;
          }

          while (v51 < *(int *)(v34 + 8));
        }
      }

      else
      {
        bzero((void *)(v34 + 620), 4 * v50);
      }

      int v58 = 1;
      v70[1] = 1;
      if (qword_1000FDCC0)
      {
        uint64_t v59 = a4;
        uint64_t v61 = a10;
        uint64_t v60 = a9;
        if (*(_DWORD *)(qword_1000FDCC0 + 4592) && *(_DWORD *)(qword_1000FDCC0 + 4596))
        {
          sub_10003C430(a1, 0LL, (char *)v34, &v70[1]);
          int v58 = v70[1];
        }
      }

      else
      {
        uint64_t v59 = a4;
        uint64_t v61 = a10;
        uint64_t v60 = a9;
      }

      if (v69)
      {
        sub_100063EB8(a1, v34, v58);
        int v58 = v70[1];
      }

      sub_100064184(a1, v34, v58);
      sub_10003B344( v34,  &v70[1],  a2,  (uint64_t)a3,  v59,  a5,  (uint64_t)a6,  (uint64_t)a7,  v67,  v60,  v61,  a11,  a12,  *(void *)(a1 + 376));
      uint64_t result = v70[1];
      *(_DWORD *)(a1 + 9324) = v70[1];
    }

    if (*(_DWORD *)(a1 + 9280) && (int)result >= 1)
    {
      int v62 = 0;
      uint64_t v63 = v34 + 28;
      do
      {
        *(_WORD *)(v63 - 24) += sub_10003BE3C( *(void *)(a1 + 376),  1LL,  *(unsigned int *)(a1 + 9204),  a1 + 9202,  *(unsigned int *)(a1 + 460),  a1 + 456,  v63,  *(unsigned int *)(v63 - 20));
        ++v62;
        uint64_t result = v70[1];
        v63 += 1096LL;
      }

      while (v62 < v70[1]);
    }
  }

  return result;
}

uint64_t sub_100068A48(uint64_t a1)
{
  if (!sub_10009D1DC(*(void *)(a1 + 9000))) {
    *(_DWORD *)(a1 + 552) = 3;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 544);
  if (v8 <= 0xB && ((1 << v8) & 0x828) != 0)
  {
    int v10 = *(_DWORD *)(a1 + 552);
    if (v10 != 3) {
      *(_DWORD *)(a1 + 552) = 0;
    }
    if (v8 <= 0xB && ((1 << v8) & 0x828) != 0 && v10 != 3)
    {
      int v12 = 0;
      int v13 = *(_DWORD *)(a1 + 9040) << 8;
      unsigned int v14 = v13 - *(_DWORD *)(a1 + 9044);
      uint64_t v15 = *(void *)(a1 + 9032);
      uint64_t v16 = *(void *)(v15 + 8LL * (v14 >> 8)) + 32LL * -*(_BYTE *)(a1 + 9044);
      int v26 = 0;
      unsigned __int16 v17 = -1;
      while (1)
      {
        int v18 = *(unsigned __int16 *)(v16 + 18);
        if (v18 == 0xFFFF)
        {
          if (++v14 == v13) {
            break;
          }
          goto LABEL_17;
        }

        int v19 = *(_DWORD *)(a1 + 620);
        if (v19 >= v18)
        {
          if (v18 != v17)
          {
            int v12 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v16 + 18));
            unsigned __int16 v17 = v18;
          }

          uint64_t v2 = *(void *)v16 & 0x7FFFFFFFFFFFFFFFLL;
          if (*(_DWORD *)(a1 + 544) == 2)
          {
            int v26 = 1;
LABEL_31:
            if (*(_WORD *)(v16 + 20) != 0x4000) {
              *(_WORD *)(v16 + 20) += sub_100025DF8(a1 + 680, *(unsigned int *)(a1 + 8872), v2);
            }
            goto LABEL_21;
          }

          int v26 = *(void *)v16 >> 63;
        }

        else
        {
          int v20 = ~v19 + v18;
          uint64_t v21 = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8LL * v20), 0);
          uint64_t v22 = *(void *)v16 & 0x3FFFFFFLL;
          if (*(__int16 *)(v21 + 4 * v22) < 0)
          {
            uint64_t v23 = v20;
            unsigned __int16 v17 = *(_WORD *)(v21 + 4 * v22 + 2);
            uint64_t v24 = (*(void *)v16 >> 53) & 0x3FFLL;
            uint64_t v25 = 4 * v23;
            sub_1000265B8(*(void *)(a1 + 8 * v24 + 680));
            uint64_t v2 = ((unint64_t)*(unsigned int *)(*(void *)(a1 + 9344) + v25) << 35) + (v24 << 53);
            if (v26) {
              goto LABEL_31;
            }
          }
        }

void sub_100068C98(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  if (a2 < a3)
  {
    int v26 = 0LL;
    if (a5)
    {
      do
      {
        if (a2 >= 1 && *(_DWORD *)(a1 + 8892)) {
          sub_1000660A0(a1, *(_DWORD *)(a5 + 4LL * a2));
        }
        int v18 = (const void *)sub_100059730(a4, a2, &v26);
        sub_100067818(a1, v18, v26, v19, v20, v21, v22, v23, v24);
        ++a2;
      }

      while (*(_DWORD *)(a1 + 552) != 3 && a2 < a3);
    }

    else
    {
      do
      {
        int v10 = (const void *)sub_100059730(a4, a2, &v26);
        sub_100067818(a1, v10, v26, v11, v12, v13, v14, v15, v16);
        ++a2;
      }

      while (*(_DWORD *)(a1 + 552) != 3 && a2 < a3);
    }
  }

uint64_t sub_100068D7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 544);
  BOOL v6 = v5 > 0xB;
  int v7 = (1 << v5) & 0x828;
  if (v6 || v7 == 0) {
    return 0LL;
  }
  if (a2 >= 1)
  {
    uint64_t v12 = 0LL;
    uint64_t v12 = a2 & 0x7FFFFFF0;
    int32x4_t v13 = (_OWORD *)(a3 + 16);
    int32x4_t v14 = (_OWORD *)(a4 + 16);
    *(void *)&__int128 v15 = 0x4000400040004000LL;
    *((void *)&v15 + 1) = 0x4000400040004000LL;
    uint64_t v16 = a2 & 0xFFFFFFF0;
    do
    {
      *(v13 - 1) = v15;
      *int32x4_t v13 = v15;
      v13 += 2;
      *(v14 - 1) = v15;
      *int32x4_t v14 = v15;
      v14 += 2;
      v16 -= 16LL;
    }

    while (v16);
    if (v12 != a2)
    {
LABEL_11:
      unsigned __int16 v17 = (_WORD *)(a4 + 2 * v12);
      int v18 = (_WORD *)(a3 + 2 * v12);
      uint64_t v19 = a2 - v12;
      do
      {
        *v18++ = 0x4000;
        *v17++ = 0x4000;
        --v19;
      }

      while (v19);
    }
  }

  *a5 = *(_WORD *)(a1 + 8980);
  unsigned int v20 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  uint64_t v21 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v20 >> 8));
  uint64_t v22 = -*(_BYTE *)(a1 + 9044);
  int v23 = *(unsigned __int16 *)(v21 + 32 * v22 + 18);
  if (v23 != 0xFFFF)
  {
    unsigned int v25 = v20 + 1;
    do
    {
      unint64_t v26 = *(void *)(v21 + 32 * v22);
      uint64_t v27 = (v26 >> 53) & 0x3FF;
      if (*(_DWORD *)(a1 + 620) >= v23 && sub_10002BA64(*(void *)(a1 + 8 * v27 + 680), v26))
      {
        int v28 = *(__int16 *)(v21 + 32 * v22 + 24);
      }

      else
      {
        int v29 = *(__int16 *)(v21 + 32 * v22 + 24);
      }

      uint64_t v21 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v25 >> 8));
      uint64_t v22 = v25;
      int v23 = *(unsigned __int16 *)(v21 + 32LL * v25++ + 18);
    }

    while (v23 != 0xFFFF);
  }

  return 1LL;
}

BOOL sub_100068F40(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v9 = sub_1000398BC(a1);
  BOOL v10 = *(unsigned __int16 *)(a1 + 8980) != 0x4000;
  unsigned int v11 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  uint64_t v12 = *(void *)(a1 + 9032);
  uint64_t v13 = *(void *)(v12 + 8LL * (v11 >> 8));
  uint64_t v14 = -*(_BYTE *)(a1 + 9044);
  int v15 = *(unsigned __int16 *)(v13 + 32 * v14 + 18);
  int v16 = *(_DWORD *)(a1 + 620);
  if (v15 != 0xFFFF && v16 >= v15)
  {
    unsigned int v20 = v11 + 1;
    do
    {
      unint64_t v23 = *(void *)(v13 + 32 * v14);
      uint64_t v24 = (v23 >> 53) & 0x3FF;
      if (*(_DWORD *)(a3 + 4 * v24) && *(__int16 *)(v13 + 32 * v14 + 24) < 0x4000)
      {
        if (sub_10002BA64(*(void *)(a1 + 8 * v24 + 680), v23))
        {
          sub_1000B2868(a1 + 9084, a4);
          return 1LL;
        }

        uint64_t v12 = *(void *)(a1 + 9032);
        int v16 = *(_DWORD *)(a1 + 620);
        BOOL v10 = 1;
      }

      uint64_t v13 = *(void *)(v12 + 8LL * (v20 >> 8));
      uint64_t v14 = v20;
      int v21 = *(unsigned __int16 *)(v13 + 32LL * v20++ + 18);
    }

    while (v21 != 0xFFFF && v16 >= v21);
  }

  sub_1000B2868(a1 + 9084, 0);
  return v10 && v9 < a5;
}

uint64_t sub_10006908C(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(_DWORD *)(result + 9076) + *(__int16 *)(result + 9048);
  int v4 = *(__int16 *)(result + 8980);
  if (v4 == 0x4000)
  {
    *a3 = 0x40000000;
    int v5 = *(__int16 *)(result + 9050);
    if (v5 != 0x4000)
    {
LABEL_3:
      *a4 = *(_DWORD *)(result + 9076) + v5;
      return result;
    }
  }

  else
  {
    *a3 = *(_DWORD *)(result + 9076) + v4;
    int v5 = *(__int16 *)(result + 9050);
    if (v5 != 0x4000) {
      goto LABEL_3;
    }
  }

  *a4 = 0x40000000;
  return result;
}

uint64_t sub_1000690F8(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 8976);
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), *(unsigned __int16 *)(a1 + 8976));
  int v4 = (__int16)v2[2];
  if (v4 > 0x4000)
  {
    int v4 = 0x4000;
    v2[2] = 0x4000;
    *(_DWORD *)(a1 + 8968) = -1;
  }

  uint64_t v32 = 0LL;
  uint64_t v30 = 0LL;
  if (v4 <= (__int16)v2[43])
  {
    uint64_t v5 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v5);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v5);
      LOWORD(v4) = v2[2];
    }

    __int16 v6 = result - v2[41] + v4;
    v2[2] = v6;
    v2[4] = v6;
    if (v6 < (__int16)v2[36])
    {
      v2[36] = v6;
      v2[38] = v2[1];
      v2[104] = *v2;
    }
  }

  else
  {
    v2[4] = 0x4000;
    v2[2] = 0x4000;
  }

  int v7 = *(_DWORD *)(a1 + 620);
  uint64_t v8 = *(void *)(a1 + 592);
  uint64_t v9 = *(void *)(v8 + 8LL * ((v7 + 1) >> 8)) + 24LL * (v7 + 1);
  int v11 = *(unsigned __int16 *)(v9 + 16);
  BOOL v10 = (_WORD *)(v9 + 16);
  if (v11 == 0x4000)
  {
    _WORD *v10 = 0x3FFF;
    int v7 = *(_DWORD *)(a1 + 620);
    uint64_t v8 = *(void *)(a1 + 592);
  }

  unsigned int v12 = 0;
  unsigned int v13 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  LODWORD(v32) = 0;
  HIDWORD(v32) = v13;
  int v14 = *(_DWORD *)(a1 + 9364) + v7;
  do
  {
    uint64_t v15 = *(void *)(v8 + 8LL * (v12 >> 8)) + 24LL * v12;
    uint64_t v30 = v15;
    int v16 = *(unsigned __int16 *)(v15 + 16);
    ++v12;
  }

  while (v16 == 0x4000);
  if (v16 == 0x3FFF)
  {
    *(_WORD *)(v15 + 16) = 0x4000;
    uint64_t v17 = *(void *)(a1 + 592);
    uint64_t v15 = *(void *)(v17 + 8LL * (v12 >> 8)) + 24LL * v12;
    uint64_t v30 = v15;
    if ((int)v12 <= v14)
    {
      while (*(_WORD *)(v15 + 16) == 0x4000)
      {
        ++v12;
        uint64_t v15 = *(void *)(v17 + 8LL * (v12 >> 8)) + 24LL * v12;
        uint64_t v30 = v15;
        if (v14 + 1 == v12)
        {
          unsigned int v12 = v14 + 1;
          break;
        }
      }
    }
  }

  else
  {
    --v12;
  }

  int v31 = v12;
  uint64_t v18 = *(void *)(a1 + 9032);
  uint64_t v19 = *(void *)(v18 + 8LL * (v13 >> 8)) + 32LL * v13;
  signed int v20 = *(_DWORD *)(a1 + 620);
  signed int v21 = *(unsigned __int16 *)(v19 + 18);
  if ((int)v12 <= v20 || v20 >= v21)
  {
    uint64_t v23 = v15;
    do
    {
      if ((unsigned __int16)v12 < v21
        || (unsigned __int16)v12 == v21
        && (*(void *)v23 & 0x7FFFFFFFFFFFFFFFuLL) < (*(void *)v19 & 0x7FFFFFFFFFFFFFFFuLL))
      {
        uint64_t result = sub_10006B320(a1, (unsigned __int16)v12, v23, v12, v13, &v32);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, void, uint64_t))(a1 + 536))( a1,  (char *)&v32 + 4,  &v32,  (unsigned __int16)v12,  v23);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
        if (!(_DWORD)result) {
          goto LABEL_48;
        }
      }

      if (*(_DWORD *)(a1 + 8896))
      {
        if (*(unsigned __int16 *)(v23 + 14) == 0xFFFFLL)
        {
          *(_WORD *)(v15 + 16) = 0x4000;
          uint64_t v26 = *(void *)(a1 + 592);
          do
          {
            ++v12;
            uint64_t v23 = *(void *)(v26 + 8LL * (v12 >> 8)) + 24LL * v12;
            uint64_t v30 = v23;
          }

          while (*(_WORD *)(v23 + 16) == 0x4000);
          uint64_t v15 = v23;
          if (*(_WORD *)(v23 + 16) == 0x3FFF) {
            goto LABEL_35;
          }
        }

        else
        {
          uint64_t v30 = v23;
          if (*(_WORD *)(v23 + 16) == 0x3FFF) {
            goto LABEL_35;
          }
        }
      }

      else
      {
        uint64_t v24 = *(void *)(a1 + 592);
        do
        {
          ++v12;
          uint64_t v23 = *(void *)(v24 + 8LL * (v12 >> 8)) + 24LL * v12;
          uint64_t v30 = v23;
        }

        while (*(_WORD *)(v23 + 16) == 0x4000);
        if (*(_WORD *)(v23 + 16) == 0x3FFF)
        {
LABEL_35:
          *(_WORD *)(v23 + 16) = 0x4000;
          uint64_t v25 = *(void *)(a1 + 592);
          uint64_t v23 = *(void *)(v25 + 8LL * ((v12 + 1) >> 8)) + 24LL * (v12 + 1);
          uint64_t v30 = v23;
          if ((int)v12 >= v14)
          {
            ++v12;
          }

          else
          {
            while (*(_WORD *)(v23 + 16) == 0x4000)
            {
              uint64_t v23 = *(void *)(v25 + 8LL * ((v12 + 2) >> 8)) + 24LL * (v12 + 2);
              uint64_t v30 = v23;
              if (v14 == ++v12)
              {
                unsigned int v12 = v14 + 1;
                goto LABEL_48;
              }
            }

            ++v12;
          }
        }
      }

uint64_t sub_100069594(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 8976);
  uint64_t v24 = 0LL;
  *(_DWORD *)(v22 + 14) = 0xFFFF;
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), *(unsigned __int16 *)(a1 + 8976));
  int v4 = (__int16)v2[2];
  if (v4 > 0x4000)
  {
    int v4 = 0x4000;
    v2[2] = 0x4000;
    *(_DWORD *)(a1 + 8968) = -1;
  }

  if (v4 <= (__int16)v2[43])
  {
    uint64_t v5 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v5);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v5);
      LOWORD(v4) = v2[2];
    }

    __int16 v6 = result - v2[41] + v4;
    v2[2] = v6;
    v2[4] = v6;
    if (v6 < (__int16)v2[36])
    {
      v2[36] = v6;
      v2[38] = v2[1];
      v2[104] = *v2;
    }
  }

  else
  {
    v2[4] = 0x4000;
    v2[2] = 0x4000;
  }

  unsigned int v7 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  LODWORD(v24) = 0;
  HIDWORD(v24) = v7;
  uint64_t v8 = *(void *)(a1 + 592);
  unsigned int v9 = -1;
  do
  {
    uint64_t v10 = *(void *)(v8 + 8LL * (++v9 >> 8));
    uint64_t v11 = v10 + 24LL * v9;
    uint64_t v22 = v11;
  }

  while (*(_WORD *)(v11 + 16) == 0x4000);
  unsigned int v23 = v9;
  uint64_t v12 = *(void *)(a1 + 9032);
  uint64_t v13 = *(void *)(v12 + 8LL * (v7 >> 8)) + 32LL * v7;
  int v14 = *(unsigned __int16 *)(v10 + 24LL * v9 + 14);
  int v15 = *(_DWORD *)(a1 + 620);
  int v16 = *(unsigned __int16 *)(v13 + 18);
  if (v15 >= v14 || v15 >= v16)
  {
    do
    {
      if ((unsigned __int16)v14 < (unsigned __int16)v16
        || (unsigned __int16)v14 == (unsigned __int16)v16
        && (*(void *)v11 & 0x7FFFFFFFFFFFFFFFuLL) < (*(void *)v13 & 0x7FFFFFFFFFFFFFFFuLL))
      {
        uint64_t result = sub_10006B320(a1, (unsigned __int16)v14, v11, v9, v7, &v24);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, void, uint64_t))(a1 + 536))( a1,  (char *)&v24 + 4,  &v24,  (unsigned __int16)v14,  v11);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
        if (!(_DWORD)result) {
          goto LABEL_21;
        }
      }

      uint64_t v18 = *(void *)(a1 + 592);
      do
      {
        ++v9;
        uint64_t v11 = *(void *)(v18 + 8LL * (v9 >> 8)) + 24LL * v9;
        uint64_t v22 = v11;
      }

      while (*(_WORD *)(v11 + 16) == 0x4000);
LABEL_21:
      unsigned int v7 = HIDWORD(v24);
      uint64_t v12 = *(void *)(a1 + 9032);
      uint64_t v13 = *(void *)(v12 + (((unint64_t)HIDWORD(v24) >> 5) & 0x7FFFFF8)) + 32LL * BYTE4(v24);
      int v14 = *(unsigned __int16 *)(v11 + 14);
      int v19 = *(_DWORD *)(a1 + 620);
      int v16 = *(unsigned __int16 *)(v13 + 18);
    }

    while (v19 >= v14 || v19 >= v16);
  }

  unsigned int v23 = v9;
  if ((_WORD)v14 != 0xFFFF) {
    goto LABEL_32;
  }
LABEL_31:
  if (*(__int16 *)(v13 + 18) == -1)
  {
    uint64_t v21 = *(void *)(v12 + (((unint64_t)v24 >> 5) & 0x7FFFFF8)) + 32LL * v24;
    *(_WORD *)(v21 + 18) = -1;
    *(void *)uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
    *(_DWORD *)(a1 + 9044) = v24 + 1;
  }

  else
  {
LABEL_32:
    while (1)
    {
      uint64_t result = sub_10006B4F8(a1, (_DWORD *)&v24 + 1, (unsigned int *)&v24, &v22, (int *)&v23);
      if (*(_DWORD *)(a1 + 552) == 3) {
        break;
      }
      uint64_t v12 = *(void *)(a1 + 9032);
      uint64_t v13 = *(void *)(v12 + (((unint64_t)HIDWORD(v24) >> 5) & 0x7FFFFF8)) + 32LL * BYTE4(v24);
      if (*(_WORD *)(v22 + 14) == 0xFFFF) {
        goto LABEL_31;
      }
    }
  }

  return result;
}

uint64_t sub_100069894(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 + 255) >> 8;
  uint64_t result = sub_1000C1074((8 * v2));
  if (!result) {
    return result;
  }
  uint64_t v5 = (void *)result;
  int v6 = *(_DWORD *)(a1 + 9040);
  if (v6 < (int)v2)
  {
    unsigned int v7 = (uint64_t *)(result + 8LL * v6);
    uint64_t v8 = v2 - v6;
    while (1)
    {
      uint64_t v9 = sub_1000C1074(0x2000LL);
      *unsigned int v7 = v9;
      if (!v9) {
        break;
      }
      ++v6;
      ++v7;
      if (!--v8) {
        goto LABEL_9;
      }
    }
  }

  if (v6 == (_DWORD)v2)
  {
LABEL_9:
    j__memmove(v5, *(const void **)(a1 + 9032), 8LL * *(int *)(a1 + 9040));
    sub_1000C0EF8(*(void *)(a1 + 9032));
    *(void *)(a1 + 9032) = v5;
    *(_DWORD *)(a1 + 9040) = v2;
    return 1LL;
  }

  if (v6 > *(_DWORD *)(a1 + 9040))
  {
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = v10 - 1;
      sub_1000C0EF8(*((void *)v5 + v10 - 1));
      uint64_t v10 = v11;
    }

    while (v11 > *(int *)(a1 + 9040));
  }

  sub_1000C0EF8((uint64_t)v5);
  return 0LL;
}

uint64_t sub_1000699A0(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t result = sub_1000BB868(*(void *)(a1 + 376), a3, 0LL);
  __int16 v22 = result;
  if (*(int *)(a1 + 612) >= 1)
  {
    unsigned int v9 = 0;
    uint64_t v21 = (_WORD *)(a1 + 9048);
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 592) + 8LL * (v9 >> 8));
      __int16 v11 = a2;
      if (*(_DWORD *)(a1 + 9280))
      {
        unsigned int v12 = sub_1000BB868(*(void *)(a1 + 376), *(unsigned __int16 *)(v10 + 24LL * v9 + 14), 0LL);
        uint64_t result = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v22, 1u, v12);
        __int16 v11 = result + a2;
      }

      uint64_t v13 = v10 + 24LL * v9;
      int v16 = *(__int16 *)(v13 + 16);
      int v15 = (_WORD *)(v13 + 16);
      int v14 = v16;
      int v17 = *(_DWORD *)(a1 + 9008);
      if (v16 <= v11)
      {
        if (v17)
        {
          int v20 = *(_DWORD *)(v10 + 24LL * v9 + 8);
          if (v20 != a5) {
            uint64_t result = (uint64_t)sub_100024188(*(uint64_t **)(a1 + 9016), a5, v20, v11 - (unsigned __int16)v14, v11 - *v21);
          }
        }
      }

      else
      {
        if (v17)
        {
          int v18 = *(_DWORD *)(v10 + 24LL * v9 + 8);
          if (v14 != 0x4000 && v18 != a5) {
            uint64_t result = (uint64_t)sub_100024188( *(uint64_t **)(a1 + 9016),  v18,  a5,  (unsigned __int16)v14 - v11,  (unsigned __int16)v14 - *v21);
          }
        }

        *int v15 = v11;
        *(_DWORD *)(v10 + 24LL * v9 + 8) = a5;
      }

      ++v9;
    }

    while ((signed int)v9 < *(_DWORD *)(a1 + 612));
  }

  return result;
}

uint64_t sub_100069B24(uint64_t result, __int16 a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v5 = *(int *)(result + 612);
  if ((_DWORD)v5)
  {
    uint64_t v9 = result;
    uint64_t v10 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v10 = *(void *)(qword_1000FDCC0 + 3616);
    }
    __int16 v25 = 0;
    if (v10 >= v5 && *(_DWORD *)(result + 9280)
      || (uint64_t result = sub_1000699A0(result, a2, a3, a4, a5), *(_DWORD *)(v9 + 9280)))
    {
      __int16 v25 = sub_1000BB868(*(void *)(v9 + 376), a3, 0LL);
      uint64_t result = sub_1000BBC40( *(void *)(v9 + 376),  1,  (uint64_t)&v25,  *(unsigned int *)(v9 + 612),  *(unsigned __int16 **)(v9 + 656),  *(_DWORD *)(v9 + 672),  *(__int16 **)(v9 + 664));
      *(_DWORD *)(v9 + 672) = result;
    }

    if (*(int *)(v9 + 612) >= 1)
    {
      uint64_t v11 = 0LL;
      __int16 v12 = 0;
      uint64_t v24 = (_WORD *)(v9 + 9048);
      do
      {
        if (*(_DWORD *)(v9 + 9280)) {
          __int16 v12 = *(_WORD *)(*(void *)(v9 + 664) + 2 * v11);
        }
        uint64_t v13 = *(void *)(*(void *)(v9 + 592) + 8LL * (v11 >> 8));
        int v14 = (__int16)(v12 + a2);
        uint64_t v15 = v13 + 24LL * v11;
        int v18 = *(__int16 *)(v15 + 16);
        int v17 = (_WORD *)(v15 + 16);
        int v16 = v18;
        int v19 = *(_DWORD *)(v9 + 9008);
        __int16 v20 = v14 - v18;
        if (v14 >= v18)
        {
          if (v19)
          {
            int v23 = *(_DWORD *)(v13 + 24LL * v11 + 8);
            if (v23 != a5) {
              uint64_t result = (uint64_t)sub_100024188(*(uint64_t **)(v9 + 9016), a5, v23, v20, (unsigned __int16)v14 - *v24);
            }
          }
        }

        else
        {
          if (v19)
          {
            int v21 = *(_DWORD *)(v13 + 24LL * v11 + 8);
            if (v16 != 0x4000 && v21 != a5) {
              uint64_t result = (uint64_t)sub_100024188( *(uint64_t **)(v9 + 9016),  v21,  a5,  (unsigned __int16)v16 - (unsigned __int16)v14,  (unsigned __int16)v16 - *v24);
            }
          }

          *int v17 = v14;
          *(_DWORD *)(v13 + 24LL * v11 + 8) = a5;
        }

        ++v11;
      }

      while (v11 < *(int *)(v9 + 612));
    }
  }

  return result;
}

uint64_t sub_100069CF8(uint64_t a1, __int16 a2, unsigned int a3, unint64_t a4, int a5)
{
  unint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v9 = *(unsigned __int16 **)(a1 + 9192);
  LODWORD(v19) = a5;
  unsigned int v10 = sub_1000BB868(*(void *)(a1 + 376), a3, 0LL);
  __int16 v21 = v10;
  uint64_t v11 = *(void *)(a1 + 8 * ((a4 >> 53) & 0x3FF) + 680);
  uint64_t result = sub_100028C90( v11,  a3,  v10,  a4,  *(_DWORD *)(a1 + 9224),  *(void *)(a1 + 9216),  *(_DWORD *)(a1 + 9188),  (unint64_t)v9);
  int v13 = result;
  if ((int)result > *(_DWORD *)(a1 + 9188))
  {
    int v14 = 2 * result;
    uint64_t result = sub_1000C1074(48LL * (_DWORD)result);
    if (!result)
    {
      *(_DWORD *)(a1 + 552) = 3;
      return result;
    }

    uint64_t v9 = (unsigned __int16 *)result;
    sub_1000C0EF8(*(void *)(a1 + 9192));
    *(_DWORD *)(a1 + 9188) = v14;
    *(void *)(a1 + 9192) = v9;
    uint64_t result = sub_100028C90(v11, a3, v10, a4, *(_DWORD *)(a1 + 9224), *(void *)(a1 + 9216), v14, (unint64_t)v9);
    int v13 = result;
  }

  if (v13 >= 1)
  {
    do
    {
      __int16 v15 = v9[1] + a2;
      LOWORD(v20) = v15;
      if (*(_DWORD *)(a1 + 9280))
      {
        unsigned int v16 = sub_1000BB868(*(void *)(a1 + 376), *v9, 0LL);
        uint64_t result = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v21, 1u, v16);
        __int16 v15 = v20 + result;
        LOWORD(v20) = v20 + result;
      }

      if (*(__int16 *)(a1 + 9062) >= v15)
      {
        if (*((_DWORD *)v9 + 4)) {
          unint64_t v17 = *((void *)v9 + 1) | 0x8000000000000000LL;
        }
        else {
          unint64_t v17 = *((void *)v9 + 1);
        }
        unint64_t v18 = v17;
        HIWORD(v19) = *v9;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v18);
      }

      v9 += 12;
      --v13;
    }

    while (v13);
  }

  return result;
}

uint64_t sub_100069EA4(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  memset(v23, 0, sizeof(v23));
  __int128 v21 = 0u;
  unint64_t v18 = 0LL;
  uint64_t v19 = a5;
  uint64_t v9 = (a4 >> 53) & 0x3FF;
  uint64_t v20 = 0LL;
  __int16 v25 = -1;
  uint64_t v10 = *(void *)(a1 + 8 * v9 + 680);
  sub_100028C70((_DWORD *)v10, (uint64_t)v23);
  (*(void (**)(uint64_t, _OWORD *, uint64_t, unint64_t, uint64_t))(v10 + 104))( v10,  v23,  a3,  a4,  0xFFFFLL);
  uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v10 + 112))(v23, v10, &v21);
  if ((_DWORD)result)
  {
    __int16 v12 = (__int16 *)(a1 + 9062);
    while (!*(_DWORD *)(a1 + 9280) || *((void *)&v22 + 1) != 0LL)
    {
      LOWORD(v20) = WORD1(v21) + a2;
LABEL_5:
      uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v10 + 112))(v23, v10, &v21);
      if (!(_DWORD)result) {
        return result;
      }
    }

    if (v25 == -1) {
      __int16 v25 = sub_1000BB868(*(void *)(a1 + 376), a3, 0LL);
    }
    unsigned int v15 = sub_1000BB868(*(void *)(a1 + 376), (unsigned __int16)v21, 0LL);
    LOWORD(v20) = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v25, 1u, v15) + a2;
LABEL_15:
    if ((_DWORD)v22) {
      unint64_t v16 = *((void *)&v21 + 1) | 0x8000000000000000LL;
    }
    else {
      unint64_t v16 = *((void *)&v21 + 1);
    }
    unint64_t v18 = v16;
    if (*((void *)&v22 + 1))
    {
      v17[0] = v21;
      v17[1] = v22;
      int v13 = sub_100063C7C(a1, v9, (uint64_t)v17) + *(_DWORD *)(a1 + 620) + 1;
    }

    else
    {
      LOWORD(v13) = v21;
    }

    HIWORD(v19) = v13;
    (*(void (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v18);
    goto LABEL_5;
  }

  return result;
}

uint64_t sub_10006A080(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  memset(v21, 0, sizeof(v21));
  __int128 v19 = 0u;
  unint64_t v16 = 0LL;
  uint64_t v10 = (a4 >> 53) & 0x3FF;
  uint64_t v18 = 0LL;
  uint64_t v17 = a5;
  uint64_t v11 = *(void *)(a1 + 8 * v10 + 680);
  sub_100028C70((_DWORD *)v11, (uint64_t)v21);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4544)) {
    sub_1000298B0((uint64_t)v21, a5, a2);
  }
  (*(void (**)(uint64_t, _OWORD *, uint64_t, unint64_t, uint64_t))(v11 + 104))( v11,  v21,  a3,  a4,  0xFFFFLL);
  for (uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v11 + 112))(v21, v11, &v19);
        (_DWORD)result;
        uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v11 + 112))(v21, v11, &v19))
  {
    LOWORD(v18) = WORD1(v19) + a2;
    if (*(__int16 *)(a1 + 9062) >= (__int16)(WORD1(v19) + a2))
    {
      if ((_DWORD)v20) {
        unint64_t v14 = *((void *)&v19 + 1) | 0x8000000000000000LL;
      }
      else {
        unint64_t v14 = *((void *)&v19 + 1);
      }
      unint64_t v16 = v14;
      if (*((void *)&v20 + 1))
      {
        v15[0] = v19;
        v15[1] = v20;
        int v13 = sub_100063C7C(a1, v10, (uint64_t)v15) + *(_DWORD *)(a1 + 620) + 1;
      }

      else
      {
        LOWORD(v13) = v19;
      }

      HIWORD(v17) = v13;
      (*(void (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v16);
    }
  }

  return result;
}

void sub_10006A210(uint64_t a1)
{
  uint64_t v2 = (__int16 *)(a1 + 8980);
  uint64_t v3 = a1 + 680;
  uint64_t v4 = sub_10002BA84(a1 + 680, *(_DWORD *)(a1 + 8872));
  sub_100065B0C((_DWORD *)a1);
  int v5 = *(_DWORD *)(a1 + 8896);
  if (v5) {
    int v5 = *(_DWORD *)(a1 + 616);
  }
  *(_DWORD *)(a1 + 612) = v5;
  int v6 = *(_DWORD *)(a1 + 544);
  if (v6 == 5 || v6 == 2) {
    sub_100065B84(a1);
  }
  int v8 = v2[34];
  if (v8 + v2[40] <= 16382) {
    __int16 v9 = v8 + v2[40];
  }
  else {
    __int16 v9 = 0x3FFF;
  }
  int v10 = *(_DWORD *)(a1 + 9208);
  if (*(_DWORD *)(a1 + 9044) > v10) {
    __int16 v9 = sub_10005DDF8(*(int **)(a1 + 9232), v10, v8, v9);
  }
  if (*(_DWORD *)(a1 + 544) == 3
    && qword_1000FDCC0
    && *(uint64_t *)(qword_1000FDCC0 + 1248) >= 1
    && *v2 == v2[34]
    && sub_1000069E0(*(void *)(a1 + 384)))
  {
    __int16 v11 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      __int16 v11 = *(_WORD *)(qword_1000FDCC0 + 1248);
    }
    int v12 = (__int16)(v9 - v11);
    if (v12 <= v2[34]) {
      __int16 v9 = v2[34];
    }
    else {
      __int16 v9 = v12;
    }
  }

  v2[41] = v9;
  int v13 = *v2;
  v2[38] = *v2;
  if (v13 <= v9)
  {
    (*(void (**)(uint64_t))(a1 + 9392))(a1);
  }

  else
  {
    *uint64_t v2 = 0x4000;
    v2[2] = 0x4000;
  }

  int v14 = *(_DWORD *)(a1 + 9044);
  uint64_t v15 = *(void *)(a1 + 9032);
  unint64_t v16 = (__int128 *)(*(void *)(v15 + 8LL * ((v14 - 1) >> 8)) + 32LL * (v14 - 1));
  int v17 = *(_DWORD *)(a1 + 9040) << 8;
  uint64_t v18 = *(void *)(v15 + 8LL * ((v17 - 1) >> 8));
  __int128 v19 = *v16;
  *(_OWORD *)(v18 + 8176) = v16[1];
  *(_OWORD *)(v18 + 8160) = v19;
  if (*(_DWORD *)(a1 + 9044) == 1)
  {
    if (!*(_DWORD *)(a1 + 8896)) {
      sub_100065AE0(a1);
    }
    return;
  }

  uint64_t v82 = v3;
  uint64_t v20 = *(void *)(a1 + 9032);
  uint64_t v21 = *(void *)(v20 + 8LL * ((v14 - 2) >> 8));
  unsigned int v22 = v17 - 2;
  uint64_t v23 = *(void *)(v20 + 8LL * ((v17 - 2) >> 8));
  int v24 = *(_DWORD *)(a1 + 9076);
  int v25 = v2[44];
  int v26 = sub_100063D68(a1);
  int v27 = v14 - 2;
  if (v14 < 2)
  {
    int v32 = 1;
  }

  else
  {
    int v79 = v24 - v25;
    int v80 = v26;
    int v28 = (_OWORD *)(v23 + 8128);
    uint64_t v29 = v21 + 32LL * (v14 - 2);
    int v30 = *(_DWORD *)(a1 + 620);
    int v31 = (unsigned __int16 *)(v29 + 18);
    if (v30 < *(unsigned __int16 *)(v29 + 18))
    {
      int v81 = 0;
      int v32 = 1;
      while (1)
      {
        while (*(__int16 *)(v29 + 24) > v2[41])
        {
          BOOL v33 = __OFSUB__(v27--, 1);
          if (v27 < 0 != v33) {
            goto LABEL_54;
          }
          uint64_t v29 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v27 >> 8)) + 32LL * v27;
          int v31 = (unsigned __int16 *)(v29 + 18);
        }

        __int128 v34 = *(_OWORD *)(v29 + 16);
        *int v28 = *(_OWORD *)v29;
        v28[1] = v34;
        --v22;
        int v28 = (_OWORD *)(*(void *)(*(void *)(a1 + 9032) + 8LL * (v22 >> 8)) + 32LL * v22);
        ++v32;
        int v35 = ~*(_DWORD *)(a1 + 620) + *v31;
        uint64_t v36 = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8LL * v35), 0);
        uint64_t v37 = *(void *)v29 & 0x3FFFFFFLL;
        if (*(__int16 *)(v36 + 4 * v37) < 0)
        {
          uint64_t v38 = (__int16 *)(v29 + 20);
          uint64_t v39 = (unsigned int *)(v29 + 8);
          int v81 = 1;
        }

        else
        {
          uint64_t v37 = *(unsigned __int16 *)(v36 + 4 * v37 + 2);
          if ((*(__int16 *)(v36 + 4 * v37) & 0x80000000) == 0)
          {
            BOOL v33 = __OFSUB__(v27--, 1);
            if (v27 < 0 != v33) {
              goto LABEL_54;
            }
            goto LABEL_40;
          }

          int v81 = 0;
          uint64_t v40 = *(int *)(a1 + 568) - 1LL;
          uint64_t v38 = (__int16 *)(v29 + 2 * v40 + 20);
          uint64_t v39 = (unsigned int *)(v29 + 4 * v40 + 8);
        }

        uint64_t v75 = *(unsigned int *)(*(void *)(a1 + 9344) + 4LL * v35);
        unsigned int v70 = *(unsigned __int16 *)(v36 + 4 * v37 + 2);
        __int16 v41 = *v38;
        unsigned int v42 = *v39;
        if (!*(_DWORD *)(a1 + 9284)
          || v42 == -1
          || (unsigned int v43 = *v39,
              __int16 v71 = v41,
              unsigned int v44 = sub_10009D1B4(*(void *)(a1 + 9000), *v39),
              BOOL v45 = sub_1000BBCE0(*(void *)(a1 + 376), v44, v70),
              __int16 v41 = v71,
              unsigned int v42 = v43,
              v45))
        {
          if ((__int16)(v41 - v2[34]) <= v80)
          {
            uint64_t v69 = (*(void *)v29 >> 53) & 0x3FFLL;
            int v72 = (__int16)(v41 - v2[34]);
            unsigned int v68 = v42;
            sub_1000265B8(*(void *)(a1 + 8 * v69 + 680));
            sub_10009C670(*(unsigned int **)(a1 + 9000), v68, v70, (v69 << 53) + (v75 << 35), v81, v72, v2[110]);
            int v73 = (__int16)(v2[34] + v2[44] + v72);
          }
        }

        if (v27 < 1) {
          goto LABEL_54;
        }
        --v27;
LABEL_40:
        uint64_t v29 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v27 >> 8)) + 32LL * v27;
        int v30 = *(_DWORD *)(a1 + 620);
        int v31 = (unsigned __int16 *)(v29 + 18);
      }
    }

    int v81 = 0;
    int v32 = 1;
LABEL_63:
    int v51 = 0;
    int v52 = -1;
    unsigned __int16 v53 = -1;
LABEL_64:
    int v76 = v52;
    int v54 = v2[41];
    uint64_t v55 = (__int16 *)(v29 + 24);
LABEL_65:
    while (1)
    {
      BOOL v33 = __OFSUB__(v27--, 1);
      if (v27 < 0 != v33) {
        break;
      }
      uint64_t v29 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v27 >> 8)) + 32LL * v27;
      uint64_t v55 = (__int16 *)(v29 + 24);
      if (*(__int16 *)(v29 + 24) <= v54)
      {
        while (1)
        {
LABEL_67:
          __int128 v56 = *(_OWORD *)(v29 + 16);
          *int v28 = *(_OWORD *)v29;
          v28[1] = v56;
          int v57 = *(unsigned __int16 *)(v29 + 18);
          if (v57 != v53)
          {
            int v51 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v29 + 18));
            unsigned __int16 v53 = v57;
          }

          ++v32;
          int v58 = *(unsigned __int8 *)(v29 + 26);
          if (v51 - 1 <= v58) {
            break;
          }
          int v59 = *v55;
          if (v59 < v2[38]) {
            v2[38] = v59;
          }
          BOOL v33 = __OFSUB__(v27--, 1);
          if (v27 < 0 != v33) {
            goto LABEL_54;
          }
          uint64_t v60 = *(void *)(a1 + 9032);
          uint64_t v29 = *(void *)(v60 + 8LL * (v27 >> 8)) + 32LL * v27;
          --v22;
          int v28 = (_OWORD *)(*(void *)(v60 + 8LL * (v22 >> 8)) + 32LL * v22);
          int v54 = v2[41];
          uint64_t v55 = (__int16 *)(v29 + 24);
        }

        if (v51 == v58) {
          int v61 = 0;
        }
        else {
          int v61 = v76;
        }
        int v77 = v61;
        int v62 = v81;
        if (v51 == v58) {
          int v62 = 1;
        }
        int v81 = v62;
        if (v51 - 1 == v58)
        {
          int v63 = *v55;
          if (v63 < v2[38]) {
            v2[38] = v63;
          }
          int v81 = 0;
          int v52 = *(_DWORD *)(a1 + 568) - 1;
        }

        else
        {
          int v52 = v77;
        }

        int v64 = (__int16)(*(_WORD *)(v29 + 2LL * v52 + 20) - v2[34]);
        if (v64 <= v80)
        {
          uint64_t v78 = *(void *)v29 & 0x7FFFFFFFFFFFFFFFLL;
          unsigned int v74 = sub_10009C670( *(unsigned int **)(a1 + 9000),  *(unsigned int *)(v29 + 4LL * v52 + 8),  v53,  v78,  v81,  v64,  v2[110]);
          uint64_t v65 = (__int16)(v2[34] + v2[44] + v64);
          if ((*(void *)v29 & 0x8000000000000000LL) != 0 && v81)
          {
            int v66 = sub_100025DF8(v82, *(unsigned int *)(a1 + 8872), v78);
            sub_10009CAD8(*(void *)(a1 + 9000), v74, v79 + v65 + v66);
          }
        }

        BOOL v33 = __OFSUB__(v27--, 1);
        if (v27 < 0 == v33)
        {
          uint64_t v67 = *(void *)(a1 + 9032);
          uint64_t v29 = *(void *)(v67 + 8LL * (v27 >> 8)) + 32LL * v27;
          --v22;
          int v28 = (_OWORD *)(*(void *)(v67 + 8LL * (v22 >> 8)) + 32LL * v22);
          goto LABEL_64;
        }

        break;
      }
    }
  }

void sub_10006AA14(uint64_t a1)
{
  uint64_t v2 = (__int16 *)(a1 + 8980);
  int v68 = 0x40000000;
  unsigned int v69 = -1;
  __int16 v67 = 0;
  sub_100065B0C((_DWORD *)a1);
  int v3 = *(_DWORD *)(a1 + 8896);
  if (v3) {
    int v3 = *(_DWORD *)(a1 + 616);
  }
  *(_DWORD *)(a1 + 612) = v3;
  int v4 = *(_DWORD *)(a1 + 544);
  if (v4 == 5 || v4 == 2) {
    sub_100065B84(a1);
  }
  int v6 = v2[34];
  if (v6 + v2[40] <= 16382) {
    __int16 v7 = v6 + v2[40];
  }
  else {
    __int16 v7 = 0x3FFF;
  }
  int v8 = *(_DWORD *)(a1 + 9208);
  if (*(_DWORD *)(a1 + 9044) > v8) {
    __int16 v7 = sub_10005DDF8(*(int **)(a1 + 9232), v8, v6, v7);
  }
  if (*(_DWORD *)(a1 + 544) == 3
    && qword_1000FDCC0
    && *(uint64_t *)(qword_1000FDCC0 + 1248) >= 1
    && *v2 == v2[34]
    && sub_1000069E0(*(void *)(a1 + 384)))
  {
    __int16 v9 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      __int16 v9 = *(_WORD *)(qword_1000FDCC0 + 1248);
    }
    int v10 = (__int16)(v7 - v9);
    if (v10 <= v2[34]) {
      __int16 v7 = v2[34];
    }
    else {
      __int16 v7 = v10;
    }
  }

  v2[41] = v7;
  int v11 = *v2;
  v2[38] = *v2;
  if (v11 <= v7)
  {
    (*(void (**)(uint64_t))(a1 + 9392))(a1);
  }

  else
  {
    *uint64_t v2 = 0x4000;
    v2[2] = 0x4000;
  }

  int v12 = *(_DWORD *)(a1 + 9044);
  uint64_t v13 = *(void *)(a1 + 9032);
  int v14 = (__int128 *)(*(void *)(v13 + 8LL * ((v12 - 1) >> 8)) + 32LL * (v12 - 1));
  int v15 = *(_DWORD *)(a1 + 9040) << 8;
  uint64_t v16 = *(void *)(v13 + 8LL * ((v15 - 1) >> 8));
  __int128 v17 = *v14;
  *(_OWORD *)(v16 + 8176) = v14[1];
  *(_OWORD *)(v16 + 8160) = v17;
  if (*(_DWORD *)(a1 + 9044) == 1)
  {
    if (!*(_DWORD *)(a1 + 8896)) {
      sub_100065AE0(a1);
    }
    return;
  }

  int v18 = v12 - 2;
  uint64_t v19 = *(void *)(a1 + 9032);
  uint64_t v20 = *(void *)(v19 + 8LL * (v18 >> 8)) + 32LL * v18;
  unsigned int v21 = v15 - 2;
  unsigned int v22 = (_OWORD *)(*(void *)(v19 + 8LL * ((v15 - 2) >> 8)) + 8128LL);
  int v64 = sub_100063D68(a1);
  int v66 = 0;
  int v65 = 0;
  int v23 = 0;
  unsigned __int16 v24 = -1;
  int v25 = 1;
  int v26 = v2[41];
LABEL_31:
  while (1)
  {
    BOOL v27 = __OFSUB__(v18--, 1);
    if (v18 < 0 != v27) {
      break;
    }
    uint64_t v20 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v18 >> 8)) + 32LL * v18;
    if (*(__int16 *)(v20 + 24) <= v26)
    {
      while (1)
      {
LABEL_33:
        __int128 v28 = *(_OWORD *)(v20 + 16);
        *unsigned int v22 = *(_OWORD *)v20;
        v22[1] = v28;
        int v29 = *(unsigned __int16 *)(v20 + 18);
        if (v29 != v24)
        {
          int v23 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v20 + 18));
          unsigned __int16 v24 = v29;
        }

        ++v25;
        int v30 = *(unsigned __int8 *)(v20 + 26);
        if (v23 - 1 > v30)
        {
          int v31 = *(__int16 *)(v20 + 24);
          if (v31 < v2[38]) {
            v2[38] = v31;
          }
          BOOL v27 = __OFSUB__(v18--, 1);
          if (v18 < 0 != v27) {
            goto LABEL_84;
          }
          goto LABEL_39;
        }

        int v33 = v66;
        if (v23 == v30)
        {
          int v33 = 1;
          int v34 = 0;
        }

        else
        {
          int v34 = v65;
        }

        if (v23 - 1 == v30)
        {
          int v35 = *(__int16 *)(v20 + 24);
          if (v35 < v2[38]) {
            v2[38] = v35;
          }
          int v66 = 0;
          int v36 = *(_DWORD *)(a1 + 568) - 1;
        }

        else
        {
          int v66 = v33;
          int v36 = v34;
        }

        int v65 = v36;
        int v63 = (__int16)(*(_WORD *)(v20 + 2LL * v36 + 20) - v2[34]);
        if (v63 <= v64)
        {
          if (*(__int16 *)(a1 + 456) == -1)
          {
            int v37 = 0;
          }

          else
          {
            __int16 v67 = sub_1000BB868(*(void *)(a1 + 376), v24, 0LL);
            int v37 = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v67, 1u, *(unsigned __int16 *)(a1 + 456));
          }

          uint64_t v62 = *(void *)v20 & 0x7FFFFFFFFFFFFFFFLL;
          unsigned int v38 = *(_DWORD *)(a1 + 544);
          if (v38 <= 0xB && ((1 << v38) & 0x828) != 0)
          {
            v37 += sub_100025DF8(a1 + 680, *(unsigned int *)(a1 + 8872), v62);
            unsigned int v38 = *(_DWORD *)(a1 + 544);
          }

          int v39 = v2[34];
          int v40 = *(_DWORD *)(a1 + 9076);
          __int16 v61 = v37;
          if (v38 == 2) {
            LODWORD(v41) = 1;
          }
          else {
            uint64_t v41 = *(void *)v20 >> 63;
          }
          BOOL v42 = 1;
          int v60 = v41;
          if (*(_DWORD *)(a1 + 9008) && (_DWORD)v41 && (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4736)))
          {
            int v43 = v2[34];
            int v58 = *(_DWORD *)(a1 + 9076);
            sub_10009D1EC(*(void *)(a1 + 9000), &v69, &v68);
            int v40 = v58;
            int v39 = v43;
            BOOL v42 = v68 == 0x40000000;
          }

          int v59 = v63 + v61 + v39 + v40;
          unint64_t v44 = *(unsigned int *)(v20 + 4LL * v65 + 8);
          int v45 = v66;
          int v46 = sub_10009C670(*(unsigned int **)(a1 + 9000), v44, v24, v62, v66, v63, v2[110]);
          int v47 = v46;
          if (!v42)
          {
            int v48 = v69;
            if (v46 != v69)
            {
              __int16 v49 = v68 - v59;
              if (v68 <= v59)
              {
                __int16 v49 = v59 - v68;
                int v55 = v46;
                int v54 = v46;
                LOWORD(v50) = v63;
              }

              else
              {
                int v50 = v68 - (*(_DWORD *)(a1 + 9076) + (unsigned __int16)v2[34]);
                if (*(__int16 *)(a1 + 456) != -1)
                {
                  int v57 = v46;
                  __int16 v51 = v68 - v59;
                  unsigned int v52 = sub_10009D1B4(*(void *)(a1 + 9000), v69);
                  __int16 v67 = sub_1000BB868(*(void *)(a1 + 376), v52, 0LL);
                  __int16 v53 = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v67, 1u, *(unsigned __int16 *)(a1 + 456));
                  __int16 v49 = v51;
                  int v47 = v57;
                  LOWORD(v50) = v50 - (v53 - v61);
                  int v48 = v69;
                }

                int v54 = v48;
                int v55 = v47;
                int v48 = v47;
              }

              sub_100024188(*(uint64_t **)(a1 + 9016), v54, v48, v49, v50);
              int v45 = v66;
              int v47 = v55;
            }
          }

          if (!*(_DWORD *)(a1 + 9272) && v45) {
            goto LABEL_74;
          }
          if (!*(_DWORD *)(a1 + 9276) || v66) {
            break;
          }
        }

void sub_10006B070(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 8976);
  *(void *)(a1 + 628) = 0x100000001LL;
  *(_WORD *)(a1 + 9048) = 0;
  *(_WORD *)(a1 + 9052) = -1;
  *(_WORD *)(a1 + 9056) = 0;
  BOOL v3 = 1;
  *(_DWORD *)(a1 + 9044) = 1;
  *(_WORD *)(a1 + 8992) = -1;
  uint64_t v4 = *(void *)(*(void *)(a1 + 9032) + 8LL * ((*(_DWORD *)(a1 + 9040) - 1) & 0xFFFFFF));
  *(_WORD *)(v4 + 8178) = -1;
  *(void *)(v4 + 8160) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 8986) = -1;
  *(_DWORD *)(a1 + 8976) = -1;
  *(_OWORD *)(a1 + 8960) = xmmword_1000F07E0;
  memset_pattern16((void *)(a1 + 8980), &unk_1000F03B0, 4uLL);
  v2[2] = 0;
  *(_DWORD *)(a1 + 8968) = 0;
  v2[4] = 0;
  *uint64_t v2 = sub_100004690(*(void *)(a1 + 384));
  int v5 = *(_DWORD *)(a1 + 544);
  if ((v5 | 8) != 0xB) {
    BOOL v3 = v5 == 5;
  }
  sub_10009C5F8(*(void *)(a1 + 9000), *(_DWORD *)(a1 + 8888), v3);
  v2[112] = 0;
  *(void *)(a1 + 9376) = 0LL;
  *(_DWORD *)(a1 + 9076) = 0;
  if (*(_DWORD *)(a1 + 8896))
  {
    int v6 = *(_DWORD *)(a1 + 616);
    if (v6 >= 1)
    {
      for (int i = 0; i < v6; ++i)
      {
        *(_WORD *)(*(void *)(*(void *)(a1 + 592) + 8LL * (i >> 8)) + 24LL * i + 16) = 0x4000;
        int v6 = *(_DWORD *)(a1 + 616);
      }
    }

    *(_WORD *)(*(void *)(*(void *)(a1 + 592) + 8LL * ((v6 - 1) >> 8))
  }

  else
  {
    int v8 = *(_DWORD *)(a1 + 608) << 8;
    if (v8 >= 1)
    {
      for (unsigned int j = 0; j != v8; ++j)
        *(void *)(*(void *)(*(void *)(a1 + 592) + 8LL * (j >> 8)) + 24LL * j) = 0x7FFFFFFFFFFFFFFFLL;
    }

    *(_DWORD *)(**(void **)(a1 + 592) + 14LL) = 0xFFFF;
    *(_DWORD *)(a1 + 612) = 0;
  }

  *(_DWORD *)(a1 + 588) = 0;
  *(_DWORD *)(a1 + 9364) = 0;
  *(_DWORD *)(a1 + 552) = 1;
}

uint64_t sub_10006B23C(uint64_t a1, __int16 *a2, uint64_t a3)
{
  int v6 = (_WORD *)(a1 + 9048);
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), *(unsigned __int16 *)(a3 + 16));
  int v8 = *a2;
  int v9 = *(__int16 *)(a3 + 20);
  if (v8 < v9)
  {
    *(_WORD *)(a3 + 20) = *a2;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 1);
    int v9 = v8;
  }

  if (v9 <= (__int16)v6[7])
  {
    uint64_t v10 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v10);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v10);
      LOWORD(v9) = *(_WORD *)(a3 + 20);
    }

    __int16 v11 = result - v6[5] + v9;
    *(_WORD *)(a3 + 20) = v11;
    *(_WORD *)(a3 + 24) = v11;
    if (v11 < (__int16)*v6)
    {
      _WORD *v6 = v11;
      v6[2] = *(_WORD *)(a3 + 18);
      v6[68] = *(_WORD *)(a3 + 16);
    }
  }

  else
  {
    *(_WORD *)(a3 + 24) = 0x4000;
    *(_WORD *)(a3 + 20) = 0x4000;
  }

  return result;
}

uint64_t sub_10006B320(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6)
{
  int v6 = (_WORD *)(result + 9048);
  if (*(__int16 *)(a3 + 16) - *(__int16 *)(result + 9058) <= *(__int16 *)(result + 9064))
  {
    uint64_t v8 = result;
    unint64_t v9 = *a6;
    if (a5 - 2 <= (int)v9)
    {
      *(_DWORD *)(result + 552) = 3;
    }

    else
    {
      __int16 v12 = a2;
      int v22 = 0;
      unsigned int v21 = 0LL;
      if (*(_DWORD *)(result + 556))
      {
        uint64_t v13 = (unsigned __int16 *)(a3 + 12);
      }

      else
      {
        sub_10009B1B8(*(void *)(result + 9256), a2, 0LL, &v21, &v22);
        uint64_t v13 = v21;
      }

      int v14 = *v13;
      uint64_t v20 = *(void *)(*(void *)(v8 + 9032) + ((v9 >> 5) & 0x7FFFFF8));
      uint64_t v15 = v20 + 32LL * v9;
      *(_DWORD *)(v15 + 20) = 1073758208;
      uint64_t v16 = (_WORD *)(v15 + 20);
      *(_BYTE *)(v15 + 26) = 0;
      *(_WORD *)(v15 + 18) = v12;
      *(_WORD *)(v15 + 16) = v14;
      *(void *)uint64_t v15 = *(void *)a3;
      uint64_t result = sub_100015BAC(*(void *)(v8 + 384), v14);
      if (*(_DWORD *)(v8 + 556)) {
        *(_BYTE *)(v15 + 27) = *(_BYTE *)(*(void *)(*(void *)(v8 + 600) + 8LL * (a4 >> 8)) + a4);
      }
      int v17 = *(__int16 *)(a3 + 16);
      *uint64_t v16 = *(_WORD *)(a3 + 16);
      *(_DWORD *)(v15 + 8) = *(_DWORD *)(a3 + 8);
      if (v17 <= (__int16)v6[7])
      {
        uint64_t v18 = *(unsigned __int16 *)result;
        uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(v8 + 384) + 1792LL) + 2 * v18);
        if ((_DWORD)result == 0x4000)
        {
          uint64_t result = sub_100015BC0(*(void *)(v8 + 384), v18);
          LOWORD(v17) = *v16;
        }

        __int16 v19 = result - v6[5] + v17;
        *uint64_t v16 = v19;
        *(_WORD *)(v20 + 32LL * v9 + 24) = v19;
        if (v19 < (__int16)*v6)
        {
          _WORD *v6 = v19;
          v6[2] = *(_WORD *)(v15 + 18);
          v6[68] = *(_WORD *)(v15 + 16);
        }
      }

      else
      {
        *(_WORD *)(v20 + 32LL * v9 + 24) = 0x4000;
        *uint64_t v16 = 0x4000;
      }

      ++*a6;
    }
  }

  return result;
}

uint64_t sub_10006B4F8(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1;
  if (a4) {
    uint64_t v6 = *a4;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v109 = (_WORD *)(a1 + 9048);
  int v7 = *(__int16 *)(a1 + 9062);
  int v8 = *a5;
  uint64_t v110 = 0LL;
  unint64_t v9 = *a2;
  uint64_t v10 = *(void *)(a1 + 9032);
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(v10 + 8 * (v9 >> 8)) + 32 * v11;
  unsigned int v106 = *a3;
  uint64_t v13 = *(void *)(v10 + (((unint64_t)*a3 >> 5) & 0x7FFFFF8)) + 32LL * *a3;
  unsigned int v14 = *(unsigned __int16 *)(v12 + 18);
  if (!v6 || (unsigned int v15 = *(unsigned __int16 *)(v6 + 14), v15 > v14))
  {
    uint64_t v16 = (int)(~*(_DWORD *)(a1 + 620) + v14);
    uint64_t result = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8 * v16), 0);
    uint64_t v18 = *(void *)(v5 + 9032);
    uint64_t v19 = *(void *)(v18 + 8 * (v9 >> 8));
    if (*(unsigned __int16 *)(v19 + 32 * v11 + 18) != v14)
    {
      LODWORD(v31) = 0;
      uint64_t v23 = 0LL;
      LOWORD(v26) = 0x4000;
      uint64_t v27 = 0xFFFFFFFFLL;
      LODWORD(v28) = 0xFFFF;
      unsigned int v20 = v9;
      unsigned int v22 = v106;
      unsigned int v21 = v109;
      goto LABEL_23;
    }

    unsigned int v20 = v9;
    unsigned int v22 = v106;
    unsigned int v21 = v109;
    while (1)
    {
      uint64_t v23 = *(void *)(v19 + 32 * v11);
      if ((*(__int16 *)(result + 4 * (v23 & 0x3FFFFFF)) & 0x80000000) == 0)
      {
        uint64_t v24 = *(int *)(v5 + 568) - 1LL;
        uint64_t v25 = v19 + 32 * v11;
        int v26 = *(__int16 *)(v25 + 2 * v24 + 20);
      }

      uint64_t v19 = *(void *)(v18 + 8LL * (++v20 >> 8));
      uint64_t v11 = v20;
      if (*(unsigned __int16 *)(v19 + 32LL * v20 + 18) != v14)
      {
        LODWORD(v31) = 0;
        uint64_t v23 = 0LL;
        LOWORD(v26) = 0x4000;
        uint64_t v27 = 0xFFFFFFFFLL;
        LODWORD(v28) = 0xFFFF;
        goto LABEL_23;
      }
    }

    uint64_t v27 = *(unsigned int *)(v25 + 4 * v24 + 8);
    LODWORD(v28) = *(unsigned __int16 *)(result + 4 * (v23 & 0x3FFFFFF) + 2);
    int v29 = (__int16 *)(result + 4 * (v23 & 0x3FFFFFF) + 4);
    do
    {
      int v30 = *v29;
      v29 += 2;
    }

    while (v30 < 0);
    LODWORD(v31) = (unsigned __int16)*(v29 - 1);
LABEL_23:
    int v97 = 0;
    uint64_t v40 = *(unsigned __int16 *)(*(void *)(v5 + 9336) + 2 * v16);
    goto LABEL_24;
  }

  uint64_t v98 = (int)(~*(_DWORD *)(a1 + 620) + v15);
  uint64_t result = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8 * v98), 0);
  int v26 = *(__int16 *)(v6 + 16);
  uint64_t v27 = *(unsigned int *)(v6 + 8);
  uint64_t v28 = *(unsigned __int16 *)(result + 2);
  uint64_t v23 = *(void *)v6;
  uint64_t v32 = (__int16 *)(result + 4);
  do
  {
    int v33 = *v32;
    v32 += 2;
  }

  while (v33 < 0);
  uint64_t v31 = (unsigned __int16)*(v32 - 1);
  *(_WORD *)(v6 + 16) = 0x4000;
  unsigned int v34 = v8 + 1;
  uint64_t v35 = *(void *)(v5 + 592);
  uint64_t v36 = *(void *)(v35 + 8LL * ((v8 + 1) >> 8)) + 24LL * (v8 + 1);
  int v37 = *(_DWORD *)(v5 + 9360) + *(_DWORD *)(v5 + 620);
  if (*(_WORD *)(v36 + 16) == 0x4000 && v8 < v37)
  {
    unsigned int v22 = v106;
    int v39 = a5;
    do
    {
      int v76 = v34++;
      uint64_t v77 = *(void *)(v35 + 8LL * (v34 >> 8));
    }

    while (*(_WORD *)(v77 + 24LL * v34 + 16) == 0x4000 && v76 < v37);
    uint64_t v36 = v77 + 24LL * v34;
  }

  else
  {
    unsigned int v22 = v106;
    int v39 = a5;
  }

  *int v39 = v34;
  *a4 = v36;
  uint64_t v40 = *(unsigned __int16 *)(*(void *)(v5 + 9336) + 2 * v98);
  unsigned int v21 = v109;
  if (*(unsigned __int16 *)(v6 + 14) >= v14)
  {
    int v97 = 1;
    unsigned int v20 = v9;
LABEL_24:
    LODWORD(v41) = *(_DWORD *)v12 & 0x3FFFFFF;
    uint64_t v94 = v40 << 53;
    uint64_t v95 = v5;
    uint64_t v90 = result + 4;
    int v92 = -1;
    int v96 = v7;
    uint64_t v99 = result;
    while ((int)v28 >= (int)v41)
    {
      if (*(__int16 *)(v12 + 24) <= v7)
      {
        __int128 v60 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
        *(_OWORD *)(v13 + 16) = v60;
        if ((_DWORD)v28 == (_DWORD)v41)
        {
          LODWORD(v28) = v28 + 1;
          if ((int)v28 >= (int)v31)
          {
            if (!v97) {
              ++v20;
            }
            while (1)
            {
              uint64_t v64 = *(void *)(*(void *)(v5 + 9032) + 8LL * (v20 >> 8));
              if (*(unsigned __int16 *)(v64 + 32LL * v20 + 18) != v14)
              {
                int v97 = 0;
                LODWORD(v28) = 0xFFFF;
                unsigned int v61 = v27;
                int v62 = v27;
                __int16 v63 = v26;
                LOWORD(v26) = 0x4000;
                goto LABEL_65;
              }

              uint64_t v65 = *(void *)(v64 + 32LL * v20);
              if ((*(__int16 *)(result + 4 * (v65 & 0x3FFFFFF)) & 0x80000000) == 0)
              {
                uint64_t v66 = *(int *)(v5 + 568) - 1LL;
                uint64_t v67 = v64 + 32LL * v20;
                int v68 = *(__int16 *)(v67 + 2 * v66 + 20);
              }

              ++v20;
            }

            unsigned int v61 = *(_DWORD *)(v67 + 4 * v66 + 8);
            LODWORD(v28) = *(unsigned __int16 *)(result + 4 * (v65 & 0x3FFFFFF) + 2);
            unsigned int v69 = (__int16 *)(v90 + 4 * (v65 & 0x3FFFFFF));
            do
            {
              int v70 = *v69;
              v69 += 2;
            }

            while (v70 < 0);
            int v97 = 0;
            LODWORD(v31) = (unsigned __int16)*(v69 - 1);
            int v62 = v27;
            uint64_t v23 = v65;
            __int16 v63 = v26;
            LOWORD(v26) = v68;
          }

          else
          {
            unsigned int v61 = v27;
            int v62 = v27;
            __int16 v63 = v26;
          }
        }

        else
        {
          __int16 v63 = 0x4000;
          unsigned int v61 = v27;
          int v62 = v92;
        }

LABEL_65:
        unsigned int v108 = v61;
        uint64_t v102 = v23;
        int v105 = v31;
        int v71 = v22;
        LOWORD(v110) = v63;
        HIDWORD(v110) = v62;
        if (*(_WORD *)(v13 + 16))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v5 + 9424))(v5, &v110, v13);
          unsigned int v21 = v109;
        }

        else
        {
          uint64_t result = sub_100015BAC(*(void *)(v5 + 384), 0);
          int v72 = (__int16)v110;
          int v73 = *(__int16 *)(v13 + 20);
          if ((__int16)v110 < v73)
          {
            *(_WORD *)(v13 + 20) = v110;
            *(_DWORD *)(v13 + 8) = HIDWORD(v110);
            int v73 = v72;
          }

          unsigned int v21 = v109;
          if (v73 <= (__int16)v109[7])
          {
            uint64_t v74 = *(unsigned __int16 *)result;
            uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 384) + 1792LL) + 2 * v74);
            if ((_DWORD)result == 0x4000)
            {
              uint64_t result = sub_100015BC0(*(void *)(v5 + 384), v74);
              unsigned int v21 = v109;
              LOWORD(v73) = *(_WORD *)(v13 + 20);
            }

            __int16 v75 = result - v21[5] + v73;
            *(_WORD *)(v13 + 20) = v75;
            *(_WORD *)(v13 + 24) = v75;
            if (v75 < (__int16)*v21)
            {
              *unsigned int v21 = v75;
              v21[2] = *(_WORD *)(v13 + 18);
              v21[68] = *(_WORD *)(v13 + 16);
            }
          }

          else
          {
            *(_WORD *)(v13 + 24) = 0x4000;
            *(_WORD *)(v13 + 20) = 0x4000;
          }
        }

        unsigned int v22 = v71;
        int v92 = v62;
        LODWORD(v9) = v9 + 1;
        uint64_t v12 = *(void *)(*(void *)(v5 + 9032) + 8LL * (v9 >> 8)) + 32LL * v9;
        else {
          LODWORD(v41) = 0xFFFF;
        }
        uint64_t result = v99;
        uint64_t v23 = v102;
        LODWORD(v31) = v105;
        uint64_t v27 = v108;
LABEL_80:
        if (*(_DWORD *)(v5 + 552) == 3)
        {
LABEL_82:
          *a2 = v9;
          goto LABEL_83;
        }

        ++v22;
        uint64_t v13 = *(void *)(*(void *)(v5 + 9032) + 8LL * (v22 >> 8)) + 32LL * v22;
      }

      else
      {
        LODWORD(v9) = v9 + 1;
        uint64_t v12 = *(void *)(*(void *)(v5 + 9032) + 8LL * (v9 >> 8)) + 32LL * v9;
        else {
          LODWORD(v41) = 0xFFFF;
        }
      }
    }

    int v104 = v31;
    unsigned int v107 = v22;
    *(_DWORD *)(v13 + 20) = 1073758208;
    *(_WORD *)(v13 + 18) = v14;
    *(_BYTE *)(v13 + 26) = 0;
    int v42 = *(_WORD *)(result + 4LL * (int)v28) & 0x7FFF;
    *(_WORD *)(v13 + 16) = v42;
    uint64_t v101 = v23;
    *(void *)uint64_t v13 = v94 + (int)v28 + (v23 & 0x8000000000000000LL);
    uint64_t v43 = *(void *)(v5 + 384);
    uint64_t v44 = v5;
    uint64_t v45 = v27;
    int v46 = (unsigned __int16 *)sub_100015BAC(v43, v42);
    uint64_t v47 = v45;
    unsigned int v21 = v109;
    *(_WORD *)(v13 + 20) = v26;
    *(_DWORD *)(v13 + 8) = v45;
    if ((__int16)v109[7] >= (__int16)v26)
    {
      uint64_t v48 = *v46;
      int v49 = *(unsigned __int16 *)(*(void *)(*(void *)(v44 + 384) + 1792LL) + 2 * v48);
      __int16 v50 = v26;
      if (v49 == 0x4000)
      {
        LOWORD(v49) = sub_100015BC0(*(void *)(v44 + 384), v48);
        uint64_t v47 = v45;
        unsigned int v21 = v109;
        __int16 v50 = *(_WORD *)(v13 + 20);
      }

      __int16 v51 = v49 - v21[5] + v50;
      *(_WORD *)(v13 + 20) = v51;
      *(_WORD *)(v13 + 24) = v51;
      uint64_t v23 = v101;
      if (v51 < (__int16)*v21)
      {
        *unsigned int v21 = v51;
        v21[2] = *(_WORD *)(v13 + 18);
        v21[68] = *(_WORD *)(v13 + 16);
      }
    }

    else
    {
      *(_WORD *)(v13 + 24) = 0x4000;
      *(_WORD *)(v13 + 20) = 0x4000;
      uint64_t v23 = v101;
    }

    LODWORD(v28) = v28 + 1;
    LODWORD(v31) = v104;
    unsigned int v22 = v107;
    uint64_t result = v99;
    uint64_t v5 = v95;
    if ((int)v28 >= v104)
    {
      int v7 = v96;
      if (!v97) {
        ++v20;
      }
      uint64_t v52 = *(void *)(v95 + 9032);
      uint64_t v53 = *(void *)(v52 + 8LL * (v20 >> 8));
      uint64_t v54 = v20;
      if (*(unsigned __int16 *)(v53 + 32LL * v20 + 18) == v14)
      {
        while (1)
        {
          uint64_t v55 = *(void *)(v53 + 32 * v54);
          if ((*(__int16 *)(v99 + 4 * (v55 & 0x3FFFFFF)) & 0x80000000) == 0)
          {
            uint64_t v56 = *(int *)(v95 + 568) - 1LL;
            uint64_t v57 = v53 + 32 * v54;
            int v26 = *(__int16 *)(v57 + 2 * v56 + 20);
          }

          uint64_t v53 = *(void *)(v52 + 8LL * (++v20 >> 8));
          uint64_t v54 = v20;
        }

        uint64_t v27 = *(unsigned int *)(v57 + 4 * v56 + 8);
        LODWORD(v28) = *(unsigned __int16 *)(v99 + 4 * (v55 & 0x3FFFFFF) + 2);
        int v58 = (__int16 *)(v90 + 4 * (v55 & 0x3FFFFFF));
        do
        {
          int v59 = *v58;
          v58 += 2;
        }

        while (v59 < 0);
        int v97 = 0;
        LODWORD(v31) = (unsigned __int16)*(v58 - 1);
        uint64_t v23 = v55;
      }

      else
      {
LABEL_43:
        int v97 = 0;
        LOWORD(v26) = 0x4000;
        LODWORD(v28) = 0xFFFF;
        uint64_t v27 = v47;
      }
    }

    else
    {
      uint64_t v27 = v47;
      int v7 = v96;
    }

    goto LABEL_80;
  }

  if ((int)v9 - 2 >= (int)(v22 - v28 + v31))
  {
    if (v28 < v31)
    {
      int v79 = (_WORD *)(result + 4 * v28);
      unint64_t v80 = (v40 << 53) - (v23 & 0x8000000000000000LL);
      do
      {
        uint64_t v82 = v31;
        unsigned int v83 = v22;
        *(_DWORD *)(v13 + 20) = 1073758208;
        *(_WORD *)(v13 + 18) = *(_WORD *)(v6 + 14);
        *(_BYTE *)(v13 + 26) = 0;
        *(void *)uint64_t v13 = v80 + v28;
        int v84 = *v79 & 0x7FFF;
        *(_WORD *)(v13 + 16) = *v79 & 0x7FFF;
        uint64_t v85 = v27;
        uint64_t result = sub_100015BAC(*(void *)(v5 + 384), v84);
        uint64_t v27 = v85;
        int v86 = *(__int16 *)(v13 + 20);
        if (v26 < v86)
        {
          *(_WORD *)(v13 + 20) = v26;
          *(_DWORD *)(v13 + 8) = v85;
          int v86 = v26;
        }

        uint64_t v87 = v109;
        if (v86 > (__int16)v109[7])
        {
          *(_WORD *)(v13 + 24) = 0x4000;
          *(_WORD *)(v13 + 20) = 0x4000;
          unsigned int v81 = v83;
          uint64_t v31 = v82;
        }

        else
        {
          uint64_t v88 = *(unsigned __int16 *)result;
          uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 384) + 1792LL) + 2 * v88);
          if ((_DWORD)result == 0x4000)
          {
            uint64_t result = sub_100015BC0(*(void *)(v5 + 384), v88);
            uint64_t v27 = v85;
            uint64_t v87 = v109;
            LOWORD(v86) = *(_WORD *)(v13 + 20);
          }

          __int16 v89 = result - v87[5] + v86;
          *(_WORD *)(v13 + 20) = v89;
          *(_WORD *)(v13 + 24) = v89;
          unsigned int v81 = v83;
          uint64_t v31 = v82;
          if (v89 < (__int16)*v87)
          {
            *uint64_t v87 = v89;
            v87[2] = *(_WORD *)(v13 + 18);
            v87[68] = *(_WORD *)(v13 + 16);
          }
        }

        unsigned int v22 = v81 + 1;
        uint64_t v13 = *(void *)(*(void *)(v5 + 9032) + 8LL * (v22 >> 8)) + 32LL * v22;
        v79 += 2;
        ++v28;
      }

      while (v28 < v31);
    }

uint64_t sub_10006BDF0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 9040) << 8;
  int v2 = *(_DWORD *)(a1 + 9044);
  if (v1 - v2 >= v1 - 1) {
    return 1LL;
  }
  int v16 = 0;
  uint64_t v15 = 0LL;
  int v4 = -v2;
  while (1)
  {
    int v6 = v5 & 0x3FF;
    uint64_t v7 = (v5 >> 10) & 0x1FFFFFF;
    uint64_t v8 = (v5 >> 35) & 0x3FFFF;
    uint64_t v15 = *(void *)(a1 + 8 * ((v5 >> 53) & 0x3FF) + 680);
    uint64_t v9 = sub_10002BA84((uint64_t)&v15, 1);
    sub_1000334EC(v9, v8, v7, &v16, v10, v11, v12, v13);
    if (v6 != v16 - 1) {
      break;
    }
    if (++v4 == -1) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_10006BEDC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  int v43 = a3;
  uint64_t v9 = (char *)a2;
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 9040) << 8;
  unsigned int v13 = v12 - *(_DWORD *)(a1 + 9044);
  uint64_t v14 = *(void *)(a1 + 9032);
  uint64_t v15 = *(void *)(v14 + 8LL * (v13 >> 8)) + 32LL * -*(_BYTE *)(a1 + 9044);
  unsigned int v50 = 0;
  uint64_t v48 = (unsigned int **)(a1 + 680);
  uint64_t v44 = (_WORD *)(a1 + 9200);
  int v16 = v12 - 1;
  uint64_t v17 = 0xFFFFLL;
  while (1)
  {
    uint64_t v18 = *(unsigned __int16 *)(v15 + 18);
    if ((_DWORD)v18 == 0xFFFF) {
      break;
    }
    if ((_DWORD)v18 != (unsigned __int16)v17)
    {
      int v11 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v15 + 18));
      uint64_t v17 = v18;
    }

    int v19 = *(unsigned __int8 *)(v15 + 26);
    if (!qword_1000FDCC0 || (*(_DWORD *)(qword_1000FDCC0 + 816) ? (BOOL v20 = v11 == v19) : (BOOL v20 = 1), v20))
    {
      if (v11 != v19) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v21 = v17;
      int v22 = sub_10002BA64(*(void *)(a1 + 8 * ((*(void *)v15 >> 53) & 0x3FFLL) + 680), *(void *)v15);
      uint64_t v17 = v21;
      if (!v22) {
        goto LABEL_4;
      }
    }

    if ((v11 == 1 || *(_DWORD *)(a1 + 544) != 2) && (*(void *)v15 & 0x8000000000000000LL) == 0
      || *(_WORD *)(v15 + 20) == 0x4000)
    {
      goto LABEL_4;
    }

    int v41 = *(__int16 *)(v15 + 20);
    int v42 = v12;
    unsigned int v47 = v17;
    int v46 = v9;
    unsigned int v23 = *(_DWORD *)(v15 + 8);
    int v51 = 0;
    int v49 = v50;
    unint64_t v24 = sub_1000CAF58(1096LL, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v25 = sub_10002BA84((uint64_t)v48, *(_DWORD *)(a1 + 8872));
    *(_DWORD *)(v24 + 12) = 1;
    *(_OWORD *)(v24 + 264) = 0u;
    *(_OWORD *)(v24 + 280) = 0u;
    *(_OWORD *)(v24 + 296) = 0u;
    int v45 = v8;
    if (v8) {
      uint64_t v26 = v24 + 264;
    }
    else {
      uint64_t v26 = 0LL;
    }
    *(_OWORD *)(v24 + 307) = 0uLL;
    unsigned int v40 = v23;
    int v27 = sub_10009CEDC( *(void *)(a1 + 9000),  v23,  v24 + 28,  v24 + 384,  v24 + 323,  v24 + 856,  (__int16 *)(v24 + 146),  v26,  59,  &v51);
    *(_DWORD *)(v24 + 8) = v27;
    if (v27 <= 58)
    {
      LODWORD(v33) = v27;
      if (v25)
      {
        if (v27 >= 1)
        {
          uint64_t v34 = 0LL;
          do
          {
            *(_DWORD *)(v24 + 4 * v34 + 620) = sub_1000315D4( v25,  *(unsigned int *)(v24 + 4 * v34 + 384),  *(unsigned int *)(v24 + 4 * v34 + 856),  v28,  v29,  v30,  v31,  v32);
            ++v34;
            uint64_t v33 = *(int *)(v24 + 8);
          }

          while (v34 < v33);
        }
      }

      else
      {
        bzero((void *)(v24 + 620), 4 * v27);
      }

      uint64_t v35 = (*(void *)v15 >> 53) & 0x3FFLL;
      int v51 = (*(void *)v15 >> 53) & 0x3FF;
      *(void *)(v24 + 16) = *(void *)(a1 + 8 * v35 + 680);
      *(_WORD *)(v24 + 2LL * (int)v33 + 28) = v47;
      *(_DWORD *)(v24 + 4LL * *(int *)(v24 + 8) + 384) = (*(void *)v15 >> 35) & 0x3FFFF;
      *(_BYTE *)(v24 + *(int *)(v24 + 8) + 323) = (*(void *)v15 & 0x3FFLL) == 0;
      *(_WORD *)(v24 + 2LL * (int)(*(_DWORD *)(v24 + 8))++ + 146) = *v44 - 1;
      *(_DWORD *)unint64_t v24 = *(_DWORD *)(a1 + 9076) + v41;
      if (v49 >= 1)
      {
        int v36 = 0;
        int v37 = 1096 * v49 - 1096;
        unsigned int v38 = v46;
        while (sub_100024334(v24, (uint64_t)v38))
        {
          v38 += 1096;
          ++v36;
          v37 -= 1096;
          if (v49 == v36) {
            goto LABEL_2;
          }
        }

        if (*(_DWORD *)v24 >= *(_DWORD *)v38) {
          goto LABEL_3;
        }
        unsigned int v50 = v49 - 1;
        if (v36 < v49 - 1) {
          j__memmove(v38, v38 + 1096, v37);
        }
      }

LABEL_2:
      sub_10006C570(a1, (unsigned __int16)v47, v15, v41, v40, v46, (int *)&v50, v43, v45);
    }

    uint64_t result = 0LL;
LABEL_3:
    *(_DWORD *)(a1 + 548) = 3;
    return result;
  }

  *(_DWORD *)(a1 + 648) = v21;
  if (v21)
  {
    uint64_t v31 = 1;
    goto LABEL_54;
  }

uint64_t sub_10006C2D0(uint64_t a1, char *a2, int a3, int a4)
{
  int v28 = 0;
  int v5 = 0;
  HIDWORD(v29) = 0;
  uint64_t v26 = *(void *)(a1 + 376);
  int v6 = *(_DWORD *)(a1 + 9040) << 8;
  unsigned int v7 = v6 - *(_DWORD *)(a1 + 9044);
  uint64_t v8 = *(void *)(a1 + 9032);
  uint64_t v9 = *(void *)(v8 + 8LL * (v7 >> 8)) + 32LL * -*(_BYTE *)(a1 + 9044);
  LOWORD(v10) = -1;
  while (1)
  {
    int v11 = *(unsigned __int16 *)(v9 + 18);
    if (v11 != 0xFFFF) {
      break;
    }
    if (++v7 == v6) {
      goto LABEL_33;
    }
LABEL_3:
    uint64_t v9 = *(void *)(v8 + 8LL * (v7 >> 8)) + 32LL * v7;
  }

  __int16 v12 = *(_WORD *)(v9 + 20);
  unint64_t v13 = *(unsigned int *)(v9 + 8);
  int v14 = *(_DWORD *)(a1 + 620);
  if (v14 >= v11)
  {
    if (v11 != (unsigned __int16)v10)
    {
      int v5 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v9 + 18));
      LOWORD(v10) = v11;
    }

    int v17 = *(unsigned __int8 *)(v9 + 26);
    if (!qword_1000FDCC0 || (*(_DWORD *)(qword_1000FDCC0 + 816) ? (BOOL v18 = v5 == v17) : (BOOL v18 = 1), v18))
    {
      if (v5 != v17) {
        goto LABEL_32;
      }
    }

    else
    {
      if (*(unsigned __int16 *)(v9 + 24) != *(unsigned __int16 *)(v9 + 20))
      {
        __int16 v12 = *(_WORD *)(v9 + 22);
        unint64_t v13 = *(unsigned int *)(v9 + 12);
      }
    }

    BOOL v20 = (_WORD *)(v9 + 20);
    if (*(_DWORD *)(a1 + 544) == 2)
    {
      int v28 = 1;
LABEL_30:
      if (*v20 != 0x4000) {
        sub_10006C570(a1, (unsigned __int16)v10, v9, v12, v13, a2, (int *)&v29 + 1, a3, a4);
      }
      goto LABEL_32;
    }

    uint64_t v21 = *(void *)v9 >> 63;
    int v28 = v21;
LABEL_29:
    if (!(_DWORD)v21) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }

  uint64_t v15 = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8LL * (~v14 + v11)), 0);
  uint64_t v16 = *(void *)v9 & 0x3FFFFFFLL;
  if ((*(__int16 *)(v15 + 4 * v16) & 0x80000000) == 0)
  {
    if (++v7 == v6) {
      goto LABEL_33;
    }
    goto LABEL_8;
  }

  unsigned int v10 = *(unsigned __int16 *)(v15 + 4 * v16 + 2);
  sub_1000265B8(*(void *)(a1 + 8 * ((*(void *)v9 >> 53) & 0x3FFLL) + 680));
  if (!*(_DWORD *)(a1 + 9284)
    || (_DWORD)v13 == -1
    || (unsigned int v19 = sub_10009D1B4(*(void *)(a1 + 9000), v13), sub_1000BBCE0(v26, v19, v10)))
  {
    BOOL v20 = (_WORD *)(v9 + 20);
    LODWORD(v21) = v28;
    goto LABEL_29;
  }

void *sub_10006C570( uint64_t a1, unsigned int a2, uint64_t a3, int a4, unint64_t a5, _DWORD *a6, int *a7, int a8, int a9)
{
  unsigned int v50 = 0;
  int v14 = *a7;
  __int16 v49 = 0;
  uint64_t v15 = (unsigned int **)(a1 + 680);
  uint64_t v16 = (uint64_t *)sub_10002BA84(a1 + 680, *(_DWORD *)(a1 + 8872));
  unint64_t v24 = (_DWORD *)sub_1000CAF58(1096LL, v17, v18, v19, v20, v21, v22, v23);
  bzero(v24, 0x448uLL);
  v24[3] = 1;
  *(_OWORD *)(v24 + 66) = 0u;
  *(_OWORD *)(v24 + 70) = 0u;
  *(_OWORD *)(v24 + 74) = 0u;
  *(_OWORD *)((char *)v24 + 307) = 0u;
  if (a9) {
    uint64_t v25 = (uint64_t)(v24 + 66);
  }
  else {
    uint64_t v25 = 0LL;
  }
  if (*(int *)(a1 + 8872) >= 1 && sub_100025C94(*v15) == 3)
  {
    int v26 = *(unsigned __int16 *)(a3 + 18);
    int v27 = *(_DWORD *)(a1 + 620);
    if (v27 >= v26)
    {
      unint64_t v29 = *(void *)a3 & 0x7FFFFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v48 = 0LL;
      BOOL v47 = 0;
      uint64_t v28 = *(unsigned int *)(*(void *)(a1 + 9344) + 4LL * (~v27 + v26));
      unsigned int v50 = (*(void *)a3 >> 53) & 0x3FF;
      sub_100033BD8(v16, v28, a2, (unsigned int *)&v48 + 1, (int *)&v48, &v47);
      unint64_t v29 = ((unint64_t)v50 << 53) + (v28 << 35) + ((uint64_t)SHIDWORD(v48) << 10);
    }

    v24[6] = sub_10009C670(*(unsigned int **)(a1 + 9000), a5, a2, v29, 0, 0, *(_WORD *)(a1 + 9200));
    char v38 = 1;
    goto LABEL_18;
  }

  int v30 = sub_10009CEDC( *(void *)(a1 + 9000),  a5,  (uint64_t)(v24 + 7),  (uint64_t)(v24 + 96),  (uint64_t)v24 + 323,  (uint64_t)(v24 + 214),  (__int16 *)v24 + 73,  v25,  59,  &v50);
  v24[2] = v30;
  if (v30 <= 58)
  {
    LODWORD(v36) = v30;
    if (v16)
    {
      if (v30 >= 1)
      {
        uint64_t v37 = 0LL;
        do
        {
          v24[v37 + 155] = sub_1000315D4( (uint64_t)v16,  v24[v37 + 96],  v24[v37 + 214],  v31,  v32,  v33,  v34,  v35);
          ++v37;
          uint64_t v36 = (int)v24[2];
        }

        while (v37 < v36);
      }
    }

    else
    {
      bzero(v24 + 155, 4 * v30);
    }

    char v38 = 0;
    *((_WORD *)v24 + (int)v36 + 14) = a2;
    v24[v24[2] + 96] = (*(void *)a3 >> 35) & 0x3FFFF;
    *((_BYTE *)v24 + v24[2] + 323) = (*(void *)a3 & 0x3FFLL) == 0;
    *((_WORD *)v24 + v24[2]++ + 73) = *(_WORD *)(a1 + 9200) - 1;
LABEL_18:
    uint64_t v39 = (*(void *)a3 >> 53) & 0x3FFLL;
    unsigned int v50 = (*(void *)a3 >> 53) & 0x3FF;
    *((void *)v24 + 2) = *(void *)(a1 + 8 * v39 + 680);
    *unint64_t v24 = *(_DWORD *)(a1 + 9076) + a4;
    *((_WORD *)v24 + 2) = 0;
    unsigned int v40 = *(_DWORD *)(a1 + 544);
    if ((v40 > 0xB || ((1 << v40) & 0x828) == 0) && *(__int16 *)(a1 + 456) != -1)
    {
      __int16 v49 = sub_1000BB868(*(void *)(a1 + 376), a2, 0LL);
      *v24 += sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v49, 1u, *(unsigned __int16 *)(a1 + 456));
    }

    if ((v38 & 1) != 0)
    {
      if (v14 >= 1)
      {
        int v41 = 0;
        while ((sub_1000243EC(v24, a6) & 0x80000000) == 0)
        {
          a6 += 274;
          if (v14 == ++v41) {
            goto LABEL_30;
          }
        }

        goto LABEL_31;
      }
    }

    else if (v14 >= 1)
    {
      int v41 = 0;
      while ((sub_10002426C(v24, a6) & 0x80000000) == 0)
      {
        a6 += 274;
        if (v14 == ++v41)
        {
LABEL_30:
          int v41 = v14;
          break;
        }
      }

uint64_t sub_10006C944(uint64_t a1, __int16 *a2, uint64_t a3)
{
  int v6 = (_WORD *)(a1 + 8976);
  int v7 = *(unsigned __int16 *)(a3 + 16);
  int v8 = *(unsigned __int16 *)(a1 + 8976);
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), v7);
  unsigned int v10 = (unsigned __int16 *)result;
  if (v7 == v8)
  {
    int v11 = *a2;
    int v12 = *(__int16 *)(a3 + 20);
    if (v11 < v12)
    {
      *(_WORD *)(a3 + 20) = *a2;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 1);
      int v12 = v11;
    }

    if (v12 > (__int16)v6[43])
    {
      *(_WORD *)(a3 + 24) = 0x4000;
      *(_WORD *)(a3 + 20) = 0x4000;
      return result;
    }

    uint64_t v17 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v17);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v17);
      LOWORD(v12) = *(_WORD *)(a3 + 20);
    }

    __int16 v18 = result - v6[41] + v12;
    *(_WORD *)(a3 + 20) = v18;
    *(_WORD *)(a3 + 24) = v18;
    if (v18 < (__int16)v6[36])
    {
      v6[36] = v18;
LABEL_28:
      v6[38] = *(_WORD *)(a3 + 18);
      v6[104] = *(_WORD *)(a3 + 16);
      return result;
    }

    return result;
  }

  int v13 = *(__int16 *)(a3 + 20);
  int v14 = *(__int16 *)(a3 + 22);
  if (v13 < v14)
  {
    *(_WORD *)(a3 + 22) = *(_WORD *)(a3 + 20);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a3 + 8);
    int v14 = v13;
  }

  if (v14 > (__int16)v6[43])
  {
    *(_DWORD *)(a3 + 22) = 1073758208;
    __int16 v15 = 0x4000;
    int v16 = *a2;
LABEL_19:
    *(_WORD *)(a3 + 20) = v16;
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 1);
    LOWORD(v13) = v16;
    goto LABEL_20;
  }

  uint64_t v19 = *(unsigned __int16 *)(result + 2);
  uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v19);
  if ((_DWORD)result == 0x4000)
  {
    uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v19);
    LOWORD(v14) = *(_WORD *)(a3 + 22);
    LOWORD(v13) = *(_WORD *)(a3 + 20);
  }

  __int16 v15 = result - v6[41] + v14;
  *(_WORD *)(a3 + 22) = v15;
  *(_WORD *)(a3 + 24) = v15;
  int v16 = *a2;
LABEL_20:
  if ((__int16)v6[43] >= (__int16)v13)
  {
    uint64_t v20 = *v10;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v20);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v20);
      LOWORD(v13) = *(_WORD *)(a3 + 20);
      __int16 v15 = *(_WORD *)(a3 + 24);
    }

    __int16 v21 = result - v6[41] + v13;
    *(_WORD *)(a3 + 20) = v21;
    if (v21 < v15)
    {
      *(_WORD *)(a3 + 24) = v21;
      __int16 v15 = v21;
    }
  }

  else
  {
    *(_WORD *)(a3 + 20) = 0x4000;
  }

  if ((__int16)v6[36] > v15)
  {
    v6[36] = v15;
    goto LABEL_28;
  }

  return result;
}

uint64_t sub_10006CB6C(uint64_t a1, _DWORD *a2, int *a3, int a4, uint64_t *a5)
{
  int v89 = 0;
  uint64_t v87 = 0LL;
  uint64_t v88 = 0LL;
  __int128 v85 = 0u;
  __int128 v86 = 0u;
  BYTE10(v86) = -1;
  uint64_t v8 = *(int *)(a1 + 568) - 1LL;
  *((_WORD *)&v86 + v8 + 2) = 0x4000;
  unint64_t v9 = *a2;
  uint64_t v10 = *(void *)(a1 + 9032);
  uint64_t v11 = *(void *)(v10 + ((v9 >> 5) & 0x7FFFFF8));
  *((_DWORD *)&v85 + v8 + 2) = -1;
  int v12 = (__int128 *)(v11 + 32LL * v9);
  int v84 = *a3;
  uint64_t v13 = *a3;
  uint64_t v81 = *(void *)(v10 + (((unint64_t)*a3 >> 5) & 0x7FFFFF8));
  uint64_t v14 = v81 + 32 * v13;
  sub_10009B1B8(*(void *)(a1 + 9256), *((unsigned __int16 *)v12 + 9), 0LL, &v87, &v89);
  if (*((unsigned __int16 *)v12 + 9) == a4 && ((*(void *)v12 ^ *a5) & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    if (*(_BYTE *)(v11 + 32LL * v9 + 26))
    {
      if ((int)v9 - 2 <= v84)
      {
        *(_DWORD *)(a1 + 552) = 3;
        return 1LL;
      }

      uint64_t v21 = v81 + 32 * v13;
      *(_DWORD *)(v21 + 20) = 1073758208;
      *(_WORD *)(v21 + 18) = a4;
      *(_BYTE *)(v21 + 26) = 0;
      __int16 v22 = *v87;
      *(_WORD *)(v21 + 16) = *v87;
      uint64_t v23 = *a5;
      *(void *)uint64_t v14 = *a5;
      LOWORD(v88) = *((_WORD *)a5 + 8);
      HIDWORD(v88) = *((_DWORD *)a5 + 2);
      WORD1(v86) = a4;
      uint64_t v17 = v81;
      LOWORD(v86) = v22;
      *(void *)&__int128 v85 = v23;
      ++*a3;
      unsigned int v80 = 1;
      uint64_t v16 = v11 + 32LL * v9;
      int v12 = &v85;
      __int16 v18 = (unsigned __int16 *)(a1 + 8976);
      uint64_t v19 = v81 + 32 * v13;
      uint64_t v20 = (unsigned __int16 *)(v19 + 16);
      if (*(_WORD *)(v19 + 16)) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }

    LOWORD(v88) = *((_WORD *)a5 + 8);
    HIDWORD(v88) = *((_DWORD *)a5 + 2);
    __int128 v79 = v12[1];
    *(_OWORD *)uint64_t v14 = *v12;
    *(_OWORD *)(v14 + 16) = v79;
    LODWORD(v9) = v9 + 1;
    uint64_t v16 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v9 >> 8)) + 32LL * v9;
    unsigned int v80 = 1;
  }

  else
  {
    unsigned int v80 = 0;
    __int128 v15 = v12[1];
    *(_OWORD *)uint64_t v14 = *v12;
    *(_OWORD *)(v14 + 16) = v15;
    LOWORD(v88) = 0x4000;
    HIDWORD(v88) = -1;
    LODWORD(v9) = v9 + 1;
    uint64_t v16 = *(void *)(*(void *)(a1 + 9032) + 8LL * (v9 >> 8)) + 32LL * v9;
  }

  uint64_t v17 = v81;
  __int16 v18 = (unsigned __int16 *)(a1 + 8976);
  uint64_t v19 = v81 + 32 * v13;
  uint64_t v20 = (unsigned __int16 *)(v19 + 16);
  if (*(_WORD *)(v19 + 16))
  {
LABEL_5:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9424))(a1, &v88, v14);
    goto LABEL_17;
  }

LABEL_77:
    if (*((unsigned __int16 *)v41 + 9) != *((unsigned __int16 *)v12 + 9)
      || ((*(void *)v12 ^ *(void *)v41) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      *a2 = v9;
      *a3 = v36;
      return v80;
    }

    __int128 v68 = v12[1];
    *(_OWORD *)uint64_t i = *v12;
    *(_OWORD *)(i + 16) = v68;
    LOWORD(v88) = 0x4000;
    HIDWORD(v88) = -1;
    if (*(_WORD *)(i + 16))
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9424))(a1, &v88, i);
    }

    else
    {
      unsigned int v69 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
      int v70 = (__int16)v88;
      int v71 = *(__int16 *)(i + 20);
      if ((__int16)v88 < v71)
      {
        *(_WORD *)(i + 20) = v88;
        *(_DWORD *)(i + 8) = HIDWORD(v88);
        int v71 = v70;
      }

      if (v71 <= (__int16)v18[43])
      {
        uint64_t v72 = *v69;
        int v73 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v72);
        if (v73 == 0x4000)
        {
          LOWORD(v73) = sub_100015BC0(*(void *)(a1 + 384), v72);
          LOWORD(v71) = *(_WORD *)(i + 20);
        }

        signed __int16 v74 = v73 - v18[41] + v71;
        *(_WORD *)(i + 20) = v74;
        *(_WORD *)(i + 24) = v74;
        if (v74 < (__int16)v18[36])
        {
          v18[36] = v74;
          v18[38] = *(_WORD *)(i + 18);
          v18[104] = *(_WORD *)(i + 16);
        }
      }

      else
      {
        *(_WORD *)(i + 24) = 0x4000;
        *(_WORD *)(i + 20) = 0x4000;
      }
    }

    LODWORD(v9) = v9 + 1;
    uint64_t v38 = *(void *)(a1 + 9032);
    uint64_t v16 = *(void *)(v38 + 8LL * (v9 >> 8)) + 32LL * v9;
    ++v36;
  }

  if ((int)v9 - 2 > (int)v36)
  {
    *(_WORD *)(i + 18) = *((_WORD *)v41 + 9);
    *(_BYTE *)(i + 26) = *((_BYTE *)v41 + 26) + 1;
    *(void *)uint64_t i = *(void *)v41;
    if (v54 - 1 != *((unsigned __int8 *)v41 + 26))
    {
      *(_DWORD *)(i + 20) = 1073758208;
      int v62 = v87[*((unsigned __int8 *)v41 + 26) + 1];
      *(_WORD *)(i + 16) = v62;
      if (v62)
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9424))(a1, &v88, i);
      }

      else
      {
        uint64_t v65 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
        int v66 = (__int16)v88;
        int v67 = *(__int16 *)(i + 20);
        if ((__int16)v88 < v67)
        {
          *(_WORD *)(i + 20) = v88;
          *(_DWORD *)(i + 8) = HIDWORD(v88);
          int v67 = v66;
        }

        if (v67 <= (__int16)v18[43])
        {
          uint64_t v75 = *v65;
          int v76 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v75);
          if (v76 == 0x4000)
          {
            LOWORD(v76) = sub_100015BC0(*(void *)(a1 + 384), v75);
            LOWORD(v67) = *(_WORD *)(i + 20);
          }

          signed __int16 v77 = v76 - v18[41] + v67;
          *(_WORD *)(i + 20) = v77;
          *(_WORD *)(i + 24) = v77;
          if (v77 < (__int16)v18[36])
          {
            v18[36] = v77;
            v18[38] = *(_WORD *)(i + 18);
            v18[104] = *(_WORD *)(i + 16);
          }
        }

        else
        {
          *(_WORD *)(i + 24) = 0x4000;
          *(_WORD *)(i + 20) = 0x4000;
        }
      }

      goto LABEL_76;
    }

    int v56 = *v18;
    *(_WORD *)(i + 16) = v56;
    *(_WORD *)(i + 20) = 0x4000;
    uint64_t v57 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), v56);
    int v58 = (__int16)v88;
    int v59 = *(__int16 *)(i + 20);
    if ((__int16)v88 < v59)
    {
      *(_WORD *)(i + 20) = v88;
      *(_DWORD *)(i + 8) = HIDWORD(v88);
      int v59 = v58;
    }

    if (v59 <= (__int16)v18[43])
    {
      uint64_t v63 = *v57;
      int v64 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v63);
      if (v64 == 0x4000)
      {
        LOWORD(v64) = sub_100015BC0(*(void *)(a1 + 384), v63);
        LOWORD(v59) = *(_WORD *)(i + 20);
      }

      __int16 v60 = v64 - v18[41] + v59;
      *(_WORD *)(i + 20) = v60;
      *(_WORD *)(i + 24) = v60;
      if (v60 < (__int16)v18[36])
      {
        v18[36] = v60;
        v18[38] = *(_WORD *)(i + 18);
        v18[104] = *(_WORD *)(i + 16);
        __int16 v60 = *(_WORD *)(i + 20);
        uint64_t v61 = *(void *)(a1 + 9240);
        if (*(_DWORD *)v61 > v60) {
          goto LABEL_74;
        }
      }

      else
      {
        uint64_t v61 = *(void *)(a1 + 9240);
        if (*(_DWORD *)v61 > v60) {
          goto LABEL_74;
        }
      }
    }

    else
    {
      __int16 v60 = 0x4000;
      *(_WORD *)(i + 24) = 0x4000;
      *(_WORD *)(i + 20) = 0x4000;
      uint64_t v61 = *(void *)(a1 + 9240);
      if (*(int *)v61 > 0x4000)
      {
LABEL_74:
        ++*(_WORD *)(*(void *)(v61 + 8) + 2LL * v60);
        ++*(_DWORD *)(*(void *)(a1 + 9240) + 4LL);
        if ((__int16)v18[37] <= v60)
        {
LABEL_76:
          ++v36;
          uint64_t i = *(void *)(*(void *)(a1 + 9032) + 8LL * (v36 >> 8)) + 32LL * v36;
          goto LABEL_77;
        }

    int v25 = (void)v149 != 0LL;
    if ((void)v149)
    {
      if (!*((void *)&v156 + 1)) {
        goto LABEL_85;
      }
      Property = (*((uint64_t (**)(__int128 *, void, double))&v156 + 1))(&v149, 0LL, mSampleRate);
    }

    else
    {
      Property = sub_1000E97E0(v146, (uint64_t)&v149);
      DWORD2(context) = Property;
      if ((_DWORD)Property
        && (syslog( 3,  "Error %d at %s:%d\n",  Property,  "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSRecognitionServer.c",  841),  DWORD2(context))
        || (LODWORD(inAQ[0]) = v146, !(void)v152))
      {
LABEL_85:
        int v25 = 1;
        goto LABEL_86;
      }

      v159[1] = sub_1000E27BC(*((uint64_t *)&v150 + 1), (const __CFString *)cf[0], (uint64_t)cf[1]);
      Property = ((uint64_t (*)(__int128 *, CFTypeRef, double))v152)(&v149, v159[1], mSampleRate);
    }

    DWORD2(context) = Property;
LABEL_86:
    if (v18 != *(double *)&v150)
    {
      int v26 = (os_log_s *)VSGetLogDefault(Property);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "_CreateEngineIfNecessary";
        uint64_t v169 = 1024;
        uint64_t v170 = (int)*(double *)&v150;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "%s: sample rate change (now %d Hz); invalidating queue\n",
          buf,
          0x12u);
      }

      sub_1000E116C((uint64_t)&context);
    }

    if (DWORD2(context)) {
      syslog( 3,  "Error %d at %s:%d\n",  DWORD2(context),  "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSRecognitionServer.c",  864);
    }
    if (v25)
    {
      if (*(_DWORD *)ValueAtIndex == 1)
      {
        int v27 = theString1;
        if (!v159[1]) {
          int v27 = 0LL;
        }
        theString1 = v27;
      }

      int v5 = v20;
    }

    else
    {
      BYTE5(inAQ[0]) = 0;
      int v5 = v20;
      if (*(_DWORD *)ValueAtIndex == 1)
      {
        if (DWORD2(context))
        {
LABEL_198:
          if (sub_1000E2B58( *((const __CFString **)ValueAtIndex + 1),  *((const __CFString **)ValueAtIndex + 2),  &v149,  (CFURLRef *)&v159[1]))
          {
            uint64_t v61 = 0LL;
            LODWORD(inAQ[0]) = -1;
          }

          else
          {
            if (cf1[0]) {
              CFRelease(cf1[0]);
            }
            uint64_t v61 = 0LL;
            cf1[0] = sub_1000E625C();
          }

          goto LABEL_302;
        }

LABEL_75:
        v18[37] = v60;
        goto LABEL_76;
      }
    }

    goto LABEL_75;
  }

  *a2 = v9;
  *a3 = v36;
  *(_DWORD *)(a1 + 552) = 3;
  return v80;
}

      v10 += 2 * v53;
    }

    goto LABEL_76;
  }

  int v45 = *(int *)(a1 + 172);
  if (!(_DWORD)v45) {
    goto LABEL_76;
  }
  int v46 = 0;
  while (1)
  {
    while (1)
    {
      uint64_t v47 = v45 - 1;
      if (v45 - 1 < 0) {
        uint64_t v47 = v45;
      }
      int v48 = v47 >> 1;
      signed __int16 v49 = *(unsigned __int16 *)(v44 + 2LL * (v46 + (int)v48));
      if (v49 <= v64) {
        break;
      }
      int v45 = (int)v48;
      if (!(_DWORD)v48) {
        goto LABEL_76;
      }
    }

    uint64_t v42 = v46 + (int)v48;
    if (v49 == v64) {
      break;
    }
    v45 -= (int)v48 + 1;
    int v46 = v42 + 1;
    if (!v45) {
      goto LABEL_76;
    }
  }

  if ((_DWORD)v42 == -1)
  {
LABEL_76:
    if (*(_WORD *)v10) {
      goto LABEL_77;
    }
    goto LABEL_92;
  }

  __int128 v43 = *(void *)(a1 + 192);
LABEL_69:
  *v30++ = *(_WORD *)(v43 + 2 * v42);
  if (*(_WORD *)v10) {
    goto LABEL_77;
  }
LABEL_92:
  *a5 = ((unint64_t)v30 - a4) >> 1;
  if (v30 == (_WORD *)a4) {
    return 0LL;
  }
  *int v30 = -1;
  ++*a5;
  return 1LL;
}

          __int16 *v72 = v9;
          _DWORD *v73 = v10;
          return result;
        }
      }

uint64_t sub_10006D510(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (_WORD *)sub_1000C1074(9432LL);
  uint64_t v9 = (uint64_t)v8;
  if (!v8) {
    return v9;
  }
  uint64_t v10 = v8 + 4454;
  memcpy(v8, off_1000F9700, 0x208uLL);
  *(void *)(v9 + 376) = a1;
  *(void *)(v9 + 384) = a2;
  *(_DWORD *)(v9 + 432) = a3;
  *(_DWORD *)(v9 + 560) = a4;
  int v11 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v11 = *(_DWORD *)(qword_1000FDCC0 + 5276);
  }
  *(_DWORD *)(v9 + 8896) = v11;
  *(_DWORD *)(v9 + 368) = 9;
  *(_WORD *)(v9 + 8946) = sub_100004690(a2);
  *(_DWORD *)(v9 + 556) = 0;
  uint64_t v12 = *(int *)(v9 + 432);
  int v13 = sub_10000462C(*(void *)(v9 + 384));
  *(_DWORD *)(v9 + 568) = v13;
  uint64_t v14 = sub_100073D60;
  if (v13 == 1) {
    uint64_t v14 = sub_100072488;
  }
  *(void *)(v9 + 9416) = v14;
  *(void *)(v9 + 592) = 0LL;
  *(_DWORD *)(v9 + 588) = 0;
  *(void *)(v9 + 576) = 0LL;
  uint64_t v15 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v16 = *(void *)(qword_1000FDCC0 + 5208) / v12;
    *(_WORD *)(v9 + 8910) = v16;
    _WORD *v10 = *(void *)(v15 + 5216) / v12 - v16;
    *(_OWORD *)(v9 + 9024) = 0u;
    *(_WORD *)(v9 + 9064) = *(void *)(v15 + 1688);
    *(_WORD *)(v9 + 9066) = *(void *)(v15 + 1456);
    *(_WORD *)(v9 + 9070) = *(void *)(v15 + 1496);
    __int16 v17 = *(_WORD *)(v15 + 1664);
  }

  else
  {
    __int16 v17 = 0;
    *(_DWORD *)uint64_t v10 = 0;
    *(_DWORD *)(v9 + 9064) = 0;
    *(_WORD *)(v9 + 9070) = 0;
    *(_OWORD *)(v9 + 9024) = 0u;
  }

  *(_WORD *)(v9 + 9072) = v17;
  *(_WORD *)(v9 + 9202) = -1;
  *(void *)(v9 + 456) = 0xFFFFFFFFLL;
  *(_DWORD *)(v9 + 9204) = 0;
  if (v15)
  {
    uint64_t v18 = sub_10009C484(*(_DWORD *)(v15 + 4120));
    *(void *)(v9 + 9000) = v18;
    if (!v18) {
      goto LABEL_39;
    }
  }

  else
  {
    uint64_t v18 = sub_10009C484(0);
    *(void *)(v9 + 9000) = v18;
    if (!v18) {
      goto LABEL_39;
    }
  }

  sub_10009C5B0(v18, *(void *)(v9 + 376));
  *(void *)(v9 + 9016) = 0LL;
  *(_DWORD *)(v9 + 8872) = 0;
  sub_10003AF54(v9);
  if (!*(void *)(v9 + 408)) {
    goto LABEL_39;
  }
  *(void *)(v9 + 9232) = sub_10005DD24();
  *(void *)(v9 + 9240) = sub_10005DD24();
  int v19 = sub_1000045F4(*(void *)(v9 + 384));
  *(void *)(v9 + 640) = sub_1000C1074(v19);
  *(void *)(v9 + 528) = sub_100071C1C;
  *(void *)(v9 + 536) = sub_100073FDC;
  uint64_t v20 = (void *)qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_23;
  }
  uint64_t v21 = *(void *)(qword_1000FDCC0 + 4064);
  if (v21 >= 1)
  {
    uint64_t v22 = sub_1000C1074(2 * v21);
    *(void *)(v9 + 9216) = v22;
    if (!v22) {
      goto LABEL_39;
    }
    uint64_t v20 = (void *)qword_1000FDCC0;
    if (!qword_1000FDCC0)
    {
LABEL_23:
      *(void *)(v9 + 9360) = 0LL;
      goto LABEL_24;
    }
  }

  *(void *)(v9 + 9360) = v20[190];
  uint64_t v23 = sub_1000C1074(8LL * v20[190]);
  *(void *)(v9 + 9328) = v23;
  if (!v23) {
    goto LABEL_39;
  }
  uint64_t v24 = qword_1000FDCC0 ? 2LL * *(void *)(qword_1000FDCC0 + 1520) : 0LL;
  uint64_t v26 = sub_1000C1074(v24);
  *(void *)(v9 + 9336) = v26;
  if (!v26) {
    goto LABEL_39;
  }
  uint64_t v27 = qword_1000FDCC0 ? 4LL * *(void *)(qword_1000FDCC0 + 1520) : 0LL;
  uint64_t v28 = sub_1000C1074(v27);
  *(void *)(v9 + 9344) = v28;
  if (!v28) {
    goto LABEL_39;
  }
  uint64_t v20 = (void *)qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_24;
  }
  if (*(uint64_t *)(qword_1000FDCC0 + 1608) < 2)
  {
LABEL_36:
    *(_DWORD *)(v9 + 9368) = v20[201];
    *(_DWORD *)(v9 + 9372) = v20[202];
    uint64_t v30 = v20[198];
    if (v30)
    {
      uint64_t v31 = v20[517];
      if (v31)
      {
        uint64_t v32 = sub_1000D0010(*(void *)(v9 + 384), *(void *)(v9 + 376), v12, v31, v30, 0, 0, 0);
        *(void *)(v9 + 472) = v32;
        if (!v32) {
          goto LABEL_39;
        }
      }
    }

    return v9;
  }

  uint64_t v29 = sub_1000C1074(4LL * *(void *)(qword_1000FDCC0 + 1520));
  *(void *)(v9 + 9352) = v29;
  if (v29)
  {
    uint64_t v20 = (void *)qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_36;
    }
LABEL_24:
    *(void *)(v9 + 9368) = 0LL;
    return v9;
  }

uint64_t sub_10006D83C(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 9016);
  if (v2)
  {
    sub_100024158(v2);
    *(void *)(a1 + 9016) = 0LL;
  }

  sub_1000C0EF8(*(void *)(a1 + 640));
  uint64_t v3 = *(void *)(a1 + 472);
  if (v3) {
    sub_1000D0174(v3);
  }
  sub_10005DD98(*(void *)(a1 + 9232));
  sub_10005DD98(*(void *)(a1 + 9240));
  sub_100006EFC(*(void *)(a1 + 408));
  sub_1000C1BC8(*(void *)(a1 + 592), *(unsigned int *)(a1 + 608), *(_DWORD *)(a1 + 608));
  sub_1000C1BC8(*(void *)(a1 + 600), *(unsigned int *)(a1 + 608), *(_DWORD *)(a1 + 608));
  sub_10009ACA8(*(void *)(a1 + 9256));
  sub_1000515F0(*(void *)(a1 + 9264));
  sub_1000C0EF8(*(void *)(a1 + 576));
  sub_1000C1BC8(*(void *)(a1 + 9024), *(unsigned int *)(a1 + 9040), *(_DWORD *)(a1 + 9040));
  sub_10009C54C(*(void *)(a1 + 9000));
  sub_1000C0EF8(*(void *)(a1 + 9216));
  sub_1000C0EF8(*(void *)(a1 + 9312));
  sub_1000C0EF8(*(void *)(a1 + 9328));
  sub_1000C0EF8(*(void *)(a1 + 9336));
  sub_1000C0EF8(*(void *)(a1 + 9344));
  sub_1000C0EF8(*(void *)(a1 + 9352));
  sub_1000C0EF8(*(void *)(a1 + 656));
  sub_1000C0EF8(*(void *)(a1 + 664));
  sub_1000C0EF8(*(void *)(a1 + 9192));
  sub_10002613C(*(void *)(a1 + 9384));
  return sub_1000C0EF8(a1);
}

uint64_t sub_10006D93C(uint64_t a1, int a2)
{
  *(void *)(a1 + 592) = 0LL;
  if (*(_DWORD *)(a1 + 556))
  {
    sub_1000C1BC8(*(void *)(a1 + 600), *(unsigned int *)(a1 + 608), *(_DWORD *)(a1 + 608));
    *(void *)(a1 + 600) = 0LL;
    int v4 = *(_DWORD *)(a1 + 556);
    *(_DWORD *)(a1 + 608) = 0;
    if (v4)
    {
      sub_1000C0EF8(0LL);
      *(void *)(a1 + 600) = 0LL;
    }
  }

  else
  {
    *(_DWORD *)(a1 + 608) = 0;
  }

  sub_1000C1BC8(*(void *)(a1 + 9024), *(unsigned int *)(a1 + 9040), *(_DWORD *)(a1 + 9040));
  *(void *)(a1 + 9024) = 0LL;
  *(_DWORD *)(a1 + 9040) = 0;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 9192));
  *(void *)(a1 + 9192) = 0LL;
  *(_DWORD *)(a1 + 9188) = 0;
  if (a2) {
    return sub_10009AD10(*(void *)(a1 + 9256));
  }
  return result;
}

uint64_t sub_10006D9E8( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10)
{
  uint64_t v109 = 0LL;
  uint64_t v110 = 0LL;
  *(_DWORD *)(a1 + 552) = 4;
  *(_DWORD *)(a1 + 544) = a6;
  *(_DWORD *)(a1 + 548) = a7;
  uint64_t v15 = a5;
  uint64_t v16 = (char *)a4;
  int v19 = *(_DWORD *)(a1 + 8896);
  if (v19)
  {
    if ((_DWORD)a6 == 5 || (_DWORD)a6 == 2) {
      goto LABEL_2;
    }
  }

  uint64_t v20 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
    if ((_DWORD)a6 != 11) {
      goto LABEL_15;
    }
LABEL_2:
    uint64_t result = 0LL;
LABEL_3:
    *(_DWORD *)(a1 + 552) = 3;
    return result;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 4452) && *(_DWORD *)(qword_1000FDCC0 + 4544)
    || (_DWORD)a6 == 11 && *(uint64_t *)(qword_1000FDCC0 + 4912) <= 0)
  {
    goto LABEL_2;
  }

void sub_10006E6BC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 9040))
  {
    if (*(_DWORD *)(a1 + 9008))
    {
      uint64_t v2 = *(void *)(a1 + 9016);
      if (v2) {
        sub_100024180(v2);
      }
    }

    sub_1000B25A8(a1 + 9084);
    if (*(_DWORD *)(a1 + 9180)) {
      sub_1000B25A8(a1 + 9132);
    }
    unsigned int v7 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      unsigned int v7 = *(_DWORD *)(qword_1000FDCC0 + 1072);
    }
    if (*(_DWORD *)(a1 + 548) == 1) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_100025FA8(a1 + 680, *(unsigned int *)(a1 + 8872), v8, *(void *)(a1 + 9256), v3, v4, v5, v6);
    sub_100072290(a1);
  }

uint64_t sub_10006E754( uint64_t result, const void *a2, int *a3, int32x4_t a4, double a5, int32x4_t a6, int32x4_t a7, int8x16_t a8, int8x16_t a9)
{
  uint64_t v11 = result;
  uint64_t v12 = (__int16 *)(result + 8936);
  int v85 = 0;
  uint64_t v13 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1648) && !*(_DWORD *)(result + 632))
    {
      BOOL v15 = 1;
LABEL_144:
      *(_DWORD *)(v11 + 632) = v15;
      return result;
    }

    if (!*(_DWORD *)(qword_1000FDCC0 + 1680) || *(__int16 *)(result + 9200) < 1)
    {
LABEL_8:
      int v85 = *a3;
      if (*(_DWORD *)(v13 + 1464))
      {
        if (*(_DWORD *)(v11 + 628))
        {
          uint64_t result = (uint64_t)sub_100064BD4(v11, a2, a3);
          if (v12[61] != 0x4000) {
            goto LABEL_20;
          }
          goto LABEL_18;
        }

        uint64_t result = sub_100064BC4(v11, &v85);
        a2 = (const void *)result;
      }

      if (v12[61] != 0x4000) {
        goto LABEL_20;
      }
      goto LABEL_18;
    }

    uint64_t v14 = sub_100064BC4(result, &v85);
    uint64_t result = sub_100015698(*(void *)(v11 + 384), (uint64_t)a2, v14);
    uint64_t v13 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      *(_DWORD *)(v11 + 628) = *(void *)(qword_1000FDCC0 + 1472) < (int)result;
      goto LABEL_8;
    }

    *(_DWORD *)(v11 + 628) = (int)result > 0;
  }

  int v85 = *a3;
  if (v12[61] != 0x4000) {
    goto LABEL_20;
  }
LABEL_18:
  __int16 v16 = v12[132];
  if (v16)
  {
    *(_DWORD *)(v11 + 9076) = 0x40000000;
LABEL_30:
    v12[132] = v16 + 1;
    goto LABEL_139;
  }

LABEL_105:
        if ((v60 | v59) == 1)
        {
          if (*(_DWORD *)(v11 + 552) == 6)
          {
LABEL_110:
            if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 816) && *v12 == 0x4000)
            {
              unsigned int v67 = (*(_DWORD *)(v11 + 9040) << 8) - *(_DWORD *)(v11 + 9044);
              uint64_t v68 = *(void *)(v11 + 9024);
              uint64_t v69 = *(void *)(v68 + 8LL * (v67 >> 8));
              uint64_t v70 = -*(_BYTE *)(v11 + 9044);
              uint64_t v71 = v69 + 48 * v70;
              if (*(_DWORD *)(v11 + 620) >= (int)*(unsigned __int16 *)(v71 + 32))
              {
                __int16 v73 = 0x4000;
                __int16 v72 = 0x4000;
                do
                {
                  uint64_t result = sub_10002BA64( *(void *)(v11 + 8 * ((*(void *)v71 >> 53) & 0x3FFLL) + 680),  *(void *)v71);
                  int v74 = *(__int16 *)(v69 + 48 * v70 + 36);
                  __int16 v75 = v72;
                  if (v74 < v72) {
                    __int16 v75 = *(_WORD *)(v69 + 48 * v70 + 36);
                  }
                  __int16 v76 = v73;
                  if (v74 < v73) {
                    __int16 v76 = *(_WORD *)(v69 + 48 * v70 + 36);
                  }
                  if ((_DWORD)result) {
                    __int16 v72 = v75;
                  }
                  ++v67;
                  uint64_t v68 = *(void *)(v11 + 9024);
                  uint64_t v69 = *(void *)(v68 + 8LL * (v67 >> 8));
                  if (!(_DWORD)result) {
                    __int16 v73 = v76;
                  }
                  uint64_t v70 = v67;
                  uint64_t v71 = v69 + 48LL * v67;
                }

                while (*(_DWORD *)(v11 + 620) >= (int)*(unsigned __int16 *)(v71 + 32));
              }

              else
              {
                __int16 v72 = 0x4000;
                __int16 v73 = 0x4000;
              }

              if (*(__int16 *)(v71 + 32) != -1)
              {
                do
                {
                  uint64_t v77 = *(void *)(v68 + 8LL * (v67 >> 8)) + 48LL * v67;
                  ++v67;
                }

                while (*(__int16 *)(v77 + 32) != -1);
              }

              uint64_t v78 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                uint64_t v78 = *(void *)(qword_1000FDCC0 + 1504);
              }
            }

            goto LABEL_134;
          }

          int v66 = 1;
        }

        else
        {
          int v66 = 2;
        }

        *(_DWORD *)(v11 + 552) = v66;
        goto LABEL_110;
      }

      uint64_t v86 = 0LL;
      if (*(_DWORD *)(v11 + 9180))
      {
        if (sub_1000B2750((_DWORD *)(v11 + 9132)))
        {
          uint64_t result = sub_10009D1EC(*(void *)(v11 + 9000), &v86, (_DWORD *)&v86 + 1);
          if (*(_DWORD *)(v11 + 9076) + v12[56] == HIDWORD(v86) && (_DWORD)v86 != -1)
          {
            if (!*(_DWORD *)(v11 + 8880)) {
              goto LABEL_88;
            }
            if (*v12 == 0x4000)
            {
              int v61 = *(_DWORD *)(v11 + 9040) << 8;
              int v62 = *(_DWORD *)(v11 + 9044);
              if (v61 - v62 >= v61 - 1)
              {
LABEL_100:
                uint64_t result = sub_1000731C4(v11);
                if ((_DWORD)result) {
                  goto LABEL_88;
                }
              }

              else
              {
                int v63 = -v62;
                while (1)
                {
                  uint64_t v65 = *(unsigned int **)(v11 + 8 * ((v64 >> 53) & 0x3FF) + 680);
                  if (++v63 == -1) {
                    goto LABEL_100;
                  }
                }
              }
            }
          }
        }
      }

      uint64_t result = sub_1000398FC(v11);
      int v59 = 0;
      BOOL v60 = result == 0;
      if (!(_DWORD)result) {
        goto LABEL_105;
      }
      goto LABEL_102;
    }
  }

  if (*(_DWORD *)(v11 + 552) != 3) {
    goto LABEL_87;
  }
LABEL_134:
  ++v12[132];
  int v79 = *(_DWORD *)(v11 + 9380) + 1;
  *(_DWORD *)(v11 + 9380) = v79;
  if (v79 == *(_DWORD *)(v11 + 9372))
  {
    *(_DWORD *)(v11 + 9380) = 0;
    int v80 = *(_DWORD *)(v11 + 9376);
    if (v80 + 1 == *(_DWORD *)(v11 + 9368)) {
      int v81 = 0;
    }
    else {
      int v81 = v80 + 1;
    }
    *(_DWORD *)(v11 + 9376) = v81;
  }

          if (*v23)
          {
            uint64_t v130 = *(void *)(a1 + 488) + 784LL;
            uint64_t v131 = sub_1000C88E4((unint64_t)v23);
            sub_1000867DC(v161, v23, v131 + 1, 1, *(_DWORD *)(*(void *)(a1 + 480) + 780LL), v130);
            uint64_t v132 = v161;
            uint64_t v133 = v159;
          }

          else
          {
            uint64_t v132 = v15;
            uint64_t v133 = v159;
            if (*(_DWORD *)(v10 + 832))
            {
              uint64_t v132 = v38;
              if (v168 != 16)
              {
                uint64_t v148 = sub_1000C88E4((unint64_t)v15);
                sub_1000867DC(v15, v15, v148 + 1, v168, *(_DWORD *)(v10 + 776), 0LL);
                uint64_t v132 = v15;
              }
            }
          }

          uint64_t v134 = *(unsigned int *)(a1 + 524);
          uint64_t v135 = (v134 + 1);
          uint64_t v136 = (_WORD *)*a3;
          uint64_t v137 = sub_1000C8928((unsigned __int8 *)(v10 + 824), "z", 1, v134) == 0;
          HIDWORD(v171) = sub_1000943F4( *(void *)(a1 + 496),  v132,  v133,  v137,  v136,  v135,  (uint64_t)&v169,  1u,  (uint64_t)&v171);
          if ((int)v171 >= 1)
          {
            int32x4_t v145 = (_WORD *)sub_1000CAF58(2LL * v171, v138, v139, v140, v141, v142, v143, v144);
            HIDWORD(v171) = sub_1000943F4( *(void *)(a1 + 496),  v132,  v133,  v137,  v145,  v171,  (uint64_t)&v169,  1u,  (uint64_t)&v170);
            int v146 = sub_100099EE0((unint64_t)v145);
            memcpy(v136, v145, 2LL * (v146 + 1));
            sub_1000CB038(v145, 2LL * (int)v171);
          }

          uint64_t v147 = *(unsigned __int16 *)(v10 + 752);
          if (v147 != 0xFFFF) {
            sub_100093AE4((char *)v136, v158, v147);
          }
          goto LABEL_125;
        }

        unsigned __int16 v46 = v164 + 1;
        int v49 = *v164;
        if (*(_BYTE *)(v48 + v49) != 2)
        {
          int v50 = *(_DWORD *)(v10 + 40);
          if (v50 > 0) {
            goto LABEL_89;
          }
          goto LABEL_74;
        }

        unint64_t v112 = (unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v49);
        uint64_t v113 = *v112;
        uint64_t v45 = v112[1] + ~(_DWORD)v113;
        uint64_t v114 = (unsigned __int8 *)(*(void *)(v10 + 88) + v113);
        int v115 = *v114;
        unsigned int v47 = (unint64_t)(v114 + 1);
        LODWORD(v49) = v115;
        int v50 = *(_DWORD *)(v10 + 40);
        if (v50 <= 0) {
          goto LABEL_74;
        }
      }

LABEL_139:
  uint64_t v82 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 1464)) {
      *(_DWORD *)(v11 + 628) = *(_DWORD *)(v11 + 628) == 0;
    }
    if (*(_DWORD *)(v82 + 1648))
    {
      BOOL v15 = *(_DWORD *)(v11 + 632) == 0;
      goto LABEL_144;
    }
  }

  return result;
}

        if (v96)
        {
          BOOL v18 = v185;
          uint64_t v135 = v185[48];
          BOOL v15 = v99;
          if (v135)
          {
            uint64_t v58 = v98;
            uint64_t v70 = v188;
            if ((int)sub_1000B3680(v16, v135, 1LL, 1LL, 0LL, 30, (uint64_t)v84) < 1)
            {
              int v59 = v97;
              else {
                int v143 = *v84;
              }
              int v173 = v200[v179];
              sub_1000B8938(v191, v15, v97, a5, 0LL, v58, v195, v196, v143, v173, SHIDWORD(v173), 0, 0);
            }

            else
            {
              uint64_t v172 = v200[v179];
              int v59 = v97;
              sub_1000B8938(v191, v15, v97, a5, 0LL, v58, v195, v196, *v84, v172, SHIDWORD(v172), 0, 1);
            }

            ++v199;
            uint64_t v138 = v193;
            LODWORD(v91) = v190;
            uint64_t v139 = v200;
            if (v188 == 4)
            {
LABEL_165:
              if (!v138 && *(_WORD *)(v17 + 2LL * *v139) == 49 && *((_DWORD *)v18 + 136))
              {
                LODWORD(v83) = v91;
                uint64_t v119 = v70 - v91;
                if (v70 - (_DWORD)v91 == 3) {
                  goto LABEL_169;
                }
LABEL_107:
                if (v119 != 6)
                {
                  if (v119 == 9)
                  {
                    uint64_t v194 = v83;
                    if (sub_1000CC7E0(*v18, 32))
                    {
                      int v202 = 0LL;
                      sub_1000CC548(&v203, *v18, 32);
                      int v120 = sub_1000CC804((char *)&v203, L" ", &v202);
                      if (v120)
                      {
                        int v121 = v120;
                        int16x8_t v122 = v194 - 1LL;
                        do
                        {
                          if ((int)sub_1000B3680(v16, v121, 1LL, 1LL, 0LL, 30, (uint64_t)v201) >= 1)
                          {
                            uint64_t v170 = (v200[v122] + 1);
                            sub_1000B8938(v191, v15, v59, a5, 0LL, v58, v195, v196, *v201, v170, SHIDWORD(v170), 0, 1);
                            int v123 = v199;
                          }

                          else
                          {
                            else {
                              uint64_t v124 = *v201;
                            }
                            int v123 = v199;
                            uint64_t v171 = (v200[v122] + 1);
                            sub_1000B8938(v191, v15, v59, a5, 0LL, v58, v195, v196, v124, v171, SHIDWORD(v171), 0, 0);
                          }

                          int v199 = v123 + 1;
                          int v121 = sub_1000CC804(0LL, L" ", &v202);
                        }

                        while (v121);
                      }

                      BOOL v18 = v185;
                      __int16 v84 = v201;
                      uint64_t v70 = v188;
                      LODWORD(v83) = v194;
                    }

                    else if (*v18)
                    {
                      if ((int)sub_1000B3680(v16, *v18, 1LL, 1LL, 0LL, 30, (uint64_t)v84) < 1)
                      {
                        else {
                          uint64_t v153 = *v84;
                        }
                        sub_1000B8938(v191, v15, v59, a5, 0LL, v58, v195, v196, v153, v200[v194 - 1] + 1, 0, 0, 0);
                      }

                      else
                      {
                        sub_1000B8938(v191, v15, v59, a5, 0LL, v58, v195, v196, *v84, v200[v194 - 1] + 1, 0, 0, 1);
                      }

                      ++v199;
                      LODWORD(v83) = v194;
                    }

                    else
                    {
                      LODWORD(v83) = v194;
                    }
                  }

                  goto LABEL_56;
                }

                uint64_t v140 = v18[2];
                if (!v140) {
                  goto LABEL_56;
                }
                uint64_t v141 = v83;
                if ((int)sub_1000B3680(v16, v140, 1LL, 1LL, 0LL, 30, (uint64_t)v84) < 1)
                {
                  uint64_t v142 = v18[2];
                  goto LABEL_189;
                }

uint64_t sub_10006F080(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if ((_DWORD)v2 != 1) {
    return v2;
  }
  BOOL v5 = 1;
  if (sub_1000B27FC((unsigned int *)(a1 + 9084), a2, 0) == 2)
  {
    BOOL v6 = sub_10009D1DC(*(void *)(a1 + 9000));
    if (v6) {
      uint64_t v2 = 2LL;
    }
    else {
      uint64_t v2 = 1LL;
    }
    BOOL v5 = !v6;
    if (!*(_DWORD *)(a1 + 9180)) {
      return v2;
    }
  }

  else
  {
    uint64_t v2 = 1LL;
    if (!*(_DWORD *)(a1 + 9180)) {
      return v2;
    }
  }

  if (sub_1000B27FC((unsigned int *)(a1 + 9132), a2, 0) == 2 && v5)
  {
    uint64_t v14 = 0LL;
    sub_10009D1EC(*(void *)(a1 + 9000), &v14, (_DWORD *)&v14 + 1);
    uint64_t v2 = 1LL;
    if (*(_DWORD *)(a1 + 9076) + *(__int16 *)(a1 + 9048) == HIDWORD(v14) && (_DWORD)v14 != -1)
    {
      if (*(_DWORD *)(a1 + 8880))
      {
        if (*(_WORD *)(a1 + 8936) == 0x4000)
        {
          int v8 = *(_DWORD *)(a1 + 9040) << 8;
          int v9 = *(_DWORD *)(a1 + 9044);
          if (v8 - v9 >= v8 - 1)
          {
LABEL_22:
            else {
              return 1LL;
            }
          }

          else
          {
            int v10 = -v9;
            while (1)
            {
              uint64_t v12 = *(unsigned int **)(a1 + 8 * ((v11 >> 53) & 0x3FF) + 680);
              if (++v10 == -1) {
                goto LABEL_22;
              }
            }
          }
        }
      }

      else
      {
        return 2LL;
      }
    }
  }

  return v2;
}

uint64_t sub_10006F228( uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5, _DWORD *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v22 = sub_10003982C(a1);
  if (v22 == 4 || v22 == 3 || v22 == 1) {
    goto LABEL_9;
  }
  unsigned int v23 = *(_DWORD *)(a1 + 544);
  BOOL v24 = v23 > 0xB;
  int v25 = (1 << v23) & 0x828;
  if (v24 || v25 == 0)
  {
    int v27 = *(_DWORD *)(a1 + 8872);
  }

  else
  {
    int v27 = *(_DWORD *)(a1 + 8872);
    if (!v27)
    {
LABEL_9:
      uint64_t result = 0LL;
LABEL_10:
      *a6 = -1;
      *a3 = 0x40000000;
      return result;
    }
  }

  uint64_t v33 = sub_10002BA84(a1 + 680, v27);
  if (*(_DWORD *)(a1 + 9320) < (int)a2)
  {
    sub_1000C0EF8(*(void *)(a1 + 9312));
    uint64_t result = sub_1000C1074(1096LL * (int)a2);
    *(void *)(a1 + 9312) = result;
    if (!result) {
      goto LABEL_10;
    }
    *(_DWORD *)(a1 + 9320) = a2;
  }

  uint64_t v68 = (_DWORD **)(a1 + 680);
  BOOL v69 = *(int *)(a1 + 8872) >= 1 && sub_100025C94(*(unsigned int **)(a1 + 680)) == 3;
  *(void *)uint64_t v70 = 0LL;
  unint64_t v34 = *(void *)(a1 + 9312);
  if (*(_DWORD *)(a1 + 9008))
  {
    uint64_t v66 = a8;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4736))
    {
      uint64_t v65 = a4;
      if (*(_DWORD *)(a1 + 556)) {
        v70[1] = sub_1000732A8(a1, v34, a2, 0LL, v29, v30, v31, v32);
      }
      else {
        v70[1] = sub_1000736E0(a1, (char *)v34, a2, 0);
      }
LABEL_55:
      signed int v52 = *(_DWORD *)(a1 + 8872);
      if (v52 >= 1 && (v53 = sub_100025C94(*(unsigned int **)(a1 + 680)), signed int v52 = *(_DWORD *)(a1 + 8872), v53 == 3))
      {
        sub_100024518( *(void *)(a1 + 376),  v33,  *(void *)(a1 + 9016),  (char *)v34,  &v70[1],  a2,  (uint64_t)v68,  v52,  a14);
        if (qword_1000FDCC0 && *(void *)(qword_1000FDCC0 + 1272) == 0x7FFFFFFFLL) {
          int v54 = *(_DWORD *)(a1 + 9284);
        }
        else {
          int v54 = 0;
        }
        uint64_t v55 = v65;
        uint64_t v57 = a10;
        uint64_t v56 = a9;
        sub_10003BAE8(v34, v70[1], v68, *(unsigned int *)(a1 + 8872), v54);
      }

      else
      {
        sub_100024FB4( *(void **)(a1 + 376),  v33,  *(int **)(a1 + 9016),  (char *)v34,  &v70[1],  a2,  (uint64_t)v68,  v52,  a14);
        uint64_t v55 = v65;
        uint64_t v57 = a10;
        uint64_t v56 = a9;
      }

      bzero(a7, a5);
      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4592) && *(_DWORD *)(qword_1000FDCC0 + 4596))
      {
        if (*(void *)(qword_1000FDCC0 + 4104) < v70[1]) {
          v70[1] = *(void *)(qword_1000FDCC0 + 4104);
        }
        sub_10003C430(a1, 0LL, (char *)v34, &v70[1]);
      }

      if (v69) {
        sub_100063EB8(a1, v34, v70[1]);
      }
      sub_100064184(a1, v34, v70[1]);
      sub_10003B344( v34,  &v70[1],  a2,  (uint64_t)a3,  v55,  a5,  (uint64_t)a6,  (uint64_t)a7,  v66,  v56,  v57,  a11,  a12,  *(void *)(a1 + 376));
      uint64_t result = v70[1];
      *(_DWORD *)(a1 + 9324) = v70[1];
      return result;
    }

    uint64_t result = sub_10009D200( *(void *)(a1 + 9000),  v34 + 28,  v34 + 384,  v34 + 856,  v34 + 323,  (__int16 *)(v34 + 146),  59,  (_DWORD *)(v34 + 8),  (_DWORD *)v34,  (_DWORD *)(v34 + 24),  0,  0LL,  v70);
    *(_WORD *)(v34 + 4) = 0;
    *(_OWORD *)(v34 + 264) = 0u;
    *(_OWORD *)(v34 + 280) = 0u;
    *(_OWORD *)(v34 + 296) = 0u;
    *(_OWORD *)(v34 + 307) = 0u;
    if ((_DWORD)result)
    {
      uint64_t v40 = *(int *)(v34 + 8);
      if (!(_DWORD)v40) {
        return 0LL;
      }
      uint64_t v65 = a4;
      if (v33)
      {
        if ((int)v40 >= 1)
        {
          uint64_t v41 = 0LL;
          do
          {
            *(_DWORD *)(v34 + 4 * v41 + 620) = sub_1000315D4( v33,  *(unsigned int *)(v34 + 4 * v41 + 384),  *(unsigned int *)(v34 + 4 * v41 + 856),  v35,  v36,  v37,  v38,  v39);
            ++v41;
          }

          while (v41 < *(int *)(v34 + 8));
        }
      }

      else
      {
        bzero((void *)(v34 + 620), 4 * v40);
      }

      v70[1] = 1;
      goto LABEL_55;
    }
  }

  else
  {
    if (a7) {
      bzero(a7, a5);
    }
    uint64_t v42 = *(unsigned int *)(a1 + 8884);
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4152))
    {
      if (*(_DWORD *)(a1 + 556)) {
        int v43 = sub_1000732A8(a1, v34, a2, v42, v29, v30, v31, v32);
      }
      else {
        int v43 = sub_1000736E0(a1, (char *)v34, a2, v42);
      }
      v70[1] = v43;
      if (v69)
      {
        sub_100024410(*(void *)(a1 + 9000), v33, (uint64_t)v68, v34, v43);
        sub_100024DB8(*(void *)(a1 + 376), v34, &v70[1]);
        sub_10003BAE8(v34, v70[1], v68, *(unsigned int *)(a1 + 8872), *(_DWORD *)(a1 + 9284));
        sub_100063EB8(a1, v34, v70[1]);
      }

      if (qword_1000FDCC0
        && *(_DWORD *)(qword_1000FDCC0 + 4592)
        && *(_DWORD *)(qword_1000FDCC0 + 4596)
        && !*(_DWORD *)(qword_1000FDCC0 + 5196))
      {
        if (*(void *)(qword_1000FDCC0 + 4104) < v70[1]) {
          v70[1] = *(void *)(qword_1000FDCC0 + 4104);
        }
        sub_10003C430(a1, 0LL, (char *)v34, &v70[1]);
      }

      sub_100064184(a1, v34, v70[1]);
      sub_10003B344( v34,  &v70[1],  a2,  (uint64_t)a3,  a4,  a5,  (uint64_t)a6,  (uint64_t)a7,  a8,  a9,  a10,  a11,  a12,  *(void *)(a1 + 376));
      uint64_t result = v70[1];
      *(_DWORD *)(a1 + 9324) = v70[1];
      if (!(_DWORD)result)
      {
        *(_DWORD *)(a1 + 552) = 3;
        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v67 = a8;
      int v44 = sub_10009D200( *(void *)(a1 + 9000),  v34 + 28,  v34 + 384,  v34 + 856,  v34 + 323,  (__int16 *)(v34 + 146),  59,  (_DWORD *)(v34 + 8),  (_DWORD *)v34,  (_DWORD *)(v34 + 24),  v42,  v34 + 264,  v70);
      *(_WORD *)(v34 + 4) = 0;
      if (v69)
      {
        int v64 = v44;
        sub_10003BAE8(v34, 1, v68, *(unsigned int *)(a1 + 8872), *(_DWORD *)(a1 + 9284));
        int v44 = v64;
      }

      uint64_t v50 = *(int *)(v34 + 8);
      if (!(_DWORD)v50 || !v44)
      {
        uint64_t result = 0LL;
        *(_DWORD *)(a1 + 552) = 3;
        *a6 = -1;
        return result;
      }

      if (v33)
      {
        if ((int)v50 >= 1)
        {
          uint64_t v51 = 0LL;
          do
          {
            *(_DWORD *)(v34 + 4 * v51 + 620) = sub_1000315D4( v33,  *(unsigned int *)(v34 + 4 * v51 + 384),  *(unsigned int *)(v34 + 4 * v51 + 856),  v45,  v46,  v47,  v48,  v49);
            ++v51;
          }

          while (v51 < *(int *)(v34 + 8));
        }
      }

      else
      {
        bzero((void *)(v34 + 620), 4 * v50);
      }

      int v58 = 1;
      v70[1] = 1;
      if (qword_1000FDCC0)
      {
        uint64_t v59 = a4;
        uint64_t v61 = a10;
        uint64_t v60 = a9;
        if (*(_DWORD *)(qword_1000FDCC0 + 4592) && *(_DWORD *)(qword_1000FDCC0 + 4596))
        {
          sub_10003C430(a1, 0LL, (char *)v34, &v70[1]);
          int v58 = v70[1];
        }
      }

      else
      {
        uint64_t v59 = a4;
        uint64_t v61 = a10;
        uint64_t v60 = a9;
      }

      if (v69)
      {
        sub_100063EB8(a1, v34, v58);
        int v58 = v70[1];
      }

      sub_100064184(a1, v34, v58);
      sub_10003B344( v34,  &v70[1],  a2,  (uint64_t)a3,  v59,  a5,  (uint64_t)a6,  (uint64_t)a7,  v67,  v60,  v61,  a11,  a12,  *(void *)(a1 + 376));
      uint64_t result = v70[1];
      *(_DWORD *)(a1 + 9324) = v70[1];
    }

    if (*(_DWORD *)(a1 + 9280) && (int)result >= 1)
    {
      int v62 = 0;
      uint64_t v63 = v34 + 28;
      do
      {
        *(_WORD *)(v63 - 24) += sub_10003BE3C( *(void *)(a1 + 376),  1LL,  *(unsigned int *)(a1 + 9204),  a1 + 9202,  *(unsigned int *)(a1 + 460),  a1 + 456,  v63,  *(unsigned int *)(v63 - 20));
        ++v62;
        uint64_t result = v70[1];
        v63 += 1096LL;
      }

      while (v62 < v70[1]);
    }
  }

  return result;
}

uint64_t sub_10006F9E0(uint64_t a1)
{
  if (!sub_10009D1DC(*(void *)(a1 + 9000))) {
    *(_DWORD *)(a1 + 552) = 3;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 544);
  if (v8 <= 0xB && ((1 << v8) & 0x828) != 0)
  {
    int v10 = *(_DWORD *)(a1 + 552);
    if (v10 != 3) {
      *(_DWORD *)(a1 + 552) = 0;
    }
    if (v8 <= 0xB && ((1 << v8) & 0x828) != 0 && v10 != 3)
    {
      int v12 = 0;
      uint64_t v40 = 0LL;
      int v39 = 0;
      __int16 v38 = 0;
      unsigned int v37 = 0;
      int v13 = *(_DWORD *)(a1 + 9040) << 8;
      unsigned int v14 = v13 - *(_DWORD *)(a1 + 9044);
      uint64_t v15 = *(void *)(a1 + 9024);
      uint64_t v16 = *(void *)(v15 + 8LL * (v14 >> 8)) + 48LL * -*(_BYTE *)(a1 + 9044);
      unsigned __int16 v17 = -1;
      while (1)
      {
        int v18 = *(unsigned __int16 *)(v16 + 32);
        if (v18 == 0xFFFF)
        {
          if (++v14 == v13) {
            goto LABEL_12;
          }
          goto LABEL_17;
        }

        int v19 = *(_DWORD *)(a1 + 620);
        if (v19 >= v18) {
          break;
        }
        int v20 = ~v19 + v18;
        uint64_t v21 = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8LL * v20), 0);
        uint64_t v22 = *(void *)v16 & 0x3FFFFFFLL;
        int v36 = v12;
        uint64_t v35 = (*(void *)v16 >> 53) & 0x3FFLL;
        uint64_t v23 = *(void *)(a1 + 8 * v35 + 680);
        uint64_t v24 = 4LL * v20;
        unsigned int v25 = *(_DWORD *)(*(void *)(a1 + 9344) + v24);
        unsigned int v26 = *(unsigned __int16 *)(v21 + 4 * v22 + 2);
        sub_1000265B8(v23);
        uint64_t v27 = *(unsigned int *)(*(void *)(a1 + 9344) + v24);
        if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4544))
        {
          uint64_t v2 = (v27 << 35) + (v35 << 53) + ((uint64_t)SHIDWORD(v40) << 10);
          goto LABEL_42;
        }

        __int16 v38 = *(_WORD *)(v16 + 24);
        unsigned int v28 = *(_DWORD *)(v16 + 16);
        unsigned int v37 = v28;
        uint64_t v34 = SHIDWORD(v40);
        if (v28 == -1)
        {
          LODWORD(v32) = -1;
          int v29 = 65534;
        }

        else
        {
          int v29 = sub_10009D1B4(*(void *)(a1 + 9000), v28);
          if (v37 == -1)
          {
            LODWORD(v32) = -1;
          }

          else
          {
            uint64_t v33 = v27;
            int v30 = v29;
            unint64_t v31 = sub_10009D140(*(void *)(a1 + 9000), v37);
            int v29 = v30;
            uint64_t v27 = v33;
            uint64_t v32 = (v31 >> 35) & 0x3FFFF;
          }
        }

        sub_1000298BC(v23, v32, v25, v29, v26, *(__int16 *)(v16 + 28), (int *)&v37, &v38, *(_DWORD *)(a1 + 9284));
        if (v38 != 0x4000)
        {
          uint64_t v2 = (v27 << 35) + (v35 << 53) + (v34 << 10);
          *(_WORD *)(v16 + 24) = v38;
          *(_DWORD *)(v16 + 16) = v37;
LABEL_42:
          int v12 = v36;
          unsigned __int16 v17 = v26;
          if (v39)
          {
LABEL_43:
            if (*(_WORD *)(v16 + 24) != 0x4000) {
              *(_WORD *)(v16 + 24) += sub_100025DF8(a1 + 680, *(unsigned int *)(a1 + 8872), v2);
            }
          }

          goto LABEL_21;
        }

        ++v14;
        int v12 = v36;
        if (v14 == v13) {
          goto LABEL_12;
        }
        unsigned __int16 v17 = v26;
        uint64_t v15 = *(void *)(a1 + 9024);
LABEL_17:
        uint64_t v16 = *(void *)(v15 + 8LL * (v14 >> 8)) + 48LL * v14;
      }

      if (v18 != v17)
      {
        int v12 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v16 + 32));
        unsigned __int16 v17 = v18;
      }

      if (v12 <= *(unsigned __int8 *)(v16 + 38))
      {
        uint64_t v2 = *(void *)v16 & 0x7FFFFFFFFFFFFFFFLL;
        if (*(_DWORD *)(a1 + 544) == 2)
        {
          int v39 = 1;
          goto LABEL_43;
        }

        int v39 = *(void *)v16 >> 63;
        if (v39) {
          goto LABEL_43;
        }
      }

void sub_10006FD48(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  if (a2 < a3)
  {
    unsigned int v26 = 0LL;
    if (a5)
    {
      do
      {
        if (a2 >= 1 && *(_DWORD *)(a1 + 8892)) {
          sub_1000660A0(a1, *(_DWORD *)(a5 + 4LL * a2));
        }
        int v18 = (const void *)sub_100059730(a4, a2, &v26);
        sub_10006E754(a1, v18, v26, v19, v20, v21, v22, v23, v24);
        ++a2;
      }

      while (*(_DWORD *)(a1 + 552) != 3 && a2 < a3);
    }

    else
    {
      do
      {
        int v10 = (const void *)sub_100059730(a4, a2, &v26);
        sub_10006E754(a1, v10, v26, v11, v12, v13, v14, v15, v16);
        ++a2;
      }

      while (*(_DWORD *)(a1 + 552) != 3 && a2 < a3);
    }
  }

uint64_t sub_10006FE2C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 544);
  BOOL v6 = v5 > 0xB;
  int v7 = (1 << v5) & 0x828;
  if (v6 || v7 == 0) {
    return 0LL;
  }
  if (a2 >= 1)
  {
    uint64_t v12 = 0LL;
    uint64_t v12 = a2 & 0x7FFFFFF0;
    int32x4_t v13 = (_OWORD *)(a3 + 16);
    int32x4_t v14 = (_OWORD *)(a4 + 16);
    *(void *)&__int128 v15 = 0x4000400040004000LL;
    *((void *)&v15 + 1) = 0x4000400040004000LL;
    uint64_t v16 = a2 & 0xFFFFFFF0;
    do
    {
      *(v13 - 1) = v15;
      *int32x4_t v13 = v15;
      v13 += 2;
      *(v14 - 1) = v15;
      *int32x4_t v14 = v15;
      v14 += 2;
      v16 -= 16LL;
    }

    while (v16);
    if (v12 != a2)
    {
LABEL_11:
      unsigned __int16 v17 = (_WORD *)(a4 + 2 * v12);
      int v18 = (_WORD *)(a3 + 2 * v12);
      uint64_t v19 = a2 - v12;
      do
      {
        *v18++ = 0x4000;
        *v17++ = 0x4000;
        --v19;
      }

      while (v19);
    }
  }

  *a5 = *(_WORD *)(a1 + 8936);
  unsigned int v20 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  uint64_t v21 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v20 >> 8));
  uint64_t v22 = -*(_BYTE *)(a1 + 9044);
  int v23 = *(unsigned __int16 *)(v21 + 48 * v22 + 32);
  if (v23 != 0xFFFF)
  {
    unsigned int v25 = v20 + 1;
    do
    {
      unint64_t v26 = *(void *)(v21 + 48 * v22);
      uint64_t v27 = (v26 >> 53) & 0x3FF;
      if (*(_DWORD *)(a1 + 620) >= v23 && sub_10002BA64(*(void *)(a1 + 8 * v27 + 680), v26))
      {
        int v28 = *(__int16 *)(v21 + 48 * v22 + 36);
      }

      else
      {
        int v29 = *(__int16 *)(v21 + 48 * v22 + 36);
      }

      uint64_t v21 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v25 >> 8));
      uint64_t v22 = v25;
      int v23 = *(unsigned __int16 *)(v21 + 48LL * v25++ + 32);
    }

    while (v23 != 0xFFFF);
  }

  return 1LL;
}

BOOL sub_10006FFE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v9 = sub_1000398BC(a1);
  BOOL v10 = *(unsigned __int16 *)(a1 + 8936) != 0x4000;
  unsigned int v11 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  uint64_t v12 = *(void *)(a1 + 9024);
  uint64_t v13 = *(void *)(v12 + 8LL * (v11 >> 8));
  uint64_t v14 = -*(_BYTE *)(a1 + 9044);
  int v15 = *(unsigned __int16 *)(v13 + 48 * v14 + 32);
  int v16 = *(_DWORD *)(a1 + 620);
  if (v15 != 0xFFFF && v16 >= v15)
  {
    unsigned int v20 = v11 + 1;
    do
    {
      unint64_t v23 = *(void *)(v13 + 48 * v14);
      uint64_t v24 = (v23 >> 53) & 0x3FF;
      if (*(_DWORD *)(a3 + 4 * v24) && *(__int16 *)(v13 + 48 * v14 + 36) < 0x4000)
      {
        if (sub_10002BA64(*(void *)(a1 + 8 * v24 + 680), v23))
        {
          sub_1000B2868(a1 + 9084, a4);
          return 1LL;
        }

        uint64_t v12 = *(void *)(a1 + 9024);
        int v16 = *(_DWORD *)(a1 + 620);
        BOOL v10 = 1;
      }

      uint64_t v13 = *(void *)(v12 + 8LL * (v20 >> 8));
      uint64_t v14 = v20;
      int v21 = *(unsigned __int16 *)(v13 + 48LL * v20++ + 32);
    }

    while (v21 != 0xFFFF && v16 >= v21);
  }

  sub_1000B2868(a1 + 9084, 0);
  return v10 && v9 < a5;
}

uint64_t sub_10007012C(uint64_t result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = *(_DWORD *)(result + 9076) + *(__int16 *)(result + 9048);
  int v4 = *(__int16 *)(result + 8936);
  if (v4 == 0x4000)
  {
    *a3 = 0x40000000;
    int v5 = *(__int16 *)(result + 9050);
    if (v5 != 0x4000)
    {
LABEL_3:
      *a4 = *(_DWORD *)(result + 9076) + v5;
      return result;
    }
  }

  else
  {
    *a3 = *(_DWORD *)(result + 9076) + v4;
    int v5 = *(__int16 *)(result + 9050);
    if (v5 != 0x4000) {
      goto LABEL_3;
    }
  }

  *a4 = 0x40000000;
  return result;
}

uint64_t sub_100070198(uint64_t a1)
{
  uint64_t v2 = (__int16 *)(a1 + 8936);
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), *(unsigned __int16 *)(a1 + 8946));
  int v4 = *v2;
  if (v4 > 0x4000)
  {
    int v4 = 0x4000;
    *uint64_t v2 = 0x4000;
    *(_DWORD *)(a1 + 8928) = -1;
    v2[2] = -1;
    *(_DWORD *)(a1 + 8920) = 0;
  }

  uint64_t v32 = 0LL;
  uint64_t v30 = 0LL;
  if (v4 <= v2[63])
  {
    uint64_t v5 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v5);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v5);
      LOWORD(v4) = *v2;
    }

    __int16 v6 = result - v2[61] + v4;
    *uint64_t v2 = v6;
    *(_DWORD *)(a1 + 8920) += (__int16)result;
    v2[6] = v6;
    if (v6 < v2[56])
    {
      v2[56] = v6;
      v2[58] = v2[4];
      v2[124] = v2[5];
    }
  }

  else
  {
    v2[6] = 0x4000;
    *uint64_t v2 = 0x4000;
  }

  int v7 = *(_DWORD *)(a1 + 620);
  uint64_t v8 = *(void *)(a1 + 592);
  uint64_t v9 = *(void *)(v8 + 8LL * ((v7 + 1) >> 8)) + 24LL * (v7 + 1);
  int v11 = *(unsigned __int16 *)(v9 + 16);
  BOOL v10 = (_WORD *)(v9 + 16);
  if (v11 == 0x4000)
  {
    _WORD *v10 = 0x3FFF;
    int v7 = *(_DWORD *)(a1 + 620);
    uint64_t v8 = *(void *)(a1 + 592);
  }

  unsigned int v12 = 0;
  unsigned int v13 = (*(_DWORD *)(a1 + 9040) << 8) - *(_DWORD *)(a1 + 9044);
  LODWORD(v32) = 0;
  HIDWORD(v32) = v13;
  int v14 = *(_DWORD *)(a1 + 9364) + v7;
  do
  {
    uint64_t v15 = *(void *)(v8 + 8LL * (v12 >> 8)) + 24LL * v12;
    uint64_t v30 = v15;
    int v16 = *(unsigned __int16 *)(v15 + 16);
    ++v12;
  }

  while (v16 == 0x4000);
  if (v16 == 0x3FFF)
  {
    *(_WORD *)(v15 + 16) = 0x4000;
    uint64_t v17 = *(void *)(a1 + 592);
    uint64_t v15 = *(void *)(v17 + 8LL * (v12 >> 8)) + 24LL * v12;
    uint64_t v30 = v15;
    if ((int)v12 <= v14)
    {
      while (*(_WORD *)(v15 + 16) == 0x4000)
      {
        ++v12;
        uint64_t v15 = *(void *)(v17 + 8LL * (v12 >> 8)) + 24LL * v12;
        uint64_t v30 = v15;
        if (v14 + 1 == v12)
        {
          unsigned int v12 = v14 + 1;
          break;
        }
      }
    }
  }

  else
  {
    --v12;
  }

  int v31 = v12;
  uint64_t v18 = *(void *)(a1 + 9024);
  uint64_t v19 = *(void *)(v18 + 8LL * (v13 >> 8)) + 48LL * v13;
  signed int v20 = *(_DWORD *)(a1 + 620);
  signed int v21 = *(unsigned __int16 *)(v19 + 32);
  if ((int)v12 <= v20 || v20 >= v21)
  {
    uint64_t v23 = v15;
    do
    {
      if ((unsigned __int16)v12 < v21
        || (unsigned __int16)v12 == v21
        && (*(void *)v23 & 0x7FFFFFFFFFFFFFFFuLL) < (*(void *)v19 & 0x7FFFFFFFFFFFFFFFuLL))
      {
        uint64_t result = sub_100072588(a1, (unsigned __int16)v12, v23, v12, v13, &v32);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t *, void, uint64_t))(a1 + 536))( a1,  (char *)&v32 + 4,  &v32,  (unsigned __int16)v12,  v23);
        if (*(_DWORD *)(a1 + 552) == 3) {
          return result;
        }
        if (!(_DWORD)result) {
          goto LABEL_48;
        }
      }

      if (*(_DWORD *)(a1 + 8896))
      {
        if (*(unsigned __int16 *)(v23 + 14) == 0xFFFFLL)
        {
          *(_WORD *)(v15 + 16) = 0x4000;
          uint64_t v26 = *(void *)(a1 + 592);
          do
          {
            ++v12;
            uint64_t v23 = *(void *)(v26 + 8LL * (v12 >> 8)) + 24LL * v12;
            uint64_t v30 = v23;
          }

          while (*(_WORD *)(v23 + 16) == 0x4000);
          uint64_t v15 = v23;
          if (*(_WORD *)(v23 + 16) == 0x3FFF) {
            goto LABEL_35;
          }
        }

        else
        {
          uint64_t v30 = v23;
          if (*(_WORD *)(v23 + 16) == 0x3FFF) {
            goto LABEL_35;
          }
        }
      }

      else
      {
        uint64_t v24 = *(void *)(a1 + 592);
        do
        {
          ++v12;
          uint64_t v23 = *(void *)(v24 + 8LL * (v12 >> 8)) + 24LL * v12;
          uint64_t v30 = v23;
        }

        while (*(_WORD *)(v23 + 16) == 0x4000);
        if (*(_WORD *)(v23 + 16) == 0x3FFF)
        {
LABEL_35:
          *(_WORD *)(v23 + 16) = 0x4000;
          uint64_t v25 = *(void *)(a1 + 592);
          uint64_t v23 = *(void *)(v25 + 8LL * ((v12 + 1) >> 8)) + 24LL * (v12 + 1);
          uint64_t v30 = v23;
          if ((int)v12 >= v14)
          {
            ++v12;
          }

          else
          {
            while (*(_WORD *)(v23 + 16) == 0x4000)
            {
              uint64_t v23 = *(void *)(v25 + 8LL * ((v12 + 2) >> 8)) + 24LL * (v12 + 2);
              uint64_t v30 = v23;
              if (v14 == ++v12)
              {
                unsigned int v12 = v14 + 1;
                goto LABEL_48;
              }
            }

            ++v12;
          }
        }
      }

uint64_t sub_100070660(uint64_t a1)
{
  uint64_t v2 = (__int16 *)(a1 + 8936);
  uint64_t v24 = 0LL;
  *(_DWORD *)(v22 + 14) = 0xFFFF;
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), *(unsigned __int16 *)(a1 + 8946));
  int v4 = *v2;
  if (v4 > 0x4000)
  {
    LOWORD(v4) = 0x4000;
    *uint64_t v2 = 0x4000;
    *(_DWORD *)(a1 + 8928) = -1;
    v2[2] = -1;
    *(_DWORD *)(a1 + 8920) = 0;
    if (v2[63] < 0x4000) {
      goto LABEL_3;
    }
  }

  else if (v4 > v2[63])
  {
LABEL_3:
    v2[6] = 0x4000;
    *uint64_t v2 = 0x4000;
    goto LABEL_9;
  }

  uint64_t v5 = *(unsigned __int16 *)result;
  uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v5);
  if ((_DWORD)result == 0x4000)
  {
    uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v5);
    LOWORD(v4) = *v2;
  }

  __int16 v6 = result - v2[61] + v4;
  *uint64_t v2 = v6;
  *(_DWORD *)(a1 + 8920) += (__int16)result;
  v2[6] = v6;
  if (v6 < v2[56])
  {
    v2[56] = v6;
    v2[58] = v2[4];
    v2[124] = v2[5];
  }

uint64_t sub_100070998(uint64_t a1, int a2)
{
  uint64_t v2 = (a2 + 255) >> 8;
  uint64_t result = sub_1000C1074((8 * v2));
  if (!result) {
    return result;
  }
  uint64_t v5 = (void *)result;
  int v6 = *(_DWORD *)(a1 + 9040);
  if (v6 < (int)v2)
  {
    unsigned int v7 = (uint64_t *)(result + 8LL * v6);
    uint64_t v8 = v2 - v6;
    while (1)
    {
      uint64_t v9 = sub_1000C1074(12288LL);
      *unsigned int v7 = v9;
      if (!v9) {
        break;
      }
      ++v6;
      ++v7;
      if (!--v8) {
        goto LABEL_9;
      }
    }
  }

  if (v6 == (_DWORD)v2)
  {
LABEL_9:
    j__memmove(v5, *(const void **)(a1 + 9024), 8LL * *(int *)(a1 + 9040));
    sub_1000C0EF8(*(void *)(a1 + 9024));
    *(void *)(a1 + 9024) = v5;
    *(_DWORD *)(a1 + 9040) = v2;
    return 1LL;
  }

  if (v6 > *(_DWORD *)(a1 + 9040))
  {
    uint64_t v10 = v6;
    do
    {
      uint64_t v11 = v10 - 1;
      sub_1000C0EF8(*((void *)v5 + v10 - 1));
      uint64_t v10 = v11;
    }

    while (v11 > *(int *)(a1 + 9040));
  }

  sub_1000C0EF8((uint64_t)v5);
  return 0LL;
}

uint64_t sub_100070AA4(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t result = sub_1000BB868(*(void *)(a1 + 376), a3, 0LL);
  __int16 v22 = result;
  if (*(int *)(a1 + 612) >= 1)
  {
    unsigned int v9 = 0;
    uint64_t v21 = (_WORD *)(a1 + 9048);
    do
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 592) + 8LL * (v9 >> 8));
      __int16 v11 = a2;
      if (*(_DWORD *)(a1 + 9280))
      {
        unsigned int v12 = sub_1000BB868(*(void *)(a1 + 376), *(unsigned __int16 *)(v10 + 24LL * v9 + 14), 0LL);
        uint64_t result = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v22, 1u, v12);
        __int16 v11 = result + a2;
      }

      uint64_t v13 = v10 + 24LL * v9;
      int v16 = *(__int16 *)(v13 + 16);
      int v15 = (_WORD *)(v13 + 16);
      int v14 = v16;
      int v17 = *(_DWORD *)(a1 + 9008);
      if (v16 <= v11)
      {
        if (v17)
        {
          int v20 = *(_DWORD *)(v10 + 24LL * v9 + 8);
          if (v20 != a5) {
            uint64_t result = (uint64_t)sub_100024188(*(uint64_t **)(a1 + 9016), a5, v20, v11 - (unsigned __int16)v14, v11 - *v21);
          }
        }
      }

      else
      {
        if (v17)
        {
          int v18 = *(_DWORD *)(v10 + 24LL * v9 + 8);
          if (v14 != 0x4000 && v18 != a5) {
            uint64_t result = (uint64_t)sub_100024188( *(uint64_t **)(a1 + 9016),  v18,  a5,  (unsigned __int16)v14 - v11,  (unsigned __int16)v14 - *v21);
          }
        }

        *int v15 = v11;
        *(_DWORD *)(v10 + 24LL * v9 + 8) = a5;
      }

      ++v9;
    }

    while ((signed int)v9 < *(_DWORD *)(a1 + 612));
  }

  return result;
}

uint64_t sub_100070C28(uint64_t result, __int16 a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v5 = *(int *)(result + 612);
  if ((_DWORD)v5)
  {
    uint64_t v9 = result;
    uint64_t v10 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      uint64_t v10 = *(void *)(qword_1000FDCC0 + 3616);
    }
    __int16 v25 = 0;
    if (v10 >= v5 && *(_DWORD *)(result + 9280)
      || (uint64_t result = sub_100070AA4(result, a2, a3, a4, a5), *(_DWORD *)(v9 + 9280)))
    {
      __int16 v25 = sub_1000BB868(*(void *)(v9 + 376), a3, 0LL);
      uint64_t result = sub_1000BBC40( *(void *)(v9 + 376),  1,  (uint64_t)&v25,  *(unsigned int *)(v9 + 612),  *(unsigned __int16 **)(v9 + 656),  *(_DWORD *)(v9 + 672),  *(__int16 **)(v9 + 664));
      *(_DWORD *)(v9 + 672) = result;
    }

    if (*(int *)(v9 + 612) >= 1)
    {
      uint64_t v11 = 0LL;
      __int16 v12 = 0;
      uint64_t v24 = (_WORD *)(v9 + 9048);
      do
      {
        if (*(_DWORD *)(v9 + 9280)) {
          __int16 v12 = *(_WORD *)(*(void *)(v9 + 664) + 2 * v11);
        }
        uint64_t v13 = *(void *)(*(void *)(v9 + 592) + 8LL * (v11 >> 8));
        int v14 = (__int16)(v12 + a2);
        uint64_t v15 = v13 + 24LL * v11;
        int v18 = *(__int16 *)(v15 + 16);
        int v17 = (_WORD *)(v15 + 16);
        int v16 = v18;
        int v19 = *(_DWORD *)(v9 + 9008);
        __int16 v20 = v14 - v18;
        if (v14 >= v18)
        {
          if (v19)
          {
            int v23 = *(_DWORD *)(v13 + 24LL * v11 + 8);
            if (v23 != a5) {
              uint64_t result = (uint64_t)sub_100024188(*(uint64_t **)(v9 + 9016), a5, v23, v20, (unsigned __int16)v14 - *v24);
            }
          }
        }

        else
        {
          if (v19)
          {
            int v21 = *(_DWORD *)(v13 + 24LL * v11 + 8);
            if (v16 != 0x4000 && v21 != a5) {
              uint64_t result = (uint64_t)sub_100024188( *(uint64_t **)(v9 + 9016),  v21,  a5,  (unsigned __int16)v16 - (unsigned __int16)v14,  (unsigned __int16)v16 - *v24);
            }
          }

          *int v17 = v14;
          *(_DWORD *)(v13 + 24LL * v11 + 8) = a5;
        }

        ++v11;
      }

      while (v11 < *(int *)(v9 + 612));
    }
  }

  return result;
}

uint64_t sub_100070DFC(uint64_t a1, __int16 a2, unsigned int a3, unint64_t a4, int a5)
{
  unint64_t v18 = 0LL;
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v9 = *(unsigned __int16 **)(a1 + 9192);
  LODWORD(v19) = a5;
  unsigned int v10 = sub_1000BB868(*(void *)(a1 + 376), a3, 0LL);
  __int16 v21 = v10;
  uint64_t v11 = *(void *)(a1 + 8 * ((a4 >> 53) & 0x3FF) + 680);
  uint64_t result = sub_100028C90( v11,  a3,  v10,  a4,  *(_DWORD *)(a1 + 9224),  *(void *)(a1 + 9216),  *(_DWORD *)(a1 + 9188),  (unint64_t)v9);
  int v13 = result;
  if ((int)result > *(_DWORD *)(a1 + 9188))
  {
    int v14 = 2 * result;
    uint64_t result = sub_1000C1074(48LL * (_DWORD)result);
    if (!result)
    {
      *(_DWORD *)(a1 + 552) = 3;
      return result;
    }

    uint64_t v9 = (unsigned __int16 *)result;
    sub_1000C0EF8(*(void *)(a1 + 9192));
    *(_DWORD *)(a1 + 9188) = v14;
    *(void *)(a1 + 9192) = v9;
    uint64_t result = sub_100028C90(v11, a3, v10, a4, *(_DWORD *)(a1 + 9224), *(void *)(a1 + 9216), v14, (unint64_t)v9);
    int v13 = result;
  }

  if (v13 >= 1)
  {
    do
    {
      __int16 v15 = v9[1] + a2;
      LOWORD(v20) = v15;
      if (*(_DWORD *)(a1 + 9280))
      {
        unsigned int v16 = sub_1000BB868(*(void *)(a1 + 376), *v9, 0LL);
        uint64_t result = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v21, 1u, v16);
        __int16 v15 = v20 + result;
        LOWORD(v20) = v20 + result;
      }

      if (*(__int16 *)(a1 + 9062) >= v15)
      {
        if (*((_DWORD *)v9 + 4)) {
          unint64_t v17 = *((void *)v9 + 1) | 0x8000000000000000LL;
        }
        else {
          unint64_t v17 = *((void *)v9 + 1);
        }
        unint64_t v18 = v17;
        HIWORD(v19) = *v9;
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v18);
      }

      v9 += 12;
      --v13;
    }

    while (v13);
  }

  return result;
}

uint64_t sub_100070FA8(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v24 = 0LL;
  __int128 v22 = 0u;
  memset(v23, 0, sizeof(v23));
  __int128 v21 = 0u;
  unint64_t v18 = 0LL;
  uint64_t v19 = a5;
  uint64_t v9 = (a4 >> 53) & 0x3FF;
  uint64_t v20 = 0LL;
  __int16 v25 = -1;
  uint64_t v10 = *(void *)(a1 + 8 * v9 + 680);
  sub_100028C70((_DWORD *)v10, (uint64_t)v23);
  (*(void (**)(uint64_t, _OWORD *, uint64_t, unint64_t, uint64_t))(v10 + 104))( v10,  v23,  a3,  a4,  0xFFFFLL);
  uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v10 + 112))(v23, v10, &v21);
  if ((_DWORD)result)
  {
    __int16 v12 = (__int16 *)(a1 + 9062);
    while (!*(_DWORD *)(a1 + 9280) || *((void *)&v22 + 1) != 0LL)
    {
      LOWORD(v20) = WORD1(v21) + a2;
LABEL_5:
      uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v10 + 112))(v23, v10, &v21);
      if (!(_DWORD)result) {
        return result;
      }
    }

    if (v25 == -1) {
      __int16 v25 = sub_1000BB868(*(void *)(a1 + 376), a3, 0LL);
    }
    unsigned int v15 = sub_1000BB868(*(void *)(a1 + 376), (unsigned __int16)v21, 0LL);
    LOWORD(v20) = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v25, 1u, v15) + a2;
LABEL_15:
    if ((_DWORD)v22) {
      unint64_t v16 = *((void *)&v21 + 1) | 0x8000000000000000LL;
    }
    else {
      unint64_t v16 = *((void *)&v21 + 1);
    }
    unint64_t v18 = v16;
    if (*((void *)&v22 + 1))
    {
      v17[0] = v21;
      v17[1] = v22;
      int v13 = sub_100063C7C(a1, v9, (uint64_t)v17) + *(_DWORD *)(a1 + 620) + 1;
    }

    else
    {
      LOWORD(v13) = v21;
    }

    HIWORD(v19) = v13;
    (*(void (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v18);
    goto LABEL_5;
  }

  return result;
}

uint64_t sub_100071184(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  memset(v21, 0, sizeof(v21));
  __int128 v19 = 0u;
  unint64_t v16 = 0LL;
  uint64_t v10 = (a4 >> 53) & 0x3FF;
  uint64_t v18 = 0LL;
  uint64_t v17 = a5;
  uint64_t v11 = *(void *)(a1 + 8 * v10 + 680);
  sub_100028C70((_DWORD *)v11, (uint64_t)v21);
  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4544)) {
    sub_1000298B0((uint64_t)v21, a5, a2);
  }
  (*(void (**)(uint64_t, _OWORD *, uint64_t, unint64_t, uint64_t))(v11 + 104))( v11,  v21,  a3,  a4,  0xFFFFLL);
  for (uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v11 + 112))(v21, v11, &v19);
        (_DWORD)result;
        uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, __int128 *))(v11 + 112))(v21, v11, &v19))
  {
    LOWORD(v18) = WORD1(v19) + a2;
    if (*(__int16 *)(a1 + 9062) >= (__int16)(WORD1(v19) + a2))
    {
      if ((_DWORD)v20) {
        unint64_t v14 = *((void *)&v19 + 1) | 0x8000000000000000LL;
      }
      else {
        unint64_t v14 = *((void *)&v19 + 1);
      }
      unint64_t v16 = v14;
      if (*((void *)&v20 + 1))
      {
        v15[0] = v19;
        v15[1] = v20;
        int v13 = sub_100063C7C(a1, v10, (uint64_t)v15) + *(_DWORD *)(a1 + 620) + 1;
      }

      else
      {
        LOWORD(v13) = v19;
      }

      HIWORD(v17) = v13;
      (*(void (**)(uint64_t, unint64_t *))(a1 + 9408))(a1, &v16);
    }
  }

  return result;
}

void sub_100071314(uint64_t a1)
{
  uint64_t v2 = (__int16 *)(a1 + 8936);
  uint64_t v3 = a1 + 680;
  uint64_t v4 = sub_10002BA84(a1 + 680, *(_DWORD *)(a1 + 8872));
  sub_100065B0C((_DWORD *)a1);
  int v5 = *(_DWORD *)(a1 + 8896);
  if (v5) {
    int v5 = *(_DWORD *)(a1 + 616);
  }
  *(_DWORD *)(a1 + 612) = v5;
  int v6 = *(_DWORD *)(a1 + 544);
  if (v6 == 5 || v6 == 2) {
    sub_100065B84(a1);
  }
  int v8 = v2[56];
  if (v8 + v2[62] <= 16382) {
    __int16 v9 = v8 + v2[62];
  }
  else {
    __int16 v9 = 0x3FFF;
  }
  int v10 = *(_DWORD *)(a1 + 9208);
  if (*(_DWORD *)(a1 + 9044) > v10) {
    __int16 v9 = sub_10005DDF8(*(int **)(a1 + 9232), v10, v8, v9);
  }
  if (*(_DWORD *)(a1 + 544) == 3
    && qword_1000FDCC0
    && *(uint64_t *)(qword_1000FDCC0 + 1248) >= 1
    && *v2 == v2[56]
    && sub_1000069E0(*(void *)(a1 + 384)))
  {
    __int16 v11 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      __int16 v11 = *(_WORD *)(qword_1000FDCC0 + 1248);
    }
    int v12 = (__int16)(v9 - v11);
    if (v12 <= v2[56]) {
      __int16 v9 = v2[56];
    }
    else {
      __int16 v9 = v12;
    }
  }

  v2[63] = v9;
  int v13 = *v2;
  signed __int16 v104 = v13;
  v2[60] = v13;
  if (v13 <= v9)
  {
    (*(void (**)(uint64_t))(a1 + 9392))(a1);
  }

  else
  {
    *uint64_t v2 = 0x4000;
    v2[6] = 0x4000;
  }

  int v14 = *(_DWORD *)(a1 + 9044);
  uint64_t v15 = *(void *)(a1 + 9024);
  unint64_t v16 = (__int128 *)(*(void *)(v15 + 8LL * ((v14 - 1) >> 8)) + 48LL * (v14 - 1));
  int v17 = *(_DWORD *)(a1 + 9040) << 8;
  uint64_t v18 = *(_OWORD **)(v15 + 8LL * ((v17 - 1) >> 8));
  __int128 v19 = *v16;
  __int128 v20 = v16[1];
  v18[767] = v16[2];
  v18[766] = v20;
  v18[765] = v19;
  if (*(_DWORD *)(a1 + 9044) == 1)
  {
    if (!*(_DWORD *)(a1 + 8896)) {
      sub_100065AE0(a1);
    }
    return;
  }

  uint64_t v103 = v3;
  unsigned int v107 = 0;
  unsigned int v105 = 0;
  int v106 = 0;
  uint64_t v21 = *(void *)(a1 + 9024);
  uint64_t v22 = *(void *)(v21 + 8LL * ((v14 - 2) >> 8));
  unsigned int v23 = v17 - 2;
  uint64_t v24 = *(void *)(v21 + 8LL * ((v17 - 2) >> 8));
  int v25 = *(_DWORD *)(a1 + 9076);
  int v26 = v2[66];
  int v27 = sub_100063D68(a1);
  int v28 = v14 - 2;
  if (v14 < 2)
  {
    int v33 = 1;
  }

  else
  {
    int v100 = v25 - v26;
    int v101 = v27;
    uint64_t v29 = (_OWORD *)(v24 + 12192);
    uint64_t v30 = v22 + 48LL * (v14 - 2);
    int v31 = *(_DWORD *)(a1 + 620);
    uint64_t v32 = (unsigned __int16 *)(v30 + 32);
    if (v31 < *(unsigned __int16 *)(v30 + 32))
    {
      int v102 = 0;
      int v33 = 1;
      while (1)
      {
        while (*(__int16 *)(v30 + 36) > v2[63])
        {
          BOOL v34 = __OFSUB__(v28--, 1);
          if (v28 < 0 != v34) {
            goto LABEL_70;
          }
          uint64_t v30 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v28 >> 8)) + 48LL * v28;
          uint64_t v32 = (unsigned __int16 *)(v30 + 32);
        }

        __int128 v35 = *(_OWORD *)v30;
        __int128 v36 = *(_OWORD *)(v30 + 32);
        v29[1] = *(_OWORD *)(v30 + 16);
        v29[2] = v36;
        *uint64_t v29 = v35;
        --v23;
        uint64_t v29 = (_OWORD *)(*(void *)(*(void *)(a1 + 9024) + 8LL * (v23 >> 8)) + 48LL * v23);
        ++v33;
        uint64_t v37 = ~*(_DWORD *)(a1 + 620) + *v32;
        uint64_t v38 = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8 * v37), 0);
        unint64_t v39 = *(void *)v30;
        uint64_t v40 = *(void *)v30 & 0x3FFFFFFLL;
        if (*(__int16 *)(v38 + 4 * v40) < 0)
        {
          uint64_t v97 = *(unsigned int *)(*(void *)(a1 + 9344) + 4 * v37);
          int v42 = *(unsigned __int16 *)(v30 + 24);
          signed __int16 v104 = *(_WORD *)(v30 + 24);
          unsigned int v43 = *(_DWORD *)(v30 + 16);
          unsigned int v105 = v43;
          int v44 = (__int16 *)(v30 + 28);
          unsigned int v92 = *(unsigned __int16 *)(v38 + 4 * v40 + 2);
          int v102 = 1;
        }

        else
        {
          uint64_t v41 = *(unsigned __int16 *)(v38 + 4 * v40 + 2);
          if ((*(__int16 *)(v38 + 4 * v41) & 0x80000000) == 0)
          {
            BOOL v34 = __OFSUB__(v28--, 1);
            if (v28 < 0 != v34) {
              goto LABEL_70;
            }
            goto LABEL_40;
          }

          int v102 = 0;
          uint64_t v97 = *(unsigned int *)(*(void *)(a1 + 9344) + 4 * v37);
          unsigned int v92 = *(unsigned __int16 *)(v38 + 4 * v41 + 2);
          uint64_t v45 = *(int *)(a1 + 568) - 1LL;
          uint64_t v46 = v30 + 2 * v45;
          int v42 = *(unsigned __int16 *)(v46 + 24);
          signed __int16 v104 = *(_WORD *)(v46 + 24);
          unsigned int v43 = *(_DWORD *)(v30 + 4 * v45 + 16);
          unsigned int v105 = v43;
          int v44 = (__int16 *)(v46 + 28);
        }

        if (v42 != 0x4000)
        {
          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4544))
          {
            __int16 v47 = *v44;
            if (v43 == -1)
            {
              uint64_t v50 = *(void *)(a1 + 8 * ((v39 >> 53) & 0x3FF) + 680);
              LODWORD(v53) = -1;
              int v48 = 65534;
            }

            else
            {
              int v48 = sub_10009D1B4(*(void *)(a1 + 9000), v43);
              uint64_t v49 = a1 + 8 * ((*(void *)v30 >> 53) & 0x3FFLL);
              uint64_t v50 = *(void *)(v49 + 680);
              if (v105 == -1)
              {
                LODWORD(v53) = -1;
              }

              else
              {
                uint64_t v90 = *(void *)(v49 + 680);
                __int16 v94 = v47;
                int v51 = v48;
                unint64_t v52 = sub_10009D140(*(void *)(a1 + 9000), v105);
                int v48 = v51;
                __int16 v47 = v94;
                uint64_t v53 = (v52 >> 35) & 0x3FFFF;
                uint64_t v50 = v90;
              }
            }

            sub_1000298BC(v50, v53, v97, v48, v92, v47, (int *)&v105, &v104, *(_DWORD *)(a1 + 9284));
            LOWORD(v42) = v104;
            if (v104 != 0x4000) {
              goto LABEL_57;
            }
          }

          else
          {
            if (!*(_DWORD *)(a1 + 9284) || v43 == -1) {
              goto LABEL_57;
            }
            unsigned int v54 = sub_10009D1B4(*(void *)(a1 + 9000), v43);
            if (sub_1000BBCE0(*(void *)(a1 + 376), v54, v92))
            {
              LOWORD(v42) = v104;
LABEL_57:
              signed __int16 v104 = v42 - v2[56];
              if (v101 >= v104)
              {
                uint64_t v55 = (*(void *)v30 >> 53) & 0x3FFLL;
                sub_1000265B8(*(void *)(a1 + 8 * v55 + 680));
                uint64_t v56 = (v55 << 53) + (v97 << 35) + ((uint64_t)(int)v107 << 10);
                sub_10009C670(*(unsigned int **)(a1 + 9000), v105, v92, v56, v102, v104, v2[132]);
                v104 += v2[66] + v2[56];
                signed __int16 v62 = v104;
                if (v104 <= v2[63])
                {
                  uint64_t v63 = v107;
                  if (v106 >= 2)
                  {
                    int v64 = 0;
                    unsigned int v91 = v107;
                    do
                    {
                      uint64_t v95 = v56;
                      signed __int16 v67 = v104;
                      uint64_t v56 = v95 + 1024;
                      int v65 = v64 + 1;
                      int v66 = v64 + 2;
                      ++v64;
                      LODWORD(v63) = v91;
                    }

                    while (v66 < v106);
                    signed __int16 v62 = v104;
                    uint64_t v63 = v91 + v65;
                  }
                }
              }
            }
          }
        }

        if (v28 < 1) {
          goto LABEL_70;
        }
        --v28;
LABEL_40:
        uint64_t v30 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v28 >> 8)) + 48LL * v28;
        int v31 = *(_DWORD *)(a1 + 620);
        uint64_t v32 = (unsigned __int16 *)(v30 + 32);
      }
    }

    int v102 = 0;
    int v33 = 1;
LABEL_79:
    int v68 = 0;
    int v98 = -1;
    unsigned __int16 v69 = -1;
    int v70 = v2[63];
    uint64_t v71 = (__int16 *)(v30 + 36);
LABEL_80:
    while (1)
    {
      BOOL v34 = __OFSUB__(v28--, 1);
      if (v28 < 0 != v34) {
        break;
      }
      uint64_t v72 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v28 >> 8));
      uint64_t v73 = v72 + 48LL * v28;
      int v74 = *(__int16 *)(v73 + 36);
      uint64_t v71 = (__int16 *)(v73 + 36);
      if (v74 <= v70)
      {
        uint64_t v30 = v72 + 48LL * v28;
        while (1)
        {
LABEL_83:
          __int128 v75 = *(_OWORD *)v30;
          __int128 v76 = *(_OWORD *)(v30 + 32);
          v29[1] = *(_OWORD *)(v30 + 16);
          v29[2] = v76;
          *uint64_t v29 = v75;
          int v77 = *(unsigned __int16 *)(v30 + 32);
          if (v77 != v69)
          {
            int v68 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v30 + 32));
            unsigned __int16 v69 = v77;
          }

          ++v33;
          int v78 = *(unsigned __int8 *)(v30 + 38);
          if (v68 - 1 <= v78)
          {
            int v81 = v98;
            if (v68 == v78) {
              int v81 = 0;
            }
            int v99 = v81;
            int v82 = v102;
            if (v68 == v78) {
              int v82 = 1;
            }
            int v102 = v82;
            if (v68 - 1 == v78)
            {
              int v83 = *v71;
              if (v83 < v2[60]) {
                v2[60] = v83;
              }
              int v102 = 0;
              int v84 = *(_DWORD *)(a1 + 568) - 1;
            }

            else
            {
              int v84 = v99;
            }

            int v85 = v84;
            signed __int16 v86 = *(_WORD *)(v30 + 2LL * v84 + 24) - v2[56];
            signed __int16 v104 = v86;
            int v98 = v85;
            unint64_t v87 = *(unsigned int *)(v30 + 4LL * v85 + 16);
            unsigned int v105 = *(_DWORD *)(v30 + 4LL * v85 + 16);
            if (v86 <= v101)
            {
              int v96 = v68;
              uint64_t v88 = *(void *)v30 & 0x7FFFFFFFFFFFFFFFLL;
              int v93 = sub_10009C670(*(unsigned int **)(a1 + 9000), v87, v69, v88, v102, v86, v2[132]);
              v104 += v2[66] + v2[56];
              if (v104 <= v2[63]) {
                (*(void (**)(uint64_t))(a1 + 9400))(a1);
              }
              int v68 = v96;
              if ((*(void *)v30 & 0x8000000000000000LL) != 0 && v102)
              {
                int v89 = sub_100025DF8(v103, *(unsigned int *)(a1 + 8872), v88);
                sub_10009CAD8(*(void *)(a1 + 9000), v93, v100 + v104 + v89);
                int v68 = v96;
              }
            }
          }

          else
          {
            int v79 = *v71;
            if (v79 < v2[60]) {
              v2[60] = v79;
            }
          }

          BOOL v34 = __OFSUB__(v28--, 1);
          if (v28 < 0 != v34) {
            goto LABEL_70;
          }
          uint64_t v80 = *(void *)(a1 + 9024);
          uint64_t v30 = *(void *)(v80 + 8LL * (v28 >> 8)) + 48LL * v28;
          --v23;
          uint64_t v29 = (_OWORD *)(*(void *)(v80 + 8LL * (v23 >> 8)) + 48LL * v23);
          int v70 = v2[63];
          uint64_t v71 = (__int16 *)(v30 + 36);
        }
      }
    }
  }

void sub_100071C1C(uint64_t a1)
{
  uint64_t v2 = (__int16 *)(a1 + 8936);
  unsigned int v72 = -1;
  int v71 = 0x40000000;
  __int16 v70 = 0;
  sub_100065B0C((_DWORD *)a1);
  int v3 = *(_DWORD *)(a1 + 8896);
  if (v3) {
    int v3 = *(_DWORD *)(a1 + 616);
  }
  *(_DWORD *)(a1 + 612) = v3;
  int v4 = *(_DWORD *)(a1 + 544);
  if (v4 == 5 || v4 == 2) {
    sub_100065B84(a1);
  }
  int v6 = v2[56];
  if (v6 + v2[62] <= 16382) {
    __int16 v7 = v6 + v2[62];
  }
  else {
    __int16 v7 = 0x3FFF;
  }
  int v8 = *(_DWORD *)(a1 + 9208);
  if (*(_DWORD *)(a1 + 9044) > v8) {
    __int16 v7 = sub_10005DDF8(*(int **)(a1 + 9232), v8, v6, v7);
  }
  if (*(_DWORD *)(a1 + 544) == 3
    && qword_1000FDCC0
    && *(uint64_t *)(qword_1000FDCC0 + 1248) >= 1
    && *v2 == v2[56]
    && sub_1000069E0(*(void *)(a1 + 384)))
  {
    __int16 v9 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      __int16 v9 = *(_WORD *)(qword_1000FDCC0 + 1248);
    }
    int v10 = (__int16)(v7 - v9);
    if (v10 <= v2[56]) {
      __int16 v7 = v2[56];
    }
    else {
      __int16 v7 = v10;
    }
  }

  v2[63] = v7;
  int v11 = *v2;
  v2[60] = *v2;
  if (v11 <= v7)
  {
    (*(void (**)(uint64_t))(a1 + 9392))(a1);
  }

  else
  {
    *uint64_t v2 = 0x4000;
    v2[6] = 0x4000;
  }

  int v12 = *(_DWORD *)(a1 + 9044);
  uint64_t v13 = *(void *)(a1 + 9024);
  int v14 = (__int128 *)(*(void *)(v13 + 8LL * ((v12 - 1) >> 8)) + 48LL * (v12 - 1));
  int v15 = *(_DWORD *)(a1 + 9040) << 8;
  unint64_t v16 = *(_OWORD **)(v13 + 8LL * ((v15 - 1) >> 8));
  __int128 v17 = *v14;
  __int128 v18 = v14[1];
  v16[767] = v14[2];
  v16[766] = v18;
  v16[765] = v17;
  if (*(_DWORD *)(a1 + 9044) == 1)
  {
    if (!*(_DWORD *)(a1 + 8896)) {
      sub_100065AE0(a1);
    }
    return;
  }

  int v19 = v12 - 2;
  uint64_t v20 = *(void *)(a1 + 9024);
  uint64_t v21 = *(void *)(v20 + 8LL * (v19 >> 8)) + 48LL * v19;
  unsigned int v22 = v15 - 2;
  unsigned int v23 = (_OWORD *)(*(void *)(v20 + 8LL * ((v15 - 2) >> 8)) + 12192LL);
  int v67 = sub_100063D68(a1);
  int v69 = 0;
  int v68 = 0;
  int v24 = 0;
  unsigned __int16 v25 = -1;
  int v26 = 1;
  int v27 = v2[63];
LABEL_31:
  while (1)
  {
    BOOL v28 = __OFSUB__(v19--, 1);
    if (v19 < 0 != v28) {
      break;
    }
    uint64_t v29 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v19 >> 8));
    if (*(__int16 *)(v29 + 48LL * v19 + 36) <= v27)
    {
      uint64_t v21 = v29 + 48LL * v19;
      while (1)
      {
LABEL_34:
        __int128 v30 = *(_OWORD *)v21;
        __int128 v31 = *(_OWORD *)(v21 + 32);
        v23[1] = *(_OWORD *)(v21 + 16);
        v23[2] = v31;
        *unsigned int v23 = v30;
        int v32 = *(unsigned __int16 *)(v21 + 32);
        if (v32 != v25)
        {
          int v24 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v21 + 32));
          unsigned __int16 v25 = v32;
        }

        ++v26;
        int v33 = *(unsigned __int8 *)(v21 + 38);
        if (v24 - 1 > v33)
        {
          int v34 = *(__int16 *)(v21 + 36);
          if (v34 < v2[60]) {
            v2[60] = v34;
          }
          BOOL v28 = __OFSUB__(v19--, 1);
          if (v19 < 0 != v28) {
            goto LABEL_85;
          }
          goto LABEL_40;
        }

        int v36 = v69;
        if (v24 == v33)
        {
          int v36 = 1;
          int v37 = 0;
        }

        else
        {
          int v37 = v68;
        }

        if (v24 - 1 == v33)
        {
          int v38 = *(__int16 *)(v21 + 36);
          if (v38 < v2[60]) {
            v2[60] = v38;
          }
          int v69 = 0;
          int v39 = *(_DWORD *)(a1 + 568) - 1;
        }

        else
        {
          int v69 = v36;
          int v39 = v37;
        }

        int v68 = v39;
        int v66 = (__int16)(*(_WORD *)(v21 + 2LL * v39 + 24) - v2[56]);
        if (v66 <= v67)
        {
          if (*(__int16 *)(a1 + 456) == -1)
          {
            int v40 = 0;
          }

          else
          {
            __int16 v70 = sub_1000BB868(*(void *)(a1 + 376), v25, 0LL);
            int v40 = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v70, 1u, *(unsigned __int16 *)(a1 + 456));
          }

          uint64_t v65 = *(void *)v21 & 0x7FFFFFFFFFFFFFFFLL;
          unsigned int v41 = *(_DWORD *)(a1 + 544);
          if (v41 <= 0xB && ((1 << v41) & 0x828) != 0)
          {
            v40 += sub_100025DF8(a1 + 680, *(unsigned int *)(a1 + 8872), v65);
            unsigned int v41 = *(_DWORD *)(a1 + 544);
          }

          int v42 = v2[56];
          int v43 = *(_DWORD *)(a1 + 9076);
          __int16 v64 = v40;
          if (v41 == 2) {
            LODWORD(v44) = 1;
          }
          else {
            uint64_t v44 = *(void *)v21 >> 63;
          }
          BOOL v45 = 1;
          int v63 = v44;
          if (*(_DWORD *)(a1 + 9008) && (_DWORD)v44 && (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 4736)))
          {
            int v46 = v2[56];
            int v61 = *(_DWORD *)(a1 + 9076);
            sub_10009D1EC(*(void *)(a1 + 9000), &v72, &v71);
            int v43 = v61;
            int v42 = v46;
            BOOL v45 = v71 == 0x40000000;
          }

          int v62 = v66 + v64 + v42 + v43;
          unint64_t v47 = *(unsigned int *)(v21 + 4LL * v68 + 16);
          int v48 = v69;
          int v49 = sub_10009C670(*(unsigned int **)(a1 + 9000), v47, v25, v65, v69, v66, v2[132]);
          int v50 = v49;
          if (!v45)
          {
            int v51 = v72;
            if (v49 != v72)
            {
              __int16 v52 = v71 - v62;
              if (v71 <= v62)
              {
                __int16 v52 = v62 - v71;
                int v58 = v49;
                int v57 = v49;
                LOWORD(v53) = v66;
              }

              else
              {
                int v53 = v71 - (*(_DWORD *)(a1 + 9076) + (unsigned __int16)v2[56]);
                if (*(__int16 *)(a1 + 456) != -1)
                {
                  int v60 = v49;
                  __int16 v54 = v71 - v62;
                  unsigned int v55 = sub_10009D1B4(*(void *)(a1 + 9000), v72);
                  __int16 v70 = sub_1000BB868(*(void *)(a1 + 376), v55, 0LL);
                  __int16 v56 = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v70, 1u, *(unsigned __int16 *)(a1 + 456));
                  __int16 v52 = v54;
                  int v50 = v60;
                  LOWORD(v53) = v53 - (v56 - v64);
                  int v51 = v72;
                }

                int v57 = v51;
                int v58 = v50;
                int v51 = v50;
              }

              sub_100024188(*(uint64_t **)(a1 + 9016), v57, v51, v52, v53);
              int v48 = v69;
              int v50 = v58;
            }
          }

          if (!*(_DWORD *)(a1 + 9272) && v48) {
            goto LABEL_79;
          }
          if (!*(_DWORD *)(a1 + 9276) || v69) {
            break;
          }
        }

void sub_100072290(uint64_t a1)
{
  uint64_t v2 = (_WORD *)(a1 + 8936);
  *(void *)(a1 + 628) = 0x100000001LL;
  *(_WORD *)(a1 + 9048) = 0;
  *(_WORD *)(a1 + 9052) = -1;
  *(_WORD *)(a1 + 9056) = 0;
  *(_DWORD *)(a1 + 9044) = 1;
  *(_WORD *)(a1 + 8992) = -1;
  uint64_t v3 = *(void *)(a1 + 472);
  if (v3) {
    sub_1000D0E08(v3, a1 + 9202, *(_DWORD *)(a1 + 9204), *(_DWORD *)(a1 + 8888));
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 9024) + 8LL * ((*(_DWORD *)(a1 + 9040) - 1) & 0xFFFFFF));
  *(_WORD *)(v4 + 12272) = -1;
  *(void *)(v4 + 12240) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 624) = 0;
  *((_BYTE *)v2 + 14) = -1;
  *(void *)(a1 + 8912) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8928) = -1LL;
  memset_pattern16(v2, &unk_1000F03B0, 4uLL);
  *uint64_t v2 = 0;
  *(_DWORD *)(a1 + 8928) = 0;
  *(void *)(v2 + 2) = -65536LL;
  *(_DWORD *)(a1 + 8920) = 0;
  v2[6] = 0;
  v2[5] = sub_100004690(*(void *)(a1 + 384));
  int v5 = *(_DWORD *)(a1 + 544);
  int v6 = (v5 | 8) == 0xB || v5 == 5;
  sub_10009C5F8(*(void *)(a1 + 9000), *(_DWORD *)(a1 + 8888), v6);
  v2[132] = 0;
  *(void *)(a1 + 9376) = 0LL;
  *(_DWORD *)(a1 + 9076) = 0;
  if (*(_DWORD *)(a1 + 8896))
  {
    int v7 = *(_DWORD *)(a1 + 616);
    if (v7 >= 1)
    {
      for (int i = 0; i < v7; ++i)
      {
        *(_WORD *)(*(void *)(*(void *)(a1 + 592) + 8LL * (i >> 8)) + 24LL * i + 16) = 0x4000;
        int v7 = *(_DWORD *)(a1 + 616);
      }
    }

    *(_WORD *)(*(void *)(*(void *)(a1 + 592) + 8LL * ((v7 - 1) >> 8))
  }

  else
  {
    int v9 = *(_DWORD *)(a1 + 608) << 8;
    if (v9 >= 1)
    {
      for (unsigned int j = 0; j != v9; ++j)
        *(void *)(*(void *)(*(void *)(a1 + 592) + 8LL * (j >> 8)) + 24LL * j) = 0x7FFFFFFFFFFFFFFFLL;
    }

    *(_DWORD *)(**(void **)(a1 + 592) + 14LL) = 0xFFFF;
    *(_DWORD *)(a1 + 612) = 0;
  }

  *(_DWORD *)(a1 + 588) = 0;
  *(_DWORD *)(a1 + 9364) = 0;
  *(_DWORD *)(a1 + 552) = 1;
}

uint64_t sub_100072488(uint64_t a1, __int16 *a2, uint64_t a3)
{
  int v6 = (_WORD *)(a1 + 9048);
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), *(unsigned __int16 *)(a3 + 34));
  int v8 = *a2;
  int v9 = *(__int16 *)(a3 + 24);
  if (v8 < v9)
  {
    *(_WORD *)(a3 + 24) = *a2;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 1);
    *(_WORD *)(a3 + 28) = a2[4];
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 3);
    int v9 = v8;
  }

  if (v9 <= (__int16)v6[7])
  {
    uint64_t v10 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v10);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v10);
      LOWORD(v9) = *(_WORD *)(a3 + 24);
    }

    __int16 v11 = result - v6[5] + v9;
    *(_WORD *)(a3 + 24) = v11;
    *(_DWORD *)(a3 + 8) += (__int16)result;
    *(_WORD *)(a3 + 36) = v11;
    if (v11 < (__int16)*v6)
    {
      _WORD *v6 = v11;
      v6[2] = *(_WORD *)(a3 + 32);
      v6[68] = *(_WORD *)(a3 + 34);
    }
  }

  else
  {
    *(_WORD *)(a3 + 36) = 0x4000;
    *(_WORD *)(a3 + 24) = 0x4000;
  }

  return result;
}

uint64_t sub_100072588(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, _DWORD *a6)
{
  int v6 = (_WORD *)(result + 9048);
  if (*(__int16 *)(a3 + 16) - *(__int16 *)(result + 9058) <= *(__int16 *)(result + 9064))
  {
    uint64_t v8 = result;
    unint64_t v9 = *a6;
    if (a5 - 2 <= (int)v9)
    {
      *(_DWORD *)(result + 552) = 3;
    }

    else
    {
      __int16 v12 = a2;
      int v28 = 0;
      int v27 = 0LL;
      if (*(_DWORD *)(result + 556))
      {
        uint64_t v13 = (unsigned __int16 *)(a3 + 12);
      }

      else
      {
        sub_10009B1B8(*(void *)(result + 9256), a2, 0LL, &v27, &v28);
        uint64_t v13 = v27;
      }

      uint64_t v14 = *(void *)(*(void *)(v8 + 9024) + ((v9 >> 5) & 0x7FFFFF8));
      int v15 = *v13;
      uint64_t v16 = v14 + 48LL * v9;
      *(_DWORD *)(v16 + 24) = 1073758208;
      __int128 v17 = (_WORD *)(v16 + 24);
      *(_BYTE *)(v16 + 38) = 0;
      *(_WORD *)(v16 + 32) = v12;
      __int128 v18 = (_WORD *)(v16 + 32);
      *(_WORD *)(v16 + 34) = v15;
      int v19 = (_WORD *)(v16 + 34);
      *(void *)uint64_t v16 = *(void *)a3;
      uint64_t result = sub_100015BAC(*(void *)(v8 + 384), v15);
      if (*(_DWORD *)(v8 + 556)) {
        *(_BYTE *)(v14 + 48LL * v9 + 39) = *(_BYTE *)(*(void *)(*(void *)(v8 + 600)
      }
                                                                                 + 8LL * (a4 >> 8))
                                                                     + a4);
      int v20 = *(__int16 *)(a3 + 16);
      *__int128 v17 = *(_WORD *)(a3 + 16);
      __int16 v21 = v6[76];
      uint64_t v22 = v14 + 48LL * v9;
      *(_DWORD *)(v22 + 8) = 0;
      unsigned int v23 = (int *)(v22 + 8);
      *((_WORD *)v23 + 10) = v21;
      v23[2] = *(_DWORD *)(a3 + 8);
      if (v20 <= (__int16)v6[7])
      {
        uint64_t v24 = *(unsigned __int16 *)result;
        uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(v8 + 384) + 1792LL) + 2 * v24);
        if ((_DWORD)result == 0x4000)
        {
          uint64_t result = sub_100015BC0(*(void *)(v8 + 384), v24);
          LOWORD(v20) = *v17;
          int v25 = *v23;
        }

        else
        {
          int v25 = 0;
        }

        __int16 v26 = result - v6[5] + v20;
        *__int128 v17 = v26;
        *unsigned int v23 = v25 + (__int16)result;
        *(_WORD *)(v14 + 48LL * v9 + 36) = v26;
        if (v26 < (__int16)*v6)
        {
          _WORD *v6 = v26;
          v6[2] = *v18;
          v6[68] = *v19;
        }
      }

      else
      {
        *(_WORD *)(v14 + 48LL * v9 + 36) = 0x4000;
        *__int128 v17 = 0x4000;
      }

      ++*a6;
    }
  }

  return result;
}

uint64_t sub_100072790(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = a1;
  if (a4) {
    uint64_t v6 = *a4;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v114 = (_WORD *)(a1 + 9048);
  uint64_t v115 = 0LL;
  int v104 = *(__int16 *)(a1 + 9062);
  uint64_t v116 = 0LL;
  unint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 9024);
  int v9 = *a5;
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(v8 + 8 * (v7 >> 8)) + 48 * v10;
  unsigned int v110 = *a3;
  uint64_t v12 = *(void *)(v8 + (((unint64_t)*a3 >> 5) & 0x7FFFFF8)) + 48LL * *a3;
  unsigned int v13 = *(unsigned __int16 *)(v11 + 32);
  if (!v6 || (unsigned int v14 = *(unsigned __int16 *)(v6 + 14), v14 > v13))
  {
    uint64_t v15 = (int)(~*(_DWORD *)(a1 + 620) + v13);
    uint64_t result = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8 * v15), 0);
    uint64_t v17 = *(void *)(v5 + 9024);
    uint64_t v18 = *(void *)(v17 + 8 * (v7 >> 8));
    if (*(unsigned __int16 *)(v18 + 48LL * v10 + 32) != v13)
    {
      LODWORD(v29) = 0;
      uint64_t v22 = 0LL;
      LODWORD(v26) = 0xFFFF;
      uint64_t v24 = 0x4000LL;
      uint64_t v25 = 0xFFFFFFFFLL;
      unsigned int v19 = v7;
      uint64_t v30 = 0xFFFFLL;
      int v20 = v114;
      unsigned int v21 = v110;
      goto LABEL_23;
    }

    unsigned int v19 = v7;
    int v20 = v114;
    unsigned int v21 = v110;
    while (1)
    {
      uint64_t v22 = *(void *)(v18 + 48 * v10);
      if ((*(__int16 *)(result + 4 * (v22 & 0x3FFFFFF)) & 0x80000000) == 0)
      {
        uint64_t v23 = *(int *)(v5 + 568) - 1LL;
        uint64_t v24 = *(__int16 *)(v18 + 48 * v10 + 2 * v23 + 24);
      }

      uint64_t v18 = *(void *)(v17 + 8LL * (++v19 >> 8));
      uint64_t v10 = v19;
      if (*(unsigned __int16 *)(v18 + 48LL * v19 + 32) != v13)
      {
        LODWORD(v29) = 0;
        uint64_t v22 = 0LL;
        LODWORD(v26) = 0xFFFF;
        uint64_t v24 = 0x4000LL;
        uint64_t v25 = 0xFFFFFFFFLL;
        uint64_t v30 = 0xFFFFLL;
        goto LABEL_23;
      }
    }

    uint64_t v25 = *(unsigned int *)(v18 + 48 * v10 + 4 * v23 + 16);
    LODWORD(v26) = *(unsigned __int16 *)(result + 4 * (v22 & 0x3FFFFFF) + 2);
    int v27 = (__int16 *)(result + 4 * (v22 & 0x3FFFFFF) + 4);
    do
    {
      int v28 = *v27;
      v27 += 2;
    }

    while (v28 < 0);
    LODWORD(v29) = (unsigned __int16)*(v27 - 1);
    uint64_t v30 = *(unsigned __int16 *)(v18 + 48 * v10 + 2 * v23 + 28);
LABEL_23:
    int v40 = v104;
    int v102 = 0;
    uint64_t v41 = *(unsigned __int16 *)(*(void *)(v5 + 9336) + 2 * v15);
    goto LABEL_24;
  }

  uint64_t v32 = (int)(~*(_DWORD *)(a1 + 620) + v14);
  uint64_t result = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8 * v32), 0);
  uint64_t v24 = *(__int16 *)(v6 + 16);
  uint64_t v25 = *(unsigned int *)(v6 + 8);
  int v20 = v114;
  uint64_t v30 = (unsigned __int16)v114[76];
  uint64_t v26 = *(unsigned __int16 *)(result + 2);
  int v33 = (__int16 *)(result + 4);
  uint64_t v22 = *(void *)v6;
  do
  {
    int v34 = *v33;
    v33 += 2;
  }

  while (v34 < 0);
  uint64_t v29 = (unsigned __int16)*(v33 - 1);
  *(_WORD *)(v6 + 16) = 0x4000;
  unsigned int v35 = v9 + 1;
  uint64_t v36 = *(void *)(v5 + 592);
  uint64_t v37 = *(void *)(v36 + 8LL * ((v9 + 1) >> 8)) + 24LL * (v9 + 1);
  int v38 = *(_DWORD *)(v5 + 9360) + *(_DWORD *)(v5 + 620);
  if (*(_WORD *)(v37 + 16) == 0x4000 && v9 < v38)
  {
    unsigned int v21 = v110;
    do
    {
      int v78 = v35++;
      uint64_t v79 = *(void *)(v36 + 8LL * (v35 >> 8));
    }

    while (*(_WORD *)(v79 + 24LL * v35 + 16) == 0x4000 && v78 < v38);
    uint64_t v37 = v79 + 24LL * v35;
  }

  else
  {
    unsigned int v21 = v110;
  }

  *a5 = v35;
  *a4 = v37;
  uint64_t v41 = *(unsigned __int16 *)(*(void *)(v5 + 9336) + 2 * v32);
  if (*(unsigned __int16 *)(v6 + 14) >= v13)
  {
    int v102 = 1;
    unsigned int v19 = v7;
    int v40 = v104;
LABEL_24:
    LODWORD(v42) = *(_DWORD *)v11 & 0x3FFFFFF;
    uint64_t v99 = v41 << 53;
    uint64_t v93 = result + 4;
    uint64_t v96 = 0xFFFFLL;
    int v95 = -1;
    uint64_t v101 = v5;
    uint64_t v103 = result;
    unsigned int v100 = v13;
    while ((int)v26 >= (int)v42)
    {
      if (*(__int16 *)(v11 + 36) <= v40)
      {
        __int128 v61 = *(_OWORD *)v11;
        __int128 v62 = *(_OWORD *)(v11 + 32);
        *(_OWORD *)(v12 + 16) = *(_OWORD *)(v11 + 16);
        *(_OWORD *)(v12 + 32) = v62;
        *(_OWORD *)uint64_t v12 = v61;
        if ((_DWORD)v26 == (_DWORD)v42)
        {
          LODWORD(v26) = v26 + 1;
          if ((int)v26 >= (int)v29)
          {
            if (!v102) {
              ++v19;
            }
            while (1)
            {
              uint64_t v66 = *(void *)(*(void *)(v5 + 9024) + 8LL * (v19 >> 8));
              if (*(unsigned __int16 *)(v66 + 48LL * v19 + 32) != v13)
              {
                int v102 = 0;
                LODWORD(v26) = 0xFFFF;
                unsigned int v112 = v25;
                int v63 = v25;
                __int16 v64 = v24;
                uint64_t v24 = 0x4000LL;
                goto LABEL_65;
              }

              uint64_t v67 = *(void *)(v66 + 48LL * v19);
              if ((*(__int16 *)(result + 4 * (v67 & 0x3FFFFFF)) & 0x80000000) == 0)
              {
                uint64_t v68 = *(int *)(v5 + 568) - 1LL;
                uint64_t v69 = *(__int16 *)(v66 + 48LL * v19 + 2 * v68 + 24);
              }

              ++v19;
            }

            unsigned int v112 = *(_DWORD *)(v66 + 48LL * v19 + 4 * v68 + 16);
            LODWORD(v26) = *(unsigned __int16 *)(result + 4 * (v67 & 0x3FFFFFF) + 2);
            __int16 v70 = (__int16 *)(v93 + 4 * (v67 & 0x3FFFFFF));
            do
            {
              int v71 = *v70;
              v70 += 2;
            }

            while (v71 < 0);
            int v102 = 0;
            LODWORD(v29) = (unsigned __int16)*(v70 - 1);
            unsigned int v98 = *(unsigned __int16 *)(v66 + 48LL * v19 + 2 * v68 + 28);
            int v63 = v25;
            uint64_t v22 = *(void *)(v66 + 48LL * v19);
            __int16 v64 = v24;
            uint64_t v24 = v69;
          }

          else
          {
            unsigned int v112 = v25;
            int v63 = v25;
            __int16 v64 = v24;
LABEL_65:
            unsigned int v98 = v30;
          }

          uint64_t v65 = v30;
        }

        else
        {
          __int16 v64 = 0x4000;
          unsigned int v112 = v25;
          unsigned int v98 = v30;
          int v63 = v95;
          uint64_t v65 = v96;
        }

        uint64_t v72 = v24;
        uint64_t v106 = v22;
        int v109 = v29;
        int v73 = v21;
        LOWORD(v115) = v64;
        HIDWORD(v115) = v63;
        uint64_t v96 = v65;
        LOWORD(v116) = v65;
        if (*(_WORD *)(v12 + 34))
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(v5 + 9416))(v5, &v115, v12);
          int v20 = v114;
        }

        else
        {
          uint64_t result = sub_100015BAC(*(void *)(v5 + 384), 0);
          int v74 = (__int16)v115;
          int v75 = *(__int16 *)(v12 + 24);
          if ((__int16)v115 < v75)
          {
            *(_WORD *)(v12 + 24) = v115;
            *(_DWORD *)(v12 + 16) = HIDWORD(v115);
            *(_WORD *)(v12 + 28) = v116;
            *(_DWORD *)(v12 + 8) = HIDWORD(v116);
            int v75 = v74;
          }

          int v20 = v114;
          if (v75 <= (__int16)v114[7])
          {
            uint64_t v76 = *(unsigned __int16 *)result;
            uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 384) + 1792LL) + 2 * v76);
            if ((_DWORD)result == 0x4000)
            {
              uint64_t result = sub_100015BC0(*(void *)(v5 + 384), v76);
              int v20 = v114;
              LOWORD(v75) = *(_WORD *)(v12 + 24);
            }

            __int16 v77 = result - v20[5] + v75;
            *(_WORD *)(v12 + 24) = v77;
            *(_DWORD *)(v12 + 8) += (__int16)result;
            *(_WORD *)(v12 + 36) = v77;
            if (v77 < (__int16)*v20)
            {
              *int v20 = v77;
              v20[2] = *(_WORD *)(v12 + 32);
              v20[68] = *(_WORD *)(v12 + 34);
            }
          }

          else
          {
            *(_WORD *)(v12 + 36) = 0x4000;
            *(_WORD *)(v12 + 24) = 0x4000;
          }
        }

        unsigned int v21 = v73;
        int v95 = v63;
        LODWORD(v7) = v7 + 1;
        uint64_t v11 = *(void *)(*(void *)(v5 + 9024) + 8LL * (v7 >> 8)) + 48LL * v7;
        else {
          LODWORD(v42) = 0xFFFF;
        }
        uint64_t result = v103;
        LODWORD(v29) = v109;
        uint64_t v22 = v106;
        uint64_t v24 = v72;
        uint64_t v49 = v112;
        uint64_t v30 = v98;
LABEL_82:
        if (*(_DWORD *)(v5 + 552) == 3)
        {
LABEL_84:
          *a2 = v7;
          goto LABEL_85;
        }

        ++v21;
        uint64_t v12 = *(void *)(*(void *)(v5 + 9024) + 8LL * (v21 >> 8)) + 48LL * v21;
        uint64_t v25 = v49;
      }

      else
      {
        LODWORD(v7) = v7 + 1;
        uint64_t v11 = *(void *)(*(void *)(v5 + 9024) + 8LL * (v7 >> 8)) + 48LL * v7;
        else {
          LODWORD(v42) = 0xFFFF;
        }
      }
    }

    int v108 = v29;
    unsigned int v111 = v21;
    *(_DWORD *)(v12 + 24) = 1073758208;
    *(_WORD *)(v12 + 32) = v13;
    *(_BYTE *)(v12 + 38) = 0;
    int v43 = *(_WORD *)(result + 4LL * (int)v26) & 0x7FFF;
    *(_WORD *)(v12 + 34) = v43;
    uint64_t v105 = v22;
    *(void *)uint64_t v12 = v99 + (int)v26 + (v22 & 0x8000000000000000LL);
    uint64_t v44 = v25;
    uint64_t v45 = v24;
    uint64_t v46 = v30;
    unint64_t v47 = (unsigned __int16 *)sub_100015BAC(*(void *)(v5 + 384), v43);
    uint64_t v48 = v46;
    uint64_t v24 = v45;
    uint64_t v49 = v44;
    int v20 = v114;
    *(_WORD *)(v12 + 24) = v45;
    *(_DWORD *)(v12 + 16) = v44;
    *(_WORD *)(v12 + 28) = v46;
    if ((__int16)v114[7] >= (__int16)v45)
    {
      uint64_t v50 = *v47;
      int v51 = *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 384) + 1792LL) + 2 * v50);
      __int16 v52 = v45;
      if (v51 == 0x4000)
      {
        LOWORD(v51) = sub_100015BC0(*(void *)(v5 + 384), v50);
        uint64_t v48 = v46;
        uint64_t v24 = v45;
        uint64_t v49 = v44;
        int v20 = v114;
        __int16 v52 = *(_WORD *)(v12 + 24);
      }

      __int16 v53 = v51 - v20[5] + v52;
      *(_WORD *)(v12 + 24) = v53;
      *(_DWORD *)(v12 + 8) += (__int16)v51;
      *(_WORD *)(v12 + 36) = v53;
      uint64_t v22 = v105;
      if (v53 < (__int16)*v20)
      {
        *int v20 = v53;
        v20[2] = *(_WORD *)(v12 + 32);
        v20[68] = *(_WORD *)(v12 + 34);
      }
    }

    else
    {
      *(_WORD *)(v12 + 36) = 0x4000;
      *(_WORD *)(v12 + 24) = 0x4000;
      uint64_t v22 = v105;
    }

    LODWORD(v26) = v26 + 1;
    LODWORD(v29) = v108;
    unsigned int v21 = v111;
    uint64_t result = v103;
    uint64_t v5 = v101;
    unsigned int v13 = v100;
    if ((int)v26 >= v108)
    {
      if (!v102) {
        ++v19;
      }
      uint64_t v54 = *(void *)(v101 + 9024);
      uint64_t v55 = *(void *)(v54 + 8LL * (v19 >> 8));
      uint64_t v56 = v19;
      int v40 = v104;
      if (*(unsigned __int16 *)(v55 + 48LL * v19 + 32) == v100)
      {
        while (1)
        {
          uint64_t v57 = *(void *)(v55 + 48 * v56);
          if ((*(__int16 *)(v103 + 4 * (v57 & 0x3FFFFFF)) & 0x80000000) == 0)
          {
            uint64_t v58 = *(int *)(v101 + 568) - 1LL;
            uint64_t v24 = *(__int16 *)(v55 + 48 * v56 + 2 * v58 + 24);
          }

          uint64_t v55 = *(void *)(v54 + 8LL * (++v19 >> 8));
          uint64_t v56 = v19;
        }

        uint64_t v49 = *(unsigned int *)(v55 + 48 * v56 + 4 * v58 + 16);
        LODWORD(v26) = *(unsigned __int16 *)(v103 + 4 * (v57 & 0x3FFFFFF) + 2);
        int v59 = (__int16 *)(v93 + 4 * (v57 & 0x3FFFFFF));
        do
        {
          int v60 = *v59;
          v59 += 2;
        }

        while (v60 < 0);
        int v102 = 0;
        LODWORD(v29) = (unsigned __int16)*(v59 - 1);
        uint64_t v30 = *(unsigned __int16 *)(v55 + 48 * v56 + 2 * v58 + 28);
        uint64_t v22 = *(void *)(v55 + 48 * v56);
      }

      else
      {
LABEL_43:
        int v102 = 0;
        uint64_t v24 = 0x4000LL;
        LODWORD(v26) = 0xFFFF;
        uint64_t v30 = v48;
      }
    }

    else
    {
      uint64_t v30 = v48;
      int v40 = v104;
    }

    goto LABEL_82;
  }

  if ((int)v7 - 2 >= (int)(v21 - v26 + v29))
  {
    if (v26 < v29)
    {
      int v81 = (_WORD *)(result + 4 * v26);
      unint64_t v113 = (v41 << 53) - (v22 & 0x8000000000000000LL);
      do
      {
        uint64_t v83 = v29;
        unsigned int v84 = v21;
        *(_DWORD *)(v12 + 24) = 1073758208;
        *(_WORD *)(v12 + 32) = *(_WORD *)(v6 + 14);
        *(_BYTE *)(v12 + 38) = 0;
        *(void *)uint64_t v12 = v113 + v26;
        int v85 = *v81 & 0x7FFF;
        *(_WORD *)(v12 + 34) = *v81 & 0x7FFF;
        uint64_t v86 = v25;
        uint64_t v87 = v24;
        uint64_t v88 = v30;
        uint64_t result = sub_100015BAC(*(void *)(v5 + 384), v85);
        uint64_t v30 = v88;
        uint64_t v24 = v87;
        uint64_t v25 = v86;
        int v89 = *(__int16 *)(v12 + 24);
        if ((int)v87 < v89)
        {
          *(_WORD *)(v12 + 24) = v87;
          *(_DWORD *)(v12 + 16) = v86;
          int v89 = v87;
          *(_WORD *)(v12 + 28) = v88;
        }

        uint64_t v90 = v114;
        if (v89 > (__int16)v114[7])
        {
          *(_WORD *)(v12 + 36) = 0x4000;
          *(_WORD *)(v12 + 24) = 0x4000;
          unsigned int v82 = v84;
          uint64_t v29 = v83;
        }

        else
        {
          uint64_t v91 = *(unsigned __int16 *)result;
          uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 384) + 1792LL) + 2 * v91);
          if ((_DWORD)result == 0x4000)
          {
            uint64_t result = sub_100015BC0(*(void *)(v5 + 384), v91);
            uint64_t v30 = v88;
            uint64_t v24 = v87;
            uint64_t v25 = v86;
            uint64_t v90 = v114;
            LOWORD(v89) = *(_WORD *)(v12 + 24);
          }

          __int16 v92 = result - v90[5] + v89;
          *(_WORD *)(v12 + 24) = v92;
          *(_DWORD *)(v12 + 8) += (__int16)result;
          *(_WORD *)(v12 + 36) = v92;
          unsigned int v82 = v84;
          uint64_t v29 = v83;
          if (v92 < (__int16)*v90)
          {
            *uint64_t v90 = v92;
            v90[2] = *(_WORD *)(v12 + 32);
            v90[68] = *(_WORD *)(v12 + 34);
          }
        }

        unsigned int v21 = v82 + 1;
        uint64_t v12 = *(void *)(*(void *)(v5 + 9024) + 8LL * (v21 >> 8)) + 48LL * v21;
        v81 += 2;
        ++v26;
      }

      while (v26 < v29);
    }

uint64_t sub_1000731C4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 9040) << 8;
  int v2 = *(_DWORD *)(a1 + 9044);
  if (v1 - v2 >= v1 - 1) {
    return 1LL;
  }
  int v16 = 0;
  uint64_t v15 = 0LL;
  int v4 = -v2;
  while (1)
  {
    int v6 = v5 & 0x3FF;
    uint64_t v7 = (v5 >> 10) & 0x1FFFFFF;
    uint64_t v8 = (v5 >> 35) & 0x3FFFF;
    uint64_t v15 = *(void *)(a1 + 8 * ((v5 >> 53) & 0x3FF) + 680);
    uint64_t v9 = sub_10002BA84((uint64_t)&v15, 1);
    sub_1000334EC(v9, v8, v7, &v16, v10, v11, v12, v13);
    if (v6 != v16 - 1) {
      break;
    }
    if (++v4 == -1) {
      return 1LL;
    }
  }

  return 0LL;
}

uint64_t sub_1000732A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v53 = a4;
  int v49 = a3;
  uint64_t v8 = (char *)a2;
  uint64_t v9 = a1;
  uint64_t v10 = 0LL;
  int v11 = *(_DWORD *)(a1 + 9040) << 8;
  unsigned int v12 = v11 - *(_DWORD *)(a1 + 9044);
  uint64_t v13 = *(void *)(a1 + 9024);
  uint64_t v14 = *(void *)(v13 + 8LL * (v12 >> 8)) + 48LL * -*(_BYTE *)(a1 + 9044);
  unsigned int v55 = 0;
  uint64_t v54 = (unsigned int **)(a1 + 680);
  uint64_t v50 = (_WORD *)(a1 + 9200);
  int v15 = v11 - 1;
  int v16 = 0xFFFF;
  for (unsigned int i = *(unsigned __int16 *)(v14 + 32); i != 0xFFFF; unsigned int i = *(unsigned __int16 *)(v14 + 32))
  {
    if (i != (unsigned __int16)v16)
    {
LABEL_3:
      uint64_t v10 = sub_10009B978(*(void *)(v9 + 9256), i);
      int v16 = i;
    }

uint64_t sub_1000736E0(uint64_t a1, char *a2, int a3, int a4)
{
  int v28 = 0;
  int v26 = 0;
  HIDWORD(v29) = 0;
  uint64_t v25 = *(void *)(a1 + 376);
  int v5 = *(_DWORD *)(a1 + 9040) << 8;
  unsigned int v6 = v5 - *(_DWORD *)(a1 + 9044);
  uint64_t v7 = *(void *)(a1 + 9024);
  uint64_t v8 = *(void *)(v7 + 8LL * (v6 >> 8)) + 48LL * -*(_BYTE *)(a1 + 9044);
  LOWORD(v9) = -1;
  while (1)
  {
    int v10 = *(unsigned __int16 *)(v8 + 32);
    if (v10 != 0xFFFF) {
      break;
    }
    if (++v6 == v5) {
      goto LABEL_33;
    }
LABEL_3:
    uint64_t v8 = *(void *)(v7 + 8LL * (v6 >> 8)) + 48LL * v6;
  }

  __int16 v11 = *(_WORD *)(v8 + 24);
  unint64_t v12 = *(unsigned int *)(v8 + 16);
  int v13 = *(_DWORD *)(a1 + 620);
  if (v13 >= v10)
  {
    if (v10 != (unsigned __int16)v9)
    {
      int v26 = sub_10009B978(*(void *)(a1 + 9256), *(unsigned __int16 *)(v8 + 32));
      LOWORD(v9) = v10;
    }

    int v16 = *(unsigned __int8 *)(v8 + 38);
    if (!qword_1000FDCC0 || (*(_DWORD *)(qword_1000FDCC0 + 816) ? (BOOL v17 = v26 == v16) : (BOOL v17 = 1), v17))
    {
      if (v26 != v16) {
        goto LABEL_32;
      }
    }

    else
    {
      if (*(unsigned __int16 *)(v8 + 36) != *(unsigned __int16 *)(v8 + 24))
      {
        __int16 v11 = *(_WORD *)(v8 + 26);
        unint64_t v12 = *(unsigned int *)(v8 + 20);
      }
    }

    BOOL v19 = (_WORD *)(v8 + 24);
    if (*(_DWORD *)(a1 + 544) == 2)
    {
      int v28 = 1;
LABEL_30:
      if (*v19 != 0x4000) {
        sub_10007398C(a1, (unsigned __int16)v9, v8, v11, v12, a2, (int *)&v29 + 1, a3, a4);
      }
      goto LABEL_32;
    }

    uint64_t v20 = *(void *)v8 >> 63;
    int v28 = v20;
LABEL_29:
    if (!(_DWORD)v20) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }

  uint64_t v14 = sub_100062FAC(*(void *)(*(void *)(a1 + 9328) + 8LL * (~v13 + v10)), 0);
  uint64_t v15 = *(void *)v8 & 0x3FFFFFFLL;
  if ((*(__int16 *)(v14 + 4 * v15) & 0x80000000) == 0)
  {
    if (++v6 == v5) {
      goto LABEL_33;
    }
    goto LABEL_8;
  }

  unsigned int v9 = *(unsigned __int16 *)(v14 + 4 * v15 + 2);
  sub_1000265B8(*(void *)(a1 + 8 * ((*(void *)v8 >> 53) & 0x3FFLL) + 680));
  if (!*(_DWORD *)(a1 + 9284)
    || (_DWORD)v12 == -1
    || (unsigned int v18 = sub_10009D1B4(*(void *)(a1 + 9000), v12), sub_1000BBCE0(v25, v18, v9)))
  {
    BOOL v19 = (_WORD *)(v8 + 24);
    LODWORD(v20) = v28;
    goto LABEL_29;
  }

void *sub_10007398C( uint64_t a1, unsigned int a2, uint64_t a3, int a4, unint64_t a5, _DWORD *a6, int *a7, int a8, int a9)
{
  unsigned int v50 = 0;
  int v14 = *a7;
  __int16 v49 = 0;
  uint64_t v15 = (unsigned int **)(a1 + 680);
  int v16 = (uint64_t *)sub_10002BA84(a1 + 680, *(_DWORD *)(a1 + 8872));
  int v24 = (_DWORD *)sub_1000CAF58(1096LL, v17, v18, v19, v20, v21, v22, v23);
  bzero(v24, 0x448uLL);
  v24[3] = 1;
  *(_OWORD *)(v24 + 66) = 0u;
  *(_OWORD *)(v24 + 70) = 0u;
  *(_OWORD *)(v24 + 74) = 0u;
  *(_OWORD *)((char *)v24 + 307) = 0u;
  if (a9) {
    uint64_t v25 = (uint64_t)(v24 + 66);
  }
  else {
    uint64_t v25 = 0LL;
  }
  if (*(int *)(a1 + 8872) >= 1 && sub_100025C94(*v15) == 3)
  {
    int v26 = *(unsigned __int16 *)(a3 + 32);
    int v27 = *(_DWORD *)(a1 + 620);
    if (v27 >= v26)
    {
      unint64_t v29 = *(void *)a3 & 0x7FFFFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v48 = 0LL;
      BOOL v47 = 0;
      uint64_t v28 = *(unsigned int *)(*(void *)(a1 + 9344) + 4LL * (~v27 + v26));
      unsigned int v50 = (*(void *)a3 >> 53) & 0x3FF;
      sub_100033BD8(v16, v28, a2, (unsigned int *)&v48 + 1, (int *)&v48, &v47);
      unint64_t v29 = ((unint64_t)v50 << 53) + (v28 << 35) + ((uint64_t)SHIDWORD(v48) << 10);
    }

    v24[6] = sub_10009C670(*(unsigned int **)(a1 + 9000), a5, a2, v29, 0, 0, *(_WORD *)(a1 + 9200));
    char v38 = 1;
    goto LABEL_18;
  }

  int v30 = sub_10009CEDC( *(void *)(a1 + 9000),  a5,  (uint64_t)(v24 + 7),  (uint64_t)(v24 + 96),  (uint64_t)v24 + 323,  (uint64_t)(v24 + 214),  (__int16 *)v24 + 73,  v25,  59,  &v50);
  v24[2] = v30;
  if (v30 <= 58)
  {
    LODWORD(v36) = v30;
    if (v16)
    {
      if (v30 >= 1)
      {
        uint64_t v37 = 0LL;
        do
        {
          v24[v37 + 155] = sub_1000315D4( (uint64_t)v16,  v24[v37 + 96],  v24[v37 + 214],  v31,  v32,  v33,  v34,  v35);
          ++v37;
          uint64_t v36 = (int)v24[2];
        }

        while (v37 < v36);
      }
    }

    else
    {
      bzero(v24 + 155, 4 * v30);
    }

    char v38 = 0;
    *((_WORD *)v24 + (int)v36 + 14) = a2;
    v24[v24[2] + 96] = (*(void *)a3 >> 35) & 0x3FFFF;
    *((_BYTE *)v24 + v24[2] + 323) = (*(void *)a3 & 0x3FFLL) == 0;
    *((_WORD *)v24 + v24[2]++ + 73) = *(_WORD *)(a1 + 9200) - 1;
LABEL_18:
    uint64_t v39 = (*(void *)a3 >> 53) & 0x3FFLL;
    unsigned int v50 = (*(void *)a3 >> 53) & 0x3FF;
    *((void *)v24 + 2) = *(void *)(a1 + 8 * v39 + 680);
    *int v24 = *(_DWORD *)(a1 + 9076) + a4;
    *((_WORD *)v24 + 2) = 0;
    unsigned int v40 = *(_DWORD *)(a1 + 544);
    if ((v40 > 0xB || ((1 << v40) & 0x828) == 0) && *(__int16 *)(a1 + 456) != -1)
    {
      __int16 v49 = sub_1000BB868(*(void *)(a1 + 376), a2, 0LL);
      *v24 += sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v49, 1u, *(unsigned __int16 *)(a1 + 456));
    }

    if ((v38 & 1) != 0)
    {
      if (v14 >= 1)
      {
        int v41 = 0;
        while ((sub_1000243EC(v24, a6) & 0x80000000) == 0)
        {
          a6 += 274;
          if (v14 == ++v41) {
            goto LABEL_30;
          }
        }

        goto LABEL_31;
      }
    }

    else if (v14 >= 1)
    {
      int v41 = 0;
      while ((sub_10002426C(v24, a6) & 0x80000000) == 0)
      {
        a6 += 274;
        if (v14 == ++v41)
        {
LABEL_30:
          int v41 = v14;
          break;
        }
      }

uint64_t sub_100073D60(uint64_t a1, __int16 *a2, uint64_t a3)
{
  unsigned int v6 = (_WORD *)(a1 + 8946);
  int v7 = *(unsigned __int16 *)(a3 + 34);
  int v8 = *(unsigned __int16 *)(a1 + 8946);
  uint64_t result = sub_100015BAC(*(void *)(a1 + 384), v7);
  int v10 = (unsigned __int16 *)result;
  if (v7 == v8)
  {
    int v11 = *a2;
    int v12 = *(__int16 *)(a3 + 24);
    if (v11 < v12)
    {
      *(_WORD *)(a3 + 24) = *a2;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 1);
      *(_WORD *)(a3 + 28) = a2[4];
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 3);
      int v12 = v11;
    }

    if (v12 > (__int16)v6[58])
    {
      *(_WORD *)(a3 + 36) = 0x4000;
      *(_WORD *)(a3 + 24) = 0x4000;
      return result;
    }

    uint64_t v17 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v17);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v17);
      LOWORD(v12) = *(_WORD *)(a3 + 24);
    }

    __int16 v18 = result - v6[56] + v12;
    *(_WORD *)(a3 + 24) = v18;
    *(_DWORD *)(a3 + 8) += (__int16)result;
    *(_WORD *)(a3 + 36) = v18;
    if (v18 < (__int16)v6[51])
    {
      v6[51] = v18;
LABEL_28:
      v6[53] = *(_WORD *)(a3 + 32);
      v6[119] = *(_WORD *)(a3 + 34);
      return result;
    }

    return result;
  }

  int v13 = *(__int16 *)(a3 + 24);
  int v14 = *(__int16 *)(a3 + 26);
  if (v13 < v14)
  {
    *(_WORD *)(a3 + 26) = *(_WORD *)(a3 + 24);
    *(_DWORD *)(a3 + 20) = *(_DWORD *)(a3 + 16);
    *(_WORD *)(a3 + 30) = *(_WORD *)(a3 + 28);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a3 + 8);
    int v14 = v13;
  }

  if (v14 > (__int16)v6[58])
  {
    __int16 v15 = 0x4000;
    *(_WORD *)(a3 + 36) = 0x4000;
    *(_WORD *)(a3 + 26) = 0x4000;
    int v16 = *a2;
LABEL_19:
    *(_WORD *)(a3 + 24) = v16;
    *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 1);
    *(_WORD *)(a3 + 28) = a2[4];
    *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 3);
    LOWORD(v13) = v16;
    goto LABEL_20;
  }

  uint64_t v19 = *(unsigned __int16 *)(result + 2);
  uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v19);
  if ((_DWORD)result == 0x4000)
  {
    uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v19);
    LOWORD(v14) = *(_WORD *)(a3 + 26);
    LOWORD(v13) = *(_WORD *)(a3 + 24);
  }

  __int16 v15 = result - v6[56] + v14;
  *(_WORD *)(a3 + 26) = v15;
  *(_DWORD *)(a3 + 12) += (__int16)result;
  *(_WORD *)(a3 + 36) = v15;
  int v16 = *a2;
LABEL_20:
  if ((__int16)v6[58] >= (__int16)v13)
  {
    uint64_t v20 = *v10;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v20);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v20);
      LOWORD(v13) = *(_WORD *)(a3 + 24);
      __int16 v15 = *(_WORD *)(a3 + 36);
    }

    __int16 v21 = result - v6[56] + v13;
    *(_WORD *)(a3 + 24) = v21;
    *(_DWORD *)(a3 + 8) += (__int16)result;
    if (v21 < v15)
    {
      *(_WORD *)(a3 + 36) = v21;
      __int16 v15 = v21;
    }
  }

  else
  {
    *(_WORD *)(a3 + 24) = 0x4000;
  }

  if ((__int16)v6[51] > v15)
  {
    v6[51] = v15;
    goto LABEL_28;
  }

  return result;
}

uint64_t sub_100073FDC(uint64_t a1, _DWORD *a2, int *a3, int a4, uint64_t *a5)
{
  int v8 = (unsigned __int16 *)(a1 + 8946);
  int v109 = 0;
  uint64_t v107 = 0LL;
  uint64_t v108 = 0LL;
  uint64_t v106 = 0LL;
  __int128 v104 = 0u;
  __int128 v105 = 0u;
  __int128 v103 = 0u;
  BYTE6(v105) = -1;
  uint64_t v9 = *(int *)(a1 + 568) - 1LL;
  *((_WORD *)&v104 + v9 + 4) = 0x4000;
  *((_DWORD *)&v104 + v9) = -1;
  unint64_t v10 = *a2;
  uint64_t v11 = *(void *)(a1 + 9024);
  uint64_t v12 = *(void *)(v11 + ((v10 >> 5) & 0x7FFFFF8));
  unsigned int v13 = *a2;
  int v14 = (__int128 *)(v12 + 48LL * *a2);
  int v102 = *a3;
  unsigned int v98 = *a3;
  uint64_t v99 = *(void *)(v11 + (((unint64_t)*a3 >> 5) & 0x7FFFFF8));
  uint64_t v15 = v99 + 48LL * *a3;
  sub_10009B1B8(*(void *)(a1 + 9256), *((unsigned __int16 *)v14 + 16), 0LL, &v106, &v109);
  if (*((unsigned __int16 *)v14 + 16) == a4 && ((*(void *)v14 ^ *a5) & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    if (*(_BYTE *)(v12 + 48LL * v13 + 38))
    {
      if ((int)v10 - 2 <= v102)
      {
        *(_DWORD *)(a1 + 552) = 3;
        return 1LL;
      }

      unsigned int v20 = v98;
      uint64_t v19 = v99;
      uint64_t v24 = v99 + 48LL * v98;
      *(_DWORD *)(v24 + 24) = 1073758208;
      *(_WORD *)(v24 + 32) = a4;
      *(_BYTE *)(v24 + 38) = 0;
      __int16 v25 = *v106;
      *(_WORD *)(v24 + 34) = *v106;
      uint64_t v26 = *a5;
      *(void *)uint64_t v15 = *a5;
      LOWORD(v107) = *((_WORD *)a5 + 8);
      HIDWORD(v107) = *((_DWORD *)a5 + 2);
      LOWORD(v108) = v8[127];
      HIDWORD(v108) = 0;
      LOWORD(v105) = a4;
      WORD1(v105) = v25;
      *(void *)&__int128 v103 = v26;
      ++*a3;
      unsigned int v97 = 1;
      uint64_t v18 = (uint64_t)v14;
      int v14 = &v103;
      uint64_t v27 = v99 + 48LL * v98;
      int v28 = *(unsigned __int16 *)(v27 + 34);
      uint64_t v22 = (unsigned __int16 *)(v27 + 34);
      if (v28) {
        goto LABEL_4;
      }
    }

    else
    {
      LOWORD(v107) = *((_WORD *)a5 + 8);
      HIDWORD(v107) = *((_DWORD *)a5 + 2);
      LOWORD(v108) = v8[127];
      HIDWORD(v108) = 0;
      __int128 v29 = *v14;
      __int128 v30 = v14[2];
      *(_OWORD *)(v15 + 16) = v14[1];
      *(_OWORD *)(v15 + 32) = v30;
      *(_OWORD *)uint64_t v15 = v29;
      LODWORD(v10) = v10 + 1;
      uint64_t v18 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v10 >> 8)) + 48LL * v10;
      unsigned int v97 = 1;
      unsigned int v20 = v98;
      uint64_t v19 = v99;
      uint64_t v31 = v99 + 48LL * v98;
      int v32 = *(unsigned __int16 *)(v31 + 34);
      uint64_t v22 = (unsigned __int16 *)(v31 + 34);
      if (v32) {
        goto LABEL_4;
      }
    }
  }

  else
  {
    unsigned int v97 = 0;
    __int128 v16 = v14[2];
    __int128 v17 = *v14;
    *(_OWORD *)(v15 + 16) = v14[1];
    *(_OWORD *)(v15 + 32) = v16;
    *(_OWORD *)uint64_t v15 = v17;
    LOWORD(v107) = 0x4000;
    HIDWORD(v107) = -1;
    LOWORD(v108) = -1;
    HIDWORD(v108) = 0;
    LODWORD(v10) = v10 + 1;
    uint64_t v18 = *(void *)(*(void *)(a1 + 9024) + 8LL * (v10 >> 8)) + 48LL * v10;
    unsigned int v20 = v98;
    uint64_t v19 = v99;
    uint64_t v21 = v99 + 48LL * v98;
    int v23 = *(unsigned __int16 *)(v21 + 34);
    uint64_t v22 = (unsigned __int16 *)(v21 + 34);
    if (v23)
    {
LABEL_4:
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(a1 + 9416))(a1, &v107, v15);
      goto LABEL_18;
    }
  }

  uint64_t v33 = (unsigned __int16 *)sub_100015BAC(*(void *)(a1 + 384), 0);
  int v34 = (__int16)v107;
  uint64_t v35 = v19 + 48LL * v20;
  int v38 = *(__int16 *)(v35 + 24);
  uint64_t v37 = (signed __int16 *)(v35 + 24);
  int v36 = v38;
  if ((__int16)v107 < v38)
  {
    *uint64_t v37 = v107;
    uint64_t v39 = v19 + 48LL * v20;
    *(_DWORD *)(v39 + 16) = HIDWORD(v107);
    *(_WORD *)(v39 + 28) = v108;
    *(_DWORD *)(v39 + 8) = HIDWORD(v108);
    int v36 = v34;
  }

  if (v36 <= (__int16)v8[58])
  {
    uint64_t v40 = *v33;
    int v41 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v40);
    if (v41 == 0x4000)
    {
      LOWORD(v41) = sub_100015BC0(*(void *)(a1 + 384), v40);
      LOWORD(v36) = *v37;
    }

    signed __int16 v42 = v41 - v8[56] + v36;
    *uint64_t v37 = v42;
    uint64_t v43 = v19 + 48LL * v20;
    *(_DWORD *)(v43 + 8) += (__int16)v41;
    *(_WORD *)(v43 + 36) = v42;
    if (v42 < (__int16)v8[51])
    {
      v8[51] = v42;
      v8[53] = *(_WORD *)(v19 + 48LL * v20 + 32);
      v8[119] = *v22;
    }
  }

  else
  {
    *(_WORD *)(v19 + 48LL * v20 + 36) = 0x4000;
    *uint64_t v37 = 0x4000;
  }

LABEL_53:
    int v69 = v109;
    if (v109 > v50)
    {
      uint64_t v70 = *(int *)(a1 + 568) - 1LL;
      int v71 = (char *)v52 + 2 * v70;
      LOWORD(v107) = *((_WORD *)v71 + 12);
      uint64_t v72 = (char *)v52 + 4 * v70;
      HIDWORD(v107) = *((_DWORD *)v72 + 4);
      LOWORD(v108) = *((_WORD *)v71 + 14);
      HIDWORD(v108) = *((_DWORD *)v72 + 2);
    }

      *a4 = *(_DWORD *)(v4 + 668) + (_DWORD)v10;
    }
  }

  return result;
}

            __int128 v56 = 0;
            if (v57 != 1) {
              goto LABEL_28;
            }
            do
            {
              while (1)
              {
LABEL_56:
                while (v56)
                {
                  --v56;
                  signed __int16 v92 = *v55++;
                  if (v92 >= v59) {
                    goto LABEL_22;
                  }
                }

                int v94 = *v54++;
                uint64_t v93 = v94;
                if (*(_BYTE *)(v44 + v94) != 2) {
                  break;
                }
                signed __int16 v95 = *(void *)(v10 + 104);
                uint64_t v96 = *(unsigned __int16 *)(v95 + 2 * v93);
                __int128 v56 = *(unsigned __int16 *)(v95 + 2 * v93 + 2) + ~(_DWORD)v96;
                unsigned int v97 = (unsigned __int8 *)(*(void *)(v10 + 88) + v96);
                unsigned int v98 = *v97;
                unsigned int v55 = v97 + 1;
                if (v98 >= v59) {
                  goto LABEL_22;
                }
              }

              __int128 v56 = 0;
            }

            while ((int)v93 < v59);
LABEL_22:
            ;
          }

          while (v53++ != HIDWORD(v171) - 2);
          LODWORD(v166) = 0;
          uint64_t v164 = v54;
LABEL_63:
          int v52 = 2;
LABEL_18:
          sub_10008BD18(v10, (uint64_t)&v164, v52);
          ++v43;
          sub_10008B8C0(v10, &v164, (uint64_t)v15, v38, &v168);
          sub_10008BC84(v10, (uint64_t)&v164, v23);
          if (v43 == v42) {
            goto LABEL_9;
          }
        }
      }

      do
      {
        sub_10008BD18(v10, (uint64_t)&v164, 1u);
        sub_10008B8C0(v10, &v164, (uint64_t)v15, v38, &v168);
        sub_10008BC84(v10, (uint64_t)&v164, v23);
        --v42;
      }

      while (v42);
    }

  int v44 = *(void *)(a1 + 176);
  if (!v44)
  {
    int v50 = *(unsigned __int16 *)(a1 + 168);
    if (v64 >= v50 && v64 <= *(unsigned __int16 *)(a1 + 170))
    {
      int v51 = *(unsigned __int16 *)(*(void *)(a1 + 192) + 2 * (v64 - v50));
      *__int128 v30 = v51;
      v30 += v51 != 0;
      if (!*(_WORD *)v10) {
        goto LABEL_92;
      }
LABEL_77:
      while (1)
      {
        int v62 = 0;
        uint64_t v53 = sub_1000CDC84(v10, &v62);
        if (!v62) {
          break;
        }
        uint64_t v54 = *(unsigned __int16 *)(a1 + 168);
        unsigned int v55 = *(void *)(a1 + 176);
        if (!v55)
        {
          int v52 = *(unsigned __int16 *)(*(void *)(a1 + 192) + 2 * (v62 - v54));
          *__int128 v30 = v52;
          v30 += v52 != 0;
          break;
        }

        __int128 v56 = *(int *)(a1 + 172);
        if (!(_DWORD)v56) {
          break;
        }
        __int128 v57 = 0;
        while (1)
        {
          while (1)
          {
            uint64_t v58 = v56 - 1;
            if (v56 - 1 < 0) {
              uint64_t v58 = v56;
            }
            int v59 = v58 >> 1;
            int v60 = v57 + v59;
            uint64_t v61 = *(unsigned __int16 *)(v55 + 2LL * (v57 + (int)v59));
            if (v61 <= v62) {
              break;
            }
            __int128 v56 = (int)v59;
            if (!(_DWORD)v59) {
              goto LABEL_75;
            }
          }

          if (v61 == v62) {
            break;
          }
          v56 -= (int)v59 + 1;
          __int128 v57 = v60 + 1;
          if (!v56) {
            goto LABEL_75;
          }
        }

        if (v60 == -1) {
          break;
        }
        *v30++ = *(_WORD *)(*(void *)(a1 + 192) + 2LL * v60);
        v10 += 2 * v53;
        if (!*(_WORD *)v10) {
          goto LABEL_92;
        }
      }

  uint64_t v31 = v27 != 0;
LABEL_54:
  *(_DWORD *)(a1 + 652) = v31;
  sub_10009C5F8(*(void *)(a1 + 688), v31, 0);
  if (a7 != 1)
  {
    if (!qword_1000FDCC0)
    {
      int v34 = 0;
      int v32 = 0;
      uint64_t v35 = 0;
      uint64_t v33 = *(_DWORD *)(a1 + 432);
      goto LABEL_61;
    }

    int v32 = *(_DWORD *)(qword_1000FDCC0 + 1592);
    uint64_t v33 = *(_DWORD *)(a1 + 432);
    goto LABEL_59;
  }

  int v32 = 1000000;
  uint64_t v33 = *(_DWORD *)(a1 + 432);
  if (qword_1000FDCC0)
  {
LABEL_59:
    int v34 = *(_DWORD *)(qword_1000FDCC0 + 1600);
    uint64_t v35 = *(_DWORD *)(qword_1000FDCC0 + 1440);
    goto LABEL_61;
  }

  int v34 = 0;
  uint64_t v35 = 0;
LABEL_61:
  sub_1000B2560(a1 + 760, v33, v34, v32, v35, 0);
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 4464)) {
      sub_10009ABAC(*(void *)(a1 + 840));
    }
  }

  *(_DWORD *)(a1 + 756) = 0;
  *(_DWORD *)(a1 + 612) = sub_1000B3298(*(void *)(a1 + 376));
  *(_DWORD *)(a1 + 604) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_DWORD *)(a1 + 856) = sub_1000B323C(*(void *)(a1 + 376));
  *(void *)(a1 + 880) = sub_10009E7D8;
  *(void *)(a1 + 888) = sub_10009E89C;
  return 1LL;
}

  *(_DWORD *)(v3 + 44) = 1;
  if (*((void *)a1 + 2))
  {
    uint64_t v39 = a1[6];
    uint64_t v40 = a1[9];
    int v41 = a1[10];
    signed __int16 v42 = (char *)sub_1000C1074(4 * v41);
    *(void *)(v3 + 16) = v42;
    if (!v42)
    {
      if (!*(_DWORD *)(v3 + 44))
      {
LABEL_61:
        sub_1000C0EF8(v3);
        return 0LL;
      }

      sub_1000C0EF8(*(void *)(v3 + 48));
      sub_1000C0EF8(*(void *)(v3 + 8));
      uint64_t v35 = *(void *)(v3 + 16);
LABEL_60:
      sub_1000C0EF8(v35);
      goto LABEL_61;
    }

    uint64_t v43 = v42;
    int v44 = v39 - v40;
    uint64_t v45 = (const void *)(*((void *)a1 + 2) + 4LL * a1[9]);
    if ((int)v41 <= v44)
    {
      memcpy(v42, v45, 4 * v41);
    }

    else
    {
      memcpy(v42, v45, 4LL * v44);
      memcpy(&v43[4 * v44], *((const void **)a1 + 2), 4LL * ((int)v41 - v44));
    }
  }

  else
  {
    *(void *)(v3 + 16) = 0LL;
  }

  return v3;
}

    uint64_t result = 0LL;
    *a3 = 0LL;
    return result;
  }

  uint64_t v3 = *a3;
  if (!*a3) {
    return 0LL;
  }
  if (a2)
  {
    uint64_t v19 = *a3;
    do
    {
      if (!*(_WORD *)v19) {
        break;
      }
      unsigned int v20 = (unsigned __int16)*a2;
      if (!*a2) {
        break;
      }
      uint64_t v21 = a2 + 1;
      do
      {
        uint64_t v22 = v20;
        int v23 = *(unsigned __int16 *)v19;
        v19 += 2 * (v23 == v20);
        uint64_t v24 = *v21++;
        unsigned int v20 = v24;
        if (v24) {
          __int16 v25 = v23 == v22;
        }
        else {
          __int16 v25 = 1;
        }
      }

      while (!v25);
    }

    while (v23 == v22);
    uint64_t v26 = v19 - v3;
    uint64_t result = &v3[v26 << 31 >> 31];
    uint64_t v27 = *(unsigned __int16 *)result;
    if (!*(_WORD *)result) {
      goto LABEL_53;
    }
    if (*a2)
    {
      int v14 = &v3[v26 << 31 >> 31];
LABEL_36:
      int v28 = a2 + 1;
      __int128 v29 = (unsigned __int16)*a2;
      while (v27 != v29)
      {
        __int128 v30 = *v28++;
        __int128 v29 = v30;
        if (!v30)
        {
          uint64_t v31 = *((unsigned __int16 *)v14 + 1);
          v14 += 2;
          uint64_t v27 = v31;
          if (v31) {
            goto LABEL_36;
          }
          goto LABEL_59;
        }
      }

      if (!v27) {
        goto LABEL_59;
      }
LABEL_55:
      *a3 = v14 + 2;
      int v36 = v14 - result;
      return result;
    }

    uint64_t v37 = &v3[2 * (int)(v26 >> 1) + 2];
    do
    {
      int v38 = *(unsigned __int16 *)v37;
      v37 += 2;
    }

    while (v38);
LABEL_59:
    uint64_t v3 = result;
  }

  else if (!*(_WORD *)v3)
  {
    goto LABEL_53;
  }

  *a3 = 0LL;
  int v34 = v3 - 2;
  do
  {
    uint64_t v39 = *((unsigned __int16 *)v34 + 1);
    v34 += 2;
  }

  while (v39);
LABEL_62:
  uint64_t result = v3;
  int v36 = v34 - v3;
  if ((int)(v36 >> 1) >= 1) {
LABEL_63:
  }
    *(_WORD *)&result[v36 & 0x1FFFFFFFELL] = 0;
  return result;
}

    uint64_t result = 0LL;
    *a3 = 0LL;
    *a4 = 0;
    return result;
  }

  int v4 = *a3;
  if (!*a3)
  {
    uint64_t result = 0LL;
    *a4 = 0;
    return result;
  }

  if (!a2)
  {
    if (!*(_WORD *)v4) {
      goto LABEL_53;
    }
LABEL_59:
    int v36 = 0LL;
    *a3 = 0LL;
    goto LABEL_61;
  }

  unsigned int v20 = *a3;
  do
  {
    if (!*(_WORD *)v20) {
      break;
    }
    uint64_t v21 = (unsigned __int16)*a2;
    if (!*a2) {
      break;
    }
    uint64_t v22 = a2 + 1;
    do
    {
      int v23 = v21;
      uint64_t v24 = *(unsigned __int16 *)v20;
      v20 += 2 * (v24 == v21);
      __int16 v25 = *v22++;
      uint64_t v21 = v25;
      if (v25) {
        uint64_t v26 = v24 == v23;
      }
      else {
        uint64_t v26 = 1;
      }
    }

    while (!v26);
  }

  while (v24 == v23);
  uint64_t v27 = v20 - v4;
  uint64_t result = &v4[(v20 - v4) << 31 >> 31];
  int v28 = *(unsigned __int16 *)result;
  if (!*(_WORD *)result) {
    goto LABEL_53;
  }
  if (!*a2)
  {
    int v38 = &v4[2 * (int)(v27 >> 1) + 2];
    do
    {
      uint64_t v39 = *(unsigned __int16 *)v38;
      v38 += 2;
    }

    while (v39);
LABEL_58:
    int v4 = result;
    goto LABEL_59;
  }

  __int128 v29 = result;
LABEL_36:
  __int128 v30 = a2 + 1;
  uint64_t v31 = (unsigned __int16)*a2;
  while (v28 != v31)
  {
    int v32 = *v30++;
    uint64_t v31 = v32;
    if (!v32)
    {
      uint64_t v33 = *((unsigned __int16 *)v29 + 1);
      v29 += 2;
      int v28 = v33;
      if (v33) {
        goto LABEL_36;
      }
      goto LABEL_58;
    }
  }

  if (!v28) {
    goto LABEL_58;
  }
  *a3 = v29 + 2;
  *a4 = (unint64_t)(v29 - result) >> 1;
  return result;
}

      if (v4 < 0x100)
      {
        unsigned int v13 = sub_1000BF054(v4);
      }

      else
      {
        if (v4 < 0x180)
        {
          uint64_t v12 = 2;
        }

        else
        {
          if (v4 < 0x400)
          {
            uint64_t v12 = 3;
          }

          else if (v4 < 0x500)
          {
            uint64_t v12 = 4;
          }

          else
          {
            uint64_t v11 = v4 >> 4;
            if (v4 >> 4 < 0x207)
            {
              uint64_t v12 = 5;
            }

            else
            {
              if (v11 < 0x20D)
              {
                uint64_t v12 = 6;
              }

              else
              {
                if (v4 >> 6 < 0xC1)
                {
                  uint64_t v12 = 7;
                }

                else if (v4 >> 5 < 0x185)
                {
                  uint64_t v12 = 8;
                }

                else if (v4 >> 8 < 0x31)
                {
                  uint64_t v12 = 9;
                }

                else
                {
                  if (v4 >> 6 < 0x27F)
                  {
                    uint64_t v12 = 10;
                  }

                  else
                  {
                    if (v11 < 0xD7B)
                    {
                      uint64_t v12 = 11;
                    }

                    else
                    {
                      uint64_t v12 = 12;
                    }
                  }
                }
              }
            }
          }
        }

        if (((0xFE3uLL >> v12) & 1) != 0
          || !(*(unsigned int (**)(uint64_t))&dword_1000FA138[14 * v12 + 6])(v4))
        {
          goto LABEL_5;
        }

        if (v4 < 0x180)
        {
          uint64_t v15 = 2;
        }

        else if (v4 < 0x400)
        {
          uint64_t v15 = 3;
        }

        else if (v4 < 0x500)
        {
          uint64_t v15 = 4;
        }

        else
        {
          int v14 = v4 >> 4;
          if (v4 >> 4 < 0x207)
          {
            uint64_t v15 = 5;
          }

          else
          {
            if (v14 < 0x20D)
            {
              uint64_t v15 = 6;
            }

            else
            {
              if (v4 >> 6 < 0xC1)
              {
                uint64_t v15 = 7;
              }

              else if (v4 >> 5 < 0x185)
              {
                uint64_t v15 = 8;
              }

              else if (v4 >> 8 < 0x31)
              {
                uint64_t v15 = 9;
              }

              else
              {
                if (v4 >> 6 < 0x27F)
                {
                  uint64_t v15 = 10;
                }

                else
                {
                  if (v14 < 0xD7B)
                  {
                    uint64_t v15 = 11;
                  }

                  else
                  {
                    uint64_t v15 = 12;
                  }
                }
              }
            }
          }
        }

        if (((0xFE3uLL >> v15) & 1) != 0) {
          goto LABEL_5;
        }
        unsigned int v13 = (*(uint64_t (**)(uint64_t))&dword_1000FA138[14 * v15 + 8])(v4);
      }

      LODWORD(v4) = v13;
LABEL_5:
      ++v2;
      if ((_DWORD)v5 != (_DWORD)v4)
      {
        else {
          return 1LL;
        }
      }
    }
  }

  __int128 v16 = a2 == 0LL;
LABEL_133:
  if (v16) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

            unsigned int v13 = v31;
            a3[v30] = v28;
            if (!--v26) {
              goto LABEL_54;
            }
          }
        }

        a3[v13] = 94;
        uint64_t v31 = v13 + 2;
        if (v13 + 2 >= v25) {
          goto LABEL_58;
        }
        goto LABEL_53;
      }

      return 1LL;
    }

    return 0LL;
  }

  unsigned int v13 = 0;
  int v14 = (v12 + 1);
  while (1)
  {
    while (1)
    {
      uint64_t v18 = *v7++;
      __int128 v17 = v18;
      if (!v18)
      {
        a3[v13] = 0;
        if (!a2) {
          return 1LL;
        }
        goto LABEL_27;
      }

      __int128 v16 = v13 + 1;
      if (v13 + 1 >= a4) {
        goto LABEL_55;
      }
      if ((v17 - 94) < 2)
      {
LABEL_14:
        a3[v13] = 94;
        uint64_t v15 = v13 + 2;
        ++v13;
        __int128 v16 = v15;
        if (v15 >= a4) {
          goto LABEL_55;
        }
        goto LABEL_15;
      }

      if (v17 != 32) {
        break;
      }
      a3[v13++] = 95;
      if (!--v14) {
        goto LABEL_26;
      }
    }

    if (v17 == 92) {
      goto LABEL_14;
    }
    if (v16 >= a4) {
      break;
    }
LABEL_15:
    a3[v13] = v17;
    unsigned int v13 = v16;
    if (!--v14) {
      goto LABEL_26;
    }
  }

uint64_t sub_100074AC8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(void *)result)
    {
      (*(void (**)(uint64_t))(result + 8))(result);
      return sub_1000C0EF8(v1);
    }
  }

  return result;
}

uint64_t sub_100074B0C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return sub_100074B14(result, a2, a3, a4);
}

uint64_t sub_100074B14(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (!result) {
    return result;
  }
  int v4 = *(_DWORD *)(result + 108);
  LODWORD(v5) = v4 - 1;
  else {
    uint64_t v5 = a3;
  }
  BOOL v6 = __OFSUB__(a3, v4);
  int v7 = a3 - v4;
  if (v7 < 0 != v6) {
    int v8 = 0;
  }
  else {
    int v8 = v7 + 1;
  }
  if ((int)v5 <= 0)
  {
LABEL_37:
    uint64_t v22 = result + 176;
    if (a4 < 0xFFFB) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }

  uint64_t v9 = 94LL;
  uint64_t v10 = a2 + 2LL * v8;
  while (1)
  {
    unint64_t v13 = *(unsigned __int16 *)(v10 + 2LL * (v5 + v9 - 95));
    if (v13 >= 0xFFFB) {
      break;
    }
    int64_t v14 = *(int *)(result + 148);
    if ((uint64_t)v13 < v14)
    {
      uint64_t v15 = *(void *)(result + 128);
      if (v15)
      {
        unsigned int v11 = *(unsigned __int16 *)(v15 + 2 * v13);
        *(_WORD *)(result + 2 * v9) = v11;
        int v12 = *(unsigned __int16 *)(result + 112);
        if (!*(_WORD *)(result + 112)) {
          goto LABEL_12;
        }
      }

      else
      {
        unsigned int v11 = v13 + *(unsigned __int16 *)(result + 144);
        *(_WORD *)(result + 2 * v9) = v11;
        int v12 = *(unsigned __int16 *)(result + 112);
        if (!*(_WORD *)(result + 112)) {
          goto LABEL_12;
        }
      }

      goto LABEL_11;
    }

    unsigned int v11 = v13 - v14 + *(_DWORD *)(result + 152) + 1;
    *(_WORD *)(result + 2 * v9) = v11;
    int v12 = *(unsigned __int16 *)(result + 112);
    if (*(_WORD *)(result + 112)) {
      goto LABEL_11;
    }
LABEL_12:
    --v9;
  }

  if ((_DWORD)v13 == 65531)
  {
    unsigned int v11 = *(unsigned __int16 *)(result + 114);
    *(_WORD *)(result + 2 * v9) = v11;
    int v12 = *(unsigned __int16 *)(result + 112);
    if (!*(_WORD *)(result + 112)) {
      goto LABEL_12;
    }
  }

  else if ((_DWORD)v13 == 65532 || (_DWORD)v13 == 65533)
  {
    unsigned int v11 = *(unsigned __int16 *)(result + 112);
    *(_WORD *)(result + 2 * v9) = v11;
    int v12 = *(unsigned __int16 *)(result + 112);
    if (!*(_WORD *)(result + 112)) {
      goto LABEL_12;
    }
  }

  else
  {
    unsigned int v11 = 0;
    *(_WORD *)(result + 2 * v9) = 0;
    int v12 = *(unsigned __int16 *)(result + 112);
    if (!*(_WORD *)(result + 112)) {
      goto LABEL_12;
    }
  }

uint64_t sub_100074D50(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return sub_100074B14(result, a2, a3, a4);
}

uint64_t sub_100074D58( uint64_t a1, signed int a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, int a6, _WORD *a7)
{
  uint64_t v9 = a4;
  int v11 = *(_DWORD *)(a1 + 108);
  if (a2 >= v11) {
    int v12 = a2 - v11 + 1;
  }
  else {
    int v12 = 0;
  }
  if (v11 <= a2) {
    uint64_t v13 = (v11 - 1);
  }
  else {
    uint64_t v13 = a2;
  }
  if ((int)v13 <= 0)
  {
LABEL_35:
    uint64_t v27 = a1 + 176;
    goto LABEL_36;
  }

  uint64_t v14 = 94LL;
  uint64_t v15 = a3 + 2LL * v12;
  while (1)
  {
    unint64_t v18 = *(unsigned __int16 *)(v15 + 2LL * (v13 + v14 - 95));
    if (v18 >= 0xFFFB) {
      break;
    }
    int64_t v19 = *(int *)(a1 + 148);
    if ((uint64_t)v18 < v19)
    {
      uint64_t v20 = *(void *)(a1 + 128);
      if (v20)
      {
        unsigned int v16 = *(unsigned __int16 *)(v20 + 2 * v18);
        *(_WORD *)(a1 + 2 * v14) = v16;
        int v17 = *(unsigned __int16 *)(a1 + 112);
        if (!*(_WORD *)(a1 + 112)) {
          goto LABEL_11;
        }
      }

      else
      {
        unsigned int v16 = v18 + *(unsigned __int16 *)(a1 + 144);
        *(_WORD *)(a1 + 2 * v14) = v16;
        int v17 = *(unsigned __int16 *)(a1 + 112);
        if (!*(_WORD *)(a1 + 112)) {
          goto LABEL_11;
        }
      }

      goto LABEL_10;
    }

    unsigned int v16 = v18 - v19 + *(_DWORD *)(a1 + 152) + 1;
    *(_WORD *)(a1 + 2 * v14) = v16;
    int v17 = *(unsigned __int16 *)(a1 + 112);
    if (*(_WORD *)(a1 + 112)) {
      goto LABEL_10;
    }
LABEL_11:
    --v14;
  }

  if ((_DWORD)v18 == 65531)
  {
    unsigned int v16 = *(unsigned __int16 *)(a1 + 114);
    *(_WORD *)(a1 + 2 * v14) = v16;
    int v17 = *(unsigned __int16 *)(a1 + 112);
    if (!*(_WORD *)(a1 + 112)) {
      goto LABEL_11;
    }
  }

  else if ((_DWORD)v18 == 65532 || (_DWORD)v18 == 65533)
  {
    unsigned int v16 = *(unsigned __int16 *)(a1 + 112);
    *(_WORD *)(a1 + 2 * v14) = v16;
    int v17 = *(unsigned __int16 *)(a1 + 112);
    if (!*(_WORD *)(a1 + 112)) {
      goto LABEL_11;
    }
  }

  else
  {
    unsigned int v16 = 0;
    *(_WORD *)(a1 + 2 * v14) = 0;
    int v17 = *(unsigned __int16 *)(a1 + 112);
    if (!*(_WORD *)(a1 + 112)) {
      goto LABEL_11;
    }
  }

LABEL_55:
  if (a6 == -1 || *(_DWORD *)(a1 + 120) != a6)
  {
    unsigned int v38 = sub_1000BE644(a4, 4, 0xFFFFFFFF);
    unint64_t v46 = sub_1000CAF58(2LL * (int)v9, v39, v40, v41, v42, v43, v44, v45);
    uint64_t v58 = v9;
    int v59 = (void *)v46;
    if ((int)v9 >= 1)
    {
      unsigned int v47 = a5;
      uint64_t v48 = (_WORD *)v46;
      uint64_t v9 = v9;
      do
      {
        unsigned int v38 = sub_1000BE644(*v47, 2, v38);
        unsigned int v50 = *v47++;
        uint64_t v49 = v50;
        if (v50 < 0xFFFBuLL)
        {
          uint64_t v51 = *(int *)(a1 + 148);
          if (v49 >= v51)
          {
            LODWORD(v49) = v49 - v51 + *(_DWORD *)(a1 + 152) + 1;
          }

          else
          {
            uint64_t v52 = *(void *)(a1 + 128);
            if (v52) {
              LOWORD(v49) = *(_WORD *)(v52 + 2 * v49);
            }
            else {
              LOWORD(v49) = v49 + *(_WORD *)(a1 + 144);
            }
          }
        }

        else if ((_DWORD)v49 == 65531)
        {
          LOWORD(v49) = *(_WORD *)(a1 + 114);
        }

        else if ((_DWORD)v49 == 65532 || (_DWORD)v49 == 65533)
        {
          LOWORD(v49) = *(_WORD *)(a1 + 112);
        }

        else
        {
          LOWORD(v49) = 0;
        }

        *v48++ = v49;
        --v9;
      }

      while (v9);
    }

    *(_DWORD *)(a1 + 120) = v38;
    uint64_t v9 = v58;
    uint64_t v37 = v59;
  }

  else
  {
    uint64_t v37 = 0LL;
  }

  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, _WORD *))(a1 + 40))( a1,  v13,  v27 + 2LL * (7 - (int)v13),  v9,  v37,  a7))
  {
    if ((int)v9 >= 1)
    {
      uint64_t v53 = v9;
      do
      {
        unsigned int v55 = *a5++;
        uint64_t v54 = v55;
        if (v55 < 0xFFFBuLL)
        {
          uint64_t v56 = *(int *)(a1 + 148);
          if (v54 >= v56)
          {
            LODWORD(v54) = v54 - v56 + *(_DWORD *)(a1 + 152) + 1;
          }

          else
          {
            uint64_t v57 = *(void *)(a1 + 128);
            if (v57) {
              LOWORD(v54) = *(_WORD *)(v57 + 2 * v54);
            }
            else {
              LOWORD(v54) = v54 + *(_WORD *)(a1 + 144);
            }
          }
        }

        else if ((_DWORD)v54 == 65531)
        {
          LOWORD(v54) = *(_WORD *)(a1 + 114);
        }

        else if ((_DWORD)v54 == 65532 || (_DWORD)v54 == 65533)
        {
          LOWORD(v54) = *(_WORD *)(a1 + 112);
        }

        else
        {
          LOWORD(v54) = 0;
        }

        *(_WORD *)(a1 + 190) = v54;
        *a7++ = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(a1 + 32))( a1,  v27 + 2LL * (7 - (int)v13),  (v13 + 1),  v13,  0LL);
        --v53;
      }

      while (v53);
    }

    *(_DWORD *)(a1 + 120) = -1;
  }

  if (v37) {
    sub_1000CB038(v37, 2LL * (int)v9);
  }
  return *(unsigned int *)(a1 + 120);
}

    int v59 = *v27++;
    uint64_t v58 = v59;
    if (*(_BYTE *)(v26 + v59) == 2)
    {
      int v60 = (unsigned __int16 *)(*(void *)(v13 + 104) + 2 * v58);
      uint64_t v61 = *v60;
      uint64_t v35 = v60[1] + ~(_DWORD)v61;
      uint64_t v37 = (unsigned __int8 *)(*(void *)(v13 + 88) + v61);
      goto LABEL_57;
    }

    if (*(int *)(a1 + 560) >= 1)
    {
      unsigned int v38 = 0LL;
      do
        v25[v38++ + 3] = 0x4000;
      while (v38 < *(int *)(a1 + 560));
    }

    v25[12] = 0x4000;
    goto LABEL_59;
  }

    sub_100082D30(v165);
    if (v157 < 1)
    {
      uint64_t v128 = v124;
    }

    else
    {
      uint64_t v169 = 0LL;
      if (v159 <= 1) {
        uint64_t v170 = 1;
      }
      else {
        uint64_t v170 = v159;
      }
      uint64_t v171 = 8LL * v170;
      do
      {
        uint64_t v172 = *(const void **)(*(void *)(v108 + 8 * v125) + v169);
        int v173 = sub_100099EE0((unint64_t)v172) + 1;
        uint64_t v181 = (void *)sub_1000CAF58(2LL * v173, v174, v175, v176, v177, v178, v179, v180);
        j__memmove(v181, v172, 2 * v173);
        *(void *)(*(void *)(v108 + 8 * v125) + v169) = v181;
        v169 += 8LL;
      }

      while (v171 != v169);
      uint64_t v124 = v256;
      uint64_t v128 = v256;
      a1 = v263;
    }

    uint64_t v129 = v260;
    int v91 = v262;
    int v126 = (void *)v257;
    *(void *)(v128 + 8 * v125++) = 0LL;
  }

  while (v125 != v270);
LABEL_63:
  uint64_t v189 = (void *)sub_1000CAF58(v129, v117, v118, v119, v120, v121, v122, v123);
  int v190 = 0LL;
  uint64_t v9 = v245;
  do
  {
    if (v99[v190])
    {
      v189[v190] = sub_1000CAF58(v99[v190], v182, v183, v184, v185, v186, v187, v188);
      if (v99[v190])
      {
        uint64_t v191 = 0LL;
        do
          *(_BYTE *)(v189[v190] + v191++) = sub_100082DAC(*a1);
        while (v191 < v99[v190]);
      }
    }

    else
    {
      v189[v190] = 0LL;
    }

    ++v190;
  }

  while (v190 != v270);
LABEL_73:
  v261 = sub_1000CAF58(16LL * (int)v249, v182, v183, v184, v185, v186, v187, v188);
  if ((int)v249 >= 1)
  {
    uint64_t v200 = (unint64_t *)(v261 + 8);
    int v201 = v249;
    do
    {
      *uint64_t v200 = sub_1000CAF58(v91, v193, v194, v195, v196, v197, v198, v199);
      v200 += 2;
      --v201;
    }

    while (v201);
  }

  int v202 = sub_1000BC428(v91, v261, v99, v124, v189, v249);
  if (v202 >= 1)
  {
    v258 = v202;
    v271 = sub_1000CAF58(8LL * v202, v203, v204, v205, v206, v207, v208, v209);
    int v217 = 0LL;
    v268 = 0;
    int v218 = v91;
    int v219 = v269;
    while (1)
    {
      v266 = v217;
      if ((int)v91 < 1)
      {
        int v227 = 0;
      }

      else
      {
        uint64_t v224 = (void *)(v261 + 16 * v217 + 8);
        if ((_DWORD)v9 == 0xFFFF)
        {
          v239 = 0LL;
          int v227 = 0;
          do
          {
            v240 = *(void *)(v108 + 8 * v239);
            if (v240) {
              v227 += sub_100099EE0(*(void *)(v240 + 8LL * *(unsigned __int8 *)(*v224 + v239)));
            }
            ++v239;
          }

          while (v218 != v239);
        }

        else
        {
          v225 = 0LL;
          uint64_t v226 = 0;
          int v227 = 0;
          do
          {
            int v228 = v227 - 1;
            if (!v226) {
              int v228 = v227 + 1;
            }
            if ((v219[v225] & 8) != 0)
            {
              int v227 = v228;
              uint64_t v226 = !v226;
            }

            uint64_t v229 = *(void *)(v108 + 8 * v225);
            if (v229)
            {
              int v230 = sub_100099EE0(*(void *)(v229 + 8LL * *(unsigned __int8 *)(*v224 + v225)));
              uint64_t v226 = 0;
              v227 += v230;
            }

            ++v225;
          }

          while (v218 != v225);
        }
      }

      int v221 = sub_1000CAF58(2LL * (v227 + 1), v210, v211, v212, v213, v214, v215, v216);
      v220 = v271;
      *(void *)(v271 + 8LL * v268) = v221;
      int v233 = 0;
LABEL_79:
      *(_WORD *)(v221 + 2LL * v233) = -1;
      a1 = v263;
      else {
        v222 = 0;
      }
      v223 = v268;
      if (v222) {
        v223 = v268 + 1;
      }
      v268 = v223;
      int v217 = v266 + 1;
      LODWORD(v91) = v262;
      if (v266 + 1 == v258) {
        goto LABEL_115;
      }
    }

    int v231 = 0LL;
    v232 = 0;
    int v233 = 0;
    while (2)
    {
      if ((v219[v231] & 8) == 0 || (_DWORD)v9 == 0xFFFF)
      {
LABEL_105:
        v235 = *(void *)(v108 + 8 * v231);
        if (!v235) {
          goto LABEL_98;
        }
      }

      else
      {
        if (!v232)
        {
          *(_WORD *)(*(void *)(v271 + 8LL * v268) + 2LL * v233++) = v9;
          v232 = 1;
          goto LABEL_105;
        }

        v232 = 0;
        --v233;
        v235 = *(void *)(v108 + 8 * v231);
        if (!v235)
        {
LABEL_98:
          if (v218 == ++v231)
          {
            v220 = v271;
            int v221 = *(void *)(v271 + 8LL * v268);
            goto LABEL_79;
          }

          continue;
        }
      }

      break;
    }

    v236 = *(const void **)(v235 + 8LL * *(unsigned __int8 *)(*(void *)(v261 + 16 * v266 + 8) + v231));
    v237 = v9;
    v238 = sub_100099EE0((unint64_t)v236);
    memcpy((void *)(*(void *)(v271 + 8LL * v268) + 2LL * v233), v236, 2 * v238);
    v232 = 0;
    v233 += v238;
    uint64_t v9 = v237;
    int v219 = v269;
    goto LABEL_98;
  }

  v220 = 0LL;
  v268 = 0;
LABEL_115:
  if ((_DWORD)v91 != 1 || *v264 != -1 || v268 != 1)
  {
    if (!v268)
    {
      *v248 = 0;
      uint64_t v192 = 1LL;
      goto LABEL_126;
    }

  uint64_t result = 0LL;
LABEL_56:
  a3[v13] = 0;
  return result;
}

uint64_t sub_100075238(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v3 = a2 - (uint64_t)*(int *)(a1 + 148);
  if (*(_BYTE *)(*(void *)(a1 + 168) + v3) == 1) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 56))(a1, v3 + *(int *)(a1 + 152) + 1);
  if ((_DWORD)result)
  {
    uint64_t result = 1LL;
    *(_BYTE *)(*(void *)(a1 + 168) + v3) = 1;
  }

  return result;
}

uint64_t sub_1000752D8(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 1LL;
  }
  uint64_t v3 = a2 - (uint64_t)*(int *)(a1 + 148);
  if (*(_BYTE *)(*(void *)(a1 + 168) + v3))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 64))(a1, v3 + *(int *)(a1 + 152) + 1);
    if (!(_DWORD)result) {
      return result;
    }
    *(_BYTE *)(*(void *)(a1 + 168) + v3) = 0;
  }

  return 1LL;
}

uint64_t sub_100075360(uint64_t a1)
{
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100075378(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 108);
  }
  return result;
}

uint64_t sub_100075384( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000BCAE8(a1, "blm0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  int v13 = 0;
  uint64_t v10 = 0LL;
  if (sub_1000BCD38((uint64_t)v8, &v13))
  {
    switch(v13)
    {
      case 0:
        uint64_t v11 = sub_10007A280(v9);
        goto LABEL_9;
      case 1:
        uint64_t v11 = sub_10007B690(v9);
        goto LABEL_9;
      case 8:
        uint64_t v11 = (uint64_t)sub_100076E78(v9);
        goto LABEL_9;
      case 9:
        uint64_t v11 = (uint64_t)sub_1000786D8(v9);
LABEL_9:
        uint64_t v10 = v11;
        break;
      default:
        break;
    }
  }

  sub_1000BCBC8(v9);
  return v10;
}

uint64_t sub_100075448(uint64_t a1)
{
  int v3 = 0;
  if (!sub_1000BCD38(a1, &v3)) {
    return 0LL;
  }
  uint64_t result = 0LL;
  switch(v3)
  {
    case 0:
      uint64_t result = sub_10007A280(a1);
      break;
    case 1:
      uint64_t result = sub_10007B690(a1);
      break;
    case 8:
      uint64_t result = (uint64_t)sub_100076E78(a1);
      break;
    case 9:
      uint64_t result = (uint64_t)sub_1000786D8(a1);
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_100075508(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v11 = sub_1000BCAE8(a2, v15, a3, v6, v7, v8, v9, v10);
  if (!v11) {
    return 0LL;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(a1 + 88))(a1, v11);
  sub_1000BCBC8(v12);
  return v13;
}

uint64_t sub_1000755E0(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = sub_1000BDA88(a2, v10, a3);
  if (!v6) {
    return 0LL;
  }
  uint64_t v7 = v6;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 96))(a1, v6);
  sub_1000BDB48(v7);
  return v8;
}

uint64_t sub_1000756B8(uint64_t a1)
{
  return sub_1000C0EF8(*(void *)(a1 + 136));
}

uint64_t sub_1000756E0(uint64_t a1, uint64_t a2)
{
  if (!sub_1000BCCEC(a2, (_DWORD *)(a1 + 124))) {
    goto LABEL_21;
  }
  if (!sub_1000BCCEC(a2, (_DWORD *)(a1 + 156))) {
    goto LABEL_21;
  }
  int v8 = 0;
  int v4 = (void *)(a1 + 136);
  if (*v4)
  {
    if (v8 != *(_DWORD *)(a1 + 148)) {
      goto LABEL_21;
    }
    *(void *)(a1 + 128) = *v4;
  }

  if (*(_DWORD *)(a1 + 156)) {
    return 1LL;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 160);
  uint64_t v7 = sub_1000C1074(v6);
  *(void *)(a1 + 168) = v7;
  if (v7) {
    return 1LL;
  }
LABEL_21:
  sub_1000C0EF8(*(void *)(a1 + 168));
  sub_1000C0EF8(*(void *)(a1 + 136));
  return 0LL;
}

BOOL sub_100075870(uint64_t a1, uint64_t a2)
{
  return sub_1000BCE28(a2, *(void **)(a1 + 168), *(_DWORD *)(a1 + 160), 1);
}

BOOL sub_1000758A0(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  int v4 = *(void **)(a1 + 168);
  if (v4) {
    unsigned int v5 = *(_DWORD *)(a1 + 160);
  }
  else {
    unsigned int v5 = 0;
  }
  return sub_1000BDBCC(a2, v4, v5, 1, a3) != 0;
}

BOOL sub_1000758DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a1 + 152);
  if (v2 >= a2) {
    return 0LL;
  }
  return 0LL;
}

uint64_t sub_100075914(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100075BD4;
  *(void *)(a1 + 16) = sub_100075914;
  *(void *)(a1 + 24) = sub_100075B94;
  *(void *)(a1 + 32) = sub_100075C64;
  *(void *)(a1 + 40) = sub_100075F28;
  *(void *)(a1 + 48) = sub_100076130;
  *(void *)(a1 + 56) = sub_100076B50;
  *(void *)(a1 + 64) = sub_100076C08;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = sub_100076C5C;
  *(void *)(a1 + 96) = sub_100076D28;
  uint64_t v2 = *(unsigned int *)(a1 + 116);
  if ((int)v2 < 1
    || (uint64_t result = sub_1000C1074(2 * v2), (*(void *)(a1 + 272) = result) != 0LL)
    && (uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 116)), (*(void *)(a1 + 280) = result) != 0LL))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 160);
    if ((int)v4 >= 1)
    {
      uint64_t result = (uint64_t)sub_1000C0F68(2 * v4);
      *(void *)(a1 + 376) = result;
      if (!result) {
        return result;
      }
      uint64_t result = (uint64_t)sub_1000C0F68(2LL * *(int *)(a1 + 160));
      *(void *)(a1 + 384) = result;
      if (!result) {
        return result;
      }
      if (*(int *)(a1 + 160) >= 1)
      {
        uint64_t v5 = 0LL;
        do
        {
          uint64_t v6 = 2 * v5;
          *(_WORD *)(*(void *)(a1 + 376) + v6) = 0x7FFF;
          *(_WORD *)(*(void *)(a1 + 384) + v6) = -1;
          ++v5;
        }

        while (v5 < *(int *)(a1 + 160));
      }
    }

    if (!*(_DWORD *)(a1 + 124)) {
      return 1LL;
    }
    *(void *)(a1 + 392) = 0LL;
    uint64_t result = (uint64_t)sub_1000C0F68(*(int *)(a1 + 152) + 1LL);
    *(void *)(a1 + 400) = result;
    if (result)
    {
      unsigned __int16 v17 = 0;
      if ((*(_DWORD *)(a1 + 152) & 0x80000000) == 0)
      {
        do
        {
          int v16 = 0;
          sub_10007A674(*(void *)(a1 + 216), &v17, &v16);
          int v7 = v16 - *(_DWORD *)(a1 + 292);
          else {
            int v8 = v16 - *(_DWORD *)(a1 + 292);
          }
          if (v7 >= 0) {
            char v9 = v8;
          }
          else {
            char v9 = 0;
          }
          *(_BYTE *)(*(void *)(a1 + 400) + v17++) = v9;
        }

        while (*(_DWORD *)(a1 + 152) >= (int)v17);
      }

      uint64_t result = (uint64_t)sub_1000C0F68(*(int *)(a1 + 192) + 1LL);
      *(void *)(a1 + 408) = result;
      if (result)
      {
        unsigned __int16 v17 = 0;
        if ((*(_DWORD *)(a1 + 192) & 0x80000000) == 0)
        {
          do
          {
            int v15 = 255;
            sub_10007A674(*(void *)(a1 + 232), &v17, &v15);
            int v10 = v15 - *(_DWORD *)(a1 + 296);
            else {
              int v11 = v15 - *(_DWORD *)(a1 + 296);
            }
            if (v10 >= 0) {
              char v12 = v11;
            }
            else {
              char v12 = 0;
            }
            *(_BYTE *)(*(void *)(a1 + 408) + v17++) = v12;
          }

          while (*(_DWORD *)(a1 + 192) >= (int)v17);
        }

        unint64_t v13 = *(unsigned int *)(a1 + 160);
        if ((int)v13 >= 1)
        {
          uint64_t result = (uint64_t)sub_1000C0F68(v13);
          *(void *)(a1 + 416) = result;
          if (!result) {
            return result;
          }
          if (*(int *)(a1 + 160) >= 1)
          {
            uint64_t v14 = 0LL;
            uint64_t result = 1LL;
            do
              *(_BYTE *)(*(void *)(a1 + 416) + v14++) = -1;
            while (v14 < *(int *)(a1 + 160));
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return result;
}

void *sub_100075B94(const void *a1)
{
  uint64_t v2 = (void *)sub_1000C1074(424LL);
  int v3 = v2;
  if (v2) {
    memcpy(v2, a1, 0x1A8uLL);
  }
  return v3;
}

uint64_t sub_100075BD4(uint64_t *a1)
{
  return sub_1000756B8((uint64_t)a1);
}

uint64_t sub_100075C64(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v36 = 0;
  uint64_t v5 = (_WORD *)(a2 + 2LL * a4);
  if (*v5)
  {
    uint64_t v9 = *(int *)(a1 + 152);
    int v10 = *(_DWORD *)(a1 + 124) & a5;
    if (sub_10007A674(*(void *)(a1 + 216), (unsigned __int16 *)(a2 + 2LL * a4), &v36))
    {
      if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 400);
        v36 += *(__int16 *)(a1 + 288);
        int v12 = *(_DWORD *)(a1 + 292) + *(__int16 *)(a1 + 290) + *(unsigned __int8 *)(v11 + (unsigned __int16)*v5);
        if (!a4) {
          goto LABEL_5;
        }
LABEL_18:
        uint64_t v20 = a4;
        uint64_t v21 = *(void *)(a1 + 200);
        uint64_t v22 = *(void *)(a1 + 384);
        uint64_t v23 = *(void *)(a1 + 232);
        uint64_t v24 = *(void *)(a1 + 248);
        int v33 = 0;
        uint64_t v25 = *(unsigned __int16 *)(a2 + 2 * v20 - 2);
        if (v25 <= v9)
        {
          unsigned __int16 v34 = sub_10007A528(v21, v25);
          uint64_t v26 = (unsigned __int16)*v5;
          if (v26 <= v9) {
            goto LABEL_20;
          }
        }

        else
        {
          unsigned __int16 v34 = *(_WORD *)(v22 + 2LL * ((int)v25 + ~(_DWORD)v9));
          uint64_t v26 = (unsigned __int16)*v5;
          if (v26 <= v9)
          {
LABEL_20:
            unsigned __int16 v27 = sub_10007A528(v21, v26);
            goto LABEL_23;
          }
        }

        unsigned __int16 v27 = *(_WORD *)(v22 + 2LL * ((int)v26 + ~(_DWORD)v9));
LABEL_23:
        unsigned __int16 v35 = v27;
        sub_10007A674(v23, &v35, &v33);
        int v28 = v36 - v33;
        v36 -= v33;
        if (v10)
        {
          int v29 = v12 - *(_DWORD *)(a1 + 296) - *(unsigned __int8 *)(*(void *)(a1 + 408) + v35);
          int v30 = v28 - v29;
          if (v28 < v29)
          {
            int v30 = v29 - v28;
            if (v29 - v28 >= *(_DWORD *)(a1 + 308)) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }

          int v36 = v12 - *(_DWORD *)(a1 + 296) - *(unsigned __int8 *)(*(void *)(a1 + 408) + v35);
          int v28 = v29;
          if (v30 < *(_DWORD *)(a1 + 308)) {
LABEL_28:
          }
            int v36 = v28 - *(unsigned __int8 *)(*(void *)(a1 + 312) + v30);
        }

uint64_t sub_100075F28(uint64_t a1, int a2, unsigned __int16 *a3, int a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v6 = 0LL;
  int v40 = 0;
  if (a2 == 1)
  {
    int v8 = a5;
    int v9 = a4;
    uint64_t v34 = *(void *)(a1 + 200);
    uint64_t v35 = *(void *)(a1 + 384);
    uint64_t v10 = *(void *)(a1 + 248);
    uint64_t v11 = *(__int16 **)(a1 + 272);
    int v12 = *(unsigned __int16 **)(a1 + 280);
    uint64_t v13 = *(int *)(a1 + 152);
    if (a5)
    {
      __int16 v31 = a3;
      uint64_t v36 = *(void *)(a1 + 216);
      uint64_t v14 = *(void *)(a1 + 232);
      uint64_t v33 = *(void *)(a1 + 376);
      unsigned __int16 v38 = 0;
      int v37 = 0;
      if (a4 >= 1)
      {
        int v15 = v12;
        uint64_t v16 = v11;
        for (uint64_t i = a4; i; --i)
        {
          int v22 = sub_10007A674(v36, v8, &v40);
          unsigned int v24 = *v8++;
          uint64_t v23 = v24;
          if (v22)
          {
            if (v23 <= v13) {
              goto LABEL_17;
            }
          }

          else
          {
            int v40 = *(__int16 *)(v33 + 2LL * ((int)v23 + ~(_DWORD)v13));
            if (v23 <= v13)
            {
LABEL_17:
              unsigned __int16 v18 = sub_10007A528(v34, v23);
              goto LABEL_6;
            }
          }

          unsigned __int16 v18 = *(_WORD *)(v35 + 2LL * ((int)v23 + ~(_DWORD)v13));
LABEL_6:
          unsigned __int16 v38 = v18;
          *v15++ = v18;
          sub_10007A674(v14, &v38, &v37);
          int v19 = v40 - v37;
          int v40 = v19;
          else {
            __int16 v20 = v19;
          }
          if (v19 >= 0) {
            __int16 v21 = v20;
          }
          else {
            __int16 v21 = 0;
          }
          *v16++ = v21;
        }
      }

      a3 = v31;
      int v9 = a4;
    }

    uint64_t v25 = *a3;
    if (v25 <= v13)
    {
      v39[0] = sub_10007A528(v34, v25);
      if (v9 < 1) {
        return 1LL;
      }
    }

    else
    {
      v39[0] = *(_WORD *)(v35 + 2LL * ((int)v25 + ~(_DWORD)v13));
      if (v9 < 1) {
        return 1LL;
      }
    }

    uint64_t v26 = v9;
    do
    {
      unsigned __int16 v27 = *v12++;
      v39[1] = v27;
      sub_10007A674(v10, v39, &v40);
      int v28 = *v11++;
      int v29 = v40 + v28;
      int v40 = v29;
      if (v29 >= 0x7FFF) {
        LOWORD(v29) = 0x7FFF;
      }
      *a6++ = v29;
      --v26;
    }

    while (v26);
    return 1LL;
  }

  return v6;
}

uint64_t sub_100076130( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_DWORD *)(a1 + 124)) {
    return 0LL;
  }
  int v8 = a4;
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 384);
  uint64_t v12 = *(int *)(a1 + 152);
  uint64_t v193 = *(unsigned int *)(a1 + 152);
  uint64_t v13 = (a3 - a4);
  uint64_t v14 = (void *)sub_1000CAF58(2LL * ((int)v13 + 1), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v194 = 2LL * ((int)v13 + 1);
  unint64_t v22 = sub_1000CAF58(v194, v15, v16, v17, v18, v19, v20, v21);
  int v30 = (void *)v22;
  if ((int)v13 >= 1)
  {
    uint64_t v31 = v13;
    uint64_t v32 = v14;
    uint64_t v33 = a2;
    uint64_t v34 = (_WORD *)v22;
    uint64_t v35 = (unsigned __int16 *)(v33 + 2LL * v8);
    do
    {
      while (1)
      {
        uint64_t v36 = *v35;
        *uint64_t v32 = v36;
        if (v36 <= v12) {
          break;
        }
        *v34++ = *(_WORD *)(v11 + 2LL * ((int)v36 + ~(_DWORD)v12));
        ++v35;
        ++v32;
        if (!--v31) {
          goto LABEL_7;
        }
      }

      unsigned int v37 = *v35++;
      *v34++ = sub_10007A528(v10, v37);
      ++v32;
      --v31;
    }

    while (v31);
  }

LABEL_160:
            *(void *)(a1 + 392) = 0LL;
            goto LABEL_161;
          }
        }

        else
        {
          uint64_t v145 = 0LL;
        }

        uint64_t v156 = v145;
        uint32x4_t v157 = (uint32x4_t)vdupq_n_s32(v117);
        uint64_t v145 = v144 & 0xFFFFFFF8;
        int32x4_t v158 = (uint8x8_t *)&v91->i8[v156];
        uint64_t v159 = v156 - v145;
        v160.i64[0] = 0xFF000000FFLL;
        v160.i64[1] = 0xFF000000FFLL;
        do
        {
          uint16x8_t v161 = vmovl_u8(*v158);
          int32x4_t v162 = (int32x4_t)vaddw_u16(v157, *(uint16x4_t *)v161.i8);
          int32x4_t v163 = (int32x4_t)vaddw_high_u16(v157, v161);
          v197.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v163, v160);
          v197.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v162, v160);
          *v158++ = (uint8x8_t)vbic_s8( (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v197, (int8x16_t)xmmword_1000F0350),  vmovn_s16(vuzp1q_s16((int16x8_t)vcltzq_s32(v162), (int16x8_t)vcltzq_s32(v163))));
          v159 += 8LL;
        }

        while (v159);
        if (v145 == v144) {
          goto LABEL_140;
        }
        goto LABEL_132;
      }
    }

    else
    {
      uint64_t v121 = 0LL;
    }

    uint64_t v132 = v121;
    uint64_t v121 = v120 & 0xFFFFFFF8;
    uint64_t v133 = (uint8x8_t *)&v70->i8[v132];
    uint64_t v134 = v132 - v121;
    v135.i64[0] = 0xFF000000FFLL;
    v135.i64[1] = 0xFF000000FFLL;
    do
    {
      uint16x8_t v136 = vmovl_u8(*v133);
      int32x4_t v137 = (int32x4_t)vaddw_u16(v122, *(uint16x4_t *)v136.i8);
      int32x4_t v138 = (int32x4_t)vaddw_high_u16(v122, v136);
      v196.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v138, v135);
      v196.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v137, v135);
      *v133++ = (uint8x8_t)vbic_s8( (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v196, (int8x16_t)xmmword_1000F0350),  vmovn_s16(vuzp1q_s16((int16x8_t)vcltzq_s32(v137), (int16x8_t)vcltzq_s32(v138))));
      v134 += 8LL;
    }

    while (v134);
    if (v121 == v120) {
      goto LABEL_120;
    }
    goto LABEL_112;
  }

            *(void *)(a1 + 424) = 0LL;
            goto LABEL_161;
          }
        }

        else
        {
          uint64_t v145 = 0LL;
        }

        uint64_t v156 = v145;
        uint32x4_t v157 = (uint32x4_t)vdupq_n_s32(v117);
        uint64_t v145 = v144 & 0xFFFFFFF8;
        int32x4_t v158 = (uint8x8_t *)&v91->i8[v156];
        uint64_t v159 = v156 - v145;
        v160.i64[0] = 0xFF000000FFLL;
        v160.i64[1] = 0xFF000000FFLL;
        do
        {
          uint16x8_t v161 = vmovl_u8(*v158);
          int32x4_t v162 = (int32x4_t)vaddw_u16(v157, *(uint16x4_t *)v161.i8);
          int32x4_t v163 = (int32x4_t)vaddw_high_u16(v157, v161);
          v197.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v163, v160);
          v197.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v162, v160);
          *v158++ = (uint8x8_t)vbic_s8( (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v197, (int8x16_t)xmmword_1000F0350),  vmovn_s16(vuzp1q_s16((int16x8_t)vcltzq_s32(v162), (int16x8_t)vcltzq_s32(v163))));
          v159 += 8LL;
        }

        while (v159);
        if (v145 == v144) {
          goto LABEL_140;
        }
        goto LABEL_132;
      }
    }

    else
    {
      uint64_t v121 = 0LL;
    }

    uint64_t v132 = v121;
    uint64_t v121 = v120 & 0xFFFFFFF8;
    uint64_t v133 = (uint8x8_t *)&v70->i8[v132];
    uint64_t v134 = v132 - v121;
    v135.i64[0] = 0xFF000000FFLL;
    v135.i64[1] = 0xFF000000FFLL;
    do
    {
      uint16x8_t v136 = vmovl_u8(*v133);
      int32x4_t v137 = (int32x4_t)vaddw_u16(v122, *(uint16x4_t *)v136.i8);
      int32x4_t v138 = (int32x4_t)vaddw_high_u16(v122, v136);
      v196.val[1] = (int8x16_t)vminq_u32((uint32x4_t)v138, v135);
      v196.val[0] = (int8x16_t)vminq_u32((uint32x4_t)v137, v135);
      *v133++ = (uint8x8_t)vbic_s8( (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v196, (int8x16_t)xmmword_1000F0350),  vmovn_s16(vuzp1q_s16((int16x8_t)vcltzq_s32(v137), (int16x8_t)vcltzq_s32(v138))));
      v134 += 8LL;
    }

    while (v134);
    if (v121 == v120) {
      goto LABEL_120;
    }
    goto LABEL_112;
  }

                              int v58 = v456;
                              __int16 v60 = v446;
LABEL_161:
                              unsigned int v108 = v436;
LABEL_162:
                              uint64_t v224 = (char *)v459 + 4;
                            }
                          }
                        }

LABEL_161:
  sub_1000CB038(v30, v194);
  sub_1000CB038(v14, v194);
  return 1LL;
}

  sub_1000CB038(v30, v194);
  sub_1000CB038(v14, v194);
  return 1LL;
}

BOOL sub_100076B50(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  __int16 v4 = a4;
  int v6 = a2;
  if (a4 == 0xFFFF) {
    __int16 v4 = *(_WORD *)(a1 + 266);
  }
  BOOL result = sub_1000758DC(a1, a2);
  if (result)
  {
    int v9 = ~*(_DWORD *)(a1 + 152) + v6;
    __int16 v10 = a3;
    if (a3 >= 0x7FFF) {
      __int16 v10 = *(_WORD *)(a1 + 264);
    }
    uint64_t v11 = 2LL * v9;
    *(_WORD *)(*(void *)(a1 + 376) + v11) = v10;
    *(_WORD *)(*(void *)(a1 + 384) + v11) = v4;
    if (*(_DWORD *)(a1 + 124))
    {
      int v12 = a3 - *(_DWORD *)(a1 + 292);
      else {
        unsigned int v13 = a3 - *(_DWORD *)(a1 + 292);
      }
      if (v12 >= 0) {
        char v14 = v13;
      }
      else {
        char v14 = 0;
      }
      *(_BYTE *)(*(void *)(a1 + 416) + v9) = v14;
    }

    return 1LL;
  }

  return result;
}

BOOL sub_100076C08(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  BOOL result = sub_1000758DC(a1, a2);
  if (result)
  {
    uint64_t v5 = 2LL * (~*(_DWORD *)(a1 + 152) + v2);
    *(_WORD *)(*(void *)(a1 + 376) + v5) = 0x7FFF;
    *(_WORD *)(*(void *)(a1 + 384) + v5) = -1;
    return 1LL;
  }

  return result;
}

BOOL sub_100076C5C(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100075870(a1, a2);
  if (result)
  {
    BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 376), *(_DWORD *)(a1 + 160), 2);
    if (result)
    {
      BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 384), *(_DWORD *)(a1 + 160), 2);
      if (result)
      {
        BOOL result = sub_1000BCD38(a2, (void *)(a1 + 392));
        if (result)
        {
          BOOL result = sub_1000BCD38(a2, (void *)(a1 + 396));
          if (result)
          {
            BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 400), *(_DWORD *)(a1 + 152) + 1, 1);
            if (result)
            {
              BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 408), *(_DWORD *)(a1 + 192) + 1, 1);
              if (result) {
                return sub_1000BCE28(a2, *(void **)(a1 + 416), *(_DWORD *)(a1 + 160), 1);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

int8x8_t *sub_100076D28(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  BOOL result = (int8x8_t *)sub_1000758A0(a1, a2, a3);
  if ((_DWORD)result)
  {
    int v7 = *(void **)(a1 + 376);
    if (v7)
    {
      BOOL result = sub_1000BDBCC(a2, v7, *(_DWORD *)(a1 + 160), 2, v6);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      BOOL result = sub_1000BDBCC(a2, 0LL, 0, 2, v6);
      if (!(_DWORD)result) {
        return result;
      }
    }

    int v9 = *(void **)(a1 + 384);
    if (v9)
    {
      BOOL result = sub_1000BDBCC(a2, v9, *(_DWORD *)(a1 + 160), 2, v8);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      BOOL result = sub_1000BDBCC(a2, 0LL, 0, 2, v8);
      if (!(_DWORD)result) {
        return result;
      }
    }

    BOOL result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 392), v10);
    if ((_DWORD)result)
    {
      BOOL result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 396), v11);
      if ((_DWORD)result)
      {
        unsigned int v13 = *(void **)(a1 + 400);
        if (v13)
        {
          BOOL result = sub_1000BDBCC(a2, v13, *(_DWORD *)(a1 + 152) + 1, 1, v12);
          if (!(_DWORD)result) {
            return result;
          }
        }

        else
        {
          BOOL result = sub_1000BDBCC(a2, 0LL, 0, 1, v12);
          if (!(_DWORD)result) {
            return result;
          }
        }

        uint64_t v15 = *(void **)(a1 + 408);
        if (v15)
        {
          BOOL result = sub_1000BDBCC(a2, v15, *(_DWORD *)(a1 + 192) + 1, 1, v14);
          if (!(_DWORD)result) {
            return result;
          }
        }

        else
        {
          BOOL result = sub_1000BDBCC(a2, 0LL, 0, 1, v14);
          if (!(_DWORD)result) {
            return result;
          }
        }

        uint64_t v17 = *(void **)(a1 + 416);
        if (v17) {
          unsigned int v18 = *(_DWORD *)(a1 + 160);
        }
        else {
          unsigned int v18 = 0;
        }
        return (int8x8_t *)(sub_1000BDBCC(a2, v17, v18, 1, v16) != 0);
      }
    }
  }

  return result;
}

_DWORD *sub_100076E78(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(424LL);
  int v3 = (_DWORD *)v2;
  if (!v2) {
    return v3;
  }
  if (!sub_1000756E0(v2, a1))
  {
LABEL_33:
    sub_1000C0EF8((uint64_t)v3);
    return 0LL;
  }

  if (!sub_1000BCD38(a1, v3 + 48)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 73)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 74)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 75)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 76)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 77)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 82)) {
    goto LABEL_32;
  }
  if (!sub_1000BCD38(a1, v3 + 88)) {
    goto LABEL_32;
  }
  int v14 = 0;
  __int16 v4 = v3 + 80;
  if (*v4)
  {
    if (v14 != v3[77]) {
      goto LABEL_32;
    }
    *((void *)v3 + 39) = *v4;
  }

  int v13 = 0;
  uint64_t v5 = v3 + 86;
  if (*v5)
  {
    if (v13 != v3[82]) {
      goto LABEL_32;
    }
    *((void *)v3 + 42) = *v5;
  }

  int v12 = 0;
  uint8x8_t v6 = v3 + 92;
  if (*v6)
  {
    if (v12 == v3[88])
    {
      *((void *)v3 + 45) = *v6;
      goto LABEL_27;
    }

uint64_t sub_1000770C0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100077380;
  *(void *)(a1 + 16) = sub_1000770C0;
  *(void *)(a1 + 24) = sub_100077340;
  *(void *)(a1 + 32) = sub_100077420;
  *(void *)(a1 + 40) = sub_100077788;
  *(void *)(a1 + 48) = sub_100077990;
  *(void *)(a1 + 56) = sub_1000783B0;
  *(void *)(a1 + 64) = sub_100078468;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = sub_1000784BC;
  *(void *)(a1 + 96) = sub_100078588;
  uint64_t v2 = *(unsigned int *)(a1 + 116);
  if ((int)v2 < 1
    || (uint64_t result = sub_1000C1074(2 * v2), (*(void *)(a1 + 304) = result) != 0LL)
    && (uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 116)), (*(void *)(a1 + 312) = result) != 0LL))
  {
    uint64_t v4 = *(unsigned int *)(a1 + 160);
    if ((int)v4 >= 1)
    {
      uint64_t result = (uint64_t)sub_1000C0F68(2 * v4);
      *(void *)(a1 + 408) = result;
      if (!result) {
        return result;
      }
      uint64_t result = (uint64_t)sub_1000C0F68(2LL * *(int *)(a1 + 160));
      *(void *)(a1 + 416) = result;
      if (!result) {
        return result;
      }
      if (*(int *)(a1 + 160) >= 1)
      {
        uint64_t v5 = 0LL;
        do
        {
          uint64_t v6 = 2 * v5;
          *(_WORD *)(*(void *)(a1 + 408) + v6) = 0x7FFF;
          *(_WORD *)(*(void *)(a1 + 416) + v6) = -1;
          ++v5;
        }

        while (v5 < *(int *)(a1 + 160));
      }
    }

    if (!*(_DWORD *)(a1 + 124)) {
      return 1LL;
    }
    *(void *)(a1 + 424) = 0LL;
    uint64_t result = (uint64_t)sub_1000C0F68(*(int *)(a1 + 152) + 1LL);
    *(void *)(a1 + 432) = result;
    if (result)
    {
      unsigned __int16 v17 = 0;
      if ((*(_DWORD *)(a1 + 152) & 0x80000000) == 0)
      {
        do
        {
          int v16 = 0;
          sub_10007A674(*(void *)(a1 + 216), &v17, &v16);
          int v7 = v16 - *(_DWORD *)(a1 + 324);
          else {
            int v8 = v16 - *(_DWORD *)(a1 + 324);
          }
          if (v7 >= 0) {
            char v9 = v8;
          }
          else {
            char v9 = 0;
          }
          *(_BYTE *)(*(void *)(a1 + 432) + v17++) = v9;
        }

        while (*(_DWORD *)(a1 + 152) >= (int)v17);
      }

      uint64_t result = (uint64_t)sub_1000C0F68(*(int *)(a1 + 192) + 1LL);
      *(void *)(a1 + 440) = result;
      if (result)
      {
        unsigned __int16 v17 = 0;
        if ((*(_DWORD *)(a1 + 192) & 0x80000000) == 0)
        {
          do
          {
            int v15 = 255;
            sub_10007A674(*(void *)(a1 + 232), &v17, &v15);
            int v10 = v15 - *(_DWORD *)(a1 + 328);
            else {
              int v11 = v15 - *(_DWORD *)(a1 + 328);
            }
            if (v10 >= 0) {
              char v12 = v11;
            }
            else {
              char v12 = 0;
            }
            *(_BYTE *)(*(void *)(a1 + 440) + v17++) = v12;
          }

          while (*(_DWORD *)(a1 + 192) >= (int)v17);
        }

        unint64_t v13 = *(unsigned int *)(a1 + 160);
        if ((int)v13 >= 1)
        {
          uint64_t result = (uint64_t)sub_1000C0F68(v13);
          *(void *)(a1 + 448) = result;
          if (!result) {
            return result;
          }
          if (*(int *)(a1 + 160) >= 1)
          {
            uint64_t v14 = 0LL;
            uint64_t result = 1LL;
            do
              *(_BYTE *)(*(void *)(a1 + 448) + v14++) = -1;
            while (v14 < *(int *)(a1 + 160));
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return result;
}

void *sub_100077340(const void *a1)
{
  uint64_t v2 = (void *)sub_1000C1074(456LL);
  int v3 = v2;
  if (v2) {
    memcpy(v2, a1, 0x1C8uLL);
  }
  return v3;
}

uint64_t sub_100077380(uint64_t *a1)
{
  return sub_1000756B8((uint64_t)a1);
}

uint64_t sub_100077420(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v36 = 0;
  uint64_t v5 = (_WORD *)(a2 + 2LL * a4);
  if (*v5)
  {
    uint64_t v9 = *(int *)(a1 + 152);
    int v10 = *(_DWORD *)(a1 + 124) & a5;
    if (sub_10007A674(*(void *)(a1 + 216), (unsigned __int16 *)(a2 + 2LL * a4), &v36))
    {
      if (v10)
      {
        uint64_t v11 = *(void *)(a1 + 432);
        v36 += *(__int16 *)(a1 + 320);
        int v12 = *(_DWORD *)(a1 + 324) + *(__int16 *)(a1 + 322) + *(unsigned __int8 *)(v11 + (unsigned __int16)*v5);
        if (!a4) {
          goto LABEL_5;
        }
LABEL_18:
        uint64_t v20 = *(void *)(a1 + 200);
        uint64_t v21 = *(void *)(a1 + 416);
        unsigned __int16 v33 = 1;
        int v32 = 0;
        if (a4 >= 2)
        {
          uint64_t v22 = *(unsigned __int16 *)(a2 + 2LL * (a4 - 2));
          if (v22 <= v9)
          {
            unsigned __int16 v33 = sub_10007A528(v20, v22);
            uint64_t v23 = *(unsigned __int16 *)(a2 + 2LL * a4 - 2);
            if (v23 > v9)
            {
LABEL_22:
              unsigned __int16 v34 = *(_WORD *)(v21 + 2LL * ((int)v23 + ~(_DWORD)v9));
              uint64_t v24 = (unsigned __int16)*v5;
              if (v24 <= v9)
              {
LABEL_23:
                unsigned __int16 v25 = sub_10007A528(v20, v24);
                goto LABEL_27;
              }

uint64_t sub_100077788(uint64_t a1, int a2, unsigned __int16 *a3, int a4, unsigned __int16 *a5, _WORD *a6)
{
  uint64_t v6 = 0LL;
  int v40 = 0;
  if (a2 == 1)
  {
    int v8 = a5;
    int v9 = a4;
    uint64_t v34 = *(void *)(a1 + 200);
    uint64_t v35 = *(void *)(a1 + 416);
    uint64_t v10 = *(void *)(a1 + 248);
    uint64_t v11 = *(__int16 **)(a1 + 304);
    int v12 = *(unsigned __int16 **)(a1 + 312);
    uint64_t v13 = *(int *)(a1 + 152);
    if (a5)
    {
      int v31 = a3;
      uint64_t v36 = *(void *)(a1 + 216);
      uint64_t v14 = *(void *)(a1 + 232);
      uint64_t v33 = *(void *)(a1 + 408);
      unsigned __int16 v38 = 0;
      int v37 = 0;
      if (a4 >= 1)
      {
        int v15 = v12;
        uint64_t v16 = v11;
        for (uint64_t i = a4; i; --i)
        {
          int v22 = sub_10007A674(v36, v8, &v40);
          unsigned int v24 = *v8++;
          uint64_t v23 = v24;
          if (v22)
          {
            if (v23 <= v13) {
              goto LABEL_17;
            }
          }

          else
          {
            int v40 = *(__int16 *)(v33 + 2LL * ((int)v23 + ~(_DWORD)v13));
            if (v23 <= v13)
            {
LABEL_17:
              unsigned __int16 v18 = sub_10007A528(v34, v23);
              goto LABEL_6;
            }
          }

          unsigned __int16 v18 = *(_WORD *)(v35 + 2LL * ((int)v23 + ~(_DWORD)v13));
LABEL_6:
          unsigned __int16 v38 = v18;
          *v15++ = v18;
          sub_10007A674(v14, &v38, &v37);
          int v19 = v40 - v37;
          int v40 = v19;
          else {
            __int16 v20 = v19;
          }
          if (v19 >= 0) {
            __int16 v21 = v20;
          }
          else {
            __int16 v21 = 0;
          }
          *v16++ = v21;
        }
      }

      a3 = v31;
      int v9 = a4;
    }

    uint64_t v25 = *a3;
    if (v25 <= v13)
    {
      v39[0] = sub_10007A528(v34, v25);
      if (v9 < 1) {
        return 1LL;
      }
    }

    else
    {
      v39[0] = *(_WORD *)(v35 + 2LL * ((int)v25 + ~(_DWORD)v13));
      if (v9 < 1) {
        return 1LL;
      }
    }

    uint64_t v26 = v9;
    do
    {
      unsigned __int16 v27 = *v12++;
      v39[1] = v27;
      sub_10007A674(v10, v39, &v40);
      int v28 = *v11++;
      int v29 = v40 + v28;
      int v40 = v29;
      if (v29 >= 0x7FFF) {
        LOWORD(v29) = 0x7FFF;
      }
      *a6++ = v29;
      --v26;
    }

    while (v26);
    return 1LL;
  }

  return v6;
}

uint64_t sub_100077990( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_DWORD *)(a1 + 124)) {
    return 0LL;
  }
  int v8 = a4;
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 416);
  uint64_t v12 = *(int *)(a1 + 152);
  uint64_t v193 = *(unsigned int *)(a1 + 152);
  uint64_t v13 = (a3 - a4);
  uint64_t v14 = (void *)sub_1000CAF58(2LL * ((int)v13 + 1), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v194 = 2LL * ((int)v13 + 1);
  unint64_t v22 = sub_1000CAF58(v194, v15, v16, v17, v18, v19, v20, v21);
  int v30 = (void *)v22;
  if ((int)v13 >= 1)
  {
    uint64_t v31 = v13;
    int v32 = v14;
    uint64_t v33 = a2;
    uint64_t v34 = (_WORD *)v22;
    uint64_t v35 = (unsigned __int16 *)(v33 + 2LL * v8);
    do
    {
      while (1)
      {
        uint64_t v36 = *v35;
        *int v32 = v36;
        if (v36 <= v12) {
          break;
        }
        *v34++ = *(_WORD *)(v11 + 2LL * ((int)v36 + ~(_DWORD)v12));
        ++v35;
        ++v32;
        if (!--v31) {
          goto LABEL_7;
        }
      }

      unsigned int v37 = *v35++;
      *v34++ = sub_10007A528(v10, v37);
      ++v32;
      --v31;
    }

    while (v31);
  }

BOOL sub_1000783B0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  __int16 v4 = a4;
  int v6 = a2;
  if (a4 == 0xFFFF) {
    __int16 v4 = *(_WORD *)(a1 + 298);
  }
  BOOL result = sub_1000758DC(a1, a2);
  if (result)
  {
    int v9 = ~*(_DWORD *)(a1 + 152) + v6;
    __int16 v10 = a3;
    if (a3 >= 0x7FFF) {
      __int16 v10 = *(_WORD *)(a1 + 296);
    }
    uint64_t v11 = 2LL * v9;
    *(_WORD *)(*(void *)(a1 + 408) + v11) = v10;
    *(_WORD *)(*(void *)(a1 + 416) + v11) = v4;
    if (*(_DWORD *)(a1 + 124))
    {
      int v12 = a3 - *(_DWORD *)(a1 + 324);
      else {
        unsigned int v13 = a3 - *(_DWORD *)(a1 + 324);
      }
      if (v12 >= 0) {
        char v14 = v13;
      }
      else {
        char v14 = 0;
      }
      *(_BYTE *)(*(void *)(a1 + 448) + v9) = v14;
    }

    return 1LL;
  }

  return result;
}

BOOL sub_100078468(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  BOOL result = sub_1000758DC(a1, a2);
  if (result)
  {
    uint64_t v5 = 2LL * (~*(_DWORD *)(a1 + 152) + v2);
    *(_WORD *)(*(void *)(a1 + 408) + v5) = 0x7FFF;
    *(_WORD *)(*(void *)(a1 + 416) + v5) = -1;
    return 1LL;
  }

  return result;
}

BOOL sub_1000784BC(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100075870(a1, a2);
  if (result)
  {
    BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 408), *(_DWORD *)(a1 + 160), 2);
    if (result)
    {
      BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 416), *(_DWORD *)(a1 + 160), 2);
      if (result)
      {
        BOOL result = sub_1000BCD38(a2, (void *)(a1 + 424));
        if (result)
        {
          BOOL result = sub_1000BCD38(a2, (void *)(a1 + 428));
          if (result)
          {
            BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 432), *(_DWORD *)(a1 + 152) + 1, 1);
            if (result)
            {
              BOOL result = sub_1000BCE28(a2, *(void **)(a1 + 440), *(_DWORD *)(a1 + 192) + 1, 1);
              if (result) {
                return sub_1000BCE28(a2, *(void **)(a1 + 448), *(_DWORD *)(a1 + 160), 1);
              }
            }
          }
        }
      }
    }
  }

  return result;
}

int8x8_t *sub_100078588(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  BOOL result = (int8x8_t *)sub_1000758A0(a1, a2, a3);
  if ((_DWORD)result)
  {
    int v7 = *(void **)(a1 + 408);
    if (v7)
    {
      BOOL result = sub_1000BDBCC(a2, v7, *(_DWORD *)(a1 + 160), 2, v6);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      BOOL result = sub_1000BDBCC(a2, 0LL, 0, 2, v6);
      if (!(_DWORD)result) {
        return result;
      }
    }

    int v9 = *(void **)(a1 + 416);
    if (v9)
    {
      BOOL result = sub_1000BDBCC(a2, v9, *(_DWORD *)(a1 + 160), 2, v8);
      if (!(_DWORD)result) {
        return result;
      }
    }

    else
    {
      BOOL result = sub_1000BDBCC(a2, 0LL, 0, 2, v8);
      if (!(_DWORD)result) {
        return result;
      }
    }

    BOOL result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 424), v10);
    if ((_DWORD)result)
    {
      BOOL result = (int8x8_t *)sub_1000BDB78(a2, *(_DWORD *)(a1 + 428), v11);
      if ((_DWORD)result)
      {
        unsigned int v13 = *(void **)(a1 + 432);
        if (v13)
        {
          BOOL result = sub_1000BDBCC(a2, v13, *(_DWORD *)(a1 + 152) + 1, 1, v12);
          if (!(_DWORD)result) {
            return result;
          }
        }

        else
        {
          BOOL result = sub_1000BDBCC(a2, 0LL, 0, 1, v12);
          if (!(_DWORD)result) {
            return result;
          }
        }

        uint64_t v15 = *(void **)(a1 + 440);
        if (v15)
        {
          BOOL result = sub_1000BDBCC(a2, v15, *(_DWORD *)(a1 + 192) + 1, 1, v14);
          if (!(_DWORD)result) {
            return result;
          }
        }

        else
        {
          BOOL result = sub_1000BDBCC(a2, 0LL, 0, 1, v14);
          if (!(_DWORD)result) {
            return result;
          }
        }

        uint64_t v17 = *(void **)(a1 + 448);
        if (v17) {
          unsigned int v18 = *(_DWORD *)(a1 + 160);
        }
        else {
          unsigned int v18 = 0;
        }
        return (int8x8_t *)(sub_1000BDBCC(a2, v17, v18, 1, v16) != 0);
      }
    }
  }

  return result;
}

_DWORD *sub_1000786D8(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(456LL);
  int v3 = (_DWORD *)v2;
  if (!v2) {
    return v3;
  }
  if (!sub_1000756E0(v2, a1))
  {
LABEL_35:
    sub_1000C0EF8((uint64_t)v3);
    return 0LL;
  }

  if (!sub_1000BCD38(a1, v3 + 48)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 81)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 82)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 83)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 84)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 85)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 90)) {
    goto LABEL_34;
  }
  if (!sub_1000BCD38(a1, v3 + 96)) {
    goto LABEL_34;
  }
  int v16 = 0;
  __int16 v4 = v3 + 88;
  if (*v4)
  {
    if (v16 != v3[85]) {
      goto LABEL_34;
    }
    *((void *)v3 + 43) = *v4;
  }

  int v15 = 0;
  uint64_t v5 = v3 + 94;
  if (*v5)
  {
    if (v15 != v3[90]) {
      goto LABEL_34;
    }
    *((void *)v3 + 46) = *v5;
  }

  int v14 = 0;
  uint8x8_t v6 = v3 + 100;
  if (*v6)
  {
    if (v14 == v3[96])
    {
      *((void *)v3 + 49) = *v6;
      goto LABEL_27;
    }

uint64_t sub_100078948(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 16);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_10007895C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

void *sub_100078964(uint64_t a1)
{
  int v3 = 0;
  if (!sub_1000BCD38(a1, &v3)) {
    return 0LL;
  }
  if (v3 != 1)
  {
    if (!v3) {
      return sub_100078C80(a1);
    }
    return 0LL;
  }

  return (void *)sub_100079094(a1);
}

uint64_t sub_1000789DC(uint64_t *a1)
{
  return sub_10007A9B0(a1[7]);
}

uint64_t sub_100078A1C(uint64_t a1, uint64_t a2, _WORD *a3, _BYTE *a4, unsigned int a5)
{
  uint64_t v9 = *(__int16 **)(a1 + 72);
  unsigned int v10 = *v9;
  if ((v10 & 0x80000000) == 0)
  {
    unsigned int v12 = 0;
    v13.i64[0] = -1LL;
    v13.i64[1] = -1LL;
    v14.i64[0] = 0x100000001LL;
    v14.i64[1] = 0x100000001LL;
    while (1)
    {
      int v15 = *(_DWORD *)(a1 + 88);
      unsigned int v16 = *(unsigned __int16 *)(*(void *)(a1 + 96) + 2LL * (int)(v12 >> v15));
      unsigned int v17 = v12 >> v15 << v15;
      if (v17 > v12) {
        goto LABEL_16;
      }
      unsigned int v18 = v12 + 1;
      if (v12 + 1 <= v17 + 1) {
        unsigned int v18 = v17 + 1;
      }
      unsigned int v19 = v18 - v17;
      unsigned int v20 = v18 - 1;
      if (v19 < 0x10 || v20 < v17) {
        break;
      }
      unsigned int v22 = v17 + (v19 & 0xFFFFFFF0);
      int32x4_t v23 = 0uLL;
      int32x4_t v24 = (int32x4_t)v16;
      unsigned int v25 = v19 & 0xFFFFFFF0;
      int32x4_t v26 = 0uLL;
      int32x4_t v27 = 0uLL;
      do
      {
        uint64_t v28 = (int16x8_t *)&v9[v17];
        uint16x8_t v29 = (uint16x8_t)vcgtq_s16(*v28, v13);
        uint16x8_t v30 = (uint16x8_t)vcgtq_s16(v28[1], v13);
        int32x4_t v23 = vaddq_s32(v23, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v29), v14));
        int32x4_t v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8), v14));
        int32x4_t v27 = vaddq_s32(v27, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v30), v14));
        int32x4_t v26 = vaddq_s32(v26, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v30.i8), v14));
        v17 += 16;
        v25 -= 16;
      }

      while (v25);
      unsigned int v16 = vaddvq_s32(vaddq_s32(vaddq_s32(v26, v24), vaddq_s32(v27, v23)));
      if (v19 != (v19 & 0xFFFFFFF0)) {
        goto LABEL_15;
      }
LABEL_16:
      int v31 = *(unsigned __int16 *)(a2 + 2LL * ((v10 >> 8) & 0x7F));
      int v32 = v10;
      if ((_BYTE)v10)
      {
        if (*(_WORD *)(a2 + 2LL * ((v10 >> 8) & 0x7F)))
        {
          uint64_t v33 = *(void *)(a1 + 48);
          uint64_t v46 = 0LL;
          int v45 = 0;
          sub_10007A9E8(v33, v10, &v46, &v45);
          v14.i64[0] = 0x100000001LL;
          v14.i64[1] = 0x100000001LL;
          v13.i64[0] = -1LL;
          v13.i64[1] = -1LL;
          uint64_t v34 = v45;
          if (v45 >= 1)
          {
            uint64_t v35 = v46;
            do
            {
              int v36 = *v35++;
              if (v36 == v31) {
                goto LABEL_24;
              }
            }

            while (--v34);
          }
        }
      }

      if (v32 || v31)
      {
        unsigned int v12 = 2 * v16;
        uint64_t v9 = *(__int16 **)(a1 + 72);
        unsigned int v10 = v9[2 * v16];
        if ((v10 & 0x80000000) != 0) {
          goto LABEL_25;
        }
      }

      else
      {
LABEL_24:
        unsigned int v12 = 2 * v16 - 1;
        uint64_t v9 = *(__int16 **)(a1 + 72);
        unsigned int v10 = v9[v12];
        if ((v10 & 0x80000000) != 0)
        {
LABEL_25:
          unsigned int v37 = &v9[v12];
          goto LABEL_27;
        }
      }
    }

    unsigned int v22 = v17;
    do
LABEL_15:
      v16 += ((unsigned __int16)v9[v22++] >> 15) ^ 1;
    while (v22 <= v12);
    goto LABEL_16;
  }

  unsigned int v37 = *(__int16 **)(a1 + 72);
LABEL_27:
  while (v37 > v9)
  {
    int v39 = *--v37;
    __int16 v38 = v39;
    if (v39 < 0)
    {
      uint64_t v40 = v38 & 0x7FFF;
      uint64_t v41 = (v10 & 0x7FFF) - v40;
      else {
        uint64_t result = v41;
      }
LABEL_38:
      uint64_t v44 = result;
      do
      {
        *a3++ = *(_WORD *)(*(void *)(a1 + 120) + 2 * v40);
        *a4++ = *(_BYTE *)(*(void *)(a1 + 136) + v40++);
        --v44;
      }

      while (v44);
      return result;
    }
  }

  uint64_t v40 = 0LL;
  uint64_t v43 = v10 & 0x7FFF;
  else {
    uint64_t result = v43;
  }
  return result;
}

void *sub_100078C80(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000C1074(152LL);
  int v3 = v2;
  if (v2)
  {
    v2[1] = sub_1000789DC;
    v2[2] = 0LL;
    v2[3] = sub_100078A1C;
    v2[4] = 0LL;
    if (!sub_1000BCD38(a1, v2 + 5)) {
      goto LABEL_25;
    }
    __int16 v4 = sub_10007AABC(a1);
    v3[7] = v4;
    if (!v4) {
      goto LABEL_25;
    }
    v3[6] = v4;
    uint64_t v5 = (int *)(v3 + 8);
    if (!sub_1000BCD38(a1, v3 + 8)) {
      goto LABEL_25;
    }
    if (!sub_1000BCD38(a1, v3 + 11)) {
      goto LABEL_25;
    }
    uint8x8_t v6 = v3 + 14;
    if (!sub_1000BCD38(a1, v3 + 14)) {
      goto LABEL_25;
    }
    int v16 = 0;
    uint64_t v7 = v3 + 10;
    uint64_t v8 = *v7;
    if (*v7)
    {
      int v9 = v16;
      if (v16 != *v5) {
        goto LABEL_25;
      }
      v3[9] = v8;
    }

    else
    {
      int v9 = *v5;
    }

    int v10 = *((_DWORD *)v3 + 22);
    int v16 = 0;
    uint64_t v11 = v3 + 13;
    uint64_t v12 = *v11;
    if (*v11)
    {
    }

    if (v12) {
      v3[12] = v12;
    }
    int v16 = 0;
    int16x8_t v13 = v3 + 16;
    if (*v13)
    {
      if (v16 != *v6) {
        goto LABEL_25;
      }
      v3[15] = *v13;
    }

    int v16 = 0;
    int8x16_t v14 = v3 + 18;
    if (*v14)
    {
      if (v16 == *v6)
      {
        v3[17] = *v14;
        return v3;
      }

uint64_t sub_100078E5C(uint64_t a1)
{
  return sub_10007A9B0(*(void *)(a1 + 56));
}

uint64_t sub_100078E84(uint64_t a1, uint64_t a2, _WORD *a3, _BYTE *a4)
{
  uint8x8_t v6 = *(__int16 **)(a1 + 72);
  unsigned int v7 = *v6;
  if ((v7 & 0x80000000) == 0)
  {
    unsigned int v10 = 0;
    v11.i64[0] = -1LL;
    v11.i64[1] = -1LL;
    v12.i64[0] = 0x100000001LL;
    v12.i64[1] = 0x100000001LL;
    while (1)
    {
      unsigned int v13 = v10 & 0xFFFFFFFC;
      if ((v10 & 0xFFFFFFFC) != 0)
      {
        uint64_t v14 = 2LL * (v13 - 4);
        unsigned int v15 = (*(unsigned __int16 *)((char *)v6 + (v14 | 4)) >> 7) & 0xF0 | ((((unsigned __int16)v6[(unint64_t)v14 / 2] >> 7) & 0xF0 | (*(unsigned __int16 *)((char *)v6 + (v14 | 2)) >> 11) & 0xF) << 8) | (*(unsigned __int16 *)((char *)v6 + (v14 | 6)) >> 11) & 0xF;
      }

      else
      {
        unsigned int v15 = 0;
      }

      int v16 = v10 + 1 > (v13 | 1) ? v10 + 1 : v13 | 1;
      unsigned int v17 = v16 - v13;
      unsigned int v18 = v16 - 1;
      if (v17 < 0x10 || v18 < v13) {
        break;
      }
      unsigned int v20 = v13 + (v17 & 0xFFFFFFF0);
      int32x4_t v21 = 0uLL;
      int32x4_t v22 = (int32x4_t)v15;
      unsigned int v23 = v17 & 0xFFFFFFF0;
      int32x4_t v24 = 0uLL;
      int32x4_t v25 = 0uLL;
      do
      {
        int32x4_t v26 = (int16x8_t *)&v6[v13];
        uint16x8_t v27 = (uint16x8_t)vcgtq_s16(*v26, v11);
        uint16x8_t v28 = (uint16x8_t)vcgtq_s16(v26[1], v11);
        int32x4_t v21 = vaddq_s32(v21, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v27), v12));
        int32x4_t v22 = vaddq_s32(v22, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v27.i8), v12));
        int32x4_t v25 = vaddq_s32(v25, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v28), v12));
        int32x4_t v24 = vaddq_s32(v24, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), v12));
        v13 += 16;
        v23 -= 16;
      }

      while (v23);
      unsigned int v15 = vaddvq_s32(vaddq_s32(vaddq_s32(v24, v22), vaddq_s32(v25, v21)));
      if (v17 != (v17 & 0xFFFFFFF0)) {
        goto LABEL_19;
      }
LABEL_20:
      int v29 = *(unsigned __int16 *)(a2 + 2LL * ((v7 >> 8) & 7));
      unsigned int v10 = 2 * v15;
      int v30 = v7;
      if (!(_BYTE)v7) {
        goto LABEL_26;
      }
      if (!*(_WORD *)(a2 + 2LL * ((v7 >> 8) & 7))) {
        goto LABEL_26;
      }
      uint64_t v31 = *(void *)(a1 + 48);
      unsigned int v37 = 0LL;
      int v36 = 0;
      sub_10007A9E8(v31, v7, &v37, &v36);
      v12.i64[0] = 0x100000001LL;
      v12.i64[1] = 0x100000001LL;
      v11.i64[0] = -1LL;
      v11.i64[1] = -1LL;
      uint64_t v32 = v36;
      if (v36 >= 1)
      {
        uint64_t v33 = v37;
        while (1)
        {
          int v34 = *v33++;
          if (v34 == v29) {
            break;
          }
          if (!--v32) {
            goto LABEL_26;
          }
        }
      }

      else
      {
LABEL_26:
        if (v30 || v29) {
          goto LABEL_4;
        }
      }

      --v10;
LABEL_4:
      uint8x8_t v6 = *(__int16 **)(a1 + 72);
      unsigned int v7 = v6[v10];
      if ((v7 & 0x80000000) != 0) {
        goto LABEL_29;
      }
    }

    unsigned int v20 = v10 & 0xFFFFFFFC;
    do
LABEL_19:
      v15 += ((unsigned __int16)v6[v20++] >> 15) ^ 1;
    while (v20 <= v10);
    goto LABEL_20;
  }

uint64_t sub_100079094(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1000C1074(88LL);
  uint64_t v3 = (uint64_t)v2;
  if (!v2) {
    return v3;
  }
  v2[1] = sub_100078E5C;
  v2[2] = 0LL;
  v2[3] = sub_100078E84;
  v2[4] = 0LL;
  if (sub_1000BCD38(a1, v2 + 5))
  {
    __int16 v4 = sub_10007AABC(a1);
    *(void *)(v3 + 56) = v4;
    if (v4)
    {
      *(void *)(v3 + 48) = v4;
      if (sub_1000BCD38(a1, (void *)(v3 + 64)))
      {
        int v7 = 0;
        uint64_t v5 = (void *)(v3 + 80);
        if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 80), &v7))
        {
          if (!*v5) {
            return v3;
          }
          if (v7 == *(_DWORD *)(v3 + 64))
          {
            *(void *)(v3 + 72) = *v5;
            return v3;
          }
        }
      }
    }
  }

  sub_100074AC8(v3);
  return 0LL;
}

uint64_t sub_100079184(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 112));
    sub_1000C0EF8(v1[11]);
    sub_1000C0EF8(v1[8]);
    sub_1000C0EF8(v1[5]);
    sub_1000C0EF8(v1[3]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_1000791D4(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 120)) {
    int v2 = a2 + 2;
  }
  else {
    int v2 = a2;
  }
  int v3 = v2 * *(_DWORD *)(a1 + 128);
  if (v3 >= 1024) {
    return 1024LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000791FC( uint64_t a1, uint64_t a2, char *__src, uint64_t a4, char *__dst, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  uint64_t v11 = a2;
  if (!(_DWORD)a4 && __dst) {
    return 0LL;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    if (!__dst) {
      return v11;
    }
    j__memmove(__dst, __src, 2 * (int)a2);
    return v11;
  }

  uint64_t v14 = 2LL * ((int)a2 + 2);
  unsigned int v15 = (void *)sub_1000CAF58(v14, a2, (uint64_t)__src, a4, (uint64_t)__dst, a6, a7, a8);
  LODWORD(v16) = *(_DWORD *)(a1 + 120);
  if ((_DWORD)v16)
  {
    *(_WORD *)unsigned int v15 = v16;
    LODWORD(v16) = 1;
  }

  if ((int)v11 >= 1)
  {
    unint64_t v16 = v16;
    if (v11 >= 0x10
      && (unsigned int v17 = (char *)v15 + 2 * v16, (unint64_t)(v17 - __src) >= 0x20))
    {
      uint64_t v18 = v11 & 0x7FFFFFF0;
      unint64_t v16 = v11 & 0xFFFFFFF0 | (unint64_t)v16;
      uint64_t v49 = v17 + 16;
      __int16 v50 = (__int128 *)(__src + 16);
      uint64_t v51 = v11 & 0xFFFFFFF0;
      do
      {
        __int128 v52 = *v50;
        *(v49 - 1) = *(v50 - 1);
        *uint64_t v49 = v52;
        v49 += 2;
        v50 += 2;
        v51 -= 16LL;
      }

      while (v51);
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    unsigned int v19 = &__src[2 * v18];
    uint64_t v20 = v11 - v18;
    unint64_t v21 = v16;
    do
    {
      __int16 v22 = *(_WORD *)v19;
      v19 += 2;
      LODWORD(v16) = v21 + 1;
      *((_WORD *)v15 + v21++) = v22;
      --v20;
    }

    while (v20);
  }

uint64_t sub_100079538( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a5)
  {
    unsigned int v13 = 0LL;
    uint64_t v14 = 2LL * (int)a2;
    int32x4_t v25 = (char *)sub_1000CAF58(v14, a2, a3, a4, 0LL, a6, a7, a8);
LABEL_6:
    uint64_t v26 = 0LL;
    uint64_t v26 = a2 & 0xFFFFFFF0;
    uint64_t v27 = (__int128 *)(a3 + 16);
    uint64_t v28 = v25 + 16;
    uint64_t v29 = v26;
    do
    {
      __int128 v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *uint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 16LL;
    }

    while (v29);
    if (v26 != a2)
    {
LABEL_11:
      int v31 = &v25[2 * v26];
      int v32 = (__int16 *)(a3 + 2 * v26);
      uint64_t v33 = a2 - v26;
      do
      {
        __int16 v34 = *v32++;
        *(_WORD *)int v31 = v34;
        v31 += 2;
        --v33;
      }

      while (v33);
    }

    goto LABEL_13;
  }

  unsigned int v13 = (char *)sub_1000CAF58(2LL * a4, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = 2LL * (int)a2;
  int32x4_t v25 = (char *)sub_1000CAF58(v14, v15, v16, v17, v18, v19, v20, v21);
LABEL_13:
  uint64_t v35 = sub_1000791FC(a1, a2, v25, a4, v13, v22, v23, v24);
  sub_1000CB038(v25, v14);
  if (a5)
  {
    if ((int)v35 >= 1)
    {
      uint64_t v36 = 0LL;
      uint64_t v36 = v35 & 0x7FFFFFF0;
      uint64_t v37 = (__int128 *)(v13 + 16);
      uint64_t v38 = (_OWORD *)(a5 + 16);
      uint64_t v39 = v35 & 0xFFFFFFF0;
      do
      {
        __int128 v40 = *v37;
        *(v38 - 1) = *(v37 - 1);
        *uint64_t v38 = v40;
        v37 += 2;
        v38 += 2;
        v39 -= 16LL;
      }

      while (v39);
      if (v36 != v35)
      {
LABEL_20:
        uint64_t v41 = (_WORD *)(a5 + 2 * v36);
        __int16 v42 = &v13[2 * v36];
        uint64_t v43 = v35 - v36;
        do
        {
          __int16 v44 = *(_WORD *)v42;
          v42 += 2;
          *v41++ = v44;
          --v43;
        }

        while (v43);
      }
    }

    sub_1000CB038(v13, 2LL * (int)a4);
  }

  return v35;
}

uint64_t sub_1000796F0(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE644(*(_DWORD *)(a1 + 48), 4, v2);
  unsigned int v4 = sub_1000BE644(*(_DWORD *)(a1 + 72), 4, v3);
  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 96), 4, v4);
  unsigned int v6 = sub_1000BE644(*(_DWORD *)(a1 + 120), 4, v5);
  unsigned int v7 = sub_1000BE644(*(_DWORD *)(a1 + 124), 4, v6);
  uint64_t result = sub_1000BE644(*(_DWORD *)(a1 + 128), 4, v7);
  unsigned int v9 = result;
  int v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= 1)
  {
    unsigned int v11 = sub_1000BE770(*(unint64_t **)(a1 + 16), 4, v10, 0xFFFFFFFFLL);
    unsigned int v12 = sub_1000BE644(v11, 4, v9);
    unsigned int v13 = sub_1000BE770(*(unint64_t **)(a1 + 32), 4, *(_DWORD *)(a1 + 8), 0xFFFFFFFFLL);
    unsigned int v14 = sub_1000BE644(v13, 4, v12);
    unsigned int v15 = sub_1000BE770(*(unint64_t **)(a1 + 56), 2, *(_DWORD *)(a1 + 48), 0xFFFFFFFFLL);
    unsigned int v16 = sub_1000BE644(v15, 4, v14);
    unsigned int v17 = sub_1000BE770(*(unint64_t **)(a1 + 80), 2, *(_DWORD *)(a1 + 72), 0xFFFFFFFFLL);
    unsigned int v18 = sub_1000BE644(v17, 4, v16);
    unsigned int v19 = sub_1000BE770(*(unint64_t **)(a1 + 104), 4, *(_DWORD *)(a1 + 96) + 3, 0xFFFFFFFFLL);
    return sub_1000BE644(v19, 4, v18);
  }

  return result;
}

void *sub_100079848(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(136LL);
  unsigned int v3 = (void *)v2;
  if (v2)
  {
    unsigned int v4 = (int *)(v2 + 8);
    if (!sub_1000BCD38(a1, (void *)(v2 + 8))
      || !sub_1000BCD38(a1, v3 + 6)
      || !sub_1000BCD38(a1, v3 + 9)
      || !sub_1000BCD38(a1, v3 + 12)
      || !sub_1000BCD38(a1, v3 + 15)
      || !sub_1000BCD38(a1, (char *)v3 + 124)
      || !sub_1000BCD38(a1, v3 + 16))
    {
      goto LABEL_30;
    }

    if (*v4 >= 1)
    {
      int v11 = 0;
      unsigned int v5 = v3 + 3;
      if (*v5)
      {
        if (v11 != *v4) {
          goto LABEL_30;
        }
        v3[2] = *v5;
      }

      int v11 = 0;
      unsigned int v6 = v3 + 5;
      if (*v6)
      {
        if (v11 != *v4) {
          goto LABEL_30;
        }
        v3[4] = *v6;
      }

      int v11 = 0;
      unsigned int v7 = v3 + 8;
      if (*v7)
      {
        if (v11 != *((_DWORD *)v3 + 12)) {
          goto LABEL_30;
        }
        v3[7] = *v7;
      }

      int v11 = 0;
      uint64_t v8 = v3 + 11;
      if (*v8)
      {
        if (v11 != *((_DWORD *)v3 + 18)) {
          goto LABEL_30;
        }
        v3[10] = *v8;
      }

      int v11 = 0;
      unsigned int v9 = v3 + 14;
      if (*v9)
      {
        if (v11 == *((_DWORD *)v3 + 24) + 3)
        {
          v3[13] = *v9;
          return v3;
        }

uint64_t sub_100079A8C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100079C54;
  *(void *)(a1 + 16) = sub_100079A8C;
  *(void *)(a1 + 24) = sub_100079C14;
  *(void *)(a1 + 32) = sub_100079D40;
  *(void *)(a1 + 40) = sub_100079F4C;
  *(void *)(a1 + 48) = sub_100079F54;
  *(void *)(a1 + 56) = sub_100079FEC;
  *(void *)(a1 + 64) = sub_10007A0A8;
  *(void *)(a1 + 88) = sub_10007A140;
  *(void *)(a1 + 96) = sub_10007A1E0;
  uint64_t v2 = 8LL * *(int *)(a1 + 216);
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  uint64_t result = sub_1000C1074(v2);
  *(void *)(a1 + 224) = result;
  if (result)
  {
    unsigned int v4 = (uint64_t *)result;
    uint64_t v5 = 0LL;
    do
    {
      if (*(_DWORD *)(a1 + 248))
      {
        uint64_t v6 = sub_1000045DC();
        v4[v5] = v6;
        int v7 = *(_DWORD *)(a1 + 216);
        if (!v6) {
          break;
        }
      }

      else
      {
        uint64_t v8 = sub_1000045DC();
        v4[v5] = v8;
        int v7 = *(_DWORD *)(a1 + 216);
        if (!v8) {
          break;
        }
      }

      ++v5;
    }

    while (v5 < v7);
    if ((int)v5 >= v7)
    {
LABEL_12:
      *(_DWORD *)(a1 + 108) = sub_100075378(*v4);
      if (*(int *)(a1 + 216) >= 2)
      {
        uint64_t v9 = 1LL;
        do
        {
          ++v9;
        }

        while (v9 < *(int *)(a1 + 216));
      }

      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void *sub_100079C14(const void *a1)
{
  uint64_t v2 = (void *)sub_1000C1074(296LL);
  unsigned int v3 = v2;
  if (v2) {
    memcpy(v2, a1, 0x128uLL);
  }
  return v3;
}

uint64_t sub_100079C54(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 248))
  {
    uint64_t v2 = *(void *)(a1 + 264);
    if (v2)
    {
      if (*(int *)(a1 + 216) >= 1)
      {
        uint64_t v3 = 0LL;
        do
          sub_10007A4F8(*(void *)(*(void *)(a1 + 264) + 8 * v3++));
        while (v3 < *(int *)(a1 + 216));
        uint64_t v2 = *(void *)(a1 + 264);
      }

      sub_1000C0EF8(v2);
    }
  }

  uint64_t v4 = *(void *)(a1 + 280);
  if (v4)
  {
    if (*(int *)(a1 + 216) >= 1)
    {
      uint64_t v5 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(a1 + 280) + 8 * v5++));
      while (v5 < *(int *)(a1 + 216));
      uint64_t v4 = *(void *)(a1 + 280);
    }

    sub_1000C0EF8(v4);
  }

  sub_1000C0EF8(*(void *)(a1 + 240));
  uint64_t v6 = *(void *)(a1 + 224);
  if (v6)
  {
    if (*(int *)(a1 + 216) >= 1)
    {
      uint64_t v7 = 0LL;
      do
        sub_100074AC8(*(void *)(*(void *)(a1 + 224) + 8 * v7++));
      while (v7 < *(int *)(a1 + 216));
      uint64_t v6 = *(void *)(a1 + 224);
    }

    sub_1000C0EF8(v6);
  }

  sub_1000C0EF8(*(void *)(a1 + 208));
  return sub_1000756B8(a1);
}

uint64_t sub_100079D40(uint64_t a1, unsigned __int16 *a2, int a3, int a4)
{
  if (a2[a4])
  {
    uint64_t v5 = *(unsigned int *)(a1 + 216);
    if ((int)v5 < 1)
    {
      int v9 = 0x7FFF;
    }

    else
    {
      uint64_t v6 = *(void *)(a1 + 224);
      uint64_t v7 = *(unsigned __int8 **)(a1 + 232);
      if (a3 <= 0)
      {
        int v9 = 0x7FFF;
        do
        {
          __int16 v22 = *v7;
          int v23 = (__int16)((*(uint64_t (**)(void))(*(void *)v6 + 32LL))() + v22);
          int v25 = v9 - v23;
          BOOL v24 = v9 - v23 < 0;
          if (v9 >= v23) {
            int v9 = v23;
          }
          if (v24) {
            int v26 = -v25;
          }
          else {
            int v26 = v25;
          }
          if (v26 < *(_DWORD *)(a1 + 192)) {
            v9 -= *(unsigned __int8 *)(*(void *)(a1 + 200) + v26);
          }
          ++v7;
          v6 += 8LL;
          --v5;
        }

        while (v5);
      }

      else
      {
        uint64_t v8 = 0LL;
        uint64_t v27 = a3;
        int v9 = 0x7FFF;
        do
        {
          if (*(_DWORD *)(a1 + 248))
          {
            LOWORD(v10) = v7[v8];
            int v11 = *(uint64_t (**)(void))(*(void *)(v6 + 8 * v8) + 32LL);
          }

          else
          {
            uint64_t v12 = v27;
            unsigned int v13 = (_WORD *)(*(void *)(v6 + 8 * v8) + 176LL);
            unsigned int v14 = a2;
            do
            {
              unsigned int v15 = *v14++;
              *v13++ = sub_10007A528(*(void *)(*(void *)(a1 + 256) + 8 * v8), v15);
              --v12;
            }

            while (v12);
            uint64_t v10 = v7[v8];
            int v11 = *(uint64_t (**)(void))(*(void *)(v6 + 8 * v8) + 32LL);
          }

          int v16 = (__int16)(v11() + v10);
          int v18 = v9 - v16;
          BOOL v17 = v9 - v16 < 0;
          if (v9 >= v16) {
            int v9 = v16;
          }
          if (v17) {
            int v19 = -v18;
          }
          else {
            int v19 = v18;
          }
          if (v19 < *(_DWORD *)(a1 + 192)) {
            v9 -= *(unsigned __int8 *)(*(void *)(a1 + 200) + v19);
          }
          ++v8;
        }

        while (v8 != v5);
      }
    }

    LODWORD(v20) = v9 & ~(v9 >> 31);
  }

  else
  {
    LOWORD(v20) = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      uint64_t v20 = *(void *)(qword_1000FDCC0 + 3624);
      if ((v20 & 0x80000000) != 0)
      {
        LOWORD(v20) = 0;
      }

      else if (v20 >> 15)
      {
        LOWORD(v20) = 0x7FFF;
      }
    }
  }

  return (__int16)v20;
}

uint64_t sub_100079F4C()
{
  return 0LL;
}

uint64_t sub_100079F54(uint64_t a1)
{
  uint64_t v2 = 0LL;
  LODWORD(v3) = 0;
  uint64_t v4 = *(void *)(a1 + 224);
  do
    uint64_t v3 = (*(unsigned int (**)(void))(*(void *)(v4 + 8 * v2++) + 48LL))() | v3;
  while (v2 < *(int *)(a1 + 216));
  return v3;
}

uint64_t sub_100079FEC(uint64_t a1, uint64_t a2)
{
  if (!sub_1000758DC(a1, a2)) {
    return 0LL;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 224) + 56LL))();
  if (*(int *)(a1 + 216) >= 2)
  {
    uint64_t v4 = 1LL;
    do
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 224) + 8 * v4++) + 56LL))();
    while (v4 < *(int *)(a1 + 216));
  }

  return v3;
}

uint64_t sub_10007A0A8(uint64_t a1, uint64_t a2)
{
  if (!sub_1000758DC(a1, a2)) {
    return 0LL;
  }
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 224) + 64LL))();
  if (*(int *)(a1 + 216) >= 2)
  {
    uint64_t v4 = 1LL;
    do
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 224) + 8 * v4++) + 64LL))();
    while (v4 < *(int *)(a1 + 216));
  }

  return v3;
}

uint64_t sub_10007A140(uint64_t a1, uint64_t a2)
{
  if (!sub_100075870(a1, a2)) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  LODWORD(v4) = 1;
  do
    uint64_t v4 = (*(unsigned int (**)(void))(*(void *)(*(void *)(a1 + 224) + 8 * v3++) + 88LL))() & v4;
  while (v3 < *(int *)(a1 + 216));
  return v4;
}

uint64_t sub_10007A1E0(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  if (!sub_1000758A0(a1, a2, a3)) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  LODWORD(v5) = 1;
  do
    uint64_t v5 = (*(unsigned int (**)(void))(*(void *)(*(void *)(a1 + 224) + 8 * v4++) + 96LL))() & v5;
  while (v4 < *(int *)(a1 + 216));
  return v5;
}

uint64_t sub_10007A280(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(296LL);
  uint64_t v3 = v2;
  if (v2)
  {
    if (!sub_1000756E0(v2, a1))
    {
LABEL_35:
      sub_1000C0EF8(v3);
      return 0LL;
    }

    if (sub_1000BCD38(a1, (void *)(v3 + 192)))
    {
      uint64_t v4 = (int *)(v3 + 216);
      if (sub_1000BCD38(a1, (void *)(v3 + 216)) && sub_1000BCCEC(a1, (_DWORD *)(v3 + 248)))
      {
        int v17 = 0;
        uint64_t v5 = (void *)(v3 + 208);
        if (sub_1000BCED0(a1, 1, (uint64_t *)(v3 + 208), &v17))
        {
          if (*v5)
          {
            if (v17 != *(_DWORD *)(v3 + 192)) {
              goto LABEL_34;
            }
            *(void *)(v3 + 200) = *v5;
          }

          int v16 = 0;
          uint64_t v6 = (void *)(v3 + 240);
          if (sub_1000BCED0(a1, 1, (uint64_t *)(v3 + 240), &v16))
          {
            if (*v6)
            {
              int v7 = v16;
              if (v16 != *v4) {
                goto LABEL_34;
              }
              *(void *)(v3 + 232) = *v6;
            }

            else
            {
              int v7 = *v4;
            }

            if (*(_DWORD *)(v3 + 248))
            {
              uint64_t v8 = sub_1000C0F68(8LL * v7);
              *(void *)(v3 + 224) = v8;
              if (v8) {
                goto LABEL_17;
              }
            }

            else
            {
              int v11 = sub_1000C0F68(8LL * v7);
              *(void *)(v3 + 264) = v11;
              if (v11)
              {
                int v12 = *v4;
                if (*v4 < 1)
                {
                  LODWORD(v13) = 0;
                }

                else
                {
                  uint64_t v13 = 0LL;
                  do
                  {
                    *(void *)(*(void *)(v3 + 264) + 8 * v13) = sub_10007A574(a1);
                    int v11 = *(_DWORD **)(v3 + 264);
                    int v12 = *(_DWORD *)(v3 + 216);
                    if (!*(void *)&v11[2 * v13]) {
                      break;
                    }
                    ++v13;
                  }

                  while (v13 < v12);
                }

                if ((int)v13 >= v12)
                {
                  *(void *)(v3 + 256) = v11;
                  unsigned int v14 = sub_1000C0F68(8LL * v12);
                  *(void *)(v3 + 224) = v14;
                  if (v14)
                  {
LABEL_17:
                    int v9 = *v4;
                    if (*v4 < 1)
                    {
                      LODWORD(v10) = 0;
                    }

                    else
                    {
                      uint64_t v10 = 0LL;
                      do
                      {
                        *(void *)(*(void *)(v3 + 224) + 8 * v10) = sub_100075448(a1);
                        int v9 = *(_DWORD *)(v3 + 216);
                        if (!*(void *)(*(void *)(v3 + 224) + 8 * v10)) {
                          break;
                        }
                        ++v10;
                      }

                      while (v10 < v9);
                    }

                    if ((int)v10 >= v9)
                    {
                      *(void *)(v3 + 8) = sub_100079C54;
                      *(void *)(v3 + 16) = sub_100079A8C;
                      *(void *)(v3 + 24) = sub_100079C14;
                      *(void *)(v3 + 32) = sub_100079D40;
                      *(void *)(v3 + 40) = sub_100079F4C;
                      *(void *)(v3 + 48) = sub_100079F54;
                      *(void *)(v3 + 56) = sub_100079FEC;
                      *(void *)(v3 + 64) = sub_10007A0A8;
                      *(void *)(v3 + 72) = 0LL;
                      *(void *)(v3 + 80) = 0LL;
                      *(void *)(v3 + 88) = sub_10007A140;
                      *(void *)(v3 + 96) = sub_10007A1E0;
                      return v3;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t sub_10007A4F8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 24));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10007A528(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 16) + 2LL * a2);
}

uint64_t sub_10007A534(uint64_t a1)
{
  uint64_t v2 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  return sub_1000BE770(*(unint64_t **)(a1 + 16), 2, *(_DWORD *)(a1 + 8) + 1, v2);
}

uint64_t sub_10007A574(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(32LL);
  if (!v2) {
    return v2;
  }
  if (sub_1000BCD38(a1, (void *)(v2 + 8)))
  {
    int v5 = 0;
    uint64_t v3 = (void *)(v2 + 24);
    if (sub_1000BCED0(a1, 2, (uint64_t *)(v2 + 24), &v5))
    {
      if (!*v3) {
        return v2;
      }
      if (v5 == *(_DWORD *)(v2 + 8) + 1)
      {
        *(void *)(v2 + 16) = *v3;
        return v2;
      }
    }
  }

  sub_1000C0EF8(*(void *)(v2 + 24));
  sub_1000C0EF8(v2);
  return 0LL;
}

uint64_t sub_10007A634(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 88));
    sub_1000C0EF8(*(void *)(v1 + 72));
    sub_1000C0EF8(*(void *)(v1 + 56));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10007A674(uint64_t a1, unsigned __int16 *a2, _DWORD *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 100);
  if ((int)v3 >= 1)
  {
    int v5 = (int *)(a1 + 16);
    uint64_t v6 = *(unsigned int *)(a1 + 8);
    int v7 = a2;
    if (v4 == 1)
    {
      while (1)
      {
        unsigned int v9 = *v7++;
        uint64_t v8 = v9;
        uint64_t v10 = *v5++;
        if (v8 > v10 || (_DWORD)v8 == 0) {
          break;
        }
        if (!--v6) {
          goto LABEL_11;
        }
      }
    }

    else
    {
      while (1)
      {
        unsigned int v13 = *v7++;
        uint64_t v12 = v13;
        uint64_t v14 = *v5++;
        if (v12 > v14) {
          break;
        }
        if (!--v6)
        {
LABEL_11:
          if ((_DWORD)v3 != 1) {
            goto LABEL_13;
          }
          uint64_t v15 = *a2 - (uint64_t)v4;
          goto LABEL_18;
        }
      }
    }

    return 0LL;
  }

uint64_t sub_10007A808(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(112LL);
  if (v2)
  {
    uint64_t v3 = (_DWORD *)(v2 + 12);
    if (!sub_1000BCCEC(a1, (_DWORD *)(v2 + 104))) {
      goto LABEL_20;
    }
    int v10 = 0;
    int v4 = (void *)(v2 + 56);
    if (*v4)
    {
      if (v10 != *(_DWORD *)(v2 + 16) + 2) {
        goto LABEL_20;
      }
      *(void *)(v2 + 48) = *v4;
    }

    int v9 = 0;
    int v5 = (void *)(v2 + 72);
    if (*v5)
    {
      if (v9 != (*(_DWORD *)(v2 + 8) - 1) * *v3) {
        goto LABEL_20;
      }
      *(void *)(v2 + 64) = *v5;
    }

    int v8 = 0;
    uint64_t v6 = (void *)(v2 + 88);
    if (*v6)
    {
      if (v8 == *v3)
      {
        *(void *)(v2 + 80) = *v6;
        return v2;
      }

uint64_t sub_10007A9B0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 48));
    sub_1000C0EF8(*(void *)(v1 + 24));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10007A9E8(uint64_t result, unsigned int a2, void *a3, _DWORD *a4)
{
  if (a3) {
    *a3 = 0LL;
  }
  *a4 = 0;
  int v4 = (unsigned __int16 *)(*(void *)(result + 40) + 2LL * *(int *)(*(void *)(result + 16) + 4LL * a2));
  int v5 = *v4;
  if (v5 != 65534)
  {
    if (v5 == 0xFFFF) {
      return result;
    }
    uint64_t v6 = 1LL;
    do
    {
      *a4 = v6;
      unsigned int v7 = v4[v6++];
    }

    while (v7 < 0xFFFE);
  }

  if (a3) {
    *a3 = v4;
  }
  return result;
}

uint64_t sub_10007AA4C(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE644(*(_DWORD *)(a1 + 32), 4, v2);
  uint64_t v4 = sub_1000BE644(*(_DWORD *)(a1 + 60), 4, v3);
  uint64_t v5 = sub_1000BE770(*(unint64_t **)(a1 + 16), 4, *(_DWORD *)(a1 + 8), v4);
  return sub_1000BE770(*(unint64_t **)(a1 + 40), 2, *(_DWORD *)(a1 + 32), v5);
}

void *sub_10007AABC(uint64_t a1)
{
  unsigned int v2 = (void *)sub_1000C1074(64LL);
  if (v2)
  {
    if (!sub_1000BCD38(a1, v2 + 1)) {
      goto LABEL_14;
    }
    if (!sub_1000BCD38(a1, v2 + 4)) {
      goto LABEL_14;
    }
    if (!sub_1000BCD38(a1, v2 + 7)) {
      goto LABEL_14;
    }
    int v7 = 0;
    unsigned int v3 = v2 + 3;
    if (*v3)
    {
      if (v7 != *((_DWORD *)v2 + 2)) {
        goto LABEL_14;
      }
      v2[2] = *v3;
    }

    int v6 = 0;
    uint64_t v4 = v2 + 6;
    if (*v4)
    {
      if (v6 == *((_DWORD *)v2 + 8))
      {
        v2[5] = *v4;
        return v2;
      }

uint64_t sub_10007ABE4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 72));
    sub_1000C0EF8(v1[7]);
    sub_1000C0EF8(v1[5]);
    sub_1000C0EF8(v1[3]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_10007AC2C(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  uint64_t v3 = sub_1000BE644(*(_DWORD *)(a1 + 64), 4, v2);
  LODWORD(v4) = *(_DWORD *)(a1 + 8);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      int v6 = *(unint64_t **)(*(void *)(a1 + 16) + 8 * v5 + 8);
      int v7 = sub_1000C88E4((unint64_t)v6);
      uint64_t v3 = sub_1000BE770(v6, 1, v7 + 1, v3);
      uint64_t v4 = *(int *)(a1 + 8);
      ++v5;
    }

    while (v5 < v4);
  }

  int v8 = *(unint64_t **)(a1 + 32);
  if (v8) {
    uint64_t v3 = sub_1000BE770(v8, 4, (int)v4 + 1, v3);
  }
  int v9 = *(unint64_t **)(a1 + 48);
  if (v9) {
    return sub_1000BE770(v9, 4, *(_DWORD *)(a1 + 8) + 1, v3);
  }
  else {
    return v3;
  }
}

uint64_t sub_10007AD08(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(80LL);
  uint64_t v3 = v2;
  if (!v2) {
    return v3;
  }
  uint64_t v4 = (int *)(v2 + 8);
  if (!sub_1000BCCEC(a1, (_DWORD *)(v3 + 64))) {
    goto LABEL_21;
  }
  int v15 = 0;
  uint64_t v5 = (void *)(v3 + 40);
  if (*v5)
  {
    if (v15 != *v4 + 1) {
      goto LABEL_21;
    }
    *(void *)(v3 + 32) = *v5;
  }

  int v14 = 0;
  int v6 = (void *)(v3 + 56);
  if (!*v6) {
    goto LABEL_12;
  }
  if (v14 != *v4 + 1)
  {
LABEL_21:
    sub_1000C0EF8(*(void *)(v3 + 72));
    sub_1000C0EF8(*(void *)(v3 + 56));
    sub_1000C0EF8(*(void *)(v3 + 40));
    sub_1000C0EF8(*(void *)(v3 + 24));
    sub_1000C0EF8(v3);
    return 0LL;
  }

  *(void *)(v3 + 48) = *v6;
LABEL_12:
  int v13 = 0;
  int v7 = (unint64_t *)(v3 + 72);
  int v8 = (void *)sub_1000C1074(8LL * *v4 + 8);
  if (!v8) {
    goto LABEL_21;
  }
  int v9 = v8;
  *int v8 = 0LL;
  if (*v4 >= 1)
  {
    uint64_t v10 = 0LL;
    unint64_t v11 = *v7;
    do
    {
      v9[v10 + 1] = v11;
      v11 += (int)(sub_1000C88E4(v11) + 1);
      ++v10;
    }

    while (v10 < *v4);
  }

  *(void *)(v3 + 16) = v9;
  *(void *)(v3 + 24) = v9;
  return v3;
}

uint64_t sub_10007AECC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 80));
    sub_1000C0EF8(v1[7]);
    sub_1000C0EF8(v1[5]);
    sub_1000C0EF8(v1[3]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_10007AF14(uint64_t a1)
{
  return *(int *)(a1 + 8);
}

uint64_t sub_10007AF1C(uint64_t a1, _WORD *a2)
{
  int v4 = sub_1000C88E4((unint64_t)"_UNKNOWN_") + 1;
  uint64_t v5 = 2LL * v4;
  int v13 = (void *)sub_1000CAF58(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1000CE25C("_UNKNOWN_", v4, (uint64_t)v13);
  uint64_t v14 = *(int *)(a1 + 8);
  if ((_DWORD)v14)
  {
    uint64_t v15 = 1LL;
    while (1)
    {
      while (1)
      {
        uint64_t v16 = v14 - 1;
        if (v14 < 1) {
          uint64_t v16 = v14;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = (v16 >> 1) + v15;
        int v19 = sub_1000CCE40(a2, *(_WORD **)(*(void *)(a1 + 16) + 8 * v18));
        if ((v19 & 0x80000000) == 0) {
          break;
        }
        uint64_t v14 = v17;
        if (!v17) {
          goto LABEL_9;
        }
      }

      if (!v19) {
        break;
      }
      v14 += ~v17;
      uint64_t v15 = v18 + 1;
      if (!v14) {
        goto LABEL_9;
      }
    }

    sub_1000CB038(v13, v5);
    if (!*(_DWORD *)(a1 + 64)) {
      LODWORD(v18) = *(_DWORD *)(*(void *)(a1 + 32) + 4 * v18);
    }
  }

  else
  {
LABEL_9:
    int v20 = sub_1000CCE40(a2, v13);
    sub_1000CB038(v13, v5);
    if (v20) {
      LOWORD(v18) = -1;
    }
    else {
      LOWORD(v18) = 0;
    }
  }

  return (unsigned __int16)v18;
}

const __int16 *sub_10007B020(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return L"_UNKNOWN_";
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 64)) {
    return *(const __int16 **)(v3 + 8LL * a2);
  }
  else {
    return *(const __int16 **)(v3 + 8LL * *(int *)(*(void *)(a1 + 48) + 4LL * a2));
  }
}

uint64_t sub_10007B06C(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, 0xFFFFFFFF);
  uint64_t v3 = sub_1000BE644(*(_DWORD *)(a1 + 64), 4, v2);
  LODWORD(v4) = *(_DWORD *)(a1 + 8);
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      uint64_t v6 = *(unint64_t **)(*(void *)(a1 + 16) + 8 * v5 + 8);
      int v7 = sub_1000CC52C((unint64_t)v6);
      uint64_t v3 = sub_1000BE770(v6, 2, v7 + 1, v3);
      uint64_t v4 = *(int *)(a1 + 8);
      ++v5;
    }

    while (v5 < v4);
  }

  uint64_t v8 = *(unint64_t **)(a1 + 32);
  if (v8) {
    uint64_t v3 = sub_1000BE770(v8, 4, (int)v4 + 1, v3);
  }
  uint64_t v9 = *(unint64_t **)(a1 + 48);
  if (v9) {
    return sub_1000BE770(v9, 4, *(_DWORD *)(a1 + 8) + 1, v3);
  }
  else {
    return v3;
  }
}

uint64_t sub_10007B148(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(88LL);
  uint64_t v3 = v2;
  if (!v2) {
    return v3;
  }
  uint64_t v4 = (int *)(v2 + 8);
  if (!sub_1000BCCEC(a1, (_DWORD *)(v3 + 64))) {
    goto LABEL_22;
  }
  int v15 = 0;
  uint64_t v5 = (void *)(v3 + 40);
  if (*v5)
  {
    if (v15 != *v4 + 1) {
      goto LABEL_22;
    }
    *(void *)(v3 + 32) = *v5;
  }

  int v14 = 0;
  uint64_t v6 = (void *)(v3 + 56);
  if (*v6)
  {
    if (v14 != *v4 + 1) {
      goto LABEL_22;
    }
    *(void *)(v3 + 48) = *v6;
  }

  int v13 = 0;
  int v7 = (void *)(v3 + 80);
  if (*v7)
  {
    if (v13 == *(_DWORD *)(v3 + 68))
    {
      *(void *)(v3 + 72) = *v7;
      goto LABEL_17;
    }

uint64_t sub_10007B310(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10007B440;
  *(void *)(a1 + 16) = sub_10007B310;
  *(void *)(a1 + 24) = sub_10007B3E0;
  *(void *)(a1 + 32) = sub_10007B470;
  *(void *)(a1 + 40) = sub_10007B544;
  *(void *)(a1 + 48) = sub_10007B54C;
  *(void *)(a1 + 56) = sub_10007B55C;
  *(void *)(a1 + 64) = sub_10007B5B8;
  *(void *)(a1 + 72) = 0LL;
  *(void *)(a1 + 80) = 0LL;
  *(void *)(a1 + 88) = sub_10007B5FC;
  *(void *)(a1 + 96) = sub_10007B640;
  uint64_t v1 = *(unsigned int *)(a1 + 160);
  if ((int)v1 >= 1)
  {
    uint64_t result = (uint64_t)sub_1000C0F68(2 * v1);
    *(void *)(a1 + 216) = result;
    if (!result) {
      return result;
    }
    if (*(int *)(a1 + 160) >= 1)
    {
      uint64_t v4 = 0LL;
      do
        *(_WORD *)(*(void *)(a1 + 216) + 2 * v4++) = 0x7FFF;
      while (v4 < *(int *)(a1 + 160));
    }
  }

  return 1LL;
}

__n128 sub_10007B3E0(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(224LL);
  if (v2)
  {
    __int128 v4 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
    *(_OWORD *)(v2 + 16) = v4;
    __int128 v5 = *(_OWORD *)(a1 + 32);
    __int128 v6 = *(_OWORD *)(a1 + 48);
    __int128 v7 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v2 + 64) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v2 + 80) = v7;
    *(_OWORD *)(v2 + 32) = v5;
    *(_OWORD *)(v2 + 48) = v6;
    __int128 v8 = *(_OWORD *)(a1 + 96);
    __int128 v9 = *(_OWORD *)(a1 + 112);
    __int128 v10 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v2 + 144) = v10;
    *(_OWORD *)(v2 + 96) = v8;
    *(_OWORD *)(v2 + 112) = v9;
    __n128 result = *(__n128 *)(a1 + 160);
    __int128 v11 = *(_OWORD *)(a1 + 176);
    __int128 v12 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(v2 + 192) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(v2 + 208) = v12;
    *(__n128 *)(v2 + 160) = result;
    *(_OWORD *)(v2 + 176) = v11;
  }

  return result;
}

uint64_t sub_10007B440(uint64_t a1)
{
  return sub_1000756B8(a1);
}

uint64_t sub_10007B470(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v11 = 0;
  __int128 v4 = (_WORD *)(a2 + 2LL * a4);
  if (!*v4)
  {
    LOWORD(v7) = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      uint64_t v7 = *(void *)(qword_1000FDCC0 + 3624);
      if ((v7 & 0x80000000) != 0) {
        return 0LL;
      }
    }

    return (__int16)v7;
  }

  else {
    int v6 = *(__int16 *)(*(void *)(a1 + 216) + 2LL * (~*(_DWORD *)(a1 + 152) + (unsigned __int16)*v4));
  }
  else {
    __int16 v9 = v6;
  }
  if (v6 >= 0) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_10007B544()
{
  return 0LL;
}

BOOL sub_10007B54C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 124) != 0;
}

BOOL sub_10007B55C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4 = a2;
  BOOL result = sub_1000758DC(a1, a2);
  if (result)
  {
    if (a3 >= 0x7FFF) {
      LOWORD(a3) = *(_WORD *)(a1 + 208);
    }
    *(_WORD *)(*(void *)(a1 + 216) + 2LL * (~*(_DWORD *)(a1 + 152) + v4)) = a3;
    return 1LL;
  }

  return result;
}

BOOL sub_10007B5B8(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  BOOL result = sub_1000758DC(a1, a2);
  if (result)
  {
    *(_WORD *)(*(void *)(a1 + 216) + 2LL * (~*(_DWORD *)(a1 + 152) + v2)) = 0x7FFF;
    return 1LL;
  }

  return result;
}

BOOL sub_10007B5FC(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100075870(a1, a2);
  if (result) {
    return sub_1000BCE28(a2, *(void **)(a1 + 216), *(_DWORD *)(a1 + 160), 2);
  }
  return result;
}

BOOL sub_10007B640(uint64_t a1, uint64_t a2, uint8x8_t a3)
{
  BOOL result = sub_1000758A0(a1, a2, a3);
  if (result)
  {
    uint64_t v7 = *(void **)(a1 + 216);
    if (v7) {
      unsigned int v8 = *(_DWORD *)(a1 + 160);
    }
    else {
      unsigned int v8 = 0;
    }
    return sub_1000BDBCC(a2, v7, v8, 2, v6) != 0;
  }

  return result;
}

uint64_t sub_10007B690(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(224LL);
  uint64_t v3 = v2;
  if (!v2) {
    return v3;
  }
  if (sub_1000756E0(v2, a1))
  {
    if (!sub_1000BCDD4(a1, (_WORD *)(v3 + 208))
      || (uint64_t v4 = sub_10007A808(a1), (*(void *)(v3 + 200) = v4) == 0LL))
    {
LABEL_11:
      sub_1000C0EF8(*(void *)(v3 + 216));
      sub_10007A634(*(void *)(v3 + 200));
      sub_1000756B8(v3);
      goto LABEL_12;
    }

    *(void *)(v3 + 192) = v4;
    *(void *)(v3 + 8) = sub_10007B440;
    *(void *)(v3 + 16) = sub_10007B310;
    *(void *)(v3 + 24) = sub_10007B3E0;
    *(void *)(v3 + 32) = sub_10007B470;
    *(void *)(v3 + 40) = sub_10007B544;
    *(void *)(v3 + 48) = sub_10007B54C;
    *(void *)(v3 + 56) = sub_10007B55C;
    *(void *)(v3 + 64) = sub_10007B5B8;
    *(void *)(v3 + 72) = 0LL;
    *(void *)(v3 + 80) = 0LL;
    *(void *)(v3 + 88) = sub_10007B5FC;
    *(void *)(v3 + 96) = sub_10007B640;
    uint64_t v5 = *(unsigned int *)(v3 + 160);
    if ((int)v5 >= 1)
    {
      uint8x8_t v6 = sub_1000C0F68(2 * v5);
      *(void *)(v3 + 216) = v6;
      if (v6)
      {
        if (*(int *)(v3 + 160) >= 1)
        {
          uint64_t v7 = 0LL;
          do
            *(_WORD *)(*(void *)(v3 + 216) + 2 * v7++) = 0x7FFF;
          while (v7 < *(int *)(v3 + 160));
        }

        return v3;
      }

      goto LABEL_11;
    }

    return v3;
  }

_DWORD *sub_10007B7D8(int a1)
{
  BOOL result = (_DWORD *)sub_1000C1074(12LL);
  if (result)
  {
    _DWORD *result = a1;
    result[1] = 4;
    uint64_t v3 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
      if (*(_DWORD *)(qword_1000FDCC0 + 2864))
      {
        result[1] = 2;
        uint64_t v3 = qword_1000FDCC0;
        if (!qword_1000FDCC0) {
          return result;
        }
        if (*(_DWORD *)(qword_1000FDCC0 + 2860)) {
          result[2] = 1;
        }
      }

      else if (*(_DWORD *)(qword_1000FDCC0 + 2884))
      {
        result[1] = 1;
        uint64_t v3 = qword_1000FDCC0;
        if (!qword_1000FDCC0) {
          return result;
        }
      }

      if (!*(_DWORD *)(v3 + 2888) || (result[1] = 0, (uint64_t v3 = qword_1000FDCC0) != 0))
      {
        if (*(_DWORD *)(v3 + 2868)) {
          result[1] = 3;
        }
      }
    }
  }

  return result;
}

_DWORD *sub_10007B880(_DWORD *result, const __int16 *a2, unint64_t a3, int32x4_t a4)
{
  uint64_t v4 = (int8x16_t *)a3;
  uint64_t v5 = a2;
  uint8x8_t v6 = result;
  int v7 = *result;
  else {
    int v8 = v7 + 1;
  }
  unsigned int v9 = v8 >> 1;
  switch(result[1])
  {
    case 0:
    case 3:
      if (v7 < -1) {
        return result;
      }
      uint64_t v10 = v9 + 1;
      if (v10 < 0x10
        || ((uint64_t v11 = 4LL * v9 + 4, (unint64_t)a2 + v11 > a3) ? (v12 = a3 + v11 > (unint64_t)a2) : (v12 = 0),
            v12))
      {
        LODWORD(v13) = 0;
        int v14 = (_DWORD *)a3;
        int v15 = (__int16 *)a2;
      }

      else
      {
        uint64_t v13 = v10 & 0xFFFFFFF0;
        int v14 = (_DWORD *)(a3 + 4 * v13);
        int v15 = (__int16 *)&a2[2 * v13];
        uint64_t v16 = a2 + 16;
        uint64_t v17 = (int32x4_t *)(a3 + 32);
        uint64_t v18 = v13;
        do
        {
          int v19 = v16 - 16;
          int16x8x2_t v91 = vld2q_s16(v19);
          int16x8x2_t v94 = vld2q_s16(v16);
          v17[-2] = vmlal_s16( vmull_s16(*(int16x4_t *)v91.val[1].i8, *(int16x4_t *)v91.val[1].i8),  *(int16x4_t *)v91.val[0].i8,  *(int16x4_t *)v91.val[0].i8);
          v17[-1] = vmlal_high_s16(vmull_high_s16(v91.val[1], v91.val[1]), v91.val[0], v91.val[0]);
          *uint64_t v17 = vmlal_s16( vmull_s16(*(int16x4_t *)v94.val[1].i8, *(int16x4_t *)v94.val[1].i8),  *(int16x4_t *)v94.val[0].i8,  *(int16x4_t *)v94.val[0].i8);
          v17[1] = vmlal_high_s16(vmull_high_s16(v94.val[1], v94.val[1]), v94.val[0], v94.val[0]);
          v17 += 4;
          v16 += 32;
          v18 -= 16LL;
        }

        while (v18);
        if (v13 == v10) {
          return result;
        }
      }

      int v47 = v9 - v13 + 1;
      do
      {
        *v14++ = *v15 * *v15 + v15[1] * v15[1];
        v15 += 2;
        --v47;
      }

      while (v47);
      return result;
    case 1:
      if (v7 < 2) {
        return result;
      }
      uint64_t v20 = v9 - 1;
      if (v20 < 7
        || ((uint64_t v21 = 4 * v20 + 4, (unint64_t)a2 + v21 > a3) ? (v22 = a3 + v21 > (unint64_t)a2) : (v22 = 0),
            v22))
      {
        LODWORD(v24) = 0;
        int v25 = (int *)a3;
        int v26 = (__int16 *)a2;
      }

      else
      {
        uint64_t v23 = v20 + 1;
        uint64_t v24 = (v20 + 1) & 0x1FFFFFFF8LL;
        int v25 = (int *)(a3 + 4 * v24);
        int v26 = (__int16 *)&a2[2 * v24];
        v27.i64[0] = 0x100000001LL;
        v27.i64[1] = 0x100000001LL;
        uint64_t v28 = v24;
        do
        {
          int16x8x2_t v92 = vld2q_s16(v5);
          v5 += 16;
          uint16x8_t v29 = (uint16x8_t)vabsq_s16(v92.val[0]);
          int32x4_t v30 = (int32x4_t)vmovl_high_u16(v29);
          int32x4_t v31 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v29.i8);
          v92.val[0] = vabsq_s16(v92.val[1]);
          v92.val[1] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v92.val[0].i8);
          int32x4_t v32 = (int32x4_t)vmovl_high_u16((uint16x8_t)v92.val[0]);
          int16x8_t v33 = (int16x8_t)vcgeq_u16((uint16x8_t)v92.val[0], v29);
          int16x8_t v34 = (int16x8_t)vcgtq_u16(v29, (uint16x8_t)v92.val[0]);
          int8x16_t v35 = (int8x16_t)vmovl_high_s16(v34);
          int8x16_t v36 = (int8x16_t)vmovl_s16(*(int16x4_t *)v34.i8);
          int32x4_t v37 = vsubq_s32(v31, (int32x4_t)vshrq_n_u32((uint32x4_t)v92.val[1], 2uLL));
          int32x4_t v38 = vsubq_s32(v30, (int32x4_t)vshrq_n_u32((uint32x4_t)v32, 2uLL));
          int8x16_t v39 = (int8x16_t)vcgtq_s32(v27, v38);
          int8x16_t v40 = (int8x16_t)vcgtq_s32(v27, v37);
          int32x4_t v41 = vsubq_s32((int32x4_t)v92.val[1], (int32x4_t)vshrq_n_u32((uint32x4_t)v31, 2uLL));
          int32x4_t v42 = vsubq_s32(v32, (int32x4_t)vshrq_n_u32((uint32x4_t)v30, 2uLL));
          int8x16_t *v4 = vbslq_s8( vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)v33.i8), v40),  (int8x16_t)v92.val[1],  vbslq_s8( vorrq_s8(v36, v40),  (int8x16_t)vaddw_u16( (uint32x4_t)vbicq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v41, 1uLL),  vandq_s8(v36, (int8x16_t)vcgtq_s32(v27, v41))),  *(uint16x4_t *)v29.i8),  (int8x16_t)vsraq_n_u32((uint32x4_t)v92.val[1], (uint32x4_t)v37, 1uLL)));
          v4[1] = vbslq_s8( vandq_s8((int8x16_t)vmovl_high_s16(v33), v39),  (int8x16_t)v32,  vbslq_s8( vorrq_s8(v35, v39),  (int8x16_t)vaddw_high_u16( (uint32x4_t)vbicq_s8( (int8x16_t)vshrq_n_u32((uint32x4_t)v42, 1uLL),  vandq_s8(v35, (int8x16_t)vcgtq_s32(v27, v42))),  v29),  (int8x16_t)vaddw_high_u16(vshrq_n_u32((uint32x4_t)v38, 1uLL), (uint16x8_t)v92.val[0])));
          v4 += 2;
          v28 -= 8LL;
        }

        while (v28);
        if (v23 == v24) {
          return result;
        }
      }

      int v48 = v9 - v24;
      do
      {
        int v49 = *v26;
        int v50 = v26[1];
        if (v49 < 0) {
          int v49 = -v49;
        }
        if (v50 < 0) {
          int v50 = -v50;
        }
        int v51 = (unsigned __int16)v49 - ((unsigned __int16)v50 >> 2);
        BOOL v12 = v51 < 1;
        int v52 = (unsigned __int16)v50 + (v51 >> 1);
        if (v12) {
          int v52 = (unsigned __int16)v50;
        }
        int v53 = (unsigned __int16)v50 - ((unsigned __int16)v49 >> 2);
        BOOL v12 = v53 < 1;
        int v54 = (unsigned __int16)v49 + (v53 >> 1);
        if (v12) {
          int v54 = (unsigned __int16)v49;
        }
        else {
          int v55 = v52;
        }
        *v25++ = v55;
        v26 += 2;
        --v48;
      }

      while (v48);
      return result;
    case 2:
      if (v7 < 2) {
        return result;
      }
      uint64_t v43 = result + 2;
      uint64_t v44 = v9 - 1;
      if (v44 < 7)
      {
        LODWORD(v45) = 0;
LABEL_66:
        __int16 v63 = (int *)a3;
        uint64_t v64 = (__int16 *)a2;
        goto LABEL_67;
      }

      LODWORD(v45) = 0;
      uint64_t v56 = 4 * v44 + 4;
      unint64_t v57 = a3 + v56;
      unint64_t v58 = (unint64_t)a2 + v56;
      BOOL v60 = (unint64_t)(result + 3) > a3 && (unint64_t)v43 < v57;
      BOOL v61 = v57 > (unint64_t)a2 && v58 > a3;
      if (v61 || v60) {
        goto LABEL_66;
      }
      uint64_t v62 = v44 + 1;
      uint64_t v45 = (v44 + 1) & 0x1FFFFFFF8LL;
      __int16 v63 = (int *)(a3 + 4 * v45);
      uint64_t v64 = (__int16 *)&a2[2 * v45];
      a4.i32[0] = *v43;
      int16x8_t v65 = (int16x8_t)vceqzq_s32(a4);
      *(int16x4_t *)v65.i8 = vmovn_s32((int32x4_t)v65);
      int8x8_t v66 = vdup_lane_s8(vmovn_s16(v65), 0);
      uint64_t v67 = v45;
      do
      {
        int16x8x2_t v93 = vld2q_s16(v5);
        v5 += 16;
        uint16x8_t v68 = (uint16x8_t)vabsq_s16(v93.val[0]);
        v93.val[0] = vabsq_s16(v93.val[1]);
        v93.val[1] = (int16x8_t)vmaxq_u16((uint16x8_t)v93.val[0], v68);
        int8x16_t v69 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v93.val[1].i8);
        int8x16_t v70 = (int8x16_t)vmovl_high_u16((uint16x8_t)v93.val[1]);
        v93.val[0] = (int16x8_t)vminq_u16((uint16x8_t)v93.val[0], v68);
        int8x16_t v71 = (int8x16_t)vmovl_high_u16((uint16x8_t)v93.val[0]);
        v93.val[0] = (int16x8_t)vmovl_u16(*(uint16x4_t *)v93.val[0].i8);
        int8x16_t v72 = (int8x16_t)vcgtq_u32(vshrq_n_u32((uint32x4_t)v69, 2uLL), (uint32x4_t)v93.val[0]);
        int8x16_t v73 = (int8x16_t)vcgtq_u32(vshrq_n_u32((uint32x4_t)v70, 2uLL), (uint32x4_t)v71);
        int32x4_t v74 = (int32x4_t)vsraq_n_u32((uint32x4_t)v69, (uint32x4_t)v93.val[0], 1uLL);
        v93.val[1] = (int16x8_t)vaddw_high_u16(vshrq_n_u32((uint32x4_t)v71, 1uLL), (uint16x8_t)v93.val[1]);
        int32x4_t v75 = (int32x4_t)vabdq_u32(vshrq_n_u32((uint32x4_t)v69, 1uLL), (uint32x4_t)v93.val[0]);
        int32x4_t v76 = (int32x4_t)vabdq_u32(vshrq_n_u32((uint32x4_t)v70, 1uLL), (uint32x4_t)v71);
        v93.val[1] = (int16x8_t)vbslq_s8( v73,  v70,  (int8x16_t)vsubq_s32( (int32x4_t)v93.val[1],  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)v93.val[1], 5uLL),  (uint32x4_t)v93.val[1],  4uLL)));
        int32x4_t v77 = (int32x4_t)vbslq_s8( v72,  v69,  (int8x16_t)vsubq_s32( v74,  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)v74, 5uLL),  (uint32x4_t)v74,  4uLL)));
        v93.val[0] = (int16x8_t)vbslq_s8( v72,  (int8x16_t)v93.val[0],  (int8x16_t)vsubq_s32( v75,  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)v75, 5uLL),  (uint32x4_t)v75,  4uLL)));
        int32x4_t v78 = (int32x4_t)vbslq_s8( v73,  v71,  (int8x16_t)vsubq_s32( v76,  (int32x4_t)vsraq_n_u32( vshrq_n_u32((uint32x4_t)v76, 5uLL),  (uint32x4_t)v76,  4uLL)));
        *(int8x8_t *)v70.i8 = vorr_s8( v66,  vmovn_s16( vuzp1q_s16( (int16x8_t)vcgtq_s32(vshrq_n_s32(v77, 4uLL), (int32x4_t)v93.val[0]),  (int16x8_t)vcgtq_s32(vshrq_n_s32((int32x4_t)v93.val[1], 4uLL), v78))));
        int32x4_t v79 = vsraq_n_s32((int32x4_t)v93.val[1], v78, 2uLL);
        int32x4_t v80 = vsraq_n_s32(v77, (int32x4_t)v93.val[0], 2uLL);
        int8x16_t *v4 = vbslq_s8( (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v70.i8, v66)), 0x1FuLL)),  (int8x16_t)v77,  (int8x16_t)vsubq_s32(v80, vshrq_n_s32(v80, 5uLL)));
        v4[1] = vbslq_s8( (int8x16_t)vcltzq_s32( vshlq_n_s32( (int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v70.i8, v66)),  0x1FuLL)),  (int8x16_t)v93.val[1],  (int8x16_t)vsubq_s32(v79, vshrq_n_s32(v79, 5uLL)));
        v4 += 2;
        v67 -= 8LL;
      }

      while (v67);
      if (v62 == v45) {
        return result;
      }
LABEL_67:
      int v81 = v9 - v45;
      do
      {
        int v84 = *v64;
        int v85 = v64[1];
        if (v84 < 0) {
          int v84 = -v84;
        }
        unsigned int v86 = (unsigned __int16)v84;
        if (v85 >= 0) {
          LOWORD(v83) = v64[1];
        }
        else {
          int v83 = -v85;
        }
        int v87 = (unsigned __int16)v83;
        else {
          int v83 = (unsigned __int16)v83;
        }
        if (v87 >= v86) {
          int v87 = v86;
        }
        if (v87 >= v83 >> 2)
        {
          unsigned int v88 = v83 + (v87 >> 1);
          int v89 = v87 - (v83 >> 1);
          if (v89 >= 0) {
            unsigned int v90 = v89;
          }
          else {
            unsigned int v90 = -v89;
          }
          int v83 = v88 - ((v88 >> 5) + (v88 >> 4));
          int v87 = v90 - ((v90 >> 5) + (v90 >> 4));
        }

        if (v87 >= v83 >> 4 && *v43 != 0) {
          int v83 = v83 + (v87 >> 2) - ((v83 + (v87 >> 2)) >> 5);
        }
        *v63++ = v83;
        v64 += 2;
        --v81;
      }

      while (v81);
      return result;
    default:
      if (v7 >= 2)
      {
        uint64_t v46 = 0LL;
        do
        {
          BOOL result = (_DWORD *)sub_10007BD9C(*v5 * *v5 + v5[1] * v5[1]);
          v4->i32[v46++] = (int)result;
          v5 += 2;
        }

        while ((int)v46 < *v6 / 2);
      }

      return result;
  }

uint64_t sub_10007BD9C(unsigned int a1)
{
  __int16 v1 = 0x7FFF;
  if (!(a1 >> 30))
  {
    int v2 = (((a1 & 0xF0000000) != 0) << 14) | 0x2000;
    if (v2 * v2 <= a1) {
      unsigned int v3 = (((a1 & 0xF0000000) != 0) << 14) | 0x2000;
    }
    else {
      unsigned int v3 = ((a1 & 0xF0000000) != 0) << 14;
    }
    if ((v3 | 0x1000) * (v3 | 0x1000) <= a1) {
      v3 |= 0x1000u;
    }
    if ((v3 | 0x800) * (v3 | 0x800) <= a1) {
      v3 |= 0x800u;
    }
    if ((v3 + 1024) * (v3 + 1024) <= a1) {
      v3 += 1024;
    }
    if ((v3 + 512) * (v3 + 512) <= a1) {
      v3 += 512;
    }
    if ((v3 + 256) * (v3 + 256) <= a1) {
      v3 += 256;
    }
    if ((v3 + 128) * (v3 + 128) <= a1) {
      v3 += 128;
    }
    if ((v3 + 64) * (v3 + 64) <= a1) {
      v3 += 64;
    }
    if ((v3 + 32) * (v3 + 32) <= a1) {
      v3 += 32;
    }
    if ((v3 + 16) * (v3 + 16) <= a1) {
      v3 += 16;
    }
    if ((v3 + 8) * (v3 + 8) <= a1) {
      v3 += 8;
    }
    if ((v3 + 4) * (v3 + 4) <= a1) {
      v3 += 4;
    }
    if ((v3 + 2) * (v3 + 2) <= a1) {
      v3 += 2;
    }
    if ((v3 + 1) * (v3 + 1) <= a1) {
      ++v3;
    }
    unsigned int v4 = a1 - v3 * v3;
    unsigned int v5 = (v3 + 1) * (v3 + 1) - a1;
    if (v3 < 0x7FFF)
    {
      BOOL v6 = v4 >= v5;
      BOOL v7 = v4 == v5;
    }

    else
    {
      BOOL v6 = 0;
      BOOL v7 = 0;
    }

    if (!v7 && v6) {
      return (__int16)(v3 + 1);
    }
    else {
      return (__int16)v3;
    }
  }

  return v1;
}

uint64_t sub_10007BEBC(uint64_t result)
{
  if (result)
  {
    __int16 v1 = (void *)result;
    if (*(_DWORD *)(result + 44))
    {
      int v2 = *(uint64_t **)(result + 48);
      if (v2) {
        sub_1000A4274(v2);
      }
    }

    sub_1000C0EF8(v1[8]);
    v1[7] = 0LL;
    v1[8] = 0LL;
    sub_1000C0EF8(v1[10]);
    v1[9] = 0LL;
    v1[10] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

void sub_10007BF10(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44)) {
    sub_1000A2A7C(*(int **)(a1 + 48));
  }
}

void sub_10007BF24( int *a1, uint64_t a2, uint64_t a3, int16x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a2;
  if (!a1[4] && !a1[10])
  {
    int v86 = *a1;
    if (!*a1) {
      goto LABEL_53;
    }
    int v87 = 0;
    unsigned int v88 = (int *)*((void *)a1 + 9);
    int v89 = (int16x8_t *)*((void *)a1 + 7);
    unsigned int v90 = a4;
    while (1)
    {
      int v93 = *v88;
      int v94 = v88[2];
      if (*v88 >= v94)
      {
        LOWORD(v91) = 0;
        int16x8x2_t v92 = v89;
        goto LABEL_60;
      }

      uint64_t v95 = v93;
      unsigned int v96 = (int *)(a3 + 4LL * v93);
      uint64_t v97 = (v94 + ~v93);
      if (v97 >= 0xF)
      {
        uint64_t v99 = v97 + 1;
        uint64_t v100 = (v97 + 1) & 0x1FFFFFFF0LL;
        int16x8x2_t v92 = (int16x8_t *)((char *)v89 + 2 * v100);
        v96 += v100;
        v93 += v100;
        int v101 = (int32x4_t *)(a3 + 32 + 4 * v95);
        BOOL v102 = v89 + 1;
        int32x4_t v103 = 0uLL;
        uint64_t v104 = v100;
        int32x4_t v105 = 0uLL;
        int32x4_t v106 = 0uLL;
        int32x4_t v107 = 0uLL;
        do
        {
          int32x4_t v109 = v101[-2];
          int32x4_t v108 = v101[-1];
          int32x4_t v111 = *v101;
          int32x4_t v110 = v101[1];
          v101 += 4;
          int16x8_t v112 = v102[-1];
          int32x4_t v105 = vmlaq_s32(v105, v108, vmovl_high_s16(v112));
          int32x4_t v103 = vmlaq_s32(v103, v109, vmovl_s16(*(int16x4_t *)v112.i8));
          int32x4_t v107 = vmlaq_s32(v107, v110, vmovl_high_s16(*v102));
          int32x4_t v106 = vmlaq_s32(v106, v111, vmovl_s16(*(int16x4_t *)v102->i8));
          v102 += 2;
          v104 -= 16LL;
        }

        while (v104);
        int v98 = vaddvq_s32(vaddq_s32(vaddq_s32(v106, v103), vaddq_s32(v107, v105)));
        if (v99 == v100) {
          goto LABEL_69;
        }
      }

      else
      {
        int v98 = 0;
        int16x8x2_t v92 = v89;
      }

      int v113 = v94 - v93;
      do
      {
        int v115 = *v96++;
        int v114 = v115;
        int v116 = v92->i16[0];
        int16x8x2_t v92 = (int16x8_t *)((char *)v92 + 2);
        v98 += v114 * v116;
        --v113;
      }

      while (v113);
LABEL_69:
      if (v98 >= 0x4000)
      {
        int v117 = v98 + 0x4000;
        unsigned int v118 = v117 >> 15;
        if (v117 >= 0x40008000)
        {
          int v119 = 0;
          do
          {
            --v119;
            int v120 = v118 >> 1;
            BOOL v81 = v118 > 0x10001;
            v118 >>= 1;
          }

          while (v81);
          goto LABEL_78;
        }

        int v119 = 0;
        if (v117 >> 29)
        {
          int v121 = v118 - 0x4000;
          if (a1[9]) {
            goto LABEL_79;
          }
        }

        else
        {
          int v120 = v117 >> 15;
          do
          {
            ++v119;
            v120 *= 2;
          }

          while (v120 < 0x4000);
LABEL_78:
          int v121 = v120 - 0x4000;
          if (a1[9])
          {
LABEL_79:
            int v122 = ((999309312 - 7783 * v121) >> 15) * v121 + 0x4000;
LABEL_82:
            int v91 = ((1 << (13 - a1[8])) + 158998 - 11357 * (v119 + (int)a2) + (v122 >> 15)) >> (14 - a1[8]);
            goto LABEL_60;
          }
        }

        unsigned int v123 = (v121 * v121 + 0x2000) >> 14;
        int v122 = 32739 * v121
             - 16055 * v123
             + 9361 * ((int)(v123 * v121 + 0x2000) >> 14)
        goto LABEL_82;
      }

      LOWORD(v91) = 0;
LABEL_60:
      v90->i16[0] = v91;
      unsigned int v90 = (int16x4_t *)((char *)v90 + 2);
      ++v88;
      ++v87;
      int v89 = v92;
      if (v87 == v86) {
        goto LABEL_53;
      }
    }
  }

  BOOL v12 = sub_1000CAFC0(4LL * *a1 + 4, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v13 = (*a1 + 1);
  if (*a1 == -1)
  {
    unsigned int v14 = -1;
    goto LABEL_19;
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = (int8x16_t *)(a3 + 4LL * **((int **)a1 + 9));
  do
  {
    uint64_t v19 = *((void *)a1 + 9);
    uint64_t v20 = v15 + 1;
    int v21 = *(_DWORD *)(v19 + 4 * (v15 + 1));
    int v22 = *(_DWORD *)(v19 + 4 * v15);
    if (v21 - v22 < 1)
    {
      __int32 v17 = 0;
      uint64_t v18 = v16;
      goto LABEL_7;
    }

    uint64_t v23 = (v21 + ~v22);
    if (v23 < 7)
    {
      __int32 v17 = 0;
      LODWORD(v24) = 0;
      uint64_t v18 = v16;
LABEL_14:
      int v31 = v24 + v22 - v21;
      do
      {
        __int32 v32 = v18->i32[0];
        uint64_t v18 = (int8x16_t *)((char *)v18 + 4);
        v17 |= v32;
        BOOL v33 = __CFADD__(v31++, 1);
      }

      while (!v33);
      goto LABEL_7;
    }

    uint64_t v25 = v23 + 1;
    uint64_t v24 = (v23 + 1) & 0x1FFFFFFF8LL;
    uint64_t v18 = (int8x16_t *)((char *)v16 + 4 * v24);
    int v26 = v16 + 1;
    int8x16_t v27 = 0uLL;
    uint64_t v28 = v24;
    int8x16_t v29 = 0uLL;
    do
    {
      int8x16_t v27 = vorrq_s8(v26[-1], v27);
      int8x16_t v29 = vorrq_s8(*v26, v29);
      v26 += 2;
      v28 -= 8LL;
    }

    while (v28);
    int8x16_t v30 = vorrq_s8(v29, v27);
    *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
    __int32 v17 = v30.i32[0] | v30.i32[1];
    if (v25 != v24) {
      goto LABEL_14;
    }
LABEL_7:
    *((_DWORD *)v12 + v15++) = v17;
    uint64_t v16 = v18;
  }

  while (v20 != v13);
  unsigned int v14 = *a1;
  if (*a1)
  {
LABEL_19:
    uint64_t v34 = 0LL;
    int8x16_t v35 = (int16x8_t *)*((void *)a1 + 7);
    int8x16_t v36 = a4;
    uint64_t v37 = v14;
    while (1)
    {
      uint64_t v38 = v34 + 1;
      int v39 = *((_DWORD *)v12 + v34 + 1) | *((_DWORD *)v12 + v34);
      if ((v39 - 1) > 0x3FFFFFFE)
      {
        int v41 = 15;
        unsigned int v44 = 0x4000;
      }

      else
      {
        int v40 = 16;
        do
        {
          v39 *= 2;
          --v40;
        }

        while (v39 < 0x40000000);
        int v41 = v40 - 1;
        BOOL v42 = __OFSUB__(v40, 2);
        int v43 = v40 - 2;
        if (v43 < 0 != v42) {
          unsigned int v44 = 0;
        }
        else {
          unsigned int v44 = 1 << v43;
        }
      }

      uint64_t v45 = *((void *)a1 + 9);
      uint64_t v46 = *(int *)(v45 + 4 * v34);
      unsigned int v47 = v41 & ~(v41 >> 31);
      int v48 = *(_DWORD *)(v45 + 4LL * (v34 + 2));
      if (v48 - (int)v46 < 1)
      {
        int v51 = 0;
      }

      else
      {
        int v49 = (int *)(a3 + 4 * v46);
        uint64_t v50 = (v48 + ~(_DWORD)v46);
        if (v50 >= 0xF)
        {
          uint64_t v54 = v50 + 1;
          uint64_t v52 = (v50 + 1) & 0x1FFFFFFF0LL;
          int v53 = &v35->i16[v52];
          v49 += v52;
          int32x4_t v55 = vdupq_n_s32(v44);
          int32x4_t v56 = vdupq_n_s32(v47);
          unint64_t v57 = (int32x4_t *)(a3 + 32 + 4 * v46);
          unint64_t v58 = v35 + 1;
          int32x4_t v59 = 0uLL;
          uint64_t v60 = v52;
          int32x4_t v61 = 0uLL;
          int32x4_t v62 = 0uLL;
          int32x4_t v63 = 0uLL;
          do
          {
            int32x4_t v65 = v57[-2];
            int32x4_t v64 = v57[-1];
            int32x4_t v67 = *v57;
            int32x4_t v66 = v57[1];
            v57 += 4;
            int32x4_t v68 = vnegq_s32(v56);
            int32x4_t v69 = vshlq_s32(vaddq_s32(v64, v55), v68);
            int32x4_t v70 = vshlq_s32(vaddq_s32(v65, v55), v68);
            int32x4_t v71 = vshlq_s32(vaddq_s32(v66, v55), v68);
            int32x4_t v72 = vshlq_s32(vaddq_s32(v67, v55), v68);
            int16x8_t v73 = v58[-1];
            int32x4_t v61 = vmlaq_s32(v61, v69, vmovl_high_s16(v73));
            int32x4_t v59 = vmlaq_s32(v59, v70, vmovl_s16(*(int16x4_t *)v73.i8));
            int32x4_t v63 = vmlaq_s32(v63, v71, vmovl_high_s16(*v58));
            int32x4_t v62 = vmlaq_s32(v62, v72, vmovl_s16(*(int16x4_t *)v58->i8));
            v58 += 2;
            v60 -= 16LL;
          }

          while (v60);
          int v51 = vaddvq_s32(vaddq_s32(vaddq_s32(v62, v59), vaddq_s32(v63, v61)));
          int8x16_t v35 = (int16x8_t *)v53;
          if (v54 == v52) {
            goto LABEL_38;
          }
        }

        else
        {
          int v51 = 0;
          LODWORD(v52) = 0;
          int v53 = (__int16 *)v35;
        }

        int v74 = v52 + v46 - v48;
        int8x16_t v35 = (int16x8_t *)v53;
        do
        {
          int v75 = *v49++;
          int v76 = (int)(v75 + v44) >> v47;
          int v77 = v35->i16[0];
          int8x16_t v35 = (int16x8_t *)((char *)v35 + 2);
          v51 += v76 * v77;
          BOOL v33 = __CFADD__(v74++, 1);
        }

        while (!v33);
      }

_DWORD *sub_10007C608(_DWORD *result, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (result)
  {
    *a2 = result[3];
    *a3 = result[5];
    *a4 = result[6];
  }

  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }

  return result;
}

_DWORD *sub_10007C638(_DWORD *result, int a2, int a3, int a4)
{
  if (result)
  {
    result[3] = a2;
    result[5] = a3;
    result[6] = a4;
  }

  return result;
}

_DWORD *sub_10007C648( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = sub_1000BCAE8(a1, "bmt0", a2, a4, a5, a6, a7, a8);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    int v10 = (_DWORD *)sub_1000C1074(88LL);
    if (v10)
    {
      if (!sub_1000BCD38(v9, v10)) {
        goto LABEL_22;
      }
      if (!sub_1000BCD38(v9, v10 + 1)) {
        goto LABEL_22;
      }
      if (!sub_1000BCD38(v9, v10 + 2)) {
        goto LABEL_22;
      }
      if (!sub_1000BCCEC(v9, v10 + 3)) {
        goto LABEL_22;
      }
      if (!sub_1000BCCEC(v9, v10 + 4)) {
        goto LABEL_22;
      }
      if (!sub_1000BCD38(v9, v10 + 5)) {
        goto LABEL_22;
      }
      if (!sub_1000BCD38(v9, v10 + 6)) {
        goto LABEL_22;
      }
      if (!sub_1000BCD38(v9, v10 + 7)) {
        goto LABEL_22;
      }
      if (!sub_1000BCD38(v9, v10 + 8)) {
        goto LABEL_22;
      }
      if (!sub_1000BCCEC(v9, v10 + 9)) {
        goto LABEL_22;
      }
      if (!sub_1000BCCEC(v9, v10 + 10)) {
        goto LABEL_22;
      }
      int v16 = 0;
      uint64_t v11 = v10 + 16;
      if (*v11)
      {
        if (v16 != v10[7]) {
          goto LABEL_22;
        }
        *((void *)v10 + 7) = *v11;
      }

      int v15 = 0;
      BOOL v12 = v10 + 20;
      if (*v12)
      {
        if (v15 == *v10 + 2)
        {
          *((void *)v10 + 9) = *v12;
          goto LABEL_26;
        }

uint64_t sub_10007C82C( uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(int *)(a1 + 1100);
  uint64_t v12 = 8 * v11;
  uint64_t v13 = (float64x2_t *)sub_1000CAFC0(8 * v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  unsigned int v14 = *(int **)(a1 + 384);
  uint64_t v15 = sub_1000C0890(a2, (uint64_t)v13, v14);
  if ((_DWORD)v15)
  {
    uint64_t v16 = v11;
    __int32 v17 = *(int **)(a1 + 368);
    uint64_t v18 = *(void *)(a1 + 376);
    uint64_t v19 = *(void *)(a1 + 336);
    if (qword_1000FDCC0)
    {
      double v20 = *(double *)(qword_1000FDCC0 + 3816);
    }

    else
    {
      double v20 = 0.0;
      if ((int)v16 < 1)
      {
LABEL_16:
        sub_1000BF30C(v17, (uint64_t)v13);
        sub_1000BF9B4((uint64_t)v14, v18);
        sub_1000BFBB0((uint64_t)v17, v18, v19);
        sub_1000BFBB0((uint64_t)v14, v19, a3);
        goto LABEL_17;
      }
    }

    double v21 = v13->f64[0] * v20;
    if (v16 >= 4)
    {
      uint64_t v22 = v16 & 0x7FFFFFFC;
      float64x2_t v23 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21, 0);
      uint64_t v24 = v13 + 1;
      __asm { FMOV            V2.2D, #1.0 }

      uint64_t v30 = v16 & 0xFFFFFFFC;
      do
      {
        int8x16_t v31 = vbicq_s8((int8x16_t)vdivq_f64(_Q2, *v24), (int8x16_t)vcgtq_f64(v23, *v24));
        v24[-1] = (float64x2_t)vbicq_s8((int8x16_t)vdivq_f64(_Q2, v24[-1]), (int8x16_t)vcgtq_f64(v23, v24[-1]));
        *uint64_t v24 = (float64x2_t)v31;
        v24 += 2;
        v30 -= 4LL;
      }

      while (v30);
      if (v22 == v16) {
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v22 = 0LL;
    }

    __int32 v32 = &v13->f64[v22];
    uint64_t v33 = v16 - v22;
    do
    {
      if (*v32 >= v21) {
        double v34 = 1.0 / *v32;
      }
      else {
        double v34 = 0.0;
      }
      *v32++ = v34;
      --v33;
    }

    while (v33);
    goto LABEL_16;
  }

uint64_t sub_10007C9A4(uint64_t a1)
{
  if (*(void *)(a1 + 1432)) {
    return sub_10007C9B8((_DWORD *)a1);
  }
  else {
    return 1LL;
  }
}

uint64_t sub_10007C9B8(_DWORD *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v2 = (int)a1[64];
  uint64_t v3 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 3888)) {
      a1[74] = 1;
    }
    unsigned int v4 = a1 + 275;
    uint64_t v5 = a1[275];
    BOOL v6 = a1 + 68;
    a1[68] = *(_DWORD *)(v3 + 3872);
    a1[69] = *(_DWORD *)(v3 + 3868);
    uint64_t v7 = 8 * v2;
    uint64_t v8 = sub_1000C1074(8 * v2);
    *(void *)(v1 + 392) = v8;
    if (!v8) {
      goto LABEL_39;
    }
  }

  else
  {
    unsigned int v4 = a1 + 275;
    uint64_t v5 = a1[275];
    BOOL v6 = a1 + 68;
    a1[68] = 0;
    a1[69] = 0;
    uint64_t v7 = 8 * v2;
    uint64_t v9 = sub_1000C1074(8 * v2);
    *(void *)(v1 + 392) = v9;
    if (!v9) {
      goto LABEL_39;
    }
  }

  uint64_t v10 = sub_1000C1074(v7);
  *(void *)(v1 + 400) = v10;
  if (!v10) {
    goto LABEL_39;
  }
  uint64_t v11 = sub_1000C1074(4 * v2);
  *(void *)(v1 + 360) = v11;
  if (!v11) {
    goto LABEL_39;
  }
  if (*(_DWORD *)(v1 + 276))
  {
    uint64_t v12 = sub_1000C1074(v7);
    *(void *)(v1 + 416) = v12;
    if (!v12) {
      goto LABEL_39;
    }
    uint64_t v13 = sub_1000C1074(v7);
    *(void *)(v1 + 424) = v13;
    if (!v13) {
      goto LABEL_39;
    }
  }

  if (*v6)
  {
    uint64_t v14 = sub_1000C11B8(4LL, v5, v5);
    *(void *)(v1 + 432) = v14;
    if (!v14) {
      goto LABEL_39;
    }
    uint64_t v15 = sub_1000C11B8(4LL, v5, v5);
    *(void *)(v1 + 440) = v15;
    if (!v15) {
      goto LABEL_39;
    }
  }

  if ((int)v2 >= 1)
  {
    uint64_t v16 = 0LL;
    do
    {
      *(void *)(*(void *)(v1 + 392) + v16) = sub_1000BF10C(v5, v5);
      *(void *)(*(void *)(v1 + 400) + v16) = sub_1000C1074(8LL * (int)v5);
      if (!*(void *)(*(void *)(v1 + 392) + v16)) {
        goto LABEL_39;
      }
      if (!*(void *)(*(void *)(v1 + 400) + v16)) {
        goto LABEL_39;
      }
      if (*(_DWORD *)(v1 + 276))
      {
        *(void *)(*(void *)(v1 + 416) + v16) = sub_1000C11B8(4LL, v5, v5);
        *(void *)(*(void *)(v1 + 424) + v16) = sub_1000C1074(4LL * (int)v5);
        if (!*(void *)(*(void *)(v1 + 416) + v16) || !*(void *)(*(void *)(v1 + 424) + v16)) {
          goto LABEL_39;
        }
      }

      v16 += 8LL;
    }

    while (8LL * v2 != v16);
  }

  uint64_t v17 = sub_1000BF10C(v5, v5);
  *(void *)(v1 + 304) = v17;
  if (!v17) {
    goto LABEL_39;
  }
  uint64_t v18 = sub_1000BF10C(v5, v5);
  *(void *)(v1 + 312) = v18;
  if (!v18) {
    goto LABEL_39;
  }
  uint64_t v19 = sub_1000BF10C(v5, v5);
  *(void *)(v1 + 320) = v19;
  if (!v19) {
    goto LABEL_39;
  }
  uint64_t v20 = sub_1000BF10C(v5, v5);
  *(void *)(v1 + 336) = v20;
  if (!v20) {
    goto LABEL_39;
  }
  if (*(_DWORD *)(v1 + 260))
  {
    uint64_t v21 = sub_1000BF10C(v5, v5);
    *(void *)(v1 + 328) = v21;
    if (!v21) {
      goto LABEL_39;
    }
  }

  if (qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 3880))
    {
      uint64_t v22 = sub_1000BF10C(v5, v5);
      *(void *)(v1 + 368) = v22;
      if (!v22) {
        goto LABEL_39;
      }
      uint64_t v23 = sub_1000BF10C(v5, v5);
      *(void *)(v1 + 376) = v23;
      if (!v23) {
        goto LABEL_39;
      }
      uint64_t v24 = sub_1000BF10C(v5, v5);
      *(void *)(v1 + 384) = v24;
      if (!v24) {
        goto LABEL_39;
      }
    }
  }

  uint64_t v25 = 8LL * (int)v5;
  uint64_t v26 = sub_1000C1074(v25);
  *(void *)(v1 + 344) = v26;
  if (!v26 || (uint64_t v27 = sub_1000C1074(v25), (*(void *)(v1 + 352) = v27) == 0LL))
  {
LABEL_39:
    sub_10007FAF8(v1);
    return 0LL;
  }

  uint64_t v930 = v1;
  if ((int)v2 >= 1)
  {
    char v35 = 0;
    __asm
    {
      FMOV            V1.2D, #0.5
      FMOV            V0.2D, #-0.5
    }

    float64x2_t v874 = _Q0;
    float64x2_t v875 = _Q1;
    int v40 = 1;
    while (1)
    {
      uint64_t v43 = v35;
      uint64_t v44 = 8LL * v35;
      v903 = *(int **)(*(void *)(v1 + 392) + v44);
      unint64_t v45 = *(void *)(*(void *)(v1 + 400) + v44);
      unint64_t v46 = *(void *)(v1 + 344);
      unint64_t v927 = *(void *)(v1 + 352);
      uint64_t v920 = v43;
      if (*(_DWORD *)(v1 + 296))
      {
        unint64_t v923 = *(void *)(v1 + 344);
        uint64_t v901 = *(void *)(*(void *)(v1 + 400) + v44);
        uint64_t v47 = *(int *)(v1 + 1100);
        int v48 = (int *)sub_1000BF10C(*(_DWORD *)(v1 + 1100), *(_DWORD *)(v1 + 1100));
        uint64_t v885 = 8 * v47;
        v915 = (float64x2_t *)sub_1000CAF58(8 * v47, v49, v50, v51, v52, v53, v54, v55);
        if (qword_1000FDCC0)
        {
          BOOL v912 = *(void *)(qword_1000FDCC0 + 3752) == 3LL;
          double v56 = (double)*(int *)(qword_1000FDCC0 + 3800);
        }

        else
        {
          BOOL v912 = 0;
          double v56 = 0.0;
        }

        v936 = *(int **)(v1 + 312);
        v941 = *(int **)(v1 + 304);
        unsigned int v898 = *(_DWORD *)(v1 + 280);
        double v58 = sub_10007FD98(v1, v43, 0, 1);
        int v59 = *(_DWORD *)(v1 + 1100);
        if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 3864))
        {
LABEL_69:
          if (v59 >= (int)v58 || sub_10007FD98(v1, v43, 1, 1) < v56)
          {
LABEL_40:
            int v42 = 0;
            goto LABEL_41;
          }

          int v882 = v40;
          uint64_t v87 = v47;
          uint64_t v88 = v898;
          if (v898)
          {
            sub_1000C0BFC(v885, v28, v29, v30, v31, v32, v33, v34);
            if (v912) {
              uint64_t v97 = v89;
            }
            else {
              uint64_t v97 = 0LL;
            }
            uint64_t v888 = v89;
            uint64_t v891 = v97;
            if (v912) {
              uint64_t v98 = 0LL;
            }
            else {
              uint64_t v98 = v89;
            }
            sub_1000C0BFC(v885, v90, v91, v92, v93, v94, v95, v96);
            uint64_t v908 = v99;
            sub_1000C0BFC(v885, v100, v101, v102, v103, v104, v105, v106);
            uint64_t v904 = v107;
            sub_1000C0BFC(v885, v108, v109, v110, v111, v112, v113, v114);
            uint64_t v879 = v98;
            uint64_t v895 = v115;
            uint64_t v116 = 0LL;
            if (v912)
            {
              uint64_t v117 = v115;
              do
              {
                *(void *)(v891 + v116) = sub_1000BF10C(v87, v87);
                *(void *)(v908 + v116) = sub_1000BF10C(v87, v87);
                sub_1000C0BFC(v885, v118, v119, v120, v121, v122, v123, v124);
                *(void *)(v904 + v116) = v125;
                sub_1000C0BFC(v885, v126, v127, v128, v129, v130, v131, v132);
                *(void *)(v117 + v116) = v133;
                v116 += 8LL;
              }

              while (8 * v87 != v116);
              uint64_t v134 = v888;
              uint64_t v888 = v98;
              uint64_t v1 = v930;
              uint64_t v88 = v898;
              uint64_t v135 = v908;
              uint64_t v136 = v904;
            }

            else
            {
              uint64_t v190 = v115;
              do
              {
                *(void *)(v879 + v116) = sub_1000BF10C(v87, v87);
                *(void *)(v908 + v116) = sub_1000BF10C(v87, v87);
                sub_1000C0BFC(v885, v191, v192, v193, v194, v195, v196, v197);
                *(void *)(v904 + v116) = v198;
                sub_1000C0BFC(v885, v199, v200, v201, v202, v203, v204, v205);
                *(void *)(v190 + v116) = v206;
                v116 += 8LL;
              }

              while (8 * v87 != v116);
              uint64_t v1 = v930;
              uint64_t v88 = v898;
              uint64_t v134 = v891;
              uint64_t v136 = v904;
              uint64_t v135 = v908;
            }
          }

          else
          {
            uint64_t v134 = 0LL;
            uint64_t v888 = 0LL;
            uint64_t v135 = 0LL;
            uint64_t v136 = 0LL;
            uint64_t v895 = 0LL;
          }

          if ((int)v87 >= 1)
          {
            uint64_t v905 = v136;
            uint64_t v910 = v135;
            uint64_t v892 = v134;
            uint64_t v207 = 0LL;
            while (1)
            {
              if ((_DWORD)v88)
              {
                v936 = *(int **)(v910 + 8 * v207);
                unint64_t v923 = *(void *)(v905 + 8 * v207);
                unint64_t v927 = *(void *)(v895 + 8 * v207);
                sub_100080118(v1, v920, 1LL, 1LL, v88, v207, v923, v34);
                sub_100080DE8(v1, v920, 1LL, v88, v207, v927, v208, v209);
                if (v912) {
                  v941 = *(int **)(v892 + 8 * v207);
                }
                sub_1000819FC(v1, v927, v920, v207, v941, v210, v211, v212);
                sub_1000820F8(v1, v923, v927, v920, v207, v936, v213, v214);
                if (!v912)
                {
                  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3880)) {
                    sub_10007C82C(v1, (unsigned int *)v941, *(void *)(v888 + 8 * v207), v215, v216, v217, v218, v219);
                  }
                  else {
                    sub_1000BF7E0(v941, *(int **)(v888 + 8 * v207));
                  }
                }
              }

              else
              {
                sub_100080118(v1, v920, 1LL, 1LL, 0LL, v207, v923, v34);
                sub_100080DE8(v1, v920, 1LL, 0LL, v207, v927, v220, v221);
                sub_1000825A4(v1, v923, v920, 1LL, v207, v941, v222, v223);
                sub_1000820F8(v1, v923, v927, v920, v207, v936, v224, v225);
              }

              uint64_t v226 = v1;
              int v227 = *(int **)(v1 + 320);
              uint64_t v228 = *(unsigned int *)(v226 + 1100);
              if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3880))
              {
                uint64_t v229 = (uint64_t)v903;
                if (sub_10007C82C( v930,  (unsigned int *)v941,  (uint64_t)v227,  v215,  v216,  v217,  v218,  v219)) {
                  goto LABEL_117;
                }
              }

              else
              {
                uint64_t v229 = (uint64_t)v903;
                if (!sub_1000BF7E0(v941, v227))
                {
LABEL_117:
                  sub_1000BFBB0((uint64_t)v936, (uint64_t)v227, (uint64_t)v48);
                  sub_1000BFB3C(v48, v923, (uint64_t)v915);
                  if ((int)v228 >= 1)
                  {
                    if (v228 < 6
                      || (unint64_t)v915 < v927 + 8 * v228 && v927 < (unint64_t)&v915->f64[v228])
                    {
                      uint64_t v230 = 0LL;
                      goto LABEL_122;
                    }

                    uint64_t v230 = v228 & 0x7FFFFFFC;
                    v238 = (float64x2_t *)(v927 + 16);
                    uint64_t v239 = v228 & 0xFFFFFFFC;
                    v240 = v915 + 1;
                    do
                    {
                      float64x2_t v241 = vsubq_f64(*v238, *v240);
                      v240[-1] = vsubq_f64(v238[-1], v240[-1]);
                      float64x2_t *v240 = v241;
                      v238 += 2;
                      v240 += 2;
                      v239 -= 4LL;
                    }

                    while (v239);
                    if (v230 != v228)
                    {
LABEL_122:
                      uint64_t v231 = v228 - v230;
                      uint64_t v232 = 8 * v230;
                      int v233 = &v915->f64[v230];
                      v234 = (double *)(v927 + v232);
                      do
                      {
                        double v235 = *v234++;
                        *int v233 = v235 - *v233;
                        ++v233;
                        --v231;
                      }

                      while (v231);
                    }
                  }

                  int v42 = 1;
                  goto LABEL_127;
                }
              }

              int v42 = 0;
LABEL_127:
              int v236 = 0;
              *(float64_t *)(v901 + 8 * v207) = v915->f64[v207];
              do
              {
                double v237 = sub_1000BF2EC((uint64_t)v48, v207, v236);
                sub_1000BF2FC(v229, v207, v236++, v237);
              }

              while ((_DWORD)v87 != v236);
              ++v207;
              uint64_t v1 = v930;
              uint64_t v88 = v898;
              if (v207 == v87) {
                goto LABEL_136;
              }
            }
          }

LABEL_135:
          int v42 = 0;
LABEL_136:
          sub_1000CB038(v915, v885);
          sub_1000BF1CC((uint64_t)v48);
          int v40 = v882;
          goto LABEL_41;
        }

        uint64_t v60 = *(unsigned int *)(v1 + 576);
        if ((int)v60 < 1)
        {
          int v64 = 0;
        }

        else
        {
          int32x4_t v61 = *(unsigned int **)(v1 + 600);
          unsigned int v62 = *v61;
          if (v60 >= 8)
          {
            uint64_t v63 = v60 & 0x7FFFFFF8;
            int8x16_t v72 = (int8x16_t)vdupq_n_s32(v62);
            int16x8_t v73 = (int32x4_t *)(v61 + 5);
            int32x4_t v74 = 0uLL;
            uint64_t v75 = v60 & 0xFFFFFFF8;
            int32x4_t v76 = 0uLL;
            do
            {
              int32x4_t v77 = v73[-1];
              int8x16_t v78 = vextq_s8(v72, (int8x16_t)v77, 0xCuLL);
              int32x4_t v79 = *v73;
              v73 += 2;
              int8x16_t v72 = (int8x16_t)v79;
              int32x4_t v80 = (int32x4_t)vmvnq_s8(vextq_s8((int8x16_t)v77, (int8x16_t)v79, 0xCuLL));
              int32x4_t v81 = vaddq_s32(v77, (int32x4_t)vmvnq_s8(v78));
              int32x4_t v82 = vaddq_s32(v79, v80);
              int32x4_t v74 = vmlaq_s32(v74, v81, v81);
              int32x4_t v76 = vmlaq_s32(v76, v82, v82);
              v75 -= 8LL;
            }

            while (v75);
            int v64 = vaddvq_s32(vaddq_s32(v76, v74));
            if (v63 == v60) {
              goto LABEL_68;
            }
            unsigned int v62 = v72.u32[3];
          }

          else
          {
            uint64_t v63 = 0LL;
            int v64 = 0;
          }

          uint64_t v83 = v60 - v63;
          unsigned int v84 = &v61[v63 + 1];
          do
          {
            int v85 = ~v62;
            unsigned int v86 = *v84++;
            unsigned int v62 = v86;
            v64 += (v86 + v85) * (v86 + v85);
            --v83;
          }

          while (v83);
        }

LABEL_92:
      unint64_t v902 = v45;
      sub_100080118(v1, v43, 1LL, 0LL, *(unsigned int *)(v1 + 280), 0xFFFFFFFFLL, v46, v34);
      sub_100080DE8(v1, v43, 0LL, *(unsigned int *)(v1 + 280), 0xFFFFFFFFLL, v927, v152, v153);
      int v883 = v40;
      unint64_t v924 = v46;
      if (*(_DWORD *)(v1 + 280))
      {
        sub_1000819FC(v1, v927, v43, 0xFFFFFFFFLL, v942, v158, v159, v160);
        uint64_t v163 = v1;
        uint64_t v164 = v46;
        uint64_t v165 = v927;
LABEL_96:
        sub_1000820F8(v163, v164, v165, v43, 0xFFFFFFFFLL, v937, v161, v162);
        goto LABEL_384;
      }

      if (!*(_DWORD *)(v1 + 272))
      {
        sub_1000825A4(v1, v46, v43, 1LL, 0xFFFFFFFFLL, v942, v159, v160);
        uint64_t v163 = v1;
        uint64_t v164 = v46;
        uint64_t v165 = v927;
        goto LABEL_96;
      }

      int v873 = *(_DWORD *)(v1 + 1404);
      uint64_t v909 = *(unsigned int *)(v1 + 1100);
      size_t v173 = 4LL * (int)v909;
      v899 = (int32x4_t *)sub_1000CAFC0(v173, v154, v155, v156, v157, v158, v159, v160);
      __int16 v188 = (int32x4_t *)sub_1000CAFC0(v173, v174, v175, v176, v177, v178, v179, v180);
      if (qword_1000FDCC0) {
        signed int v189 = *(_DWORD *)(qword_1000FDCC0 + 3792);
      }
      else {
        signed int v189 = 0;
      }
      v945[0] = 0LL;
      uint64_t v876 = 4LL * (int)v909;
      v906 = (int32x4_t *)sub_1000CAFC0(v173, v181, v182, v183, v184, v185, v186, v187);
      uint64_t v243 = *(void *)(v1 + 432);
      uint64_t v242 = *(void *)(v1 + 440);
      v877 = *(void **)(v1 + 1432);
      int v244 = v909;
      if ((int)v909 >= 1)
      {
        uint64_t v245 = 0LL;
        uint64_t v246 = 4LL * v909;
        do
        {
          uint64_t v247 = 0LL;
          do
          {
            *(_DWORD *)(*(void *)(v243 + 8 * v245) + v247) = 0;
            v247 += 4LL;
          }

          while (v246 != v247);
          ++v245;
        }

        while (v245 != v909);
        for (uint64_t i = 0LL; i != v909; ++i)
        {
          uint64_t v249 = 0LL;
          do
          {
            *(_DWORD *)(*(void *)(v242 + 8 * i) + v249) = 0;
            v249 += 4LL;
          }

          while (v246 != v249);
        }

        double v250 = (double)v189;
        if (v909 >= 4
          && ((unint64_t)v906 >= v46 + 8 * v909 || v46 >= (unint64_t)v906 + 4 * v909))
        {
          uint64_t v251 = v909 & 0xFFFFFFFC;
          float64x2_t v536 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v250, 0);
          v537 = (float64x2_t *)(v46 + 16);
          v538 = &v906->i64[1];
          uint64_t v539 = v251;
          do
          {
            float64x2_t v540 = v537[-1];
            int8x16_t v541 = (int8x16_t)vcgtzq_f64(vmulq_n_f64(v540, v250));
            int8x16_t v542 = (int8x16_t)vmlaq_f64(v875, v540, v536);
            int8x16_t v543 = (int8x16_t)vmlaq_f64(v874, v540, v536);
            *(int32x2_t *)&v540.f64[0] = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8( (int8x16_t)vcgtzq_f64(vmulq_n_f64(*v537, v250)),  (int8x16_t)vmlaq_f64(v875, *v537, v536),  (int8x16_t)vmlaq_f64(v874, *v537, v536))));
            *(v538 - 1) = (uint64_t)vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8(v541, v542, v543)));
            uint64_t *v538 = *(void *)&v540.f64[0];
            v537 += 2;
            v538 += 2;
            v539 -= 4LL;
          }

          while (v539);
          if (v251 == v909) {
            goto LABEL_156;
          }
        }

        else
        {
          uint64_t v251 = 0LL;
        }

        uint64_t v252 = v909 - v251;
        v253 = &v906->i32[v251];
        v254 = (double *)(v46 + 8 * v251);
        do
        {
          double v255 = *v254++;
          double v256 = v250 * v255 + 0.5;
          double v257 = v250 * v255 + -0.5;
          if (v255 * v250 > 0.0) {
            double v257 = v256;
          }
          *v253++ = (int)v257;
          --v252;
        }

        while (v252);
      }

        uint64_t v108 = a5;
        goto LABEL_102;
      }

        if (v17 < 1)
        {
          uint64_t v91 = v57;
          uint64_t v14 = a14;
        }

        else
        {
          uint64_t v70 = *(_WORD **)(v84 + 352);
          uint64_t v14 = a14;
          if (v70 && v17 < *(_DWORD *)(a14 + 16) - 2)
          {
            if ((int)sub_1000B3680(a1, v70, 1LL, 1LL, 0LL, 30, (uint64_t)a9) < 1)
            {
              else {
                int v71 = *a9;
              }
              int32x4_t v77 = (*v31 + *(_DWORD *)(a14 + 28LL * v17 + 4));
              sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, v71, v77, SHIDWORD(v77), 0, 0);
            }

            else
            {
              int32x4_t v76 = (*v31 + *(_DWORD *)(a14 + 28LL * v17 + 4));
              sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, *a9, v76, SHIDWORD(v76), 0, 1);
            }

            uint64_t v29 = v57 + 1;
LABEL_110:
            uint64_t v91 = v29;
            uint64_t v14 = a14;
            goto LABEL_5;
          }

          uint64_t v91 = v57;
        }
      }

      else
      {
        if (v20 != 3)
        {
          if (v20 != 2) {
            goto LABEL_5;
          }
          uint64_t v21 = v14 + 28LL * v17;
          uint64_t v22 = *(unsigned int *)(v21 + 8);
          uint64_t v83 = (int *)(v21 + 8);
          if (*(_DWORD *)(v21 + 8) == 4)
          {
            uint64_t v23 = v14 + 28LL * v17;
            uint64_t v25 = *(int *)(v23 + 4);
            uint64_t v24 = (int *)(v23 + 4);
            sub_1000CC548(v93, (__int16 *)(a2 + 2 * v25), 5);
            if (!sub_1000CBA3C(v93[0]) || !sub_1000CBA3C(v93[1]) || !sub_1000CBA3C(v93[2]) || !sub_1000CBA3C(v93[3])) {
              return 0LL;
            }
            if (*(_DWORD *)(v84 + 532) && sub_1000C28D4(v93) < 0x7D0)
            {
              sub_1000CC548(v93, (__int16 *)(a2 + 2LL * *v24), 3);
              sub_1000B3680(a1, v93, 0LL, 1LL, 0LL, 30, (uint64_t)a9);
              sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, *a9, *v24, 2, 0, 1);
              unsigned int v62 = (__int16 *)(a2 + 2LL * (*v24 + 2));
              if (*v62 == 48 && *(_WORD *)(a2 + 2LL * (*v24 + 3)) == 48)
              {
                uint64_t v63 = *(_WORD **)(v84 + 48);
              }

              else
              {
                sub_1000CC548(v93, v62, 3);
                uint64_t v63 = v93;
              }

              sub_1000B3680(a1, v63, 0LL, 1LL, 0LL, 30, (uint64_t)a9);
              sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, *a9, *v24 + 2, 2, 0, 1);
              uint64_t v29 = v91 + 2;
            }

            else
            {
              uint64_t v26 = *v83 + (uint64_t)*v24;
              uint64_t v27 = *(_WORD *)(a2 + 2 * v26);
              if (v27) {
                *(_WORD *)(a2 + 2 * v26) = 0;
              }
              uint64_t v28 = sub_1000A7D60(a1, a4, a5, a6, a7, a8, a10, a3, a2, v19, v92);
              *(_WORD *)(a2 + 2LL * (*v83 + *v24)) = v27;
              uint64_t v29 = v28 + v91;
            }

            goto LABEL_110;
          }

          int v40 = v17 + 1LL;
          int32x4_t v81 = (_DWORD *)(v14 + 28 * v40);
          int v41 = v91;
          if ((*v81 | 2) == 3
            && (int v42 = *(_DWORD *)(v14 + 28 * v40 + 8), v42 <= 2)
            && (uint64_t v43 = *(_DWORD *)(v14 + 28LL * v17 + 4), v43 + (_DWORD)v22 == *(_DWORD *)(v14 + 28 * v40 + 4)))
          {
            uint64_t v44 = v22 + v42 + 1;
          }

          else
          {
            uint64_t v44 = v22 + 1;
            uint64_t v43 = *(_DWORD *)(v14 + 28LL * v17 + 4);
          }

          int32x4_t v82 = (int *)(v14 + 28LL * v17 + 4);
          sub_1000CC548(v93, (__int16 *)(a2 + 2LL * v43), v44);
          unint64_t v45 = sub_1000B37CC(a1, (char *)v93, 0LL, 0LL, v22, 30LL, (uint64_t)a9);
          if (v45 < 1) {
            goto LABEL_3;
          }
          unint64_t v46 = v45;
          uint64_t v47 = 0;
          int v48 = -1;
LABEL_37:
          uint64_t v49 = v22;
          uint64_t v50 = v47;
LABEL_38:
          int32x4_t v80 = v50;
LABEL_39:
          uint64_t v51 = &a9[v46];
          while (1)
          {
            uint64_t v52 = __OFSUB__(v46--, 1);
            if (v46 < 0 != v52) {
              break;
            }
            uint64_t v53 = *--v51;
            sub_1000B33F8((char *)a1, v53, (uint64_t)a11, a12);
            uint64_t v54 = sub_1000CC52C((unint64_t)a11);
            if (v54 >= v49)
            {
              LODWORD(v22) = v54;
              uint64_t v55 = sub_1000CD3EC(v93, a11, v54);
              if (v48 == -1 || (int)v22 > v49)
              {
                uint64_t v47 = v55 == 0;
LABEL_49:
                int v48 = *v51;
                goto LABEL_37;
              }

              if ((_DWORD)v22 != v49) {
                goto LABEL_39;
              }
              uint64_t v47 = v55 == 0;
              if (!v80) {
                goto LABEL_49;
              }
              uint64_t v50 = 1;
              if (!v55) {
                goto LABEL_49;
              }
              goto LABEL_38;
            }
          }

          int v41 = v91;
          if (v48 == -1)
          {
LABEL_3:
            uint64_t v91 = sub_1000B8998(a1, a2 + 2LL * *v82, *v82, *v83, a3, a4, a5, a6, a7, 0LL, a8, a10, 0) + v41;
          }

          else
          {
            sub_1000B8938(a4, a5, a6, a7, 0LL, a8, a10, a3, v48, *v82, v49, 0, v80);
            ++v91;
            if (v49 > *v83)
            {
              uint64_t v14 = a14;
              if (*v81)
              {
                double v58 = (int *)(a14 + 56 + 28LL * v17);
                int v59 = 1LL;
                do
                {
                  if (*(_DWORD *)(a14 + 28 * v40 + 4) >= *v82 + v49) {
                    break;
                  }
                  int v40 = ++v59 + v17;
                  uint64_t v60 = *v58;
                  v58 += 7;
                }

                while (v60);
              }

              else
              {
                LODWORD(v59) = 1;
              }

              uint64_t v17 = v17 + v59 - 1;
              goto LABEL_5;
            }
          }

        double v401 = 0;
        *(void *)(v432 + 8 * v186) = 0LL;
LABEL_93:
        int v150 = v433;
        signed int v189 = v427;
        goto LABEL_53;
      }

      int v150 = v433;
      uint64_t v52 = v434;
      unsigned int v84 = v418;
LABEL_53:
      uint64_t v190 = v188 + v428;
      if ((v438[v186] & 8) != 0 && v435 != 0xFFFF) {
        ++v190;
      }
      v428 = v190;
      if (++v186 == v189) {
        goto LABEL_127;
      }
    }

    __int16 v188 = 0;
    uint64_t v187 = v400 != 0;
    unsigned int v84 = v418;
    if (!v204) {
      goto LABEL_92;
    }
    goto LABEL_93;
  }

  signed int v189 = v174;
  v428 = 0;
  double v401 = 1;
LABEL_127:
  uint64_t v249 = v408;
  double v250 = v413;
  if (*__src != 32 && !*v417)
  {
    uint64_t v365 = 0LL;
    uint64_t v366 = 0;
    uint64_t v367 = (int)v413 <= 1 ? 1 : v413;
    v368 = (v367 - 1);
    while (v367 - 1 != v365)
    {
      if (__src[v366] != 32)
      {
        uint64_t v369 = *(int *)&v84[v365 * 4];
        if ((_DWORD)v369)
        {
          uint64_t v370 = v369 + v366;
          uint64_t v366 = v370 + 1;
          if ((_DWORD)v370 + 1 == v417[v365 + 1] && __src[v370 - 1] != 32)
          {
            ++v365;
            if (__src[v370] == 32) {
              continue;
            }
          }
        }
      }

      goto LABEL_129;
    }

    uint64_t v377 = v417[v368];
    if (__src[v377] != 32)
    {
      uint64_t v378 = *(int *)&v84[4 * v368];
      if ((_DWORD)v378)
      {
        uint64_t v379 = v378 + v377;
        if ((_DWORD)v379 == v417[v367] && !__src[v379] && (int)v413 <= (int)v404 && __src[v379 - 1] != 32 && v401 != 0)
        {
          v440[0] = 0LL;
          if ((int)v413 < 1)
          {
LABEL_308:
            int v39 = 0LL;
LABEL_315:
            *uint64_t v408 = v413;
            sub_1000CB094(v403);
            return v39;
          }

          uint64_t v381 = 0LL;
          uint64_t v382 = v417;
          uint64_t v383 = v418;
          while (1)
          {
            uint64_t v384 = v430[v381];
            if (v384 != -1 && v425[v381])
            {
              v407[v381] = v384;
            }

            else
            {
              int v385 = *(int *)&v383[4 * v381];
              if (v381)
              {
                int v386 = 0LL;
                uint64_t v387 = v382[v381];
                uint64_t v388 = 2 * v385;
                while (1)
                {
                  if ((_DWORD)v385 == *(_DWORD *)&v418[4 * v386])
                  {
                    uint64_t v389 = memcmp(&__src[v387], &__src[v382[v386]], 2 * v385);
                    uint64_t v382 = v417;
                    if (!v389) {
                      break;
                    }
                  }

                  if (v381 == ++v386) {
                    goto LABEL_304;
                  }
                }

                if (v386 != 0xFFFFFFFFLL)
                {
                  v407[v381] = v407[v386];
                  uint64_t v382 = v417;
                  uint64_t v383 = v418;
                  goto LABEL_293;
                }
              }

              else
              {
                uint64_t v387 = *v382;
                uint64_t v388 = 2 * v385;
              }

LABEL_156:
      int v258 = *(_DWORD *)(v1 + 1072);
      if (v258 >= 1)
      {
        int v259 = 0;
        unsigned __int16 v260 = 0;
        uint64_t v261 = 4LL * v909;
        v262 = (int32x4_t *)((char *)v899 + v261);
        v263 = (int32x4_t *)((char *)v188 + v261);
        v264 = &v906->i8[v261];
        BOOL v266 = v899 < v263 && v188 < v262;
        BOOL v889 = v266;
        unint64_t v896 = (unint64_t)v262;
        BOOL v268 = v899 < (int32x4_t *)v264 && v906 < v262;
        BOOL v886 = v268;
        unint64_t v893 = (unint64_t)v263;
        BOOL v270 = v188 < (int32x4_t *)v264 && v906 < v263;
        BOOL v880 = v270;
        int32x4_t v878 = vdupq_n_s32(v189);
        while (2)
        {
          if (*(_DWORD *)(v1 + 268)) {
            _ZF = v260 == 0;
          }
          else {
            _ZF = 1;
          }
          uint64_t v271 = v260;
          if (_ZF) {
            uint64_t v273 = v260;
          }
          else {
            uint64_t v273 = 1LL;
          }
          uint64_t v931 = *(void *)(*v877 + 8LL * v260);
          uint64_t v913 = v260;
          if (*(_DWORD *)(*(void *)(v1 + 1432) + 28LL))
          {
            int v274 = sub_100004688(v1);
            uint64_t v271 = v913;
            if ((_DWORD)v913 == v274)
            {
              int v258 = *(_DWORD *)(v1 + 1072);
              int v244 = v909;
              goto LABEL_188;
            }

            int v278 = 1;
            int v244 = v909;
          }

          else
          {
LABEL_188:
            if (v258 <= v259)
            {
              int v278 = 1;
            }

            else
            {
              if (*(_DWORD *)(v1 + 1176))
              {
                v275 = (int *)(*(void *)(v1 + 1160) + 4 * v271);
                int v277 = *v275;
                int v276 = v275[1];
              }

              else
              {
                v279 = (unsigned __int16 *)(*(void *)(v1 + 1144) + 2 * v271);
                int v277 = *v279;
                int v276 = v279[1];
              }

              int v278 = v276 - v277;
            }
          }

          if (v931) {
            BOOL v280 = v278 == 0;
          }
          else {
            BOOL v280 = 1;
          }
          if (!v280)
          {
            if (v278 >= 1)
            {
              uint64_t v916 = v278;
              if (v244 > 0)
              {
                uint64_t v281 = 0LL;
                while (1)
                {
                  uint64_t v282 = *(void *)(v931 + 8);
                  unsigned int v283 = *(__int16 *)(v282 + 2 * v281);
                  if (*(_WORD *)(v282 + 2 * v281)) {
                    break;
                  }
LABEL_202:
                  if (++v281 == v916) {
                    goto LABEL_176;
                  }
                }

                sub_100004868(v930, v913, v281, v945);
                unint64_t v285 = v945[0];
                if (v909 < 8)
                {
                  uint64_t v286 = 0LL;
                  v287 = v899;
                  goto LABEL_229;
                }

                v287 = v899;
                BOOL v288 = (unint64_t)v899 >= v945[0] + v909 || v945[0] >= v896;
                int v289 = v889;
                if (!v288) {
                  int v289 = 1;
                }
                int v290 = v289 | v886;
                else {
                  int v292 = 1;
                }
                if (((v292 | v880) & 1) != 0)
                {
                  uint64_t v286 = 0LL;
                  goto LABEL_229;
                }

                int32x4_t v293 = vdupq_n_s32(v283);
                if (v909 >= 0x10)
                {
                  uint64_t v305 = v909 & 0xFFFFFFF0;
                  v306 = v188;
                  v307 = v899;
                  v308 = v906;
                  v309 = (int8x16_t *)v945[0];
                  do
                  {
                    int8x16_t v310 = *v309++;
                    int32x4_t v311 = vmlaq_s32( vnegq_s32(v308[3]),  v878,  (int32x4_t)vqtbl1q_s8(v310, (int8x16_t)xmmword_1000F0300));
                    int32x4_t v312 = vmlaq_s32(vnegq_s32(*v308), v878, (int32x4_t)vqtbl1q_s8(v310, (int8x16_t)xmmword_1000F0330));
                    int32x4_t v313 = vmlaq_s32( vnegq_s32(v308[1]),  v878,  (int32x4_t)vqtbl1q_s8(v310, (int8x16_t)xmmword_1000F0320));
                    int32x4_t v314 = vmlaq_s32( vnegq_s32(v308[2]),  v878,  (int32x4_t)vqtbl1q_s8(v310, (int8x16_t)xmmword_1000F0310));
                    int32x4_t *v307 = v312;
                    v307[1] = v313;
                    v307[2] = v314;
                    v307[3] = v311;
                    int8x16_t v284 = (int8x16_t)vmulq_s32(v311, v293);
                    int32x4_t *v306 = vmulq_s32(v312, v293);
                    v306[1] = vmulq_s32(v313, v293);
                    v306[2] = vmulq_s32(v314, v293);
                    v306[3] = (int32x4_t)v284;
                    v308 += 4;
                    v307 += 4;
                    v306 += 4;
                    v305 -= 16LL;
                  }

                  while (v305);
                  if ((v909 & 0xFFFFFFF0) != v909)
                  {
                    uint64_t v286 = v909 & 0xFFFFFFF0;
                    uint64_t v294 = v286;
                    if ((v909 & 8) == 0) {
                      goto LABEL_229;
                    }
                    goto LABEL_221;
                  }
                }

                else
                {
                  uint64_t v294 = 0LL;
LABEL_221:
                  v295 = (uint64_t *)(v285 + v294);
                  v296 = (int32x4_t *)((char *)v906 + 4 * v294);
                  v297 = (int32x4_t *)((char *)v899 + 4 * v294);
                  v298 = (int32x4_t *)((char *)v188 + 4 * v294);
                  uint64_t v299 = v294 - (v909 & 0xFFFFFFF8);
                  do
                  {
                    uint64_t v300 = *v295++;
                    v284.i64[0] = v300;
                    int32x4_t v302 = *v296;
                    int32x4_t v301 = v296[1];
                    v296 += 2;
                    int32x4_t v303 = vmlaq_s32(vnegq_s32(v302), v878, (int32x4_t)vqtbl1q_s8(v284, (int8x16_t)xmmword_1000F0330));
                    int32x4_t v304 = vmlaq_s32(vnegq_s32(v301), v878, (int32x4_t)vqtbl1q_s8(v284, (int8x16_t)xmmword_1000F0320));
                    int32x4_t *v297 = v303;
                    v297[1] = v304;
                    v297 += 2;
                    int8x16_t v284 = (int8x16_t)vmulq_s32(v303, v293);
                    int32x4_t *v298 = (int32x4_t)v284;
                    v298[1] = vmulq_s32(v304, v293);
                    v298 += 2;
                    v299 += 8LL;
                  }

                  while (v299);
                  uint64_t v286 = v909 & 0xFFFFFFF8;
                  if (v286 != v909)
                  {
LABEL_229:
                    uint64_t v315 = v909 - v286;
                    v316 = &v188->i32[v286];
                    v317 = &v287->i32[v286];
                    v318 = &v906->i32[v286];
                    v319 = (unsigned __int8 *)(v285 + v286);
                    do
                    {
                      int v321 = *v319++;
                      int v320 = v321;
                      int v322 = *v318++;
                      int v323 = v189 * v320 - v322;
                      *v317++ = v323;
                      *v316++ = v323 * v283;
                      --v315;
                    }

                    while (v315);
                  }
                }

                uint64_t v324 = 0LL;
                int v325 = 1;
                while (2)
                {
                  v326 = *(_DWORD **)(v242 + 8 * v324);
                  v327 = *(int **)(v243 + 8 * v324);
                  int v328 = v325;
                  v329 = v287;
LABEL_242:
                  int v335 = *v327;
                  int v336 = v329->i32[0] * v188->i32[v324];
                  if (v336 > 0x3FFFFFFF)
                  {
                    int v337 = v336 - 0x3FFFFFFF;
                    BOOL v338 = v336 == 0x7FFFFFFF;
                    if (v336 == 0x7FFFFFFF) {
                      int v339 = 2;
                    }
                    else {
                      int v339 = 1;
                    }
                    int v340 = *v326 + v339;
                    if (v338) {
                      int v336 = 1;
                    }
                    else {
                      int v336 = v337;
                    }
                    goto LABEL_256;
                  }

                  if (v336 < -1073741822)
                  {
                    if (v336 <= -2147483645) {
                      int v341 = -2147483645;
                    }
                    else {
                      int v341 = v329->i32[0] * v188->i32[v324];
                    }
                    unsigned int v342 = (v341 - v336 - (v336 < 0x80000003)) / 0x3FFFFFFF;
                    int v336 = v336 - v342 + (v342 << 30) + 0x3FFFFFFF;
                    int v340 = *v326 + ~v342;
LABEL_256:
                    _DWORD *v326 = v340;
                  }

                  int v334 = v336 + v335;
                  if (v334 <= 0x3FFFFFFF)
                  {
                    if (v334 < -1073741822)
                    {
                      if (v334 <= -2147483645) {
                        int v343 = -2147483645;
                      }
                      else {
                        int v343 = v334;
                      }
                      unsigned int v344 = (v343 - v334 - (v334 < 0x80000003)) / 0x3FFFFFFF;
                      int v334 = v334 - v344 + (v344 << 30) + 0x3FFFFFFF;
                      int v333 = *v326 + ~v344;
LABEL_240:
                      _DWORD *v326 = v333;
                    }

                    *v327++ = v334;
                    ++v326;
                    v329 = (int32x4_t *)((char *)v329 + 4);
                    _VF = __OFSUB__(v328--, 1);
                    if ((v328 < 0) ^ _VF | (v328 == 0))
                    {
                      ++v324;
                      ++v325;
                      if (v324 == v909) {
                        goto LABEL_202;
                      }
                      continue;
                    }

                    goto LABEL_242;
                  }

                  break;
                }

                int v330 = v334 - 0x3FFFFFFF;
                BOOL v331 = v334 == 0x7FFFFFFF;
                if (v334 == 0x7FFFFFFF) {
                  int v332 = 2;
                }
                else {
                  int v332 = 1;
                }
                int v333 = *v326 + v332;
                if (v331) {
                  int v334 = 1;
                }
                else {
                  int v334 = v330;
                }
                goto LABEL_240;
              }

              for (uint64_t j = 0LL; j != v916; ++j)
              {
                if (*(_WORD *)(*(void *)(v931 + 8) + 2 * j)) {
                  sub_100004868(v930, v913, j, v945);
                }
              }
            }

    sub_1000CB038(v161, v430);
  }

  HIDWORD(v461) = 0;
  if (v111 >= 1) {
    goto LABEL_158;
  }
LABEL_394:
  int32x4_t v61 = 0LL;
LABEL_395:
  sub_1000CB038(v440, 120LL);
  double v406 = sub_1000B3288(v441);
  sub_1000CB038(v437, 2LL * (v406 + 1));
  double v407 = sub_1000B324C(v441);
  sub_1000CB038(v438, 2LL * (v407 + 1));
  sub_1000CB038(v110, 28LL * (v108 + 1));
  if (v446) {
    sub_1000CB038(v446, v428);
  }
  if (v58) {
    sub_1000CB038(v58, v428);
  }
  uint64_t v408 = 4LL * v428;
  sub_1000CB038(v455, v408);
  sub_1000CB038(v459, v408);
  sub_1000CB038(v450, v408);
  sub_1000CB038(v458, v429);
  return v61;
}

LABEL_176:
            sub_1000CF924();
            int v244 = v909;
            uint64_t v1 = v930;
            LOWORD(v271) = v913;
          }

LABEL_177:
          unsigned __int16 v260 = v271 + 1;
          int v259 = (unsigned __int16)(v271 + 1);
          int v258 = *(_DWORD *)(v1 + 1072);
          if (v258 <= v259) {
            break;
          }
          continue;
        }
      }

      if (v244 >= 1)
      {
        unint64_t v346 = 0LL;
        double v347 = 1.0 / (double)(v189 * v873 * v189);
        uint64_t v348 = 1LL;
        do
        {
          unint64_t v349 = 0LL;
          do
          {
            int v350 = *(_DWORD *)(*(void *)(v242 + 8 * v346) + 4 * v349);
            double v351 = (double)v350 * 1073741820.0;
            if (!v350) {
              double v351 = -0.0;
            }
            double v352 = v347 * (v351 + (double)*(int *)(*(void *)(v243 + 8 * v346) + 4 * v349));
            sub_1000BF2FC((uint64_t)v942, v346, v349, v352);
            if (v349 < v346) {
              sub_1000BF2FC((uint64_t)v942, v349, v346, v352);
            }
            ++v349;
          }

          while (v348 != v349);
          ++v346;
          ++v348;
        }

        while (v346 != v909);
      }

      sub_1000CB038(v906, v876);
      sub_1000CB038(v188, v876);
      sub_1000CB038(v899, v876);
      int v881 = *(_DWORD *)(v930 + 1404);
      uint64_t v932 = *(unsigned int *)(v930 + 1100);
      size_t v353 = 4LL * (int)v932;
      v894 = sub_1000CAFC0(v353, v354, v355, v356, v357, v358, v359, v360);
      v368 = sub_1000CAFC0(v353, v361, v362, v363, v364, v365, v366, v367);
      v900 = (int32x2_t *)sub_1000CAFC0(v353, v369, v370, v371, v372, v373, v374, v375);
      uint64_t v887 = v353;
      v897 = (int32x2_t *)sub_1000CAFC0(v353, v376, v377, v378, v379, v380, v381, v382);
      uint64_t v384 = *(void *)(v930 + 432);
      uint64_t v383 = *(void *)(v930 + 440);
      if (qword_1000FDCC0) {
        int v385 = *(_DWORD *)(qword_1000FDCC0 + 3792);
      }
      else {
        int v385 = 0;
      }
      v945[0] = 0LL;
      v890 = *(void **)(v930 + 1432);
      int v386 = v932;
      if ((int)v932 >= 1)
      {
        uint64_t v387 = 0LL;
        uint64_t v388 = 4LL * v932;
        do
        {
          uint64_t v389 = 0LL;
          do
          {
            *(_DWORD *)(*(void *)(v384 + 8 * v387) + v389) = 0;
            v389 += 4LL;
          }

          while (v388 != v389);
          ++v387;
        }

        while (v387 != v932);
        for (uint64_t k = 0LL; k != v932; ++k)
        {
          uint64_t v391 = 0LL;
          do
          {
            *(_DWORD *)(*(void *)(v383 + 8 * k) + v391) = 0;
            v391 += 4LL;
          }

          while (v388 != v391);
        }

        double v392 = (double)v385;
        if (v932 >= 0xA)
        {
          uint64_t v393 = 0LL;
          v506 = (int32x2_t *)((char *)v900 + 4 * v932);
          v507 = (int32x2_t *)((char *)v897 + 4 * v932);
          unint64_t v508 = v924 + 8 * v932;
          unint64_t v509 = v927 + 8 * v932;
          BOOL v511 = (unint64_t)v900 < v508 && v924 < (unint64_t)v506;
          BOOL v513 = (unint64_t)v900 < v509 && v927 < (unint64_t)v506;
          BOOL v515 = (unint64_t)v897 < v508 && v924 < (unint64_t)v507;
          BOOL v517 = (unint64_t)v897 < v509 && v927 < (unint64_t)v507;
          if ((v897 >= v506 || v900 >= v507) && !v511 && !v513 && !v515 && !v517)
          {
            uint64_t v393 = v932 & 0xFFFFFFFE;
            uint64_t v519 = v393;
            float64x2_t v520 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v392, 0);
            v521 = v897;
            v522 = v900;
            v523 = (float64x2_t *)v927;
            v524 = (float64x2_t *)v924;
            do
            {
              float64x2_t v525 = *v524++;
              *v522++ = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8( (int8x16_t)vcgtzq_f64(vmulq_n_f64(v525, v392)),  (int8x16_t)vmlaq_f64(v875, v525, v520),  (int8x16_t)vmlaq_f64(v874, v525, v520))));
              float64x2_t v526 = *v523++;
              *v521++ = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8( (int8x16_t)vcgtzq_f64(vmulq_n_f64(v526, v392)),  (int8x16_t)vmlaq_f64(v875, v526, v520),  (int8x16_t)vmlaq_f64(v874, v526, v520))));
              v519 -= 2LL;
            }

            while (v519);
            if (v393 == v932) {
              goto LABEL_299;
            }
          }
        }

        else
        {
          uint64_t v393 = 0LL;
        }

        uint64_t v394 = v932 - v393;
        uint64_t v395 = 4 * v393;
        v396 = (_DWORD *)v897 + v393;
        uint64_t v397 = 8 * v393;
        v398 = (double *)(v927 + 8 * v393);
        v399 = (int32x2_t *)((char *)v900 + v395);
        v400 = (double *)(v924 + v397);
        do
        {
          double v401 = *v400++;
          double v402 = v392 * v401 + 0.5;
          double v403 = v392 * v401 + -0.5;
          if (v401 * v392 <= 0.0) {
            double v404 = v403;
          }
          else {
            double v404 = v402;
          }
          v399->i32[0] = (int)v404;
          v399 = (int32x2_t *)((char *)v399 + 4);
          double v405 = *v398++;
          double v406 = v392 * v405 + 0.5;
          double v407 = v392 * v405 + -0.5;
          if (v405 * v392 > 0.0) {
            double v407 = v406;
          }
          *v396++ = (int)v407;
          --v394;
        }

        while (v394);
      }

LABEL_299:
      uint64_t v408 = v930;
      int v409 = *(_DWORD *)(v930 + 1072);
      if (v409 < 1) {
        goto LABEL_373;
      }
      int v410 = 0;
      unsigned __int16 v411 = 0;
      while (2)
      {
        if (*(_DWORD *)(v408 + 268)) {
          BOOL v413 = v411 == 0;
        }
        else {
          BOOL v413 = 1;
        }
        uint64_t v412 = v411;
        if (v413) {
          uint64_t v414 = v411;
        }
        else {
          uint64_t v414 = 1LL;
        }
        uint64_t v415 = *(void *)(*v890 + 8LL * v411);
        uint64_t v911 = v415;
        uint64_t v914 = v411;
        if (!*(_DWORD *)(*(void *)(v408 + 1432) + 28LL)) {
          goto LABEL_313;
        }
        int v917 = v410;
        int v416 = sub_100004688(v408);
        uint64_t v412 = v914;
        if ((_DWORD)v914 == v416)
        {
          int v409 = *(_DWORD *)(v408 + 1072);
          int v386 = v932;
          uint64_t v415 = v911;
          int v410 = v917;
LABEL_313:
          if (v409 <= v410)
          {
            int v420 = 1;
          }

          else
          {
            if (*(_DWORD *)(v930 + 1176))
            {
              v417 = (int *)(*(void *)(v930 + 1160) + 4 * v412);
              int v419 = *v417;
              int v418 = v417[1];
            }

            else
            {
              v421 = (unsigned __int16 *)(*(void *)(v930 + 1144) + 2 * v412);
              int v419 = *v421;
              int v418 = v421[1];
            }

            int v420 = v418 - v419;
          }

          goto LABEL_320;
        }

        int v420 = 1;
        int v386 = v932;
        uint64_t v415 = v911;
LABEL_320:
        if (v415) {
          BOOL v422 = v420 == 0;
        }
        else {
          BOOL v422 = 1;
        }
        uint64_t v408 = v930;
        if (v422) {
          goto LABEL_302;
        }
        if (v420 < 1) {
          goto LABEL_301;
        }
        uint64_t v918 = v420;
        if (v386 <= 0)
        {
          for (uint64_t m = 0LL; m != v918; ++m)
          {
            if (*(_WORD *)(*(void *)(v415 + 8) + 2 * m))
            {
              sub_100004868(v930, v914, m, v945);
              uint64_t v415 = v911;
            }
          }

          goto LABEL_301;
        }

        uint64_t v423 = 0LL;
        while (2)
        {
          uint64_t v424 = *(void *)(v415 + 8);
          int v425 = *(__int16 *)(v424 + 2 * v423);
          if (!*(_WORD *)(v424 + 2 * v423)) {
            goto LABEL_327;
          }
          uint64_t v907 = v423;
          sub_100004868(v930, v914, v423, v945);
          uint64_t v423 = v907;
          uint64_t v415 = v911;
          v426 = *(__int16 **)(*(void *)(v911 + 24) + 8 * v907);
          v428 = v897;
          v427 = v900;
          v429 = (unsigned __int8 *)v945[0];
          v430 = v894;
          v431 = v368;
          uint64_t v432 = v932;
          do
          {
            __int32 v435 = v427->i32[0];
            v427 = (int32x2_t *)((char *)v427 + 4);
            _DWORD *v430 = v385 * *v429 - v435;
            int v436 = *v426++;
            int v433 = v436;
            if (!qword_1000FDCC0 || !*(_DWORD *)(qword_1000FDCC0 + 3740)) {
              v433 += *v429 * v425;
            }
            __int32 v434 = v428->i32[0];
            v428 = (int32x2_t *)((char *)v428 + 4);
            *v431++ = v433 * v385 - v434 * v425;
            ++v430;
            ++v429;
            --v432;
          }

          while (v432);
          uint64_t v437 = 0LL;
          while (2)
          {
            v438 = *(int **)(v384 + 8 * v437);
            v439 = *(_DWORD **)(v383 + 8 * v437);
            int v440 = v932 + 1;
            v441 = v894;
            do
            {
              int v447 = *v438;
              int v448 = *v441 * *((_DWORD *)v368 + v437);
              if (v448 <= 0x3FFFFFFF)
              {
                if (v448 >= -1073741822) {
                  goto LABEL_361;
                }
                if (v448 <= -2147483645) {
                  int v453 = -2147483645;
                }
                else {
                  int v453 = *v441 * *((_DWORD *)v368 + v437);
                }
                unsigned int v454 = (v453 - v448 - (v448 < 0x80000003)) / 0x3FFFFFFF;
                int v448 = v448 - v454 + (v454 << 30) + 0x3FFFFFFF;
                int v452 = *v439 + ~v454;
              }

              else
              {
                int v449 = v448 - 0x3FFFFFFF;
                BOOL v450 = v448 == 0x7FFFFFFF;
                if (v448 == 0x7FFFFFFF) {
                  int v451 = 2;
                }
                else {
                  int v451 = 1;
                }
                int v452 = *v439 + v451;
                if (v450) {
                  int v448 = 1;
                }
                else {
                  int v448 = v449;
                }
              }

              _DWORD *v439 = v452;
LABEL_361:
              int v446 = v448 + v447;
              if (v446 > 0x3FFFFFFF)
              {
                int v442 = v446 - 0x3FFFFFFF;
                BOOL v443 = v446 == 0x7FFFFFFF;
                if (v446 == 0x7FFFFFFF) {
                  int v444 = 2;
                }
                else {
                  int v444 = 1;
                }
                int v445 = *v439 + v444;
                if (v443) {
                  int v446 = 1;
                }
                else {
                  int v446 = v442;
                }
LABEL_344:
                _DWORD *v439 = v445;
                goto LABEL_345;
              }

              if (v446 < -1073741822)
              {
                if (v446 <= -2147483645) {
                  int v455 = -2147483645;
                }
                else {
                  int v455 = v446;
                }
                unsigned int v456 = (v455 - v446 - (v446 < 0x80000003)) / 0x3FFFFFFF;
                int v446 = v446 - v456 + (v456 << 30) + 0x3FFFFFFF;
                int v445 = *v439 + ~v456;
                goto LABEL_344;
              }

LABEL_345:
              *v438++ = v446;
              ++v439;
              ++v441;
              --v440;
            }

            while (v440 > 1);
            if (++v437 != v932) {
              continue;
            }
            break;
          }

LABEL_327:
          if (++v423 != v918) {
            continue;
          }
          break;
        }

LABEL_301:
        sub_1000CF924();
        uint64_t v408 = v930;
        int v386 = v932;
        LOWORD(v412) = v914;
LABEL_302:
        unsigned __int16 v411 = v412 + 1;
        int v410 = (unsigned __int16)(v412 + 1);
        int v409 = *(_DWORD *)(v408 + 1072);
        if (v409 > v410) {
          continue;
        }
        break;
      }

LABEL_373:
      if (v386 >= 1)
      {
        uint64_t v458 = 0LL;
        do
        {
          uint64_t v459 = 0LL;
          do
          {
            while (1)
            {
              int v461 = *(_DWORD *)(*(void *)(v383 + 8 * v458) + 4 * v459);
              double v462 = (double)v461 * 1073741820.0;
              if (!v461) {
                double v462 = -0.0;
              }
              double v463 = 1.0
              if (*(_DWORD *)(v930 + 280)) {
                break;
              }
              sub_1000BF2FC((uint64_t)v937, v458, v459++, v463);
              uint64_t v460 = v932;
              if (v932 == v459) {
                goto LABEL_375;
              }
            }

            sub_1000BF2FC((uint64_t)v937, v459++, v458, v463);
            uint64_t v460 = v932;
          }

          while (v932 != v459);
LABEL_375:
          ++v458;
        }

        while (v458 != v460);
      }

      sub_1000CB038(v897, v887);
      sub_1000CB038(v900, v887);
      sub_1000CB038(v368, v887);
      sub_1000CB038(v894, v887);
      uint64_t v1 = v930;
      uint64_t v43 = v920;
LABEL_384:
      unint64_t v464 = v902;
      if (!*(_DWORD *)(v1 + 260)) {
        goto LABEL_415;
      }
      uint64_t v465 = *(void *)(v1 + 328);
      if (*(_DWORD *)(v1 + 264))
      {
        sub_1000BF204(*(int **)(v1 + 328), 1.0);
        double v466 = (double)*(int *)(v1 + 248) / (double)*(int *)(v1 + 252);
        goto LABEL_414;
      }

      v933 = *(int **)(v1 + 328);
      uint64_t v467 = *(int *)(v1 + 1100);
      int v468 = *(_DWORD *)(v1 + 1072);
      if (v468 < 1)
      {
        double v482 = -1.0;
        goto LABEL_413;
      }

      uint64_t v919 = *(int *)(v1 + 1100);
      int v469 = 0;
      int v470 = 0;
      unsigned __int16 v471 = 0;
      uint64_t v472 = v1;
      int v473 = 1;
      while (2)
      {
        if (*(_DWORD *)(v472 + 268)) {
          BOOL v475 = v471 == 0;
        }
        else {
          BOOL v475 = 1;
        }
        uint64_t v476 = v471;
        if (v475) {
          uint64_t v477 = v471;
        }
        else {
          uint64_t v477 = 1LL;
        }
        if (*(unsigned __int8 *)(*(void *)(v472 + 496) + v477) == v920)
        {
          if (!*(_DWORD *)(*(void *)(v472 + 1432) + 28LL)) {
            goto LABEL_402;
          }
          int v468 = *(_DWORD *)(v930 + 1072);
LABEL_402:
          if (v468 <= v469)
          {
LABEL_389:
            int v474 = 1;
            goto LABEL_390;
          }

          if (*(_DWORD *)(v930 + 1176))
          {
            v478 = (int *)(*(void *)(v930 + 1160) + 4 * v476);
            int v480 = *v478;
            int v479 = v478[1];
          }

          else
          {
            v481 = (unsigned __int16 *)(*(void *)(v930 + 1144) + 2 * v476);
            int v480 = *v481;
            int v479 = v481[1];
          }

          int v474 = v479 - v480;
          if (v474)
          {
            if (v474 < 1)
            {
              int v473 = 0;
              goto LABEL_391;
            }

LABEL_390:
            int v473 = 0;
            v470 += v474;
          }
        }

LABEL_451:
      sub_1000BFBB0((uint64_t)v937, (uint64_t)v496, (uint64_t)v903);
      sub_1000BFB3C(v903, v924, v464);
      if (v488 < 1)
      {
        int v42 = 1;
        int v40 = v883;
        goto LABEL_41;
      }

      uint64_t v503 = v488;
      if (v488 >= 6)
      {
        unint64_t v505 = v927 + 8LL * v488;
        int v40 = v883;
        if (v464 >= v505 || v927 >= v464 + 8 * v503)
        {
          uint64_t v504 = v503 & 0x7FFFFFFC;
          v527 = (float64x2_t *)(v927 + 16);
          v528 = (float64x2_t *)(v464 + 16);
          uint64_t v529 = v503 & 0xFFFFFFFC;
          do
          {
            float64x2_t v530 = vsubq_f64(*v527, *v528);
            v528[-1] = vsubq_f64(v527[-1], v528[-1]);
            float64x2_t *v528 = v530;
            v527 += 2;
            v528 += 2;
            v529 -= 4LL;
          }

          while (v529);
          if (v504 == v503)
          {
            int v42 = 1;
            goto LABEL_41;
          }
        }

        else
        {
          uint64_t v504 = 0LL;
        }
      }

      else
      {
        uint64_t v504 = 0LL;
        int v40 = v883;
      }

      uint64_t v531 = v503 - v504;
      uint64_t v532 = 8 * v504;
      v533 = (double *)(v464 + 8 * v504);
      v534 = (double *)(v927 + v532);
      do
      {
        double v535 = *v534++;
        double *v533 = v535 - *v533;
        ++v533;
        int v42 = 1;
        --v531;
      }

      while (v531);
LABEL_41:
      *(_DWORD *)(*(void *)(v1 + 360) + 4 * v920) = v42;
      if (!*(_DWORD *)(*(void *)(v1 + 360) + 4 * v920)) {
        int v40 = 0;
      }
      char v35 = v920 + 1;
    }

    uint64_t v67 = *(unsigned int *)(v1 + 576);
    if ((int)v67 < 1)
    {
      int v71 = 0;
    }

    else
    {
      int32x4_t v68 = *(unsigned int **)(v1 + 600);
      unsigned int v69 = *v68;
      if (v67 >= 8)
      {
        uint64_t v70 = v67 & 0x7FFFFFF8;
        int8x16_t v137 = (int8x16_t)vdupq_n_s32(v69);
        int32x4_t v138 = (int32x4_t *)(v68 + 5);
        int32x4_t v139 = 0uLL;
        uint64_t v140 = v67 & 0xFFFFFFF8;
        int32x4_t v141 = 0uLL;
        do
        {
          int32x4_t v142 = v138[-1];
          int8x16_t v143 = vextq_s8(v137, (int8x16_t)v142, 0xCuLL);
          int32x4_t v144 = *v138;
          v138 += 2;
          int8x16_t v137 = (int8x16_t)v144;
          int32x4_t v145 = (int32x4_t)vmvnq_s8(vextq_s8((int8x16_t)v142, (int8x16_t)v144, 0xCuLL));
          int32x4_t v146 = vaddq_s32(v142, (int32x4_t)vmvnq_s8(v143));
          int32x4_t v147 = vaddq_s32(v144, v145);
          int32x4_t v139 = vmlaq_s32(v139, v146, v146);
          int32x4_t v141 = vmlaq_s32(v141, v147, v147);
          v140 -= 8LL;
        }

        while (v140);
        int v71 = vaddvq_s32(vaddq_s32(v141, v139));
        if (v70 == v67) {
          goto LABEL_91;
        }
        unsigned int v69 = v137.u32[3];
      }

      else
      {
        uint64_t v70 = 0LL;
        int v71 = 0;
      }

      uint64_t v148 = v67 - v70;
      int v149 = &v68[v70 + 1];
      do
      {
        int v150 = ~v69;
        unsigned int v151 = *v149++;
        unsigned int v69 = v151;
        v71 += (v151 + v150) * (v151 + v150);
        --v148;
      }

      while (v148);
    }

LABEL_91:
    int v66 = v71 / v66 + 1;
    goto LABEL_92;
  }

  LOBYTE(v40) = 1;
LABEL_509:
  uint64_t v544 = *(void *)(v1 + 392);
  uint64_t v545 = *(void *)(v1 + 400);
  if (*(_DWORD *)(v1 + 276))
  {
    uint64_t v546 = *(void *)(v1 + 416);
    uint64_t v938 = *(unsigned int *)(v1 + 256);
    uint64_t v943 = *(void *)(v1 + 424);
    uint64_t v547 = v1;
    uint64_t v548 = *(unsigned int *)(v1 + 1100);
    uint64_t v549 = 0LL;
    int v550 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)(v930 + 360) + 4 * v549))
      {
        for (juint64_t j = 0LL; jj != v548; ++jj)
        {
          for (kuint64_t k = 0LL; kk != v548; ++kk)
          {
            double v554 = sub_1000BF2EC(*(void *)(v544 + 8 * v549), jj, kk) * 1048576.0 + 0.5;
            if (v554 > 1073741820.0)
            {
              int v550 = 1;
              double v554 = 1073741820.0;
            }

            else if (v554 < -1073741820.0)
            {
              int v550 = 1;
              double v554 = -1073741820.0;
            }

            *(_DWORD *)(*(void *)(*(void *)(v546 + 8 * v549) + 8 * jj) + 4 * kk) = (int)v554;
          }

          double v552 = *(double *)(*(void *)(v545 + 8 * v549) + 8 * jj) * 1048576.0 + 0.5;
          if (v552 > 1073741820.0)
          {
            int v550 = 1;
            double v552 = 1073741820.0;
          }

          else if (v552 < -1073741820.0)
          {
            int v550 = 1;
            double v552 = -1073741820.0;
          }

          *(_DWORD *)(*(void *)(v943 + 8 * v549) + 4 * jj) = (int)v552;
        }
      }

      ++v549;
    }

    while (v549 != v938);
    uint64_t v547 = v930;
    if (!v550)
    {
LABEL_575:
      if (*(int *)(v547 + 1072) >= 1)
      {
        int v621 = 0;
        unsigned __int16 v622 = 0;
        do
        {
          if (*(_DWORD *)(v547 + 268)) {
            BOOL v623 = v622 == 0;
          }
          else {
            BOOL v623 = 1;
          }
          uint64_t v624 = v622;
          if (v623) {
            uint64_t v625 = v622;
          }
          else {
            uint64_t v625 = 1LL;
          }
          uint64_t v626 = *(char *)(*(void *)(v547 + 496) + v625);
          uint64_t v627 = v547;
          if (v626 == -2) {
            goto LABEL_578;
          }
          if ((~(_DWORD)v626 & 0xFFFFFFFD) != 0)
          {
            if (*(_DWORD *)(*(void *)(v547 + 360) + 4 * v626))
            {
              uint64_t v628 = 8 * v626;
              v629 = *(void **)(v546 + v628);
              v926 = *(_DWORD **)(v943 + v628);
              v945[0] = 0LL;
              int v630 = *(_DWORD *)(*(void *)(v547 + 1432) + 24LL);
              uint64_t v631 = *(int *)(v547 + 1100);
              v632 = (int32x4_t *)sub_1000CAF58(4 * v631, v28, v29, v30, v31, v32, v33, v34);
              v940 = (void *)sub_1000CAF58(v631, v633, v634, v635, v636, v637, v638, v639);
              uint64_t v929 = v624;
              if (*(_DWORD *)(v627 + 1072) > v621)
              {
                if (*(_DWORD *)(v627 + 1176))
                {
                  v640 = (int *)(*(void *)(v627 + 1160) + 4 * v624);
                  int v642 = *v640;
                  int v641 = v640[1];
                }

                else
                {
                  v644 = (unsigned __int16 *)(*(void *)(v627 + 1144) + 2 * v624);
                  int v642 = *v644;
                  int v641 = v644[1];
                }

                int v643 = v641 - v642;
                uint64_t v627 = v930;
                if (v643 >= 1)
                {
LABEL_594:
                  int v935 = v643;
                  if ((int)v631 >= 1)
                  {
                    uint64_t v645 = v631 & 0xFFFFFFE0;
                    uint64_t v646 = v631 & 0xFFFFFFF8;
                    v922 = v629;
                    if (v630)
                    {
                      uint64_t v647 = 0LL;
                      uint64_t v627 = v930;
                      while (1)
                      {
                        uint64_t v676 = v647;
                        sub_100004868(v627, v624, v647, v945);
                        v678 = (unsigned __int8 *)v945[0];
                        uint64_t v679 = 0LL;
                        int v680 = 0;
                        int v681 = v631 + 1;
                        do
                        {
                          v680 += *(_DWORD *)(*v629 + 4 * v679) * *(unsigned __int8 *)(v945[0] + v679);
                          ++v679;
                          --v681;
                        }

                        while (v681 > 1);
                        int v682 = *v926 + v680;
                        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                          v682 += *(unsigned __int8 *)v945[0] << 20;
                        }
                        if (v682 <= -524288) {
                          int v682 = -524288;
                        }
                        v632->i32[0] = (v682 + 0x80000) >> 20;
                        if ((_DWORD)v631 != 1)
                        {
                          int v683 = 0;
                          v684 = (int *)v629[1];
                          int v685 = v631 + 1;
                          v686 = v678;
                          do
                          {
                            int v688 = *v684++;
                            int v687 = v688;
                            int v689 = *v686++;
                            v683 += v687 * v689;
                            --v685;
                          }

                          while (v685 > 1);
                          int v690 = v926[1] + v683;
                          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                            v690 += v678[1] << 20;
                          }
                          if (v690 <= -524288) {
                            int v690 = -524288;
                          }
                          v632->i32[1] = (v690 + 0x80000) >> 20;
                          if ((_DWORD)v631 != 2)
                          {
                            int v691 = 0;
                            v692 = (int *)v629[2];
                            int v693 = v631 + 1;
                            v694 = v678;
                            do
                            {
                              int v696 = *v692++;
                              int v695 = v696;
                              int v697 = *v694++;
                              v691 += v695 * v697;
                              --v693;
                            }

                            while (v693 > 1);
                            int v698 = v926[2] + v691;
                            if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                              v698 += v678[2] << 20;
                            }
                            if (v698 <= -524288) {
                              int v698 = -524288;
                            }
                            v632->i32[2] = (v698 + 0x80000) >> 20;
                            if ((_DWORD)v631 != 3)
                            {
                              int v699 = 0;
                              v700 = (int *)v629[3];
                              int v701 = v631 + 1;
                              v702 = v678;
                              do
                              {
                                int v704 = *v700++;
                                int v703 = v704;
                                int v705 = *v702++;
                                v699 += v703 * v705;
                                --v701;
                              }

                              while (v701 > 1);
                              int v706 = v926[3] + v699;
                              if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                v706 += v678[3] << 20;
                              }
                              if (v706 <= -524288) {
                                int v706 = -524288;
                              }
                              v632->i32[3] = (v706 + 0x80000) >> 20;
                              if ((_DWORD)v631 != 4)
                              {
                                int v707 = 0;
                                v708 = (int *)v629[4];
                                int v709 = v631 + 1;
                                v710 = v678;
                                do
                                {
                                  int v712 = *v708++;
                                  int v711 = v712;
                                  int v713 = *v710++;
                                  v707 += v711 * v713;
                                  --v709;
                                }

                                while (v709 > 1);
                                int v714 = v926[4] + v707;
                                if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                  v714 += v678[4] << 20;
                                }
                                if (v714 <= -524288) {
                                  int v714 = -524288;
                                }
                                v632[1].i32[0] = (v714 + 0x80000) >> 20;
                                if ((_DWORD)v631 != 5)
                                {
                                  int v715 = 0;
                                  v716 = (int *)v629[5];
                                  int v717 = v631 + 1;
                                  v718 = v678;
                                  do
                                  {
                                    int v720 = *v716++;
                                    int v719 = v720;
                                    int v721 = *v718++;
                                    v715 += v719 * v721;
                                    --v717;
                                  }

                                  while (v717 > 1);
                                  int v722 = v926[5] + v715;
                                  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                    v722 += v678[5] << 20;
                                  }
                                  if (v722 <= -524288) {
                                    int v722 = -524288;
                                  }
                                  v632[1].i32[1] = (v722 + 0x80000) >> 20;
                                  if ((_DWORD)v631 != 6)
                                  {
                                    int v723 = 0;
                                    v724 = (int *)v629[6];
                                    int v725 = v631 + 1;
                                    v726 = v678;
                                    do
                                    {
                                      int v728 = *v724++;
                                      int v727 = v728;
                                      int v729 = *v726++;
                                      v723 += v727 * v729;
                                      --v725;
                                    }

                                    while (v725 > 1);
                                    int v730 = v926[6] + v723;
                                    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                      v730 += v678[6] << 20;
                                    }
                                    if (v730 <= -524288) {
                                      int v665 = -524288;
                                    }
                                    else {
                                      int v665 = v730;
                                    }
                                    v632[1].i32[2] = (v665 + 0x80000) >> 20;
                                  }
                                }
                              }
                            }
                          }
                        }

      uint64_t v123 = v51 - 1;
      uint64_t v124 = (unsigned __int8 *)(v47 + 2);
      LODWORD(v47) = *(unsigned __int8 *)(v47 + 1);
      uint64_t v158 = v49;
      if (v50 != 1) {
        goto LABEL_95;
      }
      goto LABEL_92;
    }

    uint64_t v99 = v10 + 376;
    uint64_t v100 = v164 + 1;
    uint64_t v101 = *v164;
    if (*(_BYTE *)(v10 + 376 + v101) == 2)
    {
      uint64_t v102 = *(void *)(v10 + 104);
      uint64_t v103 = *(unsigned __int16 *)(v102 + 2 * v101);
      uint64_t v104 = *(unsigned __int16 *)(v102 + 2 * v101 + 2) + ~(_DWORD)v103;
      uint64_t v105 = (unsigned __int8 *)(*(void *)(v10 + 88) + v103);
      uint64_t v165 = v105 + 1;
      LODWORD(v101) = *v105;
      if ((_DWORD)v101 != 255)
      {
LABEL_66:
        if (*(__int16 *)(v10 + 752) == -1)
        {
          LODWORD(v101) = 0;
          LODWORD(v106) = 1;
          goto LABEL_116;
        }

        LODWORD(v106) = 1;
LABEL_115:
        uint64_t v164 = v100;
        LODWORD(v166) = v104;
LABEL_116:
        HIDWORD(v171) = v106;
        else {
          int v149 = v106;
        }
        if ((int)v149 >= 1)
        {
          int v150 = (char *)*a3;
          sub_10008AB2C(v10, *a3, &v167, 0LL, &v164);
          unsigned int v151 = a5;
          if (a5)
          {
            *a5 = v167;
            unsigned int v151 = a5 + 1;
          }

          uint64_t v152 = *(unsigned __int16 *)(v10 + 752);
          if (v152 != 0xFFFF) {
            sub_100093AE4(v150, v101, v152);
          }
          if ((_DWORD)v149 != 1)
          {
            uint64_t v153 = a3 + 1;
            uint64_t v154 = v149 - 1;
            do
            {
              uint64_t v155 = (void *)*v153;
              uint64_t v156 = sub_10008AB2C(v10, *v153, &v167, 0LL, &v164);
              if (v151) {
                *v151++ = v167;
              }
              memcpy(v155, v150, 2 * v156);
              uint64_t v157 = *(unsigned __int16 *)(v10 + 752);
              if (v157 != 0xFFFF) {
                sub_100093AE4((char *)v155, v101, v157);
              }
              ++v153;
              int v150 = (char *)v155;
              --v154;
            }

            while (v154);
          }
        }

        goto LABEL_125;
      }
    }

    else
    {
      uint64_t v104 = v166;
      if ((_DWORD)v101 != 255) {
        goto LABEL_66;
      }
    }

    if (v104)
    {
      --v104;
      uint64_t v106 = (unint64_t)v165;
      uint64_t v107 = ++v165;
      LODWORD(v106) = *(unsigned __int8 *)v106;
    }

    else
    {
      uint64_t v100 = v164 + 2;
      uint64_t v106 = v164[1];
      if (*(_BYTE *)(v99 + v106) != 2)
      {
        if (*(__int16 *)(v10 + 752) == -1)
        {
          LODWORD(v101) = 0;
          uint64_t v104 = 0;
          goto LABEL_115;
        }

        goto LABEL_84;
      }

      uint64_t v110 = *(void *)(v10 + 104);
      uint64_t v111 = *(unsigned __int16 *)(v110 + 2 * v106);
      uint64_t v104 = *(unsigned __int16 *)(v110 + 2 * v106 + 2) + ~(_DWORD)v111;
      uint64_t v106 = *(void *)(v10 + 88) + v111;
      uint64_t v107 = (unsigned __int8 *)(v106 + 1);
      uint64_t v165 = (unsigned __int8 *)(v106 + 1);
      LODWORD(v106) = *(unsigned __int8 *)v106;
      if (*(__int16 *)(v10 + 752) != -1)
      {
LABEL_71:
        if (v104)
        {
          --v104;
LABEL_86:
          uint64_t v165 = v107 + 1;
          LODWORD(v101) = *v107;
          goto LABEL_115;
        }

LABEL_609:
                        uint64_t v627 = v930;
                        sub_100006C18(v930, v632, (unint64_t)v940);
                        LODWORD(v624) = v929;
                        sub_10000D438((void *)v930, (unint64_t)v940, v929, v676, v666, v667, v668, v669);
                        v629 = v922;
                        sub_10000D9B0(v930, v929, v676, (uint64_t)v940, v670, v671, v672, v673, v674, v675);
                        uint64_t v647 = (v676 + 1);
                        if ((_DWORD)v647 == v935) {
                          goto LABEL_604;
                        }
                      }

                      uint64_t v731 = 0LL;
                      while (2)
                      {
                        v733 = (int32x4_t *)v629[v731];
                        if (v631 >= 0x20)
                        {
                          int32x4_t v736 = 0uLL;
                          v737 = v733 + 4;
                          int32x4_t v738 = 0uLL;
                          uint64_t v739 = v631 & 0xFFFFFFE0;
                          v740 = (int8x16_t *)(v678 + 16);
                          int32x4_t v741 = 0uLL;
                          int32x4_t v742 = 0uLL;
                          int32x4_t v677 = 0uLL;
                          int32x4_t v743 = 0uLL;
                          int32x4_t v744 = 0uLL;
                          int32x4_t v745 = 0uLL;
                          do
                          {
                            int32x4_t v747 = v737[-2];
                            int32x4_t v746 = v737[-1];
                            int32x4_t v749 = v737[-4];
                            int32x4_t v748 = v737[-3];
                            int32x4_t v751 = v737[2];
                            int32x4_t v750 = v737[3];
                            int32x4_t v753 = *v737;
                            int32x4_t v752 = v737[1];
                            v737 += 8;
                            int8x16_t v754 = v740[-1];
                            int32x4_t v742 = vmlaq_s32(v742, v746, (int32x4_t)vqtbl1q_s8(v754, (int8x16_t)xmmword_1000F0300));
                            int32x4_t v741 = vmlaq_s32(v741, v747, (int32x4_t)vqtbl1q_s8(v754, (int8x16_t)xmmword_1000F0310));
                            int32x4_t v738 = vmlaq_s32(v738, v748, (int32x4_t)vqtbl1q_s8(v754, (int8x16_t)xmmword_1000F0320));
                            int32x4_t v736 = vmlaq_s32(v736, v749, (int32x4_t)vqtbl1q_s8(v754, (int8x16_t)xmmword_1000F0330));
                            int32x4_t v745 = vmlaq_s32(v745, v750, (int32x4_t)vqtbl1q_s8(*v740, (int8x16_t)xmmword_1000F0300));
                            int32x4_t v744 = vmlaq_s32(v744, v751, (int32x4_t)vqtbl1q_s8(*v740, (int8x16_t)xmmword_1000F0310));
                            int32x4_t v743 = vmlaq_s32(v743, v752, (int32x4_t)vqtbl1q_s8(*v740, (int8x16_t)xmmword_1000F0320));
                            int32x4_t v677 = vmlaq_s32(v677, v753, (int32x4_t)vqtbl1q_s8(*v740, (int8x16_t)xmmword_1000F0330));
                            v740 += 2;
                            v739 -= 32LL;
                          }

                          while (v739);
                          unsigned int v734 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v677, v736), vaddq_s32(v744, v741)),  vaddq_s32(vaddq_s32(v743, v738), vaddq_s32(v745, v742))));
                          if (v645 != v631)
                          {
                            uint64_t v735 = v631 & 0x7FFFFFE0;
                            uint64_t v755 = v631 & 0xFFFFFFE0;
                            if ((v631 & 0x18) != 0) {
                              goto LABEL_674;
                            }
                            goto LABEL_677;
                          }
                        }

                        else
                        {
                          unsigned int v734 = 0;
                          uint64_t v735 = 0LL;
LABEL_674:
                          int32x4_t v756 = 0uLL;
                          int32x4_t v757 = (int32x4_t)v734;
                          v758 = &v678[v735];
                          v759 = (int32x4_t *)((char *)v733 + 4 * v735);
                          uint64_t v760 = v735 - (v631 & 0xFFFFFFF8);
                          do
                          {
                            int32x4_t v762 = *v759;
                            int32x4_t v761 = v759[1];
                            v759 += 2;
                            uint64_t v763 = *(void *)v758;
                            v758 += 8;
                            v677.i64[0] = v763;
                            int32x4_t v764 = (int32x4_t)vqtbl1q_s8((int8x16_t)v677, (int8x16_t)xmmword_1000F0320);
                            int32x4_t v677 = (int32x4_t)vqtbl1q_s8((int8x16_t)v677, (int8x16_t)xmmword_1000F0330);
                            int32x4_t v756 = vmlaq_s32(v756, v761, v764);
                            int32x4_t v757 = vmlaq_s32(v757, v762, v677);
                            v760 += 8LL;
                          }

                          while (v760);
                          unsigned int v734 = vaddvq_s32(vaddq_s32(v757, v756));
                          uint64_t v755 = v631 & 0xFFFFFFF8;
                          if (v646 != v631)
                          {
LABEL_677:
                            v765 = &v678[v755];
                            v766 = &v733->i32[v755];
                            int v767 = v631 + 1 - v755;
                            do
                            {
                              int v769 = *v766++;
                              int v768 = v769;
                              int v770 = *v765++;
                              v734 += v768 * v770;
                              --v767;
                            }

                            while (v767 > 1);
                          }
                        }

                        int v732 = v926[v731] + v734;
                        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                          v732 += v678[v731] << 20;
                        }
                        if (v732 <= -524288) {
                          int v732 = -524288;
                        }
                        v632->i32[v731++] = (v732 + 0x80000) >> 20;
                        continue;
                      }
                    }

                    uint64_t v627 = v930;
                    while (1)
                    {
                      sub_100004868(v627, v624, v630, v945);
                      v779 = (unsigned __int8 *)v945[0];
                      uint64_t v780 = 0LL;
                      int v781 = 0;
                      int v782 = v631 + 1;
                      do
                      {
                        v781 += *(_DWORD *)(*v629 + 4 * v780) * *(unsigned __int8 *)(v945[0] + v780);
                        ++v780;
                        --v782;
                      }

                      while (v782 > 1);
                      int v783 = *v926 + v781;
                      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                        v783 += *(unsigned __int8 *)v945[0] << 20;
                      }
                      if (v783 <= -524288) {
                        int v783 = -524288;
                      }
                      v632->i32[0] = (v783 + 0x80000) >> 20;
                      if ((_DWORD)v631 != 1)
                      {
                        int v784 = 0;
                        v785 = (int *)v629[1];
                        int v786 = v631 + 1;
                        v787 = v779;
                        do
                        {
                          int v789 = *v785++;
                          int v788 = v789;
                          int v790 = *v787++;
                          v784 += v788 * v790;
                          --v786;
                        }

                        while (v786 > 1);
                        int v791 = v926[1] + v784;
                        if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                          v791 += v779[1] << 20;
                        }
                        if (v791 <= -524288) {
                          int v791 = -524288;
                        }
                        v632->i32[1] = (v791 + 0x80000) >> 20;
                        if ((_DWORD)v631 != 2)
                        {
                          int v792 = 0;
                          v793 = (int *)v629[2];
                          int v794 = v631 + 1;
                          v795 = v779;
                          do
                          {
                            int v797 = *v793++;
                            int v796 = v797;
                            int v798 = *v795++;
                            v792 += v796 * v798;
                            --v794;
                          }

                          while (v794 > 1);
                          int v799 = v926[2] + v792;
                          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                            v799 += v779[2] << 20;
                          }
                          if (v799 <= -524288) {
                            int v799 = -524288;
                          }
                          v632->i32[2] = (v799 + 0x80000) >> 20;
                          if ((_DWORD)v631 != 3)
                          {
                            int v800 = 0;
                            v801 = (int *)v629[3];
                            int v802 = v631 + 1;
                            v803 = v779;
                            do
                            {
                              int v805 = *v801++;
                              int v804 = v805;
                              int v806 = *v803++;
                              v800 += v804 * v806;
                              --v802;
                            }

                            while (v802 > 1);
                            int v807 = v926[3] + v800;
                            if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                              v807 += v779[3] << 20;
                            }
                            if (v807 <= -524288) {
                              int v807 = -524288;
                            }
                            v632->i32[3] = (v807 + 0x80000) >> 20;
                            if ((_DWORD)v631 != 4)
                            {
                              int v808 = 0;
                              v809 = (int *)v629[4];
                              int v810 = v631 + 1;
                              v811 = v779;
                              do
                              {
                                int v813 = *v809++;
                                int v812 = v813;
                                int v814 = *v811++;
                                v808 += v812 * v814;
                                --v810;
                              }

                              while (v810 > 1);
                              int v815 = v926[4] + v808;
                              if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                v815 += v779[4] << 20;
                              }
                              if (v815 <= -524288) {
                                int v815 = -524288;
                              }
                              v632[1].i32[0] = (v815 + 0x80000) >> 20;
                              if ((_DWORD)v631 != 5)
                              {
                                int v816 = 0;
                                v817 = (int *)v629[5];
                                int v818 = v631 + 1;
                                v819 = v779;
                                do
                                {
                                  int v821 = *v817++;
                                  int v820 = v821;
                                  int v822 = *v819++;
                                  v816 += v820 * v822;
                                  --v818;
                                }

                                while (v818 > 1);
                                int v823 = v926[5] + v816;
                                if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                  v823 += v779[5] << 20;
                                }
                                if (v823 <= -524288) {
                                  int v823 = -524288;
                                }
                                v632[1].i32[1] = (v823 + 0x80000) >> 20;
                                if ((_DWORD)v631 != 6)
                                {
                                  int v824 = 0;
                                  v825 = (int *)v629[6];
                                  int v826 = v631 + 1;
                                  v827 = v779;
                                  do
                                  {
                                    int v829 = *v825++;
                                    int v828 = v829;
                                    int v830 = *v827++;
                                    v824 += v828 * v830;
                                    --v826;
                                  }

                                  while (v826 > 1);
                                  int v831 = v926[6] + v824;
                                  if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                                    v831 += v779[6] << 20;
                                  }
                                  if (v831 <= -524288) {
                                    int v771 = -524288;
                                  }
                                  else {
                                    int v771 = v831;
                                  }
                                  v632[1].i32[2] = (v771 + 0x80000) >> 20;
                                }
                              }
                            }
                          }
                        }
                      }

LABEL_686:
                      uint64_t v627 = v930;
                      sub_100006C18(v930, v632, (unint64_t)v940);
                      LODWORD(v624) = v929;
                      v629 = v922;
                      sub_10000D9B0(v930, v929, v630++, (uint64_t)v940, v772, v773, v774, v775, v776, v777);
                      if (v630 == v935) {
                        goto LABEL_604;
                      }
                    }

                    uint64_t v832 = 0LL;
                    while (2)
                    {
                      v834 = (int32x4_t *)v629[v832];
                      if (v631 >= 0x20)
                      {
                        int32x4_t v837 = 0uLL;
                        v838 = v834 + 4;
                        int32x4_t v839 = 0uLL;
                        uint64_t v840 = v631 & 0xFFFFFFE0;
                        v841 = (int8x16_t *)(v779 + 16);
                        int32x4_t v842 = 0uLL;
                        int32x4_t v843 = 0uLL;
                        int32x4_t v778 = 0uLL;
                        int32x4_t v844 = 0uLL;
                        int32x4_t v845 = 0uLL;
                        int32x4_t v846 = 0uLL;
                        do
                        {
                          int32x4_t v848 = v838[-2];
                          int32x4_t v847 = v838[-1];
                          int32x4_t v850 = v838[-4];
                          int32x4_t v849 = v838[-3];
                          int32x4_t v852 = v838[2];
                          int32x4_t v851 = v838[3];
                          int32x4_t v854 = *v838;
                          int32x4_t v853 = v838[1];
                          v838 += 8;
                          int8x16_t v855 = v841[-1];
                          int32x4_t v843 = vmlaq_s32(v843, v847, (int32x4_t)vqtbl1q_s8(v855, (int8x16_t)xmmword_1000F0300));
                          int32x4_t v842 = vmlaq_s32(v842, v848, (int32x4_t)vqtbl1q_s8(v855, (int8x16_t)xmmword_1000F0310));
                          int32x4_t v839 = vmlaq_s32(v839, v849, (int32x4_t)vqtbl1q_s8(v855, (int8x16_t)xmmword_1000F0320));
                          int32x4_t v837 = vmlaq_s32(v837, v850, (int32x4_t)vqtbl1q_s8(v855, (int8x16_t)xmmword_1000F0330));
                          int32x4_t v846 = vmlaq_s32(v846, v851, (int32x4_t)vqtbl1q_s8(*v841, (int8x16_t)xmmword_1000F0300));
                          int32x4_t v845 = vmlaq_s32(v845, v852, (int32x4_t)vqtbl1q_s8(*v841, (int8x16_t)xmmword_1000F0310));
                          int32x4_t v844 = vmlaq_s32(v844, v853, (int32x4_t)vqtbl1q_s8(*v841, (int8x16_t)xmmword_1000F0320));
                          int32x4_t v778 = vmlaq_s32(v778, v854, (int32x4_t)vqtbl1q_s8(*v841, (int8x16_t)xmmword_1000F0330));
                          v841 += 2;
                          v840 -= 32LL;
                        }

                        while (v840);
                        unsigned int v835 = vaddvq_s32( vaddq_s32( vaddq_s32(vaddq_s32(v778, v837), vaddq_s32(v845, v842)),  vaddq_s32(vaddq_s32(v844, v839), vaddq_s32(v846, v843))));
                        if (v645 != v631)
                        {
                          uint64_t v836 = v631 & 0x7FFFFFE0;
                          uint64_t v856 = v631 & 0xFFFFFFE0;
                          if ((v631 & 0x18) != 0) {
                            goto LABEL_751;
                          }
                          goto LABEL_754;
                        }
                      }

                      else
                      {
                        unsigned int v835 = 0;
                        uint64_t v836 = 0LL;
LABEL_751:
                        int32x4_t v857 = 0uLL;
                        int32x4_t v858 = (int32x4_t)v835;
                        v859 = &v779[v836];
                        v860 = (int32x4_t *)((char *)v834 + 4 * v836);
                        uint64_t v861 = v836 - (v631 & 0xFFFFFFF8);
                        do
                        {
                          int32x4_t v863 = *v860;
                          int32x4_t v862 = v860[1];
                          v860 += 2;
                          uint64_t v864 = *(void *)v859;
                          v859 += 8;
                          v778.i64[0] = v864;
                          int32x4_t v865 = (int32x4_t)vqtbl1q_s8((int8x16_t)v778, (int8x16_t)xmmword_1000F0320);
                          int32x4_t v778 = (int32x4_t)vqtbl1q_s8((int8x16_t)v778, (int8x16_t)xmmword_1000F0330);
                          int32x4_t v857 = vmlaq_s32(v857, v862, v865);
                          int32x4_t v858 = vmlaq_s32(v858, v863, v778);
                          v861 += 8LL;
                        }

                        while (v861);
                        unsigned int v835 = vaddvq_s32(vaddq_s32(v858, v857));
                        uint64_t v856 = v631 & 0xFFFFFFF8;
                        if (v646 != v631)
                        {
LABEL_754:
                          v866 = &v779[v856];
                          v867 = &v834->i32[v856];
                          int v868 = v631 + 1 - v856;
                          do
                          {
                            int v870 = *v867++;
                            int v869 = v870;
                            int v871 = *v866++;
                            v835 += v869 * v871;
                            --v868;
                          }

                          while (v868 > 1);
                        }
                      }

                      int v833 = v926[v832] + v835;
                      if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740)) {
                        v833 += v779[v832] << 20;
                      }
                      if (v833 <= -524288) {
                        int v833 = -524288;
                      }
                      v632->i32[v832++] = (v833 + 0x80000) >> 20;
                      continue;
                    }
                  }

                  uint64_t v648 = 0LL;
                  if (v630)
                  {
                    uint64_t v627 = v930;
                    do
                    {
                      sub_100004868(v930, v624, v648, v945);
                      sub_100006C18(v930, v632, (unint64_t)v940);
                      sub_10000D438((void *)v930, (unint64_t)v940, v624, v648, v649, v650, v651, v652);
                      sub_10000D9B0(v930, v624, v648, (uint64_t)v940, v653, v654, v655, v656, v657, v658);
                      uint64_t v648 = (v648 + 1);
                    }

                    while (v935 != (_DWORD)v648);
                  }

                  else
                  {
                    uint64_t v627 = v930;
                    do
                    {
                      sub_100004868(v930, v624, v648, v945);
                      sub_100006C18(v930, v632, (unint64_t)v940);
                      sub_10000D9B0(v930, v624, v648, (uint64_t)v940, v659, v660, v661, v662, v663, v664);
                      LODWORD(v648) = v648 + 1;
                    }

                    while (v935 != (_DWORD)v648);
                  }
                }

LABEL_604:
                sub_1000CB038(v940, v631);
                sub_1000CB038(v632, 4 * v631);
                goto LABEL_578;
              }

              int v643 = 1;
              goto LABEL_594;
            }
          }

          else
          {
            sub_10000A9A8((void *)v547, v624, v29, v30, v31, v32, v33, v34);
          }

LABEL_578:
          unsigned __int16 v622 = v624 + 1;
          int v621 = (unsigned __int16)(v624 + 1);
          uint64_t v547 = v627;
        }

        while (*(_DWORD *)(v627 + 1072) > v621);
      }
    }

    *(_BYTE *)(v547 + 292) = 0;
    uint64_t v1 = v547;
LABEL_760:
    uint64_t v620 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_761;
    }
    goto LABEL_764;
  }

  if (*(int *)(v1 + 1072) >= 1)
  {
    int v555 = 0;
    unsigned __int16 v556 = 0;
    char v884 = v40;
    do
    {
      if (*(_DWORD *)(v1 + 268)) {
        BOOL v557 = v556 == 0;
      }
      else {
        BOOL v557 = 1;
      }
      uint64_t v558 = v556;
      if (v557) {
        uint64_t v559 = v556;
      }
      else {
        uint64_t v559 = 1LL;
      }
      uint64_t v560 = *(char *)(*(void *)(v1 + 496) + v559);
      if (v560 == -2) {
        goto LABEL_530;
      }
      if ((~(_DWORD)v560 & 0xFFFFFFFD) != 0)
      {
        if (*(_DWORD *)(*(void *)(v1 + 360) + 4 * v560))
        {
          uint64_t v561 = 8 * v560;
          uint64_t v562 = *(void *)(v545 + v561);
          v944 = *(int **)(v544 + v561);
          v945[0] = 0LL;
          uint64_t v563 = *(void *)(v1 + 1432);
          if (v563) {
            int v928 = *(_DWORD *)(v563 + 24);
          }
          else {
            int v928 = 0;
          }
          if (v944)
          {
            uint64_t v564 = *(int *)(v1 + 1100);
            v565 = (void *)sub_1000CAF58(8 * v564, v28, v29, v30, v31, v32, v33, v34);
            v573 = (float64x2_t *)sub_1000CAF58(8 * v564, v566, v567, v568, v569, v570, v571, v572);
            uint64_t v925 = v564;
            v939 = (void *)sub_1000CAF58(v564, v574, v575, v576, v577, v578, v579, v580);
            uint64_t v921 = 8 * v564;
            if (*(_DWORD *)(v1 + 1072) <= v555)
            {
              int v584 = 1;
LABEL_550:
              int v934 = v584;
              if ((int)v564 < 1)
              {
                if (v928)
                {
                  uint64_t v602 = 0LL;
                  uint64_t v1 = v930;
                  do
                  {
                    sub_100004868(v930, v558, v602, v945);
                    sub_1000BFB3C(v944, (uint64_t)v565, (uint64_t)v573);
                    sub_100006A60(v930, v573, (unint64_t)v939);
                    sub_10000D438((void *)v930, (unint64_t)v939, v558, v602, v603, v604, v605, v606);
                    sub_10000D9B0(v930, v558, v602, (uint64_t)v939, v607, v608, v609, v610, v611, v612);
                    uint64_t v602 = (v602 + 1);
                  }

                  while (v934 != (_DWORD)v602);
                }

                else
                {
                  int v613 = 0;
                  uint64_t v1 = v930;
                  do
                  {
                    sub_100004868(v930, v558, v613, v945);
                    sub_1000BFB3C(v944, (uint64_t)v565, (uint64_t)v573);
                    sub_100006A60(v930, v573, (unint64_t)v939);
                    sub_10000D9B0(v930, v558, v613++, (uint64_t)v939, v614, v615, v616, v617, v618, v619);
                  }

                  while (v934 != v613);
                }
              }

              else
              {
                uint64_t v586 = 0LL;
                uint64_t v1 = v930;
                do
                {
                  sub_100004868(v1, v558, v586, v945);
                  uint64_t v588 = 0LL;
                  do
                  {
                    LOBYTE(v587) = *(_BYTE *)(v945[0] + v588);
                    double v587 = (double)*(unint64_t *)&v587;
                    *(double *)&v565[v588++] = v587;
                  }

                  while (v925 != v588);
                  sub_1000BFB3C(v944, (uint64_t)v565, (uint64_t)v573);
                  uint64_t v589 = 0LL;
                  do
                  {
                    double v590 = v573->f64[v589];
                    double v591 = *(double *)(v562 + 8 * v589) + v590;
                    v573->f64[v589] = v591;
                    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3740))
                    {
                      LOBYTE(v590) = *(_BYTE *)(v945[0] + v589);
                      v573->f64[v589] = v591 + (double)*(unint64_t *)&v590;
                    }

                    ++v589;
                  }

                  while (v925 != v589);
                  uint64_t v1 = v930;
                  sub_100006A60(v930, v573, (unint64_t)v939);
                  if (v928) {
                    sub_10000D438((void *)v930, (unint64_t)v939, v558, v586, v592, v593, v594, v595);
                  }
                  sub_10000D9B0(v930, v558, v586, (uint64_t)v939, v596, v597, v598, v599, v600, v601);
                  uint64_t v586 = (v586 + 1);
                }

                while ((_DWORD)v586 != v934);
              }
            }

            else
            {
              if (*(_DWORD *)(v1 + 1176))
              {
                v581 = (int *)(*(void *)(v1 + 1160) + 4 * v558);
                int v583 = *v581;
                int v582 = v581[1];
              }

              else
              {
                v585 = (unsigned __int16 *)(*(void *)(v1 + 1144) + 2 * v558);
                int v583 = *v585;
                int v582 = v585[1];
              }

              int v584 = v582 - v583;
              uint64_t v1 = v930;
              if (v584 >= 1) {
                goto LABEL_550;
              }
            }

            sub_1000CB038(v939, v925);
            sub_1000CB038(v573, v921);
            sub_1000CB038(v565, v921);
          }

          LOBYTE(v40) = v884;
        }
      }

      else
      {
        sub_10000A9A8((void *)v1, v558, v29, v30, v31, v32, v33, v34);
      }

LABEL_530:
      unsigned __int16 v556 = v558 + 1;
      int v555 = (unsigned __int16)(v558 + 1);
    }

    while (*(_DWORD *)(v1 + 1072) > v555);
  }

  *(_BYTE *)(v1 + 292) = v40;
  if (!(_BYTE)v40) {
    goto LABEL_760;
  }
  if (*(_DWORD *)(v1 + 1032))
  {
    *(void *)(v1 + 136) = *(void *)(v1 + 152);
    uint64_t v620 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      goto LABEL_761;
    }
  }

  else
  {
    *(void *)(v1 + 16) = *(void *)(v1 + 24);
    uint64_t v620 = qword_1000FDCC0;
    if (qword_1000FDCC0)
    {
LABEL_761:
      if (*(_DWORD *)(v620 + 1064))
      {
        v872 = *(void (**)(uint64_t, void))(v1 + 1736);
        if (v872) {
          v872(v1, 0LL);
        }
      }
    }
  }

LABEL_764:
  sub_10007FAF8(v1);
  return 1LL;
}

uint64_t sub_10007FAF8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 256);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = 8 * v2;
    do
    {
      uint64_t v5 = *(void *)(a1 + 392);
      if (v5)
      {
        sub_1000BF1CC(*(void *)(v5 + v3));
        *(void *)(*(void *)(a1 + 392) + v3) = 0LL;
      }

      uint64_t v6 = *(void *)(a1 + 400);
      if (v6)
      {
        sub_1000C0EF8(*(void *)(v6 + v3));
        *(void *)(*(void *)(a1 + 400) + v3) = 0LL;
      }

      uint64_t v7 = *(void *)(a1 + 416);
      if (v7)
      {
        sub_1000C133C(*(void *)(v7 + v3));
        *(void *)(*(void *)(a1 + 416) + v3) = 0LL;
      }

      uint64_t v8 = *(void *)(a1 + 424);
      if (v8)
      {
        sub_1000C0EF8(*(void *)(v8 + v3));
        *(void *)(*(void *)(a1 + 424) + v3) = 0LL;
      }

      v3 += 8LL;
    }

    while (v4 != v3);
  }

  sub_1000C0EF8(*(void *)(a1 + 392));
  *(void *)(a1 + 392) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 400));
  *(void *)(a1 + 400) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 360));
  *(void *)(a1 + 360) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 416));
  *(void *)(a1 + 416) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 424));
  *(void *)(a1 + 424) = 0LL;
  sub_1000C133C(*(void *)(a1 + 432));
  *(void *)(a1 + 432) = 0LL;
  sub_1000C133C(*(void *)(a1 + 440));
  *(void *)(a1 + 440) = 0LL;
  sub_1000BF1CC(*(void *)(a1 + 304));
  sub_1000BF1CC(*(void *)(a1 + 312));
  sub_1000BF1CC(*(void *)(a1 + 320));
  sub_1000BF1CC(*(void *)(a1 + 336));
  sub_1000BF1CC(*(void *)(a1 + 328));
  sub_1000BF1CC(*(void *)(a1 + 368));
  sub_1000BF1CC(*(void *)(a1 + 376));
  sub_1000BF1CC(*(void *)(a1 + 384));
  *(void *)(a1 + 336) = 0LL;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 368) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 344));
  *(void *)(a1 + 344) = 0LL;
  sub_1000C0EF8(*(void *)(a1 + 352));
  *(void *)(a1 + 352) = 0LL;
  uint64_t result = sub_1000C0EF8(*(void *)(a1 + 408));
  *(void *)(a1 + 408) = 0LL;
  return result;
}

uint64_t sub_10007FC70(uint64_t a1)
{
  unsigned int v2 = sub_1000BE540(*(_DWORD *)(a1 + 256), 0xFFFFFFFF);
  unsigned int v3 = sub_1000BE540(*(_DWORD *)(a1 + 248), v2);
  unsigned int v4 = sub_1000BE540(*(_DWORD *)(a1 + 252), v3);
  unsigned int v5 = sub_1000BE540(*(_DWORD *)(a1 + 260), v4);
  unsigned int v6 = sub_1000BE540(*(_DWORD *)(a1 + 264), v5);
  uint64_t v7 = sub_1000BE540(*(_DWORD *)(a1 + 288), v6);
  if (*(void *)(a1 + 496) && *(int *)(a1 + 1072) >= 1)
  {
    uint64_t v8 = 0LL;
    do
    {
      if (*(_DWORD *)(a1 + 268)) {
        BOOL v9 = v8 == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9) {
        uint64_t v10 = v8;
      }
      else {
        uint64_t v10 = 1LL;
      }
      uint64_t v7 = sub_1000BE540(*(char *)(*(void *)(a1 + 496) + v10), v7);
      ++v8;
    }

    while (v8 < *(int *)(a1 + 1072));
  }

  if (*(void *)(a1 + 488) && *(int *)(a1 + 288) >= 1)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    do
    {
      uint64_t v13 = (unsigned int *)(*(void *)(a1 + 488) + v11);
      uint64_t v7 = sub_1000BE540(v13[2], v7);
      if (v13[2])
      {
        unsigned int v14 = sub_1000BE540(*v13, v7);
        uint64_t v7 = sub_1000BE540(v13[1], v14);
      }

      ++v12;
      v11 += 12LL;
    }

    while (v12 < *(int *)(a1 + 288));
  }

  return v7;
}

double sub_10007FD98(uint64_t a1, unsigned __int8 a2, int a3, int a4)
{
  int v6 = *(_DWORD *)(a1 + 1072);
  if (v6 >= 1)
  {
    int v7 = 0;
    unsigned int v8 = 0;
    unsigned __int16 v9 = 0;
    int v10 = a2;
    uint64_t v11 = *(void **)(a1 + 1432);
    int v12 = a4 | a3;
    v13.i64[0] = 0x100000001LL;
    v13.i64[1] = 0x100000001LL;
    int v14 = 1;
    while (1)
    {
      if (*(_DWORD *)(a1 + 268)) {
        BOOL v15 = v9 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      uint64_t v16 = v9;
      if (v15) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 1LL;
      }
      uint64_t v18 = *(void *)(*v11 + 8LL * v9);
      if (*(_DWORD *)(*(void *)(a1 + 1432) + 28LL))
      {
        if (v9 != sub_100004688(a1))
        {
          unsigned int v22 = 1;
          v13.i64[0] = 0x100000001LL;
          v13.i64[1] = 0x100000001LL;
          if (v18) {
            BOOL v25 = 1;
          }
          else {
            BOOL v25 = v12 == 0;
          }
          if (!v25) {
            goto LABEL_4;
          }
          goto LABEL_42;
        }

        int v6 = *(_DWORD *)(a1 + 1072);
        v13.i64[0] = 0x100000001LL;
        v13.i64[1] = 0x100000001LL;
      }

      if (v6 <= v7)
      {
        unsigned int v22 = 1;
        if (v18) {
          BOOL v23 = 1;
        }
        else {
          BOOL v23 = v12 == 0;
        }
        if (!v23) {
          goto LABEL_4;
        }
      }

      else
      {
        if (*(_DWORD *)(a1 + 1176))
        {
          uint64_t v19 = (int *)(*(void *)(a1 + 1160) + 4 * v16);
          int v21 = *v19;
          int v20 = v19[1];
        }

        else
        {
          uint64_t v27 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v16);
          int v21 = *v27;
          int v20 = v27[1];
        }

        unsigned int v22 = v20 - v21;
        if (v18) {
          BOOL v28 = 1;
        }
        else {
          BOOL v28 = v12 == 0;
        }
        if (!v28 || v20 == v21) {
          goto LABEL_4;
        }
      }

void *sub_100080118( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  int v8 = a6;
  int v279 = a5;
  int v9 = a4;
  int v10 = a3;
  unsigned __int8 v11 = a2;
  uint64_t v13 = *(int *)(a1 + 1100);
  uint64_t v271 = *(void **)(a1 + 1432);
  uint64_t v14 = 4 * v13;
  uint64_t v282 = (int32x4_t *)sub_1000CAFC0(4 * v13, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v280 = v13;
  uint64_t v22 = 2 * v13;
  if (v9)
  {
    uint64_t v281 = (int32x4_t *)sub_1000CAFC0(v14, v15, v16, v17, v18, v19, v20, v21);
    unsigned int v283 = (int32x4_t *)sub_1000CAFC0(v22, v23, v24, v25, v26, v27, v28, v29);
    v285[0] = 0LL;
    int v30 = *(_DWORD *)(a1 + 1072);
    if (v30 < 1) {
      goto LABEL_201;
    }
  }

  else
  {
    unsigned int v283 = 0LL;
    uint64_t v281 = 0LL;
    v285[0] = 0LL;
    int v30 = *(_DWORD *)(a1 + 1072);
    if (v30 < 1) {
      goto LABEL_201;
    }
  }

  uint64_t v267 = v14;
  int v31 = 0;
  int v32 = 0;
  unsigned __int16 v33 = 0;
  int v277 = v11;
  uint64_t v274 = v8;
  uint64_t v34 = (int32x4_t *)((char *)v282 + 4 * v280);
  uint64_t v35 = (int32x4_t *)((char *)v283 + 2 * v280);
  int32x4_t v36 = (int32x4_t *)((char *)v281 + 4 * v280);
  uint64_t v269 = 2LL * v8 + 2;
  BOOL v38 = v281 < v34 && v282 < v36;
  unint64_t v273 = (unint64_t)v281 + 4 * v280;
  if (v281 < v35 && v283 < v36) {
    BOOL v38 = 1;
  }
  BOOL v272 = v38;
  unint64_t v278 = (unint64_t)v282 + 4 * v280;
  BOOL v41 = v282 < v35 && v283 < v34;
  BOOL v276 = v41;
  uint64_t v275 = v280 & 0xFFFFFFF0;
  uint64_t v270 = v280 & 0xFFFFFFF8;
  do
  {
    if (*(_DWORD *)(a1 + 268)) {
      BOOL v42 = v33 == 0;
    }
    else {
      BOOL v42 = 1;
    }
    uint64_t v43 = v33;
    if (v42) {
      uint64_t v44 = v33;
    }
    else {
      uint64_t v44 = 1LL;
    }
    uint64_t v284 = *(void *)(*v271 + 8LL * v33);
    int v45 = (uint64_t *)v283;
    if (*(_DWORD *)(*(void *)(a1 + 1432) + 28LL))
    {
      int v30 = *(_DWORD *)(a1 + 1072);
    }

    if (v30 <= v31)
    {
LABEL_37:
      int v49 = 1;
      if (v284) {
        BOOL v50 = 1;
      }
      else {
        BOOL v50 = v10 == 0;
      }
      BOOL v52 = !v50;
      if (v52) {
        goto LABEL_23;
      }
LABEL_60:
      unint64_t v57 = v49;
      if (v283)
      {
        uint64_t v58 = 0LL;
        while (1)
        {
          if (v10)
          {
            int v59 = *(__int16 *)(*(void *)(v284 + 8) + 2 * v58);
            if (!v9) {
              goto LABEL_83;
            }
          }

          else
          {
            int v59 = 1;
            if (!v9) {
              goto LABEL_83;
            }
          }

          uint64_t v60 = *(unsigned int *)(a1 + 1100);
          uint64_t v61 = sub_100005528(a1, v43, v58);
          if (v279)
          {
            uint64_t v62 = 0LL;
            uint64_t v62 = v60 & 0x7FFFFFF0;
            int16x8_t v63 = (__int128 *)(v61 + 16);
            uint64_t v64 = v60 & 0xFFFFFFF0;
            uint64_t v65 = v283 + 1;
            do
            {
              __int128 v66 = *v63;
              v65[-1] = (int32x4_t)*(v63 - 1);
              *uint64_t v65 = (int32x4_t)v66;
              v63 += 2;
              v65 += 2;
              v64 -= 16LL;
            }

            while (v64);
            if (v62 != v60)
            {
LABEL_74:
              uint64_t v67 = v60 - v62;
              uint64_t v68 = 2 * v62;
              unsigned int v69 = &v283->i16[v62];
              uint64_t v70 = (__int16 *)(v61 + v68);
              do
              {
                __int16 v71 = *v70++;
                *v69++ = v71;
                --v67;
              }

              while (v67);
            }
          }

          else
          {
            int8x16_t v72 = (const __int16 *)(v61 + 2 * v274);
            if (v60 < 0x10 || (unint64_t)v283 < v61 + v269 && v72 < &v283->i16[v60])
            {
              uint64_t v73 = 0LL;
LABEL_81:
              uint64_t v74 = v60 - v73;
              uint64_t v75 = &v283->i16[v73];
              do
              {
                *v75++ = *v72;
                --v74;
              }

              while (v74);
              goto LABEL_83;
            }

            uint64_t v73 = v60 & 0x7FFFFFF0;
            int16x8_t v114 = vld1q_dup_s16(v72);
            uint64_t v115 = v60 & 0xFFFFFFF0;
            uint64_t v116 = (int16x8_t *)&v283[1];
            do
            {
              v116[-1] = v114;
              *uint64_t v116 = v114;
              v116 += 2;
              v115 -= 16LL;
            }

            while (v115);
            if (v73 != v60) {
              goto LABEL_81;
            }
          }

LABEL_167:
        if (!v192) {
          goto LABEL_145;
        }
        v32 += v192;
        sub_100004868(a1, v43, (int)v45, v285);
        unint64_t v205 = v285[0];
        if (v280 >= 8 && ((unint64_t)v282 >= v285[0] + v280 || v285[0] >= v278))
        {
          int32x4_t v211 = vdupq_n_s32(v192);
          if (v280 < 0x10)
          {
            uint64_t v212 = 0LL;
LABEL_178:
            uint64_t v213 = (uint64_t *)(v205 + v212);
            uint64_t v214 = (int32x4_t *)((char *)v282 + 4 * v212);
            uint64_t v215 = v212 - (v280 & 0xFFFFFFF8);
            do
            {
              uint64_t v216 = *v213++;
              v204.i64[0] = v216;
              int32x4_t v217 = (int32x4_t)vqtbl1q_s8((int8x16_t)v204, (int8x16_t)xmmword_1000F0320);
              int32x4_t v204 = (int32x4_t)vqtbl1q_s8((int8x16_t)v204, (int8x16_t)xmmword_1000F0330);
              int32x4_t v218 = vmlaq_s32(v214[1], v211, v217);
              *uint64_t v214 = vmlaq_s32(*v214, v211, v204);
              v214[1] = v218;
              v214 += 2;
              v215 += 8LL;
            }

            while (v215);
            uint64_t v206 = v280 & 0xFFFFFFF8;
            if (v270 == v280) {
              goto LABEL_145;
            }
            goto LABEL_173;
          }

          uint64_t v219 = v280 & 0xFFFFFFF0;
          uint64_t v220 = v282;
          uint64_t v221 = (int8x16_t *)v285[0];
          do
          {
            int8x16_t v222 = *v221++;
            int32x4_t v204 = (int32x4_t)vqtbl1q_s8(v222, (int8x16_t)xmmword_1000F0310);
            int32x4_t v223 = vmlaq_s32(v220[3], v211, (int32x4_t)vqtbl1q_s8(v222, (int8x16_t)xmmword_1000F0300));
            int32x4_t v224 = vmlaq_s32(v220[1], v211, (int32x4_t)vqtbl1q_s8(v222, (int8x16_t)xmmword_1000F0320));
            int32x4_t v225 = vmlaq_s32(v220[2], v211, v204);
            int32x4_t *v220 = vmlaq_s32(*v220, v211, (int32x4_t)vqtbl1q_s8(v222, (int8x16_t)xmmword_1000F0330));
            v220[1] = v224;
            v220[2] = v225;
            v220[3] = v223;
            v220 += 4;
            v219 -= 16LL;
          }

          while (v219);
          uint64_t v206 = v280 & 0xFFFFFFF0;
          if (v275 == v280) {
            goto LABEL_145;
          }
          uint64_t v212 = v280 & 0xFFFFFFF0;
          if ((v280 & 8) != 0) {
            goto LABEL_178;
          }
        }

        else
        {
          uint64_t v206 = 0LL;
        }

      *((_WORD *)v181 - 1) = 0;
      if ((vmvn_s8((int8x8_t)vceq_s32(v185, (int32x2_t)-1LL)).i32[1] & 1) != 0) {
LABEL_168:
      }
        *((_WORD *)v181 - 2) = 0;
LABEL_159:
      v180 -= 2;
      v181 -= 8;
      v182 -= 4LL;
      if (!v182)
      {
        if ((v204 & 0xFFFFFFFC) == (unint64_t)v204)
        {
LABEL_170:
          int32x4_t v155 = 0;
          LODWORD(v92) = 0;
          uint16x8_t v136 = v204;
          uint64_t v133 = v209;
          goto LABEL_114;
        }

        do
        {
LABEL_172:
          if (*(_DWORD *)&v209[4 * v157] != -1) {
            *(_WORD *)&__dsta[2 * v157] = 0;
          }
          int32x4_t v139 = v157-- <= 1;
        }

        while (!v139);
        goto LABEL_170;
      }
    }
  }

  uint16x8_t v135 = 0;
  uint16x8_t v136 = v204;
  uint64_t v207 = v76;
  int32x4_t v137 = (unint64_t)v115;
  int32x4_t v138 = v204 + 1;
  do
  {
    uint64_t v202 = v138;
    if (*(_DWORD *)&v209[4 * v134] != -1)
    {
      *(_WORD *)&__dsta[2 * v134] = 0;
      int32x4_t v140 = 1LL;
      int32x4_t v141 = v138;
      while (1)
      {
        int32x4_t v142 = v124;
        int32x4_t v143 = &v94[2 * (v134 - v140)];
        do
        {
          int32x4_t v144 = *(unsigned __int16 *)v143;
          if (!*(_WORD *)v143) {
            goto LABEL_85;
          }
          v143 += 2;
        }

        while (sub_1000CBA60(v144));
        int32x4_t v152 = (void *)sub_1000CAF58(4LL, v145, v146, v147, v148, v149, v150, v151);
        int32x4_t v153 = sub_100082CF0(*v213);
        if (v153 >= 1) {
          break;
        }
        if (v152) {
          goto LABEL_93;
        }
LABEL_94:
        if (!v153)
        {
LABEL_85:
          int32x4_t v124 = v142;
          int32x4_t v137 = (unint64_t)v115;
          goto LABEL_86;
        }

        int32x4_t v137 = (unint64_t)v115;
        int32x4_t v124 = v142;
        sub_1000B33F8((char *)v213, v135, (uint64_t)v115, v142);
        int32x4_t v154 = v134 - sub_1000CC52C((unint64_t)v115);
        if (*(_DWORD *)&v209[4 * v154] == -1)
        {
          *(_DWORD *)&v209[4 * v154] = v135;
          if (v154 < v136) {
            uint16x8_t v136 = v154;
          }
        }

            uint64_t v67 = v395;
          }
        }

        else
        {
          unint64_t v77 = 0;
          uint64_t v67 = v395;
          __int16 v71 = v396;
          unsigned int v69 = __dst;
        }

        uint64_t v73 = v400;
        int8x16_t v76 = 0;
        *(_DWORD *)v400 = 0x7FFFFFFF;
        goto LABEL_89;
      }

      uint64_t v84 = sub_1000BB868(v381, v83, 0LL);
      uint64_t v85 = sub_1000D5FEC((void *)v395, v74, &v414, &v415, v84);
      if (v85 == 0x7FFFFFFF)
      {
        unint64_t v77 = v414;
        unsigned int v86 = __src;
        __int16 v71 = v396;
        if (!v414)
        {
          int8x16_t v76 = 0;
          uint64_t v73 = v400;
          *(_DWORD *)v400 = 0x7FFFFFFF;
          a2 = (_DWORD *)v407;
          uint64_t v67 = v395;
          unsigned int v69 = __dst;
          goto LABEL_89;
        }

        uint64_t v87 = *v396;
        uint64_t v88 = v78 - 1;
        int v416 = v78 - 1;
        a2 = (_DWORD *)v407;
        if (v78 != 1)
        {
          unsigned int v69 = __dst;
          uint64_t v89 = 2 * (v88 - __dst);
LABEL_147:
          j__memmove(v71, v86, v89);
          uint64_t v67 = v395;
          __int16 v71 = v396;
          unint64_t v77 = 0;
          v48[v88] = v87;
          int8x16_t v76 = 1;
          uint64_t v73 = v400;
          goto LABEL_89;
        }

        int v45 = 0LL;
        uint64_t v370 = 1;
        uint64_t v371 = v68;
        uint64_t v67 = v395;
        goto LABEL_327;
      }

      int v90 = v85;
      LOWORD(v91) = qword_1000FDCC0;
      __int16 v71 = v396;
      if (qword_1000FDCC0) {
        int v91 = *(void *)(qword_1000FDCC0 + 1704);
      }
      uint64_t v67 = v395;
      int v92 = v415 + v91;
      v415 += v91;
      int v93 = *(unsigned __int16 *)(v80 + 8 * v81 + 2);
      if (v93 == a4)
      {
        uint64_t v73 = v400;
        if (*v75)
        {
          a2 = (_DWORD *)v407;
          int v94 = v407 + (v72 << 7);
          int v95 = *(_DWORD *)(v94 + 12) - v414;
          *(_DWORD *)(v94 + 12) = v95;
          *(_DWORD *)v400 = 0x7FFFFFFF;
          unsigned int v69 = __dst;
          v417 = __dst;
          if (__dst >= 1)
          {
            do
            {
              --v417;
            }

            while (v417 > 0);
          }

          __int16 v71 = v396;
          if (v417 != __dst)
          {
            int v96 = *v396;
            int v97 = &v48[v417];
            j__memmove(v97 + 1, v97, 2 * (__dst - v417));
            uint64_t v67 = v395;
            __int16 v71 = v396;
            int8x16_t v76 = 0;
            unint64_t v77 = 0;
            *int v97 = v96;
            uint64_t v73 = v400;
            goto LABEL_89;
          }

LABEL_173:
        uint64_t v207 = v280 - v206;
        uint64_t v208 = &v282->i32[v206];
        uint64_t v209 = (unsigned __int8 *)(v205 + v206);
        do
        {
          int v210 = *v209++;
          *v208++ += v192 * v210;
          --v207;
        }

        while (v207);
LABEL_145:
        int v45 = (uint64_t *)((char *)v45 + 1);
      }
    }

    if (*(_DWORD *)(a1 + 1176))
    {
      int32x4_t v46 = (int *)(*(void *)(a1 + 1160) + 4 * v43);
      int v48 = *v46;
      int v47 = v46[1];
    }

    else
    {
      uint16x8_t v53 = (unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v43);
      int v48 = *v53;
      int v47 = v53[1];
    }

    int v49 = v47 - v48;
    if (v284) {
      BOOL v54 = 1;
    }
    else {
      BOOL v54 = v10 == 0;
    }
    if (v54 && v49 != 0 && v49 >= 1) {
      goto LABEL_60;
    }
LABEL_23:
    unsigned __int16 v33 = v43 + 1;
    int v31 = (unsigned __int16)(v43 + 1);
    int v30 = *(_DWORD *)(a1 + 1072);
  }

  while (v30 > v31);
  uint64_t v14 = v267;
  if (v32 >= 1 && (int)v280 >= 1)
  {
    if (!v9)
    {
      double v234 = (double)v32;
      if (v280 >= 8 && (v278 <= a7 || (unint64_t)v282 >= a7 + 8LL * v280))
      {
        float64x2_t v258 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v234, 0);
        int v259 = v282 + 1;
        unsigned __int16 v260 = (float64x2_t *)(a7 + 32);
        uint64_t v261 = v280 & 0xFFFFFFF8;
        do
        {
          int32x4_t v262 = v259[-1];
          v263.i64[0] = v262.i32[2];
          v263.i64[1] = v262.i32[3];
          float64x2_t v264 = vcvtq_f64_s64(v263);
          v263.i64[0] = v262.i32[0];
          v263.i64[1] = v262.i32[1];
          float64x2_t v265 = vcvtq_f64_s64(v263);
          v263.i64[0] = (int)v259->i64[1];
          v263.i64[1] = (int)HIDWORD(*(unsigned __int128 *)v259);
          float64x2_t v266 = vcvtq_f64_s64(v263);
          v263.i64[0] = v259->i32[0];
          v263.i64[1] = (int)HIDWORD(v259->i64[0]);
          v260[-2] = vdivq_f64(v265, v258);
          v260[-1] = vdivq_f64(v264, v258);
          *unsigned __int16 v260 = vdivq_f64(vcvtq_f64_s64(v263), v258);
          v260[1] = vdivq_f64(v266, v258);
          v260 += 4;
          v259 += 2;
          v261 -= 8LL;
        }

        while (v261);
        if (v270 == v280) {
          goto LABEL_201;
        }
      }

      else
      {
        uint64_t v270 = 0LL;
      }

      double v235 = &v282->i32[v270];
      uint64_t v236 = v280 - v270;
      double v237 = (double *)(a7 + 8 * v270);
      do
      {
        int v238 = *v235++;
        *v237++ = (double)v238 / v234;
        --v236;
      }

      while (v236);
      goto LABEL_201;
    }

    if (v280 < 8)
    {
      uint64_t v226 = 0LL;
LABEL_192:
      int v227 = (double *)(a7 + 8 * v226);
      uint64_t v228 = &v282->i32[v226];
      uint64_t v229 = &v281->i32[v226];
      uint64_t v230 = v280 - v226;
      do
      {
        int v232 = *v229++;
        int v231 = v232;
        int v233 = *v228++;
        *v227++ = (double)v233 / (double)v231;
        --v230;
      }

      while (v230);
      goto LABEL_201;
    }

    uint64_t v226 = 0LL;
    unint64_t v240 = a7 + 8LL * v280;
    BOOL v242 = v278 > a7 && (unint64_t)v282 < v240;
    if (v242) {
      goto LABEL_192;
    }
    int v244 = v281 + 1;
    uint64_t v245 = v282 + 1;
    uint64_t v246 = (float64x2_t *)(a7 + 32);
    uint64_t v247 = v280 & 0xFFFFFFF8;
    do
    {
      int32x4_t v248 = v244[-1];
      int32x4_t v249 = v245[-1];
      v250.i64[0] = v249.i32[2];
      v250.i64[1] = v249.i32[3];
      float64x2_t v251 = vcvtq_f64_s64(v250);
      v250.i64[0] = v249.i32[0];
      v250.i64[1] = v249.i32[1];
      float64x2_t v252 = vcvtq_f64_s64(v250);
      v250.i64[0] = (int)v245->i64[1];
      v250.i64[1] = (int)HIDWORD(*(unsigned __int128 *)v245);
      float64x2_t v253 = vcvtq_f64_s64(v250);
      v250.i64[0] = v245->i32[0];
      v250.i64[1] = (int)HIDWORD(v245->i64[0]);
      float64x2_t v254 = vcvtq_f64_s64(v250);
      v250.i64[0] = v248.i32[2];
      v250.i64[1] = v248.i32[3];
      float64x2_t v255 = vcvtq_f64_s64(v250);
      v250.i64[0] = v248.i32[0];
      v250.i64[1] = v248.i32[1];
      float64x2_t v256 = vcvtq_f64_s64(v250);
      v250.i64[0] = (int)v244->i64[1];
      v250.i64[1] = (int)HIDWORD(*(unsigned __int128 *)v244);
      float64x2_t v257 = vcvtq_f64_s64(v250);
      v250.i64[0] = v244->i32[0];
      v250.i64[1] = (int)HIDWORD(v244->i64[0]);
      v246[-2] = vdivq_f64(v252, v256);
      v246[-1] = vdivq_f64(v251, v255);
      *uint64_t v246 = vdivq_f64(v254, vcvtq_f64_s64(v250));
      v246[1] = vdivq_f64(v253, v257);
      v246 += 4;
      v244 += 2;
      v245 += 2;
      v247 -= 8LL;
    }

    while (v247);
    uint64_t v226 = v280 & 0xFFFFFFF8;
    if (v270 != v280) {
      goto LABEL_192;
    }
  }

        CFRelease(v33);
        CFRelease(v10);
        int v10 = v39;
        if (!v39) {
          goto LABEL_164;
        }
        goto LABEL_19;
      }

      CFRelease(v10);
    }

    int v10 = 0LL;
    goto LABEL_164;
  }

  int v10 = v16;
  allocator = v4;
  CFRetain(v16);
LABEL_19:
  uint64_t v119 = a1;
  uint64_t v17 = v7;
  uint64_t v18 = v5;
  int32x4_t v129 = CFGetAllocator((CFTypeRef)v3);
  TypeID = CFArrayGetTypeID();
  uint64_t v20 = CFStringGetTypeID();
  uint64_t v121 = CFDictionaryGetTypeID();
  uint64_t v21 = CFBooleanGetTypeID();
  uint64_t v22 = CFNumberGetTypeID();
  int32x4_t v139 = 0LL;
  valuePtr[0] = 0LL;
  int32x4_t v138 = 0LL;
  uint64_t v131 = 0LL;
  ValueIfType = (const __CFArray *)VSCFDictionaryGetValueIfType(v10, @"VSRecognitionClasses", TypeID);
  theArray = (const __CFArray *)VSCFDictionaryGetValueIfType(v10, @"VSRecognitionSequences", TypeID);
  uint16x8_t v123 = TypeID;
  uint64_t v24 = VSCFDictionaryGetValueIfType(v10, @"VSRecognitionKeywords", TypeID);
  int32x4_t v112 = v22;
  number = (const __CFNumber *)VSCFDictionaryGetValueIfType(v9, @"VSRecognitionModelWeight", v22);
  uint64_t v113 = v21;
  uint64_t v25 = v21;
  uint64_t v26 = ValueIfType;
  BOOLeaint n = (const __CFBoolean *)VSCFDictionaryGetValueIfType(v9, @"VSRecognitionModelIsCancelModel", v25);
  if (ValueIfType) {
    Count = CFArrayGetCount(ValueIfType);
  }
  else {
    Count = 0LL;
  }
  int32x4_t v118 = v3;
  unsigned int v5 = v18;
  int v7 = v17;
  valuea = v10;
  if (!theArray)
  {
    BOOL v41 = 0LL;
    int32x4_t v125 = 0LL;
    uint64_t v43 = 0LL;
    cf = 0LL;
    int v10 = 0LL;
    goto LABEL_109;
  }

  int32x4_t v40 = CFArrayGetCount(theArray);
  BOOL v41 = 0LL;
  BOOL v42 = v119;
  if (!v26 || Count < 1)
  {
    int32x4_t v125 = 0LL;
    uint64_t v43 = 0LL;
    cf = 0LL;
    int v10 = 0LL;
    goto LABEL_145;
  }

  int v107 = (const void *)v24;
  int32x4_t v125 = 0LL;
  uint64_t v43 = 0LL;
  cf = 0LL;
  int v10 = 0LL;
  if (v40 < 1) {
    goto LABEL_145;
  }
  int v111 = v18;
  uint64_t v44 = VSCFDictionaryGetValueIfType(v9, @"VSRecognitionModelDataProvider", v20);
  cf = 0LL;
  int v45 = 0LL;
  uint64_t v43 = 0LL;
  int32x4_t v125 = 0LL;
  int16x8_t v114 = v44 != 0;
  int v108 = v7;
  int32x4_t v46 = v123;
  uint64_t v130 = v20;
  uint64_t v120 = v26;
  while (1)
  {
    ValueAtIndexIfType = VSCFArrayGetValueAtIndexIfType(v26, v45, v121);
    if (!ValueAtIndexIfType) {
      break;
    }
    int v48 = (const void *)ValueAtIndexIfType;
    int32x4_t v126 = v45;
    int v49 = (const __CFString *)VSCFDictionaryGetValueIfType( ValueAtIndexIfType,  @"VSRecognitionClassIdentifier",  v20);
    if (!v49) {
      break;
    }
    BOOL v50 = v49;
    Length = CFStringGetLength(v49);
    BOOL v52 = Length > 0;
    if (Length < 1) {
      break;
    }
    theDict = v43;
    uint16x8_t v53 = (const __CFArray *)VSCFDictionaryGetValueIfType(v48, @"VSRecognitionClassRequiredCapabilities", v46);
    if (v53)
    {
      BOOL v54 = v53;
      uint64_t v55 = CFArrayGetCount(v53);
      if (v55 >= 1)
      {
        double v56 = v55;
        unint64_t v57 = 0LL;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v54, v57);
          int v59 = (const void *)MGCopyAnswer(ValueAtIndex, 0LL);
          if (!v59) {
            break;
          }
          uint64_t v60 = v59;
          uint64_t v61 = CFGetTypeID(v59);
          if (v61 != CFBooleanGetTypeID())
          {
            CFRelease(v60);
            break;
          }

          uint64_t v62 = CFBooleanGetValue((CFBooleanRef)v60);
          CFRelease(v60);
          if (!v62) {
            break;
          }
          if (v56 == ++v57) {
            goto LABEL_49;
          }
        }

        uint64_t v43 = theDict;
        Mutable = cf;
        uint64_t v26 = v120;
        if (!cf) {
          Mutable = CFSetCreateMutable(v129, 0LL, &kCFTypeSetCallBacks);
        }
        cf = Mutable;
        CFSetAddValue(Mutable, v50);
        uint64_t v20 = v130;
        goto LABEL_105;
      }
    }

LABEL_201:
  sub_1000CB038(v283, v22);
  sub_1000CB038(v281, v14);
  return sub_1000CB038(v282, v14);
}

void *sub_100080DE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a5;
  int v259 = a4;
  int v9 = a3;
  unsigned __int8 v10 = a2;
  uint64_t v12 = *(int *)(a1 + 1100);
  int32x4_t v248 = *(void **)(a1 + 1432);
  uint64_t v13 = 4 * v12;
  uint64_t v21 = (int32x4_t *)sub_1000CAFC0(4 * v12, a2, a3, a4, a5, a6, a7, a8);
  unsigned int v262 = v12;
  size_t v22 = 2 * v12;
  uint64_t v246 = v22;
  if (v9)
  {
    uint64_t v261 = (int32x4_t *)sub_1000CAFC0(v13, v14, v15, v16, v17, v18, v19, v20);
    int v30 = (int32x4_t *)sub_1000CAFC0(v22, v23, v24, v25, v26, v27, v28, v29);
    float64x2_t v265 = 0LL;
    int v31 = *(_DWORD *)(a1 + 1072);
    if (v31 < 1) {
      goto LABEL_191;
    }
  }

  else
  {
    int v30 = 0LL;
    uint64_t v261 = 0LL;
    float64x2_t v265 = 0LL;
    int v31 = *(_DWORD *)(a1 + 1072);
    if (v31 < 1) {
      goto LABEL_191;
    }
  }

  uint64_t v244 = v13;
  int v32 = 0;
  int v33 = 0;
  unsigned __int16 v34 = 0;
  int v252 = v10;
  uint64_t v255 = v8;
  uint64_t v35 = &v21->i8[4 * v262];
  uint64_t v257 = 2LL * v262;
  int32x4_t v36 = (int32x4_t *)((char *)v30 + v257);
  int32x4_t v37 = (int32x4_t *)((char *)v261 + 4 * v262);
  uint64_t v249 = 2LL * v8 + 2;
  BOOL v39 = v261 < (int32x4_t *)v35 && v21 < v37;
  float64x2_t v254 = &v261->i8[4 * v262];
  if (v261 < v36 && v30 < v37) {
    BOOL v39 = 1;
  }
  BOOL v253 = v39;
  unint64_t v260 = (unint64_t)v21 + 4 * v262;
  BOOL v42 = v21 < v36 && v30 < (int32x4_t *)v35;
  BOOL v258 = v42;
  uint64_t v251 = v262 & 0xFFFFFFF0;
  int64x2_t v250 = (int16x8_t *)&v30[1];
  uint64_t v256 = v262 & 0xFFFFFFF8;
  uint64_t v247 = v21 + 2;
  v43.i64[0] = 0x1000000010LL;
  v43.i64[1] = 0x1000000010LL;
  int64x2_t v263 = v21;
  float64x2_t v264 = v30;
  do
  {
    if (*(_DWORD *)(a1 + 268)) {
      BOOL v44 = v34 == 0;
    }
    else {
      BOOL v44 = 1;
    }
    uint64_t v45 = v34;
    if (v44) {
      uint64_t v46 = v34;
    }
    else {
      uint64_t v46 = 1LL;
    }
    uint64_t v47 = *(void *)(*v248 + 8LL * v34);
    if (*(_DWORD *)(*(void *)(a1 + 1432) + 28LL))
    {
      if (v34 != sub_100004688(a1))
      {
        int v48 = 1;
        int v30 = v264;
        v43.i64[0] = 0x1000000010LL;
        v43.i64[1] = 0x1000000010LL;
        if (v47) {
          goto LABEL_55;
        }
        goto LABEL_23;
      }

      int v31 = *(_DWORD *)(a1 + 1072);
      int v30 = v264;
      v43.i64[0] = 0x1000000010LL;
      v43.i64[1] = 0x1000000010LL;
    }

    if (v31 <= v32)
    {
      int v48 = 1;
      if (v47) {
        goto LABEL_55;
      }
    }

    else
    {
      if (!*(_DWORD *)(a1 + 1176))
      {
        if (v47) {
          BOOL v51 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v45 + 2) == *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v45);
        }
        else {
          BOOL v51 = 1;
        }
        if (v51 || v48 < 1) {
          goto LABEL_23;
        }
LABEL_55:
        uint64_t v53 = 0LL;
        uint64_t v54 = v48;
        while (2)
        {
          uint64_t v58 = *(void *)(v47 + 8);
          unsigned int v59 = *(__int16 *)(v58 + 2 * v53);
          if (!*(_WORD *)(v58 + 2 * v53)) {
            goto LABEL_59;
          }
          if (v9)
          {
            uint64_t v60 = *(unsigned int *)(a1 + 1100);
            uint64_t v61 = sub_100005528(a1, v45, v53);
            v43.i64[0] = 0x1000000010LL;
            v43.i64[1] = 0x1000000010LL;
            int v30 = v264;
            if ((int)v60 >= 1)
            {
              if (v259)
              {
                uint64_t v62 = (const __int16 *)(v61 + 2 * v255);
                if (v60 < 0x10 || (unint64_t)v264 < v61 + v249 && v62 < &v264->i16[v60])
                {
                  uint64_t v63 = 0LL;
                  goto LABEL_68;
                }

                uint64_t v63 = v60 & 0x7FFFFFF0;
                int16x8_t v93 = vld1q_dup_s16(v62);
                uint64_t v94 = v60 & 0xFFFFFFF0;
                int v95 = v250;
                do
                {
                  v95[-1] = v93;
                  *int v95 = v93;
                  v95 += 2;
                  v94 -= 16LL;
                }

                while (v94);
                if (v63 != v60)
                {
LABEL_68:
                  uint64_t v64 = v60 - v63;
                  uint64_t v65 = &v264->i16[v63];
                  do
                  {
                    *v65++ = *v62;
                    --v64;
                  }

                  while (v64);
                }
              }

              else
              {
                uint64_t v79 = 0LL;
                uint64_t v79 = v60 & 0x7FFFFFF0;
                BOOL v80 = (int16x8_t *)(v61 + 16);
                uint64_t v81 = v60 & 0xFFFFFFF0;
                BOOL v82 = v250;
                do
                {
                  int16x8_t v83 = *v80;
                  v82[-1] = v80[-1];
                  int16x8_t *v82 = v83;
                  v80 += 2;
                  v82 += 2;
                  v81 -= 16LL;
                }

                while (v81);
                if (v79 != v60)
                {
LABEL_91:
                  uint64_t v84 = v60 - v79;
                  uint64_t v85 = 2 * v79;
                  unsigned int v86 = &v264->i16[v79];
                  uint64_t v87 = (__int16 *)(v61 + v85);
                  do
                  {
                    __int16 v88 = *v87++;
                    *v86++ = v88;
                    --v84;
                  }

                  while (v84);
                }
              }

              v33 += v59;
              if ((int)v262 > 0)
              {
                unint64_t v66 = *(void *)(*(void *)(v47 + 24) + 8 * v53);
                uint64_t v67 = v261;
                unsigned int v68 = 2 * v59;
                if (v262 >= 8) {
                  goto LABEL_106;
                }
                goto LABEL_118;
              }

LABEL_126:
              sub_100004868(a1, v45, v53, (unint64_t *)&v265);
              unint64_t v118 = (unint64_t)v265;
              if ((v56 & 1) != 0)
              {
                int v30 = v264;
                if (v55)
                {
                  uint64_t v21 = v263;
                  if (v262 < 8 || v263 < (int32x4_t *)&v265->i8[v262] && (unint64_t)v265 < v260)
                  {
                    uint64_t v119 = 0LL;
                    v43.i64[0] = 0x1000000010LL;
                    v43.i64[1] = 0x1000000010LL;
                    goto LABEL_132;
                  }

                  int32x4_t v158 = vdupq_n_s32(v59);
                  if (v262 < 0x10)
                  {
                    uint64_t v159 = 0LL;
                    v43.i64[0] = 0x1000000010LL;
                    v43.i64[1] = 0x1000000010LL;
LABEL_157:
                    uint64_t v160 = (uint64_t *)(v118 + v159);
                    uint64_t v161 = (int32x4_t *)((char *)v263 + 4 * v159);
                    uint64_t v162 = v159 - (v262 & 0xFFFFFFF8);
                    do
                    {
                      uint64_t v163 = *v160++;
                      v116.i64[0] = v163;
                      int32x4_t v164 = (int32x4_t)vqtbl1q_s8((int8x16_t)v116, (int8x16_t)xmmword_1000F0320);
                      int32x4_t v116 = (int32x4_t)vqtbl1q_s8((int8x16_t)v116, (int8x16_t)xmmword_1000F0330);
                      int32x4_t v165 = vmlaq_s32(v161[1], v158, v164);
                      *uint64_t v161 = vmlaq_s32(*v161, v158, v116);
                      v161[1] = v165;
                      v161 += 2;
                      v162 += 8LL;
                    }

                    while (v162);
                    uint64_t v119 = v262 & 0xFFFFFFF8;
                    if (v256 != v262)
                    {
LABEL_132:
                      uint64_t v120 = v262 - v119;
                      uint64_t v121 = &v263->i32[v119];
                      uint64_t v122 = (unsigned __int8 *)(v118 + v119);
                      do
                      {
                        int v123 = *v122++;
                        *v121++ += v123 * v59;
                        --v120;
                      }

                      while (v120);
                    }

  sub_1000CB094(v247);
  return v192;
}

LABEL_150:
                  v43.i64[0] = 0x1000000010LL;
                  v43.i64[1] = 0x1000000010LL;
                  goto LABEL_59;
                }

      BOOL v44 = (4 * v15);
      goto LABEL_151;
    }
  }

  return 0LL;
}

  int32x4_t v187 = 0LL;
  int32x4_t v188 = v101;
  int32x4_t v185 = v240;
  do
  {
    int32x4_t v189 = *(_DWORD *)(v55 + 4 * v187);
    if (v189 < 1) {
      goto LABEL_168;
    }
    int32x4_t v190 = 0LL;
    int32x4_t v191 = 0;
    do
    {
      int32x4_t v192 = *(void *)(v47 + 8 * v187);
      if (*(_WORD *)(v192 + 2 * v190))
      {
        *(_WORD *)(v192 + 2LL * v191++) = *(_WORD *)(v192 + 2 * v190);
        int32x4_t v189 = *(_DWORD *)(v55 + 4 * v187);
      }

      ++v190;
    }

    while (v190 < v189);
    *(_DWORD *)(v55 + 4 * v187) = v191;
    if (v191 < 1)
    {
LABEL_168:
      *(_DWORD *)(v55 + 4 * v187) = 0;
    }

    else
    {
      int32x4_t v193 = v191;
      int8x16_t v194 = *(unsigned __int16 **)(v47 + 8 * v187);
      while (1)
      {
        int32x4_t v195 = *v194++;
        if (!--v193) {
          goto LABEL_168;
        }
      }

      if (v187)
      {
        for (int n = 0LL; n != v187; ++n)
        {
          if (*(_DWORD *)(v55 + 4 * n) == v191)
          {
            int32x4_t v197 = *(unsigned __int16 **)(v47 + 8 * n);
            int32x4_t v198 = v191;
            int32x4_t v199 = *(unsigned __int16 **)(v47 + 8 * v187);
            while (1)
            {
              int32x4_t v201 = *v197++;
              int32x4_t v200 = v201;
              int32x4_t v202 = *v199++;
              if (v200 != v202) {
                break;
              }
              if (!--v198) {
                goto LABEL_168;
              }
            }
          }
        }
      }
    }

    ++v187;
  }

  while (v187 != v188);
  int v30 = 0LL;
  *uint64_t v244 = v240;
  uint64_t v186 = v240;
  if (v184)
  {
    uint64_t v203 = 0LL;
    int v30 = 0LL;
    uint64_t v186 = v240;
    int32x4_t v204 = a4;
    do
    {
      unint64_t v205 = *(_DWORD *)(v55 + 4 * v203);
      if (v205)
      {
        v186 += ~v205;
        if ((int)v262[26] >= 1)
        {
          float64x2_t v265 = 0LL;
          v266[1] = 0;
          sub_10007A9E8(*((void *)v262 + 10), *((unsigned __int16 *)v262 + 48), &v265, &v266[1]);
          uint64_t v206 = *(unsigned int *)(v55 + 4 * v203);
          if ((int)v206 < 1 || v266[1] < 1)
          {
            int32x4_t v184 = v255;
          }

          else
          {
            uint64_t v207 = *(void *)(v47 + 8 * v203);
            if (v266[1] >= 0x10u)
            {
              uint64_t v213 = 0LL;
              int32x4_t v184 = v255;
              do
              {
                uint64_t v214 = *(unsigned __int16 *)(v207 + 2 * v213);
                int v215 = 0uLL;
                uint64_t v216 = (int32x4_t)v186;
                unint64_t v217 = vdupq_n_s16(v214);
                int32x4_t v218 = v266[1] & 0xFFFFFFF0;
                BOOL v219 = v265 + 1;
                uint64_t v220 = 0uLL;
                uint64_t v221 = 0uLL;
                do
                {
                  int8x16_t v222 = vceqq_s16(v217, v219[-1]);
                  int32x4_t v223 = vceqq_s16(v217, *v219);
                  int v215 = vaddw_high_s16(v215, v222);
                  uint64_t v216 = vaddw_s16(v216, *(int16x4_t *)v222.i8);
                  uint64_t v221 = vaddw_high_s16(v221, v223);
                  uint64_t v220 = vaddw_s16(v220, *(int16x4_t *)v223.i8);
                  v219 += 2;
                  v218 -= 16LL;
                }

                while (v218);
                uint64_t v186 = vaddvq_s32(vaddq_s32(vaddq_s32(v220, v216), vaddq_s32(v221, v215)));
                if (v266[1] != (unint64_t)(v266[1] & 0xFFFFFFF0))
                {
                  uint64_t v224 = v266[1] - (unint64_t)(v266[1] & 0xFFFFFFF0);
                  int32x4_t v225 = (unsigned __int16 *)((char *)v265->u16 + ((2LL * v266[1]) & 0x1FFFFFFE0LL));
                  do
                  {
                    int32x4_t v226 = *v225++;
                    v186 -= v214 == v226;
                    --v224;
                  }

                  while (v224);
                }

                ++v213;
              }

              while (v213 != v206);
            }

            else
            {
              int v208 = 0LL;
              int32x4_t v184 = v255;
              do
              {
                int v209 = v265;
                int v210 = v266[1];
                do
                {
                  double v211 = v209->u16[0];
                  int v209 = (int16x8_t *)((char *)v209 + 2);
                  v186 -= *(unsigned __int16 *)(v207 + 2 * v208) == v211;
                  --v210;
                }

                while (v210);
                ++v208;
              }

              while (v208 != v206);
            }
          }
        }

        if ((v186 & 0x80000000) == 0)
        {
          if (*(int *)(v55 + 4 * v203) >= 1)
          {
            uint64_t v212 = 0LL;
            do
              *v204++ = *(_WORD *)(*(void *)(v47 + 8 * v203) + 2 * v212++);
            while (v212 < *(int *)(v55 + 4 * v203));
          }

          *v204++ = -1;
          v39[(int)v30] = v39[v203];
          int v30 = (v30 + 1);
        }
      }

      ++v203;
    }

    while (v203 < v188 && (_DWORD)v30 != v184);
  }

  sub_1000C0EF8((uint64_t)v36);
  sub_1000CB094(v16);
  return v37;
}

        int v31 = (CFDictionaryRef *)CFSetCreate(kCFAllocatorDefault, 0LL, 0LL, 0LL);
        uint64_t v53 = (CFSetRef)v31;
LABEL_151:
        uint64_t v54 = 0;
        if (v53) {
          goto LABEL_154;
        }
        goto LABEL_182;
      }
    }

    if (DWORD2(context)) {
      goto LABEL_186;
    }
    if (!theString1) {
      goto LABEL_150;
    }
    if (CFStringCompare(theString1, @"_default", 0LL) == kCFCompareEqualTo)
    {
      uint64_t v54 = 1;
      int v31 = (CFDictionaryRef *)sub_1000E625C();
      uint64_t v53 = (CFSetRef)v31;
      if (v31) {
        goto LABEL_154;
      }
      goto LABEL_182;
    }

    uint64_t v28 = v134;
    if (!v134)
    {
      int v31 = (CFDictionaryRef *)sub_1000E5578(theString1);
      uint64_t v58 = v31;
      if (v31) {
        goto LABEL_178;
      }
LABEL_182:
      unsigned int v59 = (os_log_s *)VSGetLogDefault(v31);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        LODWORD(outPropertyData.mSampleRate) = 136315138;
        *(void *)((char *)&outPropertyData.mSampleRate + 4) = "_InitializeEngine";
        _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "%s: no valid models could be created\n",  (uint8_t *)&outPropertyData,  0xCu);
      }

      uint64_t v57 = -4001;
      DWORD2(context) = -4001;
      unsigned int v5 = (void *)&unk_100102000;
LABEL_185:
      syslog( 3,  "Error %d at %s:%d\n",  v57,  "/Library/Caches/com.apple.xbs/Sources/VoiceServicesDaemons/Daemon/VSRecognitionServer.c",  997);
      goto LABEL_186;
    }

    ModelIdentifier = (const void *)VSRecognitionDisambiguationContextGetModelIdentifier(v134);
    int v30 = (os_log_s *)VSGetLogDefault(ModelIdentifier);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(outPropertyData.mSampleRate) = 138412290;
      *(void *)((char *)&outPropertyData.mSampleRate + 4) = v134;
      _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "%@", (uint8_t *)&outPropertyData, 0xCu);
    }

    int v31 = (CFDictionaryRef *)sub_1000E5578(ModelIdentifier);
    if (!v31) {
      goto LABEL_182;
    }
    uint64_t v127 = v31;
    int v32 = sub_1000E8378(v31);
    if (!v32) {
      goto LABEL_181;
    }
    uint64_t v120 = v32;
    SequenceTag = (const void *)VSRecognitionDisambiguationContextGetSequenceTag(v134);
    if (!SequenceTag) {
      goto LABEL_180;
    }
    unsigned __int16 v34 = (const __CFArray *)sub_1000E83E0(v127[73], SequenceTag);
    if (!v34) {
      goto LABEL_180;
    }
    uint64_t v35 = v34;
    Count = CFArrayGetCount(v34);
    if (Count < 1
      || (KnownClassValues = (const __CFDictionary *)VSRecognitionDisambiguationContextGetKnownClassValues(v134)) == 0LL
      || (theDict = KnownClassValues, CFDictionaryGetCount(KnownClassValues) < 1))
    {
      CFRelease(v35);
LABEL_180:
      CFRelease(v120);
LABEL_181:
      CFRelease(v127);
      goto LABEL_182;
    }

    uint64_t v122 = v35;
    theArray = 0LL;
    unint64_t v118 = 0LL;
    uint64_t v119 = 0LL;
    int32x4_t v37 = 0LL;
    theSet = 0LL;
    uint64_t v130 = a1;
    uint64_t v121 = v3;
    do
    {
      uint64_t v128 = v37;
      theString1a = (CFStringRef)CFArrayGetValueAtIndex(v35, v37);
      BOOL v38 = CFArrayGetCount((CFArrayRef)theString1a->data);
      if (v38 < 1) {
        goto LABEL_146;
      }
      BOOL v39 = v38;
      unsigned int v124 = (CFTypeRef)(v38 - 1);
      int32x4_t v40 = 0LL;
      BOOL v41 = -1LL;
      BOOL v42 = -1LL;
      do
      {
        int32x4_t v43 = CFArrayGetValueAtIndex((CFArrayRef)theString1a->data, v40);
        BOOL v44 = (const void *)*((void *)v43 + 2);
        if (v44)
        {
          CFRetain(*((CFTypeRef *)v43 + 2));
          Value = CFDictionaryGetValue(theDict, v44);
          if (v42 == -1 && Value == 0LL) {
            BOOL v42 = v40;
          }
          if (!Value) {
            BOOL v41 = v40;
          }
          CFRelease(v44);
        }

        ++v40;
      }

      while (v39 != v40);
      if (v42 == -1)
      {
        unsigned int v3 = v121;
        uint64_t v35 = v122;
        a1 = v130;
        uint64_t v28 = v134;
LABEL_146:
        uint64_t v47 = v128;
        goto LABEL_147;
      }

      uint64_t v28 = v134;
      uint64_t v35 = v122;
      uint64_t v47 = v128;
      if (v41 == -1 || !v42 && (CFTypeRef)v41 == v124)
      {
        unsigned int v3 = v121;
        a1 = v130;
        goto LABEL_147;
      }

      CFRetain(theString1a->data);
      theString1b = (const __CFArray *)theString1a->data;
      if (theString1b)
      {
        uint64_t v28 = v134;
        if (!theArray)
        {
          theArray = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          theSet = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
        }

        int v48 = v41 - v42;
        Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
        v178.locatioint n = v42;
        v178.length = v41 - v42 + 1;
        CFArrayAppendArray(Mutable, theString1b, v178);
        a1 = v130;
        if (v48 <= 0x7FFFFFFFFFFFFFFELL)
        {
          BOOL v49 = v48 + 2;
          do
          {
            BOOL v50 = CFArrayGetValueAtIndex(theString1b, v42);
            if (!CFSetContainsValue(theSet, v50))
            {
              CFSetAddValue(theSet, v50);
              CFArrayAppendValue(theArray, v50);
            }

            ++v42;
            --v49;
          }

          while (v49 > 1);
        }

        BOOL v51 = (const void *)sub_1000E94DC(kCFAllocatorDefault, Mutable, 0LL);
        BOOL v52 = v119;
        uint64_t v35 = v122;
        if (!v119)
        {
          BOOL v52 = CFArrayCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeArrayCallBacks);
          uint64_t v35 = v122;
          unint64_t v118 = CFSetCreateMutable(kCFAllocatorDefault, 0LL, &kCFTypeSetCallBacks);
        }

        uint64_t v119 = v52;
        unsigned int v3 = v121;
        if (!CFSetContainsValue(v118, v51))
        {
          CFArrayAppendValue(v119, v51);
          CFSetAddValue(v118, v51);
        }

        CFRelease(theString1b);
        CFRelease(v51);
        CFRelease(Mutable);
        goto LABEL_146;
      }

      unsigned int v3 = v121;
      a1 = v130;
      uint64_t v28 = v134;
LABEL_147:
      int32x4_t v37 = v47 + 1;
    }

    while (v37 != Count);
    CFRelease(v35);
    if (v119)
    {
      *(void *)&outPropertyData.mSampleRate = sub_1000E841C;
      *(void *)&outPropertyData.mFormatID = sub_1000E86FC;
      *(void *)&outPropertyData.mBytesPerPacket = sub_1000E8B04;
      *(void *)&outPropertyData.mBytesPerFrame = sub_1000E8C44;
      *(void *)&outPropertyData.mBitsPerChannel = 0LL;
      uint16x8_t v172 = 0LL;
      int32x4_t v173 = sub_1000E8D0C;
      __int16 v88 = (const void **)malloc(0x18uLL);
      *__int16 v88 = v127;
      v88[1] = v28;
      v88[2] = 0LL;
      CFRetain(v127);
      CFRetain(v28);
      uint64_t v89 = sub_1000E8048( kCFAllocatorDefault,  0LL,  0LL,  0,  theArray,  v119,  0LL,  0LL,  (__int128 *)&outPropertyData,  (uint64_t)v88);
      uint64_t v58 = (const void *)v89;
      if (v89) {
        *(_BYTE *)(v89 + 648) = 1;
      }
      else {
        sub_1000E8D0C(v88);
      }
      CFRelease(v119);
      CFRelease(v118);
    }

    else
    {
      uint64_t v58 = 0LL;
    }

    CFRelease(v120);
    if (theArray) {
      CFRelease(theArray);
    }
    if (theSet) {
      CFRelease(theSet);
    }
    CFRelease(v127);
    if (!v58) {
      goto LABEL_182;
    }
    *(void *)buf = 0LL;
    int v90 = (const __CFDictionary *)sub_1000E4930();
    *(void *)&outPropertyData.mSampleRate = buf;
    LOBYTE(outPropertyData.mFormatID) = 1;
    if (!v90) {
      goto LABEL_178;
    }
    int v91 = v90;
    CFDictionaryApplyFunction(v90, (CFDictionaryApplierFunction)sub_1000E62B4, &outPropertyData);
    CFRelease(v91);
    int v92 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_266;
    }
    MutableCopy = CFSetCreateMutableCopy(kCFAllocatorDefault, 0LL, *(CFSetRef *)buf);
    if (!MutableCopy)
    {
      CFRelease(v92);
LABEL_266:
      a1 = v130;
LABEL_178:
      *(void *)&outPropertyData.mSampleRate = v58;
      uint64_t v53 = CFSetCreate(kCFAllocatorDefault, (const void **)&outPropertyData, 1LL, &kCFTypeSetCallBacks);
      CFRelease(v58);
      goto LABEL_151;
    }

    uint64_t v53 = MutableCopy;
    CFSetAddValue(MutableCopy, v58);
    CFRelease(v92);
    uint64_t v54 = 0;
    a1 = v130;
LABEL_154:
    int v55 = (const __CFSet *)cf1[0];
    if (cf1[0])
    {
      if (CFEqual(cf1[0], v53))
      {
        CFRelease(v53);
        unsigned int v5 = (void *)&unk_100102000;
        goto LABEL_175;
      }

      int v55 = (const __CFSet *)cf1[0];
    }

    char v56 = v54 ^ 1;
    if (v55) {
      char v56 = 1;
    }
    if ((v56 & 1) != 0)
    {
      unsigned int v5 = (void *)&unk_100102000;
      if (v55 && CFSetGetCount(v55) >= 1)
      {
        if (*((void *)&v153 + 1)) {
          VSCFSetSendDifferences(cf1[0], v53, sub_1000E1228, &context);
        }
        if ((void)v153 && !DWORD2(context)) {
          VSCFSetSendDifferences(v53, cf1[0], sub_1000E1270, &context);
        }
        goto LABEL_172;
      }

LABEL_149:
                uint64_t v21 = v263;
                goto LABEL_150;
              }

              int v30 = v264;
              if (!v55) {
                goto LABEL_149;
              }
              unsigned int v124 = 2 * v59;
              uint64_t v21 = v263;
              if (v262 < 8) {
                goto LABEL_143;
              }
              BOOL v125 = v263 >= (int32x4_t *)&v265->i8[v262] || (unint64_t)v265 >= v260;
              char v126 = v258;
              if (!v125) {
                char v126 = 1;
              }
              if ((v126 & 1) != 0)
              {
LABEL_143:
                uint64_t v127 = 0LL;
                goto LABEL_144;
              }

              int32x4_t v166 = vdupq_n_s32(v124);
              if (v262 >= 0x10)
              {
                uint64_t v186 = v262 & 0xFFFFFFF0;
                int32x4_t v187 = v263;
                int32x4_t v188 = v265;
                int32x4_t v189 = v264;
                do
                {
                  int32x4_t v191 = *v189;
                  int32x4_t v190 = v189[1];
                  v189 += 2;
                  int32x4_t v192 = (int32x4_t)vmovl_high_u16((uint16x8_t)v191);
                  int32x4_t v193 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v190.i8);
                  int8x16_t v194 = *v188++;
                  v195.i64[0] = 0x1000000010LL;
                  v195.i64[1] = 0x1000000010LL;
                  int32x4_t v196 = vmlaq_s32( v195,  vmulq_s32(v166, (int32x4_t)vmovl_u16(*(uint16x4_t *)v191.i8)),  (int32x4_t)vqtbl1q_s8(v194, (int8x16_t)xmmword_1000F0330));
                  v191.i64[0] = 0x1000000010LL;
                  v191.i64[1] = 0x1000000010LL;
                  int32x4_t v197 = vmlaq_s32( v191,  vmulq_s32(v166, (int32x4_t)vmovl_high_u16((uint16x8_t)v190)),  (int32x4_t)vqtbl1q_s8(v194, (int8x16_t)xmmword_1000F0300));
                  v190.i64[0] = 0x1000000010LL;
                  v190.i64[1] = 0x1000000010LL;
                  int32x4_t v198 = vmlaq_s32( v190,  vmulq_s32(v166, v193),  (int32x4_t)vqtbl1q_s8(v194, (int8x16_t)xmmword_1000F0310));
                  v193.i64[0] = 0x1000000010LL;
                  v193.i64[1] = 0x1000000010LL;
                  int32x4_t v199 = vmlaq_s32( v193,  vmulq_s32(v166, v192),  (int32x4_t)vqtbl1q_s8(v194, (int8x16_t)xmmword_1000F0320));
                  int32x4_t v200 = v187[1];
                  int32x4_t v201 = vsraq_n_s32( *v187,  (int32x4_t)vsraq_n_u32((uint32x4_t)v196, (uint32x4_t)vcltzq_s32(v196), 0x1BuLL),  5uLL);
                  int32x4_t v202 = vsraq_n_s32( v187[3],  (int32x4_t)vsraq_n_u32((uint32x4_t)v197, (uint32x4_t)vcltzq_s32(v197), 0x1BuLL),  5uLL);
                  int8x16_t v117 = (int8x16_t)vsraq_n_s32( v187[2],  (int32x4_t)vsraq_n_u32((uint32x4_t)v198, (uint32x4_t)vcltzq_s32(v198), 0x1BuLL),  5uLL);
                  v187[2] = (int32x4_t)v117;
                  v187[3] = v202;
                  int32x4_t *v187 = v201;
                  v187[1] = vsraq_n_s32( v200,  (int32x4_t)vsraq_n_u32((uint32x4_t)v199, (uint32x4_t)vcltzq_s32(v199), 0x1BuLL),  5uLL);
                  v187 += 4;
                  v186 -= 16LL;
                }

                while (v186);
                uint64_t v127 = v262 & 0xFFFFFFF0;
                if (v251 == v262) {
                  goto LABEL_150;
                }
                uint64_t v167 = v262 & 0xFFFFFFF0;
                if ((v262 & 8) != 0) {
                  goto LABEL_163;
                }
              }

              else
              {
                uint64_t v167 = 0LL;
LABEL_163:
                int32x4_t v168 = (uint16x8_t *)((char *)v264 + 2 * v167);
                int32x4_t v169 = (uint64_t *)(v118 + v167);
                uint64_t v170 = v167 - (v262 & 0xFFFFFFF8);
                int32x4_t v171 = (int32x4_t *)((char *)v263 + 4 * v167);
                do
                {
                  uint16x8_t v172 = *v168++;
                  int32x4_t v173 = (int32x4_t)vmovl_high_u16(v172);
                  int32x4_t v174 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v172.i8);
                  v172.i64[0] = *v169++;
                  v117.i64[0] = v172.i64[0];
                  v175.i64[0] = 0x1000000010LL;
                  v175.i64[1] = 0x1000000010LL;
                  int32x4_t v176 = vmlaq_s32( v175,  vmulq_s32(v166, v174),  (int32x4_t)vqtbl1q_s8(v117, (int8x16_t)xmmword_1000F0330));
                  v174.i64[0] = 0x1000000010LL;
                  v174.i64[1] = 0x1000000010LL;
                  int32x4_t v177 = vmlaq_s32( v174,  vmulq_s32(v166, v173),  (int32x4_t)vqtbl1q_s8(v117, (int8x16_t)xmmword_1000F0320));
                  int8x16_t v117 = (int8x16_t)vsraq_n_s32( *v171,  (int32x4_t)vsraq_n_u32((uint32x4_t)v176, (uint32x4_t)vcltzq_s32(v176), 0x1BuLL),  5uLL);
                  int32x4_t v178 = vsraq_n_s32( v171[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v177, (uint32x4_t)vcltzq_s32(v177), 0x1BuLL),  5uLL);
                  int32x4_t *v171 = (int32x4_t)v117;
                  v171[1] = v178;
                  v171 += 2;
                  v170 += 8LL;
                }

                while (v170);
                uint64_t v127 = v262 & 0xFFFFFFF8;
                if (v256 == v262) {
                  goto LABEL_150;
                }
              }

LABEL_144:
              uint64_t v128 = v262 - v127;
              int32x4_t v129 = &v263->i32[v127];
              uint64_t v130 = (unsigned __int8 *)(v118 + v127);
              uint64_t v131 = (unsigned __int16 *)v264 + v127;
              do
              {
                int v133 = *v131++;
                int v132 = v133;
                int v134 = *v130++;
                int v135 = v124 * v132 * v134;
                int v136 = v135 + 16;
                BOOL v50 = v135 < -16;
                int v137 = v135 + 47;
                if (!v50) {
                  int v137 = v136;
                }
                *v129++ += v137 >> 5;
                --v128;
              }

              while (v128);
              goto LABEL_150;
            }
          }

          break;
        }

        v33 += v59;
        unint64_t v66 = *(void *)(*(void *)(v47 + 24) + 8 * v53);
        if (v30)
        {
          uint64_t v67 = v261;
          unsigned int v68 = 2 * v59;
          if (v262 < 8) {
            goto LABEL_118;
          }
LABEL_106:
          BOOL v96 = (unint64_t)v67 >= v66 + v257 || v66 >= (unint64_t)v254;
          int v97 = v253;
          if (!v96) {
            int v97 = 1;
          }
          else {
            int v99 = 1;
          }
          if (((v99 | v258) & 1) != 0)
          {
LABEL_118:
            uint64_t v100 = 0LL;
LABEL_119:
            uint64_t v101 = v262 - v100;
            uint64_t v102 = &v21->i32[v100];
            uint64_t v103 = v100;
            uint64_t v104 = (__int16 *)(v66 + 2 * v100);
            uint64_t v105 = &v67->i32[v100];
            int v106 = &v30->u16[v103];
            do
            {
              int v107 = v68 * *v106;
              int v108 = v107 + 16;
              BOOL v50 = v107 < -16;
              int v109 = v107 + 47;
              if (!v50) {
                int v109 = v108;
              }
              *v105++ += v109 >> 5;
              int v111 = *v106++;
              int v110 = v111;
              int v112 = *v104++;
              int v113 = 2 * v110 * v112;
              int v114 = v113 + 16;
              BOOL v50 = v113 < -16;
              int v115 = v113 + 47;
              if (!v50) {
                int v115 = v114;
              }
              *v102++ += v115 >> 5;
              --v101;
            }

            while (v101);
          }

          else
          {
            uint64_t v138 = v262 & 0xFFFFFFF8;
            int32x4_t v139 = vdupq_n_s32(v68);
            int32x4_t v140 = v21;
            int32x4_t v141 = (int16x8_t *)v66;
            int32x4_t v142 = v67;
            int32x4_t v143 = (uint16x8_t *)v30;
            do
            {
              uint16x8_t v144 = *v143++;
              int32x4_t v145 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v144.i8);
              int32x4_t v146 = (int32x4_t)vmovl_high_u16(v144);
              v147.i64[0] = 0x1000000010LL;
              v147.i64[1] = 0x1000000010LL;
              int32x4_t v148 = vmlaq_s32(v147, v139, v145);
              v149.i64[0] = 0x1000000010LL;
              v149.i64[1] = 0x1000000010LL;
              int32x4_t v150 = vmlaq_s32(v149, v139, v146);
              int32x4_t v151 = vsraq_n_s32( v142[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v150, (uint32x4_t)vcltzq_s32(v150), 0x1BuLL),  5uLL);
              *int32x4_t v142 = vsraq_n_s32( *v142,  (int32x4_t)vsraq_n_u32((uint32x4_t)v148, (uint32x4_t)vcltzq_s32(v148), 0x1BuLL),  5uLL);
              v142[1] = v151;
              v142 += 2;
              int16x8_t v152 = *v141++;
              int32x4_t v153 = vmulq_s32(v146, vmovl_high_s16(v152));
              int32x4_t v154 = vmulq_s32(v145, vmovl_s16(*(int16x4_t *)v152.i8));
              int32x4_t v155 = vaddq_s32(vaddq_s32(v154, v154), v43);
              int32x4_t v156 = vaddq_s32(vaddq_s32(v153, v153), v43);
              int32x4_t v157 = vsraq_n_s32( v140[1],  (int32x4_t)vsraq_n_u32((uint32x4_t)v156, (uint32x4_t)vcltzq_s32(v156), 0x1BuLL),  5uLL);
              *int32x4_t v140 = vsraq_n_s32( *v140,  (int32x4_t)vsraq_n_u32((uint32x4_t)v155, (uint32x4_t)vcltzq_s32(v155), 0x1BuLL),  5uLL);
              v140[1] = v157;
              v140 += 2;
              v138 -= 8LL;
            }

            while (v138);
            uint64_t v100 = v262 & 0xFFFFFFF8;
            if (v256 != v262) {
              goto LABEL_119;
            }
          }

          char v56 = 0;
          int v55 = 1;
          uint64_t v57 = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            goto LABEL_57;
          }
          goto LABEL_126;
        }

        if ((int)v262 < 1)
        {
          int v55 = 0;
          char v56 = 1;
          uint64_t v57 = qword_1000FDCC0;
          if (qword_1000FDCC0) {
            goto LABEL_57;
          }
          goto LABEL_126;
        }

        if (v262 < 0x10 || ((unint64_t)v21 < v66 + v257 ? (BOOL v69 = v66 >= v260) : (BOOL v69 = 1), !v69))
        {
          uint64_t v78 = 0LL;
          goto LABEL_95;
        }

        uint64_t v70 = (int16x4_t *)(v66 + 16);
        uint64_t v71 = v262 & 0xFFFFFFF0;
        int8x16_t v72 = v247;
        do
        {
          int16x8_t v73 = *(int16x8_t *)v70[-2].i8;
          int32x4_t v74 = vaddw_s16(v72[-2], *(int16x4_t *)v73.i8);
          int32x4_t v75 = vaddw_high_s16(v72[-1], v73);
          int32x4_t v76 = vaddw_s16(*v72, *v70);
          int32x4_t v77 = vaddw_high_s16(v72[1], *(int16x8_t *)v70->i8);
          v72[-2] = v74;
          v72[-1] = v75;
          int32x4_t *v72 = v76;
          v72[1] = v77;
          v72 += 4;
          v70 += 4;
          v71 -= 16LL;
        }

        while (v71);
        uint64_t v78 = v262 & 0xFFFFFFF0;
        if (v251 != v262)
        {
LABEL_95:
          uint64_t v89 = v262 - v78;
          int v90 = &v21->i32[v78];
          int v91 = (__int16 *)(v66 + 2 * v78);
          do
          {
            int v92 = *v91++;
            *v90++ += v92;
            --v89;
          }

          while (v89);
        }

        int v55 = 1;
        char v56 = 1;
        uint64_t v57 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          goto LABEL_57;
        }
        goto LABEL_126;
      }

      int v48 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v45 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v45);
      if (v47) {
        BOOL v49 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v45 + 4) == *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v45);
      }
      else {
        BOOL v49 = 1;
      }
      BOOL v50 = v49 || v48 < 1;
      if (!v50) {
        goto LABEL_55;
      }
    }

LABEL_191:
  sub_1000CB038(v30, v246);
  sub_1000CB038(v261, v13);
  return sub_1000CB038(v21, v13);
}

void *sub_1000819FC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v151 = a4;
  v152[0] = 0LL;
  unsigned __int8 v9 = a3;
  uint64_t v11 = *(unsigned int *)(a1 + 1100);
  int v136 = *(_DWORD *)(a1 + 1404);
  uint64_t v12 = (float64x2_t *)sub_1000CAFC0(8LL * (int)v11, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  uint64_t v137 = 8LL * (int)v11;
  uint64_t v20 = (float64x2_t *)sub_1000CAFC0(v137, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v21 = *(void *)(a1 + 336);
  size_t v22 = *(void **)(a1 + 1432);
  uint64_t v150 = (uint64_t)a5;
  sub_1000BF204(a5, 0.0);
  int v23 = *(_DWORD *)(a1 + 1072);
  if (v23 >= 1)
  {
    int v24 = 0;
    unsigned __int16 v25 = 0;
    int v26 = v9;
    uint64_t v27 = 8LL * v11;
    uint64_t v28 = (float64x2_t *)((char *)v20 + v27);
    uint64_t v29 = (float64x2_t *)((char *)v12 + v27);
    uint64_t v145 = 2LL * v11;
    unint64_t v30 = a2 + v27;
    BOOL v32 = v20 < v29 && v12 < v28;
    unint64_t v146 = (unint64_t)v29;
    unint64_t v147 = (unint64_t)v28;
    BOOL v34 = (unint64_t)v20 < v30 && (unint64_t)v28 > a2;
    BOOL v143 = v34;
    BOOL v144 = v32;
    BOOL v36 = (unint64_t)v12 < v30 && (unint64_t)v29 > a2;
    BOOL v142 = v36;
    uint64_t v141 = v11 & 0xFFFFFFF0;
    uint64_t v140 = v11 & 0xFFFFFFF8;
    uint64_t v148 = v11;
    int32x4_t v139 = v22;
    int v138 = v9;
    do
    {
      if (*(_DWORD *)(a1 + 268)) {
        BOOL v37 = v25 == 0;
      }
      else {
        BOOL v37 = 1;
      }
      uint64_t v38 = v25;
      if (v37) {
        uint64_t v39 = v25;
      }
      else {
        uint64_t v39 = 1LL;
      }
      uint64_t v40 = *(void *)(*v22 + 8LL * v25);
      if (*(_DWORD *)(*(void *)(a1 + 1432) + 28LL))
      {
        int v23 = *(_DWORD *)(a1 + 1072);
      }

      if (v23 <= v24)
      {
LABEL_40:
        int v41 = 1;
        if (!v40) {
          goto LABEL_22;
        }
        goto LABEL_41;
      }

      if (*(_DWORD *)(a1 + 1176))
      {
        int v41 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v38 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v38);
        if (v40) {
          BOOL v42 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v38 + 4) == *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v38);
        }
        else {
          BOOL v42 = 1;
        }
        if (v42) {
          goto LABEL_22;
        }
      }

      else
      {
        if (v40) {
          BOOL v131 = *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v38 + 2) == *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v38);
        }
        else {
          BOOL v131 = 1;
        }
        if (v131) {
          goto LABEL_22;
        }
      }

void *sub_1000820F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v77 = a5;
  LOBYTE(v9) = a4;
  uint64_t v12 = a1;
  uint64_t v13 = *(unsigned int *)(a1 + 1100);
  unint64_t v82 = 0LL;
  int v72 = *(_DWORD *)(a1 + 1404);
  uint64_t v14 = sub_1000CAFC0(8LL * (int)v13, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  uint64_t v73 = 8LL * (int)v13;
  size_t v22 = sub_1000CAFC0(v73, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v76 = *(void *)(v12 + 336);
  uint64_t v75 = *(void **)(v12 + 1432);
  uint64_t v78 = (uint64_t)a6;
  sub_1000BF204(a6, 0.0);
  int v23 = *(_DWORD *)(v12 + 1072);
  if (v23 >= 1)
  {
    int v24 = 0;
    unsigned __int16 v25 = 0;
    int v9 = v9;
    int v74 = v9;
    uint64_t v81 = v12;
    do
    {
      if (*(_DWORD *)(v12 + 268)) {
        BOOL v26 = v25 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      uint64_t v27 = v25;
      if (v26) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = 1LL;
      }
      uint64_t v29 = *(void *)(*v75 + 8LL * v25);
      uint64_t v79 = v29;
      if (*(_DWORD *)(*(void *)(v12 + 1432) + 28LL))
      {
        if (v25 != sub_100004688(v12))
        {
          int v30 = 1;
          uint64_t v29 = v79;
          if (!v79) {
            goto LABEL_4;
          }
          goto LABEL_30;
        }

        int v23 = *(_DWORD *)(v12 + 1072);
        uint64_t v29 = v79;
      }

      if (v23 <= v24)
      {
        int v30 = 1;
        if (!v29) {
          goto LABEL_4;
        }
      }

      else if (*(_DWORD *)(v12 + 1176))
      {
        int v30 = *(_DWORD *)(*(void *)(v12 + 1160) + 4 * v27 + 4) - *(_DWORD *)(*(void *)(v12 + 1160) + 4 * v27);
        if (v29) {
          BOOL v31 = *(_DWORD *)(*(void *)(v12 + 1160) + 4 * v27 + 4) == *(_DWORD *)(*(void *)(v12 + 1160) + 4 * v27);
        }
        else {
          BOOL v31 = 1;
        }
        if (v31) {
          goto LABEL_4;
        }
      }

      else
      {
        if (v29) {
          BOOL v32 = *(unsigned __int16 *)(*(void *)(v12 + 1144) + 2 * v27 + 2) == *(unsigned __int16 *)(*(void *)(v12 + 1144) + 2 * v27);
        }
        else {
          BOOL v32 = 1;
        }
        if (v32) {
          goto LABEL_4;
        }
      }

void *sub_1000825A4( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v115 = a5;
  int v9 = a4;
  unsigned __int8 v10 = a3;
  uint64_t v12 = *(unsigned int *)(a1 + 1100);
  int32x4_t v117 = 0LL;
  int v116 = *(_DWORD *)(a1 + 1404);
  uint64_t v108 = 8LL * (int)v12;
  uint64_t v13 = (float64x2_t *)sub_1000CAFC0(v108, a2, a3, a4, a5, (uint64_t)a6, a7, a8);
  uint64_t v14 = *(void *)(a1 + 336);
  uint64_t v15 = *(void **)(a1 + 1432);
  sub_1000BF204(a6, 0.0);
  int v16 = *(_DWORD *)(a1 + 1072);
  if (v16 >= 1)
  {
    int v17 = 0;
    unsigned __int16 v18 = 0;
    int v19 = v10;
    uint64_t v20 = 8LL * v12;
    unint64_t v112 = (unint64_t)v13 + v20;
    BOOL v22 = (unint64_t)v13 < a2 + v20 && (unint64_t)v13 + v20 > a2;
    char v111 = v22;
    float64x2_t v110 = v15;
    int v109 = v10;
    do
    {
      if (*(_DWORD *)(a1 + 268)) {
        BOOL v23 = v18 == 0;
      }
      else {
        BOOL v23 = 1;
      }
      uint64_t v24 = v18;
      if (v23) {
        uint64_t v25 = v18;
      }
      else {
        uint64_t v25 = 1LL;
      }
      uint64_t v114 = *(void *)(*v15 + 8LL * v18);
      if (*(_DWORD *)(*(void *)(a1 + 1432) + 28LL))
      {
        int v16 = *(_DWORD *)(a1 + 1072);
      }

      if (v16 <= v17)
      {
LABEL_31:
        int v26 = 1;
        if (v114) {
          BOOL v29 = 1;
        }
        else {
          BOOL v29 = v9 == 0;
        }
        if (!v29) {
          goto LABEL_10;
        }
        goto LABEL_38;
      }

      if (*(_DWORD *)(a1 + 1176))
      {
        int v26 = *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v24 + 4) - *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v24);
        if (v114) {
          BOOL v27 = 1;
        }
        else {
          BOOL v27 = v9 == 0;
        }
        if (!v27 || *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v24 + 4) == *(_DWORD *)(*(void *)(a1 + 1160) + 4 * v24)) {
          goto LABEL_10;
        }
      }

      else
      {
        if (v114) {
          BOOL v103 = 1;
        }
        else {
          BOOL v103 = v9 == 0;
        }
        if (!v103
          || *(unsigned __int16 *)(*(void *)(a1 + 1144) + 2 * v24 + 2) == *(unsigned __int16 *)(*(void *)(a1 + 1144)
                                                                                                + 2 * v24))
        {
          goto LABEL_10;
        }
      }

uint64_t sub_100082B94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t sub_100082B9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100082BA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 56))();
}

uint64_t sub_100082BAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 72))();
}

uint64_t sub_100082BB4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8 = a6;
  int v11 = a3;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t))(a1 + 104);
  if (v14) {
    return v14(a1, a2, a3, a4, a5, a6, a7);
  }
  int v16 = sub_1000CC52C((unint64_t)a4);
  uint64_t v24 = (char *)sub_1000CAF58(2LL * (v16 + 1), v17, v18, v19, v20, v21, v22, v23);
  memcpy(v24, a4, 2LL * (v16 + 1));
  int v26 = v16 - v11;
  BOOL v25 = v16 < v11;
  uint64_t v30 = 2LL * (v16 + 1);
  uint64_t v27 = 0LL;
  if (!v25)
  {
    uint64_t v28 = 2LL * v11;
    int v29 = v26 + 1;
    do
    {
      *(_WORD *)&v24[v28] = 0;
      uint64_t v27 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, void, uint64_t))(a1 + 96))( a1,  a2,  1LL,  v24,  a5 + 4LL * (int)v27,  (v8 - v27),  a7)
          + v27;
      *(_WORD *)&v24[v28] = *(_WORD *)&a4[v28];
      v28 += 2LL;
      --v29;
    }

    while (v29);
  }

  sub_1000CB038(v24, v30);
  return v27;
}

uint64_t sub_100082CF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 96))();
}

uint64_t sub_100082CF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 112))();
}

uint64_t sub_100082D00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 120))();
}

uint64_t sub_100082D08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 152))();
}

uint64_t sub_100082D10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 168))();
}

uint64_t sub_100082D18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 176))();
}

uint64_t sub_100082D20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 184))();
}

uint64_t sub_100082D28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 192))();
}

uint64_t sub_100082D30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 200))();
}

uint64_t sub_100082D38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 248))();
}

uint64_t sub_100082D40( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8)
{
  int v9 = (*(uint64_t (**)(void))(a1 + 264))();
  *a8 = v9;
  return 2 * (v9 == 0xFFFFFF);
}

uint64_t sub_100082D7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 272))();
}

uint64_t sub_100082D84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 280))();
}

uint64_t sub_100082D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 288))();
}

uint64_t sub_100082D94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 296))();
}

uint64_t sub_100082D9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 312))();
}

uint64_t sub_100082DA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 328))();
}

uint64_t sub_100082DAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 344))();
}

uint64_t sub_100082DB4(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 360);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_100082DC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 368))();
}

uint64_t sub_100082DD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 376))();
}

uint64_t sub_100082DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 400))();
}

uint64_t sub_100082DE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 440))();
}

uint64_t sub_100082DE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 448))();
}

void *sub_100082DF0( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!qword_1000FDCC0) {
    return 0LL;
  }
  int v8 = *(_DWORD *)(qword_1000FDCC0 + 3980);
  if (v8 != 2)
  {
    if (v8 == 1) {
      return sub_1000870B4(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    return 0LL;
  }

  return (void *)sub_100083160(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100082E24(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  int v11 = sub_1000C8BE0(a2, (unint64_t)"x");
  if (qword_1000FDCC0)
  {
    int v12 = *(_DWORD *)(qword_1000FDCC0 + 3980);
    if (v12 == 2)
    {
      uint64_t v13 = sub_100083160(a1, v11, a3, a4, v7, v8, v9, v10);
      goto LABEL_7;
    }

    if (v12 == 1)
    {
      uint64_t v13 = (uint64_t)sub_1000870B4(a1, v11, a3, a4, v7, v8, v9, v10);
LABEL_7:
      uint64_t v14 = v13;
      goto LABEL_8;
    }
  }

  uint64_t v14 = 0LL;
LABEL_8:
  sub_100006EFC((uint64_t)v11);
  return v14;
}

uint64_t sub_100082ED0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 652);
  uint64_t v3 = sub_1000BE770(*(unint64_t **)(a1 + 496), 1, v2, 0xFFFFFFFFLL);
  uint64_t v4 = sub_1000BE770(*(unint64_t **)(a1 + 512), 2, v2, v3);
  unsigned int v5 = *(unint64_t **)(a1 + 528);
  if (v5) {
    uint64_t v4 = sub_1000BE770(v5, 1, v2, v4);
  }
  int v6 = *(_DWORD *)(a1 + 560);
  if (v6 >= 1)
  {
    LODWORD(v4) = sub_1000BE770(*(unint64_t **)(a1 + 544), 2, v6, v4);
    int v6 = *(_DWORD *)(a1 + 560);
  }

  uint64_t v7 = sub_1000BE644(v6, 4, v4);
  uint64_t v8 = sub_1000BE770(*(unint64_t **)(a1 + 568), 2, v2, v7);
  unsigned int v9 = sub_1000BE770(*(unint64_t **)(a1 + 584), 1, *(_DWORD *)(a1 + 600), v8);
  uint64_t v10 = *(void *)(a1 + 624);
  if (v10)
  {
    unsigned int v11 = sub_1000796F0(v10);
    unsigned int v9 = sub_1000BE644(v11, 4, v9);
  }

  unsigned int v12 = sub_1000BE644(*(unsigned __int16 *)(a1 + 640), 2, v9);
  unsigned int v13 = sub_1000BE644(*(unsigned __int16 *)(a1 + 642), 2, v12);
  unsigned int v14 = sub_1000BE644(*(unsigned __int16 *)(a1 + 644), 2, v13);
  unsigned int v15 = sub_1000BE644(*(unsigned __int16 *)(a1 + 646), 2, v14);
  unsigned int v16 = sub_1000BE644(*(_DWORD *)(a1 + 648), 4, v15);
  unsigned int v17 = sub_1000BE644(*(_DWORD *)(a1 + 652), 4, v16);
  unsigned int v18 = sub_1000BE644(*(_DWORD *)(a1 + 656), 4, v17);
  unsigned int v19 = sub_1000BE644(*(_DWORD *)(a1 + 660), 4, v18);
  unsigned int v20 = sub_1000BE644(*(_DWORD *)(a1 + 664), 4, v19);
  unsigned int v21 = sub_1000BE644(*(_DWORD *)(a1 + 668), 4, v20);
  unsigned int v22 = sub_1000BE644(*(_DWORD *)(a1 + 672), 4, v21);
  uint64_t v23 = sub_1000BE644(*(_DWORD *)(a1 + 676), 4, v22);
  unsigned int v24 = sub_1000BE4A0(a1 + 724, v23);
  unsigned int v25 = sub_1000BE644(*(_DWORD *)(a1 + 732), 4, v24);
  unsigned int v26 = sub_1000BE644(*(_DWORD *)(a1 + 736), 4, v25);
  unsigned int v27 = sub_1000BE644(*(unsigned __int16 *)(a1 + 740), 2, v26);
  unsigned int v28 = sub_1000BE644(*(_DWORD *)(a1 + 744), 4, v27);
  unsigned int v29 = sub_1000BE644(*(_DWORD *)(a1 + 748), 4, v28);
  unsigned int v30 = sub_1000BE644(*(_DWORD *)(a1 + 752), 4, v29);
  unsigned int v31 = sub_1000BE644(*(_DWORD *)(a1 + 756), 4, v30);
  unsigned int v32 = sub_1000BE644(*(_DWORD *)(a1 + 784), 4, v31);
  unsigned int v33 = sub_1000BE644(*(_DWORD *)(a1 + 788), 4, v32);
  unsigned int v34 = sub_1000BE644(*(_DWORD *)(a1 + 792), 4, v33);
  unsigned int v35 = sub_1000BE644(*(_DWORD *)(a1 + 796), 4, v34);
  uint64_t v36 = sub_1000BE644(*(_DWORD *)(a1 + 800), 4, v35);
  uint64_t v37 = *(unint64_t **)(a1 + 808);
  if (v37) {
    LODWORD(v36) = sub_1000BE770(v37, 1, *(_DWORD *)(a1 + 824), v36);
  }
  return sub_1000BE644(*(_DWORD *)(a1 + 824), 4, v36);
}

uint64_t sub_100083160( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_1000BCAE8(a1, "mwl", a2, a4, a5, a6, a7, a8);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (uint64_t)v10;
  unsigned int v12 = (void *)sub_1000C1074(864LL);
  uint64_t v13 = (uint64_t)v12;
  if (v12)
  {
    uint64_t v31 = 0LL;
    int v30 = 0;
    memcpy(v12, off_1000F9908, 0x1E0uLL);
    *(void *)(v13 + 480) = a3;
    *(void *)(v13 + 488) = a4;
    *(_DWORD *)(v13 + 856) = 1;
    unsigned int v14 = (int *)(v13 + 560);
    unsigned int v15 = (int *)(v13 + 652);
    *(_DWORD *)(v13 + 676) = HIDWORD(v31);
    *(_DWORD *)(v13 + 680) = HIDWORD(v31);
    *(void *)(v13 + 724) = 0LL;
    *(_DWORD *)(v13 + 732) = sub_10002361C((unsigned __int8 *)(v13 + 724));
    *(_DWORD *)(v13 + 736) = HIDWORD(v31);
    int v29 = 0;
    *(void *)(v13 + 768) = *(void *)(v13 + 776);
    if (*(__int16 *)(v13 + 828) != -1)
    {
      int v29 = 0;
      unsigned int v16 = (void *)(v13 + 840);
      if (*v16)
      {
        if (v29 != *v15) {
          goto LABEL_79;
        }
        *(void *)(v13 + 832) = *v16;
      }
    }

    int v29 = 0;
    unsigned int v17 = (void *)(v13 + 504);
    if (sub_1000BCED0(v11, 1, (uint64_t *)(v13 + 504), &v29))
    {
      if (*v17)
      {
        if (v29 != *v15) {
          goto LABEL_79;
        }
        *(void *)(v13 + 496) = *v17;
      }

      int v29 = 0;
      unsigned int v18 = (void *)(v13 + 520);
      if (sub_1000BCED0(v11, 2, (uint64_t *)(v13 + 520), &v29))
      {
        if (*v18)
        {
          int v19 = v29;
          if (v29 != *v15) {
            goto LABEL_79;
          }
          *(void *)(v13 + 512) = *v18;
        }

        else
        {
          int v19 = *v15;
        }

        if (v19 >= 1 && *(_DWORD *)(v13 + 732))
        {
          int v29 = 0;
          unsigned int v20 = (void *)(v13 + 536);
          if (*v20)
          {
            if (v29 != *v15) {
              goto LABEL_79;
            }
            *(void *)(v13 + 528) = *v20;
          }
        }

        if (*v14 >= 1)
        {
          int v29 = 0;
          unsigned int v21 = (void *)(v13 + 552);
          if (*v21)
          {
            if (v29 != *v14) {
              goto LABEL_79;
            }
            *(void *)(v13 + 544) = *v21;
          }
        }

        int v29 = 0;
        unsigned int v22 = (void *)(v13 + 576);
        if (sub_1000BCED0(v11, 2, (uint64_t *)(v13 + 576), &v29))
        {
          if (*v22)
          {
            if (v29 != *v15) {
              goto LABEL_79;
            }
            *(void *)(v13 + 568) = *v22;
          }

          int v29 = 0;
          uint64_t v23 = (void *)(v13 + 592);
          if (sub_1000BCED0(v11, 1, (uint64_t *)(v13 + 592), &v29))
          {
            if (*v23)
            {
              if (v29 != *(_DWORD *)(v13 + 600)) {
                goto LABEL_79;
              }
              *(void *)(v13 + 584) = *v23;
            }

            if (sub_1000BCD38(v11, &v31))
            {
              if ((_DWORD)v31)
              {
                int v29 = 0;
                unsigned int v24 = (void *)(v13 + 616);
                if (*v24)
                {
                  if (v29 != *(_DWORD *)(v13 + 604) + 1) {
                    goto LABEL_79;
                  }
                  *(void *)(v13 + 608) = *v24;
                }
              }

              if (sub_1000BCD38(v11, &v30))
              {
                if (!v30) {
                  goto LABEL_74;
                }
                unsigned int v25 = sub_100079848(v11);
                *(void *)(v13 + 632) = v25;
                if (v25)
                {
                  *(void *)(v13 + 624) = v25;
LABEL_74:
                  int v29 = 0;
                  unsigned int v26 = (void *)(v13 + 816);
                  if (sub_1000BCED0(v11, 1, (uint64_t *)(v13 + 816), &v29))
                  {
                    if (!*v26)
                    {
LABEL_78:
                      sub_1000BCBC8(v11);
                      *(_OWORD *)(v13 + 784) = *(_OWORD *)(v13 + 656);
                      int v27 = *(_DWORD *)(v13 + 652);
                      *(_DWORD *)(v13 + 800) = v27;
                      *(void *)(v13 + 848) = sub_10008CD4C( v27,  *(_DWORD *)(v13 + 672),  *(unsigned __int16 *)(v13 + 642),  *(unsigned __int16 *)(v13 + 640),  *(void *)(v13 + 624),  *(_DWORD *)(v13 + 732),  *(_DWORD *)(v13 + 676),  (unsigned __int8 *)(v13 + 724),  a3,  *(_WORD *)(v13 + 828),  *(_DWORD *)(v13 + 760));
                      return v13;
                    }

                    if (v29 == *(_DWORD *)(v13 + 824))
                    {
                      *(void *)(v13 + 808) = *v26;
                      goto LABEL_78;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t sub_100083710(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 856))
  {
    sub_1000C0EF8(*(void *)(a1 + 504));
    sub_1000C0EF8(*(void *)(a1 + 520));
    sub_1000C0EF8(*(void *)(a1 + 552));
    sub_1000C0EF8(*(void *)(a1 + 576));
    sub_1000C0EF8(*(void *)(a1 + 592));
    sub_1000C0EF8(*(void *)(a1 + 616));
    sub_1000C0EF8(*(void *)(a1 + 536));
    sub_100079184(*(void *)(a1 + 632));
    sub_1000C0EF8(*(void *)(a1 + 816));
    sub_1000C0EF8(*(void *)(a1 + 832));
    if (*(void *)(a1 + 776))
    {
      uint64_t v2 = 8LL * *(unsigned __int16 *)(a1 + 640);
      do
      {
        sub_1000C0EF8(*(void *)(*(void *)(a1 + 776) + v2));
        v2 -= 8LL;
      }

      while (v2 != -8);
      sub_1000C0EF8(*(void *)(a1 + 776));
    }
  }

  sub_10008D278(*(void *)(a1 + 848));
  return sub_1000C0EF8(a1);
}

uint64_t sub_1000837C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 676);
}

uint64_t sub_1000837C8(uint64_t a1)
{
  return a1 + 724;
}

uint64_t sub_1000837D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 736);
}

uint64_t sub_1000837D8(uint64_t a1, __int16 *a2, unsigned __int16 *a3, int a4)
{
  if (a3) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = (unsigned __int16 *)&unk_1000F250E;
  }
  int v8 = *(_DWORD *)(a1 + 676);
  uint64_t v9 = (int)(4 * sub_1000CC52C((unint64_t)a2) + 4);
  unsigned int v17 = (unsigned __int8 *)sub_1000CAF58(v9, v10, v11, v12, v13, v14, v15, v16);
  unsigned int v25 = (unsigned __int8 *)sub_1000CAF58(v9, v18, v19, v20, v21, v22, v23, v24);
  if (v8 == 4)
  {
    sub_1000BE078(3, a2, v9, (uint64_t)v25);
    goto LABEL_9;
  }

  if (sub_1000BE078(v8, a2, v9, (uint64_t)v25) != 2)
  {
LABEL_9:
    int v58 = a4;
    sub_100086568(v17, (unsigned __int16 *)a2, *(_DWORD *)(a1 + 732), v8, 0LL, 0LL);
    int v31 = sub_1000C88E4((unint64_t)v17);
    if (*(_DWORD *)(a1 + 732)) {
      int v57 = sub_100086428((uint64_t)a2);
    }
    else {
      int v57 = 128;
    }
    uint64_t v32 = (int)((4 * sub_1000CC52C((unint64_t)v7)) | 1);
    uint64_t v40 = (unsigned __int8 *)sub_1000CAF58(v32, v33, v34, v35, v36, v37, v38, v39);
    if (sub_100086568(v40, v7, 0, *(_DWORD *)(a1 + 680), a1 + 684, 0LL) == 1)
    {
      sub_1000CB038(v40, v32);
      sub_1000CB038(v25, v9);
      sub_1000CB038(v17, v9);
      if (v58) {
        return 0xFFFFFFLL;
      }
    }

    else
    {
      int8x8_t v55 = v7;
      uint64_t v56 = v32;
      int v43 = v31 + 1;
      int v44 = *(_DWORD *)(a1 + 652);
      int v45 = v44 - 1;
      int v46 = 0;
      if (v44 >= 1)
      {
        do
        {
          int v47 = v46 + v45;
          if (v46 + v45 < 0 != __OFADD__(v46, v45)) {
            ++v47;
          }
          int v48 = v47 >> 1;
          uint64_t v49 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * (v47 >> 1));
          else {
            int v46 = v48 + 1;
          }
        }

        while (v46 <= v45);
        int v44 = *(_DWORD *)(a1 + 652);
      }

      if (v46 >= v44)
      {
        uint64_t v41 = 0xFFFFFFLL;
        uint64_t v7 = v55;
      }

      else
      {
        uint64_t v50 = v43;
        uint64_t v41 = v46;
        if (v57 == 16)
        {
          uint64_t v7 = v55;
          do
          {
            int8x8_t v51 = (_BYTE *)(*(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v41));
            int8x8_t v52 = &v51[v50];
            if (!sub_1000C8AB4(v52, v40))
            {
              if (!*(_DWORD *)(a1 + 732)) {
                goto LABEL_43;
              }
              if (*(_BYTE *)(*(void *)(a1 + 528) + v41) == 16)
              {
                int v53 = sub_1000C88E4((unint64_t)v52);
              }
            }

            ++v41;
          }

          while (v41 < *(int *)(a1 + 652));
        }

        else
        {
          uint64_t v7 = v55;
          do
          {
            float64x2_t v54 = (_BYTE *)(*(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v41));
            if (!sub_1000C8AB4(&v54[v50], v40)
              && (!*(_DWORD *)(a1 + 732) || v57 == *(unsigned __int8 *)(*(void *)(a1 + 528) + v41)))
            {
              goto LABEL_43;
            }

            ++v41;
          }

          while (v41 < *(int *)(a1 + 652));
        }

        uint64_t v41 = 0xFFFFFFLL;
      }

uint64_t sub_100083B64(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = a4;
  uint64_t v10 = a1 + 684;
  uint64_t v11 = (int)((4 * sub_1000CC52C((unint64_t)a2)) | 1);
  uint64_t v19 = (unsigned __int8 *)sub_1000CAF58(v11, v12, v13, v14, v15, v16, v17, v18);
  if (sub_100086568(v19, a2, 0, *(_DWORD *)(a1 + 680), v10, 0LL) == 1)
  {
    sub_1000CB038(v19, v11);
    return sub_10008D8C4(*(void *)(a1 + 848), a2, a3, v6, a5);
  }

  int v21 = sub_1000C88E4((unint64_t)v19) + 1;
  uint64_t v39 = a2;
  uint64_t v41 = v11;
  if (!*(void *)(a1 + 608))
  {
    if (*(int *)(a1 + 652) >= 1)
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      while (1)
      {
        unint64_t v31 = *(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v29);
        int v32 = sub_1000C88E4(v31);
        if (!sub_1000C8928((unsigned __int8 *)(v31 + v32 + 1), v19, v21, v31 + v32))
        {
          if ((int)v30 >= (int)v6)
          {
            uint64_t v30 = (v30 + 1);
          }

          else
          {
            *(_DWORD *)(a3 + 4LL * (int)v30) = v29;
            uint64_t v30 = (v30 + 1);
            if (!a5 && (_DWORD)v30 == (_DWORD)v6)
            {
LABEL_43:
              sub_1000CB038(v19, v41);
              return v6;
            }
          }
        }
      }
    }

    goto LABEL_30;
  }

  int v22 = *(_DWORD *)(a1 + 604);
  int v23 = v22 - 1;
  if (v22 < 1) {
    goto LABEL_30;
  }
  uint64_t v24 = a3;
  LODWORD(i) = 0;
  do
  {
    unsigned int v26 = (v23 + i) >> 1;
    unint64_t v27 = *(void *)(a1 + 584)
        + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * *(int *)(*(void *)(a1 + 608) + 4LL * v26));
    int v28 = sub_1000C88E4(v27);
    else {
      LODWORD(i) = v26 + 1;
    }
  }

  while ((int)i <= v23);
  a3 = v24;
  if ((int)i >= *(_DWORD *)(a1 + 604))
  {
LABEL_30:
    uint64_t v30 = 0LL;
    goto LABEL_32;
  }

  if (a5)
  {
    uint64_t v40 = v24;
    uint64_t v30 = 0LL;
    uint64_t i = (int)i;
    do
    {
      uint64_t v33 = *(int *)(*(void *)(a1 + 608) + 4 * i);
      unint64_t v34 = *(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v33);
      int v35 = sub_1000C88E4(v34);
      ++v30;
      ++i;
    }

    while (i < *(int *)(a1 + 604));
    a3 = v40;
  }

  else
  {
    uint64_t v30 = 0LL;
    for (uint64_t i = (int)i; i < *(int *)(a1 + 604); ++i)
    {
      uint64_t v36 = *(int *)(*(void *)(a1 + 608) + 4 * i);
      unint64_t v37 = *(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v36);
      int v38 = sub_1000C88E4(v37);
      if ((int)v30 >= (int)v6)
      {
        uint64_t v30 = (v30 + 1);
      }

      else
      {
        *(_DWORD *)(a3 + 4LL * (int)v30) = v36;
        uint64_t v30 = (v30 + 1);
        if ((_DWORD)v30 == (_DWORD)v6) {
          goto LABEL_43;
        }
      }
    }
  }

uint64_t sub_100083EB4(uint64_t a1, unsigned int *a2)
{
  return sub_100092110(*(void *)(a1 + 848), a2);
}

uint64_t sub_100083EBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 784);
}

uint64_t sub_100083EC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 788);
}

void *sub_100083ECC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(int *)(a1 + 784) + 1LL;
  uint64_t v12 = (char *)(*(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * (int)a2));
  uint64_t v13 = *(void *)(a1 + 528);
  if (v13)
  {
    uint64_t v14 = *(unsigned __int8 *)(v13 + (int)a2);
    if ((_DWORD)v14 == 16)
    {
      uint64_t v16 = (char *)sub_1000CAF58(*(int *)(a1 + 784) + 1LL, a2, a3, v14, a5, a6, a7, a8);
      unint64_t v17 = (unint64_t)&v12[(int)sub_1000C88E4((unint64_t)v12) + 1];
      int v18 = sub_1000C88E4(v17);
      sub_1000C896C(v16, (char *)(v17 + v18 + 1), v11);
      sub_1000BE124(*(_DWORD *)(a1 + 676), v16, v11, a3);
      double result = sub_1000CB038(v16, v11);
      if (!a4) {
        return result;
      }
      goto LABEL_9;
    }

    if ((_DWORD)v14 != 128)
    {
      double result = (void *)sub_100086BF0(a3, v12, v11, v14, *(_DWORD *)(a1 + 676), 0LL);
      if (!a4) {
        return result;
      }
LABEL_9:
      uint64_t v19 = &v12[(int)(sub_1000C88E4((unint64_t)v12) + 1)];
      int v20 = sub_1000C88E4((unint64_t)v19) + 1;
      return (void *)sub_100086BF0(a4, v19, v20, 1, *(_DWORD *)(a1 + 680), a1 + 684);
    }
  }

  double result = (void *)sub_1000BE124(*(_DWORD *)(a1 + 676), v12, v11, a3);
  if (a4) {
    goto LABEL_9;
  }
  return result;
}

void *sub_10008405C( void *result, unsigned int *a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 >= 1)
  {
    int v8 = (uint64_t *)a5;
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = a3;
    do
    {
      unsigned int v14 = *a2++;
      uint64_t v13 = v14;
      uint64_t v16 = *a4++;
      uint64_t v15 = v16;
      uint64_t v17 = *v8++;
      double result = sub_100083ECC(v11, v13, v15, v17, a5, a6, a7, a8);
      --v12;
    }

    while (v12);
  }

  return result;
}

uint64_t sub_1000840BC(uint64_t a1, int a2, int a3, __int16 *a4)
{
  return sub_1000854C8(a1, a2, a3, a4, 0LL, 0, 0, 0);
}

uint64_t sub_1000840D0(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6, int a7)
{
  return sub_1000854C8(a1, a2, a3, a4, a5, a6, 1u, a7);
}

uint64_t sub_1000840DC(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6, int a7)
{
  int v12 = *(_DWORD *)(a1 + 676);
  int v13 = sub_1000CC52C((unint64_t)a4);
  uint64_t v14 = (4 * v13) | 1;
  int v22 = (char *)sub_1000CAF58(v14, v15, v16, v17, v18, v19, v20, v21);
  if (v12 == 4)
  {
    int v23 = 3;
    sub_1000BE0C8(3, a4, a3, v14, (uint64_t)v22);
  }

  else
  {
    int v23 = v12;
    if (sub_1000BE0C8(v12, a4, a3, v14, (uint64_t)v22) == 2)
    {
      sub_1000CB038(v22, v14);
      return sub_100091444(*(void *)(a1 + 848), a2, a3, a4, a5, a6);
    }
  }

  int v76 = a7;
  sub_1000C88E4((unint64_t)v22);
  int v79 = a3;
  uint64_t v75 = (4 * v13) | 1;
  sub_1000BE078(v23, a4, v14, (uint64_t)v22);
  int v80 = 0;
  int v32 = (unsigned __int8 *)sub_1000CAF58(4 * v13 + 4, v25, v26, v27, v28, v29, v30, v31);
  sub_100086568(v32, (unsigned __int16 *)a4, *(_DWORD *)(a1 + 732), v12, 0LL, &v79);
  sub_1000C88E4((unint64_t)v32);
  unint64_t v72 = a4;
  int v71 = a3;
  if (*(_DWORD *)(a1 + 732))
  {
    int v73 = a2;
    int v33 = sub_100086428((uint64_t)a4);
    if (v33 == 16)
    {
      unint64_t v34 = sub_1000C8B7C(v22);
      int v35 = *(_DWORD *)(a1 + 652);
      int v36 = v35 - 1;
      uint64_t v74 = 4 * v13 + 4;
      LODWORD(v37) = 0;
      if (v35 < 1) {
        goto LABEL_10;
      }
      goto LABEL_16;
    }

    unint64_t v34 = 0LL;
    int v40 = *(_DWORD *)(a1 + 652);
    int v36 = v40 - 1;
    uint64_t v74 = 4 * v13 + 4;
    LODWORD(v37) = 0;
    if (v40 >= 1)
    {
LABEL_16:
      int v41 = v79;
      do
      {
        int v42 = v37 + v36;
        int v43 = v42 >> 1;
        uint64_t v44 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * (v42 >> 1));
        else {
          LODWORD(v37) = v43 + 1;
        }
      }

      while ((int)v37 <= v36);
      if (!v73)
      {
        uint64_t v39 = 0LL;
        uint64_t v37 = (int)v37;
        do
        {
          int v58 = (unsigned __int8 *)(*(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v37));
          int v59 = sub_1000C88E4((unint64_t)v58);
          int v61 = sub_1000C8928(v58, v32, v59, v60);
          if (v61 > 0) {
            break;
          }
          if (!v61)
          {
            *(_DWORD *)(a5 + 4LL * (int)v39) = v37;
            uint64_t v39 = (v39 + 1);
          }
        }

        while (++v37 < *(int *)(a1 + 652) && (int)v39 < a6);
        goto LABEL_11;
      }

      if (v33 != 16)
      {
        uint64_t v39 = 0LL;
LABEL_56:
        uint64_t v62 = (int)v37;
        while (1)
        {
          float64x2_t v63 = (unsigned __int8 *)(*(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v62));
          int v64 = sub_1000C88E4((unint64_t)v63);
          int v66 = sub_1000C8928(v63, v32, v64, v65);
          if (v66 > 0) {
            goto LABEL_11;
          }
          if (v66) {
            goto LABEL_64;
          }
          int v67 = *(unsigned __int8 *)(*(void *)(a1 + 528) + v62);
          if ((v67 & v33) != 0)
          {
            if (v67 != 16
              || (unint64_t v68 = (unint64_t)&v63[(int)sub_1000C88E4((unint64_t)v63) + 1],
                  int v69 = sub_1000C88E4(v68),
                  !sub_1000C8928( (unsigned __int8 *)(v68 + v69 + 1),  (unsigned __int8 *)v22,  v64,  v68 + v69)))
            {
              *(_DWORD *)(a5 + 4LL * (int)v39) = v62;
              uint64_t v39 = (v39 + 1);
LABEL_64:
              LODWORD(v37) = v62 + 1;
              goto LABEL_11;
            }
          }
        }
      }

      uint64_t v39 = 0LL;
LABEL_30:
      uint64_t v37 = (int)v37;
      while (1)
      {
        int v46 = (unsigned __int8 *)(*(void *)(a1 + 584) + *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v37));
        int v47 = sub_1000C88E4((unint64_t)v46);
        int v49 = sub_1000C8928(v46, v32, v47, v48);
        if (v49 > 0) {
          goto LABEL_11;
        }
        if (v49) {
          goto LABEL_41;
        }
        char v50 = v34[v47];
        v34[v47] = 0;
        int v51 = *(_DWORD *)(a1 + 676);
        if (v51 == 3)
        {
          int v51 = *(_DWORD *)(a1 + 676);
        }

        int v52 = sub_100086200((uint64_t)v34, v51);
        v34[v47] = v50;
        int v53 = *(unsigned __int8 *)(*(void *)(a1 + 528) + v37);
        if ((v53 & v52) != 0)
        {
          if (v53 != 16
            || (unint64_t v54 = (unint64_t)&v46[(int)sub_1000C88E4((unint64_t)v46) + 1],
                int v55 = sub_1000C88E4(v54),
                !sub_1000C8928((unsigned __int8 *)(v54 + v55 + 1), (unsigned __int8 *)v22, v47, v54 + v55)))
          {
            *(_DWORD *)(a5 + 4LL * (int)v39) = v37;
            uint64_t v39 = (v39 + 1);
LABEL_41:
            LODWORD(v37) = v37 + 1;
            goto LABEL_11;
          }
        }

uint64_t sub_1000845D4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 644);
}

uint64_t sub_1000845DC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 646);
}

uint64_t sub_1000845E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 648);
}

uint64_t sub_1000845EC()
{
  return 0LL;
}

uint64_t sub_1000845F4()
{
  return 0LL;
}

uint64_t sub_1000845FC(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 652) <= a2) {
    return sub_10008E8AC(*(void *)(a1 + 848), a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100084618(uint64_t a1)
{
  return sub_100091E28(*(void *)(a1 + 848));
}

uint64_t sub_100084620(uint64_t a1)
{
  return *(unsigned int *)(a1 + 796);
}

uint64_t sub_100084628(uint64_t a1)
{
  return *(unsigned int *)(a1 + 792);
}

uint64_t sub_100084630(uint64_t a1)
{
  return sub_100092194(*(void *)(a1 + 848));
}

uint64_t sub_100084638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(int *)(a1 + 796);
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v16 = sub_1000CB0B0();
  if ((int)a3 < 1)
  {
    uint64_t v21 = 0LL;
  }

  else
  {
    uint64_t v17 = 2 * v8;
    uint64_t v21 = (char **)sub_1000CAF58(8LL * a3, v9, v10, v11, v12, v13, v14, v15);
    uint64_t v22 = 0LL;
    uint64_t v23 = v17 + 2;
    do
      v21[v22++] = (char *)sub_1000CAF58(v23, v18, v19, v20, v12, v13, v14, v15);
    while (a3 != v22);
  }

  int v24 = sub_100085B50(a1, a2, a3, v21, v12, v13, v14, v15);
  else {
    int v28 = v24;
  }
  uint64_t v29 = (a3 - v28);
  uint64_t v30 = &v21[v28];
  if (v21) {
    uint64_t v31 = (uint64_t)v30;
  }
  else {
    uint64_t v31 = 0LL;
  }
  uint64_t v32 = sub_10008E094( *(void *)(a1 + 848),  a2,  v31,  v29,  (*(_DWORD *)(a1 + 796) + 1),  v25,  v26,  v27)
      + v24;
  else {
    a3 = v32;
  }
  sub_100092E58(*(void *)(a1 + 848), &v38, &v37);
  if ((int)a3 >= 1)
  {
    do
    {
      unint64_t v34 = *v21++;
      int v33 = (unsigned __int16 *)v34;
      uint64_t v35 = *a4++;
      sub_1000932D4(*(void *)(a1 + 624), *(unsigned __int16 *)(a1 + 640), v38, v37, v33, v35);
      --a3;
    }

    while (a3);
  }

  sub_1000CB094(v16);
  return v32;
}

uint64_t sub_100084770( uint64_t a1, uint64_t a2, uint64_t a3, char **a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = a3;
  int v13 = sub_100085B50(a1, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (v13 >= v10) {
    int v17 = v10;
  }
  else {
    int v17 = v13;
  }
  uint64_t v18 = (v10 - v17);
  uint64_t v19 = &a4[v17];
  if (a4) {
    uint64_t v20 = (uint64_t)v19;
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v21 = sub_10008E094( *(void *)(a1 + 848),  a2,  v20,  v18,  (*(_DWORD *)(a1 + 796) + 1),  v14,  v15,  v16)
      + v13;
  return v21;
}

uint64_t sub_100084808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int32x4_t *a5, int *a6)
{
  uint64_t v12 = *(int *)(a1 + 796) + 1LL;
  uint64_t v13 = sub_1000CB0B0();
  uint64_t v21 = v13;
  uint64_t v48 = v12;
  if ((int)a3 < 1)
  {
    uint64_t v26 = 0LL;
  }

  else
  {
    uint64_t v47 = v13;
    uint64_t v22 = a6;
    uint64_t v26 = (char **)sub_1000CAF58(8LL * a3, v14, v15, v16, v17, v18, v19, v20);
    uint64_t v27 = 0LL;
    uint64_t v28 = 2 * v12;
    do
      v26[v27++] = (char *)sub_1000CAF58(v28, v23, v24, v25, v17, v18, v19, v20);
    while (a3 != v27);
    a6 = v22;
    uint64_t v21 = v47;
  }

  int v29 = sub_100085B50(a1, a2, a3, v26, v17, v18, v19, v20);
  int v33 = v29;
  else {
    uint64_t v34 = v29;
  }
  if (!v29)
  {
    int v37 = sub_10008E094(*(void *)(a1 + 848), a2, (uint64_t)v26, 1LL, v48, v30, v31, v32);
    int v33 = v37 >= 1 ? 1 : v37;
    if ((int)a3 >= 1 && v37 >= 1)
    {
      a5->i32[0] = 0;
      int v33 = 1;
      uint64_t v35 = 0LL;
      uint64_t v36 = 1LL;
      do
      {
LABEL_23:
        uint64_t v45 = v35;
        *(_DWORD *)(a4 + v45 * 4) = -1;
        a5->i32[v45] = v35++;
      }

      while (v36 != v35);
LABEL_24:
      uint64_t v34 = v36;
      goto LABEL_25;
    }
  }

  if ((int)v34 >= 1)
  {
    uint64_t v35 = 0LL;
    uint64_t v36 = v34;
    if (v34 >= 8 && (unint64_t)a5 - a4 >= 0x20)
    {
      uint64_t v35 = v34 & 0x7FFFFFF8;
      uint64_t v38 = (_OWORD *)(a4 + 16);
      int32x4_t v39 = (int32x4_t)xmmword_1000F0830;
      int v40 = a5 + 1;
      v41.i64[0] = 0x400000004LL;
      v41.i64[1] = 0x400000004LL;
      *(void *)&__int128 v42 = -1LL;
      *((void *)&v42 + 1) = -1LL;
      v43.i64[0] = 0x800000008LL;
      v43.i64[1] = 0x800000008LL;
      uint64_t v44 = v34 & 0xFFFFFFF8;
      do
      {
        *(v38 - 1) = v42;
        *uint64_t v38 = v42;
        v40[-1] = v39;
        *int v40 = vaddq_s32(v39, v41);
        int32x4_t v39 = vaddq_s32(v39, v43);
        v38 += 2;
        v40 += 2;
        v44 -= 8LL;
      }

      while (v44);
    }

    goto LABEL_23;
  }

void sub_1000849D8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = -1;
}

uint64_t sub_1000849E4(uint64_t a1, int a2, uint64_t a3)
{
  return sub_10008E928(*(void *)(a1 + 848), a2, a3);
}

uint64_t sub_1000849EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10008EA44(*(void *)(a1 + 848), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1000849F4(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_100092E58(*(void *)(a1 + 848), &v8, &v7);
  return sub_1000932D4(*(void *)(a1 + 624), *(unsigned __int16 *)(a1 + 640), v8, v7, a2, a3);
}

unint64_t sub_100084A54(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t result = sub_10009004C(*(void *)(a1 + 848), a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    sub_100092E58(*(void *)(a1 + 848), &v6, &v5);
    unint64_t result = sub_100099EE0((unint64_t)a2);
    if ((_DWORD)result) {
      return sub_100085150(a1, a2) != 255
    }
          && sub_1000935F4(*(void *)(a1 + 624), *(unsigned __int16 *)(a1 + 640), v6, v5, a2) != 0;
  }

  return result;
}

uint64_t sub_100084AEC( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v35 = sub_1000CB0B0();
  uint64_t v9 = sub_100092E58(*(void *)(a1 + 848), &v38, &v37);
  uint64_t v36 = (unsigned __int16 **)sub_1000CAF58(8LL * (int)a5, v10, v11, v12, v13, v14, v15, v16);
  if ((int)a5 >= 1)
  {
    uint64_t v17 = a5;
    uint64_t v18 = v36;
    do
    {
      uint64_t v19 = (void *)*a4;
      int v20 = sub_100099EE0(*a4) + 1;
      uint64_t v28 = (unsigned __int16 *)sub_1000CAF58(2LL * v20, v21, v22, v23, v24, v25, v26, v27);
      *uint64_t v18 = v28;
      if (!sub_10009369C( *(unsigned __int16 *)(a1 + 640),  *(unsigned __int16 *)(a1 + 642),  v38,  v37,  v9,  (unsigned __int16 *)v19,  v28))
      {
        int v29 = sub_100091E94(*(void *)(a1 + 848), v20, v19);
        *uint64_t v28 = v29;
        if (v29 == 0xFFFF)
        {
          uint64_t v30 = 0xFFFFFFLL;
          goto LABEL_8;
        }

        v28[1] = -1;
      }

      ++v18;
      ++a4;
      --v17;
    }

    while (v17);
  }

  uint64_t v30 = sub_100084C2C(a1, a2, a3, a5, v36, a6, 0);
LABEL_8:
  sub_1000CB094(v35);
  return v30;
}

uint64_t sub_100084C2C( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 **a5, int a6, int a7)
{
  unsigned int v92 = 0;
  uint64_t v90 = 0LL;
  int8x8_t v91 = 0LL;
  uint64_t v89 = 0LL;
  uint64_t v14 = sub_1000CB0B0();
  if (!a3 || !*a3) {
    goto LABEL_47;
  }
  uint64_t v15 = *(int *)(a1 + 796) + 1LL;
  if ((_DWORD)a4 == 1 && *(unsigned __int16 *)(a1 + 828) != 0xFFFF && qword_1000FDCC0)
  {
    if (*(_DWORD *)(qword_1000FDCC0 + 3920))
    {
      if (sub_100083B64(a1, a3, (uint64_t)&v92, 1LL, 0))
      {
        int8x8_t v91 = (char *)sub_1000CAF58(2 * v15, v16, v17, v18, v19, v20, v21, v22);
        uint64_t v23 = a2;
        uint64_t v24 = v92;
        int v29 = sub_100085B50(a1, v92, 1LL, &v91, v25, v26, v27, v28);
        if (v29 >= 1) {
          int v33 = 1;
        }
        else {
          int v33 = v29;
        }
        uint64_t v34 = v24;
        a2 = v23;
        sub_10008E094( *(void *)(a1 + 848),  v34,  (uint64_t)&(&v91)[v33],  (1 - v33),  (*(_DWORD *)(a1 + 796) + 1),  v30,  v31,  v32);
        sub_100092E58(*(void *)(a1 + 848), &v90, &v89);
        if (sub_1000933B4( (unsigned __int16 *)v91,  *a5,  *(void *)(a1 + 624),  *(unsigned __int16 *)(a1 + 640),  v90,  v89))
        {
          a7 = 0;
          a5 = (unsigned __int16 **)&v91;
        }
      }

      goto LABEL_47;
    }
  }

  else if (!qword_1000FDCC0)
  {
    goto LABEL_47;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 3908))
  {
    float64x2_t v87 = a2;
    unsigned int v92 = sub_100082B9C(a1);
    if (v92 != 0xFFFFFF)
    {
      int v84 = a7;
      int v85 = a6;
      uint64_t v86 = a4;
      sub_100092E58(*(void *)(a1 + 848), &v90, &v89);
      int v35 = sub_100082D30(a1);
      unint64_t v50 = sub_1000CAF58(8LL * v35, v36, v37, v38, v39, v40, v41, v42);
      if (v35 < 1)
      {
        sub_100082D30(a1);
      }

      else
      {
        uint64_t v82 = v14;
        int8x8_t v83 = a3;
        uint64_t v51 = 0LL;
        uint64_t v52 = v35;
        do
        {
          *(void *)(v50 + v51) = sub_1000CAF58(2LL * (int)v15, v43, v44, v45, v46, v47, v48, v49);
          v51 += 8LL;
        }

        while (8LL * v35 != v51);
        sub_100082D30(a1);
        if ((int)a4 > 0)
        {
          unint64_t v53 = 0LL;
          uint64_t v88 = 8LL * a4;
          unint64_t v54 = a5;
          do
          {
            int v55 = &a5[v53];
            if (v53)
            {
              for (uint64_t i = 0LL; i != v52; ++i)
              {
                int v57 = (unsigned __int16 **)(v50 + 8 * i);
                if (sub_10009354C( *v57,  *v55,  *(void *)(a1 + 624),  *(unsigned __int16 *)(a1 + 640),  v90,  v89))
                {
                  if (v54 == a5)
                  {
                    unint64_t v65 = sub_1000CAF58(v88, v58, v59, v60, v61, v62, v63, v64);
                    unint64_t v54 = (unsigned __int16 **)v65;
                    uint64_t v66 = 0LL;
                    if (v53 < 4) {
                      goto LABEL_50;
                    }
                    uint64_t v67 = 0LL;
                    unint64_t v68 = v53 & 0xFFFFFFFFFFFFFFFCLL;
                    do
                    {
                      __int128 v69 = *(_OWORD *)&a5[v67 + 2];
                      uint64_t v70 = (_OWORD *)(v65 + v67 * 8);
                      *uint64_t v70 = *(_OWORD *)&a5[v67];
                      v70[1] = v69;
                      v67 += 4LL;
                      v68 -= 4LL;
                    }

                    while (v68);
                    uint64_t v66 = v53 & 0x7FFFFFFFFFFFFFFCLL;
                    if (v53 != (v53 & 0x7FFFFFFFFFFFFFFCLL))
                    {
LABEL_50:
                      do
                      {
                        *(void *)(v65 + 8 * v66) = a5[v66];
                        ++v66;
                      }

                      while (v53 != v66);
                    }
                  }
                }

                else
                {
                  int v57 = &a5[v53];
                }

                v54[v53] = *v57;
              }
            }

            else
            {
              uint64_t v71 = v52;
              unint64_t v72 = (unsigned __int16 **)v50;
              do
              {
                if (sub_10009354C( *v72,  *v55,  *(void *)(a1 + 624),  *(unsigned __int16 *)(a1 + 640),  v90,  v89))
                {
                  int v73 = v72;
                  if (v54 == a5)
                  {
                    unint64_t v54 = (unsigned __int16 **)sub_1000CAF58(v88, v74, v75, v76, v77, v78, v79, v80);
                    int v73 = v72;
                  }
                }

                else
                {
                  int v73 = a5;
                }

                *unint64_t v54 = *v73;
                ++v72;
                --v71;
              }

              while (v71);
            }

            ++v53;
          }

          while (v53 != v86);
          a5 = v54;
          a4 = v86;
        }

        uint64_t v14 = v82;
        a3 = v83;
      }

      a7 = v84;
      a6 = v85;
    }

    a2 = v87;
  }

uint64_t sub_100085030( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10008F898(*(void *)(a1 + 848), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100085038(uint64_t a1)
{
  return sub_10008FFB0(*(void *)(a1 + 848));
}

BOOL sub_100085040(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 652) <= a2 && sub_10008FFB8(*(void *)(a1 + 848), a2);
}

BOOL sub_10008505C(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 652) > a2 || sub_10008FFB8(*(void *)(a1 + 848), a2);
}

uint64_t sub_100085078(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  if (*(_DWORD *)(a1 + 652) <= (int)a2)
  {
    int v3 = 0;
    uint64_t v4 = (int *)(a1 + 796);
    uint64_t v5 = (_DWORD *)(a1 + 792);
    uint64_t v6 = *(void *)(a1 + 848);
  }

  else
  {
    else {
      int v3 = *(unsigned __int8 *)(*(void *)(a1 + 496) + (int)a2);
    }
    uint64_t v4 = (int *)(a1 + 796);
    uint64_t v5 = (_DWORD *)(a1 + 792);
    uint64_t v6 = *(void *)(a1 + 848);
  }

  return sub_100090100(v6, a2, a3, v3, v4, v5);
}

uint64_t sub_1000850C0( uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 652) <= (int)a2)
  {
    uint64_t v9 = 0LL;
    if (a3 >= 0) {
      return sub_100090D48(*(void *)(a1 + 848), a2, a3, v9, a4, a6, a7, a8);
    }
  }

  else
  {
    else {
      uint64_t v9 = *(unsigned __int8 *)(*(void *)(a1 + 496) + (int)a2);
    }
  }

  return 0LL;
}

uint64_t sub_100085104(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 652);
  if (a2 == 0xFFFFFF)
  {
    if (v2 > 0) {
      return 0LL;
    }
  }

  else if (v2 - 1 > a2)
  {
    return (a2 + 1);
  }

  return sub_100092008(*(void *)(a1 + 848), a2);
}

BOOL sub_100085140(uint64_t a1)
{
  return *(void *)(a1 + 808) != 0LL;
}

uint64_t sub_100085150(uint64_t a1, unsigned __int16 *a2)
{
  if (!*(void *)(a1 + 808)) {
    return 2LL;
  }
  uint64_t v23 = 0LL;
  uint64_t v24 = 0LL;
  sub_100092E58(*(void *)(a1 + 848), &v24, &v23);
  uint64_t v4 = 2LL * (int)(sub_1000935F4(*(void *)(a1 + 624), *(unsigned __int16 *)(a1 + 640), v24, v23, a2) + 1);
  uint64_t v12 = (void *)sub_1000CAF58(v4, v5, v6, v7, v8, v9, v10, v11);
  sub_1000932D4(*(void *)(a1 + 624), *(unsigned __int16 *)(a1 + 640), v24, v23, a2, (uint64_t)v12);
  unsigned int v13 = *(unsigned __int16 *)v12;
  if (v13 == 0xFFFF)
  {
LABEL_3:
    uint64_t v14 = 2LL;
  }

  else
  {
    int v16 = *(_DWORD *)(a1 + 824);
    uint64_t v17 = v12;
    while (1)
    {
      if (v16 > (int)v13)
      {
        uint64_t v19 = *(void *)(a1 + 808);
        uint64_t v14 = *(unsigned __int8 *)(v19 + v13);
        if ((_DWORD)v14 != 2) {
          break;
        }
      }

      unsigned int v18 = *((unsigned __int16 *)v17 + 1);
      uint64_t v17 = (void *)((char *)v17 + 2);
      unsigned int v13 = v18;
      if (v18 == 0xFFFF) {
        goto LABEL_3;
      }
    }

    uint64_t v20 = 2LL;
    while (1)
    {
      if (v16 > (int)v13)
      {
        int v21 = *(unsigned __int8 *)(v19 + v13);
        if (v21 != (_DWORD)v14 && v21 != 2) {
          break;
        }
      }

      unsigned int v13 = *(unsigned __int16 *)((char *)v17 + v20);
      v20 += 2LL;
      if (v13 == 0xFFFF) {
        goto LABEL_4;
      }
    }

    uint64_t v14 = 255LL;
  }

uint64_t sub_100085288(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_1000CB0B0();
  unint64_t v14 = sub_1000CAF58(8LL * (a3 + 1), v7, v8, v9, v10, v11, v12, v13);
  uint64_t v22 = (uint64_t *)v14;
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v23 = 2LL * *(int *)(a1 + 792) + 2;
    uint64_t v24 = (a3 + 1);
    uint64_t v25 = (unint64_t *)v14;
    do
    {
      *v25++ = sub_1000CAF58(v23, v15, v16, v17, v18, v19, v20, v21);
      --v24;
    }

    while (v24);
  }

  sub_100084638(a1, a2, (a3 + 1), v22);
  uint64_t v26 = (unsigned __int16 *)v22[a3];
  unsigned int v27 = *v26;
  if (v27 == 0xFFFF)
  {
LABEL_5:
    uint64_t v28 = 2LL;
  }

  else
  {
    int v30 = *(_DWORD *)(a1 + 824);
    while (1)
    {
      if (v30 > (int)v27)
      {
        uint64_t v32 = *(void *)(a1 + 808);
        uint64_t v28 = *(unsigned __int8 *)(v32 + v27);
        if ((_DWORD)v28 != 2) {
          break;
        }
      }

      unsigned int v31 = v26[1];
      ++v26;
      unsigned int v27 = v31;
      if (v31 == 0xFFFF) {
        goto LABEL_5;
      }
    }

    uint64_t v33 = 1LL;
    while (1)
    {
      if (v30 > (int)v27)
      {
        int v34 = *(unsigned __int8 *)(v32 + v27);
        if (v34 != (_DWORD)v28 && v34 != 2) {
          break;
        }
      }

      unsigned int v27 = v26[v33++];
      if (v27 == 0xFFFF) {
        goto LABEL_6;
      }
    }

    uint64_t v28 = 255LL;
  }

uint64_t sub_1000853B0(uint64_t a1)
{
  unsigned int v2 = sub_100082ED0(a1);
  unsigned int v3 = sub_100092E70(*(void *)(a1 + 848));
  return sub_1000BE644(v3, 4, v2);
}

uint64_t sub_1000853E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 744);
}

uint64_t sub_1000853EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 748);
}

uint64_t sub_1000853F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 752);
}

uint64_t sub_1000853FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 756);
}

uint64_t sub_100085404(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 740);
}

uint64_t sub_10008540C(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 640);
  uint64_t v2 = *(void *)(a1 + 848);
  if (v2)
  {
    unsigned int v3 = sub_100092000(v2);
    else {
      return v1;
    }
  }

  return v1;
}

uint64_t sub_100085440(uint64_t a1, unsigned int a2)
{
  else {
    return 0LL;
  }
}

BOOL sub_100085464(uint64_t a1, uint64_t a2, char *a3)
{
  return sub_100092268(*(void *)(a1 + 848), a2, a3);
}

BOOL sub_10008546C( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = sub_1000927E0(*(_DWORD **)(a1 + 848), a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    *(_OWORD *)(a1 + 784) = *(_OWORD *)(a1 + 656);
    sub_10009219C( *(void *)(a1 + 848),  a1,  (_DWORD *)(a1 + 784),  (_DWORD *)(a1 + 788),  (_DWORD *)(a1 + 796),  (_DWORD *)(a1 + 792));
  }

  return v9;
}

uint64_t sub_1000854C0(uint64_t a1)
{
  return nullsub_1(*(void *)(a1 + 848));
}

uint64_t sub_1000854C8(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6, unsigned int a7, int a8)
{
  int v13 = *(_DWORD *)(a1 + 676);
  int v75 = sub_1000CC52C((unint64_t)a4);
  int v14 = 4 * v75 + 4;
  uint64_t v15 = v14;
  uint64_t v23 = (unsigned __int8 *)sub_1000CAF58(v14, v16, v17, v18, v19, v20, v21, v22);
  unsigned int v31 = (unsigned __int8 *)sub_1000CAF58(v14, v24, v25, v26, v27, v28, v29, v30);
  if (v13 == 4) {
    int v32 = 3;
  }
  else {
    int v32 = v13;
  }
  if (sub_1000BE078(v32, a4, v14, (uint64_t)v31) == 2)
  {
    sub_1000CB038(v31, v14);
    sub_1000CB038(v23, v14);
    return sub_1000919D8(*(void *)(a1 + 848), a2, a3, a4, a5, a6, a7);
  }

  uint64_t v34 = a7;
  int v74 = a2;
  uint64_t v77 = a5;
  sub_100086568(v23, (unsigned __int16 *)a4, *(_DWORD *)(a1 + 732), v13, 0LL, 0LL);
  uint64_t v78 = v15;
  if (*(_DWORD *)(a1 + 732))
  {
    int v35 = sub_100086428((uint64_t)a4);
  }

  else
  {
    int v74 = 0;
    int v35 = 128;
  }

  uint64_t v36 = v31;
  int v81 = a3;
  int v37 = sub_1000C88E4((unint64_t)v23);
  int v38 = *(_DWORD *)(a1 + 652);
  LODWORD(v39) = 0;
  int v40 = v38 - 1;
  if (v38 >= 1)
  {
    do
    {
      int v41 = v39 + v40;
      int v42 = v41 >> 1;
      uint64_t v43 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * (v41 >> 1));
      else {
        LODWORD(v39) = v42 + 1;
      }
    }

    while ((int)v39 <= v40);
    int v38 = *(_DWORD *)(a1 + 652);
    uint64_t v36 = v31;
  }

  int v73 = (unsigned __int16 *)a4;
  if ((int)v39 >= v38)
  {
    uint64_t v52 = 0LL;
    goto LABEL_67;
  }

  if (!v74)
  {
    uint64_t v53 = 0LL;
    if (!a7)
    {
      do
      {
        uint64_t v66 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * (int)v39 + 2 * v53);
        uint64_t v67 = (unsigned __int8 *)(*(void *)(a1 + 584) + v66);
        if (sub_1000C8928(v67, v23, v37, v66)
          || v81 && sub_1000C88E4((unint64_t)v67) != v37)
        {
          break;
        }

        if (v53 < a6) {
          *(_DWORD *)(v77 + 4 * v53) = v39 + v53;
        }
        ++v53;
      }

      while ((int)v39 + v53 < *(int *)(a1 + 652));
LABEL_48:
      uint64_t v52 = v53;
      LODWORD(v34) = a7;
      uint64_t v36 = v31;
      goto LABEL_67;
    }

    if (a6 <= 1) {
      int v54 = 1;
    }
    else {
      int v54 = a6;
    }
    uint64_t v55 = (v54 - 1);
    while (1)
    {
      uint64_t v56 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2LL * (int)v39 + 2 * v53);
      int v57 = (unsigned __int8 *)(*(void *)(a1 + 584) + v56);
      if (sub_1000C8928(v57, v23, v37, v56)
        || v81 && sub_1000C88E4((unint64_t)v57) != v37)
      {
        goto LABEL_48;
      }

      if (v53 < a6) {
        *(_DWORD *)(v77 + 4 * v53) = v39 + v53;
      }
      if (v55 == v53) {
        break;
      }
      ++v53;
    }

    uint64_t v52 = (v53 + 1);
    uint64_t v36 = v31;
LABEL_98:
    sub_1000CB038(v36, v78);
    sub_1000CB038(v23, v78);
    return v52;
  }

  if (v35 != 16)
  {
    uint64_t v58 = 0LL;
    while (1)
    {
      uint64_t v39 = (int)v39;
      while (1)
      {
        uint64_t v61 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v39);
        uint64_t v62 = (unsigned __int8 *)(*(void *)(a1 + 584) + v61);
        if (sub_1000C8928(v62, v23, v37, v61)
          || v81 && sub_1000C88E4((unint64_t)v62) != v37)
        {
LABEL_64:
          uint64_t v52 = v58;
          goto LABEL_67;
        }

        int v63 = *(unsigned __int8 *)(*(void *)(a1 + 528) + v39);
        if (v63 == 16)
        {
          unint64_t v59 = (unint64_t)&v62[(int)sub_1000C88E4((unint64_t)v62) + 1];
          int v60 = sub_1000C88E4(v59);
          goto LABEL_52;
        }

        if ((v35 & v63) != 0) {
          break;
        }
LABEL_52:
      }

      if (v58 < a6) {
        *(_DWORD *)(v77 + 4 * v58) = v39;
      }
      uint64_t v52 = ++v58;
      LODWORD(v39) = v39 + 1;
    }
  }

  if (!v81)
  {
    uint64_t v52 = 0LL;
    while (1)
    {
      uint64_t v45 = v34;
      uint64_t v39 = (int)v39;
      while (1)
      {
        uint64_t v70 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v39);
        uint64_t v71 = (unsigned __int8 *)(*(void *)(a1 + 584) + v70);
        if (sub_1000C8928(v71, v23, v37, v70))
        {
LABEL_66:
          LODWORD(v34) = v45;
          goto LABEL_67;
        }

        int v72 = *(unsigned __int8 *)(*(void *)(a1 + 528) + v39);
        if (v72 == 16)
        {
          unint64_t v68 = (unint64_t)&v71[(int)sub_1000C88E4((unint64_t)v71) + 1];
          int v69 = sub_1000C88E4(v68);
          goto LABEL_87;
        }

LABEL_87:
      }

      if (v52 < a6) {
        *(_DWORD *)(v77 + 4 * v52) = v39;
      }
      ++v52;
      uint64_t v34 = v45;
      LODWORD(v39) = v39 + 1;
    }
  }

  uint64_t v44 = 0LL;
  while (2)
  {
    uint64_t v45 = v34;
    uint64_t v46 = (int)v39;
    while (1)
    {
      uint64_t v49 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v46);
      unint64_t v50 = (unsigned __int8 *)(*(void *)(a1 + 584) + v49);
      if (sub_1000C8928(v50, v23, v37, v49) || sub_1000C88E4((unint64_t)v50) != v37)
      {
LABEL_65:
        uint64_t v52 = v44;
        goto LABEL_66;
      }

      int v51 = *(unsigned __int8 *)(*(void *)(a1 + 528) + v46);
      if (v51 == 16)
      {
        unint64_t v47 = (unint64_t)&v50[(int)sub_1000C88E4((unint64_t)v50) + 1];
        int v48 = sub_1000C88E4(v47);
        goto LABEL_24;
      }

uint64_t sub_100085B50( uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a3;
  uint64_t v12 = 0LL;
  int v36 = 0;
  uint64_t v35 = 0LL;
  uint64_t v13 = *(void *)(a1 + 496);
  uint64_t v12 = *(unsigned __int8 *)(v13 + (int)a2);
  if (*(_BYTE *)(v13 + (int)a2))
  {
    int v14 = (unsigned __int16 *)(*(void *)(a1 + 544) + 2LL
                                                     * *(unsigned __int16 *)(*(void *)(a1 + 512) + 2LL * (int)a2));
    sub_1000937DC((_WORD **)a4, v14, a3);
LABEL_6:
    if (v9 < 1) {
      return v12;
    }
    int v15 = *(unsigned __int16 *)(a1 + 828);
    if (v15 == 0xFFFF || (_DWORD)v12 != 1) {
      return v12;
    }
    goto LABEL_12;
  }

  uint64_t v18 = (void *)sub_1000CAF58(2LL * *(int *)(a1 + 784) + 2, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t v26 = (void *)sub_1000CAF58(2LL * *(int *)(a1 + 788) + 2, v19, v20, v21, v22, v23, v24, v25);
  sub_100083ECC(a1, a2, (uint64_t)v18, (uint64_t)v26, v27, v28, v29, v30);
  if (*(_WORD *)v26) {
    unint64_t v31 = (unint64_t)v26;
  }
  else {
    unint64_t v31 = (unint64_t)v18;
  }
  int v32 = *a4;
  BOOL v33 = sub_1000C8928((unsigned __int8 *)(a1 + 724), "z", 1, *(unsigned __int16 *)v26) == 0;
  uint64_t v12 = sub_1000942C4( *(void *)(a1 + 480),  v31,  v33,  v32,  (*(_DWORD *)(a1 + 796) + 1),  (uint64_t)&v35,  1LL,  (uint64_t)&v36);
  sub_1000CB038(v26, 2LL * *(int *)(a1 + 788) + 2);
  sub_1000CB038(v18, 2LL * *(int *)(a1 + 784) + 2);
  int v15 = *(unsigned __int16 *)(a1 + 828);
  if (v15 != 0xFFFF && (_DWORD)v12 == 1)
  {
LABEL_12:
    sub_100093AE4(*a4, *(unsigned __int8 *)(*(void *)(a1 + 832) + (int)a2), v15);
    return 1LL;
  }

  return v12;
}

uint64_t sub_100085CF0(unsigned __int16 *a1, char *a2, char a3, int a4, int a5, uint64_t a6)
{
  uint64_t v8 = a2;
  int v9 = a1;
  uint64_t v10 = a4;
  if ((a5 - 1) < 2)
  {
    if ((a3 & 1) != 0)
    {
      if (a4 >= 1)
      {
        while (1)
        {
          unsigned int v17 = *v8++;
          int v18 = nullsub_1(v17);
          int v19 = *v9++;
          if (v19 != v18) {
            break;
          }
          if (!--v10) {
            return 0LL;
          }
        }

        return 1LL;
      }
    }

    else if ((a3 & 4) != 0)
    {
      if (a4 >= 1)
      {
        while (1)
        {
          int v23 = *v8++;
          uint64_t v24 = sub_1000BF084(v23);
          int v25 = nullsub_1(v24);
          int v26 = *v9++;
          if (v26 != v25) {
            break;
          }
          if (!--v10) {
            return 0LL;
          }
        }

        return 1LL;
      }
    }

    else
    {
      if (a4 < 1)
      {
        LODWORD(v12) = 0;
        int v32 = *a1;
      }

      else
      {
        uint64_t v12 = 0LL;
        while (a1[v12] == 32)
        {
          if (a2[v12] != 32) {
            return 1LL;
          }
          if (a4 == ++v12)
          {
            LODWORD(v12) = a4;
            break;
          }
        }

        int v13 = a1[v12];
      }

      int v33 = v12 + 1;
      if ((a3 & 2) == 0)
      {
        if (v33 < a4)
        {
          uint64_t v34 = &v8[v33];
          uint64_t v35 = &v9[v33];
          while (1)
          {
            int v38 = *v35++;
            int v37 = v38;
            unsigned int v40 = *v34++;
            uint64_t v39 = v40;
            if (*(v9 - 1) == 32)
            {
            }

            else if (v37 != nullsub_1(v39))
            {
              return 1LL;
            }

            uint64_t result = 0LL;
            if (++v33 >= a4) {
              return result;
            }
          }
        }

        return 0LL;
      }

      if (v33 < a4)
      {
        int v41 = &v8[v33];
        int v42 = &v9[v33];
        while (1)
        {
          int v44 = *v42++;
          int v43 = v44;
          unsigned int v45 = *v41++;
          uint64_t result = 0LL;
          if (++v33 >= a4) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  else if (a5 == 4)
  {
    unsigned __int16 v71 = 0;
    if ((a3 & 1) != 0)
    {
      if (a4 >= 1)
      {
        while (1)
        {
          int v27 = *v9++;
          int v28 = sub_1000C87AC(v8, a6, &v71);
          if (v27 != v71) {
            break;
          }
          v8 += v28;
          if (!--v10) {
            return 0LL;
          }
        }

        return 1LL;
      }
    }

    else if ((a3 & 4) != 0)
    {
      if (a4 >= 1)
      {
        while (1)
        {
          int v30 = *v9++;
          int v31 = sub_1000C87AC(v8, a6, &v71);
          v8 += v31;
          if (!--v10) {
            return 0LL;
          }
        }

        return 1LL;
      }
    }

    else
    {
      if (a4 < 1)
      {
        LODWORD(v15) = 0;
      }

      else
      {
        uint64_t v15 = 0LL;
        while (v9[v15] == 32)
        {
          int v16 = sub_1000C87AC(v8, a6, &v71);
          if (v71 != 32) {
            return 1LL;
          }
          v8 += v16;
          if (v10 == ++v15)
          {
            LODWORD(v15) = v10;
            break;
          }
        }
      }

      int v54 = v9[v15];
      int v55 = sub_1000C87AC(v8, a6, &v71);
      uint64_t v56 = &v8[v55];
      int v57 = v15 + 1;
      if ((a3 & 2) == 0)
      {
        if (v57 < a4)
        {
          uint64_t v58 = v57;
          int v59 = ~(_DWORD)v15 + a4;
          while (1)
          {
            int v60 = v9[v58];
            int v61 = sub_1000C87AC(v56, a6, &v71);
            if (v9[v58 - 1] == 32)
            {
            }

            else if (v60 != v71)
            {
              return 1LL;
            }

            uint64_t result = 0LL;
            v56 += v61;
            ++v58;
            if (!--v59) {
              return result;
            }
          }
        }

        return 0LL;
      }

      if (v57 < a4)
      {
        uint64_t v66 = &v9[v57];
        while (1)
        {
          int v67 = *v66++;
          int v68 = sub_1000C87AC(v56, a6, &v71);
          if (v67 != v71) {
            break;
          }
          int v69 = v68;
          uint64_t result = 0LL;
          v56 += v69;
          if (++v57 >= a4) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  else if (a5 == 3)
  {
    unsigned __int16 v70 = 0;
    if ((a3 & 1) != 0)
    {
      if (a4 >= 1)
      {
        int v20 = 0;
        while (1)
        {
          int v21 = *v9++;
          int v22 = sub_1000CF26C(&v8[v20], &v70);
          if (v21 != v70) {
            break;
          }
          v20 += v22;
          if (!--v10) {
            return 0LL;
          }
        }

        return 1LL;
      }
    }

    else if ((a3 & 4) != 0)
    {
      if (a4 >= 1)
      {
        while (1)
        {
          int v29 = *v9++;
          sub_1000CF26C(v8, &v70);
          if (!--v10) {
            return 0LL;
          }
        }

        return 1LL;
      }
    }

    else
    {
      if (a4 < 1)
      {
        LODWORD(v11) = 0;
      }

      else
      {
        uint64_t v11 = 0LL;
        while (a1[v11] == 32)
        {
          if (a2[v11] != 32) {
            return 1LL;
          }
          if (a4 == ++v11)
          {
            LODWORD(v11) = a4;
            break;
          }
        }
      }

      int v46 = a1[v11];
      int v47 = sub_1000CF26C(&a2[v11], &v70);
      int v48 = v11 + 1;
      int v49 = v47 + v11;
      if ((a3 & 2) == 0)
      {
        if (v48 < a4)
        {
          uint64_t v50 = v48;
          int v51 = ~(_DWORD)v11 + a4;
          while (1)
          {
            int v52 = v9[v50];
            int v53 = sub_1000CF26C(&v8[v49], &v70);
            if (v9[v50 - 1] == 32)
            {
            }

            else if (v52 != v70)
            {
              return 1LL;
            }

            uint64_t result = 0LL;
            ++v50;
            v49 += v53;
            if (!--v51) {
              return result;
            }
          }
        }

        return 0LL;
      }

      if (v48 < a4)
      {
        uint64_t v62 = &v9[v48];
        while (1)
        {
          int v63 = *v62++;
          int v64 = sub_1000CF26C(&v8[v49], &v70);
          if (v63 != v70) {
            break;
          }
          int v65 = v64;
          uint64_t result = 0LL;
          v49 += v65;
          if (++v48 >= a4) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100086200(uint64_t a1, int a2)
{
  if ((a2 - 3) < 2)
  {
    uint64_t v12 = (char *)(a1 - 1);
    do
      int v13 = *++v12;
    while (v13 == 32);
    unsigned __int16 v28 = 0;
    int v14 = sub_1000CF26C(v12, &v28);
    int v6 = sub_1000CB4B0(v28);
    if (v6)
    {
      int v15 = v28;
      uint64_t v16 = sub_1000CB5E8(v28);
    }

    BOOL v17 = v6 == 0;
    int v18 = &v12[v14];
    if (*v18)
    {
      int v9 = v6;
      int v19 = v6;
      while (1)
      {
        int v20 = sub_1000CF26C(v18, &v28);
        int v21 = sub_1000CB4B0(v28);
        int v22 = v28;
        if (v21)
        {
          uint64_t v23 = sub_1000CB5E8(v28);
          int v19 = 0;
          BOOL v17 = 0;
          if (*(v18 - 1) != 32) {
            int v6 = 0;
          }
        }

        else if (sub_1000CB378(v28))
        {
          int v9 = 0;
          if (*(v18 - 1) == 32) {
            int v6 = 0;
          }
        }

        v18 += v20;
        if (!*v18) {
          goto LABEL_35;
        }
      }
    }

    int v19 = v6;
    int v9 = v6;
LABEL_35:
    unsigned __int8 v24 = v17;
    unsigned __int8 v25 = v17 | 2;
    BOOL v26 = v19 == 0;
  }

  else
  {
    uint64_t v2 = (_BYTE *)(a1 - 1);
    do
    {
      int v4 = *++v2;
      int v3 = v4;
    }

    while (v4 == 32);
    int v5 = sub_1000BF028(v3);
    int v6 = v5;
    BOOL v7 = v5 == 0;
    LOBYTE(v8) = v2[1];
    if ((_BYTE)v8)
    {
      int v9 = v5;
      int v10 = v5;
      do
      {
        unsigned int v11 = v8;
        if (sub_1000BF028(v8))
        {
          int v10 = 0;
          BOOL v7 = 0;
          if (*v2 != 32) {
            int v6 = 0;
          }
        }

        else if (sub_1000BF004(v11))
        {
          int v9 = 0;
          if (*v2 == 32) {
            int v6 = 0;
          }
        }

        int v8 = v2[2];
        ++v2;
      }

      while (v8);
    }

    else
    {
      int v10 = v5;
      int v9 = v5;
    }

    unsigned __int8 v24 = v7;
    unsigned __int8 v25 = v7 | 2;
    BOOL v26 = v10 == 0;
  }

  if (!v26) {
    unsigned __int8 v24 = v25;
  }
  if (v9) {
    v24 |= 4u;
  }
  if (v6) {
    v24 |= 8u;
  }
  if (!v24) {
    return 16;
  }
  return v24;
}

uint64_t sub_100086428(uint64_t a1)
{
  uint64_t v1 = (_WORD *)(a1 - 2);
  do
  {
    unsigned int v3 = (unsigned __int16)v1[1];
    ++v1;
    uint64_t v2 = v3;
  }

  while (v3 == 32);
  int v4 = sub_1000CB4B0(v2);
  if (v4)
  {
    uint64_t v5 = sub_1000CB5E8(v2);
  }

  BOOL v6 = v4 == 0;
  LOWORD(v7) = v1[1];
  if ((_WORD)v7)
  {
    int v8 = v4;
    int v9 = v4;
    while (1)
    {
      uint64_t v10 = (unsigned __int16)v7;
      if (sub_1000CB4B0((unsigned __int16)v7))
      {
        uint64_t v11 = sub_1000CB5E8(v10);
        int v9 = 0;
        BOOL v6 = 0;
        if (*v1 != 32) {
          int v4 = 0;
        }
      }

      else if (sub_1000CB378(v10))
      {
        int v8 = 0;
        if (*v1 == 32) {
          int v4 = 0;
        }
      }

      int v7 = (unsigned __int16)v1[2];
      ++v1;
      if (!v7) {
        goto LABEL_18;
      }
    }
  }

  int v9 = v4;
  int v8 = v4;
LABEL_18:
  unsigned __int8 v13 = v6;
  if (v9) {
    v13 |= 2u;
  }
  if (v8) {
    v13 |= 4u;
  }
  if (v4) {
    v13 |= 8u;
  }
  if (!v13) {
    return 16;
  }
  return v13;
}

uint64_t sub_100086568(_BYTE *a1, unsigned __int16 *a2, int a3, int a4, uint64_t a5, int *a6)
{
  int v7 = a1;
  if ((a4 - 1) >= 2)
  {
    if (a4 != 4)
    {
      if (a4 != 3) {
        return 2LL;
      }
      if (a6)
      {
        uint64_t v9 = *a6;
        LOWORD(v10) = *a2;
        if (*a2) {
          goto LABEL_6;
        }
      }

      else
      {
        uint64_t v9 = -1LL;
        LOWORD(v10) = *a2;
        if (*a2)
        {
LABEL_6:
          int v11 = 0;
          uint64_t v12 = 1LL;
          if (a3)
          {
            do
            {
              uint64_t v13 = sub_1000CB5E8((unsigned __int16)v10);
              int v14 = sub_1000CF578(v13, v7);
              v7 += v14;
              int v15 = v14 - 1;
              if (v9 < (v12 * 2) >> 1) {
                int v15 = 0;
              }
              v11 += v15;
              int v10 = a2[v12++];
            }

            while (v10);
          }

          else
          {
            do
            {
              int v16 = sub_1000CF578((unsigned __int16)v10, v7);
              v7 += v16;
              int v17 = v16 - 1;
              if (v9 < (v12 * 2) >> 1) {
                int v17 = 0;
              }
              v11 += v17;
              int v10 = a2[v12++];
            }

            while (v10);
          }

          *int v7 = 0;
          uint64_t result = 0LL;
          if (!a6) {
            return result;
          }
          goto LABEL_38;
        }
      }

      int v11 = 0;
      *a1 = 0;
      uint64_t result = 0LL;
      if (!a6) {
        return result;
      }
LABEL_38:
      int v36 = *a6 + v11;
      goto LABEL_43;
    }

    if (a6)
    {
      uint64_t v27 = *a6;
      LOWORD(v28) = *a2;
      if (*a2) {
        goto LABEL_26;
      }
    }

    else
    {
      uint64_t v27 = -1LL;
      LOWORD(v28) = *a2;
      if (*a2)
      {
LABEL_26:
        int v29 = 0;
        uint64_t v30 = 1LL;
        if (a3)
        {
          do
          {
            uint64_t v31 = sub_1000CB5E8((unsigned __int16)v28);
            int v32 = sub_1000C8808(v31, a5, v7);
            v7 += v32;
            int v33 = v32 - 1;
            if (v27 < (v30 * 2) >> 1) {
              int v33 = 0;
            }
            v29 += v33;
            int v28 = a2[v30++];
          }

          while (v28);
        }

        else
        {
          do
          {
            int v34 = sub_1000C8808((unsigned __int16)v28, a5, v7);
            v7 += v34;
            int v35 = v34 - 1;
            if (v27 < (v30 * 2) >> 1) {
              int v35 = 0;
            }
            v29 += v35;
            int v28 = a2[v30++];
          }

          while (v28);
        }

        goto LABEL_41;
      }
    }

    int v29 = 0;
LABEL_41:
    *int v7 = 0;
    uint64_t result = 0LL;
    if (!a6) {
      return result;
    }
    int v36 = *a6 + v29;
LABEL_43:
    *a6 = v36;
    return result;
  }

  unsigned __int16 v19 = *a2;
  if (*a2)
  {
    int v20 = a2 + 1;
    if (a3)
    {
      while (1)
      {
        unsigned int v21 = sub_1000CB5E8(v19);
        int v22 = sub_1000CE248(v21);
        if (!v22) {
          break;
        }
        *v7++ = v22;
        int v23 = *v20++;
        unsigned __int16 v19 = v23;
        if (!v23) {
          goto LABEL_20;
        }
      }
    }

    else
    {
      while (1)
      {
        int v25 = sub_1000CE248(v19);
        if (!v25) {
          break;
        }
        *v7++ = v25;
        int v24 = *v20++;
        unsigned __int16 v19 = v24;
        if (!v24) {
          goto LABEL_20;
        }
      }
    }

    uint64_t result = 1LL;
    *int v7 = 0;
  }

  else
  {
LABEL_20:
    uint64_t result = 0LL;
    *int v7 = 0;
  }

  return result;
}

uint64_t sub_1000867DC(_BYTE *a1, char *a2, int a3, char a4, int a5, uint64_t a6)
{
  int v7 = a3;
  int v8 = a2;
  uint64_t v9 = a1;
  if ((a5 - 1) < 2)
  {
    sub_1000C896C(a1, a2, a3);
    if ((a4 & 1) != 0) {
      return 0LL;
    }
    do
    {
      unsigned int v16 = *v9++;
      uint64_t result = v16;
    }

    while (v16 == 32);
    if ((a4 & 2) != 0)
    {
      char v26 = sub_1000BF084(result);
      uint64_t result = 0LL;
      *(v9 - 1) = v26;
    }

    else if ((a4 & 4) != 0)
    {
      if ((_DWORD)result)
      {
        do
        {
          *(v9 - 1) = sub_1000BF084(result);
          unsigned int v30 = *v9++;
          uint64_t result = v30;
        }

        while (v30);
      }
    }

    else
    {
      int v17 = 1;
      if ((_DWORD)result != 32) {
        goto LABEL_25;
      }
      do
      {
LABEL_24:
        int v17 = 1;
        unsigned int v21 = *v9++;
        uint64_t result = v21;
      }

      while (v21 == 32);
LABEL_25:
      while ((_DWORD)result)
      {
        if (v17)
        {
          char v19 = sub_1000BF084(result);
          int v17 = 0;
          *(v9 - 1) = v19;
          unsigned int v20 = *v9++;
          uint64_t result = v20;
          if (v20 == 32) {
            goto LABEL_24;
          }
        }

        else
        {
          unsigned int v18 = *v9++;
          uint64_t result = v18;
          if (v18 == 32) {
            goto LABEL_24;
          }
        }
      }
    }
  }

  else
  {
    if (a5 != 4)
    {
      if (a5 != 3) {
        return 2LL;
      }
      if ((a4 & 1) == 0)
      {
        int v10 = *a2;
        if (v10 == 32)
        {
          do
          {
            *v9++ = 32;
            int v11 = *++v8;
            int v10 = v11;
          }

          while (v11 == 32);
        }

        unsigned __int16 v36 = 0;
        if ((a4 & 2) == 0)
        {
          if ((a4 & 4) != 0)
          {
            if (v10)
            {
              do
              {
                v8 += (int)sub_1000CF26C(v8, &v36);
                uint64_t v34 = sub_1000CB730(v36);
                unsigned __int16 v36 = v34;
                v9 += (int)sub_1000CF578(v34, v9);
              }

              while (*v8);
            }
          }

          else if (v10)
          {
            BOOL v12 = 1;
            do
            {
              int v13 = sub_1000CF26C(v8, &v36);
              uint64_t v14 = v36;
              if (v12)
              {
                uint64_t v14 = sub_1000CB730(v36);
                unsigned __int16 v36 = v14;
              }

              v8 += v13;
              v9 += (int)sub_1000CF578(v14, v9);
              BOOL v12 = v36 == 32;
            }

            while (*v8);
          }

          _BYTE *v9 = 0;
          return 0LL;
        }

        uint64_t v27 = &v8[(int)sub_1000CF26C(v8, &v36)];
        uint64_t v28 = sub_1000CB730(v36);
        unsigned __int16 v36 = v28;
        int v29 = sub_1000CF578(v28, v9);
        a3 = v7 - v29;
        a1 = &v9[v29];
        a2 = v27;
      }

      sub_1000C896C(a1, a2, a3);
      return 0LL;
    }

    unsigned __int16 v37 = 0;
    if ((a4 & 1) != 0)
    {
      while (*v8)
      {
        v8 += (int)sub_1000C87AC(v8, a6, &v37);
        v9 += (int)sub_1000CF578(v37, v9);
      }
    }

    else if ((a4 & 2) != 0)
    {
      for (int i = sub_1000C87AC(a2, a6, &v37); v37 == 32; int i = sub_1000C87AC(v8, a6, &v37))
      {
        v8 += i;
        *v9++ = 32;
      }

      int v32 = &v8[(int)sub_1000C87AC(v8, a6, &v37)];
      uint64_t v33 = sub_1000CB730(v37);
      unsigned __int16 v37 = v33;
    }

    else if ((a4 & 4) != 0)
    {
      if (*a2)
      {
        do
        {
          v8 += (int)sub_1000C87AC(v8, a6, &v37);
          uint64_t v35 = sub_1000CB730(v37);
          unsigned __int16 v37 = v35;
          v9 += (int)sub_1000CF578(v35, v9);
        }

        while (*v8);
      }
    }

    else if (*a2)
    {
      int v23 = 1;
      do
      {
        while (1)
        {
          int v24 = sub_1000C87AC(v8, a6, &v37);
          uint64_t v25 = v37;
          if (v37 != 32) {
            break;
          }
          *v9++ = 32;
          int v23 = 1;
          v8 += v24;
          if (!*v8) {
            goto LABEL_59;
          }
        }

        if (v23)
        {
          uint64_t v25 = sub_1000CB730(v37);
          unsigned __int16 v37 = v25;
        }

        int v23 = 0;
        v9 += (int)sub_1000CF578(v25, v9);
        v8 += v24;
      }

      while (*v8);
    }

uint64_t sub_100086BF0(uint64_t a1, char *a2, int a3, char a4, int a5, uint64_t a6)
{
  int v8 = a2;
  uint64_t v9 = (unsigned __int16 *)a1;
  if ((a5 - 1) < 2)
  {
    sub_1000CE25C(a2, a3, a1);
    if ((a4 & 1) != 0) {
      return 0LL;
    }
    do
    {
      unsigned int v16 = *v9++;
      uint64_t result = v16;
    }

    while (v16 == 32);
    if ((a4 & 2) != 0)
    {
      unsigned __int16 v28 = sub_1000CB730(result);
      uint64_t result = 0LL;
      *(v9 - 1) = v28;
    }

    else if ((a4 & 4) != 0)
    {
      if ((_DWORD)result)
      {
        do
        {
          *(v9 - 1) = sub_1000CB730((unsigned __int16)result);
          unsigned int v30 = *v9++;
          uint64_t result = v30;
        }

        while (v30);
      }
    }

    else
    {
      int v17 = 1;
      if ((_DWORD)result != 32) {
        goto LABEL_25;
      }
      do
      {
LABEL_24:
        int v17 = 1;
        unsigned int v21 = *v9++;
        uint64_t result = v21;
      }

      while (v21 == 32);
LABEL_25:
      while ((_DWORD)result)
      {
        if (v17)
        {
          unsigned __int16 v19 = sub_1000CB730((unsigned __int16)result);
          int v17 = 0;
          *(v9 - 1) = v19;
          unsigned int v20 = *v9++;
          uint64_t result = v20;
          if (v20 == 32) {
            goto LABEL_24;
          }
        }

        else
        {
          unsigned int v18 = *v9++;
          uint64_t result = v18;
          if (v18 == 32) {
            goto LABEL_24;
          }
        }
      }
    }
  }

  else
  {
    if (a5 != 4)
    {
      if (a5 != 3) {
        return 2LL;
      }
      if ((a4 & 1) != 0)
      {
        char v26 = a2;
        int v27 = a3;
      }

      else
      {
        int v10 = *a2;
        if (v10 == 32)
        {
          do
          {
            sub_1000CF26C(v8, v9++);
            int v11 = *++v8;
            int v10 = v11;
          }

          while (v11 == 32);
        }

        unsigned __int16 v33 = 0;
        if ((a4 & 2) == 0)
        {
          if ((a4 & 4) != 0)
          {
            if (v10)
            {
              do
              {
                v8 += (int)sub_1000CF26C(v8, &v33);
                unsigned __int16 v33 = sub_1000CB730(v33);
                *v9++ = v33;
              }

              while (*v8);
            }
          }

          else if (v10)
          {
            BOOL v12 = 1;
            do
            {
              int v13 = sub_1000CF26C(v8, &v33);
              int v14 = v33;
              if (v12)
              {
                int v14 = sub_1000CB730(v33);
                unsigned __int16 v33 = v14;
              }

              v8 += v13;
              *v9++ = v14;
              BOOL v12 = v14 == 32;
            }

            while (*v8);
          }

          unsigned __int16 *v9 = 0;
          return 0LL;
        }

        int v29 = &v8[(int)sub_1000CF26C(v8, &v33)];
        unsigned __int16 v33 = sub_1000CB730(v33);
        *v9++ = v33;
        int v27 = a3 - 1;
        char v26 = v29;
      }

      sub_1000CF40C(v26, v27, (uint64_t)v9);
      return 0LL;
    }

    unsigned __int16 v34 = 0;
    if ((a4 & 1) != 0)
    {
      while (*v8)
      {
        v8 += (int)sub_1000C87AC(v8, a6, &v34);
        *v9++ = v34;
      }
    }

    else if ((a4 & 2) != 0)
    {
      for (int i = sub_1000C87AC(a2, a6, &v34); v34 == 32; int i = sub_1000C87AC(v8, a6, &v34))
      {
        v8 += i;
        *v9++ = 32;
      }

      int v32 = &v8[(int)sub_1000C87AC(v8, a6, &v34)];
      unsigned __int16 v34 = sub_1000CB730(v34);
      unsigned __int16 *v9 = v34;
      for (++v9; *v32; ++v9)
      {
        v32 += (int)sub_1000C87AC(v32, a6, &v34);
        unsigned __int16 *v9 = v34;
      }
    }

    else if ((a4 & 4) != 0)
    {
      if (*a2)
      {
        do
        {
          v8 += (int)sub_1000C87AC(v8, a6, &v34);
          unsigned __int16 v34 = sub_1000CB730(v34);
          *v9++ = v34;
        }

        while (*v8);
      }
    }

    else if (*a2)
    {
      int v23 = 1;
      do
      {
        int v24 = sub_1000C87AC(v8, a6, &v34);
        unsigned __int16 v25 = v34;
        if (v34 == 32)
        {
          int v23 = 1;
        }

        else if (v23)
        {
          unsigned __int16 v25 = sub_1000CB730(v34);
          int v23 = 0;
          unsigned __int16 v34 = v25;
        }

        v8 += v24;
        *v9++ = v25;
      }

      while (*v8);
    }

    uint64_t result = 0LL;
    unsigned __int16 *v9 = 0;
  }

  return result;
}

unint64_t sub_100086FB0(char *a1, int a2, uint64_t a3)
{
  unsigned int v3 = a1;
  if (a2 != 4) {
    return 0LL;
  }
  if (!*a1) {
    return 0LL;
  }
  LODWORD(v6) = 0;
  unsigned __int16 v7 = 0;
  do
  {
    v3 += (int)sub_1000C87AC(v3, a3, &v7);
    uint64_t v6 = sub_1000CF578(v7, v8) + v6;
  }

  while (*v3);
  return v6;
}

void *sub_1000870B4( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = sub_1000BCAE8(a1, "mwl", a2, a4, a5, a6, a7, a8);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = sub_1000C1074(888LL);
  if (!v12) {
    return 0LL;
  }
  int v13 = (_DWORD *)v12;
  uint64_t v40 = 0LL;
  if (!sub_1000BCD38(v11, v13 + 9)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 10)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 11)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 12)) {
    goto LABEL_95;
  }
  if (!sub_1000BCE28(v11, v13 + 30, 256, 1)) {
    goto LABEL_95;
  }
  if (!sub_1000BCE28(v11, v13 + 94, 256, 1)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 158)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 159)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 160)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 161)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 162)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 163)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 164)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 165)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 166)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 167)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 168)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 170)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 172)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 173)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 174)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 176)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 183)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 189)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 190)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 191)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 192)) {
    goto LABEL_95;
  }
  if (!sub_1000BCD38(v11, v13 + 193)) {
    goto LABEL_95;
  }
  int v39 = 0;
  if (!sub_1000BCD38(v11, &v39)) {
    goto LABEL_95;
  }
  v13[194] = v39;
  if (!sub_1000BCD38(v11, &v39)) {
    goto LABEL_95;
  }
  v13[195] = v39;
  if (!sub_1000BCD38(v11, v13 + 196) || !sub_1000BCD38(v11, v13 + 197)) {
    goto LABEL_95;
  }
  if (sub_1000BCD38(v11, v13 + 198)
    && sub_1000BCD38(v11, v13 + 199)
    && sub_1000BCD38(v11, v13 + 200)
    && sub_1000BCD38(v11, v13 + 201)
    && sub_1000BCD38(v11, v13 + 202)
    && sub_1000BCD38(v11, v13 + 203)
    && sub_1000BCD38(v11, v13 + 204))
  {
    sub_1000BCD38(v11, v13 + 205);
  }

  if (!sub_1000BCE28(v11, v13 + 206, 8, 1)) {
    goto LABEL_95;
  }
  v13[208] = sub_10002361C((unsigned __int8 *)v13 + 824);
  if (!sub_1000BCD38(v11, &v39)) {
    goto LABEL_95;
  }
  v13[209] = v39;
  if (!sub_1000BCD38(v11, v13 + 220)) {
    goto LABEL_95;
  }
  int v39 = 0;
  int v14 = (uint64_t *)(v13 + 6);
  uint64_t v15 = *v14;
  if (*v14)
  {
    int v16 = v39;
    if (v39 != v13[158]) {
      goto LABEL_95;
    }
    *((void *)v13 + 2) = v15;
  }

  else
  {
    int v16 = v13[158];
    uint64_t v15 = *((void *)v13 + 2);
  }

  int v17 = *(_DWORD *)(v15 + 4LL * (v16 - 1));
  int v39 = 0;
  unsigned int v18 = (uint64_t *)(v13 + 2);
  uint64_t v19 = *v18;
  if (*v18)
  {
    if (v39 != v17) {
      goto LABEL_95;
    }
  }

  if (v19) {
    *(void *)int v13 = v19;
  }
  int v39 = 0;
  unsigned int v20 = (uint64_t *)(v13 + 20);
  uint64_t v21 = *v20;
  if (*v20)
  {
    if (v39 != 257) {
      goto LABEL_95;
    }
  }

  if (v21) {
    *((void *)v13 + 9) = v21;
  }
  int v39 = 0;
  int v22 = v13 + 16;
  if (*v22)
  {
    *((void *)v13 + 7) = *v22;
  }

  int v39 = 0;
  int v23 = (uint64_t *)(v13 + 28);
  uint64_t v24 = *v23;
  if (*v23)
  {
    if (v39 != 257) {
      goto LABEL_95;
    }
  }

  if (v24) {
    *((void *)v13 + 13) = v24;
  }
  int v39 = 0;
  unsigned __int16 v25 = v13 + 24;
  if (*v25)
  {
    *((void *)v13 + 11) = *v25;
  }

  if (!sub_1000BCD38(v11, &v40)) {
    goto LABEL_95;
  }
  if ((_DWORD)v40)
  {
    char v26 = sub_100079848(v11);
    *((void *)v13 + 90) = v26;
    if (!v26) {
      goto LABEL_95;
    }
    *((void *)v13 + 89) = v26;
  }

  int v39 = 0;
  int v27 = v13 + 218;
  if (*v27)
  {
    if (v39 != v13[220]) {
      goto LABEL_95;
    }
    *((void *)v13 + 108) = *v27;
  }

  int v39 = 0;
  *((void *)v13 + 106) = *((void *)v13 + 107);
  if (!HIDWORD(v40)) {
    goto LABEL_94;
  }
  int v39 = 0;
  unsigned __int16 v28 = v13 + 186;
  if (!sub_1000BCED0(v11, 4, (uint64_t *)v13 + 93, &v39))
  {
LABEL_95:
    sub_1000BCBC8(v11);
    sub_1000C0EF8((uint64_t)v13);
    return 0LL;
  }

  if (*v28)
  {
    if (v39 == v13[183] + 1)
    {
      *((void *)v13 + 92) = *v28;
      goto LABEL_94;
    }

    goto LABEL_95;
  }

uint64_t sub_100087784(void *a1)
{
  uint64_t v2 = a1[61];
  if (*(_DWORD *)(v2 + 840))
  {
    if (*(void *)(v2 + 856))
    {
      uint64_t v3 = 8LL * *(unsigned __int16 *)(a1[60] + 728LL);
      do
      {
        sub_1000C0EF8(*(void *)(*(void *)(v2 + 856) + v3));
        v3 -= 8LL;
      }

      while (v3 != -8);
      sub_1000C0EF8(*(void *)(v2 + 856));
    }

    *(_OWORD *)(v2 + 848) = 0u;
    sub_1000C0EF8(*(void *)(v2 + 8));
    sub_1000C0EF8(*(void *)(v2 + 24));
    sub_10008B290(v2);
    sub_100079184(*(void *)(v2 + 720));
    sub_1000C0EF8(*(void *)(v2 + 872));
    sub_1000C0EF8(*(void *)(v2 + 744));
    sub_1000C0EF8(v2);
  }

  sub_10008D278(a1[66]);
  return sub_1000C0EF8((uint64_t)a1);
}

uint64_t sub_100087834(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 480) + 776LL);
}

uint64_t sub_100087840(uint64_t a1)
{
  return *(void *)(a1 + 480) + 824LL;
}

uint64_t sub_10008784C(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 480) + 836LL);
}

uint64_t sub_100087858( void *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v11 = (int *)a1[60];
  if (a3) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (unsigned __int16 *)&unk_1000F250E;
  }
  if (v11[8] >= 1)
  {
    int v13 = v11[194];
    int v14 = (4 * sub_1000CC52C((unint64_t)a2)) | 1;
    uint64_t v15 = v14;
    int v23 = (unsigned __int8 *)sub_1000CAF58(v14, v16, v17, v18, v19, v20, v21, v22);
    if (v13 == 4) {
      int v24 = 3;
    }
    else {
      int v24 = v13;
    }
    if (sub_1000BE078(v24, (__int16 *)a2, v14, (uint64_t)v23) == 2)
    {
      sub_1000CB038(v23, v14);
    }

    else
    {
      uint64_t v32 = (unsigned __int8 *)sub_1000CAF58(v14, v25, v26, v27, v28, v29, v30, v31);
      sub_100086568(v32, a2, v11[208], v11[194], 0LL, 0LL);
      int v50 = v8;
      if (v11[208]) {
        int v33 = sub_100086428((uint64_t)a2);
      }
      else {
        int v33 = 128;
      }
      uint64_t v34 = (int)((4 * sub_1000CC52C((unint64_t)v12)) | 1);
      int v42 = (void *)sub_1000CAF58(v34, v35, v36, v37, v38, v39, v40, v41);
      if (sub_100086568(v42, v12, 0, v11[195], a1[61] + 784LL, 0LL) == 1)
      {
        int v43 = v42;
        uint64_t v44 = v34;
      }

      else
      {
        uint64_t v49 = v34;
        memset(v51, 0, sizeof(v51));
        __int128 v52 = xmmword_1000F0840;
        uint64_t v45 = sub_10008C34C((uint64_t)a1, (int *)&v52, v51, v23, v32, v33);
        if ((_DWORD)v45 != 0xFFFFFF)
        {
          uint64_t v46 = v45;
          if (!sub_10008BBD0((uint64_t)v11, (uint64_t)v51, v42))
          {
LABEL_25:
            sub_1000CB038(v42, v49);
            sub_1000CB038(v32, v15);
            sub_1000CB038(v23, v15);
            int v8 = v50;
            if ((_DWORD)v46 != 0xFFFFFF) {
              return v46;
            }
            goto LABEL_18;
          }

          while (1)
          {
            sub_10008BD18((uint64_t)v11, (uint64_t)v51, 1u);
            int v48 = sub_10008CAC8((uint64_t)a1, (int *)&v52, (uint64_t)v51, v23, (uint64_t)v32, v33);
            if (!v48) {
              break;
            }
            uint64_t v46 = (v48 + v46);
          }
        }

        int v43 = v42;
        uint64_t v44 = v49;
      }

      sub_1000CB038(v43, v44);
      sub_1000CB038(v32, v15);
      sub_1000CB038(v23, v15);
      int v8 = v50;
    }
  }

uint64_t sub_100087AD4(void *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = a4;
  uint64_t v10 = a1[60];
  uint64_t v11 = a1[61] + 784LL;
  uint64_t v12 = (int)((4 * sub_1000CC52C((unint64_t)a2)) | 1);
  uint64_t v20 = (void *)sub_1000CAF58(v12, v13, v14, v15, v16, v17, v18, v19);
  if (sub_100086568(v20, a2, 0, *(_DWORD *)(v10 + 780), v11, 0LL) == 1)
  {
    sub_1000CB038(v20, v12);
    return sub_10008D8C4(a1[66], a2, a3, v6, a5);
  }

  v32[1] = 0LL;
  v32[2] = 0LL;
  v32[0] = *(unsigned __int8 **)v10;
  uint64_t v30 = v12;
  if (!*(void *)(v10 + 736))
  {
    if (*(int *)(v10 + 32) >= 1)
    {
      uint64_t v26 = 0LL;
      int v28 = 0;
      while (1)
      {
        sub_10008B674(v10, v32);
        if (!sub_10008BBD0(v10, (uint64_t)v32, v20))
        {
          if ((int)v26 >= (int)v6)
          {
            uint64_t v26 = (v26 + 1);
          }

          else
          {
            *(_DWORD *)(a3 + 4LL * (int)v26) = v28;
            uint64_t v26 = (v26 + 1);
            if (!a5 && (_DWORD)v26 == (_DWORD)v6)
            {
              sub_1000CB038(v20, v30);
              return v6;
            }
          }
        }

        sub_10008BD18(v10, (uint64_t)v32, 1u);
        if (++v28 >= *(_DWORD *)(v10 + 32)) {
          goto LABEL_30;
        }
      }
    }

    goto LABEL_28;
  }

  uint64_t v31 = a3;
  int v22 = *(_DWORD *)(v10 + 732);
  LODWORD(i) = 0;
  int v24 = v22 - 1;
  if (v22 >= 1)
  {
    do
    {
      unsigned int v25 = (v24 + i) >> 1;
      sub_10008C2E0(v10, *(_DWORD *)(*(void *)(v10 + 736) + 4LL * v25), v32);
      sub_10008B674(v10, v32);
      else {
        LODWORD(i) = v25 + 1;
      }
    }

    while ((int)i <= v24);
    int v22 = *(_DWORD *)(v10 + 732);
  }

  a3 = v31;
  if ((int)i >= v22)
  {
LABEL_28:
    uint64_t v26 = 0LL;
    goto LABEL_30;
  }

  if (a5)
  {
    uint64_t v26 = 0LL;
    uint64_t i = (int)i;
    do
    {
      unsigned int v27 = *(_DWORD *)(*(void *)(v10 + 736) + 4 * i);
      sub_10008C2E0(v10, v27, v32);
      sub_10008B674(v10, v32);
      ++v26;
      ++i;
    }

    while (i < *(int *)(v10 + 732));
    a3 = v31;
  }

  else
  {
    uint64_t v26 = 0LL;
    for (uint64_t i = (int)i; i < *(int *)(v10 + 732); ++i)
    {
      unsigned int v29 = *(_DWORD *)(*(void *)(v10 + 736) + 4 * i);
      sub_10008C2E0(v10, v29, v32);
      sub_10008B674(v10, v32);
      if ((int)v26 >= (int)v6)
      {
        uint64_t v26 = (v26 + 1);
      }

      else
      {
        *(_DWORD *)(v31 + 4LL * (int)v26) = v29;
        uint64_t v26 = (v26 + 1);
        if ((_DWORD)v26 == (_DWORD)v6) {
          return v6;
        }
      }
    }
  }

uint64_t sub_100087E10(uint64_t a1, unsigned int *a2)
{
  return sub_100092110(*(void *)(a1 + 528), a2);
}

uint64_t sub_100087E18(uint64_t a1)
{
  return *(unsigned int *)(a1 + 512);
}

uint64_t sub_100087E20(uint64_t a1)
{
  return *(unsigned int *)(a1 + 516);
}

void *sub_100087E28( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(int *)(a1 + 512) + 1LL;
  uint64_t v12 = *(int *)(a1 + 516) + 1LL;
  uint64_t v13 = *(void *)(a1 + 480);
  v42[1] = 0LL;
  v42[2] = 0LL;
  char v41 = 0;
  char v14 = *(_DWORD *)(v13 + 696);
  int v15 = a2 & ~(-1 << v14);
  v42[0] = (unsigned __int8 *)(*(void *)v13 + *(int *)(*(void *)(v13 + 16) + 4LL * (int)(a2 >> v14)));
  int v16 = *(_DWORD *)(v13 + 776);
  if (v16 == 4) {
    int v16 = 3;
  }
  int v40 = v16;
  uint64_t v17 = (char *)sub_1000CAF58((4 * v11) | 1, a2, a3, a4, a5, a6, a7, a8);
  for (uint64_t i = (char *)sub_1000CAF58((4 * v11) | 1, v18, v19, v20, v21, v22, v23, v24); v15; --v15)
  {
    sub_10008B8C0(v13, v42, (uint64_t)v17, i, &v41);
    sub_10008BD18(v13, (uint64_t)v42, 0);
  }

  sub_10008B8C0(v13, v42, (uint64_t)v17, i, &v41);
  if (*(_DWORD *)(v13 + 832))
  {
    if (v41 != 16)
    {
      int v36 = sub_1000C88E4((unint64_t)v17);
      sub_100086BF0(a3, v17, v36 + 1, v41, *(_DWORD *)(v13 + 776), 0LL);
      goto LABEL_13;
    }

    int v26 = v40;
    unsigned int v27 = i;
  }

  else
  {
    int v26 = v40;
    unsigned int v27 = v17;
  }

  sub_1000BE124(v26, v27, v11, a3);
LABEL_13:
  uint64_t v37 = 4 * v12;
  uint64_t v38 = (char *)sub_1000CAF58(v37, v29, v30, v31, v32, v33, v34, v35);
  sub_10008BC84(v13, (uint64_t)v42, v38);
  int v39 = sub_1000C88E4((unint64_t)v38);
  sub_100086BF0(a4, v38, v39 + 1, 1, *(_DWORD *)(*(void *)(a1 + 480) + 780LL), *(void *)(a1 + 488) + 784LL);
  sub_1000CB038(v38, v37);
  sub_1000CB038(i, (4 * v11) | 1);
  return sub_1000CB038(v17, (4 * v11) | 1);
}

void *sub_100088040( void *result, unsigned int *a2, int a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 >= 1)
  {
    int v8 = (uint64_t *)a5;
    uint64_t v11 = (uint64_t)result;
    uint64_t v12 = a3;
    do
    {
      unsigned int v14 = *a2++;
      uint64_t v13 = v14;
      uint64_t v16 = *a4++;
      uint64_t v15 = v16;
      uint64_t v17 = *v8++;
      uint64_t result = sub_100087E28(v11, v13, v15, v17, a5, a6, a7, a8);
      --v12;
    }

    while (v12);
  }

  return result;
}

uint64_t sub_1000880A0(uint64_t a1, int a2, int a3, __int16 *a4)
{
  return sub_100089DB4(a1, a2, a3, a4, 0LL, 0, 0, 0);
}

uint64_t sub_1000880B4(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6, int a7)
{
  return sub_100089DB4(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t sub_1000880C0(uint64_t a1, int a2, int a3, unint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v10 = (__int16 *)a4;
  uint64_t v12 = *(void *)(a1 + 480);
  int v13 = *(_DWORD *)(v12 + 776);
  int __n = a3;
  uint64_t v14 = (int)((4 * sub_1000CC52C(a4)) | 1);
  uint64_t v22 = (unsigned __int8 *)sub_1000CAF58(v14, v15, v16, v17, v18, v19, v20, v21);
  int v23 = (4 * __n) | 1;
  if (v13 == 4)
  {
    int v13 = 3;
    sub_1000BE0C8(3, v10, a3, v23, (uint64_t)v22);
  }

  else if (sub_1000BE0C8(v13, v10, a3, v23, (uint64_t)v22) == 2)
  {
    sub_1000CB038(v22, v14);
    return sub_100091444(*(void *)(a1 + 528), a2, a3, v10, a5, a6);
  }

  int v82 = a7;
  sub_1000C88E4((unint64_t)v22);
  uint64_t v25 = v14;
  sub_1000BE078(v13, v10, v14, (uint64_t)v22);
  uint64_t v89 = 0LL;
  uint64_t v90 = 0LL;
  memset(v88, 0, sizeof(v88));
  unsigned __int8 __n_7 = 0;
  uint64_t v33 = (_BYTE *)sub_1000CAF58(v14, v26, v27, v28, v29, v30, v31, v32);
  sub_100086568(v33, (unsigned __int16 *)v10, *(_DWORD *)(v12 + 832), *(_DWORD *)(v12 + 776), 0LL, &__n);
  int v79 = a3;
  uint64_t v80 = a5;
  int v81 = a6;
  int8x8_t v83 = v22;
  if (*(_DWORD *)(v12 + 832))
  {
    int v41 = sub_100086428((uint64_t)v10);
  }

  else
  {
    a2 = 0;
    int v41 = 128;
  }

  int v42 = (void *)sub_1000CAF58(v14, v34, v35, v36, v37, v38, v39, v40);
  memcpy(v42, v33, __n);
  *((_BYTE *)v42 + __n) = 0;
  uint64_t v90 = 0LL;
  HIDWORD(v89) = 0;
  int v78 = v41;
  unsigned int v43 = sub_10008C34C(a1, (int *)&v89, v88, (unsigned __int8 *)v42, (unsigned __int8 *)v42, v41);
  sub_1000CB038(v42, v14);
  uint64_t v44 = (int)(sub_100082BA4(a1) + 1);
  __int128 v52 = (unsigned __int8 *)sub_1000CAF58(v44, v45, v46, v47, v48, v49, v50, v51);
  int v60 = (unsigned __int8 *)sub_1000CAF58(v44, v53, v54, v55, v56, v57, v58, v59);
  uint64_t v61 = 0LL;
  if (v43 != 0xFFFFFF)
  {
    char v62 = *(_DWORD *)(v12 + 696);
    int v63 = -1 << v62;
    uint64_t v64 = *(void *)(v12 + 16);
    uint64_t v65 = *(void *)v12;
    uint64_t v66 = (unsigned __int8 *)(*(void *)v12 + *(int *)(v64 + 4LL * (int)(v43 >> v62)));
    v88[0] = v66;
    int v67 = (unsigned __int8 *)(v65 + *(int *)(v64 + 4LL * *(int *)(v12 + 632) - 4));
    int v68 = v43 & ~v63;
    if (v68)
    {
      do
      {
        sub_10008B8C0(v12, v88, (uint64_t)v52, v60, &__n_7);
        sub_10008BD18(v12, (uint64_t)v88, 0);
        --v68;
      }

      while (v68);
      uint64_t v66 = v88[0];
    }

    if (v66 >= v67)
    {
      uint64_t v61 = 0LL;
    }

    else
    {
      uint64_t v77 = v10;
      uint64_t v61 = 0LL;
      if (a2)
      {
        while (1)
        {
          while (1)
          {
            sub_10008B8C0(v12, v88, (uint64_t)v52, v60, &__n_7);
            int v69 = sub_1000C88E4((unint64_t)v52);
            int v71 = sub_1000C8928(v52, v33, v69, v70);
            if (v71 > 0) {
              goto LABEL_39;
            }
            uint64_t v72 = __n;
            if (v69 >= __n) {
              break;
            }
            ++v43;
            sub_10008BD18(v12, (uint64_t)v88, 0);
            if (v88[0] >= v67) {
              goto LABEL_39;
            }
          }

          if (v71)
          {
            uint64_t v10 = v77;
            goto LABEL_27;
          }

          if (__n_7 == 16) {
            goto LABEL_23;
          }
          if (v78 == 16) {
            break;
          }
          uint64_t v10 = v77;
          if ((__n_7 & v78) != 0)
          {
LABEL_26:
            *(_DWORD *)(v80 + 4LL * (int)v61) = v43;
            uint64_t v61 = (v61 + 1);
          }

uint64_t sub_1000885E0(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v2 + 32) <= a2) {
    return 0x7FFFLL;
  }
  else {
    return (unsigned __int16)sub_10008CAE4(v2, a2, 2);
  }
}

uint64_t sub_10008861C(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v2 + 32) <= a2) {
    return 0xFFFFLL;
  }
  else {
    return (unsigned __int16)sub_10008CAE4(v2, a2, 3);
  }
}

uint64_t sub_100088658(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v2 + 32) <= a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return sub_10008CAE4(v2, a2, 4);
  }
}

uint64_t sub_100088678(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v2 + 44) && *(_DWORD *)(v2 + 32) > a2) {
    return sub_10008CAE4(v2, a2, 5);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1000886A0(uint64_t a1, signed int a2)
{
  uint64_t v2 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v2 + 48) && *(_DWORD *)(v2 + 32) > a2) {
    return sub_10008CAE4(v2, a2, 6);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_1000886C8(uint64_t a1, int a2)
{
  if (*(_DWORD *)(*(void *)(a1 + 480) + 32LL) <= a2) {
    return sub_10008E8AC(*(void *)(a1 + 528), a2);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1000886E8(uint64_t a1)
{
  return sub_100091E28(*(void *)(a1 + 528));
}

uint64_t sub_1000886F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 524);
}

uint64_t sub_1000886F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 520);
}

uint64_t sub_100088700(uint64_t a1)
{
  return sub_100092194(*(void *)(a1 + 528));
}

uint64_t sub_100088708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *(int *)(a1 + 524);
  uint64_t v35 = 0LL;
  uint64_t v36 = 0LL;
  uint64_t v16 = sub_1000CB0B0();
  if ((int)a3 < 1)
  {
    uint64_t v22 = 0LL;
  }

  else
  {
    uint64_t v17 = 2 * v8;
    uint64_t v22 = (uint64_t *)sub_1000CAF58(8LL * a3, v9, v10, v11, v12, v13, v14, v15);
    uint64_t v23 = 0LL;
    uint64_t v24 = v17 + 2;
    do
      v22[v23++] = sub_1000CAF58(v24, v18, v19, v20, v21, v13, v14, v15);
    while (a3 != v23);
  }

  int v25 = sub_10008A0A0(a1, a2, v22, a3, 0LL, v13, v14, v15);
  else {
    int v29 = v25;
  }
  uint64_t v30 = sub_10008E094( *(void *)(a1 + 528),  a2,  (uint64_t)&v22[v29],  (a3 - v29),  (*(_DWORD *)(a1 + 524) + 1),  v26,  v27,  v28)
      + v25;
  else {
    a3 = v30;
  }
  sub_100092E58(*(void *)(a1 + 528), &v36, &v35);
  if ((int)a3 >= 1)
  {
    do
    {
      uint64_t v32 = *v22++;
      uint64_t v31 = (unsigned __int16 *)v32;
      uint64_t v33 = *a4++;
      sub_1000932D4( *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v36,  v35,  v31,  v33);
      --a3;
    }

    while (a3);
  }

  sub_1000CB094(v16);
  return v30;
}

uint64_t sub_100088840( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  signed int v10 = a3;
  unsigned int v13 = sub_10008A0A0(a1, a2, a4, a3, a5, a6, a7, a8);
  unsigned int v17 = v13;
  if (a5 && qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3892) && (int)v13 >= 1)
  {
    uint64_t v19 = *(void *)(a1 + 480);
    uint64_t v20 = (const __int16 *)(v19 + 728);
    if (v13 >= 8 && (v19 + 730 <= (unint64_t)a5 || v20 >= (const __int16 *)&a5[v13]))
    {
      uint16x4_t v29 = (uint16x4_t)vld1_dup_s16(v20);
      uint64_t v21 = v13 & 0xFFFFFFF8;
      v30.i64[0] = 0x100000001LL;
      v30.i64[1] = 0x100000001LL;
      int32x4_t v31 = (int32x4_t)vaddw_u16(v30, v29);
      v32.i64[0] = 0xFF000000FFLL;
      v32.i64[1] = 0xFF000000FFLL;
      uint64_t v33 = v21;
      uint64_t v34 = (int8x16_t *)a5;
      do
      {
        int32x4_t v35 = vmlaq_s32((int32x4_t)vandq_s8(v34[1], v32), v31, (int32x4_t)vshrq_n_u32((uint32x4_t)v34[1], 8uLL));
        *(int32x4_t *)uint64_t v34 = vmlaq_s32( (int32x4_t)vandq_s8(*v34, v32),  v31,  (int32x4_t)vshrq_n_u32(*(uint32x4_t *)v34, 8uLL));
        v34[1] = (int8x16_t)v35;
        v34 += 2;
        v33 -= 8LL;
      }

      while (v33);
      if (v21 == v13) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    uint64_t v22 = &a5[v21];
    uint64_t v23 = v13 - v21;
    do
    {
      *uint64_t v22 = (*v22 >> 8) + (*v22 >> 8) * *(unsigned __int16 *)v20 + *v22;
      ++v22;
      --v23;
    }

    while (v23);
  }

uint64_t sub_1000889B8( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, _DWORD *a5, int *a6, uint64_t a7, uint64_t a8)
{
  int v11 = a3;
  int v67 = 0LL;
  int v68 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v13 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v13 + 32) <= (int)a2)
  {
    uint64_t v20 = *(int *)(a1 + 524) + 1LL;
    uint64_t v65 = (void *)sub_1000CAF58(2 * v20, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    int v24 = sub_10008E094(*(void *)(a1 + 528), a2, (uint64_t)&v65, 1LL, v20, v21, v22, v23);
    if (v24 < 1)
    {
      int v34 = v24;
      uint64_t v25 = 0LL;
    }

    else
    {
      if (v11 < 1)
      {
        uint64_t v25 = 0LL;
      }

      else
      {
        *a4 = -1;
        *a5 = 0;
        uint64_t v25 = 1LL;
      }

      int v34 = 1;
    }

    sub_1000CB038(v65, 2 * v20);
    goto LABEL_69;
  }

  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
  sub_10008C2E0(v13, a2, &v67);
  sub_10008C00C(v13, (uint64_t)&v67, 1);
  if ((v69 & 0x200000000LL) == 0)
  {
    int v14 = *(_DWORD *)(v13 + 40);
    if (v14 < 1) {
      goto LABEL_68;
    }
    int v15 = v69;
    uint64_t v16 = v67;
    unint64_t v17 = (unint64_t)v68;
    uint64_t v18 = v13 + 376;
    if (*(__int16 *)(v13 + 752) != -1)
    {
      if ((_DWORD)v69)
      {
        int v15 = v69 - 1;
      }

      else
      {
        uint64_t v16 = v67 + 1;
        uint64_t v41 = *v67;
        if (*(_BYTE *)(v18 + v41) != 2)
        {
LABEL_33:
          unsigned int v47 = *v16++;
          uint64_t v46 = v47;
          if (*(_BYTE *)(v18 + v47) == 2)
          {
            uint64_t v48 = (unsigned __int16 *)(*(void *)(v13 + 104) + 2 * v46);
            uint64_t v49 = *v48;
            int v44 = v48[1] + ~(_DWORD)v49;
            unint64_t v17 = *(void *)(v13 + 88) + v49;
            uint64_t v45 = (unsigned __int8 *)(v17 + 1);
            if (*(_BYTE *)v17) {
              goto LABEL_35;
            }
          }

          else if ((_DWORD)v46)
          {
            goto LABEL_39;
          }

uint64_t sub_100088E64(uint64_t result, signed int a2, unsigned int a3, _DWORD *a4)
{
  uint64_t v4 = *(void *)(result + 480);
  *a4 = -1;
  if ((a3 & 0x80000000) != 0 || *(_DWORD *)(v4 + 32) <= a2) {
    return result;
  }
  uint64_t v46 = 0LL;
  unsigned int v47 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v44 = 0LL;
  uint64_t v45 = 0LL;
  sub_10008C2E0(v4, a2, &v46);
  uint64_t result = sub_10008C00C(v4, (uint64_t)&v46, 1);
  if ((v48 & 0x200000000LL) != 0)
  {
    uint64_t v12 = v4 + 376;
    uint64_t v13 = v46 + 1;
    uint64_t v14 = *v46;
    if (*(_BYTE *)(v4 + 376 + v14) == 2)
    {
      uint64_t v15 = *(void *)(v4 + 104);
      uint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v14);
      int v17 = *(unsigned __int16 *)(v15 + 2 * v14 + 2) + ~(_DWORD)v16;
      uint64_t v18 = (unsigned __int8 *)(*(void *)(v4 + 88) + v16);
      unsigned int v47 = v18 + 1;
      if (*v18 != 255) {
        goto LABEL_11;
      }
    }

    else
    {
      int v17 = v48;
      if ((_DWORD)v14 != 255)
      {
LABEL_11:
        LODWORD(v19) = 1;
        if (*(__int16 *)(v4 + 752) == -1)
        {
          if (a3) {
            return result;
          }
LABEL_27:
          HIDWORD(v45) = -1;
          unsigned int v27 = a3 + 1;
          do
          {
            uint64_t result = sub_10008B028(v4, &v44, &v46);
            --v27;
          }

          while (v27);
          unsigned int v28 = HIDWORD(v45);
          *a4 = HIDWORD(v45);
          if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 3892)) {
            *a4 = (v28 >> 8) + (v28 >> 8) * *(unsigned __int16 *)(v4 + 728) + v28;
          }
          return result;
        }

uint64_t sub_10008920C(uint64_t a1, int a2, uint64_t a3)
{
  return sub_10008E928(*(void *)(a1 + 528), a2, a3);
}

uint64_t sub_100089214( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10008EA44(*(void *)(a1 + 528), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10008921C(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  sub_100092E58(*(void *)(a1 + 528), &v8, &v7);
  return sub_1000932D4( *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v8,  v7,  a2,  a3);
}

unint64_t sub_100089280(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t result = sub_10009004C(*(void *)(a1 + 528), a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    sub_100092E58(*(void *)(a1 + 528), &v6, &v5);
    unint64_t result = sub_100099EE0((unint64_t)a2);
    if ((_DWORD)result) {
      return sub_100089A24(a1, a2) != 255
    }
          && sub_1000935F4( *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v6,  v5,  a2) != 0;
  }

  return result;
}

uint64_t sub_10008931C( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t *a4, uint64_t a5, int a6)
{
  uint64_t v37 = 0LL;
  uint64_t v38 = 0LL;
  uint64_t v35 = sub_1000CB0B0();
  uint64_t v9 = sub_100092E58(*(void *)(a1 + 528), &v38, &v37);
  uint64_t v36 = (unsigned __int16 **)sub_1000CAF58(8LL * (int)a5, v10, v11, v12, v13, v14, v15, v16);
  if ((int)a5 >= 1)
  {
    uint64_t v17 = a5;
    uint64_t v18 = v36;
    do
    {
      unint64_t v19 = (void *)*a4;
      int v20 = sub_100099EE0(*a4) + 1;
      unsigned int v28 = (unsigned __int16 *)sub_1000CAF58(2LL * v20, v21, v22, v23, v24, v25, v26, v27);
      *uint64_t v18 = v28;
      if (!sub_10009369C( *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 700LL),  v38,  v37,  v9,  (unsigned __int16 *)v19,  v28))
      {
        int v29 = sub_100091E94(*(void *)(a1 + 528), v20, v19);
        *unsigned int v28 = v29;
        if (v29 == 0xFFFF)
        {
          uint64_t v30 = 0xFFFFFFLL;
          goto LABEL_8;
        }

        v28[1] = -1;
      }

      ++v18;
      ++a4;
      --v17;
    }

    while (v17);
  }

  uint64_t v30 = sub_100089460(a1, a2, a3, a5, v36, a6, 0);
LABEL_8:
  sub_1000CB094(v35);
  return v30;
}

uint64_t sub_100089460( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 **a5, int a6, int a7)
{
  unsigned int v92 = 0;
  uint64_t v90 = 0LL;
  int8x8_t v91 = 0LL;
  uint64_t v89 = 0LL;
  uint64_t v14 = sub_1000CB0B0();
  if (!a3 || !*a3) {
    goto LABEL_49;
  }
  uint64_t v15 = *(int *)(a1 + 524) + 1LL;
  if ((_DWORD)a4 != 1
    || (*(unsigned __int16 *)(*(void *)(a1 + 480) + 752LL) != 0xFFFF ? (BOOL v16 = qword_1000FDCC0 == 0) : (BOOL v16 = 1), v16))
  {
    if (!qword_1000FDCC0) {
      goto LABEL_49;
    }
  }

  else if (*(_DWORD *)(qword_1000FDCC0 + 3920))
  {
    if (sub_100087AD4((void *)a1, a3, (uint64_t)&v92, 1LL, 0))
    {
      int8x8_t v91 = (unsigned __int16 *)sub_1000CAF58(2 * v15, v17, v18, v19, v20, v21, v22, v23);
      uint64_t v24 = a2;
      uint64_t v25 = v92;
      int v29 = sub_10008A0A0(a1, v92, (uint64_t *)&v91, 1LL, 0LL, v26, v27, v28);
      if (v29 >= 1) {
        int v33 = 1;
      }
      else {
        int v33 = v29;
      }
      uint64_t v34 = v25;
      a2 = v24;
      sub_10008E094( *(void *)(a1 + 528),  v34,  (uint64_t)&(&v91)[v33],  (1 - v33),  (*(_DWORD *)(a1 + 524) + 1),  v30,  v31,  v32);
      sub_100092E58(*(void *)(a1 + 528), &v90, &v89);
      if (sub_1000933B4( v91,  *a5,  *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v90,  v89))
      {
        a7 = 0;
        a5 = &v91;
      }
    }

    goto LABEL_49;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 3908))
  {
    float64x2_t v87 = a2;
    unsigned int v92 = sub_100082B9C(a1);
    if (v92 != 0xFFFFFF)
    {
      int v84 = a7;
      int v85 = a6;
      uint64_t v86 = a4;
      sub_100092E58(*(void *)(a1 + 528), &v90, &v89);
      int v35 = sub_100082D30(a1);
      unint64_t v50 = sub_1000CAF58(8LL * v35, v36, v37, v38, v39, v40, v41, v42);
      if (v35 < 1)
      {
        sub_100082D30(a1);
      }

      else
      {
        uint64_t v82 = v14;
        int8x8_t v83 = a3;
        uint64_t v51 = 0LL;
        uint64_t v52 = v35;
        do
        {
          *(void *)(v50 + v51) = sub_1000CAF58(2LL * (int)v15, v43, v44, v45, v46, v47, v48, v49);
          v51 += 8LL;
        }

        while (8LL * v35 != v51);
        sub_100082D30(a1);
        if ((int)a4 > 0)
        {
          unint64_t v53 = 0LL;
          uint64_t v88 = 8LL * a4;
          uint64_t v54 = a5;
          do
          {
            uint64_t v55 = &a5[v53];
            if (v53)
            {
              for (uint64_t i = 0LL; i != v52; ++i)
              {
                unsigned int v57 = (unsigned __int16 **)(v50 + 8 * i);
                if (sub_10009354C( *v57,  *v55,  *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v90,  v89))
                {
                  if (v54 == a5)
                  {
                    unint64_t v65 = sub_1000CAF58(v88, v58, v59, v60, v61, v62, v63, v64);
                    uint64_t v54 = (unsigned __int16 **)v65;
                    uint64_t v66 = 0LL;
                    if (v53 < 4) {
                      goto LABEL_52;
                    }
                    uint64_t v67 = 0LL;
                    unint64_t v68 = v53 & 0xFFFFFFFFFFFFFFFCLL;
                    do
                    {
                      __int128 v69 = *(_OWORD *)&a5[v67 + 2];
                      uint64_t v70 = (_OWORD *)(v65 + v67 * 8);
                      *uint64_t v70 = *(_OWORD *)&a5[v67];
                      v70[1] = v69;
                      v67 += 4LL;
                      v68 -= 4LL;
                    }

                    while (v68);
                    uint64_t v66 = v53 & 0x7FFFFFFFFFFFFFFCLL;
                    if (v53 != (v53 & 0x7FFFFFFFFFFFFFFCLL))
                    {
LABEL_52:
                      do
                      {
                        *(void *)(v65 + 8 * v66) = a5[v66];
                        ++v66;
                      }

                      while (v53 != v66);
                    }
                  }
                }

                else
                {
                  unsigned int v57 = &a5[v53];
                }

                v54[v53] = *v57;
              }
            }

            else
            {
              uint64_t v71 = v52;
              uint64_t v72 = (unsigned __int16 **)v50;
              do
              {
                if (sub_10009354C( *v72,  *v55,  *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v90,  v89))
                {
                  int v73 = v72;
                  if (v54 == a5)
                  {
                    uint64_t v54 = (unsigned __int16 **)sub_1000CAF58(v88, v74, v75, v76, v77, v78, v79, v80);
                    int v73 = v72;
                  }
                }

                else
                {
                  int v73 = a5;
                }

                *uint64_t v54 = *v73;
                ++v72;
                --v71;
              }

              while (v71);
            }

            ++v53;
          }

          while (v53 != v86);
          a5 = v54;
          a4 = v86;
        }

        uint64_t v14 = v82;
        a3 = v83;
      }

      a7 = v84;
      a6 = v85;
    }

    a2 = v87;
  }

uint64_t sub_100089878( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10008F898(*(void *)(a1 + 528), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100089880(uint64_t a1)
{
  return sub_10008FFB0(*(void *)(a1 + 528));
}

BOOL sub_100089888(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 480) + 32LL) <= a2 && sub_10008FFB8(*(void *)(a1 + 528), a2);
}

BOOL sub_1000898A8(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(void *)(a1 + 480) + 32LL) > a2 || sub_10008FFB8(*(void *)(a1 + 528), a2);
}

uint64_t sub_1000898C8( uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  else {
    int v11 = sub_10008A0A0(a1, a2, 0LL, 0LL, 0LL, a6, a7, a8);
  }
  return sub_100090100(*(void *)(a1 + 528), a2, a3, v11, (int *)(a1 + 524), (_DWORD *)(a1 + 520));
}

uint64_t sub_10008993C( uint64_t a1, uint64_t a2, int a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(*(void *)(a1 + 480) + 32LL) <= (int)a2)
  {
    uint64_t v12 = 0LL;
    if (a3 >= 0) {
      return sub_100090D48(*(void *)(a1 + 528), a2, a3, v12, a4, a6, a7, a8);
    }
  }

  else
  {
    uint64_t v12 = sub_10008A0A0(a1, a2, 0LL, 0LL, 0LL, a6, a7, a8);
  }

  return 0LL;
}

uint64_t sub_1000899D0(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 480) + 32LL);
  if (a2 == 0xFFFFFF)
  {
    if (v2 > 0) {
      return 0LL;
    }
  }

  else if (v2 - 1 > a2)
  {
    return (a2 + 1);
  }

  return sub_100092008(*(void *)(a1 + 528), a2);
}

BOOL sub_100089A10(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 480) + 864LL) != 0LL;
}

uint64_t sub_100089A24(uint64_t a1, unsigned __int16 *a2)
{
  if (!*(void *)(*(void *)(a1 + 480) + 864LL)) {
    return 2LL;
  }
  uint64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  sub_100092E58(*(void *)(a1 + 528), &v25, &v24);
  uint64_t v4 = 2LL
     * (int)(sub_1000935F4( *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v25,  v24,  a2)
           + 1);
  uint64_t v12 = (void *)sub_1000CAF58(v4, v5, v6, v7, v8, v9, v10, v11);
  sub_1000932D4( *(void *)(*(void *)(a1 + 480) + 712LL),  *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL),  v25,  v24,  a2,  (uint64_t)v12);
  unsigned int v13 = *(unsigned __int16 *)v12;
  if (v13 == 0xFFFF)
  {
LABEL_3:
    uint64_t v14 = 2LL;
  }

  else
  {
    uint64_t v16 = *(void *)(a1 + 480);
    int v17 = *(_DWORD *)(v16 + 880);
    uint64_t v18 = v12;
    while (1)
    {
      if (v17 > (int)v13)
      {
        uint64_t v20 = *(void *)(v16 + 864);
        uint64_t v14 = *(unsigned __int8 *)(v20 + v13);
        if ((_DWORD)v14 != 2) {
          break;
        }
      }

      unsigned int v19 = *((unsigned __int16 *)v18 + 1);
      uint64_t v18 = (void *)((char *)v18 + 2);
      unsigned int v13 = v19;
      if (v19 == 0xFFFF) {
        goto LABEL_3;
      }
    }

    uint64_t v21 = 2LL;
    while (1)
    {
      if (v17 > (int)v13)
      {
        int v22 = *(unsigned __int8 *)(v20 + v13);
        if (v22 != (_DWORD)v14 && v22 != 2) {
          break;
        }
      }

      unsigned int v13 = *(unsigned __int16 *)((char *)v18 + v21);
      v21 += 2LL;
      if (v13 == 0xFFFF) {
        goto LABEL_4;
      }
    }

    uint64_t v14 = 255LL;
  }

uint64_t sub_100089B6C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = sub_1000CB0B0();
  unint64_t v14 = sub_1000CAF58(8LL * (a3 + 1), v7, v8, v9, v10, v11, v12, v13);
  int v22 = (uint64_t *)v14;
  if ((a3 & 0x80000000) == 0)
  {
    uint64_t v23 = 2LL * *(int *)(a1 + 520) + 2;
    uint64_t v24 = (a3 + 1);
    uint64_t v25 = (unint64_t *)v14;
    do
    {
      *v25++ = sub_1000CAF58(v23, v15, v16, v17, v18, v19, v20, v21);
      --v24;
    }

    while (v24);
  }

  sub_100088708(a1, a2, (a3 + 1), v22);
  uint64_t v26 = (unsigned __int16 *)v22[a3];
  unsigned int v27 = *v26;
  if (v27 == 0xFFFF)
  {
LABEL_5:
    uint64_t v28 = 2LL;
  }

  else
  {
    uint64_t v30 = *(void *)(a1 + 480);
    int v31 = *(_DWORD *)(v30 + 880);
    while (1)
    {
      if (v31 > (int)v27)
      {
        uint64_t v33 = *(void *)(v30 + 864);
        uint64_t v28 = *(unsigned __int8 *)(v33 + v27);
        if ((_DWORD)v28 != 2) {
          break;
        }
      }

      unsigned int v32 = v26[1];
      ++v26;
      unsigned int v27 = v32;
      if (v32 == 0xFFFF) {
        goto LABEL_5;
      }
    }

    uint64_t v34 = 1LL;
    while (1)
    {
      if (v31 > (int)v27)
      {
        int v35 = *(unsigned __int8 *)(v33 + v27);
        if (v35 != (_DWORD)v28 && v35 != 2) {
          break;
        }
      }

      unsigned int v27 = v26[v34++];
      if (v27 == 0xFFFF) {
        goto LABEL_6;
      }
    }

    uint64_t v28 = 255LL;
  }

uint64_t sub_100089C98(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 480) + 756LL);
}

uint64_t sub_100089CA4(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 480) + 760LL);
}

uint64_t sub_100089CB0(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 480) + 764LL);
}

uint64_t sub_100089CBC(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 480) + 768LL);
}

uint64_t sub_100089CC8(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 480) + 708LL);
}

uint64_t sub_100089CD4(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(*(void *)(a1 + 480) + 728LL);
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2)
  {
    unsigned int v3 = sub_100092000(v2);
    else {
      return v1;
    }
  }

  return v1;
}

uint64_t sub_100089D0C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 480);
  else {
    return 0LL;
  }
}

BOOL sub_100089D34(uint64_t a1, uint64_t a2, char *a3)
{
  return sub_100092268(*(void *)(a1 + 528), a2, a3);
}

BOOL sub_100089D3C( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = sub_1000927E0(*(_DWORD **)(a1 + 528), a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    uint64_t v10 = *(_DWORD **)(a1 + 480);
    *(_DWORD *)(a1 + 512) = v10[159];
    *(_DWORD *)(a1 + 516) = v10[160];
    *(_DWORD *)(a1 + 524) = v10[161];
    *(_DWORD *)(a1 + 520) = v10[162];
    sub_10009219C( *(void *)(a1 + 528),  a1,  (_DWORD *)(a1 + 512),  (_DWORD *)(a1 + 516),  (_DWORD *)(a1 + 524),  (_DWORD *)(a1 + 520));
  }

  return v9;
}

uint64_t sub_100089DAC(uint64_t a1)
{
  return nullsub_1(*(void *)(a1 + 528));
}

uint64_t sub_100089DB4(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v12 = *(void *)(a1 + 480);
  int v13 = *(_DWORD *)(v12 + 776);
  int v14 = (4 * sub_1000CC52C((unint64_t)a4)) | 1;
  int v22 = (unsigned __int8 *)sub_1000CAF58(v14, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v30 = (unsigned __int8 *)sub_1000CAF58(v14, v23, v24, v25, v26, v27, v28, v29);
  if (v13 == 4) {
    int v31 = 3;
  }
  else {
    int v31 = v13;
  }
  if (sub_1000BE078(v31, a4, v14, (uint64_t)v22) == 2)
  {
    sub_1000CB038(v30, v14);
    sub_1000CB038(v22, v14);
    if (!a8) {
      return sub_1000919D8(*(void *)(a1 + 528), a2, a3, a4, a5, a6, a7);
    }
  }

  uint64_t v46 = v14;
  int v47 = a8;
  sub_100086568(v30, (unsigned __int16 *)a4, *(_DWORD *)(v12 + 832), v13, 0LL, 0LL);
  if (*(_DWORD *)(v12 + 832))
  {
    int v32 = sub_100086428((uint64_t)a4);
    int v33 = a2;
  }

  else
  {
    int v33 = 0;
    int v32 = 128;
  }

  memset(v53, 0, sizeof(v53));
  uint64_t v54 = 0LL;
  int v52 = v33;
  int v55 = v33;
  int v56 = a3;
  int v34 = sub_10008C34C(a1, (int *)&v54, v53, v22, v30, v32);
  uint64_t v35 = 0LL;
  int v36 = v47;
  if (v34 != 0xFFFFFF)
  {
    int v37 = v34;
    if (a7)
    {
      uint64_t v35 = 0LL;
      if (a6 <= 1) {
        int v38 = 1;
      }
      else {
        int v38 = a6;
      }
      uint64_t v39 = (v38 - 1);
      while (1)
      {
        if (v35 < a6) {
          *(_DWORD *)(a5 + 4 * v35) = v37;
        }
        if (v39 == v35) {
          break;
        }
        sub_10008BD18(v12, (uint64_t)v53, 0);
        int v40 = sub_10008CAC8(a1, (int *)&v54, (uint64_t)v53, v22, (uint64_t)v30, v32);
        v37 += v40;
        ++v35;
        if (!v40)
        {
          int v36 = v47;
          goto LABEL_25;
        }
      }

      uint64_t v35 = (v35 + 1);
      sub_1000CB038(v30, v46);
      sub_1000CB038(v22, v46);
      return v35;
    }

    uint64_t v35 = 0LL;
    do
    {
      if (v35 < a6) {
        *(_DWORD *)(a5 + 4 * v35) = v37;
      }
      ++v35;
      sub_10008BD18(v12, (uint64_t)v53, 0);
      int v42 = sub_10008CAC8(a1, (int *)&v54, (uint64_t)v53, v22, (uint64_t)v30, v32);
      v37 += v42;
    }

    while (v42);
  }

uint64_t sub_10008A0A0( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = 0LL;
  int v167 = 0;
  uint64_t v10 = *(void *)(a1 + 480);
  if (*(_DWORD *)(v10 + 32) > (int)a2)
  {
    int v11 = a4;
    unsigned int v13 = a2;
    int v14 = *(_DWORD *)(v10 + 776);
    uint64_t v171 = 0LL;
    int v170 = 0;
    uint64_t v169 = 0LL;
    char v168 = 0;
    int32x4_t v165 = 0LL;
    uint64_t v166 = 0LL;
    int32x4_t v164 = 0LL;
    uint64_t v15 = (_BYTE *)sub_1000CAF58(*(int *)(a1 + 512) + 1LL, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8);
    uint64_t v23 = (char *)sub_1000CAF58(*(int *)(a1 + 516) + 1LL, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v161 = (char *)sub_1000CAF58((4LL * *(int *)(a1 + 516)) | 1, v24, v25, v26, v27, v28, v29, v30);
    int v38 = (char *)sub_1000CAF58(*(int *)(a1 + 512) + 1LL, v31, v32, v33, v34, v35, v36, v37);
    int v39 = v11;
    int v159 = v14;
    if (v11)
    {
      char v40 = *(_DWORD *)(v10 + 696);
      signed int v41 = v13 >> v40;
      int v42 = v13 & ~(-1 << v40);
      int32x4_t v164 = (unsigned __int8 *)(*(void *)v10 + *(int *)(*(void *)(v10 + 16) + 4LL * v41));
    }

    else
    {
      sub_10008C2E0(v10, v13, &v164);
      int v42 = 0;
    }

    uint64_t v163 = a1;
    sub_10008B8C0(v10, &v164, (uint64_t)v15, v38, &v168);
    sub_10008BC84(v10, (uint64_t)&v164, v23);
    if (v42)
    {
      if (v11 > 0)
      {
        int v43 = 0;
        uint64_t v44 = v10 + 376;
        while (1)
        {
          if ((v166 & 0x200000000LL) == 0)
          {
            unsigned int v52 = 1;
            goto LABEL_18;
          }

          sub_10008AB2C(v10, *a3, &v167, (_DWORD *)&v171 + 1, &v164);
          if (SHIDWORD(v171) < 2) {
            goto LABEL_63;
          }
          int v53 = 0;
          uint64_t v54 = v164;
          int v55 = v165;
          int v56 = v166;
          int v57 = *(_DWORD *)(v10 + 704);
          int v58 = *(_DWORD *)(v10 + 40);
          int v59 = *(_DWORD *)(v10 + 692);
          do
          {
            if (v58 < 1)
            {
LABEL_27:
              if (v57 == 1) {
                goto LABEL_56;
              }
              goto LABEL_28;
            }

            if (v56)
            {
              int v61 = v56 - 1;
              if (v61) {
                goto LABEL_26;
              }
LABEL_43:
              ++v55;
              goto LABEL_44;
            }

            unsigned int v81 = *v54++;
            uint64_t v80 = v81;
            if (*(_BYTE *)(v44 + v81) == 2)
            {
              uint64_t v82 = (unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v80);
              uint64_t v83 = *v82;
              int v61 = v82[1] + ~(_DWORD)v83;
              int v55 = (unsigned __int8 *)(*(void *)(v10 + 88) + v83);
              if (v61)
              {
LABEL_26:
                int v56 = v61 - 1;
                v55 += 2;
                if (v58 == 1) {
                  goto LABEL_27;
                }
                goto LABEL_46;
              }

              goto LABEL_43;
            }

LABEL_44:
            unsigned int v85 = *v54++;
            uint64_t v84 = v85;
            if (*(_BYTE *)(v44 + v85) != 2)
            {
              if (v58 == 1) {
                goto LABEL_53;
              }
              goto LABEL_50;
            }

            uint64_t v86 = (unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v84);
            uint64_t v87 = *v86;
            int v56 = v86[1] + ~(_DWORD)v87;
            int v55 = (unsigned __int8 *)(*(void *)(v10 + 88) + v87 + 1);
            if (v58 == 1) {
              goto LABEL_27;
            }
LABEL_46:
            if (v56)
            {
              --v56;
              ++v55;
              if (v57 == 1) {
                goto LABEL_56;
              }
              goto LABEL_28;
            }

  sub_1000D0174(v3);
  return 0LL;
}

    uint64_t v134 = v10;
    ioDataSize[0] = 40;
    uint64_t v17 = LODWORD(inAQ[0]) != -1 && LODWORD(inAQ[0]) == v146;
    if ((void)v149) {
      uint64_t v18 = *(double *)&v150;
    }
    else {
      uint64_t v18 = -1.0;
    }
    Property = (uint64_t)inAudioFile[0];
    if (inAudioFile[0])
    {
      uint64_t v20 = v5;
      Property = AudioFileGetProperty(inAudioFile[0], 0x64666D74u, ioDataSize, &outPropertyData);
      if ((_DWORD)Property) {
        mSampleRate = -1.0;
      }
      else {
        mSampleRate = outPropertyData.mSampleRate;
      }
    }

    else
    {
      uint64_t v20 = v5;
      if (BYTE6(inAQ[0])) {
        mSampleRate = 8000.0;
      }
      else {
        mSampleRate = -1.0;
      }
    }

    uint64_t v22 = !v17;
    if (!cf[0]) {
      uint64_t v22 = 1;
    }
    if ((v22 & 1) != 0 || (Property = VSPreferencesCopySpokenLanguageIdentifier(Property)) == 0)
    {
      if (v17) {
        goto LABEL_77;
      }
    }

    else
    {
      uint64_t v23 = (const void *)Property;
      uint64_t v24 = CFStringCompare((CFStringRef)Property, (CFStringRef)cf[0], 0LL);
      CFRelease(v23);
      if (v24 == kCFCompareEqualTo) {
        goto LABEL_77;
      }
    }

    if ((void)v149)
    {
      if (*((void *)&v152 + 1)) {
        (*((void (**)(__int128 *))&v152 + 1))(&v149);
      }
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      *(void *)&uint64_t v149 = 0LL;
    }

    LODWORD(inAQ[0]) = -1;
    if (cf1[0])
    {
      CFRelease(cf1[0]);
      cf1[0] = 0LL;
    }

    Property = (uint64_t)v159[1];
    if (v159[1])
    {
      CFRelease(v159[1]);
      v159[1] = 0LL;
    }

LABEL_89:
      unsigned int v120 = *v46++;
      uint64_t v119 = v120;
      if (*(_BYTE *)(v48 + v120) != 2
        || (float64x2_t v121 = (unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v119),
            uint64_t v122 = *v121,
            int v51 = v121[1] + ~(_DWORD)v122,
            unint64_t v47 = *(void *)(v10 + 88) + v122,
            !v51))
      {
LABEL_93:
        unsigned int v125 = *v46++;
        unint64_t v47 = v125;
        if (*(_BYTE *)(v48 + v125) != 2)
        {
          int v158 = v49;
          uint64_t v108 = a5;
          if (v50 == 1) {
            goto LABEL_102;
          }
LABEL_98:
          uint64_t v129 = *v46;
          if (*(_BYTE *)(v48 + v129) != 2)
          {
LABEL_101:
            LODWORD(v47) = v47 | ((_DWORD)v129 << 8);
LABEL_102:
            if (v108)
            {
              int v109 = *(_DWORD *)(v10 + 668) + v47;
              goto LABEL_104;
            }

            goto LABEL_105;
          }

          float64x2_t v124 = (unsigned __int8 *)(*(void *)(v10 + 88) + *(unsigned __int16 *)(*(void *)(v10 + 104) + 2 * v129));
LABEL_100:
          LODWORD(v129) = *v124;
          goto LABEL_101;
        }

        uint64_t v126 = *(void *)(v10 + 104);
        uint64_t v127 = *(unsigned __int16 *)(v126 + 2 * v47);
        int v123 = *(unsigned __int16 *)(v126 + 2 * v47 + 2) + ~(_DWORD)v127;
        float64x2_t v128 = (unsigned __int8 *)(*(void *)(v10 + 88) + v127);
        float64x2_t v124 = v128 + 1;
        LODWORD(v47) = *v128;
        int v158 = v49;
        if (v50 != 1)
        {
LABEL_95:
          uint64_t v108 = a5;
          if (v123) {
            goto LABEL_100;
          }
          goto LABEL_98;
        }

uint64_t sub_10008AB2C(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, unsigned __int8 **a5)
{
  uint64_t v5 = a1 + 376;
  uint64_t v6 = *a5;
  uint64_t v7 = (uint64_t)a5[1];
  if (!a4)
  {
    int v15 = *((_DWORD *)a5 + 4);
    int v17 = *(_DWORD *)(a1 + 40);
    if (v17 > 0) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }

  uint64_t v8 = v6 + 1;
  uint64_t v9 = *v6;
  if (*(_BYTE *)(v5 + v9) != 2)
  {
    if ((_DWORD)v9 == 255) {
      goto LABEL_11;
    }
LABEL_9:
    int v15 = 0;
    *a4 = 1;
    goto LABEL_16;
  }

  uint64_t v10 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v9);
  uint64_t v11 = *v10;
  uint64_t v12 = (unsigned __int8 *)(*(void *)(a1 + 88) + v11);
  int v13 = *v12;
  uint64_t v7 = (uint64_t)(v12 + 1);
  if (v13 != 255) {
    goto LABEL_9;
  }
  int v14 = v10[1] + ~(_DWORD)v11;
  if (!v14)
  {
LABEL_11:
    uint64_t v8 = v6 + 2;
    uint64_t v18 = v6[1];
    if (*(_BYTE *)(v5 + v18) != 2)
    {
      int v15 = 0;
      v6 += 2;
      *a4 = v18;
      goto LABEL_16;
    }

    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v20 = *(unsigned __int16 *)(v19 + 2 * v18);
    int v15 = *(unsigned __int16 *)(v19 + 2 * v18 + 2) + ~(_DWORD)v20;
    uint64_t v7 = *(void *)(a1 + 88) + v20;
    uint64_t v16 = v7 + 1;
    goto LABEL_13;
  }

  int v15 = v14 - 1;
  uint64_t v16 = *(void *)(a1 + 88) + v11 + 2;
LABEL_13:
  int v21 = *(unsigned __int8 *)v7;
  uint64_t v6 = v8;
  uint64_t v7 = v16;
  *a4 = v21;
  if (*(__int16 *)(a1 + 752) == -1)
  {
LABEL_18:
    int v17 = *(_DWORD *)(a1 + 40);
    if (v17 > 0) {
      goto LABEL_19;
    }
    goto LABEL_27;
  }

uint64_t sub_10008B028(uint64_t result, _DWORD *a2, unsigned __int8 **a3)
{
  int v3 = *((_DWORD *)a3 + 4);
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v6 = result + 376;
  if (*(int *)(result + 40) >= 1)
  {
    if (v3)
    {
      int v7 = v3 - 1;
      unint64_t v8 = (unint64_t)(v5 + 1);
      a2[2] = *v5;
      if (v7) {
        goto LABEL_4;
      }
    }

    else
    {
      unsigned int v11 = *v4++;
      uint64_t v10 = v11;
      if (*(_BYTE *)(v6 + v11) != 2)
      {
        a2[2] = v10;
        unsigned int v17 = *v4++;
        unint64_t v8 = v17;
        if (*(_BYTE *)(v6 + v17) == 2)
        {
LABEL_10:
          uint64_t v15 = *(void *)(result + 104);
          uint64_t v16 = *(unsigned __int16 *)(v15 + 2 * v8);
          int v3 = *(unsigned __int16 *)(v15 + 2 * v8 + 2) + ~(_DWORD)v16;
          unint64_t v8 = *(void *)(result + 88) + v16;
          uint64_t v5 = (unsigned __int8 *)(v8 + 1);
          LODWORD(v8) = *(unsigned __int8 *)v8;
          if (*(_DWORD *)(result + 40) != 1) {
            goto LABEL_11;
          }
LABEL_21:
          int v9 = *(_DWORD *)(result + 668) + v8;
          goto LABEL_22;
        }

double sub_10008B290(uint64_t a1)
{
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  sub_1000C0EF8(*(void *)(a1 + 96));
  sub_1000C0EF8(*(void *)(a1 + 112));
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t sub_10008B2E4(uint64_t a1, int a2, unsigned __int8 *a3)
{
  switch(a2)
  {
    case 1:
      uint64_t v4 = a1 + 376;
      uint64_t v5 = a3 + 1;
      uint64_t v6 = *a3;
      if (*(_BYTE *)(a1 + 376 + v6) == 2)
      {
        int v7 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v6);
        uint64_t v8 = *v7;
        int v9 = (unsigned __int8 *)(*(void *)(a1 + 88) + v8);
        int v11 = *v9;
        uint64_t v10 = v9 + 1;
        if (v11 == 255)
        {
          int v12 = v7[1] + ~(_DWORD)v8;
          if (v12)
          {
            int v13 = v12 - 1;
            LODWORD(v14) = *v10;
            uint64_t v10 = (unsigned __int8 *)(*(void *)(a1 + 88) + v8 + 2);
            goto LABEL_19;
          }

          goto LABEL_15;
        }

uint64_t sub_10008B674(uint64_t result, unsigned __int8 **a2)
{
  uint64_t v2 = result + 120;
  int v3 = *a2;
  uint64_t v4 = *a2 + 1;
  *a2 = v4;
  uint64_t v5 = *v3;
  if (*(_BYTE *)(result + 120 + v5) == 2)
  {
    uint64_t v6 = *(void *)(result + 72);
    uint64_t v7 = *(unsigned __int16 *)(v6 + 2 * v5);
    int v8 = *(unsigned __int16 *)(v6 + 2 * v5 + 2) + ~(_DWORD)v7;
    int v9 = (unsigned __int8 *)(*(void *)(result + 56) + v7);
    unsigned int v11 = *v9;
    uint64_t v10 = v9 + 1;
    if (v11 >= 0x20) {
      goto LABEL_11;
    }
    goto LABEL_5;
  }

  uint64_t v10 = 0LL;
  int v8 = 0;
  if (v5 < 0x20)
  {
LABEL_5:
    int v12 = v4;
    goto LABEL_6;
  }

  do
  {
    while (1)
    {
LABEL_11:
      while (v8)
      {
        --v8;
        int v12 = v4;
        unsigned int v15 = *v10++;
        if (v15 <= 0x1F) {
          goto LABEL_6;
        }
      }

      int v12 = v4 + 1;
      *a2 = v4 + 1;
      uint64_t v16 = *v4;
      if (*(_BYTE *)(v2 + v16) != 2) {
        break;
      }
      uint64_t v17 = *(void *)(result + 72);
      uint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v16);
      int v8 = *(unsigned __int16 *)(v17 + 2 * v16 + 2) + ~(_DWORD)v18;
      unsigned int v19 = (unsigned __int8 *)(*(void *)(result + 56) + v18);
      unsigned int v20 = *v19;
      uint64_t v10 = v19 + 1;
      uint64_t v4 = v12;
      if (v20 <= 0x1F) {
        goto LABEL_6;
      }
    }

    int v8 = 0;
    ++v4;
  }

  while (v16 > 0x1F);
LABEL_6:
  if (!*(_DWORD *)(result + 832)) {
    goto LABEL_22;
  }
  if (v8)
  {
    --v8;
    int v13 = v12;
    int v14 = *v10++;
    if (v14 == 16) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }

  int v13 = v12 + 1;
  *a2 = v12 + 1;
  uint64_t v21 = *v12;
  if (*(_BYTE *)(v2 + v21) == 2)
  {
    uint64_t v22 = *(void *)(result + 72);
    uint64_t v23 = *(unsigned __int16 *)(v22 + 2 * v21);
    int v8 = *(unsigned __int16 *)(v22 + 2 * v21 + 2) + ~(_DWORD)v23;
    int v24 = (unsigned __int8 *)(*(void *)(result + 56) + v23);
    int v25 = *v24;
    uint64_t v10 = v24 + 1;
    if (v25 == 16) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }

  int v8 = 0;
  if ((_DWORD)v21 != 16)
  {
LABEL_21:
    int v12 = v13;
    goto LABEL_22;
  }

  do
  {
    while (1)
    {
LABEL_25:
      while (v8)
      {
        --v8;
        int v12 = v13;
        unsigned int v26 = *v10++;
        if (v26 <= 0x1F) {
          goto LABEL_22;
        }
      }

      int v12 = v13 + 1;
      *a2 = v13 + 1;
      uint64_t v27 = *v13;
      if (*(_BYTE *)(v2 + v27) != 2) {
        break;
      }
      uint64_t v28 = *(void *)(result + 72);
      uint64_t v29 = *(unsigned __int16 *)(v28 + 2 * v27);
      int v8 = *(unsigned __int16 *)(v28 + 2 * v27 + 2) + ~(_DWORD)v29;
      unsigned int v30 = (unsigned __int8 *)(*(void *)(result + 56) + v29);
      unsigned int v31 = *v30;
      uint64_t v10 = v30 + 1;
      int v13 = v12;
      if (v31 <= 0x1F) {
        goto LABEL_22;
      }
    }

    int v8 = 0;
    ++v13;
  }

  while (v27 > 0x1F);
LABEL_22:
  if (v8)
  {
    *((_BYTE *)a2 + 20) = *v10;
    a2[1] = v10 + 1;
    *((_DWORD *)a2 + 4) = v8 - 1;
  }

  else
  {
    *a2 = v12 + 1;
    uint64_t v32 = *v12;
    if (*(_BYTE *)(v2 + v32) == 2)
    {
      uint64_t v33 = (unsigned __int16 *)(*(void *)(result + 72) + 2 * v32);
      uint64_t v34 = *v33;
      LODWORD(v33) = v33[1] + ~(_DWORD)v34;
      uint64_t v35 = (_BYTE *)(*(void *)(result + 56) + v34);
      *((_BYTE *)a2 + 20) = *v35;
      a2[1] = v35 + 1;
      *((_DWORD *)a2 + 4) = (_DWORD)v33;
    }

    else
    {
      *((_BYTE *)a2 + 20) = v32;
      a2[1] = v10;
      *((_DWORD *)a2 + 4) = 0;
    }
  }

  return result;
}

uint64_t sub_10008B8C0(uint64_t result, unsigned __int8 **a2, uint64_t a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v5 = result + 120;
  uint64_t v6 = *a2;
  uint64_t v7 = **a2;
  if (*(_BYTE *)(result + 120 + v7) == 2)
  {
    uint64_t v8 = *(void *)(result + 72);
    uint64_t v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    int v10 = *(unsigned __int16 *)(v8 + 2 * v7 + 2) + ~(_DWORD)v9;
    unsigned int v11 = (unsigned __int8 *)(*(void *)(result + 56) + v9);
    unsigned int v13 = *v11;
    int v12 = v11 + 1;
    LODWORD(v7) = v13;
    if (v13 < 0x20) {
      goto LABEL_12;
    }
  }

  else
  {
    int v12 = 0LL;
    int v10 = 0;
  }

  int v14 = *a2 + 1;
  do
  {
    while (1)
    {
      while (v10)
      {
        --v10;
        unsigned int v15 = *v12++;
        LODWORD(v7) = v15;
        if (v15 <= 0x1F) {
          goto LABEL_12;
        }
      }

      unsigned int v16 = *v14++;
      uint64_t v7 = v16;
      if (*(_BYTE *)(v5 + v16) != 2) {
        break;
      }
      uint64_t v17 = *(void *)(result + 72);
      uint64_t v18 = *(unsigned __int16 *)(v17 + 2 * v7);
      int v10 = *(unsigned __int16 *)(v17 + 2 * v7 + 2) + ~(_DWORD)v18;
      unsigned int v19 = (unsigned __int8 *)(*(void *)(result + 56) + v18);
      unsigned int v20 = *v19;
      int v12 = v19 + 1;
      LODWORD(v7) = v20;
      if (v20 <= 0x1F) {
        goto LABEL_12;
      }
    }

    int v10 = 0;
  }

  while (v7 > 0x1F);
LABEL_12:
  uint64_t v21 = (_BYTE *)(a3 + v7);
  ++*a2;
  uint64_t v22 = *v6;
  if (*(_BYTE *)(v5 + v22) == 2)
  {
    uint64_t v23 = *(void *)(result + 72);
    uint64_t v24 = *(unsigned __int16 *)(v23 + 2 * v22);
    int v25 = *(unsigned __int16 *)(v23 + 2 * v22 + 2) + ~(_DWORD)v24;
    unsigned int v26 = (unsigned __int8 *)(*(void *)(result + 56) + v24);
    unsigned int v27 = *v26;
    int v12 = v26 + 1;
    LOBYTE(v22) = v27;
    if (v27 >= 0x20) {
      goto LABEL_18;
    }
  }

  else
  {
    int v25 = 0;
    if (v22 >= 0x20)
    {
      do
      {
        while (1)
        {
LABEL_18:
          while (1)
          {
            *v21++ = v22;
            if (!v25) {
              break;
            }
            --v25;
            unsigned int v28 = *v12++;
            LOBYTE(v22) = v28;
            if (v28 <= 0x1F) {
              goto LABEL_23;
            }
          }

          uint64_t v29 = (*a2)++;
          uint64_t v22 = *v29;
          if (*(_BYTE *)(v5 + v22) != 2) {
            break;
          }
          uint64_t v30 = *(void *)(result + 72);
          uint64_t v31 = *(unsigned __int16 *)(v30 + 2 * v22);
          int v25 = *(unsigned __int16 *)(v30 + 2 * v22 + 2) + ~(_DWORD)v31;
          uint64_t v32 = (unsigned __int8 *)(*(void *)(result + 56) + v31);
          unsigned int v33 = *v32;
          int v12 = v32 + 1;
          LOBYTE(v22) = v33;
          if (v33 <= 0x1F) {
            goto LABEL_23;
          }
        }

        int v25 = 0;
      }

      while (v22 > 0x1F);
    }
  }

uint64_t sub_10008BBD0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 16);
    uint64_t v5 = *(unsigned __int8 **)(a2 + 8);
    uint64_t v6 = *a3 == 0;
    while (1)
    {
      if (v4)
      {
        --v4;
        int v8 = *v5++;
        LODWORD(v7) = v8;
        if (!(_DWORD)v6) {
          goto LABEL_14;
        }
      }

      else
      {
        uint64_t v9 = (unsigned __int8 *)(*(void *)a2)++;
        uint64_t v7 = *v9;
        if (*(_BYTE *)(a1 + 120 + v7) == 2)
        {
          uint64_t v10 = *(void *)(a1 + 72);
          uint64_t v11 = *(unsigned __int16 *)(v10 + 2 * v7);
          int v4 = *(unsigned __int16 *)(v10 + 2 * v7 + 2) + ~(_DWORD)v11;
          int v12 = (unsigned __int8 *)(*(void *)(a1 + 56) + v11);
          int v13 = *v12;
          uint64_t v5 = v12 + 1;
          LODWORD(v7) = v13;
          if (!(_DWORD)v6) {
            goto LABEL_14;
          }
        }

        else
        {
          int v4 = 0;
          if (!(_DWORD)v6)
          {
LABEL_14:
            int v14 = *a3++;
            uint64_t v6 = (v7 - v14);
          }
        }
      }

      if (!(_DWORD)v7)
      {
        *(_DWORD *)(a2 + 16) = 0;
        return v6;
      }
    }
  }

  if (*a3) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10008BC84(uint64_t result, uint64_t a2, _BYTE *a3)
{
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    int v3 = *(_DWORD *)(a2 + 16);
    int v4 = *(unsigned __int8 **)(a2 + 8);
    do
    {
      while (1)
      {
        while (v3)
        {
          --v3;
          int v5 = *v4++;
          *a3++ = v5;
          if (!v5) {
            goto LABEL_10;
          }
        }

        uint64_t v6 = (unsigned __int8 *)(*(void *)a2)++;
        uint64_t v7 = *v6;
        if (*(_BYTE *)(result + 120 + v7) != 2) {
          break;
        }
        uint64_t v8 = *(void *)(result + 72);
        uint64_t v9 = *(unsigned __int16 *)(v8 + 2 * v7);
        int v3 = *(unsigned __int16 *)(v8 + 2 * v7 + 2) + ~(_DWORD)v9;
        uint64_t v10 = (unsigned __int8 *)(*(void *)(result + 56) + v9);
        int v11 = *v10;
        int v4 = v10 + 1;
        *a3++ = v11;
        if (!v11) {
          goto LABEL_10;
        }
      }

      int v3 = 0;
      *a3++ = v7;
    }

    while ((_DWORD)v7);
LABEL_10:
    *(_DWORD *)(a2 + 16) = 0;
  }

  else
  {
    *a3 = 0;
  }

  return result;
}

uint64_t sub_10008BD18(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  if ((a3 & 0x80000000) != 0)
  {
    double result = sub_10008B674(result, (unsigned __int8 **)a2);
LABEL_6:
    char v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 1) != 0)
    {
      int v7 = *(_DWORD *)(a2 + 16);
      uint64_t v8 = *(unsigned __int8 **)(a2 + 8);
      do
      {
        while (1)
        {
          while (v7)
          {
            --v7;
            if (!*v8++) {
              goto LABEL_14;
            }
          }

          uint64_t v10 = (unsigned __int8 *)(*(void *)a2)++;
          uint64_t v11 = *v10;
          if (*(_BYTE *)(v4 + 120 + v11) != 2) {
            break;
          }
          uint64_t v12 = *(void *)(v4 + 72);
          uint64_t v13 = *(unsigned __int16 *)(v12 + 2 * v11);
          int v7 = *(unsigned __int16 *)(v12 + 2 * v11 + 2) + ~(_DWORD)v13;
          int v14 = (unsigned __int8 *)(*(void *)(v4 + 56) + v13);
          int v15 = *v14;
          uint64_t v8 = v14 + 1;
          if (!v15) {
            goto LABEL_14;
          }
        }

        int v7 = 0;
      }

      while ((_DWORD)v11);
LABEL_14:
      *(_DWORD *)(a2 + 16) = 0;
    }

    goto LABEL_15;
  }

  int v5 = a3;
  if (!a3) {
    goto LABEL_6;
  }
  if (a3 != 1)
  {
    if (a3 >= 7) {
      return result;
    }
    goto LABEL_39;
  }

  char v6 = *(_BYTE *)(a2 + 20);
LABEL_15:
  if ((v6 & 2) != 0)
  {
    int v5 = 1;
    goto LABEL_39;
  }

  uint64_t v16 = v4 + 376;
  if (*(__int16 *)(v4 + 752) != -1)
  {
    uint64_t v17 = (unsigned __int8 *)(*(void *)a2)++;
    uint64_t v18 = *v17;
    if (*(_BYTE *)(v16 + v18) == 2)
    {
      unsigned int v19 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v18);
      uint64_t v20 = *v19;
      *(_DWORD *)(a2 + 16) = v19[1] + ~(_DWORD)v20;
      *(void *)(a2 + 8) = *(void *)(v4 + 88) + v20 + 1;
    }
  }

  int v21 = *(_DWORD *)(a2 + 16);
  if (!v21)
  {
    uint64_t v24 = (unsigned __int8 *)(*(void *)a2)++;
    uint64_t v25 = *v24;
    if (*(_BYTE *)(v16 + v25) != 2) {
      goto LABEL_30;
    }
    unsigned int v26 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v25);
    uint64_t v27 = *v26;
    int v22 = v26[1] + ~(_DWORD)v27;
    *(_DWORD *)(a2 + 16) = v22;
    *(void *)(a2 + 8) = *(void *)(v4 + 88) + v27 + 1;
    if (!v22) {
      goto LABEL_30;
    }
LABEL_28:
    int v28 = v22 - 1;
    uint64_t v29 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = v28;
    *(void *)(a2 + 8) = v29 + 1;
    if (*(_DWORD *)(v4 + 40) == 1) {
      goto LABEL_38;
    }
    goto LABEL_32;
  }

  int v22 = v21 - 1;
  uint64_t v23 = *(void *)(a2 + 8);
  *(_DWORD *)(a2 + 16) = v22;
  *(void *)(a2 + 8) = v23 + 1;
  if (v22) {
    goto LABEL_28;
  }
LABEL_30:
  uint64_t v30 = (unsigned __int8 *)(*(void *)a2)++;
  uint64_t v31 = *v30;
  if (*(_BYTE *)(v16 + v31) != 2)
  {
    if (*(_DWORD *)(v4 + 40) == 1) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }

  uint64_t v32 = (unsigned __int16 *)(*(void *)(v4 + 104) + 2 * v31);
  uint64_t v33 = *v32;
  int v28 = v32[1] + ~(_DWORD)v33;
  *(_DWORD *)(a2 + 16) = v28;
  *(void *)(a2 + 8) = *(void *)(v4 + 88) + v33 + 1;
  if (*(_DWORD *)(v4 + 40) == 1) {
    goto LABEL_38;
  }
LABEL_32:
  if (v28)
  {
    int v34 = v28 - 1;
    uint64_t v36 = (void *)(a2 + 8);
    uint64_t v35 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 16) = v34;
LABEL_37:
    *uint64_t v36 = v35 + 1;
    goto LABEL_38;
  }

uint64_t sub_10008C00C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_10008B674(a1, (unsigned __int8 **)a2);
  if (!a3) {
    return result;
  }
  unsigned int v7 = *(unsigned __int8 *)(a2 + 20);
  if ((v7 & 1) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
    do
    {
      while (1)
      {
        while (v8)
        {
          --v8;
          if (!*v9++) {
            goto LABEL_10;
          }
        }

        uint64_t v11 = (unsigned __int8 *)(*(void *)a2)++;
        uint64_t v12 = *v11;
        if (*(_BYTE *)(a1 + 120 + v12) != 2) {
          break;
        }
        uint64_t v13 = *(void *)(a1 + 72);
        uint64_t v14 = *(unsigned __int16 *)(v13 + 2 * v12);
        int v8 = *(unsigned __int16 *)(v13 + 2 * v12 + 2) + ~(_DWORD)v14;
        int v15 = (unsigned __int8 *)(*(void *)(a1 + 56) + v14);
        int v16 = *v15;
        uint64_t v9 = v15 + 1;
        if (!v16) {
          goto LABEL_10;
        }
      }

      int v8 = 0;
    }

    while ((_DWORD)v12);
LABEL_10:
    *(_DWORD *)(a2 + 16) = 0;
  }

  int v17 = 1;
  if (a3 >= 2 && (v7 & 2) == 0)
  {
    uint64_t v18 = a1 + 376;
    if (*(__int16 *)(a1 + 752) != -1)
    {
      unsigned int v19 = (unsigned __int8 *)(*(void *)a2)++;
      uint64_t v20 = *v19;
      if (*(_BYTE *)(v18 + v20) == 2)
      {
        int v21 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v20);
        uint64_t v22 = *v21;
        *(_DWORD *)(a2 + 16) = v21[1] + ~(_DWORD)v22;
        *(void *)(a2 + 8) = *(void *)(a1 + 88) + v22 + 1;
      }
    }

    int v23 = *(_DWORD *)(a2 + 16);
    if (v23)
    {
      int v24 = v23 - 1;
      uint64_t v25 = *(void *)(a2 + 8);
      *(_DWORD *)(a2 + 16) = v24;
      *(void *)(a2 + 8) = v25 + 1;
      if (!v24)
      {
LABEL_24:
        uint64_t v32 = (unsigned __int8 *)(*(void *)a2)++;
        uint64_t v33 = *v32;
        if (*(_BYTE *)(v18 + v33) != 2)
        {
          if (*(_DWORD *)(a1 + 40) == 1) {
            goto LABEL_32;
          }
          goto LABEL_29;
        }

        int v34 = (unsigned __int16 *)(*(void *)(a1 + 104) + 2 * v33);
        uint64_t v35 = *v34;
        int v30 = v34[1] + ~(_DWORD)v35;
        *(_DWORD *)(a2 + 16) = v30;
        *(void *)(a2 + 8) = *(void *)(a1 + 88) + v35 + 1;
        if (*(_DWORD *)(a1 + 40) == 1) {
          goto LABEL_32;
        }
LABEL_26:
        if (v30)
        {
          int v36 = v30 - 1;
          uint64_t v38 = (void *)(a2 + 8);
          uint64_t v37 = *(void *)(a2 + 8);
          *(_DWORD *)(a2 + 16) = v36;
LABEL_31:
          *uint64_t v38 = v37 + 1;
          goto LABEL_32;
        }

uint64_t sub_10008C2E0(uint64_t result, unsigned int a2, void *a3)
{
  char v3 = *(_DWORD *)(result + 696);
  *a3 = *(void *)result + *(int *)(*(void *)(result + 16) + 4LL * (int)(a2 >> v3));
  int v4 = a2 & ~(-1 << v3);
  if (v4)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = sub_10008BD18(v6, (uint64_t)a3, 0xFFFFFFFF);
      --v4;
    }

    while (v4);
  }

  return result;
}

uint64_t sub_10008C34C(uint64_t a1, int *a2, void *a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  uint64_t v12 = *(uint64_t **)(a1 + 480);
  int v13 = sub_1000C88E4((unint64_t)a4);
  unsigned int v14 = *a5;
  if (*a5)
  {
    int v15 = a5 + 1;
    while (v14 >= 0x20)
    {
      unsigned int v16 = *v15++;
      unsigned int v14 = v16;
      if (!v16) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    int v17 = *((_DWORD *)v12 + 158);
    int v18 = v17 - 2;
    if (v17 <= 2)
    {
      int v20 = 0;
      uint64_t v19 = *v12;
    }

    else
    {
      uint64_t v19 = *v12;
      if (v13 < 1)
      {
        int v20 = 0;
      }

      else
      {
        int v20 = 0;
        do
        {
          int v22 = 0;
          int v23 = 0LL;
          if (v18 + v20 + 1 >= 0) {
            int v24 = v18 + v20 + 1;
          }
          else {
            int v24 = v18 + v20 + 2;
          }
          int v25 = v24 >> 1;
          unsigned int v26 = (unsigned __int8 *)(v19 + *(int *)(v12[2] + 4LL * v25));
          int v27 = v13;
          int v28 = a5;
          do
          {
            if (v22)
            {
              --v22;
              int v30 = *v23++;
              LODWORD(v29) = v30;
              unsigned int v31 = *v28;
              if (v31 < 0x20) {
                goto LABEL_8;
              }
            }

            else
            {
              unsigned int v32 = *v26++;
              uint64_t v29 = v32;
              if (*((_BYTE *)v12 + v32 + 120) == 2)
              {
                uint64_t v33 = (unsigned __int16 *)(v12[9] + 2 * v29);
                uint64_t v29 = *v33;
                int v22 = v33[1] + ~(_DWORD)v29;
                int v34 = (unsigned __int8 *)(v12[7] + v29);
                int v35 = *v34;
                int v23 = v34 + 1;
                LODWORD(v29) = v35;
                unsigned int v31 = *v28;
                if (v31 < 0x20) {
                  goto LABEL_8;
                }
              }

              else
              {
                int v22 = 0;
                unsigned int v31 = *v28;
                if (v31 < 0x20)
                {
LABEL_8:
                  int v21 = 1;
                  goto LABEL_9;
                }
              }
            }

            int v21 = v29 - v31;
            if (v21) {
              goto LABEL_9;
            }
            ++v28;
            --v27;
          }

          while (v27);
          int v21 = 0;
LABEL_9:
          if (v21 >= 0) {
            int v18 = v25 - 1;
          }
          else {
            int v20 = v25;
          }
        }

        while (v20 < v18);
      }
    }

    *a3 = v19 + *(int *)(v12[2] + 4LL * v20);
    int v36 = sub_10008C524(*(void *)(a1 + 480), a2, (uint64_t)a3, a4, (uint64_t)a5, a6);
    if ((v36 & 0x80000000) == 0) {
      return ((v20 << *((_DWORD *)v12 + 174)) + v36);
    }
  }

  return 0xFFFFFFLL;
}

uint64_t sub_10008C524(uint64_t a1, int *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unint64_t v6 = *(void *)a1 + *(int *)(*(void *)(a1 + 16) + 4LL * *(int *)(a1 + 632) - 4);
  unsigned int v7 = *(unsigned __int8 **)a3;
  if (*(void *)a3 >= v6) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = 0;
  uint64_t v15 = a1 + 120;
  uint64_t v16 = a5 + 1;
  while (1)
  {
    int v18 = v7 + 1;
    uint64_t v19 = *v7;
    if (*(_BYTE *)(v15 + v19) == 2)
    {
      int v20 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v19);
      uint64_t v19 = *v20;
      int v21 = v20[1] + ~(_DWORD)v19;
      int v22 = (unsigned __int8 *)(*(void *)(a1 + 56) + v19);
      unsigned int v24 = *v22;
      int v23 = v22 + 1;
      LODWORD(v19) = v24;
      int v25 = v7 + 1;
      if (v24 >= 0x20) {
        goto LABEL_13;
      }
    }

    else
    {
      int v21 = 0;
      int v23 = 0LL;
      int v25 = v7 + 1;
      if (v19 >= 0x20)
      {
        do
        {
          while (1)
          {
LABEL_13:
            while (v21)
            {
              --v21;
              unsigned int v26 = *v23++;
              LODWORD(v19) = v26;
              if (v26 <= 0x1F) {
                goto LABEL_18;
              }
            }

            unsigned int v27 = *v25++;
            uint64_t v19 = v27;
            if (*(_BYTE *)(v15 + v27) != 2) {
              break;
            }
            int v28 = (unsigned __int16 *)(*(void *)(a1 + 72) + 2 * v19);
            uint64_t v19 = *v28;
            int v21 = v28[1] + ~(_DWORD)v19;
            uint64_t v29 = (unsigned __int8 *)(*(void *)(a1 + 56) + v19);
            unsigned int v30 = *v29;
            int v23 = v29 + 1;
            LODWORD(v19) = v30;
            if (v30 <= 0x1F) {
              goto LABEL_18;
            }
          }

          int v21 = 0;
        }

        while (v19 > 0x1F);
      }
    }

uint64_t sub_10008CAC8(uint64_t a1, int *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  return sub_10008C524(*(void *)(a1 + 480), a2, a3, a4, a5, a6) + 1;
}

uint64_t sub_10008CAE4(uint64_t a1, unsigned int a2, int a3)
{
  v15[1] = 0LL;
  uint64_t v16 = 0LL;
  char v5 = *(_DWORD *)(a1 + 696);
  v15[0] = *(void *)a1 + *(int *)(*(void *)(a1 + 16) + 4LL * (int)(a2 >> v5));
  for (int i = a2 & ~(-1 << v5); i; --i)
    sub_10008BD18(a1, (uint64_t)v15, 0xFFFFFFFF);
  sub_10008C00C(a1, (uint64_t)v15, a3);
  if (((BYTE4(v16) >> a3) & 1) != 0)
  {
    int v7 = 0;
    switch(a3)
    {
      case 2:
        int v7 = *(_DWORD *)(a1 + 660);
        goto LABEL_6;
      case 3:
        int v7 = *(_DWORD *)(a1 + 652);
        int v14 = *(_DWORD *)(a1 + 36);
        int v8 = (unsigned __int8 *)v15[0];
        if (v14 == 4) {
          goto LABEL_17;
        }
        goto LABEL_13;
      case 4:
LABEL_6:
        int v8 = (unsigned __int8 *)v15[0];
        goto LABEL_15;
      case 5:
        int v7 = *(_DWORD *)(a1 + 672);
        int v14 = *(_DWORD *)(a1 + 44);
        int v8 = (unsigned __int8 *)v15[0];
        if (v14 != 4) {
          goto LABEL_13;
        }
        goto LABEL_17;
      case 6:
        int v7 = *(_DWORD *)(a1 + 680);
        int v14 = *(_DWORD *)(a1 + 48);
        int v8 = (unsigned __int8 *)v15[0];
        if (v14 == 4)
        {
LABEL_17:
          int v11 = *v8;
          int v10 = v8[1];
          int v12 = v8[3] << 24;
          int v13 = v8[2] << 16;
        }

        else
        {
LABEL_13:
          if (v14 == 2)
          {
            int v12 = 0;
            int v13 = 0;
            int v11 = *v8;
            int v10 = v8[1];
          }

          else if (v14 == 1)
          {
LABEL_15:
            int v12 = 0;
            int v13 = 0;
            int v10 = 0;
            int v11 = *v8;
          }

          else
          {
            int v12 = 0;
            int v13 = 0;
            int v10 = 0;
            int v11 = 0;
          }
        }

        break;
      default:
        int v10 = 0;
        int v11 = 0;
        int v12 = 0;
        int v13 = 0;
        break;
    }

    return (v12 | v13) + v7 + (v10 << 8) + v11;
  }

  else
  {
    uint64_t result = 0xFFFFFFFFLL;
    switch(a3)
    {
      case 2:
        uint64_t result = (*(_DWORD *)(a1 + 660) + *(_DWORD *)(a1 + 664));
        break;
      case 3:
        uint64_t result = (*(_DWORD *)(a1 + 652) + *(_DWORD *)(a1 + 656));
        break;
      case 4:
        return result;
      case 5:
        uint64_t result = (*(_DWORD *)(a1 + 672) + *(_DWORD *)(a1 + 676));
        break;
      case 6:
        uint64_t result = (*(_DWORD *)(a1 + 680) + *(_DWORD *)(a1 + 684));
        break;
      default:
        uint64_t result = 0LL;
        break;
    }
  }

  return result;
}

uint64_t sub_10008CD4C( int a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7, unsigned __int8 *a8, uint64_t a9, __int16 a10, int a11)
{
  uint64_t v19 = sub_1000C1074(408LL);
  uint64_t v20 = v19;
  if (!v19) {
    return v20;
  }
  int v21 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v21 = *(_DWORD *)(qword_1000FDCC0 + 3976);
  }
  *(_DWORD *)uint64_t v19 = v21;
  *(_DWORD *)(v19 + 52) = a1 - 1;
  *(_DWORD *)(v19 + 280) = a1;
  *(_DWORD *)(v19 + 284) = a3;
  *(_DWORD *)(v19 + 288) = a4;
  *(void *)(v19 + 296) = a5;
  uint64_t v22 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v23 = *(void *)(qword_1000FDCC0 + 3944);
    if (v23 >= 1)
    {
      *(_DWORD *)(v19 + 104) = 0;
      *(_DWORD *)(v19 + 108) = (unint64_t)(v23 + 255) >> 8;
    }

    uint64_t v24 = *(void *)(v22 + 3936);
    if (v24 >= 1)
    {
      *(_DWORD *)(v19 + 128) = 0;
      *(_DWORD *)(v19 + 132) = (unint64_t)(v24 + 255) >> 8;
    }

    int v25 = *(_DWORD *)(v22 + 3960);
    *(void *)(v19 + 8) = a9;
    *(_DWORD *)(v19 + 160) = 0;
    *(_DWORD *)(v19 + 164) = a2;
    *(_DWORD *)(v19 + 112) = 0;
    *(_DWORD *)(v19 + 136) = 0;
    if (v25 >= 1)
    {
      uint64_t v26 = *(void *)(v22 + 3960);
      uint64_t v28 = v26 + 255;
      BOOL v27 = v26 < -255;
      unint64_t v29 = v26 + 510;
      if (!v27) {
        unint64_t v29 = v28;
      }
      unint64_t v30 = v29 >> 8;
      *(_DWORD *)(v19 + 40) = 0;
      *(_DWORD *)(v19 + 44) = v30;
      *(_DWORD *)(v19 + 176) = 0;
      *(_DWORD *)(v19 + 180) = v30;
      *(_DWORD *)(v19 + 192) = 0;
      *(_DWORD *)(v19 + 196) = v30;
      *(_DWORD *)(v19 + 88) = 0;
      *(_DWORD *)(v19 + 92) = v30;
      *(_DWORD *)(v19 + 216) = 0;
      *(_DWORD *)(v19 + 220) = v30;
      *(_DWORD *)(v19 + 200) = 0;
      uint64_t v31 = *(void *)(v22 + 3960);
      uint64_t v32 = v31 + 255;
      BOOL v27 = v31 < -255;
      unint64_t v33 = v31 + 510;
      if (!v27) {
        unint64_t v33 = v32;
      }
      *(_DWORD *)(v19 + 64) = 0;
      *(_DWORD *)(v19 + 68) = v33 >> 8;
      *(_WORD *)(v19 + 204) = a10;
    }
  }

  else
  {
    *(void *)(v19 + 8) = a9;
    *(_DWORD *)(v19 + 160) = 0;
    *(_DWORD *)(v19 + 164) = a2;
    *(_DWORD *)(v19 + 112) = 0;
    *(_DWORD *)(v19 + 136) = 0;
  }

  *(_DWORD *)(v19 + 48) = 0;
  *(_DWORD *)(v19 + 72) = 0;
  *(_DWORD *)(v19 + 20) = a6;
  sub_10008D000(v19, a7, a8);
  *(void *)(v20 + 232) = 0LL;
  uint64_t v34 = qword_1000FDCC0;
  if (!qword_1000FDCC0) {
    goto LABEL_22;
  }
  uint64_t v35 = *(void *)(qword_1000FDCC0 + 3928);
  if (v35 < 1) {
    goto LABEL_20;
  }
  uint64_t v36 = sub_1000C1074(2 * v35);
  *(void *)(v20 + 232) = v36;
  if (!v36) {
    goto LABEL_37;
  }
  uint64_t v34 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
LABEL_20:
    *(_DWORD *)(v20 + 224) = *(void *)(v34 + 3992);
    int v37 = (int *)(v20 + 224);
    *(_DWORD *)(v20 + 228) = *(void *)(v34 + 4000);
    uint64_t v38 = (int *)(v20 + 228);
    uint64_t v39 = sub_1000C1074(2LL * *(void *)(v34 + 3992) + 4);
    *(void *)(v20 + 240) = v39;
    if (!v39) {
      goto LABEL_37;
    }
  }

  else
  {
LABEL_22:
    *(_DWORD *)(v20 + 224) = 0;
    int v37 = (int *)(v20 + 224);
    *(_DWORD *)(v20 + 228) = 0;
    uint64_t v38 = (int *)(v20 + 228);
    uint64_t v40 = sub_1000C1074(4LL);
    *(void *)(v20 + 240) = v40;
    if (!v40) {
      goto LABEL_37;
    }
  }

  *(_DWORD *)(v20 + 248) = 0;
  int v41 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    int v41 = *(_DWORD *)(qword_1000FDCC0 + 3928);
  }
  *(_DWORD *)(v20 + 252) = v41;
  *(_WORD *)(v20 + 256) = 0;
  uint64_t v42 = *(unsigned int *)(v20 + 228);
  uint64_t v43 = sub_1000C1074(v42);
  *(void *)(v20 + 264) = v43;
  if (!v43)
  {
LABEL_37:
    sub_10008D278(v20);
    return 0LL;
  }

  if (*v38 >= 1)
  {
    uint64_t v44 = 0LL;
    do
      *(_BYTE *)(*(void *)(v20 + 264) + v44++) = -1;
    while (v44 < *(int *)(v20 + 228));
  }

double sub_10008D000(uint64_t a1, int a2, unsigned __int8 *a3)
{
  if (a2 == 5 || a2 == 2) {
    a2 = 3;
  }
  uint64_t v5 = a1 + 312;
  *(_DWORD *)(a1 + 304) = a2;
  *(_DWORD *)(a1 + 308) = a2;
  *(_DWORD *)(a1 + 352) = a2;
  if (sub_1000C8AE4(a3, "hiin"))
  {
  }

  else
  {
    *(_DWORD *)(a1 + 304) = 4;
    *(void *)(a1 + 312) = 0x400000004LL;
    *(_OWORD *)(a1 + 320) = xmmword_1000F2210;
    *(_OWORD *)(a1 + 336) = *(_OWORD *)dbl_1000F2220;
    if (sub_1000C8AE4(a3, "jajp"))
    {
LABEL_6:
      goto LABEL_14;
    }
  }

  uint64_t v5 = a1 + 356;
  *(void *)(a1 + 352) = 0x500000004LL;
  *(_DWORD *)(a1 + 360) = 5;
  *(_OWORD *)(a1 + 364) = xmmword_1000F2210;
  *(_OWORD *)(a1 + 380) = *(_OWORD *)dbl_1000F2220;
  if (sub_1000C8AE4(a3, "plpl"))
  {
LABEL_7:
    goto LABEL_15;
  }

uint64_t sub_10008D278(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C1BC8(*(void *)(result + 96), *(unsigned int *)(v1 + 104), *(_DWORD *)(v1 + 108));
    *(void *)(v1 + 96) = 0LL;
    *(void *)(v1 + 104) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 120), *(unsigned int *)(v1 + 128), *(_DWORD *)(v1 + 132));
    *(void *)(v1 + 120) = 0LL;
    *(void *)(v1 + 128) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 32), *(unsigned int *)(v1 + 40), *(_DWORD *)(v1 + 44));
    *(void *)(v1 + 32) = 0LL;
    *(void *)(v1 + 40) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 56), *(unsigned int *)(v1 + 64), *(_DWORD *)(v1 + 68));
    *(void *)(v1 + 56) = 0LL;
    *(void *)(v1 + 64) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 80), *(unsigned int *)(v1 + 88), *(_DWORD *)(v1 + 92));
    *(void *)(v1 + 80) = 0LL;
    *(void *)(v1 + 88) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 168), *(unsigned int *)(v1 + 176), *(_DWORD *)(v1 + 180));
    *(void *)(v1 + 168) = 0LL;
    *(void *)(v1 + 176) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 184), *(unsigned int *)(v1 + 192), *(_DWORD *)(v1 + 196));
    *(void *)(v1 + 184) = 0LL;
    *(void *)(v1 + 192) = 0LL;
    sub_1000C1BC8(*(void *)(v1 + 208), *(unsigned int *)(v1 + 216), *(_DWORD *)(v1 + 220));
    *(void *)(v1 + 208) = 0LL;
    *(void *)(v1 + 216) = 0LL;
    sub_1000C0EF8(*(void *)(v1 + 272));
    sub_1000C0EF8(*(void *)(v1 + 264));
    sub_1000C0EF8(*(void *)(v1 + 232));
    sub_1000C0EF8(*(void *)(v1 + 240));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10008D340( uint64_t a1, __int16 *a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(_DWORD *)(a1 + 44)) {
    return 0xFFFFFFLL;
  }
  int v10 = *(_DWORD *)(a1 + 304);
  int v11 = *(_DWORD *)(a1 + 144);
  if (v11 < 1)
  {
    int v13 = 0LL;
    int v12 = 1;
  }

  else
  {
    if (v11 <= 4 * *(_DWORD *)(a1 + 148)) {
      int v11 = 4 * *(_DWORD *)(a1 + 148);
    }
    if (v11 <= *(_DWORD *)(a1 + 140)) {
      int v11 = *(_DWORD *)(a1 + 140);
    }
    int v12 = v11 + 1;
    int v13 = (char *)sub_1000CAF58((v11 + 1), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }

  int v14 = 4 * sub_1000CC52C((unint64_t)a2) + 4;
  uint64_t v15 = v14;
  uint64_t v23 = (unsigned __int8 *)sub_1000CAF58(v14, v16, v17, v18, v19, v20, v21, v22);
  uint64_t v31 = (unsigned __int8 *)sub_1000CAF58(v14, v24, v25, v26, v27, v28, v29, v30);
  if (v10 == 4) {
    int v32 = 3;
  }
  else {
    int v32 = v10;
  }
  if (sub_1000BE078(v32, a2, v14, (uint64_t)v31) == 2)
  {
    sub_1000CB038(v31, v14);
    sub_1000CB038(v23, v14);
    if (*(int *)(a1 + 144) >= 1)
    {
      uint64_t v33 = v12;
      uint64_t v34 = 0xFFFFFFLL;
LABEL_44:
      sub_1000CB038(v13, v33);
      return v34;
    }

    return 0xFFFFFFLL;
  }

  int v35 = *(_DWORD *)(a1 + 20);
  sub_100086568(v23, (unsigned __int16 *)a2, v35, v10, a1 + 312, 0LL);
  uint64_t v43 = sub_1000C88E4((unint64_t)v23) + 1;
  int v81 = v35;
  if (v35) {
    int v82 = sub_100086428((uint64_t)a2);
  }
  else {
    int v82 = 128;
  }
  uint64_t v44 = 2LL * *(int *)(a1 + 148) + 2;
  uint64_t v83 = (_WORD *)sub_1000CAF58(v44, v36, v37, v38, v39, v40, v41, v42);
  int v50 = sub_10008D758(a1, v23, v43, v45, v46, v47, v48, v49);
  if (v50 >= *(_DWORD *)(a1 + 72))
  {
    uint64_t v34 = 0xFFFFFFLL;
  }

  else
  {
    unsigned int v51 = v50;
    uint64_t v77 = v44;
    uint64_t v78 = v15;
    int v79 = v12;
    uint64_t v80 = v31;
    while (1)
    {
      uint64_t v53 = *(void *)(*(void *)(a1 + 32) + 8 * v52);
      uint64_t v54 = *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v51 >> 8)) + 2LL
                                                                                             * v51);
      unint64_t v55 = *(unsigned int *)(v53 + 12 * v54);
      uint64_t v56 = *(void *)(*(void *)(a1 + 96) + ((v55 >> 5) & 0x7FFFFF8));
      uint64_t v57 = *(_DWORD *)(v53 + 12 * v54);
      *int v13 = *(_BYTE *)(v56 + v57);
      if (*(_BYTE *)(v56 + v57))
      {
        unsigned int v58 = v55 + 1;
        int v59 = v13 + 1;
        do
        {
          uint64_t v60 = *(void *)(*(void *)(a1 + 96) + 8LL * (v58 >> 8));
          *v59++ = *(_BYTE *)(v60 + v58);
          LODWORD(v60) = *(unsigned __int8 *)(v60 + v58++);
        }

        while ((_DWORD)v60);
      }

      if ((int)sub_1000C8AB4(v13, v23) > 0)
      {
LABEL_39:
        uint64_t v34 = 0xFFFFFFLL;
        goto LABEL_41;
      }

      int v61 = sub_1000C88E4((unint64_t)v13);
      int v62 = v61;
      unsigned int v63 = v55 + v61 + 1;
      uint64_t v64 = *(void *)(*(void *)(a1 + 96) + 8LL * (v63 >> 8));
      uint64_t v65 = (v55 + v61 + 1);
      *int v13 = *(_BYTE *)(v64 + v65);
      if (*(_BYTE *)(v64 + v65))
      {
        unsigned int v66 = v61 + v55 + 2;
        int v67 = v13 + 1;
        do
        {
          uint64_t v68 = *(void *)(*(void *)(a1 + 96) + 8LL * (v66 >> 8));
          *v67++ = *(_BYTE *)(v68 + v66);
          LODWORD(v68) = *(unsigned __int8 *)(v68 + v66++);
        }

        while ((_DWORD)v68);
      }

      int v69 = sub_1000C88E4((unint64_t)v13);
      sub_100086BF0((uint64_t)v83, v13, v69 + 1, 1, *(_DWORD *)(a1 + 352), a1 + 356);
      if (!sub_1000CCE40(v83, a3))
      {
        if (!v81) {
          break;
        }
        if (v82 == *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8 * v52) + v54))
        {
          if (v82 != 16) {
            break;
          }
          int v70 = sub_1000C88E4((unint64_t)v13);
          uint64_t v71 = *(void *)(*(void *)(a1 + 96) + 8LL * ((v63 + v70 + 1) >> 8));
          uint64_t v72 = (v63 + v70 + 1);
          *int v13 = *(_BYTE *)(v71 + v72);
          if (*(_BYTE *)(v71 + v72))
          {
            unsigned int v73 = v62 + v70 + v55 + 3;
            uint64_t v74 = v13 + 1;
            do
            {
              uint64_t v75 = *(void *)(*(void *)(a1 + 96) + 8LL * (v73 >> 8));
              *v74++ = *(_BYTE *)(v75 + v73);
              LODWORD(v75) = *(unsigned __int8 *)(v75 + v73++);
            }

            while ((_DWORD)v75);
          }
        }
      }
    }

    uint64_t v34 = *(unsigned int *)(v53 + 12LL * v54 + 8);
LABEL_41:
    uint64_t v15 = v78;
    int v12 = v79;
    uint64_t v31 = v80;
    uint64_t v44 = v77;
  }

  sub_1000CB038(v83, v44);
  sub_1000CB038(v31, v15);
  sub_1000CB038(v23, v15);
  if (*(int *)(a1 + 144) >= 1)
  {
    uint64_t v33 = v12;
    goto LABEL_44;
  }

  return v34;
}

uint64_t sub_10008D758( uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  uint64_t v11 = *(unsigned int *)(a1 + 144);
  if ((int)v11 < 1)
  {
    int v13 = 0LL;
    uint64_t v12 = 1LL;
    int v17 = *(_DWORD *)(a1 + 72);
    uint64_t v15 = 0LL;
    int v16 = v17 - 1;
    if (v17 < 1) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v12 = v11 + 1;
    int v13 = (unsigned __int8 *)sub_1000CAF58(v11 + 1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    int v14 = *(_DWORD *)(a1 + 72);
    uint64_t v15 = 0LL;
    int v16 = v14 - 1;
    if (v14 < 1) {
      goto LABEL_18;
    }
  }

  do
  {
    int v19 = v16 + v15;
    int v20 = v19 >> 1;
    unint64_t v22 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + ((v21 >> 5) & 0x7F8)) + 12LL * v21);
    uint64_t v23 = *(void *)(*(void *)(a1 + 96) + ((v22 >> 5) & 0x7FFFFF8));
    *int v13 = *(_BYTE *)(v23 + v22);
    if (*(_BYTE *)(v23 + v22))
    {
      LODWORD(v22) = v22 + 1;
      uint64_t v24 = v13 + 1;
      do
      {
        uint64_t v25 = *(void *)(*(void *)(a1 + 96) + 8LL * (v22 >> 8));
        *v24++ = *(_BYTE *)(v25 + v22);
        LODWORD(v25) = *(unsigned __int8 *)(v25 + v22);
        unint64_t v22 = (v22 + 1);
      }

      while ((_DWORD)v25);
    }

    int v18 = sub_1000C8928(v13, a2, v8, v22);
    if (v18 < 0) {
      uint64_t v15 = (v20 + 1);
    }
    else {
      uint64_t v15 = v15;
    }
    if (v18 >= 0) {
      int v16 = v20 - 1;
    }
  }

  while ((int)v15 <= v16);
LABEL_18:
  return v15;
}

uint64_t sub_10008D8C4(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6 = a4;
  uint64_t v10 = a1 + 356;
  uint64_t v11 = (int)((4 * sub_1000CC52C((unint64_t)a2)) | 1);
  int v19 = (unsigned __int8 *)sub_1000CAF58(v11, v12, v13, v14, v15, v16, v17, v18);
  int v20 = sub_100086568(v19, a2, 0, *(_DWORD *)(a1 + 352), v10, 0LL);
  uint64_t result = 0LL;
  if (v20 != 1)
  {
    int v22 = sub_1000C88E4((unint64_t)v19);
    uint64_t v45 = (4LL * *(int *)(a1 + 148)) | 1;
    unint64_t v30 = sub_1000CAF58(v45, v23, v24, v25, v26, v27, v28, v29);
    uint64_t v31 = (unsigned __int8 *)v30;
    if (*(int *)(a1 + 48) >= 1)
    {
      int v46 = a5;
      uint64_t v32 = 0LL;
      unsigned int v33 = 0;
      int v34 = v22 + 1;
      uint64_t v47 = (_BYTE *)(v30 + 1);
      while (1)
      {
        uint64_t v35 = *(void *)(*(void *)(a1 + 32) + 8LL * (v33 >> 8));
        unint64_t v36 = *(unsigned int *)(v35 + 12LL * v33);
        if ((_DWORD)v36 != -1)
        {
          uint64_t v37 = *(void *)(a1 + 96);
          int v38 = *(unsigned __int8 *)(*(void *)(v37 + ((v36 >> 5) & 0x7FFFFF8)) + v36);
          if (*(_BYTE *)(*(void *)(v37 + ((v36 >> 5) & 0x7FFFFF8)) + v36))
          {
            int v39 = 0;
            do
            {
              int v38 = v39 + 1;
              ++v39;
            }

            while (v40);
          }

          uint64_t v41 = *(void *)(v37 + 8LL * ((v36 + v38 + 1) >> 8));
          uint64_t v42 = (v36 + v38 + 1);
          *uint64_t v31 = *(_BYTE *)(v41 + v42);
          if (*(_BYTE *)(v41 + v42))
          {
            LODWORD(v36) = v38 + v36 + 2;
            uint64_t v43 = v47;
            do
            {
              uint64_t v44 = *(void *)(*(void *)(a1 + 96) + 8LL * (v36 >> 8));
              *v43++ = *(_BYTE *)(v44 + v36);
              LODWORD(v44) = *(unsigned __int8 *)(v44 + v36);
              unint64_t v36 = (v36 + 1);
            }

            while ((_DWORD)v44);
          }

          if (!sub_1000C8928(v31, v19, v34, v36))
          {
            if ((int)v32 >= (int)v6)
            {
              uint64_t v32 = (v32 + 1);
            }

            else
            {
              *(_DWORD *)(a3 + 4LL * (int)v32) = *(_DWORD *)(v35 + 12LL * v33 + 8);
              uint64_t v32 = (v32 + 1);
              if (!v46 && (_DWORD)v32 == (_DWORD)v6)
              {
                sub_1000CB038(v31, v45);
                goto LABEL_22;
              }
            }
          }
        }
      }
    }

    uint64_t v32 = 0LL;
LABEL_21:
    sub_1000CB038(v31, v45);
    uint64_t v6 = v32;
LABEL_22:
    sub_1000CB038(v19, v11);
    return v6;
  }

  return result;
}

void *sub_10008DB0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  int v11 = a2;
  int v13 = *(_DWORD *)(a1 + 144);
  if (v13 >= 1)
  {
    if (v13 <= 4 * *(_DWORD *)(a1 + 148)) {
      int v13 = 4 * *(_DWORD *)(a1 + 148);
    }
    if (v13 <= *(_DWORD *)(a1 + 140)) {
      int v13 = *(_DWORD *)(a1 + 140);
    }
    uint64_t v14 = (v13 + 1);
    uint64_t v15 = (char *)sub_1000CAF58(v14, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v23 = (char *)sub_1000CAF58(v14, v16, v17, v18, v19, v20, v21, v22);
    uint64_t v24 = a1 + 356;
    int v25 = *(_DWORD *)(a1 + 48);
    if (v25 > 0) {
      goto LABEL_7;
    }
LABEL_16:
    unsigned int v26 = 0;
    uint64_t v28 = *(void *)(a1 + 32);
    goto LABEL_17;
  }

  uint64_t v15 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v14 = 1LL;
  uint64_t v24 = a1 + 356;
  int v25 = *(_DWORD *)(a1 + 48);
  if (v25 <= 0) {
    goto LABEL_16;
  }
LABEL_7:
  unsigned int v26 = 0;
  int v27 = v25 - 1;
  uint64_t v28 = *(void *)(a1 + 32);
  do
  {
    int v29 = v26 + v27;
    unsigned int v30 = v29 >> 1;
    else {
      unsigned int v26 = v30 + 1;
    }
  }

  while ((int)v26 <= v27);
LABEL_17:
  uint64_t v31 = v26 >> 8;
  unint64_t v32 = *(unsigned int *)(*(void *)(v28 + 8LL * v31) + 12LL * v26);
  uint64_t v33 = *(void *)(*(void *)(a1 + 96) + ((v32 >> 5) & 0x7FFFFF8));
  char v34 = *(_BYTE *)(v33 + v32);
  uint64_t v115 = v24;
  if (*(_DWORD *)(a1 + 20))
  {
    *uint64_t v15 = v34;
    if (*(_BYTE *)(v33 + v32))
    {
      unsigned int v35 = v32 + 1;
      unint64_t v36 = v15 + 1;
      do
      {
        uint64_t v37 = *(void *)(*(void *)(a1 + 96) + 8LL * (v35 >> 8));
        *v36++ = *(_BYTE *)(v37 + v35);
        LODWORD(v37) = *(unsigned __int8 *)(v37 + v35++);
      }

      while ((_DWORD)v37);
    }

    int v38 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8 * v31) + v26);
    uint64_t v114 = v14;
    if (v38 == 16)
    {
      uint64_t v111 = a3;
      uint64_t v112 = a5;
      int v39 = sub_1000C88E4((unint64_t)v15);
      int v47 = v39;
      unsigned int v48 = v32 + v39 + 1;
      uint64_t v49 = *(void *)(a1 + 96);
      uint64_t v50 = v48 >> 8;
      uint64_t v51 = (v32 + v39 + 1);
      if (*(_BYTE *)(*(void *)(v49 + 8LL * v50) + v51))
      {
        int v52 = 1;
        do
          ++v52;
      }

      else
      {
        int v52 = 1;
      }

      uint64_t v92 = v52;
      uint64_t v93 = (char *)sub_1000CAF58(v52, v40, v41, v42, v43, v44, v45, v46);
      unsigned int v94 = v93;
      uint64_t v95 = *(void *)(*(void *)(a1 + 96) + 8 * v50);
      *uint64_t v93 = *(_BYTE *)(v95 + v51);
      if (*(_BYTE *)(v95 + v51))
      {
        unsigned int v96 = v47 + v32 + 2;
        float64x2_t v97 = v93 + 1;
        do
        {
          uint64_t v98 = *(void *)(*(void *)(a1 + 96) + 8LL * (v96 >> 8));
          *v97++ = *(_BYTE *)(v98 + v96);
          LODWORD(v98) = *(unsigned __int8 *)(v98 + v96++);
        }

        while ((_DWORD)v98);
      }

      sub_100086BF0(v112, v93, v92, 1, *(_DWORD *)(a1 + 352), v115);
      int v99 = sub_1000C88E4((unint64_t)v94);
      sub_1000CB038(v94, v92);
      uint64_t v100 = *(void *)(*(void *)(a1 + 96) + 8LL * ((v48 + v99 + 1) >> 8));
      *uint64_t v23 = *(_BYTE *)(v100 + (v48 + v99 + 1));
      if (*(_BYTE *)(v100 + (v48 + v99 + 1)))
      {
        unsigned int v101 = v99 + v47 + v32 + 3;
        uint64_t v102 = v23 + 1;
        do
        {
          uint64_t v103 = *(void *)(*(void *)(a1 + 96) + 8LL * (v101 >> 8));
          *v102++ = *(_BYTE *)(v103 + v101);
          LODWORD(v103) = *(unsigned __int8 *)(v103 + v101++);
        }

        while ((_DWORD)v103);
      }

      uint64_t result = (void *)sub_1000BE124(*(_DWORD *)(a1 + 308), v23, *(_DWORD *)(a1 + 140), v111);
      uint64_t v14 = v114;
LABEL_57:
      sub_1000CB038(v23, v14);
      return sub_1000CB038(v15, v14);
    }

    sub_100086BF0(a3, v15, v9, v38, *(_DWORD *)(a1 + 304), a1 + 312);
    int v70 = sub_1000C88E4((unint64_t)v15);
    int v78 = v70;
    uint64_t v79 = *(void *)(a1 + 96);
    uint64_t v80 = (v32 + v70 + 1) >> 8;
    uint64_t v81 = (v32 + v70 + 1);
    if (*(_BYTE *)(*(void *)(v79 + 8LL * v80) + v81))
    {
      uint64_t v82 = a5;
      int v83 = 1;
      do
        ++v83;
    }

    else
    {
      uint64_t v82 = a5;
      int v83 = 1;
    }

    uint64_t v104 = v83;
    float64x2_t v105 = (char *)sub_1000CAF58(v83, v71, v72, v73, v74, v75, v76, v77);
    unint64_t v106 = v105;
    uint64_t v107 = *(void *)(*(void *)(a1 + 96) + 8 * v80);
    *float64x2_t v105 = *(_BYTE *)(v107 + v81);
    if (*(_BYTE *)(v107 + v81))
    {
      unsigned int v108 = v78 + v32 + 2;
      int v109 = v105 + 1;
      do
      {
        uint64_t v110 = *(void *)(*(void *)(a1 + 96) + 8LL * (v108 >> 8));
        *v109++ = *(_BYTE *)(v110 + v108);
        LODWORD(v110) = *(unsigned __int8 *)(v110 + v108++);
      }

      while ((_DWORD)v110);
    }

    sub_100086BF0(v82, v105, v104, 1, *(_DWORD *)(a1 + 352), v115);
    uint64_t result = sub_1000CB038(v106, v104);
    uint64_t v14 = v114;
  }

  else
  {
    *uint64_t v23 = v34;
    if (*(_BYTE *)(v33 + v32))
    {
      unsigned int v53 = v32 + 1;
      uint64_t v54 = v23 + 1;
      do
      {
        uint64_t v55 = *(void *)(*(void *)(a1 + 96) + 8LL * (v53 >> 8));
        *v54++ = *(_BYTE *)(v55 + v53);
        LODWORD(v55) = *(unsigned __int8 *)(v55 + v53++);
      }

      while ((_DWORD)v55);
    }

    sub_1000BE124(*(_DWORD *)(a1 + 304), v23, *(_DWORD *)(a1 + 140), a3);
    int v56 = sub_1000C88E4((unint64_t)v23);
    int v64 = v56;
    uint64_t v65 = *(void *)(a1 + 96);
    uint64_t v66 = (v32 + v56 + 1) >> 8;
    uint64_t v67 = (v32 + v56 + 1);
    uint64_t v113 = v15;
    uint64_t v68 = a5;
    if (*(_BYTE *)(*(void *)(v65 + 8LL * v66) + v67))
    {
      int v69 = 1;
      do
        ++v69;
    }

    else
    {
      int v69 = 1;
    }

    uint64_t v84 = v69;
    unsigned int v85 = (char *)sub_1000CAF58(v69, v57, v58, v59, v60, v61, v62, v63);
    uint64_t v86 = v85;
    uint64_t v87 = *(void *)(*(void *)(a1 + 96) + 8 * v66);
    *unsigned int v85 = *(_BYTE *)(v87 + v67);
    if (*(_BYTE *)(v87 + v67))
    {
      unsigned int v88 = v64 + v32 + 2;
      unsigned int v89 = v85 + 1;
      do
      {
        uint64_t v90 = *(void *)(*(void *)(a1 + 96) + 8LL * (v88 >> 8));
        *v89++ = *(_BYTE *)(v90 + v88);
        LODWORD(v90) = *(unsigned __int8 *)(v90 + v88++);
      }

      while ((_DWORD)v90);
    }

    sub_100086BF0(v68, v85, v84, 1, *(_DWORD *)(a1 + 352), v115);
    uint64_t result = sub_1000CB038(v86, v84);
    uint64_t v15 = v113;
  }

  return result;
}

uint64_t sub_10008E094( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v70 = a5;
  int v8 = a4;
  int v9 = (void **)a3;
  uint64_t v71 = 0LL;
  uint64_t v72 = 0LL;
  int v12 = *(_DWORD *)(a1 + 48);
  int v13 = 0;
  int v14 = v12 - 1;
  if (v12 >= 1)
  {
    do
    {
      int v15 = v13 + v14;
      if (v13 + v14 < 0 != __OFADD__(v13, v14)) {
        ++v15;
      }
      unsigned int v16 = v15 >> 1;
      else {
        int v13 = v16 + 1;
      }
    }

    while (v13 <= v14);
  }

  if (v13 >= v12) {
    return 0LL;
  }
  uint64_t v17 = v13 >> 8;
  uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8LL * v17);
  uint64_t v19 = v13;
  unint64_t v20 = *(unsigned int *)(v18 + 12LL * v13 + 4);
  if ((_DWORD)v20 == -1)
  {
    if (!(_DWORD)a4) {
      return 1LL;
    }
    uint64_t v39 = sub_10008E454(a1, a2, 0LL, 0LL, a5, a6, a7, a8) + 1;
    uint64_t v40 = (int)v39;
    unsigned int v48 = (char *)sub_1000CAF58((int)v39, v41, v42, v43, v44, v45, v46, v47);
    sub_10008E454(a1, a2, (uint64_t)v48, v39, v49, v50, v51, v52);
    BOOL v53 = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8 * v17) + v19) != 0;
    uint64_t v54 = sub_1000943F4( *(void *)(a1 + 8),  v48,  *(_DWORD *)(a1 + 308),  v53,  *v9,  v70,  (uint64_t)&v71,  1u,  (uint64_t)&v72 + 4);
    if (SHIDWORD(v72) < 1)
    {
      uint64_t v65 = v54;
      sub_1000CB038(v48, v40);
      uint64_t result = v65;
      if (v8 < 1) {
        return result;
      }
    }

    else
    {
      uint64_t v62 = (_WORD *)sub_1000CAF58(2LL * HIDWORD(v72), v55, v56, v57, v58, v59, v60, v61);
      uint64_t v63 = sub_1000943F4( *(void *)(a1 + 8),  v48,  *(_DWORD *)(a1 + 308),  v53,  v62,  HIDWORD(v72),  (uint64_t)&v71,  1u,  (uint64_t)&v72);
      int v64 = sub_100099EE0((unint64_t)v62);
      memcpy(*v9, v62, 2LL * (v64 + 1));
      sub_1000CB038(v62, 2LL * SHIDWORD(v72));
      sub_1000CB038(v48, v40);
      uint64_t result = v63;
      if (v8 < 1) {
        return result;
      }
    }

unint64_t sub_10008E454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  int v10 = a2;
  int v12 = *(_DWORD *)(a1 + 144);
  if (v12 <= *(_DWORD *)(a1 + 140)) {
    int v12 = *(_DWORD *)(a1 + 140);
  }
  uint64_t v13 = v12 + 1;
  int v14 = (_BYTE *)sub_1000CAF58(v13, a2, a3, a4, a5, a6, a7, a8);
  int v15 = v14;
  int v16 = *(_DWORD *)(a1 + 48);
  uint64_t v66 = v13;
  __dst = (_BYTE *)a3;
  int v64 = v8;
  unsigned int v17 = 0;
  if (v16 <= 0)
  {
    uint64_t v19 = *(void *)(a1 + 32);
  }

  else
  {
    int v18 = v16 - 1;
    uint64_t v19 = *(void *)(a1 + 32);
    do
    {
      int v20 = v17 + v18;
      unsigned int v21 = v20 >> 1;
      else {
        unsigned int v17 = v21 + 1;
      }
    }

    while ((int)v17 <= v18);
  }

  uint64_t v22 = v17 >> 8;
  uint64_t v23 = v17;
  unint64_t v24 = *(unsigned int *)(*(void *)(v19 + 8LL * v22) + 12LL * v17);
  uint64_t v25 = *(void *)(*(void *)(a1 + 96) + ((v24 >> 5) & 0x7FFFFF8));
  *int v14 = *(_BYTE *)(v25 + v24);
  if (*(_BYTE *)(v25 + v24))
  {
    unsigned int v26 = v24 + 1;
    uint64_t v27 = v14 + 1;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(a1 + 96) + 8LL * (v26 >> 8));
      *v27++ = *(_BYTE *)(v28 + v26);
      LODWORD(v28) = *(unsigned __int8 *)(v28 + v26++);
    }

    while ((_DWORD)v28);
  }

  int v29 = sub_1000C88E4((unint64_t)v14);
  int v37 = v29;
  unsigned int v38 = v24 + v29 + 1;
  uint64_t v39 = *(void *)(a1 + 96);
  uint64_t v40 = v38 >> 8;
  uint64_t v41 = (v24 + v29 + 1);
  uint64_t v65 = v22;
  if (*(_BYTE *)(*(void *)(v39 + 8LL * v40) + v41))
  {
    int v42 = 1;
    do
      ++v42;
  }

  else
  {
    int v42 = 1;
  }

  uint64_t v43 = v42;
  uint64_t v44 = (char *)sub_1000CAF58(v42, v30, v31, v32, v33, v34, v35, v36);
  uint64_t v45 = v44;
  uint64_t v46 = *(void *)(*(void *)(a1 + 96) + 8 * v40);
  int v47 = *(unsigned __int8 *)(v46 + v41);
  *uint64_t v44 = v47;
  if (*(_BYTE *)(v46 + v41))
  {
    int v48 = v37 + v24;
    uint64_t v49 = 1LL;
    do
    {
      uint64_t v50 = *(void *)(*(void *)(a1 + 96) + 8LL * ((v49 + 1 + v48) >> 8));
      uint64_t v51 = (v49 + 1 + v48);
      v44[v49++] = *(_BYTE *)(v50 + v51);
    }

    while (*(_BYTE *)(v50 + v51));
    int v47 = *v44;
  }

  if (v47)
  {
    int v52 = *(_DWORD *)(a1 + 352);
    if (__dst)
    {
      sub_1000867DC(__dst, v44, v43, 1, v52, a1 + 356);
      unint64_t v53 = sub_1000C88E4((unint64_t)__dst);
    }

    else
    {
      unint64_t v53 = sub_100086FB0(v44, v52, a1 + 356);
    }

uint64_t sub_10008E7CC(uint64_t a1, unsigned int a2)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1 + 8LL * (a2 >> 8)) + a2);
  unsigned int v3 = a2 + 1;
  if (*(_BYTE *)(*(void *)(a1 + 8LL * (a2 >> 8)) + a2))
  {
    do
    {
      else {
        int v4 = 2;
      }
      v3 += v4;
      --v2;
    }

    while (v2);
  }

  return v3 - a2;
}

uint64_t sub_10008E814(uint64_t result, _BYTE *a2, unsigned int *a3)
{
  unint64_t v3 = *a3;
  int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(result + 120) + ((v3 >> 5) & 0x7FFFFF8)) + *a3);
  *a2 = v4;
  unsigned int v5 = v3 + 1;
  if (v4)
  {
    uint64_t v6 = a2 + 1;
    do
    {
      while (1)
      {
        uint64_t v7 = *(void *)(*(void *)(result + 120) + 8LL * (v5 >> 8));
        _BYTE *v6 = *(_BYTE *)(v7 + v5);
        v6[1] = *(_BYTE *)(*(void *)(*(void *)(result + 120) + 8LL * ((v5 + 1) >> 8)) + (v5 + 1));
        v6 += 2;
        v5 += 2;
        if (!--v4) {
          goto LABEL_6;
        }
      }

      ++v5;
      ++v6;
      --v4;
    }

    while (v4);
  }

uint64_t sub_10008E8AC(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 48);
  int v3 = v2 - 1;
  if (v2 < 1)
  {
    unsigned int v4 = 0;
  }

  else
  {
    unsigned int v4 = 0;
    do
    {
      int v5 = v4 + v3;
      unsigned int v6 = v5 >> 1;
      else {
        unsigned int v4 = v6 + 1;
      }
    }

    while ((int)v4 <= v3);
  }

  else {
    return 1LL;
  }
}

uint64_t sub_10008E928(uint64_t result, int a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 200);
  if (v3 == 255)
  {
    if (*(int *)(result + 48) >= 1)
    {
      unsigned int v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(result + 184) + 8LL * (v4 >> 8));
        *(_BYTE *)(v5 + v4) = (*(unsigned __int8 *)(v5 + v4) + 1) >> 1;
        ++v4;
      }

      while ((signed int)v4 < *(_DWORD *)(result + 48));
    }

    int v3 = 128;
  }

  unsigned int v6 = v3 + 1;
  *(_DWORD *)(result + 200) = v6;
  if (a2 >= 1)
  {
    for (uint64_t i = 0LL; i != a2; ++i)
    {
      int v8 = *(_DWORD *)(a3 + 4 * i);
      if (v8 >= *(_DWORD *)(result + 280))
      {
        int v9 = *(_DWORD *)(result + 48);
        int v10 = 0;
        int v11 = v9 - 1;
        if (v9 >= 1)
        {
          do
          {
            int v12 = v10 + v11;
            if (v10 + v11 < 0 != __OFADD__(v10, v11)) {
              ++v12;
            }
            unsigned int v13 = v12 >> 1;
            else {
              int v10 = v13 + 1;
            }
          }

          while (v10 <= v11);
        }

        if (v10 < v9
          && *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL * (v10 >> 8))
                       + 12LL * v10
                       + 8) == v8)
        {
          *(_BYTE *)(*(void *)(*(void *)(result + 184) + 8LL * (v6 >> 8)) + v6) = v6;
        }
      }
    }
  }

  return result;
}

uint64_t sub_10008EA44( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a3;
  char v9 = a2;
  uint64_t v28 = (int)a3;
  int v11 = (void *)sub_1000CAF58((int)a3, a2, a3, a4, a5, a6, a7, a8);
  int v12 = *(_DWORD *)(a1 + 48);
  if (v12 >= 1)
  {
    unsigned int v13 = 0;
    uint64_t v14 = 0LL;
    int v30 = v8;
    char v29 = v9;
    while (1)
    {
      uint64_t v20 = v13 >> 8;
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * v20) + v13))
      {
        if ((v9 & 2) == 0) {
          goto LABEL_10;
        }
      }

      else if ((v9 & 1) == 0)
      {
        goto LABEL_10;
      }

      int v21 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8 * v20) + 12LL * v13 + 8);
      if (v21 >= *(_DWORD *)(a1 + 280))
      {
        unsigned int v22 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 184) + 8 * v20) + v13);
        if ((int)v14 >= 1)
        {
          uint64_t v23 = 0LL;
          uint64_t v24 = 0LL;
          uint64_t v25 = v14;
          do
          {
            if (*((unsigned __int8 *)v11 + v24) > v22)
            {
              int v15 = (char *)v11 + v24;
              if ((_DWORD)v14 == v8) {
                int v16 = -1;
              }
              else {
                int v16 = 0;
              }
              int v17 = v14 + v16;
              if ((_DWORD)v14 != v8) {
                LODWORD(v14) = v14 + 1;
              }
              unsigned int v31 = v14;
              int v18 = v17 - v24;
              j__memmove(v15 + 1, (char *)v11 + v24, v17 - (int)v24);
              int v19 = 4 * v18;
              char v9 = v29;
              j__memmove((void *)(a4 - v23 + 4), (const void *)(a4 - v23), v19);
              uint64_t v14 = v31;
              *(_DWORD *)(a4 + 4 * v24) = v21;
              int v8 = v30;
              goto LABEL_9;
            }

            ++v24;
            v23 -= 4LL;
          }

          while (v14 != v24);
LABEL_23:
          uint64_t v14 = (v14 + 1);
          *(_DWORD *)(a4 + 4 * v25) = v21;
          int v15 = (char *)v11 + v25;
LABEL_9:
          *int v15 = v22;
          int v12 = *(_DWORD *)(a1 + 48);
          goto LABEL_10;
        }

        uint64_t v25 = 0LL;
      }

uint64_t sub_10008EBF4( uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unint64_t *a4, uint64_t a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, int a10, int a11)
{
  uint64_t v19 = sub_1000CB0B0();
  uint64_t v20 = 0xFFFFFFLL;
  uint64_t v174 = v19;
  int32x4_t v175 = a8;
  int v172 = *(_DWORD *)(a1 + 304);
  int v178 = 0;
  int32x4_t v176 = 0LL;
  uint64_t v177 = 0LL;
  if ((int)a5 >= 1)
  {
    uint64_t v21 = 0LL;
    while (1)
    {
      unsigned int v22 = (unsigned __int16 *)a4[v21];
      int v23 = *v22;
      if (v23 != 0xFFFF) {
        break;
      }
LABEL_12:
    }

    int v24 = *(_DWORD *)(a1 + 288);
    uint64_t v25 = v22 + 1;
    while ((unsigned __int16)v23 <= (unsigned __int16)(*(_WORD *)(a1 + 256) + v24)
         && (v24 >= (unsigned __int16)v23
          || *(unsigned __int8 *)(*(void *)(a1 + 272) + (unsigned __int16)v23 + ~v24) != 255))
    {
      int v26 = *v25++;
      LOWORD(v23) = v26;
      if (v26 == 0xFFFF) {
        goto LABEL_12;
      }
    }

    return 0xFFFFFFLL;
  }

LABEL_64:
  unsigned int v88 = (_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v87 >> 8)) + 12LL * v87);
  int v97 = *(_DWORD *)(a1 + 72);
  if (v97 >= 1)
  {
    for (int i = 0; i < v97; ++i)
    {
      uint64_t v99 = *(void *)(*(void *)(a1 + 56) + 8LL * (i >> 8));
      unsigned int v100 = *(unsigned __int16 *)(v99 + 2LL * i);
      if (v87 <= v100)
      {
        *(_WORD *)(v99 + 2LL * i) = v100 + 1;
        int v97 = *(_DWORD *)(a1 + 72);
      }
    }
  }

uint64_t sub_10008F7A0(uint64_t a1, int a2)
{
  uint64_t result = sub_1000C1744((const void **)(a1 + 32), (int *)(a1 + 44), (signed int *)(a1 + 40), 8, 12, a2);
  if ((_DWORD)result)
  {
    uint64_t result = sub_1000C1744((const void **)(a1 + 56), (int *)(a1 + 68), (signed int *)(a1 + 64), 8, 2, a2);
    if ((_DWORD)result)
    {
      uint64_t result = sub_1000C1744((const void **)(a1 + 168), (int *)(a1 + 180), (signed int *)(a1 + 176), 8, 1, a2);
      if ((_DWORD)result)
      {
        uint64_t result = sub_1000C1744((const void **)(a1 + 184), (int *)(a1 + 196), (signed int *)(a1 + 192), 8, 1, a2);
        if ((_DWORD)result)
        {
          if (!*(_DWORD *)(a1 + 20)
            || (uint64_t result = sub_1000C1744((const void **)(a1 + 80), (int *)(a1 + 92), (signed int *)(a1 + 88), 8, 1, a2),
                (_DWORD)result))
          {
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_10008F898( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  uint64_t v11 = *(unsigned int *)(a1 + 144);
  if ((int)v11 >= 1)
  {
    int v101 = v11 + 1;
    int v12 = (unsigned __int8 *)sub_1000CAF58(v11 + 1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    int v13 = *(_DWORD *)(a1 + 48);
    if (v13 > 0) {
      goto LABEL_5;
    }
LABEL_14:
    int v14 = 0;
    uint64_t v16 = *(void *)(a1 + 32);
    goto LABEL_15;
  }

  int v101 = 0;
  int v12 = 0LL;
  int v13 = *(_DWORD *)(a1 + 48);
  if (v13 <= 0) {
    goto LABEL_14;
  }
LABEL_5:
  int v14 = 0;
  int v15 = v13 - 1;
  uint64_t v16 = *(void *)(a1 + 32);
  do
  {
    int v17 = v14 + v15;
    if (v14 + v15 < 0 != __OFADD__(v14, v15)) {
      ++v17;
    }
    unsigned int v18 = v17 >> 1;
    else {
      int v14 = v18 + 1;
    }
  }

  while (v14 <= v15);
LABEL_15:
  uint64_t v19 = v14 >> 8;
  uint64_t v20 = (unsigned int *)(*(void *)(v16 + 8LL * v19) + 12LL * v14);
  unint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  uint64_t v23 = *(void *)(*(void *)(a1 + 96) + ((v21 >> 5) & 0x7FFFFF8));
  unsigned __int8 *v12 = *(_BYTE *)(v23 + v21);
  if (*(_BYTE *)(v23 + v21))
  {
    unsigned int v24 = v21 + 1;
    uint64_t v25 = v12 + 1;
    do
    {
      uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 8LL * (v24 >> 8));
      *v25++ = *(_BYTE *)(v26 + v24);
      LODWORD(v26) = *(unsigned __int8 *)(v26 + v24++);
    }

    while ((_DWORD)v26);
  }

  int v27 = v12;
  int v28 = sub_1000C88E4((unint64_t)v12);
  uint64_t v29 = (v28 + 1);
  uint64_t v99 = v27;
  unsigned int v35 = sub_10008D758(a1, v27, v29, v30, v31, v32, v33, v34);
  uint64_t v36 = *(void *)(a1 + 96);
  if (*(_BYTE *)(*(void *)(v36 + 8LL * ((v28 + 1 + v21) >> 8)) + (v28 + 1 + v21)))
  {
    int v37 = 0;
    int v38 = a3;
    int v39 = v101;
    do
    {
      int v40 = v37 + 1;
      ++v37;
    }

    while (v41);
    int v42 = v40 + 1;
    int v43 = v40 + 1 + v29;
    int v44 = *(_DWORD *)(a1 + 20);
    if (!v44) {
      goto LABEL_31;
    }
  }

  else
  {
    int v40 = 0;
    int v38 = a3;
    int v39 = v101;
    int v42 = 1;
    int v43 = v28 + 2;
    int v44 = *(_DWORD *)(a1 + 20);
    if (!v44) {
      goto LABEL_31;
    }
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8 * v19) + v14) == 16)
  {
    if (*(_BYTE *)(*(void *)(v36 + 8LL * ((v42 + v28 + 1 + v21) >> 8))
                  + (v42 + v28 + 1 + v21)))
    {
      int v45 = 0;
      int v46 = v28 + v40 + v21 + 3;
      do
      {
        int v47 = v45 + 1;
        ++v45;
      }

      while (v48);
    }

    else
    {
      int v47 = 0;
    }

    v43 += v47 + 1;
  }

uint64_t sub_10008FFB0(uint64_t a1)
{
  return *(void *)(a1 + 264);
}

BOOL sub_10008FFB8(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 52) < a2) {
    return 0LL;
  }
  int v2 = *(_DWORD *)(a1 + 48);
  int v3 = 0;
  int v4 = v2 - 1;
  if (v2 >= 1)
  {
    do
    {
      int v5 = v3 + v4;
      if (v3 + v4 < 0 != __OFADD__(v3, v4)) {
        ++v5;
      }
      unsigned int v6 = v5 >> 1;
      else {
        int v3 = v6 + 1;
      }
    }

    while (v3 <= v4);
  }

  return v3 < v2
      && *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v3 >> 8)) + 12LL * v3 + 8) == a2;
}

uint64_t sub_10009004C(uint64_t a1, unsigned __int16 *a2)
{
  int v2 = *a2;
  if (v2 == 0xFFFF) {
    return 1LL;
  }
  int v3 = a2 + 1;
  int v4 = *(_DWORD *)(a1 + 288);
  int v5 = ~v4;
  if (qword_1000FDCC0)
  {
    while (1)
    {
      if (v4 < v2)
      {
        uint64_t v7 = v2 + v5;
      }

      int v6 = *v3++;
      int v2 = v6;
      if (v6 == 0xFFFF) {
        return 1LL;
      }
    }
  }

  else
  {
    while (1)
    {
      if (v4 < v2)
      {
        int v9 = v2 + v5;
      }

      int v8 = *v3++;
      int v2 = v8;
      if (v8 == 0xFFFF) {
        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_100090100(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int *a5, _DWORD *a6)
{
  uint64_t v200 = 0LL;
  v201[0] = a3;
  uint64_t v199 = 0LL;
  int32x4_t v197 = 0LL;
  __src = 0LL;
  int v10 = sub_10009397C((uint64_t)v201, 1LL);
  uint64_t v11 = sub_1000CB0B0();
  int v12 = (uint64_t *)(a1 + 120);
  if (!sub_1000C1744( (const void **)(a1 + 120),  (int *)(a1 + 132),  (signed int *)(a1 + 128),  8,  1,  *(_DWORD *)(a1 + 136) + v10 + 1)) {
    return 0LL;
  }
  int v17 = *v201[0];
  if (v17 != 0xFFFF)
  {
    int v18 = *(_DWORD *)(a1 + 288);
    uint64_t v19 = v201[0] + 1;
    while ((unsigned __int16)v17 <= (unsigned __int16)(*(_WORD *)(a1 + 256) + v18)
         && (v18 >= (unsigned __int16)v17
          || *(unsigned __int8 *)(*(void *)(a1 + 272) + (unsigned __int16)v17 + ~v18) != 255))
    {
      int v20 = *v19++;
      LOWORD(v17) = v20;
      if (v20 == 0xFFFF) {
        goto LABEL_9;
      }
    }

    return 0LL;
  }

uint64_t sub_100090D48( uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(_DWORD *)(a1 + 48);
  if (v9 <= 0)
  {
    int v10 = 0;
    uint64_t v12 = *(void *)(a1 + 32);
  }

  else
  {
    int v10 = 0;
    int v11 = v9 - 1;
    uint64_t v12 = *(void *)(a1 + 32);
    do
    {
      int v13 = v10 + v11;
      if (v10 + v11 < 0 != __OFADD__(v10, v11)) {
        ++v13;
      }
      unsigned int v14 = v13 >> 1;
      else {
        int v10 = v14 + 1;
      }
    }

    while (v10 <= v11);
  }

  unint64_t v15 = *(unsigned int *)(*(void *)(v12 + 8LL * (v10 >> 8)) + 12LL * v10 + 4);
  uint64_t v16 = *(void *)(a1 + 120);
  uint64_t v17 = *(void *)(v16 + ((v15 >> 5) & 0x7FFFFF8));
  int v18 = *(unsigned __int8 *)(v17 + v15);
  unsigned int v59 = v15 + 1;
  int v19 = v18 - 1;
  if (v19)
  {
    *(_BYTE *)(v17 + v15) = v19;
    uint64_t v35 = *(void *)(a1 + 120);
    if (a3 - (int)a4 < 1)
    {
      LODWORD(v15) = v15 + 1;
    }

    else
    {
      int v36 = 0;
      unsigned int v37 = v15 + 1;
      do
      {
        int v38 = *(unsigned __int8 *)(*(void *)(v35 + 8LL * (v37 >> 8)) + v37);
        LODWORD(v15) = v37 + 1;
        if (*(_BYTE *)(*(void *)(v35 + 8LL * (v37 >> 8)) + v37))
        {
          do
          {
            else {
              int v39 = 2;
            }
            LODWORD(v15) = v39 + v15;
            --v38;
          }

          while (v38);
        }

        ++v36;
        unsigned int v37 = v15;
      }

      while (v36 != a3 - (_DWORD)a4);
    }

    uint64_t v45 = *(void *)(v35 + 8LL * (v15 >> 8));
    unsigned int v59 = v15;
    int v46 = *(unsigned __int8 *)(v45 + v15);
    for (unsigned int i = v15 + 1; v46; --v46)
    {
      else {
        int v48 = 2;
      }
      i += v48;
    }

    int v42 = i - v15;
    *a5 = sub_1000911EC(a1, &v59);
  }

  else
  {
    if (!(_DWORD)a4) {
      return sub_10008F898(a1, a2, a5, a4, (uint64_t)a5, a6, a7, a8);
    }
    int v20 = *(unsigned __int8 *)(*(void *)(v16 + 8LL * ((v15 + 1) >> 8)) + (v15 + 1));
    unsigned int v21 = v15 + 2;
    if (*(_BYTE *)(*(void *)(v16 + 8LL * ((v15 + 1) >> 8)) + (v15 + 1)))
    {
      do
      {
        else {
          int v22 = 2;
        }
        v21 += v22;
        --v20;
      }

      while (v20);
    }

    *a5 = sub_1000911EC(a1, &v59);
    int v23 = *(_DWORD *)(a1 + 48) - 1;
    *(_DWORD *)(a1 + 48) = v23;
    if (v10 < v23)
    {
      unsigned int v24 = v10;
      do
      {
        uint64_t v25 = *(void *)(a1 + 32);
        unsigned int v26 = v24 >> 8;
        unsigned int v27 = v24;
        int v28 = v24 + 1;
        uint64_t v29 = *(void *)(v25 + 8LL * ((v24 + 1) >> 8)) + 12LL * (v24 + 1);
        uint64_t v30 = *(void *)(v25 + 8LL * v26) + 12LL * v27;
        uint64_t v31 = *(void *)v29;
        *(_DWORD *)(v30 + 8) = *(_DWORD *)(v29 + 8);
        *(void *)uint64_t v30 = v31;
        int v23 = *(_DWORD *)(a1 + 48);
        unsigned int v24 = v28;
      }

      while (v28 < v23);
    }

    if (v23 >= 1)
    {
      for (int j = 0; j < v23; ++j)
      {
        uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8LL * (j >> 8));
        int v34 = *(unsigned __int16 *)(v33 + 2LL * j);
        if (v10 < v34)
        {
          *(_WORD *)(v33 + 2LL * j) = v34 - 1;
          int v23 = *(_DWORD *)(a1 + 48);
        }
      }
    }

    if (*(_DWORD *)(a1 + 20) && v10 < v23)
    {
      int v40 = v10;
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * (v40 >> 8)) + v40) = *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL * ((v40 + 1) >> 8)) + (v40 + 1));
        int v23 = *(_DWORD *)(a1 + 48);
        ++v40;
      }

      while (v40 < v23);
    }

    if (*(void *)(a1 + 208) && v10 < v23)
    {
      int v41 = v10;
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 208) + 8LL * (v41 >> 8)) + v41) = *(_BYTE *)(*(void *)(*(void *)(a1 + 208) + 8LL * ((v41 + 1) >> 8)) + (v41 + 1));
        int v23 = *(_DWORD *)(a1 + 48);
        ++v41;
      }

      while (v41 < v23);
    }

    int v42 = v21 - v15;
    if (v10 < v23)
    {
      int v43 = v10;
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * (v43 >> 8)) + v43) = *(_BYTE *)(*(void *)(*(void *)(a1 + 168) + 8LL * ((v43 + 1) >> 8)) + (v43 + 1));
        int v23 = *(_DWORD *)(a1 + 48);
        ++v43;
      }

      while (v43 < v23);
    }

    if (v10 < v23)
    {
      do
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL * (v10 >> 8)) + v10) = *(_BYTE *)(*(void *)(*(void *)(a1 + 184) + 8LL * ((v10 + 1) >> 8)) + (v10 + 1));
        ++v10;
      }

      while (v10 < *(_DWORD *)(a1 + 48));
    }
  }

  int v49 = *(_DWORD *)(a1 + 136) - v42;
  *(_DWORD *)(a1 + 136) = v49;
  int v50 = v49 - v15;
  if (v50 >= 1)
  {
    for (int k = 0; k < v50; ++k)
      *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * ((v15 + k) >> 8)) + (v15 + k)) = *(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * ((v15 + v42 + k) >> 8)) + (v15 + v42 + k));
  }

  int v52 = *(_DWORD *)(a1 + 48);
  if (v52 >= 1)
  {
    for (int m = 0; m < v52; ++m)
    {
      uint64_t v54 = *(void *)(*(void *)(a1 + 32) + 8LL * (m >> 8)) + 12LL * m;
      int v57 = *(_DWORD *)(v54 + 4);
      uint64_t v55 = (_DWORD *)(v54 + 4);
      int v56 = v57;
      if (v57 >= (int)v15 && v56 != -1)
      {
        *uint64_t v55 = v56 - v42;
        int v52 = *(_DWORD *)(a1 + 48);
      }
    }
  }

  return 1LL;
}

uint64_t sub_1000911EC(uint64_t a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*(void *)(a1 + 120) + ((v2 >> 5) & 0x7FFFFF8));
  uint64_t v4 = *a2;
  int v5 = *(unsigned __int8 *)(v3 + v4);
  unsigned int v6 = v2 + 1;
  if (*(_BYTE *)(v3 + v4))
  {
    int v8 = 0;
    uint64_t v9 = 0LL;
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 120);
      int v11 = *(unsigned __int8 *)(*(void *)(v10 + 8LL * (v6 >> 8)) + v6);
      unsigned int v12 = v6 + 1;
      if (*(char *)(*(void *)(v10 + 8LL * (v6 >> 8)) + v6) < 0)
      {
        v6 += 2;
        int v11 = v11 & 0x7F | (*(unsigned __int8 *)(*(void *)(v10 + 8LL * (v12 >> 8)) + v12) << 7);
        int v15 = *(_DWORD *)(a1 + 288);
        int v14 = v11 - v15;
        if (v11 <= v15) {
          goto LABEL_3;
        }
      }

      else
      {
        ++v6;
        int v13 = *(_DWORD *)(a1 + 288);
        int v14 = v11 - v13;
        if (v11 <= v13) {
          goto LABEL_3;
        }
      }

      uint64_t v16 = *(unsigned __int16 *)(*(void *)(a1 + 240) + 2LL * v14);
      uint64_t v17 = (unsigned __int16 *)(*(void *)(a1 + 232) + 2 * v16);
      int v20 = *v17;
      int v18 = (char *)(v17 + 1);
      int v19 = v20;
      if (v20 != 0xFFFF)
      {
        do
        {
          uint64_t v25 = *(void *)(a1 + 264);
          uint64_t v26 = ~*(_DWORD *)(a1 + 284) + v19;
          unsigned int v27 = *(unsigned __int8 *)(v25 + v26);
          if (v27 <= 0xFD)
          {
            *(_BYTE *)(v25 + v26) = v27 - 1;
            uint64_t v28 = *(void *)(a1 + 264);
            if (!*(_BYTE *)(v28 + v26))
            {
              *(_BYTE *)(v28 + v26) = -1;
              uint64_t v9 = 1LL;
            }
          }

          int v24 = *(unsigned __int16 *)v18;
          v18 += 2;
          int v19 = v24;
        }

        while (v24 != 0xFFFF);
        int v14 = v11 - *(_DWORD *)(a1 + 288);
        uint64_t v21 = v14 - 1LL;
        uint64_t v22 = *(void *)(a1 + 272);
        unsigned int v23 = *(unsigned __int8 *)(v22 + v21);
        if (v23 > 0xFD) {
          goto LABEL_3;
        }
LABEL_16:
        *(_BYTE *)(v22 + v21) = v23 - 1;
        uint64_t v29 = *(void *)(a1 + 272);
        if (!*(_BYTE *)(v29 + v21))
        {
          *(_BYTE *)(v29 + v21) = -1;
          uint64_t v30 = (_BYTE *)(*(void *)(a1 + 232) + 2 * v16);
          unsigned int v31 = (_DWORD)v18 - (_DWORD)v30;
          unint64_t v32 = (unint64_t)(v18 - v30) >> 1;
          int v33 = *(_DWORD *)(a1 + 248) - v32;
          *(_DWORD *)(a1 + 248) = v33;
          j__memmove(v30, &v30[2 * (int)v32], 2 * (v33 - (int)v16));
          unint64_t v34 = 0LL;
          do
          {
            uint64_t v37 = *(void *)(a1 + 240);
            unsigned int v38 = *(unsigned __int16 *)(v37 + 2 * v34);
            unint64_t v35 = *(unsigned __int16 *)(a1 + 256);
          }

          while (v34++ <= v35);
          if (v14 == (_DWORD)v35)
          {
            uint64_t v39 = v21;
            do
            {
              LODWORD(v35) = v35 - 1;
              *(_WORD *)(a1 + 256) = v35;
              uint64_t v40 = *(void *)(a1 + 272) + v39--;
            }

            while (*(unsigned __int8 *)(v40 - 1) == 255);
          }
        }

        goto LABEL_3;
      }

      uint64_t v21 = v14 - 1LL;
      uint64_t v22 = *(void *)(a1 + 272);
      unsigned int v23 = *(unsigned __int8 *)(v22 + v21);
      if (v23 <= 0xFD) {
        goto LABEL_16;
      }
LABEL_3:
      if (++v8 == v5) {
        goto LABEL_27;
      }
    }
  }

  uint64_t v9 = 0LL;
LABEL_27:
  *a2 = v6;
  return v9;
}

uint64_t sub_100091444(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6)
{
  int v10 = *(_DWORD *)(a1 + 304);
  unsigned int v100 = a3;
  int v11 = (4 * sub_1000CC52C((unint64_t)a4)) | 1;
  uint64_t v12 = v11;
  int v20 = (unsigned __int8 *)sub_1000CAF58(v11, v13, v14, v15, v16, v17, v18, v19);
  if (v10 == 4) {
    int v21 = 3;
  }
  else {
    int v21 = v10;
  }
  sub_1000BE0C8(v21, a4, a3, (4 * v100) | 1, (uint64_t)v20);
  sub_1000C88E4((unint64_t)v20);
  int v22 = v11;
  unsigned int v23 = v20;
  if (sub_1000BE078(v21, a4, v22, (uint64_t)v20) == 2)
  {
    sub_1000CB038(v20, v12);
    return 0LL;
  }

  int v25 = a2;
  uint64_t v91 = (int)(4 * sub_1000C88E4((unint64_t)v20) + 4);
  int v33 = (unsigned __int8 *)sub_1000CAF58(v91, v26, v27, v28, v29, v30, v31, v32);
  int v34 = *(_DWORD *)(a1 + 20);
  sub_100086568(v33, (unsigned __int16 *)a4, v34, *(_DWORD *)(a1 + 304), a1 + 312, (int *)&v100);
  uint64_t v98 = v33;
  sub_1000C88E4((unint64_t)v33);
  if (v34)
  {
    int v42 = sub_100086428((uint64_t)a4);
    int v43 = a6;
    if (v42 == 16)
    {
      uint64_t v97 = sub_1000C8B7C((char *)v20);
      uint64_t v92 = v12;
      int v44 = *(_DWORD *)(a1 + 144);
      if (v44 < 1) {
        goto LABEL_15;
      }
LABEL_11:
      if (v44 <= *(_DWORD *)(a1 + 140)) {
        int v44 = *(_DWORD *)(a1 + 140);
      }
      uint64_t v90 = (v44 + 1);
      uint64_t v45 = (unsigned __int8 *)sub_1000CAF58(v90, v35, v36, v37, v38, v39, v40, v41);
      goto LABEL_16;
    }

    uint64_t v97 = 0LL;
    uint64_t v92 = v12;
    int v44 = *(_DWORD *)(a1 + 144);
    if (v44 >= 1) {
      goto LABEL_11;
    }
  }

  else
  {
    int v25 = 0;
    int v42 = 128;
    int v43 = a6;
    uint64_t v97 = 0LL;
    uint64_t v92 = v12;
    int v44 = *(_DWORD *)(a1 + 144);
    if (v44 >= 1) {
      goto LABEL_11;
    }
  }

uint64_t sub_1000919D8(uint64_t a1, int a2, int a3, __int16 *a4, uint64_t a5, int a6, int a7)
{
  int v11 = *(_DWORD *)(a1 + 304);
  int v12 = sub_1000CC52C((unint64_t)a4);
  int v13 = 4 * v12 + 4;
  uint64_t v14 = v13;
  unint64_t v22 = sub_1000CAF58(v13, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v30 = (unsigned __int8 *)sub_1000CAF58(v13, v23, v24, v25, v26, v27, v28, v29);
  if (v11 == 4) {
    int v31 = 3;
  }
  else {
    int v31 = v11;
  }
  int v32 = *(_DWORD *)(a1 + 20);
  sub_100086568(v30, (unsigned __int16 *)a4, v32, *(_DWORD *)(a1 + 304), a1 + 312, 0LL);
  int v81 = v12;
  if (v32)
  {
    int v82 = sub_100086428((uint64_t)a4);
  }

  else
  {
    a2 = 0;
    int v82 = 128;
  }

  unint64_t v33 = sub_1000C88E4((unint64_t)v30);
  int v34 = v33;
  unsigned int v40 = sub_10008D758(a1, v30, v33, v35, v36, v37, v38, v39);
  if ((signed int)v40 >= *(_DWORD *)(a1 + 72))
  {
LABEL_16:
    uint64_t v59 = 0LL;
    goto LABEL_17;
  }

  unsigned int v48 = v40;
  uint64_t v80 = a5;
  unsigned int v83 = (unsigned __int8 *)v22;
  unint64_t v49 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v40 >> 8)) + 2LL * v40);
  unint64_t v50 = (unsigned int *)(*(void *)(*(void *)(a1 + 32) + ((v49 >> 5) & 0x7F8))
                       + 12LL
  unint64_t v51 = *v50;
  LODWORD(v22) = *v50;
  int v84 = a7;
  unsigned int v85 = v50[2];
  int v52 = *(_DWORD *)(a1 + 144);
  if (v52 <= *(_DWORD *)(a1 + 140)) {
    int v52 = *(_DWORD *)(a1 + 140);
  }
  uint64_t v79 = v52 + 1;
  unint64_t v53 = (unsigned __int8 *)sub_1000CAF58(v79, v41, v42, v43, v44, v45, v46, v47);
  uint64_t v54 = v53;
  uint64_t v55 = *(void *)(*(void *)(a1 + 96) + ((v51 >> 5) & 0x7FFFFF8));
  *unint64_t v53 = *(_BYTE *)(v55 + v51);
  uint64_t v56 = *(unsigned __int8 *)(v55 + v51);
  if ((_DWORD)v56)
  {
    LODWORD(v56) = v22 + 1;
    uint64_t v57 = v53 + 1;
    do
    {
      uint64_t v58 = *(void *)(*(void *)(a1 + 96) + 8LL * (v56 >> 8));
      *v57++ = *(_BYTE *)(v58 + v56);
      LODWORD(v58) = *(unsigned __int8 *)(v58 + v56);
      uint64_t v56 = (v56 + 1);
    }

    while ((_DWORD)v58);
  }

  uint64_t v59 = 0LL;
  if (!sub_1000C8928(v53, v30, v34, v56))
  {
    while (!a3 || sub_1000C88E4((unint64_t)v54) == v34)
    {
      if (a2)
      {
        if (v61 == 16)
        {
          int v62 = sub_1000C88E4((unint64_t)v54);
          unsigned int v63 = v22 + v62 + 1;
          uint64_t v64 = *(void *)(a1 + 96);
          uint64_t v65 = (v22 + v62 + 1);
          int v66 = *(unsigned __int8 *)(*(void *)(v64 + 8LL * (v63 >> 8)) + v65);
          if (*(_BYTE *)(*(void *)(v64 + 8LL * (v63 >> 8)) + v65))
          {
            int v67 = 0;
            do
            {
              int v66 = v67 + 1;
              ++v67;
            }

            while (v68);
          }

          unsigned int v69 = v63 + v66 + 1;
          uint64_t v70 = *(void *)(v64 + 8LL * (v69 >> 8));
          *uint64_t v54 = *(_BYTE *)(v70 + v69);
          uint64_t v71 = *(unsigned __int8 *)(v70 + v69);
          if ((_DWORD)v71)
          {
            LODWORD(v71) = v62 + v22 + v66 + 3;
            int v72 = v54 + 1;
            do
            {
              uint64_t v73 = *(void *)(*(void *)(a1 + 96) + 8LL * (v71 >> 8));
              *v72++ = *(_BYTE *)(v73 + v71);
              LODWORD(v73) = *(unsigned __int8 *)(v73 + v71);
              uint64_t v71 = (v71 + 1);
            }

            while ((_DWORD)v73);
          }
        }

        else if (v82 == 16)
        {
          if (sub_100085CF0( (unsigned __int16 *)a4,  (char *)v54,  v61,  v81,  *(_DWORD *)(a1 + 304),  a1 + 312)) {
            goto LABEL_40;
          }
        }

        else if ((v82 & v61) == 0)
        {
          goto LABEL_40;
        }
      }

      uint64_t v59 = (v59 + 1);
LABEL_40:
      if (++v48 != *(_DWORD *)(a1 + 72))
      {
        unint64_t v49 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v48 >> 8)) + 2LL * v48);
        uint64_t v74 = (unsigned int *)(*(void *)(*(void *)(a1 + 32) + ((v49 >> 5) & 0x7F8))
                             + 12LL
        unint64_t v22 = *v74;
        unsigned int v85 = v74[2];
        uint64_t v75 = *(void *)(*(void *)(a1 + 96) + ((v22 >> 5) & 0x7FFFFF8));
        *uint64_t v54 = *(_BYTE *)(v75 + v22);
        uint64_t v76 = *(unsigned __int8 *)(v75 + v22);
        if ((_DWORD)v76)
        {
          LODWORD(v76) = v22 + 1;
          uint64_t v77 = v54 + 1;
          do
          {
            uint64_t v78 = *(void *)(*(void *)(a1 + 96) + 8LL * (v76 >> 8));
            *v77++ = *(_BYTE *)(v78 + v76);
            LODWORD(v78) = *(unsigned __int8 *)(v78 + v76);
            uint64_t v76 = (v76 + 1);
          }

          while ((_DWORD)v78);
        }
      }

      break;
    }
  }

  sub_1000CB038(v54, v79);
  unint64_t v22 = (unint64_t)v83;
LABEL_17:
  sub_1000CB038(v30, v14);
  sub_1000CB038((void *)v22, v14);
  return v59;
}

uint64_t sub_100091E28(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 228);
  if ((int)v1 < 1)
  {
    LODWORD(v2) = 0;
  }

  else
  {
    uint64_t v2 = 0LL;
    while (*(unsigned __int8 *)(*(void *)(a1 + 264) + v2) != 255)
    {
      if (v1 == ++v2) {
        return 0xFFFFLL;
      }
    }
  }

  if ((_DWORD)v2 == (_DWORD)v1) {
    return 0xFFFFLL;
  }
  *(_BYTE *)(*(void *)(a1 + 264) + v2) = 0;
  return (unsigned __int16)(*(_WORD *)(a1 + 284) + v2 + 1);
}

uint64_t sub_100091E94(uint64_t a1, int a2, void *__src)
{
  uint64_t v6 = *(unsigned int *)(a1 + 224);
  if ((int)v6 < 1)
  {
    LODWORD(v7) = 0;
  }

  else
  {
    uint64_t v7 = 0LL;
    while (*(unsigned __int8 *)(*(void *)(a1 + 272) + v7) != 255)
    {
      if (v6 == ++v7) {
        return 0xFFFFLL;
      }
    }
  }

  if ((_DWORD)v7 == (_DWORD)v6) {
    return 0xFFFFLL;
  }
  uint64_t v8 = *(unsigned __int16 *)(*(void *)(a1 + 240) + 2LL * *(unsigned __int16 *)(a1 + 256) + 2);
  unsigned __int16 v10 = v7 + 1;
  *(_BYTE *)(*(void *)(a1 + 272) + v7) = 0;
  if (*(unsigned __int16 *)(a1 + 256) >= (unsigned __int16)(v7 + 1))
  {
    uint64_t v13 = (unsigned __int16)(v7 + 1) + 1LL;
    do
    {
      *(_WORD *)(*(void *)(a1 + 240) + 2 * v13) += a2;
      unint64_t v14 = v13++ - 1;
    }

    while (v14 < *(unsigned __int16 *)(a1 + 256));
    uint64_t v15 = *(unsigned __int16 *)(*(void *)(a1 + 240) + 2LL * (unsigned __int16)(v7 + 1));
    int v12 = (char *)(*(void *)(a1 + 232) + 2 * v15);
    j__memmove(&v12[2 * a2], v12, 2 * (*(_DWORD *)(a1 + 248) - (int)v15));
  }

  else
  {
    *(_WORD *)(a1 + 256) = v10;
    int v11 = (_WORD *)(*(void *)(a1 + 240) + 2LL * v10);
    v11[1] = *v11 + a2;
    int v12 = (char *)(*(void *)(a1 + 232) + 2 * v8);
  }

  memcpy(v12, __src, 2 * a2);
  *(_DWORD *)(a1 + 248) += a2;
  return (unsigned __int16)(v10 + *(_WORD *)(a1 + 288));
}

uint64_t sub_100092000(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 256);
}

uint64_t sub_100092008(uint64_t a1, int a2)
{
  if (a2 != 0xFFFFFF && *(_DWORD *)(a1 + 280) - 1 != a2)
  {
    int v2 = *(_DWORD *)(a1 + 48);
    int v5 = v2 - 1;
    if (v2 < 1)
    {
      unsigned int v3 = 1;
      return *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v3 >> 8)) + 12LL * v3 + 8);
    }

    signed int v6 = 0;
    do
    {
      int v7 = v6 + v5;
      if (v6 + v5 < 0 != __OFADD__(v6, v5)) {
        ++v7;
      }
      unsigned int v8 = v7 >> 1;
      else {
        signed int v6 = v8 + 1;
      }
    }

    while (v6 <= v5);
    unsigned int v3 = v6 + 1;
    goto LABEL_19;
  }

  int v2 = *(_DWORD *)(a1 + 48);
  if (v2 >= 1)
  {
    unsigned int v3 = 0;
    while (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v3 >> 8)) + 12LL * v3 + 8) < *(_DWORD *)(a1 + 280))
    {
      if (v2 == ++v3) {
        return 0xFFFFFFLL;
      }
    }

uint64_t sub_100092110(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  int v3 = *(_DWORD *)(a1 + 48);
  if ((int)*a2 < v3)
  {
    while (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v2 >> 8)) + 12LL * v2 + 8) < *(_DWORD *)(a1 + 280))
    {
      if (v3 == ++v2) {
        return 0xFFFFFFLL;
      }
    }
  }

  if (v2 == v3) {
    return 0xFFFFFFLL;
  }
  *a2 = v2 + 1;
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL * (v2 >> 8)) + 12LL * v2 + 8);
}

uint64_t sub_100092194(uint64_t a1)
{
  return *(unsigned int *)(a1 + 164);
}

uint64_t sub_10009219C(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if (*(int *)(result + 72) >= 1)
  {
    *(_DWORD *)(result + 52) = *(_DWORD *)(*(void *)(*(void *)(result + 32)
                                                     + 8LL * ((*(_DWORD *)(result + 48) - 1) >> 8))
    int v6 = *(_DWORD *)(result + 140);
    if (v6 <= *a3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  *(_DWORD *)(result + 52) = *(_DWORD *)(result + 280) - 1;
  int v6 = *(_DWORD *)(result + 140);
  if (v6 > *a3) {
LABEL_3:
  }
    *a3 = v6;
LABEL_4:
  int v7 = *(_DWORD *)(result + 148);
  if (v7 > *a4)
  {
    *a4 = v7;
    int v8 = *(_DWORD *)(result + 152);
    if (v8 <= *a5)
    {
LABEL_6:
      int v9 = *(_DWORD *)(result + 156);
      if (v9 <= *a6) {
        return result;
      }
LABEL_10:
      *a6 = v9;
      return result;
    }
  }

  else
  {
    int v8 = *(_DWORD *)(result + 152);
    if (v8 <= *a5) {
      goto LABEL_6;
    }
  }

  *a5 = v8;
  int v9 = *(_DWORD *)(result + 156);
  if (v9 > *a6) {
    goto LABEL_10;
  }
  return result;
}

BOOL sub_100092268(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BDA88(a2, "bmd1", a3);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v4;
  if (!sub_1000BDB78(v4, *(_DWORD *)(a1 + 24), v5)
    || !sub_1000BDB78(v6, *(_DWORD *)a1, v7)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 40), v8)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 44), v9)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 48), v10)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 52), v11)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 64), v12)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 68), v13)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 72), v14)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 88), v15)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 92), v16)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 104), v17)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 108), v18)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 112), v19)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 128), v20)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 132), v21)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 136), v22)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 140), v23)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 144), v24)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 148), v25)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 152), v26)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 156), v27)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 160), v28)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 164), v29)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 176), v30)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 180), v31)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 192), v32)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 196), v33)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 200), v34)
    || !sub_1000BDB78(v6, *(unsigned __int16 *)(a1 + 204), v35)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 216), v36)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 220), v37)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 224), v38)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 228), v39)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 248), v40)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 252), v41)
    || !sub_1000BDB78(v6, *(unsigned __int16 *)(a1 + 256), v42)
    || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 20), v43)
    || !sub_1000BDED0( v6,  *(void *)(a1 + 32),  *(_DWORD *)(a1 + 40),  256,  12,  (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000926D8,  v44)
    || !sub_1000BDE0C(v6, *(void ***)(a1 + 56), *(_DWORD *)(a1 + 64), 0x100u, 2, v45)
    || *(_DWORD *)(a1 + 20)
    && !sub_1000BDE0C(v6, *(void ***)(a1 + 80), *(_DWORD *)(a1 + 88), 0x100u, 1, v46))
  {
    goto LABEL_65;
  }

  if (!sub_1000BDE0C(v6, *(void ***)(a1 + 96), *(_DWORD *)(a1 + 104), 0x100u, 1, v46)
    || !sub_1000BDE0C(v6, *(void ***)(a1 + 120), *(_DWORD *)(a1 + 128), 0x100u, 1, v47)
    || !sub_1000BDE0C(v6, *(void ***)(a1 + 168), *(_DWORD *)(a1 + 176), 0x100u, 1, v48)
    || !sub_1000BDE0C(v6, *(void ***)(a1 + 184), *(_DWORD *)(a1 + 192), 0x100u, 1, v49)
    || *(__int16 *)(a1 + 204) != -1
    && !sub_1000BDE0C(v6, *(void ***)(a1 + 208), *(_DWORD *)(a1 + 216), 0x100u, 1, v50))
  {
    goto LABEL_65;
  }

  unint64_t v51 = *(void **)(a1 + 264);
  unsigned int v52 = v51 ? *(_DWORD *)(a1 + 228) : 0;
  uint64_t v55 = *(void **)(a1 + 272);
  unsigned int v56 = v55 ? *(_DWORD *)(a1 + 224) : 0;
  unsigned int v58 = 0;
  uint64_t v59 = *(void **)(a1 + 232);
  if (v59 && qword_1000FDCC0) {
    unsigned int v58 = *(_DWORD *)(qword_1000FDCC0 + 3928);
  }
  if (sub_1000BDBCC(v6, v59, v58, 2, v57))
  {
    int v61 = *(void **)(a1 + 240);
    if (v61) {
      unsigned int v62 = *(_DWORD *)(a1 + 224) + 2;
    }
    else {
      unsigned int v62 = 0;
    }
    BOOL v63 = sub_1000BDBCC(v6, v61, v62, 2, v60) != 0;
    sub_1000BDB48(v6);
    return v63;
  }

  else
  {
LABEL_65:
    sub_1000BDB48(v6);
    return 0LL;
  }

BOOL sub_1000926D8(uint64_t a1, int a2, int8x8_t *__ptr, uint8x8_t a4)
{
  if (a2)
  {
    v10.i32[0] = __ptr->i32[0];
    sub_1000C8E90(&v10, 4, a4);
    BOOL result = sub_1000BDDD8(a1, 4uLL, &v10);
    if ((_DWORD)result)
    {
      v10.i32[0] = __ptr->i32[1];
      sub_1000C8E90(&v10, 4, v7);
      BOOL result = sub_1000BDDD8(a1, 4uLL, &v10);
      if ((_DWORD)result)
      {
        v10.i32[0] = __ptr[1].i32[0];
        uint8x8_t v9 = &v10;
        sub_1000C8E90(&v10, 4, v8);
        return sub_1000BDDD8(a1, 4uLL, v9);
      }
    }
  }

  else
  {
    BOOL result = sub_1000BDDD8(a1, 4uLL, __ptr);
    if ((_DWORD)result)
    {
      BOOL result = sub_1000BDDD8(a1, 4uLL, (char *)__ptr + 4);
      if ((_DWORD)result)
      {
        uint8x8_t v9 = __ptr + 1;
        return sub_1000BDDD8(a1, 4uLL, v9);
      }
    }
  }

  return result;
}

BOOL sub_1000927E0( _DWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BCAE8(a2, "bmd1", a3, a4, a5, a6, a7, a8);
  if (!v9) {
    return 0LL;
  }
  uint64_t v10 = (uint64_t)v9;
  int v15 = 0;
  if (a1[6] != v15) {
    goto LABEL_75;
  }
  if (!sub_1000BCCEC(v10, a1)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 10)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 11)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 12)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 13)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 16)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 17)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 18)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 22)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 23)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 26)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 27)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 28)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 32)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 33)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 34)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 35)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 36)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 37)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 38)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 39)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 40)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 41)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 44)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 45)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 48)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 49)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 50)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 54)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 55)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 56)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 57)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 62)) {
    goto LABEL_75;
  }
  if (!sub_1000BCD38(v10, a1 + 63)) {
    goto LABEL_75;
  }
  if (!sub_1000BCCEC(v10, a1 + 5)) {
    goto LABEL_75;
  }
  int v14 = 0;
  if (!sub_1000BD870( v10,  (uint64_t *)a1 + 4,  a1[11],  256,  12,  (uint64_t (*)(uint64_t, void, uint64_t))sub_100092D9C,  &v14)
    || *((void *)a1 + 4) && v14 != a1[10])
  {
    goto LABEL_75;
  }

  int v14 = 0;
  if (!sub_1000BD6CC(v10, (uint64_t *)a1 + 7, a1[17], 256, 2, &v14)
    || *((void *)a1 + 7) && v14 != a1[16])
  {
    goto LABEL_75;
  }

  if ((!a1[5]
     || (int v14 = 0, sub_1000BD6CC(v10, (uint64_t *)a1 + 10, a1[23], 256, 1, &v14))
     && (!*((void *)a1 + 10) || v14 == a1[22]))
    && (int v14 = 0, sub_1000BD6CC(v10, (uint64_t *)a1 + 12, a1[27], 256, 1, &v14))
    && (!*((void *)a1 + 12) || v14 == a1[26])
    && (int v14 = 0, sub_1000BD6CC(v10, (uint64_t *)a1 + 15, a1[33], 256, 1, &v14))
    && (!*((void *)a1 + 15) || v14 == a1[32])
    && (int v14 = 0, sub_1000BD6CC(v10, (uint64_t *)a1 + 21, a1[45], 256, 1, &v14))
    && (!*((void *)a1 + 21) || v14 == a1[44])
    && (int v14 = 0, sub_1000BD6CC(v10, (uint64_t *)a1 + 23, a1[49], 256, 1, &v14))
    && (!*((void *)a1 + 23) || v14 == a1[48])
    && (*((__int16 *)a1 + 102) == -1
     || (int v14 = 0, sub_1000BD6CC(v10, (uint64_t *)a1 + 26, a1[55], 256, 1, &v14))
     && (!*((void *)a1 + 26) || v14 == a1[54]))
    && sub_1000BCE28(v10, *((void **)a1 + 33), a1[57], 1)
    && sub_1000BCE28(v10, *((void **)a1 + 34), a1[56], 1)
    && (!qword_1000FDCC0 ? (int v11 = 0) : (int v11 = *(_DWORD *)(qword_1000FDCC0 + 3928)),
        sub_1000BCE28(v10, *((void **)a1 + 29), v11, 2)))
  {
    BOOL v12 = sub_1000BCE28(v10, *((void **)a1 + 30), a1[56] + 2, 2);
  }

  else
  {
LABEL_75:
    BOOL v12 = 0LL;
  }

  sub_1000BCBC8(v10);
  return v12;
}

BOOL sub_100092D9C(uint64_t a1, int a2, uint64_t a3)
{
  BOOL result = sub_1000BD380(a1, 4uLL, (void *)a3);
  if (result)
  {
    if (a2)
    {
      sub_1000C8E90((int8x8_t *)a3, 4, v7);
      BOOL result = sub_1000BD380(a1, 4uLL, (void *)(a3 + 4));
      if (!result) {
        return result;
      }
      sub_1000C8E90((int8x8_t *)(a3 + 4), 4, v8);
    }

    else
    {
      BOOL result = sub_1000BD380(a1, 4uLL, (void *)(a3 + 4));
      if (!result) {
        return result;
      }
    }

    uint8x8_t v9 = (int8x8_t *)(a3 + 8);
    BOOL v10 = sub_1000BD380(a1, 4uLL, v9);
    BOOL result = v10;
    if (a2)
    {
      if (v10)
      {
        sub_1000C8E90(v9, 4, v11);
        return 1LL;
      }
    }
  }

  return result;
}

uint64_t sub_100092E58(uint64_t a1, void *a2, void *a3)
{
  *a2 = *(void *)(a1 + 232);
  *a3 = *(void *)(a1 + 240);
  return *(unsigned __int16 *)(a1 + 256);
}

uint64_t sub_100092E70(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)a1, 4, 0xFFFFFFFF);
  signed int v3 = *(_DWORD *)(a1 + 48);
  if (v3 >= 1)
  {
    for (signed int i = 0; i < v3; ++i)
    {
      uint8x8_t v5 = (unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8LL * (i >> 8)) + 12LL * i);
      unsigned int v6 = sub_1000BE644(*v5, 4, v2);
      unsigned int v7 = sub_1000BE644(v5[1], 4, v6);
      unsigned int v2 = sub_1000BE644(v5[2], 4, v7);
      signed int v3 = *(_DWORD *)(a1 + 48);
    }
  }

  unsigned int v8 = sub_1000BE644(v3, 4, v2);
  unsigned int v9 = sub_1000BE644(*(_DWORD *)(a1 + 52), 4, v8);
  if (*(int *)(a1 + 72) >= 1)
  {
    unsigned int v10 = 0;
    do
    {
      unsigned int v9 = sub_1000BE644( *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 56) + 8LL * (v10 >> 8)) + 2LL * v10),  2,  v9);
      ++v10;
    }

    while ((signed int)v10 < *(_DWORD *)(a1 + 72));
  }

  unsigned int v11 = sub_1000BE644(*(_DWORD *)(a1 + 64), 4, v9);
  unsigned int v12 = sub_1000BE644(*(_DWORD *)(a1 + 68), 4, v11);
  uint64_t v13 = sub_1000BE644(*(_DWORD *)(a1 + 72), 4, v12);
  if (*(void *)(a1 + 80) && *(int *)(a1 + 88) >= 1)
  {
    uint64_t v14 = 0LL;
    do
      uint64_t v13 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 80) + 8 * v14++), 1, 256, v13);
    while (v14 < *(int *)(a1 + 88));
  }

  if (*(int *)(a1 + 112) >= 1)
  {
    unsigned int v15 = 0;
    do
    {
      LODWORD(v13) = sub_1000BE4F8( *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL * (v15 >> 8)) + v15),  v13);
      ++v15;
    }

    while ((signed int)v15 < *(_DWORD *)(a1 + 112));
  }

  unsigned int v16 = sub_1000BE644(*(_DWORD *)(a1 + 104), 4, v13);
  unsigned int v17 = sub_1000BE644(*(_DWORD *)(a1 + 108), 4, v16);
  unsigned int v18 = sub_1000BE644(*(_DWORD *)(a1 + 112), 4, v17);
  if (*(int *)(a1 + 136) >= 1)
  {
    unsigned int v19 = 0;
    do
    {
      unsigned int v18 = sub_1000BE4F8(*(_BYTE *)(*(void *)(*(void *)(a1 + 120) + 8LL * (v19 >> 8)) + v19), v18);
      ++v19;
    }

    while ((signed int)v19 < *(_DWORD *)(a1 + 136));
  }

  unsigned int v20 = sub_1000BE644(*(_DWORD *)(a1 + 128), 4, v18);
  unsigned int v21 = sub_1000BE644(*(_DWORD *)(a1 + 132), 4, v20);
  unsigned int v22 = sub_1000BE644(*(_DWORD *)(a1 + 136), 4, v21);
  unsigned int v23 = sub_1000BE644(*(_DWORD *)(a1 + 140), 4, v22);
  unsigned int v24 = sub_1000BE644(*(_DWORD *)(a1 + 144), 4, v23);
  unsigned int v25 = sub_1000BE644(*(_DWORD *)(a1 + 148), 4, v24);
  unsigned int v26 = sub_1000BE644(*(_DWORD *)(a1 + 152), 4, v25);
  unsigned int v27 = sub_1000BE644(*(_DWORD *)(a1 + 156), 4, v26);
  unsigned int v28 = sub_1000BE644(*(_DWORD *)(a1 + 160), 4, v27);
  uint64_t v29 = sub_1000BE644(*(_DWORD *)(a1 + 164), 4, v28);
  if (*(void *)(a1 + 168) && *(int *)(a1 + 176) >= 1)
  {
    uint64_t v30 = 0LL;
    do
      uint64_t v29 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 168) + 8 * v30++), 1, 256, v29);
    while (v30 < *(int *)(a1 + 176));
  }

  if (*(void *)(a1 + 184) && *(int *)(a1 + 192) >= 1)
  {
    uint64_t v31 = 0LL;
    do
      uint64_t v29 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 184) + 8 * v31++), 1, 256, v29);
    while (v31 < *(int *)(a1 + 192));
  }

  unsigned int v32 = sub_1000BE644(*(_DWORD *)(a1 + 200), 4, v29);
  unsigned int v33 = sub_1000BE644(*(_DWORD *)(a1 + 224), 4, v32);
  uint64_t v34 = sub_1000BE644(*(_DWORD *)(a1 + 228), 4, v33);
  uint64_t v35 = sub_1000BE770(*(unint64_t **)(a1 + 232), 2, *(_DWORD *)(a1 + 252), v34);
  unsigned int v36 = sub_1000BE770(*(unint64_t **)(a1 + 240), 2, *(_DWORD *)(a1 + 224) + 2, v35);
  unsigned int v37 = sub_1000BE644(*(_DWORD *)(a1 + 248), 4, v36);
  unsigned int v38 = sub_1000BE644(*(_DWORD *)(a1 + 252), 4, v37);
  uint64_t v39 = sub_1000BE644(*(unsigned __int16 *)(a1 + 256), 2, v38);
  uint64_t v40 = sub_1000BE770(*(unint64_t **)(a1 + 264), 1, *(_DWORD *)(a1 + 228), v39);
  unsigned int v41 = sub_1000BE770(*(unint64_t **)(a1 + 272), 1, *(_DWORD *)(a1 + 224), v40);
  unsigned int v42 = sub_1000BE644(*(_DWORD *)(a1 + 280), 4, v41);
  unsigned int v43 = sub_1000BE644(*(_DWORD *)(a1 + 284), 4, v42);
  unsigned int v44 = sub_1000BE644(*(_DWORD *)(a1 + 288), 4, v43);
  unsigned int v45 = sub_1000BE644(*(_DWORD *)(a1 + 304), 4, v44);
  unsigned int v46 = sub_1000BE644(*(_DWORD *)(a1 + 312), 4, v45);
  uint64_t v47 = sub_1000BE644(*(_DWORD *)(a1 + 316), 4, v46);
  return sub_1000BE770((unint64_t *)(a1 + 320), 4, 8, v47);
}

uint64_t sub_1000932D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6)
{
  uint64_t v7 = (uint64_t)a5;
  int v8 = *a5;
  if (v8 <= a2)
  {
    unint64_t v12 = sub_100099EE0((unint64_t)a5);
    uint64_t v13 = sub_1000791D4(a1, v12);
    uint64_t result = sub_100079538(a1, v12, v7, v13, a6, v14, v15, v16);
    *(_WORD *)(a6 + 2LL * (int)result) = -1;
  }

  else
  {
    unsigned int v9 = (_WORD *)a6;
    if (v8 != 0xFFFF)
    {
      unsigned int v9 = (_WORD *)a6;
      do
      {
        uint64_t v18 = *(unsigned __int16 *)(a4 + 2LL * (v8 - a2));
        int v19 = *(unsigned __int16 *)(a3 + 2 * v18);
        if (v19 != 0xFFFF)
        {
          unsigned int v20 = (unsigned __int16 *)(a3 + 2 + 2 * v18);
          do
          {
            *v9++ = v19;
            int v21 = *v20++;
            LOWORD(v19) = v21;
          }

          while (v21 != 0xFFFF);
        }

        int v17 = *(unsigned __int16 *)(v7 + 2);
        v7 += 2LL;
        int v8 = v17;
      }

      while (v17 != 0xFFFF);
    }

    _WORD *v9 = -1;
    return ((unint64_t)v9 - a6) >> 1;
  }

  return result;
}

BOOL sub_1000933B4(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v6 = a2;
  int v8 = *a1;
  int v9 = *a2;
  if (v8 > a4)
  {
    if (v9 > a4)
    {
      if (v8 == 0xFFFF) {
        return v9 == 0xFFFF;
      }
      unsigned int v10 = a1 + 1;
      while (v8 == *v6 || *(__int16 *)(a5 + 2LL * *(unsigned __int16 *)(a6 + 2LL * (v8 - a4))) == -1)
      {
        ++v6;
        int v11 = *v10++;
        int v8 = v11;
        if (v11 == 0xFFFF)
        {
          int v9 = *v6;
          return v9 == 0xFFFF;
        }
      }
    }

    return 0LL;
  }

  if (v9 > a4) {
    return 0LL;
  }
  unint64_t v14 = sub_100099EE0((unint64_t)a1);
  uint64_t v15 = sub_1000791D4(a3, v14);
  uint64_t v16 = 2LL * (int)v15;
  unsigned int v24 = (void *)sub_1000CAF58(v16, v17, v18, v19, v20, v21, v22, v23);
  int v28 = sub_100079538(a3, v14, (uint64_t)a1, v15, (uint64_t)v24, v25, v26, v27);
  unint64_t v29 = sub_100099EE0((unint64_t)v6);
  uint64_t v30 = sub_1000791D4(a3, v29);
  unsigned int v38 = (void *)sub_1000CAF58(2LL * (int)v30, v31, v32, v33, v34, v35, v36, v37);
  sub_1000CB038(v38, 2LL * (int)v30);
  sub_1000CB038(v24, v16);
  return v12;
}

uint64_t sub_10009354C( unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v12 = sub_100099EE0((unint64_t)a1);
  uint64_t result = memcmp(a1, a2, 2 * v12);
  if ((_DWORD)result) {
    return sub_1000933B4(a1, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_1000935F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  uint64_t v5 = (uint64_t)a5;
  int v6 = *a5;
  if (v6 <= a2)
  {
    unint64_t v9 = sub_100099EE0((unint64_t)a5);
    return sub_100079538(a1, v9, v5, 0LL, 0LL, v10, v11, v12);
  }

  else if (v6 == 0xFFFF)
  {
    return 0LL;
  }

  else
  {
    uint64_t result = 0LL;
    do
    {
      uint64_t v14 = *(unsigned __int16 *)(a4 + 2LL * (v6 - a2));
      if (*(__int16 *)(a3 + 2 * v14) != -1)
      {
        uint64_t v15 = (__int16 *)(a3 + 2 + 2 * v14);
        do
        {
          uint64_t result = (result + 1);
          int v16 = *v15++;
        }

        while (v16 != -1);
      }

      int v13 = *(unsigned __int16 *)(v5 + 2);
      v5 += 2LL;
      int v6 = v13;
    }

    while (v13 != 0xFFFF);
  }

  return result;
}

uint64_t sub_10009369C( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6, _WORD *a7)
{
  uint64_t result = 0LL;
  if (a3 && (int)a5 >= 1)
  {
    uint64_t v20 = (a5 + 1);
    uint64_t v21 = a7 + 1;
    uint64_t v11 = 1LL;
    do
    {
      uint64_t v12 = *(unsigned __int16 *)(a4 + 2 * v11);
      uint64_t v13 = v11 + 1;
      if (*(unsigned __int16 *)(a4 + 2 * (v11 + 1)) != (_DWORD)v12 && *(__int16 *)(a3 + 2 * v12) != -1)
      {
        uint64_t v14 = 2 * v12;
        uint64_t v15 = a6;
        do
        {
          int v16 = *(unsigned __int16 *)(a3 + v14);
          int v17 = *v15;
          if (v16 == 0xFFFF)
          {
            if (v17 == 0xFFFF)
            {
              *a7 = v11 + a1;
              a7[1] = -1;
              return 1LL;
            }

            if (sub_10009369C(a1, a2, a3, a4, a5, v15, v21))
            {
              *a7 = v11 + a1;
              return 1LL;
            }
          }

          ++v15;
          v14 += 2LL;
        }

        while (v16 == v17);
      }

      ++v11;
    }

    while (v13 != v20);
    return 0LL;
  }

  return result;
}

_WORD **sub_1000937DC(_WORD **result, unsigned __int16 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v4 = *result;
    int v5 = *a2;
    if (v5 != 0xFFFF) {
      goto LABEL_5;
    }
    while (1)
    {
      _WORD *v4 = -1;
      ++a2;
      if (++v3 == a3) {
        break;
      }
      uint64_t v4 = result[v3];
      int v5 = *a2;
      if (v5 != 0xFFFF)
      {
        do
        {
LABEL_5:
          *v4++ = v5;
          int v6 = a2[1];
          ++a2;
          LOWORD(v5) = v6;
        }

        while (v6 != 0xFFFF);
      }
    }
  }

  return result;
}

uint64_t sub_10009383C(uint64_t result, char *a2, int a3)
{
  if (a3 >= 1)
  {
    for (uint64_t i = 0LL; i != a3; ++i)
    {
      uint64_t v4 = *(_WORD **)(result + 8 * i);
      int v6 = *a2++;
      for (int j = v6; j; --j)
      {
        while (1)
        {
          __int16 v8 = *a2;
          if ((*a2 & 0x80000000) == 0) {
            break;
          }
          __int16 v7 = a2[1];
          a2 += 2;
          *v4++ = v8 & 0x7F | (v7 << 7);
          if (!--j) {
            goto LABEL_3;
          }
        }

        ++a2;
        *v4++ = v8;
      }

unint64_t sub_1000938B8(unint64_t result, _BYTE *a2, int a3)
{
  if (a3 >= 1)
  {
    unint64_t v4 = result;
    uint64_t v5 = 0LL;
    uint64_t v6 = a3;
    do
    {
      __int16 v7 = *(unsigned __int16 **)(v4 + 8 * v5);
      uint64_t result = sub_100099EE0((unint64_t)v7);
      *a2 = result;
      __int16 v8 = a2 + 1;
      if ((int)result >= 1)
      {
        do
        {
          while (1)
          {
            unsigned int v11 = *v7++;
            unsigned int v10 = v11;
            char v12 = v11;
            if (v11 < 0x80) {
              break;
            }
            v8[1] = v10 >> 7;
            unint64_t v9 = v8 + 2;
            *__int16 v8 = v12 | 0x80;
            v8 += 2;
            uint64_t result = (result - 1);
            if (!(_DWORD)result) {
              goto LABEL_3;
            }
          }

          unint64_t v9 = v8 + 1;
          *v8++ = v12;
          uint64_t result = (result - 1);
        }

        while ((_DWORD)result);
      }

      else
      {
        unint64_t v9 = v8;
      }

uint64_t sub_10009397C(uint64_t a1, uint64_t a2)
{
  if ((int)a2 >= 1)
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = a2;
    do
    {
      unint64_t v4 = *(unsigned __int16 **)(a1 + 8 * v2);
      unsigned int v5 = *v4;
      if (v5 != 0xFFFF)
      {
        uint64_t v6 = v4 + 1;
        do
        {
          if (v5 <= 0x7F) {
            int v7 = 1;
          }
          else {
            int v7 = 2;
          }
          a2 = (v7 + a2);
          unsigned int v8 = *v6++;
          unsigned int v5 = v8;
        }

        while (v8 != 0xFFFF);
      }

      ++v2;
    }

    while (v2 != v3);
  }

  return a2;
}

BOOL sub_1000939DC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a1;
  if (v2 == 0xFFFF) {
    return (__int16)*a2 == -1;
  }
  uint64_t v3 = a1 + 1;
  while (v2 == *a2)
  {
    ++a2;
    int v4 = *v3++;
    int v2 = v4;
    if (v4 == 0xFFFF) {
      return (__int16)*a2 == -1;
    }
  }

  return 0LL;
}

uint64_t sub_100093A24(unsigned __int16 *a1, int a2)
{
  int v2 = *a1;
  if (v2 == 0xFFFF)
  {
    LOBYTE(v3) = -2;
    return v3;
  }

  int v5 = 0;
  int v3 = 254;
  int v6 = -2;
  uint64_t v7 = 1LL;
  do
  {
    if (v6 == -508) {
      return 254LL;
    }
    if (v2 == a2)
    {
      if (v5) {
        return 254LL;
      }
      int v3 = v7;
      int v5 = 1;
    }

    int v2 = a1[v7++];
    v6 -= 2;
  }

  while (v2 != 0xFFFF);
  if (v3 == 254) {
    return v3;
  }
  j__memmove(&a1[v3 - 1], &a1[v3], -(v6 + 2 * v3));
  return v3;
}

char *sub_100093AE4(char *result, int a2, __int16 a3)
{
  if (a2 != 254)
  {
    int v5 = result;
    int v6 = sub_100099EE0((unint64_t)result);
    uint64_t v7 = &v5[2 * a2];
    uint64_t result = (char *)j__memmove(v7, v7 - 2, 2 * (v6 - a2) + 4);
    *((_WORD *)v7 - 1) = a3;
  }

  return result;
}

uint64_t sub_100093B40(signed int *a1)
{
  uint64_t v1 = a1;
  signed int v2 = *a1;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (v2 >= 1)
  {
    do
    {
      unsigned int v7 = sub_1000BE644(v2, 4, v3);
      if (*v1 >= 1)
      {
        uint64_t v8 = 0LL;
        uint64_t v9 = 0LL;
        do
        {
          unsigned int v10 = sub_1000BE644(*(_DWORD *)(*((void *)v1 + 1) + v8), 4, v7);
          unsigned int v7 = sub_1000BE644(*(_DWORD *)(*((void *)v1 + 1) + v8 + 4), 4, v10);
          ++v9;
          v8 += 8LL;
        }

        while (v9 < *v1);
      }

      uint64_t v11 = sub_1000BE644(v1[1], 4, v7);
      if (v1[1] >= 1)
      {
        uint64_t v12 = 0LL;
        uint64_t v13 = 0LL;
        do
        {
          unsigned int v14 = sub_1000BE644(*(_DWORD *)(*((void *)v1 + 3) + v12), 4, v11);
          unsigned int v15 = sub_1000BE644(*(_DWORD *)(*((void *)v1 + 3) + v12 + 4), 4, v14);
          uint64_t v11 = sub_1000BE644(*(_DWORD *)(*((void *)v1 + 3) + v12 + 8), 4, v15);
          ++v13;
          v12 += 12LL;
        }

        while (v13 < v1[1]);
      }

      unsigned int v5 = sub_1000BE4A0(*((void *)v1 + 5), v11);
      uint64_t v3 = sub_1000BE644(v1[14], 4, v5);
      int v6 = v1[16];
      v1 += 16;
      signed int v2 = v6;
    }

    while (v6 > 0);
  }

  return v3;
}

int *sub_100093C84( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = sub_1000BCAE8(a1, "bn0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  int v43 = 0;
  if (sub_1000BCD38((uint64_t)v8, &v43))
  {
    sub_1000C0BFC(((uint64_t)v43 << 6) + 64, v10, v11, v12, v13, v14, v15, v16);
    uint64_t v18 = v17;
    if (v43 >= 1)
    {
      int v19 = 0;
      uint64_t v20 = v17;
      do
      {
        if (!sub_1000BCD38(v9, v20)) {
          break;
        }
        if (!sub_1000BCD38(v9, v20 + 1)) {
          break;
        }
        *((void *)v20 + 5) = *((void *)v20 + 6);
        int v42 = 0;
        if (!sub_1000BCD38(v9, &v42)) {
          break;
        }
        v20[14] = v42;
        sub_1000C0BFC(8LL * *v20, v21, v22, v23, v24, v25, v26, v27);
        *((void *)v20 + 2) = v28;
        if (*v20 >= 1)
        {
          uint64_t v36 = 0LL;
          uint64_t v37 = 0LL;
          do
          {
            if (!sub_1000BCCEC(v9, (_DWORD *)(*((void *)v20 + 2) + v36 + 4))) {
              break;
            }
            ++v37;
            v36 += 8LL;
          }

          while (v37 < *v20);
          uint64_t v28 = *((void *)v20 + 2);
        }

        *((void *)v20 + 1) = v28;
        sub_1000C0BFC(12LL * v20[1], v29, v30, v31, v32, v33, v34, v35);
        *((void *)v20 + 4) = v38;
        if (v20[1] >= 1)
        {
          uint64_t v39 = 0LL;
          uint64_t v40 = 0LL;
          do
          {
            int v42 = 0;
            if (!sub_1000BCD38(v9, &v42)) {
              break;
            }
            *(_DWORD *)(*((void *)v20 + 4) + v39) = v42;
            int v42 = 0;
            if (!sub_1000BCD38(v9, &v42)) {
              break;
            }
            *(_DWORD *)(*((void *)v20 + 4) + v39 + 4) = v42;
            ++v40;
            v39 += 12LL;
          }

          while (v40 < v20[1]);
        }

        *((void *)v20 + 3) = *((void *)v20 + 4);
        v20 += 16;
        ++v19;
      }

      while (v19 < v43);
    }
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  sub_1000BCBC8(v9);
  return v18;
}

int *sub_100093EA4(int *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (*result >= 1)
    {
      signed int v2 = result + 8;
      do
      {
        sub_1000C0EF8(*((void *)v2 + 2));
        sub_1000C0EF8(*((void *)v2 - 2));
        sub_1000C0EF8(*(void *)v2);
        int v3 = v2[8];
        v2 += 16;
      }

      while (v3 > 0);
    }

    return (int *)sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_100093F04(int a1, int a2)
{
  uint64_t v4 = sub_1000C1074(48LL);
  uint64_t v5 = v4;
  if (!v4) {
    return v5;
  }
  int v6 = (unsigned __int16)(100 * a1 / (1000 * a2));
  *(_DWORD *)(v4 + 28) = v6;
  uint64_t v7 = sub_1000C1074((2 * v6));
  *(void *)(v5 + 16) = v7;
  if (!v7)
  {
    sub_1000C0EF8(0LL);
    sub_1000C0EF8(v5);
    return 0LL;
  }

  *(_WORD *)(v5 + 4) = (unsigned __int16)(100 * a2 / a1) << 7;
  uint64_t v8 = qword_1000FDCC0;
  if (!qword_1000FDCC0)
  {
    char v9 = 7;
    *(_DWORD *)(v5 + 24) = 7;
    goto LABEL_13;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 2868))
  {
    char v9 = 11;
    *(_DWORD *)(v5 + 24) = 11;
    if (!*(_DWORD *)(v8 + 2852)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (*(_DWORD *)(qword_1000FDCC0 + 2888))
  {
    *(_DWORD *)(v5 + 40) = 1;
    char v9 = 6;
    *(_DWORD *)(v5 + 24) = 6;
    if (!*(_DWORD *)(v8 + 2852)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  char v9 = 7;
  *(_DWORD *)(v5 + 24) = 7;
  if (*(_DWORD *)(v8 + 2852)) {
LABEL_12:
  }
    *(_DWORD *)(v5 + 44) = 1;
LABEL_13:
  if (*(_DWORD *)(v5 + 44))
  {
    *(_DWORD *)(v5 + 6) = 0x7FFF;
    if (*(_DWORD *)(v5 + 40)) {
      int v11 = 80;
    }
    else {
      int v11 = 40;
    }
    *(_WORD *)(v5 + 10) = v11 << v9;
    return v5;
  }

  else
  {
    int v12 = 100 << v9;
    *(_WORD *)(v5 + 6) = v12;
    unsigned int v13 = 200 << v9;
    if (v13 >= 0x8000) {
      LOWORD(v13) = 0x7FFF;
    }
    *(_WORD *)(v5 + 8) = v13;
    *(_WORD *)(v5 + 10) = 0;
    return v5;
  }

uint64_t sub_100094084(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_1000C0EF8(*(void *)(result + 16));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_1000940B4(uint64_t result)
{
  if (*(_DWORD *)(result + 44))
  {
    *(_DWORD *)(result + 6) = 0x7FFF;
    int v1 = *(_DWORD *)(result + 24);
    if (*(_DWORD *)(result + 40)) {
      int v2 = 80 << v1;
    }
    else {
      int v2 = 40 << v1;
    }
    *(_WORD *)(result + 10) = v2;
  }

  else
  {
    int v3 = *(_DWORD *)(result + 24);
    int v4 = 100 << v3;
    if (100 << v3 >= 0x8000) {
      LOWORD(v4) = 0x7FFF;
    }
    *(_WORD *)(result + 6) = v4;
    int v5 = 200 << v3;
    if (v5 >= 0x8000) {
      LOWORD(v5) = 0x7FFF;
    }
    *(_WORD *)(result + 8) = v5;
    *(_WORD *)(result + 10) = 0;
  }

  return result;
}

uint64_t sub_100094128(uint64_t result)
{
  *(_DWORD *)uint64_t result = 0;
  *(_DWORD *)(result + 32) = 0;
  if (*(int *)(result + 28) >= 1)
  {
    uint64_t v1 = 0LL;
    do
      *(_WORD *)(*(void *)(result + 16) + 2 * v1++) = 0;
    while (v1 < *(int *)(result + 28));
  }

  *(_DWORD *)(result + 36) = 0;
  if (*(_DWORD *)(result + 44))
  {
    *(_DWORD *)(result + 6) = 0x7FFF;
    if (*(_DWORD *)(result + 40)) {
      int v2 = 80;
    }
    else {
      int v2 = 40;
    }
    *(_WORD *)(result + 10) = v2 << *(_DWORD *)(result + 24);
  }

  return result;
}

uint64_t sub_100094190(uint64_t a1, int a2)
{
  int v2 = *(__int16 *)(a1 + 6);
  LOWORD(v3) = a2;
  if (v2 < a2) {
    int v3 = v2 + ((2 * (a2 - v2) * *(__int16 *)(a1 + 4) + 0x8000) >> 16);
  }
  *(_WORD *)(a1 + 6) = v3;
  int v4 = (__int16)(*(_WORD *)(a1 + 10) + v3);
  if (v4 <= a2) {
    int v4 = a2;
  }
  int v5 = *(__int16 *)(a1 + 8);
  if (v4 < v5) {
    int v4 = v5 + ((2 * (a2 - v5) * *(__int16 *)(a1 + 4) + 0x8000) >> 16);
  }
  *(_WORD *)(a1 + 8) = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(int *)(a1 + 32);
  *(_DWORD *)a1 += a2 - *(__int16 *)(v6 + 2 * v7);
  *(_DWORD *)(a1 + 32) = v7 + 1;
  *(_WORD *)(v6 + 2 * v7) = a2;
  int v8 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32) >= v8) {
    *(_DWORD *)(a1 + 32) = 0;
  }
  int v9 = *(__int16 *)(a1 + 6);
  int v10 = *(__int16 *)(a1 + 8) - v9;
  if (*(_DWORD *)(a1 + 36) == 2) {
    char v11 = 12;
  }
  else {
    char v11 = 14;
  }
  int v12 = v8 * (__int16)(v9 + (((v10 << v11) + 0x4000) >> 15));
  BOOL v13 = *(_DWORD *)a1 <= v12;
  BOOL v14 = *(_DWORD *)a1 > v12;
  if (v13) {
    int v15 = 1;
  }
  else {
    int v15 = 2;
  }
  *(_DWORD *)(a1 + 36) = v15;
  return (a2 > (__int16)(v9 + (((v10 << 13) + 0x4000) >> 15))) | (2 * v14);
}

uint64_t sub_10009429C(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 6);
  a2[1] = *(_WORD *)(result + 8);
  return result;
}

uint64_t sub_1000942B0(uint64_t result, _WORD *a2)
{
  *(_WORD *)(result + 6) = *a2;
  *(_WORD *)(result + 8) = a2[1];
  return result;
}

uint64_t sub_1000942C4( uint64_t a1, unint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v14 = (unsigned __int16 *)a2;
  *a4 = -1;
  unint64_t v16 = sub_1000CC52C(a2);
  uint64_t v24 = v16;
  if ((_DWORD)v16)
  {
    uint64_t v38 = a6;
    uint64_t v25 = 2LL * ((int)v16 + 1);
    unint64_t v26 = sub_1000CAF58(v25, v17, v18, v19, v20, v21, v22, v23);
    uint64_t v27 = (void *)v26;
    uint64_t v37 = v25;
    if ((int)v24 < 1)
    {
      uint64_t v28 = 0LL;
    }

    else
    {
      unsigned int v36 = a5;
      uint64_t v28 = v24;
      uint64_t v24 = v24;
      uint64_t v29 = (_WORD *)v26;
      do
      {
        unsigned int v30 = *v14++;
        *v29++ = sub_1000CDD20(v30);
        --v24;
      }

      while (v24);
      a5 = v36;
    }

    *((_WORD *)v27 + v28) = 0;
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void *, uint64_t, _WORD *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16))( a1,  v27,  a3,  a4,  a5,  v38,  a7,  a8);
    if ((_DWORD)v24 && *(void *)(a1 + 152)) {
      uint64_t v24 = sub_100094CE8(a1, v24, (uint64_t)a4, a5, v31, v32, v33, v34);
    }
    sub_1000CB038(v27, v37);
  }

  return v24;
}

uint64_t sub_1000943F4( uint64_t a1, char *a2, int a3, uint64_t a4, _WORD *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  *a5 = -1;
  int v15 = sub_1000C88E4((unint64_t)a2) + 1;
  uint64_t v23 = (void *)sub_1000CAF58(2LL * v15, v16, v17, v18, v19, v20, v21, v22);
  sub_1000BE124(a3, a2, v15, (uint64_t)v23);
  uint64_t v24 = sub_1000942C4(a1, (unint64_t)v23, a4, a5, a6, a7, a8, a9);
  sub_1000CB038(v23, 2LL * v15);
  return v24;
}

uint64_t sub_1000944C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(a1 + 24);
  if (v1) {
    return v1();
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t *sub_1000944DC( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1000BCAE8(a1, "bpm0", a2, a4, a5, a6, a7, a8);
  if (result)
  {
    uint64_t v9 = (uint64_t)result;
    uint64_t v10 = sub_100094520((uint64_t)result);
    sub_1000BCBC8(v9);
    return (uint64_t *)v10;
  }

  return result;
}

uint64_t sub_100094520(uint64_t a1)
{
  int v3 = 0;
  if (!sub_1000BCD38(a1, &v3)) {
    return 0LL;
  }
  switch(v3)
  {
    case 0:
      uint64_t result = sub_100098D94(a1);
      break;
    case 1:
      uint64_t result = (uint64_t)sub_100096FD0(a1);
      break;
    case 2:
      uint64_t result = sub_100095BBC(a1);
      break;
    case 3:
      uint64_t result = sub_100096870(a1);
      break;
    case 4:
      uint64_t result = (uint64_t)sub_1000972B4(a1);
      break;
    case 5:
      uint64_t result = (uint64_t)sub_1000978B0(a1);
      break;
    default:
      return 0LL;
  }

  return result;
}

uint64_t sub_10009460C(uint64_t *a1)
{
  return sub_10007A9B0(a1[7]);
}

uint64_t sub_10009464C(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = 0LL;
  int v16 = 0;
  sub_10007A9E8(*(void *)(a1 + 80), *(unsigned __int16 *)(a1 + 96), &v17, &v16);
  if ((int)a4 >= 1)
  {
    int v7 = 0;
    int v8 = 1;
    uint64_t v9 = a2;
    uint64_t result = a4;
    while (1)
    {
      int v11 = (unsigned __int16)*a2;
      if (v11 == 0xFFFF)
      {
        if (v8) {
          uint64_t result = (result - 1);
        }
        else {
          *v9++ = -1;
        }
        int v7 = 0;
        LODWORD(a4) = a4 - 1;
        int v8 = 1;
        goto LABEL_4;
      }

      int v12 = *(unsigned __int16 *)(a1 + 68);
      if (v7)
      {
        if (v11 != v12)
        {
          uint64_t v13 = v16;
          if (v16 < 1)
          {
LABEL_14:
            int v7 = 1;
          }

          else
          {
            BOOL v14 = v17;
            while (1)
            {
              int v15 = *v14++;
              if (v11 == v15) {
                break;
              }
              if (!--v13) {
                goto LABEL_14;
              }
            }

            int v7 = 0;
            *v9++ = v12;
            LOWORD(v11) = *a2;
          }

          goto LABEL_20;
        }
      }

      else if (v11 != v12)
      {
        int v7 = 0;
LABEL_20:
        int v8 = 0;
        *v9++ = v11;
        goto LABEL_4;
      }

      int v7 = 1;
LABEL_4:
      ++a2;
    }
  }

  return a4;
}

uint64_t sub_100094760( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a4;
  if ((int)a4 < 1)
  {
    int v15 = (void *)sub_1000CAF58(0LL, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v17 = 0LL;
    goto LABEL_98;
  }

  uint64_t v9 = (char *)a2;
  uint64_t v11 = 0LL;
  int v12 = a4;
  do
  {
    int v13 = *(__int16 *)(a2 + 2 * v11++);
    v12 -= v13 == -1;
  }

  while (v12);
  BOOL v14 = (void *)sub_1000CAF58(v11, a2, a3, a4, a5, a6, a7, a8);
  int v15 = v14;
  if (!(_DWORD)v11)
  {
    uint64_t v80 = 0LL;
    unsigned int v81 = v8;
    int v16 = 0;
LABEL_9:
    uint64_t v18 = (__int16 *)v9;
    int v82 = v9;
    int v84 = v15;
    while (1)
    {
      int v83 = v8;
      uint64_t v19 = 0LL;
      uint64_t v20 = 0xFFFFFFFF00000000LL;
      uint64_t v21 = 0xFFFFFFFE00000000LL;
      do
      {
        int v22 = v18[v19];
        v20 += (uint64_t)&_mh_execute_header;
        v21 += (uint64_t)&_mh_execute_header;
        ++v19;
      }

      while (v22 != -1);
      if (v18[v21 >> 32] != *(_WORD *)(a1 + 70))
      {
        *((_BYTE *)v15 + (((char *)v18 - v9) >> 1) + (v20 >> 32) - 1) = 1;
        ++v16;
      }

      int v23 = v19 - 1;
      unsigned int v24 = *(unsigned __int16 *)(a1 + 96);
      uint64_t v25 = *(void *)(a1 + 80);
      int v88 = 0LL;
      int v87 = 0;
      sub_10007A9E8(v25, v24, &v88, &v87);
      if (v23 >= 1 && v87 >= 1) {
        break;
      }
      do
LABEL_22:
        int v32 = *v18++;
      while (v32 != -1);
LABEL_10:
      LODWORD(v8) = v83 - 1;
      if (v83 <= 1) {
        goto LABEL_91;
      }
    }

    int v26 = 0;
    uint64_t v27 = (unsigned __int16 *)v18;
LABEL_18:
    int v86 = v27;
    int v28 = *v27;
    uint64_t v29 = v88;
    uint64_t v30 = v87;
    while (1)
    {
      int v31 = *v29++;
      if (v28 == v31) {
        break;
      }
      if (!--v30)
      {
        ++v26;
        uint64_t v27 = v86 + 1;
        if (v23 == v26) {
          goto LABEL_22;
        }
        goto LABEL_18;
      }
    }

    int v85 = v16;
    unsigned int v33 = *(unsigned __int16 *)(a1 + 96);
    uint64_t v34 = *(void *)(a1 + 80);
    int v88 = 0LL;
    int v87 = 0;
    sub_10007A9E8(v34, v33, &v88, &v87);
    if (v87 <= 0)
    {
      do
LABEL_30:
        int v42 = *v18++;
      while (v42 != -1);
      int v15 = v84;
      int v16 = v85;
      goto LABEL_10;
    }

    int v35 = 0;
    unsigned int v36 = &v18[v20 >> 32];
    while (1)
    {
      int v38 = (unsigned __int16)*--v36;
      int v37 = v38;
      uint64_t v39 = v88;
      uint64_t v40 = v87;
      do
      {
        int v41 = *v39++;
        if (v37 == v41)
        {
          while (1)
          {
            unsigned int v44 = *(unsigned __int16 *)(a1 + 98);
            unint64_t v45 = (unint64_t)((char *)v36 - (char *)v18) >> 1;
            uint64_t v46 = *(void *)(a1 + 80);
            int v88 = 0LL;
            int v87 = 0;
            sub_10007A9E8(v46, v44, &v88, &v87);
            uint64_t v47 = 0LL;
            if (v87 >= 1) {
              break;
            }
            uint64_t v47 = 0LL;
            if (v36 > v18)
            {
LABEL_47:
              if (*(v36 - 1) == *(_WORD *)(a1 + 68)) {
                uint8x8_t v54 = v36 - 1;
              }
              else {
                uint8x8_t v54 = v36;
              }
              unint64_t v45 = (unint64_t)((char *)v54 - (char *)v18) >> 1;
              unsigned int v36 = v54;
              goto LABEL_53;
            }

LABEL_81:
                int v72 = 1;
                int v74 = v64[1];
                ++v64;
                int v73 = v74;
                if (v74 == 0xFFFF) {
                  goto LABEL_84;
                }
LABEL_83:
LABEL_84:
                if (!v72) {
                  goto LABEL_32;
                }
                do
LABEL_85:
                  int v75 = (__int16)*v64++;
                while (v75 != -1);
                int v62 = *(_DWORD *)(a1 + 104);
                goto LABEL_68;
              }

LABEL_98:
  sub_1000CB038(v15, v17);
  return v8;
}

      if ((_DWORD)v6 != (_DWORD)v7)
      {
        else {
          return 1LL;
        }
      }

      ++v4;
      ++v3;
      if (!--v5) {
        return 0LL;
      }
    }
  }

  uint64_t v18 = a2 == 0LL;
LABEL_137:
  if (v18) {
    return 0LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

              int v42 = 0LL;
              unsigned int v99 = v78;
LABEL_100:
              j__memmove((void *)v42, v77, 28 * v156);
              sub_1000C0EF8((uint64_t)v77);
              int v37 = v42 + 28LL * v156;
              uint64_t v156 = v78;
              unsigned int v44 = (char *)v42;
              uint64_t v149 = (char *)(v42 + 28LL * v99);
              LOWORD(v42) = v150;
            }

            *(_WORD *)int v37 = v42;
            *(_WORD *)(v37 + 2) = -2;
            *(_WORD *)(v37 + 16) = v135;
            j__memmove((void *)(v37 + 18), v134, v133);
            *(_WORD *)(v37 + 4) = 0;
            *(_DWORD *)(v37 + 12) = v53;
            if (v53 < v151)
            {
              LODWORD(v100) = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                unsigned int v100 = *(void *)(qword_1000FDCC0 + 5568);
              }
              uint64_t v157 = v53 + v100;
              unsigned int v151 = v53;
            }

            uint8x8_t v54 = v44;
            *(_DWORD *)(v37 + 8) = -1;
            v37 += 28LL;
            if (++v39 <= v140) {
              goto LABEL_106;
            }
LABEL_75:
            uint64_t v6 = v141;
            int v42 = v150;
            unsigned int v44 = v54;
            if (qword_1000FDCC0) {
              int v82 = *(_DWORD *)(qword_1000FDCC0 + 5568);
            }
            else {
              int v82 = 0;
            }
            int v83 = *(_DWORD *)(v143 + 4 * v150);
            int v84 = &v54[28 * v83];
            if (v39 > v83)
            {
              int v85 = v82 + v151;
              int v86 = &v54[28 * *(int *)(v143 + 4 * v150)];
              do
              {
                if (*((_DWORD *)v86 + 3) <= v85)
                {
                  int v87 = *(_OWORD *)v86;
                  *(_OWORD *)(v84 + 12) = *(_OWORD *)(v86 + 12);
                  *(_OWORD *)int v84 = v87;
                  v84 += 28;
                }

                v86 += 28;
              }

              while (v86 < &v54[28 * v39]);
              int v83 = *(_DWORD *)(v143 + 4 * v150);
            }

            uint64_t v39 = -1227133513 * ((unint64_t)(v84 - v54) >> 2);
            int v88 = (v39 - v83);
            if ((int)v88 >= 2)
            {
              unsigned int v89 = &v54[28 * v83];
              qsort(v89, (v39 - v83), 0x1CuLL, (int (__cdecl *)(const void *, const void *))sub_1000D6400);
              uint64_t v90 = 0;
              uint64_t v91 = 1LL;
              while (1)
              {
                uint64_t v95 = &v89[28 * v91];
                uint64_t v96 = v90;
                if (*((unsigned __int16 *)v95 + 1) == *(unsigned __int16 *)&v89[28 * v90 + 2]
                  && *(unsigned __int16 *)&v89[28 * v91 + 4] == *(unsigned __int16 *)&v89[28 * v90 + 4])
                {
                  uint64_t v97 = *(__int16 *)&v89[28 * v91 + 16];
                  if (v97 == *(__int16 *)&v89[28 * v90 + 16])
                  {
                    if (v97 < 2) {
                      goto LABEL_87;
                    }
                    uint64_t v98 = v97 - 1;
                    while (1)
                    {
                      --v98;
                      if (v98 < 1) {
                        goto LABEL_87;
                      }
                    }
                  }
                }

                ++v90;
                uint64_t v92 = *(_OWORD *)v95;
                int v93 = *(_OWORD *)(v95 + 12);
                uint64_t v94 = &v89[28 * v96 + 28];
                *(_OWORD *)(v94 + 12) = v93;
                *(_OWORD *)uint64_t v94 = v92;
LABEL_87:
                if (++v91 == v88)
                {
                  uint64_t v39 = v83 + v90 + 1;
                  break;
                }
              }
            }

            int v37 = (uint64_t)&v54[28 * v39];
            int v48 = v147 + 1;
          }

          else
          {
            uint8x8_t v54 = v44;
            if (v39 > v140) {
              goto LABEL_75;
            }
LABEL_106:
            uint64_t v6 = v141;
            int v42 = v150;
            unsigned int v44 = v54;
            int v48 = v147 + 1;
            if ((int)(v147 + 1) >= v142)
            {
LABEL_107:
              uint64_t v101 = qword_1000FDCC0;
              if (qword_1000FDCC0) {
                goto LABEL_108;
              }
              goto LABEL_110;
            }
          }
        }

        uint64_t v148 = (_WORD *)(v49 + 8LL * v48);
        char v153 = v39;
        unsigned int v55 = *(void *)(*(void *)(v6 + 16) + 8LL * (v48 >> 8));
        uint64_t v56 = (int *)(v143 + 4LL * (__int16)(v148[1] - 1));
        int v57 = *v56;
        unsigned int v58 = (v56[1] - v57);
        uint64_t v59 = *(_DWORD *)(v55 + 12LL * v48 + 8);
        int v154 = sub_1000BB868(v152, v52, 0LL);
        if ((int)v58 < 1)
        {
          uint8x8_t v54 = v44;
        }

        else
        {
          uint64_t v60 = v57;
          int v61 = 0LL;
          uint8x8_t v54 = v44;
          uint64_t v138 = v60;
          int v62 = &v44[28 * (int)v60];
          uint64_t v63 = v55 + 12LL * v50;
          uint64_t v155 = (unsigned __int16 *)(v63 + 4);
          uint64_t v145 = (_WORD *)(v63 + 6);
          uint64_t v64 = v146;
          do
          {
            uint64_t v65 = *((_DWORD *)v62 + 3) + v59;
            if (v65 <= v157 && sub_100005DBC(v64, *((unsigned __int16 *)v62 + 2), *v155))
            {
              int v66 = v65 + sub_1000BBBB0(v152, (uint64_t)(v62 + 18), *((__int16 *)v62 + 8), v154);
              if (v66 <= v157)
              {
                if ((char *)v37 == v149)
                {
                  if (2 * v156 >= v137) {
                    int v67 = v137;
                  }
                  else {
                    int v67 = 2 * v156;
                  }
                  uint64_t v68 = v67 - v156;
                  if (v67 - v156 < 1)
                  {
                    if (!v68)
                    {
LABEL_142:
                      int v37 = 0LL;
                      int v16 = v129;
                      unsigned int v36 = v54;
                      goto LABEL_150;
                    }

uint64_t sub_100094CE8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  uint64_t v9 = (__int16 *)a3;
  int v10 = a2;
  uint64_t v12 = 4LL * (int)a2;
  uint64_t v20 = (void *)sub_1000CAF58(v12, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v21 = v10;
  if (v10 < 1)
  {
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v22 = 0LL;
    LODWORD(v23) = 0;
    unsigned int v24 = v9;
    do
    {
      int v25 = -1;
      do
      {
        int v26 = *v24++;
        ++v25;
      }

      while (v26 != -1);
      *((_DWORD *)v20 + v22) = v25;
      uint64_t v23 = v23 + sub_1000791D4(*(void *)(a1 + 152), v25) + 1;
      ++v22;
    }

    while (v22 != v10);
  }

  uint64_t v27 = 2LL * (int)v23;
  int v28 = (void *)sub_1000CAF58(v27, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v52 = v12;
  uint64_t v39 = (void *)sub_1000CAF58(v12, v29, v30, v31, v32, v33, v34, v35);
  if (v10 <= 0)
  {
    uint64_t v40 = 0LL;
    __int16 *v9 = -1;
  }

  else
  {
    uint8x8_t v50 = v28;
    uint64_t v51 = 2LL * (int)v23;
    uint64_t v40 = 0LL;
    uint64_t v41 = (uint64_t)v9;
    while (1)
    {
      int v42 = sub_100079538(*(void *)(a1 + 152), *((unsigned int *)v20 + v40), v41, v23, (uint64_t)v28, v36, v37, v38);
      *((_DWORD *)v39 + v40) = v42;
      v41 += 2LL * *((int *)v20 + v40) + 2;
      unsigned int v44 = (_WORD *)v28 + v42;
      *unsigned int v44 = -1;
      int v28 = v44 + 1;
      uint64_t v23 = (v23 + ~v42);
      if (v21 == ++v40)
      {
        uint64_t v40 = v21;
        break;
      }
    }

    int v28 = v50;
    uint64_t v27 = v51;
    __int16 *v9 = -1;
    if ((_DWORD)v40)
    {
      uint64_t v45 = 0LL;
      uint64_t v46 = (unsigned __int16 *)v50;
      while (1)
      {
        v8 += ~*((_DWORD *)v39 + v45);
        if (v8 < 0) {
          break;
        }
        int v47 = *v46;
        if (v47 != 0xFFFF)
        {
          do
          {
            *v9++ = v47;
            int v48 = v46[1];
            ++v46;
            LOWORD(v47) = v48;
          }

          while (v48 != 0xFFFF);
        }

        ++v46;
        *v9++ = -1;
      }

      uint64_t v40 = v45;
    }
  }

uint64_t sub_100094ED0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000BCD38(a2, (void *)(a1 + 40));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCD38(a2, (void *)(a1 + 64));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCDD4(a2, (_WORD *)(a1 + 68));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCDD4(a2, (_WORD *)(a1 + 70));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCD38(a2, (void *)(a1 + 72));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCDD4(a2, (_WORD *)(a1 + 96));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCDD4(a2, (_WORD *)(a1 + 98));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCDD4(a2, (_WORD *)(a1 + 100));
  if (!(_DWORD)result) {
    return result;
  }
  int v5 = (int *)(a1 + 104);
  uint64_t result = sub_1000BCD38(a2, (void *)(a1 + 104));
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = sub_1000BCD38(a2, (void *)(a1 + 128));
  if (!(_DWORD)result) {
    return result;
  }
  int v10 = 0;
  uint64_t result = sub_1000BCCEC(a2, &v10);
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t result = (uint64_t)sub_10007AABC(a2);
  *(void *)(a1 + 56) = result;
  if (!result) {
    return result;
  }
  *(void *)(a1 + 48) = result;
  if (*(_WORD *)(a1 + 96))
  {
    uint64_t result = (uint64_t)sub_10007AABC(a2);
    *(void *)(a1 + 88) = result;
    if (!result) {
      return result;
    }
    *(void *)(a1 + 80) = result;
  }

  if (*v5 < 1) {
    goto LABEL_25;
  }
  int v9 = 0;
  uint64_t v6 = (void *)(a1 + 120);
  if (*v6)
  {
    if (v9 == *v5)
    {
      *(void *)(a1 + 112) = *v6;
      goto LABEL_21;
    }

    return 0LL;
  }

uint64_t sub_1000950D0(uint64_t *a1)
{
  return sub_10009460C(a1);
}

uint64_t sub_100095128(uint64_t a1, char *a2, int a3, unsigned __int16 *a4, int a5, void *a6, int a7, int *a8)
{
  unsigned int v67 = 0;
  if (a3 == 2) {
    int v8 = 9;
  }
  else {
    int v8 = a3;
  }
  if (a3 == 1) {
    int v8 = 8;
  }
  if (!a3) {
    int v8 = 7;
  }
  else {
    int v9 = 7;
  }
  *a4 = -1;
  *a8 = 0;
  if (a7 >= 10) {
    int v10 = 10;
  }
  else {
    int v10 = a7;
  }
  LOWORD(v11) = *(_WORD *)a2;
  if (*(_WORD *)a2)
  {
    int v18 = 0;
    uint64_t v19 = 2LL;
    do
    {
      int v11 = *(unsigned __int16 *)&a2[v19];
      v19 += 2LL;
    }

    while (v11);
    if (v18)
    {
      uint64_t v66 = 2LL * (2 * v18 + 2);
      uint64_t v27 = (char *)sub_1000CAF58(v66, v20, v21, v22, v23, v24, v25, v26);
      switch(v9)
      {
        case 9:
          break;
        case 8:
          break;
        case 7:
          int v28 = sub_100095594(a1, a2, v18, (uint64_t)v27, (int *)&v67);
          int v29 = v28;
          uint64_t v30 = v67;
          if (v10 <= 1 && v28)
          {
LABEL_41:
            if (*(void *)(a1 + 288))
            {
              uint64_t v36 = &v27[2 * (int)v30];
              uint64_t v37 = v36 - 2;
              if (v36 - 2 > v27)
              {
                do
                {
                  uint64_t v38 = v36;
                  uint64_t v36 = v37;
                  uint64_t v39 = *((unsigned __int16 *)v38 - 1);
                  if (v39 != 0xFFFF)
                  {
                    uint64_t v40 = *(void *)(a1 + 288);
                    int v41 = *(unsigned __int16 *)(v40 + 2 * v39);
                    if (v41 && v41 != 0xFFFF)
                    {
                      for (uint64_t i = v38 - 4; i >= v27; i -= 2)
                      {
                        uint64_t v44 = *(unsigned __int16 *)i;
                        if (v44 == 0xFFFF) {
                          break;
                        }
                        int v45 = *(unsigned __int16 *)(v40 + 2 * v44);
                        if (v45 != 0xFFFF)
                        {
                          if (v45) {
                            *(_WORD *)uint64_t i = v45;
                          }
                          break;
                        }
                      }
                    }
                  }

                  uint64_t v37 = v36 - 2;
                }

                while (v36 - 2 > v27);
                LODWORD(v30) = v67;
              }
            }

            uint64_t v65 = a4;
            uint64_t v46 = v30;
            if ((int)v30 < 1)
            {
              int v47 = 0;
              uint64_t v35 = 0LL;
              if (a5 < 0) {
LABEL_70:
              }
                *a8 = v47;
            }

            else
            {
              uint64_t v35 = 0LL;
              int v47 = 0;
              int v48 = v27;
              do
              {
                while (1)
                {
                  unsigned int v51 = *(unsigned __int16 *)v48;
                  v48 += 2;
                  unsigned int v50 = v51;
                  LODWORD(v69) = 0;
                  if (v51 == 0xFFFF) {
                    break;
                  }
                  sub_10007A9E8(*(void *)(a1 + 48), v50, 0LL, &v69);
                  if (*(_WORD *)(a1 + 70)) {
                    v47 += v69 + 1;
                  }
                  else {
                    v47 += v69;
                  }
                  if (!--v46) {
                    goto LABEL_69;
                  }
                }

                if (v47++ < a5) {
                  uint64_t v35 = (v35 + 1);
                }
                else {
                  uint64_t v35 = v35;
                }
                --v46;
              }

              while (v46);
LABEL_69:
              if (v47 > a5) {
                goto LABEL_70;
              }
            }

            if ((_DWORD)v35)
            {
              if ((int)v30 >= 1)
              {
                uint64_t v52 = 0LL;
                int v53 = 0;
                uint8x8_t v54 = v65;
                do
                {
                  unsigned int v55 = *(unsigned __int16 *)&v27[2 * v52];
                  uint64_t v69 = 0LL;
                  int v68 = 0;
                  if (v55 == 0xFFFF)
                  {
                    *v54++ = -1;
                    if (++v53 == (_DWORD)v35) {
                      break;
                    }
                  }

                  else
                  {
                    sub_10007A9E8(*(void *)(a1 + 48), v55, &v69, &v68);
                    if (v68 >= 1)
                    {
                      uint64_t v56 = 0LL;
                      for (uint64_t j = 0LL; j < v68; ++j)
                      {
                        v54[j] = *(_WORD *)(v69 + 2 * j);
                        v56 += 2LL;
                      }

                      uint8x8_t v54 = (_WORD *)((char *)v54 + v56);
                    }

                    if (*(_WORD *)(a1 + 70)) {
                      *v54++ = *(_WORD *)(a1 + 70);
                    }
                  }

                  ++v52;
                }

                while (v52 != v30);
              }

              if ((_DWORD)v35 == 2)
              {
                unsigned int v58 = v65;
                do
                  int v59 = (__int16)*v58++;
                while (v59 != -1);
                int v60 = *v65;
                if (v60 == *v58)
                {
                  uint64_t v61 = 1LL;
                  while (v60 != 0xFFFF)
                  {
                    int v60 = v65[v61];
                    int v62 = v58[v61++];
                    if (v60 != v62) {
                      goto LABEL_90;
                    }
                  }

                  uint64_t v35 = 1LL;
                }

                else
                {
LABEL_90:
                  uint64_t v35 = 2LL;
                }

                uint64_t v63 = v66;
              }

              else
              {
                uint64_t v63 = v66;
              }

              bzero(a6, 8LL * v35);
            }

            else
            {
              uint64_t v63 = v66;
            }

uint64_t sub_100095594(uint64_t a1, char *a2, int a3, uint64_t a4, int *a5)
{
  if (a3 == 1 || a3 >= 5) {
    return sub_100095A54(a1, a2, (char *)a4, a5);
  }
  int v9 = &a2[2 * (int)sub_1000CDC84(a2, &v63)];
  int v10 = &v9[2 * (int)sub_1000CDC84(v9, &v64)];
  uint64_t v11 = *(int *)(a1 + 248);
  if (!(_DWORD)v11) {
    goto LABEL_13;
  }
  int v12 = 0;
  uint64_t v13 = *(void *)(a1 + 256);
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v11 - 1;
      if (v11 - 1 < 0) {
        uint64_t v14 = v11;
      }
      uint64_t v15 = v14 >> 1;
      int v16 = v12 + (v14 >> 1);
      int v17 = 2 * v16;
      unsigned int v18 = *(unsigned __int16 *)(v13 + 4LL * v16);
      if (v63 < v18) {
        goto LABEL_5;
      }
      if (v63 == v18) {
        break;
      }
LABEL_12:
      v11 -= (int)v15 + 1;
      int v12 = v16 + 1;
      if (!v11) {
        goto LABEL_13;
      }
    }

    unsigned int v19 = *(unsigned __int16 *)(v13 + 2LL * (v17 | 1));
    if (v64 >= v19) {
      break;
    }
LABEL_5:
    uint64_t v11 = (int)v15;
    if (!(_DWORD)v15) {
      goto LABEL_13;
    }
  }

  if (v64 != v19) {
    goto LABEL_12;
  }
  if (v16 != -1)
  {
    *(_WORD *)a4 = *(_WORD *)(*(void *)(a1 + 272) + 2LL * v17);
    uint64_t v30 = (_WORD *)(a4 + 4);
    *(_WORD *)(a4 + 2) = *(_WORD *)(*(void *)(a1 + 272) + 2LL * (v17 | 1));
    if (*(_WORD *)v10) {
      goto LABEL_77;
    }
    goto LABEL_92;
  }

uint64_t sub_100095A54(uint64_t a1, char *a2, char *a3, int *a4)
{
  int v5 = *(unsigned __int16 *)a2;
  if (!*(_WORD *)a2)
  {
    uint64_t result = 0LL;
    goto LABEL_23;
  }

  int v7 = a2;
  int v9 = a3;
  do
  {
    unsigned __int16 v21 = 0;
    int v11 = sub_1000CDC84(v7, &v21);
    if (v21)
    {
      uint64_t v12 = *(unsigned __int16 *)(a1 + 168);
      if (v21 >= v12 && v21 <= *(unsigned __int16 *)(a1 + 170))
      {
        uint64_t v13 = *(void *)(a1 + 176);
        if (v13)
        {
          uint64_t v14 = *(int *)(a1 + 172);
          if ((_DWORD)v14)
          {
            int v15 = 0;
            while (1)
            {
              while (1)
              {
                uint64_t v16 = v14 - 1;
                if (v14 - 1 < 0) {
                  uint64_t v16 = v14;
                }
                uint64_t v17 = v16 >> 1;
                int v18 = v15 + v17;
                unsigned int v19 = *(unsigned __int16 *)(v13 + 2LL * (v15 + (int)v17));
                if (v19 <= v21) {
                  break;
                }
                uint64_t v14 = (int)v17;
                if (!(_DWORD)v17) {
                  goto LABEL_4;
                }
              }

              if (v19 == v21) {
                break;
              }
              v14 -= (int)v17 + 1;
              int v15 = v18 + 1;
              if (!v14) {
                goto LABEL_4;
              }
            }

            if (v18 != -1)
            {
              *(_WORD *)int v9 = *(_WORD *)(*(void *)(a1 + 192) + 2LL * v18);
              v9 += 2;
            }
          }
        }

        else
        {
          int v10 = *(unsigned __int16 *)(*(void *)(a1 + 192) + 2 * (v21 - v12));
          *(_WORD *)int v9 = v10;
          v9 += 2 * (v10 != 0);
        }
      }
    }

uint64_t sub_100095BBC(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(304LL);
  uint64_t v3 = v2;
  if (v2)
  {
    if (!sub_100094ED0(v2, a1))
    {
LABEL_43:
      sub_1000C0EF8(v3);
      return 0LL;
    }

    int v4 = (int *)(v3 + 172);
    int v5 = (_DWORD *)(v3 + 208);
    uint64_t v6 = (_DWORD *)(v3 + 248);
    int v18 = 0;
    int v7 = (void *)(v3 + 184);
    if (*v7)
    {
      if (v18 != *v4) {
        goto LABEL_42;
      }
      *(void *)(v3 + 176) = *v7;
    }

    int v8 = (uint64_t *)(v3 + 200);
    if (*(void *)(v3 + 176))
    {
      int v18 = 0;
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_21;
      }
      int v10 = v18;
      int v11 = *v4;
    }

    else
    {
      int v18 = 0;
      uint64_t v9 = *v8;
      if (!*v8) {
        goto LABEL_21;
      }
      int v10 = v18;
      int v11 = *(unsigned __int16 *)(v3 + 170) - *(unsigned __int16 *)(v3 + 168) + 1;
    }

    if (v10 != v11) {
      goto LABEL_42;
    }
    *(void *)(v3 + 192) = v9;
LABEL_21:
    int v18 = 0;
    uint64_t v12 = (void *)(v3 + 224);
    if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 224), &v18))
    {
      if (*v12)
      {
        if (v18 != *v5) {
          goto LABEL_42;
        }
        *(void *)(v3 + 216) = *v12;
      }

      int v18 = 0;
      uint64_t v13 = (void *)(v3 + 240);
      if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 240), &v18))
      {
        if (*v13)
        {
          if (v18 != *v5) {
            goto LABEL_42;
          }
          *(void *)(v3 + 232) = *v13;
        }

        int v18 = 0;
        uint64_t v14 = (void *)(v3 + 264);
        if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 264), &v18))
        {
          if (*v14)
          {
            if (v18 != 2 * *v6) {
              goto LABEL_42;
            }
            *(void *)(v3 + 256) = *v14;
          }

          int v18 = 0;
          int v15 = (void *)(v3 + 280);
          if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 280), &v18))
          {
            if (!*v15) {
              goto LABEL_37;
            }
            if (v18 == 2 * *v6)
            {
              *(void *)(v3 + 272) = *v15;
LABEL_37:
              int v18 = 0;
              uint64_t v16 = (void *)(v3 + 296);
              if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 296), &v18))
              {
                if (!*v16)
                {
LABEL_41:
                  *(void *)(v3 + 8) = sub_1000950D0;
                  *(void *)(v3 + 16) = sub_100095128;
                  *(void *)(v3 + 24) = 0LL;
                  *(void *)(v3 + 32) = 0LL;
                  return v3;
                }

                if (v18 == *(_DWORD *)(v3 + 64))
                {
                  *(void *)(v3 + 288) = *v16;
                  goto LABEL_41;
                }
              }
            }
          }
        }
      }
    }

uint64_t sub_100095ED0(uint64_t *a1)
{
  return sub_10009460C(a1);
}

uint64_t sub_100095F50( uint64_t a1, char *a2, uint64_t a3, _WORD *a4, int a5, void *a6, uint64_t a7, _DWORD *a8)
{
  *a4 = -1;
  *a8 = 0;
  LOWORD(v8) = *(_WORD *)a2;
  if (*(_WORD *)a2)
  {
    uint64_t v12 = a4;
    uint64_t v13 = a2;
    int v15 = 0;
    uint64_t v16 = 2LL;
    do
    {
      int v8 = *(unsigned __int16 *)&v13[v16];
      v16 += 2LL;
    }

    while (v8);
    if (v15)
    {
      unsigned __int16 v139 = 0;
      unint64_t v24 = sub_1000CAF58((4 * v15), v17, v18, v19, v20, v21, v22, v23);
      uint64_t v25 = (char *)v24;
      int v138 = a5;
      if (v15 != 2)
      {
        if (v15 != 3)
        {
          uint64_t v44 = (4 * v15);
          int v45 = 0;
          uint64_t v27 = (char *)v24;
          do
          {
            int v46 = sub_1000CDC84(v13, &v139);
            if (v139 == 12293)
            {
              if (v27 > v25)
              {
                *(_WORD *)uint64_t v27 = *((_WORD *)v27 - 1);
                v27 += 2;
              }
            }

            else
            {
              uint64_t v47 = *(int *)(a1 + 172);
              if ((_DWORD)v47)
              {
                int v48 = 0;
                while (1)
                {
                  while (1)
                  {
                    uint64_t v49 = v47 - 1;
                    if (v47 - 1 < 0) {
                      uint64_t v49 = v47;
                    }
                    uint64_t v50 = v49 >> 1;
                    int v51 = v48 + v50;
                    unsigned int v52 = *(unsigned __int16 *)(*(void *)(a1 + 176) + 2LL * (v48 + (int)v50));
                    if (v52 <= v139) {
                      break;
                    }
                    uint64_t v47 = (int)v50;
                    if (!(_DWORD)v50) {
                      goto LABEL_33;
                    }
                  }

                  if (v52 == v139) {
                    break;
                  }
                  v47 -= (int)v50 + 1;
                  int v48 = v51 + 1;
                  if (!v47) {
                    goto LABEL_33;
                  }
                }

                if (v51 != -1)
                {
                  *(_WORD *)uint64_t v27 = *(_WORD *)(*(void *)(a1 + 192) + 2LL * v51);
                  v27 += 2;
                }
              }
            }

LABEL_90:
      sub_1000CDC84(v36, &v139);
      if (v139 == 12293)
      {
        if (v27 > v25)
        {
LABEL_118:
          uint64_t v44 = (4 * v15);
          __int16 v90 = *((_WORD *)v27 - 1);
LABEL_119:
          *(_WORD *)uint64_t v27 = v90;
          v27 += 2;
          goto LABEL_151;
        }

        goto LABEL_150;
      }

      uint64_t v76 = *(void *)(a1 + 256);
      if (v76)
      {
        uint64_t v77 = *(int *)(a1 + 248);
        if ((_DWORD)v77)
        {
          int v78 = 0;
          uint64_t v79 = *(void *)(a1 + 272);
          while (1)
          {
            while (1)
            {
              uint64_t v80 = v77 - 1;
              if (v77 - 1 < 0) {
                uint64_t v80 = v77;
              }
              uint64_t v81 = v80 >> 1;
              unsigned int v82 = *(unsigned __int16 *)(v76 + 2LL * (v78 + (int)v81));
              if (v82 <= v139) {
                break;
              }
              uint64_t v77 = (int)v81;
              if (!(_DWORD)v81) {
                goto LABEL_131;
              }
            }

            uint64_t v83 = v78 + (int)v81;
            if (v82 == v139) {
              break;
            }
            v77 -= (int)v81 + 1;
            int v78 = v83 + 1;
            if (!v77) {
              goto LABEL_131;
            }
          }

          if ((_DWORD)v83 != -1) {
            goto LABEL_141;
          }
        }
      }

LABEL_190:
        uint64_t v44 = (4 * v15);
        if ((_DWORD)v102 != -1)
        {
          __int16 v90 = *(_WORD *)(*(void *)(a1 + 192) + 2 * v102);
          goto LABEL_119;
        }

          if (v342 > v307 && v309 == 0) {
            double v211 = v342 - v307;
          }
          else {
            double v211 = 0;
          }
          do
          {
            while (1)
            {
              uint64_t v212 = v118;
              uint64_t v213 = *(_DWORD *)(*(void *)(v323 + 8LL * v118) + 4LL * v51);
              sub_1000B33F8((char *)a1, v213, (uint64_t)v336, v339);
              uint64_t v214 = sub_1000CC52C((unint64_t)v336);
              int v215 = sub_1000CC52C((unint64_t)v339);
              uint64_t v216 = v212 - v214;
              v51 -= v215;
              if (v211 < 1) {
                break;
              }
              int v118 = v216;
              --v211;
              if ((v119 & 0x80000000) != 0) {
                goto LABEL_199;
              }
            }

            unint64_t v217 = 4LL * v119;
            int v118 = v216;
            *(_DWORD *)&v314[v217] = v216;
            *(_DWORD *)&a9[v217] = v214;
            *(_DWORD *)(a10 + v217) = v51;
            *(_DWORD *)(a11 + v217) = v215;
            --v119;
            *(_DWORD *)(a7 + v217) = v213;
          }

          while ((v119 & 0x80000000) == 0);
          goto LABEL_199;
        }

        unsigned int v112 = 0;
        unsigned int v52 = v314;
        LODWORD(v12) = v307;
        int v51 = v320;
        if (v307 <= 0) {
          int8x16_t v114 = v307;
        }
        else {
          int8x16_t v114 = 0;
        }
        uint64_t v113 = v326 - v321;
        unsigned int v342 = 0;
        if (v326 == v321) {
          goto LABEL_108;
        }
LABEL_183:
        if (v309 || v112 < (int)v12)
        {
          int v208 = v12 - 1;
          int v209 = 4LL * v208;
          int v118 = v111;
          *(_DWORD *)&v52[v209] = v111;
          *(_DWORD *)&a9[v209] = v113;
          *(_DWORD *)(a10 + v209) = v51;
          *(_DWORD *)(a11 + v209) = v331 - v51;
          *(_DWORD *)(a7 + v209) = -1;
          int v332 = 1;
          int v119 = v208 - 1;
          if (v208 < 1) {
            goto LABEL_199;
          }
        }

        else
        {
          int v118 = v111;
          int v332 = 1;
          int v119 = v114 - 1;
          if (v114 < 1) {
            goto LABEL_199;
          }
        }

        goto LABEL_190;
      }
    }

  v426 = 0LL;
LABEL_191:
  double v402 = sub_1000CAF58(4 * v296, v285, v286, v287, v288, v289, v290, v291);
  int32x4_t v301 = 0LL;
  int32x4_t v302 = v417;
  while (!*(_BYTE *)(v165 + v301))
  {
    if (v284 == ++v301)
    {
      *uint64_t v249 = 0;
LABEL_195:
      sub_1000CB094(v403);
      return 1LL;
    }
  }

  if (v250 != 1 || *v430 != -1 || *v417)
  {
    double v406 = 0;
LABEL_277:
    uint64_t v371 = 0;
LABEL_278:
    sub_1000CB094(v403);
    int v39 = 0LL;
    *uint64_t v249 = v371;
    return v39;
  }

  double v406 = v417[1] == v396 - 1;
LABEL_200:
  v398 = v292;
  int32x4_t v303 = 0LL;
  uint64_t v395 = 0;
  int32x4_t v304 = 0;
  uint64_t v305 = __src;
  v306 = (v404 - 1);
  v307 = __src - 1;
  while (2)
  {
    v308 = v304;
    int32x4_t v304 = v301;
    int v416 = v303;
    while (1)
    {
      v309 = v250 <= v304 + 1 ? v304 + 1 : v250;
      int8x16_t v310 = v304 + 1LL;
      while (v310 < v296)
      {
        int32x4_t v311 = *(unsigned __int8 *)(v165 + v310);
        ++v304;
        ++v310;
        if (v311) {
          goto LABEL_211;
        }
      }

      int32x4_t v304 = v309;
LABEL_211:
      if (v303 == v306) {
        int32x4_t v304 = v250;
      }
      int32x4_t v312 = v304;
      int32x4_t v313 = v302[v312];
      int32x4_t v314 = *(int *)&v84[v312 * 4 - 4] + (uint64_t)v302[v312 - 1];
      while (v313 > v314)
      {
        uint64_t v315 = v313 - 1;
        v316 = (unsigned __int16)v307[v313--];
        if (v316 == 32)
        {
          v317 = v315 - ((unint64_t)(v305 - (_BYTE *)__src) >> 1);
          goto LABEL_219;
        }
      }

      unsigned int v165 = v424;
      LODWORD(v284) = v427;
    }

    v317 = sub_1000CC52C((unint64_t)__src) - ((unint64_t)(v305 - (_BYTE *)__src) >> 1);
    uint64_t v315 = sub_1000CC52C((unint64_t)__src);
LABEL_219:
    memcpy(__dst, v305, 2 * v317);
    *((_WORD *)__dst + v317) = 0;
    if (sub_100082CF0(*v52))
    {
      int64x2_t v250 = v413;
      goto LABEL_255;
    }

    int v325 = v304 - v308;
    v326 = (void *)sub_1000CAF58(v325, v318, v319, v320, v321, v322, v323, v324);
    bzero(v326, v325);
    int v341 = sub_1000CAF58(16LL * v410, v327, v328, v329, v330, v331, v332, v333);
    unsigned int v342 = 0LL;
    do
    {
      *(void *)(v341 + v342 + 8) = sub_1000CAF58(v325, v334, v335, v336, v337, v338, v339, v340);
      v342 += 16LL;
    }

    while (16LL * v410 != v342);
    int v343 = (unsigned __int8 *)(v424 + v308);
    uint64_t v423 = v341;
    unsigned int v344 = sub_1000BC428(v325, v341, v343, v432 + 8LL * v308, (void *)(v398 + 8LL * v308), v410);
    if ((int)v344 >= 1)
    {
      v345 = v344;
      unint64_t v346 = v344;
      if ((int)v325 <= 0)
      {
        uint64_t v360 = (_WORD **)v426;
        do
        {
          uint64_t v361 = *v360++;
          *uint64_t v361 = -1;
          --v346;
        }

        while (v346);
LABEL_247:
        unsigned int v52 = v434;
        if (!(_DWORD)v345) {
          break;
        }
        uint64_t v362 = (int)v345 <= 1 && v406;
        HIDWORD(v439) = sub_100082B9C(*v434);
        double v406 = v362;
        if (HIDWORD(v439) == 0xFFFFFF)
        {
          uint64_t v363 = sub_100082D40(*v434, (uint64_t)__dst, 0LL, v345, v426, v400, v362, (_DWORD *)&v439 + 1);
          uint64_t v364 = v416;
          v399[v416] = 1;
          uint64_t v84 = v418;
          v296 = v409;
          if (HIDWORD(v439) == 0xFFFFFF)
          {
            int v39 = v363;
            uint64_t v372 = v395;
            uint64_t v373 = v408;
            uint64_t v375 = v402;
            uint64_t v374 = v403;
            if (v395 >= 1) {
              goto LABEL_273;
            }
            goto LABEL_275;
          }

          *(_DWORD *)(v402 + 4LL * v395++) = HIDWORD(v439);
          int64x2_t v250 = v413;
        }

        else
        {
          int64x2_t v250 = v413;
          uint64_t v84 = v418;
LABEL_255:
          v296 = v409;
          uint64_t v364 = v416;
        }

        v307 = __src - 1;
        int32x4_t v302 = v417;
        v306 = (v404 - 1);
        if (v364 < v412) {
          v407[v364] = HIDWORD(v439) | 0xC0000000;
        }
        int32x4_t v303 = v364 + 1;
        uint64_t v305 = &__src[v315 + 1];
        LODWORD(v301) = v304;
        LODWORD(v284) = v427;
        unsigned int v165 = v424;
        if (v304 >= (int)v427)
        {
          uint64_t v249 = v408;
          uint64_t v371 = v303;
          goto LABEL_278;
        }

        continue;
      }

      v421 = v344;
      double v347 = 0LL;
      v345 = 0LL;
      uint64_t v348 = v325;
      unint64_t v349 = v433 + 8LL * v308;
      int v350 = v426;
      while (1)
      {
        v429 = v347;
        v431 = v345;
        double v351 = *(_WORD **)(v350 + 8LL * (int)v345);
        double v352 = (void *)(v423 + 16 * v347 + 8);
        if (v435 != 0xFFFF) {
          break;
        }
        for (uint64_t i = 0LL; i != v348; ++i)
        {
          if (v343[i])
          {
            uint64_t v358 = *(const void **)(*(void *)(v349 + 8 * i) + 8LL * *(unsigned __int8 *)(*v352 + i));
            uint64_t v359 = sub_100099EE0((unint64_t)v358);
            memcpy(v351, v358, 2 * v359);
            v351 += v359;
          }
        }

LABEL_151:
        unint64_t v108 = v27 - v25;
        if (v27 == v25)
        {
          uint64_t v31 = 0LL;
LABEL_188:
          sub_1000CB038(v25, v44);
          return v31;
        }

        if ((int)(v108 >> 1) < 1)
        {
          if (v138 > 0)
          {
LABEL_185:
            _WORD *v12 = -1;
            *a6 = 0LL;
            uint64_t v31 = 1LL;
            goto LABEL_188;
          }

          int v110 = 0;
        }

        else
        {
          uint64_t v109 = 0LL;
          int v110 = 0;
          uint64_t v111 = (v108 >> 1);
          do
          {
            unsigned int v112 = *(unsigned __int16 *)&v25[2 * v109];
            uint64_t v143 = 0LL;
            int v142 = 0;
            sub_10007A9E8(*(void *)(a1 + 48), v112, &v143, &v142);
            v110 += v142;
            uint64_t v113 = *(void *)(a1 + 80);
            if (v113)
            {
              int v141 = 0LL;
              unsigned int v140 = 0;
              sub_10007A9E8(v113, *(unsigned __int16 *)(a1 + 96), &v141, &v140);
              if (v142 >= 1)
              {
                v114.i64[0] = 0x100000001LL;
                v114.i64[1] = 0x100000001LL;
                if ((int)v140 >= 1)
                {
                  if (v140 >= 0x10)
                  {
                    for (uint64_t i = 0LL; i != v142; ++i)
                    {
                      unsigned int v120 = *(unsigned __int16 *)(v143 + 2 * i);
                      int32x4_t v121 = 0uLL;
                      int32x4_t v122 = (int32x4_t)v110;
                      int16x8_t v123 = vdupq_n_s16(v120);
                      uint64_t v124 = v140 & 0xFFFFFFF0;
                      uint64_t v125 = v141 + 1;
                      int32x4_t v126 = 0uLL;
                      int32x4_t v127 = 0uLL;
                      do
                      {
                        uint16x8_t v128 = (uint16x8_t)vceqq_s16(v123, v125[-1]);
                        uint16x8_t v129 = (uint16x8_t)vceqq_s16(v123, *v125);
                        int32x4_t v121 = vaddq_s32(v121, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v128), v114));
                        int32x4_t v122 = vaddq_s32(v122, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v128.i8), v114));
                        int32x4_t v127 = vaddq_s32(v127, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v129), v114));
                        int32x4_t v126 = vaddq_s32(v126, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v129.i8), v114));
                        v125 += 2;
                        v124 -= 16LL;
                      }

                      while (v124);
                      int v110 = vaddvq_s32(vaddq_s32(vaddq_s32(v126, v122), vaddq_s32(v127, v121)));
                      if (v140 != (unint64_t)(v140 & 0xFFFFFFF0))
                      {
                        uint64_t v130 = (unsigned __int16 *)((char *)v141->u16 + ((2LL * v140) & 0x1FFFFFFE0LL));
                        unint64_t v131 = v140 - (unint64_t)(v140 & 0xFFFFFFF0);
                        do
                        {
                          int v132 = *v130++;
                          if (v120 == v132) {
                            ++v110;
                          }
                          --v131;
                        }

                        while (v131);
                      }
                    }
                  }

                  else
                  {
                    for (uint64_t j = 0LL; j != v142; ++j)
                    {
                      uint64_t v116 = v141;
                      uint64_t v117 = v140;
                      do
                      {
                        int v118 = v116->u16[0];
                        uint64_t v116 = (int16x8_t *)((char *)v116 + 2);
                        --v117;
                      }

                      while (v117);
                    }
                  }
                }
              }
            }

            ++v109;
          }

          while (v109 != v111);
          if (v110 < v138)
          {
            uint64_t v133 = 0LL;
            do
            {
              unsigned int v134 = *(unsigned __int16 *)&v25[2 * v133];
              uint64_t v143 = 0LL;
              LODWORD(v141) = 0;
              sub_10007A9E8(*(void *)(a1 + 48), v134, &v143, &v141);
              if ((int)v141 >= 1)
              {
                uint64_t v135 = 0LL;
                uint64_t v136 = 0LL;
                do
                {
                  v12[v136] = *(_WORD *)(v143 + 2 * v136);
                  ++v136;
                  v135 += 2LL;
                }

                while (v136 < (int)v141);
                uint64_t v12 = (_WORD *)((char *)v12 + v135);
              }

              ++v133;
            }

            while (v133 != v111);
            goto LABEL_185;
          }
        }

        uint64_t v31 = 0LL;
        *a8 = v110 + 1;
        goto LABEL_188;
      }

uint64_t sub_100096870(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(408LL);
  uint64_t v3 = v2;
  if (v2)
  {
    if (!sub_100094ED0(v2, a1))
    {
LABEL_61:
      sub_1000C0EF8(v3);
      return 0LL;
    }

    if (sub_1000BCDD4(a1, (_WORD *)(v3 + 168)))
    {
      if (sub_1000BCDD4(a1, (_WORD *)(v3 + 170)))
      {
        int v4 = (_DWORD *)(v3 + 172);
        if (sub_1000BCD38(a1, (void *)(v3 + 172)))
        {
          int v5 = (_DWORD *)(v3 + 208);
          if (sub_1000BCD38(a1, (void *)(v3 + 208)))
          {
            uint64_t v6 = (_DWORD *)(v3 + 248);
            if (sub_1000BCD38(a1, (void *)(v3 + 248)))
            {
              int v7 = (_DWORD *)(v3 + 288);
              if (sub_1000BCD38(a1, (void *)(v3 + 288)))
              {
                int v8 = (_DWORD *)(v3 + 328);
                if (sub_1000BCD38(a1, (void *)(v3 + 328)))
                {
                  uint64_t v9 = (_DWORD *)(v3 + 368);
                  if (sub_1000BCD38(a1, (void *)(v3 + 368)))
                  {
                    int v23 = 0;
                    int v10 = (void *)(v3 + 184);
                    if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 184), &v23))
                    {
                      if (*v10)
                      {
                        if (v23 != *v4) {
                          goto LABEL_60;
                        }
                        *(void *)(v3 + 176) = *v10;
                      }

                      int v23 = 0;
                      int v11 = (void *)(v3 + 200);
                      if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 200), &v23))
                      {
                        if (*v11)
                        {
                          if (v23 != *v4) {
                            goto LABEL_60;
                          }
                          *(void *)(v3 + 192) = *v11;
                        }

                        int v23 = 0;
                        uint64_t v12 = (void *)(v3 + 224);
                        if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 224), &v23))
                        {
                          if (*v12)
                          {
                            if (v23 != *v5) {
                              goto LABEL_60;
                            }
                            *(void *)(v3 + 216) = *v12;
                          }

                          int v23 = 0;
                          uint64_t v13 = (void *)(v3 + 240);
                          if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 240), &v23))
                          {
                            if (*v13)
                            {
                              if (v23 != *v5) {
                                goto LABEL_60;
                              }
                              *(void *)(v3 + 232) = *v13;
                            }

                            int v23 = 0;
                            uint64_t v14 = (void *)(v3 + 264);
                            if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 264), &v23))
                            {
                              if (*v14)
                              {
                                if (v23 != *v6) {
                                  goto LABEL_60;
                                }
                                *(void *)(v3 + 256) = *v14;
                              }

                              int v23 = 0;
                              int v15 = (void *)(v3 + 280);
                              if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 280), &v23))
                              {
                                if (*v15)
                                {
                                  if (v23 != *v6) {
                                    goto LABEL_60;
                                  }
                                  *(void *)(v3 + 272) = *v15;
                                }

                                int v23 = 0;
                                uint64_t v16 = (void *)(v3 + 304);
                                if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 304), &v23))
                                {
                                  if (*v16)
                                  {
                                    if (v23 != *v7) {
                                      goto LABEL_60;
                                    }
                                    *(void *)(v3 + 296) = *v16;
                                  }

                                  int v23 = 0;
                                  uint64_t v17 = (void *)(v3 + 320);
                                  if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 320), &v23))
                                  {
                                    if (*v17)
                                    {
                                      if (v23 != *v7) {
                                        goto LABEL_60;
                                      }
                                      *(void *)(v3 + 312) = *v17;
                                    }

                                    int v23 = 0;
                                    uint64_t v18 = (void *)(v3 + 344);
                                    if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 344), &v23))
                                    {
                                      if (*v18)
                                      {
                                        if (v23 != *v8) {
                                          goto LABEL_60;
                                        }
                                        *(void *)(v3 + 336) = *v18;
                                      }

                                      int v23 = 0;
                                      uint64_t v19 = (void *)(v3 + 360);
                                      if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 360), &v23))
                                      {
                                        if (*v19)
                                        {
                                          if (v23 != *v8) {
                                            goto LABEL_60;
                                          }
                                          *(void *)(v3 + 352) = *v19;
                                        }

                                        int v23 = 0;
                                        uint64_t v20 = (void *)(v3 + 384);
                                        if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 384), &v23))
                                        {
                                          if (!*v20) {
                                            goto LABEL_55;
                                          }
                                          if (v23 == *v9)
                                          {
                                            *(void *)(v3 + 376) = *v20;
LABEL_55:
                                            int v23 = 0;
                                            uint64_t v21 = (void *)(v3 + 400);
                                            if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 400), &v23))
                                            {
                                              if (!*v21)
                                              {
LABEL_59:
                                                *(void *)(v3 + 8) = sub_100095ED0;
                                                *(void *)(v3 + 16) = sub_100095F50;
                                                *(void *)(v3 + 24) = 0LL;
                                                *(void *)(v3 + 32) = 0LL;
                                                return v3;
                                              }

                                              if (v23 == *v9)
                                              {
                                                *(void *)(v3 + 392) = *v21;
                                                goto LABEL_59;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t sub_100096C70(uint64_t *a1)
{
  return sub_10009460C(a1);
}

uint64_t sub_100096CA8(uint64_t a1, _WORD *a2, uint64_t a3, _WORD *a4, int a5, void *a6, uint64_t a7, int *a8)
{
  int v10 = a4;
  *a8 = 0;
  *a4 = -1;
  uint64_t v13 = 2LL * (int)((4 * sub_1000CC52C((unint64_t)a2)) | 2);
  uint64_t v21 = (void *)sub_1000CAF58(v13, v14, v15, v16, v17, v18, v19, v20);
  *(_WORD *)uint64_t v21 = 0;
  uint64_t v22 = (unsigned __int16 *)v21 + 1;
  if (*(_WORD *)(a1 + 70)) {
    unsigned __int16 v23 = -3;
  }
  else {
    unsigned __int16 v23 = 0;
  }
  uint64_t v53 = *(void *)(a1 + 184);
  __int16 v24 = *a2;
  uint64_t v50 = v13;
  uint64_t v51 = a1;
  uint64_t v49 = a8;
  if (*a2)
  {
    uint64_t v47 = a6;
    int v25 = 0;
    uint64_t v26 = *(void *)(a1 + 168);
    uint64_t v27 = a2 + 1;
    uint64_t v52 = *(void *)(a1 + 200);
    do
    {
      if ((unsigned __int16)(v24 + 10332) >= 0xD45Cu)
      {
        __int16 v29 = (unsigned __int16)(v24 + 21504) / 0x1Cu;
        unsigned __int16 v30 = v24 - 28 * v29 + 21545;
        uint64_t v31 = (unsigned __int16)(v24 + 21504) / 0x24Cu + 1;
        unsigned __int16 v32 = sub_10007A528(v26, (unsigned __int16)(v29 - 21 * ((unsigned __int16)(v24 + 21504) / 0x24Cu + 1) + 41));
        unsigned __int16 v33 = sub_10007A528(v26, v30);
        uint64_t v34 = (int)v31 + 20 * v25 - 800;
        if (!v25) {
          uint64_t v34 = v31;
        }
        uint64_t v35 = 2 * v34;
        *(v22 - 1) = *(_WORD *)(v53 + v35);
        *uint64_t v22 = v23;
        v22[1] = *(_WORD *)(v52 + v35);
        v22[2] = v32;
        v22[3] = v33;
        v22 += 4;
        int v25 = v30;
      }

      int v28 = *v27++;
      __int16 v24 = v28;
    }

    while (v28);
    if (v25)
    {
      int v36 = 20 * v25 - 800;
      a6 = v47;
      goto LABEL_15;
    }

    a6 = v47;
  }

  int v36 = 0;
LABEL_15:
  *(v22 - 1) = *(_WORD *)(v53 + 2LL * v36);
  *uint64_t v22 = v23;
  unint64_t v37 = (char *)v22 - (char *)v21 + 2;
  if ((int)(v37 >> 1) < 1)
  {
    int v39 = 0;
    uint64_t v42 = v50;
LABEL_38:
    sub_1000CB038(v21, v42);
    uint64_t result = 0LL;
    *uint64_t v49 = v39;
    return result;
  }

  uint64_t v38 = 0LL;
  int v39 = 0;
  uint64_t v40 = (v37 >> 1);
  do
  {
    LODWORD(v55) = 0;
    unsigned int v41 = *(unsigned __int16 *)((char *)v21 + v38);
    if (*(_WORD *)((char *)v21 + v38))
    {
      if (v41 == v23)
      {
        if (v39 < 1) {
          *(_WORD *)((char *)v21 + v38) = 0;
        }
        else {
          ++v39;
        }
      }

      else
      {
        sub_10007A9E8(*(void *)(v51 + 48), v41, 0LL, &v55);
        v39 += v55;
      }
    }

    v38 += 2LL;
  }

  while (2 * v40 != v38);
  if (v39 > 0) {
    ++v39;
  }
  uint64_t v42 = v50;
  if (!v39 || v39 > a5) {
    goto LABEL_38;
  }
  uint64_t v43 = 0LL;
  do
  {
    uint64_t v55 = 0LL;
    int v54 = 0;
    unsigned int v44 = *((unsigned __int16 *)v21 + v43);
    if (*((_WORD *)v21 + v43))
    {
      if (v44 == v23)
      {
        *v10++ = *(_WORD *)(v51 + 70);
      }

      else
      {
        sub_10007A9E8(*(void *)(v51 + 48), v44, &v55, &v54);
        if (v54 >= 1)
        {
          for (uint64_t i = 0LL; i < v54; ++i)
            *v10++ = *(_WORD *)(v55 + 2 * i);
        }
      }
    }

    ++v43;
  }

  while (v43 != v40);
  _WORD *v10 = -1;
  *a6 = 0LL;
  sub_1000CB038(v21, v50);
  return 1LL;
}

uint64_t *sub_100096FD0(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(216LL);
  uint64_t v3 = (uint64_t *)v2;
  if (!v2) {
    return v3;
  }
  if (!sub_100094ED0(v2, a1))
  {
LABEL_13:
    sub_1000C0EF8((uint64_t)v3);
    return 0LL;
  }

  uint64_t v4 = sub_10007A574(a1);
  v3[22] = v4;
  if (!v4) {
    goto LABEL_12;
  }
  v3[21] = v4;
  int v11 = 0;
  int v5 = v3 + 24;
  uint64_t v6 = *v5;
  if (*v5)
  {
    if (v11 != 580) {
      goto LABEL_12;
    }
  }

  if (v6) {
    v3[23] = v6;
  }
  int v10 = 0;
  int v7 = v3 + 26;
  if (!sub_1000BCED0(a1, 2, v3 + 26, &v10) || (uint64_t v8 = *v7) != 0 && v10 != 580)
  {
LABEL_12:
    sub_1000C0EF8(v3[26]);
    sub_1000C0EF8(v3[24]);
    sub_10007A4F8(v3[22]);
    sub_10009460C(v3);
    goto LABEL_13;
  }

  if (v8) {
    v3[25] = v8;
  }
  v3[1] = (uint64_t)sub_100096C70;
  v3[2] = (uint64_t)sub_100096CA8;
  v3[3] = 0LL;
  v3[4] = 0LL;
  return v3;
}

uint64_t sub_100097108(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (v2)
  {
    if (*(int *)(a1 + 172) >= 1)
    {
      uint64_t v3 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(a1 + 192) + 8 * v3++));
      while (v3 < *(int *)(a1 + 172));
      uint64_t v2 = *(void *)(a1 + 192);
    }

    sub_1000C0EF8(v2);
  }

  uint64_t v4 = *(void *)(a1 + 176);
  if (v4)
  {
    if (*(int *)(a1 + 172) >= 1)
    {
      uint64_t v5 = 0LL;
      do
        sub_100074AC8(*(void *)(*(void *)(a1 + 176) + 8 * v5++));
      while (v5 < *(int *)(a1 + 172));
      uint64_t v4 = *(void *)(a1 + 176);
    }

    sub_1000C0EF8(v4);
  }

  return sub_10009460C((uint64_t *)a1);
}

uint64_t sub_1000971A0(uint64_t a1, uint64_t a2, unsigned int a3, _WORD *a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a1 + 168);
  if (v7 != 1)
  {
    if (v7) {
      goto LABEL_6;
    }
    if (a3 < 3) {
      a3 = 10;
    }
    if (a3 - 14 >= 0xFFFFFFFC)
    {
LABEL_6:
      switch(a3)
      {
        case 0xAu:
          break;
        case 0xBu:
          goto LABEL_13;
        case 0xCu:
          uint64_t v8 = *(void *)(*(void *)(a1 + 176) + 16LL);
          if (!v8) {
            goto LABEL_18;
          }
          goto LABEL_14;
        case 0xDu:
          uint64_t v8 = *(void *)(*(void *)(a1 + 176) + 24LL);
          if (!v8) {
            goto LABEL_18;
          }
          goto LABEL_14;
        default:
          goto LABEL_18;
      }
    }

void *sub_1000972B4(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(208LL);
  uint64_t v3 = (void *)v2;
  if (!v2) {
    return v3;
  }
  if (!sub_100094ED0(v2, a1))
  {
LABEL_12:
    sub_1000C0EF8((uint64_t)v3);
    return 0LL;
  }

  if (!sub_1000BCD38(a1, v3 + 21)) {
    goto LABEL_11;
  }
  uint64_t v4 = sub_1000C0F68(8LL * *((int *)v3 + 43));
  v3[22] = v4;
  if (!v4) {
    goto LABEL_11;
  }
  if (*((int *)v3 + 43) >= 1)
  {
    uint64_t v5 = 0LL;
    do
    {
      *(void *)(v3[22] + 8 * v5) = sub_100094520(a1);
      int v6 = *((_DWORD *)v3 + 43);
      if (!*(void *)(v3[22] + 8 * v5)) {
        break;
      }
      ++v5;
    }

    while (v5 < v6);
    if ((int)v5 < v6)
    {
LABEL_11:
      sub_100097108((uint64_t)v3);
      goto LABEL_12;
    }
  }

  v3[1] = sub_100097108;
  v3[2] = sub_1000971A0;
  v3[3] = 0LL;
  v3[4] = 0LL;
  return v3;
}

uint64_t sub_1000973CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 208);
  if (v2)
  {
    if (*(int *)(a1 + 168) >= 1)
    {
      uint64_t v3 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(a1 + 208) + 8 * v3++));
      while (v3 < *(int *)(a1 + 168));
      uint64_t v2 = *(void *)(a1 + 208);
    }

    sub_1000C0EF8(v2);
  }

  uint64_t v4 = *(void *)(a1 + 176);
  if (v4)
  {
    if (*(int *)(a1 + 168) >= 1)
    {
      uint64_t v5 = 0LL;
      do
        sub_100074AC8(*(void *)(*(void *)(a1 + 176) + 8 * v5++));
      while (v5 < *(int *)(a1 + 168));
      uint64_t v4 = *(void *)(a1 + 176);
    }

    sub_1000C0EF8(v4);
  }

  return sub_10009460C((uint64_t *)a1);
}

BOOL sub_10009746C( uint64_t a1, unsigned __int16 *a2, unsigned int a3, char *a4, unsigned int a5, uint64_t a6, uint64_t a7, int *a8)
{
  uint64_t v77 = sub_1000CB0B0();
  if (a3 <= 2) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = 0;
  }
  uint64_t v79 = a4;
  uint64_t v80 = a8;
  *a8 = 0;
  *(_WORD *)a4 = -1;
  int v14 = sub_1000CC52C((unint64_t)a2);
  uint64_t v84 = a1;
  uint64_t v15 = *(unsigned int *)(a1 + 168);
  __b = (unsigned int *)sub_1000CAF58(4LL * (int)v15, v16, v17, v18, v19, v20, v21, v22);
  if (v13)
  {
    if (v13 == 1)
    {
      if ((int)v15 >= 1)
      {
        size_t v30 = 4 * v15;
        uint64_t v31 = &unk_1000F0890;
        goto LABEL_12;
      }
    }

    else if ((int)v15 >= 1)
    {
      size_t v30 = 4 * v15;
      uint64_t v31 = &unk_1000F0880;
LABEL_12:
      memset_pattern16(__b, v31, v30);
LABEL_13:
      unint64_t v46 = sub_1000CAF58(8LL * (int)v15, v32, v33, v34, v35, v36, v37, v38);
      uint64_t v47 = 0LL;
      uint64_t v48 = 2LL * (v14 + 1);
      do
        *(void *)(v46 + 8 * v47++) = sub_1000CAF58(v48, v39, v40, v41, v42, v43, v44, v45);
      while (v15 != v47);
      unint64_t v83 = v46;
      int v85 = 1;
      goto LABEL_17;
    }
  }

  else if ((int)v15 >= 1)
  {
    bzero(__b, 4 * v15);
    goto LABEL_13;
  }

  unint64_t v83 = sub_1000CAF58(8LL * (int)v15, v23, v24, v25, v26, v27, v28, v29);
  int v85 = 0;
LABEL_17:
  int v86 = 0;
  int v49 = 0;
  int v50 = 0;
  LODWORD(v51) = 0;
  uint64_t v52 = (__int16 *)v79;
  uint64_t v53 = a5;
  unsigned int v54 = *a2;
  if (!*a2) {
    goto LABEL_28;
  }
LABEL_20:
  int v49 = sub_1000CB108(v54, v49);
  if (v85)
  {
LABEL_21:
    uint64_t v57 = *(_DWORD **)(v84 + 184);
    if (v49 == *v57)
    {
      int v58 = 0;
      BOOL v59 = 1;
    }

    else
    {
      uint64_t v60 = 1LL;
      while (v15 != v60)
      {
        int v61 = v57[v60++];
        if (v49 == v61)
        {
          int v58 = v60 - 1;
          BOOL v59 = v60 - 1 < (int)v15;
          goto LABEL_30;
        }
      }

      BOOL v59 = v60 < (int)v15;
      int v58 = v15;
    }

    goto LABEL_30;
  }

  while (1)
  {
    int v58 = 0;
    BOOL v59 = 0;
LABEL_30:
    int v62 = (_DWORD)v51 == 0 && v59 ? v58 : v50;
    BOOL v63 = v58 == v62 && v59;
    if ((int)v51 < 1 || v63)
    {
      int v50 = v62;
      if (v59) {
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v64 = 8LL * v62;
      uint64_t v65 = *(void *)(*(void *)(v84 + 176) + v64);
      int v87 = 0;
      uint64_t v66 = (*(uint64_t (**)(uint64_t, void, void, __int16 *, uint64_t, uint64_t, uint64_t, int *))(v65 + 16))( v65,  *(void *)(v83 + v64),  __b[v62],  v52,  v53,  a6,  1LL,  &v87);
      if (v86)
      {
        if (v87 <= 0)
        {
          if (*v52 != -1)
          {
            int v71 = *v80 + 1;
            uint64_t v72 = v52 + 1;
            do
            {
              *uint64_t v80 = v71;
              int v73 = *v72++;
              ++v71;
            }

            while (v73 != -1);
          }

          int v86 = 1;
          uint64_t v52 = (__int16 *)v79;
          LODWORD(v51) = 0;
          if (v59)
          {
            int v50 = v58;
            goto LABEL_19;
          }
        }

        else
        {
          *v80 += v87;
          int v86 = 1;
          LODWORD(v51) = 0;
          if (v59)
          {
            int v50 = v58;
            goto LABEL_19;
          }
        }
      }

      else if (v87 < 1)
      {
        if ((_DWORD)v66 == 1 && *v52 != -1)
        {
          do
          {
            int v74 = v52[1];
            ++v52;
            uint64_t v53 = (v53 - 1);
          }

          while (v74 != -1);
        }

        int v86 = 0;
        LODWORD(v51) = 0;
        if (v59)
        {
          int v50 = v58;
LABEL_19:
          uint64_t v55 = 8LL * v50;
          *(_WORD *)(*(void *)(v83 + v55) + 2LL * (int)v51) = v54;
          uint64_t v51 = (int)v51 + 1LL;
          *(_WORD *)(*(void *)(v83 + v55) + 2 * v51) = 0;
          unsigned int v56 = a2[1];
          ++a2;
          unsigned int v54 = v56;
          if (v56) {
            goto LABEL_20;
          }
          goto LABEL_28;
        }
      }

      else
      {
        *uint64_t v80 = v87 + ((unint64_t)((char *)v52 - v79) >> 1);
        *(_WORD *)uint64_t v79 = -1;
        int v86 = 1;
        uint64_t v52 = (__int16 *)v79;
        uint64_t v53 = a5;
        LODWORD(v51) = 0;
        if (v59)
        {
          int v50 = v58;
          goto LABEL_19;
        }
      }
    }

    if (!v54) {
      break;
    }
    unsigned int v75 = a2[1];
    ++a2;
    unsigned int v54 = v75;
    if (v75) {
      goto LABEL_20;
    }
LABEL_28:
    int v49 = 0;
    if (v85) {
      goto LABEL_21;
    }
  }

  sub_1000CB094(v77);
  if (v86) {
    ++*v80;
  }
  return *(__int16 *)v79 != -1;
}

void *sub_1000978B0(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(224LL);
  uint64_t v3 = (void *)v2;
  if (!v2) {
    return v3;
  }
  if (!sub_100094ED0(v2, a1))
  {
LABEL_23:
    sub_1000C0EF8((uint64_t)v3);
    return 0LL;
  }

  uint64_t v4 = (int *)(v3 + 21);
  if (!sub_1000BCD38(a1, v3 + 21)) {
    goto LABEL_22;
  }
  uint64_t v5 = sub_1000C0F68(4LL * *((int *)v3 + 42));
  v3[24] = v5;
  if (!v5) {
    goto LABEL_22;
  }
  LODWORD(v6) = *v4;
  if (*v4 < 1)
  {
LABEL_22:
    sub_1000973CC((uint64_t)v3);
    goto LABEL_23;
  }

  uint64_t v7 = 0LL;
  while (1)
  {
    int v12 = 0;
    if (!sub_1000BCD38(a1, &v12)) {
      break;
    }
    *(_DWORD *)(v3[24] + 4 * v7++) = v12;
    uint64_t v6 = *((int *)v3 + 42);
    if (v7 >= v6)
    {
      goto LABEL_22;
    }
  }

  LODWORD(v6) = *v4;
LABEL_14:
  v3[23] = v3[24];
  uint64_t v8 = sub_1000C0F68(8LL * (int)v6);
  v3[22] = v8;
  if (!v8) {
    goto LABEL_22;
  }
  int v9 = *v4;
  if (*v4 < 1)
  {
    LODWORD(v10) = 0;
  }

  else
  {
    uint64_t v10 = 0LL;
    do
    {
      *(void *)(v3[22] + 8 * v10) = sub_100094520(a1);
      int v9 = *((_DWORD *)v3 + 42);
      if (!*(void *)(v3[22] + 8 * v10)) {
        break;
      }
      ++v10;
    }

    while (v10 < v9);
  }

  v3[1] = sub_1000973CC;
  v3[2] = sub_10009746C;
  v3[3] = 0LL;
  v3[4] = 0LL;
  return v3;
}

uint64_t sub_100097A40(uint64_t *a1)
{
  return sub_10009460C(a1);
}

uint64_t sub_100097B00( _DWORD *a1, unint64_t a2, unsigned int a3, _WORD *a4, unsigned int a5, uint64_t a6, int a7, unsigned int *a8)
{
  uint64_t v15 = sub_1000CB0B0();
  if (a3 <= 3) {
    int v16 = 3;
  }
  else {
    int v16 = a3;
  }
  else {
    int v18 = v16;
  }
  int v252 = v18;
  *a8 = 0;
  int v19 = sub_1000CC52C(a2);
  if (!v19) {
    return 0LL;
  }
  int v27 = v19;
  int v246 = a1[64];
  int v245 = v246 / 2;
  int64x2_t v250 = (_WORD *)a2;
  if (a1[61])
  {
    int v28 = 3 * v19;
    int v29 = a1[60];
  }

  else
  {
    int v28 = a1[60];
    int v29 = v19;
  }

  uint64_t v244 = a8;
  unsigned int v262 = a1;
  unsigned int v240 = a5;
  uint64_t v241 = a6;
  uint64_t v242 = v15;
  uint64_t v247 = (char *)sub_1000CAF58(2LL * (v28 * v29 + 2 * v245 + 1), v20, v21, v22, v23, v24, v25, v26);
  if (v246 >= 2) {
    bzero(v247, 2LL * (v245 - 1) + 2);
  }
  if (a7 >= 10) {
    int v38 = 10;
  }
  else {
    int v38 = a7;
  }
  uint64_t v39 = (void *)sub_1000CAF58(8LL * (v38 + 1), v31, v32, v33, v34, v35, v36, v37);
  unint64_t v47 = sub_1000CAF58(8LL * (v38 + 1), v40, v41, v42, v43, v44, v45, v46);
  unint64_t v55 = sub_1000CAF58(4LL * (v38 + 1), v48, v49, v50, v51, v52, v53, v54);
  int v254 = v38 + 1;
  unint64_t v63 = sub_1000CAF58(2LL * (v38 + 1), v56, v57, v58, v59, v60, v61, v62);
  unint64_t v71 = sub_1000CAF58(v38 + 1, v64, v65, v66, v67, v68, v69, v70);
  int64x2_t v263 = (const __int16 *)sub_1000CAF58(20LL, v72, v73, v74, v75, v76, v77, v78);
  int v93 = (const char *)sub_1000CAF58(10LL, v79, v80, v81, v82, v83, v84, v85);
  uint64_t v94 = v262;
  int v255 = v38;
  if ((v38 & 0x80000000) == 0)
  {
    int v259 = v27 + 1;
    uint64_t v95 = (v38 + 1);
    unsigned int v96 = (unint64_t *)v47;
    uint64_t v97 = (_DWORD *)v55;
    do
    {
      int v98 = v94;
      unint64_t v99 = sub_1000CAF58(2LL * v94[65] * v259, v86, v87, v88, (uint64_t)v89, v90, v91, v92);
      uint64_t v94 = v98;
      *v96++ = v99;
      *v97++ = 0;
      --v95;
    }

    while (v95);
  }

  *uint64_t v39 = 0LL;
  uint64_t v100 = v250;
  if (!*v250)
  {
    int v101 = 1;
    uint64_t v102 = (uint64_t)v262;
    int v184 = v255;
    goto LABEL_150;
  }

  int32x4_t v248 = v93 + 1;
  uint64_t v249 = v263 + 1;
  int v101 = 1;
  BOOL v253 = (unsigned __int16 *)&v247[2 * v245];
  uint64_t v102 = (uint64_t)v262;
  do
  {
    *(void *)float64x2_t v266 = 0LL;
    uint64_t v251 = v100;
    int v103 = sub_100098718(v102, (unint64_t)v100, v252, v253, &v266[1], v266);
    uint64_t v104 = v266[1];
    uint64_t v105 = v266[1];
    if (v103)
    {
      if (v246 > 1) {
        bzero(&v247[2 * v266[1] + 2 * v245], 2LL * (v245 - 1) + 2);
      }
      if ((int)v105 >= 1)
      {
        uint64_t v106 = &v247[2 * v105];
        unsigned int v107 = v247;
        uint64_t v102 = (uint64_t)v262;
        uint64_t v256 = v106;
        while (*(unsigned __int16 *)&v107[2 * v245] == *(unsigned __int16 *)(v102 + 184))
        {
          if (v101 >= 1)
          {
            uint64_t v108 = v101;
            uint64_t v109 = (uint64_t *)v47;
            int v110 = (int *)v55;
            do
            {
              __int16 v111 = *(_WORD *)(v102 + 68);
              uint64_t v112 = *v109++;
              uint64_t v113 = *v110;
              *v110++ = v113 + 1;
              *(_WORD *)(v112 + 2 * v113) = v111;
              --v108;
            }

            while (v108);
          }

LABEL_199:
  if ((v186 & 0x80000000) != 0)
  {
    uint64_t v228 = v241;
    uint64_t v227 = v242;
    uint64_t v229 = (uint64_t)v262;
    *v244 -= v186;
  }

  else
  {
    uint64_t v228 = v241;
    uint64_t v227 = v242;
    uint64_t v229 = (uint64_t)v262;
    *uint64_t v244 = 0;
  }

  if (!*(void *)(v229 + 80) || (uint64_t v30 = sub_10009464C(v229, a4, v185, v30), (int)v30 >= 1))
  {
    if (*(int *)(v229 + 104) < 1
      || (uint64_t v30 = sub_100094760(v229, (uint64_t)a4, v185, v30, (uint64_t)v89, v90, v91, v92), (int)v30 >= 1))
    {
      uint64_t v230 = 0LL;
      uint64_t v230 = v30 & 0xFFFFFFFC;
      float64x2_t v231 = (__int128 *)(v39 + 2);
      float64x2_t v232 = (_OWORD *)(v228 + 16);
      uint64_t v233 = v230;
      do
      {
        __int128 v234 = *v231;
        *(v232 - 1) = *(v231 - 1);
        *float64x2_t v232 = v234;
        v231 += 2;
        v232 += 2;
        v233 -= 4LL;
      }

      while (v233);
      if (v230 != v30)
      {
LABEL_212:
        float64x2_t v235 = (void *)(v228 + 8 * v230);
        uint64_t v236 = &v39[v230];
        uint64_t v237 = v30 - v230;
        do
        {
          uint64_t v238 = *v236++;
          *v235++ = v238;
          --v237;
        }

        while (v237);
      }
    }
  }

LABEL_214:
  sub_1000CB094(v227);
  return v30;
}

uint64_t sub_100098718(uint64_t a1, unint64_t a2, int a3, unsigned __int16 *a4, _DWORD *a5, _DWORD *a6)
{
  int v12 = sub_1000CC52C(a2);
  int v20 = v12;
  char v90 = 1;
  int v92 = a3;
  switch(a3)
  {
    case 3:
    case 6:
      *a6 = 0;
      if (v12 < 1) {
        goto LABEL_93;
      }
      goto LABEL_3;
    case 4:
      char v90 = 0;
      *a6 = 0;
      if (v12 < 1) {
        goto LABEL_93;
      }
      goto LABEL_3;
    case 5:
      unsigned int v89 = a5;
      if (v12 < 1)
      {
        int v72 = 0;
        int v71 = 0;
      }

      else
      {
        int v71 = 0;
        int v72 = 0;
        uint64_t v73 = (unsigned __int16 *)a2;
        uint64_t v74 = v12;
        do
        {
          while (1)
          {
            unsigned int v76 = *v73++;
            unsigned int v75 = v76;
            int v71 = 1;
            if (!--v74) {
              goto LABEL_86;
            }
          }

          --v74;
        }

        while (v74);
      }

LABEL_86:
      if (v71) {
        BOOL v83 = v72 == 0;
      }
      else {
        BOOL v83 = 1;
      }
      char v84 = v83;
      char v90 = v84;
      a5 = v89;
      a3 = v92;
      *a6 = 0;
      if (v20 < 1)
      {
LABEL_93:
        LODWORD(v22) = 0;
        int v91 = -1;
        LODWORD(v94) = 0;
        *a4 = 0;
        goto LABEL_50;
      }

            if (!*v41)
            {
              if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 5236)) {
                uint64_t result = sub_100038D98(v43);
              }
LABEL_88:
              if ((*(_DWORD *)(v5 + 33340) & 0x80000000) == 0)
              {
                __int128 v46 = -1;
                do
                {
                  unint64_t v47 = sub_100059730(*(void **)(v5 + 392), v46 + 1, &v58);
                  sub_1000B21BC(v5, v47, (uint64_t)v58);
                  uint64_t v48 = (uint64_t *)(v5 + 520);
                  if (*(_DWORD *)(v5 + 33352)) {
                    goto LABEL_97;
                  }
                  if (*(_DWORD *)(v5 + 33356))
                  {
                    uint64_t result = sub_1000398FC(*(void *)(v5 + 528));
                    if (*(_DWORD *)(v5 + 33356) && (_DWORD)result) {
                      return sub_10003991C(v5);
                    }
                  }

                  else
                  {
                    uint64_t result = 1LL;
                  }

                  uint64_t v48 = (uint64_t *)(v5 + 536);
                  if (*v41) {
LABEL_97:
                  }
                    uint64_t result = sub_1000398FC(*v48);
                  if ((_DWORD)result) {
                    return sub_10003991C(v5);
                  }
                  ++v46;
                }

                while (v46 < *(_DWORD *)(v5 + 33340));
              }

        if (++v140 == v141) {
          goto LABEL_82;
        }
      }

      uint64_t v135 = *(_DWORD *)v152 | 0xC0000000;
LABEL_93:
      sub_1000CB038(v152, 4LL);
      goto LABEL_94;
    }

uint64_t sub_100098D94(uint64_t a1)
{
  uint64_t v2 = sub_1000C1074(568LL);
  uint64_t v3 = v2;
  if (v2)
  {
    if (!sub_100094ED0(v2, a1))
    {
LABEL_154:
      sub_1000C0EF8(v3);
      return 0LL;
    }

    if (sub_1000BCDD4(a1, (_WORD *)(v3 + 184)))
    {
      if (sub_1000BCD38(a1, (void *)(v3 + 240)) && sub_1000BCCEC(a1, (_DWORD *)(v3 + 244)))
      {
        if (sub_1000BCDD4(a1, (_WORD *)(v3 + 248)))
        {
          if (sub_1000BCDD4(a1, (_WORD *)(v3 + 250)))
          {
            if (sub_1000BCDD4(a1, (_WORD *)(v3 + 252)))
            {
              if (sub_1000BCD38(a1, (void *)(v3 + 256))
                && sub_1000BCD38(a1, (void *)(v3 + 260))
                && sub_1000BCD38(a1, (void *)(v3 + 280))
                && sub_1000BCD38(a1, (void *)(v3 + 304)))
              {
                uint64_t v4 = (int *)(v3 + 328);
                if (sub_1000BCD38(a1, (void *)(v3 + 328)))
                {
                  uint64_t v5 = (int *)(v3 + 504);
                  if (sub_1000BCD38(a1, (void *)(v3 + 504)) && sub_1000BCD38(a1, (void *)(v3 + 528)))
                  {
                    uint64_t v6 = sub_10007B148(a1);
                    *(void *)(v3 + 176) = v6;
                    if (v6)
                    {
                      *(void *)(v3 + 168) = v6;
                      uint64_t v7 = sub_10007AABC(a1);
                      *(void *)(v3 + 200) = v7;
                      if (v7)
                      {
                        *(void *)(v3 + 192) = v7;
                        uint64_t v8 = sub_10007B148(a1);
                        *(void *)(v3 + 216) = v8;
                        if (v8)
                        {
                          *(void *)(v3 + 208) = v8;
                          int v9 = sub_10007AABC(a1);
                          *(void *)(v3 + 232) = v9;
                          if (v9)
                          {
                            *(void *)(v3 + 224) = v9;
                            uint64_t v10 = sub_10007AF14(*(void *)(v3 + 168));
                            int v35 = 0;
                            uint64_t v11 = (void *)(v3 + 272);
                            if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 272), &v35))
                            {
                              if (*v11)
                              {
                                if (v10 + 1 != v35) {
                                  goto LABEL_153;
                                }
                                *(void *)(v3 + 264) = *v11;
                              }

                              int v35 = 0;
                              int v12 = (void *)(v3 + 296);
                              if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 296), &v35))
                              {
                                if (*v12)
                                {
                                  if (v35 != *(_DWORD *)(v3 + 280)) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 288) = *v12;
                                }

                                if (*v5 >= 1)
                                {
                                  uint64_t v13 = sub_10007B148(a1);
                                  *(void *)(v3 + 416) = v13;
                                  if (!v13) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 408) = v13;
                                  uint64_t v14 = sub_10007B148(a1);
                                  *(void *)(v3 + 432) = v14;
                                  if (!v14) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 424) = v14;
                                  uint64_t v15 = sub_10007B148(a1);
                                  *(void *)(v3 + 448) = v15;
                                  if (!v15) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 440) = v15;
                                  uint64_t v16 = sub_10007B148(a1);
                                  *(void *)(v3 + 464) = v16;
                                  if (!v16) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 456) = v16;
                                  uint64_t v17 = sub_10007B148(a1);
                                  *(void *)(v3 + 480) = v17;
                                  if (!v17) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 472) = v17;
                                  uint64_t v18 = sub_10007B148(a1);
                                  *(void *)(v3 + 496) = v18;
                                  if (!v18) {
                                    goto LABEL_153;
                                  }
                                  *(void *)(v3 + 488) = v18;
                                  int v35 = 0;
                                  uint64_t v19 = (void *)(v3 + 520);
                                  if (*v19)
                                  {
                                    if (v35 != *v5) {
                                      goto LABEL_153;
                                    }
                                    *(void *)(v3 + 512) = *v19;
                                  }

                                  int v35 = 0;
                                  int v20 = (void *)(v3 + 544);
                                  if (*v20)
                                  {
                                    if (v35 != *(_DWORD *)(v3 + 528)) {
                                      goto LABEL_153;
                                    }
                                    *(void *)(v3 + 536) = *v20;
                                  }
                                }

                                uint64_t v21 = sub_100078964(a1);
                                *(void *)(v3 + 560) = v21;
                                if (v21)
                                {
                                  *(void *)(v3 + 552) = v21;
                                  int v35 = 0;
                                  uint64_t v22 = (void *)(v3 + 320);
                                  if (sub_1000BCED0(a1, 4, (uint64_t *)(v3 + 320), &v35))
                                  {
                                    if (!*v22)
                                    {
                                      if (!*(void *)(v3 + 312)) {
                                        goto LABEL_152;
                                      }
                                      goto LABEL_49;
                                    }

                                    if (v35 == *(_DWORD *)(v3 + 304) + 1)
                                    {
                                      *(void *)(v3 + 312) = *v22;
LABEL_49:
                                      uint64_t v23 = *v4;
                                      if ((_DWORD)v23)
                                      {
                                        uint64_t v24 = sub_1000C1074(4 * v23);
                                        if (v24)
                                        {
                                          uint64_t v25 = v24;
                                          int v26 = *v4;
                                          if (*v4 < 1)
                                          {
                                            LODWORD(v27) = 0;
                                          }

                                          else
                                          {
                                            uint64_t v27 = 0LL;
                                            uint64_t v28 = v24;
                                            do
                                            {
                                              ++v27;
                                              v28 += 4LL;
                                            }

                                            while (v27 < *v4);
                                            int v26 = *v4;
                                          }

                                          if ((int)v27 >= v26)
                                          {
                                            uint64_t v29 = sub_1000C1074(128LL);
                                            if (v29)
                                            {
                                              int v30 = (void *)v29;
                                              int v35 = 0;
                                              if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                              {
                                                if (v35 != -1) {
                                                  *int v30 = v25 + 4LL * v35;
                                                }
                                                int v35 = 0;
                                                if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                {
                                                  if (v35 != -1) {
                                                    v30[1] = v25 + 4LL * v35;
                                                  }
                                                  int v35 = 0;
                                                  if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                  {
                                                    if (v35 != -1) {
                                                      v30[2] = v25 + 4LL * v35;
                                                    }
                                                    int v35 = 0;
                                                    if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                    {
                                                      if (v35 != -1) {
                                                        v30[3] = v25 + 4LL * v35;
                                                      }
                                                      int v35 = 0;
                                                      if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                      {
                                                        if (v35 != -1) {
                                                          v30[4] = v25 + 4LL * v35;
                                                        }
                                                        int v35 = 0;
                                                        if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                        {
                                                          if (v35 != -1) {
                                                            v30[5] = v25 + 4LL * v35;
                                                          }
                                                          int v35 = 0;
                                                          if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                          {
                                                            if (v35 != -1) {
                                                              v30[6] = v25 + 4LL * v35;
                                                            }
                                                            int v35 = 0;
                                                            if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                            {
                                                              if (v35 != -1) {
                                                                v30[7] = v25 + 4LL * v35;
                                                              }
                                                              int v35 = 0;
                                                              if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                              {
                                                                if (v35 != -1) {
                                                                  v30[8] = v25 + 4LL * v35;
                                                                }
                                                                int v35 = 0;
                                                                if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                                {
                                                                  if (v35 != -1) {
                                                                    v30[9] = v25 + 4LL * v35;
                                                                  }
                                                                  int v35 = 0;
                                                                  if (sub_1000BCD38(a1, &v35) && v35 >= -1 && v35 < *v4)
                                                                  {
                                                                    if (v35 != -1) {
                                                                      v30[10] = v25 + 4LL * v35;
                                                                    }
                                                                    int v35 = 0;
                                                                    if (sub_1000BCD38(a1, &v35)
                                                                      && v35 >= -1
                                                                      && v35 < *v4)
                                                                    {
                                                                      if (v35 != -1) {
                                                                        v30[11] = v25 + 4LL * v35;
                                                                      }
                                                                      int v35 = 0;
                                                                      if (sub_1000BCD38(a1, &v35)
                                                                        && v35 >= -1
                                                                        && v35 < *v4)
                                                                      {
                                                                        if (v35 != -1) {
                                                                          v30[12] = v25 + 4LL * v35;
                                                                        }
                                                                        int v35 = 0;
                                                                        if (sub_1000BCD38(a1, &v35)
                                                                          && v35 >= -1
                                                                          && v35 < *v4)
                                                                        {
                                                                          if (v35 != -1) {
                                                                            v30[13] = v25 + 4LL * v35;
                                                                          }
                                                                          int v35 = 0;
                                                                          if (sub_1000BCD38(a1, &v35)
                                                                            && v35 >= -1
                                                                            && v35 < *v4)
                                                                          {
                                                                            if (v35 != -1) {
                                                                              v30[14] = v25 + 4LL * v35;
                                                                            }
                                                                            int v35 = 0;
                                                                            if (sub_1000BCD38(a1, &v35)
                                                                              && v35 >= -1
                                                                              && v35 < *v4)
                                                                            {
                                                                              if (v35 != -1) {
                                                                                v30[15] = v25 + 4LL * v35;
                                                                              }
                                                                              int v35 = 0;
                                                                              uint64_t v31 = (uint64_t *)(v3 + 376);
                                                                              if (sub_1000BCED0( a1,  4,  (uint64_t *)(v3 + 376),  &v35))
                                                                              {
                                                                                uint64_t v32 = *v31;
                                                                                if (!*v31 || v35 == 16)
                                                                                {
                                                                                  if (v32) {
                                                                                    *(void *)(v3 + 368) = v32;
                                                                                  }
                                                                                  if (sub_1000BCD38( a1,  (void *)(v3 + 384)))
                                                                                  {
                                                                                    int v35 = 0;
                                                                                    uint64_t v33 = (void *)(v3 + 400);
                                                                                    if (sub_1000BCED0(a1, 2, (uint64_t *)(v3 + 400), &v35))
                                                                                    {
                                                                                      if (!*v33)
                                                                                      {
LABEL_151:
                                                                                        *(void *)(v3 + 336) = v25;
                                                                                        *(void *)(v3 + 344) = v25;
                                                                                        *(void *)(v3 + 352) = v30;
                                                                                        *(void *)(v3 + 360) = v30;
                                                                                        goto LABEL_152;
                                                                                      }

                                                                                      if (v35 == *(_DWORD *)(v3 + 384))
                                                                                      {
                                                                                        *(void *)(v3 + 392) = *v33;
                                                                                        goto LABEL_151;
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }

                                        goto LABEL_153;
                                      }

LABEL_153:
    sub_100097A40((uint64_t *)v3);
    goto LABEL_154;
  }

  return v3;
}

BOOL sub_100099628(uint64_t a1, unint64_t a2)
{
  if (qword_1000FDCC0)
  {
    HIDWORD(v42) = *(_DWORD *)(qword_1000FDCC0 + 4272);
    int v43 = *(_DWORD *)(qword_1000FDCC0 + 4288);
    LODWORD(v42) = *(_DWORD *)(qword_1000FDCC0 + 4280);
  }

  else
  {
    int v43 = 0;
    uint64_t v42 = 0LL;
  }

  int v49 = 0;
  unsigned int v4 = 0;
  int v46 = 0;
  int v47 = 0;
  v50[0] = 0;
  unint64_t v5 = a2;
  uint64_t v6 = (__int16 *)a2;
  unint64_t v7 = a2 + 2LL * (int)sub_1000CC52C(a2);
  int v48 = 0;
  if (a2 >= v7) {
    goto LABEL_5;
  }
  while (2)
  {
    while (2)
    {
      int v28 = *(_DWORD *)(a1 + 504);
      if (!v28)
      {
        unint64_t v34 = v5 + 2;
        if (v7 > v5 + 2) {
          unint64_t v34 = v7;
        }
        unint64_t v35 = v34 + ~v5;
        if (v35 >= 0x2E)
        {
          if ((unint64_t)&v49 >= v5 + (v35 & 0xFFFFFFFFFFFFFFFELL) + 2 || v5 >= (unint64_t)&v49 + 2)
          {
            uint64_t v37 = (v35 >> 1) + 1;
            int v9 = (__int16 *)(v5 + 2 * (v37 & 0xFFFFFFFFFFFFFFF0LL));
            unsigned __int16 v38 = (_WORD *)(v5 - 2);
            unint64_t v39 = v37 & 0xFFFFFFFFFFFFFFF0LL;
            do
            {
              v38 += 16;
              v39 -= 16LL;
            }

            while (v39);
            unsigned int v8 = (unsigned __int16)*v38;
            LOWORD(v49) = *v38;
            if (v37 == (v37 & 0xFFFFFFFFFFFFFFF0LL)) {
              goto LABEL_7;
            }
          }

          else
          {
            int v9 = (__int16 *)v5;
          }
        }

        else
        {
          int v9 = (__int16 *)v5;
        }

        do
        {
          unsigned int v40 = (unsigned __int16)*v9++;
          unsigned int v8 = v40;
          LOWORD(v49) = v40;
        }

        while ((unint64_t)v9 < v7);
        goto LABEL_7;
      }

      unsigned int v8 = *(unsigned __int16 *)v5;
LABEL_55:
      int v29 = 0;
      while (1)
      {
        int v30 = v28 - 1;
        if (v28 - 1 < 0) {
          int v30 = v28;
        }
        int v31 = v30 >> 1;
        int v32 = v31 + v29;
        unsigned int v33 = *(unsigned __int16 *)(*(void *)(a1 + 512) + 2LL * (v31 + v29));
        if (v33 > v8) {
          goto LABEL_56;
        }
        if (v33 == v8) {
          break;
        }
        int v31 = v28 + ~v31;
        int v29 = v32 + 1;
LABEL_56:
        int v28 = v31;
        if (!v31) {
          goto LABEL_65;
        }
      }

      if (v5 == a2)
      {
        int v9 = (__int16 *)a2;
      }

      else
      {
        if (!v4 || sub_10007AF1C(*(void *)(a1 + 488), &v49) != 0xFFFF)
        {
LABEL_65:
          while (1)
          {
            v5 += 2LL;
            LOWORD(v49) = v8;
            if (v5 >= v7) {
              break;
            }
            int v28 = *(_DWORD *)(a1 + 504);
            unsigned int v4 = v8;
            unsigned int v8 = *(unsigned __int16 *)v5;
            if (v28) {
              goto LABEL_55;
            }
          }
        }

void *sub_100099B6C( uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *a3;
  int v12 = v11 + 1;
  unsigned int v13 = (void *)sub_1000CAF58(2LL * ((int)v11 + 1), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  int v14 = 0;
  *(_WORD *)unsigned int v13 = 0;
  int v15 = (_WORD *)a2;
  while (1)
  {
    while (1)
    {
      uint64_t v16 = (unsigned __int16)*v15;
      if ((_DWORD)v16 != 0xFFFF) {
        break;
      }
      ++v15;
    }

    if (!*v15) {
      break;
    }
    uint64_t v17 = *(unsigned __int16 *)(*(void *)(a1 + 264) + 2 * v16);
    if (v17 == 0xFFFF)
    {
      ++v15;
    }

    else
    {
      int v18 = 0;
      LODWORD(v19) = 0;
      int v20 = (_WORD *)(*(void *)(a1 + 288) + 2 * v17);
      int v21 = (unsigned __int16)*v20;
      do
      {
        uint64_t v22 = 0LL;
        uint64_t v23 = v20 + 1;
        while (1)
        {
          int v24 = v21;
          int v20 = v23;
          int v25 = (unsigned __int16)v15[v22];
          if (v21 != v25) {
            break;
          }
          ++v23;
          int v21 = (unsigned __int16)*v20;
          ++v22;
          if (!*v20)
          {
            int v18 = 1;
            break;
          }
        }

        else {
          unsigned int v26 = v22;
        }
        if (v24 == v25) {
          uint64_t v19 = v26;
        }
        else {
          uint64_t v19 = v19;
        }
        while (*v20++)
          ;
        int v21 = (unsigned __int16)*v20;
      }

      while (*v20);
      if (v18)
      {
        *((_WORD *)v13 + ++v14) = ((_DWORD)v15 - a2) >> 1;
        v15 += v19;
      }

      else
      {
        ++v15;
      }
    }
  }

  if (v14 <= 0) {
    return sub_1000CB038(v13, 2LL * v12);
  }
  if (v14 <= *(_DWORD *)(a1 + 304)) {
    unsigned int v28 = v14;
  }
  else {
    unsigned int v28 = 0;
  }
  int v29 = *(_DWORD *)(*(void *)(a1 + 312) + 4LL * v28);
  uint64_t v30 = *(void *)(a1 + 352);
  if (!v30) {
    goto LABEL_68;
  }
  uint64_t v31 = *(void *)(v30 + 8LL * v14);
  if (!v31) {
    goto LABEL_68;
  }
  uint64_t v32 = *(unsigned int *)(*(void *)(a1 + 368) + 4LL * v14);
  uint64_t v33 = 0LL;
  uint64_t v34 = *(void *)(a1 + 392);
  uint64_t v35 = a2 + 2 * v11;
  uint64_t v36 = v34 + 2;
  while (1)
  {
    uint64_t v38 = *(unsigned __int16 *)(v31 + 4 * v33);
    unint64_t v39 = (_WORD *)(v34 + 2 * v38);
    int v40 = (unsigned __int16)*v39;
    if (*v39)
    {
      uint64_t v41 = 0LL;
    }

    else
    {
      LODWORD(v41) = 0;
    }

    int v43 = *(unsigned __int8 *)(v31 + 4 * v33 + 2);
    if (v43 != 1) {
      break;
    }
    if (*(unsigned __int16 *)(v35 - 2LL * v41) == v40)
    {
      uint64_t v45 = v41;
      int v46 = (unsigned __int16 *)(v36 + 2 * v38);
      int v47 = (unsigned __int16 *)(v35 + 2 - 2 * v45);
      while (v40)
      {
        int v48 = *v47++;
        int v40 = v48;
        int v49 = *v46++;
        if (v40 != v49) {
          goto LABEL_34;
        }
      }

unint64_t sub_100099EE0(unint64_t result)
{
  uint64_t v1 = (__int16 *)result;
  LODWORD(result) = -1;
  do
  {
    int v2 = *v1++;
    uint64_t result = (result + 1);
  }

  while (v2 != -1);
  return result;
}

unint64_t sub_100099EFC(unint64_t result)
{
  uint64_t v1 = (unsigned __int16 *)result;
  LODWORD(result) = -1;
  do
  {
    int v2 = *v1++;
    uint64_t result = (result + 1);
  }

  while (v2 != 0x7FFF);
  return result;
}

uint64_t sub_100099F1C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 192));
    sub_1000C0EF8(v1[21]);
    sub_1000C0EF8(v1[19]);
    sub_1000C0EF8(v1[17]);
    sub_1000C0EF8(v1[14]);
    sub_1000C0EF8(v1[11]);
    sub_1000C0EF8(v1[9]);
    sub_1000C0EF8(v1[6]);
    sub_10007A4F8(v1[3]);
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_100099F8C(uint64_t a1)
{
  unsigned int v2 = -1;
  unsigned int v3 = sub_1000BE644(*(_DWORD *)a1, 4, 0xFFFFFFFF);
  unsigned int v4 = sub_1000BE644(*(_DWORD *)(a1 + 4), 4, v3);
  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 8), 4, v4);
  unsigned int v6 = sub_1000BE644(*(_DWORD *)(a1 + 32), 4, v5);
  unsigned int v7 = sub_1000BE644(*(_DWORD *)(a1 + 56), 4, v6);
  unsigned int v8 = sub_1000BE644(*(_DWORD *)(a1 + 96), 4, v7);
  unsigned int v9 = sub_1000BE644(*(_DWORD *)(a1 + 120), 4, v8);
  unsigned int v10 = sub_1000BE644(*(_DWORD *)(a1 + 176), 4, v9);
  unsigned int v11 = sub_10007A534(*(void *)(a1 + 16));
  unsigned int v12 = sub_1000BE644(v11, 4, v10);
  unsigned int v13 = sub_1000BE770(*(unint64_t **)(a1 + 40), 2, *(_DWORD *)(a1 + 32), 0xFFFFFFFFLL);
  unsigned int v14 = sub_1000BE644(v13, 4, v12);
  unsigned int v15 = sub_1000BE770(*(unint64_t **)(a1 + 64), 2, *(_DWORD *)(a1 + 56), 0xFFFFFFFFLL);
  unsigned int v16 = sub_1000BE644(v15, 4, v14);
  unsigned int v17 = sub_1000BE770(*(unint64_t **)(a1 + 80), 4, *(_DWORD *)(a1 + 56) + 1, 0xFFFFFFFFLL);
  unsigned int v18 = sub_1000BE644(v17, 4, v16);
  unsigned int v19 = sub_1000BE770(*(unint64_t **)(a1 + 104), 2, *(_DWORD *)(a1 + 96) + 1, 0xFFFFFFFFLL);
  unsigned int v20 = sub_1000BE644(v19, 4, v18);
  if (*(int *)(a1 + 120) >= 1)
  {
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    do
    {
      unsigned int v23 = sub_1000BE644(*(unsigned __int16 *)(*(void *)(a1 + 128) + v21), 2, 0xFFFFFFFF);
      unsigned int v24 = sub_1000BE644(*(__int16 *)(*(void *)(a1 + 128) + v21 + 2), 2, v23);
      unsigned int v25 = sub_1000BE644(*(unsigned __int16 *)(*(void *)(a1 + 128) + v21 + 4), 2, v24);
      unsigned int v2 = sub_1000BE644(v25, 4, v2);
      ++v22;
      v21 += 6LL;
    }

    while (v22 < *(int *)(a1 + 120));
  }

  unsigned int v26 = sub_1000BE644(v2, 4, v20);
  uint64_t v27 = **(void **)(a1 + 144);
  if (v27) {
    unsigned int v28 = -1431655765 * ((unint64_t)(v27 - *(void *)(a1 + 128)) >> 1);
  }
  else {
    unsigned int v28 = -1;
  }
  unsigned int v29 = -1;
  unsigned int v30 = sub_1000BE644(v28, 4, 0xFFFFFFFF);
  uint64_t v31 = *(void *)(*(void *)(a1 + 144) + 8LL);
  if (v31) {
    unsigned int v29 = -1431655765 * ((unint64_t)(v31 - *(void *)(a1 + 128)) >> 1);
  }
  unsigned int v32 = sub_1000BE644(v29, 4, v30);
  uint64_t v33 = *(void *)(*(void *)(a1 + 144) + 16LL);
  if (v33)
  {
    unsigned int v34 = sub_1000BE644(-1431655765 * ((unint64_t)(v33 - *(void *)(a1 + 128)) >> 1), 4, v32);
    uint64_t v35 = *(void *)(*(void *)(a1 + 144) + 24LL);
    if (v35) {
      goto LABEL_11;
    }
  }

  else
  {
    unsigned int v34 = sub_1000BE644(0xFFFFFFFF, 4, v32);
    uint64_t v35 = *(void *)(*(void *)(a1 + 144) + 24LL);
    if (v35)
    {
LABEL_11:
      unsigned int v36 = sub_1000BE644(-1431655765 * ((unint64_t)(v35 - *(void *)(a1 + 128)) >> 1), 4, v34);
      uint64_t v37 = *(void *)(*(void *)(a1 + 144) + 32LL);
      if (v37) {
        goto LABEL_12;
      }
      goto LABEL_27;
    }
  }

  unsigned int v36 = sub_1000BE644(0xFFFFFFFF, 4, v34);
  uint64_t v37 = *(void *)(*(void *)(a1 + 144) + 32LL);
  if (v37)
  {
LABEL_12:
    unsigned int v38 = sub_1000BE644(-1431655765 * ((unint64_t)(v37 - *(void *)(a1 + 128)) >> 1), 4, v36);
    uint64_t v39 = *(void *)(*(void *)(a1 + 144) + 40LL);
    if (v39) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

_DWORD *sub_10009A6BC( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = sub_1000BCAE8(a1, "pm0", a2, a4, a5, a6, a7, a8);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = (uint64_t)v8;
  unsigned int v10 = (_DWORD *)sub_1000C1074(200LL);
  if (v10)
  {
    int v30 = 0;
    if (!sub_1000BCD38(v9, &v30)) {
      goto LABEL_57;
    }
    _DWORD *v10 = v30;
    if (!sub_1000BCD38(v9, v10 + 1)) {
      goto LABEL_57;
    }
    if (!sub_1000BCD38(v9, v10 + 2)) {
      goto LABEL_57;
    }
    if (!sub_1000BCD38(v9, v10 + 8)) {
      goto LABEL_57;
    }
    unsigned int v11 = v10 + 14;
    if (!sub_1000BCD38(v9, v10 + 14)) {
      goto LABEL_57;
    }
    if (!sub_1000BCD38(v9, v10 + 24)) {
      goto LABEL_57;
    }
    unsigned int v12 = v10 + 30;
    if (!sub_1000BCD38(v9, v10 + 30)) {
      goto LABEL_57;
    }
    if (!sub_1000BCD38(v9, v10 + 44)) {
      goto LABEL_57;
    }
    uint64_t v13 = sub_10007A574(v9);
    *((void *)v10 + 3) = v13;
    if (!v13) {
      goto LABEL_57;
    }
    *((void *)v10 + 2) = v13;
    int v30 = 0;
    unsigned int v14 = v10 + 12;
    if (*v14)
    {
      if (v30 != v10[8]) {
        goto LABEL_57;
      }
      *((void *)v10 + 5) = *v14;
    }

    int v30 = 0;
    unsigned int v15 = v10 + 18;
    if (sub_1000BCED0(v9, 2, (uint64_t *)v10 + 9, &v30))
    {
      if (*v15)
      {
        if (v30 != *v11) {
          goto LABEL_57;
        }
        *((void *)v10 + 8) = *v15;
      }

      int v30 = 0;
      unsigned int v16 = v10 + 22;
      if (sub_1000BCED0(v9, 4, (uint64_t *)v10 + 11, &v30))
      {
        if (*v16)
        {
          if (v30 != *v11 + 1) {
            goto LABEL_57;
          }
          *((void *)v10 + 10) = *v16;
        }

        int v30 = 0;
        unsigned int v17 = v10 + 28;
        if (sub_1000BCED0(v9, 2, (uint64_t *)v10 + 14, &v30))
        {
          if (!*v17)
          {
LABEL_28:
            uint64_t v18 = sub_1000C1074(6LL * *v12);
            if (v18)
            {
              uint64_t v19 = v18;
              int v20 = *v12;
              if (*v12 < 1)
              {
                LODWORD(v21) = 0;
              }

              else
              {
                uint64_t v21 = 0LL;
                uint64_t v22 = (_WORD *)v18;
                do
                {
                  ++v21;
                  v22 += 3;
                }

                while (v21 < *v12);
                int v20 = *v12;
              }

              if ((int)v21 >= v20)
              {
                uint64_t v23 = sub_1000C1074(136LL);
                if (v23)
                {
                  uint64_t v24 = v23;
                  uint64_t v25 = 0LL;
                  while (1)
                  {
                    int v30 = 0;
                    if (!sub_1000BCD38(v9, &v30) || v30 < -1 || v30 >= *v12) {
                      break;
                    }
                    if (v30 != -1) {
                      *(void *)(v24 + v25) = v19 + 6LL * v30;
                    }
                    v25 += 8LL;
                    if (v25 == 136)
                    {
                      int v30 = 0;
                      unsigned int v26 = (uint64_t *)(v10 + 42);
                      uint64_t v27 = *v26;
                      if (*v26)
                      {
                        if (v30 != 17) {
                          goto LABEL_57;
                        }
                      }

                      if (v27) {
                        *((void *)v10 + 20) = v27;
                      }
                      int v30 = 0;
                      unsigned int v28 = v10 + 48;
                      if (*v28)
                      {
                        if (v30 != v10[44]) {
                          goto LABEL_57;
                        }
                        *((void *)v10 + 23) = *v28;
                      }

                      *((void *)v10 + 16) = v19;
                      *((void *)v10 + 17) = v19;
                      *((void *)v10 + 18) = v24;
                      *((void *)v10 + 19) = v24;
                      goto LABEL_56;
                    }
                  }
                }
              }
            }

            goto LABEL_57;
          }

          if (v30 == v10[24] + 1)
          {
            *((void *)v10 + 13) = *v17;
            goto LABEL_28;
          }
        }
      }
    }

LABEL_57:
    sub_1000BCBC8(v9);
    sub_100099F1C((uint64_t)v10);
    return 0LL;
  }

  uint64_t v100 = 2LL * v43;
  uint64_t v112 = (__int16 *)sub_1000CAF58(v100, v56, v57, v58, v59, v60, v61, v62);
  if ((int)a5 >= 1)
  {
    unsigned int v63 = 0LL;
    unsigned int v64 = -1;
    while (1)
    {
      int v103 = v64;
      unsigned int v65 = sub_100026E48("GC", v108, 2 * (int)a5, 2 * (int)a5, 0);
      if (!v65) {
        break;
      }
      uint64_t v66 = v65;
      *(void *)(v32 + 8 * v63) = v65;
      __sprintf_chk(v118, 0, 0x20uLL, "_Generic%d", v63);
      if (!sub_100031AD4(v108, v118, 1, 1u, 0, 0, 0))
      {
        if ((_DWORD)v63)
        {
          int v92 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v92++));
          while (v63 != v92);
        }

        goto LABEL_115;
      }

      uint64_t v73 = sub_10002A3D8((uint64_t *)a4[v63], (uint64_t)v112, v67, v68, v69, v70, v71, v72);
      uint64_t v74 = v63;
      if (!v73)
      {
        if ((_DWORD)v63)
        {
          int v93 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v93++));
          while (v63 != v93);
        }

        goto LABEL_115;
      }

      unsigned int v75 = v73;
      uint64_t v105 = v74;
      __sprintf_chk(v119, 0, 0x20uLL, "_Gate%d", v74);
      if (!sub_100031AD4(v108, v119, v75, v75, 0, 0, 0))
      {
        if ((_DWORD)v105)
        {
          uint64_t v94 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v94++));
          while (v105 != v94);
        }

        goto LABEL_115;
      }

      if (!sub_1000323C8(v108, (unsigned __int8 *)v118, &v117, 1, 0, -1))
      {
        if ((_DWORD)v105)
        {
          int v95 = 0LL;
          do
            sub_10002613C(*(void *)(v32 + 8 * v95++));
          while (v105 != v95);
        }

        goto LABEL_115;
      }

      if (v75 >= 1)
      {
        if (v75 != 1)
        {
          uint64_t v79 = v75 - 1LL;
          uint64_t v80 = &_mh_execute_header;
          uint64_t v81 = v112 + 1;
          while (*v81 == v112[v80]
               || sub_1000323C8(v108, (unsigned __int8 *)v119, v81, 1, 0, -1))
          {
            LODWORD(v80) = (_DWORD)v80 + 1;
            ++v81;
            if (!--v79) {
              goto LABEL_67;
            }
          }

uint64_t sub_10009AA58()
{
  return 1017LL;
}

uint64_t sub_10009AA60()
{
  return 8LL;
}

const char *sub_10009AA68()
{
  return "Elvis v9.1.1017.8 (depot #125144), Arm, AppleOSX, gcc, Optimized Embedded Build";
}

uint64_t sub_10009AA74()
{
  return 9LL;
}

uint64_t sub_10009AA7C(int a1, int a2, int a3, int a4, int a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v14 = sub_1000C1074(176LL);
  uint64_t v15 = v14;
  if (v14)
  {
    *(void *)uint64_t v14 = a6;
    *(void *)(v14 + 8) = a7;
    *(_DWORD *)(v14 + 104) = a1;
    *(_DWORD *)(v14 + 108) = a2;
    *(_DWORD *)(v14 + 112) = a3;
    *(_DWORD *)(v14 + 116) = a4;
    *(_DWORD *)(v14 + 120) = a5;
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4320))
    {
      int v16 = sub_1000B3298((uint64_t)a6);
      uint64_t v17 = (v16 + 2);
      uint64_t v18 = sub_1000C1074(2LL * (int)v17);
      if (v18)
      {
        uint64_t v19 = (_DWORD *)v18;
        *(_DWORD *)(v15 + 136) = v16 + 1;
        *(void *)(v15 + 128) = v18;
        *(_DWORD *)(v15 + 16) = 1;
        if (v16 >= -1)
        {
          unsigned __int16 v20 = 0;
          do
          {
            ++v20;
            uint64_t v19 = (_DWORD *)((char *)v19 + 2);
            --v17;
          }

          while (v17);
        }
      }

      else
      {
        sub_1000C0EF8(v15);
        return 0LL;
      }
    }

    else
    {
      *(_DWORD *)(v14 + 16) = 0;
      *(void *)(v14 + 24) = 0LL;
      *(_DWORD *)(v14 + 32) = 0;
      *(_DWORD *)(v14 + 80) = 0;
      *(_DWORD *)(v14 + 124) = -1;
      sub_10009ABAC(v14);
    }
  }

  return v15;
}

uint64_t sub_10009ABAC(uint64_t result)
{
  if (result && *(_DWORD *)(result + 124) && !*(_DWORD *)(result + 16))
  {
    *(_DWORD *)(result + 124) = 0;
    *(_DWORD *)(result + 80) = 0;
    if (*(void *)(result + 144) && *(int *)(result + 164) >= 1)
    {
      uint64_t v1 = 0LL;
      do
      {
        for (uint64_t i = 0LL; i != 512; i += 2LL)
          *(_WORD *)(*(void *)(*(void *)(result + 144) + 8 * v1) + i) = -1;
        ++v1;
      }

      while (v1 < *(int *)(result + 164));
    }

    if (*(void *)(result + 152) && *(int *)(result + 164) >= 1)
    {
      uint64_t v3 = 0LL;
      do
      {
        for (uint64_t j = 0LL; j != 1024; j += 4LL)
          *(_DWORD *)(*(void *)(*(void *)(result + 152) + 8 * v3) + j) = -1;
        ++v3;
      }

      while (v3 < *(int *)(result + 164));
    }

    if (*(_DWORD *)(result + 108) && *(int *)(result + 100) >= 1)
    {
      uint64_t v5 = 0LL;
      do
      {
        for (uint64_t k = 0LL; k != 1024; k += 4LL)
          *(_WORD *)(*(void *)(*(void *)(result + 88) + 8 * v5) + k) = -1;
        ++v5;
      }

      while (v5 < *(int *)(result + 100));
    }
  }

  return result;
}

uint64_t sub_10009ACA8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(_DWORD *)(result + 16))
    {
      sub_1000C0EF8(*(void *)(result + 128));
    }

    else
    {
      sub_10009AD10(result);
      sub_1000C0EF8(*(void *)(v1 + 24));
      sub_1000C0EF8(*(void *)(v1 + 40));
    }

    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10009AD10(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(_DWORD *)(result + 16))
    {
      sub_1000C1BC8(*(void *)(result + 48), *(unsigned int *)(result + 60), *(_DWORD *)(result + 56));
      *(void *)(v1 + 48) = 0LL;
      *(void *)(v1 + 56) = 0LL;
      sub_1000C1BC8(*(void *)(v1 + 64), *(unsigned int *)(v1 + 76), *(_DWORD *)(v1 + 72));
      *(void *)(v1 + 64) = 0LL;
      *(void *)(v1 + 72) = 0LL;
      uint64_t v2 = *(void *)(v1 + 144);
      if (v2)
      {
        sub_1000C1BC8(v2, *(unsigned int *)(v1 + 164), *(_DWORD *)(v1 + 160));
        *(void *)(v1 + 144) = 0LL;
        *(void *)(v1 + 160) = 0LL;
      }

      uint64_t v3 = *(void *)(v1 + 152);
      if (v3)
      {
        sub_1000C1BC8(v3, *(unsigned int *)(v1 + 164), *(_DWORD *)(v1 + 160));
        *(void *)(v1 + 152) = 0LL;
        *(_DWORD *)(v1 + 164) = 0;
      }

      uint64_t result = sub_1000C1BC8(*(void *)(v1 + 88), *(unsigned int *)(v1 + 100), *(_DWORD *)(v1 + 96));
      *(_DWORD *)(v1 + 80) = 0;
      *(_DWORD *)(v1 + 124) = 0;
      *(void *)(v1 + 88) = 0LL;
      *(void *)(v1 + 96) = 0LL;
    }
  }

  return result;
}

uint64_t sub_10009ADAC(uint64_t a1)
{
  if (!a1) {
    return 1LL;
  }
  int v2 = sub_1000B32A0(*(uint64_t **)a1);
  if (*(_DWORD *)(a1 + 32) <= v2 && !*(_DWORD *)(a1 + 16))
  {
    int v3 = 3 * v2;
    uint64_t v4 = 2LL * (3 * v2 + 1);
    uint64_t result = sub_1000C1074(v4);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    if (*(_DWORD *)(a1 + 120))
    {
      uint64_t result = sub_1000C1074(v4);
      if (!result) {
        return result;
      }
      uint64_t v7 = result;
      sub_1000C0EF8(*(void *)(a1 + 40));
      *(void *)(a1 + 40) = v7;
    }

    sub_1000C0EF8(*(void *)(a1 + 24));
    *(void *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = v3;
  }

  return 1LL;
}

uint64_t sub_10009AE4C(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 1LL;
  }
  int v4 = a3;
  if (*(_DWORD *)(a1 + 112))
  {
    int v6 = sub_1000B3298(*(void *)a1);
    if (!*(_DWORD *)(a1 + 112)) {
      goto LABEL_29;
    }
    int v7 = v6 + 1;
    int v8 = *(_DWORD *)(a1 + 60);
    if (v8 <= *(_DWORD *)(a1 + 76)) {
      int v8 = *(_DWORD *)(a1 + 76);
    }
    if (v8 << 8 < 0x10000)
    {
      uint64_t v15 = *(int *)(a1 + 164);
      *(_DWORD *)(a1 + 168) = 0;
      uint64_t result = sub_1000C1744((const void **)(a1 + 144), (int *)(a1 + 160), (signed int *)(a1 + 164), 8, 2, v7);
      if ((int)v15 < *(_DWORD *)(a1 + 164))
      {
        do
        {
          for (uint64_t i = 0LL; i != 512; i += 2LL)
            *(_WORD *)(*(void *)(*(void *)(a1 + 144) + 8 * v15) + i) = -1;
          ++v15;
        }

        while (v15 < *(int *)(a1 + 164));
      }
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 152);
      *(_DWORD *)(a1 + 168) = 1;
      sub_1000C1BC8(v9, *(unsigned int *)(a1 + 164), *(_DWORD *)(a1 + 160));
      *(void *)(a1 + 152) = 0LL;
      *(_DWORD *)(a1 + 164) = 0;
      uint64_t result = sub_1000C1744((const void **)(a1 + 152), (int *)(a1 + 160), (signed int *)(a1 + 164), 8, 4, v7);
      if (*(int *)(a1 + 164) >= 1)
      {
        uint64_t v10 = 0LL;
        do
        {
          for (uint64_t j = 0LL; j != 1024; j += 4LL)
            *(_DWORD *)(*(void *)(*(void *)(a1 + 152) + 8 * v10) + j) = -1;
          ++v10;
        }

        while (v10 < *(int *)(a1 + 164));
      }
    }
  }

  else
  {
    if (a3 >= 0xFFFF) {
      int v4 = 0xFFFF;
    }
    else {
      int v4 = a3;
    }
    unsigned int v12 = (int *)(a1 + 100);
    uint64_t v13 = *(int *)(a1 + 100);
    uint64_t result = sub_1000C1744((const void **)(a1 + 88), (int *)(a1 + 96), (signed int *)(a1 + 100), 8, 4, a2);
    if (*(_DWORD *)(a1 + 108) && (int)v13 < *v12)
    {
      do
      {
        for (uint64_t k = 0LL; k != 1024; k += 4LL)
          *(_WORD *)(*(void *)(*(void *)(a1 + 88) + 8 * v13) + k) = -1;
        ++v13;
      }

      while (v13 < *v12);
    }
  }

  if (!(_DWORD)result) {
    return result;
  }
LABEL_29:
  unsigned int v17 = (v4 + 255) >> 8;
  int v18 = *(_DWORD *)(a1 + 116);
  if (v18 && !*(void *)(a1 + 48)) {
    *(_DWORD *)(a1 + 56) = v17;
  }
  if (*(_DWORD *)(a1 + 120) && !*(void *)(a1 + 64)) {
    *(_DWORD *)(a1 + 72) = v17;
  }
  if (v4 < 0x10000) {
    goto LABEL_47;
  }
  uint64_t v19 = *(void *)(a1 + 144);
  if (!v19) {
    goto LABEL_47;
  }
  uint64_t result = sub_1000C1074(8LL * *(int *)(a1 + 160));
  if (!result) {
    return result;
  }
  uint64_t v20 = result;
  if (*(int *)(a1 + 164) < 1)
  {
LABEL_46:
    *(void *)(a1 + 152) = v20;
    sub_1000C0EF8(v19);
    *(void *)(a1 + 144) = 0LL;
    int v18 = *(_DWORD *)(a1 + 116);
LABEL_47:
    if (!v18
      || (uint64_t result = sub_1000C1744((const void **)(a1 + 48), (int *)(a1 + 56), (signed int *)(a1 + 60), 8, 2, v4),
          (_DWORD)result))
    {
      if (!*(_DWORD *)(a1 + 120)) {
        return sub_10009ADAC(a1);
      }
      uint64_t result = sub_1000C1744((const void **)(a1 + 64), (int *)(a1 + 72), (signed int *)(a1 + 76), 8, 2, v4);
      if ((_DWORD)result) {
        return sub_10009ADAC(a1);
      }
    }

    return result;
  }

  uint64_t v21 = 0LL;
  uint64_t v22 = 1LL;
  while (1)
  {
    uint64_t v23 = sub_1000C1074(1024LL);
    *(void *)(v20 + 8 * v21) = v23;
    if (!v23) {
      break;
    }
    for (uint64_t m = 0LL; m != 256; ++m)
    {
      int v25 = *(unsigned __int16 *)(*(void *)(v19 + 8 * v21) + 2 * m);
      if (v25 == 0xFFFF) {
        int v25 = -1;
      }
      *(_DWORD *)(*(void *)(v20 + 8 * v21) + 4 * m) = v25;
    }

    sub_1000C0EF8(*(void *)(v19 + 8 * v21++));
    ++v22;
  }

  if ((_DWORD)v21)
  {
    do
      sub_1000C0EF8(*(void *)(v20 + 8LL * (v22-- - 2)));
    while (v22 > 1);
  }

  sub_1000C0EF8(v20);
  return 0LL;
}

uint64_t sub_10009B1B8(uint64_t result, uint64_t a2, void *a3, unsigned __int16 **a4, int *a5)
{
  uint64_t v9 = result;
  unsigned int v33 = 0;
  if (*(_DWORD *)(result + 16))
  {
    *a3 = *(void *)(result + 128) + 2LL * a2;
    int v10 = 1;
    if (a4)
    {
      unsigned int v11 = 0LL;
LABEL_40:
      *a4 = v11;
      goto LABEL_41;
    }

    goto LABEL_41;
  }

  uint64_t v12 = *(void *)(result + 144);
  if (v12)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    int v10 = 0;
    unsigned int v33 = *(unsigned __int16 *)(*(void *)(v12 + 8LL * (a2 >> 8)) + 2LL * a2);
    if (v33 != 0xFFFF) {
      goto LABEL_36;
    }
  }

  else
  {
    uint64_t v15 = *(void *)(result + 152);
    if (!v15)
    {
      if (*(_DWORD *)(result + 108))
      {
        int v16 = *(_DWORD *)(result + 100) << 8;
        int v17 = __ROR4__(dword_1000F1E10[a2 >> 8], 31);
        uint64_t v14 = (dword_1000F1E10[a2] ^ v17) & (v16 - 1);
        uint64_t v18 = *(void *)(result + 88);
        uint64_t v19 = *(void *)(v18 + 8LL * (v14 >> 8));
        uint64_t v20 = (LOBYTE(dword_1000F1E10[a2]) ^ v17);
        int v21 = *(unsigned __int16 *)(v19 + 4 * v20);
        if (v21 != (_DWORD)a2)
        {
          int v27 = 0;
          uint64_t v13 = v14;
          while ((_WORD)v21 != 0xFFFF)
          {
            uint64_t v13 = (v13 + 1);
            if ((_DWORD)v13 == v16)
            {
              uint64_t v13 = 0LL;
              if (v27) {
                goto LABEL_30;
              }
              int v27 = 1;
            }

            uint64_t v19 = *(void *)(v18 + 8LL * (v13 >> 8));
            uint64_t v20 = v13;
            int v21 = *(unsigned __int16 *)(v19 + 4 * v20);
            if (v21 == (_DWORD)a2) {
              goto LABEL_12;
            }
          }

          goto LABEL_30;
        }

uint64_t sub_10009B490( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = (_DWORD *)a8;
  int v9 = a7;
  int v10 = (__int16 *)a6;
  unsigned int v11 = (unsigned __int16 *)a5;
  unsigned int v12 = a4;
  unsigned int v13 = a3;
  unsigned int v14 = a2;
  uint64_t v15 = result;
  int v16 = *(_DWORD *)(result + 80);
  int v17 = 256 - v16;
  uint64_t v18 = (void *)(result + 88);
  if (*(void *)(result + 88))
  {
    unsigned int v46 = a2;
    unsigned int v19 = a3;
    unsigned int v21 = a4;
    int v24 = (int *)(result + 100);
    uint64_t v23 = *(int *)(result + 100);
    uint64_t result = sub_1000C1744( (const void **)(result + 88),  (int *)(result + 96),  (signed int *)(result + 100),  8,  4,  *(_DWORD *)(result + 124) + 1);
    if (*(_DWORD *)(v15 + 108) && (int)v23 < *v24)
    {
      do
      {
        for (uint64_t i = 0LL; i != 1024; i += 4LL)
          *(_WORD *)(*(void *)(*v18 + 8 * v23) + i) = -1;
        ++v23;
      }

      while (v23 < *v24);
    }

    unsigned int v11 = (unsigned __int16 *)a5;
    unsigned int v12 = v21;
    int v8 = (_DWORD *)a8;
    unsigned int v13 = v19;
    unsigned int v14 = v46;
    if (!(_DWORD)result)
    {
      uint64_t result = sub_10009ABAC(v15);
      unsigned int v13 = v12;
    }
  }

  unsigned int v26 = *(_DWORD *)(v15 + 80);
  if (*(void *)(v15 + 48) && (signed int)(v9 + v26 + 2) > *(_DWORD *)(v15 + 60) << 8)
  {
    uint64_t result = sub_10009ABAC(v15);
    unsigned int v26 = *(_DWORD *)(v15 + 80);
    unsigned int v13 = v12;
  }

  if (*(void *)(v15 + 64) && (signed int)(v9 + v26 + 2) > *(_DWORD *)(v15 + 76) << 8)
  {
    uint64_t result = sub_10009ABAC(v15);
    unsigned int v26 = *(_DWORD *)(v15 + 80);
    unsigned int v13 = v12;
  }

  *int v8 = v26;
  uint64_t v27 = *(void *)(v15 + 144);
  if (v27)
  {
    *(_WORD *)(*(void *)(v27 + 8LL * (v14 >> 8)) + 2LL * v14) = v26;
    if (!v11) {
      goto LABEL_35;
    }
  }

  else
  {
    uint64_t v28 = *(void *)(v15 + 152);
    if (v28)
    {
      *(_DWORD *)(*(void *)(v28 + 8LL * (v14 >> 8)) + 4LL * v14) = v26;
      if (!v11)
      {
LABEL_35:
        *(_WORD *)(*(void *)(*(void *)(v15 + 64) + 8LL * (v26 >> 8)) + 2LL * v26) = v9;
        if (v9 >= 1)
        {
          uint64_t v43 = v9;
          unsigned int v44 = v26 + 1;
          do
          {
            __int16 v45 = *v10++;
            *(_WORD *)(*(void *)(*(void *)(v15 + 64) + 8LL * (v44 >> 8)) + 2LL * v44) = v45;
            ++v44;
            --v43;
          }

          while (v43);
        }

        *(_WORD *)(*(void *)(*(void *)(v15 + 64) + 8LL * ((v26 + 1 + v9) >> 8))
                 + 2LL * (v26 + 1 + v9)) = 0x7FFF;
        goto LABEL_39;
      }
    }

    else
    {
      if (!*(_DWORD *)(v15 + 108)) {
        uint64_t result = (uint64_t)sub_1000C1CCC( *(void **)(v15 + 88),  *(unsigned int *)(v15 + 100),  256,  4,  v13,  *(_DWORD *)(v15 + 124) - v13,  v13 + 1);
      }
      unsigned int v42 = (_WORD *)(*(void *)(*v18 + 8LL * (v13 >> 8)) + 4LL * v13);
      *unsigned int v42 = v14;
      v42[1] = v26;
      if (!v11) {
        goto LABEL_35;
      }
    }
  }

  uint64_t v29 = *(void *)(v15 + 48);
  unsigned int v30 = v26 >> 8;
  if (v29)
  {
    *(_WORD *)(*(void *)(v29 + 8LL * v30) + 2LL * v26) = v9;
    if (v9 >= 1)
    {
      unsigned int v31 = v26 + 1;
      uint64_t v32 = v9;
      unsigned int v33 = v11;
      do
      {
        __int16 v34 = *v33++;
        *(_WORD *)(*(void *)(*(void *)(v15 + 48) + 8LL * (v31 >> 8)) + 2LL * v31) = v34;
        ++v31;
        --v32;
      }

      while (v32);
    }

    *(_WORD *)(*(void *)(*(void *)(v15 + 48) + 8LL * ((v9 + v26 + 1) >> 8)) + 2LL * (v9 + v26 + 1)) = -1;
  }

  if (*(void *)(v15 + 64))
  {
    uint64_t v35 = (__int16 *)sub_1000CAF58(2LL * v9, a2, a3, a4, a5, a6, a7, a8);
    sub_1000059CC(*(void *)(v15 + 8), v11, v9, v35, 0LL, 0LL, v36, v37);
    *(_WORD *)(*(void *)(*(void *)(v15 + 64) + 8LL * v30) + 2LL * v26) = v9;
    if (v9 >= 1)
    {
      unsigned int v38 = v26 + 1;
      uint64_t v39 = v9;
      unsigned int v40 = v35;
      do
      {
        __int16 v41 = *v40++;
        *(_WORD *)(*(void *)(*(void *)(v15 + 64) + 8LL * (v38 >> 8)) + 2LL * v38) = v41;
        ++v38;
        --v39;
      }

      while (v39);
    }

    *(_WORD *)(*(void *)(*(void *)(v15 + 64) + 8LL * ((v9 + v26 + 1) >> 8)) + 2LL * (v9 + v26 + 1)) = -1;
    uint64_t result = (uint64_t)sub_1000CB038(v35, 2LL * v9);
  }

uint64_t sub_10009B84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 144) || *(void *)(a1 + 152)) {
    goto LABEL_3;
  }
  if (*(_DWORD *)(a1 + 108))
  {
    int v9 = *(_DWORD *)(a1 + 100) << 8;
    int v10 = __ROR4__(dword_1000F1E10[a2 >> 8], 31);
    uint64_t v6 = (dword_1000F1E10[a2] ^ v10) & (v9 - 1);
    uint64_t v11 = *(void *)(a1 + 88);
    uint64_t v7 = v6;
    if (*(__int16 *)(*(void *)(v11 + 8LL * (v6 >> 8))
                    + 4LL * (LOBYTE(dword_1000F1E10[a2]) ^ v10)) != -1)
    {
      do
      {
        if ((_DWORD)v7 + 1 == v9) {
          uint64_t v7 = 0LL;
        }
        else {
          uint64_t v7 = (v7 + 1);
        }
      }

      while (*(__int16 *)(*(void *)(v11 + 8LL * (v7 >> 8)) + 4LL * v7) != -1);
    }

    return sub_10009B490(a1, a2, v7, v6, 0LL, a3, a4, (uint64_t)v17);
  }

  int v12 = *(_DWORD *)(a1 + 124);
  BOOL v13 = __OFSUB__(v12, 1);
  int v14 = v12 - 1;
  if (v14 < 0 != v13)
  {
LABEL_3:
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    return sub_10009B490(a1, a2, v7, v6, 0LL, a3, a4, (uint64_t)v17);
  }

  LODWORD(v15) = 0;
  do
  {
    unsigned int v16 = (v15 + v14) >> 1;
    if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 88) + 8LL * ((v15 + v14) >> 9))
                             + 4LL * v16) < a2)
    {
      uint64_t v15 = v16 + 1;
    }

    else
    {
      int v14 = v16 - 1;
      uint64_t v15 = v15;
    }
  }

  while ((int)v15 <= v14);
  return sub_10009B490(a1, a2, v15, 0LL, 0LL, a3, a4, (uint64_t)v17);
}

uint64_t sub_10009B978(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 16)) {
    return 1LL;
  }
  uint64_t v3 = *(void *)(a1 + 144);
  if (v3)
  {
    unsigned int v4 = *(unsigned __int16 *)(*(void *)(v3 + 8LL * (a2 >> 8)) + 2LL * a2);
    if (v4 != 0xFFFF) {
      goto LABEL_5;
    }
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 152);
    if (!v6)
    {
      if (*(_DWORD *)(a1 + 108))
      {
        int v7 = *(_DWORD *)(a1 + 100) << 8;
        int v8 = __ROR4__(dword_1000F1E10[a2 >> 8], 31);
        unsigned int v9 = (dword_1000F1E10[a2] ^ v8) & (v7 - 1);
        uint64_t v10 = *(void *)(a1 + 88);
        uint64_t v11 = *(void *)(v10 + 8LL * (v9 >> 8));
        uint64_t v12 = (LOBYTE(dword_1000F1E10[a2]) ^ v8);
        int v13 = *(unsigned __int16 *)(v11 + 4 * v12);
        if (v13 != a2)
        {
          int v19 = 0;
          while ((_WORD)v13 != 0xFFFF)
          {
            if (++v9 == v7)
            {
              if (v19) {
                return sub_1000B9044(*(uint64_t **)a1, a2, *(_DWORD **)(a1 + 24));
              }
              unsigned int v9 = 0;
              int v19 = 1;
            }

            uint64_t v11 = *(void *)(v10 + 8LL * (v9 >> 8));
            uint64_t v12 = v9;
            int v13 = *(unsigned __int16 *)(v11 + 4 * v12);
            if (v13 == a2) {
              goto LABEL_12;
            }
          }

          return sub_1000B9044(*(uint64_t **)a1, a2, *(_DWORD **)(a1 + 24));
        }

uint64_t sub_10009BB4C(uint64_t a1)
{
  unsigned int v2 = sub_1000BE644(*(_DWORD *)(a1 + 16), 4, 0xFFFFFFFF);
  uint64_t v3 = sub_1000BE644(*(_DWORD *)(a1 + 32), 4, v2);
  if (*(void *)(a1 + 48) && *(int *)(a1 + 60) >= 1)
  {
    uint64_t v4 = 0LL;
    do
      uint64_t v3 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 48) + 8 * v4++), 2, 256, v3);
    while (v4 < *(int *)(a1 + 60));
  }

  unsigned int v5 = sub_1000BE644(*(_DWORD *)(a1 + 56), 4, v3);
  uint64_t v6 = sub_1000BE644(*(_DWORD *)(a1 + 60), 4, v5);
  if (*(void *)(a1 + 64) && *(int *)(a1 + 60) >= 1)
  {
    uint64_t v7 = 0LL;
    do
      uint64_t v6 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 64) + 8 * v7++), 2, 256, v6);
    while (v7 < *(int *)(a1 + 60));
  }

  unsigned int v8 = sub_1000BE644(*(_DWORD *)(a1 + 72), 4, v6);
  unsigned int v9 = sub_1000BE644(*(_DWORD *)(a1 + 76), 4, v8);
  unsigned int v10 = sub_1000BE644(*(_DWORD *)(a1 + 80), 4, v9);
  if (*(void *)(a1 + 88) && *(int *)(a1 + 100) >= 1)
  {
    uint64_t v11 = 0LL;
    do
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = *(void *)(*(void *)(a1 + 88) + 8 * v11);
      do
      {
        unsigned int v14 = sub_1000BE644(*(unsigned __int16 *)(v13 + v12), 2, v10);
        unsigned int v10 = sub_1000BE644(*(unsigned __int16 *)(v13 + v12 + 2), 2, v14);
        v12 += 4LL;
      }

      while (v12 != 1024);
      ++v11;
    }

    while (v11 < *(int *)(a1 + 100));
  }

  unsigned int v15 = sub_1000BE644(*(_DWORD *)(a1 + 96), 4, v10);
  unsigned int v16 = sub_1000BE644(*(_DWORD *)(a1 + 100), 4, v15);
  unsigned int v17 = sub_1000BE644(*(_DWORD *)(a1 + 104), 4, v16);
  unsigned int v18 = sub_1000BE644(*(_DWORD *)(a1 + 108), 4, v17);
  unsigned int v19 = sub_1000BE644(*(_DWORD *)(a1 + 112), 4, v18);
  unsigned int v20 = sub_1000BE644(*(_DWORD *)(a1 + 116), 4, v19);
  unsigned int v21 = sub_1000BE644(*(_DWORD *)(a1 + 120), 4, v20);
  uint64_t v22 = sub_1000BE644(*(_DWORD *)(a1 + 124), 4, v21);
  uint64_t v23 = *(unint64_t **)(a1 + 128);
  if (v23) {
    LODWORD(v22) = sub_1000BE770(v23, 2, *(_DWORD *)(a1 + 136) + 1, v22);
  }
  uint64_t v24 = sub_1000BE644(*(_DWORD *)(a1 + 136), 4, v22);
  if (*(void *)(a1 + 144) && *(int *)(a1 + 164) >= 1)
  {
    uint64_t v25 = 0LL;
    do
      uint64_t v24 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 144) + 8 * v25++), 2, 256, v24);
    while (v25 < *(int *)(a1 + 164));
  }

  if (*(void *)(a1 + 152) && *(int *)(a1 + 164) >= 1)
  {
    uint64_t v26 = 0LL;
    do
      uint64_t v24 = sub_1000BE770(*(unint64_t **)(*(void *)(a1 + 152) + 8 * v26++), 4, 256, v24);
    while (v26 < *(int *)(a1 + 164));
  }

  unsigned int v27 = sub_1000BE644(*(_DWORD *)(a1 + 160), 4, v24);
  return sub_1000BE644(*(_DWORD *)(a1 + 164), 4, v27);
}

uint64_t sub_10009BE24(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = sub_1000BDA88(a2, "bpc0", a3);
  if (!v4) {
    return 0LL;
  }
  uint64_t v6 = v4;
  if (qword_1000FDCC0)
  {
    if (!sub_1000BDB78(v4, *(_DWORD *)(qword_1000FDCC0 + 4516), v5)) {
      goto LABEL_37;
    }
LABEL_7:
    if (qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4516))
    {
      if (!sub_1000BDB78(v6, *(_DWORD *)(a1 + 16), v7)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 56), v9)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 60), v10)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 72), v11)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 76), v12)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 80), v13)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 96), v14)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 100), v15)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 104), v16)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 112), v17)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 116), v18)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 120), v19)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 124), v20)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 136), v21)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 160), v22)
        || !sub_1000BDB78(v6, *(_DWORD *)(a1 + 164), v23)
        || !sub_1000BDE0C(v6, *(void ***)(a1 + 48), *(_DWORD *)(a1 + 60), 0x100u, 2, v24)
        || !sub_1000BDE0C(v6, *(void ***)(a1 + 64), *(_DWORD *)(a1 + 76), 0x100u, 2, v25)
        || !sub_1000BDE0C(v6, *(void ***)(a1 + 88), *(_DWORD *)(a1 + 100), 0x100u, 4, v26))
      {
        goto LABEL_37;
      }

      uint64_t v28 = *(void **)(a1 + 128);
      unsigned int v29 = v28 ? *(_DWORD *)(a1 + 136) + 1 : 0;
      if (*(_DWORD *)(a1 + 112))
      {
        int v31 = *(_DWORD *)(a1 + 60);
        if (v31 <= *(_DWORD *)(a1 + 76)) {
          int v31 = *(_DWORD *)(a1 + 76);
        }
        int v32 = *(_DWORD *)(a1 + 164);
        if (v31 << 8 < 0x10000)
        {
        }

        else if (!sub_1000BDE0C(v6, *(void ***)(a1 + 152), v32, 0x100u, 4, v30))
        {
          goto LABEL_37;
        }
      }
    }

    uint64_t v33 = 1LL;
    goto LABEL_40;
  }

  if (sub_1000BDB78(v4, 0, v5)) {
    goto LABEL_7;
  }
LABEL_37:
  uint64_t v33 = 0LL;
LABEL_40:
  sub_1000BDB48(v6);
  return v33;
}

uint64_t sub_10009C0AC( _DWORD *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint8x8_t v9 = sub_1000BCAE8(a2, "bpc0", a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    uint64_t v10 = (uint64_t)v9;
    int v20 = 0;
    if (sub_1000BCD38((uint64_t)v9, &v20))
    {
      if (v20)
      {
        uint8x8_t v11 = a1 + 15;
        sub_1000C1BC8(*((void *)a1 + 6), a1[15], a1[15]);
        uint8x8_t v12 = a1 + 19;
        sub_1000C1BC8(*((void *)a1 + 8), a1[19], a1[19]);
        sub_1000C1BC8(*((void *)a1 + 11), a1[25], a1[25]);
        uint8x8_t v18 = (uint64_t *)(a1 + 36);
        uint8x8_t v13 = a1 + 41;
        sub_1000C1BC8(*((void *)a1 + 18), a1[41], a1[41]);
        sub_1000C1BC8(*((void *)a1 + 19), *v13, *v13);
        if (!sub_1000BCD38(v10, a1 + 4)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 14)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 15)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 18)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 19)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 20)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 24)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 25)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 26)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 28)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 29)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 30)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 31)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 34)) {
          goto LABEL_45;
        }
        uint8x8_t v17 = a1 + 40;
        if (!sub_1000BCD38(v10, a1 + 40)) {
          goto LABEL_45;
        }
        if (!sub_1000BCD38(v10, a1 + 41)) {
          goto LABEL_45;
        }
        int v19 = 0;
        if (!sub_1000BD6CC(v10, (uint64_t *)a1 + 6, a1[14], 256, 2, &v19)
          || *((void *)a1 + 6) && v19 != *v11)
        {
          goto LABEL_45;
        }

        int v19 = 0;
        if (!sub_1000BD6CC(v10, (uint64_t *)a1 + 8, a1[18], 256, 2, &v19)
          || *((void *)a1 + 8) && v19 != *v12)
        {
          goto LABEL_45;
        }

        int v19 = 0;
        if (!sub_1000BD6CC(v10, (uint64_t *)a1 + 11, a1[24], 256, 4, &v19)
          || *((void *)a1 + 11) && v19 != a1[25])
        {
          goto LABEL_45;
        }

        int v19 = 0;
        if (a1[28])
        {
          int v14 = *v11;
          if (*v11 <= *v12) {
            int v14 = *v12;
          }
          if (v14 << 8 < 0x10000)
          {
            int v19 = 0;
          }

          else
          {
            int v19 = 0;
            if (!sub_1000BD6CC(v10, (uint64_t *)a1 + 19, *v17, 256, 4, &v19)
              || *((void *)a1 + 19) && v19 != *v13)
            {
              goto LABEL_45;
            }
          }
        }
      }

      uint64_t v15 = 1LL;
LABEL_46:
      sub_1000BCBC8(v10);
      return v15;
    }

uint64_t sub_10009C484(int a1)
{
  uint64_t v2 = sub_1000C1074(80LL);
  uint64_t v3 = v2;
  if (!v2) {
    return v3;
  }
  *(void *)(v2 + 16) = 0LL;
  *(void *)uint64_t v2 = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(v2 + 8) = 0x40000000;
  *(_DWORD *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 28) = (a1 + 1023) >> 10;
  if (!qword_1000FDCC0) {
    return v3;
  }
  uint64_t v4 = *(void *)(qword_1000FDCC0 + 4624);
  if (v4 < 1) {
    return v3;
  }
  int v5 = 1 << v4;
  uint64_t v6 = (void *)sub_1000C1074(4LL * (1 << v4));
  if (v6)
  {
    *(void *)(v3 + 48) = v6;
    *(_DWORD *)(v3 + 56) = v5;
    if ((_DWORD)v4 != 31)
    {
      if (v5 <= 1) {
        unsigned int v7 = 1;
      }
      else {
        unsigned int v7 = 1 << v4;
      }
      memset_pattern16(v6, &unk_1000F0900, 4LL * v7);
    }

    return v3;
  }

  return 0LL;
}

uint64_t sub_10009C54C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(int *)(result + 24) >= 1)
    {
      uint64_t v2 = 0LL;
      do
        sub_1000C0EF8(*(void *)(*(void *)(v1 + 16) + 8 * v2++));
      while (v2 < *(int *)(v1 + 24));
    }

    sub_1000C0EF8(*(void *)(v1 + 16));
    sub_1000C0EF8(*(void *)(v1 + 48));
    return sub_1000C0EF8(v1);
  }

  return result;
}

uint64_t sub_10009C5B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

void sub_10009C5B8(uint64_t a1)
{
  *(void *)a1 = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(a1 + 8) = 0x40000000;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 56);
  }

void sub_10009C5F8(uint64_t a1, int a2, int a3)
{
  *(void *)a1 = 0xFFFFFFFF00000000LL;
  *(_DWORD *)(a1 + 8) = 0x40000000;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 56);
  }

  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
}

double sub_10009C660(uint64_t a1)
{
  double result = 2.00000191;
  *(void *)(a1 + 4) = 0x40000000FFFFFFFFLL;
  return result;
}

unint64_t sub_10009C670( unsigned int *a1, unint64_t a2, int a3, uint64_t a4, int a5, int a6, __int16 a7)
{
  __int16 v8 = a6;
  __int16 v9 = a3;
  int v10 = a2;
  unint64_t v12 = a4 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(a5 != 0) << 63);
  uint64_t v13 = *((void *)a1 + 6);
  int v14 = *a1;
  if (!v13) {
    goto LABEL_17;
  }
  uint64_t v15 = (int)a1[14];
  uint64_t v16 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v16 = *(void *)(qword_1000FDCC0 + 4632);
  }
  if (v15 - v16 > v14)
  {
    unsigned int v17 = a1[8];
    unint64_t v18 = a4 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(a5 != 0) << 63);
    if (!v17)
    {
      if (a1[9]) {
        unint64_t v18 = a4 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = 0LL;
      }
    }

    int v19 = 0;
    int v47 = a2;
    __int16 v46 = a3;
    unint64_t v45 = v18;
    int v20 = (unsigned __int8 *)&v47 + 3;
    do
    {
      int v21 = *v20--;
      int v19 = dword_1000F1E10[v21] ^ __ROR4__(v19, 31);
    }

    while (v20 >= (unsigned __int8 *)&v47);
    uint8x8_t v22 = (unsigned __int8 *)&v46 + 1;
    do
    {
      int v23 = *v22--;
      int v19 = dword_1000F1E10[v23] ^ __ROR4__(v19, 31);
    }

    while (v22 >= (unsigned __int8 *)&v46);
    uint8x8_t v24 = (unsigned __int8 *)&v45 + 7;
    do
    {
      int v25 = *v24--;
      int v19 = dword_1000F1E10[v25] ^ __ROR4__(v19, 31);
    }

    while (v24 >= (unsigned __int8 *)&v45);
    int v26 = v19 & (v15 - 1);
    unint64_t result = *(unsigned int *)(v13 + 4LL * v26);
    if ((_DWORD)result == -2)
    {
LABEL_16:
      *(_DWORD *)(v13 + 4LL * v26) = v14;
      int v14 = *a1;
LABEL_51:
      if (v14 == 2147483646
        || !sub_1000C1744((const void **)a1 + 2, (int *)a1 + 7, (signed int *)a1 + 6, 10, 24, v14 + 1))
      {
        a1[10] = 1;
        return 0xFFFFFFFFLL;
      }

      else
      {
        unint64_t result = *a1;
        *a1 = result + 1;
        uint64_t v37 = *(void *)(*((void *)a1 + 2) + ((result >> 7) & 0x1FFFFF8)) + 24 * (result & 0x3FF);
        *(_DWORD *)(v37 + 8) = v10;
        *(_WORD *)(v37 + 12) = v9;
        *(void *)uint64_t v37 = v12;
        *(_WORD *)(v37 + 16) = a7;
        *(_WORD *)(v37 + 14) = v8;
      }

      return result;
    }

    uint64_t v33 = *((void *)a1 + 2);
    if (v17)
    {
      while (1)
      {
        uint64_t v34 = *(void *)(v33 + 8LL * (result >> 10));
        uint64_t v35 = v34 + 24 * (result & 0x3FF);
        if (*(_DWORD *)(v35 + 8) == (_DWORD)a2
          && *(unsigned __int16 *)(v34 + 24 * (result & 0x3FF) + 12) == a3
          && *(void *)v35 == v18)
        {
          break;
        }

        if (v26 + 1 == (_DWORD)v15) {
          int v26 = 0;
        }
        else {
          ++v26;
        }
        unint64_t result = *(unsigned int *)(v13 + 4LL * v26);
        if ((_DWORD)result == -2) {
          goto LABEL_16;
        }
      }
    }

    else if (a1[9])
    {
      while (1)
      {
        uint64_t v38 = *(void *)(v33 + 8LL * (result >> 10));
        uint64_t v39 = v38 + 24 * (result & 0x3FF);
        if (*(_DWORD *)(v39 + 8) == (_DWORD)a2
          && *(unsigned __int16 *)(v38 + 24 * (result & 0x3FF) + 12) == a3
          && ((*(void *)v39 ^ v18) & 0x7FFFFFFFFFFFFFFFLL) == 0)
        {
          break;
        }

        if (v26 + 1 == (_DWORD)v15) {
          int v26 = 0;
        }
        else {
          ++v26;
        }
        unint64_t result = *(unsigned int *)(v13 + 4LL * v26);
        if ((_DWORD)result == -2) {
          goto LABEL_16;
        }
      }
    }

    else
    {
      while (1)
      {
        uint64_t v40 = *(void *)(v33 + 8LL * (result >> 10));
        if (*(_DWORD *)(v40 + 24 * (result & 0x3FF) + 8) == (_DWORD)a2
          && *(unsigned __int16 *)(v40 + 24 * (result & 0x3FF) + 12) == a3)
        {
          break;
        }

        if (v26 + 1 == (_DWORD)v15) {
          int v26 = 0;
        }
        else {
          ++v26;
        }
        unint64_t result = *(unsigned int *)(v13 + 4LL * v26);
        if ((_DWORD)result == -2) {
          goto LABEL_16;
        }
      }
    }
  }

  else
  {
LABEL_17:
    unint64_t result = (v14 - 1);
    int v28 = a2 + 1;
    if (a1[8])
    {
      if (v14 > v28)
      {
        LODWORD(result) = v14;
        while (1)
        {
          unint64_t result = (result - 1);
          uint64_t v29 = *(void *)(*((void *)a1 + 2) + 8LL * (result >> 10));
          uint64_t v30 = v29 + 24 * (result & 0x3FF);
          if (*(_DWORD *)(v30 + 8) == (_DWORD)a2
            && *(unsigned __int16 *)(v29 + 24 * (result & 0x3FF) + 12) == a3
            && *(void *)v30 == v12)
          {
            break;
          }
        }
      }
    }

    else if (a1[9])
    {
      if (v14 > v28)
      {
        LODWORD(result) = v14;
        while (1)
        {
          unint64_t result = (result - 1);
          uint64_t v31 = *(void *)(*((void *)a1 + 2) + 8LL * (result >> 10));
          uint64_t v32 = v31 + 24 * (result & 0x3FF);
          if (*(_DWORD *)(v32 + 8) == (_DWORD)a2
            && *(unsigned __int16 *)(v31 + 24 * (result & 0x3FF) + 12) == a3
            && (*(void *)v32 & 0x7FFFFFFFFFFFFFFFLL) == (a4 & 0x7FFFFFFFFFFFFFFFLL))
          {
            break;
          }
        }
      }
    }

    else if (v14 > v28)
    {
      LODWORD(result) = v14;
      while (1)
      {
        unint64_t result = (result - 1);
        uint64_t v36 = *(void *)(*((void *)a1 + 2) + 8LL * (result >> 10));
        if (*(_DWORD *)(v36 + 24 * (result & 0x3FF) + 8) == (_DWORD)a2
          && *(unsigned __int16 *)(v36 + 24 * (result & 0x3FF) + 12) == a3)
        {
          break;
        }

        if ((int)result <= v28)
        {
LABEL_49:
          unint64_t result = a2;
          break;
        }
      }
    }
  }

  uint64_t v41 = *(void *)(*((void *)a1 + 2) + 8LL * (result >> 10));
  uint64_t v42 = v41 + 24 * (result & 0x3FF);
  int v44 = *(__int16 *)(v42 + 14);
  uint64_t v43 = (_WORD *)(v42 + 14);
  if (v44 > a6)
  {
    *(_WORD *)(v41 + 24 * (result & 0x3FF) + 16) = a7;
    *uint64_t v43 = a6;
  }

  return result;
}

uint64_t sub_10009CAD8(uint64_t result, int a2, int a3)
{
  if (*(_DWORD *)(result + 8) > a3)
  {
    *(_DWORD *)(result + 4) = a2;
    *(_DWORD *)(result + 8) = a3;
  }

  return result;
}

uint64_t sub_10009CAEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v5 = a1;
  uint64_t v51 = sub_1000B31C8(*(void *)(a1 + 64));
  unsigned int v6 = *(_DWORD *)(a3 + 24);
  if (v6 == -1)
  {
    unsigned int v8 = 0;
    uint64_t v7 = 0LL;
    unsigned int v10 = -1;
LABEL_21:
    unint64_t v11 = a4[1];
    if ((_DWORD)v11 == -1)
    {
      unint64_t v11 = *a4;
    }

    else if (*((_WORD *)a4 + 4) || *a4 != -1)
    {
      return 0LL;
    }

    uint64_t result = sub_10002032C( v51,  *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 16) + 8LL * (v11 >> 10))
                                   + 24 * (v11 & 0x3FF)
                                   + 12),
               *(unsigned __int16 *)(v7 + 12));
    if (!(_DWORD)result) {
      return result;
    }
    if ((_DWORD)v11 != -1 || v8 != 0) {
      goto LABEL_31;
    }
    return 0LL;
  }

  uint64_t v7 = 0LL;
  unsigned int v8 = 0;
  BOOL v9 = 1;
  unsigned int v10 = -1;
  LODWORD(v11) = -2;
  unint64_t v12 = &qword_1000FDCC0;
  while (1)
  {
    unsigned int v13 = v10;
    unsigned int v10 = v6;
    unsigned int v14 = a4[1];
    int v15 = v10 == v14 && v9;
    if (v15 != 1) {
      break;
    }
    unint64_t v11 = *a4;
    if (!*((_WORD *)a4 + 4)) {
      goto LABEL_10;
    }
    if (!v7) {
      goto LABEL_37;
    }
LABEL_15:
    if ((_DWORD)v11 == -1)
    {
      unsigned int v10 = v13;
      if (v8) {
        goto LABEL_31;
      }
      return 0LL;
    }

    uint64_t v19 = v11 >> 10;
    uint64_t v20 = *(void *)(*(void *)(v5 + 16) + 8LL * v19);
    unsigned int v21 = v11 & 0x3FF;
    if (!*v12) {
      goto LABEL_3;
    }
    if (!*(_DWORD *)(*v12 + 1288)) {
      goto LABEL_3;
    }
    unsigned int v52 = v11;
    unsigned int v22 = v13;
    uint64_t v23 = v5;
    uint8x8_t v24 = v12;
    BOOL v25 = sub_10002032C(v51, *(unsigned __int16 *)(v20 + 24LL * v21 + 12), *(unsigned __int16 *)(v7 + 12));
    unsigned int v13 = v22;
    unint64_t v11 = v52;
    unint64_t v12 = v24;
    uint64_t v5 = v23;
    if (v25)
    {
LABEL_3:
      if (((*(void *)(v20 + 24LL * v21) ^ *(void *)v7) & 0x7FE0000000000000LL) == 0)
      {
        uint64_t v28 = *(void *)(v5 + 16);
        uint64_t v30 = (*(void *)(*(void *)(v28 + 8 * v19) + 24LL * v21) >> 35) & 0x3FFFFLL;
        LODWORD(v29) = v30;
        unsigned int v10 = v13;
        uint64_t v31 = a3;
        if (v8) {
          goto LABEL_46;
        }
        goto LABEL_35;
      }
    }

uint64_t sub_10009CEDC( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 *a7, uint64_t a8, int a9, _DWORD *a10)
{
  if (a2 == -1) {
    return 0LL;
  }
  int v10 = 0;
  int v11 = a9;
  unint64_t v12 = (void *)(*(void *)(*(void *)(a1 + 16) + 8LL * (a2 >> 10)) + 24LL * (a2 & 0x3FF));
  *a10 = (*v12 >> 53) & 0x3FF;
  uint64_t v13 = *(void *)(a1 + 16);
  for (unsigned int i = a2; i != -1; unsigned int i = *(_DWORD *)(*(void *)(v13 + 8LL * (i >> 10)) + 24LL * (i & 0x3FF) + 8))
    ++v10;
  if (v10 - 1 >= a9)
  {
    int v15 = v10 - a9;
    if (v10 - a9 >= 1)
    {
      do
      {
        uint64_t v41 = *(void *)(v13 + 8LL * (a2 >> 10));
        unsigned int v42 = a2 & 0x3FF;
        a2 = *(_DWORD *)(v41 + 24LL * (a2 & 0x3FF) + 8);
        ++v11;
      }

      while (v10 != v11);
      unint64_t v12 = (void *)(v41 + 24LL * v42);
    }

    uint64_t v16 = (*v12 >> 10) & 0x1FFFFFFLL;
    uint64_t v17 = *v12 & 0x3FFLL;
    if (a2 == -1) {
      return 0LL;
    }
  }

  else
  {
    int v15 = 0;
    LODWORD(v16) = -1;
    LODWORD(v17) = -1;
  }

  uint64_t v18 = 0LL;
  int v19 = v10 - v15;
  uint64_t v20 = v19;
  uint64_t v21 = v19;
  uint64_t v22 = a3 + v20 * 2 - 2;
  uint64_t v23 = 4LL * v19;
  uint64_t v24 = a4 + v23 - 4;
  uint64_t v25 = a6 + v23 - 4;
  uint64_t v26 = a5 + v21 - 1;
  uint64_t v27 = (uint64_t)&a7[v20 - 1];
  uint64_t v28 = a8 + v21 - 1;
  do
  {
    uint64_t v29 = *(void *)(*(void *)(a1 + 16) + 8LL * (a2 >> 10));
    int v30 = v16;
    unsigned int v31 = a2 & 0x3FF;
    uint64_t v32 = v29 + 24LL * v31;
    *(_WORD *)(v22 + 2 * v18) = *(_WORD *)(v32 + 12);
    if (a4) {
      *(_DWORD *)(v24 + 4 * v18) = (*(void *)v32 >> 35) & 0x3FFFF;
    }
    uint64_t v16 = (*(void *)v32 >> 10) & 0x1FFFFFFLL;
    uint64_t v33 = *(void *)v32 & 0x3FFLL;
    if (a6)
    {
      *(_DWORD *)(v25 + 4 * v18) = (unsigned __int16)(*(void *)v32 >> 10);
      BOOL v34 = !(_DWORD)v33 && (_DWORD)v17 == 1;
      if (v34 && v30 != (_DWORD)v16) {
        *(_DWORD *)(v25 + 4 * v18) = (unsigned __int16)v30;
      }
    }

    if (a5) {
      *(_BYTE *)(v26 + v18) = (_DWORD)v33 == 0;
    }
    if (a7) {
      *(_WORD *)(v27 + 2 * v18) = *(_WORD *)(v29 + 24LL * v31 + 16);
    }
    if (a8 && (*(void *)v32 & 0x8000000000000000LL) != 0) {
      *(_BYTE *)(v28 + v18) = 1;
    }
    a2 = *(_DWORD *)(v29 + 24LL * v31 + 8);
    --v18;
    LODWORD(v17) = v33;
  }

  while (a2 != -1);
  uint64_t result = -v18;
  if (a7)
  {
    __int16 v37 = *a7;
    if (*a7)
    {
      if ((_DWORD)v18 != -1) {
        goto LABEL_29;
      }
    }

    else
    {
      __int16 v37 = 1;
      *a7 = 1;
      if ((_DWORD)v18 != -1)
      {
LABEL_29:
        uint64_t v38 = ~v18;
        uint64_t v39 = a7 + 1;
        do
        {
          int v40 = *v39;
          if (v40 <= v37) {
            *(v39 - 1) = v40 - 1;
          }
          ++v39;
          __int16 v37 = v40;
          --v38;
        }

        while (v38);
        return result;
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_10009D140(uint64_t a1, unsigned int a2)
{
  if (a2 == -1) {
    return 0LL;
  }
  else {
    return *(void *)(*(void *)(*(void *)(a1 + 16) + 8LL * (a2 >> 10)) + 24LL * (a2 & 0x3FF)) & 0x7FFFFFFFFFFFFFFFLL;
  }
}

uint64_t sub_10009D174(uint64_t a1, unsigned int a2)
{
  if (a2 == -1) {
    return 65534LL;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8LL * (a2 >> 10));
  if ((*(void *)(v2 + 24LL * (a2 & 0x3FF)) & 0x8000000000000000LL) != 0) {
    return 65534LL;
  }
  else {
    return *(unsigned __int16 *)(v2 + 24LL * (a2 & 0x3FF) + 12);
  }
}

uint64_t sub_10009D1B4(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 8LL * (a2 >> 10)) + 24LL * (a2 & 0x3FF) + 12);
}

uint64_t sub_10009D1D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

BOOL sub_10009D1DC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4) != -1;
}

uint64_t sub_10009D1EC(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  *a2 = *(_DWORD *)(result + 4);
  *a3 = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_10009D200( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 *a6, int a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, int a11, uint64_t a12, _DWORD *a13)
{
  unsigned int v13 = *(_DWORD *)(a1 + 4);
  if (v13 == -1 || !*(_DWORD *)a1)
  {
    uint64_t v22 = 0LL;
    *a9 = 0x40000000;
    *a8 = 0;
    return v22;
  }

  int v14 = 0;
  uint64_t v15 = 0LL;
  int v16 = -a7;
  do
  {
    uint64_t v17 = *(void *)(*(void *)(a1 + 16) + 8LL * (v13 >> 10));
    unsigned int v18 = v13 & 0x3FF;
    ++v15;
    unsigned int v13 = *(_DWORD *)(v17 + 24LL * (v13 & 0x3FF) + 8);
    ++v16;
    --v14;
  }

  while (v13 != -1);
  *a8 = -v14;
  *a9 = *(_DWORD *)(a1 + 8);
  if (a10) {
    *a10 = *(_DWORD *)(a1 + 4);
  }
  unsigned int v19 = *(_DWORD *)(a1 + 4);
  if (v19 != -1 && *(_DWORD *)(a1 + 8) == 0x40000000)
  {
    *a9 -= 50000;
    unsigned int v19 = *(_DWORD *)(a1 + 4);
  }

  if (-a7 - v14 < 1)
  {
    uint64_t v23 = (void *)(v17 + 24LL * v18);
    uint64_t v22 = 1LL;
    if (a13) {
LABEL_13:
    }
      *a13 = (*v23 >> 53) & 0x3FF;
  }

  else
  {
    do
    {
      uint64_t v20 = *(void *)(*(void *)(a1 + 16) + 8LL * (v19 >> 10));
      unsigned int v21 = v19 & 0x3FF;
      unsigned int v19 = *(_DWORD *)(v20 + 24LL * (v19 & 0x3FF) + 8);
      ++a7;
    }

    while (-v14 != a7);
    uint64_t v22 = 0LL;
    uint64_t v23 = (void *)(v20 + 24LL * v21);
    if (a13) {
      goto LABEL_13;
    }
  }

  int v24 = v16 & ~(v16 >> 31);
  if (v19 != -1)
  {
    uint64_t v25 = 0LL;
    int v26 = -v14 - v24;
    uint64_t v27 = v15 - ((int)v15 - v24);
    uint64_t v28 = 4LL * v26;
    uint64_t v29 = a3 + v28 - 4;
    uint64_t v30 = a4 + v28 - 4;
    uint64_t v31 = v26;
    uint64_t v32 = a2 + v31 * 2 - 2;
    int v33 = -1;
    int v34 = -1;
    do
    {
      uint64_t v36 = *(void *)(*(void *)(a1 + 16) + 8LL * (v19 >> 10));
      unsigned int v37 = v19 & 0x3FF;
      uint64_t v38 = (unint64_t *)(v36 + 24LL * v37);
      if (a11)
      {
        if (v27 == v25) {
          LOBYTE(v39) = 0;
        }
        else {
          unint64_t v39 = *v38 >> 63;
        }
        *(_BYTE *)(a12 + v26 - 1 + v25) = v39;
      }

      if (a3) {
        *(_DWORD *)(v29 + 4 * v25) = (*v38 >> 35) & 0x3FFFF;
      }
      unint64_t v40 = *v38;
      uint64_t v41 = (*v38 >> 10) & 0x1FFFFFF;
      if (a4)
      {
        *(_DWORD *)(v30 + 4 * v25) = (unsigned __int16)(v40 >> 10);
        if (v34 == 1 && (v40 & 0x3FF) == 0 && v33 != (_DWORD)v41) {
          *(_DWORD *)(v30 + 4 * v25) = (unsigned __int16)v33;
        }
      }

      if (a5) {
        *(_BYTE *)(a5 + v26 - 1 + v25) = (v40 & 0x3FF) == 0;
      }
      if (a6) {
        a6[v31 - 1 + v25] = *(_WORD *)(v36 + 24LL * v37 + 16);
      }
      uint64_t v35 = v36 + 24LL * v37;
      *(_WORD *)(v32 + 2 * v25) = *(_WORD *)(v35 + 12);
      unsigned int v19 = *(_DWORD *)(v35 + 8);
      --v25;
      int v33 = v41;
      int v34 = v40 & 0x3FF;
    }

    while (v19 != -1);
  }

  if (a6)
  {
    int v44 = -v14 - v24;
    __int16 v45 = *a6;
    if (*a6)
    {
      if (v44 < 2) {
        return v22;
      }
    }

    else
    {
      __int16 v45 = 1;
      *a6 = 1;
      if (v44 < 2) {
        return v22;
      }
    }

    __int16 v46 = a6 + 1;
    uint64_t v47 = (-v14 - v24) - 1LL;
    do
    {
      int v48 = *v46;
      if (v48 <= v45) {
        *(v46 - 1) = v48 - 1;
      }
      ++v46;
      __int16 v45 = v48;
      --v47;
    }

    while (v47);
  }

  return v22;
}

uint64_t sub_10009D4E8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 88) = 0u;
  uint64_t v4 = a2 + 88;
  *(_DWORD *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  if (sub_10003982C(a1) == 3)
  {
    uint64_t v5 = (_DWORD *)(a2 + 12);
  }

  else
  {
    uint64_t v5 = (_DWORD *)(a2 + 12);
    int v6 = sub_10009D200( *(void *)(a1 + 688),  a2 + 16,  0LL,  0LL,  0LL,  0LL,  36,  (_DWORD *)(a2 + 4),  (_DWORD *)(a2 + 12),  0LL,  *(_DWORD *)(a1 + 648),  v4,  0LL);
    int v7 = *(_DWORD *)(a2 + 4);
    if (v7 && v7 <= 36 && v6) {
      return 1LL;
    }
    *(_DWORD *)(a1 + 548) = 3;
  }

  uint64_t result = 0LL;
  *uint64_t v5 = 0x40000000;
  return result;
}

_WORD *sub_10009D5B8(_WORD *result, __int16 a2)
{
  result[406] = a2;
  result[405] = a2;
  result[333] = a2;
  return result;
}

uint64_t sub_10009D5C8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(result + 584) = a2;
  *(void *)(result + 568) = a3;
  *(void *)(result + 576) = a4;
  return result;
}

uint64_t sub_10009D5D8(uint64_t a1, uint64_t a2, __int16 *a3, int a4)
{
  if (sub_1000CF924()) {
    return sub_10003991C(a1);
  }
  if (a2) {
    sub_100006F08( *(void *)(a1 + 384),  a2,  a3,  *(void *)(a1 + 408),  *(_WORD *)(a1 + 812),  a4,  v8,  v9,  v10,  v11,  v12,  v13);
  }
  sub_10009C660(*(void *)(a1 + 688));
  if (*(__int16 *)(a1 + 748) < 0 || *(__int16 *)(a1 + 750) < 0)
  {
    unsigned int v17 = *(unsigned __int16 *)(a1 + 736);
    int v18 = *(_DWORD *)(a1 + 604);
    if (v18 >= 1)
    {
      uint64_t v19 = *(void *)(a1 + 592);
      unint64_t v20 = v19 + 12LL * v18;
      if (v20 <= v19 + 12) {
        unint64_t v20 = v19 + 12;
      }
      unint64_t v21 = v20 - 12;
      if (v21 == v19) {
        uint64_t v22 = *(void *)(a1 + 592);
      }
      else {
        uint64_t v22 = v19 + 1;
      }
      unint64_t v23 = v21 - v22;
      BOOL v24 = v21 != v19;
      unint64_t v25 = v23 / 0xC;
      if (v21 == v19) {
        unint64_t v26 = v25;
      }
      else {
        unint64_t v26 = v25 + 1;
      }
      unint64_t v27 = *(void *)(a1 + 592);
      if (v26 >= 4)
      {
        unint64_t v28 = v26 + 1;
        uint64_t v29 = (v26 + 1) & 3;
        if (!v29) {
          uint64_t v29 = 4LL;
        }
        int32x2_t v30 = vdup_n_s32(v17);
        unint64_t v27 = v19 + 12 * (v28 - v29);
        uint64_t v31 = (__int16 *)(v19 + 32);
        unint64_t v32 = ~v25 + v29 - v24;
        int32x2_t v33 = v30;
        do
        {
          v15.i16[0] = *(v31 - 12);
          v15.i16[2] = *(v31 - 6);
          int32x2_t v15 = vshr_n_s32(vshl_n_s32(v15, 0x10uLL), 0x10uLL);
          v16.i16[0] = *v31;
          v16.i16[2] = v31[6];
          int32x2_t v16 = vshr_n_s32(vshl_n_s32(v16, 0x10uLL), 0x10uLL);
          int32x2_t v30 = vmin_s32(v15, vshr_n_s32(vshl_n_s32(v30, 0x10uLL), 0x10uLL));
          int32x2_t v33 = vmin_s32(v16, vshr_n_s32(vshl_n_s32(v33, 0x10uLL), 0x10uLL));
          v31 += 24;
          v32 += 4LL;
        }

        while (v32);
        int32x2_t v34 = vmin_s32(vshr_n_s32(vshl_n_s32(v30, 0x10uLL), 0x10uLL), vshr_n_s32(vshl_n_s32(v33, 0x10uLL), 0x10uLL));
        LOWORD(v17) = vpmin_s32(v34, v34).u16[0];
      }

      unint64_t v35 = v19 + 12LL * v18;
      do
      {
        v27 += 12LL;
      }

      while (v27 < v35);
    }
  }

  else
  {
    LOWORD(v17) = *(_WORD *)(a1 + 736);
  }

  *(_WORD *)(a1 + 740) = v17;
  *(_DWORD *)(a1 + 756) += (__int16)v17;
  *(_WORD *)(a1 + 736) = 0x4000;
  sub_10005DDC8(*(int **)(a1 + 824));
  (*(void (**)(uint64_t))(a1 + 520))(a1);
  if (*(_DWORD *)(a1 + 548) == 3) {
    return sub_1000070E0(*(void *)(a1 + 384), *(__int16 *)(a1 + 812), (_DWORD *)(a1 + 436));
  }
  (*(void (**)(uint64_t))(a1 + 528))(a1);
  if (*(_BYTE *)(a1 + 424)) {
    sub_100039B9C(a1, v36, v37, v38, v39, v40, v41, v42);
  }
  sub_1000070E0(*(void *)(a1 + 384), *(__int16 *)(a1 + 812), (_DWORD *)(a1 + 436));
  if (qword_1000FDCC0
    && *(_DWORD *)(qword_1000FDCC0 + 1492)
    && sub_100025C94((unsigned int *)(a1 + 760)) == 3)
  {
    uint64_t v43 = (__int16 *)(*(void *)(a1 + 712) + 28LL * (*(_DWORD *)(a1 + 728) - *(_DWORD *)(a1 + 732)));
    __int16 v44 = *(_WORD *)(a1 + 662);
    __int16 v45 = 0x4000;
    while ((unint64_t)v43 < *(void *)(a1 + 720))
    {
      if (*v43 == -1)
      {
        v43 += 14;
      }

      else if (*((_BYTE *)v43 + 2))
      {
        if (v43[12] < v44) {
          __int16 v44 = v43[12];
        }
        v43 += 14;
      }

      else
      {
        if (v43[3] < v45) {
          __int16 v45 = v43[3];
        }
        v43 += 14;
      }
    }

    __int16 v46 = (_DWORD *)(a1 + 760);
    uint64_t result = sub_1000B25CC((unsigned int *)(a1 + 760), v45 <= v44);
    if (*(_DWORD *)(a1 + 548) == 3) {
      goto LABEL_58;
    }
LABEL_46:
    uint64_t result = sub_1000B2750(v46);
    if ((_DWORD)result)
    {
      int v53 = 0;
      BOOL v54 = 0;
    }

    else
    {
      uint64_t result = sub_1000398FC(a1);
      int v53 = 0;
      BOOL v54 = result == 0;
      if (!(_DWORD)result)
      {
LABEL_54:
        if (v54 | v53) {
          int v55 = 1;
        }
        else {
          int v55 = 2;
        }
        *(_DWORD *)(a1 + 548) = v55;
        goto LABEL_58;
      }
    }

    if (qword_1000FDCC0)
    {
      int v53 = *(_DWORD *)(qword_1000FDCC0 + 5364);
      if (v53)
      {
        uint64_t result = sub_10003941C(a1, *(unsigned int *)(qword_1000FDCC0 + 5376), v47, v48, v49, v50, v51, v52);
        int v53 = result != 0;
      }
    }

    goto LABEL_54;
  }

  __int16 v46 = (_DWORD *)(a1 + 760);
  uint64_t result = sub_1000B25CC((unsigned int *)(a1 + 760), *(unsigned __int16 *)(a1 + 808) == *(unsigned __int16 *)(a1 + 660));
  if (*(_DWORD *)(a1 + 548) != 3) {
    goto LABEL_46;
  }
LABEL_58:
  --*(_WORD *)(a1 + 812);
  return result;
}

uint64_t sub_10009D980( uint64_t a1, uint64_t a2, _DWORD *a3, int a4, unsigned __int16 a5, int a6, uint64_t a7, unsigned int a8, unsigned __int16 a9, void *a10, unsigned int a11)
{
  if (!a2) {
    a2 = *(void *)(a1 + 472);
  }
  return sub_1000D1250(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_10009D9C0(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (void *)sub_1000C1074(896LL);
  uint64_t v7 = (uint64_t)v6;
  if (!v6) {
    return v7;
  }
  memcpy(v6, &off_1000F9CC8, 0x208uLL);
  *(void *)(v7 + 376) = a1;
  *(void *)(v7 + 384) = a2;
  *(_DWORD *)(v7 + 432) = a3;
  *(_WORD *)(v7 + 660) = sub_100004690(a2);
  int v8 = qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 1480) && sub_100004624(*(void *)(v7 + 384)) != 0;
  *(_DWORD *)(v7 + 552) = v8;
  int v9 = *(_DWORD *)(v7 + 432);
  *(_DWORD *)(v7 + 560) = sub_10000462C(*(void *)(v7 + 384));
  *(void *)(v7 + 592) = 0LL;
  *(_DWORD *)(v7 + 584) = -1;
  *(_OWORD *)(v7 + 568) = 0u;
  *(_WORD *)(v7 + 812) = -1;
  *(void *)(v7 + 712) = 0LL;
  uint64_t v10 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    *(_DWORD *)(v7 + 728) = *(void *)(qword_1000FDCC0 + 4664);
    *(_WORD *)(v7 + 746) = *(void *)(v10 + 1688);
    *(_WORD *)(v7 + 750) = *(void *)(v10 + 1496);
    *(_WORD *)(v7 + 752) = *(void *)(v10 + 1664);
    *(_WORD *)(v7 + 814) = -1;
    *(void *)(v7 + 456) = 0xFFFFFFFFLL;
    *(_DWORD *)(v7 + 816) = 0;
    uint64_t v11 = sub_10009C484(*(_DWORD *)(v10 + 4672));
    *(void *)(v7 + 688) = v11;
    sub_10009C5B0(v11, *(void *)(v7 + 376));
    if (!*(void *)(v7 + 688)) {
      goto LABEL_39;
    }
  }

  else
  {
    *(_DWORD *)(v7 + 728) = 0;
    *(_WORD *)(v7 + 746) = 0;
    *(_DWORD *)(v7 + 750) = 0;
    *(_WORD *)(v7 + 814) = -1;
    *(void *)(v7 + 456) = 0xFFFFFFFFLL;
    *(_DWORD *)(v7 + 816) = 0;
    uint64_t v12 = sub_10009C484(0);
    *(void *)(v7 + 688) = v12;
    sub_10009C5B0(v12, *(void *)(v7 + 376));
    if (!*(void *)(v7 + 688)) {
      goto LABEL_39;
    }
  }

  *(_OWORD *)(v7 + 704) = 0u;
  uint64_t v13 = sub_1000C1074(28LL * *(int *)(v7 + 728));
  *(void *)(v7 + 712) = v13;
  if (!v13) {
    goto LABEL_39;
  }
  *(void *)(v7 + 720) = v13 + 28LL * *(int *)(v7 + 728);
  if (qword_1000FDCC0)
  {
    int v14 = *(_DWORD *)(qword_1000FDCC0 + 4704);
    int v15 = *(_DWORD *)(qword_1000FDCC0 + 4708);
  }

  else
  {
    int v14 = 0;
    int v15 = 0;
  }

  uint64_t v16 = sub_10009AA7C(1, v14, v15, *(_DWORD *)(v7 + 552), 1, *(uint64_t **)(v7 + 376), *(void *)(v7 + 384));
  *(void *)(v7 + 840) = v16;
  if (!v16) {
    goto LABEL_39;
  }
  if (!*(void *)(v7 + 592))
  {
    int v17 = qword_1000FDCC0;
    if (qword_1000FDCC0) {
      int v17 = *(_DWORD *)(qword_1000FDCC0 + 4680);
    }
    *(_DWORD *)(v7 + 600) = v17;
    uint64_t v18 = sub_1000C1074(12LL * v17);
    *(void *)(v7 + 592) = v18;
    if (!v18) {
      goto LABEL_39;
    }
  }

  sub_10003AF54(v7);
  if (!*(void *)(v7 + 408)) {
    goto LABEL_39;
  }
  *(void *)(v7 + 824) = sub_10005DD24();
  sub_100004624(*(void *)(v7 + 384));
  uint64_t v19 = sub_10009E9EC;
  if (!v8) {
    uint64_t v19 = sub_10009FD5C;
  }
  unint64_t v20 = sub_10009F594;
  if (!v8) {
    unint64_t v20 = sub_1000A03A0;
  }
  uint64_t v21 = qword_1000FDCC0;
  *(void *)(v7 + 528) = v19;
  *(void *)(v7 + 536) = v20;
  *(void *)(v7 + 520) = sub_1000A07A8;
  if (!v21) {
    goto LABEL_42;
  }
  uint64_t v22 = *(void *)(v21 + 4128);
  if (v22)
  {
    uint64_t v23 = *(void *)(v21 + 4136);
    if (v23)
    {
      uint64_t v24 = sub_1000D0010(*(void *)(v7 + 384), *(void *)(v7 + 376), v9, v23, v22, 1, 0, v8);
      *(void *)(v7 + 472) = v24;
      if (v24)
      {
        uint64_t v21 = qword_1000FDCC0;
        if (qword_1000FDCC0) {
          goto LABEL_30;
        }
LABEL_42:
        *(_DWORD *)(v7 + 616) = 0;
        return v7;
      }

uint64_t sub_10009DD60(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 704);
  if (v2)
  {
    sub_100024158(v2);
    *(void *)(a1 + 704) = 0LL;
  }

  uint64_t v3 = *(void *)(a1 + 472);
  if (v3) {
    sub_1000D0174(v3);
  }
  sub_10005DD98(*(void *)(a1 + 824));
  sub_100006EFC(*(void *)(a1 + 408));
  sub_1000C0EF8(*(void *)(a1 + 592));
  sub_10009ACA8(*(void *)(a1 + 840));
  sub_1000C0EF8(*(void *)(a1 + 712));
  sub_10009C54C(*(void *)(a1 + 688));
  sub_1000C0EF8(*(void *)(a1 + 864));
  sub_1000C1BC8(*(void *)(a1 + 624), *(unsigned int *)(a1 + 636), *(_DWORD *)(a1 + 632));
  return sub_1000C0EF8(a1);
}

uint64_t sub_10009DDE4(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 840);
  if (!v3) {
    return 1LL;
  }
  uint64_t result = sub_10009BE24(v3, a2, a3);
  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

uint64_t sub_10009DE08( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *(_DWORD **)(a1 + 840);
  if (!v8) {
    return 1LL;
  }
  uint64_t result = sub_10009C0AC(v8, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result) {
    return 1LL;
  }
  return result;
}

uint64_t sub_10009DE2C( uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  if (a5) {
    goto LABEL_2;
  }
  if (a6 != 2)
  {
    if (a6 != 1) {
      goto LABEL_2;
    }
    if (*(_DWORD *)(a1 + 552)) {
      return 0LL;
    }
  }

  uint64_t v17 = *(void *)(a1 + 840);
  if (qword_1000FDCC0)
  {
    uint64_t result = sub_10009AE4C(v17, *(_DWORD *)(qword_1000FDCC0 + 4688), *(void *)(qword_1000FDCC0 + 4696));
    if (!(_DWORD)result) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t result = sub_10009AE4C(v17, 0, 0);
    if (!(_DWORD)result) {
      goto LABEL_3;
    }
  }

  *(_DWORD *)(a1 + 544) = a6;
  *(_DWORD *)(a1 + 644) = 1;
  *(_DWORD *)(a1 + 848) = a8;
  *(_DWORD *)(a1 + 852) = a9;
  LOWORD(v18) = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    uint64_t v18 = *(void *)(qword_1000FDCC0 + 1704);
  }
  *(_WORD *)(a1 + 748) = v18;
  if (a3 < 1)
  {
    *(_DWORD *)(a1 + 816) = 0;
    __int16 v19 = -1;
  }

  else
  {
    *(_DWORD *)(a1 + 816) = 1;
    __int16 v19 = *(_WORD *)(a2 + 2LL * (a3 - 1));
  }

  *(_WORD *)(a1 + 814) = v19;
  *(void *)(a1 + 732) = 1LL;
  *(_WORD *)(*(void *)(a1 + 712) + 28LL * *(int *)(a1 + 728) - 28) = -1;
  *(_DWORD *)(a1 + 548) = 1;
  *(_DWORD *)(a1 + 640) = 0;
  uint64_t v20 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    *(_DWORD *)(a1 + 820) = *(__int16 *)(qword_1000FDCC0 + 4656);
    int v21 = a10;
    sub_100038FBC(a1, *(_DWORD *)(v20 + 5348), *(_DWORD *)(v20 + 5372));
    uint64_t v22 = *(void *)(a1 + 472);
    if (!v22) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  *(_DWORD *)(a1 + 820) = 0;
  int v21 = a10;
  sub_100038FBC(a1, 0, 0);
  uint64_t v22 = *(void *)(a1 + 472);
  if (v22) {
LABEL_19:
  }
    sub_1000D0E08(v22, a2, a3, v21);
LABEL_20:
  if (a7 == 2)
  {
    __int16 v23 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_32;
    }
    uint64_t v24 = (__int16 *)(qword_1000FDCC0 + 968);
    goto LABEL_31;
  }

  if (a7 == 1)
  {
    __int16 v23 = qword_1000FDCC0;
    if (!qword_1000FDCC0) {
      goto LABEL_32;
    }
    uint64_t v24 = (__int16 *)(qword_1000FDCC0 + 4568);
    goto LABEL_31;
  }

  if (a7)
  {
    *(_WORD *)(a1 + 742) = 0;
    *(_WORD *)(a1 + 744) = 0;
    goto LABEL_35;
  }

  __int16 v23 = qword_1000FDCC0;
  if (qword_1000FDCC0)
  {
    uint64_t v24 = (__int16 *)(qword_1000FDCC0 + 1632);
LABEL_31:
    __int16 v23 = *v24;
  }

uint64_t sub_10009E1F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 548);
}

uint64_t sub_10009E1F8(uint64_t a1)
{
  return *(__int16 *)(a1 + 812);
}

uint64_t sub_10009E200(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 548);
  if ((_DWORD)v2 == 1 && sub_1000B27FC((unsigned int *)(a1 + 760), a2, 0) == 2)
  {
    if (sub_10009D1DC(*(void *)(a1 + 688))) {
      return 2LL;
    }
    else {
      return 1LL;
    }
  }

  return v2;
}

uint64_t sub_10009E250(uint64_t result)
{
  *(_DWORD *)(result + 548) = 3;
  return result;
}

uint64_t sub_10009E25C()
{
  return 0LL;
}

uint64_t sub_10009E264( _WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = a5 - 1;
  int v9 = (unsigned __int8 *)a7;
  unsigned int v11 = a5;
  __int16 v13 = sub_100039A64((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(a6 + 4LL * v8) == -4) {
    unsigned int v14 = v8;
  }
  else {
    unsigned int v14 = v11;
  }
  uint64_t v15 = v14 - 1;
  __int16 v16 = a1[375] + v13 + a1[374] * (v14 - 1);
  if (v9 && v14 >= 2)
  {
    do
    {
      if (*v9++) {
        v16 += a1[376];
      }
      --v15;
    }

    while (v15);
  }

  return v16;
}

uint64_t sub_10009E314( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  uint64_t v15 = 0LL;
  uint64_t v11 = 2LL * (int)a2;
  uint64_t v12 = (void *)sub_1000CAF58(v11, a2, a3, a4, a5, a6, a7, a8);
  sub_10009D200(*(void *)(a1 + 688), (uint64_t)v12, 0LL, 0LL, 0LL, 0LL, v9, (_DWORD *)&v15 + 1, &v15, 0LL, 0, 0LL, 0LL);
  if (SHIDWORD(v15) >= 1)
  {
    uint64_t v13 = 0LL;
    do
    {
      *(_DWORD *)(a3 + 4 * v13) = sub_1000BB870(*(void *)(a1 + 376), *((unsigned __int16 *)v12 + v13));
      ++v13;
    }

    while (v13 < SHIDWORD(v15));
  }

  sub_1000CB038(v12, v11);
  return HIDWORD(v15);
}

uint64_t sub_10009E3D8(uint64_t a1)
{
  return sub_1000D0454(*(__int128 **)(a1 + 472));
}

uint64_t sub_10009E3E0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13, int a14, unsigned int a15, _DWORD *a16)
{
  int v34 = a7;
  uint64_t v17 = a2;
  uint64_t v35 = 2LL * (int)a2;
  unint64_t v19 = sub_1000CAF58(v35, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v24 = (unsigned __int16 *)v19;
  if ((int)v17 >= 1)
  {
    uint64_t v25 = v17;
    int v26 = (unsigned int *)a3;
    int v27 = (_WORD *)v19;
    do
    {
      unsigned int v28 = *v26++;
      *v27++ = sub_1000BB8B0(*(void *)(a1 + 376), v28);
      --v25;
    }

    while (v25);
  }

  int v29 = sub_10005C228(a12, a13, a15, a3 + 4LL * a14, v20, v21, v22, v23);
  if (v34 >= 1 && v29) {
    int v29 = sub_100026308(a8, v34, v24, v17);
  }
  if (v29)
  {
    *a16 = 0;
    sub_1000CB038(v24, v35);
  }

  else
  {
    int v36 = 0;
    v37[0] = v17;
    if (sub_10003B330((uint64_t)v24, a9, a10, a11, a4, v37, &v36) && v37[0] >= 1)
    {
      uint64_t v30 = 0LL;
      do
      {
        *(_DWORD *)(a3 + 4 * v30) = sub_1000BB870(*(void *)(a1 + 376), v24[v30]);
        ++v30;
      }

      while (v30 < v37[0]);
    }

    *a16 = v36;
    sub_1000CB038(v24, v35);
    return v37[0];
  }

  return v17;
}

uint64_t sub_10009E574(uint64_t a1)
{
  if (!sub_10009D1DC(*(void *)(a1 + 688))) {
    *(_DWORD *)(a1 + 548) = 3;
  }
  *(_DWORD *)(a1 + 584) = -1;
  *(_WORD *)(a1 + 812) = -1;
  uint64_t result = sub_10003941C(a1, *(unsigned int *)(a1 + 428), v2, v3, v4, v5, v6, v7);
  if ((_DWORD)result) {
    return sub_10003991C(a1);
  }
  return result;
}

uint64_t sub_10009E5D8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_10009ADAC(*(void *)(a1 + 840));
  if (!*(_DWORD *)(a1 + 616)) {
    return v4;
  }
  int v5 = sub_1000B3C5C(*(uint64_t **)(a1 + 376), a2);
  uint64_t v6 = (int16x8_t *)sub_1000C1074(2LL * v5);
  if (v6)
  {
    uint64_t v7 = (uint64_t)v6;
    sub_1000B39A4(*(void *)(a1 + 376), a2, v6, v5);
    if (v5 >= 1)
    {
      uint64_t v8 = v5;
      int v9 = (unsigned __int16 *)v7;
      do
      {
        unsigned int v10 = *v9++;
        uint64_t v4 = sub_10009E6A4(a1, v10);
        if (!(_DWORD)v4) {
          break;
        }
        --v8;
      }

      while (v8);
    }

    sub_1000C0EF8(v7);
    return v4;
  }

  return 0LL;
}

uint64_t sub_10009E6A4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = sub_10009ADAC(*(void *)(a1 + 840));
  if ((_DWORD)v4)
  {
    if (*(_DWORD *)(a1 + 616))
    {
      uint64_t v4 = sub_1000C1744((const void **)(a1 + 624), (int *)(a1 + 636), (signed int *)(a1 + 632), 8, 2, a2 + 1);
      if ((_DWORD)v4)
      {
        uint64_t v5 = 2LL * (int)(sub_1000B32A0(*(uint64_t **)(a1 + 376)) + 1);
        uint64_t v13 = (_DWORD *)sub_1000CAF58(v5, v6, v7, v8, v9, v10, v11, v12);
        *(_WORD *)(*(void *)(*(void *)(a1 + 624) + 8LL * (a2 >> 8)) + 2LL * a2) = *((_WORD *)v13 + (int)(sub_1000B9044(*(uint64_t **)(a1 + 376), a2, v13) - 1));
        sub_1000CB038(v13, v5);
      }
    }
  }

  return v4;
}

uint64_t sub_10009E768(uint64_t a1)
{
  *(_DWORD *)(a1 + 548) = 4;
  return 1LL;
}

uint64_t sub_10009E7A0(uint64_t a1)
{
  *(_DWORD *)(a1 + 548) = 4;
  return 1LL;
}

uint64_t sub_10009E7D0(uint64_t a1)
{
  return nullsub_1(*(void *)(a1 + 472));
}

uint64_t sub_10009E7D8(uint64_t result, __int16 a2)
{
  if (*(int *)(result + 604) >= 1)
  {
    uint64_t v2 = result;
    int v3 = 0;
    __int16 v4 = *(_WORD *)(result + 750) + a2;
    __int16 v6 = 0;
    uint64_t v5 = (_WORD *)(*(void *)(result + 592) + 8LL);
    do
    {
      if (!*(_DWORD *)(v2 + 856) || *(__int16 *)(v2 + 456) == -1)
      {
        uint64_t result = 0LL;
      }

      else
      {
        __int16 v6 = sub_1000BB868(*(void *)(v2 + 376), (unsigned __int16)*(v5 - 1), 0LL);
        uint64_t result = sub_1000BBBB0(*(void *)(v2 + 376), (uint64_t)&v6, 1u, *(unsigned __int16 *)(v2 + 456));
      }

      *uint64_t v5 = v4 + result;
      *((_DWORD *)v5 - 2) = -1;
      ++v3;
      v5 += 6;
    }

    while (v3 < *(_DWORD *)(v2 + 604));
  }

  return result;
}

uint64_t sub_10009E89C(uint64_t a1, __int16 a2, unsigned int a3, int a4)
{
  uint64_t v7 = *(void *)(a1 + 376);
  uint64_t v8 = *(void *)(a1 + 592);
  uint64_t result = sub_1000BB868(v7, a3, 0LL);
  if (*(int *)(a1 + 604) >= 1)
  {
    unsigned int v10 = result;
    int v11 = 0;
    __int16 v17 = 0;
    do
    {
      __int16 v12 = a2;
      if (*(_DWORD *)(a1 + 856))
      {
        __int16 v17 = sub_1000BB868(v7, *(unsigned __int16 *)(v8 + 6), 0LL);
        uint64_t result = sub_1000BBBB0(v7, (uint64_t)&v17, 1u, v10);
        __int16 v12 = result + a2;
      }

      int v13 = *(__int16 *)(v8 + 8);
      int v14 = *(_DWORD *)(a1 + 696);
      if (v13 <= v12)
      {
        if (v14 && *(_DWORD *)v8 != a4) {
          uint64_t result = (uint64_t)sub_100024188( *(uint64_t **)(a1 + 704),  a4,  *(_DWORD *)v8,  v12 - (unsigned __int16)v13,  v12 - *(_WORD *)(a1 + 736));
        }
      }

      else
      {
        if (v14)
        {
          int v15 = *(_DWORD *)v8;
          if (v13 != 0x4000 && v15 != a4) {
            uint64_t result = (uint64_t)sub_100024188( *(uint64_t **)(a1 + 704),  v15,  a4,  (unsigned __int16)v13 - v12,  (unsigned __int16)v13 - *(_WORD *)(a1 + 736));
          }
        }

        *(_WORD *)(v8 + 8) = v12;
        *(_DWORD *)uint64_t v8 = a4;
      }

      v8 += 12LL;
      ++v11;
    }

    while (v11 < *(_DWORD *)(a1 + 604));
  }

  return result;
}

unint64_t sub_10009E9EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 472);
  uint64_t v3 = *(void *)(a1 + 376);
  uint64_t v102 = *(void *)(a1 + 384);
  *(_WORD *)(*(void *)(a1 + 592) + 6LL) = -1;
  *(_WORD *)(*(void *)(a1 + 592) + 8LL) = 0;
  *(_DWORD *)(a1 + 604) = 0;
  int v4 = *(__int16 *)(a1 + 736);
  unint64_t result = v4 + *(unsigned __int16 *)(a1 + 742);
  int v6 = *(_DWORD *)(a1 + 820);
  if (*(_DWORD *)(a1 + 732) > v6) {
    unint64_t result = sub_10005DDF8(*(int **)(a1 + 824), v6, v4, (__int16)result);
  }
  int v128 = 0;
  *(_WORD *)(a1 + 744) = result;
  int v7 = *(__int16 *)(a1 + 662);
  uint64_t v113 = v2;
  if (v7 <= (__int16)result)
  {
    LODWORD(v126) = 0;
    LOWORD(v125) = 0;
    uint64_t v129 = 0LL;
    if (*(int *)(a1 + 584) < 1)
    {
LABEL_16:
      *(_WORD *)(*(void *)(a1 + 592) + 12LL * *(int *)(a1 + 604) + 6) = -1;
      *(_WORD *)(*(void *)(a1 + 592) + 12LL * *(int *)(a1 + 604) + 8) = 0;
LABEL_17:
      uint64_t v20 = v113;
      if (!v113) {
        goto LABEL_21;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
      __int16 v9 = *(_WORD *)(a1 + 750) + v7;
      while (1)
      {
        while (1)
        {
          uint64_t v11 = *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v8);
          if (!*(_DWORD *)(a1 + 856) || *(__int16 *)(a1 + 456) == -1)
          {
            __int16 v12 = 0;
          }

          else
          {
            LOWORD(v125) = sub_1000BB868( *(void *)(a1 + 376),  *(unsigned __int16 *)(*(void *)(a1 + 568) + 2 * v8),  0LL);
            __int16 v12 = sub_1000BBBB0(*(void *)(a1 + 376), (uint64_t)&v125, 1u, *(unsigned __int16 *)(a1 + 456));
          }

          __int16 v13 = v9 + v12;
          unint64_t result = sub_10009B1B8(*(void *)(a1 + 840), v11, &v129, 0LL, (int *)&v126);
          int v10 = sub_100005A94(*(void *)(a1 + 384), word_1000FDD20, *v129, 0LL, v14, v15, v16, v17);
          unint64_t result = sub_1000A0B5C(a1, v11, v13, -1, v10, (unsigned __int16)word_1000FDD20[v10]);
          if (!(_DWORD)result) {
            goto LABEL_17;
          }
        }

        int v18 = *(_DWORD *)(a1 + 604);
        if (v18 == *(_DWORD *)(a1 + 600) - 1) {
          break;
        }
        uint64_t v19 = *(void *)(a1 + 592) + 12LL * v18;
        *(_DWORD *)(a1 + 604) = v18 + 1;
        *(_WORD *)(v19 + 6) = v11;
        unint64_t result = sub_1000057B0(*(void *)(a1 + 384), v129[(int)v126 - 2], v129[(int)v126 - 1], 0LL, v14, v15, v16, v17);
        *(_WORD *)(v19 + 4) = result;
        *(_WORD *)(v19 + 8) = v13;
        *(_DWORD *)uint64_t v19 = -1;
        *(_BYTE *)(v19 + 10) = 0;
      }

      *(_DWORD *)(a1 + 548) = 3;
      uint64_t v20 = v113;
      if (!v113) {
        goto LABEL_21;
      }
    }

    unint64_t result = sub_1000D0B08( v20,  0,  0,  0,  *(__int16 *)(a1 + 666),  *(_WORD *)(a1 + 812),  65534,  *(_WORD *)(a1 + 660),  *(_DWORD *)(a1 + 756) + *(__int16 *)(a1 + 662),  0x4000,  &v128);
    if (v128)
    {
LABEL_19:
      *(_DWORD *)(a1 + 548) = 3;
      return result;
    }

    goto LABEL_21;
  }

  *(_WORD *)(a1 + 662) = 0x4000;
  *(_WORD *)(a1 + 680) = 0x4000;
LABEL_21:
  uint64_t v21 = *(void *)(a1 + 712) + 28LL * *(int *)(a1 + 732);
  uint64_t v22 = *(void *)(a1 + 720);
  __int128 v23 = *(_OWORD *)(v21 - 28);
  *(_OWORD *)(v22 - 16) = *(_OWORD *)(v21 - 16);
  *(_OWORD *)(v22 - 28) = v23;
  if (*(_DWORD *)(a1 + 732) == 1) {
    return result;
  }
  uint64_t v24 = (_OWORD *)(v22 - 56);
  uint64_t v25 = (unsigned __int16 *)(v21 - 56);
  int v26 = *(__int16 *)(a1 + 746);
  uint64_t v104 = v3;
  __int16 v107 = v26;
  if (qword_1000FDCC0)
  {
    uint64_t v27 = *(void *)(qword_1000FDCC0 + 1696);
  }

  else
  {
    LODWORD(v27) = (__int16)v26 & ((__int16)v26 >> 31);
  }

  __int16 v108 = v27;
  int v28 = 0;
  uint64_t v103 = a1 + 814;
  int v122 = 1;
  while (1)
  {
    while (1)
    {
      uint64_t v127 = 0LL;
      uint64_t v125 = 0LL;
      int v126 = 0LL;
      unsigned int v29 = *v25;
      unint64_t result = sub_10009B1B8(*(void *)(a1 + 840), *v25, &v126, 0LL, (int *)&v127 + 1);
      int v30 = HIDWORD(v127);
      BOOL v31 = HIDWORD(v127) == 1;
      if (*((_BYTE *)v25 + 2) == 1 && HIDWORD(v127) != 1) {
        break;
      }
      if (v25[12] <= *(_WORD *)(a1 + 744))
      {
        int v120 = v28;
LABEL_60:
        __int128 v39 = *(_OWORD *)v25;
        *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(v25 + 6);
        unint64_t v121 = v24;
        *uint64_t v24 = v39;
        int v40 = (__int16)(v25[3] - *(_WORD *)(a1 + 736));
        unsigned int v41 = *((unsigned __int8 *)v25 + 2);
        BOOL v42 = *((_BYTE *)v25 + 2) == 0;
        ++v122;
        int v43 = *(_DWORD *)(a1 + 756) + (__int16)v25[3];
        if (v41 >= 2)
        {
          unint64_t result = v113;
          if (HIDWORD(v127) == v41)
          {
            if (v113)
            {
              if (v40 <= v108)
              {
                unint64_t result = sub_1000D0B08( v113,  1,  v30 == 1,  0,  (__int16)v25[5],  *(_WORD *)(a1 + 812),  v29,  v25[2],  v43,  0x4000,  &v128);
                if (v128) {
                  goto LABEL_19;
                }
              }
            }
          }

          __int16 v44 = v25 - 14;
          uint64_t v24 = (_OWORD *)((char *)v121 - 28);
          goto LABEL_29;
        }

        if (v40 > v107) {
          goto LABEL_68;
        }
        int v123 = 0x40000000;
        unsigned int v124 = -1;
        unsigned int v45 = sub_1000BB868(*(void *)(a1 + 376), v29, 0LL);
        int v118 = sub_1000BBBB0(v104, v103, *(_DWORD *)(a1 + 816), v45);
        int v114 = *(__int16 *)(a1 + 736);
        int v111 = *(_DWORD *)(a1 + 756);
        if (!*(_DWORD *)(a1 + 696) || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4736))
        {
          BOOL v46 = 1;
        }

        else
        {
          sub_10009D1EC(*(void *)(a1 + 688), &v124, &v123);
          BOOL v46 = v123 == 0x40000000;
        }

        BOOL v109 = v46;
        unint64_t result = sub_10009C670( *(unsigned int **)(a1 + 688),  *((unsigned int *)v25 + 4),  v29,  0LL,  v42,  v40,  *(_WORD *)(a1 + 812));
        int v117 = result;
        if (v113 && v40 <= v108)
        {
          int v47 = 0;
          __int16 v48 = v25[2];
          if (v30 == 1 && !v25[2])
          {
            uint64_t v49 = *v126;
            uint64_t v50 = sub_10009D174(*(void *)(a1 + 688), *((_DWORD *)v25 + 4));
            if ((_DWORD)v50 == 65534)
            {
              uint64_t v55 = 0LL;
            }

            else
            {
              sub_10009B1B8(*(void *)(a1 + 840), v50, &v125, 0LL, (int *)&v127);
              uint64_t v55 = *v125;
            }

            __int16 v48 = sub_1000057B0(v102, 0LL, v49, v55, v51, v52, v53, v54);
            int v47 = 1;
          }

          unint64_t result = sub_1000D0B08(v113, 0, v31, v47, (__int16)v25[5], *(_WORD *)(a1 + 812), v29, v48, v43, 0x4000, &v128);
          if (v128) {
            goto LABEL_19;
          }
        }

        int v56 = v117;
        int v57 = v118 + v40 + v114 + v111;
        if (!v109)
        {
          int v58 = v124;
          if (v117 != v124)
          {
            __int16 v59 = v123;
            __int16 v60 = v123 - v57;
            if (v123 <= v57)
            {
              __int16 v60 = v57 - v123;
              __int16 v66 = v40;
              int v67 = v117;
            }

            else
            {
              int v115 = *(_DWORD *)(a1 + 756);
              __int16 v61 = *(_WORD *)(a1 + 736);
              unsigned int v62 = sub_10009D1B4(*(void *)(a1 + 688), v124);
              unsigned int v63 = sub_1000BB868(v104, v62, 0LL);
              __int16 v64 = sub_1000BBBB0(v104, v103, *(_DWORD *)(a1 + 816), v63);
              __int16 v65 = v115 + v61;
              int v56 = v117;
              __int16 v66 = v59 - (v65 + v64 - v118);
              int v67 = v124;
              int v58 = v117;
            }

            unint64_t result = (unint64_t)sub_100024188(*(uint64_t **)(a1 + 704), v67, v58, v60, v66);
          }
        }

        if (v56 == -1) {
          goto LABEL_19;
        }
        if (v41)
        {
          int v68 = v117;
          if (*(_DWORD *)(a1 + 852)) {
            goto LABEL_93;
          }
LABEL_96:
          uint64_t v69 = *v126;
          if (*((_BYTE *)v25 + 2))
          {
            if (SHIDWORD(v127) >= 2)
            {
              uint64_t v70 = v126 + 1;
LABEL_103:
              uint64_t v71 = v69;
              LODWORD(v69) = *v70;
              goto LABEL_104;
            }

            uint64_t v72 = sub_10009D174(*(void *)(a1 + 688), *((_DWORD *)v25 + 4));
            if ((_DWORD)v72 != 65534)
            {
              sub_10009B1B8(*(void *)(a1 + 840), v72, &v125, 0LL, (int *)&v127);
              uint64_t v70 = v125;
              goto LABEL_103;
            }

            uint64_t v71 = v69;
            LODWORD(v69) = 0;
          }

          else
          {
            uint64_t v71 = 0LL;
          }

LABEL_120:
                int v90 = (v90 + v91) / 2 + 1;
              }
            }
          }

          if (v88 != *(_DWORD *)(a1 + 600) - 1)
          {
            int v95 = v90;
            unsigned int v96 = (__int16 *)(v89 + 12LL * v90);
            if (v90 < v88) {
              unint64_t result = (unint64_t)j__memmove(v96 + 6, v96, 12 * (v88 - v90));
            }
            uint64_t v97 = v89 + 12LL * v95;
            *(_WORD *)(v97 + 6) = v77;
            *(_WORD *)(v97 + 4) = v87;
            *(_WORD *)(v97 + 8) = 0x4000;
            *(_BYTE *)(v97 + 10) = 0;
            *(_DWORD *)(a1 + 604) = v88 + 1;
            *(_DWORD *)(v89 + 12LL * (v88 + 1) + 6) = 0xFFFF;
            LODWORD(v69) = v105;
            uint64_t v71 = v106;
            int v98 = v96[4];
            int v99 = *(_DWORD *)(a1 + 696);
            int v68 = v117;
LABEL_133:
            if (v99 && *(_DWORD *)v96 != v68) {
              unint64_t result = (unint64_t)sub_100024188( *(uint64_t **)(a1 + 704),  v68,  *(_DWORD *)v96,  (unsigned __int16)v81 - (unsigned __int16)v98,  (unsigned __int16)v81 - *(_WORD *)(a1 + 736));
            }
            goto LABEL_107;
          }

          *(_DWORD *)(a1 + 548) = 3;
LABEL_68:
          __int16 v44 = v25 - 14;
          uint64_t v24 = (_OWORD *)((char *)v121 - 28);
LABEL_29:
          int v28 = v120;
          uint64_t v25 = v44;
        }

        else
        {
          int v68 = v117;
          unint64_t result = sub_10009CAD8(*(void *)(a1 + 688), v117, v57);
          if (*(_DWORD *)(a1 + 848)) {
            goto LABEL_96;
          }
LABEL_93:
          v25 -= 14;
          uint64_t v24 = (_OWORD *)((char *)v121 - 28);
          int v28 = v120;
        }
      }

      else
      {
        v25 -= 14;
      }
    }

    int v33 = (__int16)v25[12];
    if (v28)
    {
      goto LABEL_55;
    }

    unint64_t v34 = *(void *)(a1 + 712);
    uint64_t v35 = v25 - 14;
    signed __int16 v36 = v25[12];
    while (*v25 == *v35 && *((_BYTE *)v35 + 2) == 1)
    {
      v35 -= 14;
    }

    int v37 = *(__int16 *)(a1 + 744);
    if (v37 >= v36) {
      goto LABEL_54;
    }
    int v28 = 0;
    uint64_t v25 = v35;
  }

  signed __int16 v36 = v25[12];
LABEL_50:
  int v37 = *(__int16 *)(a1 + 744);
  if (v37 >= v36)
  {
LABEL_54:
    int v28 = -1227133513 * ((unint64_t)((char *)v25 - (char *)v35) >> 2);
    if (v33 <= (__int16)v37)
    {
LABEL_59:
      int v120 = v28 - 1;
      goto LABEL_60;
    }

uint64_t sub_10009F594(uint64_t a1, unsigned __int16 **a2, unint64_t *a3, uint64_t a4, void *a5)
{
  int v78 = 0;
  int v76 = 0LL;
  unint64_t v77 = 0LL;
  __int16 v9 = *a2;
  unint64_t v10 = *a3;
  uint64_t v11 = *a5;
  uint64_t result = sub_10009B1B8(*(void *)(a1 + 840), **a2, &v76, &v77, &v78);
  int v17 = *(unsigned __int16 *)(v11 + 6);
  int v18 = *v9;
  int v19 = *((unsigned __int8 *)v9 + 2);
  BOOL v20 = v17 == v18;
  if (v17 != v18)
  {
    int v22 = v78;
    BOOL v23 = v78 == v19;
    uint64_t v72 = a2;
    __int16 v73 = a3;
    if (v78 != v19)
    {
      int v26 = -1;
      __int16 v25 = -1;
      __int16 v24 = 0x4000;
      *a5 = v11;
      if (v22 == v19 && v22 != 1) {
LABEL_39:
      }
        __int16 v25 = *(_WORD *)(a1 + 812);
LABEL_40:
      BOOL v42 = v22 != 2 || v24 == 0x4000;
      if (v22 > v19)
      {
        unsigned int v43 = *((unsigned __int8 *)v9 + 2);
        if (v43 < 2)
        {
          __int16 v24 = 0x4000;
          int v26 = -1;
          __int16 v25 = -1;
          if (v43 == 1) {
            goto LABEL_80;
          }
          goto LABEL_76;
        }

        __int128 v44 = *(_OWORD *)v9;
        *(_OWORD *)(v10 + 12) = *(_OWORD *)(v9 + 6);
        *(_OWORD *)unint64_t v10 = v44;
        uint64_t result = sub_1000A0EA0(a1, 0x4000, -1, -1, v10);
        __int16 v24 = v9[3];
        __int16 v25 = v9[5];
        int v26 = *((_DWORD *)v9 + 4);
        v9 += 14;
        v10 += 28LL;
      }

      unsigned int v45 = *((unsigned __int8 *)v9 + 2);
      if (*((unsigned __int8 *)v9 - 26) - 1 == v45)
      {
        uint64_t v46 = 0LL;
        while (1)
        {
          int v47 = &v9[v46];
          __int16 v13 = (_OWORD *)(v10 + v46 * 2);
          if (v45 < 2 || *(v47 - 14) != *v47) {
            break;
          }
          __int128 v48 = *(_OWORD *)v47;
          *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(v47 + 6);
          *__int16 v13 = v48;
          uint64_t result = sub_1000A0EA0(a1, v24, v25, v26, (uint64_t)v13);
          __int16 v24 = v9[v46 + 3];
          __int16 v25 = v9[v46 + 5];
          int v26 = *(_DWORD *)&v9[v46 + 8];
          int v49 = LOBYTE(v9[v46 + 1]) - 1;
          unsigned int v45 = LOBYTE(v9[v46 + 15]);
          v46 += 14LL;
          if (v49 != v45)
          {
            __int16 v9 = (unsigned __int16 *)((char *)v9 + v46 * 2);
            uint64_t v50 = v9 - 14;
            v10 += v46 * 2;
            goto LABEL_73;
          }
        }

        uint64_t v50 = v47 - 14;
        __int16 v9 = (unsigned __int16 *)((char *)v9 + v46 * 2);
        v10 += v46 * 2;
      }

      else
      {
        uint64_t v50 = v9 - 14;
        if (*((unsigned __int8 *)v9 - 26) >= 3u)
        {
LABEL_57:
          if (v24 != 0x4000)
          {
            if ((unint64_t)(v9 - 28) <= v10)
            {
LABEL_101:
              void *v72 = v9;
              unint64_t *v73 = v10;
              goto LABEL_102;
            }

            *(_DWORD *)(v10 + 6) = 1073758208;
            *(_WORD *)(v10 + 4) = v77[*((unsigned __int8 *)v50 + 2) - 2];
            *(_WORD *)unint64_t v10 = *v50;
            *(_BYTE *)(v10 + 2) = *((_BYTE *)v50 + 2) - 1;
            uint64_t result = sub_1000A0EA0(a1, v24, v25, v26, v10);
            v10 += 28LL;
          }

void sub_10009FD5C(uint64_t a1)
{
  int v74 = 0x40000000;
  unsigned int v75 = -1;
  uint64_t v2 = *(void *)(a1 + 472);
  uint64_t v3 = *(void *)(a1 + 376);
  int v4 = *(__int16 *)(a1 + 736);
  __int16 v5 = v4 + *(_WORD *)(a1 + 742);
  int v6 = *(_DWORD *)(a1 + 820);
  if (*(_DWORD *)(a1 + 732) > v6) {
    __int16 v5 = sub_10005DDF8(*(int **)(a1 + 824), v6, v4, v5);
  }
  int v73 = 0;
  *(_WORD *)(a1 + 744) = v5;
  int v7 = *(_WORD **)(a1 + 592);
  int v8 = *(_DWORD *)(a1 + 584);
  *(_DWORD *)(a1 + 604) = v8;
  if (v8 >= 1)
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = v7 + 4;
    do
    {
      *(v10 - 1) = *(_WORD *)(*(void *)(a1 + 568) + 2 * v9);
      _WORD *v10 = 0x4000;
      v10 += 6;
      ++v9;
    }

    while (v9 < *(int *)(a1 + 584));
    int v8 = *(_DWORD *)(a1 + 604);
  }

  qsort(v7, v8, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_1000A1160);
  int v11 = *(__int16 *)(a1 + 662);
  *(_WORD *)(a1 + 738) = *(_WORD *)(a1 + 662);
  if (v11 <= *(__int16 *)(a1 + 744))
  {
    (*(void (**)(uint64_t))(a1 + 880))(a1);
    if (v2)
    {
      sub_1000D06E4( v2,  *(__int16 *)(a1 + 666),  *(_WORD *)(a1 + 812),  65534,  *(_DWORD *)(a1 + 756) + *(__int16 *)(a1 + 662),  &v73);
      if (v73)
      {
LABEL_11:
        *(_DWORD *)(a1 + 548) = 3;
        return;
      }
    }
  }

  else
  {
    *(_WORD *)(a1 + 662) = 0x4000;
    *(_WORD *)(a1 + 680) = 0x4000;
  }

  uint64_t v12 = *(void *)(a1 + 712) + 28LL * *(int *)(a1 + 732);
  uint64_t v13 = *(void *)(a1 + 720);
  __int128 v14 = *(_OWORD *)(v12 - 28);
  *(_OWORD *)(v13 - 16) = *(_OWORD *)(v12 - 16);
  *(_OWORD *)(v13 - 28) = v14;
  if (*(_DWORD *)(a1 + 732) == 1)
  {
    uint64_t v15 = *(void *)(a1 + 592);
    int v16 = *(_DWORD *)(a1 + 604);
    if (v16 < 1)
    {
      uint64_t v25 = *(void *)(a1 + 592);
    }

    else
    {
      int v17 = 0;
      int v18 = (__int16 *)(v15 + 8);
      do
      {
        if (*v18 < 0x4000)
        {
          uint64_t v19 = *((void *)v18 - 1);
          *(_DWORD *)(v15 + 8) = *(_DWORD *)v18;
          *(void *)uint64_t v15 = v19;
          v15 += 12LL;
          int v16 = *(_DWORD *)(a1 + 604);
        }

        ++v17;
        v18 += 6;
      }

      while (v17 < v16);
      uint64_t v25 = *(void *)(a1 + 592);
    }

    *(_DWORD *)(a1 + 604) = -1431655765 * ((unint64_t)(v15 - v25) >> 2);
    *(_DWORD *)(v15 + 6) = 0xFFFF;
    return;
  }

  BOOL v20 = (unsigned __int16 *)(v12 - 28);
  uint64_t v21 = (_OWORD *)(v13 - 56);
  __int16 v22 = *(_WORD *)(a1 + 744);
  else {
    __int16 v23 = *(_WORD *)(a1 + 746);
  }
  if (qword_1000FDCC0)
  {
    uint64_t v24 = *(void *)(qword_1000FDCC0 + 1696);
    if (v24 >= v23) {
      LOWORD(v24) = v23;
    }
  }

  else
  {
    LODWORD(v24) = v23 & (v23 >> 31);
  }

  __int16 v69 = v24;
  uint64_t v71 = a1 + 814;
  __int16 v72 = v23;
  int v26 = 1;
  while (1)
  {
    int v27 = (__int16)*(v20 - 2);
    v20 -= 14;
    if (v27 > v22) {
      break;
    }
LABEL_35:
    __int128 v30 = *(_OWORD *)v20;
    *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(v20 + 6);
    *uint64_t v21 = v30;
    ++v26;
    unsigned int v31 = *((unsigned __int8 *)v20 + 2);
    if (v31 >= 2)
    {
      int v32 = (__int16)v20[12];
      goto LABEL_30;
    }

    if (*((_BYTE *)v20 + 2))
    {
      int v33 = (__int16)v20[12];
      if (v33 >= *(__int16 *)(a1 + 738))
      {
        int v34 = 0;
        int v35 = (__int16)v20[3];
        int v36 = (__int16)(v20[3] - *(_WORD *)(a1 + 736));
        if (v36 > v23) {
          goto LABEL_67;
        }
      }

      else
      {
        int v34 = 0;
        *(_WORD *)(a1 + 738) = v33;
        int v35 = (__int16)v20[3];
        int v36 = (__int16)(v20[3] - *(_WORD *)(a1 + 736));
        if (v36 > v23) {
          goto LABEL_67;
        }
      }
    }

    else
    {
      int v34 = 1;
      int v35 = (__int16)v20[3];
      int v36 = (__int16)(v20[3] - *(_WORD *)(a1 + 736));
      if (v36 > v23) {
        goto LABEL_67;
      }
    }

    uint64_t v68 = v2;
    int v37 = *(_DWORD *)(a1 + 756);
    unsigned int v70 = *v20;
    unsigned int v38 = sub_1000BB868(v3, v70, 0LL);
    int v66 = sub_1000BBBB0(v3, v71, *(_DWORD *)(a1 + 816), v38);
    uint64_t v67 = v3;
    if (!*(_DWORD *)(a1 + 696) || qword_1000FDCC0 && *(_DWORD *)(qword_1000FDCC0 + 4736))
    {
      BOOL v39 = 1;
    }

    else
    {
      sub_10009D1EC(*(void *)(a1 + 688), &v75, &v74);
      BOOL v39 = v74 == 0x40000000;
    }

    int v40 = v37 + v35;
    int v41 = sub_10009C670( *(unsigned int **)(a1 + 688),  *((unsigned int *)v20 + 4),  v70,  0LL,  v34,  v36,  *(_WORD *)(a1 + 812));
    uint64_t v2 = v68;
    if (v68)
    {
      if (v36 <= v69)
      {
        __int16 v42 = v34;
        BOOL v43 = v39;
        int v44 = v26;
        int v45 = v41;
        sub_1000D06EC(v68, (__int16)v20[5], *(_WORD *)(a1 + 812), v70, v40, &v73, v42);
        int v41 = v45;
        int v26 = v44;
        BOOL v39 = v43;
        if (v73) {
          goto LABEL_11;
        }
      }
    }

    int v46 = v40 + v66;
    if (!v39)
    {
      int v47 = v75;
      if (v41 != v75)
      {
        __int16 v48 = v74;
        __int16 v49 = v74 - v46;
        if (v74 <= v46)
        {
          __int16 v49 = v46 - v74;
          __int16 v53 = v36;
          int v55 = v41;
          int v54 = v41;
        }

        else
        {
          __int16 v64 = *(_WORD *)(a1 + 736);
          int v65 = *(_DWORD *)(a1 + 756);
          int v63 = v41;
          unsigned int v50 = sub_10009D1B4(*(void *)(a1 + 688), v75);
          unsigned int v51 = sub_1000BB868(v67, v50, 0LL);
          __int16 v52 = sub_1000BBBB0(v67, v71, *(_DWORD *)(a1 + 816), v51);
          int v47 = v63;
          __int16 v53 = v48 - (v65 + v64 + v52 - v66);
          int v54 = v75;
          int v55 = v63;
        }

        sub_100024188(*(uint64_t **)(a1 + 704), v54, v47, v49, v53);
        uint64_t v2 = v68;
        int v41 = v55;
      }
    }

    uint64_t v3 = v67;
    if (!(v31 | *(_DWORD *)(a1 + 848))) {
      goto LABEL_60;
    }
    if (!v31 || !*(_DWORD *)(a1 + 852))
    {
      if (*(_DWORD *)(a1 + 544) != 1
        && (__int16)(*(_WORD *)(a1 + 736) + *(_WORD *)(a1 + 748) + v36) <= *(__int16 *)(a1 + 744))
      {
        int v56 = v41;
        (*(void (**)(uint64_t))(a1 + 888))(a1);
        int v41 = v56;
      }

      if (!v31) {
LABEL_60:
      }
        sub_10009CAD8(*(void *)(a1 + 688), v41, v46);
    }

uint64_t sub_1000A03A0(uint64_t a1, void *a2, unint64_t *a3, int a4, uint64_t *a5)
{
  int v49 = 0;
  __int16 v48 = 0LL;
  unint64_t v10 = (unsigned __int16 *)*a2;
  unint64_t v11 = *a3;
  uint64_t v12 = *a5;
  v46[1] = 0LL;
  v46[0] = 0x4000000000FF0000LL;
  int v47 = 0;
  v46[2] = 0xFFFFFFFFLL;
  uint64_t result = sub_10009B1B8(*(void *)(a1 + 840), *v10, 0LL, &v48, &v49);
  if (*v10 == a4)
  {
    int v14 = v49;
    if (v49 == *((unsigned __int8 *)v10 + 2))
    {
      int v44 = a2;
      int v45 = a3;
      __int16 v15 = *(_WORD *)(v12 + 8);
      int v16 = *(_DWORD *)v12;
      __int128 v17 = *(_OWORD *)v10;
      *(_OWORD *)(v11 + 12) = *(_OWORD *)(v10 + 6);
      *(_OWORD *)unint64_t v11 = v17;
      do
      {
        int v18 = *(unsigned __int16 *)(v12 + 20);
        v12 += 12LL;
      }

      while (v18 == 0x4000);
      *a5 = v12;
      uint64_t v19 = v10 + 14;
    }

    else
    {
      int v44 = a2;
      int v45 = a3;
      *(_DWORD *)(v11 + 6) = 1073758208;
      *(_WORD *)unint64_t v11 = a4;
      *(_BYTE *)(v11 + 2) = v14;
      unsigned __int16 v21 = v48[v14 - 1];
      *(_WORD *)(v11 + 4) = v21;
      __int16 v15 = *(_WORD *)(v12 + 8);
      int v16 = *(_DWORD *)v12;
      LOWORD(v46[0]) = a4;
      WORD2(v46[0]) = v21;
      do
      {
        int v22 = *(unsigned __int16 *)(v12 + 20);
        v12 += 12LL;
      }

      while (v22 == 0x4000);
      *a5 = v12;
      uint64_t v19 = v10;
      unint64_t v10 = (unsigned __int16 *)v46;
    }
  }

  else
  {
    int v44 = a2;
    int v45 = a3;
    __int128 v20 = *(_OWORD *)v10;
    *(_OWORD *)(v11 + 12) = *(_OWORD *)(v10 + 6);
    *(_OWORD *)unint64_t v11 = v20;
    uint64_t v19 = v10 + 14;
    __int16 v15 = 0x4000;
    int v16 = -1;
  }

  uint64_t result = sub_1000A0EA0(a1, v15, *(_WORD *)(a1 + 812), v16, v11);
  __int16 v23 = (unsigned __int16 *)(v11 + 28);
  int v24 = *((unsigned __int8 *)v10 + 2);
LABEL_12:
  uint64_t v25 = v10;
  unint64_t v10 = v19;
  if (!v24) {
    goto LABEL_34;
  }
LABEL_13:
  int v26 = (__int16)v25[3];
  if (v26 == 0x4000)
  {
LABEL_34:
    while (1)
    {
      unint64_t v11 = (unint64_t)v23;
      if (*v25 != *v10) {
        goto LABEL_35;
      }
LABEL_28:
      __int128 v35 = *(_OWORD *)v10;
      *(_OWORD *)(v11 + 12) = *(_OWORD *)(v10 + 6);
      *(_OWORD *)unint64_t v11 = v35;
      uint64_t result = sub_1000A0EA0(a1, 0x4000, 0, -1, v11);
      uint64_t v19 = v10 + 14;
      __int16 v23 = (unsigned __int16 *)(v11 + 28);
      int v24 = *((unsigned __int8 *)v10 + 2);
LABEL_29:
      if (*v10 != *v19) {
        goto LABEL_12;
      }
      uint64_t v36 = 0LL;
      do
      {
        uint64_t v25 = &v19[v36];
        unint64_t v37 = v11 + v36 * 2;
        uint64_t v38 = v11 + v36 * 2 + 28;
        int v39 = (__int16)v10[3];
        __int16 v40 = v10[5];
        int v41 = *((_DWORD *)v10 + 4);
        __int128 v42 = *(_OWORD *)&v19[v36];
        *(_OWORD *)(v37 + 40) = *(_OWORD *)&v19[v36 + 6];
        *(_OWORD *)(v37 + 28) = v42;
        uint64_t result = sub_1000A0EA0(a1, v39, v40, v41, v38);
        int v43 = LOBYTE(v19[v36 + 1]);
        if (v43 - 1 != LOBYTE(v19[v36 + 15])) {
          break;
        }
        v36 += 14LL;
        unint64_t v10 = v25;
      }

      while (*v25 == v25[14]);
      unint64_t v10 = v25 + 14;
      __int16 v23 = (unsigned __int16 *)(v37 + 56);
      unint64_t v11 = v38;
      if (v43) {
        goto LABEL_13;
      }
    }
  }

  if (v10 - 28 > v23)
  {
    __int16 v27 = v25[5];
    int v28 = *((_DWORD *)v25 + 4);
    *__int16 v23 = *v25;
    unsigned __int8 v29 = *((_BYTE *)v25 + 2) - 1;
    *(_BYTE *)(v11 + 30) = v29;
    if (v29)
    {
      *(_DWORD *)(v11 + 34) = 1073758208;
      *(_WORD *)(v11 + 32) = v48[v29 - 1];
      uint64_t result = sub_1000A0EA0(a1, v26, v27, v28, (uint64_t)v23);
    }

    else
    {
      int v30 = *(unsigned __int16 *)(a1 + 660);
      *(_WORD *)(v11 + 32) = v30;
      *(_WORD *)(v11 + 34) = 0x4000;
      int v50 = 0;
      uint64_t result = sub_100015B80(*(void *)(a1 + 384), v30, &v50);
      int v31 = *(__int16 *)(v11 + 34);
      if (v31 >= v26)
      {
        *(_WORD *)(v11 + 34) = v26;
        *(_WORD *)(v11 + 38) = v27;
        int v31 = v26;
        *(_DWORD *)(v11 + 44) = v28;
      }

      if (v31 <= *(__int16 *)(a1 + 744))
      {
        uint64_t v32 = *(unsigned __int16 *)result;
        uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v32);
        if ((_DWORD)result == 0x4000)
        {
          uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v32);
          LOWORD(v31) = *(_WORD *)(v11 + 34);
        }

        __int16 v33 = result - *(_WORD *)(a1 + 740) + v31;
        *(_WORD *)(v11 + 34) = v33;
        *(_WORD *)(v11 + 52) = v33;
        if (v33 < *(__int16 *)(a1 + 736))
        {
          *(_WORD *)(a1 + 736) = v33;
          *(_WORD *)(a1 + 808) = *(_WORD *)(v11 + 32);
          __int16 v33 = *(_WORD *)(v11 + 52);
        }

        uint64_t v34 = *(void *)(a1 + 824);
        if (*(_DWORD *)v34 > v33) {
          ++*(_WORD *)(*(void *)(v34 + 8) + 2LL * v33);
        }
      }

      else
      {
        *(_WORD *)(v11 + 52) = 0x4000;
        *(_WORD *)(v11 + 34) = 0x4000;
      }
    }

    v11 += 56LL;
    if (*v25 == *v10) {
      goto LABEL_28;
    }
LABEL_35:
    *int v44 = v10;
    *int v45 = v11;
    return result;
  }

  *int v44 = v10;
  *int v45 = (unint64_t)v23;
LABEL_37:
  *(_DWORD *)(a1 + 548) = 3;
  return result;
}

uint64_t sub_1000A07A8(uint64_t a1)
{
  *(_WORD *)(*(void *)(a1 + 592) + 12LL * *(int *)(a1 + 604) + 6) = -1;
  *(_WORD *)(*(void *)(a1 + 592) + 12LL * *(int *)(a1 + 604) + 8) = 0;
  LODWORD(v31) = 0;
  uint64_t result = sub_100015B80(*(void *)(a1 + 384), *(unsigned __int16 *)(a1 + 660), &v31);
  int v3 = *(__int16 *)(a1 + 662);
  if (v3 >= 0x4000)
  {
    int v3 = 0x4000;
    *(_WORD *)(a1 + 662) = 0x4000;
    *(_WORD *)(a1 + 666) = -1;
    *(_DWORD *)(a1 + 672) = -1;
  }

  if (v3 <= *(__int16 *)(a1 + 744))
  {
    uint64_t v4 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v4);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v4);
      LOWORD(v3) = *(_WORD *)(a1 + 662);
    }

    __int16 v5 = result - *(_WORD *)(a1 + 740) + v3;
    int v6 = v5;
    *(_WORD *)(a1 + 662) = v5;
    *(_WORD *)(a1 + 680) = v5;
    if (v5 < *(__int16 *)(a1 + 736))
    {
      *(_WORD *)(a1 + 736) = v5;
      *(_WORD *)(a1 + 808) = *(_WORD *)(a1 + 660);
    }

    uint64_t v7 = *(void *)(a1 + 824);
    if (*(_DWORD *)v7 > v6) {
      ++*(_WORD *)(*(void *)(v7 + 8) + 2LL * v6);
    }
  }

  else
  {
    *(_WORD *)(a1 + 680) = 0x4000;
    *(_WORD *)(a1 + 662) = 0x4000;
  }

  unsigned __int8 v29 = *(unsigned __int16 **)(a1 + 712);
  int v8 = &v29[14 * (*(_DWORD *)(a1 + 728) - *(_DWORD *)(a1 + 732))];
  int v30 = v8;
  uint64_t v9 = *(void *)(a1 + 592) - 12LL;
  do
  {
    int v10 = *(unsigned __int16 *)(v9 + 20);
    v9 += 12LL;
  }

  while (v10 == 0x4000);
  uint64_t v28 = v9;
  int v11 = *(unsigned __int16 *)(v9 + 6);
  int v12 = *(_DWORD *)(a1 + 612);
  int v13 = *v8;
  if (v12 >= v11 || v12 >= v13)
  {
    do
    {
      if ((unsigned __int16)v11 >= (unsigned __int16)v13)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t, unsigned __int16 **, unsigned __int16 **))(a1 + 536))( a1,  &v30,  &v29);
        if (*(_DWORD *)(a1 + 548) == 3) {
          return result;
        }
        uint64_t v9 = v28;
      }

      else
      {
        __int128 v17 = v29;
        if (*(__int16 *)(v9 + 8) - *(__int16 *)(a1 + 740) <= *(__int16 *)(a1 + 746))
        {
          if (v8 - 28 <= v29)
          {
            *(_DWORD *)(a1 + 548) = 3;
            return result;
          }

          int v31 = 0LL;
          uint64_t v32 = 0LL;
          sub_10009B1B8(*(void *)(a1 + 840), (unsigned __int16)v11, 0LL, &v31, (int *)&v32);
          char v18 = v32;
          if (*(_DWORD *)(a1 + 552)) {
            uint64_t v19 = (unsigned __int16 *)(v9 + 4);
          }
          else {
            uint64_t v19 = &v31[(int)v32 - 1];
          }
          int v20 = *v19;
          v17[3] = 0x4000;
          _BYTE v17[4] = 0x4000;
          *((_BYTE *)v17 + 2) = v18;
          *__int128 v17 = v11;
          _OWORD v17[2] = v20;
          *((_BYTE *)v17 + 3) = *(_BYTE *)(v9 + 10);
          uint64_t result = sub_100015B80(*(void *)(a1 + 384), v20, (_DWORD *)&v32 + 1);
          uint64_t v21 = SHIDWORD(v32) - 1LL;
          int v22 = &v17[v21 + 3];
          *int v22 = *(_WORD *)(v9 + 8);
          v17[v21 + 5] = *(_WORD *)(a1 + 812);
          *(_DWORD *)&v17[2 * v21 + 8] = *(_DWORD *)v9;
          int v23 = (__int16)*v22;
          if (v23 <= *(__int16 *)(a1 + 744))
          {
            uint64_t v24 = *(unsigned __int16 *)(result + 2 * v21);
            uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v24);
            if ((_DWORD)result == 0x4000)
            {
              uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v24);
              uint64_t v21 = SHIDWORD(v32) - 1LL;
              LOWORD(v23) = v17[v21 + 3];
            }

            signed __int16 v25 = result - *(_WORD *)(a1 + 740) + v23;
            v17[v21 + 3] = v25;
            v17[12] = v25;
            if (v25 < *(__int16 *)(a1 + 736))
            {
              *(_WORD *)(a1 + 736) = v25;
              *(_WORD *)(a1 + 808) = v17[2];
              signed __int16 v25 = v17[12];
            }

            uint64_t v26 = *(void *)(a1 + 824);
            if (*(_DWORD *)v26 > v25) {
              ++*(_WORD *)(*(void *)(v26 + 8) + 2LL * v25);
            }
          }

          else
          {
            v17[12] = 0x4000;
            *int v22 = 0x4000;
          }

          v17 += 14;
          uint64_t v9 = v28;
        }

        unsigned __int8 v29 = v17;
        do
        {
          int v27 = *(unsigned __int16 *)(v9 + 20);
          v9 += 12LL;
        }

        while (v27 == 0x4000);
        uint64_t v28 = v9;
      }

      int v8 = v30;
      int v11 = *(unsigned __int16 *)(v9 + 6);
      int v15 = *(_DWORD *)(a1 + 612);
      int v13 = *v30;
    }

    while (v15 >= v11 || v15 >= v13);
  }

  *unsigned __int8 v29 = -1;
  *(_DWORD *)(a1 + 732) = -1227133513 * (((unint64_t)v29 - *(void *)(a1 + 712) + 28) >> 2);
  return result;
}

uint64_t sub_1000A0B5C(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  int v7 = a5;
  uint64_t v11 = a1;
  uint64_t v12 = *(void *)(a1 + 592);
  int v13 = *(_DWORD *)(a1 + 604);
  int v14 = 0;
  BOOL v15 = __OFSUB__(v13, 1);
  int v16 = v13 - 1;
  if (v16 < 0 == v15)
  {
    do
    {
      int v17 = v16 + v14;
      if (v16 + v14 < 0 != __OFADD__(v16, v14)) {
        ++v17;
      }
      int v18 = v17 >> 1;
      else {
        int v14 = v18 + 1;
      }
    }

    while (v14 <= v16);
  }

  if (a5 < 1) {
    return 1LL;
  }
  uint64_t v19 = (int *)(v12 + 12LL * v14);
  int v20 = &word_1000FDD20;
  while (1)
  {
    uint64_t v21 = v7;
    int v22 = *(_DWORD *)(v11 + 604);
    int v23 = v22 - v14;
    if (v22 <= v14) {
      break;
    }
    uint64_t v24 = (char *)v19 + 6;
    unsigned int v25 = *((unsigned __int16 *)v19 + 2);
    unsigned int v26 = (unsigned __int16)*v20;
    if (v25 < v26)
    {
LABEL_12:
      ++v14;
      v19 += 3;
      if (v7 <= 0) {
        return 1LL;
      }
    }

    else
    {
      if (v25 <= v26)
      {
        int v35 = *((__int16 *)v19 + 4);
        int v36 = *(_DWORD *)(v11 + 696);
        if (v35 <= a3)
        {
          if (v36 && *v19 != a4)
          {
            sub_100024188(*(uint64_t **)(v11 + 704), a4, *v19, a3 - v35, a3 - *(_WORD *)(v11 + 736));
            uint64_t v11 = a1;
          }
        }

        else
        {
          if (v36 && v35 != 0x4000 && *v19 != a4)
          {
            sub_100024188(*(uint64_t **)(v11 + 704), *v19, a4, v35 - a3, v35 - *(_WORD *)(v11 + 736));
            uint64_t v11 = a1;
          }

          *((_WORD *)v19 + 4) = a3;
          *uint64_t v19 = a4;
        }

        --v7;
        ++v20;
        goto LABEL_12;
      }

      BOOL v27 = v7 >= 2;
      int v46 = v7;
      uint64_t v28 = 1LL;
      if (v27)
      {
        while (v25 > (unsigned __int16)v20[v28])
        {
          if (v21 == ++v28)
          {
            LODWORD(v28) = v21;
            break;
          }
        }
      }

      uint64_t v45 = *(void *)(v11 + 592);
      unsigned __int8 v29 = &v19[3 * v28];
      j__memmove(v29, v19, 12 * v23);
      uint64_t v30 = v28;
      int v31 = v20;
      uint64_t v32 = v28;
      do
      {
        *(_WORD *)uint64_t v24 = a2;
        *((_WORD *)v24 - 1) = *v31;
        *((_WORD *)v24 + 1) = a3;
        *(_DWORD *)(v24 - 6) = a4;
        int v33 = (unsigned __int16)*v31++;
        v24[4] = v33 == a6;
        v24 += 12;
        --v32;
      }

      while (v32);
      uint64_t v11 = a1;
      int v34 = *(_DWORD *)(a1 + 604) + v28;
      *(_DWORD *)(a1 + 604) = v34;
      *(_WORD *)(v45 + 12LL * v34 + 6) = -1;
      *(_WORD *)(v45 + 12LL * *(int *)(a1 + 604) + 8) = 0;
      v14 += v28;
      int v7 = v46 - v28;
      v20 += v30;
      uint64_t v19 = v29;
      if (v7 <= 0) {
        return 1LL;
      }
    }
  }

  if (v22 + v7 >= *(_DWORD *)(v11 + 600))
  {
LABEL_40:
    uint64_t result = 0LL;
    *(_DWORD *)(v11 + 548) = 3;
    return result;
  }

  unsigned int v37 = v7;
  uint64_t v38 = *(void *)(v11 + 592);
  unsigned int v39 = v37;
  j__memmove(&v19[3 * v37], v19, 12 * v23);
  __int16 v40 = (char *)v19 + 6;
  do
  {
    *(_WORD *)__int16 v40 = a2;
    *((_WORD *)v40 - 1) = *v20;
    *((_WORD *)v40 + 1) = a3;
    *(_DWORD *)(v40 - 6) = a4;
    int v41 = (unsigned __int16)*v20++;
    v40[4] = v41 == a6;
    v40 += 12;
    --v21;
  }

  while (v21);
  unsigned int v42 = *(_DWORD *)(a1 + 604) + v39;
  *(_DWORD *)(a1 + 604) = v42;
  *(_WORD *)(v38 + 12LL * (int)v42 + 6) = -1;
  *(_WORD *)(v38 + 12LL * *(int *)(a1 + 604) + 8) = 0;
  return 1LL;
}

uint64_t sub_1000A0EA0(uint64_t a1, int a2, __int16 a3, int a4, uint64_t a5)
{
  int v10 = *(unsigned __int16 *)(a5 + 4);
  if (v10 != *(unsigned __int16 *)(a1 + 660))
  {
    uint64_t result = sub_100015BAC(*(void *)(a1 + 384), v10);
    uint64_t v13 = result;
    int v14 = *(__int16 *)(a5 + 8);
    int v15 = *(__int16 *)(a5 + 6);
    if (v14 <= v15)
    {
      *(_WORD *)(a5 + 6) = *(_WORD *)(a5 + 8);
      *(_WORD *)(a5 + 10) = *(_WORD *)(a5 + 12);
      *(_DWORD *)(a5 + 16) = *(_DWORD *)(a5 + 20);
      int v15 = v14;
    }

    if (v15 <= *(__int16 *)(a1 + 744))
    {
      uint64_t v20 = *(unsigned __int16 *)result;
      uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v20);
      if ((_DWORD)result == 0x4000)
      {
        uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v20);
        LOWORD(v15) = *(_WORD *)(a5 + 6);
        LOWORD(v14) = *(_WORD *)(a5 + 8);
      }

      __int16 v16 = result - *(_WORD *)(a1 + 740) + v15;
      *(_WORD *)(a5 + 6) = v16;
      *(_WORD *)(a5 + 24) = v16;
      if (a2 > (__int16)v14)
      {
LABEL_22:
        if (*(__int16 *)(a1 + 744) >= (__int16)v14)
        {
          uint64_t v21 = *(unsigned __int16 *)(v13 + 2);
          uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v21);
          if ((_DWORD)result == 0x4000)
          {
            uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v21);
            LOWORD(v14) = *(_WORD *)(a5 + 8);
            __int16 v16 = *(_WORD *)(a5 + 24);
          }

          __int16 v22 = result - *(_WORD *)(a1 + 740) + v14;
          *(_WORD *)(a5 + 8) = v22;
          if (v22 < v16)
          {
            *(_WORD *)(a5 + 24) = v22;
            __int16 v16 = v22;
          }

          else if (*(__int16 *)(a1 + 736) > v16)
          {
            goto LABEL_32;
          }
        }

        else
        {
          *(_WORD *)(a5 + 8) = 0x4000;
          if (*(__int16 *)(a1 + 736) > v16)
          {
LABEL_32:
            *(_WORD *)(a1 + 736) = v16;
            *(_WORD *)(a1 + 808) = *(_WORD *)(a5 + 4);
            __int16 v16 = *(_WORD *)(a5 + 24);
            uint64_t v23 = *(void *)(a1 + 824);
            if (*(_DWORD *)v23 <= v16) {
              return result;
            }
LABEL_33:
            ++*(_WORD *)(*(void *)(v23 + 8) + 2LL * v16);
            return result;
          }
        }

        uint64_t v23 = *(void *)(a1 + 824);
        if (*(_DWORD *)v23 <= v16) {
          return result;
        }
        goto LABEL_33;
      }
    }

    else
    {
      __int16 v16 = 0x4000;
      *(_WORD *)(a5 + 24) = 0x4000;
      *(_WORD *)(a5 + 6) = 0x4000;
    }

    *(_WORD *)(a5 + 8) = a2;
    *(_WORD *)(a5 + 12) = a3;
    LOWORD(v14) = a2;
    *(_DWORD *)(a5 + 20) = a4;
    goto LABEL_22;
  }

  int v24 = 0;
  uint64_t result = sub_100015B80(*(void *)(a1 + 384), v10, &v24);
  int v12 = *(__int16 *)(a5 + 6);
  if (v12 >= a2)
  {
    *(_WORD *)(a5 + 6) = a2;
    *(_WORD *)(a5 + 10) = a3;
    int v12 = a2;
    *(_DWORD *)(a5 + 16) = a4;
  }

  if (v12 <= *(__int16 *)(a1 + 744))
  {
    uint64_t v17 = *(unsigned __int16 *)result;
    uint64_t result = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 384) + 1792LL) + 2 * v17);
    if ((_DWORD)result == 0x4000)
    {
      uint64_t result = sub_100015BC0(*(void *)(a1 + 384), v17);
      LOWORD(v12) = *(_WORD *)(a5 + 6);
    }

    __int16 v18 = result - *(_WORD *)(a1 + 740) + v12;
    *(_WORD *)(a5 + 6) = v18;
    *(_WORD *)(a5 + 24) = v18;
    if (v18 < *(__int16 *)(a1 + 736))
    {
      *(_WORD *)(a1 + 736) = v18;
      *(_WORD *)(a1 + 808) = *(_WORD *)(a5 + 4);
      __int16 v18 = *(_WORD *)(a5 + 24);
    }

    uint64_t v19 = *(void *)(a1 + 824);
    if (*(_DWORD *)v19 > v18) {
      ++*(_WORD *)(*(void *)(v19 + 8) + 2LL * v18);
    }
  }

  else
  {
    *(_WORD *)(a5 + 24) = 0x4000;
    *(_WORD *)(a5 + 6) = 0x4000;
  }

  return result;
}

uint64_t sub_1000A1160(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a1 + 6) - *(unsigned __int16 *)(a2 + 6);
}

uint64_t sub_1000A1170(uint64_t a1)
{
  uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 128));
  *(void *)a1 = result;
  if (result)
  {
    uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 108) + 4);
    *(void *)(a1 + 8) = result;
    if (result)
    {
      uint64_t result = sub_1000C1074(4LL * (*(_DWORD *)(a1 + 108) / 2 + 1));
      *(void *)(a1 + 16) = result;
      if (result)
      {
        uint64_t result = sub_1000C1074(2LL * *(int *)(a1 + 112));
        *(void *)(a1 + 24) = result;
        if (result)
        {
          uint64_t v3 = sub_1000C1074(2LL * *(int *)(a1 + 124));
          *(void *)(a1 + 32) = v3;
          return v3 != 0;
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000A1208(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_100094084(*(void *)(result + 88));
    sub_100037F0C(v1[10]);
    sub_10007BEBC(v1[9]);
    sub_1000CFAD0(v1[8]);
    sub_100006EFC(v1[7]);
    sub_100058FEC(v1[6]);
    sub_10005D430(v1[5]);
    sub_1000C0EF8(v1[4]);
    v1[4] = 0LL;
    sub_1000C0EF8(v1[3]);
    v1[3] = 0LL;
    sub_1000C0EF8(v1[2]);
    v1[2] = 0LL;
    sub_1000C0EF8(v1[1]);
    v1[1] = 0LL;
    sub_1000C0EF8(*v1);
    *uint64_t v1 = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_1000A12A4( uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10 = sub_1000BCAE8(a1, "bsc0", a2, a4, a5, a6, a7, a8);
  if (!v10) {
    return 0LL;
  }
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = sub_1000C1074(160LL);
  uint64_t v13 = v12;
  if (v12)
  {
    if (sub_1000BCD38(v11, (void *)(v12 + 96))
      && sub_1000BCD38(v11, (void *)(v13 + 100))
      && sub_1000BCD38(v11, (void *)(v13 + 104))
      && sub_1000BCD38(v11, (void *)(v13 + 128))
      && sub_1000BCD38(v11, (void *)(v13 + 108))
      && sub_1000BCCEC(v11, (_DWORD *)(v13 + 132))
      && sub_1000BCD38(v11, (void *)(v13 + 116))
      && sub_1000BCD38(v11, (void *)(v13 + 120))
      && sub_1000BCD38(v11, (void *)(v13 + 112))
      && sub_1000BCD38(v11, (void *)(v13 + 124))
      && sub_1000BCCEC(v11, (_DWORD *)(v13 + 136)))
    {
      BOOL v14 = sub_1000BCCEC(v11, (_DWORD *)(v13 + 140));
      sub_1000BCBC8(v11);
      *(_DWORD *)(v13 + 148) = 0;
      if (v14)
      {
        if (sub_1000A1170(v13))
        {
          uint64_t v21 = sub_10005DC1C(a1, a2, v15, v16, v17, v18, v19, v20);
          *(void *)(v13 + 40) = v21;
          if (v21)
          {
            uint64_t v28 = sub_100059444(a1, a2, v22, v23, v24, v25, v26, v27);
            *(void *)(v13 + 48) = v28;
            if (v28)
            {
              int v35 = sub_10007C648(a1, a2, v29, v30, v31, v32, v33, v34);
              *(void *)(v13 + 72) = v35;
              if (v35)
              {
                unsigned int v42 = sub_100038210(a1, a2, v36, v37, v38, v39, v40, v41);
                *(void *)(v13 + 80) = v42;
                if (v42)
                {
                  *(void *)(v13 + 56) = sub_10007B7D8(*(_DWORD *)(v13 + 108));
                  *(void *)(v13 + 64) = sub_1000CF960(*(_DWORD *)(v13 + 96), *(_DWORD *)(v13 + 108));
                  *(void *)(v13 + 88) = sub_100093F04(*(_DWORD *)(v13 + 96), *(_DWORD *)(v13 + 100));
                  return v13;
                }
              }
            }
          }
        }
      }
    }

    else
    {
      sub_1000BCBC8(v11);
      *(_DWORD *)(v13 + 148) = 0;
    }

    sub_1000A1208(v13);
    return 0LL;
  }

  return v13;
}

uint64_t sub_1000A1484(uint64_t a1)
{
  return sub_1000940B4(*(void *)(a1 + 88));
}

uint64_t sub_1000A148C(uint64_t a1)
{
  *(_WORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 3;
  sub_10007BF10(*(void *)(a1 + 72));
  return sub_100094128(*(void *)(a1 + 88));
}

uint64_t sub_1000A14DC(uint64_t a1, __int16 *a2, void *a3, _BYTE *a4)
{
  uint64_t v8 = *(unsigned int *)(a1 + 152);
  *a4 = 0;
  uint64_t v9 = *(int16x8_t **)a1;
  uint64_t v10 = *(int *)(a1 + 100);
  size_t v11 = *(_DWORD *)(a1 + 128) - (int)v10;
  j__memmove(*(void **)a1, (const void *)(*(void *)a1 + 2 * v10), v11 * 2);
  uint64_t v12 = *(unsigned int *)(a1 + 100);
  uint64_t v13 = &v9->i16[v11];
  if (*(_DWORD *)(a1 + 136))
  {
    size_t v14 = 2 * v12;
    memcpy(v13, a2, 2 * v12);
    if (!*(_DWORD *)(a1 + 144)) {
      memcpy(v9, a2, v14);
    }
  }

  else if ((_DWORD)v12)
  {
    int v15 = 0;
    int v16 = 0;
    __int16 v17 = *(_WORD *)(a1 + 148);
    do
    {
      int v18 = *a2++;
      int v19 = v18 - v17;
      __int16 v17 = v18;
      if (v19 <= -16383) {
        int v20 = -16383;
      }
      else {
        int v20 = v19;
      }
      if (v20 >= 0x3FFF) {
        int v20 = 0x3FFF;
      }
      if (v15 > 30 && v20 == 0) {
        int v16 = 1;
      }
      if (v20) {
        int v15 = 0;
      }
      else {
        ++v15;
      }
      *v13++ = v20;
      LODWORD(v12) = v12 - 1;
    }

    while ((_DWORD)v12);
    *(_WORD *)(a1 + 148) = v17;
    if (v16)
    {
      j__memmove(a3, *(const void **)(a1 + 32), 2LL * *(int *)(a1 + 124));
      return *(unsigned int *)(a1 + 152);
    }
  }

  int v22 = *(_DWORD *)(a1 + 144) + 1;
  int v23 = *(_DWORD *)(a1 + 104);
  if (v22 * *(_DWORD *)(a1 + 100) >= v23 || *(_DWORD *)(a1 + 136))
  {
    if (v23)
    {
      unsigned int v24 = 0;
      char v25 = 0;
      uint64_t v26 = *(unsigned int *)(a1 + 104);
      uint64_t v27 = v9;
      do
      {
        int v28 = v27->i16[0];
        uint64_t v27 = (int16x8_t *)((char *)v27 + 2);
        v24 += (v28 * v28) >> v25;
        if (v24 >> 30)
        {
          v25 += 2;
          v24 >>= 2;
        }

        --v26;
      }

      while (v26);
    }

    else
    {
      char v25 = 0;
      unsigned int v24 = 0;
    }

    *(_WORD *)(a1 + 150) = sub_10007BD9C((v24 / (unsigned __int16)*(_DWORD *)(a1 + 104)) << v25);
    int v29 = sub_10005D464(*(unsigned int **)(a1 + 40), v9, *(void *)(a1 + 8));
    int v30 = sub_10005902C(*(int **)(a1 + 48), *(_WORD **)(a1 + 8));
    sub_10007B880(*(_DWORD **)(a1 + 56), *(const __int16 **)(a1 + 8), *(void *)(a1 + 16), v31);
    sub_1000CFEEC(*(char **)(a1 + 64), *(char **)(a1 + 16));
    if (*(_DWORD *)(a1 + 136))
    {
      uint64_t v36 = *(int **)(a1 + 72);
      uint64_t v37 = (v30 + 2 * (v29 - v30) + 1);
    }

    else
    {
      uint64_t v36 = *(int **)(a1 + 72);
      uint64_t v37 = (v29 - v30);
      if (*(_DWORD *)(a1 + 140)) {
        uint64_t v37 = (2 * v37);
      }
    }

    sub_10007BF24(v36, v37, *(void *)(a1 + 16), *(int16x4_t **)(a1 + 24), v32, v33, v34, v35);
    sub_100037F40(*(void *)(a1 + 80), *(int16x8_t **)(a1 + 24), *(_WORD **)(a1 + 32));
    j__memmove(a3, *(const void **)(a1 + 32), 2LL * *(int *)(a1 + 124));
    char v38 = sub_100094190(*(void *)(a1 + 88), **(__int16 **)(a1 + 32));
    *a4 = v38;
    if ((v38 & 2) != 0) {
      uint64_t v8 = 5LL;
    }
    else {
      uint64_t v8 = 6LL;
    }
    int v22 = *(_DWORD *)(a1 + 144) + 1;
  }

  *(_DWORD *)(a1 + 144) = v22;
  *(_DWORD *)(a1 + 152) = v8;
  return v8;
}

uint64_t sub_1000A174C(uint64_t a1, const void *a2, int a3, void *a4, _BYTE *a5)
{
  *a5 = 0;
  if (a3 >= 0xFFFF) {
    int v8 = 0xFFFF;
  }
  else {
    int v8 = a3;
  }
  *(_WORD *)(a1 + 150) = v8 & ~(unsigned __int16)(v8 >> 31);
  j__memmove(*(void **)(a1 + 32), a2, 2LL * *(int *)(a1 + 124));
  j__memmove(a4, *(const void **)(a1 + 32), 2LL * *(int *)(a1 + 124));
  char v9 = sub_100094190(*(void *)(a1 + 88), **(__int16 **)(a1 + 32));
  *a5 = v9;
  if ((v9 & 2) != 0) {
    uint64_t result = 5LL;
  }
  else {
    uint64_t result = 6LL;
  }
  ++*(_DWORD *)(a1 + 144);
  return result;
}

uint64_t sub_1000A17E0(uint64_t a1, int a2)
{
  return sub_100094190(*(void *)(a1 + 88), a2);
}

uint64_t sub_1000A17E8(uint64_t a1)
{
  return sub_1000CFB18(*(void *)(a1 + 64));
}

uint64_t sub_1000A17F0(uint64_t a1)
{
  return sub_100025C94(*(unsigned int **)(a1 + 64));
}

uint64_t sub_1000A17F8(uint64_t a1, int a2)
{
  return sub_1000CFB50(*(void *)(a1 + 64), a2);
}

uint64_t sub_1000A1800(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_1000A1808(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 150);
}

uint64_t sub_1000A1810(uint64_t a1, _WORD *a2)
{
  return sub_10009429C(*(void *)(a1 + 88), a2);
}

uint64_t sub_1000A1818(uint64_t a1, _WORD *a2)
{
  return sub_1000942B0(*(void *)(a1 + 88), a2);
}

_DWORD *sub_1000A1820(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  return sub_10007C608(*(_DWORD **)(a1 + 72), a2, a3, a4);
}

_DWORD *sub_1000A1828(uint64_t a1, int a2, int a3, int a4)
{
  return sub_10007C638(*(_DWORD **)(a1 + 72), a2, a3, a4);
}

uint64_t sub_1000A1830(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_1000C1074(160LL);
  if (result)
  {
    *(void *)(result + 112) = a1;
    *(void *)(result + 120) = a2;
    *(_DWORD *)(result + 128) = a3;
    *(_DWORD *)uint64_t result = 0;
  }

  return result;
}

uint64_t sub_1000A1878( uint64_t a1, uint64_t *a2, int a3, int a4, int a5, unsigned __int16 *a6, _WORD *a7, int a8, _WORD *a9, _WORD *a10, uint64_t a11, _DWORD *a12)
{
  __int16 v16 = sub_100004688(a1);
  int v17 = sub_1000B32A0(a2);
  char v25 = (unsigned __int16 *)sub_1000CAF58(2LL * (v17 + 1), v18, v19, v20, v21, v22, v23, v24);
  uint64_t v85 = 2LL * (v17 + 1);
  __int16 v87 = (unsigned __int16 *)sub_1000CAF58(v85, v26, v27, v28, v29, v30, v31, v32);
  uint64_t v84 = 2LL * v17;
  uint64_t v40 = (_WORD *)sub_1000CAF58(v84, v33, v34, v35, v36, v37, v38, v39);
  uint64_t v89 = a2;
  int v90 = a6;
  int v88 = v25;
  int v43 = sub_1000B9044(a2, *a6, v25);
  uint64_t v102 = a7;
  *a7 = 0;
  int v86 = a4;
  if (!a4)
  {
    uint64_t v44 = 0LL;
    v105[0] = 0;
    unsigned int v45 = a5;
    unint64_t v46 = (a5 - 1);
    if (a5 < 1) {
      goto LABEL_58;
    }
    goto LABEL_5;
  }

  *a9 = v16;
  *a10 = -1;
  uint64_t v44 = 1LL;
  v105[0] = 0;
  unsigned int v45 = a5;
  unint64_t v46 = (a5 - 1);
  if (a5 >= 1)
  {
LABEL_5:
    unint64_t v47 = 0LL;
    unsigned int v48 = 0;
    uint64_t v96 = 0LL;
    int v95 = -1;
    int v50 = v87;
    int v49 = v88;
    uint64_t v92 = v45;
    unint64_t v93 = v46;
    __int16 v91 = v16;
    do
    {
      unsigned int v51 = v49;
      if (v47 != v46) {
        int v95 = sub_1000B9044(v89, v90[v47 + 1], v50);
      }
      if (a3)
      {
        if (v47 >= v46 || *(_BYTE *)(a11 + v47)) {
          LOWORD(v96) = 0;
        }
        else {
          LOWORD(v96) = *v50;
        }
      }

      sub_1000059CC(a1, v51, v43, v40, WORD2(v96), (unsigned __int16)v96, v41, v42);
      uint64_t v97 = v50;
      unint64_t v98 = v47;
      int v94 = v43 - 1;
      if (v43 >= 1)
      {
        uint64_t v52 = 0LL;
        uint64_t v53 = v43;
        int16x8_t v101 = vdupq_n_s16(v48);
        while (1)
        {
          uint64_t v54 = v52;
          int v55 = (const void *)sub_100015B80(a1, (unsigned __int16)v40[v52], v105);
          unsigned int v56 = v105[0];
          uint64_t v57 = v105[0] + v44;
          if ((int)v57 < a8)
          {
            uint64_t v58 = v105[0];
            memcpy(&a9[(int)v44], v55, 2LL * (int)v105[0]);
            if ((int)v58 >= 1)
            {
              if (v56 >= 0x10)
              {
                uint64_t v59 = 0LL;
                uint64_t v60 = &v51[v54];
                unint64_t v61 = (unint64_t)&v51[v54 + 1];
                uint64_t v62 = (int)v44;
                uint64_t v63 = (int)v44 + v58;
                __int16 v64 = &a10[v63];
                unint64_t v65 = (unint64_t)&v102[v62];
                BOOL v66 = (unint64_t)&a10[v62] >= v61 || v60 >= v64;
                char v67 = !v66;
                BOOL v66 = v65 >= v61;
                uint64_t v68 = &v102[v63];
                char v70 = !v66 && v60 < v68;
                if ((v65 >= (unint64_t)v64 || &a10[v62] >= v68) && (v67 & 1) == 0 && (v70 & 1) == 0)
                {
                  uint64_t v59 = v58 & 0x7FFFFFF0;
                  __int16 v72 = (const __int16 *)&v51[v52];
                  int16x8_t v73 = vld1q_dup_s16(v72);
                  int v74 = (int16x8_t *)&v102[v62 + 8];
                  unsigned int v75 = (int16x8_t *)&a10[v62 + 8];
                  uint64_t v76 = v58 & 0xFFFFFFF0;
                  do
                  {
                    v74[-1] = v73;
                    int16x8_t *v74 = v73;
                    v74 += 2;
                    v75[-1] = v101;
                    int16x8_t *v75 = v101;
                    v75 += 2;
                    v76 -= 16LL;
                  }

                  while (v76);
                  if (v59 == v58) {
                    goto LABEL_16;
                  }
                }
              }

              else
              {
                uint64_t v59 = 0LL;
              }

              uint64_t v77 = v59 + (int)v44;
              int v78 = &a10[v77];
              int v79 = &v102[v77];
              uint64_t v80 = v58 - v59;
              do
              {
                *v78++ = v48;
                *v79++ = v51[v52];
                --v80;
              }

              while (v80);
            }
          }

uint64_t sub_1000A1CDC( uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, unsigned __int16 *a8, int32x4_t a9, double a10, int32x4_t a11, int32x4_t a12, int8x16_t a13, int8x16_t a14, int a15, unsigned __int16 *a16, int a17, _WORD *a18, _WORD *a19, uint64_t a20, int *a21, uint64_t a22)
{
  if ((*(_DWORD *)a1 - 1) <= 5)
  {
    uint64_t v30 = *(__int16 **)(a1 + 56);
    if (*(_DWORD *)(a1 + 40) && *(v30 - 1) < *v30) {
      --v30;
    }
    if (*(_DWORD *)a1 != 3 && *v30 != 0x4000)
    {
      *(_DWORD *)a1 = 0;
      sub_1000C0EF8(*(void *)(a1 + 80));
      *(void *)(a1 + 80) = 0LL;
      sub_1000C0EF8(*(void *)(a1 + 48));
      *(void *)(a1 + 48) = 0LL;
      if (a2 <= 1) {
        goto LABEL_32;
      }
      goto LABEL_13;
    }

    uint64_t v31 = *(void *)(a1 + 80);
    if (v31)
    {
      sub_1000C0EF8(v31);
      *(void *)(a1 + 80) = 0LL;
    }

    uint64_t v32 = *(void *)(a1 + 48);
    if (v32)
    {
      sub_1000C0EF8(v32);
      *(void *)(a1 + 48) = 0LL;
    }

    *(_DWORD *)a1 = 0;
  }

  if (a2 <= 1) {
    goto LABEL_32;
  }
LABEL_13:
  int v33 = a17;
  sub_100005EFC(*(void *)(a1 + 112), a9, a10, a11, a12, a13, a14);
  int v63 = 0;
  if (!a6)
  {
    int v62 = a5;
    uint64_t v34 = *(void *)(a1 + 112);
    if (a8)
    {
      uint64_t result = sub_1000A1878(v34, *(uint64_t **)(a1 + 120), a3, a5, a7, a8, a16, a17, a18, a19, a22, &v63);
      if ((_DWORD)result) {
        goto LABEL_18;
      }
LABEL_47:
      *(_DWORD *)a1 = 0;
      return result;
    }

    uint64_t v39 = a15;
    __int16 v40 = sub_100004688(*(void *)(a1 + 112));
    __int16 v58 = v40;
    if (a5)
    {
      *a18 = v40;
      *a19 = -1;
      int v48 = 1;
    }

    else
    {
      int v48 = 0;
    }

    int v64 = 0;
    int v49 = (_WORD *)sub_1000CAF58(2LL * a15, v41, v42, v43, v44, v45, v46, v47);
    sub_1000059CC(v34, a16, a15, v49, 0LL, 0LL, v50, v51);
    int v61 = a4;
    uint64_t v59 = v49;
    uint64_t v60 = 2LL * a15;
    if (a15 < 1)
    {
      int v56 = v48;
    }

    else
    {
      uint64_t v52 = v49;
      do
      {
        int v53 = *v52++;
        uint64_t v54 = (const void *)sub_100015B80(v34, v53, &v64);
        int v55 = v64;
        int v56 = v64 + v48;
        if (v64 + v48 < a17)
        {
          memcpy(&a18[v48], v54, 2LL * v64);
          if (v55 >= 1) {
            bzero(&a19[v48], 2LL * v55);
          }
        }

        int v48 = v56;
        --v39;
      }

      while (v39);
    }

    if (v62)
    {
      a4 = v61;
      if (v56 >= a17)
      {
        uint64_t result = 0LL;
        goto LABEL_47;
      }

      uint64_t v57 = v56;
      a18[v57] = v58;
      a19[v57] = -1;
      sub_1000CB038(v59, v60);
      int v63 = v56 + 1;
    }

    else
    {
      a4 = v61;
      sub_1000CB038(v59, v60);
      int v63 = v56;
    }

uint64_t sub_1000A20A0(uint64_t a1, int a2, int *a3)
{
  uint64_t v4 = *(__int16 **)(a1 + 56);
  int v5 = *(_DWORD *)(a1 + 40);
  if (v5)
  {
    int v5 = *(v4 - 1) < *v4;
    if (*(v4 - 1) < *v4) {
      --v4;
    }
  }

  if (*(_DWORD *)a1 == 3 || *v4 == 0x4000)
  {
    uint64_t v6 = *(void *)(a1 + 80);
    if (v6)
    {
      sub_1000C0EF8(v6);
      *(void *)(a1 + 80) = 0LL;
    }

    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      sub_1000C0EF8(v7);
      *(void *)(a1 + 48) = 0LL;
    }

    *(_DWORD *)a1 = 0;
    return 3LL;
  }

  else
  {
    if (a2)
    {
      *(_DWORD *)a1 = 0;
      int v9 = 0x40000000;
    }

    else
    {
      uint64_t v10 = *(int *)(a1 + 152);
      int v11 = *(__int16 *)(a1 + 4);
      uint64_t v12 = *(int *)(a1 + 8);
      if (v5) {
        uint64_t v13 = -v10;
      }
      else {
        uint64_t v13 = 0LL;
      }
      int v15 = *(_WORD **)(a1 + 72);
      uint64_t v14 = *(void *)(a1 + 80);
      *(_DWORD *)(a1 + 132) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      if (v11 < 1)
      {
        __int16 v18 = 0;
      }

      else
      {
        int v16 = 0;
        int v17 = 0;
        __int16 v18 = 0;
        uint64_t v19 = v14 + (v12 - 1) * v10 + v13;
        do
        {
          if ((byte_1000F166C[v16] & *(_BYTE *)(v19 + *(int *)(a1 + 132))) != 0)
          {
            *v15++ = v17 - v18;
            int v16 = *(_DWORD *)(a1 + 136);
            __int16 v18 = v17;
          }

          *(_DWORD *)(a1 + 136) = ++v16;
          if (v16 == 8)
          {
            int v16 = 0;
            *(void *)(a1 + 132) = (*(_DWORD *)(a1 + 132) + 1);
          }

          ++v17;
        }

        while (v11 != v17);
      }

      *int v15 = v11 - v18;
      if (v5) {
        v15[1] = 0;
      }
      *(_DWORD *)a1 = 0;
      int v9 = *(_DWORD *)(a1 + 68) + *v4;
    }

    *a3 = v9;
    sub_1000C0EF8(*(void *)(a1 + 80));
    *(void *)(a1 + 80) = 0LL;
    sub_1000C0EF8(*(void *)(a1 + 48));
    uint64_t result = 0LL;
    *(void *)(a1 + 48) = 0LL;
  }

  return result;
}

uint64_t sub_1000A221C( uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, int32x4_t a5, double a6, int32x4_t a7, int32x4_t a8, int8x16_t a9, int8x16_t a10)
{
  int v19 = 0;
  sub_100006F08(*(void *)(a1 + 112), a2, a3, a4, *(_WORD *)(a1 + 4), 0, a5, a6, a7, a8, a9, a10);
  uint64_t v17 = sub_10000711C(*(void *)(a1 + 112), 0LL, v11, v12, v13, v14, v15, v16);
  sub_1000070E0(*(void *)(a1 + 112), *(__int16 *)(a1 + 4), &v19);
  return v17;
}

uint64_t sub_1000A227C( uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, int32x4_t a5, double a6, int32x4_t a7, int32x4_t a8, int8x16_t a9, int8x16_t a10)
{
  int v36 = 0;
  if (*(_DWORD *)a1 == 3) {
    return 3LL;
  }
  int v12 = *(__int16 *)(a1 + 4);
  if (*(_DWORD *)(a1 + 148) <= v12) {
    goto LABEL_32;
  }
  size_t __n = *(int *)(a1 + 152);
  sub_100006F08(*(void *)(a1 + 112), a2, a3, a4, v12, 0, a5, a6, a7, a8, a9, a10);
  int v13 = *(__int16 *)(a1 + 64);
  *(_DWORD *)(a1 + 68) += v13;
  *(_WORD *)(a1 + 64) = 0x4000;
  __int16 v14 = qword_1000FDCC0;
  if (qword_1000FDCC0) {
    __int16 v14 = *(_WORD *)(qword_1000FDCC0 + 968);
  }
  uint64_t v16 = *(int *)(a1 + 32);
  uint64_t v15 = *(int *)(a1 + 36);
  uint64_t v17 = 0LL;
  __int16 v35 = v13;
  int v18 = (__int16)(v14 + v13);
  int v19 = *(char **)(a1 + 88);
  uint64_t v20 = (__int16 *)(*(void *)(a1 + 48) + 2 * v15);
  int v21 = -1;
  int v22 = -1;
  do
  {
    while (1)
    {
      int v24 = *v20;
      if (v15 > v16)
      {
        int v25 = *(v20 - 1);
        if (v25 < v24)
        {
          *uint64_t v20 = v25;
          memcpy(v19, &v19[-__n], __n);
          v19[*(int *)(a1 + 132)] |= byte_1000F166C[*(int *)(a1 + 136)];
          LOWORD(v24) = *v20;
        }
      }

      *v20-- = 0x4000;
      v19 -= __n;
      BOOL v28 = v15-- <= v16;
      if (v28) {
        goto LABEL_22;
      }
    }

    __int16 v26 = sub_100012354(*(void *)(a1 + 112), *(unsigned __int16 *)(*(void *)(a1 + 16) + 2 * v15)) - v35 + *v20;
    *uint64_t v20 = v26;
    BOOL v23 = v21 == -1;
    if (v21 == -1) {
      int v21 = v15;
    }
    if (v23) {
      uint64_t v17 = v19;
    }
    int v22 = v15;
    --v20;
    v19 -= __n;
    BOOL v28 = v15-- <= v16;
  }

  while (!v28);
LABEL_22:
  if (v21 == -1) {
    goto LABEL_32;
  }
  int v27 = *(_DWORD *)(a1 + 8) - 1;
  BOOL v28 = v21 < v27;
  int v29 = v21 >= v27 ? v21 : v21 + 1;
  int v30 = v28 ? __n : 0;
  *(_DWORD *)(a1 + 32) = v22;
  *(_DWORD *)(a1 + 36) = v29;
  *(void *)(a1 + 88) = &v17[v30];
  int v31 = *(_DWORD *)(a1 + 136) + 1;
  *(_DWORD *)(a1 + 136) = v31;
  if (v31 == 8) {
    *(void *)(a1 + 132) = (*(_DWORD *)(a1 + 132) + 1);
  }
  if (*(_WORD *)(a1 + 64) == 0x4000)
  {
LABEL_32:
    uint64_t result = 3LL;
    *(_DWORD *)a1 = 3;
  }

  else
  {
    sub_1000070E0(*(void *)(a1 + 112), *(__int16 *)(a1 + 4), &v36);
    ++*(_WORD *)(a1 + 4);
    if (*(_DWORD *)(a1 + 40))
    {
      if (**(unsigned __int16 **)(a1 + 56) == *(unsigned __int16 *)(a1 + 64))
      {
        int v32 = *(_DWORD *)(a1 + 140);
        int v33 = *(_DWORD *)(a1 + 144) + 1;
        *(_DWORD *)(a1 + 144) = v33;
        if (v33 >= v32) {
          return 2LL;
        }
      }

      else
      {
        *(_DWORD *)(a1 + 144) = 0;
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_1000A250C(int a1, int a2)
{
  uint64_t v2 = 0LL;
  if (!a1) {
    return v2;
  }
  if (!a2) {
    return v2;
  }
  uint64_t v5 = sub_1000C1074(80LL);
  uint64_t v2 = v5;
  if (!v5) {
    return v2;
  }
  *(_DWORD *)(v5 + 32) = a1;
  uint64_t v6 = sub_1000C1074(2LL * a1);
  *(void *)uint64_t v2 = v6;
  if (!v6
    || (uint64_t v7 = sub_1000C1074(2LL * *(int *)(v2 + 32)), (*(void *)(v2 + 16) = v7) == 0LL)
    || (uint64_t v8 = sub_1000C1074(2LL * *(int *)(v2 + 32)), (*(void *)(v2 + 24) = v8) == 0LL)
    || (uint64_t v9 = sub_1000C1074(2LL * *(int *)(v2 + 32)), (*(void *)(v2 + 8) = v9) == 0LL))
  {
    sub_1000C0EF8(*(void *)(v2 + 48));
    sub_1000C0EF8(*(void *)(v2 + 56));
    sub_1000C0EF8(*(void *)(v2 + 8));
    sub_1000C0EF8(*(void *)(v2 + 24));
    sub_1000C0EF8(*(void *)(v2 + 16));
    sub_1000C0EF8(*(void *)v2);
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(void *)(v2 + 48) = 0LL;
    *(void *)(v2 + 56) = 0LL;
    sub_1000C0EF8(v2);
    return 0LL;
  }

  *(_DWORD *)(v2 + 68) = 0x40000000;
  *(_DWORD *)(v2 + 40) = a2;
  uint64_t v10 = sub_1000C1074(2LL * a2);
  *(void *)(v2 + 48) = v10;
  if (v10)
  {
    uint64_t v11 = sub_1000C1074(*(int *)(v2 + 40));
    *(void *)(v2 + 56) = v11;
    if (v11)
    {
      *(_DWORD *)(v2 + 44) = 0;
      if (*(int *)(v2 + 40) >= 1)
      {
        uint64_t v12 = 0LL;
        do
          *(_WORD *)(*(void *)(v2 + 48) + 2 * v12++) = -1;
        while (v12 < *(int *)(v2 + 40));
      }

      return v2;
    }
  }

  sub_1000A266C(v2);
  return 0LL;
}

uint64_t sub_1000A266C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t *)result;
    sub_1000C0EF8(*(void *)(result + 48));
    sub_1000C0EF8(v1[7]);
    sub_1000C0EF8(v1[1]);
    sub_1000C0EF8(v1[3]);
    sub_1000C0EF8(v1[2]);
    sub_1000C0EF8(*v1);
    *(_OWORD *)uint64_t v1 = 0u;
    *((_OWORD *)v1 + 1) = 0u;
    v1[6] = 0LL;
    v1[7] = 0LL;
    return sub_1000C0EF8((uint64_t)v1);
  }

  return result;
}

uint64_t sub_1000A26D0(uint64_t *a1, int a2)
{
  int v3 = sub_1000B32A0(a1);
  if (a2 > 1000) {
    return 0LL;
  }
  int v5 = v3;
  uint64_t result = 0LL;
  if (a2)
  {
    int v6 = 3 * (a2 + a2 * v5) + 1;
    if (v6)
    {
      uint64_t result = sub_1000A250C(v6, a2);
      if (result) {
        *(_DWORD *)(result + 44) = a2;
      }
    }
  }

  return result;
}

void *sub_1000A2738(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  int v4 = *(_DWORD *)(a2 + 36);
  if (v4 >= *(_DWORD *)(a1 + 32)) {
    int v4 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 36) = v4;
  int v5 = *(_DWORD *)(a2 + 44);
  if (v5 >= *(_DWORD *)(a1 + 40)) {
    int v5 = *(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(a1 + 44) = v5;
  memcpy(*(void **)a1, *(const void **)a2, 2 * v4);
  memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), 2LL * *(int *)(a1 + 36));
  memcpy(*(void **)(a1 + 16), *(const void **)(a2 + 16), 2LL * *(int *)(a1 + 36));
  memcpy(*(void **)(a1 + 24), *(const void **)(a2 + 24), 2LL * *(int *)(a1 + 36));
  memcpy(*(void **)(a1 + 48), *(const void **)(a2 + 48), 2LL * *(int *)(a1 + 44));
  return memcpy(*(void **)(a1 + 56), *(const void **)(a2 + 56), *(int *)(a1 + 44));
}

uint64_t sub_1000A2800(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && *(_DWORD *)(a2 + 68) < *(_DWORD *)(a1 + 68)) {
    return (uint64_t)sub_1000A2738(a1, a2);
  }
  return a1;
}

void sub_1000A2820(uint64_t a1)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 68) = 0x40000000;
    bzero(*(void **)a1, *(int *)(a1 + 32));
    bzero(*(void **)(a1 + 8), *(int *)(a1 + 32));
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 36) = 0;
  }

uint64_t sub_1000A286C(uint64_t a1, int a2)
{
  if (!a1) {
    return 1LL;
  }
  if (*(_DWORD *)(a1 + 40) < a2)
  {
    uint64_t result = sub_1000C1074(2LL * a2);
    if (!result) {
      return result;
    }
    uint64_t v5 = result;
    sub_1000C0EF8(*(void *)(a1 + 48));
    *(void *)(a1 + 48) = v5;
    *(_DWORD *)(a1 + 40) = a2;
  }

  *(_DWORD *)(a1 + 44) = 0;
  if (a2 >= 1)
  {
    uint64_t v6 = 0LL;
    do
    {
      *(_WORD *)(*(void *)(a1 + 48) + v6) = -1;
      v6 += 2LL;
    }

    while (2LL * a2 != v6);
  }

  return 1LL;
}

uint64_t sub_1000A28FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 944) + 112LL))();
}

uint64_t sub_1000A2908(int a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (a1 != 1)
  {
    if (a1 || !a2) {
      return 0LL;
    }
    *a3 = sub_100059840(a2);
    *a4 = 2 * sub_1000597F0(a2) + 9;
    return 1LL;
  }

  *a3 = 22;
  if (!qword_1000FDCC0 || (int)*(void *)(qword_1000FDCC0 + 2792) < 1)
  {
    *a4 = 1;
    return 1LL;
  }

  unint64_t v7 = *(void *)(qword_1000FDCC0 + 2792);
  if (v7 >= 0x10)
  {
    int32x4_t v10 = (int32x4_t)xmmword_1000F0910;
    uint64_t v8 = *(void *)(qword_1000FDCC0 + 2792) & 0xFFFFFFF0LL;
    int32x4_t v11 = 0uLL;
    uint64_t v12 = (int16x8_t *)&unk_1000F0930;
    uint64_t v13 = v8;
    int32x4_t v14 = 0uLL;
    int32x4_t v15 = 0uLL;
    do
    {
      int16x8_t v16 = v12[-1];
      int32x4_t v11 = vaddw_high_s16(v11, v16);
      int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v16.i8);
      int32x4_t v15 = vaddw_high_s16(v15, *v12);
      int32x4_t v14 = vaddw_s16(v14, *(int16x4_t *)v12->i8);
      v12 += 2;
      v13 -= 16LL;
    }

    while (v13);
    int v9 = vaddvq_s32(vaddq_s32(vaddq_s32(v14, v10), vaddq_s32(v15, v11)));
    if ((*(void *)(qword_1000FDCC0 + 2792) & 0xFLL) == 0) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    int v9 = 2;
  }

  unint64_t v17 = v7 - v8;
  int v18 = &asc_1000F0920[v8];
  do
  {
    int v19 = *v18++;
    v9 += v19;
    --v17;
  }

  while (v17);
LABEL_16:
  int v20 = v9 + 7;
  if (v9 < -7) {
    int v20 = v9 + 14;
  }
  *a4 = v20 >> 3;
  return 1LL;
}

void sub_1000A2A7C(int *a1)
{
  uint64_t v2 = (void *)*((void *)a1 + 21);
  uint64_t v3 = *((void *)a1 + 22);
  *((void *)a1 + 20) = v2;
  *((_WORD *)a1 + 92) = 0;
  bzero(v2, v3 - (void)v2);
  a1[20] = 0;
  *((_WORD *)a1 + 156) = 0;
  *((_WORD *)a1 + 93) = 0;
  *((_WORD *)a1 + 96) = 0;
  a1[74] = 0;
}

void sub_1000A2AF0(int *a1, int16x4_t *__src)
{
  int v4 = a1[20];
  if (!v4)
  {
    memcpy(*((void **)a1 + 1), __src, 2LL * *a1);
    *((_WORD *)a1 + 93) = 0;
    goto LABEL_215;
  }

  if (v4 >= *((unsigned __int16 *)a1 + 154))
  {
    int v21 = (__int16 *)*((void *)a1 + 1);
    int v22 = (_WORD *)*((void *)a1 + 18);
    else {
      __int16 v23 = *((_WORD *)a1 + 118);
    }
    int v24 = (char *)__src + 2;
    int v25 = (__int16 *)*((void *)a1 + 16);
    __int16 v27 = *v21;
    __int16 v26 = v21 + 1;
    __int16 v28 = __src->i16[0] - v27;
    uint64_t v29 = *v25;
    if (v29 >= 2)
    {
      int v30 = (char *)__src + 2 * v29;
      do
      {
        __int16 v31 = *(_WORD *)v24 - (v23 + *v26);
        int v32 = v31;
        int v33 = v28;
        __int16 v34 = v31 - v28;
        LOWORD(v35) = v28 - v31;
        if (v28 <= v32) {
          __int16 v28 = v32;
        }
        if (v33 < v32) {
          LOWORD(v35) = v34;
        }
        unsigned int v35 = (unsigned __int16)v35;
        if ((v35 & 0x6000) == 0)
        {
          int v36 = (unsigned __int16)(v35 & 0x800) >> 11;
          if ((v35 & 0x800) != 0) {
            char v37 = 0;
          }
          else {
            char v37 = -1;
          }
          if ((v35 & 0x1000) != 0)
          {
            char v37 = 0;
            int v36 = 2;
          }

          if ((v35 & 0x2000) != 0)
          {
            char v37 = 0;
            int v36 = 3;
          }

          int v38 = (v35 >> (v36 + 3)) + (v36 << 7);
          unsigned int v39 = v35 >> 3;
          if ((v37 & 1) == 0) {
            LOWORD(v39) = v38;
          }
          v28 += word_1000F0D3C[(__int16)v39];
        }

        v24 += 2;
        ++v26;
      }

      while (v24 < v30);
    }

    int v40 = (__int16)(v28 - *v22);
    __int16 v43 = *(_WORD *)v24;
    uint64_t v41 = v24 + 2;
    __int16 v42 = v43;
    __int16 v45 = *v26;
    uint64_t v44 = v26 + 1;
    __int16 v46 = v42 - v45;
    for (unsigned int i = (char *)__src + 2 * v25[1]; v41 < i; ++v44)
    {
      __int16 v48 = *(_WORD *)v41 - (v23 + *v44);
      int v49 = v48;
      int v50 = v46;
      __int16 v51 = v48 - v46;
      LOWORD(v52) = v46 - v48;
      if (v46 <= v49) {
        __int16 v46 = v49;
      }
      if (v50 < v49) {
        LOWORD(v52) = v51;
      }
      unsigned int v52 = (unsigned __int16)v52;
      if ((v52 & 0x6000) == 0)
      {
        int v53 = (unsigned __int16)(v52 & 0x800) >> 11;
        if ((v52 & 0x800) != 0) {
          char v54 = 0;
        }
        else {
          char v54 = -1;
        }
        if ((v52 & 0x1000) != 0)
        {
          char v54 = 0;
          int v53 = 2;
        }

        if ((v52 & 0x2000) != 0)
        {
          char v54 = 0;
          int v53 = 3;
        }

        unsigned int v55 = v52 >> 3;
        int v56 = (v52 >> (v53 + 3)) + (v53 << 7);
        if ((v54 & 1) != 0) {
          LOWORD(v56) = v55;
        }
        v46 += word_1000F0D3C[(__int16)v56];
      }

      v41 += 2;
    }

    __int16 v57 = *((_WORD *)a1 + 115);
    int v58 = (__int16)(v46 - v22[1]);
    __int16 v61 = *(_WORD *)v41;
    uint64_t v59 = v41 + 2;
    __int16 v60 = v61;
    __int16 v62 = v60 - *v44;
    int v63 = (char *)__src + 2 * v25[2];
    if (v59 < v63)
    {
      int v64 = v44 + 1;
      do
      {
        __int16 v65 = *v64++;
        __int16 v66 = *(_WORD *)v59 - (v23 + v65);
        int v67 = v66;
        int v68 = v62;
        __int16 v69 = v66 - v62;
        LOWORD(v70) = v62 - v66;
        if (v62 <= v67) {
          __int16 v62 = v67;
        }
        if (v68 < v67) {
          LOWORD(v70) = v69;
        }
        unsigned int v70 = (unsigned __int16)v70;
        if ((v70 & 0x6000) == 0)
        {
          int v71 = (unsigned __int16)(v70 & 0x800) >> 11;
          if ((v70 & 0x800) != 0) {
            char v72 = 0;
          }
          else {
            char v72 = -1;
          }
          if ((v70 & 0x1000) != 0)
          {
            char v72 = 0;
            int v71 = 2;
          }

          if ((v70 & 0x2000) != 0)
          {
            char v72 = 0;
            int v71 = 3;
          }

          unsigned int v73 = v70 >> 3;
          int v74 = (v70 >> (v71 + 3)) + (v71 << 7);
          if ((v72 & 1) != 0) {
            LOWORD(v74) = v73;
          }
          v62 += word_1000F0D3C[(__int16)v74];
        }

        v59 += 2;
      }

      while (v59 < v63);
    }

    int v75 = *((__int16 *)a1 + 112);
    __int16 v76 = *((_WORD *)a1 + 114);
    int v77 = (__int16)(v62 - v22[2]);
    __int16 v78 = v77 + v57;
    int v79 = (__int16)(v77 + v57);
    if ((((_WORD)v77 + v57) & 1) != 0) {
      unsigned int v80 = 1074790400;
    }
    else {
      unsigned int v80 = 0x40000000;
    }
    if ((v78 & 2) != 0) {
      v80 |= v80 >> 9;
    }
    if ((v78 & 4) != 0) {
      unsigned int v80 = 32896 * ((v80 + 0x4000) >> 15);
    }
    if ((v78 & 8) != 0) {
      unsigned int v80 = 33026 * ((v80 + 0x4000) >> 15);
    }
    if ((v78 & 0x10) != 0) {
      unsigned int v80 = 33284 * ((v80 + 0x4000) >> 15);
    }
    if ((v78 & 0x20) != 0) {
      unsigned int v80 = 33808 * ((v80 + 0x4000) >> 15);
    }
    if ((v78 & 0x40) != 0) {
      unsigned int v80 = 34882 * ((v80 + 0x4000) >> 15);
    }
    if ((v78 & 0x80) != 0) {
      unsigned int v80 = 37132 * ((v80 + 0x4000) >> 15);
    }
    if ((v78 & 0x100) != 0) {
      unsigned int v80 = 42074 * ((v80 + 0x4000) >> 15);
    }
    if (v80 >= 0x4DA24000) {
      int v81 = 27013;
    }
    else {
      int v81 = 54026;
    }
    unsigned int v82 = ((v80 + 0x4000) >> 15) * v81;
    if (v80 < 0x4DA24000) {
      __int16 v83 = 1;
    }
    else {
      __int16 v83 = 2;
    }
    BOOL v84 = (v78 & 0x200) == 0;
    if ((v78 & 0x200) != 0) {
      int v85 = v82;
    }
    else {
      int v85 = v80;
    }
    if (v84) {
      __int16 v86 = 1;
    }
    else {
      __int16 v86 = v83;
    }
    int v87 = (v85 + 0x4000) >> 15;
    int v88 = 22268 * v87;
    int v89 = 44536 * v87;
    if (v85 <= 1580023807)
    {
      __int16 v90 = v86 + 1;
    }

    else
    {
      int v89 = v88;
      __int16 v90 = v86 + 2;
    }

    if ((v79 & 0x400) != 0)
    {
      int v85 = v89;
      __int16 v86 = v90;
    }

    int v91 = (v85 + 0x4000) >> 15;
    int v92 = 30266 * v91;
    int v93 = 60532 * v91;
    if (v85 <= 1162493951)
    {
      __int16 v94 = v86 + 2;
    }

    else
    {
      int v93 = v92;
      __int16 v94 = v86 + 3;
    }

    if ((v79 & 0x800) != 0)
    {
      int v85 = v93;
      __int16 v86 = v94;
    }

    int v95 = (v85 + 0x4000) >> 15;
    int v96 = 27954 * v95;
    int v97 = 55908 * v95;
    if (v85 <= 1258635263)
    {
      __int16 v98 = v86 + 5;
    }

    else
    {
      int v97 = v96;
      __int16 v98 = v86 + 6;
    }

    if ((v79 & 0x1000) != 0)
    {
      int v85 = v97;
      __int16 v86 = v98;
    }

    int v99 = (v85 + 0x4000) >> 15;
    int v100 = 23848 * v99;
    int v101 = 47696 * v99;
    if (v85 <= 1475362815)
    {
      __int16 v102 = v86 + 11;
    }

    else
    {
      int v101 = v100;
      __int16 v102 = v86 + 12;
    }

    if ((v79 & 0x2000) != 0)
    {
      int v85 = v101;
      __int16 v86 = v102;
    }

    int v103 = (v85 + 0x4000) >> 15;
    int v104 = 17356 * v103;
    int v105 = 34712 * v103;
    if (v85 <= 2027208703)
    {
      __int16 v106 = v86 + 23;
    }

    else
    {
      int v105 = v104;
      __int16 v106 = v86 + 24;
    }

    if ((v79 & 0x4000) != 0)
    {
      int v85 = v105;
      __int16 v86 = v106;
    }

    int v107 = (v85 + 0x4000) >> 15;
    int v108 = 29202 * v107;
    int v109 = 58404 * v107;
    if (v85 <= 1204862975)
    {
      __int16 v110 = v86 - 47;
    }

    else
    {
      int v109 = v108;
      __int16 v110 = v86 - 46;
    }

    BOOL v111 = v79 >= 0;
    if (v79 < 0) {
      int v112 = v109;
    }
    else {
      int v112 = v85;
    }
    if (v111) {
      __int16 v113 = v86;
    }
    else {
      __int16 v113 = v110;
    }
    if (v112 <= 0x3FFFFFFF)
    {
      do
      {
        v112 *= 2;
        --v113;
      }

      while (v112 < 0x40000000);
    }

    int v114 = *((__int16 *)a1 + 111);
    __int16 v115 = *((_WORD *)a1 + 93);
    __int16 v116 = v115 + v76;
    int v117 = (__int16)(v115 + v76);
    __int16 v118 = v75 - v116;
    __int16 v119 = v116 - v75;
    if (v117 <= v75) {
      __int16 v120 = *((_WORD *)a1 + 112);
    }
    else {
      __int16 v120 = v117;
    }
    if (v117 >= v75) {
      LOWORD(v121) = v119;
    }
    else {
      LOWORD(v121) = v118;
    }
    unsigned int v121 = (unsigned __int16)v121;
    if ((v121 & 0x6000) == 0)
    {
      if ((v121 & 0x2000) != 0)
      {
        char v123 = 0;
        int v122 = 3;
      }

      else if ((v121 & 0x1000) != 0)
      {
        char v123 = 0;
        int v122 = 2;
      }

      else
      {
        int v122 = (unsigned __int16)(v121 & 0x800) >> 11;
        if ((v121 & 0x800) != 0) {
          char v123 = 0;
        }
        else {
          char v123 = -1;
        }
      }

      int v124 = (v121 >> (v122 + 3)) + (v122 << 7);
      unsigned int v125 = v121 >> 3;
      if ((v123 & 1) == 0) {
        LOWORD(v125) = v124;
      }
      v120 += word_1000F0D3C[(__int16)v125];
    }

    int v126 = a1[1];
    __int16 v127 = v115 + *((_WORD *)a1 + 113);
    int v128 = v127;
    __int16 v129 = v114 - v127;
    LOWORD(v130) = v127 - v114;
    BOOL v131 = v128 < v114;
    if (v128 > v114) {
      LOWORD(v114) = v128;
    }
    if (v131) {
      LOWORD(v130) = v129;
    }
    unsigned int v130 = (unsigned __int16)v130;
    if ((v130 & 0x6000) == 0)
    {
      if ((v130 & 0x2000) != 0)
      {
        char v133 = 0;
        int v132 = 3;
      }

      else if ((v130 & 0x1000) != 0)
      {
        char v133 = 0;
        int v132 = 2;
      }

      else
      {
        int v132 = (unsigned __int16)(v130 & 0x800) >> 11;
        if ((v130 & 0x800) != 0) {
          char v133 = 0;
        }
        else {
          char v133 = -1;
        }
      }

      int v134 = (v130 >> (v132 + 3)) + (v132 << 7);
      unsigned int v135 = v130 >> 3;
      if ((v133 & 1) == 0) {
        LOWORD(v135) = v134;
      }
      LOWORD(v114) = word_1000F0D3C[(__int16)v135] + v114;
    }

    int v136 = v112 >> (21 - v113);
    if (v113 > 4) {
      int v136 = 16 << v126;
    }
    __int16 v137 = *((_WORD *)a1 + 116) + v136 + v120 - v114;
    if (0x80000 << v126 >> 16 < v137) {
      __int16 v137 = 8 << v126;
    }
    *((_WORD *)a1 + 93) = v137;
    int v138 = (_WORD *)*((void *)a1 + 20);
    int v139 = (unsigned __int16)*v138;
    *((void *)a1 + 20) = v138 + 1;
    *int v138 = v137;
    unint64_t v140 = *((void *)a1 + 22);
    if (*((void *)a1 + 20) >= v140) {
      *((void *)a1 + 20) = *((void *)a1 + 21);
    }
    int v141 = *((__int16 *)a1 + 93);
    int v142 = *((__int16 *)a1 + 92);
    if (v141 >= v142)
    {
      *((_WORD *)a1 + 92) = *((_WORD *)a1 + 93);
      LOWORD(v142) = v141;
    }

    else if (v139 == (unsigned __int16)v142)
    {
      uint64_t v143 = (__int16 *)*((void *)a1 + 21);
      __int16 v145 = *v143;
      uint64_t v144 = v143 + 1;
      LOWORD(v142) = v145;
      *((_WORD *)a1 + 92) = v145;
      while ((unint64_t)v144 < v140)
      {
        int v146 = *v144;
        if (v146 > (__int16)v142)
        {
          *((_WORD *)a1 + 92) = *v144;
          LOWORD(v142) = v146;
        }

        ++v144;
      }
    }

    unsigned int v147 = *((unsigned __int16 *)a1 + 156);
    if (v147 < *((unsigned __int16 *)a1 + 155))
    {
      *((_WORD *)a1 + 156) = v147 + 1;
LABEL_214:
      memcpy(*((void **)a1 + 11), __src, 2LL * *a1);
      goto LABEL_215;
    }

    if (*((__int16 *)a1 + 102) < (__int16)v142)
    {
      uint64_t v287 = *a1;
      int v288 = *((__int16 *)a1 + 122);
      int v289 = (__int16 *)*((void *)a1 + 6);
      int v290 = *((__int16 *)a1 + 119);
      __int16 v291 = *((_WORD *)a1 + 120);
      int v292 = (__int16)(*((_WORD *)a1 + 119) - v291);
      int v293 = v292 / v288;
      if (v292 / v288 >= 0) {
        int v294 = v292 / v288;
      }
      else {
        int v294 = v293 + 1;
      }
      __int16 v295 = *((_WORD *)a1 + 104);
      __int16 v296 = *((_WORD *)a1 + 105);
      uint64_t v297 = *((void *)a1 + 3);
      if ((int)v287 <= 0)
      {
        sub_1000A4304(a1, *((__int16 **)a1 + 6), v297, v295, v296);
        goto LABEL_214;
      }

      uint64_t v298 = 0LL;
      uint64_t v299 = (_WORD *)*((void *)a1 + 1);
      int v356 = *((__int16 *)a1 + 121);
      int v353 = v294 >> 1;
      uint64_t v354 = *((void *)a1 + 33);
      uint64_t v355 = *((void *)a1 + 31);
      __int16 v300 = *((_WORD *)a1 + 103);
      do
      {
        int v302 = __src->i16[v298];
        int v303 = (__int16)v299[v298];
        __int16 v301 = v300;
        BOOL v209 = __OFSUB__(v302, v303);
        int v304 = v302 - v303;
        if (!((v304 < 0) ^ v209 | (v304 == 0)))
        {
          unsigned int v305 = (unsigned __int16)v304;
          if ((v305 & 0x6000) == 0)
          {
            int v306 = (unsigned __int16)(v305 & 0x800) >> 11;
            if ((v305 & 0x800) != 0) {
              char v307 = 0;
            }
            else {
              char v307 = -1;
            }
            if ((v305 & 0x1000) != 0)
            {
              char v307 = 0;
              int v306 = 2;
            }

            if ((v305 & 0x2000) != 0)
            {
              char v307 = 0;
              int v306 = 3;
            }

            int v308 = (v305 >> (v306 + 3)) + (v306 << 7);
            unsigned int v309 = v305 >> 3;
            if ((v307 & 1) == 0) {
              LOWORD(v309) = v308;
            }
            LOWORD(v302) = word_1000F093C[(__int16)v309] + v302;
          }

          __int16 v301 = v300;
        }

        v289[v298] = v301;
        *(_WORD *)(v297 + v298 * 2) = v301 - v299[v298];
        ++v298;
      }

      while (v287 != v298);
      sub_1000A4304(a1, v289, *((void *)a1 + 3), v295, v296);
      int v340 = __src;
      while (1)
      {
        __int16 v341 = *v289 - *v299;
        if (v290 > v341)
        {
          if (v341 <= v291)
          {
            int v343 = 0;
            if (v288 <= 0) {
              goto LABEL_517;
            }
          }

          else
          {
            int v342 = (__int16)(v353 - v291 + v341);
            if (v342 >= v356)
            {
              int v343 = v342 / (__int16)v293;
              if (v343 >= v288) {
                goto LABEL_517;
              }
            }

            else
            {
              int v343 = v342 * v288 / v292;
              if (v343 >= v288) {
                goto LABEL_517;
              }
            }
          }

          uint64_t v348 = 2LL * v343;
          __int16 v344 = *(_WORD *)(v355 + v348);
          LOWORD(v348) = *(_WORD *)(v354 + v348);
          __int16 v345 = v344 + *v299;
          int v346 = v345;
          *uint64_t v299 = v345;
          int v347 = (__int16)(v340->i16[0] + v348);
          LOWORD(v348) = v346 - v347;
          if (v346 >= v347)
          {
            LOWORD(v347) = v346;
            LODWORD(v348) = (unsigned __int16)v348;
            if ((v348 & 0x6000) != 0) {
              goto LABEL_517;
            }
          }

          else
          {
            *uint64_t v299 = v347;
            LODWORD(v348) = (unsigned __int16)(v347 - v346);
            if ((v348 & 0x6000) != 0) {
              goto LABEL_517;
            }
          }

          int v349 = (unsigned __int16)(v348 & 0x800) >> 11;
          if ((v348 & 0x800) != 0) {
            char v350 = 0;
          }
          else {
            char v350 = -1;
          }
          if ((v348 & 0x1000) != 0)
          {
            char v350 = 0;
            int v349 = 2;
          }

          if ((v348 & 0x2000) != 0)
          {
            char v350 = 0;
            int v349 = 3;
          }

          unsigned int v351 = (v348 >> (v349 + 3)) + (v349 << 7);
          unsigned int v352 = v348 >> 3;
          if ((v350 & 1) == 0) {
            LOWORD(v352) = v351;
          }
          *uint64_t v299 = word_1000F0D3C[(__int16)v352] + v347;
        }

LABEL_517:
        ++v289;
        ++v299;
        int v340 = (int16x4_t *)((char *)v340 + 2);
        LODWORD(v287) = v287 - 1;
        if (!(_DWORD)v287) {
          goto LABEL_214;
        }
      }
    }

    int v312 = (__int16)(*((_WORD *)a1 + 94) + v142);
    int v313 = v312 & ~(v312 >> 31);
    if (v312 < 0) {
      int v312 = -v312;
    }
    int v312 = (unsigned __int16)v312;
    if ((v312 & 0x6000) == 0)
    {
      if ((v312 & 0x800) != 0) {
        char v314 = 0;
      }
      else {
        char v314 = -1;
      }
      if ((v312 & 0x1000) != 0)
      {
        char v314 = 0;
        int v315 = 2;
      }

      else
      {
        int v315 = (unsigned __int16)(v312 & 0x800) >> 11;
      }

      if ((v312 & 0x2000) != 0) {
        char v316 = 0;
      }
      else {
        char v316 = v314;
      }
      if ((v312 & 0x2000) != 0) {
        int v317 = 3;
      }
      else {
        int v317 = v315;
      }
      int v318 = (v312 >> (v317 + 3)) + (v317 << 7);
      unsigned int v319 = v312 >> 3;
      if ((v316 & 1) == 0) {
        LOWORD(v319) = v318;
      }
      LOWORD(v313) = word_1000F0D3C[(__int16)v319] + v313;
    }

    unsigned __int16 v320 = 0;
    int v321 = (_WORD *)*((void *)a1 + 1);
    unint64_t v322 = *((void *)a1 + 2);
    int v323 = (__int16)-(__int16)v313;
    else {
      unsigned int v324 = (unsigned __int16)-(__int16)v323;
    }
    if ((v324 & 0x6000) == 0)
    {
      if ((v324 & 0x800) != 0) {
        char v325 = 0;
      }
      else {
        char v325 = -1;
      }
      if ((v324 & 0x1000) != 0)
      {
        char v325 = 0;
        int v326 = 2;
      }

      else
      {
        int v326 = (unsigned __int16)(v324 & 0x800) >> 11;
      }

      if ((v324 & 0x2000) != 0) {
        char v327 = 0;
      }
      else {
        char v327 = v325;
      }
      if ((v324 & 0x2000) != 0) {
        int v328 = 3;
      }
      else {
        int v328 = v326;
      }
      int v329 = (v324 >> (v328 + 3)) + (v328 << 7);
      unsigned int v330 = v324 >> 3;
      if ((v327 & 1) != 0) {
        LOWORD(v329) = v330;
      }
      unsigned __int16 v320 = word_1000F093C[(__int16)v329];
    }

    BOOL v331 = (_WORD *)*((void *)a1 + 11);
    while (1)
    {
      __int16 v332 = *v321 + v320;
      int v333 = v332;
      *int v321 = v332;
      int v334 = (__int16)(*v331 + v323);
      LOWORD(v335) = v333 - v334;
      if (v333 >= v334)
      {
        LOWORD(v334) = v333;
        unsigned int v335 = (unsigned __int16)v335;
        if ((v335 & 0x6000) != 0) {
          goto LABEL_497;
        }
      }

      else
      {
        *int v321 = v334;
        unsigned int v335 = (unsigned __int16)(v334 - v333);
        if (v335 >= 0x7FFF) {
          unsigned int v335 = 0x7FFF;
        }
        if ((v335 & 0x6000) != 0) {
          goto LABEL_497;
        }
      }

      int v336 = (unsigned __int16)(v335 & 0x800) >> 11;
      if ((v335 & 0x800) != 0) {
        char v337 = 0;
      }
      else {
        char v337 = -1;
      }
      if ((v335 & 0x1000) != 0)
      {
        char v337 = 0;
        int v336 = 2;
      }

      if ((v335 & 0x2000) != 0)
      {
        char v337 = 0;
        int v336 = 3;
      }

      int v338 = (v335 >> (v336 + 3)) + (v336 << 7);
      unsigned int v339 = v335 >> 3;
      if ((v337 & 1) == 0) {
        LOWORD(v339) = v338;
      }
      *int v321 = word_1000F0D3C[(__int16)v339] + v334;
LABEL_497:
      ++v321;
      ++v331;
    }
  }

  uint64_t v5 = *a1;
  if ((int)v5 >= 1)
  {
    uint64_t v6 = 2LL * (v4 - 1);
    __int16 v7 = *(_WORD *)(*((void *)a1 + 12) + v6);
    __int16 v8 = *(_WORD *)(*((void *)a1 + 14) + v6);
    int v9 = (_WORD *)*((void *)a1 + 1);
    int32x4_t v10 = &v9[v5];
    int32x4_t v11 = __src;
    do
    {
      __int16 v12 = *v9 + v7;
      int v13 = v12;
      _WORD *v9 = v12;
      __int16 v14 = v11->i16[0];
      int32x4_t v11 = (int16x4_t *)((char *)v11 + 2);
      int v15 = (__int16)(v14 + v8);
      LOWORD(v16) = v13 - v15;
      if (v13 >= v15)
      {
        LOWORD(v15) = v13;
        unsigned int v16 = (unsigned __int16)v16;
        if ((v16 & 0x6000) != 0) {
          goto LABEL_5;
        }
      }

      else
      {
        _WORD *v9 = v15;
        unsigned int v16 = (unsigned __int16)(v15 - v13);
        if (v16 >= 0x7FFF) {
          unsigned int v16 = 0x7FFF;
        }
        if ((v16 & 0x6000) != 0) {
          goto LABEL_5;
        }
      }

      int v17 = (unsigned __int16)(v16 & 0x800) >> 11;
      if ((v16 & 0x800) != 0) {
        char v18 = 0;
      }
      else {
        char v18 = -1;
      }
      if ((v16 & 0x1000) != 0)
      {
        char v18 = 0;
        int v17 = 2;
      }

      if ((v16 & 0x2000) != 0)
      {
        char v18 = 0;
        int v17 = 3;
      }

      int v19 = (v16 >> (v17 + 3)) + (v17 << 7);
      unsigned int v20 = v16 >> 3;
      if ((v18 & 1) == 0) {
        LOWORD(v20) = v19;
      }
      _WORD *v9 = word_1000F0D3C[(__int16)v20] + v15;
LABEL_5:
      ++v9;
    }

    while (v9 < v10);
  }

  *((_WORD *)a1 + 93) = 0;
LABEL_215:
  int v148 = a1[20] + 1;
  a1[20] = v148;
  uint64_t v149 = (__int16 *)*((void *)a1 + 1);
  uint64_t v150 = *a1;
  __int16 v151 = *v149;
  if ((int)v150 >= 2)
  {
    uint64_t v152 = v150 - 1;
    BOOL v153 = v149 + 1;
    do
    {
      int v155 = *v153++;
      __int16 v154 = v155;
      __int16 v156 = v155 - v151;
      __int16 v157 = v151 - v155;
      BOOL v158 = v151 < v155;
      if (v151 <= v155) {
        __int16 v151 = v154;
      }
      if (v158) {
        LOWORD(v159) = v156;
      }
      else {
        LOWORD(v159) = v157;
      }
      unsigned int v159 = (unsigned __int16)v159;
      if ((v159 & 0x6000) == 0)
      {
        int v160 = (unsigned __int16)(v159 & 0x800) >> 11;
        if ((v159 & 0x800) != 0) {
          char v161 = 0;
        }
        else {
          char v161 = -1;
        }
        if ((v159 & 0x1000) != 0)
        {
          char v161 = 0;
          int v160 = 2;
        }

        if ((v159 & 0x2000) != 0)
        {
          char v161 = 0;
          int v160 = 3;
        }

        int v162 = (v159 >> (v160 + 3)) + (v160 << 7);
        unsigned int v163 = v159 >> 3;
        if ((v161 & 1) == 0) {
          LOWORD(v163) = v162;
        }
        v151 += word_1000F0D3C[(__int16)v163];
      }

      --v152;
    }

    while (v152);
  }

  *((_WORD *)a1 + 144) = v151;
  if (*((__int16 *)a1 + 93) > *((__int16 *)a1 + 100))
  {
    __int16 v164 = __src->i16[0];
    if ((int)v150 >= 2)
    {
      uint64_t v165 = v150 - 1;
      uint64_t v166 = (__int16 *)__src + 1;
      do
      {
        int v168 = *v166++;
        __int16 v167 = v168;
        __int16 v169 = v168 - v164;
        __int16 v170 = v164 - v168;
        BOOL v171 = v164 < v168;
        if (v164 <= v168) {
          __int16 v164 = v167;
        }
        if (v171) {
          LOWORD(v172) = v169;
        }
        else {
          LOWORD(v172) = v170;
        }
        unsigned int v172 = (unsigned __int16)v172;
        if ((v172 & 0x6000) == 0)
        {
          int v173 = (unsigned __int16)(v172 & 0x800) >> 11;
          if ((v172 & 0x800) != 0) {
            char v174 = 0;
          }
          else {
            char v174 = -1;
          }
          if ((v172 & 0x1000) != 0)
          {
            char v174 = 0;
            int v173 = 2;
          }

          if ((v172 & 0x2000) != 0)
          {
            char v174 = 0;
            int v173 = 3;
          }

          int v175 = (v172 >> (v173 + 3)) + (v173 << 7);
          unsigned int v176 = v172 >> 3;
          if ((v174 & 1) == 0) {
            LOWORD(v176) = v175;
          }
          v164 += word_1000F0D3C[(__int16)v176];
        }

        --v165;
      }

      while (v165);
    }

    unsigned int v179 = *((__int16 *)a1 + 145);
    uint64_t v180 = 218LL;
    uint64_t v181 = 55LL;
    __int16 v182 = a1[v181];
    __int16 v183 = *(_WORD *)((char *)a1 + v180) + v179;
    int v184 = v183;
    *((_WORD *)a1 + 145) = v183;
    int v185 = (__int16)(v182 + v164);
    LOWORD(v179) = v183 - v185;
    if (v184 >= v185)
    {
      LOWORD(v185) = v184;
      unsigned int v179 = (unsigned __int16)v179;
      if ((v179 & 0x6000) != 0)
      {
LABEL_295:
        a1[74] = 1;
        *((_WORD *)a1 + 96) = v185 - v151;
        if ((int)v150 >= 1)
        {
LABEL_296:
          __int16 v192 = *((_WORD *)a1 + 98);
          __int16 v193 = *((_WORD *)a1 + 99);
          int v195 = (_WORD *)*((void *)a1 + 5);
          int8x16_t v194 = (__int16 *)*((void *)a1 + 6);
          int32x4_t v196 = (_WORD *)*((void *)a1 + 7);
          __int16 v197 = *((_WORD *)a1 + 106);
          __int16 v198 = *((_WORD *)a1 + 103);
          uint64_t v199 = (_WORD *)*((void *)a1 + 3);
          int v200 = (_WORD *)*((void *)a1 + 4);
          int v201 = v194;
          uint64_t v202 = v150;
          unint64_t v203 = __src;
          int32x4_t v204 = v149;
          do
          {
            int v207 = v203->i16[0];
            int v208 = (__int16)(*v204 + v197);
            __int16 v205 = v198;
            BOOL v209 = __OFSUB__(v207, v208);
            int v210 = v207 - v208;
            if (!((v210 < 0) ^ v209 | (v210 == 0)))
            {
              unsigned int v211 = (unsigned __int16)v210;
              if ((v211 & 0x6000) == 0)
              {
                int v212 = (unsigned __int16)(v211 & 0x800) >> 11;
                if ((v211 & 0x800) != 0) {
                  char v213 = 0;
                }
                else {
                  char v213 = -1;
                }
                if ((v211 & 0x1000) != 0)
                {
                  char v213 = 0;
                  int v212 = 2;
                }

                if ((v211 & 0x2000) != 0)
                {
                  char v213 = 0;
                  int v212 = 3;
                }

                int v214 = (v211 >> (v212 + 3)) + (v212 << 7);
                unsigned int v215 = v211 >> 3;
                if ((v213 & 1) == 0) {
                  LOWORD(v215) = v214;
                }
                LOWORD(v207) = word_1000F093C[(__int16)v215] + v207;
              }

              else {
                __int16 v205 = v207;
              }
            }

            *v201++ = v205;
            __int16 v206 = *v204++;
            *v199++ = v205 - v206;
            unint64_t v203 = (int16x4_t *)((char *)v203 + 2);
            --v202;
          }

          while (v202);
          while (1)
          {
            int v216 = *v149;
            *int v195 = *v149;
            int v217 = *v194;
            LOWORD(v218) = v216 - v217;
            if (v216 >= v217)
            {
              LOWORD(v217) = v216;
              unsigned int v218 = (unsigned __int16)v218;
              if ((v218 & 0x6000) == 0)
              {
LABEL_325:
                int v219 = (unsigned __int16)(v218 & 0x800) >> 11;
                if ((v218 & 0x800) != 0) {
                  char v220 = 0;
                }
                else {
                  char v220 = -1;
                }
                if ((v218 & 0x1000) != 0)
                {
                  char v220 = 0;
                  int v219 = 2;
                }

                if ((v218 & 0x2000) != 0)
                {
                  char v220 = 0;
                  int v219 = 3;
                }

                int v221 = (v218 >> (v219 + 3)) + (v219 << 7);
                unsigned int v222 = v218 >> 3;
                if ((v220 & 1) == 0) {
                  LOWORD(v222) = v221;
                }
                LOWORD(v217) = word_1000F0D3C[(__int16)v222] + v217;
                *int v195 = v217;
              }
            }

            else
            {
              *int v195 = v217;
              unsigned int v218 = (unsigned __int16)(v217 - v216);
              if (v218 >= 0x7FFF) {
                unsigned int v218 = 0x7FFF;
              }
              if ((v218 & 0x6000) == 0) {
                goto LABEL_325;
              }
            }

            __int16 v223 = v217 - *v149;
            *int v195 = v223;
            __int16 v224 = v223 + v193;
            int v225 = v224;
            *int v200 = v224;
            int v226 = (__int16)(*v196 + v192);
            LOWORD(v227) = v225 - v226;
            if (v225 >= v226)
            {
              LOWORD(v226) = v225;
              unsigned int v227 = (unsigned __int16)v227;
              if ((v227 & 0x6000) != 0) {
                goto LABEL_316;
              }
            }

            else
            {
              *int v200 = v226;
              unsigned int v227 = (unsigned __int16)(v226 - v225);
              if (v227 >= 0x7FFF) {
                unsigned int v227 = 0x7FFF;
              }
              if ((v227 & 0x6000) != 0) {
                goto LABEL_316;
              }
            }

            int v228 = (unsigned __int16)(v227 & 0x800) >> 11;
            if ((v227 & 0x800) != 0) {
              char v229 = 0;
            }
            else {
              char v229 = -1;
            }
            if ((v227 & 0x1000) != 0)
            {
              char v229 = 0;
              int v228 = 2;
            }

            if ((v227 & 0x2000) != 0)
            {
              char v229 = 0;
              int v228 = 3;
            }

            int v230 = (v227 >> (v228 + 3)) + (v228 << 7);
            unsigned int v231 = v227 >> 3;
            if ((v229 & 1) == 0) {
              LOWORD(v231) = v230;
            }
            *int v200 = word_1000F0D3C[(__int16)v231] + v226;
LABEL_316:
            ++v194;
            ++v149;
            ++v195;
            ++v200;
            ++v196;
            LODWORD(v150) = v150 - 1;
            if (!(_DWORD)v150)
            {
              unint64_t v177 = *((void *)a1 + 8);
              if (a1[20] != 1) {
                goto LABEL_354;
              }
LABEL_264:
              unint64_t v178 = *((void *)a1 + 9);
              if (v177 < v178)
              {
                if (v178 <= v177 + 2) {
                  unint64_t v178 = v177 + 2;
                }
                bzero((void *)v177, ((v178 + ~v177) & 0xFFFFFFFFFFFFFFFELL) + 2);
              }

              goto LABEL_382;
            }
          }
        }

        goto LABEL_263;
      }
    }

    else
    {
      *((_WORD *)a1 + 145) = v185;
      unsigned int v179 = (unsigned __int16)(v185 - v184);
      if (v179 >= 0x7FFF) {
        unsigned int v179 = 0x7FFF;
      }
      if ((v179 & 0x6000) != 0) {
        goto LABEL_295;
      }
    }

    if ((v179 & 0x800) != 0) {
      char v186 = 0;
    }
    else {
      char v186 = -1;
    }
    if ((v179 & 0x1000) != 0)
    {
      char v186 = 0;
      int v187 = 2;
    }

    else
    {
      int v187 = (unsigned __int16)(v179 & 0x800) >> 11;
    }

    if ((v179 & 0x2000) != 0) {
      char v188 = 0;
    }
    else {
      char v188 = v186;
    }
    if ((v179 & 0x2000) != 0) {
      int v189 = 3;
    }
    else {
      int v189 = v187;
    }
    int v190 = (v179 >> (v189 + 3)) + (v189 << 7);
    unsigned int v191 = v179 >> 3;
    if ((v188 & 1) == 0) {
      LOWORD(v191) = v190;
    }
    LOWORD(v185) = word_1000F0D3C[(__int16)v191] + v185;
    *((_WORD *)a1 + 145) = v185;
    goto LABEL_295;
  }

  *((_WORD *)a1 + 96) = *((_WORD *)a1 + 145) - v151;
LABEL_263:
  unint64_t v177 = *((void *)a1 + 8);
  if (v148 == 1) {
    goto LABEL_264;
  }
LABEL_354:
  int v232 = *a1;
  __int16 v233 = *((_WORD *)a1 + 146);
  if (a1[75])
  {
    int v234 = (__int16)(*((_WORD *)a1 + 145) - (*((_WORD *)a1 + 144) + *((_WORD *)a1 + 97)));
    int v235 = v234 & (v234 >> 31);
    if (v235 > v233) {
      __int16 v233 = v235;
    }
  }

  if (v232 >= 1)
  {
    uint64_t v237 = (unsigned __int16 *)*((void *)a1 + 4);
    uint64_t v236 = (_WORD *)*((void *)a1 + 5);
    do
    {
      int v240 = (__int16)*v237;
      LOWORD(v239) = v233;
      if (v240 >= 1)
      {
        unsigned int v241 = *v237;
        if (v241 >> 13)
        {
          int v242 = 0;
        }

        else
        {
          if ((v240 & 0x4000) != 0)
          {
            char v244 = 0;
            int v243 = 4;
          }

          else if ((v240 & 0x2000) != 0)
          {
            char v244 = 0;
            int v243 = 3;
          }

          else if ((v240 & 0x1000) != 0)
          {
            char v244 = 0;
            int v243 = 2;
          }

          else
          {
            int v243 = (unsigned __int16)(v240 & 0x800) >> 11;
            if ((v240 & 0x800) != 0) {
              char v244 = 0;
            }
            else {
              char v244 = -1;
            }
          }

          int v245 = (v241 >> (v243 + 3)) + (v243 << 7);
          unsigned int v246 = v241 >> 3;
          if ((v244 & 1) == 0) {
            LOWORD(v246) = v245;
          }
          int v242 = word_1000F093C[(__int16)v246];
        }

        int v247 = *((__int16 *)a1 + 143);
        int v248 = a1[1];
        char v249 = 25 - v248;
        int v250 = 1 << (24 - v248);
        int v251 = (__int16)(*v236 + v242);
        if (v247 > v251)
        {
          int v238 = (v250 + 183470944) >> v249;
        }

        else
        {
          int v252 = *((__int16 *)a1 + 142);
          if (v252 >= v251)
          {
            int v253 = (v252 - v247) / 107;
            int v254 = (v251 - v247) / v253;
            int v238 = ((dword_1000F113C[v254] + v250) >> v249)
                 + ((__int16)((v250 - dword_1000F113C[v254] + dword_1000F113C[v254 + 1]) >> v249)
                  * (__int16)(v251 - (v247 + v254 * v253))
                  + (v253 >> 1))
                 / v253;
          }

          else
          {
            int v238 = 0;
          }
        }

        int v239 = (__int16)((v238 + v242) << (a1[76] != 0));
        if (v239 <= v233) {
          LOWORD(v239) = v233;
        }
      }

      *(_WORD *)unint64_t v177 = v239;
      v177 += 2LL;
      ++v237;
      ++v236;
      --v232;
    }

    while (v232);
  }

LABEL_382:
  uint64_t v255 = *a1;
  if ((int)v255 >= 1)
  {
    uint64_t v256 = (__int16 *)*((void *)a1 + 6);
    uint64_t v257 = (_WORD *)*((void *)a1 + 7);
    uint64_t v258 = &v256[v255];
    int v259 = (__int16 *)*((void *)a1 + 1);
    uint64_t v260 = (__int16 *)*((void *)a1 + 8);
    uint64_t v261 = __src;
    do
    {
      __int16 v264 = v261->i16[0];
      uint64_t v261 = (int16x4_t *)((char *)v261 + 2);
      __int16 v263 = v264;
      __int16 v265 = *v260++;
      *uint64_t v256 = v265 + v263;
      int v266 = *v259;
      *uint64_t v257 = *v259;
      int v267 = *v256;
      LOWORD(v268) = v266 - v267;
      if (v266 >= v267)
      {
        LOWORD(v267) = v266;
        unsigned int v268 = (unsigned __int16)v268;
        if ((v268 & 0x6000) != 0) {
          goto LABEL_384;
        }
      }

      else
      {
        *uint64_t v257 = v267;
        unsigned int v268 = (unsigned __int16)(v267 - v266);
        if (v268 >= 0x7FFF) {
          unsigned int v268 = 0x7FFF;
        }
        if ((v268 & 0x6000) != 0) {
          goto LABEL_384;
        }
      }

      int v269 = (unsigned __int16)(v268 & 0x800) >> 11;
      if ((v268 & 0x800) != 0) {
        char v270 = 0;
      }
      else {
        char v270 = -1;
      }
      if ((v268 & 0x1000) != 0)
      {
        char v270 = 0;
        int v269 = 2;
      }

      if ((v268 & 0x2000) != 0)
      {
        char v270 = 0;
        int v269 = 3;
      }

      int v271 = (v268 >> (v269 + 3)) + (v269 << 7);
      unsigned int v272 = v268 >> 3;
      if ((v270 & 1) == 0) {
        LOWORD(v272) = v271;
      }
      LOWORD(v267) = word_1000F0D3C[(__int16)v272] + v267;
      *uint64_t v257 = v267;
LABEL_384:
      __int16 v262 = *v259++;
      *v257++ = v267 - v262;
      ++v256;
    }

    while (v256 < v258);
  }

  uint64_t v273 = *a1;
  uint64_t v274 = (int16x4_t *)*((void *)a1 + 6);
  sub_1000A4304(a1, (__int16 *)v274, *((void *)a1 + 5), *((__int16 *)a1 + 140), *((__int16 *)a1 + 141));
  if (v273 < 8
    || ((uint64_t v275 = 2LL * (v273 - 1) + 2, v274 < (int16x4_t *)&__src->i8[v275])
      ? (BOOL v276 = &v274->i8[v275] > (__int8 *)__src)
      : (BOOL v276 = 0),
        v276))
  {
    LODWORD(v277) = 0;
    int v279 = (char *)__src;
    unsigned int v280 = v274;
    goto LABEL_422;
  }

  uint64_t v277 = v273 & 0x7FFFFFFC;
  uint64_t v278 = 2LL * (v273 & 0xFFFFFFFC);
  int v279 = (char *)__src + v278;
  unsigned int v280 = (int16x4_t *)((char *)v274 + v278);
  uint64_t v281 = v273 & 0xFFFFFFFC;
  uint64_t v282 = __src;
  do
  {
    int16x4_t v283 = *v282;
    int16x4_t v284 = vcgt_s16(*v274, *v282);
    if ((v284.i8[0] & 1) != 0)
    {
      v274->i16[0] = v283.i16[0];
      if ((v284.i8[2] & 1) == 0)
      {
LABEL_414:
        if ((v284.i8[4] & 1) != 0) {
          goto LABEL_419;
        }
        goto LABEL_415;
      }
    }

    else if ((v284.i8[2] & 1) == 0)
    {
      goto LABEL_414;
    }

    v274->i16[1] = v283.i16[1];
    if ((v284.i8[4] & 1) != 0)
    {
LABEL_419:
      v274->i16[2] = v283.i16[2];
      if ((v284.i8[6] & 1) == 0) {
        goto LABEL_411;
      }
      goto LABEL_420;
    }

LABEL_415:
    if ((v284.i8[6] & 1) == 0) {
      goto LABEL_411;
    }
LABEL_420:
    v274->i16[3] = v283.i16[3];
LABEL_411:
    ++v274;
    ++v282;
    v281 -= 4LL;
  }

  while (v281);
  if (v277 == v273) {
    goto LABEL_450;
  }
LABEL_422:
  int v285 = v273 - v277;
  do
  {
    int v286 = *(__int16 *)v279;
    if (v280->i16[0] > v286) {
      v280->i16[0] = v286;
    }
    v279 += 2;
    unsigned int v280 = (int16x4_t *)((char *)v280 + 2);
    --v285;
  }

  while (v285);
LABEL_450:
  if (*a1 >= 1)
  {
    uint64_t v310 = 0LL;
    uint64_t v311 = *((void *)a1 + 6);
    do
    {
      __src->i16[v310] = *(_WORD *)(v311 + 2 * v310);
      ++v310;
    }

    while ((int)v310 < *a1);
  }

uint64_t sub_1000A4274(uint64_t *a1)
{
  return sub_1000C0EF8((uint64_t)a1);
}

int *sub_1000A4304(int *result, __int16 *a2, uint64_t a3, int a4, int a5)
{
  if (*result >= 2)
  {
    LODWORD(v5) = 0;
    uint64_t v6 = a2 + 1;
    int v7 = *result - 1;
    BOOL v8 = a2[1] > *a2;
    while (1)
    {
      int v9 = v5 + 1;
      uint64_t v10 = (int)v5;
      __int16 v11 = *(_WORD *)(a3 + 2LL * (int)v5);
      LODWORD(v5) = v5 + 1;
      if (a4 > v11) {
        goto LABEL_17;
      }
LABEL_3:
    }

    __int16 v12 = &a2[(int)v5 + 2];
    uint64_t v5 = (int)v5;
    do
    {
      int v13 = *v12++;
      BOOL v14 = v8;
      int v15 = v6[v5];
      BOOL v16 = v13 <= v15;
      BOOL v8 = v13 > v15;
      if (v16 && v14) {
        break;
      }
      ++v5;
    }

    while ((int)v5 + 1 < v7);
    LODWORD(v5) = v5 + 1;
    if (a4 <= v11) {
      goto LABEL_3;
    }
LABEL_17:
    int v18 = (1 << result[1]) - (((int)v5 + v9) << result[1]) / (2 * *result);
    if (v9 < (int)v5)
    {
      int v19 = (unsigned __int16)a2[v10] - a5;
      unsigned int v20 = &v6[v10];
      int v21 = ~(_DWORD)v10 + v5;
      int v22 = a5;
      do
      {
        int v23 = *v20;
        int v24 = a5;
        if (v23 < (__int16)v19)
        {
          *unsigned int v20 = v19;
          int v24 = ((1 << (result[1] - 1)) + v22 * v18) >> result[1];
          int v23 = v19;
        }

        int v19 = v23 - v24;
        ++v20;
        int v22 = v24;
        --v21;
      }

      while (v21);
    }

    LODWORD(v25) = v5 - 1;
    if ((int)v5 - 1 > (int)v10)
    {
      int v26 = (unsigned __int16)a2[(int)v5] - a5;
      uint64_t v25 = (int)v25;
      int v27 = a5;
      do
      {
        int v28 = a2[v25];
        int v29 = a5;
        if (v28 < (__int16)v26)
        {
          a2[v25] = v26;
          int v29 = ((1 << (result[1] - 1)) + v27 * v18) >> result[1];
          int v28 = v26;
        }

        int v26 = v28 - v29;
        --v25;
        int v27 = v29;
      }

      while (v25 > v10);
    }

    goto LABEL_3;
  }

  return result;
}

uint64_t sub_1000A44B0( uint64_t *a1, __int16 *a2, unsigned int a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v461 = 0LL;
  size_t v14 = (int)a4;
  size_t v15 = 4LL * (int)a4;
  bzero(a5, v15);
  uint64_t v452 = (uint64_t)a6;
  bzero(a6, v15);
  uint64_t v453 = (uint64_t)a7;
  bzero(a7, v15);
  if (a8) {
    bzero(a8, v14);
  }
  if (a9) {
    bzero(a9, v14);
  }
  int v16 = sub_1000CC52C((unint64_t)a2) + 1;
  size_t v17 = 2LL * v16;
  uint64_t v25 = (unsigned __int16 *)sub_1000CAFC0(v17, v18, v19, v20, v21, v22, v23, v24);
  int v26 = v25;
  if (!v25
    || (v458 = v25, v27 = sub_1000CC548(v25, a2, v16), int v26 = v458, !v27)
    || (v28 = sub_1000CD9AC(v458), int v26 = v458, !v28))
  {
    sub_1000CB038(v26, 2LL * v16);
    return 0LL;
  }

  BOOL v450 = sub_1000CAFC0(v15, v29, v30, v31, v32, v33, v34, v35);
  uint64_t v459 = sub_1000CAFC0(v15, v36, v37, v38, v39, v40, v41, v42);
  __int16 v57 = sub_1000CAFC0(v15, v43, v44, v45, v46, v47, v48, v49);
  if (!a8)
  {
    int v58 = 0LL;
    uint64_t v59 = a4;
    if (a9) {
      goto LABEL_10;
    }
LABEL_14:
    __int16 v60 = 0LL;
    goto LABEL_15;
  }

  int v58 = (char *)sub_1000CAFC0(v14, v50, v51, v52, v53, v54, v55, v56);
  uint64_t v59 = a4;
  if (!a9) {
    goto LABEL_14;
  }
LABEL_10:
  __int16 v60 = sub_1000CAFC0(v14, v50, v51, v52, v53, v54, v55, v56);
LABEL_15:
  uint64_t v63 = sub_1000B7CC8(a1, (unint64_t)v458, 0, a3, 0, v59, v450, (uint64_t)v459, (uint64_t)v57, v58, (uint64_t)v60);
  v441 = a1;
  uint64_t v429 = v17;
  int v71 = v59;
  if ((int)v63 > (int)v59)
  {
    char v72 = v450;
    do
    {
      if (v60) {
        sub_1000CB038(v60, v71);
      }
      int v73 = v71;
      int v74 = v60;
      int v75 = v73;
      uint64_t v76 = v73;
      if (v58) {
        sub_1000CB038(v58, v73);
      }
      uint64_t v77 = 4 * v76;
      sub_1000CB038(v57, v77);
      sub_1000CB038(v459, v77);
      sub_1000CB038(v72, v77);
      size_t v78 = 2 * v75;
      uint64_t v79 = (2 * v75);
      char v72 = sub_1000CAFC0(4 * v78, v80, v81, v82, v83, v84, v85, v86);
      uint64_t v459 = sub_1000CAFC0(4 * v78, v87, v88, v89, v90, v91, v92, v93);
      __int16 v57 = sub_1000CAFC0(4 * v78, v94, v95, v96, v97, v98, v99, v100);
      if (a8) {
        int v58 = (char *)sub_1000CAFC0(v78, v101, v102, v103, v104, v105, v106, v107);
      }
      if (a9) {
        int v74 = sub_1000CAFC0(v78, v101, v102, v103, v104, v105, v106, v107);
      }
      __int16 v60 = v74;
      uint64_t v409 = (uint64_t)v74;
      int v71 = v79;
      uint64_t v63 = sub_1000B7CC8(a1, (unint64_t)v458, 0, a3, 0, v79, v72, (uint64_t)v459, (uint64_t)v57, v58, v409);
    }

    while ((int)v63 > (int)v79);
    BOOL v450 = v72;
  }

  int v108 = 2 * v63;
  uint64_t v442 = v63;
  for (int i = (2 * v63) | 1; ; int i = v111 + 4)
  {
    __int16 v110 = sub_1000CAFC0(28LL * i, v64, v65, v66, v67, v68, v69, v70);
    int v111 = sub_1000A6628(a2, v108, (uint64_t)v110);
    if (v111 <= v108) {
      break;
    }
    sub_1000CB038(v110, 28LL * (v108 + 1));
    int v108 = v111 + 3;
  }

  int v112 = sub_1000B324C(a1);
  v438 = sub_1000CAFC0(2LL * (v112 + 1), v113, v114, v115, v116, v117, v118, v119);
  int v120 = sub_1000B3288(a1);
  uint64_t v437 = sub_1000CAFC0(2LL * (v120 + 1), v121, v122, v123, v124, v125, v126, v127);
  int v440 = (int *)sub_1000CAFC0(0x78uLL, v128, v129, v130, v131, v132, v133, v134);
  int v444 = (int32x2_t *)a1[7];
  int32x2_t v414 = v444[27];
  if (v111 > 1)
  {
    for (int j = 0; j < v111 - 1; ++j)
    {
      int v142 = (int *)v110 + 7 * j;
      int v143 = *v142;
      if ((*v142 - 1) > 1)
      {
        if (v143 != 3) {
          continue;
        }
        unsigned int v147 = (unsigned int *)v110 + 7 * j + 7;
        uint64_t v135 = *v147;
        if ((_DWORD)v135 != 1) {
          continue;
        }
        uint64_t v135 = v458[*((int *)v110 + 7 * j + 1)];
        if ((_DWORD)v135 != 36) {
          continue;
        }
        int v148 = (char *)v110 + 28 * j;
        uint64_t v135 = *((unsigned int *)v148 + 2);
        *((_DWORD *)v148 + 2) = v135 + *((_DWORD *)v110 + 7 * j + 9);
        *int v142 = 1;
        ++j;
      }

      else
      {
        uint64_t v135 = j + 1LL;
        uint64_t v144 = (_DWORD *)v110 + 7 * v135;
        uint64_t v136 = *v144;
        if ((_DWORD)v136 != 3) {
          continue;
        }
        if (v143 != 1 || j >= v111 - 2)
        {
          if (v143 == 1)
          {
            int v146 = v458[*((int *)v110 + 7 * v135 + 1)];
LABEL_51:
            if (v146 == 36)
            {
              if ((int)v135 < v111)
              {
                uint64_t v149 = (_DWORD *)v110 + 7 * j + 2;
                uint64_t v150 = (v111 - j) - 1LL;
                __int16 v151 = (_DWORD *)v110 + 7 * v135;
                do
                {
                  if (v458[v151[1]] != 36 && *v151 != 1) {
                    break;
                  }
                  uint64_t v135 = *v149;
                  *uint64_t v149 = v135 + v151[2];
                  *__int16 v151 = 4;
                  v151 += 7;
                  --v150;
                }

                while (v150);
              }

              continue;
            }
          }

LABEL_389:
                                  uint64_t v61 = (v61 + 1);
                                  LODWORD(v461) = v304 - 1;
                                  break;
                                case '@':
                                  __int16 v291 = v247;
                                  uint64_t v292 = v222;
                                  int v293 = v441;
                                  int v294 = &unk_1000F1434;
LABEL_270:
                                  if ((int)sub_1000B3680(v293, v294, 1LL, 1LL, 0LL, 30, (uint64_t)v440) >= 1)
                                  {
                                    sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  *v440,  *v291,  1,  0,  1);
                                    uint64_t v61 = (v61 + 1);
                                  }

                                  goto LABEL_280;
                                default:
                                  goto LABEL_163;
                              }

                              goto LABEL_161;
                            }

                            switch(v234)
                            {
                              case 0:
                              case 1:
                                int v410 = v239;
                                int v416 = v247;
                                uint64_t v433 = v222;
                                LODWORD(v460) = v240;
                                uint64_t v424 = v249;
                                int v270 = sub_1000B37CC(v441, v249, 0LL, 0LL, v240, 30LL, (uint64_t)v440);
                                if (v270 < 1)
                                {
                                  char v285 = 0;
                                  int v287 = -1;
                                  int v286 = v416;
                                }

                                else
                                {
                                  BOOL v412 = 0;
                                  unint64_t v271 = v270 + 1LL;
                                  int v421 = -1;
                                  unint64_t v272 = (unint64_t)v438;
                                  uint64_t v273 = v440;
                                  do
                                  {
                                    uint64_t v274 = (v271 - 2);
                                    sub_1000B33F8((char *)v441, v273[v274], v272, v437);
                                    int v275 = sub_1000CC52C(v272);
                                    if (v275 < (int)v240)
                                    {
                                      uint64_t v273 = v440;
                                    }

                                    else
                                    {
                                      int v276 = v275;
                                      uint64_t v277 = v275;
                                      uint64_t v278 = v275 - 1LL;
                                      if (sub_1000CBA60(*(unsigned __int16 *)&v424[2 * v278])
                                        || sub_1000CB890(*(unsigned __int16 *)&v424[2 * v278])
                                        && sub_1000CB890(*(unsigned __int16 *)&v424[2 * v277])
                                        || sub_1000CBA3C(*(unsigned __int16 *)&v424[2 * v278])
                                        && sub_1000CBA3C(*(unsigned __int16 *)&v424[2 * v277]))
                                      {
                                        __int16 v60 = v446;
                                        int v108 = v436;
                                        uint64_t v273 = v440;
                                      }

                                      else
                                      {
                                        int v279 = sub_1000CD3EC(v424, v438, v276);
                                        __int16 v60 = v446;
                                        int v108 = v436;
                                        uint64_t v273 = v440;
                                        if (v421 == -1
                                          || v276 > (int)v240
                                          || (v412 ? (BOOL v280 = v279 == 0) : (BOOL v280 = 1),
                                              !v280 ? (int v281 = 0) : (int v281 = 1),
                                              v276 == (_DWORD)v240 && v281))
                                        {
                                          int v421 = v440[v274];
                                          BOOL v412 = v279 == 0;
                                          LODWORD(v240) = v276;
                                        }
                                      }
                                    }

                                    --v271;
                                    unint64_t v272 = (unint64_t)v438;
                                  }

                                  while (v271 > 1);
                                  char v285 = v412;
                                  unint64_t v460 = __PAIR64__(v412, v240);
                                  int v58 = v456;
                                  __int16 v224 = (char *)v459 + 4;
                                  int v286 = v416;
                                  int v287 = v421;
                                }

                                sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v287,  *v286,  v240,  0,  v285);
                                uint64_t v61 = (v61 + 1);
                                uint64_t v222 = v433;
                                uint64_t v368 = v223 + 1LL;
                                if (*((_DWORD *)v110 + 7 * v368))
                                {
                                  uint64_t v369 = (int *)v413 + 7 * v223;
                                  uint64_t v330 = 1LL;
                                  do
                                  {
                                    uint64_t v368 = ++v330 + v223;
                                    int v370 = *v369;
                                    v369 += 7;
                                  }

                                  while (v370);
                                }

                                else
                                {
                                  LODWORD(v330) = 1;
                                }

                                goto LABEL_341;
                              case 3:
LABEL_318:
                                uint64_t v324 = v222;
                                int v325 = sub_1000A69C0( v441,  (uint64_t)v458,  a3,  a4,  (uint64_t)a5,  v452,  v453,  (uint64_t)a9,  v440,  (int *)&v461 + 1,  &v461,  (int *)v110 + 7 * v223);
                                goto LABEL_319;
                              case 4:
                                uint64_t v324 = v222;
                                int v325 = sub_1000A77AC( v441,  (uint64_t)v458,  a3,  a4,  (uint64_t)a5,  v452,  v453,  (uint64_t)a9,  v440,  (int *)&v461 + 1,  v438,  v437,  (unsigned int *)&v461,  (int *)v110 + 7 * v223);
                                goto LABEL_319;
                              case 5:
                                uint64_t v326 = v222;
                                v463[0] = 0;
                                int v327 = sub_1000A7D60( v441,  a4,  (uint64_t)a5,  v452,  v453,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  (uint64_t)v458,  (_DWORD *)v110 + 7 * v223,  v463);
                                uint64_t v328 = v223 + 1LL;
                                if (!*((_DWORD *)v110 + 7 * v328)) {
                                  goto LABEL_315;
                                }
                                int v329 = (int *)v413 + 7 * v223;
                                uint64_t v330 = 1LL;
                                uint64_t v222 = v326;
                                do
                                {
                                  if (*((_DWORD *)v110 + 7 * v328 + 1) >= v463[0]) {
                                    break;
                                  }
                                  uint64_t v328 = ++v330 + v223;
                                  int v331 = *v329;
                                  v329 += 7;
                                }

                                while (v331);
                                goto LABEL_291;
                              case 6:
                                uint64_t v326 = v222;
                                v463[0] = 0;
                                int v327 = sub_1000A7D60( v441,  a4,  (uint64_t)a5,  v452,  v453,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  (uint64_t)v458,  (_DWORD *)v110 + 7 * v223,  v463);
                                uint64_t v332 = v223 + 1LL;
                                if (*((_DWORD *)v110 + 7 * v332))
                                {
                                  int v333 = (int *)v413 + 7 * v223;
                                  uint64_t v330 = 1LL;
                                  uint64_t v222 = v326;
                                  do
                                  {
                                    if (*((_DWORD *)v110 + 7 * v332 + 1) >= v463[0]) {
                                      break;
                                    }
                                    uint64_t v332 = ++v330 + v223;
                                    int v334 = *v333;
                                    v333 += 7;
                                  }

                                  while (v334);
LABEL_291:
                                  uint64_t v61 = (v327 + v61);
                                }

                                else
                                {
LABEL_315:
                                  LODWORD(v330) = 1;
                                  uint64_t v222 = v326;
                                  uint64_t v61 = (v327 + v61);
                                }

LABEL_341:
                                LODWORD(v461) = v330 - 1;
                                break;
                              case 9:
                                uint64_t v324 = v222;
                                int v325 = sub_1000A9814( v441,  (uint64_t)v458,  a3,  a4,  (uint64_t)a5,  v452,  v453,  (uint64_t)a9,  v440,  (int *)&v461 + 1,  v438,  v437,  (int *)&v461,  (uint64_t)v110 + 28 * v223);
LABEL_319:
                                uint64_t v222 = v324;
                                uint64_t v61 = (v325 + v61);
                                break;
                              case 12:
                                uint64_t v335 = v222;
                                int v426 = v61;
                                int v336 = v247;
                                sub_1000CC548(v462, (__int16 *)v249, v240 + 1);
                                int v337 = *v336;
                                uint64_t v338 = v441[7];
                                uint64_t v339 = *(void *)(v338 + 200);
                                int v340 = sub_1000CC52C((unint64_t)v462);
                                int v341 = *(_DWORD *)(v338 + 192);
                                if (v341 < 1)
                                {
                                  int v343 = 0;
                                  int v344 = a3;
                                }

                                else
                                {
                                  int v342 = v340;
                                  int v343 = 0;
                                  int v344 = a3;
                                  do
                                  {
                                    int v345 = sub_1000CD450(*(_WORD **)v339, v462, v342);
                                    int v341 = *(_DWORD *)(v338 + 192);
                                    if (!v345) {
                                      break;
                                    }
                                    v339 += 32LL;
                                    ++v343;
                                  }

                                  while (v343 < v341);
                                }

                                if (v343 == v341)
                                {
                                  int v371 = 0;
                                }

                                else
                                {
                                  uint64_t v372 = *(_WORD **)(v339 + 16);
                                  int v371 = 1;
                                  sub_1000B3680(v441, v372, 1LL, 1LL, 0LL, 5, (uint64_t)v463);
                                  sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  v344,  v463[0],  v337,  0,  0,  0);
                                }

                                int v58 = v456;
                                __int16 v60 = v446;
                                uint64_t v222 = v335;
                                uint64_t v61 = (v371 + v426);
                                goto LABEL_161;
                              case 13:
                                uint64_t v433 = v222;
                                int v346 = v61;
                                int v347 = v247;
                                sub_1000CC548(v462, (__int16 *)v249, v240 + 1);
                                int v348 = *v347;
                                uint64_t v349 = v441[7];
                                char v350 = *(_WORD ***)(v349 + 152);
                                int v351 = sub_1000CC52C((unint64_t)v462);
                                int v352 = *(_DWORD *)(v349 + 144);
                                if (v352 < 1)
                                {
                                  int v354 = 0;
                                  int v355 = a3;
                                }

                                else
                                {
                                  int v353 = v351;
                                  int v354 = 0;
                                  int v355 = a3;
                                  do
                                  {
                                    int v356 = sub_1000CD450(*v350, v462, v353);
                                    int v352 = *(_DWORD *)(v349 + 144);
                                    if (!v356) {
                                      break;
                                    }
                                    v350 += 4;
                                    ++v354;
                                  }

                                  while (v354 < v352);
                                }

                                if (v354 == v352)
                                {
                                  int v373 = 0;
                                  int v58 = v456;
                                  __int16 v60 = v446;
                                }

                                else
                                {
                                  int v58 = v456;
                                  __int16 v60 = v446;
                                  sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  v355,  v463[0],  v348,  0,  0,  0);
                                  int v373 = 1;
                                }

                                uint64_t v61 = (v373 + v346);
LABEL_332:
                                int v108 = v436;
LABEL_333:
                                __int16 v224 = (char *)v459 + 4;
LABEL_334:
                                uint64_t v222 = v433;
                                break;
                              case 14:
                                uint64_t v357 = v222;
                                int v427 = v61;
                                uint64_t v358 = v247;
                                sub_1000CC548(v462, (__int16 *)v249, v240 + 3);
                                int v359 = *v358;
                                uint64_t v360 = v441[7];
                                uint64_t v361 = *(void *)(v360 + 176);
                                int v362 = sub_1000CC52C((unint64_t)v462);
                                int v363 = *(_DWORD *)(v360 + 168);
                                if (v363 < 1)
                                {
                                  int v365 = 0;
                                  int v366 = a3;
                                }

                                else
                                {
                                  int v364 = v362;
                                  int v365 = 0;
                                  int v366 = a3;
                                  do
                                  {
                                    int v367 = sub_1000CD450(*(_WORD **)v361, v462, v364);
                                    int v363 = *(_DWORD *)(v360 + 168);
                                    if (!v367) {
                                      break;
                                    }
                                    v361 += 32LL;
                                    ++v365;
                                  }

                                  while (v365 < v363);
                                }

                                if (v365 == v363)
                                {
                                  int v374 = 0;
                                }

                                else
                                {
                                  uint64_t v375 = *(_WORD **)(v361 + 16);
                                  int v374 = 1;
                                  sub_1000B3680(v441, v375, 1LL, 1LL, 0LL, 5, (uint64_t)v463);
                                  sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  v366,  v463[0],  v359,  0,  0,  0);
                                }

                                int v58 = v456;
                                __int16 v60 = v446;
                                uint64_t v222 = v357;
                                uint64_t v61 = (v374 + v427);
                                LODWORD(v461) = 1;
                                goto LABEL_161;
                              default:
                                break;
                            }
                          }

                          else
                          {
                            char v253 = v234 == 15 || v233;
                            if ((v253 & 1) != 0) {
                              goto LABEL_344;
                            }
                            int v254 = (char *)v110 + 28 * v223;
                            uint64_t v423 = (int *)(v254 + 4);
                            int v420 = v254 + 8;
                            uint64_t v255 = 4LL * (int)v222;
                            uint64_t v256 = *(int *)((char *)v459 + v255);
                            if (*((_DWORD *)v254 + 2) + *((_DWORD *)v254 + 1) <= *(_DWORD *)((char *)v455 + v255) {
                            uint64_t v257 = (int)v222;
                            }
                            uint64_t v434 = v222;
                            int v258 = sub_1000CB108(v458[v256], 0);
                            uint64_t v415 = v257;
                            uint64_t v259 = v257 + 1;
                            int v260 = sub_1000CB108(v458[*((int *)v459 + v259)], v258);
                            int v228 = v223;
                            uint64_t v222 = v434;
                            if (v260 != v258) {
                              goto LABEL_344;
                            }
                            int v261 = sub_1000CB0C4(v258);
                            int v228 = v223;
                            uint64_t v222 = v434;
                            if (!v261) {
                              goto LABEL_344;
                            }
                            int v262 = *v423;
                            uint64_t v263 = *v420;
                            if ((int)v259 < (int)v442)
                            {
                              uint64_t v264 = v259 << 32;
                              uint64_t v265 = 4 * v259;
                              int v266 = (_DWORD *)v459 + v259;
                              int v267 = (_DWORD *)((char *)v455 + v265);
                              int v268 = v442 - 1 - v434;
                              while (*v266 < (int)v263 + v262)
                              {
                                int v269 = sub_1000CB108(v458[*((int *)v459 + v415)], v258);
                                int v228 = v223;
                                uint64_t v222 = v434;
                                if (v269 != v258) {
                                  goto LABEL_344;
                                }
                                int v262 = *v423;
                                uint64_t v263 = *v420;
                                v264 += (uint64_t)&_mh_execute_header;
                                ++v266;
                                ++v267;
                                if (!--v268)
                                {
                                  uint64_t v259 = (int)v442;
                                  goto LABEL_343;
                                }
                              }

                              uint64_t v259 = v264 >> 32;
                            }

LABEL_343:
                            if (*((_DWORD *)v459 + v259) <= (int)v263 + v262)
                            {
                              int v449 = (char *)&v458[v262];
                              uint64_t v388 = v263;
                              int v389 = sub_1000B37CC(v441, v449, 0LL, 0LL, v263, 30LL, (uint64_t)v440);
                              if (v389 < 1)
                              {
                                LOBYTE(v390) = 0;
                                int v392 = -1;
                              }

                              else
                              {
                                BOOL v390 = 0;
                                unint64_t v391 = v389 + 1LL;
                                int v392 = -1;
                                unint64_t v393 = (unint64_t)v438;
                                uint64_t v394 = v440;
                                do
                                {
                                  uint64_t v396 = (v391 - 2);
                                  sub_1000B33F8((char *)v441, v394[v396], v393, v437);
                                  unint64_t v397 = sub_1000CC52C(v393);
                                  if ((int)v397 < (int)v388)
                                  {
                                    uint64_t v395 = v388;
                                    uint64_t v394 = v440;
                                  }

                                  else
                                  {
                                    v398 = (_WORD *)v393;
                                    unint64_t v399 = v397;
                                    int v400 = sub_1000CD3EC(v449, v398, v397);
                                    uint64_t v394 = v440;
                                    if (v392 == -1
                                      || (uint64_t v395 = v388, (int)v399 > (int)v388)
                                      || (v390 ? (BOOL v401 = v400 == 0) : (BOOL v401 = 1),
                                          !v401 ? (int v402 = 0) : (int v402 = 1),
                                          (_DWORD)v399 == (_DWORD)v388 && v402))
                                    {
                                      int v392 = v440[v396];
                                      BOOL v390 = v400 == 0;
                                      uint64_t v395 = v399;
                                    }
                                  }

                                  uint64_t v388 = v395;
                                  --v391;
                                  unint64_t v393 = (unint64_t)v438;
                                }

                                while (v391 > 1);
                                unint64_t v460 = __PAIR64__(v390, v395);
                              }

                              sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v392,  *v423,  v388,  0,  v390);
                              uint64_t v61 = (v61 + 1);
                              uint64_t v222 = v434;
                              int v58 = v456;
                              __int16 v60 = v446;
                              if ((int)v434 >= (int)v442)
                              {
                                int v108 = v436;
                                __int16 v224 = (char *)v459 + 4;
                              }

                              else
                              {
                                double v403 = (int *)v459 + v415;
                                uint64_t v404 = (int)v442 - v415;
                                int v108 = v436;
                                __int16 v224 = (char *)v459 + 4;
                                while (1)
                                {
                                  int v405 = *v403++;
                                  if (v405 >= *v420 + *v423) {
                                    break;
                                  }
                                  uint64_t v222 = (v222 + 1);
                                  if (!--v404)
                                  {
                                    uint64_t v222 = v442;
                                    break;
                                  }
                                }
                              }
                            }

                            else
                            {
LABEL_344:
                              if ((int)v222 < (int)v442)
                              {
                                int v376 = 0;
                                uint64_t v377 = (char *)v110 + 28 * v228;
                                uint64_t v378 = v377 + 4;
                                uint64_t v379 = v377 + 8;
                                int v380 = v223 + 1;
                                uint64_t v381 = (int)v222;
                                unsigned int v435 = v442 + v61 - v222;
                                do
                                {
                                  int v382 = *((_DWORD *)v459 + v381);
                                  if (v382 >= *v379 + *v378)
                                  {
                                    uint64_t v222 = v381;
                                    goto LABEL_160;
                                  }

                                  if (*v226 == 3)
                                  {
                                    while (1)
                                      ;
                                  }

                                  char v383 = (char)v446;
                                  if (v446) {
                                    char v383 = *((_BYTE *)v446 + v381);
                                  }
                                  sub_1000B8938( a4,  (uint64_t)a5,  v452,  v453,  0LL,  (uint64_t)a9,  (int *)&v461 + 1,  a3,  v450[v381],  v382,  *((_DWORD *)v455 + v381),  0,  v383);
                                  if (*((_DWORD *)v110 + 7 * v380 + 7 * v376)
                                    && (int v384 = *((_DWORD *)v455 + v381) + *((_DWORD *)v459 + v381),
                                        *((_DWORD *)v110 + 7 * v380 + 7 * v376 + 1) < v384))
                                  {
                                    int v385 = v376 + 1;
                                    int v111 = v445;
                                    int v223 = v448;
                                    do
                                    {
                                      int v376 = v385;
                                      LODWORD(v461) = v385;
                                      int v386 = v448 + v385 + 1;
                                      if (!*((_DWORD *)v110 + 7 * v386)) {
                                        break;
                                      }
                                      int v387 = *((_DWORD *)v110 + 7 * v386 + 1);
                                      int v385 = v376 + 1;
                                    }

                                    while (v387 < v384);
                                  }

                                  else
                                  {
                                    int v111 = v445;
                                    int v223 = v448;
                                  }

                                  uint64_t v61 = (v61 + 1);
                                  ++v381;
                                }

                                while (v381 != (int)v442);
                                uint64_t v61 = v435;
                                uint64_t v222 = v442;
                              }

    if ((_DWORD)v232)
    {
      qsort(v48, (int)v232, 2uLL, (int (__cdecl *)(const void *, const void *))sub_1000D3E08);
      uint64_t v45 = v235;
      a2 = (_DWORD *)v407;
      if ((int)v235 < 1)
      {
        uint64_t v67 = v395;
      }

      else
      {
        char v249 = 0LL;
        int v250 = v235;
        int v251 = v48;
        uint64_t v67 = v395;
        do
        {
          if (++v249 < v250)
          {
            int v376 = v251;
            int v252 = *v251;
            char v253 = &a2[32 * v252];
            int v254 = *(void *)(v67 + 96);
            uint64_t v255 = v45;
            uint64_t v256 = &v48[v249];
            __dstc = v252;
            v252 <<= 7;
            unint64_t v399 = *(_DWORD *)(v67 + 112);
            uint64_t v257 = (_DWORD *)((char *)a2 + v252 + 4);
            char v383 = (__int16 *)((char *)a2 + v252 + 124);
            __srcb = (_DWORD *)((char *)a2 + v252 + 12);
            double v403 = v255;
            int v258 = &v394[v252];
            int v380 = v249;
            for (int i = v257; ; v257 = i)
            {
              uint64_t v259 = v250;
              while (1)
              {
                int v260 = *v256;
                if (a2[32 * v260] == *v253)
                {
                  int v261 = (int)a2[32 * v260 + 1];
                  if ((_DWORD)v261 == *v257
                    && (!v399
                     || *((unsigned __int8 *)&a2[32 * v260 + 22] + v261) == *((unsigned __int8 *)&a2[32 * __dstc + 22]
                                                                            + v261)))
                  {
                    break;
                  }
                }